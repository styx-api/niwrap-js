// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TALAIRACH_AVI_METADATA: Metadata = {
    id: "62db8e91323313e662697c3e2bf8d5e807bdecce.boutiques",
    name: "talairach_avi",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TalairachAviParameters {
    "@type": "freesurfer.talairach_avi";
    "input_file": InputPathType;
    "output_xfm": string;
    "atlas"?: string | null | undefined;
    "log"?: string | null | undefined;
    "debug": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.talairach_avi": talairach_avi_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.talairach_avi": talairach_avi_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `talairach_avi(...)`.
 *
 * @interface
 */
interface TalairachAviOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transform file
     */
    output_xfm_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input volume
 * @param output_xfm Output transform file
 * @param atlas Alternate target atlas (in freesurfer/average dir)
 * @param log Log file. Default is outdir/talairach_avi.log
 * @param debug Turn on debugging
 *
 * @returns Parameter dictionary
 */
function talairach_avi_params(
    input_file: InputPathType,
    output_xfm: string,
    atlas: string | null = null,
    log: string | null = null,
    debug: boolean = false,
): TalairachAviParameters {
    const params = {
        "@type": "freesurfer.talairach_avi" as const,
        "input_file": input_file,
        "output_xfm": output_xfm,
        "debug": debug,
    };
    if (atlas !== null) {
        params["atlas"] = atlas;
    }
    if (log !== null) {
        params["log"] = log;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function talairach_avi_cargs(
    params: TalairachAviParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("talairach_avi");
    cargs.push(
        "--i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "--xfm",
        (params["output_xfm"] ?? null)
    );
    if ((params["atlas"] ?? null) !== null) {
        cargs.push(
            "--atlas",
            (params["atlas"] ?? null)
        );
    }
    if ((params["log"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function talairach_avi_outputs(
    params: TalairachAviParameters,
    execution: Execution,
): TalairachAviOutputs {
    const ret: TalairachAviOutputs = {
        root: execution.outputFile("."),
        output_xfm_file: execution.outputFile([(params["output_xfm"] ?? null)].join('')),
    };
    return ret;
}


/**
 * talairach_avi
 *
 * Front-end for Avi Snyder's image registration tool. Computes the Talairach transform that maps the input volume to the MNI average_305.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalairachAviOutputs`).
 */
function talairach_avi_execute(
    params: TalairachAviParameters,
    runner: Runner | null = null,
): TalairachAviOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TALAIRACH_AVI_METADATA);
    params = execution.params(params)
    const cargs = talairach_avi_cargs(params, execution)
    const ret = talairach_avi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * talairach_avi
 *
 * Front-end for Avi Snyder's image registration tool. Computes the Talairach transform that maps the input volume to the MNI average_305.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input volume
 * @param output_xfm Output transform file
 * @param atlas Alternate target atlas (in freesurfer/average dir)
 * @param log Log file. Default is outdir/talairach_avi.log
 * @param debug Turn on debugging
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalairachAviOutputs`).
 */
function talairach_avi(
    input_file: InputPathType,
    output_xfm: string,
    atlas: string | null = null,
    log: string | null = null,
    debug: boolean = false,
    runner: Runner | null = null,
): TalairachAviOutputs {
    const params = talairach_avi_params(input_file, output_xfm, atlas, log, debug)
    return talairach_avi_execute(params, runner);
}


export {
      TALAIRACH_AVI_METADATA,
      TalairachAviOutputs,
      TalairachAviParameters,
      talairach_avi,
      talairach_avi_execute,
      talairach_avi_params,
};
