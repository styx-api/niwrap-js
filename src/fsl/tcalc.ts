// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCALC_METADATA: Metadata = {
    id: "d27c639dd6e3536dc5530596a5307caf2339a600.boutiques",
    name: "tcalc",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface TcalcParameters {
    "__STYXTYPE__": "tcalc";
    "input_image": InputPathType;
    "output_image": string;
    "echo_time"?: number | null | undefined;
    "repetition_time"?: number | null | undefined;
    "mrpar_file"?: InputPathType | null | undefined;
    "num_voxel_x"?: number | null | undefined;
    "num_voxel_y"?: number | null | undefined;
    "num_voxel_z"?: number | null | undefined;
    "voxel_size_x"?: number | null | undefined;
    "voxel_size_y"?: number | null | undefined;
    "voxel_size_z"?: number | null | undefined;
    "start_position"?: number | null | undefined;
    "noise_sigma"?: number | null | undefined;
    "save_flag": boolean;
    "verbose_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tcalc": tcalc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "tcalc": tcalc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tcalc(...)`.
 *
 * @interface
 */
interface TcalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output image generated after resampling
     */
    output_image_file: OutputPathType;
    /**
     * The original non-resampled output image, if save flag is used
     */
    original_output_image_file: OutputPathType;
}


function tcalc_params(
    input_image: InputPathType,
    output_image: string,
    echo_time: number | null = null,
    repetition_time: number | null = null,
    mrpar_file: InputPathType | null = null,
    num_voxel_x: number | null = null,
    num_voxel_y: number | null = null,
    num_voxel_z: number | null = null,
    voxel_size_x: number | null = null,
    voxel_size_y: number | null = null,
    voxel_size_z: number | null = null,
    start_position: number | null = null,
    noise_sigma: number | null = null,
    save_flag: boolean = false,
    verbose_flag: boolean = false,
): TcalcParameters {
    /**
     * Build parameters.
    
     * @param input_image Input image (4D phantom for theoretical calculations)
     * @param output_image Output image
     * @param echo_time Echo Time (TE) in seconds [e.g., T1-weighted images for 3T TE=0.01 s]
     * @param repetition_time Repetition Time (TR) in seconds [e.g., T1-weighted images for 3T TR=0.7 s]
     * @param mrpar_file MRpar File
     * @param num_voxel_x Number of Voxels along X (default: phantom)
     * @param num_voxel_y Number of Voxels along Y (default: phantom)
     * @param num_voxel_z Number of Voxels along Z (default: phantom)
     * @param voxel_size_x Size of voxels along X (default: phantom)
     * @param voxel_size_y Size of voxels along Y (default: phantom)
     * @param voxel_size_z Size of voxels along Z i.e., number of slices (default: phantom)
     * @param start_position Starting position of the volume in mm (default = 0mm)
     * @param noise_sigma Add noise with given sigma (default: 0 i.e., no noise)
     * @param save_flag Save original non-resample output image
     * @param verbose_flag Switch on diagnostic messages
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tcalc" as const,
        "input_image": input_image,
        "output_image": output_image,
        "save_flag": save_flag,
        "verbose_flag": verbose_flag,
    };
    if (echo_time !== null) {
        params["echo_time"] = echo_time;
    }
    if (repetition_time !== null) {
        params["repetition_time"] = repetition_time;
    }
    if (mrpar_file !== null) {
        params["mrpar_file"] = mrpar_file;
    }
    if (num_voxel_x !== null) {
        params["num_voxel_x"] = num_voxel_x;
    }
    if (num_voxel_y !== null) {
        params["num_voxel_y"] = num_voxel_y;
    }
    if (num_voxel_z !== null) {
        params["num_voxel_z"] = num_voxel_z;
    }
    if (voxel_size_x !== null) {
        params["voxel_size_x"] = voxel_size_x;
    }
    if (voxel_size_y !== null) {
        params["voxel_size_y"] = voxel_size_y;
    }
    if (voxel_size_z !== null) {
        params["voxel_size_z"] = voxel_size_z;
    }
    if (start_position !== null) {
        params["start_position"] = start_position;
    }
    if (noise_sigma !== null) {
        params["noise_sigma"] = noise_sigma;
    }
    return params;
}


function tcalc_cargs(
    params: TcalcParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tcalc");
    cargs.push(["--input=", execution.inputFile((params["input_image"] ?? null))].join(''));
    cargs.push(["--output=", (params["output_image"] ?? null)].join(''));
    if ((params["echo_time"] ?? null) !== null) {
        cargs.push(
            "--te",
            String((params["echo_time"] ?? null))
        );
    }
    if ((params["repetition_time"] ?? null) !== null) {
        cargs.push(
            "--tr",
            String((params["repetition_time"] ?? null))
        );
    }
    if ((params["mrpar_file"] ?? null) !== null) {
        cargs.push(
            "--mrpar",
            execution.inputFile((params["mrpar_file"] ?? null))
        );
    }
    if ((params["num_voxel_x"] ?? null) !== null) {
        cargs.push(
            "--nx",
            String((params["num_voxel_x"] ?? null))
        );
    }
    if ((params["num_voxel_y"] ?? null) !== null) {
        cargs.push(
            "--ny",
            String((params["num_voxel_y"] ?? null))
        );
    }
    if ((params["num_voxel_z"] ?? null) !== null) {
        cargs.push(
            "--nz",
            String((params["num_voxel_z"] ?? null))
        );
    }
    if ((params["voxel_size_x"] ?? null) !== null) {
        cargs.push(
            "--dx",
            String((params["voxel_size_x"] ?? null))
        );
    }
    if ((params["voxel_size_y"] ?? null) !== null) {
        cargs.push(
            "--dy",
            String((params["voxel_size_y"] ?? null))
        );
    }
    if ((params["voxel_size_z"] ?? null) !== null) {
        cargs.push(
            "--dz",
            String((params["voxel_size_z"] ?? null))
        );
    }
    if ((params["start_position"] ?? null) !== null) {
        cargs.push(
            "--zstart",
            String((params["start_position"] ?? null))
        );
    }
    if ((params["noise_sigma"] ?? null) !== null) {
        cargs.push(
            "--sigma",
            String((params["noise_sigma"] ?? null))
        );
    }
    if ((params["save_flag"] ?? null)) {
        cargs.push("--save");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("--verbose");
    }
    return cargs;
}


function tcalc_outputs(
    params: TcalcParameters,
    execution: Execution,
): TcalcOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TcalcOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
        original_output_image_file: execution.outputFile([(params["output_image"] ?? null), "_original"].join('')),
    };
    return ret;
}


function tcalc_execute(
    params: TcalcParameters,
    execution: Execution,
): TcalcOutputs {
    /**
     * Resample a 4D phantom for theoretical calculations.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TcalcOutputs`).
     */
    params = execution.params(params)
    const cargs = tcalc_cargs(params, execution)
    const ret = tcalc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tcalc(
    input_image: InputPathType,
    output_image: string,
    echo_time: number | null = null,
    repetition_time: number | null = null,
    mrpar_file: InputPathType | null = null,
    num_voxel_x: number | null = null,
    num_voxel_y: number | null = null,
    num_voxel_z: number | null = null,
    voxel_size_x: number | null = null,
    voxel_size_y: number | null = null,
    voxel_size_z: number | null = null,
    start_position: number | null = null,
    noise_sigma: number | null = null,
    save_flag: boolean = false,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): TcalcOutputs {
    /**
     * Resample a 4D phantom for theoretical calculations.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_image Input image (4D phantom for theoretical calculations)
     * @param output_image Output image
     * @param echo_time Echo Time (TE) in seconds [e.g., T1-weighted images for 3T TE=0.01 s]
     * @param repetition_time Repetition Time (TR) in seconds [e.g., T1-weighted images for 3T TR=0.7 s]
     * @param mrpar_file MRpar File
     * @param num_voxel_x Number of Voxels along X (default: phantom)
     * @param num_voxel_y Number of Voxels along Y (default: phantom)
     * @param num_voxel_z Number of Voxels along Z (default: phantom)
     * @param voxel_size_x Size of voxels along X (default: phantom)
     * @param voxel_size_y Size of voxels along Y (default: phantom)
     * @param voxel_size_z Size of voxels along Z i.e., number of slices (default: phantom)
     * @param start_position Starting position of the volume in mm (default = 0mm)
     * @param noise_sigma Add noise with given sigma (default: 0 i.e., no noise)
     * @param save_flag Save original non-resample output image
     * @param verbose_flag Switch on diagnostic messages
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TcalcOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCALC_METADATA);
    const params = tcalc_params(input_image, output_image, echo_time, repetition_time, mrpar_file, num_voxel_x, num_voxel_y, num_voxel_z, voxel_size_x, voxel_size_y, voxel_size_z, start_position, noise_sigma, save_flag, verbose_flag)
    return tcalc_execute(params, execution);
}


export {
      TCALC_METADATA,
      TcalcOutputs,
      TcalcParameters,
      tcalc,
      tcalc_params,
};
