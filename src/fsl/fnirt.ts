// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FNIRT_METADATA: Metadata = {
    id: "77b2d6e3b537f1a978e812b7bda849cdacef73da.boutiques",
    name: "fnirt",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FnirtParameters {
    "@type": "fsl.fnirt";
    "affine_file"?: InputPathType | null | undefined;
    "config_file"?: "T1_2_MNI152_2mm" | "FA_2_FMRIB58_1mm" | null | undefined;
    "field_file"?: InputPathType | null | undefined;
    "fieldcoeff_file"?: InputPathType | null | undefined;
    "in_file": InputPathType;
    "jacobian_file"?: InputPathType | null | undefined;
    "log_file"?: InputPathType | null | undefined;
    "modulatedref_file"?: string | null | undefined;
    "ref_file": InputPathType;
    "refmask_file"?: InputPathType | null | undefined;
    "warped_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fnirt": fnirt_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fnirt": fnirt_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fnirt(...)`.
 *
 * @interface
 */
interface FnirtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File with warp field.
     */
    field_file_outfile: OutputPathType | null;
    /**
     * File with field coefficients.
     */
    fieldcoeff_file_outfile: OutputPathType | null;
    /**
     * File containing jacobian of the field.
     */
    jacobian_file_outfile: OutputPathType | null;
    /**
     * Name of log-file.
     */
    log_file_outfile: OutputPathType | null;
    /**
     * File containing intensity modulated --ref.
     */
    modulatedref_file_outfile: OutputPathType | null;
    /**
     * Warped image.
     */
    warped_file_outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_file Name of input image.
 * @param ref_file Name of reference image.
 * @param affine_file Name of file containing affine transform.
 * @param config_file 't1_2_mni152_2mm' or 'fa_2_fmrib58_1mm' or file or string. Name of config file specifying command line arguments.
 * @param field_file file. Name of output file with field.
 * @param fieldcoeff_file string representing a file. Name of output file with field coefficients.
 * @param jacobian_file A file. Name of file for writing out the jacobian of the field (for diagnostic or vbm purposes).
 * @param log_file Name of log-file.
 * @param modulatedref_file string representing a file. Name of file for writing out intensity modulated --ref (for diagnostic purposes).
 * @param refmask_file Name of file with mask in reference space.
 * @param warped_file Name of output-file containing the --in image after it has been warped to the --ref image
 *
 * @returns Parameter dictionary
 */
function fnirt_params(
    in_file: InputPathType,
    ref_file: InputPathType,
    affine_file: InputPathType | null = null,
    config_file: "T1_2_MNI152_2mm" | "FA_2_FMRIB58_1mm" | null = null,
    field_file: InputPathType | null = null,
    fieldcoeff_file: InputPathType | null = null,
    jacobian_file: InputPathType | null = null,
    log_file: InputPathType | null = null,
    modulatedref_file: string | null = null,
    refmask_file: InputPathType | null = null,
    warped_file: InputPathType | null = null,
): FnirtParameters {
    const params = {
        "@type": "fsl.fnirt" as const,
        "in_file": in_file,
        "ref_file": ref_file,
    };
    if (affine_file !== null) {
        params["affine_file"] = affine_file;
    }
    if (config_file !== null) {
        params["config_file"] = config_file;
    }
    if (field_file !== null) {
        params["field_file"] = field_file;
    }
    if (fieldcoeff_file !== null) {
        params["fieldcoeff_file"] = fieldcoeff_file;
    }
    if (jacobian_file !== null) {
        params["jacobian_file"] = jacobian_file;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (modulatedref_file !== null) {
        params["modulatedref_file"] = modulatedref_file;
    }
    if (refmask_file !== null) {
        params["refmask_file"] = refmask_file;
    }
    if (warped_file !== null) {
        params["warped_file"] = warped_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fnirt_cargs(
    params: FnirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fnirt");
    if ((params["affine_file"] ?? null) !== null) {
        cargs.push(["--aff=", execution.inputFile((params["affine_file"] ?? null))].join(''));
    }
    if ((params["config_file"] ?? null) !== null) {
        cargs.push(["--config=", (params["config_file"] ?? null)].join(''));
    }
    if ((params["field_file"] ?? null) !== null) {
        cargs.push(["--fout=", execution.inputFile((params["field_file"] ?? null))].join(''));
    }
    if ((params["fieldcoeff_file"] ?? null) !== null) {
        cargs.push(["--cout=", execution.inputFile((params["fieldcoeff_file"] ?? null))].join(''));
    }
    cargs.push(["--in=", execution.inputFile((params["in_file"] ?? null))].join(''));
    if ((params["jacobian_file"] ?? null) !== null) {
        cargs.push(["--jout=", execution.inputFile((params["jacobian_file"] ?? null))].join(''));
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(["--logout=", execution.inputFile((params["log_file"] ?? null))].join(''));
    }
    if ((params["modulatedref_file"] ?? null) !== null) {
        cargs.push(["--refout=", (params["modulatedref_file"] ?? null)].join(''));
    }
    cargs.push(["--ref=", execution.inputFile((params["ref_file"] ?? null))].join(''));
    if ((params["refmask_file"] ?? null) !== null) {
        cargs.push(["--refmask=", execution.inputFile((params["refmask_file"] ?? null))].join(''));
    }
    if ((params["warped_file"] ?? null) !== null) {
        cargs.push(["--iout=", execution.inputFile((params["warped_file"] ?? null))].join(''));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fnirt_outputs(
    params: FnirtParameters,
    execution: Execution,
): FnirtOutputs {
    const ret: FnirtOutputs = {
        root: execution.outputFile("."),
        field_file_outfile: ((params["field_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["field_file"] ?? null)), ".nii.gz"].join('')) : null,
        fieldcoeff_file_outfile: ((params["fieldcoeff_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["fieldcoeff_file"] ?? null)), ".nii.gz"].join('')) : null,
        jacobian_file_outfile: ((params["jacobian_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["jacobian_file"] ?? null)), ".mat"].join('')) : null,
        log_file_outfile: ((params["log_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["log_file"] ?? null)), ".txt"].join('')) : null,
        modulatedref_file_outfile: ((params["modulatedref_file"] ?? null) !== null) ? execution.outputFile([(params["modulatedref_file"] ?? null), ".nii.gz"].join('')) : null,
        warped_file_outfile: ((params["warped_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["warped_file"] ?? null)), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * FSL non-linear registration.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FnirtOutputs`).
 */
function fnirt_execute(
    params: FnirtParameters,
    runner: Runner | null = null,
): FnirtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FNIRT_METADATA);
    params = execution.params(params)
    const cargs = fnirt_cargs(params, execution)
    const ret = fnirt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * FSL non-linear registration.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param in_file Name of input image.
 * @param ref_file Name of reference image.
 * @param affine_file Name of file containing affine transform.
 * @param config_file 't1_2_mni152_2mm' or 'fa_2_fmrib58_1mm' or file or string. Name of config file specifying command line arguments.
 * @param field_file file. Name of output file with field.
 * @param fieldcoeff_file string representing a file. Name of output file with field coefficients.
 * @param jacobian_file A file. Name of file for writing out the jacobian of the field (for diagnostic or vbm purposes).
 * @param log_file Name of log-file.
 * @param modulatedref_file string representing a file. Name of file for writing out intensity modulated --ref (for diagnostic purposes).
 * @param refmask_file Name of file with mask in reference space.
 * @param warped_file Name of output-file containing the --in image after it has been warped to the --ref image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FnirtOutputs`).
 */
function fnirt(
    in_file: InputPathType,
    ref_file: InputPathType,
    affine_file: InputPathType | null = null,
    config_file: "T1_2_MNI152_2mm" | "FA_2_FMRIB58_1mm" | null = null,
    field_file: InputPathType | null = null,
    fieldcoeff_file: InputPathType | null = null,
    jacobian_file: InputPathType | null = null,
    log_file: InputPathType | null = null,
    modulatedref_file: string | null = null,
    refmask_file: InputPathType | null = null,
    warped_file: InputPathType | null = null,
    runner: Runner | null = null,
): FnirtOutputs {
    const params = fnirt_params(in_file, ref_file, affine_file, config_file, field_file, fieldcoeff_file, jacobian_file, log_file, modulatedref_file, refmask_file, warped_file)
    return fnirt_execute(params, runner);
}


export {
      FNIRT_METADATA,
      FnirtOutputs,
      FnirtParameters,
      fnirt,
      fnirt_execute,
      fnirt_params,
};
