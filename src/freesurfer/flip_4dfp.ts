// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FLIP_4DFP_METADATA: Metadata = {
    id: "8ea4c9ced73015848191893b7f55466d9dc889a2.boutiques",
    name: "flip_4dfp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Flip4dfpParameters {
    "@type": "freesurfer.flip_4dfp";
    "input_image": InputPathType;
    "output_image"?: string | null | undefined;
    "flip_x": boolean;
    "flip_y": boolean;
    "flip_z": boolean;
    "endianness"?: "b" | "l" | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.flip_4dfp": flip_4dfp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.flip_4dfp": flip_4dfp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `flip_4dfp(...)`.
 *
 * @interface
 */
interface Flip4dfpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Flipped output 4dfp image
     */
    flipped_image: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_image Input 4dfp image file
 * @param output_image Output 4dfp image file. Default is input image root with '_flip' suffix.
 * @param flip_x Flip along x-axis
 * @param flip_y Flip along y-axis
 * @param flip_z Flip along z-axis
 * @param endianness Specify output endianness: 'b' for big endian, 'l' for little endian. Default is input endianness.
 *
 * @returns Parameter dictionary
 */
function flip_4dfp_params(
    input_image: InputPathType,
    output_image: string | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    endianness: "b" | "l" | null = null,
): Flip4dfpParameters {
    const params = {
        "@type": "freesurfer.flip_4dfp" as const,
        "input_image": input_image,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
    };
    if (output_image !== null) {
        params["output_image"] = output_image;
    }
    if (endianness !== null) {
        params["endianness"] = endianness;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function flip_4dfp_cargs(
    params: Flip4dfpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("flip_4dfp");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    if ((params["output_image"] ?? null) !== null) {
        cargs.push((params["output_image"] ?? null));
    }
    if ((params["flip_x"] ?? null)) {
        cargs.push("-x");
    }
    if ((params["flip_y"] ?? null)) {
        cargs.push("-y");
    }
    if ((params["flip_z"] ?? null)) {
        cargs.push("-z");
    }
    if ((params["endianness"] ?? null) !== null) {
        cargs.push(
            "-@",
            (params["endianness"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function flip_4dfp_outputs(
    params: Flip4dfpParameters,
    execution: Execution,
): Flip4dfpOutputs {
    const ret: Flip4dfpOutputs = {
        root: execution.outputFile("."),
        flipped_image: ((params["output_image"] ?? null) !== null) ? execution.outputFile([(params["output_image"] ?? null), ".4dfp.img"].join('')) : null,
    };
    return ret;
}


/**
 * A tool to flip 4dfp images along specified axes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Flip4dfpOutputs`).
 */
function flip_4dfp_execute(
    params: Flip4dfpParameters,
    execution: Execution,
): Flip4dfpOutputs {
    params = execution.params(params)
    const cargs = flip_4dfp_cargs(params, execution)
    const ret = flip_4dfp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to flip 4dfp images along specified axes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image Input 4dfp image file
 * @param output_image Output 4dfp image file. Default is input image root with '_flip' suffix.
 * @param flip_x Flip along x-axis
 * @param flip_y Flip along y-axis
 * @param flip_z Flip along z-axis
 * @param endianness Specify output endianness: 'b' for big endian, 'l' for little endian. Default is input endianness.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Flip4dfpOutputs`).
 */
function flip_4dfp(
    input_image: InputPathType,
    output_image: string | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    endianness: "b" | "l" | null = null,
    runner: Runner | null = null,
): Flip4dfpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FLIP_4DFP_METADATA);
    const params = flip_4dfp_params(input_image, output_image, flip_x, flip_y, flip_z, endianness)
    return flip_4dfp_execute(params, execution);
}


export {
      FLIP_4DFP_METADATA,
      Flip4dfpOutputs,
      Flip4dfpParameters,
      flip_4dfp,
      flip_4dfp_cargs,
      flip_4dfp_execute,
      flip_4dfp_outputs,
      flip_4dfp_params,
};
