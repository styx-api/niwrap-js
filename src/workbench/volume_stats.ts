// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_STATS_METADATA: Metadata = {
    id: "d4215cb938acff3d00c22867183d9b0f766e8efa.boutiques",
    name: "volume-stats",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeStatsRoiParameters {
    "@type": "workbench.volume-stats.roi";
    "roi_volume": InputPathType;
    "opt_match_maps": boolean;
}


interface VolumeStatsParameters {
    "@type": "workbench.volume-stats";
    "volume_in": InputPathType;
    "opt_reduce_operation"?: string | null | undefined;
    "opt_percentile_percent"?: number | null | undefined;
    "opt_subvolume_subvolume"?: string | null | undefined;
    "roi"?: VolumeStatsRoiParameters | null | undefined;
    "opt_show_map_name": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-stats": volume_stats_cargs,
        "workbench.volume-stats.roi": volume_stats_roi_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param roi_volume the roi, as a volume file
 * @param opt_match_maps each subvolume of input uses the corresponding subvolume from the roi file
 *
 * @returns Parameter dictionary
 */
function volume_stats_roi_params(
    roi_volume: InputPathType,
    opt_match_maps: boolean = false,
): VolumeStatsRoiParameters {
    const params = {
        "@type": "workbench.volume-stats.roi" as const,
        "roi_volume": roi_volume,
        "opt_match_maps": opt_match_maps,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_stats_roi_cargs(
    params: VolumeStatsRoiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-roi");
    cargs.push(execution.inputFile((params["roi_volume"] ?? null)));
    if ((params["opt_match_maps"] ?? null)) {
        cargs.push("-match-maps");
    }
    return cargs;
}


/**
 * Output object returned when calling `volume_stats(...)`.
 *
 * @interface
 */
interface VolumeStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_in the input volume
 * @param opt_reduce_operation use a reduction operation: the reduction operation
 * @param opt_percentile_percent give the value at a percentile: the percentile to find, must be between 0 and 100
 * @param opt_subvolume_subvolume only display output for one subvolume: the subvolume number or name
 * @param roi only consider data inside an roi
 * @param opt_show_map_name print map index and name before each output
 *
 * @returns Parameter dictionary
 */
function volume_stats_params(
    volume_in: InputPathType,
    opt_reduce_operation: string | null = null,
    opt_percentile_percent: number | null = null,
    opt_subvolume_subvolume: string | null = null,
    roi: VolumeStatsRoiParameters | null = null,
    opt_show_map_name: boolean = false,
): VolumeStatsParameters {
    const params = {
        "@type": "workbench.volume-stats" as const,
        "volume_in": volume_in,
        "opt_show_map_name": opt_show_map_name,
    };
    if (opt_reduce_operation !== null) {
        params["opt_reduce_operation"] = opt_reduce_operation;
    }
    if (opt_percentile_percent !== null) {
        params["opt_percentile_percent"] = opt_percentile_percent;
    }
    if (opt_subvolume_subvolume !== null) {
        params["opt_subvolume_subvolume"] = opt_subvolume_subvolume;
    }
    if (roi !== null) {
        params["roi"] = roi;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_stats_cargs(
    params: VolumeStatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-stats");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    if ((params["opt_reduce_operation"] ?? null) !== null) {
        cargs.push(
            "-reduce",
            (params["opt_reduce_operation"] ?? null)
        );
    }
    if ((params["opt_percentile_percent"] ?? null) !== null) {
        cargs.push(
            "-percentile",
            String((params["opt_percentile_percent"] ?? null))
        );
    }
    if ((params["opt_subvolume_subvolume"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvolume"] ?? null)
        );
    }
    if ((params["roi"] ?? null) !== null) {
        cargs.push(...dynCargs((params["roi"] ?? null)["@type"])((params["roi"] ?? null), execution));
    }
    if ((params["opt_show_map_name"] ?? null)) {
        cargs.push("-show-map-name");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_stats_outputs(
    params: VolumeStatsParameters,
    execution: Execution,
): VolumeStatsOutputs {
    const ret: VolumeStatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Spatial statistics on a volume file.
 *
 * For each subvolume of the input, a line of text is printed, resulting from the specified reduction or percentile operation.  Use -subvolume to only give output for a single subvolume.  If the -roi option is used without -match-maps, then each line will contain as many numbers as there are maps in the ROI file, separated by tab characters.  Exactly one of -reduce or -percentile must be specified.
 *
 * The argument to the -reduce option must be one of the following:
 *
 * MAX: the maximum value
 * MIN: the minimum value
 * INDEXMAX: the 1-based index of the maximum value
 * INDEXMIN: the 1-based index of the minimum value
 * SUM: add all values
 * PRODUCT: multiply all values
 * MEAN: the mean of the data
 * STDEV: the standard deviation (N denominator)
 * SAMPSTDEV: the sample standard deviation (N-1 denominator)
 * VARIANCE: the variance of the data
 * TSNR: mean divided by sample standard deviation (N-1 denominator)
 * COV: sample standard deviation (N-1 denominator) divided by mean
 * L2NORM: square root of sum of squares
 * MEDIAN: the median of the data
 * MODE: the mode of the data
 * COUNT_NONZERO: the number of nonzero elements in the data
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeStatsOutputs`).
 */
function volume_stats_execute(
    params: VolumeStatsParameters,
    runner: Runner | null = null,
): VolumeStatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_STATS_METADATA);
    params = execution.params(params)
    const cargs = volume_stats_cargs(params, execution)
    const ret = volume_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Spatial statistics on a volume file.
 *
 * For each subvolume of the input, a line of text is printed, resulting from the specified reduction or percentile operation.  Use -subvolume to only give output for a single subvolume.  If the -roi option is used without -match-maps, then each line will contain as many numbers as there are maps in the ROI file, separated by tab characters.  Exactly one of -reduce or -percentile must be specified.
 *
 * The argument to the -reduce option must be one of the following:
 *
 * MAX: the maximum value
 * MIN: the minimum value
 * INDEXMAX: the 1-based index of the maximum value
 * INDEXMIN: the 1-based index of the minimum value
 * SUM: add all values
 * PRODUCT: multiply all values
 * MEAN: the mean of the data
 * STDEV: the standard deviation (N denominator)
 * SAMPSTDEV: the sample standard deviation (N-1 denominator)
 * VARIANCE: the variance of the data
 * TSNR: mean divided by sample standard deviation (N-1 denominator)
 * COV: sample standard deviation (N-1 denominator) divided by mean
 * L2NORM: square root of sum of squares
 * MEDIAN: the median of the data
 * MODE: the mode of the data
 * COUNT_NONZERO: the number of nonzero elements in the data
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_in the input volume
 * @param opt_reduce_operation use a reduction operation: the reduction operation
 * @param opt_percentile_percent give the value at a percentile: the percentile to find, must be between 0 and 100
 * @param opt_subvolume_subvolume only display output for one subvolume: the subvolume number or name
 * @param roi only consider data inside an roi
 * @param opt_show_map_name print map index and name before each output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeStatsOutputs`).
 */
function volume_stats(
    volume_in: InputPathType,
    opt_reduce_operation: string | null = null,
    opt_percentile_percent: number | null = null,
    opt_subvolume_subvolume: string | null = null,
    roi: VolumeStatsRoiParameters | null = null,
    opt_show_map_name: boolean = false,
    runner: Runner | null = null,
): VolumeStatsOutputs {
    const params = volume_stats_params(volume_in, opt_reduce_operation, opt_percentile_percent, opt_subvolume_subvolume, roi, opt_show_map_name)
    return volume_stats_execute(params, runner);
}


export {
      VOLUME_STATS_METADATA,
      VolumeStatsOutputs,
      VolumeStatsParameters,
      VolumeStatsRoiParameters,
      volume_stats,
      volume_stats_execute,
      volume_stats_params,
      volume_stats_roi_params,
};
