// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_CURVATURE_METADATA: Metadata = {
    id: "959b1a4fb2add4507cd3f4cc23eb187ef2dc3681.boutiques",
    name: "surface-curvature",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceCurvatureParameters {
    "@type"?: "workbench/surface-curvature";
    "surface": InputPathType;
    "opt_mean_mean_out"?: string | null | undefined;
    "opt_gauss_gauss_out"?: string | null | undefined;
}
type SurfaceCurvatureParametersTagged = Required<Pick<SurfaceCurvatureParameters, '@type'>> & SurfaceCurvatureParameters;


/**
 * Output object returned when calling `SurfaceCurvatureParameters(...)`.
 *
 * @interface
 */
interface SurfaceCurvatureOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output mean curvature: mean curvature metric
     */
    opt_mean_mean_out: OutputPathType | null;
    /**
     * output gaussian curvature: gaussian curvature metric
     */
    opt_gauss_gauss_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param surface the surface to compute the curvature of
 * @param opt_mean_mean_out output mean curvature: mean curvature metric
 * @param opt_gauss_gauss_out output gaussian curvature: gaussian curvature metric
 *
 * @returns Parameter dictionary
 */
function surface_curvature_params(
    surface: InputPathType,
    opt_mean_mean_out: string | null = null,
    opt_gauss_gauss_out: string | null = null,
): SurfaceCurvatureParametersTagged {
    const params = {
        "@type": "workbench/surface-curvature" as const,
        "surface": surface,
    };
    if (opt_mean_mean_out !== null) {
        params["opt_mean_mean_out"] = opt_mean_mean_out;
    }
    if (opt_gauss_gauss_out !== null) {
        params["opt_gauss_gauss_out"] = opt_gauss_gauss_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_curvature_cargs(
    params: SurfaceCurvatureParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-curvature");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_mean_mean_out"] ?? null) !== null) {
        cargs.push(
            "-mean",
            (params["opt_mean_mean_out"] ?? null)
        );
    }
    if ((params["opt_gauss_gauss_out"] ?? null) !== null) {
        cargs.push(
            "-gauss",
            (params["opt_gauss_gauss_out"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_curvature_outputs(
    params: SurfaceCurvatureParameters,
    execution: Execution,
): SurfaceCurvatureOutputs {
    const ret: SurfaceCurvatureOutputs = {
        root: execution.outputFile("."),
        opt_mean_mean_out: ((params["opt_mean_mean_out"] ?? null) !== null) ? execution.outputFile([(params["opt_mean_mean_out"] ?? null)].join('')) : null,
        opt_gauss_gauss_out: ((params["opt_gauss_gauss_out"] ?? null) !== null) ? execution.outputFile([(params["opt_gauss_gauss_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * surface-curvature
 *
 * Calculate curvature of surface.
 *
 * Compute the curvature of the surface, using the method from:
 * Interactive Texture Mapping by J. Maillot, Yahia, and Verroust, 1993.
 * ACM-0-98791-601-8/93/008.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceCurvatureOutputs`).
 */
function surface_curvature_execute(
    params: SurfaceCurvatureParameters,
    runner: Runner | null = null,
): SurfaceCurvatureOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_CURVATURE_METADATA);
    params = execution.params(params)
    const cargs = surface_curvature_cargs(params, execution)
    const ret = surface_curvature_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-curvature
 *
 * Calculate curvature of surface.
 *
 * Compute the curvature of the surface, using the method from:
 * Interactive Texture Mapping by J. Maillot, Yahia, and Verroust, 1993.
 * ACM-0-98791-601-8/93/008.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to compute the curvature of
 * @param opt_mean_mean_out output mean curvature: mean curvature metric
 * @param opt_gauss_gauss_out output gaussian curvature: gaussian curvature metric
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceCurvatureOutputs`).
 */
function surface_curvature(
    surface: InputPathType,
    opt_mean_mean_out: string | null = null,
    opt_gauss_gauss_out: string | null = null,
    runner: Runner | null = null,
): SurfaceCurvatureOutputs {
    const params = surface_curvature_params(surface, opt_mean_mean_out, opt_gauss_gauss_out)
    return surface_curvature_execute(params, runner);
}


export {
      SURFACE_CURVATURE_METADATA,
      SurfaceCurvatureOutputs,
      surface_curvature,
      surface_curvature_execute,
      surface_curvature_params,
};
