// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ICO_SUPERSAMPLE_METADATA: Metadata = {
    id: "afdc2214ca88f6905d69becf40fba25d4f48edea.boutiques",
    name: "ico_supersample",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface IcoSupersampleParameters {
    "@type": "freesurfer.ico_supersample";
    "refine": boolean;
    "radius"?: number | null | undefined;
    "projection_point"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.ico_supersample": ico_supersample_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.ico_supersample": ico_supersample_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ico_supersample(...)`.
 *
 * @interface
 */
interface IcoSupersampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file containing the refined icosahedron mesh.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param refine Refine the icosahedron mesh
 * @param radius Radius of the sphere onto which the icosahedron is projected
 * @param projection_point Projection point for the icosahedron refinement. Enter three floating point values separated by spaces.
 *
 * @returns Parameter dictionary
 */
function ico_supersample_params(
    refine: boolean = false,
    radius: number | null = null,
    projection_point: Array<number> | null = null,
): IcoSupersampleParameters {
    const params = {
        "@type": "freesurfer.ico_supersample" as const,
        "refine": refine,
    };
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (projection_point !== null) {
        params["projection_point"] = projection_point;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ico_supersample_cargs(
    params: IcoSupersampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ico_supersample");
    if ((params["refine"] ?? null)) {
        cargs.push("-y");
    }
    if ((params["radius"] ?? null) !== null) {
        cargs.push(String((params["radius"] ?? null)));
    }
    if ((params["projection_point"] ?? null) !== null) {
        cargs.push(...(params["projection_point"] ?? null).map(String));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ico_supersample_outputs(
    params: IcoSupersampleParameters,
    execution: Execution,
): IcoSupersampleOutputs {
    const ret: IcoSupersampleOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["refined_icosahedron.obj"].join('')),
    };
    return ret;
}


/**
 * ico_supersample
 *
 * A tool for refining icosahedron meshes with user-specified parameters.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `IcoSupersampleOutputs`).
 */
function ico_supersample_execute(
    params: IcoSupersampleParameters,
    runner: Runner | null = null,
): IcoSupersampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ICO_SUPERSAMPLE_METADATA);
    params = execution.params(params)
    const cargs = ico_supersample_cargs(params, execution)
    const ret = ico_supersample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ico_supersample
 *
 * A tool for refining icosahedron meshes with user-specified parameters.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param refine Refine the icosahedron mesh
 * @param radius Radius of the sphere onto which the icosahedron is projected
 * @param projection_point Projection point for the icosahedron refinement. Enter three floating point values separated by spaces.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `IcoSupersampleOutputs`).
 */
function ico_supersample(
    refine: boolean = false,
    radius: number | null = null,
    projection_point: Array<number> | null = null,
    runner: Runner | null = null,
): IcoSupersampleOutputs {
    const params = ico_supersample_params(refine, radius, projection_point)
    return ico_supersample_execute(params, runner);
}


export {
      ICO_SUPERSAMPLE_METADATA,
      IcoSupersampleOutputs,
      IcoSupersampleParameters,
      ico_supersample,
      ico_supersample_execute,
      ico_supersample_params,
};
