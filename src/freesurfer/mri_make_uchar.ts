// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MAKE_UCHAR_METADATA: Metadata = {
    id: "125a7b8010e7a6e47c1c93bba9839070d4e12157.boutiques",
    name: "mri_make_uchar",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMakeUcharParameters {
    "@type": "freesurfer.mri_make_uchar";
    "input_volume": InputPathType;
    "talairach_xform": InputPathType;
    "output_volume": string;
    "first_percentile"?: number | null | undefined;
    "wm_percentile"?: number | null | undefined;
    "max_radius"?: number | null | undefined;
    "cumulative_histo"?: string | null | undefined;
    "vradvol"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_make_uchar": mri_make_uchar_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_make_uchar": mri_make_uchar_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_make_uchar(...)`.
 *
 * @interface
 */
interface MriMakeUcharOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume from mri_make_uchar processing
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume file.
 * @param talairach_xform Talairach transformation file.
 * @param output_volume Output volume file.
 * @param first_percentile First percentile for histogram calculation (default 0.01).
 * @param wm_percentile White matter percentile for histogram calculation (default 0.9).
 * @param max_radius Maximum radius for voxel consideration (default 50).
 * @param cumulative_histo Cumulative histogram file.
 * @param vradvol Volume file where everything outside MAX_R is set to 0.
 *
 * @returns Parameter dictionary
 */
function mri_make_uchar_params(
    input_volume: InputPathType,
    talairach_xform: InputPathType,
    output_volume: string,
    first_percentile: number | null = 0.01,
    wm_percentile: number | null = 0.9,
    max_radius: number | null = 50,
    cumulative_histo: string | null = null,
    vradvol: string | null = null,
): MriMakeUcharParameters {
    const params = {
        "@type": "freesurfer.mri_make_uchar" as const,
        "input_volume": input_volume,
        "talairach_xform": talairach_xform,
        "output_volume": output_volume,
    };
    if (first_percentile !== null) {
        params["first_percentile"] = first_percentile;
    }
    if (wm_percentile !== null) {
        params["wm_percentile"] = wm_percentile;
    }
    if (max_radius !== null) {
        params["max_radius"] = max_radius;
    }
    if (cumulative_histo !== null) {
        params["cumulative_histo"] = cumulative_histo;
    }
    if (vradvol !== null) {
        params["vradvol"] = vradvol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_make_uchar_cargs(
    params: MriMakeUcharParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_make_uchar");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["talairach_xform"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["first_percentile"] ?? null) !== null) {
        cargs.push(
            "-f",
            String((params["first_percentile"] ?? null))
        );
    }
    if ((params["wm_percentile"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["wm_percentile"] ?? null))
        );
    }
    if ((params["max_radius"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["max_radius"] ?? null))
        );
    }
    if ((params["cumulative_histo"] ?? null) !== null) {
        cargs.push(
            "-h",
            (params["cumulative_histo"] ?? null)
        );
    }
    if ((params["vradvol"] ?? null) !== null) {
        cargs.push(
            "-v",
            (params["vradvol"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_make_uchar_outputs(
    params: MriMakeUcharParameters,
    execution: Execution,
): MriMakeUcharOutputs {
    const ret: MriMakeUcharOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Tool to adjust intensity of brain MRI images using a Talairach transformation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMakeUcharOutputs`).
 */
function mri_make_uchar_execute(
    params: MriMakeUcharParameters,
    runner: Runner | null = null,
): MriMakeUcharOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MAKE_UCHAR_METADATA);
    params = execution.params(params)
    const cargs = mri_make_uchar_cargs(params, execution)
    const ret = mri_make_uchar_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool to adjust intensity of brain MRI images using a Talairach transformation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume file.
 * @param talairach_xform Talairach transformation file.
 * @param output_volume Output volume file.
 * @param first_percentile First percentile for histogram calculation (default 0.01).
 * @param wm_percentile White matter percentile for histogram calculation (default 0.9).
 * @param max_radius Maximum radius for voxel consideration (default 50).
 * @param cumulative_histo Cumulative histogram file.
 * @param vradvol Volume file where everything outside MAX_R is set to 0.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMakeUcharOutputs`).
 */
function mri_make_uchar(
    input_volume: InputPathType,
    talairach_xform: InputPathType,
    output_volume: string,
    first_percentile: number | null = 0.01,
    wm_percentile: number | null = 0.9,
    max_radius: number | null = 50,
    cumulative_histo: string | null = null,
    vradvol: string | null = null,
    runner: Runner | null = null,
): MriMakeUcharOutputs {
    const params = mri_make_uchar_params(input_volume, talairach_xform, output_volume, first_percentile, wm_percentile, max_radius, cumulative_histo, vradvol)
    return mri_make_uchar_execute(params, runner);
}


export {
      MRI_MAKE_UCHAR_METADATA,
      MriMakeUcharOutputs,
      MriMakeUcharParameters,
      mri_make_uchar,
      mri_make_uchar_execute,
      mri_make_uchar_params,
};
