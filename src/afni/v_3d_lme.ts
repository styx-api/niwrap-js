// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LME_METADATA: Metadata = {
    id: "e9a80d6729c55d33424066db0a326673e6b70516.boutiques",
    name: "3dLME",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLmeParameters {
    "__STYXTYPE__": "3dLME";
    "PREFIX": string;
    "MODEL": string;
    "DATA_TABLE": string;
    "BOUNDS"?: Array<number> | null | undefined;
    "CIO_FLAG": boolean;
    "COR_STR"?: string | null | undefined;
    "CUTOFF"?: number | null | undefined;
    "DBG_ARGS_FLAG": boolean;
    "JOBS"?: number | null | undefined;
    "GLT_CODE"?: string | null | undefined;
    "GLT_LABEL"?: string | null | undefined;
    "GLF_LABEL"?: string | null | undefined;
    "GLF_CODE"?: string | null | undefined;
    "ICC_FLAG": boolean;
    "ICCB_FLAG": boolean;
    "LOG_LIK_FLAG": boolean;
    "LOGIT_FLAG": boolean;
    "ML_FLAG": boolean;
    "QVARS_CENTERS"?: string | null | undefined;
    "QVARS"?: string | null | undefined;
    "RANEFF"?: string | null | undefined;
    "MASK"?: InputPathType | null | undefined;
    "NUM_GLF"?: number | null | undefined;
    "NUM_GLT"?: number | null | undefined;
    "RESID"?: string | null | undefined;
    "RE"?: string | null | undefined;
    "REPREFIX"?: string | null | undefined;
    "RIO_FLAG": boolean;
    "SHOW_OPTIONS_FLAG": boolean;
    "SS_TYPE"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dLME": v_3d_lme_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dLME": v_3d_lme_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_lme(...)`.
 *
 * @interface
 */
interface V3dLmeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file in NIfTI format
     */
    output_nifti: OutputPathType;
}


function v_3d_lme_params(
    prefix: string,
    model: string,
    data_table: string,
    bounds: Array<number> | null = null,
    cio_flag: boolean = false,
    cor_str: string | null = null,
    cutoff: number | null = null,
    dbg_args_flag: boolean = false,
    jobs: number | null = null,
    glt_code: string | null = null,
    glt_label: string | null = null,
    glf_label: string | null = null,
    glf_code: string | null = null,
    icc_flag: boolean = false,
    iccb_flag: boolean = false,
    log_lik_flag: boolean = false,
    logit_flag: boolean = false,
    ml_flag: boolean = false,
    qvars_centers: string | null = null,
    qvars: string | null = null,
    raneff: string | null = null,
    mask: InputPathType | null = null,
    num_glf: number | null = null,
    num_glt: number | null = null,
    resid: string | null = null,
    re: string | null = null,
    reprefix: string | null = null,
    rio_flag: boolean = false,
    show_options_flag: boolean = false,
    ss_type: number | null = null,
): V3dLmeParameters {
    /**
     * Build parameters.
    
     * @param prefix Prefix for output files
     * @param model Model formula describing the fixed effects
     * @param data_table Data table description
     * @param bounds Lower and upper bounds for outlier removal
     * @param cio_flag Use AFNI's C io functions (default) or R's io functions with -Rio
     * @param cor_str Specify the correlation structure of the residuals
     * @param cutoff Specify the cutoff value for accuracy in logistic regression analysis
     * @param dbg_args_flag Enable saving parameters for debugging
     * @param jobs Number of jobs for parallel computing
     * @param glt_code General linear test coding
     * @param glt_label Label for general linear test
     * @param glf_label Label for general linear F-test
     * @param glf_code General linear F-test coding
     * @param icc_flag Compute voxel-wise intra-class correlation
     * @param iccb_flag Compute voxel-wise intra-class correlation with Bayesian approach
     * @param log_lik_flag Include voxel-wise log likelihood in the output
     * @param logit_flag Perform voxel-wise logistic modeling
     * @param ml_flag Use Maximum Likelihood estimation instead of REML
     * @param qvars_centers Centering values for quantitative variables
     * @param qvars Identify quantitative variables (or covariates)
     * @param raneff Specify the random effects
     * @param mask Mask file for voxel processing
     * @param num_glf Number of general linear F-tests
     * @param num_glt Number of general linear t-tests
     * @param resid Prefix for residuals output file
     * @param re List of variables whose random effects are saved in the output
     * @param reprefix Prefix for random effects output file
     * @param rio_flag Use R's io functions instead of AFNI's C io functions
     * @param show_options_flag List of allowed options
     * @param ss_type Specify the type for sums of squares in the F-statistics
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dLME" as const,
        "PREFIX": prefix,
        "MODEL": model,
        "DATA_TABLE": data_table,
        "CIO_FLAG": cio_flag,
        "DBG_ARGS_FLAG": dbg_args_flag,
        "ICC_FLAG": icc_flag,
        "ICCB_FLAG": iccb_flag,
        "LOG_LIK_FLAG": log_lik_flag,
        "LOGIT_FLAG": logit_flag,
        "ML_FLAG": ml_flag,
        "RIO_FLAG": rio_flag,
        "SHOW_OPTIONS_FLAG": show_options_flag,
    };
    if (bounds !== null) {
        params["BOUNDS"] = bounds;
    }
    if (cor_str !== null) {
        params["COR_STR"] = cor_str;
    }
    if (cutoff !== null) {
        params["CUTOFF"] = cutoff;
    }
    if (jobs !== null) {
        params["JOBS"] = jobs;
    }
    if (glt_code !== null) {
        params["GLT_CODE"] = glt_code;
    }
    if (glt_label !== null) {
        params["GLT_LABEL"] = glt_label;
    }
    if (glf_label !== null) {
        params["GLF_LABEL"] = glf_label;
    }
    if (glf_code !== null) {
        params["GLF_CODE"] = glf_code;
    }
    if (qvars_centers !== null) {
        params["QVARS_CENTERS"] = qvars_centers;
    }
    if (qvars !== null) {
        params["QVARS"] = qvars;
    }
    if (raneff !== null) {
        params["RANEFF"] = raneff;
    }
    if (mask !== null) {
        params["MASK"] = mask;
    }
    if (num_glf !== null) {
        params["NUM_GLF"] = num_glf;
    }
    if (num_glt !== null) {
        params["NUM_GLT"] = num_glt;
    }
    if (resid !== null) {
        params["RESID"] = resid;
    }
    if (re !== null) {
        params["RE"] = re;
    }
    if (reprefix !== null) {
        params["REPREFIX"] = reprefix;
    }
    if (ss_type !== null) {
        params["SS_TYPE"] = ss_type;
    }
    return params;
}


function v_3d_lme_cargs(
    params: V3dLmeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dLME");
    cargs.push(
        "-prefix",
        (params["PREFIX"] ?? null)
    );
    cargs.push(
        "-model",
        (params["MODEL"] ?? null)
    );
    cargs.push(
        "-dataTable",
        (params["DATA_TABLE"] ?? null)
    );
    if ((params["BOUNDS"] ?? null) !== null) {
        cargs.push(
            "-bounds",
            ...(params["BOUNDS"] ?? null).map(String)
        );
    }
    if ((params["CIO_FLAG"] ?? null)) {
        cargs.push("-cio");
    }
    if ((params["COR_STR"] ?? null) !== null) {
        cargs.push(
            "-corStr",
            (params["COR_STR"] ?? null)
        );
    }
    if ((params["CUTOFF"] ?? null) !== null) {
        cargs.push(
            "-cutoff",
            String((params["CUTOFF"] ?? null))
        );
    }
    if ((params["DBG_ARGS_FLAG"] ?? null)) {
        cargs.push("-dbgArgs");
    }
    if ((params["JOBS"] ?? null) !== null) {
        cargs.push(
            "-jobs",
            String((params["JOBS"] ?? null))
        );
    }
    if ((params["GLT_CODE"] ?? null) !== null) {
        cargs.push(
            "-gltCode",
            (params["GLT_CODE"] ?? null)
        );
    }
    if ((params["GLT_LABEL"] ?? null) !== null) {
        cargs.push(
            "-gltLabel",
            (params["GLT_LABEL"] ?? null)
        );
    }
    if ((params["GLF_LABEL"] ?? null) !== null) {
        cargs.push(
            "-glfLabel",
            (params["GLF_LABEL"] ?? null)
        );
    }
    if ((params["GLF_CODE"] ?? null) !== null) {
        cargs.push(
            "-glfCode",
            (params["GLF_CODE"] ?? null)
        );
    }
    if ((params["ICC_FLAG"] ?? null)) {
        cargs.push("-ICC");
    }
    if ((params["ICCB_FLAG"] ?? null)) {
        cargs.push("-ICCb");
    }
    if ((params["LOG_LIK_FLAG"] ?? null)) {
        cargs.push("-logLik");
    }
    if ((params["LOGIT_FLAG"] ?? null)) {
        cargs.push("-LOGIT");
    }
    cargs.push("-ml");
    if ((params["ML_FLAG"] ?? null)) {
        cargs.push("-ML");
    }
    if ((params["QVARS_CENTERS"] ?? null) !== null) {
        cargs.push(
            "-qVarsCenters",
            (params["QVARS_CENTERS"] ?? null)
        );
    }
    if ((params["QVARS"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["QVARS"] ?? null)
        );
    }
    if ((params["RANEFF"] ?? null) !== null) {
        cargs.push(
            "-ranEff",
            (params["RANEFF"] ?? null)
        );
    }
    if ((params["MASK"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["MASK"] ?? null))
        );
    }
    if ((params["NUM_GLF"] ?? null) !== null) {
        cargs.push(
            "-num_glf",
            String((params["NUM_GLF"] ?? null))
        );
    }
    if ((params["NUM_GLT"] ?? null) !== null) {
        cargs.push(
            "-num_glt",
            String((params["NUM_GLT"] ?? null))
        );
    }
    if ((params["RESID"] ?? null) !== null) {
        cargs.push(
            "-resid",
            (params["RESID"] ?? null)
        );
    }
    if ((params["RE"] ?? null) !== null) {
        cargs.push(
            "-RE",
            (params["RE"] ?? null)
        );
    }
    if ((params["REPREFIX"] ?? null) !== null) {
        cargs.push(
            "-REprefix",
            (params["REPREFIX"] ?? null)
        );
    }
    cargs.push("-RIO");
    if ((params["RIO_FLAG"] ?? null)) {
        cargs.push("-Rio");
    }
    if ((params["SHOW_OPTIONS_FLAG"] ?? null)) {
        cargs.push("-show_allowed_options");
    }
    if ((params["SS_TYPE"] ?? null) !== null) {
        cargs.push(
            "-SS_type",
            String((params["SS_TYPE"] ?? null))
        );
    }
    return cargs;
}


function v_3d_lme_outputs(
    params: V3dLmeParameters,
    execution: Execution,
): V3dLmeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dLmeOutputs = {
        root: execution.outputFile("."),
        output_nifti: execution.outputFile([(params["PREFIX"] ?? null), ".nii"].join('')),
    };
    return ret;
}


function v_3d_lme_execute(
    params: V3dLmeParameters,
    execution: Execution,
): V3dLmeOutputs {
    /**
     * AFNI Group Analysis Program with Linear Mixed-Effects Modeling Approach.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dLmeOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_lme_cargs(params, execution)
    const ret = v_3d_lme_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_lme(
    prefix: string,
    model: string,
    data_table: string,
    bounds: Array<number> | null = null,
    cio_flag: boolean = false,
    cor_str: string | null = null,
    cutoff: number | null = null,
    dbg_args_flag: boolean = false,
    jobs: number | null = null,
    glt_code: string | null = null,
    glt_label: string | null = null,
    glf_label: string | null = null,
    glf_code: string | null = null,
    icc_flag: boolean = false,
    iccb_flag: boolean = false,
    log_lik_flag: boolean = false,
    logit_flag: boolean = false,
    ml_flag: boolean = false,
    qvars_centers: string | null = null,
    qvars: string | null = null,
    raneff: string | null = null,
    mask: InputPathType | null = null,
    num_glf: number | null = null,
    num_glt: number | null = null,
    resid: string | null = null,
    re: string | null = null,
    reprefix: string | null = null,
    rio_flag: boolean = false,
    show_options_flag: boolean = false,
    ss_type: number | null = null,
    runner: Runner | null = null,
): V3dLmeOutputs {
    /**
     * AFNI Group Analysis Program with Linear Mixed-Effects Modeling Approach.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix Prefix for output files
     * @param model Model formula describing the fixed effects
     * @param data_table Data table description
     * @param bounds Lower and upper bounds for outlier removal
     * @param cio_flag Use AFNI's C io functions (default) or R's io functions with -Rio
     * @param cor_str Specify the correlation structure of the residuals
     * @param cutoff Specify the cutoff value for accuracy in logistic regression analysis
     * @param dbg_args_flag Enable saving parameters for debugging
     * @param jobs Number of jobs for parallel computing
     * @param glt_code General linear test coding
     * @param glt_label Label for general linear test
     * @param glf_label Label for general linear F-test
     * @param glf_code General linear F-test coding
     * @param icc_flag Compute voxel-wise intra-class correlation
     * @param iccb_flag Compute voxel-wise intra-class correlation with Bayesian approach
     * @param log_lik_flag Include voxel-wise log likelihood in the output
     * @param logit_flag Perform voxel-wise logistic modeling
     * @param ml_flag Use Maximum Likelihood estimation instead of REML
     * @param qvars_centers Centering values for quantitative variables
     * @param qvars Identify quantitative variables (or covariates)
     * @param raneff Specify the random effects
     * @param mask Mask file for voxel processing
     * @param num_glf Number of general linear F-tests
     * @param num_glt Number of general linear t-tests
     * @param resid Prefix for residuals output file
     * @param re List of variables whose random effects are saved in the output
     * @param reprefix Prefix for random effects output file
     * @param rio_flag Use R's io functions instead of AFNI's C io functions
     * @param show_options_flag List of allowed options
     * @param ss_type Specify the type for sums of squares in the F-statistics
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dLmeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LME_METADATA);
    const params = v_3d_lme_params(prefix, model, data_table, bounds, cio_flag, cor_str, cutoff, dbg_args_flag, jobs, glt_code, glt_label, glf_label, glf_code, icc_flag, iccb_flag, log_lik_flag, logit_flag, ml_flag, qvars_centers, qvars, raneff, mask, num_glf, num_glt, resid, re, reprefix, rio_flag, show_options_flag, ss_type)
    return v_3d_lme_execute(params, execution);
}


export {
      V3dLmeOutputs,
      V3dLmeParameters,
      V_3D_LME_METADATA,
      v_3d_lme,
      v_3d_lme_params,
};
