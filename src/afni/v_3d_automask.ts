// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_AUTOMASK_METADATA: Metadata = {
    id: "d0aea979aa7a9af4ee597051955d1bd0cc99a3b1.boutiques",
    name: "3dAutomask",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAutomaskParameters {
    "@type": "afni.3dAutomask";
    "prefix"?: string | null | undefined;
    "apply_prefix"?: string | null | undefined;
    "clfrac"?: number | null | undefined;
    "dilate"?: number | null | undefined;
    "erode"?: number | null | undefined;
    "outputtype"?: "NIFTI" | "AFNI" | "NIFTI_GZ" | null | undefined;
    "in_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dAutomask": v_3d_automask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dAutomask": v_3d_automask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_automask(...)`.
 *
 * @interface
 */
interface V3dAutomaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file from 3dautomask.
     */
    brain_file: OutputPathType | null;
    /**
     * Output image file name.
     */
    mask_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_file Input file to 3dautomask.
 * @param prefix Write mask into dataset with prefix 'ppp'. [Default == 'automask']
 * @param apply_prefix Apply mask to input dataset and save masked dataset.
 * @param clfrac Sets the clip level fraction (must be 0.1-0.9). a small value will tend to make the mask larger [default = 0.5].
 * @param dilate Dilate the mask outwards.
 * @param erode Erode the mask inwards.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 *
 * @returns Parameter dictionary
 */
function v_3d_automask_params(
    in_file: InputPathType,
    prefix: string | null = null,
    apply_prefix: string | null = null,
    clfrac: number | null = null,
    dilate: number | null = null,
    erode: number | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
): V3dAutomaskParameters {
    const params = {
        "@type": "afni.3dAutomask" as const,
        "in_file": in_file,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (apply_prefix !== null) {
        params["apply_prefix"] = apply_prefix;
    }
    if (clfrac !== null) {
        params["clfrac"] = clfrac;
    }
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (erode !== null) {
        params["erode"] = erode;
    }
    if (outputtype !== null) {
        params["outputtype"] = outputtype;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_automask_cargs(
    params: V3dAutomaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dAutomask");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["apply_prefix"] ?? null) !== null) {
        cargs.push(
            "-apply_prefix",
            (params["apply_prefix"] ?? null)
        );
    }
    if ((params["clfrac"] ?? null) !== null) {
        cargs.push(
            "-clfrac",
            String((params["clfrac"] ?? null))
        );
    }
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "-dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "-erode",
            String((params["erode"] ?? null))
        );
    }
    if ((params["outputtype"] ?? null) !== null) {
        cargs.push((params["outputtype"] ?? null));
    }
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_automask_outputs(
    params: V3dAutomaskParameters,
    execution: Execution,
): V3dAutomaskOutputs {
    const ret: V3dAutomaskOutputs = {
        root: execution.outputFile("."),
        brain_file: ((params["apply_prefix"] ?? null) !== null) ? execution.outputFile([(params["apply_prefix"] ?? null)].join('')) : null,
        mask_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dAutomask
 *
 * Create a brain-only mask of the image using AFNI 3dAutomask command.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAutomaskOutputs`).
 */
function v_3d_automask_execute(
    params: V3dAutomaskParameters,
    runner: Runner | null = null,
): V3dAutomaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_AUTOMASK_METADATA);
    params = execution.params(params)
    const cargs = v_3d_automask_cargs(params, execution)
    const ret = v_3d_automask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dAutomask
 *
 * Create a brain-only mask of the image using AFNI 3dAutomask command.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_file Input file to 3dautomask.
 * @param prefix Write mask into dataset with prefix 'ppp'. [Default == 'automask']
 * @param apply_prefix Apply mask to input dataset and save masked dataset.
 * @param clfrac Sets the clip level fraction (must be 0.1-0.9). a small value will tend to make the mask larger [default = 0.5].
 * @param dilate Dilate the mask outwards.
 * @param erode Erode the mask inwards.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAutomaskOutputs`).
 */
function v_3d_automask(
    in_file: InputPathType,
    prefix: string | null = null,
    apply_prefix: string | null = null,
    clfrac: number | null = null,
    dilate: number | null = null,
    erode: number | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    runner: Runner | null = null,
): V3dAutomaskOutputs {
    const params = v_3d_automask_params(in_file, prefix, apply_prefix, clfrac, dilate, erode, outputtype)
    return v_3d_automask_execute(params, runner);
}


export {
      V3dAutomaskOutputs,
      V3dAutomaskParameters,
      V_3D_AUTOMASK_METADATA,
      v_3d_automask,
      v_3d_automask_execute,
      v_3d_automask_params,
};
