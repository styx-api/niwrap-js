// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SPHERICAL_AVERAGE_METADATA: Metadata = {
    id: "1428559d3a56abaf727b5871834a354591593a62.boutiques",
    name: "mris_spherical_average",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSphericalAverageParameters {
    "__STYXTYPE__": "mris_spherical_average";
    "summary_statistics"?: string | null | undefined;
    "which": "coords" | "label" | "vals" | "curv" | "area";
    "fname": string;
    "hemi": "lh" | "rh";
    "spherical_surf": string;
    "subjects": Array<string>;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_spherical_average": mris_spherical_average_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_spherical_average(...)`.
 *
 * @interface
 */
interface MrisSphericalAverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_spherical_average_params(
    which: "coords" | "label" | "vals" | "curv" | "area",
    fname: string,
    hemi: "lh" | "rh",
    spherical_surf: string,
    subjects: Array<string>,
    output: string,
    summary_statistics: string | null = null,
): MrisSphericalAverageParameters {
    /**
     * Build parameters.
    
     * @param which Specifies the type, one of: coords, label, vals, curv, or area.
     * @param fname Input file name.
     * @param hemi Hemisphere: one of lh or rh.
     * @param spherical_surf The spherical surface file.
     * @param subjects List of subjects.
     * @param output Output file or directory.
     * @param summary_statistics Generate summary statistics and write them into sigavg<cond #>-<hemi>.w and sigvar<cond #>-<hemi>.w.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_spherical_average" as const,
        "which": which,
        "fname": fname,
        "hemi": hemi,
        "spherical_surf": spherical_surf,
        "subjects": subjects,
        "output": output,
    };
    if (summary_statistics !== null) {
        params["summary_statistics"] = summary_statistics;
    }
    return params;
}


function mris_spherical_average_cargs(
    params: MrisSphericalAverageParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_spherical_average");
    if ((params["summary_statistics"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["summary_statistics"] ?? null)
        );
    }
    cargs.push((params["which"] ?? null));
    cargs.push((params["fname"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["spherical_surf"] ?? null));
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


function mris_spherical_average_outputs(
    params: MrisSphericalAverageParameters,
    execution: Execution,
): MrisSphericalAverageOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisSphericalAverageOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_spherical_average_execute(
    params: MrisSphericalAverageParameters,
    execution: Execution,
): MrisSphericalAverageOutputs {
    /**
     * This tool adds a template into an average surface in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisSphericalAverageOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_spherical_average_cargs(params, execution)
    const ret = mris_spherical_average_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_spherical_average(
    which: "coords" | "label" | "vals" | "curv" | "area",
    fname: string,
    hemi: "lh" | "rh",
    spherical_surf: string,
    subjects: Array<string>,
    output: string,
    summary_statistics: string | null = null,
    runner: Runner | null = null,
): MrisSphericalAverageOutputs {
    /**
     * This tool adds a template into an average surface in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param which Specifies the type, one of: coords, label, vals, curv, or area.
     * @param fname Input file name.
     * @param hemi Hemisphere: one of lh or rh.
     * @param spherical_surf The spherical surface file.
     * @param subjects List of subjects.
     * @param output Output file or directory.
     * @param summary_statistics Generate summary statistics and write them into sigavg<cond #>-<hemi>.w and sigvar<cond #>-<hemi>.w.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisSphericalAverageOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SPHERICAL_AVERAGE_METADATA);
    const params = mris_spherical_average_params(which, fname, hemi, spherical_surf, subjects, output, summary_statistics)
    return mris_spherical_average_execute(params, execution);
}


export {
      MRIS_SPHERICAL_AVERAGE_METADATA,
      MrisSphericalAverageOutputs,
      MrisSphericalAverageParameters,
      mris_spherical_average,
      mris_spherical_average_params,
};
