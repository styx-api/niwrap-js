// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EXTRACT_FCD_FEATURES_METADATA: Metadata = {
    id: "822940a66948e150cdf82461b3ef67a0620a6fc0.boutiques",
    name: "mri_extract_fcd_features",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriExtractFcdFeaturesParameters {
    "@type"?: "freesurfer/mri_extract_fcd_features";
    "subject": string;
    "hemi": string;
    "output_file": InputPathType;
    "subjects_dir"?: string | null | undefined;
}
type MriExtractFcdFeaturesParametersTagged = Required<Pick<MriExtractFcdFeaturesParameters, '@type'>> & MriExtractFcdFeaturesParameters;


/**
 * Output object returned when calling `MriExtractFcdFeaturesParameters(...)`.
 *
 * @interface
 */
interface MriExtractFcdFeaturesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject The subject identifier.
 * @param hemi The hemisphere (e.g., lh or rh).
 * @param output_file Output file path.
 * @param subjects_dir Specify SUBJECTS_DIR on the command line instead of in the environment.
 *
 * @returns Parameter dictionary
 */
function mri_extract_fcd_features_params(
    subject: string,
    hemi: string,
    output_file: InputPathType,
    subjects_dir: string | null = null,
): MriExtractFcdFeaturesParametersTagged {
    const params = {
        "@type": "freesurfer/mri_extract_fcd_features" as const,
        "subject": subject,
        "hemi": hemi,
        "output_file": output_file,
    };
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_extract_fcd_features_cargs(
    params: MriExtractFcdFeaturesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_extract_fcd_features");
    cargs.push((params["subject"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["output_file"] ?? null)));
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "sdir",
            (params["subjects_dir"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_extract_fcd_features_outputs(
    params: MriExtractFcdFeaturesParameters,
    execution: Execution,
): MriExtractFcdFeaturesOutputs {
    const ret: MriExtractFcdFeaturesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_extract_fcd_features
 *
 * A tool for extracting focal cortical dysplasia features.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriExtractFcdFeaturesOutputs`).
 */
function mri_extract_fcd_features_execute(
    params: MriExtractFcdFeaturesParameters,
    runner: Runner | null = null,
): MriExtractFcdFeaturesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EXTRACT_FCD_FEATURES_METADATA);
    params = execution.params(params)
    const cargs = mri_extract_fcd_features_cargs(params, execution)
    const ret = mri_extract_fcd_features_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_extract_fcd_features
 *
 * A tool for extracting focal cortical dysplasia features.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject The subject identifier.
 * @param hemi The hemisphere (e.g., lh or rh).
 * @param output_file Output file path.
 * @param subjects_dir Specify SUBJECTS_DIR on the command line instead of in the environment.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriExtractFcdFeaturesOutputs`).
 */
function mri_extract_fcd_features(
    subject: string,
    hemi: string,
    output_file: InputPathType,
    subjects_dir: string | null = null,
    runner: Runner | null = null,
): MriExtractFcdFeaturesOutputs {
    const params = mri_extract_fcd_features_params(subject, hemi, output_file, subjects_dir)
    return mri_extract_fcd_features_execute(params, runner);
}


export {
      MRI_EXTRACT_FCD_FEATURES_METADATA,
      MriExtractFcdFeaturesOutputs,
      mri_extract_fcd_features,
      mri_extract_fcd_features_execute,
      mri_extract_fcd_features_params,
};
