// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MELODIC_METADATA: Metadata = {
    id: "26dfaaafda323665e1ced6f940ff5cca346ee530.boutiques",
    name: "melodic",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MelodicParameters {
    "@type": "fsl.melodic";
    "input_file": InputPathType;
    "output_directory"?: string | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "dimensionality_reduction"?: number | null | undefined;
    "generate_report": boolean;
    "cifti_io": boolean;
    "variance_normalization": boolean;
    "no_masking": boolean;
    "update_masking": boolean;
    "no_bet": boolean;
    "bg_threshold"?: number | null | undefined;
    "dimest_technique"?: string | null | undefined;
    "separate_variance_normalization": boolean;
    "disable_migp": boolean;
    "num_internal_eigenmaps"?: number | null | undefined;
    "migp_shuffle": boolean;
    "migp_factor"?: number | null | undefined;
    "num_ics"?: number | null | undefined;
    "nonlinearity"?: string | null | undefined;
    "covar_weights"?: InputPathType | null | undefined;
    "eps_error"?: number | null | undefined;
    "eps_rank1_error"?: number | null | undefined;
    "max_iters"?: number | null | undefined;
    "max_restarts"?: number | null | undefined;
    "mm_threshold"?: number | null | undefined;
    "no_mixture_modeling": boolean;
    "ic_components_file"?: InputPathType | null | undefined;
    "mixing_matrix_file"?: InputPathType | null | undefined;
    "session_modes_file"?: InputPathType | null | undefined;
    "component_filter"?: string | null | undefined;
    "background_image"?: InputPathType | null | undefined;
    "tr_seconds"?: number | null | undefined;
    "log_power_calc": boolean;
    "time_domain_design_matrix"?: InputPathType | null | undefined;
    "time_domain_t_contrast_matrix"?: InputPathType | null | undefined;
    "subject_domain_design_matrix"?: InputPathType | null | undefined;
    "subject_domain_t_contrast_matrix"?: InputPathType | null | undefined;
    "output_unmixing_matrix": boolean;
    "output_stats": boolean;
    "output_pca": boolean;
    "output_whitening": boolean;
    "output_original_ics": boolean;
    "output_mean_volume": boolean;
    "version": boolean;
    "copyright": boolean;
    "help": boolean;
    "debug": boolean;
    "report_maps"?: string | null | undefined;
    "keep_meanvol": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.melodic": melodic_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.melodic": melodic_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `melodic(...)`.
 *
 * @interface
 */
interface MelodicOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output Melodic web report
     */
    report_file: OutputPathType | null;
    /**
     * Output IC components file
     */
    ics_output_file: OutputPathType | null;
    /**
     * Output mixing matrix file
     */
    mix_output_file: OutputPathType | null;
    /**
     * Output matrix of temporal modes
     */
    temporal_mode_file: OutputPathType | null;
    /**
     * Output Melodic report directory
     */
    melodic_report_directory: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file Input file names (either single file name or comma-separated list or text file)
 * @param output_directory Output directory name
 * @param mask_file File name of mask for thresholding
 * @param dimensionality_reduction Dimensionality reduction into specified number of dimensions (default is automatic estimation)
 * @param generate_report Generate Melodic web report
 * @param cifti_io Input/output as CIFTI (warning: auto-dimensionality estimation for CIFTI data is currently inaccurate)
 * @param variance_normalization Switch off variance normalization
 * @param no_masking Switch off masking
 * @param update_masking Switch off mask updating
 * @param no_bet Switch off BET
 * @param bg_threshold Brain / non-brain threshold (only if --nobet selected)
 * @param dimest_technique Use specific dimensionality estimation technique: lap, bic, mdl, aic, mean (default: lap)
 * @param separate_variance_normalization Switch on separate variance normalization for each input dataset (off by default)
 * @param disable_migp Switch off MIGP data reduction when using -a concat (full temporal concatenation will be used)
 * @param num_internal_eigenmaps Number of internal Eigenmaps
 * @param migp_shuffle Randomize MIGP file order (default: TRUE)
 * @param migp_factor Internal Factor of mem-threshold relative to number of Eigenmaps (default: 2)
 * @param num_ics Number of ICs to extract (for deflation approach)
 * @param nonlinearity Nonlinearity: gauss, tanh, pow3 (default), pow4
 * @param covar_weights Voxel-wise weights for the covariance matrix (e.g. segmentation information)
 * @param eps_error Minimum error change
 * @param eps_rank1_error Minimum error change for rank-1 approximation in TICA
 * @param max_iters Maximum number of iterations before restart
 * @param max_restarts Maximum number of restarts
 * @param mm_threshold Threshold for Mixture Model based inference
 * @param no_mixture_modeling Switch off mixture modeling on IC maps
 * @param ic_components_file Input filename of the IC components file for mixture modeling
 * @param mixing_matrix_file Input filename of mixing matrix for mixture modeling / filtering
 * @param session_modes_file Input filename of matrix of session modes for report generation
 * @param component_filter List of component numbers to remove
 * @param background_image Specify background image for report (default: mean image)
 * @param tr_seconds TR in seconds
 * @param log_power_calc Calculate log of power for frequency spectrum
 * @param time_domain_design_matrix Design matrix across time-domain
 * @param time_domain_t_contrast_matrix T-contrast matrix across time-domain
 * @param subject_domain_design_matrix Design matrix across subject-domain
 * @param subject_domain_t_contrast_matrix T-contrast matrix across subject-domain
 * @param output_unmixing_matrix Output unmixing matrix
 * @param output_stats Output thresholded maps and probability maps
 * @param output_pca Output PCA results
 * @param output_whitening Output whitening/dewhitening matrices
 * @param output_original_ics Output the original ICs
 * @param output_mean_volume Output mean volume
 * @param version Prints version information
 * @param copyright Prints copyright information
 * @param help Prints this help message
 * @param debug Switch on debug messages
 * @param report_maps Control string for spatial map images (see slicer)
 * @param keep_meanvol Do not subtract mean volume
 *
 * @returns Parameter dictionary
 */
function melodic_params(
    input_file: InputPathType,
    output_directory: string | null = null,
    mask_file: InputPathType | null = null,
    dimensionality_reduction: number | null = null,
    generate_report: boolean = false,
    cifti_io: boolean = false,
    variance_normalization: boolean = false,
    no_masking: boolean = false,
    update_masking: boolean = false,
    no_bet: boolean = false,
    bg_threshold: number | null = null,
    dimest_technique: string | null = null,
    separate_variance_normalization: boolean = false,
    disable_migp: boolean = false,
    num_internal_eigenmaps: number | null = null,
    migp_shuffle: boolean = false,
    migp_factor: number | null = null,
    num_ics: number | null = null,
    nonlinearity: string | null = null,
    covar_weights: InputPathType | null = null,
    eps_error: number | null = null,
    eps_rank1_error: number | null = null,
    max_iters: number | null = null,
    max_restarts: number | null = null,
    mm_threshold: number | null = null,
    no_mixture_modeling: boolean = false,
    ic_components_file: InputPathType | null = null,
    mixing_matrix_file: InputPathType | null = null,
    session_modes_file: InputPathType | null = null,
    component_filter: string | null = null,
    background_image: InputPathType | null = null,
    tr_seconds: number | null = null,
    log_power_calc: boolean = false,
    time_domain_design_matrix: InputPathType | null = null,
    time_domain_t_contrast_matrix: InputPathType | null = null,
    subject_domain_design_matrix: InputPathType | null = null,
    subject_domain_t_contrast_matrix: InputPathType | null = null,
    output_unmixing_matrix: boolean = false,
    output_stats: boolean = false,
    output_pca: boolean = false,
    output_whitening: boolean = false,
    output_original_ics: boolean = false,
    output_mean_volume: boolean = false,
    version: boolean = false,
    copyright: boolean = false,
    help: boolean = false,
    debug: boolean = false,
    report_maps: string | null = null,
    keep_meanvol: boolean = false,
): MelodicParameters {
    const params = {
        "@type": "fsl.melodic" as const,
        "input_file": input_file,
        "generate_report": generate_report,
        "cifti_io": cifti_io,
        "variance_normalization": variance_normalization,
        "no_masking": no_masking,
        "update_masking": update_masking,
        "no_bet": no_bet,
        "separate_variance_normalization": separate_variance_normalization,
        "disable_migp": disable_migp,
        "migp_shuffle": migp_shuffle,
        "no_mixture_modeling": no_mixture_modeling,
        "log_power_calc": log_power_calc,
        "output_unmixing_matrix": output_unmixing_matrix,
        "output_stats": output_stats,
        "output_pca": output_pca,
        "output_whitening": output_whitening,
        "output_original_ics": output_original_ics,
        "output_mean_volume": output_mean_volume,
        "version": version,
        "copyright": copyright,
        "help": help,
        "debug": debug,
        "keep_meanvol": keep_meanvol,
    };
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (dimensionality_reduction !== null) {
        params["dimensionality_reduction"] = dimensionality_reduction;
    }
    if (bg_threshold !== null) {
        params["bg_threshold"] = bg_threshold;
    }
    if (dimest_technique !== null) {
        params["dimest_technique"] = dimest_technique;
    }
    if (num_internal_eigenmaps !== null) {
        params["num_internal_eigenmaps"] = num_internal_eigenmaps;
    }
    if (migp_factor !== null) {
        params["migp_factor"] = migp_factor;
    }
    if (num_ics !== null) {
        params["num_ics"] = num_ics;
    }
    if (nonlinearity !== null) {
        params["nonlinearity"] = nonlinearity;
    }
    if (covar_weights !== null) {
        params["covar_weights"] = covar_weights;
    }
    if (eps_error !== null) {
        params["eps_error"] = eps_error;
    }
    if (eps_rank1_error !== null) {
        params["eps_rank1_error"] = eps_rank1_error;
    }
    if (max_iters !== null) {
        params["max_iters"] = max_iters;
    }
    if (max_restarts !== null) {
        params["max_restarts"] = max_restarts;
    }
    if (mm_threshold !== null) {
        params["mm_threshold"] = mm_threshold;
    }
    if (ic_components_file !== null) {
        params["ic_components_file"] = ic_components_file;
    }
    if (mixing_matrix_file !== null) {
        params["mixing_matrix_file"] = mixing_matrix_file;
    }
    if (session_modes_file !== null) {
        params["session_modes_file"] = session_modes_file;
    }
    if (component_filter !== null) {
        params["component_filter"] = component_filter;
    }
    if (background_image !== null) {
        params["background_image"] = background_image;
    }
    if (tr_seconds !== null) {
        params["tr_seconds"] = tr_seconds;
    }
    if (time_domain_design_matrix !== null) {
        params["time_domain_design_matrix"] = time_domain_design_matrix;
    }
    if (time_domain_t_contrast_matrix !== null) {
        params["time_domain_t_contrast_matrix"] = time_domain_t_contrast_matrix;
    }
    if (subject_domain_design_matrix !== null) {
        params["subject_domain_design_matrix"] = subject_domain_design_matrix;
    }
    if (subject_domain_t_contrast_matrix !== null) {
        params["subject_domain_t_contrast_matrix"] = subject_domain_t_contrast_matrix;
    }
    if (report_maps !== null) {
        params["report_maps"] = report_maps;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function melodic_cargs(
    params: MelodicParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("melodic");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_directory"] ?? null)
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["dimensionality_reduction"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["dimensionality_reduction"] ?? null))
        );
    }
    if ((params["generate_report"] ?? null)) {
        cargs.push("--report");
    }
    if ((params["cifti_io"] ?? null)) {
        cargs.push("--CIFTI");
    }
    if ((params["variance_normalization"] ?? null)) {
        cargs.push("--vn");
    }
    if ((params["no_masking"] ?? null)) {
        cargs.push("--nomask");
    }
    if ((params["update_masking"] ?? null)) {
        cargs.push("--update_mask");
    }
    if ((params["no_bet"] ?? null)) {
        cargs.push("--nobet");
    }
    if ((params["bg_threshold"] ?? null) !== null) {
        cargs.push(
            "--bgthreshold",
            String((params["bg_threshold"] ?? null))
        );
    }
    if ((params["dimest_technique"] ?? null) !== null) {
        cargs.push(
            "--dimest",
            (params["dimest_technique"] ?? null)
        );
    }
    if ((params["separate_variance_normalization"] ?? null)) {
        cargs.push("--sep_vn");
    }
    if ((params["disable_migp"] ?? null)) {
        cargs.push("--disableMigp");
    }
    if ((params["num_internal_eigenmaps"] ?? null) !== null) {
        cargs.push(
            "--migpN",
            String((params["num_internal_eigenmaps"] ?? null))
        );
    }
    if ((params["migp_shuffle"] ?? null)) {
        cargs.push("--migp_shuffle");
    }
    if ((params["migp_factor"] ?? null) !== null) {
        cargs.push(
            "--migp_factor",
            String((params["migp_factor"] ?? null))
        );
    }
    if ((params["num_ics"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["num_ics"] ?? null))
        );
    }
    if ((params["nonlinearity"] ?? null) !== null) {
        cargs.push(
            "--nl",
            (params["nonlinearity"] ?? null)
        );
    }
    if ((params["covar_weights"] ?? null) !== null) {
        cargs.push(
            "--covarweight",
            execution.inputFile((params["covar_weights"] ?? null))
        );
    }
    if ((params["eps_error"] ?? null) !== null) {
        cargs.push(
            "--eps",
            String((params["eps_error"] ?? null))
        );
    }
    if ((params["eps_rank1_error"] ?? null) !== null) {
        cargs.push(
            "--epsS",
            String((params["eps_rank1_error"] ?? null))
        );
    }
    if ((params["max_iters"] ?? null) !== null) {
        cargs.push(
            "--maxit",
            String((params["max_iters"] ?? null))
        );
    }
    if ((params["max_restarts"] ?? null) !== null) {
        cargs.push(
            "--maxrestart",
            String((params["max_restarts"] ?? null))
        );
    }
    if ((params["mm_threshold"] ?? null) !== null) {
        cargs.push(
            "--mmthresh",
            String((params["mm_threshold"] ?? null))
        );
    }
    if ((params["no_mixture_modeling"] ?? null)) {
        cargs.push("--no_mm");
    }
    if ((params["ic_components_file"] ?? null) !== null) {
        cargs.push(
            "--ICs",
            execution.inputFile((params["ic_components_file"] ?? null))
        );
    }
    if ((params["mixing_matrix_file"] ?? null) !== null) {
        cargs.push(
            "--mix",
            execution.inputFile((params["mixing_matrix_file"] ?? null))
        );
    }
    if ((params["session_modes_file"] ?? null) !== null) {
        cargs.push(
            "--smode",
            execution.inputFile((params["session_modes_file"] ?? null))
        );
    }
    if ((params["component_filter"] ?? null) !== null) {
        cargs.push(
            "-f",
            (params["component_filter"] ?? null)
        );
    }
    if ((params["background_image"] ?? null) !== null) {
        cargs.push(
            "--bgimage",
            execution.inputFile((params["background_image"] ?? null))
        );
    }
    if ((params["tr_seconds"] ?? null) !== null) {
        cargs.push(
            "--tr",
            String((params["tr_seconds"] ?? null))
        );
    }
    if ((params["log_power_calc"] ?? null)) {
        cargs.push("--logPower");
    }
    if ((params["time_domain_design_matrix"] ?? null) !== null) {
        cargs.push(
            "--Tdes",
            execution.inputFile((params["time_domain_design_matrix"] ?? null))
        );
    }
    if ((params["time_domain_t_contrast_matrix"] ?? null) !== null) {
        cargs.push(
            "--Tcon",
            execution.inputFile((params["time_domain_t_contrast_matrix"] ?? null))
        );
    }
    if ((params["subject_domain_design_matrix"] ?? null) !== null) {
        cargs.push(
            "--Sdes",
            execution.inputFile((params["subject_domain_design_matrix"] ?? null))
        );
    }
    if ((params["subject_domain_t_contrast_matrix"] ?? null) !== null) {
        cargs.push(
            "--Scon",
            execution.inputFile((params["subject_domain_t_contrast_matrix"] ?? null))
        );
    }
    if ((params["output_unmixing_matrix"] ?? null)) {
        cargs.push("--Ounmix");
    }
    if ((params["output_stats"] ?? null)) {
        cargs.push("--Ostats");
    }
    if ((params["output_pca"] ?? null)) {
        cargs.push("--Opca");
    }
    if ((params["output_whitening"] ?? null)) {
        cargs.push("--Owhite");
    }
    if ((params["output_original_ics"] ?? null)) {
        cargs.push("--Oorig");
    }
    if ((params["output_mean_volume"] ?? null)) {
        cargs.push("--Omean");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-V");
    }
    if ((params["copyright"] ?? null)) {
        cargs.push("--copyright");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["report_maps"] ?? null) !== null) {
        cargs.push(
            "--report_maps",
            (params["report_maps"] ?? null)
        );
    }
    if ((params["keep_meanvol"] ?? null)) {
        cargs.push("--keep_meanvol");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function melodic_outputs(
    params: MelodicParameters,
    execution: Execution,
): MelodicOutputs {
    const ret: MelodicOutputs = {
        root: execution.outputFile("."),
        report_file: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/report.html"].join('')) : null,
        ics_output_file: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/melodic_IC.nii.gz"].join('')) : null,
        mix_output_file: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/melodic_mix"].join('')) : null,
        temporal_mode_file: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/melodic_Tmodes"].join('')) : null,
        melodic_report_directory: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/melodic_report"].join('')) : null,
    };
    return ret;
}


/**
 * melodic
 *
 * Multivariate Exploratory Linear Optimised Decomposition into Independent Components.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MelodicOutputs`).
 */
function melodic_execute(
    params: MelodicParameters,
    runner: Runner | null = null,
): MelodicOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MELODIC_METADATA);
    params = execution.params(params)
    const cargs = melodic_cargs(params, execution)
    const ret = melodic_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * melodic
 *
 * Multivariate Exploratory Linear Optimised Decomposition into Independent Components.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input file names (either single file name or comma-separated list or text file)
 * @param output_directory Output directory name
 * @param mask_file File name of mask for thresholding
 * @param dimensionality_reduction Dimensionality reduction into specified number of dimensions (default is automatic estimation)
 * @param generate_report Generate Melodic web report
 * @param cifti_io Input/output as CIFTI (warning: auto-dimensionality estimation for CIFTI data is currently inaccurate)
 * @param variance_normalization Switch off variance normalization
 * @param no_masking Switch off masking
 * @param update_masking Switch off mask updating
 * @param no_bet Switch off BET
 * @param bg_threshold Brain / non-brain threshold (only if --nobet selected)
 * @param dimest_technique Use specific dimensionality estimation technique: lap, bic, mdl, aic, mean (default: lap)
 * @param separate_variance_normalization Switch on separate variance normalization for each input dataset (off by default)
 * @param disable_migp Switch off MIGP data reduction when using -a concat (full temporal concatenation will be used)
 * @param num_internal_eigenmaps Number of internal Eigenmaps
 * @param migp_shuffle Randomize MIGP file order (default: TRUE)
 * @param migp_factor Internal Factor of mem-threshold relative to number of Eigenmaps (default: 2)
 * @param num_ics Number of ICs to extract (for deflation approach)
 * @param nonlinearity Nonlinearity: gauss, tanh, pow3 (default), pow4
 * @param covar_weights Voxel-wise weights for the covariance matrix (e.g. segmentation information)
 * @param eps_error Minimum error change
 * @param eps_rank1_error Minimum error change for rank-1 approximation in TICA
 * @param max_iters Maximum number of iterations before restart
 * @param max_restarts Maximum number of restarts
 * @param mm_threshold Threshold for Mixture Model based inference
 * @param no_mixture_modeling Switch off mixture modeling on IC maps
 * @param ic_components_file Input filename of the IC components file for mixture modeling
 * @param mixing_matrix_file Input filename of mixing matrix for mixture modeling / filtering
 * @param session_modes_file Input filename of matrix of session modes for report generation
 * @param component_filter List of component numbers to remove
 * @param background_image Specify background image for report (default: mean image)
 * @param tr_seconds TR in seconds
 * @param log_power_calc Calculate log of power for frequency spectrum
 * @param time_domain_design_matrix Design matrix across time-domain
 * @param time_domain_t_contrast_matrix T-contrast matrix across time-domain
 * @param subject_domain_design_matrix Design matrix across subject-domain
 * @param subject_domain_t_contrast_matrix T-contrast matrix across subject-domain
 * @param output_unmixing_matrix Output unmixing matrix
 * @param output_stats Output thresholded maps and probability maps
 * @param output_pca Output PCA results
 * @param output_whitening Output whitening/dewhitening matrices
 * @param output_original_ics Output the original ICs
 * @param output_mean_volume Output mean volume
 * @param version Prints version information
 * @param copyright Prints copyright information
 * @param help Prints this help message
 * @param debug Switch on debug messages
 * @param report_maps Control string for spatial map images (see slicer)
 * @param keep_meanvol Do not subtract mean volume
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MelodicOutputs`).
 */
function melodic(
    input_file: InputPathType,
    output_directory: string | null = null,
    mask_file: InputPathType | null = null,
    dimensionality_reduction: number | null = null,
    generate_report: boolean = false,
    cifti_io: boolean = false,
    variance_normalization: boolean = false,
    no_masking: boolean = false,
    update_masking: boolean = false,
    no_bet: boolean = false,
    bg_threshold: number | null = null,
    dimest_technique: string | null = null,
    separate_variance_normalization: boolean = false,
    disable_migp: boolean = false,
    num_internal_eigenmaps: number | null = null,
    migp_shuffle: boolean = false,
    migp_factor: number | null = null,
    num_ics: number | null = null,
    nonlinearity: string | null = null,
    covar_weights: InputPathType | null = null,
    eps_error: number | null = null,
    eps_rank1_error: number | null = null,
    max_iters: number | null = null,
    max_restarts: number | null = null,
    mm_threshold: number | null = null,
    no_mixture_modeling: boolean = false,
    ic_components_file: InputPathType | null = null,
    mixing_matrix_file: InputPathType | null = null,
    session_modes_file: InputPathType | null = null,
    component_filter: string | null = null,
    background_image: InputPathType | null = null,
    tr_seconds: number | null = null,
    log_power_calc: boolean = false,
    time_domain_design_matrix: InputPathType | null = null,
    time_domain_t_contrast_matrix: InputPathType | null = null,
    subject_domain_design_matrix: InputPathType | null = null,
    subject_domain_t_contrast_matrix: InputPathType | null = null,
    output_unmixing_matrix: boolean = false,
    output_stats: boolean = false,
    output_pca: boolean = false,
    output_whitening: boolean = false,
    output_original_ics: boolean = false,
    output_mean_volume: boolean = false,
    version: boolean = false,
    copyright: boolean = false,
    help: boolean = false,
    debug: boolean = false,
    report_maps: string | null = null,
    keep_meanvol: boolean = false,
    runner: Runner | null = null,
): MelodicOutputs {
    const params = melodic_params(input_file, output_directory, mask_file, dimensionality_reduction, generate_report, cifti_io, variance_normalization, no_masking, update_masking, no_bet, bg_threshold, dimest_technique, separate_variance_normalization, disable_migp, num_internal_eigenmaps, migp_shuffle, migp_factor, num_ics, nonlinearity, covar_weights, eps_error, eps_rank1_error, max_iters, max_restarts, mm_threshold, no_mixture_modeling, ic_components_file, mixing_matrix_file, session_modes_file, component_filter, background_image, tr_seconds, log_power_calc, time_domain_design_matrix, time_domain_t_contrast_matrix, subject_domain_design_matrix, subject_domain_t_contrast_matrix, output_unmixing_matrix, output_stats, output_pca, output_whitening, output_original_ics, output_mean_volume, version, copyright, help, debug, report_maps, keep_meanvol)
    return melodic_execute(params, runner);
}


export {
      MELODIC_METADATA,
      MelodicOutputs,
      MelodicParameters,
      melodic,
      melodic_execute,
      melodic_params,
};
