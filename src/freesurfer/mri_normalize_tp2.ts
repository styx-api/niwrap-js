// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_NORMALIZE_TP2_METADATA: Metadata = {
    id: "90f7ef1c696e6598cec236ade9c15ef365878182.boutiques",
    name: "mri_normalize_tp2",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriNormalizeTp2Parameters {
    "@type": "freesurfer.mri_normalize_tp2";
    "input_vol": InputPathType;
    "normalized_vol": string;
    "t1_volume"?: InputPathType | null | undefined;
    "mask1"?: InputPathType | null | undefined;
    "mask2"?: InputPathType | null | undefined;
    "threshold"?: number | null | undefined;
    "ctrl"?: InputPathType | null | undefined;
    "xform"?: InputPathType | null | undefined;
    "invert_flag": boolean;
    "lta_src"?: InputPathType | null | undefined;
    "lta_dst"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_normalize_tp2": mri_normalize_tp2_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_normalize_tp2": mri_normalize_tp2_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_normalize_tp2(...)`.
 *
 * @interface
 */
interface MriNormalizeTp2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting normalized volume
     */
    output_normalized_vol: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_vol Input volume to be normalized
 * @param normalized_vol Output normalized volume
 * @param t1_volume T1 volume for tp1 where normalization is applied
 * @param mask1 Brain mask for tp1, mapped to tp2 via the xform
 * @param mask2 Brain mask for tp2, mapped to tp1 via the inverse xform
 * @param threshold Threshold for background (default = 1.0)
 * @param ctrl Control point volume for tp1
 * @param xform LTA transform that aligns tp1 to tp2
 * @param invert_flag Reversely apply -xform
 * @param lta_src Source volume for -xform if not available from the xform file
 * @param lta_dst Target volume for -xform if not available from the xform file
 *
 * @returns Parameter dictionary
 */
function mri_normalize_tp2_params(
    input_vol: InputPathType,
    normalized_vol: string,
    t1_volume: InputPathType | null = null,
    mask1: InputPathType | null = null,
    mask2: InputPathType | null = null,
    threshold: number | null = null,
    ctrl: InputPathType | null = null,
    xform: InputPathType | null = null,
    invert_flag: boolean = false,
    lta_src: InputPathType | null = null,
    lta_dst: InputPathType | null = null,
): MriNormalizeTp2Parameters {
    const params = {
        "@type": "freesurfer.mri_normalize_tp2" as const,
        "input_vol": input_vol,
        "normalized_vol": normalized_vol,
        "invert_flag": invert_flag,
    };
    if (t1_volume !== null) {
        params["t1_volume"] = t1_volume;
    }
    if (mask1 !== null) {
        params["mask1"] = mask1;
    }
    if (mask2 !== null) {
        params["mask2"] = mask2;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (ctrl !== null) {
        params["ctrl"] = ctrl;
    }
    if (xform !== null) {
        params["xform"] = xform;
    }
    if (lta_src !== null) {
        params["lta_src"] = lta_src;
    }
    if (lta_dst !== null) {
        params["lta_dst"] = lta_dst;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_normalize_tp2_cargs(
    params: MriNormalizeTp2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_normalize_tp2");
    cargs.push(execution.inputFile((params["input_vol"] ?? null)));
    cargs.push((params["normalized_vol"] ?? null));
    if ((params["t1_volume"] ?? null) !== null) {
        cargs.push(
            "-T1",
            execution.inputFile((params["t1_volume"] ?? null))
        );
    }
    if ((params["mask1"] ?? null) !== null) {
        cargs.push(
            "-mask1",
            execution.inputFile((params["mask1"] ?? null))
        );
    }
    if ((params["mask2"] ?? null) !== null) {
        cargs.push(
            "-mask2",
            execution.inputFile((params["mask2"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["ctrl"] ?? null) !== null) {
        cargs.push(
            "-ctrl",
            execution.inputFile((params["ctrl"] ?? null))
        );
    }
    if ((params["xform"] ?? null) !== null) {
        cargs.push(
            "-xform",
            execution.inputFile((params["xform"] ?? null))
        );
    }
    if ((params["invert_flag"] ?? null)) {
        cargs.push("-invert");
    }
    if ((params["lta_src"] ?? null) !== null) {
        cargs.push(
            "-lta_src",
            execution.inputFile((params["lta_src"] ?? null))
        );
    }
    if ((params["lta_dst"] ?? null) !== null) {
        cargs.push(
            "-lta_dst",
            execution.inputFile((params["lta_dst"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_normalize_tp2_outputs(
    params: MriNormalizeTp2Parameters,
    execution: Execution,
): MriNormalizeTp2Outputs {
    const ret: MriNormalizeTp2Outputs = {
        root: execution.outputFile("."),
        output_normalized_vol: execution.outputFile([(params["normalized_vol"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Normalize the input volume using control points of tp1 to help normalize tp2.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNormalizeTp2Outputs`).
 */
function mri_normalize_tp2_execute(
    params: MriNormalizeTp2Parameters,
    runner: Runner | null = null,
): MriNormalizeTp2Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_NORMALIZE_TP2_METADATA);
    params = execution.params(params)
    const cargs = mri_normalize_tp2_cargs(params, execution)
    const ret = mri_normalize_tp2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Normalize the input volume using control points of tp1 to help normalize tp2.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_vol Input volume to be normalized
 * @param normalized_vol Output normalized volume
 * @param t1_volume T1 volume for tp1 where normalization is applied
 * @param mask1 Brain mask for tp1, mapped to tp2 via the xform
 * @param mask2 Brain mask for tp2, mapped to tp1 via the inverse xform
 * @param threshold Threshold for background (default = 1.0)
 * @param ctrl Control point volume for tp1
 * @param xform LTA transform that aligns tp1 to tp2
 * @param invert_flag Reversely apply -xform
 * @param lta_src Source volume for -xform if not available from the xform file
 * @param lta_dst Target volume for -xform if not available from the xform file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNormalizeTp2Outputs`).
 */
function mri_normalize_tp2(
    input_vol: InputPathType,
    normalized_vol: string,
    t1_volume: InputPathType | null = null,
    mask1: InputPathType | null = null,
    mask2: InputPathType | null = null,
    threshold: number | null = null,
    ctrl: InputPathType | null = null,
    xform: InputPathType | null = null,
    invert_flag: boolean = false,
    lta_src: InputPathType | null = null,
    lta_dst: InputPathType | null = null,
    runner: Runner | null = null,
): MriNormalizeTp2Outputs {
    const params = mri_normalize_tp2_params(input_vol, normalized_vol, t1_volume, mask1, mask2, threshold, ctrl, xform, invert_flag, lta_src, lta_dst)
    return mri_normalize_tp2_execute(params, runner);
}


export {
      MRI_NORMALIZE_TP2_METADATA,
      MriNormalizeTp2Outputs,
      MriNormalizeTp2Parameters,
      mri_normalize_tp2,
      mri_normalize_tp2_execute,
      mri_normalize_tp2_params,
};
