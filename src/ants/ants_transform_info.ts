// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_TRANSFORM_INFO_METADATA: Metadata = {
    id: "639dde226cefbb6123bb32ff026f6143620a9120.boutiques",
    name: "antsTransformInfo",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsTransformInfoParameters {
    "@type": "ants.antsTransformInfo";
    "transform_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.antsTransformInfo": ants_transform_info_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.antsTransformInfo": ants_transform_info_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_transform_info(...)`.
 *
 * @interface
 */
interface AntsTransformInfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Information of the provided transform file.
     */
    output_info: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param transform_file The transform file to read. Supported formats include HDF5, MINC, Matlab, and Txt.
 *
 * @returns Parameter dictionary
 */
function ants_transform_info_params(
    transform_file: InputPathType,
): AntsTransformInfoParameters {
    const params = {
        "@type": "ants.antsTransformInfo" as const,
        "transform_file": transform_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_transform_info_cargs(
    params: AntsTransformInfoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsTransformInfo");
    cargs.push(
        "--file",
        execution.inputFile((params["transform_file"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_transform_info_outputs(
    params: AntsTransformInfoParameters,
    execution: Execution,
): AntsTransformInfoOutputs {
    const ret: AntsTransformInfoOutputs = {
        root: execution.outputFile("."),
        output_info: execution.outputFile(["transform_info.txt"].join('')),
    };
    return ret;
}


/**
 * Provide information about an ITK transform file.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsTransformInfoOutputs`).
 */
function ants_transform_info_execute(
    params: AntsTransformInfoParameters,
    runner: Runner | null = null,
): AntsTransformInfoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_TRANSFORM_INFO_METADATA);
    params = execution.params(params)
    const cargs = ants_transform_info_cargs(params, execution)
    const ret = ants_transform_info_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Provide information about an ITK transform file.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param transform_file The transform file to read. Supported formats include HDF5, MINC, Matlab, and Txt.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsTransformInfoOutputs`).
 */
function ants_transform_info(
    transform_file: InputPathType,
    runner: Runner | null = null,
): AntsTransformInfoOutputs {
    const params = ants_transform_info_params(transform_file)
    return ants_transform_info_execute(params, runner);
}


export {
      ANTS_TRANSFORM_INFO_METADATA,
      AntsTransformInfoOutputs,
      AntsTransformInfoParameters,
      ants_transform_info,
      ants_transform_info_execute,
      ants_transform_info_params,
};
