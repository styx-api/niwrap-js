// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APARC_STATS_ASEG_METADATA: Metadata = {
    id: "a79f87035b2ff30425eabbe5a44088217b2d1ee1.boutiques",
    name: "aparc_stats_aseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface AparcStatsAsegParameters {
    "@type": "freesurfer.aparc_stats_aseg";
    "subject_name": string;
    "gcs_name": string;
    "subject_dir"?: string | null | undefined;
    "gcs_dir"?: string | null | undefined;
    "parc_name"?: string | null | undefined;
    "output_dir"?: string | null | undefined;
    "log_file"?: string | null | undefined;
    "lh_flag": boolean;
    "rh_flag": boolean;
    "a2009s_flag": boolean;
    "no_aseg_flag": boolean;
    "no_cortparc_flag": boolean;
    "no_parcstats_flag": boolean;
    "no_aparc2aseg_flag": boolean;
    "random_seed"?: number | null | undefined;
    "th3_flag": boolean;
    "no_th3_flag": boolean;
    "longitudinal"?: Array<string> | null | undefined;
    "expert_file"?: string | null | undefined;
    "expert_use_flag": boolean;
    "expert_clean_flag": boolean;
    "expert_overwrite_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.aparc_stats_aseg": aparc_stats_aseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `aparc_stats_aseg(...)`.
 *
 * @interface
 */
interface AparcStatsAsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name Subject name
 * @param gcs_name GCS file name
 * @param subject_dir Specify a subjects directory (default=/usr/local/freesurfer/subjects)
 * @param gcs_dir GCS file directory (default=/usr/local/freesurfer/average)
 * @param parc_name Specify the parcellation name (default=gcs name)
 * @param output_dir Specify the output directory
 * @param log_file Specify the log file
 * @param lh_flag Left hemisphere only
 * @param rh_flag Right hemisphere only
 * @param a2009s_flag Use Christophe Destrieux cortical parcellation atlas
 * @param no_aseg_flag Do not use aseg
 * @param no_cortparc_flag Do not do cortical parcellation
 * @param no_parcstats_flag Do not do surface anatomical statistics
 * @param no_aparc2aseg_flag Do not do aparc2aseg
 * @param random_seed Random seed (default=1234)
 * @param th3_flag Use -th3 flag, turn on new volume calculation for mris_anatomical_stats
 * @param no_th3_flag Use -no-th3 flag for mris_anatomical_stats
 * @param longitudinal Longitudinal Processing
 * @param expert_file Read-in expert options file
 * @param expert_use_flag Use pre-existing expert options file
 * @param expert_clean_flag Delete pre-existing expert options file
 * @param expert_overwrite_flag Overwrite pre-existing expert options file
 *
 * @returns Parameter dictionary
 */
function aparc_stats_aseg_params(
    subject_name: string,
    gcs_name: string,
    subject_dir: string | null = null,
    gcs_dir: string | null = null,
    parc_name: string | null = null,
    output_dir: string | null = null,
    log_file: string | null = null,
    lh_flag: boolean = false,
    rh_flag: boolean = false,
    a2009s_flag: boolean = false,
    no_aseg_flag: boolean = false,
    no_cortparc_flag: boolean = false,
    no_parcstats_flag: boolean = false,
    no_aparc2aseg_flag: boolean = false,
    random_seed: number | null = null,
    th3_flag: boolean = false,
    no_th3_flag: boolean = false,
    longitudinal: Array<string> | null = null,
    expert_file: string | null = null,
    expert_use_flag: boolean = false,
    expert_clean_flag: boolean = false,
    expert_overwrite_flag: boolean = false,
): AparcStatsAsegParameters {
    const params = {
        "@type": "freesurfer.aparc_stats_aseg" as const,
        "subject_name": subject_name,
        "gcs_name": gcs_name,
        "lh_flag": lh_flag,
        "rh_flag": rh_flag,
        "a2009s_flag": a2009s_flag,
        "no_aseg_flag": no_aseg_flag,
        "no_cortparc_flag": no_cortparc_flag,
        "no_parcstats_flag": no_parcstats_flag,
        "no_aparc2aseg_flag": no_aparc2aseg_flag,
        "th3_flag": th3_flag,
        "no_th3_flag": no_th3_flag,
        "expert_use_flag": expert_use_flag,
        "expert_clean_flag": expert_clean_flag,
        "expert_overwrite_flag": expert_overwrite_flag,
    };
    if (subject_dir !== null) {
        params["subject_dir"] = subject_dir;
    }
    if (gcs_dir !== null) {
        params["gcs_dir"] = gcs_dir;
    }
    if (parc_name !== null) {
        params["parc_name"] = parc_name;
    }
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (random_seed !== null) {
        params["random_seed"] = random_seed;
    }
    if (longitudinal !== null) {
        params["longitudinal"] = longitudinal;
    }
    if (expert_file !== null) {
        params["expert_file"] = expert_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function aparc_stats_aseg_cargs(
    params: AparcStatsAsegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("aparc_stats_aseg");
    cargs.push(
        "-s",
        (params["subject_name"] ?? null)
    );
    cargs.push(
        "-gcs",
        (params["gcs_name"] ?? null)
    );
    if ((params["subject_dir"] ?? null) !== null) {
        cargs.push(
            "-sd",
            (params["subject_dir"] ?? null)
        );
    }
    if ((params["gcs_dir"] ?? null) !== null) {
        cargs.push(
            "-gcsd",
            (params["gcs_dir"] ?? null)
        );
    }
    if ((params["parc_name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["parc_name"] ?? null)
        );
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["lh_flag"] ?? null)) {
        cargs.push("-lh");
    }
    if ((params["rh_flag"] ?? null)) {
        cargs.push("-rh");
    }
    if ((params["a2009s_flag"] ?? null)) {
        cargs.push("-a2009s");
    }
    if ((params["no_aseg_flag"] ?? null)) {
        cargs.push("-noaseg");
    }
    if ((params["no_cortparc_flag"] ?? null)) {
        cargs.push("-nocortparc");
    }
    if ((params["no_parcstats_flag"] ?? null)) {
        cargs.push("-noparcstats");
    }
    if ((params["no_aparc2aseg_flag"] ?? null)) {
        cargs.push("-noaparc2aseg");
    }
    if ((params["random_seed"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["random_seed"] ?? null))
        );
    }
    if ((params["th3_flag"] ?? null)) {
        cargs.push("-th3");
    }
    if ((params["no_th3_flag"] ?? null)) {
        cargs.push("-no-th3");
    }
    if ((params["longitudinal"] ?? null) !== null) {
        cargs.push(
            "-long",
            ...(params["longitudinal"] ?? null)
        );
    }
    if ((params["expert_file"] ?? null) !== null) {
        cargs.push(
            "-expert",
            (params["expert_file"] ?? null)
        );
    }
    if ((params["expert_use_flag"] ?? null)) {
        cargs.push("-xopts-use");
    }
    if ((params["expert_clean_flag"] ?? null)) {
        cargs.push("-xopts-clean");
    }
    if ((params["expert_overwrite_flag"] ?? null)) {
        cargs.push("-xopts-overwrite");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function aparc_stats_aseg_outputs(
    params: AparcStatsAsegParameters,
    execution: Execution,
): AparcStatsAsegOutputs {
    const ret: AparcStatsAsegOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * aparc_stats_aseg
 *
 * This program runs mris_ca_label, mris_anatomical_stats and mri_aparc2aseg.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AparcStatsAsegOutputs`).
 */
function aparc_stats_aseg_execute(
    params: AparcStatsAsegParameters,
    runner: Runner | null = null,
): AparcStatsAsegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APARC_STATS_ASEG_METADATA);
    params = execution.params(params)
    const cargs = aparc_stats_aseg_cargs(params, execution)
    const ret = aparc_stats_aseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * aparc_stats_aseg
 *
 * This program runs mris_ca_label, mris_anatomical_stats and mri_aparc2aseg.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name Subject name
 * @param gcs_name GCS file name
 * @param subject_dir Specify a subjects directory (default=/usr/local/freesurfer/subjects)
 * @param gcs_dir GCS file directory (default=/usr/local/freesurfer/average)
 * @param parc_name Specify the parcellation name (default=gcs name)
 * @param output_dir Specify the output directory
 * @param log_file Specify the log file
 * @param lh_flag Left hemisphere only
 * @param rh_flag Right hemisphere only
 * @param a2009s_flag Use Christophe Destrieux cortical parcellation atlas
 * @param no_aseg_flag Do not use aseg
 * @param no_cortparc_flag Do not do cortical parcellation
 * @param no_parcstats_flag Do not do surface anatomical statistics
 * @param no_aparc2aseg_flag Do not do aparc2aseg
 * @param random_seed Random seed (default=1234)
 * @param th3_flag Use -th3 flag, turn on new volume calculation for mris_anatomical_stats
 * @param no_th3_flag Use -no-th3 flag for mris_anatomical_stats
 * @param longitudinal Longitudinal Processing
 * @param expert_file Read-in expert options file
 * @param expert_use_flag Use pre-existing expert options file
 * @param expert_clean_flag Delete pre-existing expert options file
 * @param expert_overwrite_flag Overwrite pre-existing expert options file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AparcStatsAsegOutputs`).
 */
function aparc_stats_aseg(
    subject_name: string,
    gcs_name: string,
    subject_dir: string | null = null,
    gcs_dir: string | null = null,
    parc_name: string | null = null,
    output_dir: string | null = null,
    log_file: string | null = null,
    lh_flag: boolean = false,
    rh_flag: boolean = false,
    a2009s_flag: boolean = false,
    no_aseg_flag: boolean = false,
    no_cortparc_flag: boolean = false,
    no_parcstats_flag: boolean = false,
    no_aparc2aseg_flag: boolean = false,
    random_seed: number | null = null,
    th3_flag: boolean = false,
    no_th3_flag: boolean = false,
    longitudinal: Array<string> | null = null,
    expert_file: string | null = null,
    expert_use_flag: boolean = false,
    expert_clean_flag: boolean = false,
    expert_overwrite_flag: boolean = false,
    runner: Runner | null = null,
): AparcStatsAsegOutputs {
    const params = aparc_stats_aseg_params(subject_name, gcs_name, subject_dir, gcs_dir, parc_name, output_dir, log_file, lh_flag, rh_flag, a2009s_flag, no_aseg_flag, no_cortparc_flag, no_parcstats_flag, no_aparc2aseg_flag, random_seed, th3_flag, no_th3_flag, longitudinal, expert_file, expert_use_flag, expert_clean_flag, expert_overwrite_flag)
    return aparc_stats_aseg_execute(params, runner);
}


export {
      APARC_STATS_ASEG_METADATA,
      AparcStatsAsegOutputs,
      AparcStatsAsegParameters,
      aparc_stats_aseg,
      aparc_stats_aseg_execute,
      aparc_stats_aseg_params,
};
