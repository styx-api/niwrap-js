// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DCMSPLIT_METADATA: Metadata = {
    id: "3d5aa62fefcd13c6396a58e6fed84abe77250c1e.boutiques",
    name: "dcmsplit",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DcmsplitParameters {
    "__STYXTYPE__": "dcmsplit";
    "dcm_dir": string;
    "out_dir": string;
    "copy": boolean;
    "link": boolean;
    "split_name": boolean;
    "split_uid": boolean;
    "series_no": boolean;
    "series_plus": boolean;
    "dicom_tag"?: string | null | undefined;
    "study_description": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dcmsplit": dcmsplit_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dcmsplit(...)`.
 *
 * @interface
 */
interface DcmsplitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dcmsplit_params(
    dcm_dir: string,
    out_dir: string,
    copy: boolean = false,
    link: boolean = false,
    split_name: boolean = false,
    split_uid: boolean = false,
    series_no: boolean = false,
    series_plus: boolean = false,
    dicom_tag: string | null = null,
    study_description: boolean = false,
): DcmsplitParameters {
    /**
     * Build parameters.
    
     * @param dcm_dir Directory containing the DICOM files
     * @param out_dir Output directory for split DICOM files
     * @param copy Copy files instead of creating symbolic links
     * @param link Link files instead of copying (default behavior)
     * @param split_name Split files by patient name instead of UID
     * @param split_uid Split files by Study UID instead of name (default behavior)
     * @param series_no Split files by series number
     * @param series_plus Split files by series number and either name or UID
     * @param dicom_tag Split files by given DICOM tag (group element)
     * @param study_description Split files by Study Description
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dcmsplit" as const,
        "dcm_dir": dcm_dir,
        "out_dir": out_dir,
        "copy": copy,
        "link": link,
        "split_name": split_name,
        "split_uid": split_uid,
        "series_no": series_no,
        "series_plus": series_plus,
        "study_description": study_description,
    };
    if (dicom_tag !== null) {
        params["dicom_tag"] = dicom_tag;
    }
    return params;
}


function dcmsplit_cargs(
    params: DcmsplitParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dcmsplit");
    cargs.push(
        "--dcm",
        (params["dcm_dir"] ?? null)
    );
    cargs.push(
        "--o",
        (params["out_dir"] ?? null)
    );
    if ((params["copy"] ?? null)) {
        cargs.push("--cp");
    }
    if ((params["link"] ?? null)) {
        cargs.push("--link");
    }
    if ((params["split_name"] ?? null)) {
        cargs.push("--name");
    }
    if ((params["split_uid"] ?? null)) {
        cargs.push("--uid");
    }
    if ((params["series_no"] ?? null)) {
        cargs.push("--seriesno");
    }
    if ((params["series_plus"] ?? null)) {
        cargs.push("--series+");
    }
    if ((params["dicom_tag"] ?? null) !== null) {
        cargs.push(
            "--t",
            (params["dicom_tag"] ?? null)
        );
    }
    if ((params["study_description"] ?? null)) {
        cargs.push("--studyDes");
    }
    return cargs;
}


function dcmsplit_outputs(
    params: DcmsplitParameters,
    execution: Execution,
): DcmsplitOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DcmsplitOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dcmsplit_execute(
    params: DcmsplitParameters,
    execution: Execution,
): DcmsplitOutputs {
    /**
     * Splits DICOM files into separate folders based on a unique identifier (UID).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DcmsplitOutputs`).
     */
    params = execution.params(params)
    const cargs = dcmsplit_cargs(params, execution)
    const ret = dcmsplit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dcmsplit(
    dcm_dir: string,
    out_dir: string,
    copy: boolean = false,
    link: boolean = false,
    split_name: boolean = false,
    split_uid: boolean = false,
    series_no: boolean = false,
    series_plus: boolean = false,
    dicom_tag: string | null = null,
    study_description: boolean = false,
    runner: Runner | null = null,
): DcmsplitOutputs {
    /**
     * Splits DICOM files into separate folders based on a unique identifier (UID).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param dcm_dir Directory containing the DICOM files
     * @param out_dir Output directory for split DICOM files
     * @param copy Copy files instead of creating symbolic links
     * @param link Link files instead of copying (default behavior)
     * @param split_name Split files by patient name instead of UID
     * @param split_uid Split files by Study UID instead of name (default behavior)
     * @param series_no Split files by series number
     * @param series_plus Split files by series number and either name or UID
     * @param dicom_tag Split files by given DICOM tag (group element)
     * @param study_description Split files by Study Description
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DcmsplitOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DCMSPLIT_METADATA);
    const params = dcmsplit_params(dcm_dir, out_dir, copy, link, split_name, split_uid, series_no, series_plus, dicom_tag, study_description)
    return dcmsplit_execute(params, execution);
}


export {
      DCMSPLIT_METADATA,
      DcmsplitOutputs,
      DcmsplitParameters,
      dcmsplit,
      dcmsplit_params,
};
