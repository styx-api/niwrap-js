// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_ERODE_METADATA: Metadata = {
    id: "4ac0d4ccac9419431d55b6e2a0cd4ad69eed4f20.boutiques",
    name: "volume-erode",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeErodeParameters {
    "__STYXTYPE__": "volume-erode";
    "volume": InputPathType;
    "distance": number;
    "volume_out": string;
    "opt_roi_roi_volume"?: InputPathType | null | undefined;
    "opt_subvolume_subvol"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-erode": volume_erode_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-erode": volume_erode_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_erode(...)`.
 *
 * @interface
 */
interface VolumeErodeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


function volume_erode_params(
    volume: InputPathType,
    distance: number,
    volume_out: string,
    opt_roi_roi_volume: InputPathType | null = null,
    opt_subvolume_subvol: string | null = null,
): VolumeErodeParameters {
    /**
     * Build parameters.
    
     * @param volume the volume to erode
     * @param distance distance in mm to erode
     * @param volume_out the output volume
     * @param opt_roi_roi_volume assume voxels outside this roi are nonzero: volume file, positive values denote voxels that have data
     * @param opt_subvolume_subvol select a single subvolume to dilate: the subvolume number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-erode" as const,
        "volume": volume,
        "distance": distance,
        "volume_out": volume_out,
    };
    if (opt_roi_roi_volume !== null) {
        params["opt_roi_roi_volume"] = opt_roi_roi_volume;
    }
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    return params;
}


function volume_erode_cargs(
    params: VolumeErodeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-erode");
    cargs.push(execution.inputFile((params["volume"] ?? null)));
    cargs.push(String((params["distance"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_roi_roi_volume"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_volume"] ?? null))
        );
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    return cargs;
}


function volume_erode_outputs(
    params: VolumeErodeParameters,
    execution: Execution,
): VolumeErodeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeErodeOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_erode_execute(
    params: VolumeErodeParameters,
    execution: Execution,
): VolumeErodeOutputs {
    /**
     * Erode a volume file.
     * 
     * Around each voxel with a value of zero, set surrounding voxels to zero.  The surrounding voxels are all face neighbors and all voxels within the specified distance (center to center).
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeErodeOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_erode_cargs(params, execution)
    const ret = volume_erode_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_erode(
    volume: InputPathType,
    distance: number,
    volume_out: string,
    opt_roi_roi_volume: InputPathType | null = null,
    opt_subvolume_subvol: string | null = null,
    runner: Runner | null = null,
): VolumeErodeOutputs {
    /**
     * Erode a volume file.
     * 
     * Around each voxel with a value of zero, set surrounding voxels to zero.  The surrounding voxels are all face neighbors and all voxels within the specified distance (center to center).
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume the volume to erode
     * @param distance distance in mm to erode
     * @param volume_out the output volume
     * @param opt_roi_roi_volume assume voxels outside this roi are nonzero: volume file, positive values denote voxels that have data
     * @param opt_subvolume_subvol select a single subvolume to dilate: the subvolume number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeErodeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_ERODE_METADATA);
    const params = volume_erode_params(volume, distance, volume_out, opt_roi_roi_volume, opt_subvolume_subvol)
    return volume_erode_execute(params, execution);
}


export {
      VOLUME_ERODE_METADATA,
      VolumeErodeOutputs,
      VolumeErodeParameters,
      volume_erode,
      volume_erode_params,
};
