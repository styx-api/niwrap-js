// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_MATCH_METADATA: Metadata = {
    id: "efe736f14c6cc3e4977733f00b21400160482da4.boutiques",
    name: "dmri_match",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriMatchParameters {
    "__STYXTYPE__": "dmri_match";
    "parcellation1": InputPathType;
    "parcellation2": InputPathType;
    "num_clusters": number;
    "clustering_path1": InputPathType;
    "clustering_path2": InputPathType;
    "labels": boolean;
    "euclidean": boolean;
    "bounding_box": boolean;
    "symmetry": boolean;
    "inter_hemi_ratio_removal"?: string | null | undefined;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dmri_match": dmri_match_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "dmri_match": dmri_match_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_match(...)`.
 *
 * @interface
 */
interface DmriMatchOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file from dmri_match
     */
    output_file: OutputPathType;
}


function dmri_match_params(
    parcellation1: InputPathType,
    parcellation2: InputPathType,
    num_clusters: number,
    clustering_path1: InputPathType,
    clustering_path2: InputPathType,
    output: string,
    labels: boolean = false,
    euclidean: boolean = false,
    bounding_box: boolean = false,
    symmetry: boolean = false,
    inter_hemi_ratio_removal: string | null = null,
): DmriMatchParameters {
    /**
     * Build parameters.
    
     * @param parcellation1 First parcellation input file
     * @param parcellation2 Second parcellation input file
     * @param num_clusters Number of clusters
     * @param clustering_path1 First clustering path
     * @param clustering_path2 Second clustering path
     * @param output Output file
     * @param labels Use labels (no additional input expected)
     * @param euclidean Use Euclidean distance for matching
     * @param bounding_box Use bounding box constraint (no additional input expected)
     * @param symmetry Use symmetry constraint (no additional input expected)
     * @param inter_hemi_ratio_removal Inter-hemispheric ratio cluster removal constraint
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dmri_match" as const,
        "parcellation1": parcellation1,
        "parcellation2": parcellation2,
        "num_clusters": num_clusters,
        "clustering_path1": clustering_path1,
        "clustering_path2": clustering_path2,
        "labels": labels,
        "euclidean": euclidean,
        "bounding_box": bounding_box,
        "symmetry": symmetry,
        "output": output,
    };
    if (inter_hemi_ratio_removal !== null) {
        params["inter_hemi_ratio_removal"] = inter_hemi_ratio_removal;
    }
    return params;
}


function dmri_match_cargs(
    params: DmriMatchParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dmri_match");
    cargs.push(
        "-s1",
        execution.inputFile((params["parcellation1"] ?? null))
    );
    cargs.push(
        "-s2",
        execution.inputFile((params["parcellation2"] ?? null))
    );
    cargs.push(
        "-c",
        String((params["num_clusters"] ?? null))
    );
    cargs.push(
        "-h1",
        execution.inputFile((params["clustering_path1"] ?? null))
    );
    cargs.push(
        "-h2",
        execution.inputFile((params["clustering_path2"] ?? null))
    );
    if ((params["labels"] ?? null)) {
        cargs.push("-labels");
    }
    if ((params["euclidean"] ?? null)) {
        cargs.push("-euclid");
    }
    if ((params["bounding_box"] ?? null)) {
        cargs.push("-bb");
    }
    if ((params["symmetry"] ?? null)) {
        cargs.push("-sym");
    }
    if ((params["inter_hemi_ratio_removal"] ?? null) !== null) {
        cargs.push((params["inter_hemi_ratio_removal"] ?? null));
    }
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    return cargs;
}


function dmri_match_outputs(
    params: DmriMatchParameters,
    execution: Execution,
): DmriMatchOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DmriMatchOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function dmri_match_execute(
    params: DmriMatchParameters,
    execution: Execution,
): DmriMatchOutputs {
    /**
     * Tool for matching diffusion MRI parcellations.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DmriMatchOutputs`).
     */
    params = execution.params(params)
    const cargs = dmri_match_cargs(params, execution)
    const ret = dmri_match_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dmri_match(
    parcellation1: InputPathType,
    parcellation2: InputPathType,
    num_clusters: number,
    clustering_path1: InputPathType,
    clustering_path2: InputPathType,
    output: string,
    labels: boolean = false,
    euclidean: boolean = false,
    bounding_box: boolean = false,
    symmetry: boolean = false,
    inter_hemi_ratio_removal: string | null = null,
    runner: Runner | null = null,
): DmriMatchOutputs {
    /**
     * Tool for matching diffusion MRI parcellations.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param parcellation1 First parcellation input file
     * @param parcellation2 Second parcellation input file
     * @param num_clusters Number of clusters
     * @param clustering_path1 First clustering path
     * @param clustering_path2 Second clustering path
     * @param output Output file
     * @param labels Use labels (no additional input expected)
     * @param euclidean Use Euclidean distance for matching
     * @param bounding_box Use bounding box constraint (no additional input expected)
     * @param symmetry Use symmetry constraint (no additional input expected)
     * @param inter_hemi_ratio_removal Inter-hemispheric ratio cluster removal constraint
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DmriMatchOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_MATCH_METADATA);
    const params = dmri_match_params(parcellation1, parcellation2, num_clusters, clustering_path1, clustering_path2, output, labels, euclidean, bounding_box, symmetry, inter_hemi_ratio_removal)
    return dmri_match_execute(params, execution);
}


export {
      DMRI_MATCH_METADATA,
      DmriMatchOutputs,
      DmriMatchParameters,
      dmri_match,
      dmri_match_params,
};
