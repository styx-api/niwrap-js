// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__COMPUTE_OC_WEIGHTS_METADATA: Metadata = {
    id: "4427220e56bd9be0b0fb6b294b7d2992dca6669c.boutiques",
    name: "@compute_OC_weights",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VComputeOcWeightsParameters {
    "__STYXTYPE__": "@compute_OC_weights";
    "echo_times"?: string | null | undefined;
    "echo_dsets": Array<string>;
    "prefix"?: string | null | undefined;
    "def_to_equal"?: string | null | undefined;
    "oc_method"?: string | null | undefined;
    "sum_weight_tolerance"?: number | null | undefined;
    "t2_star_limit"?: number | null | undefined;
    "work_dir"?: string | null | undefined;
    "verbosity": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@compute_OC_weights": v__compute_oc_weights_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@compute_OC_weights": v__compute_oc_weights_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__compute_oc_weights(...)`.
 *
 * @interface
 */
interface VComputeOcWeightsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting OC weights dataset
     */
    output_oc_weights: OutputPathType | null;
}


function v__compute_oc_weights_params(
    echo_dsets: Array<string>,
    echo_times: string | null = null,
    prefix: string | null = null,
    def_to_equal: string | null = null,
    oc_method: string | null = null,
    sum_weight_tolerance: number | null = null,
    t2_star_limit: number | null = null,
    work_dir: string | null = null,
    verbosity: boolean = false,
): VComputeOcWeightsParameters {
    /**
     * Build parameters.
    
     * @param echo_dsets Specify one run of multi-echo EPI data.
     * @param echo_times Specify echo times as list (e.g., "15 30.5 41"). Use either -echo_times or -echo_times_files.
     * @param prefix Specify prefix of resulting OC weights dataset (e.g., OC.weights.SUBJ).
     * @param def_to_equal Specify whether to default to equal weights (default = no).
     * @param oc_method Specify which OC method to employ (default = OC_A).
     * @param sum_weight_tolerance Tolerance for summed weight difference from 1.0 (default = 0.001).
     * @param t2_star_limit Specify limit for T2* values (default = 300).
     * @param work_dir Specify directory to compute results in.
     * @param verbosity Increase verbosity of output.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@compute_OC_weights" as const,
        "echo_dsets": echo_dsets,
        "verbosity": verbosity,
    };
    if (echo_times !== null) {
        params["echo_times"] = echo_times;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (def_to_equal !== null) {
        params["def_to_equal"] = def_to_equal;
    }
    if (oc_method !== null) {
        params["oc_method"] = oc_method;
    }
    if (sum_weight_tolerance !== null) {
        params["sum_weight_tolerance"] = sum_weight_tolerance;
    }
    if (t2_star_limit !== null) {
        params["t2_star_limit"] = t2_star_limit;
    }
    if (work_dir !== null) {
        params["work_dir"] = work_dir;
    }
    return params;
}


function v__compute_oc_weights_cargs(
    params: VComputeOcWeightsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@compute_OC_weights");
    if ((params["echo_times"] ?? null) !== null) {
        cargs.push(
            "-echo_times",
            (params["echo_times"] ?? null)
        );
    }
    cargs.push(
        "-echo_dsets",
        ...(params["echo_dsets"] ?? null)
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["def_to_equal"] ?? null) !== null) {
        cargs.push(
            "-def_to_equal",
            (params["def_to_equal"] ?? null)
        );
    }
    if ((params["oc_method"] ?? null) !== null) {
        cargs.push(
            "-oc_method",
            (params["oc_method"] ?? null)
        );
    }
    if ((params["sum_weight_tolerance"] ?? null) !== null) {
        cargs.push(
            "-sum_weight_tolerance",
            String((params["sum_weight_tolerance"] ?? null))
        );
    }
    if ((params["t2_star_limit"] ?? null) !== null) {
        cargs.push(
            "-t2_star_limit",
            String((params["t2_star_limit"] ?? null))
        );
    }
    if ((params["work_dir"] ?? null) !== null) {
        cargs.push(
            "-work_dir",
            (params["work_dir"] ?? null)
        );
    }
    if ((params["verbosity"] ?? null)) {
        cargs.push("-verb");
    }
    return cargs;
}


function v__compute_oc_weights_outputs(
    params: VComputeOcWeightsParameters,
    execution: Execution,
): VComputeOcWeightsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VComputeOcWeightsOutputs = {
        root: execution.outputFile("."),
        output_oc_weights: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+tlrc.HEAD"].join('')) : null,
    };
    return ret;
}


function v__compute_oc_weights_execute(
    params: VComputeOcWeightsParameters,
    execution: Execution,
): VComputeOcWeightsOutputs {
    /**
     * Compute optimal combined weights dataset for multi-echo EPI data.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VComputeOcWeightsOutputs`).
     */
    params = execution.params(params)
    const cargs = v__compute_oc_weights_cargs(params, execution)
    const ret = v__compute_oc_weights_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__compute_oc_weights(
    echo_dsets: Array<string>,
    echo_times: string | null = null,
    prefix: string | null = null,
    def_to_equal: string | null = null,
    oc_method: string | null = null,
    sum_weight_tolerance: number | null = null,
    t2_star_limit: number | null = null,
    work_dir: string | null = null,
    verbosity: boolean = false,
    runner: Runner | null = null,
): VComputeOcWeightsOutputs {
    /**
     * Compute optimal combined weights dataset for multi-echo EPI data.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param echo_dsets Specify one run of multi-echo EPI data.
     * @param echo_times Specify echo times as list (e.g., "15 30.5 41"). Use either -echo_times or -echo_times_files.
     * @param prefix Specify prefix of resulting OC weights dataset (e.g., OC.weights.SUBJ).
     * @param def_to_equal Specify whether to default to equal weights (default = no).
     * @param oc_method Specify which OC method to employ (default = OC_A).
     * @param sum_weight_tolerance Tolerance for summed weight difference from 1.0 (default = 0.001).
     * @param t2_star_limit Specify limit for T2* values (default = 300).
     * @param work_dir Specify directory to compute results in.
     * @param verbosity Increase verbosity of output.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VComputeOcWeightsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__COMPUTE_OC_WEIGHTS_METADATA);
    const params = v__compute_oc_weights_params(echo_dsets, echo_times, prefix, def_to_equal, oc_method, sum_weight_tolerance, t2_star_limit, work_dir, verbosity)
    return v__compute_oc_weights_execute(params, execution);
}


export {
      VComputeOcWeightsOutputs,
      VComputeOcWeightsParameters,
      V__COMPUTE_OC_WEIGHTS_METADATA,
      v__compute_oc_weights,
      v__compute_oc_weights_params,
};
