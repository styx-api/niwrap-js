// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TWOTO_COMPLEX_METADATA: Metadata = {
    id: "aa8fbbdea4d3caa146b57ec824c11fc1f44cb810.boutiques",
    name: "3dTwotoComplex",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTwotoComplexParameters {
    "@type": "afni.3dTwotoComplex";
    "dataset1": InputPathType;
    "dataset2"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "ri": boolean;
    "mp": boolean;
    "mask"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dTwotoComplex": v_3d_twoto_complex_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dTwotoComplex": v_3d_twoto_complex_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_twoto_complex(...)`.
 *
 * @interface
 */
interface V3dTwotoComplexOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output complex-valued dataset with prefix
     */
    out_brick: OutputPathType | null;
    /**
     * Header for the complex-valued dataset
     */
    out_head: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dataset1 Input dataset (either as 1 dataset with 2 sub-bricks or 2 separate datasets)
 * @param dataset2 Second input dataset (optional if 2 sub-bricks in the first dataset)
 * @param prefix Prefix for the output dataset [default='cmplx']
 * @param ri Specify that the 2 inputs are real and imaginary parts [this is the default]
 * @param mp Specify that the 2 inputs are magnitude and phase [phase is in radians]
 * @param mask Only output nonzero values where the mask dataset is nonzero
 *
 * @returns Parameter dictionary
 */
function v_3d_twoto_complex_params(
    dataset1: InputPathType,
    dataset2: InputPathType | null = null,
    prefix: string | null = null,
    ri: boolean = false,
    mp: boolean = false,
    mask: InputPathType | null = null,
): V3dTwotoComplexParameters {
    const params = {
        "@type": "afni.3dTwotoComplex" as const,
        "dataset1": dataset1,
        "ri": ri,
        "mp": mp,
    };
    if (dataset2 !== null) {
        params["dataset2"] = dataset2;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_twoto_complex_cargs(
    params: V3dTwotoComplexParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dTwotoComplex");
    cargs.push(execution.inputFile((params["dataset1"] ?? null)));
    if ((params["dataset2"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["dataset2"] ?? null)));
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["ri"] ?? null)) {
        cargs.push("-RI");
    }
    if ((params["mp"] ?? null)) {
        cargs.push("-MP");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_twoto_complex_outputs(
    params: V3dTwotoComplexParameters,
    execution: Execution,
): V3dTwotoComplexOutputs {
    const ret: V3dTwotoComplexOutputs = {
        root: execution.outputFile("."),
        out_brick: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
        out_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
    };
    return ret;
}


/**
 * 3dTwotoComplex
 *
 * Converts 2 sub-bricks of input to a complex-valued dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTwotoComplexOutputs`).
 */
function v_3d_twoto_complex_execute(
    params: V3dTwotoComplexParameters,
    runner: Runner | null = null,
): V3dTwotoComplexOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TWOTO_COMPLEX_METADATA);
    params = execution.params(params)
    const cargs = v_3d_twoto_complex_cargs(params, execution)
    const ret = v_3d_twoto_complex_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dTwotoComplex
 *
 * Converts 2 sub-bricks of input to a complex-valued dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset1 Input dataset (either as 1 dataset with 2 sub-bricks or 2 separate datasets)
 * @param dataset2 Second input dataset (optional if 2 sub-bricks in the first dataset)
 * @param prefix Prefix for the output dataset [default='cmplx']
 * @param ri Specify that the 2 inputs are real and imaginary parts [this is the default]
 * @param mp Specify that the 2 inputs are magnitude and phase [phase is in radians]
 * @param mask Only output nonzero values where the mask dataset is nonzero
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTwotoComplexOutputs`).
 */
function v_3d_twoto_complex(
    dataset1: InputPathType,
    dataset2: InputPathType | null = null,
    prefix: string | null = null,
    ri: boolean = false,
    mp: boolean = false,
    mask: InputPathType | null = null,
    runner: Runner | null = null,
): V3dTwotoComplexOutputs {
    const params = v_3d_twoto_complex_params(dataset1, dataset2, prefix, ri, mp, mask)
    return v_3d_twoto_complex_execute(params, runner);
}


export {
      V3dTwotoComplexOutputs,
      V3dTwotoComplexParameters,
      V_3D_TWOTO_COMPLEX_METADATA,
      v_3d_twoto_complex,
      v_3d_twoto_complex_execute,
      v_3d_twoto_complex_params,
};
