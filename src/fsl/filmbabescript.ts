// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FILMBABESCRIPT_METADATA: Metadata = {
    id: "c482f1ace2d9ca2fee7c3ed712be29e7f1ae595a.boutiques",
    name: "filmbabescript",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FilmbabescriptParameters {
    "@type": "fsl.filmbabescript";
    "feat_dir": string;
    "flobs_dir": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.filmbabescript": filmbabescript_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `filmbabescript(...)`.
 *
 * @interface
 */
interface FilmbabescriptOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param feat_dir Input FEAT directory
 * @param flobs_dir Input FLOBs directory
 *
 * @returns Parameter dictionary
 */
function filmbabescript_params(
    feat_dir: string,
    flobs_dir: string,
): FilmbabescriptParameters {
    const params = {
        "@type": "fsl.filmbabescript" as const,
        "feat_dir": feat_dir,
        "flobs_dir": flobs_dir,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function filmbabescript_cargs(
    params: FilmbabescriptParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("filmbabescript");
    cargs.push((params["feat_dir"] ?? null));
    cargs.push((params["flobs_dir"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function filmbabescript_outputs(
    params: FilmbabescriptParameters,
    execution: Execution,
): FilmbabescriptOutputs {
    const ret: FilmbabescriptOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool/script for processing FEAT directories and FLOBs directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FilmbabescriptOutputs`).
 */
function filmbabescript_execute(
    params: FilmbabescriptParameters,
    runner: Runner | null = null,
): FilmbabescriptOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FILMBABESCRIPT_METADATA);
    params = execution.params(params)
    const cargs = filmbabescript_cargs(params, execution)
    const ret = filmbabescript_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool/script for processing FEAT directories and FLOBs directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param feat_dir Input FEAT directory
 * @param flobs_dir Input FLOBs directory
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FilmbabescriptOutputs`).
 */
function filmbabescript(
    feat_dir: string,
    flobs_dir: string,
    runner: Runner | null = null,
): FilmbabescriptOutputs {
    const params = filmbabescript_params(feat_dir, flobs_dir)
    return filmbabescript_execute(params, runner);
}


export {
      FILMBABESCRIPT_METADATA,
      FilmbabescriptOutputs,
      FilmbabescriptParameters,
      filmbabescript,
      filmbabescript_execute,
      filmbabescript_params,
};
