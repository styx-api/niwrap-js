// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ORIENT_LAS_METADATA: Metadata = {
    id: "bf21dfa61b8f78898dd05f089d55ed40743032e8.boutiques",
    name: "orientLAS",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface OrientLasParameters {
    "@type": "freesurfer.orientLAS";
    "input_image": InputPathType;
    "output_image": string;
    "check": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.orientLAS": orient_las_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.orientLAS": orient_las_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `orient_las(...)`.
 *
 * @interface
 */
interface OrientLasOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image with LAS orientation
     */
    output_las_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input image in NIfTI format
 * @param output_image Output image in NIfTI format with LAS orientation
 * @param check Check the match of input and output images using tkregister, and for diffusion data, run dtifit and show tensors with fslview
 *
 * @returns Parameter dictionary
 */
function orient_las_params(
    input_image: InputPathType,
    output_image: string,
    check: boolean = false,
): OrientLasParameters {
    const params = {
        "@type": "freesurfer.orientLAS" as const,
        "input_image": input_image,
        "output_image": output_image,
        "check": check,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function orient_las_cargs(
    params: OrientLasParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("orientLAS");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    if ((params["check"] ?? null)) {
        cargs.push("--check");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function orient_las_outputs(
    params: OrientLasParameters,
    execution: Execution,
): OrientLasOutputs {
    const ret: OrientLasOutputs = {
        root: execution.outputFile("."),
        output_las_image: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * orientLAS
 *
 * Convert image to LAS orientation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `OrientLasOutputs`).
 */
function orient_las_execute(
    params: OrientLasParameters,
    runner: Runner | null = null,
): OrientLasOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ORIENT_LAS_METADATA);
    params = execution.params(params)
    const cargs = orient_las_cargs(params, execution)
    const ret = orient_las_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * orientLAS
 *
 * Convert image to LAS orientation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image Input image in NIfTI format
 * @param output_image Output image in NIfTI format with LAS orientation
 * @param check Check the match of input and output images using tkregister, and for diffusion data, run dtifit and show tensors with fslview
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `OrientLasOutputs`).
 */
function orient_las(
    input_image: InputPathType,
    output_image: string,
    check: boolean = false,
    runner: Runner | null = null,
): OrientLasOutputs {
    const params = orient_las_params(input_image, output_image, check)
    return orient_las_execute(params, runner);
}


export {
      ORIENT_LAS_METADATA,
      OrientLasOutputs,
      OrientLasParameters,
      orient_las,
      orient_las_execute,
      orient_las_params,
};
