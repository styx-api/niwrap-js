// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TSORT_METADATA: Metadata = {
    id: "0baecbfda8717ca32038a0d906eaab9d406613ee.boutiques",
    name: "3dTsort",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTsortParameters {
    "__STYXTYPE__": "3dTsort";
    "input_file": InputPathType;
    "prefix"?: string | null | undefined;
    "inc": boolean;
    "dec": boolean;
    "rank": boolean;
    "ind": boolean;
    "val": boolean;
    "random": boolean;
    "ranfft": boolean;
    "randft": boolean;
    "datum"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dTsort": v_3d_tsort_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dTsort": v_3d_tsort_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tsort(...)`.
 *
 * @interface
 */
interface V3dTsortOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main default output of 3dTsort
     */
    output_dataset: OutputPathType | null;
}


function v_3d_tsort_params(
    input_file: InputPathType,
    prefix: string | null = null,
    inc: boolean = false,
    dec: boolean = false,
    rank: boolean = false,
    ind: boolean = false,
    val: boolean = false,
    random: boolean = false,
    ranfft: boolean = false,
    randft: boolean = false,
    datum: string | null = null,
): V3dTsortParameters {
    /**
     * Build parameters.
    
     * @param input_file Input dataset to be sorted
     * @param prefix Prefix for the output dataset
     * @param inc Sort into increasing order (default)
     * @param dec Sort into decreasing order
     * @param rank Output rank instead of sorted values; ranks range from 1 to Nvals
     * @param ind Output sorting index (0 to Nvals -1)
     * @param val Output sorted values (default)
     * @param random Randomly shuffle (permute) the time points in each voxel
     * @param ranfft Randomize each time series by scrambling the FFT phase
     * @param randft Randomize each time series by scrambling the DFT phase
     * @param datum Coerce the output data to be stored as the given type (byte, short, or float)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dTsort" as const,
        "input_file": input_file,
        "inc": inc,
        "dec": dec,
        "rank": rank,
        "ind": ind,
        "val": val,
        "random": random,
        "ranfft": ranfft,
        "randft": randft,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    return params;
}


function v_3d_tsort_cargs(
    params: V3dTsortParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dTsort");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["inc"] ?? null)) {
        cargs.push("-inc");
    }
    if ((params["dec"] ?? null)) {
        cargs.push("-dec");
    }
    if ((params["rank"] ?? null)) {
        cargs.push("-rank");
    }
    if ((params["ind"] ?? null)) {
        cargs.push("-ind");
    }
    if ((params["val"] ?? null)) {
        cargs.push("-val");
    }
    if ((params["random"] ?? null)) {
        cargs.push("-random");
    }
    if ((params["ranfft"] ?? null)) {
        cargs.push("-ranFFT");
    }
    if ((params["randft"] ?? null)) {
        cargs.push("-ranDFT");
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    return cargs;
}


function v_3d_tsort_outputs(
    params: V3dTsortParameters,
    execution: Execution,
): V3dTsortOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dTsortOutputs = {
        root: execution.outputFile("."),
        output_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function v_3d_tsort_execute(
    params: V3dTsortParameters,
    execution: Execution,
): V3dTsortOutputs {
    /**
     * Sorts each voxel in a dataset and produces a new dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dTsortOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_tsort_cargs(params, execution)
    const ret = v_3d_tsort_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_tsort(
    input_file: InputPathType,
    prefix: string | null = null,
    inc: boolean = false,
    dec: boolean = false,
    rank: boolean = false,
    ind: boolean = false,
    val: boolean = false,
    random: boolean = false,
    ranfft: boolean = false,
    randft: boolean = false,
    datum: string | null = null,
    runner: Runner | null = null,
): V3dTsortOutputs {
    /**
     * Sorts each voxel in a dataset and produces a new dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Input dataset to be sorted
     * @param prefix Prefix for the output dataset
     * @param inc Sort into increasing order (default)
     * @param dec Sort into decreasing order
     * @param rank Output rank instead of sorted values; ranks range from 1 to Nvals
     * @param ind Output sorting index (0 to Nvals -1)
     * @param val Output sorted values (default)
     * @param random Randomly shuffle (permute) the time points in each voxel
     * @param ranfft Randomize each time series by scrambling the FFT phase
     * @param randft Randomize each time series by scrambling the DFT phase
     * @param datum Coerce the output data to be stored as the given type (byte, short, or float)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dTsortOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TSORT_METADATA);
    const params = v_3d_tsort_params(input_file, prefix, inc, dec, rank, ind, val, random, ranfft, randft, datum)
    return v_3d_tsort_execute(params, execution);
}


export {
      V3dTsortOutputs,
      V3dTsortParameters,
      V_3D_TSORT_METADATA,
      v_3d_tsort,
      v_3d_tsort_params,
};
