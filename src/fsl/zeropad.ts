// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ZEROPAD_METADATA: Metadata = {
    id: "88af77357126402075d3c052c3f0263af7fd3e22.boutiques",
    name: "zeropad",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ZeropadParameters {
    "@type": "fsl.zeropad";
    "input_number": string;
    "length": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.zeropad": zeropad_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.zeropad": zeropad_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `zeropad(...)`.
 *
 * @interface
 */
interface ZeropadOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the zero-padded output
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_number Input number to be zero-padded
 * @param length Desired length of the output string
 *
 * @returns Parameter dictionary
 */
function zeropad_params(
    input_number: string,
    length: number,
): ZeropadParameters {
    const params = {
        "@type": "fsl.zeropad" as const,
        "input_number": input_number,
        "length": length,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function zeropad_cargs(
    params: ZeropadParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("zeropad");
    cargs.push((params["input_number"] ?? null));
    cargs.push(String((params["length"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function zeropad_outputs(
    params: ZeropadParameters,
    execution: Execution,
): ZeropadOutputs {
    const ret: ZeropadOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["padded_output.txt"].join('')),
    };
    return ret;
}


/**
 * zeropad
 *
 * Tool for zero-padding numbers to a specified length.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ZeropadOutputs`).
 */
function zeropad_execute(
    params: ZeropadParameters,
    runner: Runner | null = null,
): ZeropadOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ZEROPAD_METADATA);
    params = execution.params(params)
    const cargs = zeropad_cargs(params, execution)
    const ret = zeropad_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * zeropad
 *
 * Tool for zero-padding numbers to a specified length.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_number Input number to be zero-padded
 * @param length Desired length of the output string
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ZeropadOutputs`).
 */
function zeropad(
    input_number: string,
    length: number,
    runner: Runner | null = null,
): ZeropadOutputs {
    const params = zeropad_params(input_number, length)
    return zeropad_execute(params, runner);
}


export {
      ZEROPAD_METADATA,
      ZeropadOutputs,
      ZeropadParameters,
      zeropad,
      zeropad_execute,
      zeropad_params,
};
