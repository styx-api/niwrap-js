// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_ENTROPY_METADATA: Metadata = {
    id: "d0ec05255b1b8c8b390b137853362c1447b2a789.boutiques",
    name: "mris_entropy",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisEntropyParameters {
    "__STYXTYPE__": "mris_entropy";
    "subject": string;
    "hemi": string;
    "wfile": InputPathType;
    "curvfile": InputPathType;
    "average_iterations"?: number | null | undefined;
    "normalize": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_entropy": mris_entropy_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_entropy": mris_entropy_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_entropy(...)`.
 *
 * @interface
 */
interface MrisEntropyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the computed entropy
     */
    output_file: OutputPathType;
}


function mris_entropy_params(
    subject: string,
    hemi: string,
    wfile: InputPathType,
    curvfile: InputPathType,
    average_iterations: number | null = 0,
    normalize: boolean = false,
): MrisEntropyParameters {
    /**
     * Build parameters.
    
     * @param subject Subject ID
     * @param hemi Hemisphere (e.g., lh or rh)
     * @param wfile Weight file for surface
     * @param curvfile Curvature file for input
     * @param average_iterations Specify number of curvature averaging iterations (default=0)
     * @param normalize Normalize curvature before writing
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_entropy" as const,
        "subject": subject,
        "hemi": hemi,
        "wfile": wfile,
        "curvfile": curvfile,
        "normalize": normalize,
    };
    if (average_iterations !== null) {
        params["average_iterations"] = average_iterations;
    }
    return params;
}


function mris_entropy_cargs(
    params: MrisEntropyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_entropy");
    cargs.push((params["subject"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["wfile"] ?? null)));
    cargs.push(execution.inputFile((params["curvfile"] ?? null)));
    if ((params["average_iterations"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["average_iterations"] ?? null))
        );
    }
    if ((params["normalize"] ?? null)) {
        cargs.push("-n");
    }
    return cargs;
}


function mris_entropy_outputs(
    params: MrisEntropyParameters,
    execution: Execution,
): MrisEntropyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisEntropyOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["subject"] ?? null), "_", (params["hemi"] ?? null), "_output.txt"].join('')),
    };
    return ret;
}


function mris_entropy_execute(
    params: MrisEntropyParameters,
    execution: Execution,
): MrisEntropyOutputs {
    /**
     * Computes the entropy of a surface activation pattern for FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisEntropyOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_entropy_cargs(params, execution)
    const ret = mris_entropy_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_entropy(
    subject: string,
    hemi: string,
    wfile: InputPathType,
    curvfile: InputPathType,
    average_iterations: number | null = 0,
    normalize: boolean = false,
    runner: Runner | null = null,
): MrisEntropyOutputs {
    /**
     * Computes the entropy of a surface activation pattern for FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject ID
     * @param hemi Hemisphere (e.g., lh or rh)
     * @param wfile Weight file for surface
     * @param curvfile Curvature file for input
     * @param average_iterations Specify number of curvature averaging iterations (default=0)
     * @param normalize Normalize curvature before writing
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisEntropyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_ENTROPY_METADATA);
    const params = mris_entropy_params(subject, hemi, wfile, curvfile, average_iterations, normalize)
    return mris_entropy_execute(params, execution);
}


export {
      MRIS_ENTROPY_METADATA,
      MrisEntropyOutputs,
      MrisEntropyParameters,
      mris_entropy,
      mris_entropy_params,
};
