// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_ASTRIP_METADATA: Metadata = {
    id: "cd3707044d51e37b30b478fdfc860e9d133d8ffa.boutiques",
    name: "1dAstrip",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dAstripParameters {
    "@type"?: "afni/1dAstrip";
    "infile": InputPathType;
}
type V1dAstripParametersTagged = Required<Pick<V1dAstripParameters, '@type'>> & V1dAstripParameters;


/**
 * Output object returned when calling `V1dAstripParameters(...)`.
 *
 * @interface
 */
interface V1dAstripOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with only numeric characters.
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input file from which non-numeric characters will be stripped.
 *
 * @returns Parameter dictionary
 */
function v_1d_astrip_params(
    infile: InputPathType,
): V1dAstripParametersTagged {
    const params = {
        "@type": "afni/1dAstrip" as const,
        "infile": infile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1d_astrip_cargs(
    params: V1dAstripParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dAstrip");
    cargs.push(["< ", execution.inputFile((params["infile"] ?? null))].join(''));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1d_astrip_outputs(
    params: V1dAstripParameters,
    execution: Execution,
): V1dAstripOutputs {
    const ret: V1dAstripOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile(["[OUTPUT_FILE]"].join('')),
    };
    return ret;
}


/**
 * 1dAstrip
 *
 * Strips non-numeric characters from a file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dAstripOutputs`).
 */
function v_1d_astrip_execute(
    params: V1dAstripParameters,
    runner: Runner | null = null,
): V1dAstripOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_ASTRIP_METADATA);
    params = execution.params(params)
    const cargs = v_1d_astrip_cargs(params, execution)
    const ret = v_1d_astrip_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 1dAstrip
 *
 * Strips non-numeric characters from a file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input file from which non-numeric characters will be stripped.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dAstripOutputs`).
 */
function v_1d_astrip(
    infile: InputPathType,
    runner: Runner | null = null,
): V1dAstripOutputs {
    const params = v_1d_astrip_params(infile)
    return v_1d_astrip_execute(params, runner);
}


export {
      V1dAstripOutputs,
      V_1D_ASTRIP_METADATA,
      v_1d_astrip,
      v_1d_astrip_execute,
      v_1d_astrip_params,
};
