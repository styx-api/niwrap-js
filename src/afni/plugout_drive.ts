// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PLUGOUT_DRIVE_METADATA: Metadata = {
    id: "65a44f6f7d92c1ad9ba4ed1d48f6c277a7f935fb.boutiques",
    name: "plugout_drive",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface PlugoutDriveParameters {
    "__STYXTYPE__": "plugout_drive";
    "host"?: string | null | undefined;
    "verbose": boolean;
    "port"?: number | null | undefined;
    "maxwait"?: number | null | undefined;
    "name"?: string | null | undefined;
    "command"?: Array<string> | null | undefined;
    "quit": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "plugout_drive": plugout_drive_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `plugout_drive(...)`.
 *
 * @interface
 */
interface PlugoutDriveOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function plugout_drive_params(
    host: string | null = null,
    verbose: boolean = false,
    port: number | null = null,
    maxwait: number | null = null,
    name: string | null = null,
    command: Array<string> | null = null,
    quit: boolean = false,
): PlugoutDriveParameters {
    /**
     * Build parameters.
    
     * @param host Connect to AFNI running on the specified host using TCP/IP. Default is 'localhost'.
     * @param verbose Verbose mode.
     * @param port Use TCP/IP port number. Default is 8099.
     * @param maxwait Maximum wait time in seconds for AFNI to connect. Default is 9 seconds.
     * @param name Name that AFNI assigns to this plugout. Default is a pre-defined name.
     * @param command Command to be executed on AFNI. Example: '-com "SET_FUNCTION SomeFunction"'.
     * @param quit Quit after executing all -com commands. Default is to wait for more commands.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "plugout_drive" as const,
        "verbose": verbose,
        "quit": quit,
    };
    if (host !== null) {
        params["host"] = host;
    }
    if (port !== null) {
        params["port"] = port;
    }
    if (maxwait !== null) {
        params["maxwait"] = maxwait;
    }
    if (name !== null) {
        params["name"] = name;
    }
    if (command !== null) {
        params["command"] = command;
    }
    return params;
}


function plugout_drive_cargs(
    params: PlugoutDriveParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("plugout_drive");
    if ((params["host"] ?? null) !== null) {
        cargs.push(
            "-host",
            (params["host"] ?? null)
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["port"] ?? null) !== null) {
        cargs.push(
            "-port",
            String((params["port"] ?? null))
        );
    }
    if ((params["maxwait"] ?? null) !== null) {
        cargs.push(
            "-maxwait",
            String((params["maxwait"] ?? null))
        );
    }
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["name"] ?? null)
        );
    }
    if ((params["command"] ?? null) !== null) {
        cargs.push(
            "-com",
            ...(params["command"] ?? null)
        );
    }
    if ((params["quit"] ?? null)) {
        cargs.push("-quit");
    }
    return cargs;
}


function plugout_drive_outputs(
    params: PlugoutDriveParameters,
    execution: Execution,
): PlugoutDriveOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: PlugoutDriveOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function plugout_drive_execute(
    params: PlugoutDriveParameters,
    execution: Execution,
): PlugoutDriveOutputs {
    /**
     * This program connects to AFNI and sends commands that the user specifies interactively or on command line over to AFNI to be executed.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `PlugoutDriveOutputs`).
     */
    params = execution.params(params)
    const cargs = plugout_drive_cargs(params, execution)
    const ret = plugout_drive_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function plugout_drive(
    host: string | null = null,
    verbose: boolean = false,
    port: number | null = null,
    maxwait: number | null = null,
    name: string | null = null,
    command: Array<string> | null = null,
    quit: boolean = false,
    runner: Runner | null = null,
): PlugoutDriveOutputs {
    /**
     * This program connects to AFNI and sends commands that the user specifies interactively or on command line over to AFNI to be executed.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param host Connect to AFNI running on the specified host using TCP/IP. Default is 'localhost'.
     * @param verbose Verbose mode.
     * @param port Use TCP/IP port number. Default is 8099.
     * @param maxwait Maximum wait time in seconds for AFNI to connect. Default is 9 seconds.
     * @param name Name that AFNI assigns to this plugout. Default is a pre-defined name.
     * @param command Command to be executed on AFNI. Example: '-com "SET_FUNCTION SomeFunction"'.
     * @param quit Quit after executing all -com commands. Default is to wait for more commands.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `PlugoutDriveOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PLUGOUT_DRIVE_METADATA);
    const params = plugout_drive_params(host, verbose, port, maxwait, name, command, quit)
    return plugout_drive_execute(params, execution);
}


export {
      PLUGOUT_DRIVE_METADATA,
      PlugoutDriveOutputs,
      PlugoutDriveParameters,
      plugout_drive,
      plugout_drive_params,
};
