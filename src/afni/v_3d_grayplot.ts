// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_GRAYPLOT_METADATA: Metadata = {
    id: "f6e3887ef52f450f8f7c42c285ca11d1dca72962.boutiques",
    name: "3dGrayplot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dGrayplotParameters {
    "@type"?: "afni/3dGrayplot";
    "input": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "dimensions"?: Array<number> | null | undefined;
    "resample_old": boolean;
    "polort"?: number | null | undefined;
    "fwhm"?: number | null | undefined;
    "pvorder": boolean;
    "LJorder": boolean;
    "peelorder": boolean;
    "ijkorder": boolean;
    "range"?: number | null | undefined;
    "percent": boolean;
    "raw_with_bounds"?: Array<number> | null | undefined;
}
type V3dGrayplotParametersTagged = Required<Pick<V3dGrayplotParameters, '@type'>> & V3dGrayplotParameters;


/**
 * Output object returned when calling `V3dGrayplotParameters(...)`.
 *
 * @interface
 */
interface V3dGrayplotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Grayplot image file
     */
    grayplot_img: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input Input dataset
 * @param mask Name of mask dataset. Voxels that are 0 in the mask will not be processed.
 * @param prefix Name for the output file. Default is Grayplot.png
 * @param dimensions Output size of image in pixels: [width height]. Defaults are width=1024 and height=512.
 * @param resample_old Original resampling method for processed dataset.
 * @param polort Order of polynomials for detrending. Default is 2. Use '-1' if data is already detrended and de-meaned.
 * @param fwhm FWHM of blurring radius to use in the dataset before making the image. Default is 0 mm.
 * @param pvorder Order the voxels by how well they match the two leading principal components of their partition.
 * @param ljorder Order the voxels by their Ljung-Box statistics, a measure of temporal correlation.
 * @param peelorder Order the voxels by how many 'peel' steps are needed to get from the partition boundary to the voxel.
 * @param ijkorder Default intra-partition ordering by dataset 3D index ('ijk').
 * @param range Set the range of the data to be plotted. Value of 0 is middle-gray, +X is white, -X is black.
 * @param percent Scale values to percent differences from the mean of each voxel timeseries. Suitable for raw time series datasets.
 * @param raw_with_bounds Map values <= A to black, values >= B to white, and intermediate values to grays.
 *
 * @returns Parameter dictionary
 */
function v_3d_grayplot_params(
    input: InputPathType,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    dimensions: Array<number> | null = null,
    resample_old: boolean = false,
    polort: number | null = null,
    fwhm: number | null = null,
    pvorder: boolean = false,
    ljorder: boolean = false,
    peelorder: boolean = false,
    ijkorder: boolean = false,
    range: number | null = null,
    percent: boolean = false,
    raw_with_bounds: Array<number> | null = null,
): V3dGrayplotParametersTagged {
    const params = {
        "@type": "afni/3dGrayplot" as const,
        "input": input,
        "resample_old": resample_old,
        "pvorder": pvorder,
        "LJorder": ljorder,
        "peelorder": peelorder,
        "ijkorder": ijkorder,
        "percent": percent,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (dimensions !== null) {
        params["dimensions"] = dimensions;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (range !== null) {
        params["range"] = range;
    }
    if (raw_with_bounds !== null) {
        params["raw_with_bounds"] = raw_with_bounds;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_grayplot_cargs(
    params: V3dGrayplotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dGrayplot");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["dimensions"] ?? null) !== null) {
        cargs.push(
            "-dimen",
            ...(params["dimensions"] ?? null).map(String)
        );
    }
    if ((params["resample_old"] ?? false)) {
        cargs.push("-oldresam");
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "-fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["pvorder"] ?? false)) {
        cargs.push("-pvorder");
    }
    if ((params["LJorder"] ?? false)) {
        cargs.push("-LJorder");
    }
    if ((params["peelorder"] ?? false)) {
        cargs.push("-peelorder");
    }
    if ((params["ijkorder"] ?? false)) {
        cargs.push("-ijkorder");
    }
    if ((params["range"] ?? null) !== null) {
        cargs.push(
            "-range",
            String((params["range"] ?? null))
        );
    }
    if ((params["percent"] ?? false)) {
        cargs.push("-percent");
    }
    if ((params["raw_with_bounds"] ?? null) !== null) {
        cargs.push(
            "-raw_with_bounds",
            ...(params["raw_with_bounds"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_grayplot_outputs(
    params: V3dGrayplotParameters,
    execution: Execution,
): V3dGrayplotOutputs {
    const ret: V3dGrayplotOutputs = {
        root: execution.outputFile("."),
        grayplot_img: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dGrayplot
 *
 * Make a grayplot from a 3D+time dataset, like a carpet plot. Result is saved to a PNG image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dGrayplotOutputs`).
 */
function v_3d_grayplot_execute(
    params: V3dGrayplotParameters,
    runner: Runner | null = null,
): V3dGrayplotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_GRAYPLOT_METADATA);
    params = execution.params(params)
    const cargs = v_3d_grayplot_cargs(params, execution)
    const ret = v_3d_grayplot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dGrayplot
 *
 * Make a grayplot from a 3D+time dataset, like a carpet plot. Result is saved to a PNG image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input Input dataset
 * @param mask Name of mask dataset. Voxels that are 0 in the mask will not be processed.
 * @param prefix Name for the output file. Default is Grayplot.png
 * @param dimensions Output size of image in pixels: [width height]. Defaults are width=1024 and height=512.
 * @param resample_old Original resampling method for processed dataset.
 * @param polort Order of polynomials for detrending. Default is 2. Use '-1' if data is already detrended and de-meaned.
 * @param fwhm FWHM of blurring radius to use in the dataset before making the image. Default is 0 mm.
 * @param pvorder Order the voxels by how well they match the two leading principal components of their partition.
 * @param ljorder Order the voxels by their Ljung-Box statistics, a measure of temporal correlation.
 * @param peelorder Order the voxels by how many 'peel' steps are needed to get from the partition boundary to the voxel.
 * @param ijkorder Default intra-partition ordering by dataset 3D index ('ijk').
 * @param range Set the range of the data to be plotted. Value of 0 is middle-gray, +X is white, -X is black.
 * @param percent Scale values to percent differences from the mean of each voxel timeseries. Suitable for raw time series datasets.
 * @param raw_with_bounds Map values <= A to black, values >= B to white, and intermediate values to grays.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dGrayplotOutputs`).
 */
function v_3d_grayplot(
    input: InputPathType,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    dimensions: Array<number> | null = null,
    resample_old: boolean = false,
    polort: number | null = null,
    fwhm: number | null = null,
    pvorder: boolean = false,
    ljorder: boolean = false,
    peelorder: boolean = false,
    ijkorder: boolean = false,
    range: number | null = null,
    percent: boolean = false,
    raw_with_bounds: Array<number> | null = null,
    runner: Runner | null = null,
): V3dGrayplotOutputs {
    const params = v_3d_grayplot_params(input, mask, prefix, dimensions, resample_old, polort, fwhm, pvorder, ljorder, peelorder, ijkorder, range, percent, raw_with_bounds)
    return v_3d_grayplot_execute(params, runner);
}


export {
      V3dGrayplotOutputs,
      V_3D_GRAYPLOT_METADATA,
      v_3d_grayplot,
      v_3d_grayplot_execute,
      v_3d_grayplot_params,
};
