// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BAYCEST_METADATA: Metadata = {
    id: "4458846c516be1b936785202aa363d6e36d74203.boutiques",
    name: "baycest",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface BaycestParameters {
    "__STYXTYPE__": "baycest";
    "data_file": InputPathType;
    "mask_file": InputPathType;
    "output_dir": string;
    "pools_file": InputPathType;
    "spec_file": InputPathType;
    "ptrain_file": InputPathType;
    "spatial_flag": boolean;
    "t12prior_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "baycest": baycest_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "baycest": baycest_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `baycest(...)`.
 *
 * @interface
 */
interface BaycestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output file
     */
    output_file: OutputPathType;
}


function baycest_params(
    data_file: InputPathType,
    mask_file: InputPathType,
    output_dir: string,
    pools_file: InputPathType,
    spec_file: InputPathType,
    ptrain_file: InputPathType,
    spatial_flag: boolean = false,
    t12prior_flag: boolean = false,
): BaycestParameters {
    /**
     * Build parameters.
    
     * @param data_file Specify data file (nifti image)
     * @param mask_file Specify mask file (nifti image)
     * @param output_dir Specify output directory name
     * @param pools_file Specify pools to be included in model (ascii matrix)
     * @param spec_file Data specification (ascii matrix)
     * @param ptrain_file Specify pulse shape (ascii matrix)
     * @param spatial_flag Use spatial prior (appropriate for in vivo data)
     * @param t12prior_flag Include uncertainty in T1 and T2 values
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "baycest" as const,
        "data_file": data_file,
        "mask_file": mask_file,
        "output_dir": output_dir,
        "pools_file": pools_file,
        "spec_file": spec_file,
        "ptrain_file": ptrain_file,
        "spatial_flag": spatial_flag,
        "t12prior_flag": t12prior_flag,
    };
    return params;
}


function baycest_cargs(
    params: BaycestParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("baycest");
    cargs.push(["--data=", execution.inputFile((params["data_file"] ?? null))].join(''));
    cargs.push(["--mask=", execution.inputFile((params["mask_file"] ?? null))].join(''));
    cargs.push(["--output=", (params["output_dir"] ?? null)].join(''));
    cargs.push(["--pools=", execution.inputFile((params["pools_file"] ?? null))].join(''));
    cargs.push(["--spec=", execution.inputFile((params["spec_file"] ?? null))].join(''));
    cargs.push(["--ptrain=", execution.inputFile((params["ptrain_file"] ?? null))].join(''));
    if ((params["spatial_flag"] ?? null)) {
        cargs.push("--spatial");
    }
    if ((params["t12prior_flag"] ?? null)) {
        cargs.push("--t12prior");
    }
    return cargs;
}


function baycest_outputs(
    params: BaycestParameters,
    execution: Execution,
): BaycestOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BaycestOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_dir"] ?? null), "/output_file.nii.gz"].join('')),
    };
    return ret;
}


function baycest_execute(
    params: BaycestParameters,
    execution: Execution,
): BaycestOutputs {
    /**
     * Bayesian analysis for chemical exchange saturation transfer z-spectra.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BaycestOutputs`).
     */
    params = execution.params(params)
    const cargs = baycest_cargs(params, execution)
    const ret = baycest_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function baycest(
    data_file: InputPathType,
    mask_file: InputPathType,
    output_dir: string,
    pools_file: InputPathType,
    spec_file: InputPathType,
    ptrain_file: InputPathType,
    spatial_flag: boolean = false,
    t12prior_flag: boolean = false,
    runner: Runner | null = null,
): BaycestOutputs {
    /**
     * Bayesian analysis for chemical exchange saturation transfer z-spectra.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param data_file Specify data file (nifti image)
     * @param mask_file Specify mask file (nifti image)
     * @param output_dir Specify output directory name
     * @param pools_file Specify pools to be included in model (ascii matrix)
     * @param spec_file Data specification (ascii matrix)
     * @param ptrain_file Specify pulse shape (ascii matrix)
     * @param spatial_flag Use spatial prior (appropriate for in vivo data)
     * @param t12prior_flag Include uncertainty in T1 and T2 values
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BaycestOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BAYCEST_METADATA);
    const params = baycest_params(data_file, mask_file, output_dir, pools_file, spec_file, ptrain_file, spatial_flag, t12prior_flag)
    return baycest_execute(params, execution);
}


export {
      BAYCEST_METADATA,
      BaycestOutputs,
      BaycestParameters,
      baycest,
      baycest_params,
};
