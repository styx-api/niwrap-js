// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TKREGISTER2_METADATA: Metadata = {
    id: "1f24eb8859271e38bd38304bae70f2a0a2fb4f5b.boutiques",
    name: "tkregister2",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Tkregister2Parameters {
    "@type": "freesurfer.tkregister2";
    "fixed_volume": InputPathType;
    "moving_volume": InputPathType;
    "reg_file": InputPathType;
    "noedit": boolean;
    "lta": boolean;
    "surf_reg": boolean;
    "reg_only": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.tkregister2": tkregister2_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.tkregister2": tkregister2_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tkregister2(...)`.
 *
 * @interface
 */
interface Tkregister2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting registration file
     */
    output_reg_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fixed_volume Fixed volume (e.g., anatomical image)
 * @param moving_volume Moving volume (e.g., functional image)
 * @param reg_file Registration file to be saved or loaded
 * @param noedit Run in no-edit mode, useful for scripting.
 * @param lta Use LTA format for registration file.
 * @param surf_reg Use surface registration.
 * @param reg_only Don't show GUI, just save registration.
 * @param help Display help information.
 *
 * @returns Parameter dictionary
 */
function tkregister2_params(
    fixed_volume: InputPathType,
    moving_volume: InputPathType,
    reg_file: InputPathType,
    noedit: boolean = false,
    lta: boolean = false,
    surf_reg: boolean = false,
    reg_only: boolean = false,
    help: boolean = false,
): Tkregister2Parameters {
    const params = {
        "@type": "freesurfer.tkregister2" as const,
        "fixed_volume": fixed_volume,
        "moving_volume": moving_volume,
        "reg_file": reg_file,
        "noedit": noedit,
        "lta": lta,
        "surf_reg": surf_reg,
        "reg_only": reg_only,
        "help": help,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tkregister2_cargs(
    params: Tkregister2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tkregister2");
    cargs.push(execution.inputFile((params["fixed_volume"] ?? null)));
    cargs.push(execution.inputFile((params["moving_volume"] ?? null)));
    cargs.push(execution.inputFile((params["reg_file"] ?? null)));
    if ((params["noedit"] ?? null)) {
        cargs.push("--noedit");
    }
    if ((params["lta"] ?? null)) {
        cargs.push("--lta");
    }
    if ((params["surf_reg"] ?? null)) {
        cargs.push("--surf");
    }
    if ((params["reg_only"] ?? null)) {
        cargs.push("--regonly");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tkregister2_outputs(
    params: Tkregister2Parameters,
    execution: Execution,
): Tkregister2Outputs {
    const ret: Tkregister2Outputs = {
        root: execution.outputFile("."),
        output_reg_file: execution.outputFile([path.basename((params["reg_file"] ?? null))].join('')),
    };
    return ret;
}


/**
 * tkregister2
 *
 * tkregister2 is a tool from FreeSurfer used for registration of MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tkregister2Outputs`).
 */
function tkregister2_execute(
    params: Tkregister2Parameters,
    runner: Runner | null = null,
): Tkregister2Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TKREGISTER2_METADATA);
    params = execution.params(params)
    const cargs = tkregister2_cargs(params, execution)
    const ret = tkregister2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tkregister2
 *
 * tkregister2 is a tool from FreeSurfer used for registration of MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param fixed_volume Fixed volume (e.g., anatomical image)
 * @param moving_volume Moving volume (e.g., functional image)
 * @param reg_file Registration file to be saved or loaded
 * @param noedit Run in no-edit mode, useful for scripting.
 * @param lta Use LTA format for registration file.
 * @param surf_reg Use surface registration.
 * @param reg_only Don't show GUI, just save registration.
 * @param help Display help information.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tkregister2Outputs`).
 */
function tkregister2(
    fixed_volume: InputPathType,
    moving_volume: InputPathType,
    reg_file: InputPathType,
    noedit: boolean = false,
    lta: boolean = false,
    surf_reg: boolean = false,
    reg_only: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): Tkregister2Outputs {
    const params = tkregister2_params(fixed_volume, moving_volume, reg_file, noedit, lta, surf_reg, reg_only, help)
    return tkregister2_execute(params, runner);
}


export {
      TKREGISTER2_METADATA,
      Tkregister2Outputs,
      Tkregister2Parameters,
      tkregister2,
      tkregister2_execute,
      tkregister2_params,
};
