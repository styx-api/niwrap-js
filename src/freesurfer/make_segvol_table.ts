// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_SEGVOL_TABLE_METADATA: Metadata = {
    id: "b482a517b89a3c5621f48031455d531957274674.boutiques",
    name: "make-segvol-table",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MakeSegvolTableParameters {
    "@type": "freesurfer.make-segvol-table";
    "subjects": Array<string>;
    "subject_file": InputPathType;
    "outfile": string;
    "idmap"?: InputPathType | null | undefined;
    "structure_ids"?: Array<string> | null | undefined;
    "segdir"?: string | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "umask"?: string | null | undefined;
    "version": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.make-segvol-table": make_segvol_table_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.make-segvol-table": make_segvol_table_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `make_segvol_table(...)`.
 *
 * @interface
 */
interface MakeSegvolTableOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file containing the table of subcortical structure volumes.
     */
    output_table: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjects List of subject IDs. Each subject should be specified with a separate -s flag.
 * @param subject_file Path to a file containing a list of subjects.
 * @param outfile Output file where the table will be saved.
 * @param idmap File with structure name and id number. Default is FREESURFER_HOME/tkmeditColorsCMA.
 * @param structure_ids Names of structures to include in the table. Defaults to all structures.
 * @param segdir Segmentation subdirectory name. Default is 'aseg'.
 * @param subjects_dir Path to the subjects directory. Default is SUBJECTS_DIR environment variable.
 * @param umask Set UNIX file permission mask.
 * @param version Print version and exit.
 * @param help Display help information.
 *
 * @returns Parameter dictionary
 */
function make_segvol_table_params(
    subjects: Array<string>,
    subject_file: InputPathType,
    outfile: string,
    idmap: InputPathType | null = null,
    structure_ids: Array<string> | null = null,
    segdir: string | null = null,
    subjects_dir: string | null = null,
    umask: string | null = null,
    version: boolean = false,
    help: boolean = false,
): MakeSegvolTableParameters {
    const params = {
        "@type": "freesurfer.make-segvol-table" as const,
        "subjects": subjects,
        "subject_file": subject_file,
        "outfile": outfile,
        "version": version,
        "help": help,
    };
    if (idmap !== null) {
        params["idmap"] = idmap;
    }
    if (structure_ids !== null) {
        params["structure_ids"] = structure_ids;
    }
    if (segdir !== null) {
        params["segdir"] = segdir;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_segvol_table_cargs(
    params: MakeSegvolTableParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make-segvol-table");
    cargs.push(
        "-s",
        ...(params["subjects"] ?? null)
    );
    cargs.push(
        "-sf",
        execution.inputFile((params["subject_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["outfile"] ?? null)
    );
    if ((params["idmap"] ?? null) !== null) {
        cargs.push(
            "-idmap",
            execution.inputFile((params["idmap"] ?? null))
        );
    }
    if ((params["structure_ids"] ?? null) !== null) {
        cargs.push(
            "-id",
            ...(params["structure_ids"] ?? null)
        );
    }
    if ((params["segdir"] ?? null) !== null) {
        cargs.push(
            "-segdir",
            (params["segdir"] ?? null)
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "-sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_segvol_table_outputs(
    params: MakeSegvolTableParameters,
    execution: Execution,
): MakeSegvolTableOutputs {
    const ret: MakeSegvolTableOutputs = {
        root: execution.outputFile("."),
        output_table: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Creates a table of volumes of subcortical structures for a given list of subjects using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeSegvolTableOutputs`).
 */
function make_segvol_table_execute(
    params: MakeSegvolTableParameters,
    runner: Runner | null = null,
): MakeSegvolTableOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_SEGVOL_TABLE_METADATA);
    params = execution.params(params)
    const cargs = make_segvol_table_cargs(params, execution)
    const ret = make_segvol_table_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Creates a table of volumes of subcortical structures for a given list of subjects using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects List of subject IDs. Each subject should be specified with a separate -s flag.
 * @param subject_file Path to a file containing a list of subjects.
 * @param outfile Output file where the table will be saved.
 * @param idmap File with structure name and id number. Default is FREESURFER_HOME/tkmeditColorsCMA.
 * @param structure_ids Names of structures to include in the table. Defaults to all structures.
 * @param segdir Segmentation subdirectory name. Default is 'aseg'.
 * @param subjects_dir Path to the subjects directory. Default is SUBJECTS_DIR environment variable.
 * @param umask Set UNIX file permission mask.
 * @param version Print version and exit.
 * @param help Display help information.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeSegvolTableOutputs`).
 */
function make_segvol_table(
    subjects: Array<string>,
    subject_file: InputPathType,
    outfile: string,
    idmap: InputPathType | null = null,
    structure_ids: Array<string> | null = null,
    segdir: string | null = null,
    subjects_dir: string | null = null,
    umask: string | null = null,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): MakeSegvolTableOutputs {
    const params = make_segvol_table_params(subjects, subject_file, outfile, idmap, structure_ids, segdir, subjects_dir, umask, version, help)
    return make_segvol_table_execute(params, runner);
}


export {
      MAKE_SEGVOL_TABLE_METADATA,
      MakeSegvolTableOutputs,
      MakeSegvolTableParameters,
      make_segvol_table,
      make_segvol_table_execute,
      make_segvol_table_params,
};
