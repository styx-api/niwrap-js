// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NEW_INVWARP_METADATA: Metadata = {
    id: "d6b5c3d1b7012738ddceb0a712e919c94ade916f.boutiques",
    name: "new_invwarp",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface NewInvwarpParameters {
    "@type"?: "fsl/new_invwarp";
    "warpvol": InputPathType;
    "outvol": string;
    "refvol": InputPathType;
    "relflag": boolean;
    "absflag": boolean;
    "noconstraintflag": boolean;
    "jmin"?: number | null | undefined;
    "jmax"?: number | null | undefined;
    "debugflag": boolean;
    "verboseflag": boolean;
}
type NewInvwarpParametersTagged = Required<Pick<NewInvwarpParameters, '@type'>> & NewInvwarpParameters;


/**
 * Output object returned when calling `NewInvwarpParameters(...)`.
 *
 * @interface
 */
interface NewInvwarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output inverse warped volume
     */
    out_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param warpvol Filename for warp/shiftmap transform (volume)
 * @param outvol Filename for output (inverse warped) image
 * @param refvol Filename for new reference image, i.e., what was originally the input image (determines inverse warpvol's FOV and pixdims)
 * @param relflag Use relative warp convention: x' = x + w(x)
 * @param absflag Use absolute warp convention (default): x' = w(x)
 * @param noconstraintflag Do not apply the Jacobian constraint
 * @param jmin Minimum acceptable Jacobian value for constraint (default 0.01)
 * @param jmax Maximum acceptable Jacobian value for constraint (default 100.0)
 * @param debugflag Turn on debugging output
 * @param verboseflag Switch on diagnostic messages
 *
 * @returns Parameter dictionary
 */
function new_invwarp_params(
    warpvol: InputPathType,
    outvol: string,
    refvol: InputPathType,
    relflag: boolean = false,
    absflag: boolean = false,
    noconstraintflag: boolean = false,
    jmin: number | null = null,
    jmax: number | null = null,
    debugflag: boolean = false,
    verboseflag: boolean = false,
): NewInvwarpParametersTagged {
    const params = {
        "@type": "fsl/new_invwarp" as const,
        "warpvol": warpvol,
        "outvol": outvol,
        "refvol": refvol,
        "relflag": relflag,
        "absflag": absflag,
        "noconstraintflag": noconstraintflag,
        "debugflag": debugflag,
        "verboseflag": verboseflag,
    };
    if (jmin !== null) {
        params["jmin"] = jmin;
    }
    if (jmax !== null) {
        params["jmax"] = jmax;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function new_invwarp_cargs(
    params: NewInvwarpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("new_invwarp");
    cargs.push(
        "-w",
        execution.inputFile((params["warpvol"] ?? null))
    );
    cargs.push(
        "-o",
        (params["outvol"] ?? null)
    );
    cargs.push(
        "-r",
        execution.inputFile((params["refvol"] ?? null))
    );
    if ((params["relflag"] ?? false)) {
        cargs.push("--rel");
    }
    if ((params["absflag"] ?? false)) {
        cargs.push("--abs");
    }
    if ((params["noconstraintflag"] ?? false)) {
        cargs.push("--noconstraint");
    }
    if ((params["jmin"] ?? null) !== null) {
        cargs.push(
            "--jmin",
            String((params["jmin"] ?? null))
        );
    }
    if ((params["jmax"] ?? null) !== null) {
        cargs.push(
            "--jmax",
            String((params["jmax"] ?? null))
        );
    }
    if ((params["debugflag"] ?? false)) {
        cargs.push("--debug");
    }
    if ((params["verboseflag"] ?? false)) {
        cargs.push("-v");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function new_invwarp_outputs(
    params: NewInvwarpParameters,
    execution: Execution,
): NewInvwarpOutputs {
    const ret: NewInvwarpOutputs = {
        root: execution.outputFile("."),
        out_volume: execution.outputFile([(params["outvol"] ?? null)].join('')),
    };
    return ret;
}


/**
 * new_invwarp
 *
 * Inverse warp tool from FSL suite.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NewInvwarpOutputs`).
 */
function new_invwarp_execute(
    params: NewInvwarpParameters,
    runner: Runner | null = null,
): NewInvwarpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NEW_INVWARP_METADATA);
    params = execution.params(params)
    const cargs = new_invwarp_cargs(params, execution)
    const ret = new_invwarp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * new_invwarp
 *
 * Inverse warp tool from FSL suite.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param warpvol Filename for warp/shiftmap transform (volume)
 * @param outvol Filename for output (inverse warped) image
 * @param refvol Filename for new reference image, i.e., what was originally the input image (determines inverse warpvol's FOV and pixdims)
 * @param relflag Use relative warp convention: x' = x + w(x)
 * @param absflag Use absolute warp convention (default): x' = w(x)
 * @param noconstraintflag Do not apply the Jacobian constraint
 * @param jmin Minimum acceptable Jacobian value for constraint (default 0.01)
 * @param jmax Maximum acceptable Jacobian value for constraint (default 100.0)
 * @param debugflag Turn on debugging output
 * @param verboseflag Switch on diagnostic messages
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NewInvwarpOutputs`).
 */
function new_invwarp(
    warpvol: InputPathType,
    outvol: string,
    refvol: InputPathType,
    relflag: boolean = false,
    absflag: boolean = false,
    noconstraintflag: boolean = false,
    jmin: number | null = null,
    jmax: number | null = null,
    debugflag: boolean = false,
    verboseflag: boolean = false,
    runner: Runner | null = null,
): NewInvwarpOutputs {
    const params = new_invwarp_params(warpvol, outvol, refvol, relflag, absflag, noconstraintflag, jmin, jmax, debugflag, verboseflag)
    return new_invwarp_execute(params, runner);
}


export {
      NEW_INVWARP_METADATA,
      NewInvwarpOutputs,
      new_invwarp,
      new_invwarp_execute,
      new_invwarp_params,
};
