// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRMATH_METADATA: Metadata = {
    id: "db96b07f1077adff39e302c1a364e5fdc77ddbc2.boutiques",
    name: "mrmath",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrmathConfigParameters {
    "@type": "mrtrix.mrmath.config";
    "key": string;
    "value": string;
}


interface MrmathParameters {
    "@type": "mrtrix.mrmath";
    "axis"?: number | null | undefined;
    "keep_unary_axes": boolean;
    "datatype"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrmathConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": Array<InputPathType>;
    "operation": string;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.mrmath": mrmath_cargs,
        "mrtrix.mrmath.config": mrmath_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.mrmath": mrmath_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrmath_config_params(
    key: string,
    value: string,
): MrmathConfigParameters {
    const params = {
        "@type": "mrtrix.mrmath.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrmath_config_cargs(
    params: MrmathConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mrmath(...)`.
 *
 * @interface
 */
interface MrmathOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input image(s).
 * @param operation the operation to apply, one of: mean, median, sum, product, rms, norm, var, std, min, max, absmax, magmax.
 * @param output the output image.
 * @param axis perform operation along a specified axis of a single input image
 * @param keep_unary_axes Keep unary axes in input images prior to calculating the stats. The default is to wipe axes with single elements.
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrmath_params(
    input: Array<InputPathType>,
    operation: string,
    output: string,
    axis: number | null = null,
    keep_unary_axes: boolean = false,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrmathConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrmathParameters {
    const params = {
        "@type": "mrtrix.mrmath" as const,
        "keep_unary_axes": keep_unary_axes,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "operation": operation,
        "output": output,
    };
    if (axis !== null) {
        params["axis"] = axis;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrmath_cargs(
    params: MrmathParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrmath");
    if ((params["axis"] ?? null) !== null) {
        cargs.push(
            "-axis",
            String((params["axis"] ?? null))
        );
    }
    if ((params["keep_unary_axes"] ?? null)) {
        cargs.push("-keep_unary_axes");
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datatype",
            (params["datatype"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...(params["input"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["operation"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrmath_outputs(
    params: MrmathParameters,
    execution: Execution,
): MrmathOutputs {
    const ret: MrmathOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mrmath
 *
 * Compute summary statistic on image intensities either across images, or along a specified axis of a single image.
 *
 * Supported operations are:
 *
 * mean, median, sum, product, rms (root-mean-square value), norm (vector 2-norm), var (unbiased variance), std (unbiased standard deviation), min, max, absmax (maximum absolute value), magmax (value with maximum absolute value, preserving its sign).
 *
 * This command is used to traverse either along an image axis, or across a set of input images, calculating some statistic from the values along each traversal. If you are seeking to instead perform mathematical calculations that are done independently for each voxel, pleaase see the 'mrcalc' command.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrmathOutputs`).
 */
function mrmath_execute(
    params: MrmathParameters,
    runner: Runner | null = null,
): MrmathOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRMATH_METADATA);
    params = execution.params(params)
    const cargs = mrmath_cargs(params, execution)
    const ret = mrmath_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mrmath
 *
 * Compute summary statistic on image intensities either across images, or along a specified axis of a single image.
 *
 * Supported operations are:
 *
 * mean, median, sum, product, rms (root-mean-square value), norm (vector 2-norm), var (unbiased variance), std (unbiased standard deviation), min, max, absmax (maximum absolute value), magmax (value with maximum absolute value, preserving its sign).
 *
 * This command is used to traverse either along an image axis, or across a set of input images, calculating some statistic from the values along each traversal. If you are seeking to instead perform mathematical calculations that are done independently for each voxel, pleaase see the 'mrcalc' command.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input image(s).
 * @param operation the operation to apply, one of: mean, median, sum, product, rms, norm, var, std, min, max, absmax, magmax.
 * @param output the output image.
 * @param axis perform operation along a specified axis of a single input image
 * @param keep_unary_axes Keep unary axes in input images prior to calculating the stats. The default is to wipe axes with single elements.
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrmathOutputs`).
 */
function mrmath(
    input: Array<InputPathType>,
    operation: string,
    output: string,
    axis: number | null = null,
    keep_unary_axes: boolean = false,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrmathConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrmathOutputs {
    const params = mrmath_params(input, operation, output, axis, keep_unary_axes, datatype, info, quiet, debug, force, nthreads, config, help, version)
    return mrmath_execute(params, runner);
}


export {
      MRMATH_METADATA,
      MrmathConfigParameters,
      MrmathOutputs,
      MrmathParameters,
      mrmath,
      mrmath_config_params,
      mrmath_execute,
      mrmath_params,
};
