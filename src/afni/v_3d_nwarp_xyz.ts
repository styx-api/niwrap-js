// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NWARP_XYZ_METADATA: Metadata = {
    id: "b3e50bef18db95c8d2cd2dc41d63b8a7d7da7351.boutiques",
    name: "3dNwarpXYZ",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNwarpXyzParameters {
    "@type"?: "afni/3dNwarpXYZ";
    "xyzfile": InputPathType;
    "warp_spec": string;
    "iwarp": boolean;
    "output_file": string;
}
type V3dNwarpXyzParametersTagged = Required<Pick<V3dNwarpXyzParameters, '@type'>> & V3dNwarpXyzParameters;


/**
 * Output object returned when calling `V3dNwarpXyzParameters(...)`.
 *
 * @interface
 */
interface V3dNwarpXyzOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Warped XYZ coordinates output file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param xyzfile XYZ coordinate file containing 3 columns
 * @param warp_spec Warp specification as in 3dNwarpApply
 * @param output_file Warped XYZ coordinates output file
 * @param iwarp Compute the inverse warp for each input (x,y,z) triple
 *
 * @returns Parameter dictionary
 */
function v_3d_nwarp_xyz_params(
    xyzfile: InputPathType,
    warp_spec: string,
    output_file: string,
    iwarp: boolean = false,
): V3dNwarpXyzParametersTagged {
    const params = {
        "@type": "afni/3dNwarpXYZ" as const,
        "xyzfile": xyzfile,
        "warp_spec": warp_spec,
        "iwarp": iwarp,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_nwarp_xyz_cargs(
    params: V3dNwarpXyzParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dNwarpXYZ");
    cargs.push(execution.inputFile((params["xyzfile"] ?? null)));
    cargs.push(
        "-nwarp",
        (params["warp_spec"] ?? null)
    );
    if ((params["iwarp"] ?? false)) {
        cargs.push("-iwarp");
    }
    cargs.push(["> ", (params["output_file"] ?? null)].join(''));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_nwarp_xyz_outputs(
    params: V3dNwarpXyzParameters,
    execution: Execution,
): V3dNwarpXyzOutputs {
    const ret: V3dNwarpXyzOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * 3dNwarpXYZ
 *
 * Transforms the DICOM xyz coordinates in the input XYZfile.1D based on specified warp.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpXyzOutputs`).
 */
function v_3d_nwarp_xyz_execute(
    params: V3dNwarpXyzParameters,
    runner: Runner | null = null,
): V3dNwarpXyzOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NWARP_XYZ_METADATA);
    params = execution.params(params)
    const cargs = v_3d_nwarp_xyz_cargs(params, execution)
    const ret = v_3d_nwarp_xyz_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dNwarpXYZ
 *
 * Transforms the DICOM xyz coordinates in the input XYZfile.1D based on specified warp.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param xyzfile XYZ coordinate file containing 3 columns
 * @param warp_spec Warp specification as in 3dNwarpApply
 * @param output_file Warped XYZ coordinates output file
 * @param iwarp Compute the inverse warp for each input (x,y,z) triple
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpXyzOutputs`).
 */
function v_3d_nwarp_xyz(
    xyzfile: InputPathType,
    warp_spec: string,
    output_file: string,
    iwarp: boolean = false,
    runner: Runner | null = null,
): V3dNwarpXyzOutputs {
    const params = v_3d_nwarp_xyz_params(xyzfile, warp_spec, output_file, iwarp)
    return v_3d_nwarp_xyz_execute(params, runner);
}


export {
      V3dNwarpXyzOutputs,
      V_3D_NWARP_XYZ_METADATA,
      v_3d_nwarp_xyz,
      v_3d_nwarp_xyz_execute,
      v_3d_nwarp_xyz_params,
};
