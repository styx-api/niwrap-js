// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMAND_METADATA: Metadata = {
    id: "0afb6402a062c937d946cf010c86102b9c4a0c96.boutiques",
    name: "imand",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImandParameters {
    "__STYXTYPE__": "imand";
    "threshold"?: number | null | undefined;
    "input_images": Array<InputPathType>;
    "output_image": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "imand": imand_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "imand": imand_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imand(...)`.
 *
 * @interface
 */
interface ImandOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting output image file.
     */
    outfile: OutputPathType;
}


function imand_params(
    input_images: Array<InputPathType>,
    output_image: string,
    threshold: number | null = null,
): ImandParameters {
    /**
     * Build parameters.
    
     * @param input_images Input images to be processed. Multiple input images can be specified.
     * @param output_image Output image file.
     * @param threshold Threshold value; only pixels above this value will be output. Optional.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "imand" as const,
        "input_images": input_images,
        "output_image": output_image,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    return params;
}


function imand_cargs(
    params: ImandParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("imand");
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["threshold"] ?? null))
        );
    }
    cargs.push(...(params["input_images"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["output_image"] ?? null));
    return cargs;
}


function imand_outputs(
    params: ImandParameters,
    execution: Execution,
): ImandOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ImandOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


function imand_execute(
    params: ImandParameters,
    execution: Execution,
): ImandOutputs {
    /**
     * Image AND operation tool. Only pixels nonzero in all input images (and above the threshold, if given) will be output.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ImandOutputs`).
     */
    params = execution.params(params)
    const cargs = imand_cargs(params, execution)
    const ret = imand_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function imand(
    input_images: Array<InputPathType>,
    output_image: string,
    threshold: number | null = null,
    runner: Runner | null = null,
): ImandOutputs {
    /**
     * Image AND operation tool. Only pixels nonzero in all input images (and above the threshold, if given) will be output.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_images Input images to be processed. Multiple input images can be specified.
     * @param output_image Output image file.
     * @param threshold Threshold value; only pixels above this value will be output. Optional.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ImandOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMAND_METADATA);
    const params = imand_params(input_images, output_image, threshold)
    return imand_execute(params, execution);
}


export {
      IMAND_METADATA,
      ImandOutputs,
      ImandParameters,
      imand,
      imand_params,
};
