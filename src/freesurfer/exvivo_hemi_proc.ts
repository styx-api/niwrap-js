// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EXVIVO_HEMI_PROC_METADATA: Metadata = {
    id: "cb414a078e8d94e5c45d97713e59b5d051d0f4fb.boutiques",
    name: "exvivo-hemi-proc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ExvivoHemiProcParameters {
    "@type": "freesurfer.exvivo-hemi-proc";
    "flashdir": string;
    "outdir": string;
    "subject": string;
    "left_hemi": boolean;
    "right_hemi": boolean;
    "suptent": boolean;
    "no_rotate": boolean;
    "t1thresh"?: number | null | undefined;
    "threads"?: number | null | undefined;
    "check_only": boolean;
    "prep_only": boolean;
    "mask_only": boolean;
    "samseg_only": boolean;
    "stop_mmppsp_after"?: string | null | undefined;
    "force": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.exvivo-hemi-proc": exvivo_hemi_proc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `exvivo_hemi_proc(...)`.
 *
 * @interface
 */
interface ExvivoHemiProcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param flashdir Path to the FLASH data directory.
 * @param outdir Output directory where results will be saved.
 * @param subject Full path to the subject.
 * @param left_hemi Process left hemisphere.
 * @param right_hemi Process right hemisphere.
 * @param suptent Indicate no tentorium (cblum and bstem) in the sample.
 * @param no_rotate Indicate rotation is not needed.
 * @param t1thresh T1 threshold, default is 415.
 * @param threads Number of threads to use.
 * @param check_only Only perform check, without further processing.
 * @param prep_only Only run up to manual rotation.
 * @param mask_only Only run up to creation of masks.
 * @param samseg_only Only run up to samseg.
 * @param stop_mmppsp_after Stop processing after a specific step {tess,fix,preaparc,sphere,spherereg,white,pial}.
 * @param force Force the execution, overriding checks.
 *
 * @returns Parameter dictionary
 */
function exvivo_hemi_proc_params(
    flashdir: string,
    outdir: string,
    subject: string,
    left_hemi: boolean = false,
    right_hemi: boolean = false,
    suptent: boolean = false,
    no_rotate: boolean = false,
    t1thresh: number | null = null,
    threads: number | null = null,
    check_only: boolean = false,
    prep_only: boolean = false,
    mask_only: boolean = false,
    samseg_only: boolean = false,
    stop_mmppsp_after: string | null = null,
    force: boolean = false,
): ExvivoHemiProcParameters {
    const params = {
        "@type": "freesurfer.exvivo-hemi-proc" as const,
        "flashdir": flashdir,
        "outdir": outdir,
        "subject": subject,
        "left_hemi": left_hemi,
        "right_hemi": right_hemi,
        "suptent": suptent,
        "no_rotate": no_rotate,
        "check_only": check_only,
        "prep_only": prep_only,
        "mask_only": mask_only,
        "samseg_only": samseg_only,
        "force": force,
    };
    if (t1thresh !== null) {
        params["t1thresh"] = t1thresh;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (stop_mmppsp_after !== null) {
        params["stop_mmppsp_after"] = stop_mmppsp_after;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function exvivo_hemi_proc_cargs(
    params: ExvivoHemiProcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("exvivo-hemi-proc");
    cargs.push(
        "--i",
        (params["flashdir"] ?? null)
    );
    cargs.push(
        "--o",
        (params["outdir"] ?? null)
    );
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["left_hemi"] ?? null)) {
        cargs.push("--lh");
    }
    if ((params["right_hemi"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["suptent"] ?? null)) {
        cargs.push("--suptent");
    }
    if ((params["no_rotate"] ?? null)) {
        cargs.push("--no-rotate");
    }
    if ((params["t1thresh"] ?? null) !== null) {
        cargs.push(
            "--t1thresh",
            String((params["t1thresh"] ?? null))
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["check_only"] ?? null)) {
        cargs.push("--check-only");
    }
    if ((params["prep_only"] ?? null)) {
        cargs.push("--prep-only");
    }
    if ((params["mask_only"] ?? null)) {
        cargs.push("--mask-only");
    }
    if ((params["samseg_only"] ?? null)) {
        cargs.push("--samseg-only");
    }
    if ((params["stop_mmppsp_after"] ?? null) !== null) {
        cargs.push(
            "--stop-mmppsp-after",
            (params["stop_mmppsp_after"] ?? null)
        );
    }
    if ((params["force"] ?? null)) {
        cargs.push("--force");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function exvivo_hemi_proc_outputs(
    params: ExvivoHemiProcParameters,
    execution: Execution,
): ExvivoHemiProcOutputs {
    const ret: ExvivoHemiProcOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Processes whole hemisphere data for Jeans entorhinal subfield labeling project.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `ExvivoHemiProcOutputs`).
 */
function exvivo_hemi_proc_execute(
    params: ExvivoHemiProcParameters,
    execution: Execution,
): ExvivoHemiProcOutputs {
    params = execution.params(params)
    const cargs = exvivo_hemi_proc_cargs(params, execution)
    const ret = exvivo_hemi_proc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Processes whole hemisphere data for Jeans entorhinal subfield labeling project.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param flashdir Path to the FLASH data directory.
 * @param outdir Output directory where results will be saved.
 * @param subject Full path to the subject.
 * @param left_hemi Process left hemisphere.
 * @param right_hemi Process right hemisphere.
 * @param suptent Indicate no tentorium (cblum and bstem) in the sample.
 * @param no_rotate Indicate rotation is not needed.
 * @param t1thresh T1 threshold, default is 415.
 * @param threads Number of threads to use.
 * @param check_only Only perform check, without further processing.
 * @param prep_only Only run up to manual rotation.
 * @param mask_only Only run up to creation of masks.
 * @param samseg_only Only run up to samseg.
 * @param stop_mmppsp_after Stop processing after a specific step {tess,fix,preaparc,sphere,spherereg,white,pial}.
 * @param force Force the execution, overriding checks.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ExvivoHemiProcOutputs`).
 */
function exvivo_hemi_proc(
    flashdir: string,
    outdir: string,
    subject: string,
    left_hemi: boolean = false,
    right_hemi: boolean = false,
    suptent: boolean = false,
    no_rotate: boolean = false,
    t1thresh: number | null = null,
    threads: number | null = null,
    check_only: boolean = false,
    prep_only: boolean = false,
    mask_only: boolean = false,
    samseg_only: boolean = false,
    stop_mmppsp_after: string | null = null,
    force: boolean = false,
    runner: Runner | null = null,
): ExvivoHemiProcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EXVIVO_HEMI_PROC_METADATA);
    const params = exvivo_hemi_proc_params(flashdir, outdir, subject, left_hemi, right_hemi, suptent, no_rotate, t1thresh, threads, check_only, prep_only, mask_only, samseg_only, stop_mmppsp_after, force)
    return exvivo_hemi_proc_execute(params, execution);
}


export {
      EXVIVO_HEMI_PROC_METADATA,
      ExvivoHemiProcOutputs,
      ExvivoHemiProcParameters,
      exvivo_hemi_proc,
      exvivo_hemi_proc_cargs,
      exvivo_hemi_proc_execute,
      exvivo_hemi_proc_outputs,
      exvivo_hemi_proc_params,
};
