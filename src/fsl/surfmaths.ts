// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFMATHS_METADATA: Metadata = {
    id: "0c06587bdc6b2f6011719cc92c36318d59f130d9.boutiques",
    name: "surfmaths",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SurfmathsParameters {
    "__STYXTYPE__": "surfmaths";
    "first_input": InputPathType;
    "operations_inputs"?: Array<string> | null | undefined;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surfmaths": surfmaths_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surfmaths": surfmaths_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surfmaths(...)`.
 *
 * @interface
 */
interface SurfmathsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface file generated by the tool.
     */
    output_file: OutputPathType;
}


function surfmaths_params(
    first_input: InputPathType,
    output: string,
    operations_inputs: Array<string> | null = null,
): SurfmathsParameters {
    /**
     * Build parameters.
    
     * @param first_input First input surface file.
     * @param output Output surface file.
     * @param operations_inputs Mathematical operations and additional inputs.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surfmaths" as const,
        "first_input": first_input,
        "output": output,
    };
    if (operations_inputs !== null) {
        params["operations_inputs"] = operations_inputs;
    }
    return params;
}


function surfmaths_cargs(
    params: SurfmathsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("surfmaths");
    cargs.push(execution.inputFile((params["first_input"] ?? null)));
    if ((params["operations_inputs"] ?? null) !== null) {
        cargs.push(...(params["operations_inputs"] ?? null));
    }
    cargs.push((params["output"] ?? null));
    return cargs;
}


function surfmaths_outputs(
    params: SurfmathsParameters,
    execution: Execution,
): SurfmathsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfmathsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function surfmaths_execute(
    params: SurfmathsParameters,
    execution: Execution,
): SurfmathsOutputs {
    /**
     * A command-line tool for performing various mathematical operations on surface files.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfmathsOutputs`).
     */
    params = execution.params(params)
    const cargs = surfmaths_cargs(params, execution)
    const ret = surfmaths_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surfmaths(
    first_input: InputPathType,
    output: string,
    operations_inputs: Array<string> | null = null,
    runner: Runner | null = null,
): SurfmathsOutputs {
    /**
     * A command-line tool for performing various mathematical operations on surface files.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param first_input First input surface file.
     * @param output Output surface file.
     * @param operations_inputs Mathematical operations and additional inputs.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfmathsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFMATHS_METADATA);
    const params = surfmaths_params(first_input, output, operations_inputs)
    return surfmaths_execute(params, execution);
}


export {
      SURFMATHS_METADATA,
      SurfmathsOutputs,
      SurfmathsParameters,
      surfmaths,
      surfmaths_params,
};
