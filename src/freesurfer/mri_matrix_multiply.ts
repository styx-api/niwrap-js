// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MATRIX_MULTIPLY_METADATA: Metadata = {
    id: "83fe54c8f9d006084c7a0544c59692e087c8825f.boutiques",
    name: "mri_matrix_multiply",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMatrixMultiplyParameters {
    "@type": "freesurfer.mri_matrix_multiply";
    "input_matrices": Array<InputPathType>;
    "inverted_input_matrices"?: Array<InputPathType> | null | undefined;
    "output_matrix": string;
    "verbose": boolean;
    "fsl": boolean;
    "binarize": boolean;
    "subject_name"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_matrix_multiply": mri_matrix_multiply_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_matrix_multiply": mri_matrix_multiply_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_matrix_multiply(...)`.
 *
 * @interface
 */
interface MriMatrixMultiplyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output matrix file resulting from the matrix multiplication.
     */
    output_matrix_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_matrices Input matrix files for multiplication.
 * @param output_matrix Output matrix file.
 * @param inverted_input_matrices Input matrix files to be inverted before multiplication.
 * @param verbose Verbose output.
 * @param fsl Assume input/output are FSL-style matrix files.
 * @param binarize 'Binarize' the output matrix.
 * @param subject_name Subject name for output reg.dat files.
 *
 * @returns Parameter dictionary
 */
function mri_matrix_multiply_params(
    input_matrices: Array<InputPathType>,
    output_matrix: string,
    inverted_input_matrices: Array<InputPathType> | null = null,
    verbose: boolean = false,
    fsl: boolean = false,
    binarize: boolean = false,
    subject_name: string | null = null,
): MriMatrixMultiplyParameters {
    const params = {
        "@type": "freesurfer.mri_matrix_multiply" as const,
        "input_matrices": input_matrices,
        "output_matrix": output_matrix,
        "verbose": verbose,
        "fsl": fsl,
        "binarize": binarize,
    };
    if (inverted_input_matrices !== null) {
        params["inverted_input_matrices"] = inverted_input_matrices;
    }
    if (subject_name !== null) {
        params["subject_name"] = subject_name;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_matrix_multiply_cargs(
    params: MriMatrixMultiplyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_matrix_multiply");
    cargs.push(
        "-im",
        ...(params["input_matrices"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["inverted_input_matrices"] ?? null) !== null) {
        cargs.push(
            "-iim",
            ...(params["inverted_input_matrices"] ?? null).map(f => execution.inputFile(f))
        );
    }
    cargs.push(
        "-om",
        (params["output_matrix"] ?? null)
    );
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["fsl"] ?? null)) {
        cargs.push("-fsl");
    }
    if ((params["binarize"] ?? null)) {
        cargs.push("-bin");
    }
    if ((params["subject_name"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["subject_name"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_matrix_multiply_outputs(
    params: MriMatrixMultiplyParameters,
    execution: Execution,
): MriMatrixMultiplyOutputs {
    const ret: MriMatrixMultiplyOutputs = {
        root: execution.outputFile("."),
        output_matrix_file: execution.outputFile([(params["output_matrix"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Command-line tool for multiplying and manipulating MRI transformation matrices.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMatrixMultiplyOutputs`).
 */
function mri_matrix_multiply_execute(
    params: MriMatrixMultiplyParameters,
    runner: Runner | null = null,
): MriMatrixMultiplyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MATRIX_MULTIPLY_METADATA);
    params = execution.params(params)
    const cargs = mri_matrix_multiply_cargs(params, execution)
    const ret = mri_matrix_multiply_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Command-line tool for multiplying and manipulating MRI transformation matrices.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_matrices Input matrix files for multiplication.
 * @param output_matrix Output matrix file.
 * @param inverted_input_matrices Input matrix files to be inverted before multiplication.
 * @param verbose Verbose output.
 * @param fsl Assume input/output are FSL-style matrix files.
 * @param binarize 'Binarize' the output matrix.
 * @param subject_name Subject name for output reg.dat files.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMatrixMultiplyOutputs`).
 */
function mri_matrix_multiply(
    input_matrices: Array<InputPathType>,
    output_matrix: string,
    inverted_input_matrices: Array<InputPathType> | null = null,
    verbose: boolean = false,
    fsl: boolean = false,
    binarize: boolean = false,
    subject_name: string | null = null,
    runner: Runner | null = null,
): MriMatrixMultiplyOutputs {
    const params = mri_matrix_multiply_params(input_matrices, output_matrix, inverted_input_matrices, verbose, fsl, binarize, subject_name)
    return mri_matrix_multiply_execute(params, runner);
}


export {
      MRI_MATRIX_MULTIPLY_METADATA,
      MriMatrixMultiplyOutputs,
      MriMatrixMultiplyParameters,
      mri_matrix_multiply,
      mri_matrix_multiply_execute,
      mri_matrix_multiply_params,
};
