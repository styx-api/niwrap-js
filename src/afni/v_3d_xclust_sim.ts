// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_XCLUST_SIM_METADATA: Metadata = {
    id: "19280688ca72a431cebefdabca1d25ef8f5de5db.boutiques",
    name: "3dXClustSim",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dXclustSimParameters {
    "@type": "afni.3dXClustSim";
    "inset": InputPathType;
    "insdat"?: InputPathType | null | undefined;
    "nn"?: number | null | undefined;
    "sid"?: number | null | undefined;
    "hpow"?: Array<number> | null | undefined;
    "ncase"?: Array<string> | null | undefined;
    "pthr"?: Array<number> | null | undefined;
    "fpr"?: number | null | undefined;
    "multiFPR": boolean;
    "minclust"?: number | null | undefined;
    "local": boolean;
    "global": boolean;
    "nolocal": boolean;
    "noglobal": boolean;
    "splitfrac"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "verbose": boolean;
    "quiet": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dXClustSim": v_3d_xclust_sim_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dXClustSim": v_3d_xclust_sim_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_xclust_sim(...)`.
 *
 * @interface
 */
interface V3dXclustSimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output multi-threshold files for each -ncase input
     */
    out_mthresh: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param inset Mask sdata file (from 3dtoXdataset or 3dttest++)
 * @param insdat Data files in the '.sdat' format.
 * @param nn Neighborhood connectivity (1, 2, or 3). Default is 2.
 * @param sid Sidedness: 1 (one-sided) or 2 (two-sided). Default is 2.
 * @param hpow H power values (can be a subset of 0, 1, 2). Default is 2.
 * @param ncase Number of cases with labels. Default is 1 A.
 * @param pthr List of p-value thresholds. Default is 0.0100 0.0056 0.0031 0.0018 0.0010.
 * @param fpr Set global FPR goal to an integer ff between 2 and 9. Default is 5.
 * @param multi_fpr Compute results for multiple FPR goals (2%, 3%, ... 9%).
 * @param minclust Minimum cluster size in voxels. Default is 5.
 * @param local Do voxel-wise (local) ETAC computations.
 * @param global Do volume-wise (global) ETAC computations.
 * @param nolocal Do not perform voxel-wise ETAC computations.
 * @param noglobal Do not perform volume-wise ETAC computations.
 * @param splitfrac Fraction to split simulations into pieces (0.2 < F < 0.8).
 * @param prefix Output filename prefix.
 * @param verbose Be more verbose.
 * @param quiet Silent mode.
 *
 * @returns Parameter dictionary
 */
function v_3d_xclust_sim_params(
    inset: InputPathType,
    insdat: InputPathType | null = null,
    nn: number | null = null,
    sid: number | null = null,
    hpow: Array<number> | null = null,
    ncase: Array<string> | null = null,
    pthr: Array<number> | null = null,
    fpr: number | null = null,
    multi_fpr: boolean = false,
    minclust: number | null = null,
    local: boolean = false,
    global: boolean = false,
    nolocal: boolean = false,
    noglobal: boolean = false,
    splitfrac: number | null = null,
    prefix: string | null = null,
    verbose: boolean = false,
    quiet: boolean = false,
): V3dXclustSimParameters {
    const params = {
        "@type": "afni.3dXClustSim" as const,
        "inset": inset,
        "multiFPR": multi_fpr,
        "local": local,
        "global": global,
        "nolocal": nolocal,
        "noglobal": noglobal,
        "verbose": verbose,
        "quiet": quiet,
    };
    if (insdat !== null) {
        params["insdat"] = insdat;
    }
    if (nn !== null) {
        params["nn"] = nn;
    }
    if (sid !== null) {
        params["sid"] = sid;
    }
    if (hpow !== null) {
        params["hpow"] = hpow;
    }
    if (ncase !== null) {
        params["ncase"] = ncase;
    }
    if (pthr !== null) {
        params["pthr"] = pthr;
    }
    if (fpr !== null) {
        params["fpr"] = fpr;
    }
    if (minclust !== null) {
        params["minclust"] = minclust;
    }
    if (splitfrac !== null) {
        params["splitfrac"] = splitfrac;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_xclust_sim_cargs(
    params: V3dXclustSimParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dXClustSim");
    cargs.push(execution.inputFile((params["inset"] ?? null)));
    if ((params["insdat"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["insdat"] ?? null)));
    }
    if ((params["nn"] ?? null) !== null) {
        cargs.push(
            "-NN",
            String((params["nn"] ?? null))
        );
    }
    if ((params["sid"] ?? null) !== null) {
        cargs.push(
            "-sid",
            String((params["sid"] ?? null))
        );
    }
    if ((params["hpow"] ?? null) !== null) {
        cargs.push(
            "-hpow",
            ...(params["hpow"] ?? null).map(String)
        );
    }
    if ((params["ncase"] ?? null) !== null) {
        cargs.push(
            "-ncase",
            ...(params["ncase"] ?? null)
        );
    }
    if ((params["pthr"] ?? null) !== null) {
        cargs.push(
            "-pthr",
            ...(params["pthr"] ?? null).map(String)
        );
    }
    if ((params["fpr"] ?? null) !== null) {
        cargs.push(
            "-FPR",
            String((params["fpr"] ?? null))
        );
    }
    if ((params["multiFPR"] ?? null)) {
        cargs.push("-multiFPR");
    }
    if ((params["minclust"] ?? null) !== null) {
        cargs.push(
            "-minclust",
            String((params["minclust"] ?? null))
        );
    }
    if ((params["local"] ?? null)) {
        cargs.push("-local");
    }
    if ((params["global"] ?? null)) {
        cargs.push("-global");
    }
    if ((params["nolocal"] ?? null)) {
        cargs.push("-nolocal");
    }
    if ((params["noglobal"] ?? null)) {
        cargs.push("-noglobal");
    }
    if ((params["splitfrac"] ?? null) !== null) {
        cargs.push(
            "-splitfrac",
            String((params["splitfrac"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_xclust_sim_outputs(
    params: V3dXclustSimParameters,
    execution: Execution,
): V3dXclustSimOutputs {
    const ret: V3dXclustSimOutputs = {
        root: execution.outputFile("."),
        out_mthresh: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".mthresh.*.nii"].join('')) : null,
    };
    return ret;
}


/**
 * 3dXClustSim
 *
 * ETAC processing tool to find cluster figure of merit (FOM) thresholds.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dXclustSimOutputs`).
 */
function v_3d_xclust_sim_execute(
    params: V3dXclustSimParameters,
    runner: Runner | null = null,
): V3dXclustSimOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_XCLUST_SIM_METADATA);
    params = execution.params(params)
    const cargs = v_3d_xclust_sim_cargs(params, execution)
    const ret = v_3d_xclust_sim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dXClustSim
 *
 * ETAC processing tool to find cluster figure of merit (FOM) thresholds.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param inset Mask sdata file (from 3dtoXdataset or 3dttest++)
 * @param insdat Data files in the '.sdat' format.
 * @param nn Neighborhood connectivity (1, 2, or 3). Default is 2.
 * @param sid Sidedness: 1 (one-sided) or 2 (two-sided). Default is 2.
 * @param hpow H power values (can be a subset of 0, 1, 2). Default is 2.
 * @param ncase Number of cases with labels. Default is 1 A.
 * @param pthr List of p-value thresholds. Default is 0.0100 0.0056 0.0031 0.0018 0.0010.
 * @param fpr Set global FPR goal to an integer ff between 2 and 9. Default is 5.
 * @param multi_fpr Compute results for multiple FPR goals (2%, 3%, ... 9%).
 * @param minclust Minimum cluster size in voxels. Default is 5.
 * @param local Do voxel-wise (local) ETAC computations.
 * @param global Do volume-wise (global) ETAC computations.
 * @param nolocal Do not perform voxel-wise ETAC computations.
 * @param noglobal Do not perform volume-wise ETAC computations.
 * @param splitfrac Fraction to split simulations into pieces (0.2 < F < 0.8).
 * @param prefix Output filename prefix.
 * @param verbose Be more verbose.
 * @param quiet Silent mode.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dXclustSimOutputs`).
 */
function v_3d_xclust_sim(
    inset: InputPathType,
    insdat: InputPathType | null = null,
    nn: number | null = null,
    sid: number | null = null,
    hpow: Array<number> | null = null,
    ncase: Array<string> | null = null,
    pthr: Array<number> | null = null,
    fpr: number | null = null,
    multi_fpr: boolean = false,
    minclust: number | null = null,
    local: boolean = false,
    global: boolean = false,
    nolocal: boolean = false,
    noglobal: boolean = false,
    splitfrac: number | null = null,
    prefix: string | null = null,
    verbose: boolean = false,
    quiet: boolean = false,
    runner: Runner | null = null,
): V3dXclustSimOutputs {
    const params = v_3d_xclust_sim_params(inset, insdat, nn, sid, hpow, ncase, pthr, fpr, multi_fpr, minclust, local, global, nolocal, noglobal, splitfrac, prefix, verbose, quiet)
    return v_3d_xclust_sim_execute(params, runner);
}


export {
      V3dXclustSimOutputs,
      V3dXclustSimParameters,
      V_3D_XCLUST_SIM_METADATA,
      v_3d_xclust_sim,
      v_3d_xclust_sim_execute,
      v_3d_xclust_sim_params,
};
