// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SURFACEMASK_METADATA: Metadata = {
    id: "144247c115964ddf6af28333636de2a5a700807d.boutiques",
    name: "mri_surfacemask",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSurfacemaskParameters {
    "@type": "freesurfer.mri_surfacemask";
    "input_volume": InputPathType;
    "input_surface": InputPathType;
    "output_volume": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_surfacemask": mri_surfacemask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_surfacemask": mri_surfacemask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_surfacemask(...)`.
 *
 * @interface
 */
interface MriSurfacemaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting surface-masked volume
     */
    output_volume_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume which will be masked
 * @param input_surface Surface file used for masking the volume
 * @param output_volume Output volume file where pixels outside the surface are set to zero
 *
 * @returns Parameter dictionary
 */
function mri_surfacemask_params(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_volume: string,
): MriSurfacemaskParameters {
    const params = {
        "@type": "freesurfer.mri_surfacemask" as const,
        "input_volume": input_volume,
        "input_surface": input_surface,
        "output_volume": output_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_surfacemask_cargs(
    params: MriSurfacemaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_surfacemask");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_surfacemask_outputs(
    params: MriSurfacemaskParameters,
    execution: Execution,
): MriSurfacemaskOutputs {
    const ret: MriSurfacemaskOutputs = {
        root: execution.outputFile("."),
        output_volume_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_surfacemask
 *
 * Tool to produce a new volume where all pixels outside the surface are set to zero.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSurfacemaskOutputs`).
 */
function mri_surfacemask_execute(
    params: MriSurfacemaskParameters,
    runner: Runner | null = null,
): MriSurfacemaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SURFACEMASK_METADATA);
    params = execution.params(params)
    const cargs = mri_surfacemask_cargs(params, execution)
    const ret = mri_surfacemask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_surfacemask
 *
 * Tool to produce a new volume where all pixels outside the surface are set to zero.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume which will be masked
 * @param input_surface Surface file used for masking the volume
 * @param output_volume Output volume file where pixels outside the surface are set to zero
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSurfacemaskOutputs`).
 */
function mri_surfacemask(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_volume: string,
    runner: Runner | null = null,
): MriSurfacemaskOutputs {
    const params = mri_surfacemask_params(input_volume, input_surface, output_volume)
    return mri_surfacemask_execute(params, runner);
}


export {
      MRI_SURFACEMASK_METADATA,
      MriSurfacemaskOutputs,
      MriSurfacemaskParameters,
      mri_surfacemask,
      mri_surfacemask_execute,
      mri_surfacemask_params,
};
