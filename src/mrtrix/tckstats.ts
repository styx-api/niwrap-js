// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCKSTATS_METADATA: Metadata = {
    id: "5978fa2db061f719e30d3e2617f6bb60e013d444.boutiques",
    name: "tckstats",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface TckstatsOutputParameters {
    "__STYXTYPE__": "output";
    "field": string;
}


interface TckstatsConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface TckstatsParameters {
    "__STYXTYPE__": "tckstats";
    "output"?: Array<TckstatsOutputParameters> | null | undefined;
    "histogram"?: string | null | undefined;
    "dump"?: string | null | undefined;
    "ignorezero": boolean;
    "tck_weights_in"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<TckstatsConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "tracks_in": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tckstats": tckstats_cargs,
        "output": tckstats_output_cargs,
        "config": tckstats_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "tckstats": tckstats_outputs,
    };
    return outputsFuncs[t];
}


function tckstats_output_params(
    field: string,
): TckstatsOutputParameters {
    /**
     * Build parameters.
    
     * @param field output only the field specified. Multiple such options can be supplied if required. Choices are: mean, median, std, min, max, count. Useful for use in scripts.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "output" as const,
        "field": field,
    };
    return params;
}


function tckstats_output_cargs(
    params: TckstatsOutputParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-output");
    cargs.push((params["field"] ?? null));
    return cargs;
}


function tckstats_config_params(
    key: string,
    value: string,
): TckstatsConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function tckstats_config_cargs(
    params: TckstatsConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `tckstats(...)`.
 *
 * @interface
 */
interface TckstatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output a histogram of streamline lengths 
     */
    histogram: OutputPathType | null;
    /**
     * dump the streamlines lengths to a text file 
     */
    dump: OutputPathType | null;
}


function tckstats_params(
    tracks_in: InputPathType,
    output: Array<TckstatsOutputParameters> | null = null,
    histogram: string | null = null,
    dump: string | null = null,
    ignorezero: boolean = false,
    tck_weights_in: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckstatsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): TckstatsParameters {
    /**
     * Build parameters.
    
     * @param tracks_in the input track file
     * @param output output only the field specified. Multiple such options can be supplied if required. Choices are: mean, median, std, min, max, count. Useful for use in scripts.
     * @param histogram output a histogram of streamline lengths
     * @param dump dump the streamlines lengths to a text file
     * @param ignorezero do not generate a warning if the track file contains streamlines with zero length
     * @param tck_weights_in specify a text scalar file containing the streamline weights
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tckstats" as const,
        "ignorezero": ignorezero,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "tracks_in": tracks_in,
    };
    if (output !== null) {
        params["output"] = output;
    }
    if (histogram !== null) {
        params["histogram"] = histogram;
    }
    if (dump !== null) {
        params["dump"] = dump;
    }
    if (tck_weights_in !== null) {
        params["tck_weights_in"] = tck_weights_in;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function tckstats_cargs(
    params: TckstatsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tckstats");
    if ((params["output"] ?? null) !== null) {
        cargs.push(...(params["output"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["histogram"] ?? null) !== null) {
        cargs.push(
            "-histogram",
            (params["histogram"] ?? null)
        );
    }
    if ((params["dump"] ?? null) !== null) {
        cargs.push(
            "-dump",
            (params["dump"] ?? null)
        );
    }
    if ((params["ignorezero"] ?? null)) {
        cargs.push("-ignorezero");
    }
    if ((params["tck_weights_in"] ?? null) !== null) {
        cargs.push(
            "-tck_weights_in",
            execution.inputFile((params["tck_weights_in"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["tracks_in"] ?? null)));
    return cargs;
}


function tckstats_outputs(
    params: TckstatsParameters,
    execution: Execution,
): TckstatsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TckstatsOutputs = {
        root: execution.outputFile("."),
        histogram: ((params["histogram"] ?? null) !== null) ? execution.outputFile([(params["histogram"] ?? null)].join('')) : null,
        dump: ((params["dump"] ?? null) !== null) ? execution.outputFile([(params["dump"] ?? null)].join('')) : null,
    };
    return ret;
}


function tckstats_execute(
    params: TckstatsParameters,
    execution: Execution,
): TckstatsOutputs {
    /**
     * Calculate statistics on streamlines lengths.
     * 
     * 
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TckstatsOutputs`).
     */
    params = execution.params(params)
    const cargs = tckstats_cargs(params, execution)
    const ret = tckstats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tckstats(
    tracks_in: InputPathType,
    output: Array<TckstatsOutputParameters> | null = null,
    histogram: string | null = null,
    dump: string | null = null,
    ignorezero: boolean = false,
    tck_weights_in: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckstatsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): TckstatsOutputs {
    /**
     * Calculate statistics on streamlines lengths.
     * 
     * 
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param tracks_in the input track file
     * @param output output only the field specified. Multiple such options can be supplied if required. Choices are: mean, median, std, min, max, count. Useful for use in scripts.
     * @param histogram output a histogram of streamline lengths
     * @param dump dump the streamlines lengths to a text file
     * @param ignorezero do not generate a warning if the track file contains streamlines with zero length
     * @param tck_weights_in specify a text scalar file containing the streamline weights
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TckstatsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCKSTATS_METADATA);
    const params = tckstats_params(tracks_in, output, histogram, dump, ignorezero, tck_weights_in, info, quiet, debug, force, nthreads, config, help, version)
    return tckstats_execute(params, execution);
}


export {
      TCKSTATS_METADATA,
      TckstatsConfigParameters,
      TckstatsOutputParameters,
      TckstatsOutputs,
      TckstatsParameters,
      tckstats,
      tckstats_config_params,
      tckstats_output_params,
      tckstats_params,
};
