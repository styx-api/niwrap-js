// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LONG_CREATE_BASE_SIGMA_METADATA: Metadata = {
    id: "4c6141a217c61baf0c141da4a8f2865bd36f37dd.boutiques",
    name: "long_create_base_sigma",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LongCreateBaseSigmaParameters {
    "@type": "freesurfer.long_create_base_sigma";
    "base_id": string;
    "sigma": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.long_create_base_sigma": long_create_base_sigma_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `long_create_base_sigma(...)`.
 *
 * @interface
 */
interface LongCreateBaseSigmaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param base_id Subject ID of the base
 * @param sigma Integer value of sigma smoothing (usually 2..6)
 *
 * @returns Parameter dictionary
 */
function long_create_base_sigma_params(
    base_id: string,
    sigma: number,
): LongCreateBaseSigmaParameters {
    const params = {
        "@type": "freesurfer.long_create_base_sigma" as const,
        "base_id": base_id,
        "sigma": sigma,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function long_create_base_sigma_cargs(
    params: LongCreateBaseSigmaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("long_create_base_sigma");
    cargs.push((params["base_id"] ?? null));
    cargs.push(String((params["sigma"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function long_create_base_sigma_outputs(
    params: LongCreateBaseSigmaParameters,
    execution: Execution,
): LongCreateBaseSigmaOutputs {
    const ret: LongCreateBaseSigmaOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * long_create_base_sigma
 *
 * Performs a joint normalization and atlas renormalization at a specific sigma smoothing level. This is usually done as part of the base stream but can be performed to add files for a different sigma level to an existing base.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LongCreateBaseSigmaOutputs`).
 */
function long_create_base_sigma_execute(
    params: LongCreateBaseSigmaParameters,
    runner: Runner | null = null,
): LongCreateBaseSigmaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LONG_CREATE_BASE_SIGMA_METADATA);
    params = execution.params(params)
    const cargs = long_create_base_sigma_cargs(params, execution)
    const ret = long_create_base_sigma_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * long_create_base_sigma
 *
 * Performs a joint normalization and atlas renormalization at a specific sigma smoothing level. This is usually done as part of the base stream but can be performed to add files for a different sigma level to an existing base.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param base_id Subject ID of the base
 * @param sigma Integer value of sigma smoothing (usually 2..6)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LongCreateBaseSigmaOutputs`).
 */
function long_create_base_sigma(
    base_id: string,
    sigma: number,
    runner: Runner | null = null,
): LongCreateBaseSigmaOutputs {
    const params = long_create_base_sigma_params(base_id, sigma)
    return long_create_base_sigma_execute(params, runner);
}


export {
      LONG_CREATE_BASE_SIGMA_METADATA,
      LongCreateBaseSigmaOutputs,
      LongCreateBaseSigmaParameters,
      long_create_base_sigma,
      long_create_base_sigma_execute,
      long_create_base_sigma_params,
};
