// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_FLATTEN_METADATA: Metadata = {
    id: "725b5eeb8bd019b005552e8b6e644ddc90b3d002.boutiques",
    name: "mris_flatten",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisFlattenParameters {
    "@type": "freesurfer.mris_flatten";
    "input_patch": InputPathType;
    "output_patch": string;
    "iterations"?: number | null | undefined;
    "distances"?: Array<number> | null | undefined;
    "dilations"?: number | null | undefined;
    "random_seed"?: number | null | undefined;
    "copy_coords"?: string | null | undefined;
    "norand": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_flatten": mris_flatten_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_flatten": mris_flatten_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_flatten(...)`.
 *
 * @interface
 */
interface MrisFlattenOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output flattened surface patch
     */
    output_patch_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_patch Input surface patch
 * @param output_patch Output flattened surface patch
 * @param iterations Write out the surface every # of iterations.
 * @param distances Specify size of neighborhood and number of vertices at each distance to be used in the optimization.
 * @param dilations Specify the number of times to dilate the ripped edges to ensure a clean cut
 * @param random_seed Set the random seed to a specific value so that flattening is repeatable
 * @param copy_coords Copy xyz coords from surface before flattening.
 * @param norand Set the random seed to 0 so that flattening is repeatable
 *
 * @returns Parameter dictionary
 */
function mris_flatten_params(
    input_patch: InputPathType,
    output_patch: string,
    iterations: number | null = null,
    distances: Array<number> | null = null,
    dilations: number | null = null,
    random_seed: number | null = null,
    copy_coords: string | null = null,
    norand: boolean = false,
): MrisFlattenParameters {
    const params = {
        "@type": "freesurfer.mris_flatten" as const,
        "input_patch": input_patch,
        "output_patch": output_patch,
        "norand": norand,
    };
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (distances !== null) {
        params["distances"] = distances;
    }
    if (dilations !== null) {
        params["dilations"] = dilations;
    }
    if (random_seed !== null) {
        params["random_seed"] = random_seed;
    }
    if (copy_coords !== null) {
        params["copy_coords"] = copy_coords;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_flatten_cargs(
    params: MrisFlattenParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_flatten");
    cargs.push(execution.inputFile((params["input_patch"] ?? null)));
    cargs.push((params["output_patch"] ?? null));
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["distances"] ?? null) !== null) {
        cargs.push(
            "-distances",
            ...(params["distances"] ?? null).map(String)
        );
    }
    if ((params["dilations"] ?? null) !== null) {
        cargs.push(
            "-dilate",
            String((params["dilations"] ?? null))
        );
    }
    if ((params["random_seed"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["random_seed"] ?? null))
        );
    }
    if ((params["copy_coords"] ?? null) !== null) {
        cargs.push(
            "-copy-coords",
            (params["copy_coords"] ?? null)
        );
    }
    if ((params["norand"] ?? null)) {
        cargs.push("-norand");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_flatten_outputs(
    params: MrisFlattenParameters,
    execution: Execution,
): MrisFlattenOutputs {
    const ret: MrisFlattenOutputs = {
        root: execution.outputFile("."),
        output_patch_file: execution.outputFile([(params["output_patch"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_flatten
 *
 * This program will flatten a surface patch.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisFlattenOutputs`).
 */
function mris_flatten_execute(
    params: MrisFlattenParameters,
    runner: Runner | null = null,
): MrisFlattenOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_FLATTEN_METADATA);
    params = execution.params(params)
    const cargs = mris_flatten_cargs(params, execution)
    const ret = mris_flatten_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_flatten
 *
 * This program will flatten a surface patch.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_patch Input surface patch
 * @param output_patch Output flattened surface patch
 * @param iterations Write out the surface every # of iterations.
 * @param distances Specify size of neighborhood and number of vertices at each distance to be used in the optimization.
 * @param dilations Specify the number of times to dilate the ripped edges to ensure a clean cut
 * @param random_seed Set the random seed to a specific value so that flattening is repeatable
 * @param copy_coords Copy xyz coords from surface before flattening.
 * @param norand Set the random seed to 0 so that flattening is repeatable
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisFlattenOutputs`).
 */
function mris_flatten(
    input_patch: InputPathType,
    output_patch: string,
    iterations: number | null = null,
    distances: Array<number> | null = null,
    dilations: number | null = null,
    random_seed: number | null = null,
    copy_coords: string | null = null,
    norand: boolean = false,
    runner: Runner | null = null,
): MrisFlattenOutputs {
    const params = mris_flatten_params(input_patch, output_patch, iterations, distances, dilations, random_seed, copy_coords, norand)
    return mris_flatten_execute(params, runner);
}


export {
      MRIS_FLATTEN_METADATA,
      MrisFlattenOutputs,
      MrisFlattenParameters,
      mris_flatten,
      mris_flatten_execute,
      mris_flatten_params,
};
