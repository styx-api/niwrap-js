// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERT_TRANSFORM_FILE_METADATA: Metadata = {
    id: "dab7fd16e998587e8d77ec77dbad7a924757c1af.boutiques",
    name: "ConvertTransformFile",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface ConvertTransformFileParameters {
    "__STYXTYPE__": "ConvertTransformFile";
    "dimensions": number;
    "input_transform_file": InputPathType;
    "output_transform_file": string;
    "matrix": boolean;
    "homogeneous_matrix": boolean;
    "RAS": boolean;
    "convert_to_affine_type": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "ConvertTransformFile": convert_transform_file_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `convert_transform_file(...)`.
 *
 * @interface
 */
interface ConvertTransformFileOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function convert_transform_file_params(
    dimensions: number,
    input_transform_file: InputPathType,
    output_transform_file: string,
    matrix: boolean = false,
    homogeneous_matrix: boolean = false,
    ras: boolean = false,
    convert_to_affine_type: boolean = false,
): ConvertTransformFileParameters {
    /**
     * Build parameters.
    
     * @param dimensions Dimensionality of the transform file.
     * @param input_transform_file Path to the input transform file.
     * @param output_transform_file Path for the output transform file.
     * @param matrix Output only the transform matrix to a text file, one row per line with space-delimited values. Only works for specific transform types.
     * @param homogeneous_matrix Output an N+1 square homogeneous matrix from the transform matrix and offset. Only works for specific transform types.
     * @param ras Convert the output into the RAS coordinate system if combined with 'matrix' or 'homogeneousMatrix'.
     * @param convert_to_affine_type Convert the input transform type to AffineTransform and output again as a binary transform file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ConvertTransformFile" as const,
        "dimensions": dimensions,
        "input_transform_file": input_transform_file,
        "output_transform_file": output_transform_file,
        "matrix": matrix,
        "homogeneous_matrix": homogeneous_matrix,
        "RAS": ras,
        "convert_to_affine_type": convert_to_affine_type,
    };
    return params;
}


function convert_transform_file_cargs(
    params: ConvertTransformFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("ConvertTransformFile");
    cargs.push(String((params["dimensions"] ?? null)));
    cargs.push(execution.inputFile((params["input_transform_file"] ?? null)));
    cargs.push((params["output_transform_file"] ?? null));
    if ((params["matrix"] ?? null)) {
        cargs.push("--matrix");
    }
    if ((params["homogeneous_matrix"] ?? null)) {
        cargs.push("--homogeneousMatrix");
    }
    if ((params["RAS"] ?? null)) {
        cargs.push("--RAS");
    }
    if ((params["convert_to_affine_type"] ?? null)) {
        cargs.push("--convertToAffineType");
    }
    return cargs;
}


function convert_transform_file_outputs(
    params: ConvertTransformFileParameters,
    execution: Execution,
): ConvertTransformFileOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ConvertTransformFileOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function convert_transform_file_execute(
    params: ConvertTransformFileParameters,
    execution: Execution,
): ConvertTransformFileOutputs {
    /**
     * Utility to read in a transform file (presumed to be in binary format) and output it in various formats. Default output is legacy human-readable text format. Without any options, the output filename extension must be .txt or .tfm to signify a text-formatted transform file.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ConvertTransformFileOutputs`).
     */
    params = execution.params(params)
    const cargs = convert_transform_file_cargs(params, execution)
    const ret = convert_transform_file_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function convert_transform_file(
    dimensions: number,
    input_transform_file: InputPathType,
    output_transform_file: string,
    matrix: boolean = false,
    homogeneous_matrix: boolean = false,
    ras: boolean = false,
    convert_to_affine_type: boolean = false,
    runner: Runner | null = null,
): ConvertTransformFileOutputs {
    /**
     * Utility to read in a transform file (presumed to be in binary format) and output it in various formats. Default output is legacy human-readable text format. Without any options, the output filename extension must be .txt or .tfm to signify a text-formatted transform file.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param dimensions Dimensionality of the transform file.
     * @param input_transform_file Path to the input transform file.
     * @param output_transform_file Path for the output transform file.
     * @param matrix Output only the transform matrix to a text file, one row per line with space-delimited values. Only works for specific transform types.
     * @param homogeneous_matrix Output an N+1 square homogeneous matrix from the transform matrix and offset. Only works for specific transform types.
     * @param ras Convert the output into the RAS coordinate system if combined with 'matrix' or 'homogeneousMatrix'.
     * @param convert_to_affine_type Convert the input transform type to AffineTransform and output again as a binary transform file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ConvertTransformFileOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERT_TRANSFORM_FILE_METADATA);
    const params = convert_transform_file_params(dimensions, input_transform_file, output_transform_file, matrix, homogeneous_matrix, ras, convert_to_affine_type)
    return convert_transform_file_execute(params, execution);
}


export {
      CONVERT_TRANSFORM_FILE_METADATA,
      ConvertTransformFileOutputs,
      ConvertTransformFileParameters,
      convert_transform_file,
      convert_transform_file_params,
};
