// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EXVIVO_STRIP_METADATA: Metadata = {
    id: "1f399e1586b99cedbde972e5d1a2f5e566e10bfb.boutiques",
    name: "mri_exvivo_strip",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriExvivoStripParameters {
    "__STYXTYPE__": "mri_exvivo_strip";
    "invol": InputPathType;
    "outvol": string;
    "hemi": string;
    "pred"?: InputPathType | null | undefined;
    "norm"?: InputPathType | null | undefined;
    "fv": boolean;
    "uthresh"?: number | null | undefined;
    "border"?: number | null | undefined;
    "multichannel": boolean;
    "model"?: InputPathType | null | undefined;
    "wts"?: InputPathType | null | undefined;
    "gpu"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_exvivo_strip": mri_exvivo_strip_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_exvivo_strip": mri_exvivo_strip_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_exvivo_strip(...)`.
 *
 * @interface
 */
interface MriExvivoStripOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Processed output MRI volume
     */
    output_file: OutputPathType;
    /**
     * Prediction volume if specified
     */
    prediction_output: OutputPathType | null;
    /**
     * Normalized volume if specified
     */
    normalized_output: OutputPathType | null;
}


function mri_exvivo_strip_params(
    invol: InputPathType,
    outvol: string,
    hemi: string,
    pred: InputPathType | null = null,
    norm: InputPathType | null = null,
    fv: boolean = false,
    uthresh: number | null = null,
    border: number | null = null,
    multichannel: boolean = false,
    model: InputPathType | null = null,
    wts: InputPathType | null = null,
    gpu: number | null = null,
): MriExvivoStripParameters {
    /**
     * Build parameters.
    
     * @param invol Input MRI volume
     * @param outvol Output MRI volume
     * @param hemi Hemi to process
     * @param pred Write prediction volume
     * @param norm Write normalized volume
     * @param fv Bring up freeview to show results
     * @param uthresh Specify threshold to erase above
     * @param border Number of border voxels to set threshold at
     * @param multichannel Specify that data has multiple channels
     * @param model Use alternative model file
     * @param wts Weight filename
     * @param gpu GPU number - if not supplied, CPU is used
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_exvivo_strip" as const,
        "invol": invol,
        "outvol": outvol,
        "hemi": hemi,
        "fv": fv,
        "multichannel": multichannel,
    };
    if (pred !== null) {
        params["pred"] = pred;
    }
    if (norm !== null) {
        params["norm"] = norm;
    }
    if (uthresh !== null) {
        params["uthresh"] = uthresh;
    }
    if (border !== null) {
        params["border"] = border;
    }
    if (model !== null) {
        params["model"] = model;
    }
    if (wts !== null) {
        params["wts"] = wts;
    }
    if (gpu !== null) {
        params["gpu"] = gpu;
    }
    return params;
}


function mri_exvivo_strip_cargs(
    params: MriExvivoStripParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_exvivo_strip");
    cargs.push(
        "-i",
        execution.inputFile((params["invol"] ?? null))
    );
    cargs.push(
        "-o",
        (params["outvol"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemi"] ?? null)
    );
    if ((params["pred"] ?? null) !== null) {
        cargs.push(
            "--pred",
            execution.inputFile((params["pred"] ?? null))
        );
    }
    if ((params["norm"] ?? null) !== null) {
        cargs.push(
            "--norm",
            execution.inputFile((params["norm"] ?? null))
        );
    }
    if ((params["fv"] ?? null)) {
        cargs.push("--fv");
    }
    if ((params["uthresh"] ?? null) !== null) {
        cargs.push(
            "--uthresh",
            String((params["uthresh"] ?? null))
        );
    }
    if ((params["border"] ?? null) !== null) {
        cargs.push(
            "--border",
            String((params["border"] ?? null))
        );
    }
    if ((params["multichannel"] ?? null)) {
        cargs.push("--multichannel");
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "--model",
            execution.inputFile((params["model"] ?? null))
        );
    }
    if ((params["wts"] ?? null) !== null) {
        cargs.push(
            "--wts",
            execution.inputFile((params["wts"] ?? null))
        );
    }
    if ((params["gpu"] ?? null) !== null) {
        cargs.push(
            "--gpu",
            String((params["gpu"] ?? null))
        );
    }
    return cargs;
}


function mri_exvivo_strip_outputs(
    params: MriExvivoStripParameters,
    execution: Execution,
): MriExvivoStripOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriExvivoStripOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["outvol"] ?? null)].join('')),
        prediction_output: ((params["pred"] ?? null) !== null) ? execution.outputFile([path.basename((params["pred"] ?? null))].join('')) : null,
        normalized_output: ((params["norm"] ?? null) !== null) ? execution.outputFile([path.basename((params["norm"] ?? null))].join('')) : null,
    };
    return ret;
}


function mri_exvivo_strip_execute(
    params: MriExvivoStripParameters,
    execution: Execution,
): MriExvivoStripOutputs {
    /**
     * Tool for processing MRI volumes for ex vivo data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriExvivoStripOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_exvivo_strip_cargs(params, execution)
    const ret = mri_exvivo_strip_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_exvivo_strip(
    invol: InputPathType,
    outvol: string,
    hemi: string,
    pred: InputPathType | null = null,
    norm: InputPathType | null = null,
    fv: boolean = false,
    uthresh: number | null = null,
    border: number | null = null,
    multichannel: boolean = false,
    model: InputPathType | null = null,
    wts: InputPathType | null = null,
    gpu: number | null = null,
    runner: Runner | null = null,
): MriExvivoStripOutputs {
    /**
     * Tool for processing MRI volumes for ex vivo data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param invol Input MRI volume
     * @param outvol Output MRI volume
     * @param hemi Hemi to process
     * @param pred Write prediction volume
     * @param norm Write normalized volume
     * @param fv Bring up freeview to show results
     * @param uthresh Specify threshold to erase above
     * @param border Number of border voxels to set threshold at
     * @param multichannel Specify that data has multiple channels
     * @param model Use alternative model file
     * @param wts Weight filename
     * @param gpu GPU number - if not supplied, CPU is used
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriExvivoStripOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EXVIVO_STRIP_METADATA);
    const params = mri_exvivo_strip_params(invol, outvol, hemi, pred, norm, fv, uthresh, border, multichannel, model, wts, gpu)
    return mri_exvivo_strip_execute(params, execution);
}


export {
      MRI_EXVIVO_STRIP_METADATA,
      MriExvivoStripOutputs,
      MriExvivoStripParameters,
      mri_exvivo_strip,
      mri_exvivo_strip_params,
};
