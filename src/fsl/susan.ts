// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SUSAN_METADATA: Metadata = {
    id: "df7143190550f4edd77aee38412229dd5192192c.boutiques",
    name: "susan",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SusanParameters {
    "@type"?: "fsl/susan";
    "input_file": InputPathType;
    "brightness_threshold": number;
    "spatial_size": number;
    "dimensionality": number;
    "use_median_filter": number;
    "n_usans": number;
    "usan1"?: InputPathType | null | undefined;
    "brightness_threshold1"?: number | null | undefined;
    "usan2"?: InputPathType | null | undefined;
    "brightness_threshold2"?: number | null | undefined;
    "output_file": string;
}
type SusanParametersTagged = Required<Pick<SusanParameters, '@type'>> & SusanParameters;


/**
 * Output object returned when calling `SusanParameters(...)`.
 *
 * @interface
 */
interface SusanOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Filtered output image file
     */
    filtered_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input image file
 * @param brightness_threshold Brightness threshold; should be greater than noise level and less than contrast of edges to be preserved
 * @param spatial_size Spatial size (sigma, i.e., half-width) of smoothing, in mm
 * @param dimensionality Dimensionality (2 or 3), for within-plane (2) or fully 3D (3) smoothing
 * @param use_median_filter Use median filter for cases where single-point noise is detected (0 or 1)
 * @param n_usans Determine if the smoothing area is found from secondary images (0, 1 or 2)
 * @param output_file Output image file
 * @param usan1 First USAN image file
 * @param brightness_threshold1 Brightness threshold for first USAN image
 * @param usan2 Second USAN image file
 * @param brightness_threshold2 Brightness threshold for second USAN image
 *
 * @returns Parameter dictionary
 */
function susan_params(
    input_file: InputPathType,
    brightness_threshold: number,
    spatial_size: number,
    dimensionality: number,
    use_median_filter: number,
    n_usans: number,
    output_file: string,
    usan1: InputPathType | null = null,
    brightness_threshold1: number | null = null,
    usan2: InputPathType | null = null,
    brightness_threshold2: number | null = null,
): SusanParametersTagged {
    const params = {
        "@type": "fsl/susan" as const,
        "input_file": input_file,
        "brightness_threshold": brightness_threshold,
        "spatial_size": spatial_size,
        "dimensionality": dimensionality,
        "use_median_filter": use_median_filter,
        "n_usans": n_usans,
        "output_file": output_file,
    };
    if (usan1 !== null) {
        params["usan1"] = usan1;
    }
    if (brightness_threshold1 !== null) {
        params["brightness_threshold1"] = brightness_threshold1;
    }
    if (usan2 !== null) {
        params["usan2"] = usan2;
    }
    if (brightness_threshold2 !== null) {
        params["brightness_threshold2"] = brightness_threshold2;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function susan_cargs(
    params: SusanParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("susan");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push(String((params["brightness_threshold"] ?? null)));
    cargs.push(String((params["spatial_size"] ?? null)));
    cargs.push(String((params["dimensionality"] ?? null)));
    cargs.push(String((params["use_median_filter"] ?? null)));
    cargs.push(String((params["n_usans"] ?? null)));
    if ((params["usan1"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["usan1"] ?? null)));
    }
    if ((params["brightness_threshold1"] ?? null) !== null) {
        cargs.push(String((params["brightness_threshold1"] ?? null)));
    }
    if ((params["usan2"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["usan2"] ?? null)));
    }
    if ((params["brightness_threshold2"] ?? null) !== null) {
        cargs.push(String((params["brightness_threshold2"] ?? null)));
    }
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function susan_outputs(
    params: SusanParameters,
    execution: Execution,
): SusanOutputs {
    const ret: SusanOutputs = {
        root: execution.outputFile("."),
        filtered_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * susan
 *
 * Non-linear noise reduction filtering tool.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SusanOutputs`).
 */
function susan_execute(
    params: SusanParameters,
    runner: Runner | null = null,
): SusanOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SUSAN_METADATA);
    params = execution.params(params)
    const cargs = susan_cargs(params, execution)
    const ret = susan_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * susan
 *
 * Non-linear noise reduction filtering tool.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input image file
 * @param brightness_threshold Brightness threshold; should be greater than noise level and less than contrast of edges to be preserved
 * @param spatial_size Spatial size (sigma, i.e., half-width) of smoothing, in mm
 * @param dimensionality Dimensionality (2 or 3), for within-plane (2) or fully 3D (3) smoothing
 * @param use_median_filter Use median filter for cases where single-point noise is detected (0 or 1)
 * @param n_usans Determine if the smoothing area is found from secondary images (0, 1 or 2)
 * @param output_file Output image file
 * @param usan1 First USAN image file
 * @param brightness_threshold1 Brightness threshold for first USAN image
 * @param usan2 Second USAN image file
 * @param brightness_threshold2 Brightness threshold for second USAN image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SusanOutputs`).
 */
function susan(
    input_file: InputPathType,
    brightness_threshold: number,
    spatial_size: number,
    dimensionality: number,
    use_median_filter: number,
    n_usans: number,
    output_file: string,
    usan1: InputPathType | null = null,
    brightness_threshold1: number | null = null,
    usan2: InputPathType | null = null,
    brightness_threshold2: number | null = null,
    runner: Runner | null = null,
): SusanOutputs {
    const params = susan_params(input_file, brightness_threshold, spatial_size, dimensionality, use_median_filter, n_usans, output_file, usan1, brightness_threshold1, usan2, brightness_threshold2)
    return susan_execute(params, runner);
}


export {
      SUSAN_METADATA,
      SusanOutputs,
      susan,
      susan_execute,
      susan_params,
};
