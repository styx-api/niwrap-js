// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__2DWARPER_ALLIN_METADATA: Metadata = {
    id: "5efa97bed55735b8ea9da82ded571c3714029a2b.boutiques",
    name: "@2dwarper.Allin",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V2dwarperAllinParameters {
    "@type": "afni.@2dwarper.Allin";
    "input_prefix": string;
    "mask_prefix"?: string | null | undefined;
    "output_prefix"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@2dwarper.Allin": v__2dwarper_allin_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@2dwarper.Allin": v__2dwarper_allin_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__2dwarper_allin(...)`.
 *
 * @interface
 */
interface V2dwarperAllinOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registered dataset
     */
    reg_output: OutputPathType | null;
    /**
     * Output registration parameter files
     */
    param_files: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_prefix Prefix for the input 3D+time dataset
 * @param mask_prefix Prefix of an existing mask dataset
 * @param output_prefix Prefix for output datasets
 *
 * @returns Parameter dictionary
 */
function v__2dwarper_allin_params(
    input_prefix: string,
    mask_prefix: string | null = null,
    output_prefix: string | null = null,
): V2dwarperAllinParameters {
    const params = {
        "@type": "afni.@2dwarper.Allin" as const,
        "input_prefix": input_prefix,
    };
    if (mask_prefix !== null) {
        params["mask_prefix"] = mask_prefix;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__2dwarper_allin_cargs(
    params: V2dwarperAllinParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@2dwarper.Allin");
    cargs.push((params["input_prefix"] ?? null));
    if ((params["mask_prefix"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask_prefix"] ?? null)
        );
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__2dwarper_allin_outputs(
    params: V2dwarperAllinParameters,
    execution: Execution,
): V2dwarperAllinOutputs {
    const ret: V2dwarperAllinOutputs = {
        root: execution.outputFile("."),
        reg_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_reg+orig.HEAD"].join('')) : null,
        param_files: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_param_*.1D"].join('')) : null,
    };
    return ret;
}


/**
 * Perform 2D registration on each slice of a 3D+time dataset, and combine the results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2dwarperAllinOutputs`).
 */
function v__2dwarper_allin_execute(
    params: V2dwarperAllinParameters,
    runner: Runner | null = null,
): V2dwarperAllinOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__2DWARPER_ALLIN_METADATA);
    params = execution.params(params)
    const cargs = v__2dwarper_allin_cargs(params, execution)
    const ret = v__2dwarper_allin_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Perform 2D registration on each slice of a 3D+time dataset, and combine the results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_prefix Prefix for the input 3D+time dataset
 * @param mask_prefix Prefix of an existing mask dataset
 * @param output_prefix Prefix for output datasets
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2dwarperAllinOutputs`).
 */
function v__2dwarper_allin(
    input_prefix: string,
    mask_prefix: string | null = null,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): V2dwarperAllinOutputs {
    const params = v__2dwarper_allin_params(input_prefix, mask_prefix, output_prefix)
    return v__2dwarper_allin_execute(params, runner);
}


export {
      V2dwarperAllinOutputs,
      V2dwarperAllinParameters,
      V__2DWARPER_ALLIN_METADATA,
      v__2dwarper_allin,
      v__2dwarper_allin_execute,
      v__2dwarper_allin_params,
};
