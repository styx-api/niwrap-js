// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const OVERLAY_METADATA: Metadata = {
    id: "bb3b718f143a2a413a158fc66626ce4772a6ee44.boutiques",
    name: "overlay",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface OverlayParameters {
    "@type": "fsl.overlay";
    "auto_thresh_bg": boolean;
    "background_image": InputPathType;
    "bg_thresh": Array<number>;
    "full_bg_range": boolean;
    "out_file"?: string | null | undefined;
    "out_type"?: "float" | "int" | null | undefined;
    "output_type"?: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null | undefined;
    "stat_image": InputPathType;
    "stat_image2"?: InputPathType | null | undefined;
    "stat_thresh": Array<number>;
    "stat_thresh2"?: Array<number> | null | undefined;
    "use_checkerboard": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.overlay": overlay_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.overlay": overlay_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `overlay(...)`.
 *
 * @interface
 */
interface OverlayOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Combined image volume.
     */
    out_file_outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param background_image Image to use as background.
 * @param bg_thresh (a float, a float). Min and max values for background intensity.
 * @param stat_image Statistical image to overlay in color.
 * @param stat_thresh (a float, a float). Min and max values for the statistical overlay.
 * @param auto_thresh_bg Automatically threshold the background image.
 * @param full_bg_range Use full range of background image.
 * @param out_file Combined image volume.
 * @param out_type 'float' or 'int'. Write output with float or int.
 * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
 * @param stat_image2 Second statistical image to overlay in color.
 * @param stat_thresh2 (a float, a float). Min and max values for second statistical overlay.
 * @param use_checkerboard Use checkerboard mask for overlay.
 *
 * @returns Parameter dictionary
 */
function overlay_params(
    background_image: InputPathType,
    bg_thresh: Array<number>,
    stat_image: InputPathType,
    stat_thresh: Array<number>,
    auto_thresh_bg: boolean = false,
    full_bg_range: boolean = false,
    out_file: string | null = null,
    out_type: "float" | "int" | null = null,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    stat_image2: InputPathType | null = null,
    stat_thresh2: Array<number> | null = null,
    use_checkerboard: boolean = false,
): OverlayParameters {
    const params = {
        "@type": "fsl.overlay" as const,
        "auto_thresh_bg": auto_thresh_bg,
        "background_image": background_image,
        "bg_thresh": bg_thresh,
        "full_bg_range": full_bg_range,
        "stat_image": stat_image,
        "stat_thresh": stat_thresh,
        "use_checkerboard": use_checkerboard,
    };
    if (out_file !== null) {
        params["out_file"] = out_file;
    }
    if (out_type !== null) {
        params["out_type"] = out_type;
    }
    if (output_type !== null) {
        params["output_type"] = output_type;
    }
    if (stat_image2 !== null) {
        params["stat_image2"] = stat_image2;
    }
    if (stat_thresh2 !== null) {
        params["stat_thresh2"] = stat_thresh2;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function overlay_cargs(
    params: OverlayParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("overlay");
    if ((params["auto_thresh_bg"] ?? null)) {
        cargs.push("-a");
    }
    cargs.push(execution.inputFile((params["background_image"] ?? null)));
    cargs.push(...(params["bg_thresh"] ?? null).map(String));
    if ((params["full_bg_range"] ?? null)) {
        cargs.push("-A");
    }
    if ((params["out_file"] ?? null) !== null) {
        cargs.push((params["out_file"] ?? null));
    }
    if ((params["out_type"] ?? null) !== null) {
        cargs.push((params["out_type"] ?? null));
    }
    if ((params["output_type"] ?? null) !== null) {
        cargs.push((params["output_type"] ?? null));
    }
    cargs.push(execution.inputFile((params["stat_image"] ?? null)));
    if ((params["stat_image2"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["stat_image2"] ?? null)));
    }
    cargs.push(...(params["stat_thresh"] ?? null).map(String));
    if ((params["stat_thresh2"] ?? null) !== null) {
        cargs.push(...(params["stat_thresh2"] ?? null).map(String));
    }
    if ((params["use_checkerboard"] ?? null)) {
        cargs.push("-c");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function overlay_outputs(
    params: OverlayParameters,
    execution: Execution,
): OverlayOutputs {
    const ret: OverlayOutputs = {
        root: execution.outputFile("."),
        out_file_outfile: ((params["out_file"] ?? null) !== null) ? execution.outputFile([(params["out_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * overlay
 *
 * Use FSL's overlay command to combine background and statistical images into one volume.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `OverlayOutputs`).
 */
function overlay_execute(
    params: OverlayParameters,
    runner: Runner | null = null,
): OverlayOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(OVERLAY_METADATA);
    params = execution.params(params)
    const cargs = overlay_cargs(params, execution)
    const ret = overlay_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * overlay
 *
 * Use FSL's overlay command to combine background and statistical images into one volume.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param background_image Image to use as background.
 * @param bg_thresh (a float, a float). Min and max values for background intensity.
 * @param stat_image Statistical image to overlay in color.
 * @param stat_thresh (a float, a float). Min and max values for the statistical overlay.
 * @param auto_thresh_bg Automatically threshold the background image.
 * @param full_bg_range Use full range of background image.
 * @param out_file Combined image volume.
 * @param out_type 'float' or 'int'. Write output with float or int.
 * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
 * @param stat_image2 Second statistical image to overlay in color.
 * @param stat_thresh2 (a float, a float). Min and max values for second statistical overlay.
 * @param use_checkerboard Use checkerboard mask for overlay.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `OverlayOutputs`).
 */
function overlay(
    background_image: InputPathType,
    bg_thresh: Array<number>,
    stat_image: InputPathType,
    stat_thresh: Array<number>,
    auto_thresh_bg: boolean = false,
    full_bg_range: boolean = false,
    out_file: string | null = null,
    out_type: "float" | "int" | null = null,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    stat_image2: InputPathType | null = null,
    stat_thresh2: Array<number> | null = null,
    use_checkerboard: boolean = false,
    runner: Runner | null = null,
): OverlayOutputs {
    const params = overlay_params(background_image, bg_thresh, stat_image, stat_thresh, auto_thresh_bg, full_bg_range, out_file, out_type, output_type, stat_image2, stat_thresh2, use_checkerboard)
    return overlay_execute(params, runner);
}


export {
      OVERLAY_METADATA,
      OverlayOutputs,
      OverlayParameters,
      overlay,
      overlay_execute,
      overlay_params,
};
