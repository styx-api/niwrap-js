// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLSWAPDIM_FSL_METADATA: Metadata = {
    id: "7302b08bc4d86f9914f7a8203cbaf36cc9515b0c.boutiques",
    name: "fslswapdim.fsl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FslswapdimFslParameters {
    "__STYXTYPE__": "fslswapdim.fsl";
    "input_file": InputPathType;
    "axis_a": string;
    "axis_b": string;
    "axis_c": string;
    "output_file"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslswapdim.fsl": fslswapdim_fsl_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslswapdim.fsl": fslswapdim_fsl_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslswapdim_fsl(...)`.
 *
 * @interface
 */
interface FslswapdimFslOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image with swapped dimensions
     */
    output_image: OutputPathType | null;
}


function fslswapdim_fsl_params(
    input_file: InputPathType,
    axis_a: string,
    axis_b: string,
    axis_c: string,
    output_file: string | null = null,
): FslswapdimFslParameters {
    /**
     * Build parameters.
    
     * @param input_file Input image file
     * @param axis_a New X-axis in terms of the old axes; can be one of -x, x, y, -y, z, -z or RL, LR, AP, PA, SI, IS
     * @param axis_b New Y-axis in terms of the old axes; can be one of -x, x, y, -y, z, -z or RL, LR, AP, PA, SI, IS
     * @param axis_c New Z-axis in terms of the old axes; can be one of -x, x, y, -y, z, -z or RL, LR, AP, PA, SI, IS
     * @param output_file Output image file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslswapdim.fsl" as const,
        "input_file": input_file,
        "axis_a": axis_a,
        "axis_b": axis_b,
        "axis_c": axis_c,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


function fslswapdim_fsl_cargs(
    params: FslswapdimFslParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslswapdim");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["axis_a"] ?? null));
    cargs.push((params["axis_b"] ?? null));
    cargs.push((params["axis_c"] ?? null));
    if ((params["output_file"] ?? null) !== null) {
        cargs.push((params["output_file"] ?? null));
    }
    return cargs;
}


function fslswapdim_fsl_outputs(
    params: FslswapdimFslParameters,
    execution: Execution,
): FslswapdimFslOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslswapdimFslOutputs = {
        root: execution.outputFile("."),
        output_image: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function fslswapdim_fsl_execute(
    params: FslswapdimFslParameters,
    execution: Execution,
): FslswapdimFslOutputs {
    /**
     * FSLSwapdim allows swapping and flipping of dimensions of an image.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslswapdimFslOutputs`).
     */
    params = execution.params(params)
    const cargs = fslswapdim_fsl_cargs(params, execution)
    const ret = fslswapdim_fsl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslswapdim_fsl(
    input_file: InputPathType,
    axis_a: string,
    axis_b: string,
    axis_c: string,
    output_file: string | null = null,
    runner: Runner | null = null,
): FslswapdimFslOutputs {
    /**
     * FSLSwapdim allows swapping and flipping of dimensions of an image.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Input image file
     * @param axis_a New X-axis in terms of the old axes; can be one of -x, x, y, -y, z, -z or RL, LR, AP, PA, SI, IS
     * @param axis_b New Y-axis in terms of the old axes; can be one of -x, x, y, -y, z, -z or RL, LR, AP, PA, SI, IS
     * @param axis_c New Z-axis in terms of the old axes; can be one of -x, x, y, -y, z, -z or RL, LR, AP, PA, SI, IS
     * @param output_file Output image file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslswapdimFslOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLSWAPDIM_FSL_METADATA);
    const params = fslswapdim_fsl_params(input_file, axis_a, axis_b, axis_c, output_file)
    return fslswapdim_fsl_execute(params, execution);
}


export {
      FSLSWAPDIM_FSL_METADATA,
      FslswapdimFslOutputs,
      FslswapdimFslParameters,
      fslswapdim_fsl,
      fslswapdim_fsl_params,
};
