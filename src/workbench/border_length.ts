// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BORDER_LENGTH_METADATA: Metadata = {
    id: "abce828fe31936f1b7fde8ded17bed93a8109cba.boutiques",
    name: "border-length",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface BorderLengthParameters {
    "__STYXTYPE__": "border-length";
    "border": InputPathType;
    "surface": InputPathType;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
    "opt_separate_pieces": boolean;
    "opt_hide_border_name": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "border-length": border_length_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `border_length(...)`.
 *
 * @interface
 */
interface BorderLengthOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function border_length_params(
    border: InputPathType,
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    opt_separate_pieces: boolean = false,
    opt_hide_border_name: boolean = false,
): BorderLengthParameters {
    /**
     * Build parameters.
    
     * @param border the input border file
     * @param surface the surface to measure the borders on
     * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
     * @param opt_separate_pieces report lengths for multi-part borders as separate numbers
     * @param opt_hide_border_name don't print border name before each output
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "border-length" as const,
        "border": border,
        "surface": surface,
        "opt_separate_pieces": opt_separate_pieces,
        "opt_hide_border_name": opt_hide_border_name,
    };
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


function border_length_cargs(
    params: BorderLengthParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-border-length");
    cargs.push(execution.inputFile((params["border"] ?? null)));
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    if ((params["opt_separate_pieces"] ?? null)) {
        cargs.push("-separate-pieces");
    }
    if ((params["opt_hide_border_name"] ?? null)) {
        cargs.push("-hide-border-name");
    }
    return cargs;
}


function border_length_outputs(
    params: BorderLengthParameters,
    execution: Execution,
): BorderLengthOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BorderLengthOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function border_length_execute(
    params: BorderLengthParameters,
    execution: Execution,
): BorderLengthOutputs {
    /**
     * Report length of borders.
     * 
     * For each border, print its length along the surface, in mm.  If a border has multiple parts, their lengths are summed before printing, unless -separate-pieces is specified.
     * 
     * The -corrected-areas option is intended for when the length is not meaningfully measurable on individual surfaces, it is only an approximate correction for the reduction in structure of a group average surface.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BorderLengthOutputs`).
     */
    params = execution.params(params)
    const cargs = border_length_cargs(params, execution)
    const ret = border_length_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function border_length(
    border: InputPathType,
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    opt_separate_pieces: boolean = false,
    opt_hide_border_name: boolean = false,
    runner: Runner | null = null,
): BorderLengthOutputs {
    /**
     * Report length of borders.
     * 
     * For each border, print its length along the surface, in mm.  If a border has multiple parts, their lengths are summed before printing, unless -separate-pieces is specified.
     * 
     * The -corrected-areas option is intended for when the length is not meaningfully measurable on individual surfaces, it is only an approximate correction for the reduction in structure of a group average surface.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param border the input border file
     * @param surface the surface to measure the borders on
     * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
     * @param opt_separate_pieces report lengths for multi-part borders as separate numbers
     * @param opt_hide_border_name don't print border name before each output
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BorderLengthOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BORDER_LENGTH_METADATA);
    const params = border_length_params(border, surface, opt_corrected_areas_area_metric, opt_separate_pieces, opt_hide_border_name)
    return border_length_execute(params, execution);
}


export {
      BORDER_LENGTH_METADATA,
      BorderLengthOutputs,
      BorderLengthParameters,
      border_length,
      border_length_params,
};
