// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LONG_NORMALIZE_METADATA: Metadata = {
    id: "50792d90ec13a1b27d5ecb59aea01240f09a6b39.boutiques",
    name: "mri_long_normalize",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLongNormalizeParameters {
    "__STYXTYPE__": "mri_long_normalize";
    "input_vol": InputPathType;
    "base_tp_file": InputPathType;
    "output_vol": string;
    "normalization_iters"?: number | null | undefined;
    "disable_1d": boolean;
    "smooth_bias"?: number | null | undefined;
    "aseg"?: InputPathType | null | undefined;
    "debug_gvx"?: Array<number> | null | undefined;
    "debug_gx"?: Array<number> | null | undefined;
    "reading"?: Array<string> | null | undefined;
    "print_usage": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_long_normalize": mri_long_normalize_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_long_normalize": mri_long_normalize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_long_normalize(...)`.
 *
 * @interface
 */
interface MriLongNormalizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output MRI volume file.
     */
    output_file: OutputPathType;
}


function mri_long_normalize_params(
    input_vol: InputPathType,
    base_tp_file: InputPathType,
    output_vol: string,
    normalization_iters: number | null = null,
    disable_1d: boolean = false,
    smooth_bias: number | null = null,
    aseg: InputPathType | null = null,
    debug_gvx: Array<number> | null = null,
    debug_gx: Array<number> | null = null,
    reading: Array<string> | null = null,
    print_usage: boolean = false,
): MriLongNormalizeParameters {
    /**
     * Build parameters.
    
     * @param input_vol Input MRI volume file.
     * @param base_tp_file Base time point file.
     * @param output_vol Output MRI volume file.
     * @param normalization_iters Use n 3D normalization iterations (default is 2).
     * @param disable_1d Disable 1D normalization.
     * @param smooth_bias Smooth the bias field.
     * @param aseg Aseg file specification.
     * @param debug_gvx For debugging: specify Gvx, Gvy, Gvz.
     * @param debug_gx For debugging: specify Gx, Gy, Gz.
     * @param reading For reading: specify control points and bias field.
     * @param print_usage Print usage information.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_long_normalize" as const,
        "input_vol": input_vol,
        "base_tp_file": base_tp_file,
        "output_vol": output_vol,
        "disable_1d": disable_1d,
        "print_usage": print_usage,
    };
    if (normalization_iters !== null) {
        params["normalization_iters"] = normalization_iters;
    }
    if (smooth_bias !== null) {
        params["smooth_bias"] = smooth_bias;
    }
    if (aseg !== null) {
        params["aseg"] = aseg;
    }
    if (debug_gvx !== null) {
        params["debug_gvx"] = debug_gvx;
    }
    if (debug_gx !== null) {
        params["debug_gx"] = debug_gx;
    }
    if (reading !== null) {
        params["reading"] = reading;
    }
    return params;
}


function mri_long_normalize_cargs(
    params: MriLongNormalizeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_long_normalize");
    cargs.push(execution.inputFile((params["input_vol"] ?? null)));
    cargs.push(execution.inputFile((params["base_tp_file"] ?? null)));
    cargs.push((params["output_vol"] ?? null));
    if ((params["normalization_iters"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["normalization_iters"] ?? null))
        );
    }
    if ((params["disable_1d"] ?? null)) {
        cargs.push("-no1d");
    }
    if ((params["smooth_bias"] ?? null) !== null) {
        cargs.push(
            "-sigma",
            String((params["smooth_bias"] ?? null))
        );
    }
    if ((params["aseg"] ?? null) !== null) {
        cargs.push(
            "-a",
            execution.inputFile((params["aseg"] ?? null))
        );
    }
    if ((params["debug_gvx"] ?? null) !== null) {
        cargs.push(
            "-v",
            ...(params["debug_gvx"] ?? null).map(String)
        );
    }
    if ((params["debug_gx"] ?? null) !== null) {
        cargs.push(
            "-d",
            ...(params["debug_gx"] ?? null).map(String)
        );
    }
    if ((params["reading"] ?? null) !== null) {
        cargs.push(
            "-r",
            ...(params["reading"] ?? null)
        );
    }
    if ((params["print_usage"] ?? null)) {
        cargs.push("-u");
    }
    return cargs;
}


function mri_long_normalize_outputs(
    params: MriLongNormalizeParameters,
    execution: Execution,
): MriLongNormalizeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriLongNormalizeOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_vol"] ?? null)].join('')),
    };
    return ret;
}


function mri_long_normalize_execute(
    params: MriLongNormalizeParameters,
    execution: Execution,
): MriLongNormalizeOutputs {
    /**
     * Tool to normalize the white-matter of MRI volumes, optionally based on control points.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriLongNormalizeOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_long_normalize_cargs(params, execution)
    const ret = mri_long_normalize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_long_normalize(
    input_vol: InputPathType,
    base_tp_file: InputPathType,
    output_vol: string,
    normalization_iters: number | null = null,
    disable_1d: boolean = false,
    smooth_bias: number | null = null,
    aseg: InputPathType | null = null,
    debug_gvx: Array<number> | null = null,
    debug_gx: Array<number> | null = null,
    reading: Array<string> | null = null,
    print_usage: boolean = false,
    runner: Runner | null = null,
): MriLongNormalizeOutputs {
    /**
     * Tool to normalize the white-matter of MRI volumes, optionally based on control points.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_vol Input MRI volume file.
     * @param base_tp_file Base time point file.
     * @param output_vol Output MRI volume file.
     * @param normalization_iters Use n 3D normalization iterations (default is 2).
     * @param disable_1d Disable 1D normalization.
     * @param smooth_bias Smooth the bias field.
     * @param aseg Aseg file specification.
     * @param debug_gvx For debugging: specify Gvx, Gvy, Gvz.
     * @param debug_gx For debugging: specify Gx, Gy, Gz.
     * @param reading For reading: specify control points and bias field.
     * @param print_usage Print usage information.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriLongNormalizeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LONG_NORMALIZE_METADATA);
    const params = mri_long_normalize_params(input_vol, base_tp_file, output_vol, normalization_iters, disable_1d, smooth_bias, aseg, debug_gvx, debug_gx, reading, print_usage)
    return mri_long_normalize_execute(params, execution);
}


export {
      MRI_LONG_NORMALIZE_METADATA,
      MriLongNormalizeOutputs,
      MriLongNormalizeParameters,
      mri_long_normalize,
      mri_long_normalize_params,
};
