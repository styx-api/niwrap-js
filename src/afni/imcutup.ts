// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMCUTUP_METADATA: Metadata = {
    id: "530ef006832ca6e8fa5ddd054e9840a9b18311a2.boutiques",
    name: "imcutup",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImcutupParameters {
    "@type"?: "afni/imcutup";
    "prefix"?: string | null | undefined;
    "xynum": boolean;
    "yxnum": boolean;
    "xynum_format": boolean;
    "yxnum_format": boolean;
    "nx": number;
    "ny": number;
    "input_file": InputPathType;
}
type ImcutupParametersTagged = Required<Pick<ImcutupParameters, '@type'>> & ImcutupParameters;


/**
 * Output object returned when calling `ImcutupParameters(...)`.
 *
 * @interface
 */
interface ImcutupOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param nx Number of pixels along the x-dimension for the smaller images.
 * @param ny Number of pixels along the y-dimension for the smaller images.
 * @param input_file Input image filename. Must be a single 2D image.
 * @param prefix Prefix the output files with the provided string
 * @param xynum Number the output images in x-first, then y (default behavior)
 * @param yxnum Number the output images in y-first, then x
 * @param xynum_format 2D numbering in x.y format
 * @param yxnum_format 2D numbering in y.x format
 *
 * @returns Parameter dictionary
 */
function imcutup_params(
    nx: number,
    ny: number,
    input_file: InputPathType,
    prefix: string | null = null,
    xynum: boolean = false,
    yxnum: boolean = false,
    xynum_format: boolean = false,
    yxnum_format: boolean = false,
): ImcutupParametersTagged {
    const params = {
        "@type": "afni/imcutup" as const,
        "xynum": xynum,
        "yxnum": yxnum,
        "xynum_format": xynum_format,
        "yxnum_format": yxnum_format,
        "nx": nx,
        "ny": ny,
        "input_file": input_file,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imcutup_cargs(
    params: ImcutupParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imcutup");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["xynum"] ?? false)) {
        cargs.push("-xynum");
    }
    if ((params["yxnum"] ?? false)) {
        cargs.push("-yxnum");
    }
    if ((params["xynum_format"] ?? false)) {
        cargs.push("-x.ynum");
    }
    if ((params["yxnum_format"] ?? false)) {
        cargs.push("-y.xnum");
    }
    cargs.push(String((params["nx"] ?? null)));
    cargs.push(String((params["ny"] ?? null)));
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imcutup_outputs(
    params: ImcutupParameters,
    execution: Execution,
): ImcutupOutputs {
    const ret: ImcutupOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * imcutup
 *
 * Breaks up larger images into smaller image files of user-defined size.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImcutupOutputs`).
 */
function imcutup_execute(
    params: ImcutupParameters,
    runner: Runner | null = null,
): ImcutupOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMCUTUP_METADATA);
    params = execution.params(params)
    const cargs = imcutup_cargs(params, execution)
    const ret = imcutup_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * imcutup
 *
 * Breaks up larger images into smaller image files of user-defined size.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param nx Number of pixels along the x-dimension for the smaller images.
 * @param ny Number of pixels along the y-dimension for the smaller images.
 * @param input_file Input image filename. Must be a single 2D image.
 * @param prefix Prefix the output files with the provided string
 * @param xynum Number the output images in x-first, then y (default behavior)
 * @param yxnum Number the output images in y-first, then x
 * @param xynum_format 2D numbering in x.y format
 * @param yxnum_format 2D numbering in y.x format
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImcutupOutputs`).
 */
function imcutup(
    nx: number,
    ny: number,
    input_file: InputPathType,
    prefix: string | null = null,
    xynum: boolean = false,
    yxnum: boolean = false,
    xynum_format: boolean = false,
    yxnum_format: boolean = false,
    runner: Runner | null = null,
): ImcutupOutputs {
    const params = imcutup_params(nx, ny, input_file, prefix, xynum, yxnum, xynum_format, yxnum_format)
    return imcutup_execute(params, runner);
}


export {
      IMCUTUP_METADATA,
      ImcutupOutputs,
      imcutup,
      imcutup_execute,
      imcutup_params,
};
