// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRCOLOUR_METADATA: Metadata = {
    id: "e6c45c8266fa3fbd176831198e96ef4481f849fa.boutiques",
    name: "mrcolour",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrcolourConfigParameters {
    "@type": "mrtrix.mrcolour.config";
    "key": string;
    "value": string;
}


interface MrcolourParameters {
    "@type": "mrtrix.mrcolour";
    "upper"?: number | null | undefined;
    "lower"?: number | null | undefined;
    "colour"?: Array<number> | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrcolourConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "map": string;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.mrcolour": mrcolour_cargs,
        "mrtrix.mrcolour.config": mrcolour_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.mrcolour": mrcolour_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrcolour_config_params(
    key: string,
    value: string,
): MrcolourConfigParameters {
    const params = {
        "@type": "mrtrix.mrcolour.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrcolour_config_cargs(
    params: MrcolourConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mrcolour(...)`.
 *
 * @interface
 */
interface MrcolourOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input image
 * @param map the colourmap to apply; choices are: gray,hot,cool,jet,inferno,viridis,pet,colour,rgb
 * @param output the output image
 * @param upper manually set the upper intensity of the colour mapping
 * @param lower manually set the lower intensity of the colour mapping
 * @param colour set the target colour for use of the 'colour' map (three comma-separated floating-point values)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrcolour_params(
    input: InputPathType,
    map: string,
    output: string,
    upper: number | null = null,
    lower: number | null = null,
    colour: Array<number> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrcolourConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrcolourParameters {
    const params = {
        "@type": "mrtrix.mrcolour" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "map": map,
        "output": output,
    };
    if (upper !== null) {
        params["upper"] = upper;
    }
    if (lower !== null) {
        params["lower"] = lower;
    }
    if (colour !== null) {
        params["colour"] = colour;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrcolour_cargs(
    params: MrcolourParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrcolour");
    if ((params["upper"] ?? null) !== null) {
        cargs.push(
            "-upper",
            String((params["upper"] ?? null))
        );
    }
    if ((params["lower"] ?? null) !== null) {
        cargs.push(
            "-lower",
            String((params["lower"] ?? null))
        );
    }
    if ((params["colour"] ?? null) !== null) {
        cargs.push(
            "-colour",
            (params["colour"] ?? null).map(String).join(",")
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["map"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrcolour_outputs(
    params: MrcolourParameters,
    execution: Execution,
): MrcolourOutputs {
    const ret: MrcolourOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Apply a colour map to an image.
 *
 * Under typical usage, this command will receive as input ad 3D greyscale image, and output a 4D image with 3 volumes corresponding to red-green-blue components; other use cases are possible, and are described in more detail below.
 *
 * By default, the command will automatically determine the maximum and minimum intensities of the input image, and use that information to set the upper and lower bounds of the applied colourmap. This behaviour can be overridden by manually specifying these bounds using the -upper and -lower options respectively.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrcolourOutputs`).
 */
function mrcolour_execute(
    params: MrcolourParameters,
    execution: Execution,
): MrcolourOutputs {
    params = execution.params(params)
    const cargs = mrcolour_cargs(params, execution)
    const ret = mrcolour_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Apply a colour map to an image.
 *
 * Under typical usage, this command will receive as input ad 3D greyscale image, and output a 4D image with 3 volumes corresponding to red-green-blue components; other use cases are possible, and are described in more detail below.
 *
 * By default, the command will automatically determine the maximum and minimum intensities of the input image, and use that information to set the upper and lower bounds of the applied colourmap. This behaviour can be overridden by manually specifying these bounds using the -upper and -lower options respectively.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input image
 * @param map the colourmap to apply; choices are: gray,hot,cool,jet,inferno,viridis,pet,colour,rgb
 * @param output the output image
 * @param upper manually set the upper intensity of the colour mapping
 * @param lower manually set the lower intensity of the colour mapping
 * @param colour set the target colour for use of the 'colour' map (three comma-separated floating-point values)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrcolourOutputs`).
 */
function mrcolour(
    input: InputPathType,
    map: string,
    output: string,
    upper: number | null = null,
    lower: number | null = null,
    colour: Array<number> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrcolourConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrcolourOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRCOLOUR_METADATA);
    const params = mrcolour_params(input, map, output, upper, lower, colour, info, quiet, debug, force, nthreads, config, help, version)
    return mrcolour_execute(params, execution);
}


export {
      MRCOLOUR_METADATA,
      MrcolourConfigParameters,
      MrcolourOutputs,
      MrcolourParameters,
      mrcolour,
      mrcolour_cargs,
      mrcolour_config_cargs,
      mrcolour_config_params,
      mrcolour_execute,
      mrcolour_outputs,
      mrcolour_params,
};
