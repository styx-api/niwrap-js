// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLOW_SURF_CLUSTSIM_PY_METADATA: Metadata = {
    id: "4536849b259e21d078656a34c845d549eaef3333.boutiques",
    name: "slow_surf_clustsim.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SlowSurfClustsimPyParameters {
    "@type"?: "afni/slow_surf_clustsim.py";
    "on_surface"?: string | null | undefined;
    "save_script"?: string | null | undefined;
    "print_script": boolean;
    "uvar"?: Array<string> | null | undefined;
    "verbosity"?: number | null | undefined;
    "help": boolean;
    "hist": boolean;
    "show_default_cvars": boolean;
    "show_default_uvars": boolean;
    "show_valid_opts": boolean;
    "version": boolean;
}
type SlowSurfClustsimPyParametersTagged = Required<Pick<SlowSurfClustsimPyParameters, '@type'>> & SlowSurfClustsimPyParameters;


/**
 * Output object returned when calling `SlowSurfClustsimPyParameters(...)`.
 *
 * @interface
 */
interface SlowSurfClustsimPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param on_surface Start from noise on the surface (so no volume data is involved)
 * @param save_script Save script to given file
 * @param print_script Print script to terminal
 * @param uvar Set the user variable (use -show_default_uvars to see user vars). Example usage: -uvar spec_file sb23_lh_141_std.spec -uvar surf_vol sb23_SurfVol_aligned+orig
 * @param verbosity Set the verbosity level
 * @param help Show this help
 * @param hist Show module history
 * @param show_default_cvars List default control variables
 * @param show_default_uvars List default user variables
 * @param show_valid_opts List valid options
 * @param version Show current version
 *
 * @returns Parameter dictionary
 */
function slow_surf_clustsim_py_params(
    on_surface: string | null = null,
    save_script: string | null = null,
    print_script: boolean = false,
    uvar: Array<string> | null = null,
    verbosity: number | null = null,
    help: boolean = false,
    hist: boolean = false,
    show_default_cvars: boolean = false,
    show_default_uvars: boolean = false,
    show_valid_opts: boolean = false,
    version: boolean = false,
): SlowSurfClustsimPyParametersTagged {
    const params = {
        "@type": "afni/slow_surf_clustsim.py" as const,
        "print_script": print_script,
        "help": help,
        "hist": hist,
        "show_default_cvars": show_default_cvars,
        "show_default_uvars": show_default_uvars,
        "show_valid_opts": show_valid_opts,
        "version": version,
    };
    if (on_surface !== null) {
        params["on_surface"] = on_surface;
    }
    if (save_script !== null) {
        params["save_script"] = save_script;
    }
    if (uvar !== null) {
        params["uvar"] = uvar;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function slow_surf_clustsim_py_cargs(
    params: SlowSurfClustsimPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("slow_surf_clustsim.py");
    if ((params["on_surface"] ?? null) !== null) {
        cargs.push(
            "-on_surface",
            (params["on_surface"] ?? null)
        );
    }
    if ((params["save_script"] ?? null) !== null) {
        cargs.push(
            "-save_script",
            (params["save_script"] ?? null)
        );
    }
    if ((params["print_script"] ?? false)) {
        cargs.push("-print_script");
    }
    if ((params["uvar"] ?? null) !== null) {
        cargs.push(
            "-uvar",
            ...(params["uvar"] ?? null)
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["hist"] ?? false)) {
        cargs.push("-hist");
    }
    if ((params["show_default_cvars"] ?? false)) {
        cargs.push("-show_default_cvars");
    }
    if ((params["show_default_uvars"] ?? false)) {
        cargs.push("-show_default_uvars");
    }
    if ((params["show_valid_opts"] ?? false)) {
        cargs.push("-show_valid_opts");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-ver");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function slow_surf_clustsim_py_outputs(
    params: SlowSurfClustsimPyParameters,
    execution: Execution,
): SlowSurfClustsimPyOutputs {
    const ret: SlowSurfClustsimPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * slow_surf_clustsim.py
 *
 * Generate a tcsh script to run clustsim on surface.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlowSurfClustsimPyOutputs`).
 */
function slow_surf_clustsim_py_execute(
    params: SlowSurfClustsimPyParameters,
    runner: Runner | null = null,
): SlowSurfClustsimPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLOW_SURF_CLUSTSIM_PY_METADATA);
    params = execution.params(params)
    const cargs = slow_surf_clustsim_py_cargs(params, execution)
    const ret = slow_surf_clustsim_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * slow_surf_clustsim.py
 *
 * Generate a tcsh script to run clustsim on surface.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param on_surface Start from noise on the surface (so no volume data is involved)
 * @param save_script Save script to given file
 * @param print_script Print script to terminal
 * @param uvar Set the user variable (use -show_default_uvars to see user vars). Example usage: -uvar spec_file sb23_lh_141_std.spec -uvar surf_vol sb23_SurfVol_aligned+orig
 * @param verbosity Set the verbosity level
 * @param help Show this help
 * @param hist Show module history
 * @param show_default_cvars List default control variables
 * @param show_default_uvars List default user variables
 * @param show_valid_opts List valid options
 * @param version Show current version
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlowSurfClustsimPyOutputs`).
 */
function slow_surf_clustsim_py(
    on_surface: string | null = null,
    save_script: string | null = null,
    print_script: boolean = false,
    uvar: Array<string> | null = null,
    verbosity: number | null = null,
    help: boolean = false,
    hist: boolean = false,
    show_default_cvars: boolean = false,
    show_default_uvars: boolean = false,
    show_valid_opts: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): SlowSurfClustsimPyOutputs {
    const params = slow_surf_clustsim_py_params(on_surface, save_script, print_script, uvar, verbosity, help, hist, show_default_cvars, show_default_uvars, show_valid_opts, version)
    return slow_surf_clustsim_py_execute(params, runner);
}


export {
      SLOW_SURF_CLUSTSIM_PY_METADATA,
      SlowSurfClustsimPyOutputs,
      slow_surf_clustsim_py,
      slow_surf_clustsim_py_execute,
      slow_surf_clustsim_py_params,
};
