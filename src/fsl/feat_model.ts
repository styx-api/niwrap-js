// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FEAT_MODEL_METADATA: Metadata = {
    id: "e1b97eac6407023b70ba9603b867c2c4df4235a1.boutiques",
    name: "feat_model",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FeatModelParameters {
    "__STYXTYPE__": "feat_model";
    "design_name_root": string;
    "confound_matrix"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "feat_model": feat_model_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `feat_model(...)`.
 *
 * @interface
 */
interface FeatModelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function feat_model_params(
    design_name_root: string,
    confound_matrix: InputPathType | null = null,
): FeatModelParameters {
    /**
     * Build parameters.
    
     * @param design_name_root Design name root
     * @param confound_matrix Confound matrix text file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "feat_model" as const,
        "design_name_root": design_name_root,
    };
    if (confound_matrix !== null) {
        params["confound_matrix"] = confound_matrix;
    }
    return params;
}


function feat_model_cargs(
    params: FeatModelParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("feat_model");
    cargs.push((params["design_name_root"] ?? null));
    if ((params["confound_matrix"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["confound_matrix"] ?? null)));
    }
    return cargs;
}


function feat_model_outputs(
    params: FeatModelParameters,
    execution: Execution,
): FeatModelOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FeatModelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function feat_model_execute(
    params: FeatModelParameters,
    execution: Execution,
): FeatModelOutputs {
    /**
     * Generate design matrices for use by FEAT.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FeatModelOutputs`).
     */
    params = execution.params(params)
    const cargs = feat_model_cargs(params, execution)
    const ret = feat_model_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function feat_model(
    design_name_root: string,
    confound_matrix: InputPathType | null = null,
    runner: Runner | null = null,
): FeatModelOutputs {
    /**
     * Generate design matrices for use by FEAT.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param design_name_root Design name root
     * @param confound_matrix Confound matrix text file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FeatModelOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FEAT_MODEL_METADATA);
    const params = feat_model_params(design_name_root, confound_matrix)
    return feat_model_execute(params, execution);
}


export {
      FEAT_MODEL_METADATA,
      FeatModelOutputs,
      FeatModelParameters,
      feat_model,
      feat_model_params,
};
