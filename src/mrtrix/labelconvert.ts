// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABELCONVERT_METADATA: Metadata = {
    id: "5aa09ff9ec4b21693b7d07b8329c2bc641669b7c.boutiques",
    name: "labelconvert",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface LabelconvertConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type LabelconvertConfigParametersTagged = Required<Pick<LabelconvertConfigParameters, '@type'>> & LabelconvertConfigParameters;


interface LabelconvertParameters {
    "@type"?: "mrtrix/labelconvert";
    "spine"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<LabelconvertConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "path_in": InputPathType;
    "lut_in": InputPathType;
    "lut_out": InputPathType;
    "image_out": string;
}
type LabelconvertParametersTagged = Required<Pick<LabelconvertParameters, '@type'>> & LabelconvertParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function labelconvert_config_params(
    key: string,
    value: string,
): LabelconvertConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function labelconvert_config_cargs(
    params: LabelconvertConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `LabelconvertParameters(...)`.
 *
 * @interface
 */
interface LabelconvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image
     */
    image_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param path_in the input image
 * @param lut_in the connectome lookup table corresponding to the input image
 * @param lut_out the target connectome lookup table for the output image
 * @param image_out the output image
 * @param spine provide a manually-defined segmentation of the base of the spine where the streamlines terminate, so that this can become a node in the connection matrix.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function labelconvert_params(
    path_in: InputPathType,
    lut_in: InputPathType,
    lut_out: InputPathType,
    image_out: string,
    spine: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<LabelconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): LabelconvertParametersTagged {
    const params = {
        "@type": "mrtrix/labelconvert" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "path_in": path_in,
        "lut_in": lut_in,
        "lut_out": lut_out,
        "image_out": image_out,
    };
    if (spine !== null) {
        params["spine"] = spine;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function labelconvert_cargs(
    params: LabelconvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("labelconvert");
    if ((params["spine"] ?? null) !== null) {
        cargs.push(
            "-spine",
            execution.inputFile((params["spine"] ?? null))
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => labelconvert_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["path_in"] ?? null)));
    cargs.push(execution.inputFile((params["lut_in"] ?? null)));
    cargs.push(execution.inputFile((params["lut_out"] ?? null)));
    cargs.push((params["image_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function labelconvert_outputs(
    params: LabelconvertParameters,
    execution: Execution,
): LabelconvertOutputs {
    const ret: LabelconvertOutputs = {
        root: execution.outputFile("."),
        image_out: execution.outputFile([(params["image_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * labelconvert
 *
 * Convert a connectome node image from one lookup table to another.
 *
 * Typical usage is to convert a parcellation image provided by some other software, based on the lookup table provided by that software, to conform to a new lookup table, particularly one where the node indices increment from 1, in preparation for connectome construction; examples of such target lookup table files are provided in share//mrtrix3//labelconvert//, but can be created by the user to provide the desired node set // ordering // colours.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelconvertOutputs`).
 */
function labelconvert_execute(
    params: LabelconvertParameters,
    runner: Runner | null = null,
): LabelconvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABELCONVERT_METADATA);
    params = execution.params(params)
    const cargs = labelconvert_cargs(params, execution)
    const ret = labelconvert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * labelconvert
 *
 * Convert a connectome node image from one lookup table to another.
 *
 * Typical usage is to convert a parcellation image provided by some other software, based on the lookup table provided by that software, to conform to a new lookup table, particularly one where the node indices increment from 1, in preparation for connectome construction; examples of such target lookup table files are provided in share//mrtrix3//labelconvert//, but can be created by the user to provide the desired node set // ordering // colours.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param path_in the input image
 * @param lut_in the connectome lookup table corresponding to the input image
 * @param lut_out the target connectome lookup table for the output image
 * @param image_out the output image
 * @param spine provide a manually-defined segmentation of the base of the spine where the streamlines terminate, so that this can become a node in the connection matrix.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelconvertOutputs`).
 */
function labelconvert(
    path_in: InputPathType,
    lut_in: InputPathType,
    lut_out: InputPathType,
    image_out: string,
    spine: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<LabelconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): LabelconvertOutputs {
    const params = labelconvert_params(path_in, lut_in, lut_out, image_out, spine, info, quiet, debug, force, nthreads, config, help, version)
    return labelconvert_execute(params, runner);
}


export {
      LABELCONVERT_METADATA,
      LabelconvertOutputs,
      labelconvert,
      labelconvert_config_params,
      labelconvert_execute,
      labelconvert_params,
};
