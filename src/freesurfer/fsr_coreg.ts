// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSR_COREG_METADATA: Metadata = {
    id: "b0e85054bb91348e85b4424dfeba924eb15f6a43.boutiques",
    name: "fsr-coreg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsrCoregParameters {
    "__STYXTYPE__": "fsr-coreg";
    "import_dir": string;
    "reference_mode": string;
    "num_threads"?: number | null | undefined;
    "force_update": boolean;
    "output_dir"?: string | null | undefined;
    "expert_options"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fsr-coreg": fsr_coreg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fsr-coreg": fsr_coreg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsr_coreg(...)`.
 *
 * @interface
 */
interface FsrCoregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Volume produced for each mode in alignment with the reference mode
     */
    aligned_volume: OutputPathType | null;
    /**
     * Registration transform file for mode to reference mode
     */
    registration_transform: OutputPathType | null;
}


function fsr_coreg_params(
    import_dir: string,
    reference_mode: string,
    num_threads: number | null = null,
    force_update: boolean = false,
    output_dir: string | null = null,
    expert_options: InputPathType | null = null,
): FsrCoregParameters {
    /**
     * Build parameters.
    
     * @param import_dir Data directory created by fsr-import
     * @param reference_mode Mode to use as a reference (all modes register to this mode)
     * @param num_threads Number of threads to use
     * @param force_update Force update of files regardless of time stamp
     * @param output_dir Set the output directory, default is importdir
     * @param expert_options Expert options file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fsr-coreg" as const,
        "import_dir": import_dir,
        "reference_mode": reference_mode,
        "force_update": force_update,
    };
    if (num_threads !== null) {
        params["num_threads"] = num_threads;
    }
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (expert_options !== null) {
        params["expert_options"] = expert_options;
    }
    return params;
}


function fsr_coreg_cargs(
    params: FsrCoregParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fsr-coreg");
    cargs.push(
        "--i",
        (params["import_dir"] ?? null)
    );
    cargs.push(
        "--ref",
        (params["reference_mode"] ?? null)
    );
    if ((params["num_threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["num_threads"] ?? null))
        );
    }
    if ((params["force_update"] ?? null)) {
        cargs.push("--force-update");
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["expert_options"] ?? null) !== null) {
        cargs.push(
            "--expert",
            execution.inputFile((params["expert_options"] ?? null))
        );
    }
    return cargs;
}


function fsr_coreg_outputs(
    params: FsrCoregParameters,
    execution: Execution,
): FsrCoregOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FsrCoregOutputs = {
        root: execution.outputFile("."),
        aligned_volume: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/mode.mgz"].join('')) : null,
        registration_transform: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/mode.reg-to-ref.lta"].join('')) : null,
    };
    return ret;
}


function fsr_coreg_execute(
    params: FsrCoregParameters,
    execution: Execution,
): FsrCoregOutputs {
    /**
     * Co-registers input data in preparation for FreeSurfer analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FsrCoregOutputs`).
     */
    params = execution.params(params)
    const cargs = fsr_coreg_cargs(params, execution)
    const ret = fsr_coreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fsr_coreg(
    import_dir: string,
    reference_mode: string,
    num_threads: number | null = null,
    force_update: boolean = false,
    output_dir: string | null = null,
    expert_options: InputPathType | null = null,
    runner: Runner | null = null,
): FsrCoregOutputs {
    /**
     * Co-registers input data in preparation for FreeSurfer analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param import_dir Data directory created by fsr-import
     * @param reference_mode Mode to use as a reference (all modes register to this mode)
     * @param num_threads Number of threads to use
     * @param force_update Force update of files regardless of time stamp
     * @param output_dir Set the output directory, default is importdir
     * @param expert_options Expert options file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FsrCoregOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSR_COREG_METADATA);
    const params = fsr_coreg_params(import_dir, reference_mode, num_threads, force_update, output_dir, expert_options)
    return fsr_coreg_execute(params, execution);
}


export {
      FSR_COREG_METADATA,
      FsrCoregOutputs,
      FsrCoregParameters,
      fsr_coreg,
      fsr_coreg_params,
};
