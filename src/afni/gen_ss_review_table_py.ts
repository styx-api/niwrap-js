// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GEN_SS_REVIEW_TABLE_PY_METADATA: Metadata = {
    id: "6cb69af99777b33cd9b767e710e49b813e80d5c6.boutiques",
    name: "gen_ss_review_table.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface GenSsReviewTablePyParameters {
    "@type": "afni.gen_ss_review_table.py";
    "infiles": Array<InputPathType>;
    "write_table"?: InputPathType | null | undefined;
    "write_outliers"?: InputPathType | null | undefined;
    "overwrite": boolean;
    "empty_is_outlier": boolean;
    "outlier_sep"?: string | null | undefined;
    "separator"?: string | null | undefined;
    "showlabs": boolean;
    "show_infiles": boolean;
    "show_keepers": boolean;
    "report_outliers"?: Array<string> | null | undefined;
    "report_outliers_fill_style"?: string | null | undefined;
    "show_missing": boolean;
    "verbosity"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.gen_ss_review_table.py": gen_ss_review_table_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.gen_ss_review_table.py": gen_ss_review_table_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gen_ss_review_table_py(...)`.
 *
 * @interface
 */
interface GenSsReviewTablePyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Final table output file
     */
    output_table: OutputPathType | null;
    /**
     * Outliers table output file
     */
    output_outliers: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infiles Input ss_review_basic output text files to process
 * @param write_table Write final table to the given file
 * @param write_outliers Write outlier table to the given file
 * @param overwrite Overwrite the output -write_table, if it exists
 * @param empty_is_outlier Treat empty tests as outliers
 * @param outlier_sep Use SEP for the outlier table separator
 * @param separator Use SEP for the label/vals separator (default = ':')
 * @param showlabs Display counts of all labels found, with parents
 * @param show_infiles Include input files in reviewtable result
 * @param show_keepers Show a table of subjects kept rather than dropped
 * @param report_outliers Report outliers where the comparison holds
 * @param report_outliers_fill_style How to fill non-outliers in the table
 * @param show_missing Display all missing keys
 * @param verbosity Verbosity level
 *
 * @returns Parameter dictionary
 */
function gen_ss_review_table_py_params(
    infiles: Array<InputPathType>,
    write_table: InputPathType | null = null,
    write_outliers: InputPathType | null = null,
    overwrite: boolean = false,
    empty_is_outlier: boolean = false,
    outlier_sep: string | null = null,
    separator: string | null = null,
    showlabs: boolean = false,
    show_infiles: boolean = false,
    show_keepers: boolean = false,
    report_outliers: Array<string> | null = null,
    report_outliers_fill_style: string | null = null,
    show_missing: boolean = false,
    verbosity: number | null = null,
): GenSsReviewTablePyParameters {
    const params = {
        "@type": "afni.gen_ss_review_table.py" as const,
        "infiles": infiles,
        "overwrite": overwrite,
        "empty_is_outlier": empty_is_outlier,
        "showlabs": showlabs,
        "show_infiles": show_infiles,
        "show_keepers": show_keepers,
        "show_missing": show_missing,
    };
    if (write_table !== null) {
        params["write_table"] = write_table;
    }
    if (write_outliers !== null) {
        params["write_outliers"] = write_outliers;
    }
    if (outlier_sep !== null) {
        params["outlier_sep"] = outlier_sep;
    }
    if (separator !== null) {
        params["separator"] = separator;
    }
    if (report_outliers !== null) {
        params["report_outliers"] = report_outliers;
    }
    if (report_outliers_fill_style !== null) {
        params["report_outliers_fill_style"] = report_outliers_fill_style;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gen_ss_review_table_py_cargs(
    params: GenSsReviewTablePyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gen_ss_review_table.py");
    cargs.push(...(params["infiles"] ?? null).map(f => execution.inputFile(f)));
    if ((params["write_table"] ?? null) !== null) {
        cargs.push(
            "-write_table",
            execution.inputFile((params["write_table"] ?? null))
        );
    }
    if ((params["write_outliers"] ?? null) !== null) {
        cargs.push(
            "-write_outliers",
            execution.inputFile((params["write_outliers"] ?? null))
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    if ((params["empty_is_outlier"] ?? null)) {
        cargs.push("-empty_is_outlier");
    }
    if ((params["outlier_sep"] ?? null) !== null) {
        cargs.push(
            "-outlier_sep",
            (params["outlier_sep"] ?? null)
        );
    }
    if ((params["separator"] ?? null) !== null) {
        cargs.push(
            "-separator",
            (params["separator"] ?? null)
        );
    }
    if ((params["showlabs"] ?? null)) {
        cargs.push("-showlabs");
    }
    if ((params["show_infiles"] ?? null)) {
        cargs.push("-show_infiles");
    }
    if ((params["show_keepers"] ?? null)) {
        cargs.push("-show_keepers");
    }
    if ((params["report_outliers"] ?? null) !== null) {
        cargs.push(
            "-report_outliers",
            ...(params["report_outliers"] ?? null)
        );
    }
    if ((params["report_outliers_fill_style"] ?? null) !== null) {
        cargs.push(
            "-report_outliers_fill_style",
            (params["report_outliers_fill_style"] ?? null)
        );
    }
    if ((params["show_missing"] ?? null)) {
        cargs.push("-show_missing");
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gen_ss_review_table_py_outputs(
    params: GenSsReviewTablePyParameters,
    execution: Execution,
): GenSsReviewTablePyOutputs {
    const ret: GenSsReviewTablePyOutputs = {
        root: execution.outputFile("."),
        output_table: ((params["write_table"] ?? null) !== null) ? execution.outputFile([path.basename((params["write_table"] ?? null))].join('')) : null,
        output_outliers: ((params["write_outliers"] ?? null) !== null) ? execution.outputFile([path.basename((params["write_outliers"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * Generate a table from ss_review_basic output files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `GenSsReviewTablePyOutputs`).
 */
function gen_ss_review_table_py_execute(
    params: GenSsReviewTablePyParameters,
    execution: Execution,
): GenSsReviewTablePyOutputs {
    params = execution.params(params)
    const cargs = gen_ss_review_table_py_cargs(params, execution)
    const ret = gen_ss_review_table_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Generate a table from ss_review_basic output files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infiles Input ss_review_basic output text files to process
 * @param write_table Write final table to the given file
 * @param write_outliers Write outlier table to the given file
 * @param overwrite Overwrite the output -write_table, if it exists
 * @param empty_is_outlier Treat empty tests as outliers
 * @param outlier_sep Use SEP for the outlier table separator
 * @param separator Use SEP for the label/vals separator (default = ':')
 * @param showlabs Display counts of all labels found, with parents
 * @param show_infiles Include input files in reviewtable result
 * @param show_keepers Show a table of subjects kept rather than dropped
 * @param report_outliers Report outliers where the comparison holds
 * @param report_outliers_fill_style How to fill non-outliers in the table
 * @param show_missing Display all missing keys
 * @param verbosity Verbosity level
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GenSsReviewTablePyOutputs`).
 */
function gen_ss_review_table_py(
    infiles: Array<InputPathType>,
    write_table: InputPathType | null = null,
    write_outliers: InputPathType | null = null,
    overwrite: boolean = false,
    empty_is_outlier: boolean = false,
    outlier_sep: string | null = null,
    separator: string | null = null,
    showlabs: boolean = false,
    show_infiles: boolean = false,
    show_keepers: boolean = false,
    report_outliers: Array<string> | null = null,
    report_outliers_fill_style: string | null = null,
    show_missing: boolean = false,
    verbosity: number | null = null,
    runner: Runner | null = null,
): GenSsReviewTablePyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GEN_SS_REVIEW_TABLE_PY_METADATA);
    const params = gen_ss_review_table_py_params(infiles, write_table, write_outliers, overwrite, empty_is_outlier, outlier_sep, separator, showlabs, show_infiles, show_keepers, report_outliers, report_outliers_fill_style, show_missing, verbosity)
    return gen_ss_review_table_py_execute(params, execution);
}


export {
      GEN_SS_REVIEW_TABLE_PY_METADATA,
      GenSsReviewTablePyOutputs,
      GenSsReviewTablePyParameters,
      gen_ss_review_table_py,
      gen_ss_review_table_py_cargs,
      gen_ss_review_table_py_execute,
      gen_ss_review_table_py_outputs,
      gen_ss_review_table_py_params,
};
