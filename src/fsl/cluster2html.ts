// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CLUSTER2HTML_METADATA: Metadata = {
    id: "ecbc01ebfb590a7f01ad46ceb6051dd24f95ff27.boutiques",
    name: "cluster2html",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Cluster2htmlParameters {
    "__STYXTYPE__": "cluster2html";
    "featdir": string;
    "inroot": string;
    "std_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cluster2html": cluster2html_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cluster2html(...)`.
 *
 * @interface
 */
interface Cluster2htmlOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function cluster2html_params(
    featdir: string,
    inroot: string,
    std_flag: boolean = false,
): Cluster2htmlParameters {
    /**
     * Build parameters.
    
     * @param featdir Directory containing the FEAT analysis results
     * @param inroot Root name for cluster files (should not contain the _std extension)
     * @param std_flag Indicate that the input files contain the _std extension
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cluster2html" as const,
        "featdir": featdir,
        "inroot": inroot,
        "std_flag": std_flag,
    };
    return params;
}


function cluster2html_cargs(
    params: Cluster2htmlParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("cluster2html");
    cargs.push((params["featdir"] ?? null));
    cargs.push((params["inroot"] ?? null));
    if ((params["std_flag"] ?? null)) {
        cargs.push("-std");
    }
    return cargs;
}


function cluster2html_outputs(
    params: Cluster2htmlParameters,
    execution: Execution,
): Cluster2htmlOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Cluster2htmlOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function cluster2html_execute(
    params: Cluster2htmlParameters,
    execution: Execution,
): Cluster2htmlOutputs {
    /**
     * Generates an HTML report from cluster-based FEAT analysis.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Cluster2htmlOutputs`).
     */
    params = execution.params(params)
    const cargs = cluster2html_cargs(params, execution)
    const ret = cluster2html_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cluster2html(
    featdir: string,
    inroot: string,
    std_flag: boolean = false,
    runner: Runner | null = null,
): Cluster2htmlOutputs {
    /**
     * Generates an HTML report from cluster-based FEAT analysis.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param featdir Directory containing the FEAT analysis results
     * @param inroot Root name for cluster files (should not contain the _std extension)
     * @param std_flag Indicate that the input files contain the _std extension
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Cluster2htmlOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CLUSTER2HTML_METADATA);
    const params = cluster2html_params(featdir, inroot, std_flag)
    return cluster2html_execute(params, execution);
}


export {
      CLUSTER2HTML_METADATA,
      Cluster2htmlOutputs,
      Cluster2htmlParameters,
      cluster2html,
      cluster2html_params,
};
