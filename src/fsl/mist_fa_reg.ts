// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MIST_FA_REG_METADATA: Metadata = {
    id: "81b356e548eec8c1d65deaa2ae9208efb4fd58ff.boutiques",
    name: "mist_FA_reg",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MistFaRegParameters {
    "__STYXTYPE__": "mist_FA_reg";
    "fa_volume": InputPathType;
    "s0_volume": InputPathType;
    "reference_t1_volume": InputPathType;
    "output_filename": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mist_FA_reg": mist_fa_reg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mist_FA_reg": mist_fa_reg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mist_fa_reg(...)`.
 *
 * @interface
 */
interface MistFaRegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file for the registered volume
     */
    output_file: OutputPathType;
}


function mist_fa_reg_params(
    fa_volume: InputPathType,
    s0_volume: InputPathType,
    reference_t1_volume: InputPathType,
    output_filename: string,
): MistFaRegParameters {
    /**
     * Build parameters.
    
     * @param fa_volume The FA volume to be registered.
     * @param s0_volume The S0 volume corresponding to the FA volume.
     * @param reference_t1_volume The reference T1 volume to register against.
     * @param output_filename The output filename for the registered volume.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mist_FA_reg" as const,
        "fa_volume": fa_volume,
        "s0_volume": s0_volume,
        "reference_t1_volume": reference_t1_volume,
        "output_filename": output_filename,
    };
    return params;
}


function mist_fa_reg_cargs(
    params: MistFaRegParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mist_FA_reg");
    cargs.push(execution.inputFile((params["fa_volume"] ?? null)));
    cargs.push(execution.inputFile((params["s0_volume"] ?? null)));
    cargs.push(execution.inputFile((params["reference_t1_volume"] ?? null)));
    cargs.push((params["output_filename"] ?? null));
    return cargs;
}


function mist_fa_reg_outputs(
    params: MistFaRegParameters,
    execution: Execution,
): MistFaRegOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MistFaRegOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_filename"] ?? null)].join('')),
    };
    return ret;
}


function mist_fa_reg_execute(
    params: MistFaRegParameters,
    execution: Execution,
): MistFaRegOutputs {
    /**
     * Tool for registering FA volumes to a reference T1 volume.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MistFaRegOutputs`).
     */
    params = execution.params(params)
    const cargs = mist_fa_reg_cargs(params, execution)
    const ret = mist_fa_reg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mist_fa_reg(
    fa_volume: InputPathType,
    s0_volume: InputPathType,
    reference_t1_volume: InputPathType,
    output_filename: string,
    runner: Runner | null = null,
): MistFaRegOutputs {
    /**
     * Tool for registering FA volumes to a reference T1 volume.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param fa_volume The FA volume to be registered.
     * @param s0_volume The S0 volume corresponding to the FA volume.
     * @param reference_t1_volume The reference T1 volume to register against.
     * @param output_filename The output filename for the registered volume.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MistFaRegOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MIST_FA_REG_METADATA);
    const params = mist_fa_reg_params(fa_volume, s0_volume, reference_t1_volume, output_filename)
    return mist_fa_reg_execute(params, execution);
}


export {
      MIST_FA_REG_METADATA,
      MistFaRegOutputs,
      MistFaRegParameters,
      mist_fa_reg,
      mist_fa_reg_params,
};
