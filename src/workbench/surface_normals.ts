// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_NORMALS_METADATA: Metadata = {
    id: "a04e63a81424932a907bb5d57ff1d5439a7a29aa.boutiques",
    name: "surface-normals",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceNormalsParameters {
    "@type"?: "workbench/surface-normals";
    "surface": InputPathType;
    "metric_out": string;
}
type SurfaceNormalsParametersTagged = Required<Pick<SurfaceNormalsParameters, '@type'>> & SurfaceNormalsParameters;


/**
 * Output object returned when calling `SurfaceNormalsParameters(...)`.
 *
 * @interface
 */
interface SurfaceNormalsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the normal vectors
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to output the normals of
 * @param metric_out the normal vectors
 *
 * @returns Parameter dictionary
 */
function surface_normals_params(
    surface: InputPathType,
    metric_out: string,
): SurfaceNormalsParametersTagged {
    const params = {
        "@type": "workbench/surface-normals" as const,
        "surface": surface,
        "metric_out": metric_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_normals_cargs(
    params: SurfaceNormalsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-normals");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_normals_outputs(
    params: SurfaceNormalsParameters,
    execution: Execution,
): SurfaceNormalsOutputs {
    const ret: SurfaceNormalsOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-normals
 *
 * Output vertex normals as metric file.
 *
 * Computes the normal vectors of the surface file, and outputs them as a 3 column metric file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceNormalsOutputs`).
 */
function surface_normals_execute(
    params: SurfaceNormalsParameters,
    runner: Runner | null = null,
): SurfaceNormalsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_NORMALS_METADATA);
    params = execution.params(params)
    const cargs = surface_normals_cargs(params, execution)
    const ret = surface_normals_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-normals
 *
 * Output vertex normals as metric file.
 *
 * Computes the normal vectors of the surface file, and outputs them as a 3 column metric file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to output the normals of
 * @param metric_out the normal vectors
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceNormalsOutputs`).
 */
function surface_normals(
    surface: InputPathType,
    metric_out: string,
    runner: Runner | null = null,
): SurfaceNormalsOutputs {
    const params = surface_normals_params(surface, metric_out)
    return surface_normals_execute(params, runner);
}


export {
      SURFACE_NORMALS_METADATA,
      SurfaceNormalsOutputs,
      surface_normals,
      surface_normals_execute,
      surface_normals_params,
};
