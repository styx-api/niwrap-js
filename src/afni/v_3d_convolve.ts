// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_CONVOLVE_METADATA: Metadata = {
    id: "a0c61b357c0b8968a59079d164442d2ca0b8cb8d.boutiques",
    name: "3dConvolve",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dConvolveParameters {
    "@type": "afni.3dConvolve";
    "infile": InputPathType;
    "outfile": string;
    "options"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dConvolve": v_3d_convolve_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dConvolve": v_3d_convolve_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_convolve(...)`.
 *
 * @interface
 */
interface V3dConvolveOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output file of 3dConvolve
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input file for 3dConvolve
 * @param outfile Output file for 3dConvolve
 * @param options Additional options for 3dConvolve
 *
 * @returns Parameter dictionary
 */
function v_3d_convolve_params(
    infile: InputPathType,
    outfile: string,
    options: string | null = null,
): V3dConvolveParameters {
    const params = {
        "@type": "afni.3dConvolve" as const,
        "infile": infile,
        "outfile": outfile,
    };
    if (options !== null) {
        params["options"] = options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_convolve_cargs(
    params: V3dConvolveParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dConvolve");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    if ((params["options"] ?? null) !== null) {
        cargs.push(
            "-options",
            (params["options"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_convolve_outputs(
    params: V3dConvolveParameters,
    execution: Execution,
): V3dConvolveOutputs {
    const ret: V3dConvolveOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * 3dConvolve is no longer supported in AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dConvolveOutputs`).
 */
function v_3d_convolve_execute(
    params: V3dConvolveParameters,
    execution: Execution,
): V3dConvolveOutputs {
    params = execution.params(params)
    const cargs = v_3d_convolve_cargs(params, execution)
    const ret = v_3d_convolve_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dConvolve is no longer supported in AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input file for 3dConvolve
 * @param outfile Output file for 3dConvolve
 * @param options Additional options for 3dConvolve
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dConvolveOutputs`).
 */
function v_3d_convolve(
    infile: InputPathType,
    outfile: string,
    options: string | null = null,
    runner: Runner | null = null,
): V3dConvolveOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_CONVOLVE_METADATA);
    const params = v_3d_convolve_params(infile, outfile, options)
    return v_3d_convolve_execute(params, execution);
}


export {
      V3dConvolveOutputs,
      V3dConvolveParameters,
      V_3D_CONVOLVE_METADATA,
      v_3d_convolve,
      v_3d_convolve_cargs,
      v_3d_convolve_execute,
      v_3d_convolve_outputs,
      v_3d_convolve_params,
};
