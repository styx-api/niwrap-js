// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__THICKNESS_MASTER_METADATA: Metadata = {
    id: "72bf9288b5e5a62c999168abfffc7a9e9622c84f.boutiques",
    name: "@thickness_master",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VThicknessMasterParameters {
    "@type": "afni.@thickness_master";
    "maskset": InputPathType;
    "surfset": InputPathType;
    "outdir"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@thickness_master": v__thickness_master_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@thickness_master": v__thickness_master_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__thickness_master(...)`.
 *
 * @interface
 */
interface VThicknessMasterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output directory for ball and box method
     */
    output_bb_dir: OutputPathType | null;
    /**
     * Output directory for erosion method
     */
    output_erode_dir: OutputPathType | null;
    /**
     * Output directory for in2out method
     */
    output_in2out_dir: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param maskset Mask dataset to find thickness
 * @param surfset Surface dataset to use for normals into the volume
 * @param outdir Output directory base name. The output will be placed in a directory with thick_base in its name (e.g., mmmm_bb, mmmm_erode, mmmm_in2out)
 *
 * @returns Parameter dictionary
 */
function v__thickness_master_params(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: string | null = null,
): VThicknessMasterParameters {
    const params = {
        "@type": "afni.@thickness_master" as const,
        "maskset": maskset,
        "surfset": surfset,
    };
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__thickness_master_cargs(
    params: VThicknessMasterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@thickness_master");
    cargs.push(
        "-maskset",
        execution.inputFile((params["maskset"] ?? null))
    );
    cargs.push(
        "-surfset",
        execution.inputFile((params["surfset"] ?? null))
    );
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "-outdir",
            (params["outdir"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__thickness_master_outputs(
    params: VThicknessMasterParameters,
    execution: Execution,
): VThicknessMasterOutputs {
    const ret: VThicknessMasterOutputs = {
        root: execution.outputFile("."),
        output_bb_dir: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "_bb/"].join('')) : null,
        output_erode_dir: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "_erode/"].join('')) : null,
        output_in2out_dir: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "_in2out/"].join('')) : null,
    };
    return ret;
}


/**
 * @thickness_master
 *
 * Compute cortical thickness using mask and surface datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VThicknessMasterOutputs`).
 */
function v__thickness_master_execute(
    params: VThicknessMasterParameters,
    runner: Runner | null = null,
): VThicknessMasterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__THICKNESS_MASTER_METADATA);
    params = execution.params(params)
    const cargs = v__thickness_master_cargs(params, execution)
    const ret = v__thickness_master_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @thickness_master
 *
 * Compute cortical thickness using mask and surface datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param maskset Mask dataset to find thickness
 * @param surfset Surface dataset to use for normals into the volume
 * @param outdir Output directory base name. The output will be placed in a directory with thick_base in its name (e.g., mmmm_bb, mmmm_erode, mmmm_in2out)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VThicknessMasterOutputs`).
 */
function v__thickness_master(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: string | null = null,
    runner: Runner | null = null,
): VThicknessMasterOutputs {
    const params = v__thickness_master_params(maskset, surfset, outdir)
    return v__thickness_master_execute(params, runner);
}


export {
      VThicknessMasterOutputs,
      VThicknessMasterParameters,
      V__THICKNESS_MASTER_METADATA,
      v__thickness_master,
      v__thickness_master_execute,
      v__thickness_master_params,
};
