// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTSUSE_LANDMARK_IMAGES_TO_GET_AFFINE_TRANSFORM_METADATA: Metadata = {
    id: "c11dd7c0d9840d40017d52a654120cd6141ec439.boutiques",
    name: "ANTSUseLandmarkImagesToGetAffineTransform",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsuseLandmarkImagesToGetAffineTransformParameters {
    "@type": "ants.ANTSUseLandmarkImagesToGetAffineTransform";
    "fixed_image": InputPathType;
    "moving_image": InputPathType;
    "transform_type": "rigid" | "affine";
    "output_affine": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.ANTSUseLandmarkImagesToGetAffineTransform": antsuse_landmark_images_to_get_affine_transform_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.ANTSUseLandmarkImagesToGetAffineTransform": antsuse_landmark_images_to_get_affine_transform_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `antsuse_landmark_images_to_get_affine_transform(...)`.
 *
 * @interface
 */
interface AntsuseLandmarkImagesToGetAffineTransformOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output is the affine transformation matrix file.
     */
    affine_transform_matrix: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fixed_image The fixed image containing labeled landmarks (N-ary image).
 * @param moving_image The moving image containing labeled landmarks (N-ary image).
 * @param transform_type Type of transform to compute: 'rigid' or 'affine'.
 * @param output_affine The output file for the affine transform matrix (e.g., OutAffine.txt).
 *
 * @returns Parameter dictionary
 */
function antsuse_landmark_images_to_get_affine_transform_params(
    fixed_image: InputPathType,
    moving_image: InputPathType,
    transform_type: "rigid" | "affine",
    output_affine: string,
): AntsuseLandmarkImagesToGetAffineTransformParameters {
    const params = {
        "@type": "ants.ANTSUseLandmarkImagesToGetAffineTransform" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "transform_type": transform_type,
        "output_affine": output_affine,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function antsuse_landmark_images_to_get_affine_transform_cargs(
    params: AntsuseLandmarkImagesToGetAffineTransformParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ANTSUseLandmarkImagesToGetAffineTransform");
    cargs.push(execution.inputFile((params["fixed_image"] ?? null)));
    cargs.push(execution.inputFile((params["moving_image"] ?? null)));
    cargs.push((params["transform_type"] ?? null));
    cargs.push((params["output_affine"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function antsuse_landmark_images_to_get_affine_transform_outputs(
    params: AntsuseLandmarkImagesToGetAffineTransformParameters,
    execution: Execution,
): AntsuseLandmarkImagesToGetAffineTransformOutputs {
    const ret: AntsuseLandmarkImagesToGetAffineTransformOutputs = {
        root: execution.outputFile("."),
        affine_transform_matrix: execution.outputFile([(params["output_affine"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ANTSUseLandmarkImagesToGetAffineTransform
 *
 * This tool computes an affine transform (rigid or affine) from labeled landmark images. It requires input images to be N-ary, in the same physical space as the images you want to register, and to have the same landmark points defined within them. Landmarks are defined from the center of mass of the labels in the input images. ITK-snap can be used to generate the label images.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsuseLandmarkImagesToGetAffineTransformOutputs`).
 */
function antsuse_landmark_images_to_get_affine_transform_execute(
    params: AntsuseLandmarkImagesToGetAffineTransformParameters,
    runner: Runner | null = null,
): AntsuseLandmarkImagesToGetAffineTransformOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTSUSE_LANDMARK_IMAGES_TO_GET_AFFINE_TRANSFORM_METADATA);
    params = execution.params(params)
    const cargs = antsuse_landmark_images_to_get_affine_transform_cargs(params, execution)
    const ret = antsuse_landmark_images_to_get_affine_transform_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ANTSUseLandmarkImagesToGetAffineTransform
 *
 * This tool computes an affine transform (rigid or affine) from labeled landmark images. It requires input images to be N-ary, in the same physical space as the images you want to register, and to have the same landmark points defined within them. Landmarks are defined from the center of mass of the labels in the input images. ITK-snap can be used to generate the label images.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param fixed_image The fixed image containing labeled landmarks (N-ary image).
 * @param moving_image The moving image containing labeled landmarks (N-ary image).
 * @param transform_type Type of transform to compute: 'rigid' or 'affine'.
 * @param output_affine The output file for the affine transform matrix (e.g., OutAffine.txt).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsuseLandmarkImagesToGetAffineTransformOutputs`).
 */
function antsuse_landmark_images_to_get_affine_transform(
    fixed_image: InputPathType,
    moving_image: InputPathType,
    transform_type: "rigid" | "affine",
    output_affine: string,
    runner: Runner | null = null,
): AntsuseLandmarkImagesToGetAffineTransformOutputs {
    const params = antsuse_landmark_images_to_get_affine_transform_params(fixed_image, moving_image, transform_type, output_affine)
    return antsuse_landmark_images_to_get_affine_transform_execute(params, runner);
}


export {
      ANTSUSE_LANDMARK_IMAGES_TO_GET_AFFINE_TRANSFORM_METADATA,
      AntsuseLandmarkImagesToGetAffineTransformOutputs,
      AntsuseLandmarkImagesToGetAffineTransformParameters,
      antsuse_landmark_images_to_get_affine_transform,
      antsuse_landmark_images_to_get_affine_transform_execute,
      antsuse_landmark_images_to_get_affine_transform_params,
};
