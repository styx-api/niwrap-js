// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LTA_CONVERT_METADATA: Metadata = {
    id: "a3b2792635fe5446b685eda0b330b46970fccdd8.boutiques",
    name: "lta_convert",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LtaConvertParameters {
    "@type": "freesurfer.lta_convert";
    "in_lta"?: InputPathType | null | undefined;
    "in_fsl"?: InputPathType | null | undefined;
    "in_mni"?: InputPathType | null | undefined;
    "in_reg"?: InputPathType | null | undefined;
    "in_niftyreg"?: InputPathType | null | undefined;
    "in_itk"?: InputPathType | null | undefined;
    "in_vox"?: InputPathType | null | undefined;
    "out_lta"?: string | null | undefined;
    "out_fsl"?: string | null | undefined;
    "out_mni"?: string | null | undefined;
    "out_reg"?: string | null | undefined;
    "out_niftyreg"?: string | null | undefined;
    "out_itk"?: string | null | undefined;
    "out_vox"?: string | null | undefined;
    "invert": boolean;
    "ltavox2vox": boolean;
    "ltatkreg": boolean;
    "src_geometry"?: InputPathType | null | undefined;
    "trg_geometry"?: InputPathType | null | undefined;
    "trg_conform": boolean;
    "subject_name"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.lta_convert": lta_convert_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.lta_convert": lta_convert_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `lta_convert(...)`.
 *
 * @interface
 */
interface LtaConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transformed file.
     */
    output_transform_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_lta Input transform of LTA type
 * @param in_fsl Input transform of FSL type
 * @param in_mni Input transform of MNI / XFM type
 * @param in_reg Input transform of TK REG type (deprecated format)
 * @param in_niftyreg Input transform of NiftyReg type (inverse RAS2RAS)
 * @param in_itk Input ITK transform (inverse LPS2LPS).
 * @param in_vox Input transform in source image space (inverse VOX2VOX)
 * @param out_lta Output linear transform (LTA FreeSurfer format)
 * @param out_fsl Output transform in FSL format
 * @param out_mni Output transform in MNI/XFM format
 * @param out_reg Output transform in REG DAT format
 * @param out_niftyreg Output transform in NiftyReg format (inverse RAS2RAS)
 * @param out_itk Output transform in ITK TXT format (inverse LPS2LPS)
 * @param out_vox Output transform in source image space (inverse VOX2VOX)
 * @param invert Inverts transform
 * @param ltavox2vox Output type VOX2VOX (default RAS2RAS) with --ltaout
 * @param ltatkreg Output type REGISTER_DAT (default RAS2RAS) with --ltaout
 * @param src_geometry Specify src image geometry (mov volume for TKREG/register.dat)
 * @param trg_geometry Specify trg image geometry
 * @param trg_conform Conform trg image geometry (COR standard)
 * @param subject_name Specify subject name (overrides if input has subject name defined)
 *
 * @returns Parameter dictionary
 */
function lta_convert_params(
    in_lta: InputPathType | null = null,
    in_fsl: InputPathType | null = null,
    in_mni: InputPathType | null = null,
    in_reg: InputPathType | null = null,
    in_niftyreg: InputPathType | null = null,
    in_itk: InputPathType | null = null,
    in_vox: InputPathType | null = null,
    out_lta: string | null = null,
    out_fsl: string | null = null,
    out_mni: string | null = null,
    out_reg: string | null = null,
    out_niftyreg: string | null = null,
    out_itk: string | null = null,
    out_vox: string | null = null,
    invert: boolean = false,
    ltavox2vox: boolean = false,
    ltatkreg: boolean = false,
    src_geometry: InputPathType | null = null,
    trg_geometry: InputPathType | null = null,
    trg_conform: boolean = false,
    subject_name: string | null = null,
): LtaConvertParameters {
    const params = {
        "@type": "freesurfer.lta_convert" as const,
        "invert": invert,
        "ltavox2vox": ltavox2vox,
        "ltatkreg": ltatkreg,
        "trg_conform": trg_conform,
    };
    if (in_lta !== null) {
        params["in_lta"] = in_lta;
    }
    if (in_fsl !== null) {
        params["in_fsl"] = in_fsl;
    }
    if (in_mni !== null) {
        params["in_mni"] = in_mni;
    }
    if (in_reg !== null) {
        params["in_reg"] = in_reg;
    }
    if (in_niftyreg !== null) {
        params["in_niftyreg"] = in_niftyreg;
    }
    if (in_itk !== null) {
        params["in_itk"] = in_itk;
    }
    if (in_vox !== null) {
        params["in_vox"] = in_vox;
    }
    if (out_lta !== null) {
        params["out_lta"] = out_lta;
    }
    if (out_fsl !== null) {
        params["out_fsl"] = out_fsl;
    }
    if (out_mni !== null) {
        params["out_mni"] = out_mni;
    }
    if (out_reg !== null) {
        params["out_reg"] = out_reg;
    }
    if (out_niftyreg !== null) {
        params["out_niftyreg"] = out_niftyreg;
    }
    if (out_itk !== null) {
        params["out_itk"] = out_itk;
    }
    if (out_vox !== null) {
        params["out_vox"] = out_vox;
    }
    if (src_geometry !== null) {
        params["src_geometry"] = src_geometry;
    }
    if (trg_geometry !== null) {
        params["trg_geometry"] = trg_geometry;
    }
    if (subject_name !== null) {
        params["subject_name"] = subject_name;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function lta_convert_cargs(
    params: LtaConvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("lta_convert");
    if ((params["in_lta"] ?? null) !== null) {
        cargs.push(
            "--inlta",
            execution.inputFile((params["in_lta"] ?? null))
        );
    }
    if ((params["in_fsl"] ?? null) !== null) {
        cargs.push(
            "--infsl",
            execution.inputFile((params["in_fsl"] ?? null))
        );
    }
    if ((params["in_mni"] ?? null) !== null) {
        cargs.push(
            "--inmni",
            execution.inputFile((params["in_mni"] ?? null))
        );
    }
    if ((params["in_reg"] ?? null) !== null) {
        cargs.push(
            "--inreg",
            execution.inputFile((params["in_reg"] ?? null))
        );
    }
    if ((params["in_niftyreg"] ?? null) !== null) {
        cargs.push(
            "--inniftyreg",
            execution.inputFile((params["in_niftyreg"] ?? null))
        );
    }
    if ((params["in_itk"] ?? null) !== null) {
        cargs.push(
            "--initk",
            execution.inputFile((params["in_itk"] ?? null))
        );
    }
    if ((params["in_vox"] ?? null) !== null) {
        cargs.push(
            "--invox",
            execution.inputFile((params["in_vox"] ?? null))
        );
    }
    if ((params["out_lta"] ?? null) !== null) {
        cargs.push(
            "--outlta",
            (params["out_lta"] ?? null)
        );
    }
    if ((params["out_fsl"] ?? null) !== null) {
        cargs.push(
            "--outfsl",
            (params["out_fsl"] ?? null)
        );
    }
    if ((params["out_mni"] ?? null) !== null) {
        cargs.push(
            "--outmni",
            (params["out_mni"] ?? null)
        );
    }
    if ((params["out_reg"] ?? null) !== null) {
        cargs.push(
            "--outreg",
            (params["out_reg"] ?? null)
        );
    }
    if ((params["out_niftyreg"] ?? null) !== null) {
        cargs.push(
            "--outniftyreg",
            (params["out_niftyreg"] ?? null)
        );
    }
    if ((params["out_itk"] ?? null) !== null) {
        cargs.push(
            "--outitk",
            (params["out_itk"] ?? null)
        );
    }
    if ((params["out_vox"] ?? null) !== null) {
        cargs.push(
            "--outvox",
            (params["out_vox"] ?? null)
        );
    }
    if ((params["invert"] ?? null)) {
        cargs.push("--invert");
    }
    if ((params["ltavox2vox"] ?? null)) {
        cargs.push("--ltavox2vox");
    }
    if ((params["ltatkreg"] ?? null)) {
        cargs.push("--ltatkreg");
    }
    if ((params["src_geometry"] ?? null) !== null) {
        cargs.push(
            "--src",
            execution.inputFile((params["src_geometry"] ?? null))
        );
    }
    if ((params["trg_geometry"] ?? null) !== null) {
        cargs.push(
            "--trg",
            execution.inputFile((params["trg_geometry"] ?? null))
        );
    }
    if ((params["trg_conform"] ?? null)) {
        cargs.push("--trgconform");
    }
    if ((params["subject_name"] ?? null) !== null) {
        cargs.push(
            "--subject",
            (params["subject_name"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function lta_convert_outputs(
    params: LtaConvertParameters,
    execution: Execution,
): LtaConvertOutputs {
    const ret: LtaConvertOutputs = {
        root: execution.outputFile("."),
        output_transform_file: ((params["out_vox"] ?? null) !== null) ? execution.outputFile([(params["out_vox"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * lta_convert
 *
 * This program converts between different linear transform formats.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LtaConvertOutputs`).
 */
function lta_convert_execute(
    params: LtaConvertParameters,
    runner: Runner | null = null,
): LtaConvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LTA_CONVERT_METADATA);
    params = execution.params(params)
    const cargs = lta_convert_cargs(params, execution)
    const ret = lta_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * lta_convert
 *
 * This program converts between different linear transform formats.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param in_lta Input transform of LTA type
 * @param in_fsl Input transform of FSL type
 * @param in_mni Input transform of MNI / XFM type
 * @param in_reg Input transform of TK REG type (deprecated format)
 * @param in_niftyreg Input transform of NiftyReg type (inverse RAS2RAS)
 * @param in_itk Input ITK transform (inverse LPS2LPS).
 * @param in_vox Input transform in source image space (inverse VOX2VOX)
 * @param out_lta Output linear transform (LTA FreeSurfer format)
 * @param out_fsl Output transform in FSL format
 * @param out_mni Output transform in MNI/XFM format
 * @param out_reg Output transform in REG DAT format
 * @param out_niftyreg Output transform in NiftyReg format (inverse RAS2RAS)
 * @param out_itk Output transform in ITK TXT format (inverse LPS2LPS)
 * @param out_vox Output transform in source image space (inverse VOX2VOX)
 * @param invert Inverts transform
 * @param ltavox2vox Output type VOX2VOX (default RAS2RAS) with --ltaout
 * @param ltatkreg Output type REGISTER_DAT (default RAS2RAS) with --ltaout
 * @param src_geometry Specify src image geometry (mov volume for TKREG/register.dat)
 * @param trg_geometry Specify trg image geometry
 * @param trg_conform Conform trg image geometry (COR standard)
 * @param subject_name Specify subject name (overrides if input has subject name defined)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LtaConvertOutputs`).
 */
function lta_convert(
    in_lta: InputPathType | null = null,
    in_fsl: InputPathType | null = null,
    in_mni: InputPathType | null = null,
    in_reg: InputPathType | null = null,
    in_niftyreg: InputPathType | null = null,
    in_itk: InputPathType | null = null,
    in_vox: InputPathType | null = null,
    out_lta: string | null = null,
    out_fsl: string | null = null,
    out_mni: string | null = null,
    out_reg: string | null = null,
    out_niftyreg: string | null = null,
    out_itk: string | null = null,
    out_vox: string | null = null,
    invert: boolean = false,
    ltavox2vox: boolean = false,
    ltatkreg: boolean = false,
    src_geometry: InputPathType | null = null,
    trg_geometry: InputPathType | null = null,
    trg_conform: boolean = false,
    subject_name: string | null = null,
    runner: Runner | null = null,
): LtaConvertOutputs {
    const params = lta_convert_params(in_lta, in_fsl, in_mni, in_reg, in_niftyreg, in_itk, in_vox, out_lta, out_fsl, out_mni, out_reg, out_niftyreg, out_itk, out_vox, invert, ltavox2vox, ltatkreg, src_geometry, trg_geometry, trg_conform, subject_name)
    return lta_convert_execute(params, runner);
}


export {
      LTA_CONVERT_METADATA,
      LtaConvertOutputs,
      LtaConvertParameters,
      lta_convert,
      lta_convert_execute,
      lta_convert_params,
};
