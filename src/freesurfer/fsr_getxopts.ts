// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSR_GETXOPTS_METADATA: Metadata = {
    id: "99d8c486b8e278b01e051129f89738f615f5b4b0.boutiques",
    name: "fsr-getxopts",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsrGetxoptsParameters {
    "@type"?: "freesurfer/fsr-getxopts";
    "help": boolean;
}
type FsrGetxoptsParametersTagged = Required<Pick<FsrGetxoptsParameters, '@type'>> & FsrGetxoptsParameters;


/**
 * Output object returned when calling `FsrGetxoptsParameters(...)`.
 *
 * @interface
 */
interface FsrGetxoptsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param help Display the help message and exit
 *
 * @returns Parameter dictionary
 */
function fsr_getxopts_params(
    help: boolean = false,
): FsrGetxoptsParametersTagged {
    const params = {
        "@type": "freesurfer/fsr-getxopts" as const,
        "help": help,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fsr_getxopts_cargs(
    params: FsrGetxoptsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsr-getxopts");
    if ((params["help"] ?? false)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fsr_getxopts_outputs(
    params: FsrGetxoptsParameters,
    execution: Execution,
): FsrGetxoptsOutputs {
    const ret: FsrGetxoptsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * fsr-getxopts
 *
 * Tool to retrieve extended options for a specific context or configuration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsrGetxoptsOutputs`).
 */
function fsr_getxopts_execute(
    params: FsrGetxoptsParameters,
    runner: Runner | null = null,
): FsrGetxoptsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSR_GETXOPTS_METADATA);
    params = execution.params(params)
    const cargs = fsr_getxopts_cargs(params, execution)
    const ret = fsr_getxopts_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fsr-getxopts
 *
 * Tool to retrieve extended options for a specific context or configuration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param help Display the help message and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsrGetxoptsOutputs`).
 */
function fsr_getxopts(
    help: boolean = false,
    runner: Runner | null = null,
): FsrGetxoptsOutputs {
    const params = fsr_getxopts_params(help)
    return fsr_getxopts_execute(params, runner);
}


export {
      FSR_GETXOPTS_METADATA,
      FsrGetxoptsOutputs,
      fsr_getxopts,
      fsr_getxopts_execute,
      fsr_getxopts_params,
};
