// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCKSIFT2_METADATA: Metadata = {
    id: "14aaf15fab77274145a9c252945d1e6493faa9d5.boutiques",
    name: "tcksift2",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Tcksift2ConfigParameters {
    "@type": "mrtrix.tcksift2.config";
    "key": string;
    "value": string;
}


interface Tcksift2Parameters {
    "@type": "mrtrix.tcksift2";
    "proc_mask"?: InputPathType | null | undefined;
    "act"?: InputPathType | null | undefined;
    "fd_scale_gm": boolean;
    "no_dilate_lut": boolean;
    "make_null_lobes": boolean;
    "remove_untracked": boolean;
    "fd_thresh"?: number | null | undefined;
    "csv"?: string | null | undefined;
    "out_mu"?: string | null | undefined;
    "output_debug": boolean;
    "out_coeffs"?: string | null | undefined;
    "reg_tikhonov"?: number | null | undefined;
    "reg_tv"?: number | null | undefined;
    "min_td_frac"?: number | null | undefined;
    "min_iters"?: number | null | undefined;
    "max_iters"?: number | null | undefined;
    "min_factor"?: number | null | undefined;
    "min_coeff"?: number | null | undefined;
    "max_factor"?: number | null | undefined;
    "max_coeff"?: number | null | undefined;
    "max_coeff_step"?: number | null | undefined;
    "min_cf_decrease"?: number | null | undefined;
    "linear": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Tcksift2ConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "in_tracks": InputPathType;
    "in_fod": InputPathType;
    "out_weights": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.tcksift2": tcksift2_cargs,
        "mrtrix.tcksift2.config": tcksift2_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.tcksift2": tcksift2_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function tcksift2_config_params(
    key: string,
    value: string,
): Tcksift2ConfigParameters {
    const params = {
        "@type": "mrtrix.tcksift2.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tcksift2_config_cargs(
    params: Tcksift2ConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `tcksift2(...)`.
 *
 * @interface
 */
interface Tcksift2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output text file containing the weighting factor for each streamline
     */
    out_weights: OutputPathType;
    /**
     * output statistics of execution per iteration to a .csv file 
     */
    csv: OutputPathType | null;
    /**
     * output the final value of SIFT proportionality coefficient mu to a text file 
     */
    out_mu: OutputPathType | null;
    /**
     * output text file containing the weighting coefficient for each streamline 
     */
    out_coeffs: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_tracks the input track file
 * @param in_fod input image containing the spherical harmonics of the fibre orientation distributions
 * @param out_weights output text file containing the weighting factor for each streamline
 * @param proc_mask provide an image containing the processing mask weights for the model; image spatial dimensions must match the fixel image
 * @param act use an ACT five-tissue-type segmented anatomical image to derive the processing mask
 * @param fd_scale_gm provide this option (in conjunction with -act) to heuristically downsize the fibre density estimates based on the presence of GM in the voxel. This can assist in reducing tissue interface effects when using a single-tissue deconvolution algorithm
 * @param no_dilate_lut do NOT dilate FOD lobe lookup tables; only map streamlines to FOD lobes if the precise tangent lies within the angular spread of that lobe
 * @param make_null_lobes add an additional FOD lobe to each voxel, with zero integral, that covers all directions with zero / negative FOD amplitudes
 * @param remove_untracked remove FOD lobes that do not have any streamline density attributed to them; this improves filtering slightly, at the expense of longer computation time (and you can no longer do quantitative comparisons between reconstructions if this is enabled)
 * @param fd_thresh fibre density threshold; exclude an FOD lobe from filtering processing if its integral is less than this amount (streamlines will still be mapped to it, but it will not contribute to the cost function or the filtering)
 * @param csv output statistics of execution per iteration to a .csv file
 * @param out_mu output the final value of SIFT proportionality coefficient mu to a text file
 * @param output_debug provide various output images for assessing & debugging performance etc.
 * @param out_coeffs output text file containing the weighting coefficient for each streamline
 * @param reg_tikhonov provide coefficient for regularising streamline weighting coefficients (Tikhonov regularisation) (default: 0)
 * @param reg_tv provide coefficient for regularising variance of streamline weighting coefficient to fixels along its length (Total Variation regularisation) (default: 0.1)
 * @param min_td_frac minimum fraction of the FOD integral reconstructed by streamlines; if the reconstructed streamline density is below this fraction, the fixel is excluded from optimisation (default: 0.1)
 * @param min_iters minimum number of iterations to run before testing for convergence; this can prevent premature termination at early iterations if the cost function increases slightly (default: 10)
 * @param max_iters maximum number of iterations to run before terminating program
 * @param min_factor minimum weighting factor for an individual streamline; if the factor falls below this number the streamline will be rejected entirely (factor set to zero) (default: 0)
 * @param min_coeff minimum weighting coefficient for an individual streamline; similar to the '-min_factor' option, but using the exponential coefficient basis of the SIFT2 model; these parameters are related as: factor = e^(coeff). Note that the -min_factor and -min_coeff options are mutually exclusive - you can only provide one. (default: -inf)
 * @param max_factor maximum weighting factor that can be assigned to any one streamline (default: inf)
 * @param max_coeff maximum weighting coefficient for an individual streamline; similar to the '-max_factor' option, but using the exponential coefficient basis of the SIFT2 model; these parameters are related as: factor = e^(coeff). Note that the -max_factor and -max_coeff options are mutually exclusive - you can only provide one. (default: inf)
 * @param max_coeff_step maximum change to a streamline's weighting coefficient in a single iteration (default: 1)
 * @param min_cf_decrease minimum decrease in the cost function (as a fraction of the initial value) that must occur each iteration for the algorithm to continue (default: 2.5e-05)
 * @param linear perform a linear estimation of streamline weights, rather than the standard non-linear optimisation (typically does not provide as accurate a model fit; but only requires a single pass)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function tcksift2_params(
    in_tracks: InputPathType,
    in_fod: InputPathType,
    out_weights: string,
    proc_mask: InputPathType | null = null,
    act: InputPathType | null = null,
    fd_scale_gm: boolean = false,
    no_dilate_lut: boolean = false,
    make_null_lobes: boolean = false,
    remove_untracked: boolean = false,
    fd_thresh: number | null = null,
    csv: string | null = null,
    out_mu: string | null = null,
    output_debug: boolean = false,
    out_coeffs: string | null = null,
    reg_tikhonov: number | null = null,
    reg_tv: number | null = null,
    min_td_frac: number | null = null,
    min_iters: number | null = null,
    max_iters: number | null = null,
    min_factor: number | null = null,
    min_coeff: number | null = null,
    max_factor: number | null = null,
    max_coeff: number | null = null,
    max_coeff_step: number | null = null,
    min_cf_decrease: number | null = null,
    linear: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tcksift2ConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Tcksift2Parameters {
    const params = {
        "@type": "mrtrix.tcksift2" as const,
        "fd_scale_gm": fd_scale_gm,
        "no_dilate_lut": no_dilate_lut,
        "make_null_lobes": make_null_lobes,
        "remove_untracked": remove_untracked,
        "output_debug": output_debug,
        "linear": linear,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "in_tracks": in_tracks,
        "in_fod": in_fod,
        "out_weights": out_weights,
    };
    if (proc_mask !== null) {
        params["proc_mask"] = proc_mask;
    }
    if (act !== null) {
        params["act"] = act;
    }
    if (fd_thresh !== null) {
        params["fd_thresh"] = fd_thresh;
    }
    if (csv !== null) {
        params["csv"] = csv;
    }
    if (out_mu !== null) {
        params["out_mu"] = out_mu;
    }
    if (out_coeffs !== null) {
        params["out_coeffs"] = out_coeffs;
    }
    if (reg_tikhonov !== null) {
        params["reg_tikhonov"] = reg_tikhonov;
    }
    if (reg_tv !== null) {
        params["reg_tv"] = reg_tv;
    }
    if (min_td_frac !== null) {
        params["min_td_frac"] = min_td_frac;
    }
    if (min_iters !== null) {
        params["min_iters"] = min_iters;
    }
    if (max_iters !== null) {
        params["max_iters"] = max_iters;
    }
    if (min_factor !== null) {
        params["min_factor"] = min_factor;
    }
    if (min_coeff !== null) {
        params["min_coeff"] = min_coeff;
    }
    if (max_factor !== null) {
        params["max_factor"] = max_factor;
    }
    if (max_coeff !== null) {
        params["max_coeff"] = max_coeff;
    }
    if (max_coeff_step !== null) {
        params["max_coeff_step"] = max_coeff_step;
    }
    if (min_cf_decrease !== null) {
        params["min_cf_decrease"] = min_cf_decrease;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tcksift2_cargs(
    params: Tcksift2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tcksift2");
    if ((params["proc_mask"] ?? null) !== null) {
        cargs.push(
            "-proc_mask",
            execution.inputFile((params["proc_mask"] ?? null))
        );
    }
    if ((params["act"] ?? null) !== null) {
        cargs.push(
            "-act",
            execution.inputFile((params["act"] ?? null))
        );
    }
    if ((params["fd_scale_gm"] ?? null)) {
        cargs.push("-fd_scale_gm");
    }
    if ((params["no_dilate_lut"] ?? null)) {
        cargs.push("-no_dilate_lut");
    }
    if ((params["make_null_lobes"] ?? null)) {
        cargs.push("-make_null_lobes");
    }
    if ((params["remove_untracked"] ?? null)) {
        cargs.push("-remove_untracked");
    }
    if ((params["fd_thresh"] ?? null) !== null) {
        cargs.push(
            "-fd_thresh",
            String((params["fd_thresh"] ?? null))
        );
    }
    if ((params["csv"] ?? null) !== null) {
        cargs.push(
            "-csv",
            (params["csv"] ?? null)
        );
    }
    if ((params["out_mu"] ?? null) !== null) {
        cargs.push(
            "-out_mu",
            (params["out_mu"] ?? null)
        );
    }
    if ((params["output_debug"] ?? null)) {
        cargs.push("-output_debug");
    }
    if ((params["out_coeffs"] ?? null) !== null) {
        cargs.push(
            "-out_coeffs",
            (params["out_coeffs"] ?? null)
        );
    }
    if ((params["reg_tikhonov"] ?? null) !== null) {
        cargs.push(
            "-reg_tikhonov",
            String((params["reg_tikhonov"] ?? null))
        );
    }
    if ((params["reg_tv"] ?? null) !== null) {
        cargs.push(
            "-reg_tv",
            String((params["reg_tv"] ?? null))
        );
    }
    if ((params["min_td_frac"] ?? null) !== null) {
        cargs.push(
            "-min_td_frac",
            String((params["min_td_frac"] ?? null))
        );
    }
    if ((params["min_iters"] ?? null) !== null) {
        cargs.push(
            "-min_iters",
            String((params["min_iters"] ?? null))
        );
    }
    if ((params["max_iters"] ?? null) !== null) {
        cargs.push(
            "-max_iters",
            String((params["max_iters"] ?? null))
        );
    }
    if ((params["min_factor"] ?? null) !== null) {
        cargs.push(
            "-min_factor",
            String((params["min_factor"] ?? null))
        );
    }
    if ((params["min_coeff"] ?? null) !== null) {
        cargs.push(
            "-min_coeff",
            String((params["min_coeff"] ?? null))
        );
    }
    if ((params["max_factor"] ?? null) !== null) {
        cargs.push(
            "-max_factor",
            String((params["max_factor"] ?? null))
        );
    }
    if ((params["max_coeff"] ?? null) !== null) {
        cargs.push(
            "-max_coeff",
            String((params["max_coeff"] ?? null))
        );
    }
    if ((params["max_coeff_step"] ?? null) !== null) {
        cargs.push(
            "-max_coeff_step",
            String((params["max_coeff_step"] ?? null))
        );
    }
    if ((params["min_cf_decrease"] ?? null) !== null) {
        cargs.push(
            "-min_cf_decrease",
            String((params["min_cf_decrease"] ?? null))
        );
    }
    if ((params["linear"] ?? null)) {
        cargs.push("-linear");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["in_tracks"] ?? null)));
    cargs.push(execution.inputFile((params["in_fod"] ?? null)));
    cargs.push((params["out_weights"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tcksift2_outputs(
    params: Tcksift2Parameters,
    execution: Execution,
): Tcksift2Outputs {
    const ret: Tcksift2Outputs = {
        root: execution.outputFile("."),
        out_weights: execution.outputFile([(params["out_weights"] ?? null)].join('')),
        csv: ((params["csv"] ?? null) !== null) ? execution.outputFile([(params["csv"] ?? null)].join('')) : null,
        out_mu: ((params["out_mu"] ?? null) !== null) ? execution.outputFile([(params["out_mu"] ?? null)].join('')) : null,
        out_coeffs: ((params["out_coeffs"] ?? null) !== null) ? execution.outputFile([(params["out_coeffs"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * tcksift2
 *
 * Optimise per-streamline cross-section multipliers to match a whole-brain tractogram to fixel-wise fibre densities.
 *
 *
 *
 * References:
 *
 * Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT2: Enabling dense quantitative assessment of brain white matter connectivity using streamlines tractography. NeuroImage, 2015, 119, 338-351
 *
 * * If using the -linear option: 
 * Smith, RE; Raffelt, D; Tournier, J-D; Connelly, A. Quantitative Streamlines Tractography: Methods and Inter-Subject Normalisation. Open Science Framework, https://doi.org/10.31219/osf.io/c67kn.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tcksift2Outputs`).
 */
function tcksift2_execute(
    params: Tcksift2Parameters,
    runner: Runner | null = null,
): Tcksift2Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCKSIFT2_METADATA);
    params = execution.params(params)
    const cargs = tcksift2_cargs(params, execution)
    const ret = tcksift2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tcksift2
 *
 * Optimise per-streamline cross-section multipliers to match a whole-brain tractogram to fixel-wise fibre densities.
 *
 *
 *
 * References:
 *
 * Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT2: Enabling dense quantitative assessment of brain white matter connectivity using streamlines tractography. NeuroImage, 2015, 119, 338-351
 *
 * * If using the -linear option: 
 * Smith, RE; Raffelt, D; Tournier, J-D; Connelly, A. Quantitative Streamlines Tractography: Methods and Inter-Subject Normalisation. Open Science Framework, https://doi.org/10.31219/osf.io/c67kn.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param in_tracks the input track file
 * @param in_fod input image containing the spherical harmonics of the fibre orientation distributions
 * @param out_weights output text file containing the weighting factor for each streamline
 * @param proc_mask provide an image containing the processing mask weights for the model; image spatial dimensions must match the fixel image
 * @param act use an ACT five-tissue-type segmented anatomical image to derive the processing mask
 * @param fd_scale_gm provide this option (in conjunction with -act) to heuristically downsize the fibre density estimates based on the presence of GM in the voxel. This can assist in reducing tissue interface effects when using a single-tissue deconvolution algorithm
 * @param no_dilate_lut do NOT dilate FOD lobe lookup tables; only map streamlines to FOD lobes if the precise tangent lies within the angular spread of that lobe
 * @param make_null_lobes add an additional FOD lobe to each voxel, with zero integral, that covers all directions with zero / negative FOD amplitudes
 * @param remove_untracked remove FOD lobes that do not have any streamline density attributed to them; this improves filtering slightly, at the expense of longer computation time (and you can no longer do quantitative comparisons between reconstructions if this is enabled)
 * @param fd_thresh fibre density threshold; exclude an FOD lobe from filtering processing if its integral is less than this amount (streamlines will still be mapped to it, but it will not contribute to the cost function or the filtering)
 * @param csv output statistics of execution per iteration to a .csv file
 * @param out_mu output the final value of SIFT proportionality coefficient mu to a text file
 * @param output_debug provide various output images for assessing & debugging performance etc.
 * @param out_coeffs output text file containing the weighting coefficient for each streamline
 * @param reg_tikhonov provide coefficient for regularising streamline weighting coefficients (Tikhonov regularisation) (default: 0)
 * @param reg_tv provide coefficient for regularising variance of streamline weighting coefficient to fixels along its length (Total Variation regularisation) (default: 0.1)
 * @param min_td_frac minimum fraction of the FOD integral reconstructed by streamlines; if the reconstructed streamline density is below this fraction, the fixel is excluded from optimisation (default: 0.1)
 * @param min_iters minimum number of iterations to run before testing for convergence; this can prevent premature termination at early iterations if the cost function increases slightly (default: 10)
 * @param max_iters maximum number of iterations to run before terminating program
 * @param min_factor minimum weighting factor for an individual streamline; if the factor falls below this number the streamline will be rejected entirely (factor set to zero) (default: 0)
 * @param min_coeff minimum weighting coefficient for an individual streamline; similar to the '-min_factor' option, but using the exponential coefficient basis of the SIFT2 model; these parameters are related as: factor = e^(coeff). Note that the -min_factor and -min_coeff options are mutually exclusive - you can only provide one. (default: -inf)
 * @param max_factor maximum weighting factor that can be assigned to any one streamline (default: inf)
 * @param max_coeff maximum weighting coefficient for an individual streamline; similar to the '-max_factor' option, but using the exponential coefficient basis of the SIFT2 model; these parameters are related as: factor = e^(coeff). Note that the -max_factor and -max_coeff options are mutually exclusive - you can only provide one. (default: inf)
 * @param max_coeff_step maximum change to a streamline's weighting coefficient in a single iteration (default: 1)
 * @param min_cf_decrease minimum decrease in the cost function (as a fraction of the initial value) that must occur each iteration for the algorithm to continue (default: 2.5e-05)
 * @param linear perform a linear estimation of streamline weights, rather than the standard non-linear optimisation (typically does not provide as accurate a model fit; but only requires a single pass)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tcksift2Outputs`).
 */
function tcksift2(
    in_tracks: InputPathType,
    in_fod: InputPathType,
    out_weights: string,
    proc_mask: InputPathType | null = null,
    act: InputPathType | null = null,
    fd_scale_gm: boolean = false,
    no_dilate_lut: boolean = false,
    make_null_lobes: boolean = false,
    remove_untracked: boolean = false,
    fd_thresh: number | null = null,
    csv: string | null = null,
    out_mu: string | null = null,
    output_debug: boolean = false,
    out_coeffs: string | null = null,
    reg_tikhonov: number | null = null,
    reg_tv: number | null = null,
    min_td_frac: number | null = null,
    min_iters: number | null = null,
    max_iters: number | null = null,
    min_factor: number | null = null,
    min_coeff: number | null = null,
    max_factor: number | null = null,
    max_coeff: number | null = null,
    max_coeff_step: number | null = null,
    min_cf_decrease: number | null = null,
    linear: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tcksift2ConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Tcksift2Outputs {
    const params = tcksift2_params(in_tracks, in_fod, out_weights, proc_mask, act, fd_scale_gm, no_dilate_lut, make_null_lobes, remove_untracked, fd_thresh, csv, out_mu, output_debug, out_coeffs, reg_tikhonov, reg_tv, min_td_frac, min_iters, max_iters, min_factor, min_coeff, max_factor, max_coeff, max_coeff_step, min_cf_decrease, linear, info, quiet, debug, force, nthreads, config, help, version)
    return tcksift2_execute(params, runner);
}


export {
      TCKSIFT2_METADATA,
      Tcksift2ConfigParameters,
      Tcksift2Outputs,
      Tcksift2Parameters,
      tcksift2,
      tcksift2_config_params,
      tcksift2_execute,
      tcksift2_params,
};
