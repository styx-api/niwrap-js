// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UBER_SUBJECT_PY_METADATA: Metadata = {
    id: "530df676c8d2b6020a3d36b7074940b4993bef60.boutiques",
    name: "uber_subject.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface UberSubjectPyParameters {
    "@type": "afni.uber_subject.py";
    "qt_opts"?: string | null | undefined;
    "svar"?: string | null | undefined;
    "cvar"?: string | null | undefined;
    "no_gui": boolean;
    "print_ap_command": boolean;
    "save_ap_command"?: string | null | undefined;
    "exec_ap_command": boolean;
    "exec_proc_script": boolean;
    "align_cost"?: string | null | undefined;
    "align_giant_move"?: string | null | undefined;
    "align_opts_aea"?: string | null | undefined;
    "anal_domain"?: string | null | undefined;
    "anal_type"?: string | null | undefined;
    "anat"?: InputPathType | null | undefined;
    "anat_has_skull"?: string | null | undefined;
    "blocks"?: string | null | undefined;
    "blur_size"?: number | null | undefined;
    "epi"?: string | null | undefined;
    "epi_wildcard"?: string | null | undefined;
    "gid"?: string | null | undefined;
    "gltsym"?: string | null | undefined;
    "gltsym_label"?: string | null | undefined;
    "motion_limit"?: number | null | undefined;
    "outlier_limit"?: number | null | undefined;
    "regress_GOFORIT"?: number | null | undefined;
    "regress_bandpass"?: string | null | undefined;
    "regress_jobs"?: number | null | undefined;
    "regress_mot_deriv"?: string | null | undefined;
    "regress_opts_3dD"?: string | null | undefined;
    "reml_exec"?: string | null | undefined;
    "run_clustsim"?: string | null | undefined;
    "sid"?: string | null | undefined;
    "stim"?: InputPathType | null | undefined;
    "stim_basis"?: string | null | undefined;
    "stim_label"?: string | null | undefined;
    "stim_type"?: string | null | undefined;
    "stim_wildcard"?: string | null | undefined;
    "tcat_nfirst"?: number | null | undefined;
    "tlrc_base"?: string | null | undefined;
    "tlrc_ok_maxite"?: string | null | undefined;
    "tlrc_opts_at"?: string | null | undefined;
    "volreg_base"?: string | null | undefined;
    "verb"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.uber_subject.py": uber_subject_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `uber_subject_py(...)`.
 *
 * @interface
 */
interface UberSubjectPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param qt_opts Pass options to PyQt4
 * @param svar Set subject variable to value
 * @param cvar Set control variable to value
 * @param no_gui Do not open graphical interface
 * @param print_ap_command Show afni_proc.py script
 * @param save_ap_command Save afni_proc.py script
 * @param exec_ap_command Run afni_proc.py command
 * @param exec_proc_script Run proc script
 * @param align_cost Specify cost function for anat/EPI alignment
 * @param align_giant_move Use -giant_move in AEA.py
 * @param align_opts_aea Specify extra options for align_epi_anat.py
 * @param anal_domain Set data domain (volume/rest)
 * @param anal_type Set analysis type (task/rest)
 * @param anat Set anatomical dataset name
 * @param anat_has_skull Whether anat has skull (yes/no)
 * @param blocks Set list of processing blocks to apply
 * @param blur_size Set blur size in mm
 * @param epi Set list of EPI datasets
 * @param epi_wildcard Use wildcard for EPI datasets (yes/no)
 * @param gid Set group ID
 * @param gltsym Specify list of symbolic GLTs
 * @param gltsym_label Set corresponding GLT labels
 * @param motion_limit Set per-TR motion limit in mm
 * @param outlier_limit Specify outlier limit for censoring
 * @param regress_goforit Set GOFORIT level in 3dDeconvolve
 * @param regress_bandpass Specify bandpass limits to remain after regress
 * @param regress_jobs Number of jobs to use in 3dDeconvolve
 * @param regress_mot_deriv Regress motion derivatives (yes/no)
 * @param regress_opts_3d_d Specify extra options for 3dDeconvolve
 * @param reml_exec Run 3dREMLfit (yes/no)
 * @param run_clustsim Run 3dClustSim (yes/no)
 * @param sid Set subject ID
 * @param stim Set list of stim timing files
 * @param stim_basis Set basis functions for stim classes
 * @param stim_label Set stim file labels
 * @param stim_type Set stim types for stim classes
 * @param stim_wildcard Use wildcard for stim files (yes/no)
 * @param tcat_nfirst Set number of TRs to remove per run
 * @param tlrc_base Specify anat for standard space alignment
 * @param tlrc_ok_maxite Pass -OK_maxite to @auto_tlrc (yes/no)
 * @param tlrc_opts_at Specify extra options for @auto_tlrc
 * @param volreg_base Set volreg base string (first/third/last)
 * @param verb Set verbose level
 *
 * @returns Parameter dictionary
 */
function uber_subject_py_params(
    qt_opts: string | null = null,
    svar: string | null = null,
    cvar: string | null = null,
    no_gui: boolean = false,
    print_ap_command: boolean = false,
    save_ap_command: string | null = null,
    exec_ap_command: boolean = false,
    exec_proc_script: boolean = false,
    align_cost: string | null = null,
    align_giant_move: string | null = null,
    align_opts_aea: string | null = null,
    anal_domain: string | null = null,
    anal_type: string | null = null,
    anat: InputPathType | null = null,
    anat_has_skull: string | null = null,
    blocks: string | null = null,
    blur_size: number | null = null,
    epi: string | null = null,
    epi_wildcard: string | null = null,
    gid: string | null = null,
    gltsym: string | null = null,
    gltsym_label: string | null = null,
    motion_limit: number | null = null,
    outlier_limit: number | null = null,
    regress_goforit: number | null = null,
    regress_bandpass: string | null = null,
    regress_jobs: number | null = null,
    regress_mot_deriv: string | null = null,
    regress_opts_3d_d: string | null = null,
    reml_exec: string | null = null,
    run_clustsim: string | null = null,
    sid: string | null = null,
    stim: InputPathType | null = null,
    stim_basis: string | null = null,
    stim_label: string | null = null,
    stim_type: string | null = null,
    stim_wildcard: string | null = null,
    tcat_nfirst: number | null = null,
    tlrc_base: string | null = null,
    tlrc_ok_maxite: string | null = null,
    tlrc_opts_at: string | null = null,
    volreg_base: string | null = null,
    verb: string | null = null,
): UberSubjectPyParameters {
    const params = {
        "@type": "afni.uber_subject.py" as const,
        "no_gui": no_gui,
        "print_ap_command": print_ap_command,
        "exec_ap_command": exec_ap_command,
        "exec_proc_script": exec_proc_script,
    };
    if (qt_opts !== null) {
        params["qt_opts"] = qt_opts;
    }
    if (svar !== null) {
        params["svar"] = svar;
    }
    if (cvar !== null) {
        params["cvar"] = cvar;
    }
    if (save_ap_command !== null) {
        params["save_ap_command"] = save_ap_command;
    }
    if (align_cost !== null) {
        params["align_cost"] = align_cost;
    }
    if (align_giant_move !== null) {
        params["align_giant_move"] = align_giant_move;
    }
    if (align_opts_aea !== null) {
        params["align_opts_aea"] = align_opts_aea;
    }
    if (anal_domain !== null) {
        params["anal_domain"] = anal_domain;
    }
    if (anal_type !== null) {
        params["anal_type"] = anal_type;
    }
    if (anat !== null) {
        params["anat"] = anat;
    }
    if (anat_has_skull !== null) {
        params["anat_has_skull"] = anat_has_skull;
    }
    if (blocks !== null) {
        params["blocks"] = blocks;
    }
    if (blur_size !== null) {
        params["blur_size"] = blur_size;
    }
    if (epi !== null) {
        params["epi"] = epi;
    }
    if (epi_wildcard !== null) {
        params["epi_wildcard"] = epi_wildcard;
    }
    if (gid !== null) {
        params["gid"] = gid;
    }
    if (gltsym !== null) {
        params["gltsym"] = gltsym;
    }
    if (gltsym_label !== null) {
        params["gltsym_label"] = gltsym_label;
    }
    if (motion_limit !== null) {
        params["motion_limit"] = motion_limit;
    }
    if (outlier_limit !== null) {
        params["outlier_limit"] = outlier_limit;
    }
    if (regress_goforit !== null) {
        params["regress_GOFORIT"] = regress_goforit;
    }
    if (regress_bandpass !== null) {
        params["regress_bandpass"] = regress_bandpass;
    }
    if (regress_jobs !== null) {
        params["regress_jobs"] = regress_jobs;
    }
    if (regress_mot_deriv !== null) {
        params["regress_mot_deriv"] = regress_mot_deriv;
    }
    if (regress_opts_3d_d !== null) {
        params["regress_opts_3dD"] = regress_opts_3d_d;
    }
    if (reml_exec !== null) {
        params["reml_exec"] = reml_exec;
    }
    if (run_clustsim !== null) {
        params["run_clustsim"] = run_clustsim;
    }
    if (sid !== null) {
        params["sid"] = sid;
    }
    if (stim !== null) {
        params["stim"] = stim;
    }
    if (stim_basis !== null) {
        params["stim_basis"] = stim_basis;
    }
    if (stim_label !== null) {
        params["stim_label"] = stim_label;
    }
    if (stim_type !== null) {
        params["stim_type"] = stim_type;
    }
    if (stim_wildcard !== null) {
        params["stim_wildcard"] = stim_wildcard;
    }
    if (tcat_nfirst !== null) {
        params["tcat_nfirst"] = tcat_nfirst;
    }
    if (tlrc_base !== null) {
        params["tlrc_base"] = tlrc_base;
    }
    if (tlrc_ok_maxite !== null) {
        params["tlrc_ok_maxite"] = tlrc_ok_maxite;
    }
    if (tlrc_opts_at !== null) {
        params["tlrc_opts_at"] = tlrc_opts_at;
    }
    if (volreg_base !== null) {
        params["volreg_base"] = volreg_base;
    }
    if (verb !== null) {
        params["verb"] = verb;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function uber_subject_py_cargs(
    params: UberSubjectPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("uber_subject.py");
    if ((params["qt_opts"] ?? null) !== null) {
        cargs.push(
            "-qt_opts",
            (params["qt_opts"] ?? null)
        );
    }
    if ((params["svar"] ?? null) !== null) {
        cargs.push(
            "-svar",
            (params["svar"] ?? null)
        );
    }
    if ((params["cvar"] ?? null) !== null) {
        cargs.push(
            "-cvar",
            (params["cvar"] ?? null)
        );
    }
    if ((params["no_gui"] ?? null)) {
        cargs.push("-no_gui");
    }
    if ((params["print_ap_command"] ?? null)) {
        cargs.push("-print_ap_command");
    }
    if ((params["save_ap_command"] ?? null) !== null) {
        cargs.push(
            "-save_ap_command",
            (params["save_ap_command"] ?? null)
        );
    }
    if ((params["exec_ap_command"] ?? null)) {
        cargs.push("-exec_ap_command");
    }
    if ((params["exec_proc_script"] ?? null)) {
        cargs.push("-exec_proc_script");
    }
    if ((params["align_cost"] ?? null) !== null) {
        cargs.push(
            "-align_cost",
            (params["align_cost"] ?? null)
        );
    }
    if ((params["align_giant_move"] ?? null) !== null) {
        cargs.push(
            "-align_giant_move",
            (params["align_giant_move"] ?? null)
        );
    }
    if ((params["align_opts_aea"] ?? null) !== null) {
        cargs.push(
            "-align_opts_aea",
            (params["align_opts_aea"] ?? null)
        );
    }
    if ((params["anal_domain"] ?? null) !== null) {
        cargs.push(
            "-anal_domain",
            (params["anal_domain"] ?? null)
        );
    }
    if ((params["anal_type"] ?? null) !== null) {
        cargs.push(
            "-anal_type",
            (params["anal_type"] ?? null)
        );
    }
    if ((params["anat"] ?? null) !== null) {
        cargs.push(
            "-anat",
            execution.inputFile((params["anat"] ?? null))
        );
    }
    if ((params["anat_has_skull"] ?? null) !== null) {
        cargs.push(
            "-anat_has_skull",
            (params["anat_has_skull"] ?? null)
        );
    }
    if ((params["blocks"] ?? null) !== null) {
        cargs.push(
            "-blocks",
            (params["blocks"] ?? null)
        );
    }
    if ((params["blur_size"] ?? null) !== null) {
        cargs.push(
            "-blur_size",
            String((params["blur_size"] ?? null))
        );
    }
    if ((params["epi"] ?? null) !== null) {
        cargs.push(
            "-epi",
            (params["epi"] ?? null)
        );
    }
    if ((params["epi_wildcard"] ?? null) !== null) {
        cargs.push(
            "-epi_wildcard",
            (params["epi_wildcard"] ?? null)
        );
    }
    if ((params["gid"] ?? null) !== null) {
        cargs.push(
            "-gid",
            (params["gid"] ?? null)
        );
    }
    if ((params["gltsym"] ?? null) !== null) {
        cargs.push(
            "-gltsym",
            (params["gltsym"] ?? null)
        );
    }
    if ((params["gltsym_label"] ?? null) !== null) {
        cargs.push(
            "-gltsym_label",
            (params["gltsym_label"] ?? null)
        );
    }
    if ((params["motion_limit"] ?? null) !== null) {
        cargs.push(
            "-motion_limit",
            String((params["motion_limit"] ?? null))
        );
    }
    if ((params["outlier_limit"] ?? null) !== null) {
        cargs.push(
            "-outlier_limit",
            String((params["outlier_limit"] ?? null))
        );
    }
    if ((params["regress_GOFORIT"] ?? null) !== null) {
        cargs.push(
            "-regress_GOFORIT",
            String((params["regress_GOFORIT"] ?? null))
        );
    }
    if ((params["regress_bandpass"] ?? null) !== null) {
        cargs.push(
            "-regress_bandpass",
            (params["regress_bandpass"] ?? null)
        );
    }
    if ((params["regress_jobs"] ?? null) !== null) {
        cargs.push(
            "-regress_jobs",
            String((params["regress_jobs"] ?? null))
        );
    }
    if ((params["regress_mot_deriv"] ?? null) !== null) {
        cargs.push(
            "-regress_mot_deriv",
            (params["regress_mot_deriv"] ?? null)
        );
    }
    if ((params["regress_opts_3dD"] ?? null) !== null) {
        cargs.push(
            "-regress_opts_3dD",
            (params["regress_opts_3dD"] ?? null)
        );
    }
    if ((params["reml_exec"] ?? null) !== null) {
        cargs.push(
            "-reml_exec",
            (params["reml_exec"] ?? null)
        );
    }
    if ((params["run_clustsim"] ?? null) !== null) {
        cargs.push(
            "-run_clustsim",
            (params["run_clustsim"] ?? null)
        );
    }
    if ((params["sid"] ?? null) !== null) {
        cargs.push(
            "-sid",
            (params["sid"] ?? null)
        );
    }
    if ((params["stim"] ?? null) !== null) {
        cargs.push(
            "-stim",
            execution.inputFile((params["stim"] ?? null))
        );
    }
    if ((params["stim_basis"] ?? null) !== null) {
        cargs.push(
            "-stim_basis",
            (params["stim_basis"] ?? null)
        );
    }
    if ((params["stim_label"] ?? null) !== null) {
        cargs.push(
            "-stim_label",
            (params["stim_label"] ?? null)
        );
    }
    if ((params["stim_type"] ?? null) !== null) {
        cargs.push(
            "-stim_type",
            (params["stim_type"] ?? null)
        );
    }
    if ((params["stim_wildcard"] ?? null) !== null) {
        cargs.push(
            "-stim_wildcard",
            (params["stim_wildcard"] ?? null)
        );
    }
    if ((params["tcat_nfirst"] ?? null) !== null) {
        cargs.push(
            "-tcat_nfirst",
            String((params["tcat_nfirst"] ?? null))
        );
    }
    if ((params["tlrc_base"] ?? null) !== null) {
        cargs.push(
            "-tlrc_base",
            (params["tlrc_base"] ?? null)
        );
    }
    if ((params["tlrc_ok_maxite"] ?? null) !== null) {
        cargs.push(
            "-tlrc_ok_maxite",
            (params["tlrc_ok_maxite"] ?? null)
        );
    }
    if ((params["tlrc_opts_at"] ?? null) !== null) {
        cargs.push(
            "-tlrc_opts_at",
            (params["tlrc_opts_at"] ?? null)
        );
    }
    if ((params["volreg_base"] ?? null) !== null) {
        cargs.push(
            "-volreg_base",
            (params["volreg_base"] ?? null)
        );
    }
    if ((params["verb"] ?? null) !== null) {
        cargs.push(
            "-verb",
            (params["verb"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function uber_subject_py_outputs(
    params: UberSubjectPyParameters,
    execution: Execution,
): UberSubjectPyOutputs {
    const ret: UberSubjectPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Graphical interface to afni_proc.py.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UberSubjectPyOutputs`).
 */
function uber_subject_py_execute(
    params: UberSubjectPyParameters,
    runner: Runner | null = null,
): UberSubjectPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UBER_SUBJECT_PY_METADATA);
    params = execution.params(params)
    const cargs = uber_subject_py_cargs(params, execution)
    const ret = uber_subject_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Graphical interface to afni_proc.py.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param qt_opts Pass options to PyQt4
 * @param svar Set subject variable to value
 * @param cvar Set control variable to value
 * @param no_gui Do not open graphical interface
 * @param print_ap_command Show afni_proc.py script
 * @param save_ap_command Save afni_proc.py script
 * @param exec_ap_command Run afni_proc.py command
 * @param exec_proc_script Run proc script
 * @param align_cost Specify cost function for anat/EPI alignment
 * @param align_giant_move Use -giant_move in AEA.py
 * @param align_opts_aea Specify extra options for align_epi_anat.py
 * @param anal_domain Set data domain (volume/rest)
 * @param anal_type Set analysis type (task/rest)
 * @param anat Set anatomical dataset name
 * @param anat_has_skull Whether anat has skull (yes/no)
 * @param blocks Set list of processing blocks to apply
 * @param blur_size Set blur size in mm
 * @param epi Set list of EPI datasets
 * @param epi_wildcard Use wildcard for EPI datasets (yes/no)
 * @param gid Set group ID
 * @param gltsym Specify list of symbolic GLTs
 * @param gltsym_label Set corresponding GLT labels
 * @param motion_limit Set per-TR motion limit in mm
 * @param outlier_limit Specify outlier limit for censoring
 * @param regress_goforit Set GOFORIT level in 3dDeconvolve
 * @param regress_bandpass Specify bandpass limits to remain after regress
 * @param regress_jobs Number of jobs to use in 3dDeconvolve
 * @param regress_mot_deriv Regress motion derivatives (yes/no)
 * @param regress_opts_3d_d Specify extra options for 3dDeconvolve
 * @param reml_exec Run 3dREMLfit (yes/no)
 * @param run_clustsim Run 3dClustSim (yes/no)
 * @param sid Set subject ID
 * @param stim Set list of stim timing files
 * @param stim_basis Set basis functions for stim classes
 * @param stim_label Set stim file labels
 * @param stim_type Set stim types for stim classes
 * @param stim_wildcard Use wildcard for stim files (yes/no)
 * @param tcat_nfirst Set number of TRs to remove per run
 * @param tlrc_base Specify anat for standard space alignment
 * @param tlrc_ok_maxite Pass -OK_maxite to @auto_tlrc (yes/no)
 * @param tlrc_opts_at Specify extra options for @auto_tlrc
 * @param volreg_base Set volreg base string (first/third/last)
 * @param verb Set verbose level
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UberSubjectPyOutputs`).
 */
function uber_subject_py(
    qt_opts: string | null = null,
    svar: string | null = null,
    cvar: string | null = null,
    no_gui: boolean = false,
    print_ap_command: boolean = false,
    save_ap_command: string | null = null,
    exec_ap_command: boolean = false,
    exec_proc_script: boolean = false,
    align_cost: string | null = null,
    align_giant_move: string | null = null,
    align_opts_aea: string | null = null,
    anal_domain: string | null = null,
    anal_type: string | null = null,
    anat: InputPathType | null = null,
    anat_has_skull: string | null = null,
    blocks: string | null = null,
    blur_size: number | null = null,
    epi: string | null = null,
    epi_wildcard: string | null = null,
    gid: string | null = null,
    gltsym: string | null = null,
    gltsym_label: string | null = null,
    motion_limit: number | null = null,
    outlier_limit: number | null = null,
    regress_goforit: number | null = null,
    regress_bandpass: string | null = null,
    regress_jobs: number | null = null,
    regress_mot_deriv: string | null = null,
    regress_opts_3d_d: string | null = null,
    reml_exec: string | null = null,
    run_clustsim: string | null = null,
    sid: string | null = null,
    stim: InputPathType | null = null,
    stim_basis: string | null = null,
    stim_label: string | null = null,
    stim_type: string | null = null,
    stim_wildcard: string | null = null,
    tcat_nfirst: number | null = null,
    tlrc_base: string | null = null,
    tlrc_ok_maxite: string | null = null,
    tlrc_opts_at: string | null = null,
    volreg_base: string | null = null,
    verb: string | null = null,
    runner: Runner | null = null,
): UberSubjectPyOutputs {
    const params = uber_subject_py_params(qt_opts, svar, cvar, no_gui, print_ap_command, save_ap_command, exec_ap_command, exec_proc_script, align_cost, align_giant_move, align_opts_aea, anal_domain, anal_type, anat, anat_has_skull, blocks, blur_size, epi, epi_wildcard, gid, gltsym, gltsym_label, motion_limit, outlier_limit, regress_goforit, regress_bandpass, regress_jobs, regress_mot_deriv, regress_opts_3d_d, reml_exec, run_clustsim, sid, stim, stim_basis, stim_label, stim_type, stim_wildcard, tcat_nfirst, tlrc_base, tlrc_ok_maxite, tlrc_opts_at, volreg_base, verb)
    return uber_subject_py_execute(params, runner);
}


export {
      UBER_SUBJECT_PY_METADATA,
      UberSubjectPyOutputs,
      UberSubjectPyParameters,
      uber_subject_py,
      uber_subject_py_execute,
      uber_subject_py_params,
};
