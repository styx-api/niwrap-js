// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_MERGE_METADATA: Metadata = {
    id: "0484245a1d35b7ed32a01a9b8363c20b753b6141.boutiques",
    name: "volume-merge",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeMergeUpToParameters {
    "@type": "workbench.volume-merge.volume.subvolume.up_to";
    "last_subvol": string;
    "opt_reverse": boolean;
}


interface VolumeMergeSubvolumeParameters {
    "@type": "workbench.volume-merge.volume.subvolume";
    "subvol": string;
    "up_to"?: VolumeMergeUpToParameters | null | undefined;
}


interface VolumeMergeVolumeParameters {
    "@type": "workbench.volume-merge.volume";
    "volume_in": InputPathType;
    "subvolume"?: Array<VolumeMergeSubvolumeParameters> | null | undefined;
}


interface VolumeMergeParameters {
    "@type": "workbench.volume-merge";
    "volume_out": string;
    "volume"?: Array<VolumeMergeVolumeParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-merge": volume_merge_cargs,
        "workbench.volume-merge.volume": volume_merge_volume_cargs,
        "workbench.volume-merge.volume.subvolume": volume_merge_subvolume_cargs,
        "workbench.volume-merge.volume.subvolume.up_to": volume_merge_up_to_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-merge": volume_merge_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param last_subvol the number or name of the last subvolume to include
 * @param opt_reverse use the range in reverse order
 *
 * @returns Parameter dictionary
 */
function volume_merge_up_to_params(
    last_subvol: string,
    opt_reverse: boolean = false,
): VolumeMergeUpToParameters {
    const params = {
        "@type": "workbench.volume-merge.volume.subvolume.up_to" as const,
        "last_subvol": last_subvol,
        "opt_reverse": opt_reverse,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_merge_up_to_cargs(
    params: VolumeMergeUpToParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-up-to");
    cargs.push((params["last_subvol"] ?? null));
    if ((params["opt_reverse"] ?? null)) {
        cargs.push("-reverse");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param subvol the subvolume number or name
 * @param up_to use an inclusive range of subvolumes
 *
 * @returns Parameter dictionary
 */
function volume_merge_subvolume_params(
    subvol: string,
    up_to: VolumeMergeUpToParameters | null = null,
): VolumeMergeSubvolumeParameters {
    const params = {
        "@type": "workbench.volume-merge.volume.subvolume" as const,
        "subvol": subvol,
    };
    if (up_to !== null) {
        params["up_to"] = up_to;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_merge_subvolume_cargs(
    params: VolumeMergeSubvolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-subvolume");
    cargs.push((params["subvol"] ?? null));
    if ((params["up_to"] ?? null) !== null) {
        cargs.push(...dynCargs((params["up_to"] ?? null)["@type"])((params["up_to"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param volume_in a volume file to use subvolumes from
 * @param subvolume select a single subvolume to use
 *
 * @returns Parameter dictionary
 */
function volume_merge_volume_params(
    volume_in: InputPathType,
    subvolume: Array<VolumeMergeSubvolumeParameters> | null = null,
): VolumeMergeVolumeParameters {
    const params = {
        "@type": "workbench.volume-merge.volume" as const,
        "volume_in": volume_in,
    };
    if (subvolume !== null) {
        params["subvolume"] = subvolume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_merge_volume_cargs(
    params: VolumeMergeVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    if ((params["subvolume"] ?? null) !== null) {
        cargs.push(...(params["subvolume"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Output object returned when calling `volume_merge(...)`.
 *
 * @interface
 */
interface VolumeMergeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume file
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_out the output volume file
 * @param volume specify an input volume file
 *
 * @returns Parameter dictionary
 */
function volume_merge_params(
    volume_out: string,
    volume: Array<VolumeMergeVolumeParameters> | null = null,
): VolumeMergeParameters {
    const params = {
        "@type": "workbench.volume-merge" as const,
        "volume_out": volume_out,
    };
    if (volume !== null) {
        params["volume"] = volume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_merge_cargs(
    params: VolumeMergeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-merge");
    cargs.push((params["volume_out"] ?? null));
    if ((params["volume"] ?? null) !== null) {
        cargs.push(...(params["volume"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_merge_outputs(
    params: VolumeMergeParameters,
    execution: Execution,
): VolumeMergeOutputs {
    const ret: VolumeMergeOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * volume-merge
 *
 * Merge volume files into a new file.
 *
 * Takes one or more volume files and constructs a new volume file by concatenating subvolumes from them.  The input volume files must have the same volume space.
 *
 * Example: wb_command -volume-merge out.nii -volume first.nii -subvolume 1 -volume second.nii
 *
 * This example would take the first subvolume from first.nii, followed by all subvolumes from second.nii, and write these to out.nii.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeMergeOutputs`).
 */
function volume_merge_execute(
    params: VolumeMergeParameters,
    runner: Runner | null = null,
): VolumeMergeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_MERGE_METADATA);
    params = execution.params(params)
    const cargs = volume_merge_cargs(params, execution)
    const ret = volume_merge_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * volume-merge
 *
 * Merge volume files into a new file.
 *
 * Takes one or more volume files and constructs a new volume file by concatenating subvolumes from them.  The input volume files must have the same volume space.
 *
 * Example: wb_command -volume-merge out.nii -volume first.nii -subvolume 1 -volume second.nii
 *
 * This example would take the first subvolume from first.nii, followed by all subvolumes from second.nii, and write these to out.nii.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_out the output volume file
 * @param volume specify an input volume file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeMergeOutputs`).
 */
function volume_merge(
    volume_out: string,
    volume: Array<VolumeMergeVolumeParameters> | null = null,
    runner: Runner | null = null,
): VolumeMergeOutputs {
    const params = volume_merge_params(volume_out, volume)
    return volume_merge_execute(params, runner);
}


export {
      VOLUME_MERGE_METADATA,
      VolumeMergeOutputs,
      VolumeMergeParameters,
      VolumeMergeSubvolumeParameters,
      VolumeMergeUpToParameters,
      VolumeMergeVolumeParameters,
      volume_merge,
      volume_merge_execute,
      volume_merge_params,
      volume_merge_subvolume_params,
      volume_merge_up_to_params,
      volume_merge_volume_params,
};
