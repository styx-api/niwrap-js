// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_2D_IM_REG_METADATA: Metadata = {
    id: "d47b19dea6381753231a4f8437ee507f05018c19.boutiques",
    name: "2dImReg",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V2dImRegParameters {
    "__STYXTYPE__": "2dImReg";
    "input_file": InputPathType;
    "base_file"?: InputPathType | null | undefined;
    "base"?: number | null | undefined;
    "nofine": boolean;
    "fine_blur"?: number | null | undefined;
    "fine_dxy"?: number | null | undefined;
    "fine_dphi"?: number | null | undefined;
    "prefix": string;
    "dprefix"?: string | null | undefined;
    "dmm": boolean;
    "rprefix"?: string | null | undefined;
    "debug": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "2dImReg": v_2d_im_reg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "2dImReg": v_2d_im_reg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_2d_im_reg(...)`.
 *
 * @interface
 */
interface V2dImRegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output 3d+time dataset
     */
    output_dataset: OutputPathType;
    /**
     * File containing dx registration parameters in pixels/mm
     */
    dx_file: OutputPathType | null;
    /**
     * File containing dy registration parameters in pixels/mm
     */
    dy_file: OutputPathType | null;
    /**
     * File containing psi registration parameters in degrees
     */
    psi_file: OutputPathType | null;
    /**
     * File containing the volume RMS error for the original dataset
     */
    oldrms_file: OutputPathType | null;
    /**
     * File containing the volume RMS error for the registered dataset
     */
    newrms_file: OutputPathType | null;
}


function v_2d_im_reg_params(
    input_file: InputPathType,
    prefix: string,
    base_file: InputPathType | null = null,
    base: number | null = null,
    nofine: boolean = false,
    fine_blur: number | null = null,
    fine_dxy: number | null = null,
    fine_dphi: number | null = null,
    dprefix: string | null = null,
    dmm: boolean = false,
    rprefix: string | null = null,
    debug: boolean = false,
): V2dImRegParameters {
    /**
     * Build parameters.
    
     * @param input_file Filename of input 3d+time dataset to process
     * @param prefix Prefix name for output 3d+time dataset
     * @param base_file Filename of 3d+time dataset for base image (default = current input dataset)
     * @param base Time index for base image (0 <= num) (default: num = 3)
     * @param nofine Deactivate fine fit phase of image registration (default: fine fit is active)
     * @param fine_blur FWHM of blurring prior to registration (in pixels) (default: blur = 1.0)
     * @param fine_dxy Convergence tolerance for translations (in pixels) (default: dxy = 0.07)
     * @param fine_dphi Convergence tolerance for rotations (in degrees) (default: dphi = 0.21)
     * @param dprefix Write files containing the registration parameters for each slice in chronological order
     * @param dmm Change dx and dy output format from pixels to mm
     * @param rprefix Write files containing the volume RMS error for the original and the registered datasets
     * @param debug Lots of additional output to screen
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "2dImReg" as const,
        "input_file": input_file,
        "nofine": nofine,
        "prefix": prefix,
        "dmm": dmm,
        "debug": debug,
    };
    if (base_file !== null) {
        params["base_file"] = base_file;
    }
    if (base !== null) {
        params["base"] = base;
    }
    if (fine_blur !== null) {
        params["fine_blur"] = fine_blur;
    }
    if (fine_dxy !== null) {
        params["fine_dxy"] = fine_dxy;
    }
    if (fine_dphi !== null) {
        params["fine_dphi"] = fine_dphi;
    }
    if (dprefix !== null) {
        params["dprefix"] = dprefix;
    }
    if (rprefix !== null) {
        params["rprefix"] = rprefix;
    }
    return params;
}


function v_2d_im_reg_cargs(
    params: V2dImRegParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("2dImReg");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["base_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["base_file"] ?? null)));
    }
    if ((params["base"] ?? null) !== null) {
        cargs.push(String((params["base"] ?? null)));
    }
    if ((params["nofine"] ?? null)) {
        cargs.push("-nofine");
    }
    if ((params["fine_blur"] ?? null) !== null) {
        cargs.push(String((params["fine_blur"] ?? null)));
    }
    if ((params["fine_dxy"] ?? null) !== null) {
        cargs.push(String((params["fine_dxy"] ?? null)));
    }
    if ((params["fine_dphi"] ?? null) !== null) {
        cargs.push(String((params["fine_dphi"] ?? null)));
    }
    cargs.push((params["prefix"] ?? null));
    if ((params["dprefix"] ?? null) !== null) {
        cargs.push((params["dprefix"] ?? null));
    }
    if ((params["dmm"] ?? null)) {
        cargs.push("-dmm");
    }
    if ((params["rprefix"] ?? null) !== null) {
        cargs.push((params["rprefix"] ?? null));
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    return cargs;
}


function v_2d_im_reg_outputs(
    params: V2dImRegParameters,
    execution: Execution,
): V2dImRegOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V2dImRegOutputs = {
        root: execution.outputFile("."),
        output_dataset: execution.outputFile([(params["prefix"] ?? null), ".nii"].join('')),
        dx_file: ((params["dprefix"] ?? null) !== null) ? execution.outputFile([(params["dprefix"] ?? null), ".dx"].join('')) : null,
        dy_file: ((params["dprefix"] ?? null) !== null) ? execution.outputFile([(params["dprefix"] ?? null), ".dy"].join('')) : null,
        psi_file: ((params["dprefix"] ?? null) !== null) ? execution.outputFile([(params["dprefix"] ?? null), ".psi"].join('')) : null,
        oldrms_file: ((params["rprefix"] ?? null) !== null) ? execution.outputFile([(params["rprefix"] ?? null), ".oldrms"].join('')) : null,
        newrms_file: ((params["rprefix"] ?? null) !== null) ? execution.outputFile([(params["rprefix"] ?? null), ".newrms"].join('')) : null,
    };
    return ret;
}


function v_2d_im_reg_execute(
    params: V2dImRegParameters,
    execution: Execution,
): V2dImRegOutputs {
    /**
     * 2D image registration tool for 3D+time datasets, aligning images on a slice-by-slice basis to a specified base image.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V2dImRegOutputs`).
     */
    params = execution.params(params)
    const cargs = v_2d_im_reg_cargs(params, execution)
    const ret = v_2d_im_reg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_2d_im_reg(
    input_file: InputPathType,
    prefix: string,
    base_file: InputPathType | null = null,
    base: number | null = null,
    nofine: boolean = false,
    fine_blur: number | null = null,
    fine_dxy: number | null = null,
    fine_dphi: number | null = null,
    dprefix: string | null = null,
    dmm: boolean = false,
    rprefix: string | null = null,
    debug: boolean = false,
    runner: Runner | null = null,
): V2dImRegOutputs {
    /**
     * 2D image registration tool for 3D+time datasets, aligning images on a slice-by-slice basis to a specified base image.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Filename of input 3d+time dataset to process
     * @param prefix Prefix name for output 3d+time dataset
     * @param base_file Filename of 3d+time dataset for base image (default = current input dataset)
     * @param base Time index for base image (0 <= num) (default: num = 3)
     * @param nofine Deactivate fine fit phase of image registration (default: fine fit is active)
     * @param fine_blur FWHM of blurring prior to registration (in pixels) (default: blur = 1.0)
     * @param fine_dxy Convergence tolerance for translations (in pixels) (default: dxy = 0.07)
     * @param fine_dphi Convergence tolerance for rotations (in degrees) (default: dphi = 0.21)
     * @param dprefix Write files containing the registration parameters for each slice in chronological order
     * @param dmm Change dx and dy output format from pixels to mm
     * @param rprefix Write files containing the volume RMS error for the original and the registered datasets
     * @param debug Lots of additional output to screen
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V2dImRegOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_2D_IM_REG_METADATA);
    const params = v_2d_im_reg_params(input_file, prefix, base_file, base, nofine, fine_blur, fine_dxy, fine_dphi, dprefix, dmm, rprefix, debug)
    return v_2d_im_reg_execute(params, execution);
}


export {
      V2dImRegOutputs,
      V2dImRegParameters,
      V_2D_IM_REG_METADATA,
      v_2d_im_reg,
      v_2d_im_reg_params,
};
