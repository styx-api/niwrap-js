// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BETSURF_METADATA: Metadata = {
    id: "849d1b738424e6c0c4b43c7555bbea3bc7a4d580.boutiques",
    name: "betsurf",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface BetsurfParameters {
    "@type": "fsl.betsurf";
    "t1_image": InputPathType;
    "t2_image"?: InputPathType | null | undefined;
    "bet_mesh": InputPathType;
    "t1_to_standard_mat": InputPathType;
    "output_prefix": string;
    "help_flag": boolean;
    "verbose_flag": boolean;
    "t1only_flag": boolean;
    "outline_flag": boolean;
    "mask_flag": boolean;
    "skull_mask_flag": boolean;
    "increased_precision"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.betsurf": betsurf_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.betsurf": betsurf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `betsurf(...)`.
 *
 * @interface
 */
interface BetsurfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated binary mask
     */
    output_mask: OutputPathType;
    /**
     * Generated surface outline
     */
    output_outline: OutputPathType;
    /**
     * Generated skull mask
     */
    output_skull: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param t1_image T1-weighted MRI image
 * @param bet_mesh BET Mesh File (.vtk)
 * @param t1_to_standard_mat Transformation matrix file from T1 to standard space
 * @param output_prefix Output prefix for generated files
 * @param t2_image T2-weighted MRI image (optional if using --t1only flag)
 * @param help_flag Displays help message and exits
 * @param verbose_flag Switch on diagnostic messages
 * @param t1only_flag Extraction with T1 only
 * @param outline_flag Generates all surface outlines
 * @param mask_flag Generates binary masks from the meshes
 * @param skull_mask_flag Generates skull binary mask
 * @param increased_precision Retessellates the meshes the indicated number of times (int)
 *
 * @returns Parameter dictionary
 */
function betsurf_params(
    t1_image: InputPathType,
    bet_mesh: InputPathType,
    t1_to_standard_mat: InputPathType,
    output_prefix: string,
    t2_image: InputPathType | null = null,
    help_flag: boolean = false,
    verbose_flag: boolean = false,
    t1only_flag: boolean = false,
    outline_flag: boolean = false,
    mask_flag: boolean = false,
    skull_mask_flag: boolean = false,
    increased_precision: number | null = null,
): BetsurfParameters {
    const params = {
        "@type": "fsl.betsurf" as const,
        "t1_image": t1_image,
        "bet_mesh": bet_mesh,
        "t1_to_standard_mat": t1_to_standard_mat,
        "output_prefix": output_prefix,
        "help_flag": help_flag,
        "verbose_flag": verbose_flag,
        "t1only_flag": t1only_flag,
        "outline_flag": outline_flag,
        "mask_flag": mask_flag,
        "skull_mask_flag": skull_mask_flag,
    };
    if (t2_image !== null) {
        params["t2_image"] = t2_image;
    }
    if (increased_precision !== null) {
        params["increased_precision"] = increased_precision;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function betsurf_cargs(
    params: BetsurfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("betsurf");
    cargs.push(execution.inputFile((params["t1_image"] ?? null)));
    if ((params["t2_image"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["t2_image"] ?? null)));
    }
    cargs.push(execution.inputFile((params["bet_mesh"] ?? null)));
    cargs.push(execution.inputFile((params["t1_to_standard_mat"] ?? null)));
    cargs.push((params["output_prefix"] ?? null));
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["t1only_flag"] ?? null)) {
        cargs.push("-1");
    }
    if ((params["outline_flag"] ?? null)) {
        cargs.push("-o");
    }
    if ((params["mask_flag"] ?? null)) {
        cargs.push("-m");
    }
    if ((params["skull_mask_flag"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["increased_precision"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["increased_precision"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function betsurf_outputs(
    params: BetsurfParameters,
    execution: Execution,
): BetsurfOutputs {
    const ret: BetsurfOutputs = {
        root: execution.outputFile("."),
        output_mask: execution.outputFile([(params["output_prefix"] ?? null), "_mask.nii.gz"].join('')),
        output_outline: execution.outputFile([(params["output_prefix"] ?? null), "_outline.nii.gz"].join('')),
        output_skull: execution.outputFile([(params["output_prefix"] ?? null), "_skull.nii.gz"].join('')),
    };
    return ret;
}


/**
 * betsurf
 *
 * BET Surface Finder to extract brain surfaces using T1 and T2 images.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BetsurfOutputs`).
 */
function betsurf_execute(
    params: BetsurfParameters,
    runner: Runner | null = null,
): BetsurfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BETSURF_METADATA);
    params = execution.params(params)
    const cargs = betsurf_cargs(params, execution)
    const ret = betsurf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * betsurf
 *
 * BET Surface Finder to extract brain surfaces using T1 and T2 images.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param t1_image T1-weighted MRI image
 * @param bet_mesh BET Mesh File (.vtk)
 * @param t1_to_standard_mat Transformation matrix file from T1 to standard space
 * @param output_prefix Output prefix for generated files
 * @param t2_image T2-weighted MRI image (optional if using --t1only flag)
 * @param help_flag Displays help message and exits
 * @param verbose_flag Switch on diagnostic messages
 * @param t1only_flag Extraction with T1 only
 * @param outline_flag Generates all surface outlines
 * @param mask_flag Generates binary masks from the meshes
 * @param skull_mask_flag Generates skull binary mask
 * @param increased_precision Retessellates the meshes the indicated number of times (int)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BetsurfOutputs`).
 */
function betsurf(
    t1_image: InputPathType,
    bet_mesh: InputPathType,
    t1_to_standard_mat: InputPathType,
    output_prefix: string,
    t2_image: InputPathType | null = null,
    help_flag: boolean = false,
    verbose_flag: boolean = false,
    t1only_flag: boolean = false,
    outline_flag: boolean = false,
    mask_flag: boolean = false,
    skull_mask_flag: boolean = false,
    increased_precision: number | null = null,
    runner: Runner | null = null,
): BetsurfOutputs {
    const params = betsurf_params(t1_image, bet_mesh, t1_to_standard_mat, output_prefix, t2_image, help_flag, verbose_flag, t1only_flag, outline_flag, mask_flag, skull_mask_flag, increased_precision)
    return betsurf_execute(params, runner);
}


export {
      BETSURF_METADATA,
      BetsurfOutputs,
      BetsurfParameters,
      betsurf,
      betsurf_execute,
      betsurf_params,
};
