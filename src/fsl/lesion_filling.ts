// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LESION_FILLING_METADATA: Metadata = {
    id: "31beff7be4c61479fd13acecfb2776958ac9de6f.boutiques",
    name: "lesion_filling",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface LesionFillingParameters {
    "__STYXTYPE__": "lesion_filling";
    "infile": InputPathType;
    "outfile": string;
    "lesionmask": InputPathType;
    "wmmask"?: InputPathType | null | undefined;
    "verbose_flag": boolean;
    "components_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "lesion_filling": lesion_filling_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "lesion_filling": lesion_filling_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `lesion_filling(...)`.
 *
 * @interface
 */
interface LesionFillingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Lesion filled output image
     */
    outfile: OutputPathType;
}


function lesion_filling_params(
    infile: InputPathType,
    outfile: string,
    lesionmask: InputPathType,
    wmmask: InputPathType | null = null,
    verbose_flag: boolean = false,
    components_flag: boolean = false,
    help_flag: boolean = false,
): LesionFillingParameters {
    /**
     * Build parameters.
    
     * @param infile Input image filename (e.g., T1w image)
     * @param outfile Output filename (lesion filled image)
     * @param lesionmask Filename of lesion mask image
     * @param wmmask Filename of white matter mask image
     * @param verbose_flag Switch on diagnostic messages
     * @param components_flag Save all lesion components as volumes
     * @param help_flag Display help message
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "lesion_filling" as const,
        "infile": infile,
        "outfile": outfile,
        "lesionmask": lesionmask,
        "verbose_flag": verbose_flag,
        "components_flag": components_flag,
        "help_flag": help_flag,
    };
    if (wmmask !== null) {
        params["wmmask"] = wmmask;
    }
    return params;
}


function lesion_filling_cargs(
    params: LesionFillingParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("lesion_filling");
    cargs.push(
        "-i",
        execution.inputFile((params["infile"] ?? null))
    );
    cargs.push(
        "-o",
        (params["outfile"] ?? null)
    );
    cargs.push(
        "-l",
        execution.inputFile((params["lesionmask"] ?? null))
    );
    if ((params["wmmask"] ?? null) !== null) {
        cargs.push(
            "-w",
            execution.inputFile((params["wmmask"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["components_flag"] ?? null)) {
        cargs.push("-c");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


function lesion_filling_outputs(
    params: LesionFillingParameters,
    execution: Execution,
): LesionFillingOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: LesionFillingOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


function lesion_filling_execute(
    params: LesionFillingParameters,
    execution: Execution,
): LesionFillingOutputs {
    /**
     * Lesion filling tool as part of FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `LesionFillingOutputs`).
     */
    params = execution.params(params)
    const cargs = lesion_filling_cargs(params, execution)
    const ret = lesion_filling_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function lesion_filling(
    infile: InputPathType,
    outfile: string,
    lesionmask: InputPathType,
    wmmask: InputPathType | null = null,
    verbose_flag: boolean = false,
    components_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): LesionFillingOutputs {
    /**
     * Lesion filling tool as part of FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param infile Input image filename (e.g., T1w image)
     * @param outfile Output filename (lesion filled image)
     * @param lesionmask Filename of lesion mask image
     * @param wmmask Filename of white matter mask image
     * @param verbose_flag Switch on diagnostic messages
     * @param components_flag Save all lesion components as volumes
     * @param help_flag Display help message
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `LesionFillingOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LESION_FILLING_METADATA);
    const params = lesion_filling_params(infile, outfile, lesionmask, wmmask, verbose_flag, components_flag, help_flag)
    return lesion_filling_execute(params, execution);
}


export {
      LESION_FILLING_METADATA,
      LesionFillingOutputs,
      LesionFillingParameters,
      lesion_filling,
      lesion_filling_params,
};
