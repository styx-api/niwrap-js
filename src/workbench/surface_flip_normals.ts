// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_FLIP_NORMALS_METADATA: Metadata = {
    id: "c13eef26d25b6206aec404413aebea46e79bb7a8.boutiques",
    name: "surface-flip-normals",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceFlipNormalsParameters {
    "@type": "workbench.surface-flip-normals";
    "surface": InputPathType;
    "surface_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-flip-normals": surface_flip_normals_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-flip-normals": surface_flip_normals_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_flip_normals(...)`.
 *
 * @interface
 */
interface SurfaceFlipNormalsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output surface
     */
    surface_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to flip the normals of
 * @param surface_out the output surface
 *
 * @returns Parameter dictionary
 */
function surface_flip_normals_params(
    surface: InputPathType,
    surface_out: string,
): SurfaceFlipNormalsParameters {
    const params = {
        "@type": "workbench.surface-flip-normals" as const,
        "surface": surface,
        "surface_out": surface_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_flip_normals_cargs(
    params: SurfaceFlipNormalsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-flip-normals");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["surface_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_flip_normals_outputs(
    params: SurfaceFlipNormalsParameters,
    execution: Execution,
): SurfaceFlipNormalsOutputs {
    const ret: SurfaceFlipNormalsOutputs = {
        root: execution.outputFile("."),
        surface_out: execution.outputFile([(params["surface_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-flip-normals
 *
 * Flip all tiles on a surface.
 *
 * Flips all triangles on a surface, resulting in surface normals being flipped the other direction (inward vs outward).  If you transform a surface with an affine that has negative determinant, or a warpfield that similarly flips the surface, you may end up with a surface that has normals pointing inwards, which may have display problems.  Using this command will solve that problem.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceFlipNormalsOutputs`).
 */
function surface_flip_normals_execute(
    params: SurfaceFlipNormalsParameters,
    runner: Runner | null = null,
): SurfaceFlipNormalsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_FLIP_NORMALS_METADATA);
    params = execution.params(params)
    const cargs = surface_flip_normals_cargs(params, execution)
    const ret = surface_flip_normals_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-flip-normals
 *
 * Flip all tiles on a surface.
 *
 * Flips all triangles on a surface, resulting in surface normals being flipped the other direction (inward vs outward).  If you transform a surface with an affine that has negative determinant, or a warpfield that similarly flips the surface, you may end up with a surface that has normals pointing inwards, which may have display problems.  Using this command will solve that problem.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to flip the normals of
 * @param surface_out the output surface
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceFlipNormalsOutputs`).
 */
function surface_flip_normals(
    surface: InputPathType,
    surface_out: string,
    runner: Runner | null = null,
): SurfaceFlipNormalsOutputs {
    const params = surface_flip_normals_params(surface, surface_out)
    return surface_flip_normals_execute(params, runner);
}


export {
      SURFACE_FLIP_NORMALS_METADATA,
      SurfaceFlipNormalsOutputs,
      SurfaceFlipNormalsParameters,
      surface_flip_normals,
      surface_flip_normals_execute,
      surface_flip_normals_params,
};
