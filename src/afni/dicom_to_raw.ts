// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DICOM_TO_RAW_METADATA: Metadata = {
    id: "ca648caf3773ae863aa716fd8d0405d25e6caa2c.boutiques",
    name: "dicom_to_raw",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface DicomToRawParameters {
    "@type": "afni.dicom_to_raw";
    "input_dicom": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.dicom_to_raw": dicom_to_raw_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.dicom_to_raw": dicom_to_raw_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dicom_to_raw(...)`.
 *
 * @interface
 */
interface DicomToRawOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output raw file(s)
     */
    output_raw_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dicom Input DICOM file
 *
 * @returns Parameter dictionary
 */
function dicom_to_raw_params(
    input_dicom: InputPathType,
): DicomToRawParameters {
    const params = {
        "@type": "afni.dicom_to_raw" as const,
        "input_dicom": input_dicom,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dicom_to_raw_cargs(
    params: DicomToRawParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dicom_to_raw");
    cargs.push(execution.inputFile((params["input_dicom"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dicom_to_raw_outputs(
    params: DicomToRawParameters,
    execution: Execution,
): DicomToRawOutputs {
    const ret: DicomToRawOutputs = {
        root: execution.outputFile("."),
        output_raw_file: execution.outputFile([path.basename((params["input_dicom"] ?? null)), ".raw.0001"].join('')),
    };
    return ret;
}


/**
 * Reads images from DICOM file and writes them to raw file(s).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DicomToRawOutputs`).
 */
function dicom_to_raw_execute(
    params: DicomToRawParameters,
    runner: Runner | null = null,
): DicomToRawOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DICOM_TO_RAW_METADATA);
    params = execution.params(params)
    const cargs = dicom_to_raw_cargs(params, execution)
    const ret = dicom_to_raw_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Reads images from DICOM file and writes them to raw file(s).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dicom Input DICOM file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DicomToRawOutputs`).
 */
function dicom_to_raw(
    input_dicom: InputPathType,
    runner: Runner | null = null,
): DicomToRawOutputs {
    const params = dicom_to_raw_params(input_dicom)
    return dicom_to_raw_execute(params, runner);
}


export {
      DICOM_TO_RAW_METADATA,
      DicomToRawOutputs,
      DicomToRawParameters,
      dicom_to_raw,
      dicom_to_raw_execute,
      dicom_to_raw_params,
};
