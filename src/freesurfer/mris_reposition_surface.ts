// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_REPOSITION_SURFACE_METADATA: Metadata = {
    id: "0c77cbb7786fb79ce602e33afe3529727da1fb02.boutiques",
    name: "mris_reposition_surface",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRepositionSurfaceParameters {
    "__STYXTYPE__": "mris_reposition_surface";
    "surf": InputPathType;
    "volume": InputPathType;
    "points": InputPathType;
    "output": string;
    "size"?: number | null | undefined;
    "sigma"?: number | null | undefined;
    "iterations"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_reposition_surface": mris_reposition_surface_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_reposition_surface": mris_reposition_surface_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_reposition_surface(...)`.
 *
 * @interface
 */
interface MrisRepositionSurfaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface file
     */
    output_surface: OutputPathType;
}


function mris_reposition_surface_params(
    surf: InputPathType,
    volume: InputPathType,
    points: InputPathType,
    output: string,
    size: number | null = 1,
    sigma: number | null = 2.0,
    iterations: number | null = 1,
): MrisRepositionSurfaceParameters {
    /**
     * Build parameters.
    
     * @param surf Input surface
     * @param volume Input volume
     * @param points Input points
     * @param output Output surface filename
     * @param size Size parameter for repositioning. Default is 1.
     * @param sigma Sigma. Default is 2.0.
     * @param iterations Number of iterations. Default is 1.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_reposition_surface" as const,
        "surf": surf,
        "volume": volume,
        "points": points,
        "output": output,
    };
    if (size !== null) {
        params["size"] = size;
    }
    if (sigma !== null) {
        params["sigma"] = sigma;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    return params;
}


function mris_reposition_surface_cargs(
    params: MrisRepositionSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_reposition_surface");
    cargs.push(
        "-s",
        execution.inputFile((params["surf"] ?? null))
    );
    cargs.push(
        "-v",
        execution.inputFile((params["volume"] ?? null))
    );
    cargs.push(
        "-p",
        execution.inputFile((params["points"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    if ((params["size"] ?? null) !== null) {
        cargs.push(
            "-z",
            String((params["size"] ?? null))
        );
    }
    if ((params["sigma"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["sigma"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-i",
            String((params["iterations"] ?? null))
        );
    }
    return cargs;
}


function mris_reposition_surface_outputs(
    params: MrisRepositionSurfaceParameters,
    execution: Execution,
): MrisRepositionSurfaceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisRepositionSurfaceOutputs = {
        root: execution.outputFile("."),
        output_surface: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function mris_reposition_surface_execute(
    params: MrisRepositionSurfaceParameters,
    execution: Execution,
): MrisRepositionSurfaceOutputs {
    /**
     * Reposition a surface based on the given control points (in JSON format).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisRepositionSurfaceOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_reposition_surface_cargs(params, execution)
    const ret = mris_reposition_surface_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_reposition_surface(
    surf: InputPathType,
    volume: InputPathType,
    points: InputPathType,
    output: string,
    size: number | null = 1,
    sigma: number | null = 2.0,
    iterations: number | null = 1,
    runner: Runner | null = null,
): MrisRepositionSurfaceOutputs {
    /**
     * Reposition a surface based on the given control points (in JSON format).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surf Input surface
     * @param volume Input volume
     * @param points Input points
     * @param output Output surface filename
     * @param size Size parameter for repositioning. Default is 1.
     * @param sigma Sigma. Default is 2.0.
     * @param iterations Number of iterations. Default is 1.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisRepositionSurfaceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_REPOSITION_SURFACE_METADATA);
    const params = mris_reposition_surface_params(surf, volume, points, output, size, sigma, iterations)
    return mris_reposition_surface_execute(params, execution);
}


export {
      MRIS_REPOSITION_SURFACE_METADATA,
      MrisRepositionSurfaceOutputs,
      MrisRepositionSurfaceParameters,
      mris_reposition_surface,
      mris_reposition_surface_params,
};
