// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_EIGS_TO_DT_METADATA: Metadata = {
    id: "2a859820023438ce7134628316920f709603fea4.boutiques",
    name: "3dEigsToDT",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dEigsToDtParameters {
    "@type": "afni.3dEigsToDT";
    "eig_vals": string;
    "eig_vecs": string;
    "prefix": string;
    "mask"?: InputPathType | null | undefined;
    "flip_x": boolean;
    "flip_y": boolean;
    "flip_z": boolean;
    "scale_eigs"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dEigsToDT": v_3d_eigs_to_dt_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dEigsToDT": v_3d_eigs_to_dt_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_eigs_to_dt(...)`.
 *
 * @interface
 */
interface V3dEigsToDtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output diffusion tensor (DT) file in AFNI format (BRIK)
     */
    dt_brik_output: OutputPathType;
    /**
     * Output diffusion tensor (DT) file in AFNI format (HEAD)
     */
    dt_head_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param eig_vals Searchable descriptor for finding all three required eigenvalue files. It should list all three eigenvalue files in descending order of magnitude.
 * @param eig_vecs Searchable descriptor for finding all three required eigenvector files. It should list all three eigenvector files in order matching the eigenvalue files.
 * @param prefix Prefix for the output file name. It is recommended to include a 'DT' label in it.
 * @param mask Optional mask within which to calculate uncertainty. If not provided, the data should be masked already.
 * @param flip_x Change sign of the first element of eigenvectors.
 * @param flip_y Change sign of the second element of eigenvectors.
 * @param flip_z Change sign of the third element of eigenvectors.
 * @param scale_eigs Rescale the eigenvalues by dividing by a number X > 0.
 *
 * @returns Parameter dictionary
 */
function v_3d_eigs_to_dt_params(
    eig_vals: string,
    eig_vecs: string,
    prefix: string,
    mask: InputPathType | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    scale_eigs: number | null = null,
): V3dEigsToDtParameters {
    const params = {
        "@type": "afni.3dEigsToDT" as const,
        "eig_vals": eig_vals,
        "eig_vecs": eig_vecs,
        "prefix": prefix,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (scale_eigs !== null) {
        params["scale_eigs"] = scale_eigs;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_eigs_to_dt_cargs(
    params: V3dEigsToDtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dEigsToDT");
    cargs.push(
        "-eig_vals",
        (params["eig_vals"] ?? null)
    );
    cargs.push(
        "-eig_vecs",
        (params["eig_vecs"] ?? null)
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["flip_x"] ?? null)) {
        cargs.push("-flip_x");
    }
    if ((params["flip_y"] ?? null)) {
        cargs.push("-flip_y");
    }
    if ((params["flip_z"] ?? null)) {
        cargs.push("-flip_z");
    }
    if ((params["scale_eigs"] ?? null) !== null) {
        cargs.push(
            "-scale_eigs",
            String((params["scale_eigs"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_eigs_to_dt_outputs(
    params: V3dEigsToDtParameters,
    execution: Execution,
): V3dEigsToDtOutputs {
    const ret: V3dEigsToDtOutputs = {
        root: execution.outputFile("."),
        dt_brik_output: execution.outputFile([(params["prefix"] ?? null), "_DT+orig.BRIK"].join('')),
        dt_head_output: execution.outputFile([(params["prefix"] ?? null), "_DT+orig.HEAD"].join('')),
    };
    return ret;
}


/**
 * Convert set of DTI eigenvectors and eigenvalues to a diffusion tensor, with optional value-scaling and vector-flipping.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dEigsToDtOutputs`).
 */
function v_3d_eigs_to_dt_execute(
    params: V3dEigsToDtParameters,
    runner: Runner | null = null,
): V3dEigsToDtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_EIGS_TO_DT_METADATA);
    params = execution.params(params)
    const cargs = v_3d_eigs_to_dt_cargs(params, execution)
    const ret = v_3d_eigs_to_dt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert set of DTI eigenvectors and eigenvalues to a diffusion tensor, with optional value-scaling and vector-flipping.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param eig_vals Searchable descriptor for finding all three required eigenvalue files. It should list all three eigenvalue files in descending order of magnitude.
 * @param eig_vecs Searchable descriptor for finding all three required eigenvector files. It should list all three eigenvector files in order matching the eigenvalue files.
 * @param prefix Prefix for the output file name. It is recommended to include a 'DT' label in it.
 * @param mask Optional mask within which to calculate uncertainty. If not provided, the data should be masked already.
 * @param flip_x Change sign of the first element of eigenvectors.
 * @param flip_y Change sign of the second element of eigenvectors.
 * @param flip_z Change sign of the third element of eigenvectors.
 * @param scale_eigs Rescale the eigenvalues by dividing by a number X > 0.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dEigsToDtOutputs`).
 */
function v_3d_eigs_to_dt(
    eig_vals: string,
    eig_vecs: string,
    prefix: string,
    mask: InputPathType | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    scale_eigs: number | null = null,
    runner: Runner | null = null,
): V3dEigsToDtOutputs {
    const params = v_3d_eigs_to_dt_params(eig_vals, eig_vecs, prefix, mask, flip_x, flip_y, flip_z, scale_eigs)
    return v_3d_eigs_to_dt_execute(params, runner);
}


export {
      V3dEigsToDtOutputs,
      V3dEigsToDtParameters,
      V_3D_EIGS_TO_DT_METADATA,
      v_3d_eigs_to_dt,
      v_3d_eigs_to_dt_execute,
      v_3d_eigs_to_dt_params,
};
