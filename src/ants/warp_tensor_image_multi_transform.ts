// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WARP_TENSOR_IMAGE_MULTI_TRANSFORM_METADATA: Metadata = {
    id: "013f15045b6bdcf60fcdbe3fce339b08b8439b03.boutiques",
    name: "WarpTensorImageMultiTransform",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface WarpTensorImageMultiTransformParameters {
    "@type"?: "ants/WarpTensorImageMultiTransform";
    "image_dimension": number;
    "moving_image": InputPathType;
    "output_image": string;
    "reference_image"?: InputPathType | null | undefined;
    "tightest_bounding_box": boolean;
    "reslice_by_header": boolean;
    "use_nearest_neighbor": boolean;
    "transforms": Array<string>;
    "ants_prefix"?: string | null | undefined;
    "ants_prefix_invert"?: string | null | undefined;
}
type WarpTensorImageMultiTransformParametersTagged = Required<Pick<WarpTensorImageMultiTransformParameters, '@type'>> & WarpTensorImageMultiTransformParameters;


/**
 * Output object returned when calling `WarpTensorImageMultiTransformParameters(...)`.
 *
 * @interface
 */
interface WarpTensorImageMultiTransformOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resultant transformed output image.
     */
    output_image_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Dimensionality of the image (e.g., 2D or 3D).
 * @param moving_image The moving image that will be transformed.
 * @param output_image Path for saving the transformed output image.
 * @param transforms List of transformations to apply, which can include deformation fields or affine transforms.
 * @param reference_image Reference image for reslicing or defining the transformation domain.
 * @param tightest_bounding_box Compute the tightest bounding box using all affine transformations.
 * @param reslice_by_header Use the orientation matrix and origin encoded in the image file header for reslicing.
 * @param use_nearest_neighbor Use Nearest Neighbor Interpolator for the transformation.
 * @param ants_prefix Prefix for ANTS-generated deformation and affine transformation files.
 * @param ants_prefix_invert Prefix for inverting ANTS-generated affine and deformation transformations.
 *
 * @returns Parameter dictionary
 */
function warp_tensor_image_multi_transform_params(
    image_dimension: number,
    moving_image: InputPathType,
    output_image: string,
    transforms: Array<string>,
    reference_image: InputPathType | null = null,
    tightest_bounding_box: boolean = false,
    reslice_by_header: boolean = false,
    use_nearest_neighbor: boolean = false,
    ants_prefix: string | null = null,
    ants_prefix_invert: string | null = null,
): WarpTensorImageMultiTransformParametersTagged {
    const params = {
        "@type": "ants/WarpTensorImageMultiTransform" as const,
        "image_dimension": image_dimension,
        "moving_image": moving_image,
        "output_image": output_image,
        "tightest_bounding_box": tightest_bounding_box,
        "reslice_by_header": reslice_by_header,
        "use_nearest_neighbor": use_nearest_neighbor,
        "transforms": transforms,
    };
    if (reference_image !== null) {
        params["reference_image"] = reference_image;
    }
    if (ants_prefix !== null) {
        params["ants_prefix"] = ants_prefix;
    }
    if (ants_prefix_invert !== null) {
        params["ants_prefix_invert"] = ants_prefix_invert;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function warp_tensor_image_multi_transform_cargs(
    params: WarpTensorImageMultiTransformParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("WarpTensorImageMultiTransform");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["moving_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    if ((params["reference_image"] ?? null) !== null) {
        cargs.push(
            "-R",
            execution.inputFile((params["reference_image"] ?? null))
        );
    }
    if ((params["tightest_bounding_box"] ?? false)) {
        cargs.push("--tightest-bounding-box");
    }
    if ((params["reslice_by_header"] ?? false)) {
        cargs.push("--reslice-by-header");
    }
    if ((params["use_nearest_neighbor"] ?? false)) {
        cargs.push("--use-NN");
    }
    cargs.push(...(params["transforms"] ?? null));
    if ((params["ants_prefix"] ?? null) !== null) {
        cargs.push(
            "--ANTS-prefix",
            (params["ants_prefix"] ?? null)
        );
    }
    if ((params["ants_prefix_invert"] ?? null) !== null) {
        cargs.push(
            "--ANTS-prefix-invert",
            (params["ants_prefix_invert"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function warp_tensor_image_multi_transform_outputs(
    params: WarpTensorImageMultiTransformParameters,
    execution: Execution,
): WarpTensorImageMultiTransformOutputs {
    const ret: WarpTensorImageMultiTransformOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * WarpTensorImageMultiTransform
 *
 * WarpTensorImageMultiTransform is used to apply transformations including affine and deformation fields to an image, supporting various interpolation techniques, image header reslicing, and compatibility with ANTS-generated transformations.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `WarpTensorImageMultiTransformOutputs`).
 */
function warp_tensor_image_multi_transform_execute(
    params: WarpTensorImageMultiTransformParameters,
    runner: Runner | null = null,
): WarpTensorImageMultiTransformOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WARP_TENSOR_IMAGE_MULTI_TRANSFORM_METADATA);
    params = execution.params(params)
    const cargs = warp_tensor_image_multi_transform_cargs(params, execution)
    const ret = warp_tensor_image_multi_transform_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * WarpTensorImageMultiTransform
 *
 * WarpTensorImageMultiTransform is used to apply transformations including affine and deformation fields to an image, supporting various interpolation techniques, image header reslicing, and compatibility with ANTS-generated transformations.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Dimensionality of the image (e.g., 2D or 3D).
 * @param moving_image The moving image that will be transformed.
 * @param output_image Path for saving the transformed output image.
 * @param transforms List of transformations to apply, which can include deformation fields or affine transforms.
 * @param reference_image Reference image for reslicing or defining the transformation domain.
 * @param tightest_bounding_box Compute the tightest bounding box using all affine transformations.
 * @param reslice_by_header Use the orientation matrix and origin encoded in the image file header for reslicing.
 * @param use_nearest_neighbor Use Nearest Neighbor Interpolator for the transformation.
 * @param ants_prefix Prefix for ANTS-generated deformation and affine transformation files.
 * @param ants_prefix_invert Prefix for inverting ANTS-generated affine and deformation transformations.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `WarpTensorImageMultiTransformOutputs`).
 */
function warp_tensor_image_multi_transform(
    image_dimension: number,
    moving_image: InputPathType,
    output_image: string,
    transforms: Array<string>,
    reference_image: InputPathType | null = null,
    tightest_bounding_box: boolean = false,
    reslice_by_header: boolean = false,
    use_nearest_neighbor: boolean = false,
    ants_prefix: string | null = null,
    ants_prefix_invert: string | null = null,
    runner: Runner | null = null,
): WarpTensorImageMultiTransformOutputs {
    const params = warp_tensor_image_multi_transform_params(image_dimension, moving_image, output_image, transforms, reference_image, tightest_bounding_box, reslice_by_header, use_nearest_neighbor, ants_prefix, ants_prefix_invert)
    return warp_tensor_image_multi_transform_execute(params, runner);
}


export {
      WARP_TENSOR_IMAGE_MULTI_TRANSFORM_METADATA,
      WarpTensorImageMultiTransformOutputs,
      warp_tensor_image_multi_transform,
      warp_tensor_image_multi_transform_execute,
      warp_tensor_image_multi_transform_params,
};
