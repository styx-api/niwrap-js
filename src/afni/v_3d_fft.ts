// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_FFT_METADATA: Metadata = {
    id: "251cf31407b8d42f4fb6ef0851808d440783f20f.boutiques",
    name: "3dFFT",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dFftParameters {
    "__STYXTYPE__": "3dFFT";
    "dataset": InputPathType;
    "abs": boolean;
    "phase": boolean;
    "complex": boolean;
    "inverse": boolean;
    "Lx"?: number | null | undefined;
    "Ly"?: number | null | undefined;
    "Lz"?: number | null | undefined;
    "altIN": boolean;
    "altOUT": boolean;
    "input"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dFFT": v_3d_fft_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dFFT": v_3d_fft_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_fft(...)`.
 *
 * @interface
 */
interface V3dFftOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset generated by 3dFFT.
     */
    output_dataset: OutputPathType | null;
}


function v_3d_fft_params(
    dataset: InputPathType,
    abs: boolean = false,
    phase: boolean = false,
    complex: boolean = false,
    inverse: boolean = false,
    lx: number | null = null,
    ly: number | null = null,
    lz: number | null = null,
    alt_in: boolean = false,
    alt_out: boolean = false,
    input: InputPathType | null = null,
    prefix: string | null = null,
): V3dFftParameters {
    /**
     * Build parameters.
    
     * @param dataset Input dataset (e.g., dataset.nii)
     * @param abs Outputs the magnitude of the FFT (default)
     * @param phase Outputs the phase of the FFT (-PI..PI)
     * @param complex Outputs the complex-valued FFT
     * @param inverse Does the inverse FFT instead of the forward FFT
     * @param lx Use FFT of length 'xx' in the x-direction
     * @param ly Use FFT of length 'yy' in the y-direction
     * @param lz Use FFT of length 'zz' in the z-direction
     * @param alt_in Alternate signs of input data before FFT to bring zero frequency from edge of FFT-space to center of grid for cosmetic purposes.
     * @param alt_out Alternate signs of output data after FFT. Use '-altOUT' with '-altIN' on the forward transform to get the signs of the recovered image correct.
     * @param input Read the input dataset from specified file instead of from the last argument on the command line.
     * @param prefix Use specified prefix for the output dataset.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dFFT" as const,
        "dataset": dataset,
        "abs": abs,
        "phase": phase,
        "complex": complex,
        "inverse": inverse,
        "altIN": alt_in,
        "altOUT": alt_out,
    };
    if (lx !== null) {
        params["Lx"] = lx;
    }
    if (ly !== null) {
        params["Ly"] = ly;
    }
    if (lz !== null) {
        params["Lz"] = lz;
    }
    if (input !== null) {
        params["input"] = input;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function v_3d_fft_cargs(
    params: V3dFftParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dFFT");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    if ((params["abs"] ?? null)) {
        cargs.push("--abs");
    }
    if ((params["phase"] ?? null)) {
        cargs.push("--phase");
    }
    if ((params["complex"] ?? null)) {
        cargs.push("--complex");
    }
    if ((params["inverse"] ?? null)) {
        cargs.push("--inverse");
    }
    if ((params["Lx"] ?? null) !== null) {
        cargs.push(
            "--Lx",
            String((params["Lx"] ?? null))
        );
    }
    if ((params["Ly"] ?? null) !== null) {
        cargs.push(
            "--Ly",
            String((params["Ly"] ?? null))
        );
    }
    if ((params["Lz"] ?? null) !== null) {
        cargs.push(
            "--Lz",
            String((params["Lz"] ?? null))
        );
    }
    if ((params["altIN"] ?? null)) {
        cargs.push("--altIN");
    }
    if ((params["altOUT"] ?? null)) {
        cargs.push("--altOUT");
    }
    if ((params["input"] ?? null) !== null) {
        cargs.push(
            "--input",
            execution.inputFile((params["input"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "--prefix",
            (params["prefix"] ?? null)
        );
    }
    return cargs;
}


function v_3d_fft_outputs(
    params: V3dFftParameters,
    execution: Execution,
): V3dFftOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dFftOutputs = {
        root: execution.outputFile("."),
        output_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function v_3d_fft_execute(
    params: V3dFftParameters,
    execution: Execution,
): V3dFftOutputs {
    /**
     * Performs the FFT of the input dataset in 3 directions (x, y, z) and produces the output dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dFftOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_fft_cargs(params, execution)
    const ret = v_3d_fft_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_fft(
    dataset: InputPathType,
    abs: boolean = false,
    phase: boolean = false,
    complex: boolean = false,
    inverse: boolean = false,
    lx: number | null = null,
    ly: number | null = null,
    lz: number | null = null,
    alt_in: boolean = false,
    alt_out: boolean = false,
    input: InputPathType | null = null,
    prefix: string | null = null,
    runner: Runner | null = null,
): V3dFftOutputs {
    /**
     * Performs the FFT of the input dataset in 3 directions (x, y, z) and produces the output dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dataset Input dataset (e.g., dataset.nii)
     * @param abs Outputs the magnitude of the FFT (default)
     * @param phase Outputs the phase of the FFT (-PI..PI)
     * @param complex Outputs the complex-valued FFT
     * @param inverse Does the inverse FFT instead of the forward FFT
     * @param lx Use FFT of length 'xx' in the x-direction
     * @param ly Use FFT of length 'yy' in the y-direction
     * @param lz Use FFT of length 'zz' in the z-direction
     * @param alt_in Alternate signs of input data before FFT to bring zero frequency from edge of FFT-space to center of grid for cosmetic purposes.
     * @param alt_out Alternate signs of output data after FFT. Use '-altOUT' with '-altIN' on the forward transform to get the signs of the recovered image correct.
     * @param input Read the input dataset from specified file instead of from the last argument on the command line.
     * @param prefix Use specified prefix for the output dataset.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dFftOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_FFT_METADATA);
    const params = v_3d_fft_params(dataset, abs, phase, complex, inverse, lx, ly, lz, alt_in, alt_out, input, prefix)
    return v_3d_fft_execute(params, execution);
}


export {
      V3dFftOutputs,
      V3dFftParameters,
      V_3D_FFT_METADATA,
      v_3d_fft,
      v_3d_fft_params,
};
