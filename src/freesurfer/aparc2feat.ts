// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APARC2FEAT_METADATA: Metadata = {
    id: "6a7b6c4f4e986640f48c730530dcf6868ecd3452.boutiques",
    name: "aparc2feat",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Aparc2featParameters {
    "__STYXTYPE__": "aparc2feat";
    "feat_directories": string;
    "featdirfile"?: InputPathType | null | undefined;
    "hemi"?: string | null | undefined;
    "annot"?: string | null | undefined;
    "annot_a2005s_flag": boolean;
    "annot_a2009s_flag": boolean;
    "debug_flag": boolean;
    "help_flag": boolean;
    "version_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "aparc2feat": aparc2feat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "aparc2feat": aparc2feat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `aparc2feat(...)`.
 *
 * @interface
 */
interface Aparc2featOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output Left Hemisphere aparc in nifti format.
     */
    lh_aparc_output: OutputPathType;
    /**
     * Output Right Hemisphere aparc in nifti format.
     */
    rh_aparc_output: OutputPathType;
}


function aparc2feat_params(
    feat_directories: string,
    featdirfile: InputPathType | null = null,
    hemi: string | null = null,
    annot: string | null = null,
    annot_a2005s_flag: boolean = false,
    annot_a2009s_flag: boolean = false,
    debug_flag: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
): Aparc2featParameters {
    /**
     * Build parameters.
    
     * @param feat_directories FEAT output directory. Multiple --feat arguments can be supplied.
     * @param featdirfile File with a list of FEAT directories. Multiple --featdirfile flags are allowed.
     * @param hemi Resample hemisphere only (default is both rh and lh).
     * @param annot Specify something other than aparc.
     * @param annot_a2005s_flag Specify annotation = aparc.a2005s.
     * @param annot_a2009s_flag Specify annotation = aparc.a2009s.
     * @param debug_flag Turn on debugging.
     * @param help_flag Print help and exit.
     * @param version_flag Print version and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "aparc2feat" as const,
        "feat_directories": feat_directories,
        "annot_a2005s_flag": annot_a2005s_flag,
        "annot_a2009s_flag": annot_a2009s_flag,
        "debug_flag": debug_flag,
        "help_flag": help_flag,
        "version_flag": version_flag,
    };
    if (featdirfile !== null) {
        params["featdirfile"] = featdirfile;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (annot !== null) {
        params["annot"] = annot;
    }
    return params;
}


function aparc2feat_cargs(
    params: Aparc2featParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("aparc2feat");
    cargs.push(
        "--feat",
        (params["feat_directories"] ?? null)
    );
    if ((params["featdirfile"] ?? null) !== null) {
        cargs.push(
            "--featdirfile",
            execution.inputFile((params["featdirfile"] ?? null))
        );
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["annot"] ?? null) !== null) {
        cargs.push(
            "--annot",
            (params["annot"] ?? null)
        );
    }
    if ((params["annot_a2005s_flag"] ?? null)) {
        cargs.push("--a2005s");
    }
    if ((params["annot_a2009s_flag"] ?? null)) {
        cargs.push("--a2009s");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function aparc2feat_outputs(
    params: Aparc2featParameters,
    execution: Execution,
): Aparc2featOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Aparc2featOutputs = {
        root: execution.outputFile("."),
        lh_aparc_output: execution.outputFile([(params["feat_directories"] ?? null), "/reg/freesurfer/lh.aparc.nii.gz"].join('')),
        rh_aparc_output: execution.outputFile([(params["feat_directories"] ?? null), "/reg/freesurfer/rh.aparc.nii.gz"].join('')),
    };
    return ret;
}


function aparc2feat_execute(
    params: Aparc2featParameters,
    execution: Execution,
): Aparc2featOutputs {
    /**
     * Resamples the FreeSurfer automatic cortical segmentation to the FEAT functional space.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Aparc2featOutputs`).
     */
    params = execution.params(params)
    const cargs = aparc2feat_cargs(params, execution)
    const ret = aparc2feat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function aparc2feat(
    feat_directories: string,
    featdirfile: InputPathType | null = null,
    hemi: string | null = null,
    annot: string | null = null,
    annot_a2005s_flag: boolean = false,
    annot_a2009s_flag: boolean = false,
    debug_flag: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
    runner: Runner | null = null,
): Aparc2featOutputs {
    /**
     * Resamples the FreeSurfer automatic cortical segmentation to the FEAT functional space.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param feat_directories FEAT output directory. Multiple --feat arguments can be supplied.
     * @param featdirfile File with a list of FEAT directories. Multiple --featdirfile flags are allowed.
     * @param hemi Resample hemisphere only (default is both rh and lh).
     * @param annot Specify something other than aparc.
     * @param annot_a2005s_flag Specify annotation = aparc.a2005s.
     * @param annot_a2009s_flag Specify annotation = aparc.a2009s.
     * @param debug_flag Turn on debugging.
     * @param help_flag Print help and exit.
     * @param version_flag Print version and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Aparc2featOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APARC2FEAT_METADATA);
    const params = aparc2feat_params(feat_directories, featdirfile, hemi, annot, annot_a2005s_flag, annot_a2009s_flag, debug_flag, help_flag, version_flag)
    return aparc2feat_execute(params, execution);
}


export {
      APARC2FEAT_METADATA,
      Aparc2featOutputs,
      Aparc2featParameters,
      aparc2feat,
      aparc2feat_params,
};
