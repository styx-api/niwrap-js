// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XFMROT_METADATA: Metadata = {
    id: "8a5ccaa8ac132b29b0a8eb8461062c564cf46d22.boutiques",
    name: "xfmrot",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface XfmrotParameters {
    "@type"?: "freesurfer/xfmrot";
    "transform_file": InputPathType;
    "input_vector_file": InputPathType;
    "output_vector_file"?: string | null | undefined;
}
type XfmrotParametersTagged = Required<Pick<XfmrotParameters, '@type'>> & XfmrotParameters;


/**
 * Output object returned when calling `XfmrotParameters(...)`.
 *
 * @interface
 */
interface XfmrotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The transformed output vector file with the same format as input.
     */
    transformed_vector: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param transform_file Transform file, can be an eddy_correct/eddy log file or a .mat file.
 * @param input_vector_file Input vector file which can be formatted in 3 rows or 3 columns.
 * @param output_vector_file Output vector file will have the same format as input.
 *
 * @returns Parameter dictionary
 */
function xfmrot_params(
    transform_file: InputPathType,
    input_vector_file: InputPathType,
    output_vector_file: string | null = null,
): XfmrotParametersTagged {
    const params = {
        "@type": "freesurfer/xfmrot" as const,
        "transform_file": transform_file,
        "input_vector_file": input_vector_file,
    };
    if (output_vector_file !== null) {
        params["output_vector_file"] = output_vector_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function xfmrot_cargs(
    params: XfmrotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("xfmrot");
    cargs.push(execution.inputFile((params["transform_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_vector_file"] ?? null)));
    if ((params["output_vector_file"] ?? null) !== null) {
        cargs.push((params["output_vector_file"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function xfmrot_outputs(
    params: XfmrotParameters,
    execution: Execution,
): XfmrotOutputs {
    const ret: XfmrotOutputs = {
        root: execution.outputFile("."),
        transformed_vector: ((params["output_vector_file"] ?? null) !== null) ? execution.outputFile([(params["output_vector_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * xfmrot
 *
 * Tool to apply a transformation defined in a transform file to an input vector file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XfmrotOutputs`).
 */
function xfmrot_execute(
    params: XfmrotParameters,
    runner: Runner | null = null,
): XfmrotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XFMROT_METADATA);
    params = execution.params(params)
    const cargs = xfmrot_cargs(params, execution)
    const ret = xfmrot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * xfmrot
 *
 * Tool to apply a transformation defined in a transform file to an input vector file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param transform_file Transform file, can be an eddy_correct/eddy log file or a .mat file.
 * @param input_vector_file Input vector file which can be formatted in 3 rows or 3 columns.
 * @param output_vector_file Output vector file will have the same format as input.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XfmrotOutputs`).
 */
function xfmrot(
    transform_file: InputPathType,
    input_vector_file: InputPathType,
    output_vector_file: string | null = null,
    runner: Runner | null = null,
): XfmrotOutputs {
    const params = xfmrot_params(transform_file, input_vector_file, output_vector_file)
    return xfmrot_execute(params, runner);
}


export {
      XFMROT_METADATA,
      XfmrotOutputs,
      xfmrot,
      xfmrot_execute,
      xfmrot_params,
};
