// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DBUCKET_METADATA: Metadata = {
    id: "24263e7460b92cc3d7edf73c1101058593a99f03.boutiques",
    name: "3dbucket",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dbucketParameters {
    "__STYXTYPE__": "3dbucket";
    "prefix"?: string | null | undefined;
    "output"?: string | null | undefined;
    "session"?: string | null | undefined;
    "glueto"?: string | null | undefined;
    "aglueto"?: string | null | undefined;
    "dry": boolean;
    "verbose": boolean;
    "fbuc": boolean;
    "abuc": boolean;
    "input_files": Array<string>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dbucket": v_3dbucket_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dbucket(...)`.
 *
 * @interface
 */
interface V3dbucketOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v_3dbucket_params(
    input_files: Array<string>,
    prefix: string | null = null,
    output: string | null = null,
    session: string | null = null,
    glueto: string | null = null,
    aglueto: string | null = null,
    dry: boolean = false,
    verbose: boolean = false,
    fbuc: boolean = false,
    abuc: boolean = false,
): V3dbucketParameters {
    /**
     * Build parameters.
    
     * @param input_files Input datasets with optional sub-brick selection.
     * @param prefix Use 'pname' for the output dataset prefix name.
     * @param output Use 'pname' for the output dataset prefix name.
     * @param session Use 'dir' for the output dataset session directory. [default='./'=current working directory]
     * @param glueto Append bricks to the end of the 'fname' dataset.
     * @param aglueto If fname dataset does not exist, create it (like -prefix). Otherwise append to fname (like -glueto).
     * @param dry Execute a 'dry run'; only print out what would be done.
     * @param verbose Print out some verbose output as the program proceeds.
     * @param fbuc Create a functional bucket.
     * @param abuc Create an anatomical bucket. If neither of these options is given, the output type is determined from the first input type.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dbucket" as const,
        "dry": dry,
        "verbose": verbose,
        "fbuc": fbuc,
        "abuc": abuc,
        "input_files": input_files,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (output !== null) {
        params["output"] = output;
    }
    if (session !== null) {
        params["session"] = session;
    }
    if (glueto !== null) {
        params["glueto"] = glueto;
    }
    if (aglueto !== null) {
        params["aglueto"] = aglueto;
    }
    return params;
}


function v_3dbucket_cargs(
    params: V3dbucketParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dbucket");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "-output",
            (params["output"] ?? null)
        );
    }
    if ((params["session"] ?? null) !== null) {
        cargs.push(
            "-session",
            (params["session"] ?? null)
        );
    }
    if ((params["glueto"] ?? null) !== null) {
        cargs.push(
            "-glueto",
            (params["glueto"] ?? null)
        );
    }
    if ((params["aglueto"] ?? null) !== null) {
        cargs.push(
            "-aglueto",
            (params["aglueto"] ?? null)
        );
    }
    if ((params["dry"] ?? null)) {
        cargs.push("-dry");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["fbuc"] ?? null)) {
        cargs.push("-fbuc");
    }
    if ((params["abuc"] ?? null)) {
        cargs.push("-abuc");
    }
    cargs.push(...(params["input_files"] ?? null));
    return cargs;
}


function v_3dbucket_outputs(
    params: V3dbucketParameters,
    execution: Execution,
): V3dbucketOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dbucketOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v_3dbucket_execute(
    params: V3dbucketParameters,
    execution: Execution,
): V3dbucketOutputs {
    /**
     * Concatenate sub-bricks from input datasets into one big bucket dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dbucketOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dbucket_cargs(params, execution)
    const ret = v_3dbucket_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3dbucket(
    input_files: Array<string>,
    prefix: string | null = null,
    output: string | null = null,
    session: string | null = null,
    glueto: string | null = null,
    aglueto: string | null = null,
    dry: boolean = false,
    verbose: boolean = false,
    fbuc: boolean = false,
    abuc: boolean = false,
    runner: Runner | null = null,
): V3dbucketOutputs {
    /**
     * Concatenate sub-bricks from input datasets into one big bucket dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_files Input datasets with optional sub-brick selection.
     * @param prefix Use 'pname' for the output dataset prefix name.
     * @param output Use 'pname' for the output dataset prefix name.
     * @param session Use 'dir' for the output dataset session directory. [default='./'=current working directory]
     * @param glueto Append bricks to the end of the 'fname' dataset.
     * @param aglueto If fname dataset does not exist, create it (like -prefix). Otherwise append to fname (like -glueto).
     * @param dry Execute a 'dry run'; only print out what would be done.
     * @param verbose Print out some verbose output as the program proceeds.
     * @param fbuc Create a functional bucket.
     * @param abuc Create an anatomical bucket. If neither of these options is given, the output type is determined from the first input type.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dbucketOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DBUCKET_METADATA);
    const params = v_3dbucket_params(input_files, prefix, output, session, glueto, aglueto, dry, verbose, fbuc, abuc)
    return v_3dbucket_execute(params, execution);
}


export {
      V3dbucketOutputs,
      V3dbucketParameters,
      V_3DBUCKET_METADATA,
      v_3dbucket,
      v_3dbucket_params,
};
