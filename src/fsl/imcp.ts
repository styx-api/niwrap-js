// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMCP_METADATA: Metadata = {
    id: "3ce02a1e9e4c018cb776d50ddced228a47e4d1ae.boutiques",
    name: "imcp",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ImcpParameters {
    "__STYXTYPE__": "imcp";
    "infiles": Array<InputPathType>;
    "output_location": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "imcp": imcp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "imcp": imcp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imcp(...)`.
 *
 * @interface
 */
interface ImcpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file or directory
     */
    outfiles: OutputPathType;
}


function imcp_params(
    infiles: Array<InputPathType>,
    output_location: string,
): ImcpParameters {
    /**
     * Build parameters.
    
     * @param infiles Input image files (e.g. img1.nii.gz, img2.nii.gz)
     * @param output_location Output file or directory
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "imcp" as const,
        "infiles": infiles,
        "output_location": output_location,
    };
    return params;
}


function imcp_cargs(
    params: ImcpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("imcp");
    cargs.push(...(params["infiles"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["output_location"] ?? null));
    return cargs;
}


function imcp_outputs(
    params: ImcpParameters,
    execution: Execution,
): ImcpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ImcpOutputs = {
        root: execution.outputFile("."),
        outfiles: execution.outputFile([(params["output_location"] ?? null)].join('')),
    };
    return ret;
}


function imcp_execute(
    params: ImcpParameters,
    execution: Execution,
): ImcpOutputs {
    /**
     * Copy images from one location to another.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ImcpOutputs`).
     */
    params = execution.params(params)
    const cargs = imcp_cargs(params, execution)
    const ret = imcp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function imcp(
    infiles: Array<InputPathType>,
    output_location: string,
    runner: Runner | null = null,
): ImcpOutputs {
    /**
     * Copy images from one location to another.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param infiles Input image files (e.g. img1.nii.gz, img2.nii.gz)
     * @param output_location Output file or directory
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ImcpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMCP_METADATA);
    const params = imcp_params(infiles, output_location)
    return imcp_execute(params, execution);
}


export {
      IMCP_METADATA,
      ImcpOutputs,
      ImcpParameters,
      imcp,
      imcp_params,
};
