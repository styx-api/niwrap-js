// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_SIMPLIFY_COST_PY_METADATA: Metadata = {
    id: "829e8e6deae200b0466a903fca638f1647be7707.boutiques",
    name: "adjunct_simplify_cost.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctSimplifyCostPyParameters {
    "@type"?: "afni/adjunct_simplify_cost.py";
    "cost_function": string;
}
type AdjunctSimplifyCostPyParametersTagged = Required<Pick<AdjunctSimplifyCostPyParameters, '@type'>> & AdjunctSimplifyCostPyParameters;


/**
 * Output object returned when calling `AdjunctSimplifyCostPyParameters(...)`.
 *
 * @interface
 */
interface AdjunctSimplifyCostPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cost_function The cost function name to be simplified.
 *
 * @returns Parameter dictionary
 */
function adjunct_simplify_cost_py_params(
    cost_function: string,
): AdjunctSimplifyCostPyParametersTagged {
    const params = {
        "@type": "afni/adjunct_simplify_cost.py" as const,
        "cost_function": cost_function,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function adjunct_simplify_cost_py_cargs(
    params: AdjunctSimplifyCostPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("adjunct_simplify_cost.py");
    cargs.push((params["cost_function"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function adjunct_simplify_cost_py_outputs(
    params: AdjunctSimplifyCostPyParameters,
    execution: Execution,
): AdjunctSimplifyCostPyOutputs {
    const ret: AdjunctSimplifyCostPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * adjunct_simplify_cost.py
 *
 * Simplifies a cost function name by removing the '+' and anything following it.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctSimplifyCostPyOutputs`).
 */
function adjunct_simplify_cost_py_execute(
    params: AdjunctSimplifyCostPyParameters,
    runner: Runner | null = null,
): AdjunctSimplifyCostPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_SIMPLIFY_COST_PY_METADATA);
    params = execution.params(params)
    const cargs = adjunct_simplify_cost_py_cargs(params, execution)
    const ret = adjunct_simplify_cost_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * adjunct_simplify_cost.py
 *
 * Simplifies a cost function name by removing the '+' and anything following it.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param cost_function The cost function name to be simplified.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctSimplifyCostPyOutputs`).
 */
function adjunct_simplify_cost_py(
    cost_function: string,
    runner: Runner | null = null,
): AdjunctSimplifyCostPyOutputs {
    const params = adjunct_simplify_cost_py_params(cost_function)
    return adjunct_simplify_cost_py_execute(params, runner);
}


export {
      ADJUNCT_SIMPLIFY_COST_PY_METADATA,
      AdjunctSimplifyCostPyOutputs,
      adjunct_simplify_cost_py,
      adjunct_simplify_cost_py_execute,
      adjunct_simplify_cost_py_params,
};
