// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_NEUROIMAGING_BATTERY_METADATA: Metadata = {
    id: "8d5f7d9ec665c8a4728e1d76b9ae72be2a9a3489.boutiques",
    name: "antsNeuroimagingBattery",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsNeuroimagingBatteryParameters {
    "__STYXTYPE__": "antsNeuroimagingBattery";
    "input_directory": string;
    "output_directory": string;
    "output_name": string;
    "anatomical_image": InputPathType;
    "anatomical_mask": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "antsNeuroimagingBattery": ants_neuroimaging_battery_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "antsNeuroimagingBattery": ants_neuroimaging_battery_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_neuroimaging_battery(...)`.
 *
 * @interface
 */
interface AntsNeuroimagingBatteryOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transform files.
     */
    output_transform: OutputPathType;
}


function ants_neuroimaging_battery_params(
    input_directory: string,
    output_directory: string,
    output_name: string,
    anatomical_image: InputPathType,
    anatomical_mask: InputPathType,
): AntsNeuroimagingBatteryParameters {
    /**
     * Build parameters.
    
     * @param input_directory Directory where to look for modality images.
     * @param output_directory Directory where output goes (where antsCorticalThickness output lives).
     * @param output_name File prefix for outputs.
     * @param anatomical_image Reference subject image (usually T1).
     * @param anatomical_mask Mask of anatomical image, should contain cerebrum, cerebellum, and brainstem.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "antsNeuroimagingBattery" as const,
        "input_directory": input_directory,
        "output_directory": output_directory,
        "output_name": output_name,
        "anatomical_image": anatomical_image,
        "anatomical_mask": anatomical_mask,
    };
    return params;
}


function ants_neuroimaging_battery_cargs(
    params: AntsNeuroimagingBatteryParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("antsNeuroimagingBattery.pl");
    cargs.push(
        "--input-directory",
        (params["input_directory"] ?? null)
    );
    cargs.push(
        "--output-directory",
        (params["output_directory"] ?? null)
    );
    cargs.push(
        "--output-name",
        (params["output_name"] ?? null)
    );
    cargs.push(
        "--anatomical",
        execution.inputFile((params["anatomical_image"] ?? null))
    );
    cargs.push(
        "--anatomical-mask",
        execution.inputFile((params["anatomical_mask"] ?? null))
    );
    cargs.push("[OPTIONAL_INPUTS]");
    return cargs;
}


function ants_neuroimaging_battery_outputs(
    params: AntsNeuroimagingBatteryParameters,
    execution: Execution,
): AntsNeuroimagingBatteryOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AntsNeuroimagingBatteryOutputs = {
        root: execution.outputFile("."),
        output_transform: execution.outputFile([(params["output_directory"] ?? null), "/", (params["output_name"] ?? null), ".*"].join('')),
    };
    return ret;
}


function ants_neuroimaging_battery_execute(
    params: AntsNeuroimagingBatteryParameters,
    execution: Execution,
): AntsNeuroimagingBatteryOutputs {
    /**
     * Align MR modalities to a common within-subject (and optional template) space.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AntsNeuroimagingBatteryOutputs`).
     */
    params = execution.params(params)
    const cargs = ants_neuroimaging_battery_cargs(params, execution)
    const ret = ants_neuroimaging_battery_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ants_neuroimaging_battery(
    input_directory: string,
    output_directory: string,
    output_name: string,
    anatomical_image: InputPathType,
    anatomical_mask: InputPathType,
    runner: Runner | null = null,
): AntsNeuroimagingBatteryOutputs {
    /**
     * Align MR modalities to a common within-subject (and optional template) space.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param input_directory Directory where to look for modality images.
     * @param output_directory Directory where output goes (where antsCorticalThickness output lives).
     * @param output_name File prefix for outputs.
     * @param anatomical_image Reference subject image (usually T1).
     * @param anatomical_mask Mask of anatomical image, should contain cerebrum, cerebellum, and brainstem.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AntsNeuroimagingBatteryOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_NEUROIMAGING_BATTERY_METADATA);
    const params = ants_neuroimaging_battery_params(input_directory, output_directory, output_name, anatomical_image, anatomical_mask)
    return ants_neuroimaging_battery_execute(params, execution);
}


export {
      ANTS_NEUROIMAGING_BATTERY_METADATA,
      AntsNeuroimagingBatteryOutputs,
      AntsNeuroimagingBatteryParameters,
      ants_neuroimaging_battery,
      ants_neuroimaging_battery_params,
};
