// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_SUMA_FS_MASK_AND_QC_METADATA: Metadata = {
    id: "a5fd3e30999988458acf431df9f21ab685cbbe45.boutiques",
    name: "adjunct_suma_fs_mask_and_qc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctSumaFsMaskAndQcParameters {
    "@type": "afni.adjunct_suma_fs_mask_and_qc";
    "subj_id": string;
    "suma_dir": string;
    "no_clean": boolean;
    "help": boolean;
    "hview": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.adjunct_suma_fs_mask_and_qc": adjunct_suma_fs_mask_and_qc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.adjunct_suma_fs_mask_and_qc": adjunct_suma_fs_mask_and_qc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_suma_fs_mask_and_qc(...)`.
 *
 * @interface
 */
interface AdjunctSumaFsMaskAndQcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Whole brain mask based on the FS parcellation created by this script.
     */
    fs_parc_wb_mask: OutputPathType;
    /**
     * QC image with overlay of brainmask.nii* volume in red and parcellated subset in black.
     */
    qc_image_00: OutputPathType;
    /**
     * QC image with overlay of fs_parc_wb_mask.nii.gz.
     */
    qc_image_01: OutputPathType;
    /**
     * QC image with overlay of tissue segmentations.
     */
    qc_image_02: OutputPathType;
    /**
     * QC image with overlay of GM.
     */
    qc_image_03: OutputPathType;
    /**
     * QC image with overlay of WM.
     */
    qc_image_04: OutputPathType;
    /**
     * QC image with overlay of "2000" atlas parcellation.
     */
    qc_image_05: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subj_id Subject ID
 * @param suma_dir SUMA/ directory output by AFNI's @SUMA_Make_Spec_FS
 * @param no_clean Do not remove temporary working subdirectory (default: remove it)
 * @param help Show help
 * @param hview Show help in text editor
 * @param version Show version
 *
 * @returns Parameter dictionary
 */
function adjunct_suma_fs_mask_and_qc_params(
    subj_id: string,
    suma_dir: string,
    no_clean: boolean = false,
    help: boolean = false,
    hview: boolean = false,
    version: boolean = false,
): AdjunctSumaFsMaskAndQcParameters {
    const params = {
        "@type": "afni.adjunct_suma_fs_mask_and_qc" as const,
        "subj_id": subj_id,
        "suma_dir": suma_dir,
        "no_clean": no_clean,
        "help": help,
        "hview": hview,
        "version": version,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function adjunct_suma_fs_mask_and_qc_cargs(
    params: AdjunctSumaFsMaskAndQcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("adjunct_suma_fs_mask_and_qc");
    cargs.push(
        "-sid",
        (params["subj_id"] ?? null)
    );
    cargs.push(
        "-suma_dir",
        (params["suma_dir"] ?? null)
    );
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["hview"] ?? null)) {
        cargs.push("-hview");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function adjunct_suma_fs_mask_and_qc_outputs(
    params: AdjunctSumaFsMaskAndQcParameters,
    execution: Execution,
): AdjunctSumaFsMaskAndQcOutputs {
    const ret: AdjunctSumaFsMaskAndQcOutputs = {
        root: execution.outputFile("."),
        fs_parc_wb_mask: execution.outputFile(["SUMA/fs_parc_wb_mask.nii.gz"].join('')),
        qc_image_00: execution.outputFile(["SUMA/qc_00*.jpg"].join('')),
        qc_image_01: execution.outputFile(["SUMA/qc_01*.jpg"].join('')),
        qc_image_02: execution.outputFile(["SUMA/qc_02*.jpg"].join('')),
        qc_image_03: execution.outputFile(["SUMA/qc_03*.jpg"].join('')),
        qc_image_04: execution.outputFile(["SUMA/qc_04*.jpg"].join('')),
        qc_image_05: execution.outputFile(["SUMA/qc_05*.jpg"].join('')),
    };
    return ret;
}


/**
 * Script for quickly making some QC images for the SUMA/ directory created by @SUMA_Make_Spec_FS after running FreeSurfer's recon-all.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `AdjunctSumaFsMaskAndQcOutputs`).
 */
function adjunct_suma_fs_mask_and_qc_execute(
    params: AdjunctSumaFsMaskAndQcParameters,
    execution: Execution,
): AdjunctSumaFsMaskAndQcOutputs {
    params = execution.params(params)
    const cargs = adjunct_suma_fs_mask_and_qc_cargs(params, execution)
    const ret = adjunct_suma_fs_mask_and_qc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Script for quickly making some QC images for the SUMA/ directory created by @SUMA_Make_Spec_FS after running FreeSurfer's recon-all.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param subj_id Subject ID
 * @param suma_dir SUMA/ directory output by AFNI's @SUMA_Make_Spec_FS
 * @param no_clean Do not remove temporary working subdirectory (default: remove it)
 * @param help Show help
 * @param hview Show help in text editor
 * @param version Show version
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctSumaFsMaskAndQcOutputs`).
 */
function adjunct_suma_fs_mask_and_qc(
    subj_id: string,
    suma_dir: string,
    no_clean: boolean = false,
    help: boolean = false,
    hview: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): AdjunctSumaFsMaskAndQcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_SUMA_FS_MASK_AND_QC_METADATA);
    const params = adjunct_suma_fs_mask_and_qc_params(subj_id, suma_dir, no_clean, help, hview, version)
    return adjunct_suma_fs_mask_and_qc_execute(params, execution);
}


export {
      ADJUNCT_SUMA_FS_MASK_AND_QC_METADATA,
      AdjunctSumaFsMaskAndQcOutputs,
      AdjunctSumaFsMaskAndQcParameters,
      adjunct_suma_fs_mask_and_qc,
      adjunct_suma_fs_mask_and_qc_cargs,
      adjunct_suma_fs_mask_and_qc_execute,
      adjunct_suma_fs_mask_and_qc_outputs,
      adjunct_suma_fs_mask_and_qc_params,
};
