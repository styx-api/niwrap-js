// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FILL_METADATA: Metadata = {
    id: "2a100d8e479ae058f7c3c1d4ee987f6a69d4ae3f.boutiques",
    name: "mri_fill",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFillParameters {
    "@type": "freesurfer.mri_fill";
    "input_mr_dir": string;
    "output_mr_dir": string;
    "threshold"?: number | null | undefined;
    "xform_name"?: string | null | undefined;
    "segmentation_file"?: InputPathType | null | undefined;
    "atlas_file"?: InputPathType | null | undefined;
    "fill_ven": boolean;
    "seed_cc_tal"?: Array<number> | null | undefined;
    "seed_pons_tal"?: Array<number> | null | undefined;
    "seed_lh_tal"?: Array<number> | null | undefined;
    "seed_rh_tal"?: Array<number> | null | undefined;
    "seed_cc_vox"?: Array<number> | null | undefined;
    "seed_pons_vox"?: Array<number> | null | undefined;
    "auto_man_files"?: Array<string> | null | undefined;
    "no_auto_man": boolean;
    "pointset_args"?: Array<string> | null | undefined;
    "ctab_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_fill": mri_fill_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_fill": mri_fill_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_fill(...)`.
 *
 * @interface
 */
interface MriFillOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The filled volume for the cortical reconstruction, used for subsequent surface tessellation
     */
    filled_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_mr_dir Input MR directory
 * @param output_mr_dir Output MR directory
 * @param threshold Specify fill_holes threshold (default=1)
 * @param xform_name Use xform dst offset to get an accurate Talairach volume
 * @param segmentation_file ASEG volume used to perform fill
 * @param atlas_file Specify atlas to use for auto-filling
 * @param fill_ven Fill ventricles
 * @param seed_cc_tal Talairach coords of the seed for the corpus callosum (three numerical values required)
 * @param seed_pons_tal Talairach coords of the seed for the pons (three numerical values required)
 * @param seed_lh_tal Talairach coords of the white matter seed for the left hemisphere (three numerical values required)
 * @param seed_rh_tal Talairach coords of the white matter seed for the right hemisphere (three numerical values required)
 * @param seed_cc_vox Voxel coords of the seed for the corpus callosum (three numerical values required)
 * @param seed_pons_vox Voxel coords of the seed for the pons (three numerical values required)
 * @param auto_man_files Get edits based on the difference between auto and man and apply to the output
 * @param no_auto_man Turns off the -auto-man option
 * @param pointset_args Stand-alone option: takes one or more pointsets and fills in all the voxels that intersect lines connecting any two points within a given point set
 * @param ctab_file Embed color table in the output
 *
 * @returns Parameter dictionary
 */
function mri_fill_params(
    input_mr_dir: string,
    output_mr_dir: string,
    threshold: number | null = null,
    xform_name: string | null = null,
    segmentation_file: InputPathType | null = null,
    atlas_file: InputPathType | null = null,
    fill_ven: boolean = false,
    seed_cc_tal: Array<number> | null = null,
    seed_pons_tal: Array<number> | null = null,
    seed_lh_tal: Array<number> | null = null,
    seed_rh_tal: Array<number> | null = null,
    seed_cc_vox: Array<number> | null = null,
    seed_pons_vox: Array<number> | null = null,
    auto_man_files: Array<string> | null = null,
    no_auto_man: boolean = false,
    pointset_args: Array<string> | null = null,
    ctab_file: InputPathType | null = null,
): MriFillParameters {
    const params = {
        "@type": "freesurfer.mri_fill" as const,
        "input_mr_dir": input_mr_dir,
        "output_mr_dir": output_mr_dir,
        "fill_ven": fill_ven,
        "no_auto_man": no_auto_man,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (xform_name !== null) {
        params["xform_name"] = xform_name;
    }
    if (segmentation_file !== null) {
        params["segmentation_file"] = segmentation_file;
    }
    if (atlas_file !== null) {
        params["atlas_file"] = atlas_file;
    }
    if (seed_cc_tal !== null) {
        params["seed_cc_tal"] = seed_cc_tal;
    }
    if (seed_pons_tal !== null) {
        params["seed_pons_tal"] = seed_pons_tal;
    }
    if (seed_lh_tal !== null) {
        params["seed_lh_tal"] = seed_lh_tal;
    }
    if (seed_rh_tal !== null) {
        params["seed_rh_tal"] = seed_rh_tal;
    }
    if (seed_cc_vox !== null) {
        params["seed_cc_vox"] = seed_cc_vox;
    }
    if (seed_pons_vox !== null) {
        params["seed_pons_vox"] = seed_pons_vox;
    }
    if (auto_man_files !== null) {
        params["auto_man_files"] = auto_man_files;
    }
    if (pointset_args !== null) {
        params["pointset_args"] = pointset_args;
    }
    if (ctab_file !== null) {
        params["ctab_file"] = ctab_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_fill_cargs(
    params: MriFillParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_fill");
    cargs.push((params["input_mr_dir"] ?? null));
    cargs.push((params["output_mr_dir"] ?? null));
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["xform_name"] ?? null) !== null) {
        cargs.push(
            "-xform",
            (params["xform_name"] ?? null)
        );
    }
    if ((params["segmentation_file"] ?? null) !== null) {
        cargs.push(
            "-segmentation",
            execution.inputFile((params["segmentation_file"] ?? null))
        );
    }
    if ((params["atlas_file"] ?? null) !== null) {
        cargs.push(
            "-atlas",
            execution.inputFile((params["atlas_file"] ?? null))
        );
    }
    if ((params["fill_ven"] ?? null)) {
        cargs.push("-fillven");
    }
    if ((params["seed_cc_tal"] ?? null) !== null) {
        cargs.push(
            "-C",
            ...(params["seed_cc_tal"] ?? null).map(String)
        );
    }
    if ((params["seed_pons_tal"] ?? null) !== null) {
        cargs.push(
            "-P",
            ...(params["seed_pons_tal"] ?? null).map(String)
        );
    }
    if ((params["seed_lh_tal"] ?? null) !== null) {
        cargs.push(
            "-lh",
            ...(params["seed_lh_tal"] ?? null).map(String)
        );
    }
    if ((params["seed_rh_tal"] ?? null) !== null) {
        cargs.push(
            "-rh",
            ...(params["seed_rh_tal"] ?? null).map(String)
        );
    }
    if ((params["seed_cc_vox"] ?? null) !== null) {
        cargs.push(
            "-CV",
            ...(params["seed_cc_vox"] ?? null).map(String)
        );
    }
    if ((params["seed_pons_vox"] ?? null) !== null) {
        cargs.push(
            "-PV",
            ...(params["seed_pons_vox"] ?? null).map(String)
        );
    }
    if ((params["auto_man_files"] ?? null) !== null) {
        cargs.push(
            "-auto-man",
            ...(params["auto_man_files"] ?? null)
        );
    }
    if ((params["no_auto_man"] ?? null)) {
        cargs.push("-no-auto-man");
    }
    if ((params["pointset_args"] ?? null) !== null) {
        cargs.push(
            "-pointset",
            ...(params["pointset_args"] ?? null)
        );
    }
    if ((params["ctab_file"] ?? null) !== null) {
        cargs.push(
            "-ctab",
            execution.inputFile((params["ctab_file"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_fill_outputs(
    params: MriFillParameters,
    execution: Execution,
): MriFillOutputs {
    const ret: MriFillOutputs = {
        root: execution.outputFile("."),
        filled_volume: execution.outputFile([(params["output_mr_dir"] ?? null), "/filled"].join('')),
    };
    return ret;
}


/**
 * mri_fill
 *
 * Tool for creating hemispheric cutting planes and filling white matter for surface tessellation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFillOutputs`).
 */
function mri_fill_execute(
    params: MriFillParameters,
    runner: Runner | null = null,
): MriFillOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FILL_METADATA);
    params = execution.params(params)
    const cargs = mri_fill_cargs(params, execution)
    const ret = mri_fill_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_fill
 *
 * Tool for creating hemispheric cutting planes and filling white matter for surface tessellation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_mr_dir Input MR directory
 * @param output_mr_dir Output MR directory
 * @param threshold Specify fill_holes threshold (default=1)
 * @param xform_name Use xform dst offset to get an accurate Talairach volume
 * @param segmentation_file ASEG volume used to perform fill
 * @param atlas_file Specify atlas to use for auto-filling
 * @param fill_ven Fill ventricles
 * @param seed_cc_tal Talairach coords of the seed for the corpus callosum (three numerical values required)
 * @param seed_pons_tal Talairach coords of the seed for the pons (three numerical values required)
 * @param seed_lh_tal Talairach coords of the white matter seed for the left hemisphere (three numerical values required)
 * @param seed_rh_tal Talairach coords of the white matter seed for the right hemisphere (three numerical values required)
 * @param seed_cc_vox Voxel coords of the seed for the corpus callosum (three numerical values required)
 * @param seed_pons_vox Voxel coords of the seed for the pons (three numerical values required)
 * @param auto_man_files Get edits based on the difference between auto and man and apply to the output
 * @param no_auto_man Turns off the -auto-man option
 * @param pointset_args Stand-alone option: takes one or more pointsets and fills in all the voxels that intersect lines connecting any two points within a given point set
 * @param ctab_file Embed color table in the output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFillOutputs`).
 */
function mri_fill(
    input_mr_dir: string,
    output_mr_dir: string,
    threshold: number | null = null,
    xform_name: string | null = null,
    segmentation_file: InputPathType | null = null,
    atlas_file: InputPathType | null = null,
    fill_ven: boolean = false,
    seed_cc_tal: Array<number> | null = null,
    seed_pons_tal: Array<number> | null = null,
    seed_lh_tal: Array<number> | null = null,
    seed_rh_tal: Array<number> | null = null,
    seed_cc_vox: Array<number> | null = null,
    seed_pons_vox: Array<number> | null = null,
    auto_man_files: Array<string> | null = null,
    no_auto_man: boolean = false,
    pointset_args: Array<string> | null = null,
    ctab_file: InputPathType | null = null,
    runner: Runner | null = null,
): MriFillOutputs {
    const params = mri_fill_params(input_mr_dir, output_mr_dir, threshold, xform_name, segmentation_file, atlas_file, fill_ven, seed_cc_tal, seed_pons_tal, seed_lh_tal, seed_rh_tal, seed_cc_vox, seed_pons_vox, auto_man_files, no_auto_man, pointset_args, ctab_file)
    return mri_fill_execute(params, runner);
}


export {
      MRI_FILL_METADATA,
      MriFillOutputs,
      MriFillParameters,
      mri_fill,
      mri_fill_execute,
      mri_fill_params,
};
