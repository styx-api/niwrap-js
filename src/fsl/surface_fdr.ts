// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_FDR_METADATA: Metadata = {
    id: "95146d3cb09d5d86688c31f3c0183c9f2a059102.boutiques",
    name: "surface_fdr",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SurfaceFdrParameters {
    "@type": "fsl.surface_fdr";
    "input_vtk": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.surface_fdr": surface_fdr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.surface_fdr": surface_fdr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_fdr(...)`.
 *
 * @interface
 */
interface SurfaceFdrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output VTK file with corrected p-values
     */
    pvals_vtk: OutputPathType;
    /**
     * Output VTK file with FDR thresholded values
     */
    fthresh_vtk: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_vtk Input VTK file from vertex analysis
 *
 * @returns Parameter dictionary
 */
function surface_fdr_params(
    input_vtk: InputPathType,
): SurfaceFdrParameters {
    const params = {
        "@type": "fsl.surface_fdr" as const,
        "input_vtk": input_vtk,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_fdr_cargs(
    params: SurfaceFdrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("surface_fdr");
    cargs.push(execution.inputFile((params["input_vtk"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_fdr_outputs(
    params: SurfaceFdrParameters,
    execution: Execution,
): SurfaceFdrOutputs {
    const ret: SurfaceFdrOutputs = {
        root: execution.outputFile("."),
        pvals_vtk: execution.outputFile([path.basename((params["input_vtk"] ?? null)), "_pvals.vtk"].join('')),
        fthresh_vtk: execution.outputFile([path.basename((params["input_vtk"] ?? null)), "_Fthresh.vtk"].join('')),
    };
    return ret;
}


/**
 * surface_fdr
 *
 * Tool to calculate surface FDR correction for vertex analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceFdrOutputs`).
 */
function surface_fdr_execute(
    params: SurfaceFdrParameters,
    runner: Runner | null = null,
): SurfaceFdrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_FDR_METADATA);
    params = execution.params(params)
    const cargs = surface_fdr_cargs(params, execution)
    const ret = surface_fdr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface_fdr
 *
 * Tool to calculate surface FDR correction for vertex analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_vtk Input VTK file from vertex analysis
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceFdrOutputs`).
 */
function surface_fdr(
    input_vtk: InputPathType,
    runner: Runner | null = null,
): SurfaceFdrOutputs {
    const params = surface_fdr_params(input_vtk)
    return surface_fdr_execute(params, runner);
}


export {
      SURFACE_FDR_METADATA,
      SurfaceFdrOutputs,
      SurfaceFdrParameters,
      surface_fdr,
      surface_fdr_execute,
      surface_fdr_params,
};
