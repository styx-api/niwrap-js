// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_ROIS_FROM_EXTREMA_METADATA: Metadata = {
    id: "da73bea4d1a691afc0fd8fd88e3a81f0b1c7e507.boutiques",
    name: "volume-rois-from-extrema",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeRoisFromExtremaParameters {
    "@type": "workbench.volume-rois-from-extrema";
    "volume_in": InputPathType;
    "limit": number;
    "volume_out": string;
    "opt_gaussian_sigma"?: number | null | undefined;
    "opt_roi_roi_volume"?: InputPathType | null | undefined;
    "opt_overlap_logic_method"?: string | null | undefined;
    "opt_subvolume_subvol"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-rois-from-extrema": volume_rois_from_extrema_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-rois-from-extrema": volume_rois_from_extrema_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_rois_from_extrema(...)`.
 *
 * @interface
 */
interface VolumeRoisFromExtremaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_in the input volume
 * @param limit distance limit from voxel center, in mm
 * @param volume_out the output volume
 * @param opt_gaussian_sigma generate a gaussian kernel instead of a flat ROI: the sigma for the gaussian kernel, in mm
 * @param opt_roi_roi_volume select a region of interest to use: the region to use
 * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
 * @param opt_subvolume_subvol select a single subvolume to take the gradient of: the subvolume number or name
 *
 * @returns Parameter dictionary
 */
function volume_rois_from_extrema_params(
    volume_in: InputPathType,
    limit: number,
    volume_out: string,
    opt_gaussian_sigma: number | null = null,
    opt_roi_roi_volume: InputPathType | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_subvolume_subvol: string | null = null,
): VolumeRoisFromExtremaParameters {
    const params = {
        "@type": "workbench.volume-rois-from-extrema" as const,
        "volume_in": volume_in,
        "limit": limit,
        "volume_out": volume_out,
    };
    if (opt_gaussian_sigma !== null) {
        params["opt_gaussian_sigma"] = opt_gaussian_sigma;
    }
    if (opt_roi_roi_volume !== null) {
        params["opt_roi_roi_volume"] = opt_roi_roi_volume;
    }
    if (opt_overlap_logic_method !== null) {
        params["opt_overlap_logic_method"] = opt_overlap_logic_method;
    }
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_rois_from_extrema_cargs(
    params: VolumeRoisFromExtremaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-rois-from-extrema");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push(String((params["limit"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_gaussian_sigma"] ?? null) !== null) {
        cargs.push(
            "-gaussian",
            String((params["opt_gaussian_sigma"] ?? null))
        );
    }
    if ((params["opt_roi_roi_volume"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_volume"] ?? null))
        );
    }
    if ((params["opt_overlap_logic_method"] ?? null) !== null) {
        cargs.push(
            "-overlap-logic",
            (params["opt_overlap_logic_method"] ?? null)
        );
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_rois_from_extrema_outputs(
    params: VolumeRoisFromExtremaParameters,
    execution: Execution,
): VolumeRoisFromExtremaOutputs {
    const ret: VolumeRoisFromExtremaOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Create volume roi maps from extrema maps.
 *
 * For each nonzero value in each map, make a map with an ROI around that location.  If the -gaussian option is specified, then normalized gaussian kernels are output instead of ROIs.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VolumeRoisFromExtremaOutputs`).
 */
function volume_rois_from_extrema_execute(
    params: VolumeRoisFromExtremaParameters,
    execution: Execution,
): VolumeRoisFromExtremaOutputs {
    params = execution.params(params)
    const cargs = volume_rois_from_extrema_cargs(params, execution)
    const ret = volume_rois_from_extrema_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Create volume roi maps from extrema maps.
 *
 * For each nonzero value in each map, make a map with an ROI around that location.  If the -gaussian option is specified, then normalized gaussian kernels are output instead of ROIs.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_in the input volume
 * @param limit distance limit from voxel center, in mm
 * @param volume_out the output volume
 * @param opt_gaussian_sigma generate a gaussian kernel instead of a flat ROI: the sigma for the gaussian kernel, in mm
 * @param opt_roi_roi_volume select a region of interest to use: the region to use
 * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
 * @param opt_subvolume_subvol select a single subvolume to take the gradient of: the subvolume number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeRoisFromExtremaOutputs`).
 */
function volume_rois_from_extrema(
    volume_in: InputPathType,
    limit: number,
    volume_out: string,
    opt_gaussian_sigma: number | null = null,
    opt_roi_roi_volume: InputPathType | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_subvolume_subvol: string | null = null,
    runner: Runner | null = null,
): VolumeRoisFromExtremaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_ROIS_FROM_EXTREMA_METADATA);
    const params = volume_rois_from_extrema_params(volume_in, limit, volume_out, opt_gaussian_sigma, opt_roi_roi_volume, opt_overlap_logic_method, opt_subvolume_subvol)
    return volume_rois_from_extrema_execute(params, execution);
}


export {
      VOLUME_ROIS_FROM_EXTREMA_METADATA,
      VolumeRoisFromExtremaOutputs,
      VolumeRoisFromExtremaParameters,
      volume_rois_from_extrema,
      volume_rois_from_extrema_cargs,
      volume_rois_from_extrema_execute,
      volume_rois_from_extrema_outputs,
      volume_rois_from_extrema_params,
};
