// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_AW_TABLEIZE_ROI_INFO_PY_METADATA: Metadata = {
    id: "e640a48f377be12b6e77c80d6bd5595370ba1278.boutiques",
    name: "adjunct_aw_tableize_roi_info.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctAwTableizeRoiInfoPyParameters {
    "@type": "afni.adjunct_aw_tableize_roi_info.py";
    "output_file": string;
    "warped_atlas": InputPathType;
    "warped_mask": InputPathType;
    "reference_atlas": InputPathType;
    "reference_mask": InputPathType;
    "modesmooth_value": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.adjunct_aw_tableize_roi_info.py": adjunct_aw_tableize_roi_info_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.adjunct_aw_tableize_roi_info.py": adjunct_aw_tableize_roi_info_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_aw_tableize_roi_info_py(...)`.
 *
 * @interface
 */
interface AdjunctAwTableizeRoiInfoPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file containing ROI count/size information
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_file Output file name
 * @param warped_atlas Warped atlas of interest, with subbrick selector if necessary
 * @param warped_mask Mask for the warped atlas (same grid)
 * @param reference_atlas Reference atlas (unwarped), with subbrick selector if necessary
 * @param reference_mask Mask for the reference atlas (same grid)
 * @param modesmooth_value Modesmooth value, from modal smoothing used after warping
 *
 * @returns Parameter dictionary
 */
function adjunct_aw_tableize_roi_info_py_params(
    output_file: string,
    warped_atlas: InputPathType,
    warped_mask: InputPathType,
    reference_atlas: InputPathType,
    reference_mask: InputPathType,
    modesmooth_value: number,
): AdjunctAwTableizeRoiInfoPyParameters {
    const params = {
        "@type": "afni.adjunct_aw_tableize_roi_info.py" as const,
        "output_file": output_file,
        "warped_atlas": warped_atlas,
        "warped_mask": warped_mask,
        "reference_atlas": reference_atlas,
        "reference_mask": reference_mask,
        "modesmooth_value": modesmooth_value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function adjunct_aw_tableize_roi_info_py_cargs(
    params: AdjunctAwTableizeRoiInfoPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("adjunct_aw_tableize_roi_info.py");
    cargs.push((params["output_file"] ?? null));
    cargs.push(execution.inputFile((params["warped_atlas"] ?? null)));
    cargs.push(execution.inputFile((params["warped_mask"] ?? null)));
    cargs.push(execution.inputFile((params["reference_atlas"] ?? null)));
    cargs.push(execution.inputFile((params["reference_mask"] ?? null)));
    cargs.push(String((params["modesmooth_value"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function adjunct_aw_tableize_roi_info_py_outputs(
    params: AdjunctAwTableizeRoiInfoPyParameters,
    execution: Execution,
): AdjunctAwTableizeRoiInfoPyOutputs {
    const ret: AdjunctAwTableizeRoiInfoPyOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * A simple helper function for the fat_proc scripts that generates a text file containing ROI count/size information based on provided atlases and masks.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctAwTableizeRoiInfoPyOutputs`).
 */
function adjunct_aw_tableize_roi_info_py_execute(
    params: AdjunctAwTableizeRoiInfoPyParameters,
    runner: Runner | null = null,
): AdjunctAwTableizeRoiInfoPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_AW_TABLEIZE_ROI_INFO_PY_METADATA);
    params = execution.params(params)
    const cargs = adjunct_aw_tableize_roi_info_py_cargs(params, execution)
    const ret = adjunct_aw_tableize_roi_info_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A simple helper function for the fat_proc scripts that generates a text file containing ROI count/size information based on provided atlases and masks.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param output_file Output file name
 * @param warped_atlas Warped atlas of interest, with subbrick selector if necessary
 * @param warped_mask Mask for the warped atlas (same grid)
 * @param reference_atlas Reference atlas (unwarped), with subbrick selector if necessary
 * @param reference_mask Mask for the reference atlas (same grid)
 * @param modesmooth_value Modesmooth value, from modal smoothing used after warping
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctAwTableizeRoiInfoPyOutputs`).
 */
function adjunct_aw_tableize_roi_info_py(
    output_file: string,
    warped_atlas: InputPathType,
    warped_mask: InputPathType,
    reference_atlas: InputPathType,
    reference_mask: InputPathType,
    modesmooth_value: number,
    runner: Runner | null = null,
): AdjunctAwTableizeRoiInfoPyOutputs {
    const params = adjunct_aw_tableize_roi_info_py_params(output_file, warped_atlas, warped_mask, reference_atlas, reference_mask, modesmooth_value)
    return adjunct_aw_tableize_roi_info_py_execute(params, runner);
}


export {
      ADJUNCT_AW_TABLEIZE_ROI_INFO_PY_METADATA,
      AdjunctAwTableizeRoiInfoPyOutputs,
      AdjunctAwTableizeRoiInfoPyParameters,
      adjunct_aw_tableize_roi_info_py,
      adjunct_aw_tableize_roi_info_py_execute,
      adjunct_aw_tableize_roi_info_py_params,
};
