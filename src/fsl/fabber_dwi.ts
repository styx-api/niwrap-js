// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FABBER_DWI_METADATA: Metadata = {
    id: "c68b5ea0caae52c8c056bdb46bddab4759760e54.boutiques",
    name: "fabber_dwi",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FabberDwiParameters {
    "@type": "fsl.fabber_dwi";
    "output_dir": string;
    "method": string;
    "model": string;
    "data_file": InputPathType;
    "help_flag": boolean;
    "listmethods_flag": boolean;
    "listmodels_flag": boolean;
    "listparams_flag": boolean;
    "descparams_flag": boolean;
    "listoutputs_flag": boolean;
    "evaluate"?: string | null | undefined;
    "evaluate_params"?: string | null | undefined;
    "evaluate_nt"?: number | null | undefined;
    "simple_output_flag": boolean;
    "overwrite_flag": boolean;
    "link_to_latest_flag": boolean;
    "loadmodels"?: InputPathType | null | undefined;
    "multiple_data_files"?: InputPathType | null | undefined;
    "data_order"?: string | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "masked_timepoints"?: number | null | undefined;
    "supp_data"?: InputPathType | null | undefined;
    "dump_param_names_flag": boolean;
    "save_model_fit_flag": boolean;
    "save_residuals_flag": boolean;
    "save_model_extras_flag": boolean;
    "save_mvn_flag": boolean;
    "save_mean_flag": boolean;
    "save_std_flag": boolean;
    "save_var_flag": boolean;
    "save_zstat_flag": boolean;
    "save_noise_mean_flag": boolean;
    "save_noise_std_flag": boolean;
    "save_free_energy_flag": boolean;
    "optfile"?: InputPathType | null | undefined;
    "debug_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fabber_dwi": fabber_dwi_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fabber_dwi": fabber_dwi_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fabber_dwi(...)`.
 *
 * @interface
 */
interface FabberDwiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Specified output directory storing all outputs
     */
    output_files: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_dir Directory for output files (including logfile)
 * @param method Use this inference method
 * @param model Use this forward model
 * @param data_file Specify a single input data file
 * @param help_flag Print this usage method. If given with --method or --model, display relevant method/model usage information
 * @param listmethods_flag List all known inference methods
 * @param listmodels_flag List all known forward models
 * @param listparams_flag List model parameters (requires model configuration options to be given)
 * @param descparams_flag Describe model parameters (name, description, units) - requires model configuration options to be given. Note that not all models provide parameter descriptions
 * @param listoutputs_flag List additional model outputs (requires model configuration options to be given)
 * @param evaluate Evaluate the model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
 * @param evaluate_params List of parameter values for evaluation
 * @param evaluate_nt Number of time points for evaluation - must be consistent with model options where appropriate
 * @param simple_output_flag Instead of usual standard output, simply output a series of lines each giving progress as a percentage
 * @param overwrite_flag If set, will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
 * @param link_to_latest_flag Try to create a link to the most recent output directory with the prefix _latest
 * @param loadmodels Load models dynamically from the specified filename, which should be a DLL/shared library
 * @param multiple_data_files Specify multiple data files for n=1, 2, 3...
 * @param data_order If multiple data files are specified, how they will be handled: concatenate = one after the other, interleave = first record from each file, then second, etc.
 * @param mask_file Mask file. Inference will only be performed where mask value > 0
 * @param masked_timepoints List of masked time points, indexed from 1. These will be ignored in the parameter updates
 * @param supp_data 'Supplemental' timeseries data, required for some models
 * @param dump_param_names_flag Write the file paramnames.txt containing the names of the model parameters
 * @param save_model_fit_flag Output the model prediction as a 4d volume
 * @param save_residuals_flag Output the residuals (difference between the data and the model prediction)
 * @param save_model_extras_flag Output any additional model-specific timeseries data
 * @param save_mvn_flag Output the final MVN distributions
 * @param save_mean_flag Output the parameter means
 * @param save_std_flag Output the parameter standard deviations
 * @param save_var_flag Output the parameter variances
 * @param save_zstat_flag Output the parameter Z stats
 * @param save_noise_mean_flag Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source
 * @param save_noise_std_flag Output the noise standard deviations
 * @param save_free_energy_flag Output the free energy, if calculated
 * @param optfile File containing additional options, one per line, in the same form as specified on the command line
 * @param debug_flag Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
 *
 * @returns Parameter dictionary
 */
function fabber_dwi_params(
    output_dir: string,
    method: string,
    model: string,
    data_file: InputPathType,
    help_flag: boolean = false,
    listmethods_flag: boolean = false,
    listmodels_flag: boolean = false,
    listparams_flag: boolean = false,
    descparams_flag: boolean = false,
    listoutputs_flag: boolean = false,
    evaluate: string | null = null,
    evaluate_params: string | null = null,
    evaluate_nt: number | null = null,
    simple_output_flag: boolean = false,
    overwrite_flag: boolean = false,
    link_to_latest_flag: boolean = false,
    loadmodels: InputPathType | null = null,
    multiple_data_files: InputPathType | null = null,
    data_order: string | null = null,
    mask_file: InputPathType | null = null,
    masked_timepoints: number | null = null,
    supp_data: InputPathType | null = null,
    dump_param_names_flag: boolean = false,
    save_model_fit_flag: boolean = false,
    save_residuals_flag: boolean = false,
    save_model_extras_flag: boolean = false,
    save_mvn_flag: boolean = false,
    save_mean_flag: boolean = false,
    save_std_flag: boolean = false,
    save_var_flag: boolean = false,
    save_zstat_flag: boolean = false,
    save_noise_mean_flag: boolean = false,
    save_noise_std_flag: boolean = false,
    save_free_energy_flag: boolean = false,
    optfile: InputPathType | null = null,
    debug_flag: boolean = false,
): FabberDwiParameters {
    const params = {
        "@type": "fsl.fabber_dwi" as const,
        "output_dir": output_dir,
        "method": method,
        "model": model,
        "data_file": data_file,
        "help_flag": help_flag,
        "listmethods_flag": listmethods_flag,
        "listmodels_flag": listmodels_flag,
        "listparams_flag": listparams_flag,
        "descparams_flag": descparams_flag,
        "listoutputs_flag": listoutputs_flag,
        "simple_output_flag": simple_output_flag,
        "overwrite_flag": overwrite_flag,
        "link_to_latest_flag": link_to_latest_flag,
        "dump_param_names_flag": dump_param_names_flag,
        "save_model_fit_flag": save_model_fit_flag,
        "save_residuals_flag": save_residuals_flag,
        "save_model_extras_flag": save_model_extras_flag,
        "save_mvn_flag": save_mvn_flag,
        "save_mean_flag": save_mean_flag,
        "save_std_flag": save_std_flag,
        "save_var_flag": save_var_flag,
        "save_zstat_flag": save_zstat_flag,
        "save_noise_mean_flag": save_noise_mean_flag,
        "save_noise_std_flag": save_noise_std_flag,
        "save_free_energy_flag": save_free_energy_flag,
        "debug_flag": debug_flag,
    };
    if (evaluate !== null) {
        params["evaluate"] = evaluate;
    }
    if (evaluate_params !== null) {
        params["evaluate_params"] = evaluate_params;
    }
    if (evaluate_nt !== null) {
        params["evaluate_nt"] = evaluate_nt;
    }
    if (loadmodels !== null) {
        params["loadmodels"] = loadmodels;
    }
    if (multiple_data_files !== null) {
        params["multiple_data_files"] = multiple_data_files;
    }
    if (data_order !== null) {
        params["data_order"] = data_order;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (masked_timepoints !== null) {
        params["masked_timepoints"] = masked_timepoints;
    }
    if (supp_data !== null) {
        params["supp_data"] = supp_data;
    }
    if (optfile !== null) {
        params["optfile"] = optfile;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fabber_dwi_cargs(
    params: FabberDwiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fabber_dwi");
    cargs.push(
        "--output",
        (params["output_dir"] ?? null)
    );
    cargs.push(
        "--method",
        (params["method"] ?? null)
    );
    cargs.push(
        "--model",
        (params["model"] ?? null)
    );
    cargs.push(
        "--data",
        execution.inputFile((params["data_file"] ?? null))
    );
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["listmethods_flag"] ?? null)) {
        cargs.push("--listmethods");
    }
    if ((params["listmodels_flag"] ?? null)) {
        cargs.push("--listmodels");
    }
    if ((params["listparams_flag"] ?? null)) {
        cargs.push("--listparams");
    }
    if ((params["descparams_flag"] ?? null)) {
        cargs.push("--descparams");
    }
    if ((params["listoutputs_flag"] ?? null)) {
        cargs.push("--listoutputs");
    }
    if ((params["evaluate"] ?? null) !== null) {
        cargs.push(
            "--evaluate",
            (params["evaluate"] ?? null)
        );
    }
    if ((params["evaluate_params"] ?? null) !== null) {
        cargs.push(
            "--evaluate-params",
            (params["evaluate_params"] ?? null)
        );
    }
    if ((params["evaluate_nt"] ?? null) !== null) {
        cargs.push(
            "--evaluate-nt",
            String((params["evaluate_nt"] ?? null))
        );
    }
    if ((params["simple_output_flag"] ?? null)) {
        cargs.push("--simple-output");
    }
    if ((params["overwrite_flag"] ?? null)) {
        cargs.push("--overwrite");
    }
    if ((params["link_to_latest_flag"] ?? null)) {
        cargs.push("--link-to-latest");
    }
    if ((params["loadmodels"] ?? null) !== null) {
        cargs.push(
            "--loadmodels",
            execution.inputFile((params["loadmodels"] ?? null))
        );
    }
    if ((params["multiple_data_files"] ?? null) !== null) {
        cargs.push(
            "--data<n>",
            execution.inputFile((params["multiple_data_files"] ?? null))
        );
    }
    if ((params["data_order"] ?? null) !== null) {
        cargs.push(
            "--data-order",
            (params["data_order"] ?? null)
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["masked_timepoints"] ?? null) !== null) {
        cargs.push(
            "--mt<n>",
            String((params["masked_timepoints"] ?? null))
        );
    }
    if ((params["supp_data"] ?? null) !== null) {
        cargs.push(
            "--suppdata",
            execution.inputFile((params["supp_data"] ?? null))
        );
    }
    if ((params["dump_param_names_flag"] ?? null)) {
        cargs.push("--dump-param-names");
    }
    if ((params["save_model_fit_flag"] ?? null)) {
        cargs.push("--save-model-fit");
    }
    if ((params["save_residuals_flag"] ?? null)) {
        cargs.push("--save-residuals");
    }
    if ((params["save_model_extras_flag"] ?? null)) {
        cargs.push("--save-model-extras");
    }
    if ((params["save_mvn_flag"] ?? null)) {
        cargs.push("--save-mvn");
    }
    if ((params["save_mean_flag"] ?? null)) {
        cargs.push("--save-mean");
    }
    if ((params["save_std_flag"] ?? null)) {
        cargs.push("--save-std");
    }
    if ((params["save_var_flag"] ?? null)) {
        cargs.push("--save-var");
    }
    if ((params["save_zstat_flag"] ?? null)) {
        cargs.push("--save-zstat");
    }
    if ((params["save_noise_mean_flag"] ?? null)) {
        cargs.push("--save-noise-mean");
    }
    if ((params["save_noise_std_flag"] ?? null)) {
        cargs.push("--save-noise-std");
    }
    if ((params["save_free_energy_flag"] ?? null)) {
        cargs.push("--save-free-energy");
    }
    if ((params["optfile"] ?? null) !== null) {
        cargs.push(
            "--optfile",
            execution.inputFile((params["optfile"] ?? null))
        );
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fabber_dwi_outputs(
    params: FabberDwiParameters,
    execution: Execution,
): FabberDwiOutputs {
    const ret: FabberDwiOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile([(params["output_dir"] ?? null)].join('')),
    };
    return ret;
}


/**
 * fabber_dwi
 *
 * Fabber diffusion-weighted imaging tool for model-based analysis using forward models and different inference methods.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FabberDwiOutputs`).
 */
function fabber_dwi_execute(
    params: FabberDwiParameters,
    runner: Runner | null = null,
): FabberDwiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FABBER_DWI_METADATA);
    params = execution.params(params)
    const cargs = fabber_dwi_cargs(params, execution)
    const ret = fabber_dwi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fabber_dwi
 *
 * Fabber diffusion-weighted imaging tool for model-based analysis using forward models and different inference methods.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param output_dir Directory for output files (including logfile)
 * @param method Use this inference method
 * @param model Use this forward model
 * @param data_file Specify a single input data file
 * @param help_flag Print this usage method. If given with --method or --model, display relevant method/model usage information
 * @param listmethods_flag List all known inference methods
 * @param listmodels_flag List all known forward models
 * @param listparams_flag List model parameters (requires model configuration options to be given)
 * @param descparams_flag Describe model parameters (name, description, units) - requires model configuration options to be given. Note that not all models provide parameter descriptions
 * @param listoutputs_flag List additional model outputs (requires model configuration options to be given)
 * @param evaluate Evaluate the model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
 * @param evaluate_params List of parameter values for evaluation
 * @param evaluate_nt Number of time points for evaluation - must be consistent with model options where appropriate
 * @param simple_output_flag Instead of usual standard output, simply output a series of lines each giving progress as a percentage
 * @param overwrite_flag If set, will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
 * @param link_to_latest_flag Try to create a link to the most recent output directory with the prefix _latest
 * @param loadmodels Load models dynamically from the specified filename, which should be a DLL/shared library
 * @param multiple_data_files Specify multiple data files for n=1, 2, 3...
 * @param data_order If multiple data files are specified, how they will be handled: concatenate = one after the other, interleave = first record from each file, then second, etc.
 * @param mask_file Mask file. Inference will only be performed where mask value > 0
 * @param masked_timepoints List of masked time points, indexed from 1. These will be ignored in the parameter updates
 * @param supp_data 'Supplemental' timeseries data, required for some models
 * @param dump_param_names_flag Write the file paramnames.txt containing the names of the model parameters
 * @param save_model_fit_flag Output the model prediction as a 4d volume
 * @param save_residuals_flag Output the residuals (difference between the data and the model prediction)
 * @param save_model_extras_flag Output any additional model-specific timeseries data
 * @param save_mvn_flag Output the final MVN distributions
 * @param save_mean_flag Output the parameter means
 * @param save_std_flag Output the parameter standard deviations
 * @param save_var_flag Output the parameter variances
 * @param save_zstat_flag Output the parameter Z stats
 * @param save_noise_mean_flag Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source
 * @param save_noise_std_flag Output the noise standard deviations
 * @param save_free_energy_flag Output the free energy, if calculated
 * @param optfile File containing additional options, one per line, in the same form as specified on the command line
 * @param debug_flag Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FabberDwiOutputs`).
 */
function fabber_dwi(
    output_dir: string,
    method: string,
    model: string,
    data_file: InputPathType,
    help_flag: boolean = false,
    listmethods_flag: boolean = false,
    listmodels_flag: boolean = false,
    listparams_flag: boolean = false,
    descparams_flag: boolean = false,
    listoutputs_flag: boolean = false,
    evaluate: string | null = null,
    evaluate_params: string | null = null,
    evaluate_nt: number | null = null,
    simple_output_flag: boolean = false,
    overwrite_flag: boolean = false,
    link_to_latest_flag: boolean = false,
    loadmodels: InputPathType | null = null,
    multiple_data_files: InputPathType | null = null,
    data_order: string | null = null,
    mask_file: InputPathType | null = null,
    masked_timepoints: number | null = null,
    supp_data: InputPathType | null = null,
    dump_param_names_flag: boolean = false,
    save_model_fit_flag: boolean = false,
    save_residuals_flag: boolean = false,
    save_model_extras_flag: boolean = false,
    save_mvn_flag: boolean = false,
    save_mean_flag: boolean = false,
    save_std_flag: boolean = false,
    save_var_flag: boolean = false,
    save_zstat_flag: boolean = false,
    save_noise_mean_flag: boolean = false,
    save_noise_std_flag: boolean = false,
    save_free_energy_flag: boolean = false,
    optfile: InputPathType | null = null,
    debug_flag: boolean = false,
    runner: Runner | null = null,
): FabberDwiOutputs {
    const params = fabber_dwi_params(output_dir, method, model, data_file, help_flag, listmethods_flag, listmodels_flag, listparams_flag, descparams_flag, listoutputs_flag, evaluate, evaluate_params, evaluate_nt, simple_output_flag, overwrite_flag, link_to_latest_flag, loadmodels, multiple_data_files, data_order, mask_file, masked_timepoints, supp_data, dump_param_names_flag, save_model_fit_flag, save_residuals_flag, save_model_extras_flag, save_mvn_flag, save_mean_flag, save_std_flag, save_var_flag, save_zstat_flag, save_noise_mean_flag, save_noise_std_flag, save_free_energy_flag, optfile, debug_flag)
    return fabber_dwi_execute(params, runner);
}


export {
      FABBER_DWI_METADATA,
      FabberDwiOutputs,
      FabberDwiParameters,
      fabber_dwi,
      fabber_dwi_execute,
      fabber_dwi_params,
};
