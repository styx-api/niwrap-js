// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_MERGE_PARCELS_METADATA: Metadata = {
    id: "f8e1b09810fc4c12b4d2a50da651d53ab79a4ae6.boutiques",
    name: "cifti-merge-parcels",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiMergeParcelsCiftiParameters {
    "@type": "workbench.cifti-merge-parcels.cifti";
    "cifti_in": InputPathType;
}


interface CiftiMergeParcelsParameters {
    "@type": "workbench.cifti-merge-parcels";
    "direction": string;
    "cifti_out": string;
    "cifti"?: Array<CiftiMergeParcelsCiftiParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-merge-parcels": cifti_merge_parcels_cargs,
        "workbench.cifti-merge-parcels.cifti": cifti_merge_parcels_cifti_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-merge-parcels": cifti_merge_parcels_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param cifti_in a cifti file to merge
 *
 * @returns Parameter dictionary
 */
function cifti_merge_parcels_cifti_params(
    cifti_in: InputPathType,
): CiftiMergeParcelsCiftiParameters {
    const params = {
        "@type": "workbench.cifti-merge-parcels.cifti" as const,
        "cifti_in": cifti_in,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_merge_parcels_cifti_cargs(
    params: CiftiMergeParcelsCiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cifti");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `cifti_merge_parcels(...)`.
 *
 * @interface
 */
interface CiftiMergeParcelsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param direction which dimension to merge along (integer, 'ROW', or 'COLUMN')
 * @param cifti_out the output cifti file
 * @param cifti specify an input cifti file
 *
 * @returns Parameter dictionary
 */
function cifti_merge_parcels_params(
    direction: string,
    cifti_out: string,
    cifti: Array<CiftiMergeParcelsCiftiParameters> | null = null,
): CiftiMergeParcelsParameters {
    const params = {
        "@type": "workbench.cifti-merge-parcels" as const,
        "direction": direction,
        "cifti_out": cifti_out,
    };
    if (cifti !== null) {
        params["cifti"] = cifti;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_merge_parcels_cargs(
    params: CiftiMergeParcelsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-merge-parcels");
    cargs.push((params["direction"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["cifti"] ?? null) !== null) {
        cargs.push(...(params["cifti"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_merge_parcels_outputs(
    params: CiftiMergeParcelsParameters,
    execution: Execution,
): CiftiMergeParcelsOutputs {
    const ret: CiftiMergeParcelsOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-merge-parcels
 *
 * Merge cifti files along parcels dimension.
 *
 * The input cifti files must have matching mappings along the direction not specified, and the mapping along the specified direction must be parcels.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiMergeParcelsOutputs`).
 */
function cifti_merge_parcels_execute(
    params: CiftiMergeParcelsParameters,
    runner: Runner | null = null,
): CiftiMergeParcelsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_MERGE_PARCELS_METADATA);
    params = execution.params(params)
    const cargs = cifti_merge_parcels_cargs(params, execution)
    const ret = cifti_merge_parcels_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-merge-parcels
 *
 * Merge cifti files along parcels dimension.
 *
 * The input cifti files must have matching mappings along the direction not specified, and the mapping along the specified direction must be parcels.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param direction which dimension to merge along (integer, 'ROW', or 'COLUMN')
 * @param cifti_out the output cifti file
 * @param cifti specify an input cifti file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiMergeParcelsOutputs`).
 */
function cifti_merge_parcels(
    direction: string,
    cifti_out: string,
    cifti: Array<CiftiMergeParcelsCiftiParameters> | null = null,
    runner: Runner | null = null,
): CiftiMergeParcelsOutputs {
    const params = cifti_merge_parcels_params(direction, cifti_out, cifti)
    return cifti_merge_parcels_execute(params, runner);
}


export {
      CIFTI_MERGE_PARCELS_METADATA,
      CiftiMergeParcelsCiftiParameters,
      CiftiMergeParcelsOutputs,
      CiftiMergeParcelsParameters,
      cifti_merge_parcels,
      cifti_merge_parcels_cifti_params,
      cifti_merge_parcels_execute,
      cifti_merge_parcels_params,
};
