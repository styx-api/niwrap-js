// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPLIT_PARTS_GPU_METADATA: Metadata = {
    id: "d04fb1d28332d7da5a41bbc4ec0da2b3260458cf.boutiques",
    name: "split_parts_gpu",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SplitPartsGpuParameters {
    "__STYXTYPE__": "split_parts_gpu";
    "datafile": InputPathType;
    "maskfile": InputPathType;
    "bvals_file": InputPathType;
    "bvecs_file": InputPathType;
    "grad_file"?: string | null | undefined;
    "use_grad_file": number;
    "total_num_parts": number;
    "output_directory": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "split_parts_gpu": split_parts_gpu_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "split_parts_gpu": split_parts_gpu_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `split_parts_gpu(...)`.
 *
 * @interface
 */
interface SplitPartsGpuOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output parts files
     */
    output_parts: OutputPathType;
}


function split_parts_gpu_params(
    datafile: InputPathType,
    maskfile: InputPathType,
    bvals_file: InputPathType,
    bvecs_file: InputPathType,
    use_grad_file: number,
    total_num_parts: number,
    output_directory: string,
    grad_file: string | null = null,
): SplitPartsGpuParameters {
    /**
     * Build parameters.
    
     * @param datafile Input data file
     * @param maskfile Input mask file
     * @param bvals_file bvals file
     * @param bvecs_file bvecs file
     * @param use_grad_file Use gradient file (0 or 1)
     * @param total_num_parts Total number of parts
     * @param output_directory Output directory
     * @param grad_file Gradient file (can be null)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "split_parts_gpu" as const,
        "datafile": datafile,
        "maskfile": maskfile,
        "bvals_file": bvals_file,
        "bvecs_file": bvecs_file,
        "use_grad_file": use_grad_file,
        "total_num_parts": total_num_parts,
        "output_directory": output_directory,
    };
    if (grad_file !== null) {
        params["grad_file"] = grad_file;
    }
    return params;
}


function split_parts_gpu_cargs(
    params: SplitPartsGpuParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("split_parts_gpu");
    cargs.push(execution.inputFile((params["datafile"] ?? null)));
    cargs.push(execution.inputFile((params["maskfile"] ?? null)));
    cargs.push(execution.inputFile((params["bvals_file"] ?? null)));
    cargs.push(execution.inputFile((params["bvecs_file"] ?? null)));
    if ((params["grad_file"] ?? null) !== null) {
        cargs.push((params["grad_file"] ?? null));
    }
    cargs.push(String((params["use_grad_file"] ?? null)));
    cargs.push(String((params["total_num_parts"] ?? null)));
    cargs.push((params["output_directory"] ?? null));
    return cargs;
}


function split_parts_gpu_outputs(
    params: SplitPartsGpuParameters,
    execution: Execution,
): SplitPartsGpuOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SplitPartsGpuOutputs = {
        root: execution.outputFile("."),
        output_parts: execution.outputFile([(params["output_directory"] ?? null), "/part_*"].join('')),
    };
    return ret;
}


function split_parts_gpu_execute(
    params: SplitPartsGpuParameters,
    execution: Execution,
): SplitPartsGpuOutputs {
    /**
     * Splits parts of data for GPU processing.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SplitPartsGpuOutputs`).
     */
    params = execution.params(params)
    const cargs = split_parts_gpu_cargs(params, execution)
    const ret = split_parts_gpu_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function split_parts_gpu(
    datafile: InputPathType,
    maskfile: InputPathType,
    bvals_file: InputPathType,
    bvecs_file: InputPathType,
    use_grad_file: number,
    total_num_parts: number,
    output_directory: string,
    grad_file: string | null = null,
    runner: Runner | null = null,
): SplitPartsGpuOutputs {
    /**
     * Splits parts of data for GPU processing.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param datafile Input data file
     * @param maskfile Input mask file
     * @param bvals_file bvals file
     * @param bvecs_file bvecs file
     * @param use_grad_file Use gradient file (0 or 1)
     * @param total_num_parts Total number of parts
     * @param output_directory Output directory
     * @param grad_file Gradient file (can be null)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SplitPartsGpuOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPLIT_PARTS_GPU_METADATA);
    const params = split_parts_gpu_params(datafile, maskfile, bvals_file, bvecs_file, use_grad_file, total_num_parts, output_directory, grad_file)
    return split_parts_gpu_execute(params, execution);
}


export {
      SPLIT_PARTS_GPU_METADATA,
      SplitPartsGpuOutputs,
      SplitPartsGpuParameters,
      split_parts_gpu,
      split_parts_gpu_params,
};
