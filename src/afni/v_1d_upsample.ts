// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_UPSAMPLE_METADATA: Metadata = {
    id: "3df755faa433b3cc1a6abb13d23619f453b714fd.boutiques",
    name: "1dUpsample",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dUpsampleParameters {
    "__STYXTYPE__": "1dUpsample";
    "upsample_factor": number;
    "input_file": InputPathType;
    "linear_interpolation": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dUpsample": v_1d_upsample_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dUpsample": v_1d_upsample_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1d_upsample(...)`.
 *
 * @interface
 */
interface V1dUpsampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Upsampled 1D time series output
     */
    output_file: OutputPathType;
}


function v_1d_upsample_params(
    upsample_factor: number,
    input_file: InputPathType,
    linear_interpolation: boolean = false,
): V1dUpsampleParameters {
    /**
     * Build parameters.
    
     * @param upsample_factor Upsample factor (integer from 2..32)
     * @param input_file Input 1D time series file
     * @param linear_interpolation Use 1st order polynomials (i.e., linear interpolation) instead of 7th order polynomials
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dUpsample" as const,
        "upsample_factor": upsample_factor,
        "input_file": input_file,
        "linear_interpolation": linear_interpolation,
    };
    return params;
}


function v_1d_upsample_cargs(
    params: V1dUpsampleParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dUpsample");
    cargs.push(String((params["upsample_factor"] ?? null)));
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["linear_interpolation"] ?? null)) {
        cargs.push("-one");
    }
    return cargs;
}


function v_1d_upsample_outputs(
    params: V1dUpsampleParameters,
    execution: Execution,
): V1dUpsampleOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dUpsampleOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["ethel.1D"].join('')),
    };
    return ret;
}


function v_1d_upsample_execute(
    params: V1dUpsampleParameters,
    execution: Execution,
): V1dUpsampleOutputs {
    /**
     * Upsamples a 1D time series to a finer time grid.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dUpsampleOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1d_upsample_cargs(params, execution)
    const ret = v_1d_upsample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1d_upsample(
    upsample_factor: number,
    input_file: InputPathType,
    linear_interpolation: boolean = false,
    runner: Runner | null = null,
): V1dUpsampleOutputs {
    /**
     * Upsamples a 1D time series to a finer time grid.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param upsample_factor Upsample factor (integer from 2..32)
     * @param input_file Input 1D time series file
     * @param linear_interpolation Use 1st order polynomials (i.e., linear interpolation) instead of 7th order polynomials
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dUpsampleOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_UPSAMPLE_METADATA);
    const params = v_1d_upsample_params(upsample_factor, input_file, linear_interpolation)
    return v_1d_upsample_execute(params, execution);
}


export {
      V1dUpsampleOutputs,
      V1dUpsampleParameters,
      V_1D_UPSAMPLE_METADATA,
      v_1d_upsample,
      v_1d_upsample_params,
};
