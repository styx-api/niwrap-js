// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SYNTHSEG_METADATA: Metadata = {
    id: "576c0067650470dbfa8631765aae242b35b3480b.boutiques",
    name: "mri_synthseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSynthsegParameters {
    "__STYXTYPE__": "mri_synthseg";
    "input_image": InputPathType;
    "output_segmentation": string;
    "cortex_parcellation": boolean;
    "robust_prediction": boolean;
    "fast_prediction": boolean;
    "clip_ct": boolean;
    "output_volume"?: string | null | undefined;
    "output_qc"?: string | null | undefined;
    "output_posteriors"?: string | null | undefined;
    "resampled_images"?: string | null | undefined;
    "image_patch_size"?: Array<number> | null | undefined;
    "threads"?: number | null | undefined;
    "cpu": boolean;
    "version_1": boolean;
    "photo_synthseg"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_synthseg": mri_synthseg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_synthseg": mri_synthseg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_synthseg(...)`.
 *
 * @interface
 */
interface MriSynthsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmentation output(s)
     */
    output_segmentation_file: OutputPathType;
    /**
     * CSV file with volumes for all structures and subjects
     */
    output_volume_csv: OutputPathType | null;
    /**
     * CSV file with QC scores for all subjects
     */
    output_qc_csv: OutputPathType | null;
    /**
     * Posteriors output(s)
     */
    output_posteriors_file: OutputPathType | null;
    /**
     * Resampled image(s)
     */
    resampled_images_file: OutputPathType | null;
}


function mri_synthseg_params(
    input_image: InputPathType,
    output_segmentation: string,
    cortex_parcellation: boolean = false,
    robust_prediction: boolean = false,
    fast_prediction: boolean = false,
    clip_ct: boolean = false,
    output_volume: string | null = null,
    output_qc: string | null = null,
    output_posteriors: string | null = null,
    resampled_images: string | null = null,
    image_patch_size: Array<number> | null = null,
    threads: number | null = null,
    cpu: boolean = false,
    version_1: boolean = false,
    photo_synthseg: string | null = null,
): MriSynthsegParameters {
    /**
     * Build parameters.
    
     * @param input_image Image(s) to segment. Can be a path to an image or to a folder.
     * @param output_segmentation Segmentation output(s). Must be a folder if --i designates a folder.
     * @param cortex_parcellation Perform cortex parcellation.
     * @param robust_prediction Use robust predictions (slower).
     * @param fast_prediction Bypass some processing for faster prediction.
     * @param clip_ct Clip CT scans in Hounsfield scale to [0, 80].
     * @param output_volume Output CSV file with volumes for all structures and subjects.
     * @param output_qc Output CSV file with QC scores for all subjects.
     * @param output_posteriors Posteriors output(s). Must be a folder if --i designates a folder.
     * @param resampled_images Resampled image(s). Must be a folder if --i is a folder.
     * @param image_patch_size Only analyse an image patch of the given size.
     * @param threads Number of cores to be used. Default is 1.
     * @param cpu Enforce running with CPU rather than GPU.
     * @param version_1 Use SynthSeg 1.0 (updated 25/06/22).
     * @param photo_synthseg Photo-SynthSeg: segment 3D reconstructed stack of coronal dissection photos of the cerebrum; must be left, right, or both.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_synthseg" as const,
        "input_image": input_image,
        "output_segmentation": output_segmentation,
        "cortex_parcellation": cortex_parcellation,
        "robust_prediction": robust_prediction,
        "fast_prediction": fast_prediction,
        "clip_ct": clip_ct,
        "cpu": cpu,
        "version_1": version_1,
    };
    if (output_volume !== null) {
        params["output_volume"] = output_volume;
    }
    if (output_qc !== null) {
        params["output_qc"] = output_qc;
    }
    if (output_posteriors !== null) {
        params["output_posteriors"] = output_posteriors;
    }
    if (resampled_images !== null) {
        params["resampled_images"] = resampled_images;
    }
    if (image_patch_size !== null) {
        params["image_patch_size"] = image_patch_size;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (photo_synthseg !== null) {
        params["photo_synthseg"] = photo_synthseg;
    }
    return params;
}


function mri_synthseg_cargs(
    params: MriSynthsegParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_synthseg");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_segmentation"] ?? null));
    if ((params["cortex_parcellation"] ?? null)) {
        cargs.push("--parc");
    }
    if ((params["robust_prediction"] ?? null)) {
        cargs.push("--robust");
    }
    if ((params["fast_prediction"] ?? null)) {
        cargs.push("--fast");
    }
    if ((params["clip_ct"] ?? null)) {
        cargs.push("--ct");
    }
    if ((params["output_volume"] ?? null) !== null) {
        cargs.push((params["output_volume"] ?? null));
    }
    if ((params["output_qc"] ?? null) !== null) {
        cargs.push((params["output_qc"] ?? null));
    }
    if ((params["output_posteriors"] ?? null) !== null) {
        cargs.push((params["output_posteriors"] ?? null));
    }
    if ((params["resampled_images"] ?? null) !== null) {
        cargs.push((params["resampled_images"] ?? null));
    }
    if ((params["image_patch_size"] ?? null) !== null) {
        cargs.push(...(params["image_patch_size"] ?? null).map(String));
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(String((params["threads"] ?? null)));
    }
    if ((params["cpu"] ?? null)) {
        cargs.push("--cpu");
    }
    if ((params["version_1"] ?? null)) {
        cargs.push("--v1");
    }
    if ((params["photo_synthseg"] ?? null) !== null) {
        cargs.push((params["photo_synthseg"] ?? null));
    }
    return cargs;
}


function mri_synthseg_outputs(
    params: MriSynthsegParameters,
    execution: Execution,
): MriSynthsegOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriSynthsegOutputs = {
        root: execution.outputFile("."),
        output_segmentation_file: execution.outputFile([(params["output_segmentation"] ?? null)].join('')),
        output_volume_csv: ((params["output_volume"] ?? null) !== null) ? execution.outputFile([(params["output_volume"] ?? null)].join('')) : null,
        output_qc_csv: ((params["output_qc"] ?? null) !== null) ? execution.outputFile([(params["output_qc"] ?? null)].join('')) : null,
        output_posteriors_file: ((params["output_posteriors"] ?? null) !== null) ? execution.outputFile([(params["output_posteriors"] ?? null)].join('')) : null,
        resampled_images_file: ((params["resampled_images"] ?? null) !== null) ? execution.outputFile([(params["resampled_images"] ?? null)].join('')) : null,
    };
    return ret;
}


function mri_synthseg_execute(
    params: MriSynthsegParameters,
    execution: Execution,
): MriSynthsegOutputs {
    /**
     * SynthSeg is a tool for brain image segmentation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriSynthsegOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_synthseg_cargs(params, execution)
    const ret = mri_synthseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_synthseg(
    input_image: InputPathType,
    output_segmentation: string,
    cortex_parcellation: boolean = false,
    robust_prediction: boolean = false,
    fast_prediction: boolean = false,
    clip_ct: boolean = false,
    output_volume: string | null = null,
    output_qc: string | null = null,
    output_posteriors: string | null = null,
    resampled_images: string | null = null,
    image_patch_size: Array<number> | null = null,
    threads: number | null = null,
    cpu: boolean = false,
    version_1: boolean = false,
    photo_synthseg: string | null = null,
    runner: Runner | null = null,
): MriSynthsegOutputs {
    /**
     * SynthSeg is a tool for brain image segmentation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_image Image(s) to segment. Can be a path to an image or to a folder.
     * @param output_segmentation Segmentation output(s). Must be a folder if --i designates a folder.
     * @param cortex_parcellation Perform cortex parcellation.
     * @param robust_prediction Use robust predictions (slower).
     * @param fast_prediction Bypass some processing for faster prediction.
     * @param clip_ct Clip CT scans in Hounsfield scale to [0, 80].
     * @param output_volume Output CSV file with volumes for all structures and subjects.
     * @param output_qc Output CSV file with QC scores for all subjects.
     * @param output_posteriors Posteriors output(s). Must be a folder if --i designates a folder.
     * @param resampled_images Resampled image(s). Must be a folder if --i is a folder.
     * @param image_patch_size Only analyse an image patch of the given size.
     * @param threads Number of cores to be used. Default is 1.
     * @param cpu Enforce running with CPU rather than GPU.
     * @param version_1 Use SynthSeg 1.0 (updated 25/06/22).
     * @param photo_synthseg Photo-SynthSeg: segment 3D reconstructed stack of coronal dissection photos of the cerebrum; must be left, right, or both.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriSynthsegOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SYNTHSEG_METADATA);
    const params = mri_synthseg_params(input_image, output_segmentation, cortex_parcellation, robust_prediction, fast_prediction, clip_ct, output_volume, output_qc, output_posteriors, resampled_images, image_patch_size, threads, cpu, version_1, photo_synthseg)
    return mri_synthseg_execute(params, execution);
}


export {
      MRI_SYNTHSEG_METADATA,
      MriSynthsegOutputs,
      MriSynthsegParameters,
      mri_synthseg,
      mri_synthseg_params,
};
