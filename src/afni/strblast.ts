// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const STRBLAST_METADATA: Metadata = {
    id: "f32f04cd48a95c18324b547f5e4333f3e6c5f926.boutiques",
    name: "strblast",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface StrblastParameters {
    "__STYXTYPE__": "strblast";
    "targetstring": string;
    "input_files": Array<InputPathType>;
    "new_char"?: string | null | undefined;
    "new_string"?: string | null | undefined;
    "unescape": boolean;
    "quiet": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "strblast": strblast_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `strblast(...)`.
 *
 * @interface
 */
interface StrblastOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function strblast_params(
    targetstring: string,
    input_files: Array<InputPathType>,
    new_char: string | null = null,
    new_string: string | null = null,
    unescape: boolean = false,
    quiet: boolean = false,
    help: boolean = false,
): StrblastParameters {
    /**
     * Build parameters.
    
     * @param targetstring Target string to search for in the input files.
     * @param input_files Input files to search for the target string.
     * @param new_char Replace TARGETSTRING with CHAR (repeated)
     * @param new_string Replace TARGETSTRING with STRING
     * @param unescape Parse TARGETSTRING for escaped characters (includes '\t', '\n', '\r')
     * @param quiet Do not report files with no strings found. Use -quiet -quiet to avoid any reporting.
     * @param help Show help message and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "strblast" as const,
        "targetstring": targetstring,
        "input_files": input_files,
        "unescape": unescape,
        "quiet": quiet,
        "help": help,
    };
    if (new_char !== null) {
        params["new_char"] = new_char;
    }
    if (new_string !== null) {
        params["new_string"] = new_string;
    }
    return params;
}


function strblast_cargs(
    params: StrblastParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("strblast");
    cargs.push((params["targetstring"] ?? null));
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["new_char"] ?? null) !== null) {
        cargs.push(
            "-new_char",
            (params["new_char"] ?? null)
        );
    }
    if ((params["new_string"] ?? null) !== null) {
        cargs.push(
            "-new_string",
            (params["new_string"] ?? null)
        );
    }
    if ((params["unescape"] ?? null)) {
        cargs.push("-unescape");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function strblast_outputs(
    params: StrblastParameters,
    execution: Execution,
): StrblastOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: StrblastOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function strblast_execute(
    params: StrblastParameters,
    execution: Execution,
): StrblastOutputs {
    /**
     * Finds exact copies of the target string in each of the input files, and replaces all characters with some junk string.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `StrblastOutputs`).
     */
    params = execution.params(params)
    const cargs = strblast_cargs(params, execution)
    const ret = strblast_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function strblast(
    targetstring: string,
    input_files: Array<InputPathType>,
    new_char: string | null = null,
    new_string: string | null = null,
    unescape: boolean = false,
    quiet: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): StrblastOutputs {
    /**
     * Finds exact copies of the target string in each of the input files, and replaces all characters with some junk string.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param targetstring Target string to search for in the input files.
     * @param input_files Input files to search for the target string.
     * @param new_char Replace TARGETSTRING with CHAR (repeated)
     * @param new_string Replace TARGETSTRING with STRING
     * @param unescape Parse TARGETSTRING for escaped characters (includes '\t', '\n', '\r')
     * @param quiet Do not report files with no strings found. Use -quiet -quiet to avoid any reporting.
     * @param help Show help message and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `StrblastOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(STRBLAST_METADATA);
    const params = strblast_params(targetstring, input_files, new_char, new_string, unescape, quiet, help)
    return strblast_execute(params, execution);
}


export {
      STRBLAST_METADATA,
      StrblastOutputs,
      StrblastParameters,
      strblast,
      strblast_params,
};
