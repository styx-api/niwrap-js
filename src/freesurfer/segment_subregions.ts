// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEGMENT_SUBREGIONS_METADATA: Metadata = {
    id: "a23e365a3bdaf28e2566ccd0387371b490a84bc2.boutiques",
    name: "segment_subregions",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SegmentSubregionsParameters {
    "@type": "freesurfer.segment_subregions";
    "structure": string;
    "cross"?: string | null | undefined;
    "long_base"?: string | null | undefined;
    "sd"?: string | null | undefined;
    "suffix"?: string | null | undefined;
    "temp_dir"?: string | null | undefined;
    "out_dir"?: string | null | undefined;
    "debug": boolean;
    "threads"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.segment_subregions": segment_subregions_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `segment_subregions(...)`.
 *
 * @interface
 */
interface SegmentSubregionsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param structure Structure to segment. Options are: thalamus, brainstem, hippo-amygdala.
 * @param cross Subject to segment in cross-sectional analysis.
 * @param long_base Base subject for longitudinal analysis. Timepoints are extracted from the base-tps file.
 * @param sd Specify subjects directory (will override SUBJECTS_DIR env variable).
 * @param suffix Optional output file suffix.
 * @param temp_dir Use alternative temporary directory. This will get deleted unless --debug is enabled.
 * @param out_dir Use alternative output directory (only for cross-sectional). Default is the subject's `mri` directory.
 * @param debug Write intermediate debugging outputs.
 * @param threads Number of threads to use. Defaults to 1.
 *
 * @returns Parameter dictionary
 */
function segment_subregions_params(
    structure: string,
    cross: string | null = null,
    long_base: string | null = null,
    sd: string | null = null,
    suffix: string | null = null,
    temp_dir: string | null = null,
    out_dir: string | null = null,
    debug: boolean = false,
    threads: number | null = null,
): SegmentSubregionsParameters {
    const params = {
        "@type": "freesurfer.segment_subregions" as const,
        "structure": structure,
        "debug": debug,
    };
    if (cross !== null) {
        params["cross"] = cross;
    }
    if (long_base !== null) {
        params["long_base"] = long_base;
    }
    if (sd !== null) {
        params["sd"] = sd;
    }
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    if (temp_dir !== null) {
        params["temp_dir"] = temp_dir;
    }
    if (out_dir !== null) {
        params["out_dir"] = out_dir;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function segment_subregions_cargs(
    params: SegmentSubregionsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("segment_subregions");
    cargs.push((params["structure"] ?? null));
    if ((params["cross"] ?? null) !== null) {
        cargs.push(
            "--cross",
            (params["cross"] ?? null)
        );
    }
    if ((params["long_base"] ?? null) !== null) {
        cargs.push(
            "--long-base",
            (params["long_base"] ?? null)
        );
    }
    if ((params["sd"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["sd"] ?? null)
        );
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "--suffix",
            (params["suffix"] ?? null)
        );
    }
    if ((params["temp_dir"] ?? null) !== null) {
        cargs.push(
            "--temp-dir",
            (params["temp_dir"] ?? null)
        );
    }
    if ((params["out_dir"] ?? null) !== null) {
        cargs.push(
            "--out-dir",
            (params["out_dir"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function segment_subregions_outputs(
    params: SegmentSubregionsParameters,
    execution: Execution,
): SegmentSubregionsOutputs {
    const ret: SegmentSubregionsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * segment_subregions
 *
 * Cross-sectional and longitudinal segmentation for brain structures like thalamus, brainstem, and hippo-amygdala.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubregionsOutputs`).
 */
function segment_subregions_execute(
    params: SegmentSubregionsParameters,
    runner: Runner | null = null,
): SegmentSubregionsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEGMENT_SUBREGIONS_METADATA);
    params = execution.params(params)
    const cargs = segment_subregions_cargs(params, execution)
    const ret = segment_subregions_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * segment_subregions
 *
 * Cross-sectional and longitudinal segmentation for brain structures like thalamus, brainstem, and hippo-amygdala.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param structure Structure to segment. Options are: thalamus, brainstem, hippo-amygdala.
 * @param cross Subject to segment in cross-sectional analysis.
 * @param long_base Base subject for longitudinal analysis. Timepoints are extracted from the base-tps file.
 * @param sd Specify subjects directory (will override SUBJECTS_DIR env variable).
 * @param suffix Optional output file suffix.
 * @param temp_dir Use alternative temporary directory. This will get deleted unless --debug is enabled.
 * @param out_dir Use alternative output directory (only for cross-sectional). Default is the subject's `mri` directory.
 * @param debug Write intermediate debugging outputs.
 * @param threads Number of threads to use. Defaults to 1.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubregionsOutputs`).
 */
function segment_subregions(
    structure: string,
    cross: string | null = null,
    long_base: string | null = null,
    sd: string | null = null,
    suffix: string | null = null,
    temp_dir: string | null = null,
    out_dir: string | null = null,
    debug: boolean = false,
    threads: number | null = null,
    runner: Runner | null = null,
): SegmentSubregionsOutputs {
    const params = segment_subregions_params(structure, cross, long_base, sd, suffix, temp_dir, out_dir, debug, threads)
    return segment_subregions_execute(params, runner);
}


export {
      SEGMENT_SUBREGIONS_METADATA,
      SegmentSubregionsOutputs,
      SegmentSubregionsParameters,
      segment_subregions,
      segment_subregions_execute,
      segment_subregions_params,
};
