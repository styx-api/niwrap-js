// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLSMOOTHFILL_METADATA: Metadata = {
    id: "fbc060a3d94fdea837d41e4627731e10e81a63c1.boutiques",
    name: "fslsmoothfill",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslsmoothfillParameters {
    "__STYXTYPE__": "fslsmoothfill";
    "input_image": InputPathType;
    "mask_image": InputPathType;
    "output_image": string;
    "number_of_iterations"?: number | null | undefined;
    "debug_flag": boolean;
    "verbose_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslsmoothfill": fslsmoothfill_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslsmoothfill(...)`.
 *
 * @interface
 */
interface FslsmoothfillOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fslsmoothfill_params(
    input_image: InputPathType,
    mask_image: InputPathType,
    output_image: string,
    number_of_iterations: number | null = null,
    debug_flag: boolean = false,
    verbose_flag: boolean = false,
): FslsmoothfillParameters {
    /**
     * Build parameters.
    
     * @param input_image Filename of the input image.
     * @param mask_image Filename of the mask image.
     * @param output_image Filename for the output smoothed result image.
     * @param number_of_iterations Number of iterations.
     * @param debug_flag Turn on debugging output.
     * @param verbose_flag Switch on diagnostic messages.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslsmoothfill" as const,
        "input_image": input_image,
        "mask_image": mask_image,
        "output_image": output_image,
        "debug_flag": debug_flag,
        "verbose_flag": verbose_flag,
    };
    if (number_of_iterations !== null) {
        params["number_of_iterations"] = number_of_iterations;
    }
    return params;
}


function fslsmoothfill_cargs(
    params: FslsmoothfillParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslsmoothfill");
    cargs.push(["--in=", execution.inputFile((params["input_image"] ?? null))].join(''));
    cargs.push(["--mask=", execution.inputFile((params["mask_image"] ?? null))].join(''));
    cargs.push(["--out=", (params["output_image"] ?? null)].join(''));
    if ((params["number_of_iterations"] ?? null) !== null) {
        cargs.push(
            "--niter",
            String((params["number_of_iterations"] ?? null))
        );
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("--verbose");
    }
    return cargs;
}


function fslsmoothfill_outputs(
    params: FslsmoothfillParameters,
    execution: Execution,
): FslsmoothfillOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslsmoothfillOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fslsmoothfill_execute(
    params: FslsmoothfillParameters,
    execution: Execution,
): FslsmoothfillOutputs {
    /**
     * Smoothfill is a tool designed to fill in holes in images by smoothly interpolating the pixel values.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslsmoothfillOutputs`).
     */
    params = execution.params(params)
    const cargs = fslsmoothfill_cargs(params, execution)
    const ret = fslsmoothfill_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslsmoothfill(
    input_image: InputPathType,
    mask_image: InputPathType,
    output_image: string,
    number_of_iterations: number | null = null,
    debug_flag: boolean = false,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): FslsmoothfillOutputs {
    /**
     * Smoothfill is a tool designed to fill in holes in images by smoothly interpolating the pixel values.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_image Filename of the input image.
     * @param mask_image Filename of the mask image.
     * @param output_image Filename for the output smoothed result image.
     * @param number_of_iterations Number of iterations.
     * @param debug_flag Turn on debugging output.
     * @param verbose_flag Switch on diagnostic messages.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslsmoothfillOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLSMOOTHFILL_METADATA);
    const params = fslsmoothfill_params(input_image, mask_image, output_image, number_of_iterations, debug_flag, verbose_flag)
    return fslsmoothfill_execute(params, execution);
}


export {
      FSLSMOOTHFILL_METADATA,
      FslsmoothfillOutputs,
      FslsmoothfillParameters,
      fslsmoothfill,
      fslsmoothfill_params,
};
