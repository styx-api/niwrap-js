// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF2_VOL_COORD_METADATA: Metadata = {
    id: "6fe6474a33c8e23675d3aa29e680feb2c2b37bc1.boutiques",
    name: "Surf2VolCoord",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface Surf2VolCoordParameters {
    "@type": "afni.Surf2VolCoord";
    "surface": string;
    "grid_vol": InputPathType;
    "grid_subbrick"?: number | null | undefined;
    "sv"?: InputPathType | null | undefined;
    "one_node"?: string | null | undefined;
    "closest_nodes": InputPathType;
    "qual"?: string | null | undefined;
    "lpi": boolean;
    "rai": boolean;
    "verb_level"?: number | null | undefined;
    "prefix": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.Surf2VolCoord": surf2_vol_coord_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.Surf2VolCoord": surf2_vol_coord_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf2_vol_coord(...)`.
 *
 * @interface
 */
interface Surf2VolCoordOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output results file.
     */
    results_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface Specify input surface.
 * @param grid_vol Specifies the grid for the output volume.
 * @param closest_nodes A coordinate file specifying coordinates for which the closest nodes will be found.
 * @param prefix Output results to file PREFIX (will overwrite). Default is stdout.
 * @param grid_subbrick Sub-brick from which data are taken.
 * @param sv Surface Volume file aligning with the surface.
 * @param one_node Specify a single node's coordinates.
 * @param qual A string of characters that qualify the surface in which the closest node was found.
 * @param lpi Coordinate axis direction for values in XYZ.1D are in LPI.
 * @param rai Coordinate axis direction for values in XYZ.1D are in RAI (default).
 * @param verb_level Verbosity level, default is 0.
 *
 * @returns Parameter dictionary
 */
function surf2_vol_coord_params(
    surface: string,
    grid_vol: InputPathType,
    closest_nodes: InputPathType,
    prefix: string,
    grid_subbrick: number | null = null,
    sv: InputPathType | null = null,
    one_node: string | null = null,
    qual: string | null = null,
    lpi: boolean = false,
    rai: boolean = false,
    verb_level: number | null = null,
): Surf2VolCoordParameters {
    const params = {
        "@type": "afni.Surf2VolCoord" as const,
        "surface": surface,
        "grid_vol": grid_vol,
        "closest_nodes": closest_nodes,
        "lpi": lpi,
        "rai": rai,
        "prefix": prefix,
    };
    if (grid_subbrick !== null) {
        params["grid_subbrick"] = grid_subbrick;
    }
    if (sv !== null) {
        params["sv"] = sv;
    }
    if (one_node !== null) {
        params["one_node"] = one_node;
    }
    if (qual !== null) {
        params["qual"] = qual;
    }
    if (verb_level !== null) {
        params["verb_level"] = verb_level;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf2_vol_coord_cargs(
    params: Surf2VolCoordParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("Surf2VolCoord");
    cargs.push(
        "-i_TYPE",
        (params["surface"] ?? null)
    );
    cargs.push(
        "-grid_parent",
        execution.inputFile((params["grid_vol"] ?? null))
    );
    if ((params["grid_subbrick"] ?? null) !== null) {
        cargs.push(
            "-grid_subbrick",
            String((params["grid_subbrick"] ?? null))
        );
    }
    if ((params["sv"] ?? null) !== null) {
        cargs.push(
            "-sv",
            execution.inputFile((params["sv"] ?? null))
        );
    }
    if ((params["one_node"] ?? null) !== null) {
        cargs.push(
            "-one_node",
            (params["one_node"] ?? null)
        );
    }
    cargs.push(
        "-closest_nodes",
        execution.inputFile((params["closest_nodes"] ?? null))
    );
    if ((params["qual"] ?? null) !== null) {
        cargs.push(
            "-qual",
            (params["qual"] ?? null)
        );
    }
    if ((params["lpi"] ?? null)) {
        cargs.push("-LPI");
    }
    if ((params["rai"] ?? null)) {
        cargs.push("-RAI");
    }
    if ((params["verb_level"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb_level"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf2_vol_coord_outputs(
    params: Surf2VolCoordParameters,
    execution: Execution,
): Surf2VolCoordOutputs {
    const ret: Surf2VolCoordOutputs = {
        root: execution.outputFile("."),
        results_file: execution.outputFile([(params["prefix"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Surf2VolCoord
 *
 * Relates node indices to coordinates given x y z coordinates and returns the nodes closest to them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Surf2VolCoordOutputs`).
 */
function surf2_vol_coord_execute(
    params: Surf2VolCoordParameters,
    runner: Runner | null = null,
): Surf2VolCoordOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF2_VOL_COORD_METADATA);
    params = execution.params(params)
    const cargs = surf2_vol_coord_cargs(params, execution)
    const ret = surf2_vol_coord_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Surf2VolCoord
 *
 * Relates node indices to coordinates given x y z coordinates and returns the nodes closest to them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param surface Specify input surface.
 * @param grid_vol Specifies the grid for the output volume.
 * @param closest_nodes A coordinate file specifying coordinates for which the closest nodes will be found.
 * @param prefix Output results to file PREFIX (will overwrite). Default is stdout.
 * @param grid_subbrick Sub-brick from which data are taken.
 * @param sv Surface Volume file aligning with the surface.
 * @param one_node Specify a single node's coordinates.
 * @param qual A string of characters that qualify the surface in which the closest node was found.
 * @param lpi Coordinate axis direction for values in XYZ.1D are in LPI.
 * @param rai Coordinate axis direction for values in XYZ.1D are in RAI (default).
 * @param verb_level Verbosity level, default is 0.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Surf2VolCoordOutputs`).
 */
function surf2_vol_coord(
    surface: string,
    grid_vol: InputPathType,
    closest_nodes: InputPathType,
    prefix: string,
    grid_subbrick: number | null = null,
    sv: InputPathType | null = null,
    one_node: string | null = null,
    qual: string | null = null,
    lpi: boolean = false,
    rai: boolean = false,
    verb_level: number | null = null,
    runner: Runner | null = null,
): Surf2VolCoordOutputs {
    const params = surf2_vol_coord_params(surface, grid_vol, closest_nodes, prefix, grid_subbrick, sv, one_node, qual, lpi, rai, verb_level)
    return surf2_vol_coord_execute(params, runner);
}


export {
      SURF2_VOL_COORD_METADATA,
      Surf2VolCoordOutputs,
      Surf2VolCoordParameters,
      surf2_vol_coord,
      surf2_vol_coord_execute,
      surf2_vol_coord_params,
};
