// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ELECTRO_GRID_METADATA: Metadata = {
    id: "8d964e948445e43b1078948d73794b4d6f87e09a.boutiques",
    name: "@ElectroGrid",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VElectroGridParameters {
    "__STYXTYPE__": "@ElectroGrid";
    "strip"?: number | null | undefined;
    "grid"?: Array<number> | null | undefined;
    "prefix"?: string | null | undefined;
    "coords"?: InputPathType | null | undefined;
    "with_markers": boolean;
    "echo": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@ElectroGrid": v__electro_grid_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@ElectroGrid": v__electro_grid_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__electro_grid(...)`.
 *
 * @interface
 */
interface VElectroGridOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface file
     */
    output_surface: OutputPathType | null;
}


function v__electro_grid_params(
    strip: number | null = null,
    grid: Array<number> | null = null,
    prefix: string | null = null,
    coords: InputPathType | null = null,
    with_markers: boolean = false,
    echo: boolean = false,
): VElectroGridParameters {
    /**
     * Build parameters.
    
     * @param strip Make an Nx strip (array) of electrodes.
     * @param grid Make an Nx by Ny grid of electrodes. A node at (i,j) has a node ID = i+Nx*j with 0<=i<Nx and 0<=j<=Ny
     * @param prefix Use PREFIX for the output surface.
     * @param coords Specify the coordinates of the nodes on the grid, or the array. XYZ.1D should have three columns, with each row specifying the coordinates of one node.
     * @param with_markers Add markers to the surface at each electrode.
     * @param echo Set echo.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@ElectroGrid" as const,
        "with_markers": with_markers,
        "echo": echo,
    };
    if (strip !== null) {
        params["strip"] = strip;
    }
    if (grid !== null) {
        params["grid"] = grid;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (coords !== null) {
        params["coords"] = coords;
    }
    return params;
}


function v__electro_grid_cargs(
    params: VElectroGridParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@ElectroGrid");
    if ((params["strip"] ?? null) !== null) {
        cargs.push(
            "-strip",
            String((params["strip"] ?? null))
        );
    }
    if ((params["grid"] ?? null) !== null) {
        cargs.push(
            "-grid",
            ...(params["grid"] ?? null).map(String)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["coords"] ?? null) !== null) {
        cargs.push(
            "-coords",
            execution.inputFile((params["coords"] ?? null))
        );
    }
    if ((params["with_markers"] ?? null)) {
        cargs.push("-with_markers");
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    return cargs;
}


function v__electro_grid_outputs(
    params: VElectroGridParameters,
    execution: Execution,
): VElectroGridOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VElectroGridOutputs = {
        root: execution.outputFile("."),
        output_surface: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".gii"].join('')) : null,
    };
    return ret;
}


function v__electro_grid_execute(
    params: VElectroGridParameters,
    execution: Execution,
): VElectroGridOutputs {
    /**
     * Creates a mesh representation of an electrode grid for use with SUMA.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VElectroGridOutputs`).
     */
    params = execution.params(params)
    const cargs = v__electro_grid_cargs(params, execution)
    const ret = v__electro_grid_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__electro_grid(
    strip: number | null = null,
    grid: Array<number> | null = null,
    prefix: string | null = null,
    coords: InputPathType | null = null,
    with_markers: boolean = false,
    echo: boolean = false,
    runner: Runner | null = null,
): VElectroGridOutputs {
    /**
     * Creates a mesh representation of an electrode grid for use with SUMA.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param strip Make an Nx strip (array) of electrodes.
     * @param grid Make an Nx by Ny grid of electrodes. A node at (i,j) has a node ID = i+Nx*j with 0<=i<Nx and 0<=j<=Ny
     * @param prefix Use PREFIX for the output surface.
     * @param coords Specify the coordinates of the nodes on the grid, or the array. XYZ.1D should have three columns, with each row specifying the coordinates of one node.
     * @param with_markers Add markers to the surface at each electrode.
     * @param echo Set echo.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VElectroGridOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ELECTRO_GRID_METADATA);
    const params = v__electro_grid_params(strip, grid, prefix, coords, with_markers, echo)
    return v__electro_grid_execute(params, execution);
}


export {
      VElectroGridOutputs,
      VElectroGridParameters,
      V__ELECTRO_GRID_METADATA,
      v__electro_grid,
      v__electro_grid_params,
};
