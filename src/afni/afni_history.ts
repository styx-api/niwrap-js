// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AFNI_HISTORY_METADATA: Metadata = {
    id: "d7491062207cc6368cfd5898668689b91ac28654.boutiques",
    name: "afni_history",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AfniHistoryParameters {
    "__STYXTYPE__": "afni_history";
    "verb_level"?: number | null | undefined;
    "check_date"?: string | null | undefined;
    "help": boolean;
    "history": boolean;
    "list_authors": boolean;
    "list_types": boolean;
    "version": boolean;
    "author"?: string | null | undefined;
    "level"?: number | null | undefined;
    "min_level"?: number | null | undefined;
    "program"?: string | null | undefined;
    "past_entries"?: number | null | undefined;
    "past_days"?: number | null | undefined;
    "past_months"?: number | null | undefined;
    "past_years"?: number | null | undefined;
    "type"?: string | null | undefined;
    "html": boolean;
    "dline": boolean;
    "reverse": boolean;
    "show_field"?: string | null | undefined;
    "show_field_names": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "afni_history": afni_history_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `afni_history(...)`.
 *
 * @interface
 */
interface AfniHistoryOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function afni_history_params(
    verb_level: number | null = null,
    check_date: string | null = null,
    help: boolean = false,
    history: boolean = false,
    list_authors: boolean = false,
    list_types: boolean = false,
    version: boolean = false,
    author: string | null = null,
    level: number | null = null,
    min_level: number | null = null,
    program: string | null = null,
    past_entries: number | null = null,
    past_days: number | null = null,
    past_months: number | null = null,
    past_years: number | null = null,
    type_: string | null = null,
    html: boolean = false,
    dline: boolean = false,
    reverse: boolean = false,
    show_field: string | null = null,
    show_field_names: boolean = false,
): AfniHistoryParameters {
    /**
     * Build parameters.
    
     * @param verb_level Request verbose output (LEVEL is from 0-6)
     * @param check_date Check history against given date. If most recent afni_history is older than the passed date, the distribution version might be considered out of date.
     * @param help Show help information
     * @param history Show this program's history
     * @param list_authors Show the list of valid authors
     * @param list_types Show the list of valid change types
     * @param version Show this program's version
     * @param author Restrict output to the given author
     * @param level Restrict output to the given level
     * @param min_level Restrict output to at least level LEVEL
     * @param program Restrict output to the given program
     * @param past_entries Restrict output to final ENTRIES entries
     * @param past_days Restrict output to the past DAYS days
     * @param past_months Restrict output to the past MONTHS months
     * @param past_years Restrict output to the past YEARS years
     * @param type_ Restrict output to the given TYPE (TYPE = 0..5, or strings 'NEW_PROG', etc.)
     * @param html Add HTML formatting
     * @param dline Put a divider line between dates
     * @param reverse Reverse the sorting order (sort is by date, author, level, program)
     * @param show_field Restrict entry output to field FIELD. Valid FIELDs include: all, firstline, day, month, year, date, author, program, level, type, desc, verbtext.
     * @param show_field_names List valid FIELD names for -show_field
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "afni_history" as const,
        "help": help,
        "history": history,
        "list_authors": list_authors,
        "list_types": list_types,
        "version": version,
        "html": html,
        "dline": dline,
        "reverse": reverse,
        "show_field_names": show_field_names,
    };
    if (verb_level !== null) {
        params["verb_level"] = verb_level;
    }
    if (check_date !== null) {
        params["check_date"] = check_date;
    }
    if (author !== null) {
        params["author"] = author;
    }
    if (level !== null) {
        params["level"] = level;
    }
    if (min_level !== null) {
        params["min_level"] = min_level;
    }
    if (program !== null) {
        params["program"] = program;
    }
    if (past_entries !== null) {
        params["past_entries"] = past_entries;
    }
    if (past_days !== null) {
        params["past_days"] = past_days;
    }
    if (past_months !== null) {
        params["past_months"] = past_months;
    }
    if (past_years !== null) {
        params["past_years"] = past_years;
    }
    if (type_ !== null) {
        params["type"] = type_;
    }
    if (show_field !== null) {
        params["show_field"] = show_field;
    }
    return params;
}


function afni_history_cargs(
    params: AfniHistoryParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("afni_history");
    if ((params["verb_level"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb_level"] ?? null))
        );
    }
    if ((params["check_date"] ?? null) !== null) {
        cargs.push(
            "-check_date",
            (params["check_date"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["history"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["list_authors"] ?? null)) {
        cargs.push("-list_authors");
    }
    if ((params["list_types"] ?? null)) {
        cargs.push("-list_types");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    if ((params["author"] ?? null) !== null) {
        cargs.push(
            "-author",
            (params["author"] ?? null)
        );
    }
    if ((params["level"] ?? null) !== null) {
        cargs.push(
            "-level",
            String((params["level"] ?? null))
        );
    }
    if ((params["min_level"] ?? null) !== null) {
        cargs.push(
            "-min_level",
            String((params["min_level"] ?? null))
        );
    }
    if ((params["program"] ?? null) !== null) {
        cargs.push(
            "-program",
            (params["program"] ?? null)
        );
    }
    if ((params["past_entries"] ?? null) !== null) {
        cargs.push(
            "-past_entries",
            String((params["past_entries"] ?? null))
        );
    }
    if ((params["past_days"] ?? null) !== null) {
        cargs.push(
            "-past_days",
            String((params["past_days"] ?? null))
        );
    }
    if ((params["past_months"] ?? null) !== null) {
        cargs.push(
            "-past_months",
            String((params["past_months"] ?? null))
        );
    }
    if ((params["past_years"] ?? null) !== null) {
        cargs.push(
            "-past_years",
            String((params["past_years"] ?? null))
        );
    }
    if ((params["type"] ?? null) !== null) {
        cargs.push(
            "-type",
            (params["type"] ?? null)
        );
    }
    if ((params["html"] ?? null)) {
        cargs.push("-html");
    }
    if ((params["dline"] ?? null)) {
        cargs.push("-dline");
    }
    if ((params["reverse"] ?? null)) {
        cargs.push("-reverse");
    }
    if ((params["show_field"] ?? null) !== null) {
        cargs.push(
            "-show_field",
            (params["show_field"] ?? null)
        );
    }
    if ((params["show_field_names"] ?? null)) {
        cargs.push("-show_field_names");
    }
    return cargs;
}


function afni_history_outputs(
    params: AfniHistoryParameters,
    execution: Execution,
): AfniHistoryOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AfniHistoryOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function afni_history_execute(
    params: AfniHistoryParameters,
    execution: Execution,
): AfniHistoryOutputs {
    /**
     * Show AFNI updates per user, dates, or levels.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AfniHistoryOutputs`).
     */
    params = execution.params(params)
    const cargs = afni_history_cargs(params, execution)
    const ret = afni_history_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function afni_history(
    verb_level: number | null = null,
    check_date: string | null = null,
    help: boolean = false,
    history: boolean = false,
    list_authors: boolean = false,
    list_types: boolean = false,
    version: boolean = false,
    author: string | null = null,
    level: number | null = null,
    min_level: number | null = null,
    program: string | null = null,
    past_entries: number | null = null,
    past_days: number | null = null,
    past_months: number | null = null,
    past_years: number | null = null,
    type_: string | null = null,
    html: boolean = false,
    dline: boolean = false,
    reverse: boolean = false,
    show_field: string | null = null,
    show_field_names: boolean = false,
    runner: Runner | null = null,
): AfniHistoryOutputs {
    /**
     * Show AFNI updates per user, dates, or levels.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param verb_level Request verbose output (LEVEL is from 0-6)
     * @param check_date Check history against given date. If most recent afni_history is older than the passed date, the distribution version might be considered out of date.
     * @param help Show help information
     * @param history Show this program's history
     * @param list_authors Show the list of valid authors
     * @param list_types Show the list of valid change types
     * @param version Show this program's version
     * @param author Restrict output to the given author
     * @param level Restrict output to the given level
     * @param min_level Restrict output to at least level LEVEL
     * @param program Restrict output to the given program
     * @param past_entries Restrict output to final ENTRIES entries
     * @param past_days Restrict output to the past DAYS days
     * @param past_months Restrict output to the past MONTHS months
     * @param past_years Restrict output to the past YEARS years
     * @param type_ Restrict output to the given TYPE (TYPE = 0..5, or strings 'NEW_PROG', etc.)
     * @param html Add HTML formatting
     * @param dline Put a divider line between dates
     * @param reverse Reverse the sorting order (sort is by date, author, level, program)
     * @param show_field Restrict entry output to field FIELD. Valid FIELDs include: all, firstline, day, month, year, date, author, program, level, type, desc, verbtext.
     * @param show_field_names List valid FIELD names for -show_field
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AfniHistoryOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AFNI_HISTORY_METADATA);
    const params = afni_history_params(verb_level, check_date, help, history, list_authors, list_types, version, author, level, min_level, program, past_entries, past_days, past_months, past_years, type_, html, dline, reverse, show_field, show_field_names)
    return afni_history_execute(params, execution);
}


export {
      AFNI_HISTORY_METADATA,
      AfniHistoryOutputs,
      AfniHistoryParameters,
      afni_history,
      afni_history_params,
};
