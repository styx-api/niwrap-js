// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LONG_SUBMIT_POSTPROC_METADATA: Metadata = {
    id: "9134aeb62a00f2309da855fdc314f3ded0379757.boutiques",
    name: "long_submit_postproc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LongSubmitPostprocParameters {
    "__STYXTYPE__": "long_submit_postproc";
    "qdec": InputPathType;
    "prog": string;
    "flags"?: string | null | undefined;
    "dir"?: string | null | undefined;
    "simulate": boolean;
    "pause"?: number | null | undefined;
    "max"?: number | null | undefined;
    "queue"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "long_submit_postproc": long_submit_postproc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `long_submit_postproc(...)`.
 *
 * @interface
 */
interface LongSubmitPostprocOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function long_submit_postproc_params(
    qdec: InputPathType,
    prog: string,
    flags: string | null = null,
    dir: string | null = null,
    simulate: boolean = false,
    pause: number | null = 13,
    max: number | null = 100,
    queue: string | null = null,
): LongSubmitPostprocParameters {
    /**
     * Build parameters.
    
     * @param qdec QDEC table file specifying the subjects and time points
     * @param prog Longitudinal script to call
     * @param flags Parameters (without --qdec) to pass to prog (using quotes ...)
     * @param dir Directory to store sub-tables and command files
     * @param simulate Do not submit anything, just print commands
     * @param pause Pause in seconds between submissions
     * @param max Maximum number of jobs for this user
     * @param queue Special queue to submit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "long_submit_postproc" as const,
        "qdec": qdec,
        "prog": prog,
        "simulate": simulate,
    };
    if (flags !== null) {
        params["flags"] = flags;
    }
    if (dir !== null) {
        params["dir"] = dir;
    }
    if (pause !== null) {
        params["pause"] = pause;
    }
    if (max !== null) {
        params["max"] = max;
    }
    if (queue !== null) {
        params["queue"] = queue;
    }
    return params;
}


function long_submit_postproc_cargs(
    params: LongSubmitPostprocParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("long_submit_postproc");
    cargs.push(
        "--qdec",
        execution.inputFile((params["qdec"] ?? null))
    );
    cargs.push(
        "--prog",
        (params["prog"] ?? null)
    );
    if ((params["flags"] ?? null) !== null) {
        cargs.push(
            "--flags",
            (params["flags"] ?? null)
        );
    }
    if ((params["dir"] ?? null) !== null) {
        cargs.push(
            "--dir",
            (params["dir"] ?? null)
        );
    }
    if ((params["simulate"] ?? null)) {
        cargs.push("--simulate");
    }
    if ((params["pause"] ?? null) !== null) {
        cargs.push(
            "--pause",
            String((params["pause"] ?? null))
        );
    }
    if ((params["max"] ?? null) !== null) {
        cargs.push(
            "--max",
            String((params["max"] ?? null))
        );
    }
    if ((params["queue"] ?? null) !== null) {
        cargs.push(
            "--queue",
            (params["queue"] ?? null)
        );
    }
    return cargs;
}


function long_submit_postproc_outputs(
    params: LongSubmitPostprocParameters,
    execution: Execution,
): LongSubmitPostprocOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: LongSubmitPostprocOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function long_submit_postproc_execute(
    params: LongSubmitPostprocParameters,
    execution: Execution,
): LongSubmitPostprocOutputs {
    /**
     * Submits jobs to the cluster (either seychelles or launchpad at NMR) for longitudinal post-processing.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `LongSubmitPostprocOutputs`).
     */
    params = execution.params(params)
    const cargs = long_submit_postproc_cargs(params, execution)
    const ret = long_submit_postproc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function long_submit_postproc(
    qdec: InputPathType,
    prog: string,
    flags: string | null = null,
    dir: string | null = null,
    simulate: boolean = false,
    pause: number | null = 13,
    max: number | null = 100,
    queue: string | null = null,
    runner: Runner | null = null,
): LongSubmitPostprocOutputs {
    /**
     * Submits jobs to the cluster (either seychelles or launchpad at NMR) for longitudinal post-processing.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param qdec QDEC table file specifying the subjects and time points
     * @param prog Longitudinal script to call
     * @param flags Parameters (without --qdec) to pass to prog (using quotes ...)
     * @param dir Directory to store sub-tables and command files
     * @param simulate Do not submit anything, just print commands
     * @param pause Pause in seconds between submissions
     * @param max Maximum number of jobs for this user
     * @param queue Special queue to submit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `LongSubmitPostprocOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LONG_SUBMIT_POSTPROC_METADATA);
    const params = long_submit_postproc_params(qdec, prog, flags, dir, simulate, pause, max, queue)
    return long_submit_postproc_execute(params, execution);
}


export {
      LONG_SUBMIT_POSTPROC_METADATA,
      LongSubmitPostprocOutputs,
      LongSubmitPostprocParameters,
      long_submit_postproc,
      long_submit_postproc_params,
};
