// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFREG_METADATA: Metadata = {
    id: "7926379a00df2da00c284be09c4c92596bd13d58.boutiques",
    name: "surfreg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SurfregParameters {
    "@type"?: "freesurfer/surfreg";
    "subject": string;
    "target": string;
    "cross_hemi": boolean;
    "reg_lh": boolean;
    "reg_rh": boolean;
    "reg_both": boolean;
    "no_annot": boolean;
    "annot"?: string | null | undefined;
    "aparc": boolean;
    "noneg": boolean;
    "init_reg"?: string | null | undefined;
    "lta"?: string | null | undefined;
    "init_from_tal": boolean;
    "outsurf"?: string | null | undefined;
    "no_set_vol_geom": boolean;
    "threads"?: number | null | undefined;
}
type SurfregParametersTagged = Required<Pick<SurfregParameters, '@type'>> & SurfregParameters;


/**
 * Output object returned when calling `SurfregParameters(...)`.
 *
 * @interface
 */
interface SurfregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface registration file
     */
    output_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject to register
 * @param target Target average subject to use as a registration target
 * @param cross_hemi Perform cross-hemi registration
 * @param reg_lh Register left hemisphere only
 * @param reg_rh Register right hemisphere only
 * @param reg_both Register both left and right hemispheres
 * @param no_annot Do not use annot to rip
 * @param annot Use specified annotation name
 * @param aparc Set annotation name to aparc.annot
 * @param noneg Option flag with unspecified behavior in the provided help text
 * @param init_reg Initial registration name, default is sphere
 * @param lta Apply rotational components of affine registration
 * @param init_from_tal Use talaiach.xfm.lta for initial spherical registration
 * @param outsurf Output surface name, default depends on the target
 * @param no_set_vol_geom Do not set volume geometry and center the sphere
 * @param threads Number of threads to run in parallel
 *
 * @returns Parameter dictionary
 */
function surfreg_params(
    subject: string,
    target: string,
    cross_hemi: boolean = false,
    reg_lh: boolean = false,
    reg_rh: boolean = false,
    reg_both: boolean = false,
    no_annot: boolean = false,
    annot: string | null = null,
    aparc: boolean = false,
    noneg: boolean = false,
    init_reg: string | null = null,
    lta: string | null = null,
    init_from_tal: boolean = false,
    outsurf: string | null = null,
    no_set_vol_geom: boolean = false,
    threads: number | null = null,
): SurfregParametersTagged {
    const params = {
        "@type": "freesurfer/surfreg" as const,
        "subject": subject,
        "target": target,
        "cross_hemi": cross_hemi,
        "reg_lh": reg_lh,
        "reg_rh": reg_rh,
        "reg_both": reg_both,
        "no_annot": no_annot,
        "aparc": aparc,
        "noneg": noneg,
        "init_from_tal": init_from_tal,
        "no_set_vol_geom": no_set_vol_geom,
    };
    if (annot !== null) {
        params["annot"] = annot;
    }
    if (init_reg !== null) {
        params["init_reg"] = init_reg;
    }
    if (lta !== null) {
        params["lta"] = lta;
    }
    if (outsurf !== null) {
        params["outsurf"] = outsurf;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surfreg_cargs(
    params: SurfregParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("surfreg");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--t",
        (params["target"] ?? null)
    );
    if ((params["cross_hemi"] ?? false)) {
        cargs.push("--xhemi");
    }
    if ((params["reg_lh"] ?? false)) {
        cargs.push("--lh");
    }
    if ((params["reg_rh"] ?? false)) {
        cargs.push("--rh");
    }
    if ((params["reg_both"] ?? false)) {
        cargs.push("--lhrh");
    }
    if ((params["no_annot"] ?? false)) {
        cargs.push("--no-annot");
    }
    if ((params["annot"] ?? null) !== null) {
        cargs.push(
            "--annot",
            (params["annot"] ?? null)
        );
    }
    if ((params["aparc"] ?? false)) {
        cargs.push("--aparc");
    }
    if ((params["noneg"] ?? false)) {
        cargs.push("--noneg");
    }
    if ((params["init_reg"] ?? null) !== null) {
        cargs.push(
            "--init-reg",
            (params["init_reg"] ?? null)
        );
    }
    if ((params["lta"] ?? null) !== null) {
        cargs.push(
            "--lta",
            (params["lta"] ?? null)
        );
    }
    if ((params["init_from_tal"] ?? false)) {
        cargs.push("--init-from-tal");
    }
    if ((params["outsurf"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["outsurf"] ?? null)
        );
    }
    if ((params["no_set_vol_geom"] ?? false)) {
        cargs.push("--no-set-vol-geom");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surfreg_outputs(
    params: SurfregParameters,
    execution: Execution,
): SurfregOutputs {
    const ret: SurfregOutputs = {
        root: execution.outputFile("."),
        output_surface: execution.outputFile(["subject/surf/hemi.target.sphere.reg"].join('')),
    };
    return ret;
}


/**
 * surfreg
 *
 * Performs surface registration (mris_register) between a subject and a target average subject based on the hemi.reg.template.tif atlas in the average subject.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfregOutputs`).
 */
function surfreg_execute(
    params: SurfregParameters,
    runner: Runner | null = null,
): SurfregOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFREG_METADATA);
    params = execution.params(params)
    const cargs = surfreg_cargs(params, execution)
    const ret = surfreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surfreg
 *
 * Performs surface registration (mris_register) between a subject and a target average subject based on the hemi.reg.template.tif atlas in the average subject.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject to register
 * @param target Target average subject to use as a registration target
 * @param cross_hemi Perform cross-hemi registration
 * @param reg_lh Register left hemisphere only
 * @param reg_rh Register right hemisphere only
 * @param reg_both Register both left and right hemispheres
 * @param no_annot Do not use annot to rip
 * @param annot Use specified annotation name
 * @param aparc Set annotation name to aparc.annot
 * @param noneg Option flag with unspecified behavior in the provided help text
 * @param init_reg Initial registration name, default is sphere
 * @param lta Apply rotational components of affine registration
 * @param init_from_tal Use talaiach.xfm.lta for initial spherical registration
 * @param outsurf Output surface name, default depends on the target
 * @param no_set_vol_geom Do not set volume geometry and center the sphere
 * @param threads Number of threads to run in parallel
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfregOutputs`).
 */
function surfreg(
    subject: string,
    target: string,
    cross_hemi: boolean = false,
    reg_lh: boolean = false,
    reg_rh: boolean = false,
    reg_both: boolean = false,
    no_annot: boolean = false,
    annot: string | null = null,
    aparc: boolean = false,
    noneg: boolean = false,
    init_reg: string | null = null,
    lta: string | null = null,
    init_from_tal: boolean = false,
    outsurf: string | null = null,
    no_set_vol_geom: boolean = false,
    threads: number | null = null,
    runner: Runner | null = null,
): SurfregOutputs {
    const params = surfreg_params(subject, target, cross_hemi, reg_lh, reg_rh, reg_both, no_annot, annot, aparc, noneg, init_reg, lta, init_from_tal, outsurf, no_set_vol_geom, threads)
    return surfreg_execute(params, runner);
}


export {
      SURFREG_METADATA,
      SurfregOutputs,
      surfreg,
      surfreg_execute,
      surfreg_params,
};
