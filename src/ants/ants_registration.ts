// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_REGISTRATION_METADATA: Metadata = {
    id: "c1ca233b97fb2c34e284eb1f804669cd3da9255a.boutiques",
    name: "antsRegistration",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsRegistrationInitialMovingTransformParameters {
    "__STYXTYPE__": "initial_moving_transform";
    "initial_moving_transform": InputPathType;
}


interface AntsRegistrationInitialMovingTransformUseInverseParameters {
    "__STYXTYPE__": "initial_moving_transform_use_inverse";
    "initial_moving_transform": InputPathType;
    "use_inverse"?: 0 | 1 | null | undefined;
}


interface AntsRegistrationInitialMovingTransformInitializationFeatureParameters {
    "__STYXTYPE__": "initial_moving_transform_initialization_feature";
    "fixed_image": InputPathType;
    "moving_image": InputPathType;
    "initialization_feature": 0 | 1 | 2;
}


interface AntsRegistrationTransformRigidParameters {
    "__STYXTYPE__": "transform_rigid";
    "gradient_step": number;
}


interface AntsRegistrationTransformAffineParameters {
    "__STYXTYPE__": "transform_affine";
    "gradient_step": number;
}


interface AntsRegistrationTransformCompositeAffineParameters {
    "__STYXTYPE__": "transform_composite_affine";
    "gradient_step": number;
}


interface AntsRegistrationTransformSimilarityParameters {
    "__STYXTYPE__": "transform_similarity";
    "gradient_step": number;
}


interface AntsRegistrationTransformTranslationParameters {
    "__STYXTYPE__": "transform_translation";
    "gradient_step": number;
}


interface AntsRegistrationTransformBsplineParameters {
    "__STYXTYPE__": "transform_bspline";
    "gradient_step": number;
    "mesh_size_at_base_level": number;
}


interface AntsRegistrationTransformGaussianDisplacementFieldParameters {
    "__STYXTYPE__": "transform_gaussian_displacement_field";
    "gradient_step": number;
    "update_field_variance_in_voxel_space": number;
    "total_field_variance_in_voxel_space": number;
}


interface AntsRegistrationTransformBsplineDisplacementFieldParameters {
    "__STYXTYPE__": "transform_bspline_displacement_field";
    "gradient_step": number;
    "update_field_mesh_size_at_base_level": number;
    "total_field_mesh_size_at_base_level"?: number | null | undefined;
    "spline_order"?: number | null | undefined;
}


interface AntsRegistrationTransformTimeVaryingVelocityFieldParameters {
    "__STYXTYPE__": "transform_time_varying_velocity_field";
    "gradient_step": number;
    "number_of_time_indices": number;
    "update_field_variance_in_voxel_space": number;
    "update_field_time_variance": number;
    "total_field_variance_in_voxel_space": number;
    "total_field_time_variance": number;
}


interface AntsRegistrationTransformTimeVaryingBsplineVelocityFieldParameters {
    "__STYXTYPE__": "transform_time_varying_bspline_velocity_field";
    "gradient_step": number;
    "velocity_field_mesh_size": number;
    "number_of_time_point_samples"?: number | null | undefined;
    "spline_order"?: number | null | undefined;
}


interface AntsRegistrationTransformSynParameters {
    "__STYXTYPE__": "transform_syn";
    "gradient_step": number;
    "update_field_variance_in_voxel_space": number;
    "total_field_variance_in_voxel_space": number;
}


interface AntsRegistrationTransformBsplineSynParameters {
    "__STYXTYPE__": "transform_bspline_syn";
    "gradient_step": number;
    "update_field_mesh_size_at_base_level": number;
    "total_field_mesh_size_at_base_level"?: number | null | undefined;
    "spline_order"?: number | null | undefined;
}


interface AntsRegistrationTransformExponentialParameters {
    "__STYXTYPE__": "transform_exponential";
    "gradient_step": number;
    "update_field_variance_in_voxel_space": number;
    "velocity_field_variance_in_voxel_space": number;
    "number_of_integration_steps": number;
}


interface AntsRegistrationTransformBsplineExponentialParameters {
    "__STYXTYPE__": "transform_bspline_exponential";
    "gradient_step": number;
    "update_field_mesh_size_at_base_level": number;
    "velocity_field_mesh_size_at_base_level"?: number | null | undefined;
    "number_of_integration_steps"?: number | null | undefined;
    "spline_order"?: number | null | undefined;
}


interface AntsRegistrationMetricAntsNeighbourhoodCrossCorrelationParameters {
    "__STYXTYPE__": "metric_ants_neighbourhood_cross_correlation";
    "fixed_image": string;
    "moving_image": string;
    "metric_weight": number;
    "radius"?: number | null | undefined;
    "sampling_strategy"?: "None" | "Regular" | "Random" | null | undefined;
    "sampling_percentage"?: number | null | undefined;
    "use_gradient_filter"?: "true" | "false" | null | undefined;
}


interface AntsRegistrationMetricMutualInformationParameters {
    "__STYXTYPE__": "metric_mutual_information";
    "fixed_image": string;
    "moving_image": string;
    "metric_weight": number;
    "number_of_bins"?: number | null | undefined;
    "sampling_strategy"?: "None" | "Regular" | "Random" | null | undefined;
    "sampling_percentage"?: number | null | undefined;
    "use_gradient_filter"?: "true" | "false" | null | undefined;
}


interface AntsRegistrationMetricMattesParameters {
    "__STYXTYPE__": "metric_mattes";
    "fixed_image": string;
    "moving_image": string;
    "metric_weight": number;
    "number_of_bins"?: number | null | undefined;
    "sampling_strategy"?: "None" | "Regular" | "Random" | null | undefined;
    "sampling_percentage"?: number | null | undefined;
    "use_gradient_filter"?: "true" | "false" | null | undefined;
}


interface AntsRegistrationMetricMeanSquaresParameters {
    "__STYXTYPE__": "metric_mean_squares";
    "fixed_image": string;
    "moving_image": string;
    "metric_weight": number;
    "radius"?: number | null | undefined;
    "sampling_strategy"?: "None" | "Regular" | "Random" | null | undefined;
    "sampling_percentage"?: number | null | undefined;
    "use_gradient_filter"?: "true" | "false" | null | undefined;
}


interface AntsRegistrationMetricDemonsParameters {
    "__STYXTYPE__": "metric_demons";
    "fixed_image": string;
    "moving_image": string;
    "metric_weight": number;
    "number_of_bins"?: number | null | undefined;
    "sampling_strategy"?: "None" | "Regular" | "Random" | null | undefined;
    "sampling_percentage"?: number | null | undefined;
    "use_gradient_filter"?: "true" | "false" | null | undefined;
}


interface AntsRegistrationMetricGlobalCorrelationParameters {
    "__STYXTYPE__": "metric_global_correlation";
    "fixed_image": string;
    "moving_image": string;
    "metric_weight": number;
    "radius"?: number | null | undefined;
    "sampling_strategy"?: "None" | "Regular" | "Random" | null | undefined;
    "sampling_percentage"?: number | null | undefined;
    "use_gradient_filter"?: "true" | "false" | null | undefined;
}


interface AntsRegistrationMetricEuclideanIcpParameters {
    "__STYXTYPE__": "metric_euclidean_icp";
    "fixed_point_set": string;
    "moving_point_set": string;
    "metric_weight": number;
    "sampling_percentage"?: number | null | undefined;
    "boundary_points_only"?: "0" | null | undefined;
}


interface AntsRegistrationMetricPointSetExpectationParameters {
    "__STYXTYPE__": "metric_point_set_expectation";
    "metric_weight": number;
    "point_set_sigma"?: number | null | undefined;
    "sampling_percentage"?: number | null | undefined;
}


interface AntsRegistrationMetricJensenHavrdaCharvetTsallisParameters {
    "__STYXTYPE__": "metric_jensen_havrda_charvet_tsallis";
    "fixed_point_set": string;
    "moving_point_set": string;
    "metric_weight": number;
    "sampling_percentage"?: number | null | undefined;
    "boundary_points_only"?: "0" | null | undefined;
    "point_set_sigma"?: number | null | undefined;
    "k_neighborhood"?: number | null | undefined;
}


interface AntsRegistrationMetricIgdmParameters {
    "__STYXTYPE__": "metric_igdm";
}


interface AntsRegistrationConvergenceParameters {
    "__STYXTYPE__": "convergence";
    "convergence": string;
    "convergence_threshold": number;
    "convergence_window_size": number;
}


interface AntsRegistrationStageParameters {
    "__STYXTYPE__": "stage";
    "transform": AntsRegistrationTransformRigidParameters | AntsRegistrationTransformAffineParameters | AntsRegistrationTransformCompositeAffineParameters | AntsRegistrationTransformSimilarityParameters | AntsRegistrationTransformTranslationParameters | AntsRegistrationTransformBsplineParameters | AntsRegistrationTransformGaussianDisplacementFieldParameters | AntsRegistrationTransformBsplineDisplacementFieldParameters | AntsRegistrationTransformTimeVaryingVelocityFieldParameters | AntsRegistrationTransformTimeVaryingBsplineVelocityFieldParameters | AntsRegistrationTransformSynParameters | AntsRegistrationTransformBsplineSynParameters | AntsRegistrationTransformExponentialParameters | AntsRegistrationTransformBsplineExponentialParameters;
    "metric": AntsRegistrationMetricAntsNeighbourhoodCrossCorrelationParameters | AntsRegistrationMetricMutualInformationParameters | AntsRegistrationMetricMattesParameters | AntsRegistrationMetricMeanSquaresParameters | AntsRegistrationMetricDemonsParameters | AntsRegistrationMetricGlobalCorrelationParameters | AntsRegistrationMetricEuclideanIcpParameters | AntsRegistrationMetricPointSetExpectationParameters | AntsRegistrationMetricJensenHavrdaCharvetTsallisParameters | AntsRegistrationMetricIgdmParameters;
    "convergence": AntsRegistrationConvergenceParameters;
    "smoothing_sigmas": string;
    "shrink_factors": string;
    "use_histogram_matching"?: 0 | 1 | null | undefined;
}


interface AntsRegistrationWinsorizeImageIntensitiesParameters {
    "__STYXTYPE__": "winsorize_image_intensities";
    "lower_quantile": number;
    "upper_quantile": number;
}


interface AntsRegistrationMasksParameters {
    "__STYXTYPE__": "masks";
    "fixed_mask"?: string | null | undefined;
    "moving_mask"?: string | null | undefined;
}


interface AntsRegistrationParameters {
    "__STYXTYPE__": "antsRegistration";
    "dimensionality"?: 2 | 3 | 4 | null | undefined;
    "output"?: string | null | undefined;
    "save_state"?: string | null | undefined;
    "restore_state"?: string | null | undefined;
    "write_composite_transform"?: 0 | 1 | null | undefined;
    "print_similarity_measure_interval"?: number | null | undefined;
    "write_interval_volumes"?: number | null | undefined;
    "collapse_output_transforms"?: 1 | 0 | null | undefined;
    "initialize_transforms_per_stage"?: 1 | 0 | null | undefined;
    "interpolation"?: "Linear" | "NearestNeighbor" | "MultiLabel" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | "GenericLabel" | null | undefined;
    "restrict_deformation"?: Array<0 | 1> | null | undefined;
    "initial_fixed_transform"?: string | null | undefined;
    "initial_moving_transform"?: AntsRegistrationInitialMovingTransformParameters | AntsRegistrationInitialMovingTransformUseInverseParameters | AntsRegistrationInitialMovingTransformInitializationFeatureParameters | null | undefined;
    "stages": Array<AntsRegistrationStageParameters>;
    "winsorize_image_intensities"?: AntsRegistrationWinsorizeImageIntensitiesParameters | null | undefined;
    "masks"?: AntsRegistrationMasksParameters | null | undefined;
    "minc"?: 0 | 1 | null | undefined;
    "random_seed"?: number | null | undefined;
    "verbose"?: 0 | 1 | null | undefined;
    "float"?: 0 | 1 | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "antsRegistration": ants_registration_cargs,
        "initial_moving_transform": ants_registration_initial_moving_transform_cargs,
        "initial_moving_transform_use_inverse": ants_registration_initial_moving_transform_use_inverse_cargs,
        "initial_moving_transform_initialization_feature": ants_registration_initial_moving_transform_initialization_feature_cargs,
        "stage": ants_registration_stage_cargs,
        "transform_rigid": ants_registration_transform_rigid_cargs,
        "transform_affine": ants_registration_transform_affine_cargs,
        "transform_composite_affine": ants_registration_transform_composite_affine_cargs,
        "transform_similarity": ants_registration_transform_similarity_cargs,
        "transform_translation": ants_registration_transform_translation_cargs,
        "transform_bspline": ants_registration_transform_bspline_cargs,
        "transform_gaussian_displacement_field": ants_registration_transform_gaussian_displacement_field_cargs,
        "transform_bspline_displacement_field": ants_registration_transform_bspline_displacement_field_cargs,
        "transform_time_varying_velocity_field": ants_registration_transform_time_varying_velocity_field_cargs,
        "transform_time_varying_bspline_velocity_field": ants_registration_transform_time_varying_bspline_velocity_field_cargs,
        "transform_syn": ants_registration_transform_syn_cargs,
        "transform_bspline_syn": ants_registration_transform_bspline_syn_cargs,
        "transform_exponential": ants_registration_transform_exponential_cargs,
        "transform_bspline_exponential": ants_registration_transform_bspline_exponential_cargs,
        "metric_ants_neighbourhood_cross_correlation": ants_registration_metric_ants_neighbourhood_cross_correlation_cargs,
        "metric_mutual_information": ants_registration_metric_mutual_information_cargs,
        "metric_mattes": ants_registration_metric_mattes_cargs,
        "metric_mean_squares": ants_registration_metric_mean_squares_cargs,
        "metric_demons": ants_registration_metric_demons_cargs,
        "metric_global_correlation": ants_registration_metric_global_correlation_cargs,
        "metric_euclidean_icp": ants_registration_metric_euclidean_icp_cargs,
        "metric_point_set_expectation": ants_registration_metric_point_set_expectation_cargs,
        "metric_jensen_havrda_charvet_tsallis": ants_registration_metric_jensen_havrda_charvet_tsallis_cargs,
        "metric_igdm": ants_registration_metric_igdm_cargs,
        "convergence": ants_registration_convergence_cargs,
        "winsorize_image_intensities": ants_registration_winsorize_image_intensities_cargs,
        "masks": ants_registration_masks_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "antsRegistration": ants_registration_outputs,
    };
    return outputsFuncs[t];
}


function ants_registration_initial_moving_transform_params(
    initial_moving_transform: InputPathType,
): AntsRegistrationInitialMovingTransformParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "initial_moving_transform" as const,
        "initial_moving_transform": initial_moving_transform,
    };
    return params;
}


function ants_registration_initial_moving_transform_cargs(
    params: AntsRegistrationInitialMovingTransformParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["initial_moving_transform"] ?? null)));
    return cargs;
}


function ants_registration_initial_moving_transform_use_inverse_params(
    initial_moving_transform: InputPathType,
    use_inverse: 0 | 1 | null = null,
): AntsRegistrationInitialMovingTransformUseInverseParameters {
    /**
     * Build parameters.
    
     * @param use_inverse Use the inverse of the initial moving transform.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "initial_moving_transform_use_inverse" as const,
        "initial_moving_transform": initial_moving_transform,
    };
    if (use_inverse !== null) {
        params["use_inverse"] = use_inverse;
    }
    return params;
}


function ants_registration_initial_moving_transform_use_inverse_cargs(
    params: AntsRegistrationInitialMovingTransformUseInverseParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["use_inverse"] ?? null) !== null) {
        cargs.push(["[", execution.inputFile((params["initial_moving_transform"] ?? null)), ",", String((params["use_inverse"] ?? null)), "]"].join(''));
    }
    return cargs;
}


function ants_registration_initial_moving_transform_initialization_feature_params(
    fixed_image: InputPathType,
    moving_image: InputPathType,
    initialization_feature: 0 | 1 | 2,
): AntsRegistrationInitialMovingTransformInitializationFeatureParameters {
    /**
     * Build parameters.
    
     * @param initialization_feature Initialization feature. 0: Geometric center of images, 1: Image intensities, 2: Origin of images
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "initial_moving_transform_initialization_feature" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "initialization_feature": initialization_feature,
    };
    return params;
}


function ants_registration_initial_moving_transform_initialization_feature_cargs(
    params: AntsRegistrationInitialMovingTransformInitializationFeatureParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["[", execution.inputFile((params["fixed_image"] ?? null)), ",", execution.inputFile((params["moving_image"] ?? null)), ",", String((params["initialization_feature"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_rigid_params(
    gradient_step: number,
): AntsRegistrationTransformRigidParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_rigid" as const,
        "gradient_step": gradient_step,
    };
    return params;
}


function ants_registration_transform_rigid_cargs(
    params: AntsRegistrationTransformRigidParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["Rigid[", String((params["gradient_step"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_affine_params(
    gradient_step: number,
): AntsRegistrationTransformAffineParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_affine" as const,
        "gradient_step": gradient_step,
    };
    return params;
}


function ants_registration_transform_affine_cargs(
    params: AntsRegistrationTransformAffineParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["Affine[", String((params["gradient_step"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_composite_affine_params(
    gradient_step: number,
): AntsRegistrationTransformCompositeAffineParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_composite_affine" as const,
        "gradient_step": gradient_step,
    };
    return params;
}


function ants_registration_transform_composite_affine_cargs(
    params: AntsRegistrationTransformCompositeAffineParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["CompositeAffine[", String((params["gradient_step"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_similarity_params(
    gradient_step: number,
): AntsRegistrationTransformSimilarityParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_similarity" as const,
        "gradient_step": gradient_step,
    };
    return params;
}


function ants_registration_transform_similarity_cargs(
    params: AntsRegistrationTransformSimilarityParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["Similarity[", String((params["gradient_step"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_translation_params(
    gradient_step: number,
): AntsRegistrationTransformTranslationParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_translation" as const,
        "gradient_step": gradient_step,
    };
    return params;
}


function ants_registration_transform_translation_cargs(
    params: AntsRegistrationTransformTranslationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["Translation[", String((params["gradient_step"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_bspline_params(
    gradient_step: number,
    mesh_size_at_base_level: number,
): AntsRegistrationTransformBsplineParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_bspline" as const,
        "gradient_step": gradient_step,
        "mesh_size_at_base_level": mesh_size_at_base_level,
    };
    return params;
}


function ants_registration_transform_bspline_cargs(
    params: AntsRegistrationTransformBsplineParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["BSpline[", String((params["gradient_step"] ?? null)), ",", String((params["mesh_size_at_base_level"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_gaussian_displacement_field_params(
    gradient_step: number,
    update_field_variance_in_voxel_space: number,
    total_field_variance_in_voxel_space: number,
): AntsRegistrationTransformGaussianDisplacementFieldParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_gaussian_displacement_field" as const,
        "gradient_step": gradient_step,
        "update_field_variance_in_voxel_space": update_field_variance_in_voxel_space,
        "total_field_variance_in_voxel_space": total_field_variance_in_voxel_space,
    };
    return params;
}


function ants_registration_transform_gaussian_displacement_field_cargs(
    params: AntsRegistrationTransformGaussianDisplacementFieldParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["GaussianDisplacementField[", String((params["gradient_step"] ?? null)), ",", String((params["update_field_variance_in_voxel_space"] ?? null)), ",", String((params["total_field_variance_in_voxel_space"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_bspline_displacement_field_params(
    gradient_step: number,
    update_field_mesh_size_at_base_level: number,
    total_field_mesh_size_at_base_level: number | null = null,
    spline_order: number | null = null,
): AntsRegistrationTransformBsplineDisplacementFieldParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_bspline_displacement_field" as const,
        "gradient_step": gradient_step,
        "update_field_mesh_size_at_base_level": update_field_mesh_size_at_base_level,
    };
    if (total_field_mesh_size_at_base_level !== null) {
        params["total_field_mesh_size_at_base_level"] = total_field_mesh_size_at_base_level;
    }
    if (spline_order !== null) {
        params["spline_order"] = spline_order;
    }
    return params;
}


function ants_registration_transform_bspline_displacement_field_cargs(
    params: AntsRegistrationTransformBsplineDisplacementFieldParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["total_field_mesh_size_at_base_level"] ?? null) !== null || (params["spline_order"] ?? null) !== null) {
        cargs.push(["BSplineDisplacementField[", String((params["gradient_step"] ?? null)), ",", String((params["update_field_mesh_size_at_base_level"] ?? null)), ",", (((params["total_field_mesh_size_at_base_level"] ?? null) !== null) ? String((params["total_field_mesh_size_at_base_level"] ?? null)) : ""), (((params["spline_order"] ?? null) !== null) ? String((params["spline_order"] ?? null)) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_transform_time_varying_velocity_field_params(
    gradient_step: number,
    number_of_time_indices: number,
    update_field_variance_in_voxel_space: number,
    update_field_time_variance: number,
    total_field_variance_in_voxel_space: number,
    total_field_time_variance: number,
): AntsRegistrationTransformTimeVaryingVelocityFieldParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_time_varying_velocity_field" as const,
        "gradient_step": gradient_step,
        "number_of_time_indices": number_of_time_indices,
        "update_field_variance_in_voxel_space": update_field_variance_in_voxel_space,
        "update_field_time_variance": update_field_time_variance,
        "total_field_variance_in_voxel_space": total_field_variance_in_voxel_space,
        "total_field_time_variance": total_field_time_variance,
    };
    return params;
}


function ants_registration_transform_time_varying_velocity_field_cargs(
    params: AntsRegistrationTransformTimeVaryingVelocityFieldParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["TimeVaryingVelocityField[", String((params["gradient_step"] ?? null)), ",", String((params["number_of_time_indices"] ?? null)), ",", String((params["update_field_variance_in_voxel_space"] ?? null)), ",", String((params["update_field_time_variance"] ?? null)), ",", String((params["total_field_variance_in_voxel_space"] ?? null)), ",", String((params["total_field_time_variance"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_time_varying_bspline_velocity_field_params(
    gradient_step: number,
    velocity_field_mesh_size: number,
    number_of_time_point_samples: number | null = null,
    spline_order: number | null = null,
): AntsRegistrationTransformTimeVaryingBsplineVelocityFieldParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_time_varying_bspline_velocity_field" as const,
        "gradient_step": gradient_step,
        "velocity_field_mesh_size": velocity_field_mesh_size,
    };
    if (number_of_time_point_samples !== null) {
        params["number_of_time_point_samples"] = number_of_time_point_samples;
    }
    if (spline_order !== null) {
        params["spline_order"] = spline_order;
    }
    return params;
}


function ants_registration_transform_time_varying_bspline_velocity_field_cargs(
    params: AntsRegistrationTransformTimeVaryingBsplineVelocityFieldParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["number_of_time_point_samples"] ?? null) !== null || (params["spline_order"] ?? null) !== null) {
        cargs.push(["TimeVaryingBSplineVelocityField[", String((params["gradient_step"] ?? null)), ",", String((params["velocity_field_mesh_size"] ?? null)), ",", (((params["number_of_time_point_samples"] ?? null) !== null) ? String((params["number_of_time_point_samples"] ?? null)) : ""), ",", (((params["spline_order"] ?? null) !== null) ? String((params["spline_order"] ?? null)) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_transform_syn_params(
    gradient_step: number,
    update_field_variance_in_voxel_space: number,
    total_field_variance_in_voxel_space: number,
): AntsRegistrationTransformSynParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_syn" as const,
        "gradient_step": gradient_step,
        "update_field_variance_in_voxel_space": update_field_variance_in_voxel_space,
        "total_field_variance_in_voxel_space": total_field_variance_in_voxel_space,
    };
    return params;
}


function ants_registration_transform_syn_cargs(
    params: AntsRegistrationTransformSynParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["SyN[", String((params["gradient_step"] ?? null)), ",", String((params["update_field_variance_in_voxel_space"] ?? null)), ",", String((params["total_field_variance_in_voxel_space"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_bspline_syn_params(
    gradient_step: number,
    update_field_mesh_size_at_base_level: number,
    total_field_mesh_size_at_base_level: number | null = null,
    spline_order: number | null = null,
): AntsRegistrationTransformBsplineSynParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_bspline_syn" as const,
        "gradient_step": gradient_step,
        "update_field_mesh_size_at_base_level": update_field_mesh_size_at_base_level,
    };
    if (total_field_mesh_size_at_base_level !== null) {
        params["total_field_mesh_size_at_base_level"] = total_field_mesh_size_at_base_level;
    }
    if (spline_order !== null) {
        params["spline_order"] = spline_order;
    }
    return params;
}


function ants_registration_transform_bspline_syn_cargs(
    params: AntsRegistrationTransformBsplineSynParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["total_field_mesh_size_at_base_level"] ?? null) !== null || (params["spline_order"] ?? null) !== null) {
        cargs.push(["BSplineSyN[", String((params["gradient_step"] ?? null)), ",", String((params["update_field_mesh_size_at_base_level"] ?? null)), ",", (((params["total_field_mesh_size_at_base_level"] ?? null) !== null) ? String((params["total_field_mesh_size_at_base_level"] ?? null)) : ""), ",", (((params["spline_order"] ?? null) !== null) ? String((params["spline_order"] ?? null)) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_transform_exponential_params(
    gradient_step: number,
    update_field_variance_in_voxel_space: number,
    velocity_field_variance_in_voxel_space: number,
    number_of_integration_steps: number,
): AntsRegistrationTransformExponentialParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_exponential" as const,
        "gradient_step": gradient_step,
        "update_field_variance_in_voxel_space": update_field_variance_in_voxel_space,
        "velocity_field_variance_in_voxel_space": velocity_field_variance_in_voxel_space,
        "number_of_integration_steps": number_of_integration_steps,
    };
    return params;
}


function ants_registration_transform_exponential_cargs(
    params: AntsRegistrationTransformExponentialParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["Exponential[", String((params["gradient_step"] ?? null)), ",", String((params["update_field_variance_in_voxel_space"] ?? null)), ",", String((params["velocity_field_variance_in_voxel_space"] ?? null)), ",", String((params["number_of_integration_steps"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_transform_bspline_exponential_params(
    gradient_step: number,
    update_field_mesh_size_at_base_level: number,
    velocity_field_mesh_size_at_base_level: number | null = null,
    number_of_integration_steps: number | null = null,
    spline_order: number | null = null,
): AntsRegistrationTransformBsplineExponentialParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "transform_bspline_exponential" as const,
        "gradient_step": gradient_step,
        "update_field_mesh_size_at_base_level": update_field_mesh_size_at_base_level,
    };
    if (velocity_field_mesh_size_at_base_level !== null) {
        params["velocity_field_mesh_size_at_base_level"] = velocity_field_mesh_size_at_base_level;
    }
    if (number_of_integration_steps !== null) {
        params["number_of_integration_steps"] = number_of_integration_steps;
    }
    if (spline_order !== null) {
        params["spline_order"] = spline_order;
    }
    return params;
}


function ants_registration_transform_bspline_exponential_cargs(
    params: AntsRegistrationTransformBsplineExponentialParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["velocity_field_mesh_size_at_base_level"] ?? null) !== null || (params["number_of_integration_steps"] ?? null) !== null || (params["spline_order"] ?? null) !== null) {
        cargs.push(["BSplineExponential[", String((params["gradient_step"] ?? null)), ",", String((params["update_field_mesh_size_at_base_level"] ?? null)), ",", (((params["velocity_field_mesh_size_at_base_level"] ?? null) !== null) ? String((params["velocity_field_mesh_size_at_base_level"] ?? null)) : ""), ",", (((params["number_of_integration_steps"] ?? null) !== null) ? String((params["number_of_integration_steps"] ?? null)) : ""), ",", (((params["spline_order"] ?? null) !== null) ? String((params["spline_order"] ?? null)) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_ants_neighbourhood_cross_correlation_params(
    fixed_image: string,
    moving_image: string,
    metric_weight: number,
    radius: number | null = null,
    sampling_strategy: "None" | "Regular" | "Random" | null = null,
    sampling_percentage: number | null = null,
    use_gradient_filter: "true" | "false" | null = null,
): AntsRegistrationMetricAntsNeighbourhoodCrossCorrelationParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_ants_neighbourhood_cross_correlation" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "metric_weight": metric_weight,
    };
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (sampling_strategy !== null) {
        params["sampling_strategy"] = sampling_strategy;
    }
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (use_gradient_filter !== null) {
        params["use_gradient_filter"] = use_gradient_filter;
    }
    return params;
}


function ants_registration_metric_ants_neighbourhood_cross_correlation_cargs(
    params: AntsRegistrationMetricAntsNeighbourhoodCrossCorrelationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["radius"] ?? null) !== null || (params["sampling_strategy"] ?? null) !== null || (params["sampling_percentage"] ?? null) !== null || (params["use_gradient_filter"] ?? null) !== null) {
        cargs.push(["CC[", (params["fixed_image"] ?? null), ",", (params["moving_image"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["radius"] ?? null) !== null) ? String((params["radius"] ?? null)) : ""), ",", (((params["sampling_strategy"] ?? null) !== null) ? (params["sampling_strategy"] ?? null) : ""), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["use_gradient_filter"] ?? null) !== null) ? (params["use_gradient_filter"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_mutual_information_params(
    fixed_image: string,
    moving_image: string,
    metric_weight: number,
    number_of_bins: number | null = null,
    sampling_strategy: "None" | "Regular" | "Random" | null = null,
    sampling_percentage: number | null = null,
    use_gradient_filter: "true" | "false" | null = null,
): AntsRegistrationMetricMutualInformationParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_mutual_information" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "metric_weight": metric_weight,
    };
    if (number_of_bins !== null) {
        params["number_of_bins"] = number_of_bins;
    }
    if (sampling_strategy !== null) {
        params["sampling_strategy"] = sampling_strategy;
    }
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (use_gradient_filter !== null) {
        params["use_gradient_filter"] = use_gradient_filter;
    }
    return params;
}


function ants_registration_metric_mutual_information_cargs(
    params: AntsRegistrationMetricMutualInformationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["number_of_bins"] ?? null) !== null || (params["sampling_strategy"] ?? null) !== null || (params["sampling_percentage"] ?? null) !== null || (params["use_gradient_filter"] ?? null) !== null) {
        cargs.push(["MI[", (params["fixed_image"] ?? null), ",", (params["moving_image"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["number_of_bins"] ?? null) !== null) ? String((params["number_of_bins"] ?? null)) : ""), ",", (((params["sampling_strategy"] ?? null) !== null) ? (params["sampling_strategy"] ?? null) : ""), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["use_gradient_filter"] ?? null) !== null) ? (params["use_gradient_filter"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_mattes_params(
    fixed_image: string,
    moving_image: string,
    metric_weight: number,
    number_of_bins: number | null = null,
    sampling_strategy: "None" | "Regular" | "Random" | null = null,
    sampling_percentage: number | null = null,
    use_gradient_filter: "true" | "false" | null = null,
): AntsRegistrationMetricMattesParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_mattes" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "metric_weight": metric_weight,
    };
    if (number_of_bins !== null) {
        params["number_of_bins"] = number_of_bins;
    }
    if (sampling_strategy !== null) {
        params["sampling_strategy"] = sampling_strategy;
    }
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (use_gradient_filter !== null) {
        params["use_gradient_filter"] = use_gradient_filter;
    }
    return params;
}


function ants_registration_metric_mattes_cargs(
    params: AntsRegistrationMetricMattesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["number_of_bins"] ?? null) !== null || (params["sampling_strategy"] ?? null) !== null || (params["sampling_percentage"] ?? null) !== null || (params["use_gradient_filter"] ?? null) !== null) {
        cargs.push(["Mattes[", (params["fixed_image"] ?? null), ",", (params["moving_image"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["number_of_bins"] ?? null) !== null) ? String((params["number_of_bins"] ?? null)) : ""), ",", (((params["sampling_strategy"] ?? null) !== null) ? (params["sampling_strategy"] ?? null) : ""), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["use_gradient_filter"] ?? null) !== null) ? (params["use_gradient_filter"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_mean_squares_params(
    fixed_image: string,
    moving_image: string,
    metric_weight: number,
    radius: number | null = null,
    sampling_strategy: "None" | "Regular" | "Random" | null = null,
    sampling_percentage: number | null = null,
    use_gradient_filter: "true" | "false" | null = null,
): AntsRegistrationMetricMeanSquaresParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_mean_squares" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "metric_weight": metric_weight,
    };
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (sampling_strategy !== null) {
        params["sampling_strategy"] = sampling_strategy;
    }
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (use_gradient_filter !== null) {
        params["use_gradient_filter"] = use_gradient_filter;
    }
    return params;
}


function ants_registration_metric_mean_squares_cargs(
    params: AntsRegistrationMetricMeanSquaresParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["radius"] ?? null) !== null || (params["sampling_strategy"] ?? null) !== null || (params["sampling_percentage"] ?? null) !== null || (params["use_gradient_filter"] ?? null) !== null) {
        cargs.push(["MeanSquares[", (params["fixed_image"] ?? null), ",", (params["moving_image"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["radius"] ?? null) !== null) ? String((params["radius"] ?? null)) : ""), ",", (((params["sampling_strategy"] ?? null) !== null) ? (params["sampling_strategy"] ?? null) : ""), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["use_gradient_filter"] ?? null) !== null) ? (params["use_gradient_filter"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_demons_params(
    fixed_image: string,
    moving_image: string,
    metric_weight: number,
    number_of_bins: number | null = null,
    sampling_strategy: "None" | "Regular" | "Random" | null = null,
    sampling_percentage: number | null = null,
    use_gradient_filter: "true" | "false" | null = null,
): AntsRegistrationMetricDemonsParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_demons" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "metric_weight": metric_weight,
    };
    if (number_of_bins !== null) {
        params["number_of_bins"] = number_of_bins;
    }
    if (sampling_strategy !== null) {
        params["sampling_strategy"] = sampling_strategy;
    }
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (use_gradient_filter !== null) {
        params["use_gradient_filter"] = use_gradient_filter;
    }
    return params;
}


function ants_registration_metric_demons_cargs(
    params: AntsRegistrationMetricDemonsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["number_of_bins"] ?? null) !== null || (params["sampling_strategy"] ?? null) !== null || (params["sampling_percentage"] ?? null) !== null || (params["use_gradient_filter"] ?? null) !== null) {
        cargs.push(["Demons[", (params["fixed_image"] ?? null), ",", (params["moving_image"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["number_of_bins"] ?? null) !== null) ? String((params["number_of_bins"] ?? null)) : ""), ",", (((params["sampling_strategy"] ?? null) !== null) ? (params["sampling_strategy"] ?? null) : ""), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["use_gradient_filter"] ?? null) !== null) ? (params["use_gradient_filter"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_global_correlation_params(
    fixed_image: string,
    moving_image: string,
    metric_weight: number,
    radius: number | null = null,
    sampling_strategy: "None" | "Regular" | "Random" | null = null,
    sampling_percentage: number | null = null,
    use_gradient_filter: "true" | "false" | null = null,
): AntsRegistrationMetricGlobalCorrelationParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_global_correlation" as const,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "metric_weight": metric_weight,
    };
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (sampling_strategy !== null) {
        params["sampling_strategy"] = sampling_strategy;
    }
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (use_gradient_filter !== null) {
        params["use_gradient_filter"] = use_gradient_filter;
    }
    return params;
}


function ants_registration_metric_global_correlation_cargs(
    params: AntsRegistrationMetricGlobalCorrelationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["radius"] ?? null) !== null || (params["sampling_strategy"] ?? null) !== null || (params["sampling_percentage"] ?? null) !== null || (params["use_gradient_filter"] ?? null) !== null) {
        cargs.push(["GC[", (params["fixed_image"] ?? null), ",", (params["moving_image"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["radius"] ?? null) !== null) ? String((params["radius"] ?? null)) : ""), ",", (((params["sampling_strategy"] ?? null) !== null) ? (params["sampling_strategy"] ?? null) : ""), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["use_gradient_filter"] ?? null) !== null) ? (params["use_gradient_filter"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_euclidean_icp_params(
    fixed_point_set: string,
    moving_point_set: string,
    metric_weight: number,
    sampling_percentage: number | null = null,
    boundary_points_only: "0" | null = null,
): AntsRegistrationMetricEuclideanIcpParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_euclidean_icp" as const,
        "fixed_point_set": fixed_point_set,
        "moving_point_set": moving_point_set,
        "metric_weight": metric_weight,
    };
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (boundary_points_only !== null) {
        params["boundary_points_only"] = boundary_points_only;
    }
    return params;
}


function ants_registration_metric_euclidean_icp_cargs(
    params: AntsRegistrationMetricEuclideanIcpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["sampling_percentage"] ?? null) !== null || (params["boundary_points_only"] ?? null) !== null) {
        cargs.push(["ICP[", (params["fixed_point_set"] ?? null), ",", (params["moving_point_set"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["boundary_points_only"] ?? null) !== null) ? (params["boundary_points_only"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_point_set_expectation_params(
    metric_weight: number,
    point_set_sigma: number | null = null,
    sampling_percentage: number | null = null,
): AntsRegistrationMetricPointSetExpectationParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_point_set_expectation" as const,
        "metric_weight": metric_weight,
    };
    if (point_set_sigma !== null) {
        params["point_set_sigma"] = point_set_sigma;
    }
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    return params;
}


function ants_registration_metric_point_set_expectation_cargs(
    params: AntsRegistrationMetricPointSetExpectationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["point_set_sigma"] ?? null) !== null || (params["sampling_percentage"] ?? null) !== null) {
        cargs.push(["PSE[[FIXED_IMAGE],[MOVING_IMAGE],", String((params["metric_weight"] ?? null)), ",,", (((params["point_set_sigma"] ?? null) !== null) ? String((params["point_set_sigma"] ?? null)) : ""), "[SAMPLING_STRATEGY],", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), "[USE_GRADIENT_FILTER]]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_jensen_havrda_charvet_tsallis_params(
    fixed_point_set: string,
    moving_point_set: string,
    metric_weight: number,
    sampling_percentage: number | null = null,
    boundary_points_only: "0" | null = null,
    point_set_sigma: number | null = null,
    k_neighborhood: number | null = null,
): AntsRegistrationMetricJensenHavrdaCharvetTsallisParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_jensen_havrda_charvet_tsallis" as const,
        "fixed_point_set": fixed_point_set,
        "moving_point_set": moving_point_set,
        "metric_weight": metric_weight,
    };
    if (sampling_percentage !== null) {
        params["sampling_percentage"] = sampling_percentage;
    }
    if (boundary_points_only !== null) {
        params["boundary_points_only"] = boundary_points_only;
    }
    if (point_set_sigma !== null) {
        params["point_set_sigma"] = point_set_sigma;
    }
    if (k_neighborhood !== null) {
        params["k_neighborhood"] = k_neighborhood;
    }
    return params;
}


function ants_registration_metric_jensen_havrda_charvet_tsallis_cargs(
    params: AntsRegistrationMetricJensenHavrdaCharvetTsallisParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["sampling_percentage"] ?? null) !== null || (params["boundary_points_only"] ?? null) !== null || (params["point_set_sigma"] ?? null) !== null || (params["k_neighborhood"] ?? null) !== null) {
        cargs.push(["JHCT[", (params["fixed_point_set"] ?? null), ",", (params["moving_point_set"] ?? null), ",", String((params["metric_weight"] ?? null)), ",", (((params["sampling_percentage"] ?? null) !== null) ? String((params["sampling_percentage"] ?? null)) : ""), ",", (((params["boundary_points_only"] ?? null) !== null) ? (params["boundary_points_only"] ?? null) : ""), ",", (((params["point_set_sigma"] ?? null) !== null) ? String((params["point_set_sigma"] ?? null)) : ""), ",", (((params["k_neighborhood"] ?? null) !== null) ? String((params["k_neighborhood"] ?? null)) : ""), "]"].join(''));
    }
    return cargs;
}


function ants_registration_metric_igdm_params(
): AntsRegistrationMetricIgdmParameters {
    /**
     * Build parameters.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric_igdm" as const,
    };
    return params;
}


function ants_registration_metric_igdm_cargs(
    params: AntsRegistrationMetricIgdmParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("IGDM[");
    return cargs;
}


function ants_registration_convergence_params(
    convergence: string,
    convergence_threshold: number,
    convergence_window_size: number,
): AntsRegistrationConvergenceParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "convergence" as const,
        "convergence": convergence,
        "convergence_threshold": convergence_threshold,
        "convergence_window_size": convergence_window_size,
    };
    return params;
}


function ants_registration_convergence_cargs(
    params: AntsRegistrationConvergenceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["[", (params["convergence"] ?? null), ",", String((params["convergence_threshold"] ?? null)), ",", String((params["convergence_window_size"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_stage_params(
    transform: AntsRegistrationTransformRigidParameters | AntsRegistrationTransformAffineParameters | AntsRegistrationTransformCompositeAffineParameters | AntsRegistrationTransformSimilarityParameters | AntsRegistrationTransformTranslationParameters | AntsRegistrationTransformBsplineParameters | AntsRegistrationTransformGaussianDisplacementFieldParameters | AntsRegistrationTransformBsplineDisplacementFieldParameters | AntsRegistrationTransformTimeVaryingVelocityFieldParameters | AntsRegistrationTransformTimeVaryingBsplineVelocityFieldParameters | AntsRegistrationTransformSynParameters | AntsRegistrationTransformBsplineSynParameters | AntsRegistrationTransformExponentialParameters | AntsRegistrationTransformBsplineExponentialParameters,
    metric: AntsRegistrationMetricAntsNeighbourhoodCrossCorrelationParameters | AntsRegistrationMetricMutualInformationParameters | AntsRegistrationMetricMattesParameters | AntsRegistrationMetricMeanSquaresParameters | AntsRegistrationMetricDemonsParameters | AntsRegistrationMetricGlobalCorrelationParameters | AntsRegistrationMetricEuclideanIcpParameters | AntsRegistrationMetricPointSetExpectationParameters | AntsRegistrationMetricJensenHavrdaCharvetTsallisParameters | AntsRegistrationMetricIgdmParameters,
    convergence: AntsRegistrationConvergenceParameters,
    smoothing_sigmas: string,
    shrink_factors: string,
    use_histogram_matching: 0 | 1 | null = null,
): AntsRegistrationStageParameters {
    /**
     * Build parameters.
    
     * @param transform Several transform options are available. The gradientStep or learningRate characterizes the gradient descent optimization and is scaled appropriately for each transform using the shift scales estimator. Subsequent parameters are transform-specific and can be determined from the usage. For the B-spline transforms one can also specify the smoothing in terms of spline distance (i.e. knot spacing).
     * @param metric These image metrics are available--- CC: ANTS neighborhood cross correlation, MI: Mutual information, Demons: (Thirion), MeanSquares, and GC: Global Correlation. The "metricWeight" variable is used to modulate the per stage weighting of the metrics. The metrics can also employ a sampling strategy defined by a sampling percentage. The sampling strategy defaults to 'None' (aka a dense sampling of one sample per voxel), otherwise it defines a point set over which to optimize the metric. The point set can be on a regular lattice or a random lattice of points slightly perturbed to minimize aliasing artifacts. samplingPercentage defines the fraction of points to select from the domain. useGradientFilter specifies whether a smoothingfilter is applied when estimating the metric gradient.In addition, three point set metrics are available: Euclidean (ICP), Point-set expectation (PSE), and Jensen-Havrda-Charvet-Tsallis (JHCT).
     * @param convergence Convergence is determined from the number of iterations per level and is determined by fitting a line to the normalized energy profile of the last N iterations (where N is specified by the window size) and determining the slope which is then compared with the convergence threshold. 
     * @param smoothing_sigmas Specify the sigma of gaussian smoothing at each level. Units are given in terms of voxels ('vox') or physical spacing ('mm'). Example usage is '4x2x1mm' and '4x2x1vox' where no units implies voxel spacing.
     * @param shrink_factors Specify the shrink factor for the virtual domain (typically the fixed image) at each level.
     * @param use_histogram_matching Use histogram matching.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "stage" as const,
        "transform": transform,
        "metric": metric,
        "convergence": convergence,
        "smoothing_sigmas": smoothing_sigmas,
        "shrink_factors": shrink_factors,
    };
    if (use_histogram_matching !== null) {
        params["use_histogram_matching"] = use_histogram_matching;
    }
    return params;
}


function ants_registration_stage_cargs(
    params: AntsRegistrationStageParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(
        "--transform",
        ...dynCargs((params["transform"] ?? null).__STYXTYPE__)((params["transform"] ?? null), execution)
    );
    cargs.push(
        "--metric",
        ...dynCargs((params["metric"] ?? null).__STYXTYPE__)((params["metric"] ?? null), execution)
    );
    cargs.push(
        "--convergence",
        ...dynCargs((params["convergence"] ?? null).__STYXTYPE__)((params["convergence"] ?? null), execution)
    );
    cargs.push(
        "--smoothing-sigmas",
        (params["smoothing_sigmas"] ?? null)
    );
    cargs.push(
        "--shrink-factors",
        (params["shrink_factors"] ?? null)
    );
    if ((params["use_histogram_matching"] ?? null) !== null) {
        cargs.push(
            "--use-histogram-matching",
            String((params["use_histogram_matching"] ?? null))
        );
    }
    return cargs;
}


function ants_registration_winsorize_image_intensities_params(
    lower_quantile: number,
    upper_quantile: number,
): AntsRegistrationWinsorizeImageIntensitiesParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "winsorize_image_intensities" as const,
        "lower_quantile": lower_quantile,
        "upper_quantile": upper_quantile,
    };
    return params;
}


function ants_registration_winsorize_image_intensities_cargs(
    params: AntsRegistrationWinsorizeImageIntensitiesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["[", String((params["lower_quantile"] ?? null)), String((params["upper_quantile"] ?? null)), "]"].join(''));
    return cargs;
}


function ants_registration_masks_params(
    fixed_mask: string | null = null,
    moving_mask: string | null = null,
): AntsRegistrationMasksParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "masks" as const,
    };
    if (fixed_mask !== null) {
        params["fixed_mask"] = fixed_mask;
    }
    if (moving_mask !== null) {
        params["moving_mask"] = moving_mask;
    }
    return params;
}


function ants_registration_masks_cargs(
    params: AntsRegistrationMasksParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["fixed_mask"] ?? null) !== null || (params["moving_mask"] ?? null) !== null) {
        cargs.push(["[", (((params["fixed_mask"] ?? null) !== null) ? (params["fixed_mask"] ?? null) : ""), (((params["moving_mask"] ?? null) !== null) ? (params["moving_mask"] ?? null) : ""), "]"].join(''));
    }
    return cargs;
}


/**
 * Output object returned when calling `ants_registration(...)`.
 *
 * @interface
 */
interface AntsRegistrationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output is the generic affine transformation matrix.
     */
    generic_affine: OutputPathType | null;
    /**
     * The output is the warped fixed image.
     */
    inverse_warped: OutputPathType | null;
    /**
     * The output is the inverse warp field.
     */
    inverse_warp: OutputPathType | null;
    /**
     * The output is the warped moving image.
     */
    warped: OutputPathType | null;
    /**
     * The output is the warp field.
     */
    warp: OutputPathType | null;
}


function ants_registration_params(
    stages: Array<AntsRegistrationStageParameters>,
    dimensionality: 2 | 3 | 4 | null = null,
    output: string | null = null,
    save_state: string | null = null,
    restore_state: string | null = null,
    write_composite_transform: 0 | 1 | null = null,
    print_similarity_measure_interval: number | null = null,
    write_interval_volumes: number | null = null,
    collapse_output_transforms: 1 | 0 | null = null,
    initialize_transforms_per_stage: 1 | 0 | null = null,
    interpolation: "Linear" | "NearestNeighbor" | "MultiLabel" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | "GenericLabel" | null = null,
    restrict_deformation: Array<0 | 1> | null = null,
    initial_fixed_transform: string | null = null,
    initial_moving_transform: AntsRegistrationInitialMovingTransformParameters | AntsRegistrationInitialMovingTransformUseInverseParameters | AntsRegistrationInitialMovingTransformInitializationFeatureParameters | null = null,
    winsorize_image_intensities: AntsRegistrationWinsorizeImageIntensitiesParameters | null = null,
    masks: AntsRegistrationMasksParameters | null = null,
    minc: 0 | 1 | null = null,
    random_seed: number | null = null,
    verbose: 0 | 1 | null = null,
    float: 0 | 1 | null = null,
): AntsRegistrationParameters {
    /**
     * Build parameters.
    
     * @param stages Stages of the registration process.
     * @param dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, we try to infer the dimensionality from the input image.
     * @param output Specify the output transform prefix (output format is .nii.gz ). Optionally, one can choose to warp the moving image to the fixed space and, if the inverse transform exists, one can also output the warped fixed image. Note that only the images specified in the first metric call are warped. Use antsApplyTransforms to warp other images using the resultant transform(s). When a composite transform is not specified, linear transforms are specified with a '.mat' suffix and displacement fields with a 'Warp.nii.gz' suffix (and 'InverseWarp.nii.gz', when applicable. In addition, for velocity-based transforms, the full velocity field is written to file ('VelocityField.nii.gz') as long as the collapse transforms flag is turned off ('-z 0').
     * @param save_state  Specify the output file for the current state of the registration. The state file is written to an hdf5 composite file. It is specially usefull if we want to save the current state of a SyN registration to the disk, so we can load and restore that later to continue the next registration process directly started from the last saved state. The output file of this flag is the same as the write-composite-transform, unless the last transform is a SyN transform. In that case, the inverse displacement field of the SyN transform is also added to the output composite transform. Again notice that this file cannot be treated as a transform, and restore-state option must be used to load the written file by this flag.
     * @param restore_state Specify the initial state of the registration which get immediately used to directly initialize the registration process. The flag is mutually exclusive with other intialization flags.If this flag is used, none of the initial-moving-transform and initial-fixed-transform cannot be used.
     * @param write_composite_transform Boolean specifying whether or not the composite transform (and its inverse, if it exists) should be written to an hdf5 composite file. This is false by default so that only the transform for each stage is written to file.
     * @param print_similarity_measure_interval Prints out the CC similarity metric measure between the full-size input fixed and the transformed moving images at each iteration a value of 0 (the default) indicates that the full scale computation should not take placeany value greater than 0 represents the interval of full scale metric computation.
     * @param write_interval_volumes Writes out the output volume at each iteration. It helps to present the registration process as a short movie a value of 0 (the default) indicates that this option should not take placeany value greater than 0 represents the interval between the iterations which outputs are written to the disk.
     * @param collapse_output_transforms Collapse output transforms. Specifically, enabling this option combines all adjacent transforms where possible. All adjacent linear transforms are written to disk in the form of an itk affine transform (called xxxGenericAffine.mat).
Similarly, all adjacent displacement field transforms are combined when written to disk (e.g. xxxWarp.nii.gz and xxxInverseWarp.nii.gz (if available)). Also, an output composite transform including the collapsed transforms is written to the disk (called outputCollapsed(Inverse)Composite).
     * @param initialize_transforms_per_stage Initialize linear transforms from the previous stage. By enabling this option, the current linear stage transform is directly intialized from the previous stage's linear transform; this allows multiple linear stages to be run where each stage directly updates the estimated linear transform from the previous stage. (e.g. Translation -> Rigid -> Affine).
     * @param interpolation Several interpolation options are available in ITK. These have all been made available. Currently the interpolator choice is only used to warp (and possibly inverse warp) the final output image(s).
     * @param restrict_deformation This option allows the user to restrict the optimization of the displacement field, translation, rigid or affine transform on a per-component basis. For example, if one wants to limit the deformation or rotation of 3-D volume to the first two dimensions, this is possible by specifying a weight vector of '1x1x0' for a deformation field or '1x1x0x1x1x0' for a rigid transformation. Low-dimensional restriction only works if there are no preceding transformations.All stages up to and including the desired stage must have this option specified,even if they should not be restricted (in which case specify 1x1x1...)
     * @param initial_fixed_transform Specify the initial fixed transform(s) which get immediately incorporated into the composite transform. The order of the transforms is stack-esque in that the last transform specified on the command line is the first to be applied. In addition to initialization with ITK transforms, the user can perform an initial translation alignment by specifying the fixed and moving images and selecting an initialization feature. These features include using the geometric center of the images (=0), the image intensities (=1), or the origin of the images (=2).
     * @param initial_moving_transform Specify the initial moving transform(s) which get immediately incorporated into the composite transform. The order of the transforms is stack-esque in that the last transform specified on the command line is the first to be applied. In addition to initialization with ITK transforms, the user can perform an initial translation alignment by specifying the fixed and moving images and selecting an initialization feature. These features include using the geometric center of the images (=0), the image intensities (=1), or the origin of the images (=2).
     * @param winsorize_image_intensities Winsorize data based on specified quantiles.
     * @param masks Image masks to limit voxels considered by the metric. Two options are allowed for mask specification: 1) Either the user specifies a single mask to be used for all stages or 2) the user specifies a mask for each stage. With the latter one can select to which stages masks are applied by supplying valid file names. If the file does not exist, a mask will not be used for that stage. Note that we handle the fixed and moving masks separately to enforce this constraint.
     * @param minc Use MINC file formats for transformations.
     * @param random_seed Random seed.
     * @param verbose Verbose output.
     * @param float Use 'float' instead of 'double' for computations.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "antsRegistration" as const,
        "stages": stages,
    };
    if (dimensionality !== null) {
        params["dimensionality"] = dimensionality;
    }
    if (output !== null) {
        params["output"] = output;
    }
    if (save_state !== null) {
        params["save_state"] = save_state;
    }
    if (restore_state !== null) {
        params["restore_state"] = restore_state;
    }
    if (write_composite_transform !== null) {
        params["write_composite_transform"] = write_composite_transform;
    }
    if (print_similarity_measure_interval !== null) {
        params["print_similarity_measure_interval"] = print_similarity_measure_interval;
    }
    if (write_interval_volumes !== null) {
        params["write_interval_volumes"] = write_interval_volumes;
    }
    if (collapse_output_transforms !== null) {
        params["collapse_output_transforms"] = collapse_output_transforms;
    }
    if (initialize_transforms_per_stage !== null) {
        params["initialize_transforms_per_stage"] = initialize_transforms_per_stage;
    }
    if (interpolation !== null) {
        params["interpolation"] = interpolation;
    }
    if (restrict_deformation !== null) {
        params["restrict_deformation"] = restrict_deformation;
    }
    if (initial_fixed_transform !== null) {
        params["initial_fixed_transform"] = initial_fixed_transform;
    }
    if (initial_moving_transform !== null) {
        params["initial_moving_transform"] = initial_moving_transform;
    }
    if (winsorize_image_intensities !== null) {
        params["winsorize_image_intensities"] = winsorize_image_intensities;
    }
    if (masks !== null) {
        params["masks"] = masks;
    }
    if (minc !== null) {
        params["minc"] = minc;
    }
    if (random_seed !== null) {
        params["random_seed"] = random_seed;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    if (float !== null) {
        params["float"] = float;
    }
    return params;
}


function ants_registration_cargs(
    params: AntsRegistrationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("antsRegistration");
    if ((params["dimensionality"] ?? null) !== null) {
        cargs.push(
            "--dimensionality",
            String((params["dimensionality"] ?? null))
        );
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output"] ?? null)
        );
    }
    if ((params["save_state"] ?? null) !== null) {
        cargs.push(
            "-j",
            (params["save_state"] ?? null)
        );
    }
    if ((params["restore_state"] ?? null) !== null) {
        cargs.push(
            "-k",
            (params["restore_state"] ?? null)
        );
    }
    if ((params["write_composite_transform"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["write_composite_transform"] ?? null))
        );
    }
    if ((params["print_similarity_measure_interval"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["print_similarity_measure_interval"] ?? null))
        );
    }
    if ((params["write_interval_volumes"] ?? null) !== null) {
        cargs.push(
            "--write-interval-volumes",
            String((params["write_interval_volumes"] ?? null))
        );
    }
    if ((params["collapse_output_transforms"] ?? null) !== null) {
        cargs.push(
            "--collapse-output-transforms",
            String((params["collapse_output_transforms"] ?? null))
        );
    }
    if ((params["initialize_transforms_per_stage"] ?? null) !== null) {
        cargs.push(
            "-i",
            String((params["initialize_transforms_per_stage"] ?? null))
        );
    }
    if ((params["interpolation"] ?? null) !== null) {
        cargs.push(
            "--interpolation",
            (params["interpolation"] ?? null)
        );
    }
    if ((params["restrict_deformation"] ?? null) !== null) {
        cargs.push(
            "-g",
            (params["restrict_deformation"] ?? null).map(String).join("x")
        );
    }
    if ((params["initial_fixed_transform"] ?? null) !== null) {
        cargs.push(
            "-q",
            (params["initial_fixed_transform"] ?? null)
        );
    }
    if ((params["initial_moving_transform"] ?? null) !== null) {
        cargs.push(
            "--initial-moving-transform",
            ...dynCargs((params["initial_moving_transform"] ?? null).__STYXTYPE__)((params["initial_moving_transform"] ?? null), execution)
        );
    }
    cargs.push(...(params["stages"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    if ((params["winsorize_image_intensities"] ?? null) !== null) {
        cargs.push(
            "--winsorize-image-intensities",
            ...dynCargs((params["winsorize_image_intensities"] ?? null).__STYXTYPE__)((params["winsorize_image_intensities"] ?? null), execution)
        );
    }
    if ((params["masks"] ?? null) !== null) {
        cargs.push(
            "--masks",
            ...dynCargs((params["masks"] ?? null).__STYXTYPE__)((params["masks"] ?? null), execution)
        );
    }
    if ((params["minc"] ?? null) !== null) {
        cargs.push(
            "--minc",
            String((params["minc"] ?? null))
        );
    }
    if ((params["random_seed"] ?? null) !== null) {
        cargs.push(
            "--random-seed",
            String((params["random_seed"] ?? null))
        );
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["verbose"] ?? null))
        );
    }
    if ((params["float"] ?? null) !== null) {
        cargs.push(
            "--float",
            String((params["float"] ?? null))
        );
    }
    return cargs;
}


function ants_registration_outputs(
    params: AntsRegistrationParameters,
    execution: Execution,
): AntsRegistrationOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AntsRegistrationOutputs = {
        root: execution.outputFile("."),
        generic_affine: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null), "0GenericAffine.mat"].join('')) : null,
        inverse_warped: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null), "InverseWarped.nii.gz"].join('')) : null,
        inverse_warp: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null), "1InverseWarp.nii.gz"].join('')) : null,
        warped: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null), "Warped.nii.gz"].join('')) : null,
        warp: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null), "1Warp.nii.gz"].join('')) : null,
    };
    return ret;
}


function ants_registration_execute(
    params: AntsRegistrationParameters,
    execution: Execution,
): AntsRegistrationOutputs {
    /**
     * This program is a user-level registration application meant to utilize classes in ITK v4.0 and later. The user can specify any number of "stages" where a stage consists of a transform; an image metric; and iterations, shrink factors, and smoothing sigmas for each level. Note that explicitly setting the dimensionality, metric, transform, output, convergence, shrink-factors, and smoothing-sigmas parameters is mandatory.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AntsRegistrationOutputs`).
     */
    params = execution.params(params)
    const cargs = ants_registration_cargs(params, execution)
    const ret = ants_registration_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ants_registration(
    stages: Array<AntsRegistrationStageParameters>,
    dimensionality: 2 | 3 | 4 | null = null,
    output: string | null = null,
    save_state: string | null = null,
    restore_state: string | null = null,
    write_composite_transform: 0 | 1 | null = null,
    print_similarity_measure_interval: number | null = null,
    write_interval_volumes: number | null = null,
    collapse_output_transforms: 1 | 0 | null = null,
    initialize_transforms_per_stage: 1 | 0 | null = null,
    interpolation: "Linear" | "NearestNeighbor" | "MultiLabel" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | "GenericLabel" | null = null,
    restrict_deformation: Array<0 | 1> | null = null,
    initial_fixed_transform: string | null = null,
    initial_moving_transform: AntsRegistrationInitialMovingTransformParameters | AntsRegistrationInitialMovingTransformUseInverseParameters | AntsRegistrationInitialMovingTransformInitializationFeatureParameters | null = null,
    winsorize_image_intensities: AntsRegistrationWinsorizeImageIntensitiesParameters | null = null,
    masks: AntsRegistrationMasksParameters | null = null,
    minc: 0 | 1 | null = null,
    random_seed: number | null = null,
    verbose: 0 | 1 | null = null,
    float: 0 | 1 | null = null,
    runner: Runner | null = null,
): AntsRegistrationOutputs {
    /**
     * This program is a user-level registration application meant to utilize classes in ITK v4.0 and later. The user can specify any number of "stages" where a stage consists of a transform; an image metric; and iterations, shrink factors, and smoothing sigmas for each level. Note that explicitly setting the dimensionality, metric, transform, output, convergence, shrink-factors, and smoothing-sigmas parameters is mandatory.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param stages Stages of the registration process.
     * @param dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, we try to infer the dimensionality from the input image.
     * @param output Specify the output transform prefix (output format is .nii.gz ). Optionally, one can choose to warp the moving image to the fixed space and, if the inverse transform exists, one can also output the warped fixed image. Note that only the images specified in the first metric call are warped. Use antsApplyTransforms to warp other images using the resultant transform(s). When a composite transform is not specified, linear transforms are specified with a '.mat' suffix and displacement fields with a 'Warp.nii.gz' suffix (and 'InverseWarp.nii.gz', when applicable. In addition, for velocity-based transforms, the full velocity field is written to file ('VelocityField.nii.gz') as long as the collapse transforms flag is turned off ('-z 0').
     * @param save_state  Specify the output file for the current state of the registration. The state file is written to an hdf5 composite file. It is specially usefull if we want to save the current state of a SyN registration to the disk, so we can load and restore that later to continue the next registration process directly started from the last saved state. The output file of this flag is the same as the write-composite-transform, unless the last transform is a SyN transform. In that case, the inverse displacement field of the SyN transform is also added to the output composite transform. Again notice that this file cannot be treated as a transform, and restore-state option must be used to load the written file by this flag.
     * @param restore_state Specify the initial state of the registration which get immediately used to directly initialize the registration process. The flag is mutually exclusive with other intialization flags.If this flag is used, none of the initial-moving-transform and initial-fixed-transform cannot be used.
     * @param write_composite_transform Boolean specifying whether or not the composite transform (and its inverse, if it exists) should be written to an hdf5 composite file. This is false by default so that only the transform for each stage is written to file.
     * @param print_similarity_measure_interval Prints out the CC similarity metric measure between the full-size input fixed and the transformed moving images at each iteration a value of 0 (the default) indicates that the full scale computation should not take placeany value greater than 0 represents the interval of full scale metric computation.
     * @param write_interval_volumes Writes out the output volume at each iteration. It helps to present the registration process as a short movie a value of 0 (the default) indicates that this option should not take placeany value greater than 0 represents the interval between the iterations which outputs are written to the disk.
     * @param collapse_output_transforms Collapse output transforms. Specifically, enabling this option combines all adjacent transforms where possible. All adjacent linear transforms are written to disk in the form of an itk affine transform (called xxxGenericAffine.mat).
Similarly, all adjacent displacement field transforms are combined when written to disk (e.g. xxxWarp.nii.gz and xxxInverseWarp.nii.gz (if available)). Also, an output composite transform including the collapsed transforms is written to the disk (called outputCollapsed(Inverse)Composite).
     * @param initialize_transforms_per_stage Initialize linear transforms from the previous stage. By enabling this option, the current linear stage transform is directly intialized from the previous stage's linear transform; this allows multiple linear stages to be run where each stage directly updates the estimated linear transform from the previous stage. (e.g. Translation -> Rigid -> Affine).
     * @param interpolation Several interpolation options are available in ITK. These have all been made available. Currently the interpolator choice is only used to warp (and possibly inverse warp) the final output image(s).
     * @param restrict_deformation This option allows the user to restrict the optimization of the displacement field, translation, rigid or affine transform on a per-component basis. For example, if one wants to limit the deformation or rotation of 3-D volume to the first two dimensions, this is possible by specifying a weight vector of '1x1x0' for a deformation field or '1x1x0x1x1x0' for a rigid transformation. Low-dimensional restriction only works if there are no preceding transformations.All stages up to and including the desired stage must have this option specified,even if they should not be restricted (in which case specify 1x1x1...)
     * @param initial_fixed_transform Specify the initial fixed transform(s) which get immediately incorporated into the composite transform. The order of the transforms is stack-esque in that the last transform specified on the command line is the first to be applied. In addition to initialization with ITK transforms, the user can perform an initial translation alignment by specifying the fixed and moving images and selecting an initialization feature. These features include using the geometric center of the images (=0), the image intensities (=1), or the origin of the images (=2).
     * @param initial_moving_transform Specify the initial moving transform(s) which get immediately incorporated into the composite transform. The order of the transforms is stack-esque in that the last transform specified on the command line is the first to be applied. In addition to initialization with ITK transforms, the user can perform an initial translation alignment by specifying the fixed and moving images and selecting an initialization feature. These features include using the geometric center of the images (=0), the image intensities (=1), or the origin of the images (=2).
     * @param winsorize_image_intensities Winsorize data based on specified quantiles.
     * @param masks Image masks to limit voxels considered by the metric. Two options are allowed for mask specification: 1) Either the user specifies a single mask to be used for all stages or 2) the user specifies a mask for each stage. With the latter one can select to which stages masks are applied by supplying valid file names. If the file does not exist, a mask will not be used for that stage. Note that we handle the fixed and moving masks separately to enforce this constraint.
     * @param minc Use MINC file formats for transformations.
     * @param random_seed Random seed.
     * @param verbose Verbose output.
     * @param float Use 'float' instead of 'double' for computations.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AntsRegistrationOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_REGISTRATION_METADATA);
    const params = ants_registration_params(stages, dimensionality, output, save_state, restore_state, write_composite_transform, print_similarity_measure_interval, write_interval_volumes, collapse_output_transforms, initialize_transforms_per_stage, interpolation, restrict_deformation, initial_fixed_transform, initial_moving_transform, winsorize_image_intensities, masks, minc, random_seed, verbose, float)
    return ants_registration_execute(params, execution);
}


export {
      ANTS_REGISTRATION_METADATA,
      AntsRegistrationConvergenceParameters,
      AntsRegistrationInitialMovingTransformInitializationFeatureParameters,
      AntsRegistrationInitialMovingTransformParameters,
      AntsRegistrationInitialMovingTransformUseInverseParameters,
      AntsRegistrationMasksParameters,
      AntsRegistrationMetricAntsNeighbourhoodCrossCorrelationParameters,
      AntsRegistrationMetricDemonsParameters,
      AntsRegistrationMetricEuclideanIcpParameters,
      AntsRegistrationMetricGlobalCorrelationParameters,
      AntsRegistrationMetricIgdmParameters,
      AntsRegistrationMetricJensenHavrdaCharvetTsallisParameters,
      AntsRegistrationMetricMattesParameters,
      AntsRegistrationMetricMeanSquaresParameters,
      AntsRegistrationMetricMutualInformationParameters,
      AntsRegistrationMetricPointSetExpectationParameters,
      AntsRegistrationOutputs,
      AntsRegistrationParameters,
      AntsRegistrationStageParameters,
      AntsRegistrationTransformAffineParameters,
      AntsRegistrationTransformBsplineDisplacementFieldParameters,
      AntsRegistrationTransformBsplineExponentialParameters,
      AntsRegistrationTransformBsplineParameters,
      AntsRegistrationTransformBsplineSynParameters,
      AntsRegistrationTransformCompositeAffineParameters,
      AntsRegistrationTransformExponentialParameters,
      AntsRegistrationTransformGaussianDisplacementFieldParameters,
      AntsRegistrationTransformRigidParameters,
      AntsRegistrationTransformSimilarityParameters,
      AntsRegistrationTransformSynParameters,
      AntsRegistrationTransformTimeVaryingBsplineVelocityFieldParameters,
      AntsRegistrationTransformTimeVaryingVelocityFieldParameters,
      AntsRegistrationTransformTranslationParameters,
      AntsRegistrationWinsorizeImageIntensitiesParameters,
      ants_registration,
      ants_registration_convergence_params,
      ants_registration_initial_moving_transform_initialization_feature_params,
      ants_registration_initial_moving_transform_params,
      ants_registration_initial_moving_transform_use_inverse_params,
      ants_registration_masks_params,
      ants_registration_metric_ants_neighbourhood_cross_correlation_params,
      ants_registration_metric_demons_params,
      ants_registration_metric_euclidean_icp_params,
      ants_registration_metric_global_correlation_params,
      ants_registration_metric_igdm_params,
      ants_registration_metric_jensen_havrda_charvet_tsallis_params,
      ants_registration_metric_mattes_params,
      ants_registration_metric_mean_squares_params,
      ants_registration_metric_mutual_information_params,
      ants_registration_metric_point_set_expectation_params,
      ants_registration_params,
      ants_registration_stage_params,
      ants_registration_transform_affine_params,
      ants_registration_transform_bspline_displacement_field_params,
      ants_registration_transform_bspline_exponential_params,
      ants_registration_transform_bspline_params,
      ants_registration_transform_bspline_syn_params,
      ants_registration_transform_composite_affine_params,
      ants_registration_transform_exponential_params,
      ants_registration_transform_gaussian_displacement_field_params,
      ants_registration_transform_rigid_params,
      ants_registration_transform_similarity_params,
      ants_registration_transform_syn_params,
      ants_registration_transform_time_varying_bspline_velocity_field_params,
      ants_registration_transform_time_varying_velocity_field_params,
      ants_registration_transform_translation_params,
      ants_registration_winsorize_image_intensities_params,
};
