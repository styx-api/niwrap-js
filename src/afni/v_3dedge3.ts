// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DEDGE3_METADATA: Metadata = {
    id: "d7d3b3b44cb6ea512aa961c541a8cbc9f1d748d8.boutiques",
    name: "3dedge3",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dedge3Parameters {
    "@type": "afni.3dedge3";
    "input_file": InputPathType;
    "verbose": boolean;
    "prefix"?: string | null | undefined;
    "datum"?: string | null | undefined;
    "fscale": boolean;
    "gscale": boolean;
    "nscale": boolean;
    "scale_floats"?: number | null | undefined;
    "automask": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dedge3": v_3dedge3_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dedge3": v_3dedge3_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dedge3(...)`.
 *
 * @interface
 */
interface V3dedge3Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file Input dataset
 * @param verbose Print out some information along the way
 * @param prefix Sets the prefix of the output dataset
 * @param datum Sets the datum of the output dataset
 * @param fscale Force scaling of the output to the maximum integer range
 * @param gscale Same as '-fscale', but also forces each output sub-brick to get the same scaling factor
 * @param nscale Don't do any scaling on output to byte or short datasets
 * @param scale_floats Multiply input by VAL, but only if the input datum is float.
 * @param automask For automatic internal calculation of a mask in the usual AFNI way
 *
 * @returns Parameter dictionary
 */
function v_3dedge3_params(
    input_file: InputPathType,
    verbose: boolean = false,
    prefix: string | null = null,
    datum: string | null = null,
    fscale: boolean = false,
    gscale: boolean = false,
    nscale: boolean = false,
    scale_floats: number | null = null,
    automask: boolean = false,
): V3dedge3Parameters {
    const params = {
        "@type": "afni.3dedge3" as const,
        "input_file": input_file,
        "verbose": verbose,
        "fscale": fscale,
        "gscale": gscale,
        "nscale": nscale,
        "automask": automask,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    if (scale_floats !== null) {
        params["scale_floats"] = scale_floats;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dedge3_cargs(
    params: V3dedge3Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dedge3");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["verbose"] ?? null)) {
        cargs.push("-verbose");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    if ((params["fscale"] ?? null)) {
        cargs.push("-fscale");
    }
    if ((params["gscale"] ?? null)) {
        cargs.push("-gscale");
    }
    if ((params["nscale"] ?? null)) {
        cargs.push("-nscale");
    }
    if ((params["scale_floats"] ?? null) !== null) {
        cargs.push(
            "-scale_floats",
            String((params["scale_floats"] ?? null))
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dedge3_outputs(
    params: V3dedge3Parameters,
    execution: Execution,
): V3dedge3Outputs {
    const ret: V3dedge3Outputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * Does 3D Edge detection using the library 3DEdge.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dedge3Outputs`).
 */
function v_3dedge3_execute(
    params: V3dedge3Parameters,
    runner: Runner | null = null,
): V3dedge3Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DEDGE3_METADATA);
    params = execution.params(params)
    const cargs = v_3dedge3_cargs(params, execution)
    const ret = v_3dedge3_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Does 3D Edge detection using the library 3DEdge.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Input dataset
 * @param verbose Print out some information along the way
 * @param prefix Sets the prefix of the output dataset
 * @param datum Sets the datum of the output dataset
 * @param fscale Force scaling of the output to the maximum integer range
 * @param gscale Same as '-fscale', but also forces each output sub-brick to get the same scaling factor
 * @param nscale Don't do any scaling on output to byte or short datasets
 * @param scale_floats Multiply input by VAL, but only if the input datum is float.
 * @param automask For automatic internal calculation of a mask in the usual AFNI way
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dedge3Outputs`).
 */
function v_3dedge3(
    input_file: InputPathType,
    verbose: boolean = false,
    prefix: string | null = null,
    datum: string | null = null,
    fscale: boolean = false,
    gscale: boolean = false,
    nscale: boolean = false,
    scale_floats: number | null = null,
    automask: boolean = false,
    runner: Runner | null = null,
): V3dedge3Outputs {
    const params = v_3dedge3_params(input_file, verbose, prefix, datum, fscale, gscale, nscale, scale_floats, automask)
    return v_3dedge3_execute(params, runner);
}


export {
      V3dedge3Outputs,
      V3dedge3Parameters,
      V_3DEDGE3_METADATA,
      v_3dedge3,
      v_3dedge3_execute,
      v_3dedge3_params,
};
