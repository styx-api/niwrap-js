// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_AVERAGE_SURFACE_METADATA: Metadata = {
    id: "94c5bf3efca7b9fdd1f04d2277eaabf0efcf3d85.boutiques",
    name: "make_average_surface",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MakeAverageSurfaceParameters {
    "@type"?: "freesurfer/make_average_surface";
    "subjects": Array<string>;
    "fsgd_file"?: InputPathType | null | undefined;
    "average_subject_name"?: string | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "sd_out_dir"?: string | null | undefined;
    "transform_file"?: string | null | undefined;
    "icosahedron_number"?: number | null | undefined;
    "surf_reg"?: string | null | undefined;
    "left_hemi": boolean;
    "right_hemi": boolean;
    "force": boolean;
    "annot_template": boolean;
    "template_only": boolean;
    "no_template_only": boolean;
    "no_annot": boolean;
    "no_cortex_label": boolean;
    "annot_list"?: Array<string> | null | undefined;
    "meas_list"?: Array<string> | null | undefined;
    "no_surf2surf": boolean;
    "no_symlink": boolean;
    "version": boolean;
    "echo": boolean;
}
type MakeAverageSurfaceParametersTagged = Required<Pick<MakeAverageSurfaceParameters, '@type'>> & MakeAverageSurfaceParameters;


/**
 * Output object returned when calling `MakeAverageSurfaceParameters(...)`.
 *
 * @interface
 */
interface MakeAverageSurfaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjects List of subject names
 * @param fsgd_file File from which to get the subject list
 * @param average_subject_name Average subject name
 * @param subjects_dir Directory for SUBJECTS_DIR (if different from the environment variable)
 * @param sd_out_dir Directory to put output data
 * @param transform_file Filename of the transform file
 * @param icosahedron_number Specify icosahedron number
 * @param surf_reg Alternative registration surface name
 * @param left_hemi Only process the left hemisphere
 * @param right_hemi Only process the right hemisphere
 * @param force Overwrite existing average subject data
 * @param annot_template Use annotation when making tif
 * @param template_only Useful when creating iterative atlases
 * @param no_template_only Turns off --template-only
 * @param no_annot Do not create average annotations
 * @param no_cortex_label Do not create ?h.cortex.label
 * @param annot_list List of annotations to use
 * @param meas_list List of measurements to use
 * @param no_surf2surf Use old parametric surface method
 * @param no_symlink Do not use symbolic links, just copy files
 * @param version Script version information
 * @param echo Enable command echo for debugging
 *
 * @returns Parameter dictionary
 */
function make_average_surface_params(
    subjects: Array<string>,
    fsgd_file: InputPathType | null = null,
    average_subject_name: string | null = null,
    subjects_dir: string | null = null,
    sd_out_dir: string | null = null,
    transform_file: string | null = null,
    icosahedron_number: number | null = null,
    surf_reg: string | null = null,
    left_hemi: boolean = false,
    right_hemi: boolean = false,
    force: boolean = false,
    annot_template: boolean = false,
    template_only: boolean = false,
    no_template_only: boolean = false,
    no_annot: boolean = false,
    no_cortex_label: boolean = false,
    annot_list: Array<string> | null = null,
    meas_list: Array<string> | null = null,
    no_surf2surf: boolean = false,
    no_symlink: boolean = false,
    version: boolean = false,
    echo: boolean = false,
): MakeAverageSurfaceParametersTagged {
    const params = {
        "@type": "freesurfer/make_average_surface" as const,
        "subjects": subjects,
        "left_hemi": left_hemi,
        "right_hemi": right_hemi,
        "force": force,
        "annot_template": annot_template,
        "template_only": template_only,
        "no_template_only": no_template_only,
        "no_annot": no_annot,
        "no_cortex_label": no_cortex_label,
        "no_surf2surf": no_surf2surf,
        "no_symlink": no_symlink,
        "version": version,
        "echo": echo,
    };
    if (fsgd_file !== null) {
        params["fsgd_file"] = fsgd_file;
    }
    if (average_subject_name !== null) {
        params["average_subject_name"] = average_subject_name;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (sd_out_dir !== null) {
        params["sd_out_dir"] = sd_out_dir;
    }
    if (transform_file !== null) {
        params["transform_file"] = transform_file;
    }
    if (icosahedron_number !== null) {
        params["icosahedron_number"] = icosahedron_number;
    }
    if (surf_reg !== null) {
        params["surf_reg"] = surf_reg;
    }
    if (annot_list !== null) {
        params["annot_list"] = annot_list;
    }
    if (meas_list !== null) {
        params["meas_list"] = meas_list;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_average_surface_cargs(
    params: MakeAverageSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make_average_surface");
    cargs.push(...(params["subjects"] ?? null));
    if ((params["fsgd_file"] ?? null) !== null) {
        cargs.push(
            "--fsgd",
            execution.inputFile((params["fsgd_file"] ?? null))
        );
    }
    if ((params["average_subject_name"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["average_subject_name"] ?? null)
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sdir",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["sd_out_dir"] ?? null) !== null) {
        cargs.push(
            "--sd-out",
            (params["sd_out_dir"] ?? null)
        );
    }
    if ((params["transform_file"] ?? null) !== null) {
        cargs.push(
            "--xform",
            (params["transform_file"] ?? null)
        );
    }
    if ((params["icosahedron_number"] ?? null) !== null) {
        cargs.push(
            "--ico",
            String((params["icosahedron_number"] ?? null))
        );
    }
    if ((params["surf_reg"] ?? null) !== null) {
        cargs.push(
            "--surf-reg",
            (params["surf_reg"] ?? null)
        );
    }
    if ((params["left_hemi"] ?? false)) {
        cargs.push("--lh");
    }
    if ((params["right_hemi"] ?? false)) {
        cargs.push("--rh");
    }
    if ((params["force"] ?? false)) {
        cargs.push("--force");
    }
    if ((params["annot_template"] ?? false)) {
        cargs.push("--annot-template");
    }
    if ((params["template_only"] ?? false)) {
        cargs.push("--template-only");
    }
    if ((params["no_template_only"] ?? false)) {
        cargs.push("--no-template-only");
    }
    if ((params["no_annot"] ?? false)) {
        cargs.push("--no-annot");
    }
    if ((params["no_cortex_label"] ?? false)) {
        cargs.push("--no-cortex-label");
    }
    if ((params["annot_list"] ?? null) !== null) {
        cargs.push(
            "--annot",
            ...(params["annot_list"] ?? null)
        );
    }
    if ((params["meas_list"] ?? null) !== null) {
        cargs.push(
            "--meas",
            ...(params["meas_list"] ?? null)
        );
    }
    if ((params["no_surf2surf"] ?? false)) {
        cargs.push("--no-surf2surf");
    }
    if ((params["no_symlink"] ?? false)) {
        cargs.push("--no-symlink");
    }
    if ((params["version"] ?? false)) {
        cargs.push("--version");
    }
    if ((params["echo"] ?? false)) {
        cargs.push("--echo");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_average_surface_outputs(
    params: MakeAverageSurfaceParameters,
    execution: Execution,
): MakeAverageSurfaceOutputs {
    const ret: MakeAverageSurfaceOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * make_average_surface
 *
 * Creates average surfaces and curvatures from a set of subjects.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeAverageSurfaceOutputs`).
 */
function make_average_surface_execute(
    params: MakeAverageSurfaceParameters,
    runner: Runner | null = null,
): MakeAverageSurfaceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_AVERAGE_SURFACE_METADATA);
    params = execution.params(params)
    const cargs = make_average_surface_cargs(params, execution)
    const ret = make_average_surface_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * make_average_surface
 *
 * Creates average surfaces and curvatures from a set of subjects.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects List of subject names
 * @param fsgd_file File from which to get the subject list
 * @param average_subject_name Average subject name
 * @param subjects_dir Directory for SUBJECTS_DIR (if different from the environment variable)
 * @param sd_out_dir Directory to put output data
 * @param transform_file Filename of the transform file
 * @param icosahedron_number Specify icosahedron number
 * @param surf_reg Alternative registration surface name
 * @param left_hemi Only process the left hemisphere
 * @param right_hemi Only process the right hemisphere
 * @param force Overwrite existing average subject data
 * @param annot_template Use annotation when making tif
 * @param template_only Useful when creating iterative atlases
 * @param no_template_only Turns off --template-only
 * @param no_annot Do not create average annotations
 * @param no_cortex_label Do not create ?h.cortex.label
 * @param annot_list List of annotations to use
 * @param meas_list List of measurements to use
 * @param no_surf2surf Use old parametric surface method
 * @param no_symlink Do not use symbolic links, just copy files
 * @param version Script version information
 * @param echo Enable command echo for debugging
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeAverageSurfaceOutputs`).
 */
function make_average_surface(
    subjects: Array<string>,
    fsgd_file: InputPathType | null = null,
    average_subject_name: string | null = null,
    subjects_dir: string | null = null,
    sd_out_dir: string | null = null,
    transform_file: string | null = null,
    icosahedron_number: number | null = null,
    surf_reg: string | null = null,
    left_hemi: boolean = false,
    right_hemi: boolean = false,
    force: boolean = false,
    annot_template: boolean = false,
    template_only: boolean = false,
    no_template_only: boolean = false,
    no_annot: boolean = false,
    no_cortex_label: boolean = false,
    annot_list: Array<string> | null = null,
    meas_list: Array<string> | null = null,
    no_surf2surf: boolean = false,
    no_symlink: boolean = false,
    version: boolean = false,
    echo: boolean = false,
    runner: Runner | null = null,
): MakeAverageSurfaceOutputs {
    const params = make_average_surface_params(subjects, fsgd_file, average_subject_name, subjects_dir, sd_out_dir, transform_file, icosahedron_number, surf_reg, left_hemi, right_hemi, force, annot_template, template_only, no_template_only, no_annot, no_cortex_label, annot_list, meas_list, no_surf2surf, no_symlink, version, echo)
    return make_average_surface_execute(params, runner);
}


export {
      MAKE_AVERAGE_SURFACE_METADATA,
      MakeAverageSurfaceOutputs,
      make_average_surface,
      make_average_surface_execute,
      make_average_surface_params,
};
