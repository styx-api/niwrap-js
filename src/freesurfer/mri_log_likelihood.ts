// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LOG_LIKELIHOOD_METADATA: Metadata = {
    id: "f22fe6123ce8f0f860ffe7eecd35b5f18caff0af.boutiques",
    name: "mri_log_likelihood",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLogLikelihoodParameters {
    "@type": "freesurfer.mri_log_likelihood";
    "input_brain_images": Array<InputPathType>;
    "atlas_file": InputPathType;
    "transform_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_log_likelihood": mri_log_likelihood_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_log_likelihood(...)`.
 *
 * @interface
 */
interface MriLogLikelihoodOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_brain_images List of input brain images
 * @param atlas_file Atlas image file
 * @param transform_file Transform file for registration
 *
 * @returns Parameter dictionary
 */
function mri_log_likelihood_params(
    input_brain_images: Array<InputPathType>,
    atlas_file: InputPathType,
    transform_file: InputPathType,
): MriLogLikelihoodParameters {
    const params = {
        "@type": "freesurfer.mri_log_likelihood" as const,
        "input_brain_images": input_brain_images,
        "atlas_file": atlas_file,
        "transform_file": transform_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_log_likelihood_cargs(
    params: MriLogLikelihoodParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_log_likelihood");
    cargs.push(...(params["input_brain_images"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(execution.inputFile((params["atlas_file"] ?? null)));
    cargs.push(execution.inputFile((params["transform_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_log_likelihood_outputs(
    params: MriLogLikelihoodParameters,
    execution: Execution,
): MriLogLikelihoodOutputs {
    const ret: MriLogLikelihoodOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_log_likelihood
 *
 * MRI log likelihood calculation tool for brain images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLogLikelihoodOutputs`).
 */
function mri_log_likelihood_execute(
    params: MriLogLikelihoodParameters,
    runner: Runner | null = null,
): MriLogLikelihoodOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LOG_LIKELIHOOD_METADATA);
    params = execution.params(params)
    const cargs = mri_log_likelihood_cargs(params, execution)
    const ret = mri_log_likelihood_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_log_likelihood
 *
 * MRI log likelihood calculation tool for brain images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_brain_images List of input brain images
 * @param atlas_file Atlas image file
 * @param transform_file Transform file for registration
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLogLikelihoodOutputs`).
 */
function mri_log_likelihood(
    input_brain_images: Array<InputPathType>,
    atlas_file: InputPathType,
    transform_file: InputPathType,
    runner: Runner | null = null,
): MriLogLikelihoodOutputs {
    const params = mri_log_likelihood_params(input_brain_images, atlas_file, transform_file)
    return mri_log_likelihood_execute(params, runner);
}


export {
      MRI_LOG_LIKELIHOOD_METADATA,
      MriLogLikelihoodOutputs,
      MriLogLikelihoodParameters,
      mri_log_likelihood,
      mri_log_likelihood_execute,
      mri_log_likelihood_params,
};
