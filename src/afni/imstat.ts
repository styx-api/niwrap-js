// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMSTAT_METADATA: Metadata = {
    id: "4da535ce4141bcf89f5877ae61702c19f674a35c.boutiques",
    name: "imstat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImstatParameters {
    "@type": "afni.imstat";
    "no_label": boolean;
    "quiet": boolean;
    "pixstat_prefix"?: string | null | undefined;
    "image_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.imstat": imstat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.imstat": imstat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imstat(...)`.
 *
 * @interface
 */
interface ImstatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Mean of pixel-wise statistics for the collection of 2D images
     */
    mean_output: OutputPathType | null;
    /**
     * Standard deviation of pixel-wise statistics for the collection of 2D images
     */
    sdev_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param image_files Input image file(s)
 * @param no_label Don't write labels on each file's summary line
 * @param quiet Don't print statistics for each file
 * @param pixstat_prefix If more than one image file is given, then 'prefix.mean' and 'prefix.sdev' will be written as the pixel-wise statistics images of the whole collection. These images will be in the 'flim' floating point format. [This option only works on 2D images!]
 *
 * @returns Parameter dictionary
 */
function imstat_params(
    image_files: Array<InputPathType>,
    no_label: boolean = false,
    quiet: boolean = false,
    pixstat_prefix: string | null = null,
): ImstatParameters {
    const params = {
        "@type": "afni.imstat" as const,
        "no_label": no_label,
        "quiet": quiet,
        "image_files": image_files,
    };
    if (pixstat_prefix !== null) {
        params["pixstat_prefix"] = pixstat_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imstat_cargs(
    params: ImstatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imstat");
    if ((params["no_label"] ?? null)) {
        cargs.push("-nolabel");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["pixstat_prefix"] ?? null) !== null) {
        cargs.push(
            "-pixstat",
            (params["pixstat_prefix"] ?? null)
        );
    }
    cargs.push(...(params["image_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imstat_outputs(
    params: ImstatParameters,
    execution: Execution,
): ImstatOutputs {
    const ret: ImstatOutputs = {
        root: execution.outputFile("."),
        mean_output: ((params["pixstat_prefix"] ?? null) !== null) ? execution.outputFile([(params["pixstat_prefix"] ?? null), ".mean"].join('')) : null,
        sdev_output: ((params["pixstat_prefix"] ?? null) !== null) ? execution.outputFile([(params["pixstat_prefix"] ?? null), ".sdev"].join('')) : null,
    };
    return ret;
}


/**
 * imstat
 *
 * Calculation of statistics of one or more images.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImstatOutputs`).
 */
function imstat_execute(
    params: ImstatParameters,
    runner: Runner | null = null,
): ImstatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMSTAT_METADATA);
    params = execution.params(params)
    const cargs = imstat_cargs(params, execution)
    const ret = imstat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * imstat
 *
 * Calculation of statistics of one or more images.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param image_files Input image file(s)
 * @param no_label Don't write labels on each file's summary line
 * @param quiet Don't print statistics for each file
 * @param pixstat_prefix If more than one image file is given, then 'prefix.mean' and 'prefix.sdev' will be written as the pixel-wise statistics images of the whole collection. These images will be in the 'flim' floating point format. [This option only works on 2D images!]
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImstatOutputs`).
 */
function imstat(
    image_files: Array<InputPathType>,
    no_label: boolean = false,
    quiet: boolean = false,
    pixstat_prefix: string | null = null,
    runner: Runner | null = null,
): ImstatOutputs {
    const params = imstat_params(image_files, no_label, quiet, pixstat_prefix)
    return imstat_execute(params, runner);
}


export {
      IMSTAT_METADATA,
      ImstatOutputs,
      ImstatParameters,
      imstat,
      imstat_execute,
      imstat_params,
};
