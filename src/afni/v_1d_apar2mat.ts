// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_APAR2MAT_METADATA: Metadata = {
    id: "ca46e845c2aeb2bfc0d1ca66f53ca7adef2d7e64.boutiques",
    name: "1dApar2mat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dApar2matParameters {
    "@type": "afni.1dApar2mat";
    "x_shift": number;
    "y_shift": number;
    "z_shift": number;
    "z_angle": number;
    "x_angle": number;
    "y_angle": number;
    "x_scale": number;
    "y_scale": number;
    "z_scale": number;
    "y_x_shear": number;
    "z_x_shear": number;
    "z_y_shear": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.1dApar2mat": v_1d_apar2mat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1d_apar2mat(...)`.
 *
 * @interface
 */
interface V1dApar2matOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param x_shift x-shift in mm
 * @param y_shift y-shift in mm
 * @param z_shift z-shift in mm
 * @param z_angle z-angle (roll) in degrees
 * @param x_angle x-angle (pitch) in degrees
 * @param y_angle y-angle (yaw) in degrees
 * @param x_scale x-scale factor in [0.10,10.0]
 * @param y_scale y-scale factor in [0.10,10.0]
 * @param z_scale z-scale factor in [0.10,10.0]
 * @param y_x_shear y/x-shear factor in [-0.3333,0.3333]
 * @param z_x_shear z/x-shear factor in [-0.3333,0.3333]
 * @param z_y_shear z/y-shear factor in [-0.3333,0.3333]
 *
 * @returns Parameter dictionary
 */
function v_1d_apar2mat_params(
    x_shift: number,
    y_shift: number,
    z_shift: number,
    z_angle: number,
    x_angle: number,
    y_angle: number,
    x_scale: number,
    y_scale: number,
    z_scale: number,
    y_x_shear: number,
    z_x_shear: number,
    z_y_shear: number,
): V1dApar2matParameters {
    const params = {
        "@type": "afni.1dApar2mat" as const,
        "x_shift": x_shift,
        "y_shift": y_shift,
        "z_shift": z_shift,
        "z_angle": z_angle,
        "x_angle": x_angle,
        "y_angle": y_angle,
        "x_scale": x_scale,
        "y_scale": y_scale,
        "z_scale": z_scale,
        "y_x_shear": y_x_shear,
        "z_x_shear": z_x_shear,
        "z_y_shear": z_y_shear,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1d_apar2mat_cargs(
    params: V1dApar2matParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dApar2mat");
    cargs.push(String((params["x_shift"] ?? null)));
    cargs.push(String((params["y_shift"] ?? null)));
    cargs.push(String((params["z_shift"] ?? null)));
    cargs.push(String((params["z_angle"] ?? null)));
    cargs.push(String((params["x_angle"] ?? null)));
    cargs.push(String((params["y_angle"] ?? null)));
    cargs.push(String((params["x_scale"] ?? null)));
    cargs.push(String((params["y_scale"] ?? null)));
    cargs.push(String((params["z_scale"] ?? null)));
    cargs.push(String((params["y_x_shear"] ?? null)));
    cargs.push(String((params["z_x_shear"] ?? null)));
    cargs.push(String((params["z_y_shear"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1d_apar2mat_outputs(
    params: V1dApar2matParameters,
    execution: Execution,
): V1dApar2matOutputs {
    const ret: V1dApar2matOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 1dApar2mat
 *
 * Computes the affine transformation matrix from the set of 3dAllineate parameters.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dApar2matOutputs`).
 */
function v_1d_apar2mat_execute(
    params: V1dApar2matParameters,
    runner: Runner | null = null,
): V1dApar2matOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_APAR2MAT_METADATA);
    params = execution.params(params)
    const cargs = v_1d_apar2mat_cargs(params, execution)
    const ret = v_1d_apar2mat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 1dApar2mat
 *
 * Computes the affine transformation matrix from the set of 3dAllineate parameters.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param x_shift x-shift in mm
 * @param y_shift y-shift in mm
 * @param z_shift z-shift in mm
 * @param z_angle z-angle (roll) in degrees
 * @param x_angle x-angle (pitch) in degrees
 * @param y_angle y-angle (yaw) in degrees
 * @param x_scale x-scale factor in [0.10,10.0]
 * @param y_scale y-scale factor in [0.10,10.0]
 * @param z_scale z-scale factor in [0.10,10.0]
 * @param y_x_shear y/x-shear factor in [-0.3333,0.3333]
 * @param z_x_shear z/x-shear factor in [-0.3333,0.3333]
 * @param z_y_shear z/y-shear factor in [-0.3333,0.3333]
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dApar2matOutputs`).
 */
function v_1d_apar2mat(
    x_shift: number,
    y_shift: number,
    z_shift: number,
    z_angle: number,
    x_angle: number,
    y_angle: number,
    x_scale: number,
    y_scale: number,
    z_scale: number,
    y_x_shear: number,
    z_x_shear: number,
    z_y_shear: number,
    runner: Runner | null = null,
): V1dApar2matOutputs {
    const params = v_1d_apar2mat_params(x_shift, y_shift, z_shift, z_angle, x_angle, y_angle, x_scale, y_scale, z_scale, y_x_shear, z_x_shear, z_y_shear)
    return v_1d_apar2mat_execute(params, runner);
}


export {
      V1dApar2matOutputs,
      V1dApar2matParameters,
      V_1D_APAR2MAT_METADATA,
      v_1d_apar2mat,
      v_1d_apar2mat_execute,
      v_1d_apar2mat_params,
};
