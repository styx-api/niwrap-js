// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CLUST_EXP_STAT_PARSE_PY_METADATA: Metadata = {
    id: "49f4672da2d43b66b47563c0d330449527488d04.boutiques",
    name: "ClustExp_StatParse.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ClustExpStatParsePyParameters {
    "__STYXTYPE__": "ClustExp_StatParse.py";
    "statdset": InputPathType;
    "meanbrik": number;
    "threshbrik": number;
    "subjdset": InputPathType;
    "subjtable": InputPathType;
    "master": InputPathType;
    "prefix"?: string | null | undefined;
    "pval"?: number | null | undefined;
    "minvox"?: number | null | undefined;
    "atlas"?: string | null | undefined;
    "session"?: string | null | undefined;
    "noshiny": boolean;
    "overwrite": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "ClustExp_StatParse.py": clust_exp_stat_parse_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "ClustExp_StatParse.py": clust_exp_stat_parse_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `clust_exp_stat_parse_py(...)`.
 *
 * @interface
 */
interface ClustExpStatParsePyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Table with all data extracted from all subjects.
     */
    table_mean: OutputPathType | null;
    /**
     * Table with information parsed from the statistics data set history.
     */
    group_table: OutputPathType | null;
    /**
     * Output directly from 3dclust.
     */
    v_3dclust_output: OutputPathType | null;
    /**
     * Cleaned up version of the whereami output.
     */
    clusters_output: OutputPathType | null;
    /**
     * Summary info for the shiny app.
     */
    statinfo_output: OutputPathType | null;
    /**
     * A new data set from input statistics, thresholded at uncorrected p value.
     */
    thresholded_dataset: OutputPathType | null;
    /**
     * Integer labeled mask of the thresholded image with cluster sizes at least as big as the -MinVox.
     */
    thresholded_mask_dataset: OutputPathType | null;
    /**
     * A NIfTI copy of the master file provided that may have been resampled.
     */
    master_copy: OutputPathType | null;
}


function clust_exp_stat_parse_py_params(
    statdset: InputPathType,
    meanbrik: number,
    threshbrik: number,
    subjdset: InputPathType,
    subjtable: InputPathType,
    master: InputPathType,
    prefix: string | null = null,
    pval: number | null = null,
    minvox: number | null = null,
    atlas: string | null = null,
    session: string | null = null,
    noshiny: boolean = false,
    overwrite: boolean = false,
): ClustExpStatParsePyParameters {
    /**
     * Build parameters.
    
     * @param statdset Statistics dataset.
     * @param meanbrik Mean subbrik (integer >= 0).
     * @param threshbrik Threshold subbrik. Might be the same as MeanBrik (integer >= 0).
     * @param subjdset Labeled dataset with all subjects (from @ClustExp_CatLab).
     * @param subjtable Table with subject labels and input datasets.
     * @param master Master data set for underlay.
     * @param prefix Name for output (no path).
     * @param pval Uncorrected p value for thresholding.
     * @param minvox Minimum voxels in cluster.
     * @param atlas Atlas name for lookup (list at: whereami -help).
     * @param session Output parent folder if you don't want the current working directory.
     * @param noshiny Do not create shiny app.
     * @param overwrite Remove previous folder with same PREFIX.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ClustExp_StatParse.py" as const,
        "statdset": statdset,
        "meanbrik": meanbrik,
        "threshbrik": threshbrik,
        "subjdset": subjdset,
        "subjtable": subjtable,
        "master": master,
        "noshiny": noshiny,
        "overwrite": overwrite,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (pval !== null) {
        params["pval"] = pval;
    }
    if (minvox !== null) {
        params["minvox"] = minvox;
    }
    if (atlas !== null) {
        params["atlas"] = atlas;
    }
    if (session !== null) {
        params["session"] = session;
    }
    return params;
}


function clust_exp_stat_parse_py_cargs(
    params: ClustExpStatParsePyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("ClustExp_StatParse.py");
    cargs.push(
        "-StatDSET",
        execution.inputFile((params["statdset"] ?? null))
    );
    cargs.push(
        "-MeanBrik",
        String((params["meanbrik"] ?? null))
    );
    cargs.push(
        "-ThreshBrik",
        String((params["threshbrik"] ?? null))
    );
    cargs.push(
        "-SubjDSET",
        execution.inputFile((params["subjdset"] ?? null))
    );
    cargs.push(
        "-SubjTable",
        execution.inputFile((params["subjtable"] ?? null))
    );
    cargs.push(
        "-master",
        execution.inputFile((params["master"] ?? null))
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["pval"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["pval"] ?? null))
        );
    }
    if ((params["minvox"] ?? null) !== null) {
        cargs.push(
            "-MinVox",
            String((params["minvox"] ?? null))
        );
    }
    if ((params["atlas"] ?? null) !== null) {
        cargs.push(
            "-atlas",
            (params["atlas"] ?? null)
        );
    }
    if ((params["session"] ?? null) !== null) {
        cargs.push(
            "-session",
            (params["session"] ?? null)
        );
    }
    if ((params["noshiny"] ?? null)) {
        cargs.push("-NoShiny");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    return cargs;
}


function clust_exp_stat_parse_py_outputs(
    params: ClustExpStatParsePyParameters,
    execution: Execution,
): ClustExpStatParsePyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ClustExpStatParsePyOutputs = {
        root: execution.outputFile("."),
        table_mean: ((params["prefix"] ?? null) !== null && (params["pval"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_p_uncor_", String((params["pval"] ?? null)), "_mean.csv"].join('')) : null,
        group_table: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_GroupTable.csv"].join('')) : null,
        v_3dclust_output: ((params["prefix"] ?? null) !== null && (params["pval"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_p_uncor_", String((params["pval"] ?? null)), "_3dclust.1D"].join('')) : null,
        clusters_output: ((params["prefix"] ?? null) !== null && (params["pval"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_p_uncor_", String((params["pval"] ?? null)), "_clusters.csv"].join('')) : null,
        statinfo_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_StatInfo.csv"].join('')) : null,
        thresholded_dataset: ((params["prefix"] ?? null) !== null && (params["pval"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_p_uncor_", String((params["pval"] ?? null)), ".nii.gz"].join('')) : null,
        thresholded_mask_dataset: ((params["prefix"] ?? null) !== null && (params["pval"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_p_uncor_", String((params["pval"] ?? null)), "_mask.nii.gz"].join('')) : null,
        master_copy: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_master.nii.gz"].join('')) : null,
    };
    return ret;
}


function clust_exp_stat_parse_py_execute(
    params: ClustExpStatParsePyParameters,
    execution: Execution,
): ClustExpStatParsePyOutputs {
    /**
     * Parser for statistical data sets and subject data sets, generating several outputs for further analysis.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ClustExpStatParsePyOutputs`).
     */
    params = execution.params(params)
    const cargs = clust_exp_stat_parse_py_cargs(params, execution)
    const ret = clust_exp_stat_parse_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function clust_exp_stat_parse_py(
    statdset: InputPathType,
    meanbrik: number,
    threshbrik: number,
    subjdset: InputPathType,
    subjtable: InputPathType,
    master: InputPathType,
    prefix: string | null = null,
    pval: number | null = null,
    minvox: number | null = null,
    atlas: string | null = null,
    session: string | null = null,
    noshiny: boolean = false,
    overwrite: boolean = false,
    runner: Runner | null = null,
): ClustExpStatParsePyOutputs {
    /**
     * Parser for statistical data sets and subject data sets, generating several outputs for further analysis.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param statdset Statistics dataset.
     * @param meanbrik Mean subbrik (integer >= 0).
     * @param threshbrik Threshold subbrik. Might be the same as MeanBrik (integer >= 0).
     * @param subjdset Labeled dataset with all subjects (from @ClustExp_CatLab).
     * @param subjtable Table with subject labels and input datasets.
     * @param master Master data set for underlay.
     * @param prefix Name for output (no path).
     * @param pval Uncorrected p value for thresholding.
     * @param minvox Minimum voxels in cluster.
     * @param atlas Atlas name for lookup (list at: whereami -help).
     * @param session Output parent folder if you don't want the current working directory.
     * @param noshiny Do not create shiny app.
     * @param overwrite Remove previous folder with same PREFIX.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ClustExpStatParsePyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CLUST_EXP_STAT_PARSE_PY_METADATA);
    const params = clust_exp_stat_parse_py_params(statdset, meanbrik, threshbrik, subjdset, subjtable, master, prefix, pval, minvox, atlas, session, noshiny, overwrite)
    return clust_exp_stat_parse_py_execute(params, execution);
}


export {
      CLUST_EXP_STAT_PARSE_PY_METADATA,
      ClustExpStatParsePyOutputs,
      ClustExpStatParsePyParameters,
      clust_exp_stat_parse_py,
      clust_exp_stat_parse_py_params,
};
