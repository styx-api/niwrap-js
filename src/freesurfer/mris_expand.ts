// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_EXPAND_METADATA: Metadata = {
    id: "bda23155268275073fa8f9779a6369552009862e.boutiques",
    name: "mris_expand",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisExpandParameters {
    "@type"?: "freesurfer/mris_expand";
    "input_surface": InputPathType;
    "expansion_distance": number;
    "output_surface": string;
    "thickness": boolean;
    "label"?: string | null | undefined;
    "tmap"?: string | null | undefined;
    "tmap_random"?: string | null | undefined;
}
type MrisExpandParametersTagged = Required<Pick<MrisExpandParameters, '@type'>> & MrisExpandParameters;


/**
 * Output object returned when calling `MrisExpandParameters(...)`.
 *
 * @interface
 */
interface MrisExpandOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Expanded output surface file
     */
    output_surface_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file (e.g. lh.white)
 * @param expansion_distance Expansion distance in mm
 * @param output_surface Output surface file
 * @param thickness Use thickness for expansion
 * @param label Use label file for expansion
 * @param tmap Use a prespecified map of percent thickness to compute the target locations for expansion
 * @param tmap_random Create a random target distance map with Gaussian sampling for the target locations
 *
 * @returns Parameter dictionary
 */
function mris_expand_params(
    input_surface: InputPathType,
    expansion_distance: number,
    output_surface: string,
    thickness: boolean = false,
    label: string | null = null,
    tmap: string | null = null,
    tmap_random: string | null = null,
): MrisExpandParametersTagged {
    const params = {
        "@type": "freesurfer/mris_expand" as const,
        "input_surface": input_surface,
        "expansion_distance": expansion_distance,
        "output_surface": output_surface,
        "thickness": thickness,
    };
    if (label !== null) {
        params["label"] = label;
    }
    if (tmap !== null) {
        params["tmap"] = tmap;
    }
    if (tmap_random !== null) {
        params["tmap_random"] = tmap_random;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_expand_cargs(
    params: MrisExpandParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_expand");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(String((params["expansion_distance"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    if ((params["thickness"] ?? false)) {
        cargs.push("-thickness");
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "-label",
            (params["label"] ?? null)
        );
    }
    if ((params["tmap"] ?? null) !== null) {
        cargs.push(
            "-tmap",
            (params["tmap"] ?? null)
        );
    }
    if ((params["tmap_random"] ?? null) !== null) {
        cargs.push(
            "-tmap random",
            (params["tmap_random"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_expand_outputs(
    params: MrisExpandParameters,
    execution: Execution,
): MrisExpandOutputs {
    const ret: MrisExpandOutputs = {
        root: execution.outputFile("."),
        output_surface_file: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_expand
 *
 * Expand a given surface by a specified distance.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExpandOutputs`).
 */
function mris_expand_execute(
    params: MrisExpandParameters,
    runner: Runner | null = null,
): MrisExpandOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_EXPAND_METADATA);
    params = execution.params(params)
    const cargs = mris_expand_cargs(params, execution)
    const ret = mris_expand_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_expand
 *
 * Expand a given surface by a specified distance.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file (e.g. lh.white)
 * @param expansion_distance Expansion distance in mm
 * @param output_surface Output surface file
 * @param thickness Use thickness for expansion
 * @param label Use label file for expansion
 * @param tmap Use a prespecified map of percent thickness to compute the target locations for expansion
 * @param tmap_random Create a random target distance map with Gaussian sampling for the target locations
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExpandOutputs`).
 */
function mris_expand(
    input_surface: InputPathType,
    expansion_distance: number,
    output_surface: string,
    thickness: boolean = false,
    label: string | null = null,
    tmap: string | null = null,
    tmap_random: string | null = null,
    runner: Runner | null = null,
): MrisExpandOutputs {
    const params = mris_expand_params(input_surface, expansion_distance, output_surface, thickness, label, tmap, tmap_random)
    return mris_expand_execute(params, runner);
}


export {
      MRIS_EXPAND_METADATA,
      MrisExpandOutputs,
      mris_expand,
      mris_expand_execute,
      mris_expand_params,
};
