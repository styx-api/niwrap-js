// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_BRAIN_VOYAGERTO_AFNI_METADATA: Metadata = {
    id: "286218a64fa6e1151307ace8ad14804dacd20778.boutiques",
    name: "3dBRAIN_VOYAGERtoAFNI",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dBrainVoyagertoAfniParameters {
    "@type"?: "afni/3dBRAIN_VOYAGERtoAFNI";
    "input_file": InputPathType;
    "force_byte_swap": boolean;
    "brainvoyager_qx": boolean;
    "tlrc_space": boolean;
    "acpc_space": boolean;
    "orig_space": boolean;
    "prefix"?: string | null | undefined;
    "novolreg": boolean;
    "noxform": boolean;
    "set_environment"?: string | null | undefined;
    "trace_debugging": boolean;
    "trace_extreme_debugging": boolean;
    "turn_off_memory_tracing": boolean;
    "turn_on_memory_tracing": boolean;
}
type V3dBrainVoyagertoAfniParametersTagged = Required<Pick<V3dBrainVoyagertoAfniParameters, '@type'>> & V3dBrainVoyagertoAfniParameters;


/**
 * Output object returned when calling `V3dBrainVoyagertoAfniParameters(...)`.
 *
 * @interface
 */
interface V3dBrainVoyagertoAfniOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output BRIK file
     */
    output_brik_file: OutputPathType;
    /**
     * Output HEAD file
     */
    output_head_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input BrainVoyager VMR file
 * @param force_byte_swap Force byte swapping
 * @param brainvoyager_qx .vmr file is from BrainVoyager QX
 * @param tlrc_space Dset in tlrc space
 * @param acpc_space Dset in acpc-aligned space
 * @param orig_space Dset in orig space
 * @param prefix Prefix for output files
 * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
 * @param noxform Same as -novolreg
 * @param set_environment Set environment variable ENVname to be ENVvalue. Quotes are necessary.
 * @param trace_debugging Turns on In/Out debug and Memory tracing.
 * @param trace_extreme_debugging Turns on extreme tracing.
 * @param turn_off_memory_tracing Turn off memory tracing.
 * @param turn_on_memory_tracing Turn on memory tracing (default).
 *
 * @returns Parameter dictionary
 */
function v_3d_brain_voyagerto_afni_params(
    input_file: InputPathType,
    force_byte_swap: boolean = false,
    brainvoyager_qx: boolean = false,
    tlrc_space: boolean = false,
    acpc_space: boolean = false,
    orig_space: boolean = false,
    prefix: string | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    set_environment: string | null = null,
    trace_debugging: boolean = false,
    trace_extreme_debugging: boolean = false,
    turn_off_memory_tracing: boolean = false,
    turn_on_memory_tracing: boolean = false,
): V3dBrainVoyagertoAfniParametersTagged {
    const params = {
        "@type": "afni/3dBRAIN_VOYAGERtoAFNI" as const,
        "input_file": input_file,
        "force_byte_swap": force_byte_swap,
        "brainvoyager_qx": brainvoyager_qx,
        "tlrc_space": tlrc_space,
        "acpc_space": acpc_space,
        "orig_space": orig_space,
        "novolreg": novolreg,
        "noxform": noxform,
        "trace_debugging": trace_debugging,
        "trace_extreme_debugging": trace_extreme_debugging,
        "turn_off_memory_tracing": turn_off_memory_tracing,
        "turn_on_memory_tracing": turn_on_memory_tracing,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (set_environment !== null) {
        params["set_environment"] = set_environment;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_brain_voyagerto_afni_cargs(
    params: V3dBrainVoyagertoAfniParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dBRAIN_VOYAGERtoAFNI");
    cargs.push(
        "--input",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["force_byte_swap"] ?? false)) {
        cargs.push("-bs");
    }
    if ((params["brainvoyager_qx"] ?? false)) {
        cargs.push("-qx");
    }
    if ((params["tlrc_space"] ?? false)) {
        cargs.push("-tlrc");
    }
    if ((params["acpc_space"] ?? false)) {
        cargs.push("-acpc");
    }
    if ((params["orig_space"] ?? false)) {
        cargs.push("-orig");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "--prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["novolreg"] ?? false)) {
        cargs.push("-novolreg");
    }
    if ((params["noxform"] ?? false)) {
        cargs.push("-noxform");
    }
    if ((params["set_environment"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["set_environment"] ?? null)
        );
    }
    if ((params["trace_debugging"] ?? false)) {
        cargs.push("-trace");
    }
    if ((params["trace_extreme_debugging"] ?? false)) {
        cargs.push("-TRACE");
    }
    if ((params["turn_off_memory_tracing"] ?? false)) {
        cargs.push("-nomall");
    }
    if ((params["turn_on_memory_tracing"] ?? false)) {
        cargs.push("-yesmall");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_brain_voyagerto_afni_outputs(
    params: V3dBrainVoyagertoAfniParameters,
    execution: Execution,
): V3dBrainVoyagertoAfniOutputs {
    const ret: V3dBrainVoyagertoAfniOutputs = {
        root: execution.outputFile("."),
        output_brik_file: execution.outputFile(["output.BRIK"].join('')),
        output_head_file: execution.outputFile(["output.HEAD"].join('')),
    };
    return ret;
}


/**
 * 3dBRAIN_VOYAGERtoAFNI
 *
 * Converts a BrainVoyager vmr dataset to AFNI's BRIK format based on information from BrainVoyager's website.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBrainVoyagertoAfniOutputs`).
 */
function v_3d_brain_voyagerto_afni_execute(
    params: V3dBrainVoyagertoAfniParameters,
    runner: Runner | null = null,
): V3dBrainVoyagertoAfniOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_BRAIN_VOYAGERTO_AFNI_METADATA);
    params = execution.params(params)
    const cargs = v_3d_brain_voyagerto_afni_cargs(params, execution)
    const ret = v_3d_brain_voyagerto_afni_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dBRAIN_VOYAGERtoAFNI
 *
 * Converts a BrainVoyager vmr dataset to AFNI's BRIK format based on information from BrainVoyager's website.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Input BrainVoyager VMR file
 * @param force_byte_swap Force byte swapping
 * @param brainvoyager_qx .vmr file is from BrainVoyager QX
 * @param tlrc_space Dset in tlrc space
 * @param acpc_space Dset in acpc-aligned space
 * @param orig_space Dset in orig space
 * @param prefix Prefix for output files
 * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
 * @param noxform Same as -novolreg
 * @param set_environment Set environment variable ENVname to be ENVvalue. Quotes are necessary.
 * @param trace_debugging Turns on In/Out debug and Memory tracing.
 * @param trace_extreme_debugging Turns on extreme tracing.
 * @param turn_off_memory_tracing Turn off memory tracing.
 * @param turn_on_memory_tracing Turn on memory tracing (default).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBrainVoyagertoAfniOutputs`).
 */
function v_3d_brain_voyagerto_afni(
    input_file: InputPathType,
    force_byte_swap: boolean = false,
    brainvoyager_qx: boolean = false,
    tlrc_space: boolean = false,
    acpc_space: boolean = false,
    orig_space: boolean = false,
    prefix: string | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    set_environment: string | null = null,
    trace_debugging: boolean = false,
    trace_extreme_debugging: boolean = false,
    turn_off_memory_tracing: boolean = false,
    turn_on_memory_tracing: boolean = false,
    runner: Runner | null = null,
): V3dBrainVoyagertoAfniOutputs {
    const params = v_3d_brain_voyagerto_afni_params(input_file, force_byte_swap, brainvoyager_qx, tlrc_space, acpc_space, orig_space, prefix, novolreg, noxform, set_environment, trace_debugging, trace_extreme_debugging, turn_off_memory_tracing, turn_on_memory_tracing)
    return v_3d_brain_voyagerto_afni_execute(params, runner);
}


export {
      V3dBrainVoyagertoAfniOutputs,
      V_3D_BRAIN_VOYAGERTO_AFNI_METADATA,
      v_3d_brain_voyagerto_afni,
      v_3d_brain_voyagerto_afni_execute,
      v_3d_brain_voyagerto_afni_params,
};
