// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REG2SUBJECT_METADATA: Metadata = {
    id: "cefd2546e44a6b96bd7ddf7a1b9cf638824d614e.boutiques",
    name: "reg2subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Reg2subjectParameters {
    "@type": "freesurfer.reg2subject";
    "regfile": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.reg2subject": reg2subject_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `reg2subject(...)`.
 *
 * @interface
 */
interface Reg2subjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param regfile Input registration file, either in LTA or register.dat format.
 *
 * @returns Parameter dictionary
 */
function reg2subject_params(
    regfile: InputPathType,
): Reg2subjectParameters {
    const params = {
        "@type": "freesurfer.reg2subject" as const,
        "regfile": regfile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function reg2subject_cargs(
    params: Reg2subjectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("reg2subject");
    cargs.push(
        "--r",
        execution.inputFile((params["regfile"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function reg2subject_outputs(
    params: Reg2subjectParameters,
    execution: Execution,
): Reg2subjectOutputs {
    const ret: Reg2subjectOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * reg2subject
 *
 * Returns the name of the subject in the registration file, whether it is an LTA or register.dat file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Reg2subjectOutputs`).
 */
function reg2subject_execute(
    params: Reg2subjectParameters,
    runner: Runner | null = null,
): Reg2subjectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REG2SUBJECT_METADATA);
    params = execution.params(params)
    const cargs = reg2subject_cargs(params, execution)
    const ret = reg2subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * reg2subject
 *
 * Returns the name of the subject in the registration file, whether it is an LTA or register.dat file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param regfile Input registration file, either in LTA or register.dat format.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Reg2subjectOutputs`).
 */
function reg2subject(
    regfile: InputPathType,
    runner: Runner | null = null,
): Reg2subjectOutputs {
    const params = reg2subject_params(regfile)
    return reg2subject_execute(params, runner);
}


export {
      REG2SUBJECT_METADATA,
      Reg2subjectOutputs,
      Reg2subjectParameters,
      reg2subject,
      reg2subject_execute,
      reg2subject_params,
};
