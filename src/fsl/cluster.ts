// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CLUSTER_METADATA: Metadata = {
    id: "dc6e00e2143aabe03722abc3629250d0dce2e99d.boutiques",
    name: "cluster",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ClusterParameters {
    "@type": "fsl.cluster";
    "connectivity"?: number | null | undefined;
    "cope_file"?: InputPathType | null | undefined;
    "dlh"?: number | null | undefined;
    "find_min": boolean;
    "fractional": boolean;
    "in_file": InputPathType;
    "minclustersize": boolean;
    "no_table": boolean;
    "num_maxima"?: number | null | undefined;
    "out_index_file": string;
    "out_index_file_2"?: InputPathType | null | undefined;
    "out_localmax_txt_file": string;
    "out_localmax_txt_file_2"?: InputPathType | null | undefined;
    "out_localmax_vol_file": string;
    "out_localmax_vol_file_2"?: InputPathType | null | undefined;
    "out_max_file": string;
    "out_max_file_2"?: InputPathType | null | undefined;
    "out_mean_file": string;
    "out_mean_file_2"?: InputPathType | null | undefined;
    "out_pval_file": string;
    "out_pval_file_2"?: InputPathType | null | undefined;
    "out_size_file": string;
    "out_size_file_2"?: InputPathType | null | undefined;
    "out_threshold_file": string;
    "out_threshold_file_2"?: InputPathType | null | undefined;
    "output_type"?: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null | undefined;
    "peak_distance"?: number | null | undefined;
    "pthreshold"?: number | null | undefined;
    "std_space_file"?: InputPathType | null | undefined;
    "threshold": number;
    "use_mm": boolean;
    "volume"?: number | null | undefined;
    "warpfield_file"?: InputPathType | null | undefined;
    "xfm_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.cluster": cluster_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.cluster": cluster_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cluster(...)`.
 *
 * @interface
 */
interface ClusterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of cluster index (in size order).
     */
    index_file: OutputPathType;
    /**
     * Local maxima text file.
     */
    localmax_txt_file: OutputPathType;
    /**
     * Output of local maxima volume.
     */
    localmax_vol_file: OutputPathType;
    /**
     * Filename for output of max image.
     */
    max_file: OutputPathType;
    /**
     * Filename for output of mean image.
     */
    mean_file: OutputPathType;
    /**
     * Filename for image output of log pvals.
     */
    pval_file: OutputPathType;
    /**
     * Filename for output of size image.
     */
    size_file: OutputPathType;
    /**
     * Thresholded image.
     */
    threshold_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_file Input volume.
 * @param out_index_file A boolean or file. Output of cluster index (in size order).
 * @param out_localmax_txt_file A boolean or file. Local maxima text file.
 * @param out_localmax_vol_file A boolean or file. Output of local maxima volume.
 * @param out_max_file A boolean or file. Filename for output of max image.
 * @param out_mean_file A boolean or file. Filename for output of mean image.
 * @param out_pval_file A boolean or file. Filename for image output of log pvals.
 * @param out_size_file A boolean or file. Filename for output of size image.
 * @param out_threshold_file A boolean or file. Thresholded image.
 * @param threshold Threshold for input volume.
 * @param connectivity The connectivity of voxels (default 26).
 * @param cope_file Cope volume.
 * @param dlh Smoothness estimate = sqrt(det(lambda)).
 * @param find_min Find minima instead of maxima.
 * @param fractional Interprets the threshold as a fraction of the robust range.
 * @param minclustersize Prints out minimum significant cluster size.
 * @param no_table Suppresses printing of the table info.
 * @param num_maxima No of local maxima to report.
 * @param out_index_file_2 A boolean or file. Output of cluster index (in size order).
 * @param out_localmax_txt_file_2 A boolean or file. Local maxima text file.
 * @param out_localmax_vol_file_2 A boolean or file. Output of local maxima volume.
 * @param out_max_file_2 A boolean or file. Filename for output of max image.
 * @param out_mean_file_2 A boolean or file. Filename for output of mean image.
 * @param out_pval_file_2 A boolean or file. Filename for image output of log pvals.
 * @param out_size_file_2 A boolean or file. Filename for output of size image.
 * @param out_threshold_file_2 A boolean or file. Thresholded image.
 * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
 * @param peak_distance Minimum distance between local maxima/minima, in mm (default 0).
 * @param pthreshold P-threshold for clusters.
 * @param std_space_file Filename for standard-space volume.
 * @param use_mm Use mm, not voxel, coordinates.
 * @param volume Number of voxels in the mask.
 * @param warpfield_file File containing warpfield.
 * @param xfm_file Filename for linear: input->standard-space transform. non-linear: input->highres transform.
 *
 * @returns Parameter dictionary
 */
function cluster_params(
    in_file: InputPathType,
    out_index_file: string,
    out_localmax_txt_file: string,
    out_localmax_vol_file: string,
    out_max_file: string,
    out_mean_file: string,
    out_pval_file: string,
    out_size_file: string,
    out_threshold_file: string,
    threshold: number,
    connectivity: number | null = null,
    cope_file: InputPathType | null = null,
    dlh: number | null = null,
    find_min: boolean = false,
    fractional: boolean = false,
    minclustersize: boolean = false,
    no_table: boolean = false,
    num_maxima: number | null = null,
    out_index_file_2: InputPathType | null = null,
    out_localmax_txt_file_2: InputPathType | null = null,
    out_localmax_vol_file_2: InputPathType | null = null,
    out_max_file_2: InputPathType | null = null,
    out_mean_file_2: InputPathType | null = null,
    out_pval_file_2: InputPathType | null = null,
    out_size_file_2: InputPathType | null = null,
    out_threshold_file_2: InputPathType | null = null,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    peak_distance: number | null = null,
    pthreshold: number | null = null,
    std_space_file: InputPathType | null = null,
    use_mm: boolean = false,
    volume: number | null = null,
    warpfield_file: InputPathType | null = null,
    xfm_file: InputPathType | null = null,
): ClusterParameters {
    const params = {
        "@type": "fsl.cluster" as const,
        "find_min": find_min,
        "fractional": fractional,
        "in_file": in_file,
        "minclustersize": minclustersize,
        "no_table": no_table,
        "out_index_file": out_index_file,
        "out_localmax_txt_file": out_localmax_txt_file,
        "out_localmax_vol_file": out_localmax_vol_file,
        "out_max_file": out_max_file,
        "out_mean_file": out_mean_file,
        "out_pval_file": out_pval_file,
        "out_size_file": out_size_file,
        "out_threshold_file": out_threshold_file,
        "threshold": threshold,
        "use_mm": use_mm,
    };
    if (connectivity !== null) {
        params["connectivity"] = connectivity;
    }
    if (cope_file !== null) {
        params["cope_file"] = cope_file;
    }
    if (dlh !== null) {
        params["dlh"] = dlh;
    }
    if (num_maxima !== null) {
        params["num_maxima"] = num_maxima;
    }
    if (out_index_file_2 !== null) {
        params["out_index_file_2"] = out_index_file_2;
    }
    if (out_localmax_txt_file_2 !== null) {
        params["out_localmax_txt_file_2"] = out_localmax_txt_file_2;
    }
    if (out_localmax_vol_file_2 !== null) {
        params["out_localmax_vol_file_2"] = out_localmax_vol_file_2;
    }
    if (out_max_file_2 !== null) {
        params["out_max_file_2"] = out_max_file_2;
    }
    if (out_mean_file_2 !== null) {
        params["out_mean_file_2"] = out_mean_file_2;
    }
    if (out_pval_file_2 !== null) {
        params["out_pval_file_2"] = out_pval_file_2;
    }
    if (out_size_file_2 !== null) {
        params["out_size_file_2"] = out_size_file_2;
    }
    if (out_threshold_file_2 !== null) {
        params["out_threshold_file_2"] = out_threshold_file_2;
    }
    if (output_type !== null) {
        params["output_type"] = output_type;
    }
    if (peak_distance !== null) {
        params["peak_distance"] = peak_distance;
    }
    if (pthreshold !== null) {
        params["pthreshold"] = pthreshold;
    }
    if (std_space_file !== null) {
        params["std_space_file"] = std_space_file;
    }
    if (volume !== null) {
        params["volume"] = volume;
    }
    if (warpfield_file !== null) {
        params["warpfield_file"] = warpfield_file;
    }
    if (xfm_file !== null) {
        params["xfm_file"] = xfm_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cluster_cargs(
    params: ClusterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("cluster");
    if ((params["connectivity"] ?? null) !== null) {
        cargs.push(["--connectivity=", String((params["connectivity"] ?? null))].join(''));
    }
    if ((params["cope_file"] ?? null) !== null) {
        cargs.push(["--cope=", execution.inputFile((params["cope_file"] ?? null))].join(''));
    }
    if ((params["dlh"] ?? null) !== null) {
        cargs.push(["--dlh=", String((params["dlh"] ?? null))].join(''));
    }
    if ((params["find_min"] ?? null)) {
        cargs.push("--min");
    }
    if ((params["fractional"] ?? null)) {
        cargs.push("--fractional");
    }
    cargs.push(["--in=", execution.inputFile((params["in_file"] ?? null))].join(''));
    if ((params["minclustersize"] ?? null)) {
        cargs.push("--minclustersize");
    }
    if ((params["no_table"] ?? null)) {
        cargs.push("--no_table");
    }
    if ((params["num_maxima"] ?? null) !== null) {
        cargs.push(["--num=", String((params["num_maxima"] ?? null))].join(''));
    }
    cargs.push(["--oindex=", (params["out_index_file"] ?? null)].join(''));
    if ((params["out_index_file_2"] ?? null) !== null) {
        cargs.push(["--oindex=", execution.inputFile((params["out_index_file_2"] ?? null))].join(''));
    }
    cargs.push(["--olmax=", (params["out_localmax_txt_file"] ?? null)].join(''));
    if ((params["out_localmax_txt_file_2"] ?? null) !== null) {
        cargs.push(["--olmax=", execution.inputFile((params["out_localmax_txt_file_2"] ?? null))].join(''));
    }
    cargs.push(["--olmaxim=", (params["out_localmax_vol_file"] ?? null)].join(''));
    if ((params["out_localmax_vol_file_2"] ?? null) !== null) {
        cargs.push(["--olmaxim=", execution.inputFile((params["out_localmax_vol_file_2"] ?? null))].join(''));
    }
    cargs.push(["--omax=", (params["out_max_file"] ?? null)].join(''));
    if ((params["out_max_file_2"] ?? null) !== null) {
        cargs.push(["--omax=", execution.inputFile((params["out_max_file_2"] ?? null))].join(''));
    }
    cargs.push(["--omean=", (params["out_mean_file"] ?? null)].join(''));
    if ((params["out_mean_file_2"] ?? null) !== null) {
        cargs.push(["--omean=", execution.inputFile((params["out_mean_file_2"] ?? null))].join(''));
    }
    cargs.push(["--opvals=", (params["out_pval_file"] ?? null)].join(''));
    if ((params["out_pval_file_2"] ?? null) !== null) {
        cargs.push(["--opvals=", execution.inputFile((params["out_pval_file_2"] ?? null))].join(''));
    }
    cargs.push(["--osize=", (params["out_size_file"] ?? null)].join(''));
    if ((params["out_size_file_2"] ?? null) !== null) {
        cargs.push(["--osize=", execution.inputFile((params["out_size_file_2"] ?? null))].join(''));
    }
    cargs.push(["--othresh=", (params["out_threshold_file"] ?? null)].join(''));
    if ((params["out_threshold_file_2"] ?? null) !== null) {
        cargs.push(["--othresh=", execution.inputFile((params["out_threshold_file_2"] ?? null))].join(''));
    }
    if ((params["output_type"] ?? null) !== null) {
        cargs.push((params["output_type"] ?? null));
    }
    if ((params["peak_distance"] ?? null) !== null) {
        cargs.push(["--peakdist=", String((params["peak_distance"] ?? null))].join(''));
    }
    if ((params["pthreshold"] ?? null) !== null) {
        cargs.push(["--pthresh=", String((params["pthreshold"] ?? null))].join(''));
    }
    if ((params["std_space_file"] ?? null) !== null) {
        cargs.push(["--stdvol=", execution.inputFile((params["std_space_file"] ?? null))].join(''));
    }
    cargs.push(["--thresh=", String((params["threshold"] ?? null))].join(''));
    if ((params["use_mm"] ?? null)) {
        cargs.push("--mm");
    }
    if ((params["volume"] ?? null) !== null) {
        cargs.push(["--volume=", String((params["volume"] ?? null))].join(''));
    }
    if ((params["warpfield_file"] ?? null) !== null) {
        cargs.push(["--warpvol=", execution.inputFile((params["warpfield_file"] ?? null))].join(''));
    }
    if ((params["xfm_file"] ?? null) !== null) {
        cargs.push(["--xfm=", execution.inputFile((params["xfm_file"] ?? null))].join(''));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cluster_outputs(
    params: ClusterParameters,
    execution: Execution,
): ClusterOutputs {
    const ret: ClusterOutputs = {
        root: execution.outputFile("."),
        index_file: execution.outputFile(["index_file"].join('')),
        localmax_txt_file: execution.outputFile(["localmax_txt_file"].join('')),
        localmax_vol_file: execution.outputFile(["localmax_vol_file"].join('')),
        max_file: execution.outputFile(["max_file"].join('')),
        mean_file: execution.outputFile(["mean_file"].join('')),
        pval_file: execution.outputFile(["pval_file"].join('')),
        size_file: execution.outputFile(["size_file"].join('')),
        threshold_file: execution.outputFile(["threshold_file"].join('')),
    };
    return ret;
}


/**
 * Uses FSL cluster to perform clustering on statistical output.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `ClusterOutputs`).
 */
function cluster_execute(
    params: ClusterParameters,
    execution: Execution,
): ClusterOutputs {
    params = execution.params(params)
    const cargs = cluster_cargs(params, execution)
    const ret = cluster_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Uses FSL cluster to perform clustering on statistical output.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param in_file Input volume.
 * @param out_index_file A boolean or file. Output of cluster index (in size order).
 * @param out_localmax_txt_file A boolean or file. Local maxima text file.
 * @param out_localmax_vol_file A boolean or file. Output of local maxima volume.
 * @param out_max_file A boolean or file. Filename for output of max image.
 * @param out_mean_file A boolean or file. Filename for output of mean image.
 * @param out_pval_file A boolean or file. Filename for image output of log pvals.
 * @param out_size_file A boolean or file. Filename for output of size image.
 * @param out_threshold_file A boolean or file. Thresholded image.
 * @param threshold Threshold for input volume.
 * @param connectivity The connectivity of voxels (default 26).
 * @param cope_file Cope volume.
 * @param dlh Smoothness estimate = sqrt(det(lambda)).
 * @param find_min Find minima instead of maxima.
 * @param fractional Interprets the threshold as a fraction of the robust range.
 * @param minclustersize Prints out minimum significant cluster size.
 * @param no_table Suppresses printing of the table info.
 * @param num_maxima No of local maxima to report.
 * @param out_index_file_2 A boolean or file. Output of cluster index (in size order).
 * @param out_localmax_txt_file_2 A boolean or file. Local maxima text file.
 * @param out_localmax_vol_file_2 A boolean or file. Output of local maxima volume.
 * @param out_max_file_2 A boolean or file. Filename for output of max image.
 * @param out_mean_file_2 A boolean or file. Filename for output of mean image.
 * @param out_pval_file_2 A boolean or file. Filename for image output of log pvals.
 * @param out_size_file_2 A boolean or file. Filename for output of size image.
 * @param out_threshold_file_2 A boolean or file. Thresholded image.
 * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
 * @param peak_distance Minimum distance between local maxima/minima, in mm (default 0).
 * @param pthreshold P-threshold for clusters.
 * @param std_space_file Filename for standard-space volume.
 * @param use_mm Use mm, not voxel, coordinates.
 * @param volume Number of voxels in the mask.
 * @param warpfield_file File containing warpfield.
 * @param xfm_file Filename for linear: input->standard-space transform. non-linear: input->highres transform.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ClusterOutputs`).
 */
function cluster(
    in_file: InputPathType,
    out_index_file: string,
    out_localmax_txt_file: string,
    out_localmax_vol_file: string,
    out_max_file: string,
    out_mean_file: string,
    out_pval_file: string,
    out_size_file: string,
    out_threshold_file: string,
    threshold: number,
    connectivity: number | null = null,
    cope_file: InputPathType | null = null,
    dlh: number | null = null,
    find_min: boolean = false,
    fractional: boolean = false,
    minclustersize: boolean = false,
    no_table: boolean = false,
    num_maxima: number | null = null,
    out_index_file_2: InputPathType | null = null,
    out_localmax_txt_file_2: InputPathType | null = null,
    out_localmax_vol_file_2: InputPathType | null = null,
    out_max_file_2: InputPathType | null = null,
    out_mean_file_2: InputPathType | null = null,
    out_pval_file_2: InputPathType | null = null,
    out_size_file_2: InputPathType | null = null,
    out_threshold_file_2: InputPathType | null = null,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    peak_distance: number | null = null,
    pthreshold: number | null = null,
    std_space_file: InputPathType | null = null,
    use_mm: boolean = false,
    volume: number | null = null,
    warpfield_file: InputPathType | null = null,
    xfm_file: InputPathType | null = null,
    runner: Runner | null = null,
): ClusterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CLUSTER_METADATA);
    const params = cluster_params(in_file, out_index_file, out_localmax_txt_file, out_localmax_vol_file, out_max_file, out_mean_file, out_pval_file, out_size_file, out_threshold_file, threshold, connectivity, cope_file, dlh, find_min, fractional, minclustersize, no_table, num_maxima, out_index_file_2, out_localmax_txt_file_2, out_localmax_vol_file_2, out_max_file_2, out_mean_file_2, out_pval_file_2, out_size_file_2, out_threshold_file_2, output_type, peak_distance, pthreshold, std_space_file, use_mm, volume, warpfield_file, xfm_file)
    return cluster_execute(params, execution);
}


export {
      CLUSTER_METADATA,
      ClusterOutputs,
      ClusterParameters,
      cluster,
      cluster_cargs,
      cluster_execute,
      cluster_outputs,
      cluster_params,
};
