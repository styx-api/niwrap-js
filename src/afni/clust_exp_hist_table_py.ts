// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CLUST_EXP_HIST_TABLE_PY_METADATA: Metadata = {
    id: "2236ab9d18b996789c02458fc65933f93e485f82.boutiques",
    name: "ClustExp_HistTable.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ClustExpHistTablePyParameters {
    "@type": "afni.ClustExp_HistTable.py";
    "stat_dset": InputPathType;
    "prefix"?: string | null | undefined;
    "session"?: string | null | undefined;
    "overwrite": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.ClustExp_HistTable.py": clust_exp_hist_table_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.ClustExp_HistTable.py": clust_exp_hist_table_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `clust_exp_hist_table_py(...)`.
 *
 * @interface
 */
interface ClustExpHistTablePyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Table with information parsed from the statistics dataset history.
     */
    group_table: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param stat_dset Statistics dataset.
 * @param prefix Name for output (no path). Default is GroupOut.
 * @param session Output parent folder if you don't want the current working directory. Default is ./
 * @param overwrite Remove previous folder with same PREFIX
 *
 * @returns Parameter dictionary
 */
function clust_exp_hist_table_py_params(
    stat_dset: InputPathType,
    prefix: string | null = null,
    session: string | null = null,
    overwrite: boolean = false,
): ClustExpHistTablePyParameters {
    const params = {
        "@type": "afni.ClustExp_HistTable.py" as const,
        "stat_dset": stat_dset,
        "overwrite": overwrite,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (session !== null) {
        params["session"] = session;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function clust_exp_hist_table_py_cargs(
    params: ClustExpHistTablePyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ClustExp_HistTable.py");
    cargs.push(
        "-StatDSET",
        execution.inputFile((params["stat_dset"] ?? null))
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["session"] ?? null) !== null) {
        cargs.push(
            "-session",
            (params["session"] ?? null)
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function clust_exp_hist_table_py_outputs(
    params: ClustExpHistTablePyParameters,
    execution: Execution,
): ClustExpHistTablePyOutputs {
    const ret: ClustExpHistTablePyOutputs = {
        root: execution.outputFile("."),
        group_table: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_GroupTable.csv"].join('')) : null,
    };
    return ret;
}


/**
 * ClustExp_HistTable.py
 *
 * Script to extract the data table from history of datasets from 3dttest++, 3dMVM, or 3dLME.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ClustExpHistTablePyOutputs`).
 */
function clust_exp_hist_table_py_execute(
    params: ClustExpHistTablePyParameters,
    runner: Runner | null = null,
): ClustExpHistTablePyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CLUST_EXP_HIST_TABLE_PY_METADATA);
    params = execution.params(params)
    const cargs = clust_exp_hist_table_py_cargs(params, execution)
    const ret = clust_exp_hist_table_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ClustExp_HistTable.py
 *
 * Script to extract the data table from history of datasets from 3dttest++, 3dMVM, or 3dLME.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param stat_dset Statistics dataset.
 * @param prefix Name for output (no path). Default is GroupOut.
 * @param session Output parent folder if you don't want the current working directory. Default is ./
 * @param overwrite Remove previous folder with same PREFIX
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ClustExpHistTablePyOutputs`).
 */
function clust_exp_hist_table_py(
    stat_dset: InputPathType,
    prefix: string | null = null,
    session: string | null = null,
    overwrite: boolean = false,
    runner: Runner | null = null,
): ClustExpHistTablePyOutputs {
    const params = clust_exp_hist_table_py_params(stat_dset, prefix, session, overwrite)
    return clust_exp_hist_table_py_execute(params, runner);
}


export {
      CLUST_EXP_HIST_TABLE_PY_METADATA,
      ClustExpHistTablePyOutputs,
      ClustExpHistTablePyParameters,
      clust_exp_hist_table_py,
      clust_exp_hist_table_py_execute,
      clust_exp_hist_table_py_params,
};
