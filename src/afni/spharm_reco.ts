// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPHARM_RECO_METADATA: Metadata = {
    id: "33f63f74ec6a7870069eec599fbb3c35bec65ba8.boutiques",
    name: "SpharmReco",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SpharmRecoParameters {
    "@type": "afni.SpharmReco";
    "input_surface": string;
    "decomposition_order": number;
    "bases_prefix": string;
    "coefficients": Array<InputPathType>;
    "output_prefix"?: string | null | undefined;
    "output_surface"?: Array<string> | null | undefined;
    "debug"?: number | null | undefined;
    "smoothing"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.SpharmReco": spharm_reco_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `spharm_reco(...)`.
 *
 * @interface
 */
interface SpharmRecoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Surface that provides the topology of the mesh (nodes' connections). TYPE specifies the input surface type.
 * @param decomposition_order Decomposition order
 * @param bases_prefix Prefix of files containing the bases functions (spherical harmonics). These files are generated with SpharmDeco.
 * @param coefficients Coefficients files used to recompose data columns. Multiple coefficient files can be specified by repeating the option.
 * @param output_prefix Write out the reconstructed data into dataset PREFIX. The output contains N columns; one for each COEF file.
 * @param output_surface Write out a new surface with reconstructed coordinates. Requires N to be a multiple of 3.
 * @param debug Debug levels (1-3)
 * @param smoothing Smoothing parameter (0 .. 0.001) weighing the contribution of higher order harmonics
 *
 * @returns Parameter dictionary
 */
function spharm_reco_params(
    input_surface: string,
    decomposition_order: number,
    bases_prefix: string,
    coefficients: Array<InputPathType>,
    output_prefix: string | null = null,
    output_surface: Array<string> | null = null,
    debug: number | null = null,
    smoothing: number | null = null,
): SpharmRecoParameters {
    const params = {
        "@type": "afni.SpharmReco" as const,
        "input_surface": input_surface,
        "decomposition_order": decomposition_order,
        "bases_prefix": bases_prefix,
        "coefficients": coefficients,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (output_surface !== null) {
        params["output_surface"] = output_surface;
    }
    if (debug !== null) {
        params["debug"] = debug;
    }
    if (smoothing !== null) {
        params["smoothing"] = smoothing;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function spharm_reco_cargs(
    params: SpharmRecoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SpharmReco");
    cargs.push(
        "-i_TYPE",
        (params["input_surface"] ?? null)
    );
    cargs.push(
        "-l",
        String((params["decomposition_order"] ?? null))
    );
    cargs.push(
        "-bases_prefix",
        (params["bases_prefix"] ?? null)
    );
    cargs.push(
        "-coef",
        ...(params["coefficients"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["output_surface"] ?? null) !== null) {
        cargs.push(
            "-o_TYPE",
            ...(params["output_surface"] ?? null)
        );
    }
    if ((params["debug"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug"] ?? null))
        );
    }
    if ((params["smoothing"] ?? null) !== null) {
        cargs.push(
            "-sigma",
            String((params["smoothing"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function spharm_reco_outputs(
    params: SpharmRecoParameters,
    execution: Execution,
): SpharmRecoOutputs {
    const ret: SpharmRecoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * SpharmReco
 *
 * Spherical Harmonics Reconstruction from a set of harmonics and their corresponding coefficients.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpharmRecoOutputs`).
 */
function spharm_reco_execute(
    params: SpharmRecoParameters,
    runner: Runner | null = null,
): SpharmRecoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPHARM_RECO_METADATA);
    params = execution.params(params)
    const cargs = spharm_reco_cargs(params, execution)
    const ret = spharm_reco_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SpharmReco
 *
 * Spherical Harmonics Reconstruction from a set of harmonics and their corresponding coefficients.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_surface Surface that provides the topology of the mesh (nodes' connections). TYPE specifies the input surface type.
 * @param decomposition_order Decomposition order
 * @param bases_prefix Prefix of files containing the bases functions (spherical harmonics). These files are generated with SpharmDeco.
 * @param coefficients Coefficients files used to recompose data columns. Multiple coefficient files can be specified by repeating the option.
 * @param output_prefix Write out the reconstructed data into dataset PREFIX. The output contains N columns; one for each COEF file.
 * @param output_surface Write out a new surface with reconstructed coordinates. Requires N to be a multiple of 3.
 * @param debug Debug levels (1-3)
 * @param smoothing Smoothing parameter (0 .. 0.001) weighing the contribution of higher order harmonics
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpharmRecoOutputs`).
 */
function spharm_reco(
    input_surface: string,
    decomposition_order: number,
    bases_prefix: string,
    coefficients: Array<InputPathType>,
    output_prefix: string | null = null,
    output_surface: Array<string> | null = null,
    debug: number | null = null,
    smoothing: number | null = null,
    runner: Runner | null = null,
): SpharmRecoOutputs {
    const params = spharm_reco_params(input_surface, decomposition_order, bases_prefix, coefficients, output_prefix, output_surface, debug, smoothing)
    return spharm_reco_execute(params, runner);
}


export {
      SPHARM_RECO_METADATA,
      SpharmRecoOutputs,
      SpharmRecoParameters,
      spharm_reco,
      spharm_reco_execute,
      spharm_reco_params,
};
