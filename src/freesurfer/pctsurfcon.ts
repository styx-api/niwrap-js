// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PCTSURFCON_METADATA: Metadata = {
    id: "bc20b6316dfee9817f866a81eff8ba3e5882f17b.boutiques",
    name: "pctsurfcon",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface PctsurfconParameters {
    "@type": "freesurfer.pctsurfcon";
    "subject": string;
    "fsvol"?: string | null | undefined;
    "outbase"?: string | null | undefined;
    "lh_only": boolean;
    "rh_only": boolean;
    "gm_proj_frac"?: number | null | undefined;
    "gm_proj_abs"?: number | null | undefined;
    "wm_proj_abs"?: number | null | undefined;
    "neg": boolean;
    "no_mask": boolean;
    "pial": boolean;
    "tmp"?: string | null | undefined;
    "nocleanup": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.pctsurfcon": pctsurfcon_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `pctsurfcon(...)`.
 *
 * @interface
 */
interface PctsurfconOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject FreeSurfer subject name
 * @param fsvol Use fsvol instead of rawavg
 * @param outbase Use outbase instead of w-g.pct (?h.w-g.pct.mgh)
 * @param lh_only Compute left hemisphere only
 * @param rh_only Compute right hemisphere only
 * @param gm_proj_frac GM projection fraction (default 0.3)
 * @param gm_proj_abs GM projection distance (default is to use frac)
 * @param wm_proj_abs WM projection distance (default is 1 mm)
 * @param neg Compute G-W instead of W-G
 * @param no_mask Do not mask out non-cortical regions
 * @param pial Use pial surface as base to compute gray/CSF contrast
 * @param tmp Temporary directory (implies --nocleanup)
 * @param nocleanup Do not delete temporary files
 *
 * @returns Parameter dictionary
 */
function pctsurfcon_params(
    subject: string,
    fsvol: string | null = null,
    outbase: string | null = null,
    lh_only: boolean = false,
    rh_only: boolean = false,
    gm_proj_frac: number | null = null,
    gm_proj_abs: number | null = null,
    wm_proj_abs: number | null = null,
    neg: boolean = false,
    no_mask: boolean = false,
    pial: boolean = false,
    tmp: string | null = null,
    nocleanup: boolean = false,
): PctsurfconParameters {
    const params = {
        "@type": "freesurfer.pctsurfcon" as const,
        "subject": subject,
        "lh_only": lh_only,
        "rh_only": rh_only,
        "neg": neg,
        "no_mask": no_mask,
        "pial": pial,
        "nocleanup": nocleanup,
    };
    if (fsvol !== null) {
        params["fsvol"] = fsvol;
    }
    if (outbase !== null) {
        params["outbase"] = outbase;
    }
    if (gm_proj_frac !== null) {
        params["gm_proj_frac"] = gm_proj_frac;
    }
    if (gm_proj_abs !== null) {
        params["gm_proj_abs"] = gm_proj_abs;
    }
    if (wm_proj_abs !== null) {
        params["wm_proj_abs"] = wm_proj_abs;
    }
    if (tmp !== null) {
        params["tmp"] = tmp;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function pctsurfcon_cargs(
    params: PctsurfconParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("pctsurfcon");
    cargs.push(
        "-s",
        (params["subject"] ?? null)
    );
    if ((params["fsvol"] ?? null) !== null) {
        cargs.push(
            "--fsvol",
            (params["fsvol"] ?? null)
        );
    }
    if ((params["outbase"] ?? null) !== null) {
        cargs.push(
            "--b",
            (params["outbase"] ?? null)
        );
    }
    if ((params["lh_only"] ?? null)) {
        cargs.push("--lh-only");
    }
    if ((params["rh_only"] ?? null)) {
        cargs.push("--rh-only");
    }
    if ((params["gm_proj_frac"] ?? null) !== null) {
        cargs.push(
            "--gm-proj-frac",
            String((params["gm_proj_frac"] ?? null))
        );
    }
    if ((params["gm_proj_abs"] ?? null) !== null) {
        cargs.push(
            "--gm-proj-abs",
            String((params["gm_proj_abs"] ?? null))
        );
    }
    if ((params["wm_proj_abs"] ?? null) !== null) {
        cargs.push(
            "--wm-proj-abs",
            String((params["wm_proj_abs"] ?? null))
        );
    }
    if ((params["neg"] ?? null)) {
        cargs.push("--neg");
    }
    if ((params["no_mask"] ?? null)) {
        cargs.push("--no-mask");
    }
    if ((params["pial"] ?? null)) {
        cargs.push("--pial");
    }
    if ((params["tmp"] ?? null) !== null) {
        cargs.push(
            "--tmp",
            (params["tmp"] ?? null)
        );
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("--nocleanup");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function pctsurfcon_outputs(
    params: PctsurfconParameters,
    execution: Execution,
): PctsurfconOutputs {
    const ret: PctsurfconOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * pctsurfcon
 *
 * Compute surface-wise gray/white matter contrast.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PctsurfconOutputs`).
 */
function pctsurfcon_execute(
    params: PctsurfconParameters,
    runner: Runner | null = null,
): PctsurfconOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PCTSURFCON_METADATA);
    params = execution.params(params)
    const cargs = pctsurfcon_cargs(params, execution)
    const ret = pctsurfcon_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * pctsurfcon
 *
 * Compute surface-wise gray/white matter contrast.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject FreeSurfer subject name
 * @param fsvol Use fsvol instead of rawavg
 * @param outbase Use outbase instead of w-g.pct (?h.w-g.pct.mgh)
 * @param lh_only Compute left hemisphere only
 * @param rh_only Compute right hemisphere only
 * @param gm_proj_frac GM projection fraction (default 0.3)
 * @param gm_proj_abs GM projection distance (default is to use frac)
 * @param wm_proj_abs WM projection distance (default is 1 mm)
 * @param neg Compute G-W instead of W-G
 * @param no_mask Do not mask out non-cortical regions
 * @param pial Use pial surface as base to compute gray/CSF contrast
 * @param tmp Temporary directory (implies --nocleanup)
 * @param nocleanup Do not delete temporary files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PctsurfconOutputs`).
 */
function pctsurfcon(
    subject: string,
    fsvol: string | null = null,
    outbase: string | null = null,
    lh_only: boolean = false,
    rh_only: boolean = false,
    gm_proj_frac: number | null = null,
    gm_proj_abs: number | null = null,
    wm_proj_abs: number | null = null,
    neg: boolean = false,
    no_mask: boolean = false,
    pial: boolean = false,
    tmp: string | null = null,
    nocleanup: boolean = false,
    runner: Runner | null = null,
): PctsurfconOutputs {
    const params = pctsurfcon_params(subject, fsvol, outbase, lh_only, rh_only, gm_proj_frac, gm_proj_abs, wm_proj_abs, neg, no_mask, pial, tmp, nocleanup)
    return pctsurfcon_execute(params, runner);
}


export {
      PCTSURFCON_METADATA,
      PctsurfconOutputs,
      PctsurfconParameters,
      pctsurfcon,
      pctsurfcon_execute,
      pctsurfcon_params,
};
