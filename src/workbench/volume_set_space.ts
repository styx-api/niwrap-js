// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_SET_SPACE_METADATA: Metadata = {
    id: "468e01ca20e9b8f08c852f1b80d5a7befdbcb296.boutiques",
    name: "volume-set-space",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeSetSpacePlumbParameters {
    "__STYXTYPE__": "plumb";
    "axis_order": string;
    "x_spacing": number;
    "y_spacing": number;
    "z_spacing": number;
    "x_offset": number;
    "y_offset": number;
    "z_offset": number;
}


interface VolumeSetSpaceSformParameters {
    "__STYXTYPE__": "sform";
    "xi_spacing": number;
    "xj_spacing": number;
    "xk_spacing": number;
    "x_offset": number;
    "yi_spacing": number;
    "yj_spacing": number;
    "yk_spacing": number;
    "y_offset": number;
    "zi_spacing": number;
    "zj_spacing": number;
    "zk_spacing": number;
    "z_offset": number;
}


interface VolumeSetSpaceFileParameters {
    "__STYXTYPE__": "file";
    "volume_ref": string;
    "opt_ignore_dims": boolean;
}


interface VolumeSetSpaceParameters {
    "__STYXTYPE__": "volume-set-space";
    "volume_in": InputPathType;
    "volume_out": string;
    "plumb"?: VolumeSetSpacePlumbParameters | null | undefined;
    "sform"?: VolumeSetSpaceSformParameters | null | undefined;
    "file"?: VolumeSetSpaceFileParameters | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-set-space": volume_set_space_cargs,
        "plumb": volume_set_space_plumb_cargs,
        "sform": volume_set_space_sform_cargs,
        "file": volume_set_space_file_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


function volume_set_space_plumb_params(
    axis_order: string,
    x_spacing: number,
    y_spacing: number,
    z_spacing: number,
    x_offset: number,
    y_offset: number,
    z_offset: number,
): VolumeSetSpacePlumbParameters {
    /**
     * Build parameters.
    
     * @param axis_order a string like 'XYZ' that specifies which index is along which spatial dimension
     * @param x_spacing change in x-coordinate from incrementing the relevant index
     * @param y_spacing change in y-coordinate from incrementing the relevant index
     * @param z_spacing change in z-coordinate from incrementing the relevant index
     * @param x_offset the x-coordinate of the first voxel
     * @param y_offset the y-coordinate of the first voxel
     * @param z_offset the z-coordinate of the first voxel
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "plumb" as const,
        "axis_order": axis_order,
        "x_spacing": x_spacing,
        "y_spacing": y_spacing,
        "z_spacing": z_spacing,
        "x_offset": x_offset,
        "y_offset": y_offset,
        "z_offset": z_offset,
    };
    return params;
}


function volume_set_space_plumb_cargs(
    params: VolumeSetSpacePlumbParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-plumb");
    cargs.push((params["axis_order"] ?? null));
    cargs.push(String((params["x_spacing"] ?? null)));
    cargs.push(String((params["y_spacing"] ?? null)));
    cargs.push(String((params["z_spacing"] ?? null)));
    cargs.push(String((params["x_offset"] ?? null)));
    cargs.push(String((params["y_offset"] ?? null)));
    cargs.push(String((params["z_offset"] ?? null)));
    return cargs;
}


function volume_set_space_sform_params(
    xi_spacing: number,
    xj_spacing: number,
    xk_spacing: number,
    x_offset: number,
    yi_spacing: number,
    yj_spacing: number,
    yk_spacing: number,
    y_offset: number,
    zi_spacing: number,
    zj_spacing: number,
    zk_spacing: number,
    z_offset: number,
): VolumeSetSpaceSformParameters {
    /**
     * Build parameters.
    
     * @param xi_spacing increase in x coordinate from incrementing the i index
     * @param xj_spacing increase in x coordinate from incrementing the j index
     * @param xk_spacing increase in x coordinate from incrementing the k index
     * @param x_offset x coordinate of first voxel
     * @param yi_spacing increase in y coordinate from incrementing the i index
     * @param yj_spacing increase in y coordinate from incrementing the j index
     * @param yk_spacing increase in y coordinate from incrementing the k index
     * @param y_offset y coordinate of first voxel
     * @param zi_spacing increase in z coordinate from incrementing the i index
     * @param zj_spacing increase in z coordinate from incrementing the j index
     * @param zk_spacing increase in z coordinate from incrementing the k index
     * @param z_offset z coordinate of first voxel
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sform" as const,
        "xi_spacing": xi_spacing,
        "xj_spacing": xj_spacing,
        "xk_spacing": xk_spacing,
        "x_offset": x_offset,
        "yi_spacing": yi_spacing,
        "yj_spacing": yj_spacing,
        "yk_spacing": yk_spacing,
        "y_offset": y_offset,
        "zi_spacing": zi_spacing,
        "zj_spacing": zj_spacing,
        "zk_spacing": zk_spacing,
        "z_offset": z_offset,
    };
    return params;
}


function volume_set_space_sform_cargs(
    params: VolumeSetSpaceSformParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-sform");
    cargs.push(String((params["xi_spacing"] ?? null)));
    cargs.push(String((params["xj_spacing"] ?? null)));
    cargs.push(String((params["xk_spacing"] ?? null)));
    cargs.push(String((params["x_offset"] ?? null)));
    cargs.push(String((params["yi_spacing"] ?? null)));
    cargs.push(String((params["yj_spacing"] ?? null)));
    cargs.push(String((params["yk_spacing"] ?? null)));
    cargs.push(String((params["y_offset"] ?? null)));
    cargs.push(String((params["zi_spacing"] ?? null)));
    cargs.push(String((params["zj_spacing"] ?? null)));
    cargs.push(String((params["zk_spacing"] ?? null)));
    cargs.push(String((params["z_offset"] ?? null)));
    return cargs;
}


function volume_set_space_file_params(
    volume_ref: string,
    opt_ignore_dims: boolean = false,
): VolumeSetSpaceFileParameters {
    /**
     * Build parameters.
    
     * @param volume_ref volume file to use for reference space
     * @param opt_ignore_dims copy the spacing info even if the dimensions don't match
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "file" as const,
        "volume_ref": volume_ref,
        "opt_ignore_dims": opt_ignore_dims,
    };
    return params;
}


function volume_set_space_file_cargs(
    params: VolumeSetSpaceFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-file");
    cargs.push((params["volume_ref"] ?? null));
    if ((params["opt_ignore_dims"] ?? null)) {
        cargs.push("-ignore-dims");
    }
    return cargs;
}


/**
 * Output object returned when calling `volume_set_space(...)`.
 *
 * @interface
 */
interface VolumeSetSpaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function volume_set_space_params(
    volume_in: InputPathType,
    volume_out: string,
    plumb: VolumeSetSpacePlumbParameters | null = null,
    sform: VolumeSetSpaceSformParameters | null = null,
    file: VolumeSetSpaceFileParameters | null = null,
): VolumeSetSpaceParameters {
    /**
     * Build parameters.
    
     * @param volume_in the input volume
     * @param volume_out output - the output volume
     * @param plumb set via axis order and spacing/offset
     * @param sform set via a nifti sform
     * @param file copy spacing info from volume file with matching dimensions
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-set-space" as const,
        "volume_in": volume_in,
        "volume_out": volume_out,
    };
    if (plumb !== null) {
        params["plumb"] = plumb;
    }
    if (sform !== null) {
        params["sform"] = sform;
    }
    if (file !== null) {
        params["file"] = file;
    }
    return params;
}


function volume_set_space_cargs(
    params: VolumeSetSpaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-set-space");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["plumb"] ?? null) !== null) {
        cargs.push(...dynCargs((params["plumb"] ?? null).__STYXTYPE__)((params["plumb"] ?? null), execution));
    }
    if ((params["sform"] ?? null) !== null) {
        cargs.push(...dynCargs((params["sform"] ?? null).__STYXTYPE__)((params["sform"] ?? null), execution));
    }
    if ((params["file"] ?? null) !== null) {
        cargs.push(...dynCargs((params["file"] ?? null).__STYXTYPE__)((params["file"] ?? null), execution));
    }
    return cargs;
}


function volume_set_space_outputs(
    params: VolumeSetSpaceParameters,
    execution: Execution,
): VolumeSetSpaceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeSetSpaceOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function volume_set_space_execute(
    params: VolumeSetSpaceParameters,
    execution: Execution,
): VolumeSetSpaceOutputs {
    /**
     * Change volume space information.
     * 
     * Writes a copy of the volume file, with the spacing information changed as specified.  No reordering of the voxel data occurs, see -volume-reorient to change the volume indexing order and reorder the voxels to match.  Exactly one of -plumb, -sform, or -file must be specified.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeSetSpaceOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_set_space_cargs(params, execution)
    const ret = volume_set_space_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_set_space(
    volume_in: InputPathType,
    volume_out: string,
    plumb: VolumeSetSpacePlumbParameters | null = null,
    sform: VolumeSetSpaceSformParameters | null = null,
    file: VolumeSetSpaceFileParameters | null = null,
    runner: Runner | null = null,
): VolumeSetSpaceOutputs {
    /**
     * Change volume space information.
     * 
     * Writes a copy of the volume file, with the spacing information changed as specified.  No reordering of the voxel data occurs, see -volume-reorient to change the volume indexing order and reorder the voxels to match.  Exactly one of -plumb, -sform, or -file must be specified.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume_in the input volume
     * @param volume_out output - the output volume
     * @param plumb set via axis order and spacing/offset
     * @param sform set via a nifti sform
     * @param file copy spacing info from volume file with matching dimensions
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeSetSpaceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_SET_SPACE_METADATA);
    const params = volume_set_space_params(volume_in, volume_out, plumb, sform, file)
    return volume_set_space_execute(params, execution);
}


export {
      VOLUME_SET_SPACE_METADATA,
      VolumeSetSpaceFileParameters,
      VolumeSetSpaceOutputs,
      VolumeSetSpaceParameters,
      VolumeSetSpacePlumbParameters,
      VolumeSetSpaceSformParameters,
      volume_set_space,
      volume_set_space_file_params,
      volume_set_space_params,
      volume_set_space_plumb_params,
      volume_set_space_sform_params,
};
