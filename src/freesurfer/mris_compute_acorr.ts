// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_COMPUTE_ACORR_METADATA: Metadata = {
    id: "0e07071f4f37f6918a11761e3deabc99cac8c12d.boutiques",
    name: "mris_compute_acorr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisComputeAcorrParameters {
    "@type": "freesurfer.mris_compute_acorr";
    "output_subject": string;
    "hemi": string;
    "surf": InputPathType;
    "curv": InputPathType;
    "c1_subjects": Array<string>;
    "c2_subjects": Array<string>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_compute_acorr": mris_compute_acorr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_compute_acorr(...)`.
 *
 * @interface
 */
interface MrisComputeAcorrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_subject The output subject file.
 * @param hemi Specify the hemisphere for processing.
 * @param surf The surface file which must be a spherical surface suitable for computing geodesics.
 * @param curv The input curvature file.
 * @param c1_subjects List of subjects from one class.
 * @param c2_subjects List of subjects from another class.
 *
 * @returns Parameter dictionary
 */
function mris_compute_acorr_params(
    output_subject: string,
    hemi: string,
    surf: InputPathType,
    curv: InputPathType,
    c1_subjects: Array<string>,
    c2_subjects: Array<string>,
): MrisComputeAcorrParameters {
    const params = {
        "@type": "freesurfer.mris_compute_acorr" as const,
        "output_subject": output_subject,
        "hemi": hemi,
        "surf": surf,
        "curv": curv,
        "c1_subjects": c1_subjects,
        "c2_subjects": c2_subjects,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_compute_acorr_cargs(
    params: MrisComputeAcorrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_compute_acorr");
    cargs.push(
        "-o",
        (params["output_subject"] ?? null)
    );
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["surf"] ?? null)));
    cargs.push(execution.inputFile((params["curv"] ?? null)));
    cargs.push(...(params["c1_subjects"] ?? null));
    cargs.push(...(params["c2_subjects"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_compute_acorr_outputs(
    params: MrisComputeAcorrParameters,
    execution: Execution,
): MrisComputeAcorrOutputs {
    const ret: MrisComputeAcorrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_compute_acorr
 *
 * Compute the autocorrelation function of a curvature file on a spherical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisComputeAcorrOutputs`).
 */
function mris_compute_acorr_execute(
    params: MrisComputeAcorrParameters,
    runner: Runner | null = null,
): MrisComputeAcorrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_COMPUTE_ACORR_METADATA);
    params = execution.params(params)
    const cargs = mris_compute_acorr_cargs(params, execution)
    const ret = mris_compute_acorr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_compute_acorr
 *
 * Compute the autocorrelation function of a curvature file on a spherical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param output_subject The output subject file.
 * @param hemi Specify the hemisphere for processing.
 * @param surf The surface file which must be a spherical surface suitable for computing geodesics.
 * @param curv The input curvature file.
 * @param c1_subjects List of subjects from one class.
 * @param c2_subjects List of subjects from another class.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisComputeAcorrOutputs`).
 */
function mris_compute_acorr(
    output_subject: string,
    hemi: string,
    surf: InputPathType,
    curv: InputPathType,
    c1_subjects: Array<string>,
    c2_subjects: Array<string>,
    runner: Runner | null = null,
): MrisComputeAcorrOutputs {
    const params = mris_compute_acorr_params(output_subject, hemi, surf, curv, c1_subjects, c2_subjects)
    return mris_compute_acorr_execute(params, runner);
}


export {
      MRIS_COMPUTE_ACORR_METADATA,
      MrisComputeAcorrOutputs,
      MrisComputeAcorrParameters,
      mris_compute_acorr,
      mris_compute_acorr_execute,
      mris_compute_acorr_params,
};
