// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_PMAKE_METADATA: Metadata = {
    id: "2dbc6dfbda3e3de314e9075048746009fc7c561b.boutiques",
    name: "mris_pmake",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisPmakeParameters {
    "@type": "freesurfer.mris_pmake";
    "options_file"?: string | null | undefined;
    "working_dir"?: string | null | undefined;
    "listen_mode": boolean;
    "listen_on_port"?: number | null | undefined;
    "subject": string;
    "hemisphere": string;
    "surface0"?: string | null | undefined;
    "surface1"?: string | null | undefined;
    "curve0"?: string | null | undefined;
    "curve1"?: string | null | undefined;
    "use_abs_curvs": boolean;
    "mpm_prog"?: string | null | undefined;
    "mpm_args"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_pmake": mris_pmake_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_pmake(...)`.
 *
 * @interface
 */
interface MrisPmakeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Set the subject to <subj>.
 * @param hemisphere The hemisphere to process.
 * @param options_file The main configuration file specifying the startup run-time behaviour.
 * @param working_dir The working directory.
 * @param listen_mode Start in LISTEN mode without calculating a path.
 * @param listen_on_port Create the server port on specified port and do nothing else.
 * @param surface0 The main mesh surface to read.
 * @param surface1 The aux mesh surface to read.
 * @param curve0 The main curvature function maps.
 * @param curve1 The aux curvature function maps.
 * @param use_abs_curvs Use absolute values on each curvature map.
 * @param mpm_prog The mpmProg to run.
 * @param mpm_args Arguments for the specified mpmProg.
 *
 * @returns Parameter dictionary
 */
function mris_pmake_params(
    subject: string,
    hemisphere: string,
    options_file: string | null = "options.txt",
    working_dir: string | null = ".",
    listen_mode: boolean = false,
    listen_on_port: number | null = null,
    surface0: string | null = "inflated",
    surface1: string | null = "smoothwm",
    curve0: string | null = "smoothwm.H.crv",
    curve1: string | null = "sulc",
    use_abs_curvs: boolean = false,
    mpm_prog: string | null = null,
    mpm_args: string | null = null,
): MrisPmakeParameters {
    const params = {
        "@type": "freesurfer.mris_pmake" as const,
        "listen_mode": listen_mode,
        "subject": subject,
        "hemisphere": hemisphere,
        "use_abs_curvs": use_abs_curvs,
    };
    if (options_file !== null) {
        params["options_file"] = options_file;
    }
    if (working_dir !== null) {
        params["working_dir"] = working_dir;
    }
    if (listen_on_port !== null) {
        params["listen_on_port"] = listen_on_port;
    }
    if (surface0 !== null) {
        params["surface0"] = surface0;
    }
    if (surface1 !== null) {
        params["surface1"] = surface1;
    }
    if (curve0 !== null) {
        params["curve0"] = curve0;
    }
    if (curve1 !== null) {
        params["curve1"] = curve1;
    }
    if (mpm_prog !== null) {
        params["mpm_prog"] = mpm_prog;
    }
    if (mpm_args !== null) {
        params["mpm_args"] = mpm_args;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_pmake_cargs(
    params: MrisPmakeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_pmake");
    if ((params["options_file"] ?? null) !== null) {
        cargs.push(
            "--optionsFile",
            (params["options_file"] ?? null)
        );
    }
    if ((params["working_dir"] ?? null) !== null) {
        cargs.push(
            "--dir",
            (params["working_dir"] ?? null)
        );
    }
    if ((params["listen_mode"] ?? null)) {
        cargs.push("--listen");
    }
    if ((params["listen_on_port"] ?? null) !== null) {
        cargs.push(
            "--listenOnPort",
            String((params["listen_on_port"] ?? null))
        );
    }
    cargs.push(
        "--subject",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemisphere"] ?? null)
    );
    if ((params["surface0"] ?? null) !== null) {
        cargs.push(
            "--surface0",
            (params["surface0"] ?? null)
        );
    }
    if ((params["surface1"] ?? null) !== null) {
        cargs.push(
            "--surface1",
            (params["surface1"] ?? null)
        );
    }
    if ((params["curve0"] ?? null) !== null) {
        cargs.push(
            "--curve0",
            (params["curve0"] ?? null)
        );
    }
    if ((params["curve1"] ?? null) !== null) {
        cargs.push(
            "--curve1",
            (params["curve1"] ?? null)
        );
    }
    if ((params["use_abs_curvs"] ?? null)) {
        cargs.push("--useAbsCurvs");
    }
    if ((params["mpm_prog"] ?? null) !== null) {
        cargs.push(
            "--mpmProg",
            (params["mpm_prog"] ?? null)
        );
    }
    if ((params["mpm_args"] ?? null) !== null) {
        cargs.push(
            "--mpmArgs",
            (params["mpm_args"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_pmake_outputs(
    params: MrisPmakeParameters,
    execution: Execution,
): MrisPmakeOutputs {
    const ret: MrisPmakeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Calculates paths and related costs on FreeSurfer surfaces based on an edge cost and Dijkstra's algorithm.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrisPmakeOutputs`).
 */
function mris_pmake_execute(
    params: MrisPmakeParameters,
    execution: Execution,
): MrisPmakeOutputs {
    params = execution.params(params)
    const cargs = mris_pmake_cargs(params, execution)
    const ret = mris_pmake_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Calculates paths and related costs on FreeSurfer surfaces based on an edge cost and Dijkstra's algorithm.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Set the subject to <subj>.
 * @param hemisphere The hemisphere to process.
 * @param options_file The main configuration file specifying the startup run-time behaviour.
 * @param working_dir The working directory.
 * @param listen_mode Start in LISTEN mode without calculating a path.
 * @param listen_on_port Create the server port on specified port and do nothing else.
 * @param surface0 The main mesh surface to read.
 * @param surface1 The aux mesh surface to read.
 * @param curve0 The main curvature function maps.
 * @param curve1 The aux curvature function maps.
 * @param use_abs_curvs Use absolute values on each curvature map.
 * @param mpm_prog The mpmProg to run.
 * @param mpm_args Arguments for the specified mpmProg.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisPmakeOutputs`).
 */
function mris_pmake(
    subject: string,
    hemisphere: string,
    options_file: string | null = "options.txt",
    working_dir: string | null = ".",
    listen_mode: boolean = false,
    listen_on_port: number | null = null,
    surface0: string | null = "inflated",
    surface1: string | null = "smoothwm",
    curve0: string | null = "smoothwm.H.crv",
    curve1: string | null = "sulc",
    use_abs_curvs: boolean = false,
    mpm_prog: string | null = null,
    mpm_args: string | null = null,
    runner: Runner | null = null,
): MrisPmakeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_PMAKE_METADATA);
    const params = mris_pmake_params(subject, hemisphere, options_file, working_dir, listen_mode, listen_on_port, surface0, surface1, curve0, curve1, use_abs_curvs, mpm_prog, mpm_args)
    return mris_pmake_execute(params, execution);
}


export {
      MRIS_PMAKE_METADATA,
      MrisPmakeOutputs,
      MrisPmakeParameters,
      mris_pmake,
      mris_pmake_cargs,
      mris_pmake_execute,
      mris_pmake_outputs,
      mris_pmake_params,
};
