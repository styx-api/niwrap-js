// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSCALC_METADATA: Metadata = {
    id: "ea4a3f00afbc065f06ad7bec64190787fc5e16a4.boutiques",
    name: "fscalc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FscalcParameters {
    "@type": "freesurfer.fscalc";
    "input1": string;
    "operation": string;
    "input2"?: string | null | undefined;
    "output_file": string;
    "output_data_type"?: string | null | undefined;
    "debug": boolean;
    "tmpdir"?: string | null | undefined;
    "nocleanup": boolean;
    "log_file"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fscalc": fscalc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.fscalc": fscalc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fscalc(...)`.
 *
 * @interface
 */
interface FscalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting output volume from the operations specified.
     */
    result_vol: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input1 First input image or constant.
 * @param operation Operation to perform between input volumes.
 * @param output_file Output volume file.
 * @param input2 Second input image or constant. Optional for some unary operations.
 * @param output_data_type Specify output data type (uchar, short, int, float).
 * @param debug Enable debug mode.
 * @param tmpdir Temporary directory for processing.
 * @param nocleanup Prevent cleanup of temporary files.
 * @param log_file Specify a log file for operation log.
 *
 * @returns Parameter dictionary
 */
function fscalc_params(
    input1: string,
    operation: string,
    output_file: string,
    input2: string | null = null,
    output_data_type: string | null = null,
    debug: boolean = false,
    tmpdir: string | null = null,
    nocleanup: boolean = false,
    log_file: string | null = null,
): FscalcParameters {
    const params = {
        "@type": "freesurfer.fscalc" as const,
        "input1": input1,
        "operation": operation,
        "output_file": output_file,
        "debug": debug,
        "nocleanup": nocleanup,
    };
    if (input2 !== null) {
        params["input2"] = input2;
    }
    if (output_data_type !== null) {
        params["output_data_type"] = output_data_type;
    }
    if (tmpdir !== null) {
        params["tmpdir"] = tmpdir;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fscalc_cargs(
    params: FscalcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fscalc");
    cargs.push((params["input1"] ?? null));
    cargs.push((params["operation"] ?? null));
    if ((params["input2"] ?? null) !== null) {
        cargs.push((params["input2"] ?? null));
    }
    cargs.push(
        "--o",
        (params["output_file"] ?? null)
    );
    if ((params["output_data_type"] ?? null) !== null) {
        cargs.push(
            "--odt",
            (params["output_data_type"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["tmpdir"] ?? null) !== null) {
        cargs.push(
            "--tmpdir",
            (params["tmpdir"] ?? null)
        );
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("--nocleanup");
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log_file"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fscalc_outputs(
    params: FscalcParameters,
    execution: Execution,
): FscalcOutputs {
    const ret: FscalcOutputs = {
        root: execution.outputFile("."),
        result_vol: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * fscalc
 *
 * A frontend tool to perform mathematical operations on volumes/surfaces of data using mris_calc.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FscalcOutputs`).
 */
function fscalc_execute(
    params: FscalcParameters,
    runner: Runner | null = null,
): FscalcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSCALC_METADATA);
    params = execution.params(params)
    const cargs = fscalc_cargs(params, execution)
    const ret = fscalc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fscalc
 *
 * A frontend tool to perform mathematical operations on volumes/surfaces of data using mris_calc.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input1 First input image or constant.
 * @param operation Operation to perform between input volumes.
 * @param output_file Output volume file.
 * @param input2 Second input image or constant. Optional for some unary operations.
 * @param output_data_type Specify output data type (uchar, short, int, float).
 * @param debug Enable debug mode.
 * @param tmpdir Temporary directory for processing.
 * @param nocleanup Prevent cleanup of temporary files.
 * @param log_file Specify a log file for operation log.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FscalcOutputs`).
 */
function fscalc(
    input1: string,
    operation: string,
    output_file: string,
    input2: string | null = null,
    output_data_type: string | null = null,
    debug: boolean = false,
    tmpdir: string | null = null,
    nocleanup: boolean = false,
    log_file: string | null = null,
    runner: Runner | null = null,
): FscalcOutputs {
    const params = fscalc_params(input1, operation, output_file, input2, output_data_type, debug, tmpdir, nocleanup, log_file)
    return fscalc_execute(params, runner);
}


export {
      FSCALC_METADATA,
      FscalcOutputs,
      FscalcParameters,
      fscalc,
      fscalc_execute,
      fscalc_params,
};
