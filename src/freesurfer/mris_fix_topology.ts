// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_FIX_TOPOLOGY_METADATA: Metadata = {
    id: "64e2b9290f868ea668dfb0ff3a646a7a893619d6.boutiques",
    name: "mris_fix_topology",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisFixTopologyParameters {
    "__STYXTYPE__": "mris_fix_topology";
    "subject_name": string;
    "hemisphere": string;
    "orig_name"?: string | null | undefined;
    "sphere_name"?: string | null | undefined;
    "inflated_name"?: string | null | undefined;
    "output_name"?: string | null | undefined;
    "defect_base_name"?: string | null | undefined;
    "write_fixed_inflated": boolean;
    "verbose": boolean;
    "verbose_low": boolean;
    "warnings": boolean;
    "errors": boolean;
    "movies": boolean;
    "intersect": boolean;
    "mappings": boolean;
    "correct_defect"?: number | null | undefined;
    "niters"?: number | null | undefined;
    "genetic": boolean;
    "optimize": boolean;
    "random"?: number | null | undefined;
    "seed"?: number | null | undefined;
    "diag": boolean;
    "mgz": boolean;
    "smooth"?: number | null | undefined;
    "diagnostic_level"?: number | null | undefined;
    "threads"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_fix_topology": mris_fix_topology_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_fix_topology(...)`.
 *
 * @interface
 */
interface MrisFixTopologyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_fix_topology_params(
    subject_name: string,
    hemisphere: string,
    orig_name: string | null = "orig.nofix",
    sphere_name: string | null = "qsphere.nofix",
    inflated_name: string | null = "inflated.nofix",
    output_name: string | null = "orig",
    defect_base_name: string | null = "defect",
    write_fixed_inflated: boolean = false,
    verbose: boolean = false,
    verbose_low: boolean = false,
    warnings: boolean = false,
    errors: boolean = false,
    movies: boolean = false,
    intersect: boolean = false,
    mappings: boolean = false,
    correct_defect: number | null = null,
    niters: number | null = null,
    genetic: boolean = false,
    optimize: boolean = false,
    random: number | null = null,
    seed: number | null = null,
    diag: boolean = false,
    mgz: boolean = false,
    smooth: number | null = null,
    diagnostic_level: number | null = null,
    threads: number | null = null,
): MrisFixTopologyParameters {
    /**
     * Build parameters.
    
     * @param subject_name Subject name
     * @param hemisphere Hemisphere
     * @param orig_name Input orig name (default is orig.nofix)
     * @param sphere_name Sphere name (default is qsphere.nofix)
     * @param inflated_name Inflated name (default is inflated.nofix)
     * @param output_name Output name (default is orig)
     * @param defect_base_name Defect basename (default is defect)
     * @param write_fixed_inflated Write fixed inflated
     * @param verbose Increase verbosity
     * @param verbose_low Low verbosity
     * @param warnings Show warnings
     * @param errors Show errors
     * @param movies Generate movies
     * @param intersect Check if the final surface self-intersects
     * @param mappings Generate several different mappings
     * @param correct_defect Correct specific defect number
     * @param niters Number of iterations for genetic algorithm
     * @param genetic Use genetic search
     * @param optimize Optimize genetic search
     * @param random Use random search with specified iterations
     * @param seed Set random number generator seed
     * @param diag Sets DIAG_SAVE_DIAGS
     * @param mgz Assume volumes are in mgz format
     * @param smooth Smooth corrected surface by N iterations
     * @param diagnostic_level Set diagnostic level
     * @param threads Set number of OpenMP threads
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_fix_topology" as const,
        "subject_name": subject_name,
        "hemisphere": hemisphere,
        "write_fixed_inflated": write_fixed_inflated,
        "verbose": verbose,
        "verbose_low": verbose_low,
        "warnings": warnings,
        "errors": errors,
        "movies": movies,
        "intersect": intersect,
        "mappings": mappings,
        "genetic": genetic,
        "optimize": optimize,
        "diag": diag,
        "mgz": mgz,
    };
    if (orig_name !== null) {
        params["orig_name"] = orig_name;
    }
    if (sphere_name !== null) {
        params["sphere_name"] = sphere_name;
    }
    if (inflated_name !== null) {
        params["inflated_name"] = inflated_name;
    }
    if (output_name !== null) {
        params["output_name"] = output_name;
    }
    if (defect_base_name !== null) {
        params["defect_base_name"] = defect_base_name;
    }
    if (correct_defect !== null) {
        params["correct_defect"] = correct_defect;
    }
    if (niters !== null) {
        params["niters"] = niters;
    }
    if (random !== null) {
        params["random"] = random;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (smooth !== null) {
        params["smooth"] = smooth;
    }
    if (diagnostic_level !== null) {
        params["diagnostic_level"] = diagnostic_level;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


function mris_fix_topology_cargs(
    params: MrisFixTopologyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_fix_topology");
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    if ((params["orig_name"] ?? null) !== null) {
        cargs.push(
            "-orig",
            (params["orig_name"] ?? null)
        );
    }
    if ((params["sphere_name"] ?? null) !== null) {
        cargs.push(
            "-sphere",
            (params["sphere_name"] ?? null)
        );
    }
    if ((params["inflated_name"] ?? null) !== null) {
        cargs.push(
            "-inflated",
            (params["inflated_name"] ?? null)
        );
    }
    if ((params["output_name"] ?? null) !== null) {
        cargs.push(
            "-out",
            (params["output_name"] ?? null)
        );
    }
    if ((params["defect_base_name"] ?? null) !== null) {
        cargs.push(
            "-defect",
            (params["defect_base_name"] ?? null)
        );
    }
    if ((params["write_fixed_inflated"] ?? null)) {
        cargs.push("-wi");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verbose");
    }
    if ((params["verbose_low"] ?? null)) {
        cargs.push("-verbose_low");
    }
    if ((params["warnings"] ?? null)) {
        cargs.push("-warnings");
    }
    if ((params["errors"] ?? null)) {
        cargs.push("-errors");
    }
    if ((params["movies"] ?? null)) {
        cargs.push("-movies");
    }
    if ((params["intersect"] ?? null)) {
        cargs.push("-intersect");
    }
    if ((params["mappings"] ?? null)) {
        cargs.push("-mappings");
    }
    if ((params["correct_defect"] ?? null) !== null) {
        cargs.push(
            "-correct_defect",
            String((params["correct_defect"] ?? null))
        );
    }
    if ((params["niters"] ?? null) !== null) {
        cargs.push(
            "-niters",
            String((params["niters"] ?? null))
        );
    }
    if ((params["genetic"] ?? null)) {
        cargs.push("-genetic");
    }
    if ((params["optimize"] ?? null)) {
        cargs.push("-optimize");
    }
    if ((params["random"] ?? null) !== null) {
        cargs.push(
            "-random",
            String((params["random"] ?? null))
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["diag"] ?? null)) {
        cargs.push("-diag");
    }
    if ((params["mgz"] ?? null)) {
        cargs.push("-mgz");
    }
    if ((params["smooth"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["smooth"] ?? null))
        );
    }
    if ((params["diagnostic_level"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["diagnostic_level"] ?? null))
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "-threads",
            String((params["threads"] ?? null))
        );
    }
    return cargs;
}


function mris_fix_topology_outputs(
    params: MrisFixTopologyParameters,
    execution: Execution,
): MrisFixTopologyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisFixTopologyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_fix_topology_execute(
    params: MrisFixTopologyParameters,
    execution: Execution,
): MrisFixTopologyOutputs {
    /**
     * Computes a mapping from the unit sphere onto the cortical surface, ensuring a topologically correct surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisFixTopologyOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_fix_topology_cargs(params, execution)
    const ret = mris_fix_topology_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_fix_topology(
    subject_name: string,
    hemisphere: string,
    orig_name: string | null = "orig.nofix",
    sphere_name: string | null = "qsphere.nofix",
    inflated_name: string | null = "inflated.nofix",
    output_name: string | null = "orig",
    defect_base_name: string | null = "defect",
    write_fixed_inflated: boolean = false,
    verbose: boolean = false,
    verbose_low: boolean = false,
    warnings: boolean = false,
    errors: boolean = false,
    movies: boolean = false,
    intersect: boolean = false,
    mappings: boolean = false,
    correct_defect: number | null = null,
    niters: number | null = null,
    genetic: boolean = false,
    optimize: boolean = false,
    random: number | null = null,
    seed: number | null = null,
    diag: boolean = false,
    mgz: boolean = false,
    smooth: number | null = null,
    diagnostic_level: number | null = null,
    threads: number | null = null,
    runner: Runner | null = null,
): MrisFixTopologyOutputs {
    /**
     * Computes a mapping from the unit sphere onto the cortical surface, ensuring a topologically correct surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject_name Subject name
     * @param hemisphere Hemisphere
     * @param orig_name Input orig name (default is orig.nofix)
     * @param sphere_name Sphere name (default is qsphere.nofix)
     * @param inflated_name Inflated name (default is inflated.nofix)
     * @param output_name Output name (default is orig)
     * @param defect_base_name Defect basename (default is defect)
     * @param write_fixed_inflated Write fixed inflated
     * @param verbose Increase verbosity
     * @param verbose_low Low verbosity
     * @param warnings Show warnings
     * @param errors Show errors
     * @param movies Generate movies
     * @param intersect Check if the final surface self-intersects
     * @param mappings Generate several different mappings
     * @param correct_defect Correct specific defect number
     * @param niters Number of iterations for genetic algorithm
     * @param genetic Use genetic search
     * @param optimize Optimize genetic search
     * @param random Use random search with specified iterations
     * @param seed Set random number generator seed
     * @param diag Sets DIAG_SAVE_DIAGS
     * @param mgz Assume volumes are in mgz format
     * @param smooth Smooth corrected surface by N iterations
     * @param diagnostic_level Set diagnostic level
     * @param threads Set number of OpenMP threads
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisFixTopologyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_FIX_TOPOLOGY_METADATA);
    const params = mris_fix_topology_params(subject_name, hemisphere, orig_name, sphere_name, inflated_name, output_name, defect_base_name, write_fixed_inflated, verbose, verbose_low, warnings, errors, movies, intersect, mappings, correct_defect, niters, genetic, optimize, random, seed, diag, mgz, smooth, diagnostic_level, threads)
    return mris_fix_topology_execute(params, execution);
}


export {
      MRIS_FIX_TOPOLOGY_METADATA,
      MrisFixTopologyOutputs,
      MrisFixTopologyParameters,
      mris_fix_topology,
      mris_fix_topology_params,
};
