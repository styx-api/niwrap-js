// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_SPHERE_TRIANGULAR_PATCHES_METADATA: Metadata = {
    id: "0041e957f3f86307d53f30986bba8e52c79c3ab8.boutiques",
    name: "surface-sphere-triangular-patches",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceSphereTriangularPatchesParameters {
    "__STYXTYPE__": "surface-sphere-triangular-patches";
    "sphere": InputPathType;
    "divisions": number;
    "text_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-sphere-triangular-patches": surface_sphere_triangular_patches_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_sphere_triangular_patches(...)`.
 *
 * @interface
 */
interface SurfaceSphereTriangularPatchesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function surface_sphere_triangular_patches_params(
    sphere: InputPathType,
    divisions: number,
    text_out: string,
): SurfaceSphereTriangularPatchesParameters {
    /**
     * Build parameters.
    
     * @param sphere an undistorted, regularly divided icosahedral sphere
     * @param divisions how many pieces to divide each icosahedral edge into, must divide perfectly into the given sphere
     * @param text_out output - text file for the vertex numbers of the patches
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-sphere-triangular-patches" as const,
        "sphere": sphere,
        "divisions": divisions,
        "text_out": text_out,
    };
    return params;
}


function surface_sphere_triangular_patches_cargs(
    params: SurfaceSphereTriangularPatchesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-sphere-triangular-patches");
    cargs.push(execution.inputFile((params["sphere"] ?? null)));
    cargs.push(String((params["divisions"] ?? null)));
    cargs.push((params["text_out"] ?? null));
    return cargs;
}


function surface_sphere_triangular_patches_outputs(
    params: SurfaceSphereTriangularPatchesParameters,
    execution: Execution,
): SurfaceSphereTriangularPatchesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceSphereTriangularPatchesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function surface_sphere_triangular_patches_execute(
    params: SurfaceSphereTriangularPatchesParameters,
    execution: Execution,
): SurfaceSphereTriangularPatchesOutputs {
    /**
     * Divide standard sphere into patches.
     * 
     * Divide the given undistorted sphere into equally-sized triangular patches.  Patches overlap by a border of 1 vertex.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceSphereTriangularPatchesOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_sphere_triangular_patches_cargs(params, execution)
    const ret = surface_sphere_triangular_patches_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_sphere_triangular_patches(
    sphere: InputPathType,
    divisions: number,
    text_out: string,
    runner: Runner | null = null,
): SurfaceSphereTriangularPatchesOutputs {
    /**
     * Divide standard sphere into patches.
     * 
     * Divide the given undistorted sphere into equally-sized triangular patches.  Patches overlap by a border of 1 vertex.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param sphere an undistorted, regularly divided icosahedral sphere
     * @param divisions how many pieces to divide each icosahedral edge into, must divide perfectly into the given sphere
     * @param text_out output - text file for the vertex numbers of the patches
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceSphereTriangularPatchesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_SPHERE_TRIANGULAR_PATCHES_METADATA);
    const params = surface_sphere_triangular_patches_params(sphere, divisions, text_out)
    return surface_sphere_triangular_patches_execute(params, execution);
}


export {
      SURFACE_SPHERE_TRIANGULAR_PATCHES_METADATA,
      SurfaceSphereTriangularPatchesOutputs,
      SurfaceSphereTriangularPatchesParameters,
      surface_sphere_triangular_patches,
      surface_sphere_triangular_patches_params,
};
