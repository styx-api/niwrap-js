// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_INTERMODALITY_INTRASUBJECT_SH_METADATA: Metadata = {
    id: "4c7c5492fcbe6ca2173159c5be98ecb63525e76c.boutiques",
    name: "antsIntermodalityIntrasubject.sh",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsIntermodalityIntrasubjectShParameters {
    "@type": "ants.antsIntermodalityIntrasubject.sh";
    "dimension": number;
    "anatomical_t1_image": InputPathType;
    "anatomical_reference_image"?: InputPathType | null | undefined;
    "scalar_image_to_match": InputPathType;
    "anatomical_t1brainmask": InputPathType;
    "transform_type": 0 | 1 | 2 | 3;
    "t1_to_template_prefix": string;
    "template_space"?: string | null | undefined;
    "output_prefix": string;
    "labels_in_template_space"?: InputPathType | null | undefined;
    "auxiliary_scalar_images"?: InputPathType | null | undefined;
    "auxiliary_dt_image"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.antsIntermodalityIntrasubject.sh": ants_intermodality_intrasubject_sh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.antsIntermodalityIntrasubject.sh": ants_intermodality_intrasubject_sh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_intermodality_intrasubject_sh(...)`.
 *
 * @interface
 */
interface AntsIntermodalityIntrasubjectShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transformed image after registration.
     */
    output_transformed_image: OutputPathType;
    /**
     * Transformation matrix or warp field from the registration.
     */
    output_transform: OutputPathType;
    /**
     * Output warped image in the template space.
     */
    output_warped_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dimension Dimensionality of the image, typically 3 for 3D images.
 * @param anatomical_t1_image Anatomical T1 image (brain or whole-head) to align to.
 * @param scalar_image_to_match Scalar image to be matched, such as average BOLD, average DWI, etc.
 * @param anatomical_t1brainmask Brain mask for the anatomical T1 image, should mask out regions not appearing in the scalar image.
 * @param transform_type Type of transform: 0=rigid, 1=affine, 2=rigid+small_def, 3=affine+small_def
 * @param t1_to_template_prefix Prefix for T1 to template transform files.
 * @param output_prefix Prefix for output files.
 * @param anatomical_reference_image Anatomical reference image to warp to, often higher resolution than the anatomical T1 image.
 * @param template_space Template space.
 * @param labels_in_template_space Labels in the template space.
 * @param auxiliary_scalar_images Auxiliary scalar images to warp to the template.
 * @param auxiliary_dt_image Auxiliary DT image to warp to the template.
 *
 * @returns Parameter dictionary
 */
function ants_intermodality_intrasubject_sh_params(
    dimension: number,
    anatomical_t1_image: InputPathType,
    scalar_image_to_match: InputPathType,
    anatomical_t1brainmask: InputPathType,
    transform_type: 0 | 1 | 2 | 3,
    t1_to_template_prefix: string,
    output_prefix: string,
    anatomical_reference_image: InputPathType | null = null,
    template_space: string | null = null,
    labels_in_template_space: InputPathType | null = null,
    auxiliary_scalar_images: InputPathType | null = null,
    auxiliary_dt_image: InputPathType | null = null,
): AntsIntermodalityIntrasubjectShParameters {
    const params = {
        "@type": "ants.antsIntermodalityIntrasubject.sh" as const,
        "dimension": dimension,
        "anatomical_t1_image": anatomical_t1_image,
        "scalar_image_to_match": scalar_image_to_match,
        "anatomical_t1brainmask": anatomical_t1brainmask,
        "transform_type": transform_type,
        "t1_to_template_prefix": t1_to_template_prefix,
        "output_prefix": output_prefix,
    };
    if (anatomical_reference_image !== null) {
        params["anatomical_reference_image"] = anatomical_reference_image;
    }
    if (template_space !== null) {
        params["template_space"] = template_space;
    }
    if (labels_in_template_space !== null) {
        params["labels_in_template_space"] = labels_in_template_space;
    }
    if (auxiliary_scalar_images !== null) {
        params["auxiliary_scalar_images"] = auxiliary_scalar_images;
    }
    if (auxiliary_dt_image !== null) {
        params["auxiliary_dt_image"] = auxiliary_dt_image;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_intermodality_intrasubject_sh_cargs(
    params: AntsIntermodalityIntrasubjectShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsIntermodalityIntrasubject.sh");
    cargs.push(
        "-d",
        String((params["dimension"] ?? null))
    );
    cargs.push(
        "-r",
        execution.inputFile((params["anatomical_t1_image"] ?? null))
    );
    if ((params["anatomical_reference_image"] ?? null) !== null) {
        cargs.push(
            "-R",
            execution.inputFile((params["anatomical_reference_image"] ?? null))
        );
    }
    cargs.push(
        "-i",
        execution.inputFile((params["scalar_image_to_match"] ?? null))
    );
    cargs.push(
        "-x",
        execution.inputFile((params["anatomical_t1brainmask"] ?? null))
    );
    cargs.push(
        "-t",
        String((params["transform_type"] ?? null))
    );
    cargs.push(
        "-w",
        (params["t1_to_template_prefix"] ?? null)
    );
    if ((params["template_space"] ?? null) !== null) {
        cargs.push(
            "-T",
            (params["template_space"] ?? null)
        );
    }
    cargs.push(
        "-o",
        (params["output_prefix"] ?? null)
    );
    if ((params["labels_in_template_space"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["labels_in_template_space"] ?? null))
        );
    }
    if ((params["auxiliary_scalar_images"] ?? null) !== null) {
        cargs.push(
            "-a",
            execution.inputFile((params["auxiliary_scalar_images"] ?? null))
        );
    }
    if ((params["auxiliary_dt_image"] ?? null) !== null) {
        cargs.push(
            "-b",
            execution.inputFile((params["auxiliary_dt_image"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_intermodality_intrasubject_sh_outputs(
    params: AntsIntermodalityIntrasubjectShParameters,
    execution: Execution,
): AntsIntermodalityIntrasubjectShOutputs {
    const ret: AntsIntermodalityIntrasubjectShOutputs = {
        root: execution.outputFile("."),
        output_transformed_image: execution.outputFile([(params["output_prefix"] ?? null), "Transformed.nii.gz"].join('')),
        output_transform: execution.outputFile([(params["output_prefix"] ?? null), "Transform.mat"].join('')),
        output_warped_image: execution.outputFile([(params["output_prefix"] ?? null), "Warped.nii.gz"].join('')),
    };
    return ret;
}


/**
 * antsIntermodalityIntrasubject.sh
 *
 * Performs registration between a scalar image and a T1 image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsIntermodalityIntrasubjectShOutputs`).
 */
function ants_intermodality_intrasubject_sh_execute(
    params: AntsIntermodalityIntrasubjectShParameters,
    runner: Runner | null = null,
): AntsIntermodalityIntrasubjectShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_INTERMODALITY_INTRASUBJECT_SH_METADATA);
    params = execution.params(params)
    const cargs = ants_intermodality_intrasubject_sh_cargs(params, execution)
    const ret = ants_intermodality_intrasubject_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * antsIntermodalityIntrasubject.sh
 *
 * Performs registration between a scalar image and a T1 image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param dimension Dimensionality of the image, typically 3 for 3D images.
 * @param anatomical_t1_image Anatomical T1 image (brain or whole-head) to align to.
 * @param scalar_image_to_match Scalar image to be matched, such as average BOLD, average DWI, etc.
 * @param anatomical_t1brainmask Brain mask for the anatomical T1 image, should mask out regions not appearing in the scalar image.
 * @param transform_type Type of transform: 0=rigid, 1=affine, 2=rigid+small_def, 3=affine+small_def
 * @param t1_to_template_prefix Prefix for T1 to template transform files.
 * @param output_prefix Prefix for output files.
 * @param anatomical_reference_image Anatomical reference image to warp to, often higher resolution than the anatomical T1 image.
 * @param template_space Template space.
 * @param labels_in_template_space Labels in the template space.
 * @param auxiliary_scalar_images Auxiliary scalar images to warp to the template.
 * @param auxiliary_dt_image Auxiliary DT image to warp to the template.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsIntermodalityIntrasubjectShOutputs`).
 */
function ants_intermodality_intrasubject_sh(
    dimension: number,
    anatomical_t1_image: InputPathType,
    scalar_image_to_match: InputPathType,
    anatomical_t1brainmask: InputPathType,
    transform_type: 0 | 1 | 2 | 3,
    t1_to_template_prefix: string,
    output_prefix: string,
    anatomical_reference_image: InputPathType | null = null,
    template_space: string | null = null,
    labels_in_template_space: InputPathType | null = null,
    auxiliary_scalar_images: InputPathType | null = null,
    auxiliary_dt_image: InputPathType | null = null,
    runner: Runner | null = null,
): AntsIntermodalityIntrasubjectShOutputs {
    const params = ants_intermodality_intrasubject_sh_params(dimension, anatomical_t1_image, scalar_image_to_match, anatomical_t1brainmask, transform_type, t1_to_template_prefix, output_prefix, anatomical_reference_image, template_space, labels_in_template_space, auxiliary_scalar_images, auxiliary_dt_image)
    return ants_intermodality_intrasubject_sh_execute(params, runner);
}


export {
      ANTS_INTERMODALITY_INTRASUBJECT_SH_METADATA,
      AntsIntermodalityIntrasubjectShOutputs,
      AntsIntermodalityIntrasubjectShParameters,
      ants_intermodality_intrasubject_sh,
      ants_intermodality_intrasubject_sh_execute,
      ants_intermodality_intrasubject_sh_params,
};
