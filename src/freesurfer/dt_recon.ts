// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DT_RECON_METADATA: Metadata = {
    id: "0e86e8ca45a5e3376c51be3517688e8262426cd3.boutiques",
    name: "dt_recon",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DtReconParameters {
    "@type": "freesurfer.dt_recon";
    "input_volume": InputPathType;
    "bvals_bvecs"?: string | null | undefined;
    "subject_id": string;
    "output_dir": string;
    "info_dump"?: InputPathType | null | undefined;
    "ec_reference"?: number | null | undefined;
    "no_ec_flag": boolean;
    "no_reg_flag": boolean;
    "register_file"?: InputPathType | null | undefined;
    "no_tal_flag": boolean;
    "subjects_dir"?: string | null | undefined;
    "save_ec_residuals_flag": boolean;
    "pca_analysis_flag": boolean;
    "mask_prune_threshold"?: number | null | undefined;
    "init_spm_flag": boolean;
    "init_fsl_flag": boolean;
    "debug_flag": boolean;
    "version_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dt_recon": dt_recon_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.dt_recon": dt_recon_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dt_recon(...)`.
 *
 * @interface
 */
interface DtReconOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted input to NIFTI format.
     */
    dwi_nifti: OutputPathType;
    /**
     * DWI after eddy-current correction.
     */
    dwi_eddy_corrected: OutputPathType;
    /**
     * Tensor map.
     */
    tensor_map: OutputPathType;
    /**
     * Fractional anisotropy (FA) map.
     */
    fa_map: OutputPathType;
    /**
     * FA map in Talairach space.
     */
    fa_tal_map: OutputPathType;
    /**
     * Registration file.
     */
    register_file_output: OutputPathType;
    /**
     * Mask file.
     */
    mask_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume (DWI data).
 * @param subject_id Subject ID.
 * @param output_dir Output directory.
 * @param bvals_bvecs B-values and B-vectors files.
 * @param info_dump Use info dump created by unpacksdcmdir or dcmunpack.
 * @param ec_reference Use specified time points as 0-based reference for eddy current correction.
 * @param no_ec_flag Turn off eddy/motion correction.
 * @param no_reg_flag Do not register to subject or resample to talairach.
 * @param register_file Supply a register.lta file instead of registering.
 * @param no_tal_flag Do not resample FA to talairach space.
 * @param subjects_dir Specify subjects directory (default env SUBJECTS_DIR).
 * @param save_ec_residuals_flag Save residual error (dwires and eres).
 * @param pca_analysis_flag Run PCA/SVD analysis on eres (saves in pca-eres dir).
 * @param mask_prune_threshold Set threshold for masking (default is FLT_MIN).
 * @param init_spm_flag Initialize BBR with SPM instead of coreg (requires MATLAB).
 * @param init_fsl_flag Initialize BBR with FSL instead of coreg.
 * @param debug_flag Print out lots of info.
 * @param version_flag Print version of this script and exit.
 *
 * @returns Parameter dictionary
 */
function dt_recon_params(
    input_volume: InputPathType,
    subject_id: string,
    output_dir: string,
    bvals_bvecs: string | null = null,
    info_dump: InputPathType | null = null,
    ec_reference: number | null = null,
    no_ec_flag: boolean = false,
    no_reg_flag: boolean = false,
    register_file: InputPathType | null = null,
    no_tal_flag: boolean = false,
    subjects_dir: string | null = null,
    save_ec_residuals_flag: boolean = false,
    pca_analysis_flag: boolean = false,
    mask_prune_threshold: number | null = null,
    init_spm_flag: boolean = false,
    init_fsl_flag: boolean = false,
    debug_flag: boolean = false,
    version_flag: boolean = false,
): DtReconParameters {
    const params = {
        "@type": "freesurfer.dt_recon" as const,
        "input_volume": input_volume,
        "subject_id": subject_id,
        "output_dir": output_dir,
        "no_ec_flag": no_ec_flag,
        "no_reg_flag": no_reg_flag,
        "no_tal_flag": no_tal_flag,
        "save_ec_residuals_flag": save_ec_residuals_flag,
        "pca_analysis_flag": pca_analysis_flag,
        "init_spm_flag": init_spm_flag,
        "init_fsl_flag": init_fsl_flag,
        "debug_flag": debug_flag,
        "version_flag": version_flag,
    };
    if (bvals_bvecs !== null) {
        params["bvals_bvecs"] = bvals_bvecs;
    }
    if (info_dump !== null) {
        params["info_dump"] = info_dump;
    }
    if (ec_reference !== null) {
        params["ec_reference"] = ec_reference;
    }
    if (register_file !== null) {
        params["register_file"] = register_file;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (mask_prune_threshold !== null) {
        params["mask_prune_threshold"] = mask_prune_threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dt_recon_cargs(
    params: DtReconParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dt_recon");
    cargs.push(
        "--i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    if ((params["bvals_bvecs"] ?? null) !== null) {
        cargs.push(
            "--b",
            (params["bvals_bvecs"] ?? null)
        );
    }
    cargs.push(
        "--s",
        (params["subject_id"] ?? null)
    );
    cargs.push(
        "--o",
        (params["output_dir"] ?? null)
    );
    if ((params["info_dump"] ?? null) !== null) {
        cargs.push(
            "--info-dump",
            execution.inputFile((params["info_dump"] ?? null))
        );
    }
    if ((params["ec_reference"] ?? null) !== null) {
        cargs.push(
            "--ecref",
            String((params["ec_reference"] ?? null))
        );
    }
    if ((params["no_ec_flag"] ?? null)) {
        cargs.push("--no-ec");
    }
    if ((params["no_reg_flag"] ?? null)) {
        cargs.push("--no-reg");
    }
    if ((params["register_file"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["register_file"] ?? null))
        );
    }
    if ((params["no_tal_flag"] ?? null)) {
        cargs.push("--no-tal");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["save_ec_residuals_flag"] ?? null)) {
        cargs.push("--eres-save");
    }
    if ((params["pca_analysis_flag"] ?? null)) {
        cargs.push("--pca");
    }
    if ((params["mask_prune_threshold"] ?? null) !== null) {
        cargs.push(
            "--prune_thr",
            String((params["mask_prune_threshold"] ?? null))
        );
    }
    if ((params["init_spm_flag"] ?? null)) {
        cargs.push("--init-spm");
    }
    if ((params["init_fsl_flag"] ?? null)) {
        cargs.push("--init-fsl");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dt_recon_outputs(
    params: DtReconParameters,
    execution: Execution,
): DtReconOutputs {
    const ret: DtReconOutputs = {
        root: execution.outputFile("."),
        dwi_nifti: execution.outputFile([(params["output_dir"] ?? null), "/dwi.nii.gz"].join('')),
        dwi_eddy_corrected: execution.outputFile([(params["output_dir"] ?? null), "/dwi-ec.nii.gz"].join('')),
        tensor_map: execution.outputFile([(params["output_dir"] ?? null), "/tensor.nii.gz"].join('')),
        fa_map: execution.outputFile([(params["output_dir"] ?? null), "/fa.nii.gz"].join('')),
        fa_tal_map: execution.outputFile([(params["output_dir"] ?? null), "/fa-tal.nii.gz"].join('')),
        register_file_output: execution.outputFile([(params["output_dir"] ?? null), "/register.lta"].join('')),
        mask_file: execution.outputFile([(params["output_dir"] ?? null), "/mask.nii.gz"].join('')),
    };
    return ret;
}


/**
 * dt_recon
 *
 * Performs DTI reconstruction from the raw DWI input files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DtReconOutputs`).
 */
function dt_recon_execute(
    params: DtReconParameters,
    runner: Runner | null = null,
): DtReconOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DT_RECON_METADATA);
    params = execution.params(params)
    const cargs = dt_recon_cargs(params, execution)
    const ret = dt_recon_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dt_recon
 *
 * Performs DTI reconstruction from the raw DWI input files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume (DWI data).
 * @param subject_id Subject ID.
 * @param output_dir Output directory.
 * @param bvals_bvecs B-values and B-vectors files.
 * @param info_dump Use info dump created by unpacksdcmdir or dcmunpack.
 * @param ec_reference Use specified time points as 0-based reference for eddy current correction.
 * @param no_ec_flag Turn off eddy/motion correction.
 * @param no_reg_flag Do not register to subject or resample to talairach.
 * @param register_file Supply a register.lta file instead of registering.
 * @param no_tal_flag Do not resample FA to talairach space.
 * @param subjects_dir Specify subjects directory (default env SUBJECTS_DIR).
 * @param save_ec_residuals_flag Save residual error (dwires and eres).
 * @param pca_analysis_flag Run PCA/SVD analysis on eres (saves in pca-eres dir).
 * @param mask_prune_threshold Set threshold for masking (default is FLT_MIN).
 * @param init_spm_flag Initialize BBR with SPM instead of coreg (requires MATLAB).
 * @param init_fsl_flag Initialize BBR with FSL instead of coreg.
 * @param debug_flag Print out lots of info.
 * @param version_flag Print version of this script and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DtReconOutputs`).
 */
function dt_recon(
    input_volume: InputPathType,
    subject_id: string,
    output_dir: string,
    bvals_bvecs: string | null = null,
    info_dump: InputPathType | null = null,
    ec_reference: number | null = null,
    no_ec_flag: boolean = false,
    no_reg_flag: boolean = false,
    register_file: InputPathType | null = null,
    no_tal_flag: boolean = false,
    subjects_dir: string | null = null,
    save_ec_residuals_flag: boolean = false,
    pca_analysis_flag: boolean = false,
    mask_prune_threshold: number | null = null,
    init_spm_flag: boolean = false,
    init_fsl_flag: boolean = false,
    debug_flag: boolean = false,
    version_flag: boolean = false,
    runner: Runner | null = null,
): DtReconOutputs {
    const params = dt_recon_params(input_volume, subject_id, output_dir, bvals_bvecs, info_dump, ec_reference, no_ec_flag, no_reg_flag, register_file, no_tal_flag, subjects_dir, save_ec_residuals_flag, pca_analysis_flag, mask_prune_threshold, init_spm_flag, init_fsl_flag, debug_flag, version_flag)
    return dt_recon_execute(params, runner);
}


export {
      DT_RECON_METADATA,
      DtReconOutputs,
      DtReconParameters,
      dt_recon,
      dt_recon_execute,
      dt_recon_params,
};
