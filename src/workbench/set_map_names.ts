// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SET_MAP_NAMES_METADATA: Metadata = {
    id: "bce830848c483141d8dd3ed3a4c7191047ce4ffe.boutiques",
    name: "set-map-names",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SetMapNamesMapParameters {
    "@type": "workbench.set-map-names.map";
    "index": number;
    "new_name": string;
}


interface SetMapNamesParameters {
    "@type": "workbench.set-map-names";
    "data_file": string;
    "opt_name_file_file"?: string | null | undefined;
    "opt_from_data_file_file"?: string | null | undefined;
    "map"?: Array<SetMapNamesMapParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.set-map-names": set_map_names_cargs,
        "workbench.set-map-names.map": set_map_names_map_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param index the map index to change the name of
 * @param new_name the name to set for the map
 *
 * @returns Parameter dictionary
 */
function set_map_names_map_params(
    index: number,
    new_name: string,
): SetMapNamesMapParameters {
    const params = {
        "@type": "workbench.set-map-names.map" as const,
        "index": index,
        "new_name": new_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function set_map_names_map_cargs(
    params: SetMapNamesMapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-map");
    cargs.push(String((params["index"] ?? null)));
    cargs.push((params["new_name"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `set_map_names(...)`.
 *
 * @interface
 */
interface SetMapNamesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param data_file the file to set the map names of
 * @param opt_name_file_file use a text file to replace all map names: text file containing map names, one per line
 * @param opt_from_data_file_file use the map names from another data file: a data file with the same number of maps
 * @param map specify a map to set the name of
 *
 * @returns Parameter dictionary
 */
function set_map_names_params(
    data_file: string,
    opt_name_file_file: string | null = null,
    opt_from_data_file_file: string | null = null,
    map: Array<SetMapNamesMapParameters> | null = null,
): SetMapNamesParameters {
    const params = {
        "@type": "workbench.set-map-names" as const,
        "data_file": data_file,
    };
    if (opt_name_file_file !== null) {
        params["opt_name_file_file"] = opt_name_file_file;
    }
    if (opt_from_data_file_file !== null) {
        params["opt_from_data_file_file"] = opt_from_data_file_file;
    }
    if (map !== null) {
        params["map"] = map;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function set_map_names_cargs(
    params: SetMapNamesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-set-map-names");
    cargs.push((params["data_file"] ?? null));
    if ((params["opt_name_file_file"] ?? null) !== null) {
        cargs.push(
            "-name-file",
            (params["opt_name_file_file"] ?? null)
        );
    }
    if ((params["opt_from_data_file_file"] ?? null) !== null) {
        cargs.push(
            "-from-data-file",
            (params["opt_from_data_file_file"] ?? null)
        );
    }
    if ((params["map"] ?? null) !== null) {
        cargs.push(...(params["map"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function set_map_names_outputs(
    params: SetMapNamesParameters,
    execution: Execution,
): SetMapNamesOutputs {
    const ret: SetMapNamesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Set the name of one or more maps in a file.
 *
 * Sets the name of one or more maps for metric, shape, label, volume, cifti scalar or cifti label files.  You must specify either -name-file, or -from-data-file, or at least one -map option.  The three option types are mutually exclusive.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SetMapNamesOutputs`).
 */
function set_map_names_execute(
    params: SetMapNamesParameters,
    runner: Runner | null = null,
): SetMapNamesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SET_MAP_NAMES_METADATA);
    params = execution.params(params)
    const cargs = set_map_names_cargs(params, execution)
    const ret = set_map_names_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Set the name of one or more maps in a file.
 *
 * Sets the name of one or more maps for metric, shape, label, volume, cifti scalar or cifti label files.  You must specify either -name-file, or -from-data-file, or at least one -map option.  The three option types are mutually exclusive.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param data_file the file to set the map names of
 * @param opt_name_file_file use a text file to replace all map names: text file containing map names, one per line
 * @param opt_from_data_file_file use the map names from another data file: a data file with the same number of maps
 * @param map specify a map to set the name of
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SetMapNamesOutputs`).
 */
function set_map_names(
    data_file: string,
    opt_name_file_file: string | null = null,
    opt_from_data_file_file: string | null = null,
    map: Array<SetMapNamesMapParameters> | null = null,
    runner: Runner | null = null,
): SetMapNamesOutputs {
    const params = set_map_names_params(data_file, opt_name_file_file, opt_from_data_file_file, map)
    return set_map_names_execute(params, runner);
}


export {
      SET_MAP_NAMES_METADATA,
      SetMapNamesMapParameters,
      SetMapNamesOutputs,
      SetMapNamesParameters,
      set_map_names,
      set_map_names_execute,
      set_map_names_map_params,
      set_map_names_params,
};
