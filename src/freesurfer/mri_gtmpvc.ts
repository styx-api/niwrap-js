// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_GTMPVC_METADATA: Metadata = {
    id: "3c3042699fe4320ac7c6849c5d7c614e5a318805.boutiques",
    name: "mri_gtmpvc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriGtmpvcParameters {
    "__STYXTYPE__": "mri_gtmpvc";
    "input_volume": InputPathType;
    "frame"?: number | null | undefined;
    "psf": number;
    "segmentation": InputPathType;
    "registration"?: InputPathType | null | undefined;
    "regheader": boolean;
    "reg_identity": boolean;
    "output_directory": string;
    "mask"?: InputPathType | null | undefined;
    "auto_mask"?: number | null | undefined;
    "no_reduce_fov": boolean;
    "reduce_fov_eqodd": boolean;
    "contrast_matrix"?: InputPathType | null | undefined;
    "default_seg_merge": boolean;
    "merge_hypos": boolean;
    "merge_cblum_wm_gyri": boolean;
    "tt_reduce": boolean;
    "replace_seg"?: string | null | undefined;
    "replace_file"?: InputPathType | null | undefined;
    "rescale"?: string | null | undefined;
    "no_rescale": boolean;
    "scale_refval"?: number | null | undefined;
    "ctab"?: InputPathType | null | undefined;
    "ctab_default": boolean;
    "tt_update": boolean;
    "lateralization": boolean;
    "no_tfe": boolean;
    "no_pvc": boolean;
    "segpvfres"?: number | null | undefined;
    "rbv": boolean;
    "rbv_res"?: number | null | undefined;
    "mueller_pvc"?: string | null | undefined;
    "mg_ref_cerebral_wm": boolean;
    "mg_ref_lobes_wm": boolean;
    "glm_mg_pvc"?: number | null | undefined;
    "km_ref"?: string | null | undefined;
    "km_hb"?: string | null | undefined;
    "steady_state"?: string | null | undefined;
    "save_x": boolean;
    "save_y": boolean;
    "save_beta": boolean;
    "save_x0": boolean;
    "save_input": boolean;
    "save_eres": boolean;
    "save_yhat": boolean;
    "save_yhat_noise"?: string | null | undefined;
    "save_yhat_full_fov": boolean;
    "save_yhat0": boolean;
    "synth"?: string | null | undefined;
    "synth_only": boolean;
    "synth_save": boolean;
    "save_text": boolean;
    "threads"?: number | null | undefined;
    "max_threads": boolean;
    "max_threads_minus_one": boolean;
    "subjects_dir"?: string | null | undefined;
    "vg_thresh"?: number | null | undefined;
    "gdiag"?: number | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
    "help": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_gtmpvc": mri_gtmpvc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_gtmpvc": mri_gtmpvc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_gtmpvc(...)`.
 *
 * @interface
 */
interface MriGtmpvcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Synthesized volume
     */
    synthesized_volume: OutputPathType;
    /**
     * Rescaled input volume
     */
    rescaled_input: OutputPathType;
    /**
     * Residual errors volume
     */
    eresiduals: OutputPathType;
    /**
     * Yhat volume
     */
    yhat: OutputPathType;
    /**
     * Yhat with noise volume
     */
    yhat_with_noise: OutputPathType;
    /**
     * Yhat full FoV volume
     */
    yhat_full_fov: OutputPathType;
    /**
     * Yhat prior to smoothing volume
     */
    yhat_prior: OutputPathType;
    /**
     * X matrix in matlab4 format
     */
    x_matrix: OutputPathType;
    /**
     * Y matrix in matlab4 format
     */
    y_matrix: OutputPathType;
    /**
     * Beta matrix in matlab4 format
     */
    beta_matrix: OutputPathType;
    /**
     * X0 matrix in matlab4 format
     */
    x0_matrix: OutputPathType;
    /**
     * Demeaned GTM values as text file
     */
    gtm_values_text: OutputPathType;
}


function mri_gtmpvc_params(
    input_volume: InputPathType,
    psf: number,
    segmentation: InputPathType,
    output_directory: string,
    frame: number | null = null,
    registration: InputPathType | null = null,
    regheader: boolean = false,
    reg_identity: boolean = false,
    mask: InputPathType | null = null,
    auto_mask: number | null = null,
    no_reduce_fov: boolean = false,
    reduce_fov_eqodd: boolean = false,
    contrast_matrix: InputPathType | null = null,
    default_seg_merge: boolean = false,
    merge_hypos: boolean = false,
    merge_cblum_wm_gyri: boolean = false,
    tt_reduce: boolean = false,
    replace_seg: string | null = null,
    replace_file: InputPathType | null = null,
    rescale: string | null = null,
    no_rescale: boolean = false,
    scale_refval: number | null = null,
    ctab: InputPathType | null = null,
    ctab_default: boolean = false,
    tt_update: boolean = false,
    lateralization: boolean = false,
    no_tfe: boolean = false,
    no_pvc: boolean = false,
    segpvfres: number | null = null,
    rbv: boolean = false,
    rbv_res: number | null = null,
    mueller_pvc: string | null = null,
    mg_ref_cerebral_wm: boolean = false,
    mg_ref_lobes_wm: boolean = false,
    glm_mg_pvc: number | null = null,
    km_ref: string | null = null,
    km_hb: string | null = null,
    steady_state: string | null = null,
    save_x: boolean = false,
    save_y: boolean = false,
    save_beta: boolean = false,
    save_x0: boolean = false,
    save_input: boolean = false,
    save_eres: boolean = false,
    save_yhat: boolean = false,
    save_yhat_noise: string | null = null,
    save_yhat_full_fov: boolean = false,
    save_yhat0: boolean = false,
    synth: string | null = null,
    synth_only: boolean = false,
    synth_save: boolean = false,
    save_text: boolean = false,
    threads: number | null = null,
    max_threads: boolean = false,
    max_threads_minus_one: boolean = false,
    subjects_dir: string | null = null,
    vg_thresh: number | null = null,
    gdiag: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
): MriGtmpvcParameters {
    /**
     * Build parameters.
    
     * @param input_volume Input volume: source data to PVC
     * @param psf Scanner PSF FWHM in mm
     * @param segmentation Anatomical segmentation to define regions for GTM
     * @param output_directory Output directory
     * @param frame Only process 0-based frame F from input volume
     * @param registration LTA registration file that maps PET to anatomical
     * @param regheader Assume input and seg share scanner space
     * @param reg_identity Assume that input is in anatomical space
     * @param mask Ignore areas outside of the mask (in input vol space)
     * @param auto_mask Automatically compute mask with FWHM and threshold
     * @param no_reduce_fov Do not reduce FoV to encompass mask
     * @param reduce_fov_eqodd Reduce FoV to encompass mask but force nc=nr and ns to be odd
     * @param contrast_matrix Univariate contrast to test
     * @param default_seg_merge Default schema for merging ROIs
     * @param merge_hypos Merge left and right hypointensites into ROI
     * @param merge_cblum_wm_gyri Cerebellum WM gyri back into cerebellum WM
     * @param tt_reduce Reduce segmentation to that of a tissue type
     * @param replace_seg Replace seg Id1 with seg Id2
     * @param replace_file File with a list of Ids to replace
     * @param rescale Specify reference region(s) used to rescale (default is pons)
     * @param no_rescale Do not global rescale such that mean of reference region is scaleref
     * @param scale_refval Scale such that mean in reference region is refval
     * @param ctab Specify color table explicitly
     * @param ctab_default Use default color table
     * @param tt_update Changes tissue type of VentralDC, BrainStem, and Pons to be SubcortGM
     * @param lateralization Lateralize tissue types
     * @param no_tfe Do not correct for tissue fraction effect
     * @param no_pvc Turns off PVC entirely
     * @param segpvfres Set the tissue fraction resolution parameter (default is 0.5)
     * @param rbv Perform RBV PVC
     * @param rbv_res Set RBV voxel resolution
     * @param mueller_pvc Perform Mueller-Gaertner PVC
     * @param mg_ref_cerebral_wm Set MG RefIds to 2 and 41
     * @param mg_ref_lobes_wm Set MG RefIds to those for lobes when using wm subseg
     * @param glm_mg_pvc GLM-based Mueller-Gaertner PVC
     * @param km_ref Compute reference TAC for KM as mean of given RefIds
     * @param km_hb Compute HiBinding TAC for KM as mean of given RefIds
     * @param steady_state Steady-state analysis spec blood plasma concentration, unit scale, and decay correction factor.
     * @param save_x Save X matrix in matlab4 format as X.mat
     * @param save_y Save y matrix in matlab4 format as y.mat
     * @param save_beta Save beta matrix in matlab4 format as beta.mat
     * @param save_x0 Save X0 matrix in matlab4 format as X0.mat
     * @param save_input Saves rescaled input as input.rescaled.nii.gz
     * @param save_eres Saves residual error
     * @param save_yhat Saves yhat
     * @param save_yhat_noise Saves yhat with noise, seed < 0 for TOD
     * @param save_yhat_full_fov Saves yhat in full FoV (if FoV was reduced)
     * @param save_yhat0 Saves yhat prior to smoothing
     * @param synth Synthesize volume with gtmbeta as input
     * @param synth_only Exit after doing synthesis (implies --synth-save)
     * @param synth_save With --synth saves synthesized volume to outdir/synth.nii.gz
     * @param save_text Save demeaned GTM values out to text files named after the seg
     * @param threads Use N threads (with Open MP)
     * @param max_threads Use the maximum allowable number of threads for this computer
     * @param max_threads_minus_one Use one less than the maximum allowable number of threads for this computer
     * @param subjects_dir Specify SUBJECTS_DIR
     * @param vg_thresh Threshold for LTAconcat error
     * @param gdiag Set diagnostic level
     * @param debug Turn on debugging
     * @param checkopts Don't run anything, just check options and exit
     * @param help Print out information on how to use this program
     * @param version Print out version and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_gtmpvc" as const,
        "input_volume": input_volume,
        "psf": psf,
        "segmentation": segmentation,
        "regheader": regheader,
        "reg_identity": reg_identity,
        "output_directory": output_directory,
        "no_reduce_fov": no_reduce_fov,
        "reduce_fov_eqodd": reduce_fov_eqodd,
        "default_seg_merge": default_seg_merge,
        "merge_hypos": merge_hypos,
        "merge_cblum_wm_gyri": merge_cblum_wm_gyri,
        "tt_reduce": tt_reduce,
        "no_rescale": no_rescale,
        "ctab_default": ctab_default,
        "tt_update": tt_update,
        "lateralization": lateralization,
        "no_tfe": no_tfe,
        "no_pvc": no_pvc,
        "rbv": rbv,
        "mg_ref_cerebral_wm": mg_ref_cerebral_wm,
        "mg_ref_lobes_wm": mg_ref_lobes_wm,
        "save_x": save_x,
        "save_y": save_y,
        "save_beta": save_beta,
        "save_x0": save_x0,
        "save_input": save_input,
        "save_eres": save_eres,
        "save_yhat": save_yhat,
        "save_yhat_full_fov": save_yhat_full_fov,
        "save_yhat0": save_yhat0,
        "synth_only": synth_only,
        "synth_save": synth_save,
        "save_text": save_text,
        "max_threads": max_threads,
        "max_threads_minus_one": max_threads_minus_one,
        "debug": debug,
        "checkopts": checkopts,
        "help": help,
        "version": version,
    };
    if (frame !== null) {
        params["frame"] = frame;
    }
    if (registration !== null) {
        params["registration"] = registration;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (auto_mask !== null) {
        params["auto_mask"] = auto_mask;
    }
    if (contrast_matrix !== null) {
        params["contrast_matrix"] = contrast_matrix;
    }
    if (replace_seg !== null) {
        params["replace_seg"] = replace_seg;
    }
    if (replace_file !== null) {
        params["replace_file"] = replace_file;
    }
    if (rescale !== null) {
        params["rescale"] = rescale;
    }
    if (scale_refval !== null) {
        params["scale_refval"] = scale_refval;
    }
    if (ctab !== null) {
        params["ctab"] = ctab;
    }
    if (segpvfres !== null) {
        params["segpvfres"] = segpvfres;
    }
    if (rbv_res !== null) {
        params["rbv_res"] = rbv_res;
    }
    if (mueller_pvc !== null) {
        params["mueller_pvc"] = mueller_pvc;
    }
    if (glm_mg_pvc !== null) {
        params["glm_mg_pvc"] = glm_mg_pvc;
    }
    if (km_ref !== null) {
        params["km_ref"] = km_ref;
    }
    if (km_hb !== null) {
        params["km_hb"] = km_hb;
    }
    if (steady_state !== null) {
        params["steady_state"] = steady_state;
    }
    if (save_yhat_noise !== null) {
        params["save_yhat_noise"] = save_yhat_noise;
    }
    if (synth !== null) {
        params["synth"] = synth;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (vg_thresh !== null) {
        params["vg_thresh"] = vg_thresh;
    }
    if (gdiag !== null) {
        params["gdiag"] = gdiag;
    }
    return params;
}


function mri_gtmpvc_cargs(
    params: MriGtmpvcParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_gtmpvc");
    cargs.push(
        "--i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    if ((params["frame"] ?? null) !== null) {
        cargs.push(
            "--frame",
            String((params["frame"] ?? null))
        );
    }
    cargs.push(
        "--psf",
        String((params["psf"] ?? null))
    );
    cargs.push(
        "--seg",
        execution.inputFile((params["segmentation"] ?? null))
    );
    if ((params["registration"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["registration"] ?? null))
        );
    }
    if ((params["regheader"] ?? null)) {
        cargs.push("--regheader");
    }
    if ((params["reg_identity"] ?? null)) {
        cargs.push("--reg-identity");
    }
    cargs.push(
        "--o",
        (params["output_directory"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["auto_mask"] ?? null) !== null) {
        cargs.push(
            "--auto-mask",
            String((params["auto_mask"] ?? null))
        );
    }
    if ((params["no_reduce_fov"] ?? null)) {
        cargs.push("--no-reduce-fov");
    }
    if ((params["reduce_fov_eqodd"] ?? null)) {
        cargs.push("--reduce-fov-eqodd");
    }
    if ((params["contrast_matrix"] ?? null) !== null) {
        cargs.push(
            "--C",
            execution.inputFile((params["contrast_matrix"] ?? null))
        );
    }
    if ((params["default_seg_merge"] ?? null)) {
        cargs.push("--default-seg-merge");
    }
    if ((params["merge_hypos"] ?? null)) {
        cargs.push("--merge-hypos");
    }
    if ((params["merge_cblum_wm_gyri"] ?? null)) {
        cargs.push("--merge-cblum-wm-gyri");
    }
    if ((params["tt_reduce"] ?? null)) {
        cargs.push("--tt-reduce");
    }
    if ((params["replace_seg"] ?? null) !== null) {
        cargs.push(
            "--replace",
            (params["replace_seg"] ?? null)
        );
    }
    if ((params["replace_file"] ?? null) !== null) {
        cargs.push(
            "--replace-file",
            execution.inputFile((params["replace_file"] ?? null))
        );
    }
    if ((params["rescale"] ?? null) !== null) {
        cargs.push(
            "--rescale",
            (params["rescale"] ?? null)
        );
    }
    if ((params["no_rescale"] ?? null)) {
        cargs.push("--no-rescale");
    }
    if ((params["scale_refval"] ?? null) !== null) {
        cargs.push(
            "--scale-refval",
            String((params["scale_refval"] ?? null))
        );
    }
    if ((params["ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab"] ?? null))
        );
    }
    if ((params["ctab_default"] ?? null)) {
        cargs.push("--ctab-default");
    }
    if ((params["tt_update"] ?? null)) {
        cargs.push("--tt-update");
    }
    if ((params["lateralization"] ?? null)) {
        cargs.push("--lat");
    }
    if ((params["no_tfe"] ?? null)) {
        cargs.push("--no-tfe");
    }
    if ((params["no_pvc"] ?? null)) {
        cargs.push("--no-pvc");
    }
    if ((params["segpvfres"] ?? null) !== null) {
        cargs.push(
            "--segpvfres",
            String((params["segpvfres"] ?? null))
        );
    }
    if ((params["rbv"] ?? null)) {
        cargs.push("--rbv");
    }
    if ((params["rbv_res"] ?? null) !== null) {
        cargs.push(
            "--rbv-res",
            String((params["rbv_res"] ?? null))
        );
    }
    if ((params["mueller_pvc"] ?? null) !== null) {
        cargs.push(
            "--mg",
            (params["mueller_pvc"] ?? null)
        );
    }
    if ((params["mg_ref_cerebral_wm"] ?? null)) {
        cargs.push("--mg-ref-cerebral-wm");
    }
    if ((params["mg_ref_lobes_wm"] ?? null)) {
        cargs.push("--mg-ref-lobes-wm");
    }
    if ((params["glm_mg_pvc"] ?? null) !== null) {
        cargs.push(
            "--mgx",
            String((params["glm_mg_pvc"] ?? null))
        );
    }
    if ((params["km_ref"] ?? null) !== null) {
        cargs.push(
            "--km-ref",
            (params["km_ref"] ?? null)
        );
    }
    if ((params["km_hb"] ?? null) !== null) {
        cargs.push(
            "--km-hb",
            (params["km_hb"] ?? null)
        );
    }
    if ((params["steady_state"] ?? null) !== null) {
        cargs.push(
            "--ss",
            (params["steady_state"] ?? null)
        );
    }
    if ((params["save_x"] ?? null)) {
        cargs.push("--X");
    }
    if ((params["save_y"] ?? null)) {
        cargs.push("--y");
    }
    if ((params["save_beta"] ?? null)) {
        cargs.push("--beta");
    }
    if ((params["save_x0"] ?? null)) {
        cargs.push("--X0");
    }
    if ((params["save_input"] ?? null)) {
        cargs.push("--save-input");
    }
    if ((params["save_eres"] ?? null)) {
        cargs.push("--save-eres");
    }
    if ((params["save_yhat"] ?? null)) {
        cargs.push("--save-yhat");
    }
    if ((params["save_yhat_noise"] ?? null) !== null) {
        cargs.push(
            "--save-yhat-with-noise",
            (params["save_yhat_noise"] ?? null)
        );
    }
    if ((params["save_yhat_full_fov"] ?? null)) {
        cargs.push("--save-yhat-full-fov");
    }
    if ((params["save_yhat0"] ?? null)) {
        cargs.push("--save-yhat0");
    }
    if ((params["synth"] ?? null) !== null) {
        cargs.push(
            "--synth",
            (params["synth"] ?? null)
        );
    }
    if ((params["synth_only"] ?? null)) {
        cargs.push("--synth-only");
    }
    if ((params["synth_save"] ?? null)) {
        cargs.push("--synth-save");
    }
    if ((params["save_text"] ?? null)) {
        cargs.push("--save-text");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["max_threads"] ?? null)) {
        cargs.push("--max-threads");
    }
    if ((params["max_threads_minus_one"] ?? null)) {
        cargs.push("--max-threads-minus-1");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["vg_thresh"] ?? null) !== null) {
        cargs.push(
            "--vg-thresh",
            String((params["vg_thresh"] ?? null))
        );
    }
    if ((params["gdiag"] ?? null) !== null) {
        cargs.push(
            "--gdiag",
            String((params["gdiag"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function mri_gtmpvc_outputs(
    params: MriGtmpvcParameters,
    execution: Execution,
): MriGtmpvcOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriGtmpvcOutputs = {
        root: execution.outputFile("."),
        synthesized_volume: execution.outputFile([(params["output_directory"] ?? null), "/synth.nii.gz"].join('')),
        rescaled_input: execution.outputFile([(params["output_directory"] ?? null), "/input.rescaled.nii.gz"].join('')),
        eresiduals: execution.outputFile([(params["output_directory"] ?? null), "/eresiduals.nii.gz"].join('')),
        yhat: execution.outputFile([(params["output_directory"] ?? null), "/yhat.nii.gz"].join('')),
        yhat_with_noise: execution.outputFile([(params["output_directory"] ?? null), "/yhat_with_noise.nii.gz"].join('')),
        yhat_full_fov: execution.outputFile([(params["output_directory"] ?? null), "/yhat_full_fov.nii.gz"].join('')),
        yhat_prior: execution.outputFile([(params["output_directory"] ?? null), "/yhat_prior.nii.gz"].join('')),
        x_matrix: execution.outputFile([(params["output_directory"] ?? null), "/X.mat"].join('')),
        y_matrix: execution.outputFile([(params["output_directory"] ?? null), "/y.mat"].join('')),
        beta_matrix: execution.outputFile([(params["output_directory"] ?? null), "/beta.mat"].join('')),
        x0_matrix: execution.outputFile([(params["output_directory"] ?? null), "/X0.mat"].join('')),
        gtm_values_text: execution.outputFile([(params["output_directory"] ?? null), "/gtm_values.txt"].join('')),
    };
    return ret;
}


function mri_gtmpvc_execute(
    params: MriGtmpvcParameters,
    execution: Execution,
): MriGtmpvcOutputs {
    /**
     * mri_gtmpvc performs partial volume correction on PET data using anatomical segmentation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriGtmpvcOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_gtmpvc_cargs(params, execution)
    const ret = mri_gtmpvc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_gtmpvc(
    input_volume: InputPathType,
    psf: number,
    segmentation: InputPathType,
    output_directory: string,
    frame: number | null = null,
    registration: InputPathType | null = null,
    regheader: boolean = false,
    reg_identity: boolean = false,
    mask: InputPathType | null = null,
    auto_mask: number | null = null,
    no_reduce_fov: boolean = false,
    reduce_fov_eqodd: boolean = false,
    contrast_matrix: InputPathType | null = null,
    default_seg_merge: boolean = false,
    merge_hypos: boolean = false,
    merge_cblum_wm_gyri: boolean = false,
    tt_reduce: boolean = false,
    replace_seg: string | null = null,
    replace_file: InputPathType | null = null,
    rescale: string | null = null,
    no_rescale: boolean = false,
    scale_refval: number | null = null,
    ctab: InputPathType | null = null,
    ctab_default: boolean = false,
    tt_update: boolean = false,
    lateralization: boolean = false,
    no_tfe: boolean = false,
    no_pvc: boolean = false,
    segpvfres: number | null = null,
    rbv: boolean = false,
    rbv_res: number | null = null,
    mueller_pvc: string | null = null,
    mg_ref_cerebral_wm: boolean = false,
    mg_ref_lobes_wm: boolean = false,
    glm_mg_pvc: number | null = null,
    km_ref: string | null = null,
    km_hb: string | null = null,
    steady_state: string | null = null,
    save_x: boolean = false,
    save_y: boolean = false,
    save_beta: boolean = false,
    save_x0: boolean = false,
    save_input: boolean = false,
    save_eres: boolean = false,
    save_yhat: boolean = false,
    save_yhat_noise: string | null = null,
    save_yhat_full_fov: boolean = false,
    save_yhat0: boolean = false,
    synth: string | null = null,
    synth_only: boolean = false,
    synth_save: boolean = false,
    save_text: boolean = false,
    threads: number | null = null,
    max_threads: boolean = false,
    max_threads_minus_one: boolean = false,
    subjects_dir: string | null = null,
    vg_thresh: number | null = null,
    gdiag: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriGtmpvcOutputs {
    /**
     * mri_gtmpvc performs partial volume correction on PET data using anatomical segmentation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_volume Input volume: source data to PVC
     * @param psf Scanner PSF FWHM in mm
     * @param segmentation Anatomical segmentation to define regions for GTM
     * @param output_directory Output directory
     * @param frame Only process 0-based frame F from input volume
     * @param registration LTA registration file that maps PET to anatomical
     * @param regheader Assume input and seg share scanner space
     * @param reg_identity Assume that input is in anatomical space
     * @param mask Ignore areas outside of the mask (in input vol space)
     * @param auto_mask Automatically compute mask with FWHM and threshold
     * @param no_reduce_fov Do not reduce FoV to encompass mask
     * @param reduce_fov_eqodd Reduce FoV to encompass mask but force nc=nr and ns to be odd
     * @param contrast_matrix Univariate contrast to test
     * @param default_seg_merge Default schema for merging ROIs
     * @param merge_hypos Merge left and right hypointensites into ROI
     * @param merge_cblum_wm_gyri Cerebellum WM gyri back into cerebellum WM
     * @param tt_reduce Reduce segmentation to that of a tissue type
     * @param replace_seg Replace seg Id1 with seg Id2
     * @param replace_file File with a list of Ids to replace
     * @param rescale Specify reference region(s) used to rescale (default is pons)
     * @param no_rescale Do not global rescale such that mean of reference region is scaleref
     * @param scale_refval Scale such that mean in reference region is refval
     * @param ctab Specify color table explicitly
     * @param ctab_default Use default color table
     * @param tt_update Changes tissue type of VentralDC, BrainStem, and Pons to be SubcortGM
     * @param lateralization Lateralize tissue types
     * @param no_tfe Do not correct for tissue fraction effect
     * @param no_pvc Turns off PVC entirely
     * @param segpvfres Set the tissue fraction resolution parameter (default is 0.5)
     * @param rbv Perform RBV PVC
     * @param rbv_res Set RBV voxel resolution
     * @param mueller_pvc Perform Mueller-Gaertner PVC
     * @param mg_ref_cerebral_wm Set MG RefIds to 2 and 41
     * @param mg_ref_lobes_wm Set MG RefIds to those for lobes when using wm subseg
     * @param glm_mg_pvc GLM-based Mueller-Gaertner PVC
     * @param km_ref Compute reference TAC for KM as mean of given RefIds
     * @param km_hb Compute HiBinding TAC for KM as mean of given RefIds
     * @param steady_state Steady-state analysis spec blood plasma concentration, unit scale, and decay correction factor.
     * @param save_x Save X matrix in matlab4 format as X.mat
     * @param save_y Save y matrix in matlab4 format as y.mat
     * @param save_beta Save beta matrix in matlab4 format as beta.mat
     * @param save_x0 Save X0 matrix in matlab4 format as X0.mat
     * @param save_input Saves rescaled input as input.rescaled.nii.gz
     * @param save_eres Saves residual error
     * @param save_yhat Saves yhat
     * @param save_yhat_noise Saves yhat with noise, seed < 0 for TOD
     * @param save_yhat_full_fov Saves yhat in full FoV (if FoV was reduced)
     * @param save_yhat0 Saves yhat prior to smoothing
     * @param synth Synthesize volume with gtmbeta as input
     * @param synth_only Exit after doing synthesis (implies --synth-save)
     * @param synth_save With --synth saves synthesized volume to outdir/synth.nii.gz
     * @param save_text Save demeaned GTM values out to text files named after the seg
     * @param threads Use N threads (with Open MP)
     * @param max_threads Use the maximum allowable number of threads for this computer
     * @param max_threads_minus_one Use one less than the maximum allowable number of threads for this computer
     * @param subjects_dir Specify SUBJECTS_DIR
     * @param vg_thresh Threshold for LTAconcat error
     * @param gdiag Set diagnostic level
     * @param debug Turn on debugging
     * @param checkopts Don't run anything, just check options and exit
     * @param help Print out information on how to use this program
     * @param version Print out version and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriGtmpvcOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_GTMPVC_METADATA);
    const params = mri_gtmpvc_params(input_volume, psf, segmentation, output_directory, frame, registration, regheader, reg_identity, mask, auto_mask, no_reduce_fov, reduce_fov_eqodd, contrast_matrix, default_seg_merge, merge_hypos, merge_cblum_wm_gyri, tt_reduce, replace_seg, replace_file, rescale, no_rescale, scale_refval, ctab, ctab_default, tt_update, lateralization, no_tfe, no_pvc, segpvfres, rbv, rbv_res, mueller_pvc, mg_ref_cerebral_wm, mg_ref_lobes_wm, glm_mg_pvc, km_ref, km_hb, steady_state, save_x, save_y, save_beta, save_x0, save_input, save_eres, save_yhat, save_yhat_noise, save_yhat_full_fov, save_yhat0, synth, synth_only, synth_save, save_text, threads, max_threads, max_threads_minus_one, subjects_dir, vg_thresh, gdiag, debug, checkopts, help, version)
    return mri_gtmpvc_execute(params, execution);
}


export {
      MRI_GTMPVC_METADATA,
      MriGtmpvcOutputs,
      MriGtmpvcParameters,
      mri_gtmpvc,
      mri_gtmpvc_params,
};
