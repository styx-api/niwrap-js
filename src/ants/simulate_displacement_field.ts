// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIMULATE_DISPLACEMENT_FIELD_METADATA: Metadata = {
    id: "62eab1210d3ee9c94268b73a3a247d08a7a705f3.boutiques",
    name: "SimulateDisplacementField",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface SimulateDisplacementFieldBsplineOptionsParameters {
    "@type"?: "bspline_options";
    "number_of_fitting_levels"?: number | null | undefined;
    "number_of_control_points"?: number | null | undefined;
}
type SimulateDisplacementFieldBsplineOptionsParametersTagged = Required<Pick<SimulateDisplacementFieldBsplineOptionsParameters, '@type'>> & SimulateDisplacementFieldBsplineOptionsParameters;


interface SimulateDisplacementFieldExponentialOptionsParameters {
    "@type"?: "exponential_options";
    "smoothing_standard_deviation"?: number | null | undefined;
}
type SimulateDisplacementFieldExponentialOptionsParametersTagged = Required<Pick<SimulateDisplacementFieldExponentialOptionsParameters, '@type'>> & SimulateDisplacementFieldExponentialOptionsParameters;


interface SimulateDisplacementFieldParameters {
    "@type"?: "ants/SimulateDisplacementField";
    "image_dimension": number;
    "displacement_field_type": "BSpline" | "Exponential";
    "domain_image": InputPathType;
    "output_field": string;
    "number_of_random_points"?: number | null | undefined;
    "standard_deviation_displacement_field"?: number | null | undefined;
    "enforce_stationary_boundary"?: number | null | undefined;
    "displacement_specific_options"?: SimulateDisplacementFieldBsplineOptionsParametersTagged | SimulateDisplacementFieldExponentialOptionsParametersTagged | null | undefined;
}
type SimulateDisplacementFieldParametersTagged = Required<Pick<SimulateDisplacementFieldParameters, '@type'>> & SimulateDisplacementFieldParameters;


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function simulate_displacement_field_displacement_specific_options_cargs_dyn_fn(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "bspline_options": simulate_displacement_field_bspline_options_cargs,
        "exponential_options": simulate_displacement_field_exponential_options_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function simulate_displacement_field_displacement_specific_options_outputs_dyn_fn(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param number_of_fitting_levels Number of fitting levels for BSpline.
 * @param number_of_control_points Number of control points for BSpline.
 *
 * @returns Parameter dictionary
 */
function simulate_displacement_field_bspline_options_params(
    number_of_fitting_levels: number | null = null,
    number_of_control_points: number | null = null,
): SimulateDisplacementFieldBsplineOptionsParametersTagged {
    const params = {
        "@type": "bspline_options" as const,
    };
    if (number_of_fitting_levels !== null) {
        params["number_of_fitting_levels"] = number_of_fitting_levels;
    }
    if (number_of_control_points !== null) {
        params["number_of_control_points"] = number_of_control_points;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function simulate_displacement_field_bspline_options_cargs(
    params: SimulateDisplacementFieldBsplineOptionsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["number_of_fitting_levels"] ?? null) !== null) {
        cargs.push(String((params["number_of_fitting_levels"] ?? null)));
    }
    if ((params["number_of_control_points"] ?? null) !== null) {
        cargs.push(String((params["number_of_control_points"] ?? null)));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param smoothing_standard_deviation Smoothing standard deviation for Exponential.
 *
 * @returns Parameter dictionary
 */
function simulate_displacement_field_exponential_options_params(
    smoothing_standard_deviation: number | null = null,
): SimulateDisplacementFieldExponentialOptionsParametersTagged {
    const params = {
        "@type": "exponential_options" as const,
    };
    if (smoothing_standard_deviation !== null) {
        params["smoothing_standard_deviation"] = smoothing_standard_deviation;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function simulate_displacement_field_exponential_options_cargs(
    params: SimulateDisplacementFieldExponentialOptionsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["smoothing_standard_deviation"] ?? null) !== null) {
        cargs.push(String((params["smoothing_standard_deviation"] ?? null)));
    }
    return cargs;
}


/**
 * Output object returned when calling `SimulateDisplacementFieldParameters(...)`.
 *
 * @interface
 */
interface SimulateDisplacementFieldOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The simulated displacement field.
     */
    output_displacement_field: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Dimensionality of the image.
 * @param displacement_field_type Type of displacement field to simulate.
 * @param domain_image Image defining the domain for the displacement field.
 * @param output_field Path to save the output displacement field.
 * @param number_of_random_points Number of random points to use in the simulation.
 * @param standard_deviation_displacement_field Standard deviation for the displacement field.
 * @param enforce_stationary_boundary Boolean flag indicating whether to enforce stationary boundary.
 * @param displacement_specific_options Options specific to the type of displacement field simulation.
 *
 * @returns Parameter dictionary
 */
function simulate_displacement_field_params(
    image_dimension: number,
    displacement_field_type: "BSpline" | "Exponential",
    domain_image: InputPathType,
    output_field: string,
    number_of_random_points: number | null = null,
    standard_deviation_displacement_field: number | null = null,
    enforce_stationary_boundary: number | null = null,
    displacement_specific_options: SimulateDisplacementFieldBsplineOptionsParametersTagged | SimulateDisplacementFieldExponentialOptionsParametersTagged | null = null,
): SimulateDisplacementFieldParametersTagged {
    const params = {
        "@type": "ants/SimulateDisplacementField" as const,
        "image_dimension": image_dimension,
        "displacement_field_type": displacement_field_type,
        "domain_image": domain_image,
        "output_field": output_field,
    };
    if (number_of_random_points !== null) {
        params["number_of_random_points"] = number_of_random_points;
    }
    if (standard_deviation_displacement_field !== null) {
        params["standard_deviation_displacement_field"] = standard_deviation_displacement_field;
    }
    if (enforce_stationary_boundary !== null) {
        params["enforce_stationary_boundary"] = enforce_stationary_boundary;
    }
    if (displacement_specific_options !== null) {
        params["displacement_specific_options"] = displacement_specific_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function simulate_displacement_field_cargs(
    params: SimulateDisplacementFieldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SimulateDisplacementField");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push((params["displacement_field_type"] ?? null));
    cargs.push(execution.inputFile((params["domain_image"] ?? null)));
    cargs.push((params["output_field"] ?? null));
    if ((params["number_of_random_points"] ?? null) !== null) {
        cargs.push(String((params["number_of_random_points"] ?? null)));
    }
    if ((params["standard_deviation_displacement_field"] ?? null) !== null) {
        cargs.push(String((params["standard_deviation_displacement_field"] ?? null)));
    }
    if ((params["enforce_stationary_boundary"] ?? null) !== null) {
        cargs.push(String((params["enforce_stationary_boundary"] ?? null)));
    }
    if ((params["displacement_specific_options"] ?? null) !== null) {
        cargs.push(...simulate_displacement_field_displacement_specific_options_cargs_dyn_fn((params["displacement_specific_options"] ?? null)["@type"])((params["displacement_specific_options"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function simulate_displacement_field_outputs(
    params: SimulateDisplacementFieldParameters,
    execution: Execution,
): SimulateDisplacementFieldOutputs {
    const ret: SimulateDisplacementFieldOutputs = {
        root: execution.outputFile("."),
        output_displacement_field: execution.outputFile([(params["output_field"] ?? null)].join('')),
    };
    return ret;
}


/**
 * SimulateDisplacementField
 *
 * Simulate displacement fields using various methods such as BSpline or Exponential.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SimulateDisplacementFieldOutputs`).
 */
function simulate_displacement_field_execute(
    params: SimulateDisplacementFieldParameters,
    runner: Runner | null = null,
): SimulateDisplacementFieldOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIMULATE_DISPLACEMENT_FIELD_METADATA);
    params = execution.params(params)
    const cargs = simulate_displacement_field_cargs(params, execution)
    const ret = simulate_displacement_field_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SimulateDisplacementField
 *
 * Simulate displacement fields using various methods such as BSpline or Exponential.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Dimensionality of the image.
 * @param displacement_field_type Type of displacement field to simulate.
 * @param domain_image Image defining the domain for the displacement field.
 * @param output_field Path to save the output displacement field.
 * @param number_of_random_points Number of random points to use in the simulation.
 * @param standard_deviation_displacement_field Standard deviation for the displacement field.
 * @param enforce_stationary_boundary Boolean flag indicating whether to enforce stationary boundary.
 * @param displacement_specific_options Options specific to the type of displacement field simulation.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SimulateDisplacementFieldOutputs`).
 */
function simulate_displacement_field(
    image_dimension: number,
    displacement_field_type: "BSpline" | "Exponential",
    domain_image: InputPathType,
    output_field: string,
    number_of_random_points: number | null = null,
    standard_deviation_displacement_field: number | null = null,
    enforce_stationary_boundary: number | null = null,
    displacement_specific_options: SimulateDisplacementFieldBsplineOptionsParametersTagged | SimulateDisplacementFieldExponentialOptionsParametersTagged | null = null,
    runner: Runner | null = null,
): SimulateDisplacementFieldOutputs {
    const params = simulate_displacement_field_params(image_dimension, displacement_field_type, domain_image, output_field, number_of_random_points, standard_deviation_displacement_field, enforce_stationary_boundary, displacement_specific_options)
    return simulate_displacement_field_execute(params, runner);
}


export {
      SIMULATE_DISPLACEMENT_FIELD_METADATA,
      SimulateDisplacementFieldOutputs,
      simulate_displacement_field,
      simulate_displacement_field_bspline_options_params,
      simulate_displacement_field_execute,
      simulate_displacement_field_exponential_options_params,
      simulate_displacement_field_params,
};
