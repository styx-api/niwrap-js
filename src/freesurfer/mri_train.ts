// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_TRAIN_METADATA: Metadata = {
    id: "d0941b64d4a6f238b895b5763048b0ed9578d676.boutiques",
    name: "mri_train",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriTrainParameters {
    "__STYXTYPE__": "mri_train";
    "training_file": InputPathType;
    "output_file": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_train": mri_train_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_train": mri_train_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_train(...)`.
 *
 * @interface
 */
interface MriTrainOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file generated by mri_train.
     */
    output_file_generated: OutputPathType;
}


function mri_train_params(
    training_file: InputPathType,
    output_file: string,
): MriTrainParameters {
    /**
     * Build parameters.
    
     * @param training_file Input training file name
     * @param output_file Output file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_train" as const,
        "training_file": training_file,
        "output_file": output_file,
    };
    return params;
}


function mri_train_cargs(
    params: MriTrainParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_train");
    cargs.push(execution.inputFile((params["training_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


function mri_train_outputs(
    params: MriTrainParameters,
    execution: Execution,
): MriTrainOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriTrainOutputs = {
        root: execution.outputFile("."),
        output_file_generated: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function mri_train_execute(
    params: MriTrainParameters,
    execution: Execution,
): MriTrainOutputs {
    /**
     * Tool for training with MRI data in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriTrainOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_train_cargs(params, execution)
    const ret = mri_train_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_train(
    training_file: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): MriTrainOutputs {
    /**
     * Tool for training with MRI data in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param training_file Input training file name
     * @param output_file Output file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriTrainOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_TRAIN_METADATA);
    const params = mri_train_params(training_file, output_file)
    return mri_train_execute(params, execution);
}


export {
      MRI_TRAIN_METADATA,
      MriTrainOutputs,
      MriTrainParameters,
      mri_train,
      mri_train_params,
};
