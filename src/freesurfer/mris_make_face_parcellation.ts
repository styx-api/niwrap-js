// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MAKE_FACE_PARCELLATION_METADATA: Metadata = {
    id: "fbb9898a52d45c0f46546002063d534704d78c03.boutiques",
    name: "mris_make_face_parcellation",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMakeFaceParcellationParameters {
    "__STYXTYPE__": "mris_make_face_parcellation";
    "input_surface": InputPathType;
    "ico_file": InputPathType;
    "output_annot": string;
    "colortable"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_make_face_parcellation": mris_make_face_parcellation_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_make_face_parcellation": mris_make_face_parcellation_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_make_face_parcellation(...)`.
 *
 * @interface
 */
interface MrisMakeFaceParcellationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated annotation file based on the icosahedral face mapping.
     */
    annot_file: OutputPathType;
}


function mris_make_face_parcellation_params(
    input_surface: InputPathType,
    ico_file: InputPathType,
    output_annot: string,
    colortable: InputPathType | null = null,
): MrisMakeFaceParcellationParameters {
    /**
     * Build parameters.
    
     * @param input_surface Input surface file (e.g. lh.sphere or lh.sphere.reg)
     * @param ico_file Icosahedron file (e.g. ic3.tri)
     * @param output_annot Output annotation file (e.g. lh.ic3.annot)
     * @param colortable Color table file (e.g. colortable.txt)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_make_face_parcellation" as const,
        "input_surface": input_surface,
        "ico_file": ico_file,
        "output_annot": output_annot,
    };
    if (colortable !== null) {
        params["colortable"] = colortable;
    }
    return params;
}


function mris_make_face_parcellation_cargs(
    params: MrisMakeFaceParcellationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_make_face_parcellation");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["ico_file"] ?? null)));
    cargs.push((params["output_annot"] ?? null));
    if ((params["colortable"] ?? null) !== null) {
        cargs.push(
            "-ctab",
            execution.inputFile((params["colortable"] ?? null))
        );
    }
    return cargs;
}


function mris_make_face_parcellation_outputs(
    params: MrisMakeFaceParcellationParameters,
    execution: Execution,
): MrisMakeFaceParcellationOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisMakeFaceParcellationOutputs = {
        root: execution.outputFile("."),
        annot_file: execution.outputFile([(params["output_annot"] ?? null)].join('')),
    };
    return ret;
}


function mris_make_face_parcellation_execute(
    params: MrisMakeFaceParcellationParameters,
    execution: Execution,
): MrisMakeFaceParcellationOutputs {
    /**
     * Generates a parcellation based on which icosahedral face each vertex maps to.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisMakeFaceParcellationOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_make_face_parcellation_cargs(params, execution)
    const ret = mris_make_face_parcellation_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_make_face_parcellation(
    input_surface: InputPathType,
    ico_file: InputPathType,
    output_annot: string,
    colortable: InputPathType | null = null,
    runner: Runner | null = null,
): MrisMakeFaceParcellationOutputs {
    /**
     * Generates a parcellation based on which icosahedral face each vertex maps to.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_surface Input surface file (e.g. lh.sphere or lh.sphere.reg)
     * @param ico_file Icosahedron file (e.g. ic3.tri)
     * @param output_annot Output annotation file (e.g. lh.ic3.annot)
     * @param colortable Color table file (e.g. colortable.txt)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisMakeFaceParcellationOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MAKE_FACE_PARCELLATION_METADATA);
    const params = mris_make_face_parcellation_params(input_surface, ico_file, output_annot, colortable)
    return mris_make_face_parcellation_execute(params, execution);
}


export {
      MRIS_MAKE_FACE_PARCELLATION_METADATA,
      MrisMakeFaceParcellationOutputs,
      MrisMakeFaceParcellationParameters,
      mris_make_face_parcellation,
      mris_make_face_parcellation_params,
};
