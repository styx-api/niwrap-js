// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_TO_BORDER_METADATA: Metadata = {
    id: "73d4d8e81dee3be463cf016c882b4dcf98d7acf2.boutiques",
    name: "label-to-border",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface LabelToBorderParameters {
    "__STYXTYPE__": "label-to-border";
    "surface": InputPathType;
    "label_in": InputPathType;
    "border_out": string;
    "opt_placement_fraction"?: number | null | undefined;
    "opt_column_column"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "label-to-border": label_to_border_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "label-to-border": label_to_border_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `label_to_border(...)`.
 *
 * @interface
 */
interface LabelToBorderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output border file
     */
    border_out: OutputPathType;
}


function label_to_border_params(
    surface: InputPathType,
    label_in: InputPathType,
    border_out: string,
    opt_placement_fraction: number | null = null,
    opt_column_column: string | null = null,
): LabelToBorderParameters {
    /**
     * Build parameters.
    
     * @param surface the surface to use for neighbor information
     * @param label_in the input label file
     * @param border_out the output border file
     * @param opt_placement_fraction set how far along the edge border points are drawn: fraction along edge from inside vertex (default 0.33)
     * @param opt_column_column select a single column: the column number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "label-to-border" as const,
        "surface": surface,
        "label_in": label_in,
        "border_out": border_out,
    };
    if (opt_placement_fraction !== null) {
        params["opt_placement_fraction"] = opt_placement_fraction;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    return params;
}


function label_to_border_cargs(
    params: LabelToBorderParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-label-to-border");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["label_in"] ?? null)));
    cargs.push((params["border_out"] ?? null));
    if ((params["opt_placement_fraction"] ?? null) !== null) {
        cargs.push(
            "-placement",
            String((params["opt_placement_fraction"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    return cargs;
}


function label_to_border_outputs(
    params: LabelToBorderParameters,
    execution: Execution,
): LabelToBorderOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: LabelToBorderOutputs = {
        root: execution.outputFile("."),
        border_out: execution.outputFile([(params["border_out"] ?? null)].join('')),
    };
    return ret;
}


function label_to_border_execute(
    params: LabelToBorderParameters,
    execution: Execution,
): LabelToBorderOutputs {
    /**
     * Draw borders around labels.
     * 
     * For each label, finds all edges on the mesh that cross the boundary of the label, and draws borders through them.  By default, this is done on all columns in the input file, using the map name as the class name for the border.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `LabelToBorderOutputs`).
     */
    params = execution.params(params)
    const cargs = label_to_border_cargs(params, execution)
    const ret = label_to_border_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function label_to_border(
    surface: InputPathType,
    label_in: InputPathType,
    border_out: string,
    opt_placement_fraction: number | null = null,
    opt_column_column: string | null = null,
    runner: Runner | null = null,
): LabelToBorderOutputs {
    /**
     * Draw borders around labels.
     * 
     * For each label, finds all edges on the mesh that cross the boundary of the label, and draws borders through them.  By default, this is done on all columns in the input file, using the map name as the class name for the border.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface the surface to use for neighbor information
     * @param label_in the input label file
     * @param border_out the output border file
     * @param opt_placement_fraction set how far along the edge border points are drawn: fraction along edge from inside vertex (default 0.33)
     * @param opt_column_column select a single column: the column number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `LabelToBorderOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_TO_BORDER_METADATA);
    const params = label_to_border_params(surface, label_in, border_out, opt_placement_fraction, opt_column_column)
    return label_to_border_execute(params, execution);
}


export {
      LABEL_TO_BORDER_METADATA,
      LabelToBorderOutputs,
      LabelToBorderParameters,
      label_to_border,
      label_to_border_params,
};
