// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MORPHOLOGY_METADATA: Metadata = {
    id: "c970f9e3f481e61c42c0a7e9a65fefe035f9c020.boutiques",
    name: "mri_morphology",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMorphologyParameters {
    "@type": "freesurfer.mri_morphology";
    "input_volume": InputPathType;
    "operation": "open" | "close" | "dilate" | "erode" | "mode" | "fill_holes" | "erode_bottom" | "dilate_thresh" | "erode_thresh";
    "number_iter": number;
    "output_volume": string;
    "label_option"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_morphology": mri_morphology_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_morphology": mri_morphology_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_morphology(...)`.
 *
 * @interface
 */
interface MriMorphologyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The result of the morphological operation applied to the input volume.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume file on which operations are to be applied.
 * @param operation Morphological operation to be performed. Options include: open, close, dilate, erode, mode, fill_holes, erode_bottom, dilate_thresh, erode_thresh.
 * @param number_iter Number of iterations to apply the operation.
 * @param output_volume Output volume file to store the results of the operation.
 * @param label_option Only apply operations to the specified label instead of all nonzero voxels.
 *
 * @returns Parameter dictionary
 */
function mri_morphology_params(
    input_volume: InputPathType,
    operation: "open" | "close" | "dilate" | "erode" | "mode" | "fill_holes" | "erode_bottom" | "dilate_thresh" | "erode_thresh",
    number_iter: number,
    output_volume: string,
    label_option: number | null = null,
): MriMorphologyParameters {
    const params = {
        "@type": "freesurfer.mri_morphology" as const,
        "input_volume": input_volume,
        "operation": operation,
        "number_iter": number_iter,
        "output_volume": output_volume,
    };
    if (label_option !== null) {
        params["label_option"] = label_option;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_morphology_cargs(
    params: MriMorphologyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_morphology");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["operation"] ?? null));
    cargs.push(String((params["number_iter"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["label_option"] ?? null) !== null) {
        cargs.push(
            "-l",
            String((params["label_option"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_morphology_outputs(
    params: MriMorphologyParameters,
    execution: Execution,
): MriMorphologyOutputs {
    const ret: MriMorphologyOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_morphology
 *
 * MRI Morphology Tool - performs various morphological operations on a volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMorphologyOutputs`).
 */
function mri_morphology_execute(
    params: MriMorphologyParameters,
    runner: Runner | null = null,
): MriMorphologyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MORPHOLOGY_METADATA);
    params = execution.params(params)
    const cargs = mri_morphology_cargs(params, execution)
    const ret = mri_morphology_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_morphology
 *
 * MRI Morphology Tool - performs various morphological operations on a volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume file on which operations are to be applied.
 * @param operation Morphological operation to be performed. Options include: open, close, dilate, erode, mode, fill_holes, erode_bottom, dilate_thresh, erode_thresh.
 * @param number_iter Number of iterations to apply the operation.
 * @param output_volume Output volume file to store the results of the operation.
 * @param label_option Only apply operations to the specified label instead of all nonzero voxels.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMorphologyOutputs`).
 */
function mri_morphology(
    input_volume: InputPathType,
    operation: "open" | "close" | "dilate" | "erode" | "mode" | "fill_holes" | "erode_bottom" | "dilate_thresh" | "erode_thresh",
    number_iter: number,
    output_volume: string,
    label_option: number | null = null,
    runner: Runner | null = null,
): MriMorphologyOutputs {
    const params = mri_morphology_params(input_volume, operation, number_iter, output_volume, label_option)
    return mri_morphology_execute(params, runner);
}


export {
      MRI_MORPHOLOGY_METADATA,
      MriMorphologyOutputs,
      MriMorphologyParameters,
      mri_morphology,
      mri_morphology_execute,
      mri_morphology_params,
};
