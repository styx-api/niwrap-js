// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_REMLFIT_METADATA: Metadata = {
    id: "847ea79f5b61b9773e10438597e56d4e78c62c2e.boutiques",
    name: "3dREMLfit",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dRemlfitParameters {
    "__STYXTYPE__": "3dREMLfit";
    "input_file": InputPathType;
    "regression_matrix": InputPathType;
    "baseline_files"?: Array<string> | null | undefined;
    "sort_nods": boolean;
    "temp_storage": boolean;
    "mask"?: InputPathType | null | undefined;
    "output_prefix"?: string | null | undefined;
    "go_for_it": boolean;
    "max_b_param"?: number | null | undefined;
    "grid_param"?: number | null | undefined;
    "negative_corr": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dREMLfit": v_3d_remlfit_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dREMLfit": v_3d_remlfit_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_remlfit(...)`.
 *
 * @interface
 */
interface V3dRemlfitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main default output of 3dREMLfit
     */
    outfile: OutputPathType | null;
    /**
     * REML variance parameters
     */
    rvar_file: OutputPathType | null;
    /**
     * REML beta weights
     */
    rbeta_file: OutputPathType | null;
    /**
     * REML estimates and statistics
     */
    rbuck_file: OutputPathType | null;
    /**
     * REML fitted model
     */
    rfitts_file: OutputPathType | null;
    /**
     * REML residuals
     */
    rerrts_file: OutputPathType | null;
}


function v_3d_remlfit_params(
    input_file: InputPathType,
    regression_matrix: InputPathType,
    baseline_files: Array<string> | null = null,
    sort_nods: boolean = false,
    temp_storage: boolean = false,
    mask: InputPathType | null = null,
    output_prefix: string | null = null,
    go_for_it: boolean = false,
    max_b_param: number | null = null,
    grid_param: number | null = null,
    negative_corr: boolean = false,
): V3dRemlfitParameters {
    /**
     * Build parameters.
    
     * @param input_file Read time series dataset
     * @param regression_matrix Read the regression matrix, which should have been output from 3dDeconvolve via the '-x1D' option
     * @param baseline_files Add baseline model columns to the matrix. Each column in the specified .1D file will be appended to the matrix.
     * @param sort_nods If '-dsort' is used, the output datasets reflect the impact of the voxel-wise regressor(s). If you want to compare those results to the case where you did NOT give the '-dsort' option, then also use '-dsort_nods'.
     * @param temp_storage Write intermediate output to disk, to economize on RAM.
     * @param mask Read dataset as a mask for the input; voxels outside the mask will not be fit by the regression model.
     * @param output_prefix Dataset prefix for saving REML variance parameters.
     * @param go_for_it Force the program to continue past a failed collinearity check.
     * @param max_b_param Set max allowed MA b parameter.
     * @param grid_param Set the number of grid divisions in the (a,b) grid.
     * @param negative_corr Allows negative correlations to be used.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dREMLfit" as const,
        "input_file": input_file,
        "regression_matrix": regression_matrix,
        "sort_nods": sort_nods,
        "temp_storage": temp_storage,
        "go_for_it": go_for_it,
        "negative_corr": negative_corr,
    };
    if (baseline_files !== null) {
        params["baseline_files"] = baseline_files;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (max_b_param !== null) {
        params["max_b_param"] = max_b_param;
    }
    if (grid_param !== null) {
        params["grid_param"] = grid_param;
    }
    return params;
}


function v_3d_remlfit_cargs(
    params: V3dRemlfitParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dREMLfit");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-matrix",
        execution.inputFile((params["regression_matrix"] ?? null))
    );
    if ((params["baseline_files"] ?? null) !== null) {
        cargs.push(
            "-addbase",
            ...(params["baseline_files"] ?? null)
        );
    }
    if ((params["sort_nods"] ?? null)) {
        cargs.push("-dsort_nods");
    }
    if ((params["temp_storage"] ?? null)) {
        cargs.push("-usetemp");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-Rvar",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["go_for_it"] ?? null)) {
        cargs.push("-GOFORIT");
    }
    if ((params["max_b_param"] ?? null) !== null) {
        cargs.push(
            "-MAXb",
            String((params["max_b_param"] ?? null))
        );
    }
    if ((params["grid_param"] ?? null) !== null) {
        cargs.push(
            "-Grid",
            String((params["grid_param"] ?? null))
        );
    }
    if ((params["negative_corr"] ?? null)) {
        cargs.push("-NEGcor");
    }
    return cargs;
}


function v_3d_remlfit_outputs(
    params: V3dRemlfitParameters,
    execution: Execution,
): V3dRemlfitOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dRemlfitOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".nii.gz"].join('')) : null,
        rvar_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_Rvar.nii.gz"].join('')) : null,
        rbeta_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_Rbeta.nii.gz"].join('')) : null,
        rbuck_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_Rbuck.nii.gz"].join('')) : null,
        rfitts_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_Rfitts.nii.gz"].join('')) : null,
        rerrts_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_Rerrts.nii.gz"].join('')) : null,
    };
    return ret;
}


function v_3d_remlfit_execute(
    params: V3dRemlfitParameters,
    execution: Execution,
): V3dRemlfitOutputs {
    /**
     * Generalized least squares time series fit, with REML estimation of the temporal auto-correlation structure.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dRemlfitOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_remlfit_cargs(params, execution)
    const ret = v_3d_remlfit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_remlfit(
    input_file: InputPathType,
    regression_matrix: InputPathType,
    baseline_files: Array<string> | null = null,
    sort_nods: boolean = false,
    temp_storage: boolean = false,
    mask: InputPathType | null = null,
    output_prefix: string | null = null,
    go_for_it: boolean = false,
    max_b_param: number | null = null,
    grid_param: number | null = null,
    negative_corr: boolean = false,
    runner: Runner | null = null,
): V3dRemlfitOutputs {
    /**
     * Generalized least squares time series fit, with REML estimation of the temporal auto-correlation structure.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Read time series dataset
     * @param regression_matrix Read the regression matrix, which should have been output from 3dDeconvolve via the '-x1D' option
     * @param baseline_files Add baseline model columns to the matrix. Each column in the specified .1D file will be appended to the matrix.
     * @param sort_nods If '-dsort' is used, the output datasets reflect the impact of the voxel-wise regressor(s). If you want to compare those results to the case where you did NOT give the '-dsort' option, then also use '-dsort_nods'.
     * @param temp_storage Write intermediate output to disk, to economize on RAM.
     * @param mask Read dataset as a mask for the input; voxels outside the mask will not be fit by the regression model.
     * @param output_prefix Dataset prefix for saving REML variance parameters.
     * @param go_for_it Force the program to continue past a failed collinearity check.
     * @param max_b_param Set max allowed MA b parameter.
     * @param grid_param Set the number of grid divisions in the (a,b) grid.
     * @param negative_corr Allows negative correlations to be used.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dRemlfitOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_REMLFIT_METADATA);
    const params = v_3d_remlfit_params(input_file, regression_matrix, baseline_files, sort_nods, temp_storage, mask, output_prefix, go_for_it, max_b_param, grid_param, negative_corr)
    return v_3d_remlfit_execute(params, execution);
}


export {
      V3dRemlfitOutputs,
      V3dRemlfitParameters,
      V_3D_REMLFIT_METADATA,
      v_3d_remlfit,
      v_3d_remlfit_params,
};
