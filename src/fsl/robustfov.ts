// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ROBUSTFOV_METADATA: Metadata = {
    id: "3a5071d68b35032e4f3bb975acdeaa9bc87a8c91.boutiques",
    name: "robustfov",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface RobustfovParameters {
    "@type": "fsl.robustfov";
    "input_file": InputPathType;
    "output_image"?: string | null | undefined;
    "brain_size"?: number | null | undefined;
    "matrix_output"?: string | null | undefined;
    "debug_flag": boolean;
    "verbose_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.robustfov": robustfov_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.robustfov": robustfov_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `robustfov(...)`.
 *
 * @interface
 */
interface RobustfovOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * ROI volume output
     */
    output_roi_volume: OutputPathType | null;
    /**
     * Matrix output (ROI to full FOV)
     */
    output_matrix_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file Input image file
 * @param output_image ROI volume output name
 * @param brain_size Size of the brain in z-dimension (default 170mm)
 * @param matrix_output Matrix output name (ROI to full FOV)
 * @param debug_flag Turn on debugging output
 * @param verbose_flag Switch on diagnostic messages
 *
 * @returns Parameter dictionary
 */
function robustfov_params(
    input_file: InputPathType,
    output_image: string | null = "output",
    brain_size: number | null = null,
    matrix_output: string | null = null,
    debug_flag: boolean = false,
    verbose_flag: boolean = false,
): RobustfovParameters {
    const params = {
        "@type": "fsl.robustfov" as const,
        "input_file": input_file,
        "debug_flag": debug_flag,
        "verbose_flag": verbose_flag,
    };
    if (output_image !== null) {
        params["output_image"] = output_image;
    }
    if (brain_size !== null) {
        params["brain_size"] = brain_size;
    }
    if (matrix_output !== null) {
        params["matrix_output"] = matrix_output;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function robustfov_cargs(
    params: RobustfovParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("robustfov");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["output_image"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["output_image"] ?? null)
        );
    }
    if ((params["brain_size"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["brain_size"] ?? null))
        );
    }
    if ((params["matrix_output"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["matrix_output"] ?? null)
        );
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("--verbose");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function robustfov_outputs(
    params: RobustfovParameters,
    execution: Execution,
): RobustfovOutputs {
    const ret: RobustfovOutputs = {
        root: execution.outputFile("."),
        output_roi_volume: ((params["output_image"] ?? null) !== null) ? execution.outputFile([((params["output_image"] ?? null).endsWith(".nii.gz") ? (params["output_image"] ?? null).slice(0, -7) : (params["output_image"] ?? null)), ".nii.gz"].join('')) : null,
        output_matrix_file: ((params["matrix_output"] ?? null) !== null) ? execution.outputFile([(params["matrix_output"] ?? null), ".txt"].join('')) : null,
    };
    return ret;
}


/**
 * robustfov
 *
 * Reduce FOV of image to remove lower head and neck.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RobustfovOutputs`).
 */
function robustfov_execute(
    params: RobustfovParameters,
    runner: Runner | null = null,
): RobustfovOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ROBUSTFOV_METADATA);
    params = execution.params(params)
    const cargs = robustfov_cargs(params, execution)
    const ret = robustfov_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * robustfov
 *
 * Reduce FOV of image to remove lower head and neck.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input image file
 * @param output_image ROI volume output name
 * @param brain_size Size of the brain in z-dimension (default 170mm)
 * @param matrix_output Matrix output name (ROI to full FOV)
 * @param debug_flag Turn on debugging output
 * @param verbose_flag Switch on diagnostic messages
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RobustfovOutputs`).
 */
function robustfov(
    input_file: InputPathType,
    output_image: string | null = "output",
    brain_size: number | null = null,
    matrix_output: string | null = null,
    debug_flag: boolean = false,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): RobustfovOutputs {
    const params = robustfov_params(input_file, output_image, brain_size, matrix_output, debug_flag, verbose_flag)
    return robustfov_execute(params, runner);
}


export {
      ROBUSTFOV_METADATA,
      RobustfovOutputs,
      RobustfovParameters,
      robustfov,
      robustfov_execute,
      robustfov_params,
};
