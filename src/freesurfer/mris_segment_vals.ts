// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SEGMENT_VALS_METADATA: Metadata = {
    id: "61a9f35935a5a99144fdebb71accfc5f1beaece1.boutiques",
    name: "mris_segment_vals",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSegmentValsParameters {
    "@type": "freesurfer.mris_segment_vals";
    "input_surface": InputPathType;
    "input_curv_file": InputPathType;
    "output_curv_file": string;
    "threshold"?: number | null | undefined;
    "area_thresh"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_segment_vals": mris_segment_vals_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_segment_vals": mris_segment_vals_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_segment_vals(...)`.
 *
 * @interface
 */
interface MrisSegmentValsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output w/curv file after segmentation
     */
    output_curv: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file
 * @param input_curv_file Input w/curv file
 * @param output_curv_file Output w/curv file
 * @param threshold Threshold for segmentation (default is 0)
 * @param area_thresh Ignore segments smaller than <area thresh> mm (default 0)
 *
 * @returns Parameter dictionary
 */
function mris_segment_vals_params(
    input_surface: InputPathType,
    input_curv_file: InputPathType,
    output_curv_file: string,
    threshold: number | null = null,
    area_thresh: number | null = null,
): MrisSegmentValsParameters {
    const params = {
        "@type": "freesurfer.mris_segment_vals" as const,
        "input_surface": input_surface,
        "input_curv_file": input_curv_file,
        "output_curv_file": output_curv_file,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (area_thresh !== null) {
        params["area_thresh"] = area_thresh;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_segment_vals_cargs(
    params: MrisSegmentValsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_segment_vals");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["input_curv_file"] ?? null)));
    cargs.push((params["output_curv_file"] ?? null));
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["area_thresh"] ?? null) !== null) {
        cargs.push(
            "-A",
            String((params["area_thresh"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_segment_vals_outputs(
    params: MrisSegmentValsParameters,
    execution: Execution,
): MrisSegmentValsOutputs {
    const ret: MrisSegmentValsOutputs = {
        root: execution.outputFile("."),
        output_curv: execution.outputFile([(params["output_curv_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_segment_vals
 *
 * This program segments an input val file into connected components.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSegmentValsOutputs`).
 */
function mris_segment_vals_execute(
    params: MrisSegmentValsParameters,
    runner: Runner | null = null,
): MrisSegmentValsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SEGMENT_VALS_METADATA);
    params = execution.params(params)
    const cargs = mris_segment_vals_cargs(params, execution)
    const ret = mris_segment_vals_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_segment_vals
 *
 * This program segments an input val file into connected components.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file
 * @param input_curv_file Input w/curv file
 * @param output_curv_file Output w/curv file
 * @param threshold Threshold for segmentation (default is 0)
 * @param area_thresh Ignore segments smaller than <area thresh> mm (default 0)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSegmentValsOutputs`).
 */
function mris_segment_vals(
    input_surface: InputPathType,
    input_curv_file: InputPathType,
    output_curv_file: string,
    threshold: number | null = null,
    area_thresh: number | null = null,
    runner: Runner | null = null,
): MrisSegmentValsOutputs {
    const params = mris_segment_vals_params(input_surface, input_curv_file, output_curv_file, threshold, area_thresh)
    return mris_segment_vals_execute(params, runner);
}


export {
      MRIS_SEGMENT_VALS_METADATA,
      MrisSegmentValsOutputs,
      MrisSegmentValsParameters,
      mris_segment_vals,
      mris_segment_vals_execute,
      mris_segment_vals_params,
};
