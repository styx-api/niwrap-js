// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CVS_CHECK_METADATA: Metadata = {
    id: "72ac9d6e08580c333bd915db7bf636a0c1d187a9.boutiques",
    name: "mri_cvs_check",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCvsCheckParameters {
    "@type": "freesurfer.mri_cvs_check";
    "mov_subjid": string;
    "template_subjid"?: string | null | undefined;
    "hemi"?: "lh" | "rh" | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_cvs_check": mri_cvs_check_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_cvs_check(...)`.
 *
 * @interface
 */
interface MriCvsCheckOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param mov_subjid Subject id for the subject to be moved/registered (Should be present in SUBJECTS_DIR).
 * @param template_subjid Subject id for the template subject to be kept fixed. If missing, CVS template is assumed as a target.
 * @param hemi The hemisphere that is going to be processed. It can be 'lh' or 'rh'.
 * @param help Print help and exit.
 * @param version Print version and exit.
 *
 * @returns Parameter dictionary
 */
function mri_cvs_check_params(
    mov_subjid: string,
    template_subjid: string | null = null,
    hemi: "lh" | "rh" | null = null,
    help: boolean = false,
    version: boolean = false,
): MriCvsCheckParameters {
    const params = {
        "@type": "freesurfer.mri_cvs_check" as const,
        "mov_subjid": mov_subjid,
        "help": help,
        "version": version,
    };
    if (template_subjid !== null) {
        params["template_subjid"] = template_subjid;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_cvs_check_cargs(
    params: MriCvsCheckParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_cvs_check");
    cargs.push(
        "--mov",
        (params["mov_subjid"] ?? null)
    );
    if ((params["template_subjid"] ?? null) !== null) {
        cargs.push(
            "--template",
            (params["template_subjid"] ?? null)
        );
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_cvs_check_outputs(
    params: MriCvsCheckParameters,
    execution: Execution,
): MriCvsCheckOutputs {
    const ret: MriCvsCheckOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Checks whether the files required for mri_cvs_register all exist.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriCvsCheckOutputs`).
 */
function mri_cvs_check_execute(
    params: MriCvsCheckParameters,
    execution: Execution,
): MriCvsCheckOutputs {
    params = execution.params(params)
    const cargs = mri_cvs_check_cargs(params, execution)
    const ret = mri_cvs_check_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Checks whether the files required for mri_cvs_register all exist.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param mov_subjid Subject id for the subject to be moved/registered (Should be present in SUBJECTS_DIR).
 * @param template_subjid Subject id for the template subject to be kept fixed. If missing, CVS template is assumed as a target.
 * @param hemi The hemisphere that is going to be processed. It can be 'lh' or 'rh'.
 * @param help Print help and exit.
 * @param version Print version and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCvsCheckOutputs`).
 */
function mri_cvs_check(
    mov_subjid: string,
    template_subjid: string | null = null,
    hemi: "lh" | "rh" | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriCvsCheckOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CVS_CHECK_METADATA);
    const params = mri_cvs_check_params(mov_subjid, template_subjid, hemi, help, version)
    return mri_cvs_check_execute(params, execution);
}


export {
      MRI_CVS_CHECK_METADATA,
      MriCvsCheckOutputs,
      MriCvsCheckParameters,
      mri_cvs_check,
      mri_cvs_check_cargs,
      mri_cvs_check_execute,
      mri_cvs_check_outputs,
      mri_cvs_check_params,
};
