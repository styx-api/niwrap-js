// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_GEODESIC_ROIS_METADATA: Metadata = {
    id: "72311c67a08117facc775f0d49b6e99ecfb7beb1.boutiques",
    name: "surface-geodesic-rois",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceGeodesicRoisParameters {
    "@type": "workbench.surface-geodesic-rois";
    "surface": InputPathType;
    "limit": number;
    "vertex_list_file": string;
    "metric_out": string;
    "opt_gaussian_sigma"?: number | null | undefined;
    "opt_overlap_logic_method"?: string | null | undefined;
    "opt_names_name_list_file"?: string | null | undefined;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-geodesic-rois": surface_geodesic_rois_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-geodesic-rois": surface_geodesic_rois_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_geodesic_rois(...)`.
 *
 * @interface
 */
interface SurfaceGeodesicRoisOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to draw on
 * @param limit geodesic distance limit from vertex, in mm
 * @param vertex_list_file a text file containing the vertices to draw ROIs around
 * @param metric_out the output metric
 * @param opt_gaussian_sigma generate a gaussian kernel instead of a flat ROI: the sigma for the gaussian kernel, in mm
 * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
 * @param opt_names_name_list_file name the columns from text file: a text file containing column names, one per line
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function surface_geodesic_rois_params(
    surface: InputPathType,
    limit: number,
    vertex_list_file: string,
    metric_out: string,
    opt_gaussian_sigma: number | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_names_name_list_file: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
): SurfaceGeodesicRoisParameters {
    const params = {
        "@type": "workbench.surface-geodesic-rois" as const,
        "surface": surface,
        "limit": limit,
        "vertex_list_file": vertex_list_file,
        "metric_out": metric_out,
    };
    if (opt_gaussian_sigma !== null) {
        params["opt_gaussian_sigma"] = opt_gaussian_sigma;
    }
    if (opt_overlap_logic_method !== null) {
        params["opt_overlap_logic_method"] = opt_overlap_logic_method;
    }
    if (opt_names_name_list_file !== null) {
        params["opt_names_name_list_file"] = opt_names_name_list_file;
    }
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_geodesic_rois_cargs(
    params: SurfaceGeodesicRoisParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-geodesic-rois");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(String((params["limit"] ?? null)));
    cargs.push((params["vertex_list_file"] ?? null));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_gaussian_sigma"] ?? null) !== null) {
        cargs.push(
            "-gaussian",
            String((params["opt_gaussian_sigma"] ?? null))
        );
    }
    if ((params["opt_overlap_logic_method"] ?? null) !== null) {
        cargs.push(
            "-overlap-logic",
            (params["opt_overlap_logic_method"] ?? null)
        );
    }
    if ((params["opt_names_name_list_file"] ?? null) !== null) {
        cargs.push(
            "-names",
            (params["opt_names_name_list_file"] ?? null)
        );
    }
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_geodesic_rois_outputs(
    params: SurfaceGeodesicRoisParameters,
    execution: Execution,
): SurfaceGeodesicRoisOutputs {
    const ret: SurfaceGeodesicRoisOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-geodesic-rois
 *
 * Draw geodesic limited rois at vertices.
 *
 * For each vertex in the list file, a column in the output metric is created, and an ROI around that vertex is drawn in that column.  Each metric column will have zeros outside the geodesic distance spacified by <limit>, and by default will have a value of 1.0 inside it.  If the -gaussian option is specified, the values inside the ROI will instead form a gaussian with the specified value of sigma, normalized so that the sum of the nonzero values in the metric column is 1.0.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceGeodesicRoisOutputs`).
 */
function surface_geodesic_rois_execute(
    params: SurfaceGeodesicRoisParameters,
    runner: Runner | null = null,
): SurfaceGeodesicRoisOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_GEODESIC_ROIS_METADATA);
    params = execution.params(params)
    const cargs = surface_geodesic_rois_cargs(params, execution)
    const ret = surface_geodesic_rois_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-geodesic-rois
 *
 * Draw geodesic limited rois at vertices.
 *
 * For each vertex in the list file, a column in the output metric is created, and an ROI around that vertex is drawn in that column.  Each metric column will have zeros outside the geodesic distance spacified by <limit>, and by default will have a value of 1.0 inside it.  If the -gaussian option is specified, the values inside the ROI will instead form a gaussian with the specified value of sigma, normalized so that the sum of the nonzero values in the metric column is 1.0.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to draw on
 * @param limit geodesic distance limit from vertex, in mm
 * @param vertex_list_file a text file containing the vertices to draw ROIs around
 * @param metric_out the output metric
 * @param opt_gaussian_sigma generate a gaussian kernel instead of a flat ROI: the sigma for the gaussian kernel, in mm
 * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
 * @param opt_names_name_list_file name the columns from text file: a text file containing column names, one per line
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceGeodesicRoisOutputs`).
 */
function surface_geodesic_rois(
    surface: InputPathType,
    limit: number,
    vertex_list_file: string,
    metric_out: string,
    opt_gaussian_sigma: number | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_names_name_list_file: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    runner: Runner | null = null,
): SurfaceGeodesicRoisOutputs {
    const params = surface_geodesic_rois_params(surface, limit, vertex_list_file, metric_out, opt_gaussian_sigma, opt_overlap_logic_method, opt_names_name_list_file, opt_corrected_areas_area_metric)
    return surface_geodesic_rois_execute(params, runner);
}


export {
      SURFACE_GEODESIC_ROIS_METADATA,
      SurfaceGeodesicRoisOutputs,
      SurfaceGeodesicRoisParameters,
      surface_geodesic_rois,
      surface_geodesic_rois_execute,
      surface_geodesic_rois_params,
};
