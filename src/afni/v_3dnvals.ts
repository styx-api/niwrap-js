// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DNVALS_METADATA: Metadata = {
    id: "d32979be81ea2707669bbfdc54a5b8ae7ef58f3d.boutiques",
    name: "3dnvals",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dnvalsParameters {
    "@type"?: "afni/3dnvals";
    "datasets": Array<InputPathType>;
    "all_flag": boolean;
    "verbose_flag": boolean;
}
type V3dnvalsParametersTagged = Required<Pick<V3dnvalsParameters, '@type'>> & V3dnvalsParameters;


/**
 * Output object returned when calling `V3dnvalsParameters(...)`.
 *
 * @interface
 */
interface V3dnvalsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param datasets Input 3D dataset(s)
 * @param all_flag Print out all 4 dimensions: Nx, Ny, Nz, Nvals
 * @param verbose_flag Print the header name of the dataset first
 *
 * @returns Parameter dictionary
 */
function v_3dnvals_params(
    datasets: Array<InputPathType>,
    all_flag: boolean = false,
    verbose_flag: boolean = false,
): V3dnvalsParametersTagged {
    const params = {
        "@type": "afni/3dnvals" as const,
        "datasets": datasets,
        "all_flag": all_flag,
        "verbose_flag": verbose_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dnvals_cargs(
    params: V3dnvalsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dnvals");
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    if ((params["all_flag"] ?? false)) {
        cargs.push("-all");
    }
    if ((params["verbose_flag"] ?? false)) {
        cargs.push("-verbose");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dnvals_outputs(
    params: V3dnvalsParameters,
    execution: Execution,
): V3dnvalsOutputs {
    const ret: V3dnvalsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 3dnvals
 *
 * Tool to print the number of sub-bricks in a 3D dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dnvalsOutputs`).
 */
function v_3dnvals_execute(
    params: V3dnvalsParameters,
    runner: Runner | null = null,
): V3dnvalsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DNVALS_METADATA);
    params = execution.params(params)
    const cargs = v_3dnvals_cargs(params, execution)
    const ret = v_3dnvals_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dnvals
 *
 * Tool to print the number of sub-bricks in a 3D dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param datasets Input 3D dataset(s)
 * @param all_flag Print out all 4 dimensions: Nx, Ny, Nz, Nvals
 * @param verbose_flag Print the header name of the dataset first
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dnvalsOutputs`).
 */
function v_3dnvals(
    datasets: Array<InputPathType>,
    all_flag: boolean = false,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): V3dnvalsOutputs {
    const params = v_3dnvals_params(datasets, all_flag, verbose_flag)
    return v_3dnvals_execute(params, runner);
}


export {
      V3dnvalsOutputs,
      V_3DNVALS_METADATA,
      v_3dnvals,
      v_3dnvals_execute,
      v_3dnvals_params,
};
