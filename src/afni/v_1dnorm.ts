// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DNORM_METADATA: Metadata = {
    id: "ea6e83597c9dc8fb3895db8c36d06ddc6f559447.boutiques",
    name: "1dnorm",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dnormParameters {
    "__STYXTYPE__": "1dnorm";
    "infile": InputPathType;
    "outfile": string;
    "norm1": boolean;
    "normx": boolean;
    "demean": boolean;
    "demed": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dnorm": v_1dnorm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dnorm": v_1dnorm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dnorm(...)`.
 *
 * @interface
 */
interface V1dnormOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Normalized output AFNI *.1D file
     */
    normalized_output: OutputPathType;
}


function v_1dnorm_params(
    infile: InputPathType,
    outfile: string,
    norm1: boolean = false,
    normx: boolean = false,
    demean: boolean = false,
    demed: boolean = false,
): V1dnormParameters {
    /**
     * Build parameters.
    
     * @param infile Input AFNI *.1D file (ASCII list of numbers arranged in columns); if '-' input will be read from stdin.
     * @param outfile Output AFNI *.1D file (normalized); if '-' output will be written to stdout.
     * @param norm1 Normalize so sum of absolute values is 1 (L_1 norm)
     * @param normx Normalize so that max absolute value is 1 (L_infinity norm)
     * @param demean Subtract each column's mean before normalizing
     * @param demed Subtract each column's median before normalizing
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dnorm" as const,
        "infile": infile,
        "outfile": outfile,
        "norm1": norm1,
        "normx": normx,
        "demean": demean,
        "demed": demed,
    };
    return params;
}


function v_1dnorm_cargs(
    params: V1dnormParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dnorm");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    if ((params["norm1"] ?? null)) {
        cargs.push("-norm1");
    }
    if ((params["normx"] ?? null)) {
        cargs.push("-normx");
    }
    if ((params["demean"] ?? null)) {
        cargs.push("-demean");
    }
    if ((params["demed"] ?? null)) {
        cargs.push("-demed");
    }
    return cargs;
}


function v_1dnorm_outputs(
    params: V1dnormParameters,
    execution: Execution,
): V1dnormOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dnormOutputs = {
        root: execution.outputFile("."),
        normalized_output: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


function v_1dnorm_execute(
    params: V1dnormParameters,
    execution: Execution,
): V1dnormOutputs {
    /**
     * Normalize columns of a 1D file (AFNI ASCII list of numbers).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dnormOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1dnorm_cargs(params, execution)
    const ret = v_1dnorm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1dnorm(
    infile: InputPathType,
    outfile: string,
    norm1: boolean = false,
    normx: boolean = false,
    demean: boolean = false,
    demed: boolean = false,
    runner: Runner | null = null,
): V1dnormOutputs {
    /**
     * Normalize columns of a 1D file (AFNI ASCII list of numbers).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param infile Input AFNI *.1D file (ASCII list of numbers arranged in columns); if '-' input will be read from stdin.
     * @param outfile Output AFNI *.1D file (normalized); if '-' output will be written to stdout.
     * @param norm1 Normalize so sum of absolute values is 1 (L_1 norm)
     * @param normx Normalize so that max absolute value is 1 (L_infinity norm)
     * @param demean Subtract each column's mean before normalizing
     * @param demed Subtract each column's median before normalizing
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dnormOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DNORM_METADATA);
    const params = v_1dnorm_params(infile, outfile, norm1, normx, demean, demed)
    return v_1dnorm_execute(params, execution);
}


export {
      V1dnormOutputs,
      V1dnormParameters,
      V_1DNORM_METADATA,
      v_1dnorm,
      v_1dnorm_params,
};
