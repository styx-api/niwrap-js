// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SEGMENT_THALAMIC_NUCLEI_DTI_CNN_METADATA: Metadata = {
    id: "d893715e795f9e42e07a8cb788e3c2e50b141260.boutiques",
    name: "mri_segment_thalamic_nuclei_dti_cnn",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSegmentThalamicNucleiDtiCnnParameters {
    "__STYXTYPE__": "mri_segment_thalamic_nuclei_dti_cnn";
    "t1_images": InputPathType;
    "aseg"?: InputPathType | null | undefined;
    "fa": InputPathType;
    "v1": InputPathType;
    "output": string;
    "volume_output"?: string | null | undefined;
    "posteriors_output"?: string | null | undefined;
    "threads"?: number | null | undefined;
    "force_cpu": boolean;
    "model"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_segment_thalamic_nuclei_dti_cnn": mri_segment_thalamic_nuclei_dti_cnn_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_segment_thalamic_nuclei_dti_cnn": mri_segment_thalamic_nuclei_dti_cnn_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_segment_thalamic_nuclei_dti_cnn(...)`.
 *
 * @interface
 */
interface MriSegmentThalamicNucleiDtiCnnOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Path to the segmentation output.
     */
    segmentation_output: OutputPathType;
    /**
     * CSV file with volumes for all structures.
     */
    volume_csv: OutputPathType | null;
    /**
     * Path to the posteriors output.
     */
    posteriors: OutputPathType | null;
}


function mri_segment_thalamic_nuclei_dti_cnn_params(
    t1_images: InputPathType,
    fa: InputPathType,
    v1: InputPathType,
    output: string,
    aseg: InputPathType | null = null,
    volume_output: string | null = null,
    posteriors_output: string | null = null,
    threads: number | null = null,
    force_cpu: boolean = false,
    model: InputPathType | null = null,
): MriSegmentThalamicNucleiDtiCnnParameters {
    /**
     * Build parameters.
    
     * @param t1_images Path to the T1 image(s) or folder containing images. These must be registered to the FAs in physical coordinates.
     * @param fa Path to the FA image(s) or folder.
     * @param v1 Path to the V1 image(s) or folder.
     * @param output Path to the segmentation output(s) or folder.
     * @param aseg Path to the ASEG segmentation(s) or folder. These must be registered to the FAs in physical coordinates.
     * @param volume_output CSV file for volumes of all structures and subjects.
     * @param posteriors_output Path to the posteriors output(s) or folder.
     * @param threads Number of cores to be used. Default is 1.
     * @param force_cpu Enforce running with CPU rather than GPU.
     * @param model Path to an alternative model file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_segment_thalamic_nuclei_dti_cnn" as const,
        "t1_images": t1_images,
        "fa": fa,
        "v1": v1,
        "output": output,
        "force_cpu": force_cpu,
    };
    if (aseg !== null) {
        params["aseg"] = aseg;
    }
    if (volume_output !== null) {
        params["volume_output"] = volume_output;
    }
    if (posteriors_output !== null) {
        params["posteriors_output"] = posteriors_output;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (model !== null) {
        params["model"] = model;
    }
    return params;
}


function mri_segment_thalamic_nuclei_dti_cnn_cargs(
    params: MriSegmentThalamicNucleiDtiCnnParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_segment_thalamic_nuclei_dti_cnn");
    cargs.push(
        "--t1",
        execution.inputFile((params["t1_images"] ?? null))
    );
    if ((params["aseg"] ?? null) !== null) {
        cargs.push(
            "--aseg",
            execution.inputFile((params["aseg"] ?? null))
        );
    }
    cargs.push(
        "--fa",
        execution.inputFile((params["fa"] ?? null))
    );
    cargs.push(
        "--v1",
        execution.inputFile((params["v1"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output"] ?? null)
    );
    if ((params["volume_output"] ?? null) !== null) {
        cargs.push(
            "--vol",
            (params["volume_output"] ?? null)
        );
    }
    if ((params["posteriors_output"] ?? null) !== null) {
        cargs.push(
            "--post",
            (params["posteriors_output"] ?? null)
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["force_cpu"] ?? null)) {
        cargs.push("--cpu");
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "--model",
            execution.inputFile((params["model"] ?? null))
        );
    }
    return cargs;
}


function mri_segment_thalamic_nuclei_dti_cnn_outputs(
    params: MriSegmentThalamicNucleiDtiCnnParameters,
    execution: Execution,
): MriSegmentThalamicNucleiDtiCnnOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriSegmentThalamicNucleiDtiCnnOutputs = {
        root: execution.outputFile("."),
        segmentation_output: execution.outputFile([(params["output"] ?? null)].join('')),
        volume_csv: ((params["volume_output"] ?? null) !== null) ? execution.outputFile([(params["volume_output"] ?? null)].join('')) : null,
        posteriors: ((params["posteriors_output"] ?? null) !== null) ? execution.outputFile([(params["posteriors_output"] ?? null)].join('')) : null,
    };
    return ret;
}


function mri_segment_thalamic_nuclei_dti_cnn_execute(
    params: MriSegmentThalamicNucleiDtiCnnParameters,
    execution: Execution,
): MriSegmentThalamicNucleiDtiCnnOutputs {
    /**
     * Thalamic segmentation tool providing 0.7mm isotropic thalamus segmentation from registered T1, FA, and V1 volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriSegmentThalamicNucleiDtiCnnOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_segment_thalamic_nuclei_dti_cnn_cargs(params, execution)
    const ret = mri_segment_thalamic_nuclei_dti_cnn_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_segment_thalamic_nuclei_dti_cnn(
    t1_images: InputPathType,
    fa: InputPathType,
    v1: InputPathType,
    output: string,
    aseg: InputPathType | null = null,
    volume_output: string | null = null,
    posteriors_output: string | null = null,
    threads: number | null = null,
    force_cpu: boolean = false,
    model: InputPathType | null = null,
    runner: Runner | null = null,
): MriSegmentThalamicNucleiDtiCnnOutputs {
    /**
     * Thalamic segmentation tool providing 0.7mm isotropic thalamus segmentation from registered T1, FA, and V1 volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param t1_images Path to the T1 image(s) or folder containing images. These must be registered to the FAs in physical coordinates.
     * @param fa Path to the FA image(s) or folder.
     * @param v1 Path to the V1 image(s) or folder.
     * @param output Path to the segmentation output(s) or folder.
     * @param aseg Path to the ASEG segmentation(s) or folder. These must be registered to the FAs in physical coordinates.
     * @param volume_output CSV file for volumes of all structures and subjects.
     * @param posteriors_output Path to the posteriors output(s) or folder.
     * @param threads Number of cores to be used. Default is 1.
     * @param force_cpu Enforce running with CPU rather than GPU.
     * @param model Path to an alternative model file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriSegmentThalamicNucleiDtiCnnOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SEGMENT_THALAMIC_NUCLEI_DTI_CNN_METADATA);
    const params = mri_segment_thalamic_nuclei_dti_cnn_params(t1_images, fa, v1, output, aseg, volume_output, posteriors_output, threads, force_cpu, model)
    return mri_segment_thalamic_nuclei_dti_cnn_execute(params, execution);
}


export {
      MRI_SEGMENT_THALAMIC_NUCLEI_DTI_CNN_METADATA,
      MriSegmentThalamicNucleiDtiCnnOutputs,
      MriSegmentThalamicNucleiDtiCnnParameters,
      mri_segment_thalamic_nuclei_dti_cnn,
      mri_segment_thalamic_nuclei_dti_cnn_params,
};
