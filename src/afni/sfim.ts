// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SFIM_METADATA: Metadata = {
    id: "62032460073e6537145dc05bebbde2400a1cbdbc.boutiques",
    name: "sfim",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SfimParameters {
    "__STYXTYPE__": "sfim";
    "sfint_file"?: string | null | undefined;
    "baseline_state"?: string | null | undefined;
    "local_base_option": boolean;
    "output_prefix"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sfim": sfim_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "sfim": sfim_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sfim(...)`.
 *
 * @interface
 */
interface SfimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file for interval 'i' with task state name.
     */
    output_files: OutputPathType | null;
}


function sfim_params(
    sfint_file: string | null = null,
    baseline_state: string | null = null,
    local_base_option: boolean = false,
    output_prefix: string | null = null,
): SfimParameters {
    /**
     * Build parameters.
    
     * @param sfint_file Filename which contains the interval definitions. Default is 'sfint'. Example: '3*# 5*rest 4*A 5*rest 4*B 5*rest 4*A 5*rest'
     * @param baseline_state Task state name to use as the baseline. Default is 'rest'.
     * @param local_base_option Flag to indicate if each non-base task state interval should have the mean of the two nearest base intervals subtracted instead of the grand mean of all the base task intervals.
     * @param output_prefix Prefix for output image filenames for all states. The i'th interval with task state name 'fred' will be written to file 'pname.fred.i'. Default is 'sfim'.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sfim" as const,
        "local_base_option": local_base_option,
    };
    if (sfint_file !== null) {
        params["sfint_file"] = sfint_file;
    }
    if (baseline_state !== null) {
        params["baseline_state"] = baseline_state;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


function sfim_cargs(
    params: SfimParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sfim");
    if ((params["sfint_file"] ?? null) !== null) {
        cargs.push(
            "-sfint",
            (params["sfint_file"] ?? null)
        );
    }
    if ((params["baseline_state"] ?? null) !== null) {
        cargs.push(
            "-base",
            (params["baseline_state"] ?? null)
        );
    }
    if ((params["local_base_option"] ?? null)) {
        cargs.push("-localbase");
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    cargs.push("[INPUT_FILES...]");
    return cargs;
}


function sfim_outputs(
    params: SfimParameters,
    execution: Execution,
): SfimOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SfimOutputs = {
        root: execution.outputFile("."),
        output_files: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".*.i"].join('')) : null,
    };
    return ret;
}


function sfim_execute(
    params: SfimParameters,
    execution: Execution,
): SfimOutputs {
    /**
     * Stepwise Functional IMages.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SfimOutputs`).
     */
    params = execution.params(params)
    const cargs = sfim_cargs(params, execution)
    const ret = sfim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sfim(
    sfint_file: string | null = null,
    baseline_state: string | null = null,
    local_base_option: boolean = false,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): SfimOutputs {
    /**
     * Stepwise Functional IMages.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param sfint_file Filename which contains the interval definitions. Default is 'sfint'. Example: '3*# 5*rest 4*A 5*rest 4*B 5*rest 4*A 5*rest'
     * @param baseline_state Task state name to use as the baseline. Default is 'rest'.
     * @param local_base_option Flag to indicate if each non-base task state interval should have the mean of the two nearest base intervals subtracted instead of the grand mean of all the base task intervals.
     * @param output_prefix Prefix for output image filenames for all states. The i'th interval with task state name 'fred' will be written to file 'pname.fred.i'. Default is 'sfim'.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SfimOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SFIM_METADATA);
    const params = sfim_params(sfint_file, baseline_state, local_base_option, output_prefix)
    return sfim_execute(params, execution);
}


export {
      SFIM_METADATA,
      SfimOutputs,
      SfimParameters,
      sfim,
      sfim_params,
};
