// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPHERE_SUBJECT_RH_METADATA: Metadata = {
    id: "3f5f7069b0a16e269b65f3d28ad8762b4bb84b90.boutiques",
    name: "sphere_subject-rh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SphereSubjectRhParameters {
    "__STYXTYPE__": "sphere_subject-rh";
    "license_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sphere_subject-rh": sphere_subject_rh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sphere_subject_rh(...)`.
 *
 * @interface
 */
interface SphereSubjectRhOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function sphere_subject_rh_params(
    license_file: InputPathType,
): SphereSubjectRhParameters {
    /**
     * Build parameters.
    
     * @param license_file Path to FreeSurfer license file, can be specified with the FS_LICENSE environmental variable.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sphere_subject-rh" as const,
        "license_file": license_file,
    };
    return params;
}


function sphere_subject_rh_cargs(
    params: SphereSubjectRhParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sphere_subject-rh");
    cargs.push(
        "-rh",
        execution.inputFile((params["license_file"] ?? null))
    );
    return cargs;
}


function sphere_subject_rh_outputs(
    params: SphereSubjectRhParameters,
    execution: Execution,
): SphereSubjectRhOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SphereSubjectRhOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function sphere_subject_rh_execute(
    params: SphereSubjectRhParameters,
    execution: Execution,
): SphereSubjectRhOutputs {
    /**
     * Sphere Subject RH tool for FreeSurfer, requires valid license.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SphereSubjectRhOutputs`).
     */
    params = execution.params(params)
    const cargs = sphere_subject_rh_cargs(params, execution)
    const ret = sphere_subject_rh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sphere_subject_rh(
    license_file: InputPathType,
    runner: Runner | null = null,
): SphereSubjectRhOutputs {
    /**
     * Sphere Subject RH tool for FreeSurfer, requires valid license.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param license_file Path to FreeSurfer license file, can be specified with the FS_LICENSE environmental variable.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SphereSubjectRhOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPHERE_SUBJECT_RH_METADATA);
    const params = sphere_subject_rh_params(license_file)
    return sphere_subject_rh_execute(params, execution);
}


export {
      SPHERE_SUBJECT_RH_METADATA,
      SphereSubjectRhOutputs,
      SphereSubjectRhParameters,
      sphere_subject_rh,
      sphere_subject_rh_params,
};
