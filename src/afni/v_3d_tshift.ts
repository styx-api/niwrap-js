// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TSHIFT_METADATA: Metadata = {
    id: "d293e92c11ca3dcbc79d40d9d626b8a63d7239d4.boutiques",
    name: "3dTshift",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTshiftParameters {
    "__STYXTYPE__": "3dTshift";
    "prefix"?: string | null | undefined;
    "ignore"?: number | null | undefined;
    "in_file": InputPathType;
    "interp"?: "Fourier" | "linear" | "cubic" | "quintic" | "heptic" | null | undefined;
    "num_threads"?: number | null | undefined;
    "outputtype"?: "NIFTI" | "AFNI" | "NIFTI_GZ" | null | undefined;
    "rlt": boolean;
    "rltplus": boolean;
    "slice_encoding_direction"?: "k" | "k-" | null | undefined;
    "tpattern"?: "alt+z" | "altplus" | "alt+z2" | "alt-z" | "altminus" | "alt-z2" | "seq+z" | "seqplus" | "seq-z" | "seqminus" | null | undefined;
    "tr"?: number | null | undefined;
    "tslice"?: number | null | undefined;
    "tzero"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dTshift": v_3d_tshift_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dTshift": v_3d_tshift_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tshift(...)`.
 *
 * @interface
 */
interface V3dTshiftOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file name.
     */
    out_file: OutputPathType | null;
    /**
     * Afni formatted timing file, if ``slice_timing`` is a list.
     */
    timing_file: OutputPathType;
}


function v_3d_tshift_params(
    in_file: InputPathType,
    prefix: string | null = null,
    ignore: number | null = null,
    interp: "Fourier" | "linear" | "cubic" | "quintic" | "heptic" | null = null,
    num_threads: number | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    rlt: boolean = false,
    rltplus: boolean = false,
    slice_encoding_direction: "k" | "k-" | null = null,
    tpattern: "alt+z" | "altplus" | "alt+z2" | "alt-z" | "altminus" | "alt-z2" | "seq+z" | "seqplus" | "seq-z" | "seqminus" | null = null,
    tr: number | null = null,
    tslice: number | null = null,
    tzero: number | null = null,
): V3dTshiftParameters {
    /**
     * Build parameters.
    
     * @param in_file Input file to 3dtshift.
     * @param prefix Prefix for output image file name.
     * @param ignore Ignore the first set of points specified.
     * @param interp 'fourier' or 'linear' or 'cubic' or 'quintic' or 'heptic'. Different interpolation methods (see 3dtshift for details) default = fourier.
     * @param num_threads Set number of threads.
     * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
     * @param rlt Before shifting, remove the mean and linear trend.
     * @param rltplus Before shifting, remove the mean and linear trend and later put back the mean.
     * @param slice_encoding_direction 'k' or 'k-'. Direction in which slice_timing is specified (default: k). if negative,slice_timing is defined in reverse order, that is, the first entry corresponds to the slice with the largest index, and the final entry corresponds to slice index zero. only in effect when slice_timing is passed as list, not when it is passed as file.
     * @param tpattern 'alt+z' or 'altplus' or 'alt+z2' or 'alt-z' or 'altminus' or 'alt-z2' or 'seq+z' or 'seqplus' or 'seq-z' or 'seqminus' or a string. Use specified slice time pattern rather than one in header.
     * @param tr Manually set the tr. you can attach suffix "s" for seconds or "ms" for milliseconds.
     * @param tslice Align each slice to time offset of given slice.
     * @param tzero Align each slice to given time offset.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dTshift" as const,
        "in_file": in_file,
        "rlt": rlt,
        "rltplus": rltplus,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (ignore !== null) {
        params["ignore"] = ignore;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (num_threads !== null) {
        params["num_threads"] = num_threads;
    }
    if (outputtype !== null) {
        params["outputtype"] = outputtype;
    }
    if (slice_encoding_direction !== null) {
        params["slice_encoding_direction"] = slice_encoding_direction;
    }
    if (tpattern !== null) {
        params["tpattern"] = tpattern;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (tslice !== null) {
        params["tslice"] = tslice;
    }
    if (tzero !== null) {
        params["tzero"] = tzero;
    }
    return params;
}


function v_3d_tshift_cargs(
    params: V3dTshiftParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dTshift");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["ignore"] ?? null) !== null) {
        cargs.push(
            "-ignore",
            String((params["ignore"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "-",
            (params["interp"] ?? null)
        );
    }
    if ((params["num_threads"] ?? null) !== null) {
        cargs.push(String((params["num_threads"] ?? null)));
    }
    if ((params["outputtype"] ?? null) !== null) {
        cargs.push((params["outputtype"] ?? null));
    }
    if ((params["rlt"] ?? null)) {
        cargs.push("-rlt");
    }
    if ((params["rltplus"] ?? null)) {
        cargs.push("-rlt+");
    }
    if ((params["slice_encoding_direction"] ?? null) !== null) {
        cargs.push((params["slice_encoding_direction"] ?? null));
    }
    if ((params["tpattern"] ?? null) !== null) {
        cargs.push(
            "-tpattern",
            (params["tpattern"] ?? null)
        );
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-TR",
            String((params["tr"] ?? null))
        );
    }
    if ((params["tslice"] ?? null) !== null) {
        cargs.push(
            "-slice",
            String((params["tslice"] ?? null))
        );
    }
    if ((params["tzero"] ?? null) !== null) {
        cargs.push(
            "-tzero",
            String((params["tzero"] ?? null))
        );
    }
    return cargs;
}


function v_3d_tshift_outputs(
    params: V3dTshiftParameters,
    execution: Execution,
): V3dTshiftOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dTshiftOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
        timing_file: execution.outputFile(["timing_file"].join('')),
    };
    return ret;
}


function v_3d_tshift_execute(
    params: V3dTshiftParameters,
    execution: Execution,
): V3dTshiftOutputs {
    /**
     * Shifts voxel time series from input so that separate slices are aligned to the same temporal origin.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dTshiftOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_tshift_cargs(params, execution)
    const ret = v_3d_tshift_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_tshift(
    in_file: InputPathType,
    prefix: string | null = null,
    ignore: number | null = null,
    interp: "Fourier" | "linear" | "cubic" | "quintic" | "heptic" | null = null,
    num_threads: number | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    rlt: boolean = false,
    rltplus: boolean = false,
    slice_encoding_direction: "k" | "k-" | null = null,
    tpattern: "alt+z" | "altplus" | "alt+z2" | "alt-z" | "altminus" | "alt-z2" | "seq+z" | "seqplus" | "seq-z" | "seqminus" | null = null,
    tr: number | null = null,
    tslice: number | null = null,
    tzero: number | null = null,
    runner: Runner | null = null,
): V3dTshiftOutputs {
    /**
     * Shifts voxel time series from input so that separate slices are aligned to the same temporal origin.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param in_file Input file to 3dtshift.
     * @param prefix Prefix for output image file name.
     * @param ignore Ignore the first set of points specified.
     * @param interp 'fourier' or 'linear' or 'cubic' or 'quintic' or 'heptic'. Different interpolation methods (see 3dtshift for details) default = fourier.
     * @param num_threads Set number of threads.
     * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
     * @param rlt Before shifting, remove the mean and linear trend.
     * @param rltplus Before shifting, remove the mean and linear trend and later put back the mean.
     * @param slice_encoding_direction 'k' or 'k-'. Direction in which slice_timing is specified (default: k). if negative,slice_timing is defined in reverse order, that is, the first entry corresponds to the slice with the largest index, and the final entry corresponds to slice index zero. only in effect when slice_timing is passed as list, not when it is passed as file.
     * @param tpattern 'alt+z' or 'altplus' or 'alt+z2' or 'alt-z' or 'altminus' or 'alt-z2' or 'seq+z' or 'seqplus' or 'seq-z' or 'seqminus' or a string. Use specified slice time pattern rather than one in header.
     * @param tr Manually set the tr. you can attach suffix "s" for seconds or "ms" for milliseconds.
     * @param tslice Align each slice to time offset of given slice.
     * @param tzero Align each slice to given time offset.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dTshiftOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TSHIFT_METADATA);
    const params = v_3d_tshift_params(in_file, prefix, ignore, interp, num_threads, outputtype, rlt, rltplus, slice_encoding_direction, tpattern, tr, tslice, tzero)
    return v_3d_tshift_execute(params, execution);
}


export {
      V3dTshiftOutputs,
      V3dTshiftParameters,
      V_3D_TSHIFT_METADATA,
      v_3d_tshift,
      v_3d_tshift_params,
};
