// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GETFULLPATH_METADATA: Metadata = {
    id: "35adb422237513a6ef638025617ac7d09458620d.boutiques",
    name: "getfullpath",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GetfullpathParameters {
    "@type": "freesurfer.getfullpath";
    "filename": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.getfullpath": getfullpath_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `getfullpath(...)`.
 *
 * @interface
 */
interface GetfullpathOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filename Filename for which to get the full path.
 *
 * @returns Parameter dictionary
 */
function getfullpath_params(
    filename: string,
): GetfullpathParameters {
    const params = {
        "@type": "freesurfer.getfullpath" as const,
        "filename": filename,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function getfullpath_cargs(
    params: GetfullpathParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("getfullpath");
    cargs.push((params["filename"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function getfullpath_outputs(
    params: GetfullpathParameters,
    execution: Execution,
): GetfullpathOutputs {
    const ret: GetfullpathOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A utility to retrieve the full path of a specified file or directory.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GetfullpathOutputs`).
 */
function getfullpath_execute(
    params: GetfullpathParameters,
    runner: Runner | null = null,
): GetfullpathOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GETFULLPATH_METADATA);
    params = execution.params(params)
    const cargs = getfullpath_cargs(params, execution)
    const ret = getfullpath_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A utility to retrieve the full path of a specified file or directory.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param filename Filename for which to get the full path.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GetfullpathOutputs`).
 */
function getfullpath(
    filename: string,
    runner: Runner | null = null,
): GetfullpathOutputs {
    const params = getfullpath_params(filename)
    return getfullpath_execute(params, runner);
}


export {
      GETFULLPATH_METADATA,
      GetfullpathOutputs,
      GetfullpathParameters,
      getfullpath,
      getfullpath_execute,
      getfullpath_params,
};
