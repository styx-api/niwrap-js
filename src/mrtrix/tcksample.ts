// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCKSAMPLE_METADATA: Metadata = {
    id: "2488f9026c6dd28f92298634210243b7e9884d69.boutiques",
    name: "tcksample",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface TcksampleConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface TcksampleParameters {
    "__STYXTYPE__": "tcksample";
    "stat_tck"?: string | null | undefined;
    "nointerp": boolean;
    "precise": boolean;
    "use_tdi_fraction": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<TcksampleConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "tracks": InputPathType;
    "image": InputPathType;
    "values": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tcksample": tcksample_cargs,
        "config": tcksample_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "tcksample": tcksample_outputs,
    };
    return outputsFuncs[t];
}


function tcksample_config_params(
    key: string,
    value: string,
): TcksampleConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function tcksample_config_cargs(
    params: TcksampleConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `tcksample(...)`.
 *
 * @interface
 */
interface TcksampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output sampled values
     */
    values: OutputPathType;
}


function tcksample_params(
    tracks: InputPathType,
    image: InputPathType,
    values: string,
    stat_tck: string | null = null,
    nointerp: boolean = false,
    precise: boolean = false,
    use_tdi_fraction: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TcksampleConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): TcksampleParameters {
    /**
     * Build parameters.
    
     * @param tracks the input track file
     * @param image the image to be sampled
     * @param values the output sampled values
     * @param stat_tck compute some statistic from the values along each streamline (options are: mean,median,min,max)
     * @param nointerp do not use trilinear interpolation when sampling image values
     * @param precise use the precise mechanism for mapping streamlines to voxels (obviates the need for trilinear interpolation) (only applicable if some per-streamline statistic is requested)
     * @param use_tdi_fraction each streamline is assigned a fraction of the image intensity in each voxel based on the fraction of the track density contributed by that streamline (this is only appropriate for processing a whole-brain tractogram, and images for which the quantiative parameter is additive)
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tcksample" as const,
        "nointerp": nointerp,
        "precise": precise,
        "use_tdi_fraction": use_tdi_fraction,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "tracks": tracks,
        "image": image,
        "values": values,
    };
    if (stat_tck !== null) {
        params["stat_tck"] = stat_tck;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function tcksample_cargs(
    params: TcksampleParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tcksample");
    if ((params["stat_tck"] ?? null) !== null) {
        cargs.push(
            "-stat_tck",
            (params["stat_tck"] ?? null)
        );
    }
    if ((params["nointerp"] ?? null)) {
        cargs.push("-nointerp");
    }
    if ((params["precise"] ?? null)) {
        cargs.push("-precise");
    }
    if ((params["use_tdi_fraction"] ?? null)) {
        cargs.push("-use_tdi_fraction");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["tracks"] ?? null)));
    cargs.push(execution.inputFile((params["image"] ?? null)));
    cargs.push((params["values"] ?? null));
    return cargs;
}


function tcksample_outputs(
    params: TcksampleParameters,
    execution: Execution,
): TcksampleOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TcksampleOutputs = {
        root: execution.outputFile("."),
        values: execution.outputFile([(params["values"] ?? null)].join('')),
    };
    return ret;
}


function tcksample_execute(
    params: TcksampleParameters,
    execution: Execution,
): TcksampleOutputs {
    /**
     * Sample values of an associated image along tracks.
     * 
     * By default, the value of the underlying image at each point along the track is written to either an ASCII file (with all values for each track on the same line), or a track scalar file (.tsf). Alternatively, some statistic can be taken from the values along each streamline and written to a vector file.
     * 
     * References:
     * 
     * * If using -precise option: Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT: Spherical-deconvolution informed filtering of tractograms. NeuroImage, 2013, 67, 298-312.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TcksampleOutputs`).
     */
    params = execution.params(params)
    const cargs = tcksample_cargs(params, execution)
    const ret = tcksample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tcksample(
    tracks: InputPathType,
    image: InputPathType,
    values: string,
    stat_tck: string | null = null,
    nointerp: boolean = false,
    precise: boolean = false,
    use_tdi_fraction: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TcksampleConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): TcksampleOutputs {
    /**
     * Sample values of an associated image along tracks.
     * 
     * By default, the value of the underlying image at each point along the track is written to either an ASCII file (with all values for each track on the same line), or a track scalar file (.tsf). Alternatively, some statistic can be taken from the values along each streamline and written to a vector file.
     * 
     * References:
     * 
     * * If using -precise option: Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT: Spherical-deconvolution informed filtering of tractograms. NeuroImage, 2013, 67, 298-312.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param tracks the input track file
     * @param image the image to be sampled
     * @param values the output sampled values
     * @param stat_tck compute some statistic from the values along each streamline (options are: mean,median,min,max)
     * @param nointerp do not use trilinear interpolation when sampling image values
     * @param precise use the precise mechanism for mapping streamlines to voxels (obviates the need for trilinear interpolation) (only applicable if some per-streamline statistic is requested)
     * @param use_tdi_fraction each streamline is assigned a fraction of the image intensity in each voxel based on the fraction of the track density contributed by that streamline (this is only appropriate for processing a whole-brain tractogram, and images for which the quantiative parameter is additive)
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TcksampleOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCKSAMPLE_METADATA);
    const params = tcksample_params(tracks, image, values, stat_tck, nointerp, precise, use_tdi_fraction, info, quiet, debug, force, nthreads, config, help, version)
    return tcksample_execute(params, execution);
}


export {
      TCKSAMPLE_METADATA,
      TcksampleConfigParameters,
      TcksampleOutputs,
      TcksampleParameters,
      tcksample,
      tcksample_config_params,
      tcksample_params,
};
