// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKEROT_METADATA: Metadata = {
    id: "ef60d83a5829289551593ecda4455fd09243cfb5.boutiques",
    name: "makerot",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MakerotParameters {
    "__STYXTYPE__": "makerot";
    "axis"?: string | null | undefined;
    "cov"?: InputPathType | null | undefined;
    "center"?: string | null | undefined;
    "output_file"?: string | null | undefined;
    "verbose_flag": boolean;
    "help_flag": boolean;
    "theta": number;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "makerot": makerot_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "makerot": makerot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `makerot(...)`.
 *
 * @interface
 */
interface MakerotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file for the rotation matrix
     */
    matrix_output: OutputPathType | null;
}


function makerot_params(
    theta: number,
    axis: string | null = null,
    cov: InputPathType | null = null,
    center: string | null = null,
    output_file: string | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): MakerotParameters {
    /**
     * Build parameters.
    
     * @param theta Angle of rotation (in degrees)
     * @param axis Unnormalized axis vector (comma separated)
     * @param cov Image filename used for center of volume
     * @param center Center of rotation in mm (comma separated)
     * @param output_file Output filename for matrix
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display help message
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "makerot" as const,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
        "theta": theta,
    };
    if (axis !== null) {
        params["axis"] = axis;
    }
    if (cov !== null) {
        params["cov"] = cov;
    }
    if (center !== null) {
        params["center"] = center;
    }
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


function makerot_cargs(
    params: MakerotParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("makerot");
    if ((params["axis"] ?? null) !== null) {
        cargs.push(
            "--axis",
            (params["axis"] ?? null)
        );
    }
    if ((params["cov"] ?? null) !== null) {
        cargs.push(
            "--cov",
            execution.inputFile((params["cov"] ?? null))
        );
    }
    if ((params["center"] ?? null) !== null) {
        cargs.push(
            "--centre",
            (params["center"] ?? null)
        );
    }
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["output_file"] ?? null)
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("--verbose");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    cargs.push(
        "--theta",
        String((params["theta"] ?? null))
    );
    return cargs;
}


function makerot_outputs(
    params: MakerotParameters,
    execution: Execution,
): MakerotOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MakerotOutputs = {
        root: execution.outputFile("."),
        matrix_output: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function makerot_execute(
    params: MakerotParameters,
    execution: Execution,
): MakerotOutputs {
    /**
     * Tool to create a rotation matrix for a given angle and axis of rotation.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MakerotOutputs`).
     */
    params = execution.params(params)
    const cargs = makerot_cargs(params, execution)
    const ret = makerot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function makerot(
    theta: number,
    axis: string | null = null,
    cov: InputPathType | null = null,
    center: string | null = null,
    output_file: string | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MakerotOutputs {
    /**
     * Tool to create a rotation matrix for a given angle and axis of rotation.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param theta Angle of rotation (in degrees)
     * @param axis Unnormalized axis vector (comma separated)
     * @param cov Image filename used for center of volume
     * @param center Center of rotation in mm (comma separated)
     * @param output_file Output filename for matrix
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display help message
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MakerotOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKEROT_METADATA);
    const params = makerot_params(theta, axis, cov, center, output_file, verbose_flag, help_flag)
    return makerot_execute(params, execution);
}


export {
      MAKEROT_METADATA,
      MakerotOutputs,
      MakerotParameters,
      makerot,
      makerot_params,
};
