// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DICOM_HDR_METADATA: Metadata = {
    id: "06030930d3116d7bf58316357750a3ae68688ced.boutiques",
    name: "dicom_hdr",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface DicomHdrParameters {
    "@type": "afni.dicom_hdr";
    "files": Array<InputPathType>;
    "hex": boolean;
    "noname": boolean;
    "sexinfo": boolean;
    "mulfram": boolean;
    "v_dump"?: number | null | undefined;
    "no_length": boolean;
    "slice_times": boolean;
    "slice_times_verb": boolean;
    "siemens_csa_data": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.dicom_hdr": dicom_hdr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dicom_hdr(...)`.
 *
 * @interface
 */
interface DicomHdrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param files DICOM file(s) to read
 * @param hex Include hexadecimal printout for integer values.
 * @param noname Don't include element names in the printout.
 * @param sexinfo Dump Siemens EXtra INFO text (0029 1020), if present (can be VERY lengthy).
 * @param mulfram Dump multi-frame information, if present (1 line per frame, plus an XML-style header/footer). This option also implies -noname.
 * @param v_dump Dump n words of binary data also.
 * @param no_length Skip lengths and offsets (helps diffs).
 * @param slice_times Show slice times from Siemens mosaic images.
 * @param slice_times_verb Show slice times from Siemens mosaic images verbosely. (multiple uses increase verbosity, can dump CSA data)
 * @param siemens_csa_data Same as 3 -slice_times_verb opts.
 *
 * @returns Parameter dictionary
 */
function dicom_hdr_params(
    files: Array<InputPathType>,
    hex: boolean = false,
    noname: boolean = false,
    sexinfo: boolean = false,
    mulfram: boolean = false,
    v_dump: number | null = null,
    no_length: boolean = false,
    slice_times: boolean = false,
    slice_times_verb: boolean = false,
    siemens_csa_data: boolean = false,
): DicomHdrParameters {
    const params = {
        "@type": "afni.dicom_hdr" as const,
        "files": files,
        "hex": hex,
        "noname": noname,
        "sexinfo": sexinfo,
        "mulfram": mulfram,
        "no_length": no_length,
        "slice_times": slice_times,
        "slice_times_verb": slice_times_verb,
        "siemens_csa_data": siemens_csa_data,
    };
    if (v_dump !== null) {
        params["v_dump"] = v_dump;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dicom_hdr_cargs(
    params: DicomHdrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dicom_hdr");
    cargs.push(...(params["files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["hex"] ?? null)) {
        cargs.push("-hex");
    }
    if ((params["noname"] ?? null)) {
        cargs.push("-noname");
    }
    if ((params["sexinfo"] ?? null)) {
        cargs.push("-sexinfo");
    }
    if ((params["mulfram"] ?? null)) {
        cargs.push("-mulfram");
    }
    if ((params["v_dump"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["v_dump"] ?? null))
        );
    }
    if ((params["no_length"] ?? null)) {
        cargs.push("-no_length");
    }
    if ((params["slice_times"] ?? null)) {
        cargs.push("-slice_times");
    }
    if ((params["slice_times_verb"] ?? null)) {
        cargs.push("-slice_times_verb");
    }
    if ((params["siemens_csa_data"] ?? null)) {
        cargs.push("-siemens_csa_data");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dicom_hdr_outputs(
    params: DicomHdrParameters,
    execution: Execution,
): DicomHdrOutputs {
    const ret: DicomHdrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool to print DICOM file information to stdout.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `DicomHdrOutputs`).
 */
function dicom_hdr_execute(
    params: DicomHdrParameters,
    execution: Execution,
): DicomHdrOutputs {
    params = execution.params(params)
    const cargs = dicom_hdr_cargs(params, execution)
    const ret = dicom_hdr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to print DICOM file information to stdout.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param files DICOM file(s) to read
 * @param hex Include hexadecimal printout for integer values.
 * @param noname Don't include element names in the printout.
 * @param sexinfo Dump Siemens EXtra INFO text (0029 1020), if present (can be VERY lengthy).
 * @param mulfram Dump multi-frame information, if present (1 line per frame, plus an XML-style header/footer). This option also implies -noname.
 * @param v_dump Dump n words of binary data also.
 * @param no_length Skip lengths and offsets (helps diffs).
 * @param slice_times Show slice times from Siemens mosaic images.
 * @param slice_times_verb Show slice times from Siemens mosaic images verbosely. (multiple uses increase verbosity, can dump CSA data)
 * @param siemens_csa_data Same as 3 -slice_times_verb opts.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DicomHdrOutputs`).
 */
function dicom_hdr(
    files: Array<InputPathType>,
    hex: boolean = false,
    noname: boolean = false,
    sexinfo: boolean = false,
    mulfram: boolean = false,
    v_dump: number | null = null,
    no_length: boolean = false,
    slice_times: boolean = false,
    slice_times_verb: boolean = false,
    siemens_csa_data: boolean = false,
    runner: Runner | null = null,
): DicomHdrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DICOM_HDR_METADATA);
    const params = dicom_hdr_params(files, hex, noname, sexinfo, mulfram, v_dump, no_length, slice_times, slice_times_verb, siemens_csa_data)
    return dicom_hdr_execute(params, execution);
}


export {
      DICOM_HDR_METADATA,
      DicomHdrOutputs,
      DicomHdrParameters,
      dicom_hdr,
      dicom_hdr_cargs,
      dicom_hdr_execute,
      dicom_hdr_outputs,
      dicom_hdr_params,
};
