// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRINFO_METADATA: Metadata = {
    id: "8282cf2096dd2c6c171488cc71738cd947e2697c.boutiques",
    name: "mrinfo",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrinfoPropertyParameters {
    "@type": "mrtrix.mrinfo.property";
    "key": string;
}


interface MrinfoFslgradParameters {
    "@type": "mrtrix.mrinfo.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface MrinfoExportGradFslParameters {
    "@type": "mrtrix.mrinfo.export_grad_fsl";
    "bvecs_path": string;
    "bvals_path": string;
}


interface MrinfoExportPeEddyParameters {
    "@type": "mrtrix.mrinfo.export_pe_eddy";
    "config": string;
    "indices": string;
}


interface MrinfoConfigParameters {
    "@type": "mrtrix.mrinfo.config";
    "key": string;
    "value": string;
}


interface MrinfoParameters {
    "@type": "mrtrix.mrinfo";
    "all": boolean;
    "name": boolean;
    "format": boolean;
    "ndim": boolean;
    "size": boolean;
    "spacing": boolean;
    "datatype": boolean;
    "strides": boolean;
    "offset": boolean;
    "multiplier": boolean;
    "transform": boolean;
    "property"?: Array<MrinfoPropertyParameters> | null | undefined;
    "json_keyval"?: string | null | undefined;
    "json_all"?: string | null | undefined;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: MrinfoFslgradParameters | null | undefined;
    "bvalue_scaling"?: string | null | undefined;
    "export_grad_mrtrix"?: string | null | undefined;
    "export_grad_fsl"?: MrinfoExportGradFslParameters | null | undefined;
    "dwgrad": boolean;
    "shell_bvalues": boolean;
    "shell_sizes": boolean;
    "shell_indices": boolean;
    "export_pe_table"?: string | null | undefined;
    "export_pe_eddy"?: MrinfoExportPeEddyParameters | null | undefined;
    "petable": boolean;
    "nodelete": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrinfoConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "image": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.mrinfo": mrinfo_cargs,
        "mrtrix.mrinfo.property": mrinfo_property_cargs,
        "mrtrix.mrinfo.fslgrad": mrinfo_fslgrad_cargs,
        "mrtrix.mrinfo.export_grad_fsl": mrinfo_export_grad_fsl_cargs,
        "mrtrix.mrinfo.export_pe_eddy": mrinfo_export_pe_eddy_cargs,
        "mrtrix.mrinfo.config": mrinfo_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.mrinfo": mrinfo_outputs,
        "mrtrix.mrinfo.export_grad_fsl": mrinfo_export_grad_fsl_outputs,
        "mrtrix.mrinfo.export_pe_eddy": mrinfo_export_pe_eddy_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key any text properties embedded in the image header under the specified key (use 'all' to list all keys found)
 *
 * @returns Parameter dictionary
 */
function mrinfo_property_params(
    key: string,
): MrinfoPropertyParameters {
    const params = {
        "@type": "mrtrix.mrinfo.property" as const,
        "key": key,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrinfo_property_cargs(
    params: MrinfoPropertyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-property");
    cargs.push((params["key"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function mrinfo_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): MrinfoFslgradParameters {
    const params = {
        "@type": "mrtrix.mrinfo.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrinfo_fslgrad_cargs(
    params: MrinfoFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `MrinfoExportGradFslParameters | null(...)`.
 *
 * @interface
 */
interface MrinfoExportGradFslOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
     */
    bvecs_path: OutputPathType;
    /**
     * export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
     */
    bvals_path: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param bvecs_path export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 * @param bvals_path export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 *
 * @returns Parameter dictionary
 */
function mrinfo_export_grad_fsl_params(
    bvecs_path: string,
    bvals_path: string,
): MrinfoExportGradFslParameters {
    const params = {
        "@type": "mrtrix.mrinfo.export_grad_fsl" as const,
        "bvecs_path": bvecs_path,
        "bvals_path": bvals_path,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrinfo_export_grad_fsl_cargs(
    params: MrinfoExportGradFslParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-export_grad_fsl");
    cargs.push((params["bvecs_path"] ?? null));
    cargs.push((params["bvals_path"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrinfo_export_grad_fsl_outputs(
    params: MrinfoExportGradFslParameters,
    execution: Execution,
): MrinfoExportGradFslOutputs {
    const ret: MrinfoExportGradFslOutputs = {
        root: execution.outputFile("."),
        bvecs_path: execution.outputFile([(params["bvecs_path"] ?? null)].join('')),
        bvals_path: execution.outputFile([(params["bvals_path"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `MrinfoExportPeEddyParameters | null(...)`.
 *
 * @interface
 */
interface MrinfoExportPeEddyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * export phase-encoding information to an EDDY-style config / index file pair
     */
    config: OutputPathType;
    /**
     * export phase-encoding information to an EDDY-style config / index file pair
     */
    indices: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param config export phase-encoding information to an EDDY-style config / index file pair
 * @param indices export phase-encoding information to an EDDY-style config / index file pair
 *
 * @returns Parameter dictionary
 */
function mrinfo_export_pe_eddy_params(
    config: string,
    indices: string,
): MrinfoExportPeEddyParameters {
    const params = {
        "@type": "mrtrix.mrinfo.export_pe_eddy" as const,
        "config": config,
        "indices": indices,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrinfo_export_pe_eddy_cargs(
    params: MrinfoExportPeEddyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-export_pe_eddy");
    cargs.push((params["config"] ?? null));
    cargs.push((params["indices"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrinfo_export_pe_eddy_outputs(
    params: MrinfoExportPeEddyParameters,
    execution: Execution,
): MrinfoExportPeEddyOutputs {
    const ret: MrinfoExportPeEddyOutputs = {
        root: execution.outputFile("."),
        config: execution.outputFile([(params["config"] ?? null)].join('')),
        indices: execution.outputFile([(params["indices"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrinfo_config_params(
    key: string,
    value: string,
): MrinfoConfigParameters {
    const params = {
        "@type": "mrtrix.mrinfo.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrinfo_config_cargs(
    params: MrinfoConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mrinfo(...)`.
 *
 * @interface
 */
interface MrinfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * export header key/value entries to a JSON file 
     */
    json_keyval: OutputPathType | null;
    /**
     * export all header contents to a JSON file 
     */
    json_all: OutputPathType | null;
    /**
     * export the diffusion-weighted gradient table to file in MRtrix format 
     */
    export_grad_mrtrix: OutputPathType | null;
    /**
     * export phase-encoding table to file 
     */
    export_pe_table: OutputPathType | null;
    /**
     * Outputs from `mrinfo_export_grad_fsl_outputs`.
     */
    export_grad_fsl: MrinfoExportGradFslOutputs | null;
    /**
     * Outputs from `mrinfo_export_pe_eddy_outputs`.
     */
    export_pe_eddy: MrinfoExportPeEddyOutputs | null;
}


/**
 * Build parameters.
 *
 * @param image the input image(s).
 * @param all print all properties, rather than the first and last 2 of each.
 * @param name print the file system path of the image
 * @param format image file format
 * @param ndim number of image dimensions
 * @param size image size along each axis
 * @param spacing voxel spacing along each image dimension
 * @param datatype data type used for image data storage
 * @param strides data strides i.e. order and direction of axes data layout
 * @param offset image intensity offset
 * @param multiplier image intensity multiplier
 * @param transform the transformation from image coordinates [mm] to scanner / real world coordinates [mm]
 * @param property any text properties embedded in the image header under the specified key (use 'all' to list all keys found)
 * @param json_keyval export header key/value entries to a JSON file
 * @param json_all export all header contents to a JSON file
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvalue_scaling enable or disable scaling of diffusion b-values by the square of the corresponding DW gradient norm (see Desciption). Valid choices are yes/no, true/false, 0/1 (default: automatic).
 * @param export_grad_mrtrix export the diffusion-weighted gradient table to file in MRtrix format
 * @param export_grad_fsl export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 * @param dwgrad the diffusion-weighting gradient table, as interpreted by MRtrix3
 * @param shell_bvalues list the average b-value of each shell
 * @param shell_sizes list the number of volumes in each shell
 * @param shell_indices list the image volumes attributed to each b-value shell
 * @param export_pe_table export phase-encoding table to file
 * @param export_pe_eddy export phase-encoding information to an EDDY-style config / index file pair
 * @param petable print the phase encoding table
 * @param nodelete don't delete temporary images or images passed to mrinfo via Unix pipes
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrinfo_params(
    image: Array<InputPathType>,
    all: boolean = false,
    name: boolean = false,
    format: boolean = false,
    ndim: boolean = false,
    size: boolean = false,
    spacing: boolean = false,
    datatype: boolean = false,
    strides: boolean = false,
    offset: boolean = false,
    multiplier: boolean = false,
    transform: boolean = false,
    property: Array<MrinfoPropertyParameters> | null = null,
    json_keyval: string | null = null,
    json_all: string | null = null,
    grad: InputPathType | null = null,
    fslgrad: MrinfoFslgradParameters | null = null,
    bvalue_scaling: string | null = null,
    export_grad_mrtrix: string | null = null,
    export_grad_fsl: MrinfoExportGradFslParameters | null = null,
    dwgrad: boolean = false,
    shell_bvalues: boolean = false,
    shell_sizes: boolean = false,
    shell_indices: boolean = false,
    export_pe_table: string | null = null,
    export_pe_eddy: MrinfoExportPeEddyParameters | null = null,
    petable: boolean = false,
    nodelete: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrinfoConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrinfoParameters {
    const params = {
        "@type": "mrtrix.mrinfo" as const,
        "all": all,
        "name": name,
        "format": format,
        "ndim": ndim,
        "size": size,
        "spacing": spacing,
        "datatype": datatype,
        "strides": strides,
        "offset": offset,
        "multiplier": multiplier,
        "transform": transform,
        "dwgrad": dwgrad,
        "shell_bvalues": shell_bvalues,
        "shell_sizes": shell_sizes,
        "shell_indices": shell_indices,
        "petable": petable,
        "nodelete": nodelete,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "image": image,
    };
    if (property !== null) {
        params["property"] = property;
    }
    if (json_keyval !== null) {
        params["json_keyval"] = json_keyval;
    }
    if (json_all !== null) {
        params["json_all"] = json_all;
    }
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (bvalue_scaling !== null) {
        params["bvalue_scaling"] = bvalue_scaling;
    }
    if (export_grad_mrtrix !== null) {
        params["export_grad_mrtrix"] = export_grad_mrtrix;
    }
    if (export_grad_fsl !== null) {
        params["export_grad_fsl"] = export_grad_fsl;
    }
    if (export_pe_table !== null) {
        params["export_pe_table"] = export_pe_table;
    }
    if (export_pe_eddy !== null) {
        params["export_pe_eddy"] = export_pe_eddy;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrinfo_cargs(
    params: MrinfoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrinfo");
    if ((params["all"] ?? null)) {
        cargs.push("-all");
    }
    if ((params["name"] ?? null)) {
        cargs.push("-name");
    }
    if ((params["format"] ?? null)) {
        cargs.push("-format");
    }
    if ((params["ndim"] ?? null)) {
        cargs.push("-ndim");
    }
    if ((params["size"] ?? null)) {
        cargs.push("-size");
    }
    if ((params["spacing"] ?? null)) {
        cargs.push("-spacing");
    }
    if ((params["datatype"] ?? null)) {
        cargs.push("-datatype");
    }
    if ((params["strides"] ?? null)) {
        cargs.push("-strides");
    }
    if ((params["offset"] ?? null)) {
        cargs.push("-offset");
    }
    if ((params["multiplier"] ?? null)) {
        cargs.push("-multiplier");
    }
    if ((params["transform"] ?? null)) {
        cargs.push("-transform");
    }
    if ((params["property"] ?? null) !== null) {
        cargs.push(...(params["property"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["json_keyval"] ?? null) !== null) {
        cargs.push(
            "-json_keyval",
            (params["json_keyval"] ?? null)
        );
    }
    if ((params["json_all"] ?? null) !== null) {
        cargs.push(
            "-json_all",
            (params["json_all"] ?? null)
        );
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["bvalue_scaling"] ?? null) !== null) {
        cargs.push(
            "-bvalue_scaling",
            (params["bvalue_scaling"] ?? null)
        );
    }
    if ((params["export_grad_mrtrix"] ?? null) !== null) {
        cargs.push(
            "-export_grad_mrtrix",
            (params["export_grad_mrtrix"] ?? null)
        );
    }
    if ((params["export_grad_fsl"] ?? null) !== null) {
        cargs.push(...dynCargs((params["export_grad_fsl"] ?? null)["@type"])((params["export_grad_fsl"] ?? null), execution));
    }
    if ((params["dwgrad"] ?? null)) {
        cargs.push("-dwgrad");
    }
    if ((params["shell_bvalues"] ?? null)) {
        cargs.push("-shell_bvalues");
    }
    if ((params["shell_sizes"] ?? null)) {
        cargs.push("-shell_sizes");
    }
    if ((params["shell_indices"] ?? null)) {
        cargs.push("-shell_indices");
    }
    if ((params["export_pe_table"] ?? null) !== null) {
        cargs.push(
            "-export_pe_table",
            (params["export_pe_table"] ?? null)
        );
    }
    if ((params["export_pe_eddy"] ?? null) !== null) {
        cargs.push(...dynCargs((params["export_pe_eddy"] ?? null)["@type"])((params["export_pe_eddy"] ?? null), execution));
    }
    if ((params["petable"] ?? null)) {
        cargs.push("-petable");
    }
    if ((params["nodelete"] ?? null)) {
        cargs.push("-nodelete");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...(params["image"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrinfo_outputs(
    params: MrinfoParameters,
    execution: Execution,
): MrinfoOutputs {
    const ret: MrinfoOutputs = {
        root: execution.outputFile("."),
        json_keyval: ((params["json_keyval"] ?? null) !== null) ? execution.outputFile([(params["json_keyval"] ?? null)].join('')) : null,
        json_all: ((params["json_all"] ?? null) !== null) ? execution.outputFile([(params["json_all"] ?? null)].join('')) : null,
        export_grad_mrtrix: ((params["export_grad_mrtrix"] ?? null) !== null) ? execution.outputFile([(params["export_grad_mrtrix"] ?? null)].join('')) : null,
        export_pe_table: ((params["export_pe_table"] ?? null) !== null) ? execution.outputFile([(params["export_pe_table"] ?? null)].join('')) : null,
        export_grad_fsl: (dynOutputs((params["export_grad_fsl"] ?? null)["@type"])?.((params["export_grad_fsl"] ?? null), execution) ?? null),
        export_pe_eddy: (dynOutputs((params["export_pe_eddy"] ?? null)["@type"])?.((params["export_pe_eddy"] ?? null), execution) ?? null),
    };
    return ret;
}


/**
 * mrinfo
 *
 * Display image header information, or extract specific information from the header.
 *
 * By default, all information contained in each image header will be printed to the console in a reader-friendly format.
 *
 * Alternatively, command-line options may be used to extract specific details from the header(s); these are printed to the console in a format more appropriate for scripting purposes or piping to file. If multiple options and/or images are provided, the requested header fields will be printed in the order in which they appear in the help page, with all requested details from each input image in sequence printed before the next image is processed.
 *
 * The command can also write the diffusion gradient table from a single input image to file; either in the MRtrix or FSL format (bvecs/bvals file pair; includes appropriate diffusion gradient vector reorientation)
 *
 * The -dwgrad, -export_* and -shell_* options provide (information about) the diffusion weighting gradient table after it has been processed by the MRtrix3 back-end (vectors normalised, b-values scaled by the square of the vector norm, depending on the -bvalue_scaling option). To see the raw gradient table information as stored in the image header, i.e. without MRtrix3 back-end processing, use "-property dw_scheme".
 *
 * The -bvalue_scaling option controls an aspect of the import of diffusion gradient tables. When the input diffusion-weighting direction vectors have norms that differ substantially from unity, the b-values will be scaled by the square of their corresponding vector norm (this is how multi-shell acquisitions are frequently achieved on scanner platforms). However in some rare instances, the b-values may be correct, despite the vectors not being of unit norm (or conversely, the b-values may need to be rescaled even though the vectors are close to unit norm). This option allows the user to control this operation and override MRrtix3's automatic detection.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrinfoOutputs`).
 */
function mrinfo_execute(
    params: MrinfoParameters,
    runner: Runner | null = null,
): MrinfoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRINFO_METADATA);
    params = execution.params(params)
    const cargs = mrinfo_cargs(params, execution)
    const ret = mrinfo_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mrinfo
 *
 * Display image header information, or extract specific information from the header.
 *
 * By default, all information contained in each image header will be printed to the console in a reader-friendly format.
 *
 * Alternatively, command-line options may be used to extract specific details from the header(s); these are printed to the console in a format more appropriate for scripting purposes or piping to file. If multiple options and/or images are provided, the requested header fields will be printed in the order in which they appear in the help page, with all requested details from each input image in sequence printed before the next image is processed.
 *
 * The command can also write the diffusion gradient table from a single input image to file; either in the MRtrix or FSL format (bvecs/bvals file pair; includes appropriate diffusion gradient vector reorientation)
 *
 * The -dwgrad, -export_* and -shell_* options provide (information about) the diffusion weighting gradient table after it has been processed by the MRtrix3 back-end (vectors normalised, b-values scaled by the square of the vector norm, depending on the -bvalue_scaling option). To see the raw gradient table information as stored in the image header, i.e. without MRtrix3 back-end processing, use "-property dw_scheme".
 *
 * The -bvalue_scaling option controls an aspect of the import of diffusion gradient tables. When the input diffusion-weighting direction vectors have norms that differ substantially from unity, the b-values will be scaled by the square of their corresponding vector norm (this is how multi-shell acquisitions are frequently achieved on scanner platforms). However in some rare instances, the b-values may be correct, despite the vectors not being of unit norm (or conversely, the b-values may need to be rescaled even though the vectors are close to unit norm). This option allows the user to control this operation and override MRrtix3's automatic detection.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param image the input image(s).
 * @param all print all properties, rather than the first and last 2 of each.
 * @param name print the file system path of the image
 * @param format image file format
 * @param ndim number of image dimensions
 * @param size image size along each axis
 * @param spacing voxel spacing along each image dimension
 * @param datatype data type used for image data storage
 * @param strides data strides i.e. order and direction of axes data layout
 * @param offset image intensity offset
 * @param multiplier image intensity multiplier
 * @param transform the transformation from image coordinates [mm] to scanner / real world coordinates [mm]
 * @param property any text properties embedded in the image header under the specified key (use 'all' to list all keys found)
 * @param json_keyval export header key/value entries to a JSON file
 * @param json_all export all header contents to a JSON file
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvalue_scaling enable or disable scaling of diffusion b-values by the square of the corresponding DW gradient norm (see Desciption). Valid choices are yes/no, true/false, 0/1 (default: automatic).
 * @param export_grad_mrtrix export the diffusion-weighted gradient table to file in MRtrix format
 * @param export_grad_fsl export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 * @param dwgrad the diffusion-weighting gradient table, as interpreted by MRtrix3
 * @param shell_bvalues list the average b-value of each shell
 * @param shell_sizes list the number of volumes in each shell
 * @param shell_indices list the image volumes attributed to each b-value shell
 * @param export_pe_table export phase-encoding table to file
 * @param export_pe_eddy export phase-encoding information to an EDDY-style config / index file pair
 * @param petable print the phase encoding table
 * @param nodelete don't delete temporary images or images passed to mrinfo via Unix pipes
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrinfoOutputs`).
 */
function mrinfo(
    image: Array<InputPathType>,
    all: boolean = false,
    name: boolean = false,
    format: boolean = false,
    ndim: boolean = false,
    size: boolean = false,
    spacing: boolean = false,
    datatype: boolean = false,
    strides: boolean = false,
    offset: boolean = false,
    multiplier: boolean = false,
    transform: boolean = false,
    property: Array<MrinfoPropertyParameters> | null = null,
    json_keyval: string | null = null,
    json_all: string | null = null,
    grad: InputPathType | null = null,
    fslgrad: MrinfoFslgradParameters | null = null,
    bvalue_scaling: string | null = null,
    export_grad_mrtrix: string | null = null,
    export_grad_fsl: MrinfoExportGradFslParameters | null = null,
    dwgrad: boolean = false,
    shell_bvalues: boolean = false,
    shell_sizes: boolean = false,
    shell_indices: boolean = false,
    export_pe_table: string | null = null,
    export_pe_eddy: MrinfoExportPeEddyParameters | null = null,
    petable: boolean = false,
    nodelete: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrinfoConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrinfoOutputs {
    const params = mrinfo_params(image, all, name, format, ndim, size, spacing, datatype, strides, offset, multiplier, transform, property, json_keyval, json_all, grad, fslgrad, bvalue_scaling, export_grad_mrtrix, export_grad_fsl, dwgrad, shell_bvalues, shell_sizes, shell_indices, export_pe_table, export_pe_eddy, petable, nodelete, info, quiet, debug, force, nthreads, config, help, version)
    return mrinfo_execute(params, runner);
}


export {
      MRINFO_METADATA,
      MrinfoConfigParameters,
      MrinfoExportGradFslOutputs,
      MrinfoExportGradFslParameters,
      MrinfoExportPeEddyOutputs,
      MrinfoExportPeEddyParameters,
      MrinfoFslgradParameters,
      MrinfoOutputs,
      MrinfoParameters,
      MrinfoPropertyParameters,
      mrinfo,
      mrinfo_config_params,
      mrinfo_execute,
      mrinfo_export_grad_fsl_params,
      mrinfo_export_pe_eddy_params,
      mrinfo_fslgrad_params,
      mrinfo_params,
      mrinfo_property_params,
};
