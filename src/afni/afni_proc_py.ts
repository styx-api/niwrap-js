// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AFNI_PROC_PY_METADATA: Metadata = {
    id: "017b6a6a466a207ea728b6a165c4413d9b08cedb.boutiques",
    name: "afni_proc.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AfniProcPyParameters {
    "@type": "afni.afni_proc.py";
    "dsets": Array<InputPathType>;
    "subj_id": string;
    "out_dir"?: string | null | undefined;
    "blocks"?: Array<string> | null | undefined;
    "anat": InputPathType;
    "echo_times"?: Array<number> | null | undefined;
    "stim_times"?: Array<InputPathType> | null | undefined;
    "stim_files"?: Array<InputPathType> | null | undefined;
    "copy_files"?: Array<InputPathType> | null | undefined;
    "copy_anat"?: InputPathType | null | undefined;
    "regress_params"?: Array<string> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.afni_proc.py": afni_proc_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.afni_proc.py": afni_proc_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `afni_proc_py(...)`.
 *
 * @interface
 */
interface AfniProcPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * All output files stored in the specified output directory.
     */
    output_directory: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dsets Specify the EPI dataset files. (e.g. epi_run1+orig, epi_run2+orig)
 * @param subj_id Specify the subject ID for the script.
 * @param anat Specify the anatomical dataset.
 * @param out_dir Specify the output directory for the script.
 * @param blocks Specify the processing blocks to apply (e.g. tshift volreg blur mask scale regress).
 * @param echo_times Specify echo times for multi-echo data processing.
 * @param stim_times Specify files used for stimulus timing in -stim_times.
 * @param stim_files Specify TR-locked stim files for 3dDeconvolve -stim_file instead of -stim_times.
 * @param copy_files Specify additional files to be copied to the results directory.
 * @param copy_anat Copy the anatomical dataset(s) to the results directory.
 * @param regress_params Specify extra options for 3dDeconvolve.
 *
 * @returns Parameter dictionary
 */
function afni_proc_py_params(
    dsets: Array<InputPathType>,
    subj_id: string,
    anat: InputPathType,
    out_dir: string | null = null,
    blocks: Array<string> | null = null,
    echo_times: Array<number> | null = null,
    stim_times: Array<InputPathType> | null = null,
    stim_files: Array<InputPathType> | null = null,
    copy_files: Array<InputPathType> | null = null,
    copy_anat: InputPathType | null = null,
    regress_params: Array<string> | null = null,
): AfniProcPyParameters {
    const params = {
        "@type": "afni.afni_proc.py" as const,
        "dsets": dsets,
        "subj_id": subj_id,
        "anat": anat,
    };
    if (out_dir !== null) {
        params["out_dir"] = out_dir;
    }
    if (blocks !== null) {
        params["blocks"] = blocks;
    }
    if (echo_times !== null) {
        params["echo_times"] = echo_times;
    }
    if (stim_times !== null) {
        params["stim_times"] = stim_times;
    }
    if (stim_files !== null) {
        params["stim_files"] = stim_files;
    }
    if (copy_files !== null) {
        params["copy_files"] = copy_files;
    }
    if (copy_anat !== null) {
        params["copy_anat"] = copy_anat;
    }
    if (regress_params !== null) {
        params["regress_params"] = regress_params;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function afni_proc_py_cargs(
    params: AfniProcPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("afni_proc.py");
    cargs.push(...(params["dsets"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["subj_id"] ?? null));
    if ((params["out_dir"] ?? null) !== null) {
        cargs.push((params["out_dir"] ?? null));
    }
    if ((params["blocks"] ?? null) !== null) {
        cargs.push(...(params["blocks"] ?? null));
    }
    cargs.push(execution.inputFile((params["anat"] ?? null)));
    if ((params["echo_times"] ?? null) !== null) {
        cargs.push(...(params["echo_times"] ?? null).map(String));
    }
    if ((params["stim_times"] ?? null) !== null) {
        cargs.push(...(params["stim_times"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["stim_files"] ?? null) !== null) {
        cargs.push(...(params["stim_files"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["copy_files"] ?? null) !== null) {
        cargs.push(...(params["copy_files"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["copy_anat"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["copy_anat"] ?? null)));
    }
    if ((params["regress_params"] ?? null) !== null) {
        cargs.push(
            "-regress_opts_3dD",
            ...(params["regress_params"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function afni_proc_py_outputs(
    params: AfniProcPyParameters,
    execution: Execution,
): AfniProcPyOutputs {
    const ret: AfniProcPyOutputs = {
        root: execution.outputFile("."),
        output_directory: ((params["out_dir"] ?? null) !== null) ? execution.outputFile([(params["out_dir"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * afni_proc.py
 *
 * Generate a tcsh script for an AFNI single subject processing stream.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AfniProcPyOutputs`).
 */
function afni_proc_py_execute(
    params: AfniProcPyParameters,
    runner: Runner | null = null,
): AfniProcPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AFNI_PROC_PY_METADATA);
    params = execution.params(params)
    const cargs = afni_proc_py_cargs(params, execution)
    const ret = afni_proc_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * afni_proc.py
 *
 * Generate a tcsh script for an AFNI single subject processing stream.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dsets Specify the EPI dataset files. (e.g. epi_run1+orig, epi_run2+orig)
 * @param subj_id Specify the subject ID for the script.
 * @param anat Specify the anatomical dataset.
 * @param out_dir Specify the output directory for the script.
 * @param blocks Specify the processing blocks to apply (e.g. tshift volreg blur mask scale regress).
 * @param echo_times Specify echo times for multi-echo data processing.
 * @param stim_times Specify files used for stimulus timing in -stim_times.
 * @param stim_files Specify TR-locked stim files for 3dDeconvolve -stim_file instead of -stim_times.
 * @param copy_files Specify additional files to be copied to the results directory.
 * @param copy_anat Copy the anatomical dataset(s) to the results directory.
 * @param regress_params Specify extra options for 3dDeconvolve.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AfniProcPyOutputs`).
 */
function afni_proc_py(
    dsets: Array<InputPathType>,
    subj_id: string,
    anat: InputPathType,
    out_dir: string | null = null,
    blocks: Array<string> | null = null,
    echo_times: Array<number> | null = null,
    stim_times: Array<InputPathType> | null = null,
    stim_files: Array<InputPathType> | null = null,
    copy_files: Array<InputPathType> | null = null,
    copy_anat: InputPathType | null = null,
    regress_params: Array<string> | null = null,
    runner: Runner | null = null,
): AfniProcPyOutputs {
    const params = afni_proc_py_params(dsets, subj_id, anat, out_dir, blocks, echo_times, stim_times, stim_files, copy_files, copy_anat, regress_params)
    return afni_proc_py_execute(params, runner);
}


export {
      AFNI_PROC_PY_METADATA,
      AfniProcPyOutputs,
      AfniProcPyParameters,
      afni_proc_py,
      afni_proc_py_execute,
      afni_proc_py_params,
};
