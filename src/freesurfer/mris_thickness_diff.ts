// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_THICKNESS_DIFF_METADATA: Metadata = {
    id: "a3ec581547cad53689b40c2404afc383dac2983f.boutiques",
    name: "mris_thickness_diff",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisThicknessDiffParameters {
    "@type"?: "freesurfer/mris_thickness_diff";
    "src_type"?: string | null | undefined;
    "trg_type"?: string | null | undefined;
    "out_file": string;
    "out_resampled"?: string | null | undefined;
    "nsmooth"?: number | null | undefined;
    "register": boolean;
    "xform"?: InputPathType | null | undefined;
    "invert": boolean;
    "src_volume"?: InputPathType | null | undefined;
    "dst_volume"?: InputPathType | null | undefined;
    "abs": boolean;
    "log_file"?: InputPathType | null | undefined;
    "subject_name"?: string | null | undefined;
}
type MrisThicknessDiffParametersTagged = Required<Pick<MrisThicknessDiffParameters, '@type'>> & MrisThicknessDiffParameters;


/**
 * Output object returned when calling `MrisThicknessDiffParameters(...)`.
 *
 * @interface
 */
interface MrisThicknessDiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with the difference mapped onto the surface
     */
    output_difference: OutputPathType;
    /**
     * Resampled output thickness file
     */
    output_resampled: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param out_file Output file name
 * @param src_type Input surface data format (curv, paint or w)
 * @param trg_type Output format (paint or w)
 * @param out_resampled Output resampled thickness
 * @param nsmooth Number of smoothing steps
 * @param register Perform ICP rigid registration
 * @param xform Apply LTA transform to align input surface1 to surface2
 * @param invert Reversely apply -xform
 * @param src_volume Source volume for -xform
 * @param dst_volume Target volume for -xform
 * @param abs Compute the std of abs-thickness-diff
 * @param log_file Log file name
 * @param subject_name Subject name (to be recorded in logfile)
 *
 * @returns Parameter dictionary
 */
function mris_thickness_diff_params(
    out_file: string,
    src_type: string | null = null,
    trg_type: string | null = null,
    out_resampled: string | null = null,
    nsmooth: number | null = null,
    register: boolean = false,
    xform: InputPathType | null = null,
    invert: boolean = false,
    src_volume: InputPathType | null = null,
    dst_volume: InputPathType | null = null,
    abs: boolean = false,
    log_file: InputPathType | null = null,
    subject_name: string | null = null,
): MrisThicknessDiffParametersTagged {
    const params = {
        "@type": "freesurfer/mris_thickness_diff" as const,
        "out_file": out_file,
        "register": register,
        "invert": invert,
        "abs": abs,
    };
    if (src_type !== null) {
        params["src_type"] = src_type;
    }
    if (trg_type !== null) {
        params["trg_type"] = trg_type;
    }
    if (out_resampled !== null) {
        params["out_resampled"] = out_resampled;
    }
    if (nsmooth !== null) {
        params["nsmooth"] = nsmooth;
    }
    if (xform !== null) {
        params["xform"] = xform;
    }
    if (src_volume !== null) {
        params["src_volume"] = src_volume;
    }
    if (dst_volume !== null) {
        params["dst_volume"] = dst_volume;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (subject_name !== null) {
        params["subject_name"] = subject_name;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_thickness_diff_cargs(
    params: MrisThicknessDiffParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_thickness_diff");
    if ((params["src_type"] ?? null) !== null) {
        cargs.push(
            "-src_type",
            (params["src_type"] ?? null)
        );
    }
    if ((params["trg_type"] ?? null) !== null) {
        cargs.push(
            "-trg_type",
            (params["trg_type"] ?? null)
        );
    }
    cargs.push(
        "-out",
        (params["out_file"] ?? null)
    );
    if ((params["out_resampled"] ?? null) !== null) {
        cargs.push(
            "-out_resampled",
            (params["out_resampled"] ?? null)
        );
    }
    if ((params["nsmooth"] ?? null) !== null) {
        cargs.push(
            "-nsmooth",
            String((params["nsmooth"] ?? null))
        );
    }
    if ((params["register"] ?? false)) {
        cargs.push("-register");
    }
    if ((params["xform"] ?? null) !== null) {
        cargs.push(
            "-xform",
            execution.inputFile((params["xform"] ?? null))
        );
    }
    if ((params["invert"] ?? false)) {
        cargs.push("-invert");
    }
    if ((params["src_volume"] ?? null) !== null) {
        cargs.push(
            "-src",
            execution.inputFile((params["src_volume"] ?? null))
        );
    }
    if ((params["dst_volume"] ?? null) !== null) {
        cargs.push(
            "-dst",
            execution.inputFile((params["dst_volume"] ?? null))
        );
    }
    if ((params["abs"] ?? false)) {
        cargs.push("-abs");
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-L",
            execution.inputFile((params["log_file"] ?? null))
        );
    }
    if ((params["subject_name"] ?? null) !== null) {
        cargs.push(
            "-S",
            (params["subject_name"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_thickness_diff_outputs(
    params: MrisThicknessDiffParameters,
    execution: Execution,
): MrisThicknessDiffOutputs {
    const ret: MrisThicknessDiffOutputs = {
        root: execution.outputFile("."),
        output_difference: execution.outputFile([(params["out_file"] ?? null)].join('')),
        output_resampled: ((params["out_resampled"] ?? null) !== null) ? execution.outputFile([(params["out_resampled"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * mris_thickness_diff
 *
 * Computes the difference of two surface data sets defined on two surface meshes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisThicknessDiffOutputs`).
 */
function mris_thickness_diff_execute(
    params: MrisThicknessDiffParameters,
    runner: Runner | null = null,
): MrisThicknessDiffOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_THICKNESS_DIFF_METADATA);
    params = execution.params(params)
    const cargs = mris_thickness_diff_cargs(params, execution)
    const ret = mris_thickness_diff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_thickness_diff
 *
 * Computes the difference of two surface data sets defined on two surface meshes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param out_file Output file name
 * @param src_type Input surface data format (curv, paint or w)
 * @param trg_type Output format (paint or w)
 * @param out_resampled Output resampled thickness
 * @param nsmooth Number of smoothing steps
 * @param register Perform ICP rigid registration
 * @param xform Apply LTA transform to align input surface1 to surface2
 * @param invert Reversely apply -xform
 * @param src_volume Source volume for -xform
 * @param dst_volume Target volume for -xform
 * @param abs Compute the std of abs-thickness-diff
 * @param log_file Log file name
 * @param subject_name Subject name (to be recorded in logfile)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisThicknessDiffOutputs`).
 */
function mris_thickness_diff(
    out_file: string,
    src_type: string | null = null,
    trg_type: string | null = null,
    out_resampled: string | null = null,
    nsmooth: number | null = null,
    register: boolean = false,
    xform: InputPathType | null = null,
    invert: boolean = false,
    src_volume: InputPathType | null = null,
    dst_volume: InputPathType | null = null,
    abs: boolean = false,
    log_file: InputPathType | null = null,
    subject_name: string | null = null,
    runner: Runner | null = null,
): MrisThicknessDiffOutputs {
    const params = mris_thickness_diff_params(out_file, src_type, trg_type, out_resampled, nsmooth, register, xform, invert, src_volume, dst_volume, abs, log_file, subject_name)
    return mris_thickness_diff_execute(params, runner);
}


export {
      MRIS_THICKNESS_DIFF_METADATA,
      MrisThicknessDiffOutputs,
      mris_thickness_diff,
      mris_thickness_diff_execute,
      mris_thickness_diff_params,
};
