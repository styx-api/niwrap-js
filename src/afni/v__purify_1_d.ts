// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__PURIFY_1_D_METADATA: Metadata = {
    id: "f151d6221d30e4482e4401cc1da254b8c8b2ea5b.boutiques",
    name: "@Purify_1D",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VPurify1DParameters {
    "__STYXTYPE__": "@Purify_1D";
    "sub_brick"?: string | null | undefined;
    "suffix"?: string | null | undefined;
    "input_files": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@Purify_1D": v__purify_1_d_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__purify_1_d(...)`.
 *
 * @interface
 */
interface VPurify1DOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__purify_1_d_params(
    input_files: Array<InputPathType>,
    sub_brick: string | null = null,
    suffix: string | null = null,
): VPurify1DParameters {
    /**
     * Build parameters.
    
     * @param input_files Input 1D dataset files.
     * @param sub_brick The sub-brick selection mode to output a select number of columns, following AFNI conventions.
     * @param suffix STRING is attached to the output prefix which is formed from the input names.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@Purify_1D" as const,
        "input_files": input_files,
    };
    if (sub_brick !== null) {
        params["sub_brick"] = sub_brick;
    }
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    return params;
}


function v__purify_1_d_cargs(
    params: VPurify1DParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@Purify_1D");
    if ((params["sub_brick"] ?? null) !== null) {
        cargs.push(
            "-sub",
            (params["sub_brick"] ?? null)
        );
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-suf",
            (params["suffix"] ?? null)
        );
    }
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function v__purify_1_d_outputs(
    params: VPurify1DParameters,
    execution: Execution,
): VPurify1DOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VPurify1DOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__purify_1_d_execute(
    params: VPurify1DParameters,
    execution: Execution,
): VPurify1DOutputs {
    /**
     * Purifies a series of 1D files for faster I/O into matlab.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VPurify1DOutputs`).
     */
    params = execution.params(params)
    const cargs = v__purify_1_d_cargs(params, execution)
    const ret = v__purify_1_d_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__purify_1_d(
    input_files: Array<InputPathType>,
    sub_brick: string | null = null,
    suffix: string | null = null,
    runner: Runner | null = null,
): VPurify1DOutputs {
    /**
     * Purifies a series of 1D files for faster I/O into matlab.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_files Input 1D dataset files.
     * @param sub_brick The sub-brick selection mode to output a select number of columns, following AFNI conventions.
     * @param suffix STRING is attached to the output prefix which is formed from the input names.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VPurify1DOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__PURIFY_1_D_METADATA);
    const params = v__purify_1_d_params(input_files, sub_brick, suffix)
    return v__purify_1_d_execute(params, execution);
}


export {
      VPurify1DOutputs,
      VPurify1DParameters,
      V__PURIFY_1_D_METADATA,
      v__purify_1_d,
      v__purify_1_d_params,
};
