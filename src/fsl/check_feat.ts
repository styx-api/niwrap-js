// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CHECK_FEAT_METADATA: Metadata = {
    id: "12981698c3aadb98c6c57d4eb0712b75b792e3aa.boutiques",
    name: "checkFEAT",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface CheckFeatParameters {
    "__STYXTYPE__": "checkFEAT";
    "report_file": InputPathType;
    "report_log_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "checkFEAT": check_feat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "checkFEAT": check_feat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `check_feat(...)`.
 *
 * @interface
 */
interface CheckFeatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output HTML report
     */
    output_report: OutputPathType;
    /**
     * Output HTML report log
     */
    output_report_log: OutputPathType;
}


function check_feat_params(
    report_file: InputPathType,
    report_log_file: InputPathType,
): CheckFeatParameters {
    /**
     * Build parameters.
    
     * @param report_file Path to the HTML report
     * @param report_log_file Path to the HTML report log
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "checkFEAT" as const,
        "report_file": report_file,
        "report_log_file": report_log_file,
    };
    return params;
}


function check_feat_cargs(
    params: CheckFeatParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("checkFEAT");
    cargs.push(execution.inputFile((params["report_file"] ?? null)));
    cargs.push(execution.inputFile((params["report_log_file"] ?? null)));
    return cargs;
}


function check_feat_outputs(
    params: CheckFeatParameters,
    execution: Execution,
): CheckFeatOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CheckFeatOutputs = {
        root: execution.outputFile("."),
        output_report: execution.outputFile(["output_report.html"].join('')),
        output_report_log: execution.outputFile(["output_report_log.html"].join('')),
    };
    return ret;
}


function check_feat_execute(
    params: CheckFeatParameters,
    execution: Execution,
): CheckFeatOutputs {
    /**
     * Perform checks on FEAT analysis results.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CheckFeatOutputs`).
     */
    params = execution.params(params)
    const cargs = check_feat_cargs(params, execution)
    const ret = check_feat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function check_feat(
    report_file: InputPathType,
    report_log_file: InputPathType,
    runner: Runner | null = null,
): CheckFeatOutputs {
    /**
     * Perform checks on FEAT analysis results.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param report_file Path to the HTML report
     * @param report_log_file Path to the HTML report log
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CheckFeatOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CHECK_FEAT_METADATA);
    const params = check_feat_params(report_file, report_log_file)
    return check_feat_execute(params, execution);
}


export {
      CHECK_FEAT_METADATA,
      CheckFeatOutputs,
      CheckFeatParameters,
      check_feat,
      check_feat_params,
};
