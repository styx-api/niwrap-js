// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ISO_SURFACE_METADATA: Metadata = {
    id: "ae4f55d6aa3df9abb44d283d9623f609eefee601.boutiques",
    name: "IsoSurface",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface IsoSurfaceParameters {
    "__STYXTYPE__": "IsoSurface";
    "input_vol"?: InputPathType | null | undefined;
    "shape_spec"?: Array<string> | null | undefined;
    "isorois": boolean;
    "isoval"?: string | null | undefined;
    "isorange"?: Array<string> | null | undefined;
    "isocmask"?: string | null | undefined;
    "output_prefix"?: string | null | undefined;
    "tsmooth"?: Array<string> | null | undefined;
    "debug"?: string | null | undefined;
    "autocrop": boolean;
    "remesh"?: string | null | undefined;
    "xform"?: string | null | undefined;
    "novolreg": boolean;
    "noxform": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "IsoSurface": iso_surface_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "IsoSurface": iso_surface_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `iso_surface(...)`.
 *
 * @interface
 */
interface IsoSurfaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output isosurface in PLY format.
     */
    output_surface_ply: OutputPathType;
    /**
     * Output isosurface in GIFTI format.
     */
    output_surface_gii: OutputPathType;
    /**
     * Output isosurface in STL format.
     */
    output_surface_stl: OutputPathType;
}


function iso_surface_params(
    input_vol: InputPathType | null = null,
    shape_spec: Array<string> | null = null,
    isorois: boolean = false,
    isoval: string | null = null,
    isorange: Array<string> | null = null,
    isocmask: string | null = null,
    output_prefix: string | null = null,
    tsmooth: Array<string> | null = null,
    debug: string | null = null,
    autocrop: boolean = false,
    remesh: string | null = null,
    xform: string | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
): IsoSurfaceParameters {
    /**
     * Build parameters.
    
     * @param input_vol Input volume file.
     * @param shape_spec Built-in shape specification.
     * @param isorois Create isosurface for each unique value in the input volume.
     * @param isoval Create isosurface where volume = V.
     * @param isorange Create isosurface where V0 <= volume < V1.
     * @param isocmask Create isosurface where MASK_COM != 0.
     * @param output_prefix Prefix of output surface file.
     * @param tsmooth Smooth resultant surface using Taubin smoothing with parameters KPB and NITER.
     * @param debug Debug levels of 0 (default), 1, 2, 3.
     * @param autocrop Crop input volume before extraction.
     * @param remesh Remesh the surface(s).
     * @param xform Transform to apply to volume values before extracting.
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations.
     * @param noxform Same as -novolreg.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "IsoSurface" as const,
        "isorois": isorois,
        "autocrop": autocrop,
        "novolreg": novolreg,
        "noxform": noxform,
    };
    if (input_vol !== null) {
        params["input_vol"] = input_vol;
    }
    if (shape_spec !== null) {
        params["shape_spec"] = shape_spec;
    }
    if (isoval !== null) {
        params["isoval"] = isoval;
    }
    if (isorange !== null) {
        params["isorange"] = isorange;
    }
    if (isocmask !== null) {
        params["isocmask"] = isocmask;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (tsmooth !== null) {
        params["tsmooth"] = tsmooth;
    }
    if (debug !== null) {
        params["debug"] = debug;
    }
    if (remesh !== null) {
        params["remesh"] = remesh;
    }
    if (xform !== null) {
        params["xform"] = xform;
    }
    return params;
}


function iso_surface_cargs(
    params: IsoSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("IsoSurface");
    if ((params["input_vol"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["input_vol"] ?? null))
        );
    }
    if ((params["shape_spec"] ?? null) !== null) {
        cargs.push(
            "-shape",
            ...(params["shape_spec"] ?? null)
        );
    }
    if ((params["isorois"] ?? null)) {
        cargs.push("-isorois");
    }
    if ((params["isoval"] ?? null) !== null) {
        cargs.push(
            "-isoval",
            (params["isoval"] ?? null)
        );
    }
    if ((params["isorange"] ?? null) !== null) {
        cargs.push(
            "-isorange",
            ...(params["isorange"] ?? null)
        );
    }
    if ((params["isocmask"] ?? null) !== null) {
        cargs.push(
            "-isocmask",
            (params["isocmask"] ?? null)
        );
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-o_TYPE",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["tsmooth"] ?? null) !== null) {
        cargs.push(
            "-Tsmooth",
            ...(params["tsmooth"] ?? null)
        );
    }
    if ((params["debug"] ?? null) !== null) {
        cargs.push(
            "-debug",
            (params["debug"] ?? null)
        );
    }
    if ((params["autocrop"] ?? null)) {
        cargs.push("-autocrop");
    }
    if ((params["remesh"] ?? null) !== null) {
        cargs.push(
            "-remesh",
            (params["remesh"] ?? null)
        );
    }
    if ((params["xform"] ?? null) !== null) {
        cargs.push(
            "-xform",
            (params["xform"] ?? null)
        );
    }
    if ((params["novolreg"] ?? null)) {
        cargs.push("-novolreg");
    }
    if ((params["noxform"] ?? null)) {
        cargs.push("-noxform");
    }
    return cargs;
}


function iso_surface_outputs(
    params: IsoSurfaceParameters,
    execution: Execution,
): IsoSurfaceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: IsoSurfaceOutputs = {
        root: execution.outputFile("."),
        output_surface_ply: execution.outputFile(["[MASK]_surf.ply"].join('')),
        output_surface_gii: execution.outputFile(["[MASK]_surf.gii"].join('')),
        output_surface_stl: execution.outputFile(["[MASK]_surf.stl"].join('')),
    };
    return ret;
}


function iso_surface_execute(
    params: IsoSurfaceParameters,
    execution: Execution,
): IsoSurfaceOutputs {
    /**
     * A program to perform isosurface extraction from a volume.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `IsoSurfaceOutputs`).
     */
    params = execution.params(params)
    const cargs = iso_surface_cargs(params, execution)
    const ret = iso_surface_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function iso_surface(
    input_vol: InputPathType | null = null,
    shape_spec: Array<string> | null = null,
    isorois: boolean = false,
    isoval: string | null = null,
    isorange: Array<string> | null = null,
    isocmask: string | null = null,
    output_prefix: string | null = null,
    tsmooth: Array<string> | null = null,
    debug: string | null = null,
    autocrop: boolean = false,
    remesh: string | null = null,
    xform: string | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    runner: Runner | null = null,
): IsoSurfaceOutputs {
    /**
     * A program to perform isosurface extraction from a volume.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_vol Input volume file.
     * @param shape_spec Built-in shape specification.
     * @param isorois Create isosurface for each unique value in the input volume.
     * @param isoval Create isosurface where volume = V.
     * @param isorange Create isosurface where V0 <= volume < V1.
     * @param isocmask Create isosurface where MASK_COM != 0.
     * @param output_prefix Prefix of output surface file.
     * @param tsmooth Smooth resultant surface using Taubin smoothing with parameters KPB and NITER.
     * @param debug Debug levels of 0 (default), 1, 2, 3.
     * @param autocrop Crop input volume before extraction.
     * @param remesh Remesh the surface(s).
     * @param xform Transform to apply to volume values before extracting.
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations.
     * @param noxform Same as -novolreg.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `IsoSurfaceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ISO_SURFACE_METADATA);
    const params = iso_surface_params(input_vol, shape_spec, isorois, isoval, isorange, isocmask, output_prefix, tsmooth, debug, autocrop, remesh, xform, novolreg, noxform)
    return iso_surface_execute(params, execution);
}


export {
      ISO_SURFACE_METADATA,
      IsoSurfaceOutputs,
      IsoSurfaceParameters,
      iso_surface,
      iso_surface_params,
};
