// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_TO_SURF_METADATA: Metadata = {
    id: "af80d3026cea586c9cddcde8e039ab19779b80fa.boutiques",
    name: "SurfToSurf",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfToSurfParameters {
    "@type": "afni.SurfToSurf";
    "input_surface_1": InputPathType;
    "input_surface_2": InputPathType;
    "surface_volume"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "output_params"?: string | null | undefined;
    "node_indices"?: InputPathType | null | undefined;
    "proj_dir"?: InputPathType | null | undefined;
    "data"?: InputPathType | null | undefined;
    "node_debug"?: number | null | undefined;
    "debug_level"?: number | null | undefined;
    "make_consistent": boolean;
    "dset"?: InputPathType | null | undefined;
    "mapfile"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.SurfToSurf": surf_to_surf_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.SurfToSurf": surf_to_surf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_to_surf(...)`.
 *
 * @interface
 */
interface SurfToSurfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file in 1D format
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_surface_1 First input surface file (S1)
 * @param input_surface_2 Second input surface file (S2)
 * @param surface_volume Specify the surface volume (SV1)
 * @param prefix Specify prefix for the output file
 * @param output_params List of mapping parameters to include in output
 * @param node_indices 1D file containing node indices of S1 to consider
 * @param proj_dir 1D file containing projection directions
 * @param data 1D file containing data to be interpolated
 * @param node_debug Node index for debugging purposes
 * @param debug_level Debugging level
 * @param make_consistent Force a consistency check and correct triangle orientation
 * @param dset Dataset file for data interpolation; mutually exclusive with -data
 * @param mapfile File containing mapping parameters between surfaces S2 and S1
 *
 * @returns Parameter dictionary
 */
function surf_to_surf_params(
    input_surface_1: InputPathType,
    input_surface_2: InputPathType,
    surface_volume: InputPathType | null = null,
    prefix: string | null = null,
    output_params: string | null = null,
    node_indices: InputPathType | null = null,
    proj_dir: InputPathType | null = null,
    data: InputPathType | null = null,
    node_debug: number | null = null,
    debug_level: number | null = null,
    make_consistent: boolean = false,
    dset: InputPathType | null = null,
    mapfile: InputPathType | null = null,
): SurfToSurfParameters {
    const params = {
        "@type": "afni.SurfToSurf" as const,
        "input_surface_1": input_surface_1,
        "input_surface_2": input_surface_2,
        "make_consistent": make_consistent,
    };
    if (surface_volume !== null) {
        params["surface_volume"] = surface_volume;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (output_params !== null) {
        params["output_params"] = output_params;
    }
    if (node_indices !== null) {
        params["node_indices"] = node_indices;
    }
    if (proj_dir !== null) {
        params["proj_dir"] = proj_dir;
    }
    if (data !== null) {
        params["data"] = data;
    }
    if (node_debug !== null) {
        params["node_debug"] = node_debug;
    }
    if (debug_level !== null) {
        params["debug_level"] = debug_level;
    }
    if (dset !== null) {
        params["dset"] = dset;
    }
    if (mapfile !== null) {
        params["mapfile"] = mapfile;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_to_surf_cargs(
    params: SurfToSurfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfToSurf");
    cargs.push(execution.inputFile((params["input_surface_1"] ?? null)));
    cargs.push(execution.inputFile((params["input_surface_2"] ?? null)));
    if ((params["surface_volume"] ?? null) !== null) {
        cargs.push(
            "-sv",
            execution.inputFile((params["surface_volume"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["output_params"] ?? null) !== null) {
        cargs.push(
            "-output_params",
            (params["output_params"] ?? null)
        );
    }
    if ((params["node_indices"] ?? null) !== null) {
        cargs.push(
            "-node_indices",
            execution.inputFile((params["node_indices"] ?? null))
        );
    }
    if ((params["proj_dir"] ?? null) !== null) {
        cargs.push(
            "-proj_dir",
            execution.inputFile((params["proj_dir"] ?? null))
        );
    }
    if ((params["data"] ?? null) !== null) {
        cargs.push(
            "-data",
            execution.inputFile((params["data"] ?? null))
        );
    }
    if ((params["node_debug"] ?? null) !== null) {
        cargs.push(
            "-node_debug",
            String((params["node_debug"] ?? null))
        );
    }
    if ((params["debug_level"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug_level"] ?? null))
        );
    }
    if ((params["make_consistent"] ?? null)) {
        cargs.push("-make_consistent");
    }
    if ((params["dset"] ?? null) !== null) {
        cargs.push(
            "-dset",
            execution.inputFile((params["dset"] ?? null))
        );
    }
    if ((params["mapfile"] ?? null) !== null) {
        cargs.push(
            "-mapfile",
            execution.inputFile((params["mapfile"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_to_surf_outputs(
    params: SurfToSurfParameters,
    execution: Execution,
): SurfToSurfOutputs {
    const ret: SurfToSurfOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


/**
 * SurfToSurf
 *
 * Interpolate data from one surface to another.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfToSurfOutputs`).
 */
function surf_to_surf_execute(
    params: SurfToSurfParameters,
    runner: Runner | null = null,
): SurfToSurfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_TO_SURF_METADATA);
    params = execution.params(params)
    const cargs = surf_to_surf_cargs(params, execution)
    const ret = surf_to_surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SurfToSurf
 *
 * Interpolate data from one surface to another.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_surface_1 First input surface file (S1)
 * @param input_surface_2 Second input surface file (S2)
 * @param surface_volume Specify the surface volume (SV1)
 * @param prefix Specify prefix for the output file
 * @param output_params List of mapping parameters to include in output
 * @param node_indices 1D file containing node indices of S1 to consider
 * @param proj_dir 1D file containing projection directions
 * @param data 1D file containing data to be interpolated
 * @param node_debug Node index for debugging purposes
 * @param debug_level Debugging level
 * @param make_consistent Force a consistency check and correct triangle orientation
 * @param dset Dataset file for data interpolation; mutually exclusive with -data
 * @param mapfile File containing mapping parameters between surfaces S2 and S1
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfToSurfOutputs`).
 */
function surf_to_surf(
    input_surface_1: InputPathType,
    input_surface_2: InputPathType,
    surface_volume: InputPathType | null = null,
    prefix: string | null = null,
    output_params: string | null = null,
    node_indices: InputPathType | null = null,
    proj_dir: InputPathType | null = null,
    data: InputPathType | null = null,
    node_debug: number | null = null,
    debug_level: number | null = null,
    make_consistent: boolean = false,
    dset: InputPathType | null = null,
    mapfile: InputPathType | null = null,
    runner: Runner | null = null,
): SurfToSurfOutputs {
    const params = surf_to_surf_params(input_surface_1, input_surface_2, surface_volume, prefix, output_params, node_indices, proj_dir, data, node_debug, debug_level, make_consistent, dset, mapfile)
    return surf_to_surf_execute(params, runner);
}


export {
      SURF_TO_SURF_METADATA,
      SurfToSurfOutputs,
      SurfToSurfParameters,
      surf_to_surf,
      surf_to_surf_execute,
      surf_to_surf_params,
};
