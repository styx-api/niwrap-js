// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONF2HIRES_METADATA: Metadata = {
    id: "539c4acfba831cfb4f99ac6d61aa594dba2bc3f2.boutiques",
    name: "conf2hires",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Conf2hiresParameters {
    "@type": "freesurfer.conf2hires";
    "subject": string;
    "t2": boolean;
    "no_t2": boolean;
    "mm_norm_sigma"?: number | null | undefined;
    "flair": boolean;
    "no_flair": boolean;
    "threads"?: number | null | undefined;
    "copy_bias_from_conf": boolean;
    "norm_opts_rca": boolean;
    "cubic": boolean;
    "trilin": boolean;
    "dev": boolean;
    "no_dev": boolean;
    "bbr_con"?: string | null | undefined;
    "bbr_t1": boolean;
    "bbr_t2": boolean;
    "first_peak_d1": boolean;
    "first_peak_d2": boolean;
    "stopmask"?: string | null | undefined;
    "expert"?: string | null | undefined;
    "force_update": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.conf2hires": conf2hires_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `conf2hires(...)`.
 *
 * @interface
 */
interface Conf2hiresOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier
 * @param t2 Enable T2 processing
 * @param no_t2 Disable T2 processing (default)
 * @param mm_norm_sigma Smoothing level for T2 mri_normalize (default is 8)
 * @param flair Enable FLAIR processing
 * @param no_flair Disable FLAIR processing (default)
 * @param threads Number of threads to use
 * @param copy_bias_from_conf Copy bias field from conformed instead of computing directly
 * @param norm_opts_rca Compute bias directly using recon-all opts to mri_normalize
 * @param cubic Use cubic normalization (applies with --copy-bias-from-conf)
 * @param trilin Use trilinear normalization (default, applies with --copy-bias-from-conf)
 * @param dev Use mris_make_surfaces.dev
 * @param no_dev Do not use mris_make_surfaces.dev (default)
 * @param bbr_con Set BBR contrast type (default t2)
 * @param bbr_t1 Set BBR contrast type to t1
 * @param bbr_t2 Set BBR contrast type to t2
 * @param first_peak_d1 Refine surface targets in MRIScomputeBorderValues() using first peak method D1
 * @param first_peak_d2 Refine surface targets in MRIScomputeBorderValues() using first peak method D2
 * @param stopmask Specify stop mask
 * @param expert Use expert options
 * @param force_update Force update of final surfaces
 *
 * @returns Parameter dictionary
 */
function conf2hires_params(
    subject: string,
    t2: boolean = false,
    no_t2: boolean = false,
    mm_norm_sigma: number | null = 8,
    flair: boolean = false,
    no_flair: boolean = false,
    threads: number | null = null,
    copy_bias_from_conf: boolean = false,
    norm_opts_rca: boolean = false,
    cubic: boolean = false,
    trilin: boolean = false,
    dev: boolean = false,
    no_dev: boolean = false,
    bbr_con: string | null = null,
    bbr_t1: boolean = false,
    bbr_t2: boolean = false,
    first_peak_d1: boolean = false,
    first_peak_d2: boolean = false,
    stopmask: string | null = null,
    expert: string | null = null,
    force_update: boolean = false,
): Conf2hiresParameters {
    const params = {
        "@type": "freesurfer.conf2hires" as const,
        "subject": subject,
        "t2": t2,
        "no_t2": no_t2,
        "flair": flair,
        "no_flair": no_flair,
        "copy_bias_from_conf": copy_bias_from_conf,
        "norm_opts_rca": norm_opts_rca,
        "cubic": cubic,
        "trilin": trilin,
        "dev": dev,
        "no_dev": no_dev,
        "bbr_t1": bbr_t1,
        "bbr_t2": bbr_t2,
        "first_peak_d1": first_peak_d1,
        "first_peak_d2": first_peak_d2,
        "force_update": force_update,
    };
    if (mm_norm_sigma !== null) {
        params["mm_norm_sigma"] = mm_norm_sigma;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (bbr_con !== null) {
        params["bbr_con"] = bbr_con;
    }
    if (stopmask !== null) {
        params["stopmask"] = stopmask;
    }
    if (expert !== null) {
        params["expert"] = expert;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function conf2hires_cargs(
    params: Conf2hiresParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("conf2hires");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["t2"] ?? null)) {
        cargs.push("--t2");
    }
    if ((params["no_t2"] ?? null)) {
        cargs.push("--no-t2");
    }
    if ((params["mm_norm_sigma"] ?? null) !== null) {
        cargs.push(
            "--mm-norm-sigma",
            String((params["mm_norm_sigma"] ?? null))
        );
    }
    if ((params["flair"] ?? null)) {
        cargs.push("--flair");
    }
    if ((params["no_flair"] ?? null)) {
        cargs.push("--no-flair");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["copy_bias_from_conf"] ?? null)) {
        cargs.push("--copy-bias-from-conf");
    }
    if ((params["norm_opts_rca"] ?? null)) {
        cargs.push("--norm-opts-rca");
    }
    if ((params["cubic"] ?? null)) {
        cargs.push("--cubic");
    }
    if ((params["trilin"] ?? null)) {
        cargs.push("--trilin");
    }
    if ((params["dev"] ?? null)) {
        cargs.push("--dev");
    }
    if ((params["no_dev"] ?? null)) {
        cargs.push("--no-dev");
    }
    if ((params["bbr_con"] ?? null) !== null) {
        cargs.push(
            "--bbr-con",
            (params["bbr_con"] ?? null)
        );
    }
    if ((params["bbr_t1"] ?? null)) {
        cargs.push("--bbr-t1");
    }
    if ((params["bbr_t2"] ?? null)) {
        cargs.push("--bbr-t2");
    }
    if ((params["first_peak_d1"] ?? null)) {
        cargs.push("--first-peak-d1");
    }
    if ((params["first_peak_d2"] ?? null)) {
        cargs.push("--first-peak-d2");
    }
    if ((params["stopmask"] ?? null) !== null) {
        cargs.push(
            "--stopmask",
            (params["stopmask"] ?? null)
        );
    }
    if ((params["expert"] ?? null) !== null) {
        cargs.push(
            "--expert",
            (params["expert"] ?? null)
        );
    }
    if ((params["force_update"] ?? null)) {
        cargs.push("--force-update");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function conf2hires_outputs(
    params: Conf2hiresParameters,
    execution: Execution,
): Conf2hiresOutputs {
    const ret: Conf2hiresOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Places the surfaces on high resolution T1 (and maybe T2) volumes based on an initial placement on a conformed volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Conf2hiresOutputs`).
 */
function conf2hires_execute(
    params: Conf2hiresParameters,
    execution: Execution,
): Conf2hiresOutputs {
    params = execution.params(params)
    const cargs = conf2hires_cargs(params, execution)
    const ret = conf2hires_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Places the surfaces on high resolution T1 (and maybe T2) volumes based on an initial placement on a conformed volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier
 * @param t2 Enable T2 processing
 * @param no_t2 Disable T2 processing (default)
 * @param mm_norm_sigma Smoothing level for T2 mri_normalize (default is 8)
 * @param flair Enable FLAIR processing
 * @param no_flair Disable FLAIR processing (default)
 * @param threads Number of threads to use
 * @param copy_bias_from_conf Copy bias field from conformed instead of computing directly
 * @param norm_opts_rca Compute bias directly using recon-all opts to mri_normalize
 * @param cubic Use cubic normalization (applies with --copy-bias-from-conf)
 * @param trilin Use trilinear normalization (default, applies with --copy-bias-from-conf)
 * @param dev Use mris_make_surfaces.dev
 * @param no_dev Do not use mris_make_surfaces.dev (default)
 * @param bbr_con Set BBR contrast type (default t2)
 * @param bbr_t1 Set BBR contrast type to t1
 * @param bbr_t2 Set BBR contrast type to t2
 * @param first_peak_d1 Refine surface targets in MRIScomputeBorderValues() using first peak method D1
 * @param first_peak_d2 Refine surface targets in MRIScomputeBorderValues() using first peak method D2
 * @param stopmask Specify stop mask
 * @param expert Use expert options
 * @param force_update Force update of final surfaces
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Conf2hiresOutputs`).
 */
function conf2hires(
    subject: string,
    t2: boolean = false,
    no_t2: boolean = false,
    mm_norm_sigma: number | null = 8,
    flair: boolean = false,
    no_flair: boolean = false,
    threads: number | null = null,
    copy_bias_from_conf: boolean = false,
    norm_opts_rca: boolean = false,
    cubic: boolean = false,
    trilin: boolean = false,
    dev: boolean = false,
    no_dev: boolean = false,
    bbr_con: string | null = null,
    bbr_t1: boolean = false,
    bbr_t2: boolean = false,
    first_peak_d1: boolean = false,
    first_peak_d2: boolean = false,
    stopmask: string | null = null,
    expert: string | null = null,
    force_update: boolean = false,
    runner: Runner | null = null,
): Conf2hiresOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONF2HIRES_METADATA);
    const params = conf2hires_params(subject, t2, no_t2, mm_norm_sigma, flair, no_flair, threads, copy_bias_from_conf, norm_opts_rca, cubic, trilin, dev, no_dev, bbr_con, bbr_t1, bbr_t2, first_peak_d1, first_peak_d2, stopmask, expert, force_update)
    return conf2hires_execute(params, execution);
}


export {
      CONF2HIRES_METADATA,
      Conf2hiresOutputs,
      Conf2hiresParameters,
      conf2hires,
      conf2hires_cargs,
      conf2hires_execute,
      conf2hires_outputs,
      conf2hires_params,
};
