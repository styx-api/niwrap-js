// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_LABEL_AREA_METADATA: Metadata = {
    id: "df2a4a379b8bd5c6514abb40377a6f76b7d17955.boutiques",
    name: "mris_label_area",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisLabelAreaParameters {
    "@type"?: "freesurfer/mris_label_area";
    "pct_flag": boolean;
    "log_file"?: string | null | undefined;
    "brain_vol"?: string | null | undefined;
    "subject_name": string;
    "hemi": string;
    "surf_name": string;
    "annot_name": string;
    "labels": Array<string>;
}
type MrisLabelAreaParametersTagged = Required<Pick<MrisLabelAreaParameters, '@type'>> & MrisLabelAreaParameters;


/**
 * Output object returned when calling `MrisLabelAreaParameters(...)`.
 *
 * @interface
 */
interface MrisLabelAreaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name Name of the subject
 * @param hemi Hemisphere, typically 'lh' or 'rh'
 * @param surf_name Surface name
 * @param annot_name Annotation name
 * @param labels Labels to calculate area for
 * @param pct_flag Compute brain area as a percentage of all brain labels
 * @param log_file Log results to file (use %d to include label number)
 * @param brain_vol Load brain volume and use it to normalize areas
 *
 * @returns Parameter dictionary
 */
function mris_label_area_params(
    subject_name: string,
    hemi: string,
    surf_name: string,
    annot_name: string,
    labels: Array<string>,
    pct_flag: boolean = false,
    log_file: string | null = null,
    brain_vol: string | null = null,
): MrisLabelAreaParametersTagged {
    const params = {
        "@type": "freesurfer/mris_label_area" as const,
        "pct_flag": pct_flag,
        "subject_name": subject_name,
        "hemi": hemi,
        "surf_name": surf_name,
        "annot_name": annot_name,
        "labels": labels,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (brain_vol !== null) {
        params["brain_vol"] = brain_vol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_label_area_cargs(
    params: MrisLabelAreaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_label_area");
    if ((params["pct_flag"] ?? false)) {
        cargs.push("-p");
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["log_file"] ?? null)
        );
    }
    if ((params["brain_vol"] ?? null) !== null) {
        cargs.push(
            "-b",
            (params["brain_vol"] ?? null)
        );
    }
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["surf_name"] ?? null));
    cargs.push((params["annot_name"] ?? null));
    cargs.push(...(params["labels"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_label_area_outputs(
    params: MrisLabelAreaParameters,
    execution: Execution,
): MrisLabelAreaOutputs {
    const ret: MrisLabelAreaOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_label_area
 *
 * Compute the area of specific labels on a surface of a brain hemisphere in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisLabelAreaOutputs`).
 */
function mris_label_area_execute(
    params: MrisLabelAreaParameters,
    runner: Runner | null = null,
): MrisLabelAreaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_LABEL_AREA_METADATA);
    params = execution.params(params)
    const cargs = mris_label_area_cargs(params, execution)
    const ret = mris_label_area_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_label_area
 *
 * Compute the area of specific labels on a surface of a brain hemisphere in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name Name of the subject
 * @param hemi Hemisphere, typically 'lh' or 'rh'
 * @param surf_name Surface name
 * @param annot_name Annotation name
 * @param labels Labels to calculate area for
 * @param pct_flag Compute brain area as a percentage of all brain labels
 * @param log_file Log results to file (use %d to include label number)
 * @param brain_vol Load brain volume and use it to normalize areas
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisLabelAreaOutputs`).
 */
function mris_label_area(
    subject_name: string,
    hemi: string,
    surf_name: string,
    annot_name: string,
    labels: Array<string>,
    pct_flag: boolean = false,
    log_file: string | null = null,
    brain_vol: string | null = null,
    runner: Runner | null = null,
): MrisLabelAreaOutputs {
    const params = mris_label_area_params(subject_name, hemi, surf_name, annot_name, labels, pct_flag, log_file, brain_vol)
    return mris_label_area_execute(params, runner);
}


export {
      MRIS_LABEL_AREA_METADATA,
      MrisLabelAreaOutputs,
      mris_label_area,
      mris_label_area_execute,
      mris_label_area_params,
};
