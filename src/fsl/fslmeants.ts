// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLMEANTS_METADATA: Metadata = {
    id: "4dbad5c32466bc92651172cf6289711dcf1c344f.boutiques",
    name: "fslmeants",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslmeantsParameters {
    "@type": "fsl.fslmeants";
    "input_image": InputPathType;
    "output"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "coordinates"?: Array<number> | null | undefined;
    "usemm_flag": boolean;
    "showall_flag": boolean;
    "eigenv_flag": boolean;
    "eigenvariates_order"?: number | null | undefined;
    "no_bin_flag": boolean;
    "label_image"?: InputPathType | null | undefined;
    "transpose_flag": boolean;
    "weighted_mean_flag": boolean;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslmeants": fslmeants_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslmeants": fslmeants_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslmeants(...)`.
 *
 * @interface
 */
interface FslmeantsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text matrix from fslmeants
     */
    output_text_matrix: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_image Input 4D image
 * @param output Output text matrix
 * @param mask Input 3D mask
 * @param coordinates Requested spatial coordinate (instead of mask). Must have exactly three numerical entries in the list (3-vector).
 * @param usemm_flag Use mm instead of voxel coordinates (for -c option)
 * @param showall_flag Show all voxel time series (within mask) instead of averaging
 * @param eigenv_flag Calculate Eigenvariate(s) instead of mean (output will have 0 mean)
 * @param eigenvariates_order Select number of Eigenvariates (default 1)
 * @param no_bin_flag Do not binarise the mask for calculation of Eigenvariates
 * @param label_image Input 3D label image (generate separate mean for each integer label value - cannot be used with showall)
 * @param transpose_flag Output results in transpose format (one row per voxel/mean)
 * @param weighted_mean_flag Output weighted mean, using mask values as weights, and exit.
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display the help message
 *
 * @returns Parameter dictionary
 */
function fslmeants_params(
    input_image: InputPathType,
    output: string | null = null,
    mask: InputPathType | null = null,
    coordinates: Array<number> | null = null,
    usemm_flag: boolean = false,
    showall_flag: boolean = false,
    eigenv_flag: boolean = false,
    eigenvariates_order: number | null = null,
    no_bin_flag: boolean = false,
    label_image: InputPathType | null = null,
    transpose_flag: boolean = false,
    weighted_mean_flag: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): FslmeantsParameters {
    const params = {
        "@type": "fsl.fslmeants" as const,
        "input_image": input_image,
        "usemm_flag": usemm_flag,
        "showall_flag": showall_flag,
        "eigenv_flag": eigenv_flag,
        "no_bin_flag": no_bin_flag,
        "transpose_flag": transpose_flag,
        "weighted_mean_flag": weighted_mean_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (output !== null) {
        params["output"] = output;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (coordinates !== null) {
        params["coordinates"] = coordinates;
    }
    if (eigenvariates_order !== null) {
        params["eigenvariates_order"] = eigenvariates_order;
    }
    if (label_image !== null) {
        params["label_image"] = label_image;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslmeants_cargs(
    params: FslmeantsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslmeants");
    cargs.push(
        "-i",
        execution.inputFile((params["input_image"] ?? null))
    );
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["coordinates"] ?? null) !== null) {
        cargs.push(
            "-c",
            ...(params["coordinates"] ?? null).map(String)
        );
    }
    if ((params["usemm_flag"] ?? null)) {
        cargs.push("--usemm");
    }
    if ((params["showall_flag"] ?? null)) {
        cargs.push("--showall");
    }
    if ((params["eigenv_flag"] ?? null)) {
        cargs.push("--eig");
    }
    if ((params["eigenvariates_order"] ?? null) !== null) {
        cargs.push(
            "--order",
            String((params["eigenvariates_order"] ?? null))
        );
    }
    if ((params["no_bin_flag"] ?? null)) {
        cargs.push("--no_bin");
    }
    if ((params["label_image"] ?? null) !== null) {
        cargs.push(
            "--label",
            execution.inputFile((params["label_image"] ?? null))
        );
    }
    if ((params["transpose_flag"] ?? null)) {
        cargs.push("--transpose");
    }
    if ((params["weighted_mean_flag"] ?? null)) {
        cargs.push("-w");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslmeants_outputs(
    params: FslmeantsParameters,
    execution: Execution,
): FslmeantsOutputs {
    const ret: FslmeantsOutputs = {
        root: execution.outputFile("."),
        output_text_matrix: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fslmeants
 *
 * Prints average timeseries (intensities) to the screen (or saves to a file).
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslmeantsOutputs`).
 */
function fslmeants_execute(
    params: FslmeantsParameters,
    runner: Runner | null = null,
): FslmeantsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLMEANTS_METADATA);
    params = execution.params(params)
    const cargs = fslmeants_cargs(params, execution)
    const ret = fslmeants_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fslmeants
 *
 * Prints average timeseries (intensities) to the screen (or saves to a file).
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_image Input 4D image
 * @param output Output text matrix
 * @param mask Input 3D mask
 * @param coordinates Requested spatial coordinate (instead of mask). Must have exactly three numerical entries in the list (3-vector).
 * @param usemm_flag Use mm instead of voxel coordinates (for -c option)
 * @param showall_flag Show all voxel time series (within mask) instead of averaging
 * @param eigenv_flag Calculate Eigenvariate(s) instead of mean (output will have 0 mean)
 * @param eigenvariates_order Select number of Eigenvariates (default 1)
 * @param no_bin_flag Do not binarise the mask for calculation of Eigenvariates
 * @param label_image Input 3D label image (generate separate mean for each integer label value - cannot be used with showall)
 * @param transpose_flag Output results in transpose format (one row per voxel/mean)
 * @param weighted_mean_flag Output weighted mean, using mask values as weights, and exit.
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display the help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslmeantsOutputs`).
 */
function fslmeants(
    input_image: InputPathType,
    output: string | null = null,
    mask: InputPathType | null = null,
    coordinates: Array<number> | null = null,
    usemm_flag: boolean = false,
    showall_flag: boolean = false,
    eigenv_flag: boolean = false,
    eigenvariates_order: number | null = null,
    no_bin_flag: boolean = false,
    label_image: InputPathType | null = null,
    transpose_flag: boolean = false,
    weighted_mean_flag: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): FslmeantsOutputs {
    const params = fslmeants_params(input_image, output, mask, coordinates, usemm_flag, showall_flag, eigenv_flag, eigenvariates_order, no_bin_flag, label_image, transpose_flag, weighted_mean_flag, verbose_flag, help_flag)
    return fslmeants_execute(params, runner);
}


export {
      FSLMEANTS_METADATA,
      FslmeantsOutputs,
      FslmeantsParameters,
      fslmeants,
      fslmeants_execute,
      fslmeants_params,
};
