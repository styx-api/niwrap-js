// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DMASK_SVD_METADATA: Metadata = {
    id: "d590df9b7bd7af7769a60fa5f7ef2b1ffe4dc148.boutiques",
    name: "3dmaskSVD",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dmaskSvdParameters {
    "@type": "afni.3dmaskSVD";
    "input_dataset": InputPathType;
    "vnorm": boolean;
    "sval"?: number | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "automask": boolean;
    "polort"?: number | null | undefined;
    "bandpass"?: Array<string> | null | undefined;
    "ort"?: Array<InputPathType> | null | undefined;
    "alt_input"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dmaskSVD": v_3dmask_svd_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dmaskSVD": v_3dmask_svd_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dmask_svd(...)`.
 *
 * @interface
 */
interface V3dmaskSvdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Singular vector output redirected to this file
     */
    svd_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset
 * @param vnorm L2 normalize all time series before SVD
 * @param sval Output singular vectors 0 .. a (default a=0 = first one only)
 * @param mask_file Define the mask (default is entire dataset)
 * @param automask Automatic mask definition
 * @param polort Remove polynomial trend (default 0 if not specified)
 * @param bandpass Bandpass filter (mutually exclusive with -polort)
 * @param ort Time series to remove from the data before SVD-ization. You can give more than 1 '-ort' option. 'xx.1D' can contain more than 1 column.
 * @param alt_input Alternative way to give the input dataset name
 *
 * @returns Parameter dictionary
 */
function v_3dmask_svd_params(
    input_dataset: InputPathType,
    vnorm: boolean = false,
    sval: number | null = null,
    mask_file: InputPathType | null = null,
    automask: boolean = false,
    polort: number | null = null,
    bandpass: Array<string> | null = null,
    ort: Array<InputPathType> | null = null,
    alt_input: InputPathType | null = null,
): V3dmaskSvdParameters {
    const params = {
        "@type": "afni.3dmaskSVD" as const,
        "input_dataset": input_dataset,
        "vnorm": vnorm,
        "automask": automask,
    };
    if (sval !== null) {
        params["sval"] = sval;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (bandpass !== null) {
        params["bandpass"] = bandpass;
    }
    if (ort !== null) {
        params["ort"] = ort;
    }
    if (alt_input !== null) {
        params["alt_input"] = alt_input;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dmask_svd_cargs(
    params: V3dmaskSvdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dmaskSVD");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["vnorm"] ?? null)) {
        cargs.push("-vnorm");
    }
    if ((params["sval"] ?? null) !== null) {
        cargs.push(
            "-sval",
            String((params["sval"] ?? null))
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["bandpass"] ?? null) !== null) {
        cargs.push(
            "-bpass",
            ...(params["bandpass"] ?? null)
        );
    }
    if ((params["ort"] ?? null) !== null) {
        cargs.push(
            "-ort",
            ...(params["ort"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["alt_input"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["alt_input"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dmask_svd_outputs(
    params: V3dmaskSvdParameters,
    execution: Execution,
): V3dmaskSvdOutputs {
    const ret: V3dmaskSvdOutputs = {
        root: execution.outputFile("."),
        svd_output: execution.outputFile(["../stdout"].join('')),
    };
    return ret;
}


/**
 * 3dmaskSVD
 *
 * Computes the principal singular vector of the time series vectors extracted from the input dataset over the input mask.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dmaskSvdOutputs`).
 */
function v_3dmask_svd_execute(
    params: V3dmaskSvdParameters,
    runner: Runner | null = null,
): V3dmaskSvdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DMASK_SVD_METADATA);
    params = execution.params(params)
    const cargs = v_3dmask_svd_cargs(params, execution)
    const ret = v_3dmask_svd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dmaskSVD
 *
 * Computes the principal singular vector of the time series vectors extracted from the input dataset over the input mask.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset
 * @param vnorm L2 normalize all time series before SVD
 * @param sval Output singular vectors 0 .. a (default a=0 = first one only)
 * @param mask_file Define the mask (default is entire dataset)
 * @param automask Automatic mask definition
 * @param polort Remove polynomial trend (default 0 if not specified)
 * @param bandpass Bandpass filter (mutually exclusive with -polort)
 * @param ort Time series to remove from the data before SVD-ization. You can give more than 1 '-ort' option. 'xx.1D' can contain more than 1 column.
 * @param alt_input Alternative way to give the input dataset name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dmaskSvdOutputs`).
 */
function v_3dmask_svd(
    input_dataset: InputPathType,
    vnorm: boolean = false,
    sval: number | null = null,
    mask_file: InputPathType | null = null,
    automask: boolean = false,
    polort: number | null = null,
    bandpass: Array<string> | null = null,
    ort: Array<InputPathType> | null = null,
    alt_input: InputPathType | null = null,
    runner: Runner | null = null,
): V3dmaskSvdOutputs {
    const params = v_3dmask_svd_params(input_dataset, vnorm, sval, mask_file, automask, polort, bandpass, ort, alt_input)
    return v_3dmask_svd_execute(params, runner);
}


export {
      V3dmaskSvdOutputs,
      V3dmaskSvdParameters,
      V_3DMASK_SVD_METADATA,
      v_3dmask_svd,
      v_3dmask_svd_execute,
      v_3dmask_svd_params,
};
