// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_SMOOTHING_METADATA: Metadata = {
    id: "e639e727af2451558de9d9d69d9eaae12578b539.boutiques",
    name: "volume-smoothing",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeSmoothingParameters {
    "__STYXTYPE__": "volume-smoothing";
    "volume_in": InputPathType;
    "kernel": number;
    "volume_out": string;
    "opt_fwhm": boolean;
    "opt_roi_roivol"?: InputPathType | null | undefined;
    "opt_fix_zeros": boolean;
    "opt_subvolume_subvol"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-smoothing": volume_smoothing_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-smoothing": volume_smoothing_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_smoothing(...)`.
 *
 * @interface
 */
interface VolumeSmoothingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


function volume_smoothing_params(
    volume_in: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fwhm: boolean = false,
    opt_roi_roivol: InputPathType | null = null,
    opt_fix_zeros: boolean = false,
    opt_subvolume_subvol: string | null = null,
): VolumeSmoothingParameters {
    /**
     * Build parameters.
    
     * @param volume_in the volume to smooth
     * @param kernel the size of the gaussian smoothing kernel in mm, as sigma by default
     * @param volume_out the output volume
     * @param opt_fwhm kernel size is FWHM, not sigma
     * @param opt_roi_roivol smooth only from data within an ROI: the volume to use as an ROI
     * @param opt_fix_zeros treat zero values as not being data
     * @param opt_subvolume_subvol select a single subvolume to smooth: the subvolume number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-smoothing" as const,
        "volume_in": volume_in,
        "kernel": kernel,
        "volume_out": volume_out,
        "opt_fwhm": opt_fwhm,
        "opt_fix_zeros": opt_fix_zeros,
    };
    if (opt_roi_roivol !== null) {
        params["opt_roi_roivol"] = opt_roi_roivol;
    }
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    return params;
}


function volume_smoothing_cargs(
    params: VolumeSmoothingParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-smoothing");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push(String((params["kernel"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_fwhm"] ?? null)) {
        cargs.push("-fwhm");
    }
    if ((params["opt_roi_roivol"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roivol"] ?? null))
        );
    }
    if ((params["opt_fix_zeros"] ?? null)) {
        cargs.push("-fix-zeros");
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    return cargs;
}


function volume_smoothing_outputs(
    params: VolumeSmoothingParameters,
    execution: Execution,
): VolumeSmoothingOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeSmoothingOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_smoothing_execute(
    params: VolumeSmoothingParameters,
    execution: Execution,
): VolumeSmoothingOutputs {
    /**
     * Smooth a volume file.
     * 
     * Gaussian smoothing for volumes.  By default, smooths all subvolumes with no ROI, if ROI is given, only positive voxels in the ROI volume have their values used, and all other voxels are set to zero.  Smoothing a non-orthogonal volume will be significantly slower, because the operation cannot be separated into 1-dimensional smoothings without distorting the kernel shape.
     * 
     * The -fix-zeros option causes the smoothing to not use an input value if it is zero, but still write a smoothed value to the voxel.  This is useful for zeros that indicate lack of information, preventing them from pulling down the intensity of nearby voxels, while giving the zero an extrapolated value.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeSmoothingOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_smoothing_cargs(params, execution)
    const ret = volume_smoothing_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_smoothing(
    volume_in: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fwhm: boolean = false,
    opt_roi_roivol: InputPathType | null = null,
    opt_fix_zeros: boolean = false,
    opt_subvolume_subvol: string | null = null,
    runner: Runner | null = null,
): VolumeSmoothingOutputs {
    /**
     * Smooth a volume file.
     * 
     * Gaussian smoothing for volumes.  By default, smooths all subvolumes with no ROI, if ROI is given, only positive voxels in the ROI volume have their values used, and all other voxels are set to zero.  Smoothing a non-orthogonal volume will be significantly slower, because the operation cannot be separated into 1-dimensional smoothings without distorting the kernel shape.
     * 
     * The -fix-zeros option causes the smoothing to not use an input value if it is zero, but still write a smoothed value to the voxel.  This is useful for zeros that indicate lack of information, preventing them from pulling down the intensity of nearby voxels, while giving the zero an extrapolated value.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume_in the volume to smooth
     * @param kernel the size of the gaussian smoothing kernel in mm, as sigma by default
     * @param volume_out the output volume
     * @param opt_fwhm kernel size is FWHM, not sigma
     * @param opt_roi_roivol smooth only from data within an ROI: the volume to use as an ROI
     * @param opt_fix_zeros treat zero values as not being data
     * @param opt_subvolume_subvol select a single subvolume to smooth: the subvolume number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeSmoothingOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_SMOOTHING_METADATA);
    const params = volume_smoothing_params(volume_in, kernel, volume_out, opt_fwhm, opt_roi_roivol, opt_fix_zeros, opt_subvolume_subvol)
    return volume_smoothing_execute(params, execution);
}


export {
      VOLUME_SMOOTHING_METADATA,
      VolumeSmoothingOutputs,
      VolumeSmoothingParameters,
      volume_smoothing,
      volume_smoothing_params,
};
