// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MORPH_SUBJECT_METADATA: Metadata = {
    id: "dab11133f0d14ca55b5d68228d09dee883987b8a.boutiques",
    name: "morph_subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MorphSubjectParameters {
    "@type": "freesurfer.morph_subject";
    "subjid": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.morph_subject": morph_subject_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `morph_subject(...)`.
 *
 * @interface
 */
interface MorphSubjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjid Subject ID for processing
 *
 * @returns Parameter dictionary
 */
function morph_subject_params(
    subjid: string,
): MorphSubjectParameters {
    const params = {
        "@type": "freesurfer.morph_subject" as const,
        "subjid": subjid,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function morph_subject_cargs(
    params: MorphSubjectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("morph_subject");
    cargs.push((params["subjid"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function morph_subject_outputs(
    params: MorphSubjectParameters,
    execution: Execution,
): MorphSubjectOutputs {
    const ret: MorphSubjectOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * morph_subject
 *
 * A morphological processing tool for Freesurfer subjects. The specific operations and options are not documented in the available help text.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MorphSubjectOutputs`).
 */
function morph_subject_execute(
    params: MorphSubjectParameters,
    runner: Runner | null = null,
): MorphSubjectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MORPH_SUBJECT_METADATA);
    params = execution.params(params)
    const cargs = morph_subject_cargs(params, execution)
    const ret = morph_subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * morph_subject
 *
 * A morphological processing tool for Freesurfer subjects. The specific operations and options are not documented in the available help text.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjid Subject ID for processing
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MorphSubjectOutputs`).
 */
function morph_subject(
    subjid: string,
    runner: Runner | null = null,
): MorphSubjectOutputs {
    const params = morph_subject_params(subjid)
    return morph_subject_execute(params, runner);
}


export {
      MORPH_SUBJECT_METADATA,
      MorphSubjectOutputs,
      MorphSubjectParameters,
      morph_subject,
      morph_subject_execute,
      morph_subject_params,
};
