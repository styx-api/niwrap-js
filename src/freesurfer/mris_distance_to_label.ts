// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_DISTANCE_TO_LABEL_METADATA: Metadata = {
    id: "22e44fd776ac40400214cd24d7f9a0b1bcbea8e7.boutiques",
    name: "mris_distance_to_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisDistanceToLabelParameters {
    "@type"?: "freesurfer/mris_distance_to_label";
    "hemisphere": string;
    "subject_1": string;
}
type MrisDistanceToLabelParametersTagged = Required<Pick<MrisDistanceToLabelParameters, '@type'>> & MrisDistanceToLabelParameters;


/**
 * Output object returned when calling `MrisDistanceToLabelParameters(...)`.
 *
 * @interface
 */
interface MrisDistanceToLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param hemisphere Hemisphere to process (e.g., 'lh' for left hemisphere or 'rh' for right hemisphere)
 * @param subject_1 Subject identifier or path to the subject directory
 *
 * @returns Parameter dictionary
 */
function mris_distance_to_label_params(
    hemisphere: string,
    subject_1: string,
): MrisDistanceToLabelParametersTagged {
    const params = {
        "@type": "freesurfer/mris_distance_to_label" as const,
        "hemisphere": hemisphere,
        "subject_1": subject_1,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_distance_to_label_cargs(
    params: MrisDistanceToLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_distance_to_label");
    cargs.push((params["hemisphere"] ?? null));
    cargs.push((params["subject_1"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_distance_to_label_outputs(
    params: MrisDistanceToLabelParameters,
    execution: Execution,
): MrisDistanceToLabelOutputs {
    const ret: MrisDistanceToLabelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_distance_to_label
 *
 * A tool for measuring the distance between vertices on a surface and a labeled region.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisDistanceToLabelOutputs`).
 */
function mris_distance_to_label_execute(
    params: MrisDistanceToLabelParameters,
    runner: Runner | null = null,
): MrisDistanceToLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_DISTANCE_TO_LABEL_METADATA);
    params = execution.params(params)
    const cargs = mris_distance_to_label_cargs(params, execution)
    const ret = mris_distance_to_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_distance_to_label
 *
 * A tool for measuring the distance between vertices on a surface and a labeled region.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param hemisphere Hemisphere to process (e.g., 'lh' for left hemisphere or 'rh' for right hemisphere)
 * @param subject_1 Subject identifier or path to the subject directory
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisDistanceToLabelOutputs`).
 */
function mris_distance_to_label(
    hemisphere: string,
    subject_1: string,
    runner: Runner | null = null,
): MrisDistanceToLabelOutputs {
    const params = mris_distance_to_label_params(hemisphere, subject_1)
    return mris_distance_to_label_execute(params, runner);
}


export {
      MRIS_DISTANCE_TO_LABEL_METADATA,
      MrisDistanceToLabelOutputs,
      mris_distance_to_label,
      mris_distance_to_label_execute,
      mris_distance_to_label_params,
};
