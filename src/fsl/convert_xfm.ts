// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERT_XFM_METADATA: Metadata = {
    id: "38bc1e743ddf56ff89f0cc84ec2bc4af5d3c91f2.boutiques",
    name: "convert_xfm",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ConvertXfmParameters {
    "__STYXTYPE__": "convert_xfm";
    "out_file"?: string | null | undefined;
    "invert_xfm": boolean;
    "concat_xfm"?: InputPathType | null | undefined;
    "fix_scale_skew"?: InputPathType | null | undefined;
    "in_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "convert_xfm": convert_xfm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "convert_xfm": convert_xfm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `convert_xfm(...)`.
 *
 * @interface
 */
interface ConvertXfmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transformation matrix.
     */
    output_transformation: OutputPathType | null;
}


function convert_xfm_params(
    in_file: InputPathType,
    out_file: string | null = null,
    invert_xfm: boolean = false,
    concat_xfm: InputPathType | null = null,
    fix_scale_skew: InputPathType | null = null,
): ConvertXfmParameters {
    /**
     * Build parameters.
    
     * @param in_file Input transformation matrix.
     * @param out_file Final transformation matrix.
     * @param invert_xfm Invert input transformation.
     * @param concat_xfm A File. Write joint transformation of two input matrices.
     * @param fix_scale_skew A File. Use secondary matrix to fix scale and skew.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "convert_xfm" as const,
        "invert_xfm": invert_xfm,
        "in_file": in_file,
    };
    if (out_file !== null) {
        params["out_file"] = out_file;
    }
    if (concat_xfm !== null) {
        params["concat_xfm"] = concat_xfm;
    }
    if (fix_scale_skew !== null) {
        params["fix_scale_skew"] = fix_scale_skew;
    }
    return params;
}


function convert_xfm_cargs(
    params: ConvertXfmParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("convert_xfm");
    if ((params["out_file"] ?? null) !== null) {
        cargs.push(
            "-omat",
            (params["out_file"] ?? null)
        );
    }
    if ((params["invert_xfm"] ?? null)) {
        cargs.push("-inverse");
    }
    if ((params["concat_xfm"] ?? null) !== null) {
        cargs.push(
            "-concat",
            execution.inputFile((params["concat_xfm"] ?? null))
        );
    }
    if ((params["fix_scale_skew"] ?? null) !== null) {
        cargs.push(
            "-fixscaleskew",
            execution.inputFile((params["fix_scale_skew"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    return cargs;
}


function convert_xfm_outputs(
    params: ConvertXfmParameters,
    execution: Execution,
): ConvertXfmOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ConvertXfmOutputs = {
        root: execution.outputFile("."),
        output_transformation: ((params["out_file"] ?? null) !== null) ? execution.outputFile([(params["out_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function convert_xfm_execute(
    params: ConvertXfmParameters,
    execution: Execution,
): ConvertXfmOutputs {
    /**
     * convert_xfm is a utility that is used to convert between different transformation file formats. It can read and write ascii 4x4 matrices. In addition, it can be used to concatenate two transforms (using -concat with the second transform) or to find the inverse transformation (using -inverse).
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ConvertXfmOutputs`).
     */
    params = execution.params(params)
    const cargs = convert_xfm_cargs(params, execution)
    const ret = convert_xfm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function convert_xfm(
    in_file: InputPathType,
    out_file: string | null = null,
    invert_xfm: boolean = false,
    concat_xfm: InputPathType | null = null,
    fix_scale_skew: InputPathType | null = null,
    runner: Runner | null = null,
): ConvertXfmOutputs {
    /**
     * convert_xfm is a utility that is used to convert between different transformation file formats. It can read and write ascii 4x4 matrices. In addition, it can be used to concatenate two transforms (using -concat with the second transform) or to find the inverse transformation (using -inverse).
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param in_file Input transformation matrix.
     * @param out_file Final transformation matrix.
     * @param invert_xfm Invert input transformation.
     * @param concat_xfm A File. Write joint transformation of two input matrices.
     * @param fix_scale_skew A File. Use secondary matrix to fix scale and skew.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ConvertXfmOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERT_XFM_METADATA);
    const params = convert_xfm_params(in_file, out_file, invert_xfm, concat_xfm, fix_scale_skew)
    return convert_xfm_execute(params, execution);
}


export {
      CONVERT_XFM_METADATA,
      ConvertXfmOutputs,
      ConvertXfmParameters,
      convert_xfm,
      convert_xfm_params,
};
