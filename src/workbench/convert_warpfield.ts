// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERT_WARPFIELD_METADATA: Metadata = {
    id: "5aca5599202d9368288de6e4b335fa121d4945c6.boutiques",
    name: "convert-warpfield",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface ConvertWarpfieldFromWorldParameters {
    "@type": "workbench.convert-warpfield.from_world";
    "input": string;
    "opt_absolute": boolean;
}


interface ConvertWarpfieldFromFnirtParameters {
    "@type": "workbench.convert-warpfield.from_fnirt";
    "input": string;
    "source_volume": string;
    "opt_absolute": boolean;
}


interface ConvertWarpfieldToFnirtParameters {
    "@type": "workbench.convert-warpfield.to_fnirt";
    "output": string;
    "source_volume": string;
}


interface ConvertWarpfieldParameters {
    "@type": "workbench.convert-warpfield";
    "from_world"?: ConvertWarpfieldFromWorldParameters | null | undefined;
    "opt_from_itk_input"?: string | null | undefined;
    "from_fnirt"?: ConvertWarpfieldFromFnirtParameters | null | undefined;
    "opt_to_world_output"?: string | null | undefined;
    "opt_to_itk_output"?: string | null | undefined;
    "to_fnirt"?: Array<ConvertWarpfieldToFnirtParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.convert-warpfield": convert_warpfield_cargs,
        "workbench.convert-warpfield.from_world": convert_warpfield_from_world_cargs,
        "workbench.convert-warpfield.from_fnirt": convert_warpfield_from_fnirt_cargs,
        "workbench.convert-warpfield.to_fnirt": convert_warpfield_to_fnirt_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param input the input warpfield
 * @param opt_absolute warpfield was written in absolute convention, rather than relative
 *
 * @returns Parameter dictionary
 */
function convert_warpfield_from_world_params(
    input: string,
    opt_absolute: boolean = false,
): ConvertWarpfieldFromWorldParameters {
    const params = {
        "@type": "workbench.convert-warpfield.from_world" as const,
        "input": input,
        "opt_absolute": opt_absolute,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_warpfield_from_world_cargs(
    params: ConvertWarpfieldFromWorldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-from-world");
    cargs.push((params["input"] ?? null));
    if ((params["opt_absolute"] ?? null)) {
        cargs.push("-absolute");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param input the input warpfield
 * @param source_volume the source volume used when generating the input warpfield
 * @param opt_absolute warpfield was written in absolute convention, rather than relative
 *
 * @returns Parameter dictionary
 */
function convert_warpfield_from_fnirt_params(
    input: string,
    source_volume: string,
    opt_absolute: boolean = false,
): ConvertWarpfieldFromFnirtParameters {
    const params = {
        "@type": "workbench.convert-warpfield.from_fnirt" as const,
        "input": input,
        "source_volume": source_volume,
        "opt_absolute": opt_absolute,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_warpfield_from_fnirt_cargs(
    params: ConvertWarpfieldFromFnirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-from-fnirt");
    cargs.push((params["input"] ?? null));
    cargs.push((params["source_volume"] ?? null));
    if ((params["opt_absolute"] ?? null)) {
        cargs.push("-absolute");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param output output - the output warpfield
 * @param source_volume the volume you want to apply the warpfield to
 *
 * @returns Parameter dictionary
 */
function convert_warpfield_to_fnirt_params(
    output: string,
    source_volume: string,
): ConvertWarpfieldToFnirtParameters {
    const params = {
        "@type": "workbench.convert-warpfield.to_fnirt" as const,
        "output": output,
        "source_volume": source_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_warpfield_to_fnirt_cargs(
    params: ConvertWarpfieldToFnirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-to-fnirt");
    cargs.push((params["output"] ?? null));
    cargs.push((params["source_volume"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `convert_warpfield(...)`.
 *
 * @interface
 */
interface ConvertWarpfieldOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param from_world input is a NIFTI 'world' warpfield
 * @param opt_from_itk_input input is an ITK warpfield: the input warpfield
 * @param from_fnirt input is a fnirt warpfield
 * @param opt_to_world_output write output as a NIFTI 'world' warpfield: output - the output warpfield
 * @param opt_to_itk_output write output as an ITK warpfield: output - the output warpfield
 * @param to_fnirt write output as a fnirt warpfield
 *
 * @returns Parameter dictionary
 */
function convert_warpfield_params(
    from_world: ConvertWarpfieldFromWorldParameters | null = null,
    opt_from_itk_input: string | null = null,
    from_fnirt: ConvertWarpfieldFromFnirtParameters | null = null,
    opt_to_world_output: string | null = null,
    opt_to_itk_output: string | null = null,
    to_fnirt: Array<ConvertWarpfieldToFnirtParameters> | null = null,
): ConvertWarpfieldParameters {
    const params = {
        "@type": "workbench.convert-warpfield" as const,
    };
    if (from_world !== null) {
        params["from_world"] = from_world;
    }
    if (opt_from_itk_input !== null) {
        params["opt_from_itk_input"] = opt_from_itk_input;
    }
    if (from_fnirt !== null) {
        params["from_fnirt"] = from_fnirt;
    }
    if (opt_to_world_output !== null) {
        params["opt_to_world_output"] = opt_to_world_output;
    }
    if (opt_to_itk_output !== null) {
        params["opt_to_itk_output"] = opt_to_itk_output;
    }
    if (to_fnirt !== null) {
        params["to_fnirt"] = to_fnirt;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_warpfield_cargs(
    params: ConvertWarpfieldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-convert-warpfield");
    if ((params["from_world"] ?? null) !== null) {
        cargs.push(...dynCargs((params["from_world"] ?? null)["@type"])((params["from_world"] ?? null), execution));
    }
    if ((params["opt_from_itk_input"] ?? null) !== null) {
        cargs.push(
            "-from-itk",
            (params["opt_from_itk_input"] ?? null)
        );
    }
    if ((params["from_fnirt"] ?? null) !== null) {
        cargs.push(...dynCargs((params["from_fnirt"] ?? null)["@type"])((params["from_fnirt"] ?? null), execution));
    }
    if ((params["opt_to_world_output"] ?? null) !== null) {
        cargs.push(
            "-to-world",
            (params["opt_to_world_output"] ?? null)
        );
    }
    if ((params["opt_to_itk_output"] ?? null) !== null) {
        cargs.push(
            "-to-itk",
            (params["opt_to_itk_output"] ?? null)
        );
    }
    if ((params["to_fnirt"] ?? null) !== null) {
        cargs.push(...(params["to_fnirt"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function convert_warpfield_outputs(
    params: ConvertWarpfieldParameters,
    execution: Execution,
): ConvertWarpfieldOutputs {
    const ret: ConvertWarpfieldOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Convert a warpfield between conventions.
 *
 * NIFTI world warpfields can be used directly on mm coordinates via sampling the three subvolumes at the coordinate and adding the sampled values to the coordinate vector.  They use the NIFTI coordinate system, that is, X is left to right, Y is posterior to anterior, and Z is inferior to superior.
 *
 * NOTE: this command does not invert the warpfield, and to warp a surface, you must use the inverse of the warpfield that warps the corresponding volume.
 *
 * The ITK format is used by ANTS.
 *
 * You must specify exactly one -from option, but you may specify multiple -to options, and -to-fnirt may be specified more than once.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertWarpfieldOutputs`).
 */
function convert_warpfield_execute(
    params: ConvertWarpfieldParameters,
    runner: Runner | null = null,
): ConvertWarpfieldOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERT_WARPFIELD_METADATA);
    params = execution.params(params)
    const cargs = convert_warpfield_cargs(params, execution)
    const ret = convert_warpfield_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert a warpfield between conventions.
 *
 * NIFTI world warpfields can be used directly on mm coordinates via sampling the three subvolumes at the coordinate and adding the sampled values to the coordinate vector.  They use the NIFTI coordinate system, that is, X is left to right, Y is posterior to anterior, and Z is inferior to superior.
 *
 * NOTE: this command does not invert the warpfield, and to warp a surface, you must use the inverse of the warpfield that warps the corresponding volume.
 *
 * The ITK format is used by ANTS.
 *
 * You must specify exactly one -from option, but you may specify multiple -to options, and -to-fnirt may be specified more than once.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param from_world input is a NIFTI 'world' warpfield
 * @param opt_from_itk_input input is an ITK warpfield: the input warpfield
 * @param from_fnirt input is a fnirt warpfield
 * @param opt_to_world_output write output as a NIFTI 'world' warpfield: output - the output warpfield
 * @param opt_to_itk_output write output as an ITK warpfield: output - the output warpfield
 * @param to_fnirt write output as a fnirt warpfield
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertWarpfieldOutputs`).
 */
function convert_warpfield(
    from_world: ConvertWarpfieldFromWorldParameters | null = null,
    opt_from_itk_input: string | null = null,
    from_fnirt: ConvertWarpfieldFromFnirtParameters | null = null,
    opt_to_world_output: string | null = null,
    opt_to_itk_output: string | null = null,
    to_fnirt: Array<ConvertWarpfieldToFnirtParameters> | null = null,
    runner: Runner | null = null,
): ConvertWarpfieldOutputs {
    const params = convert_warpfield_params(from_world, opt_from_itk_input, from_fnirt, opt_to_world_output, opt_to_itk_output, to_fnirt)
    return convert_warpfield_execute(params, runner);
}


export {
      CONVERT_WARPFIELD_METADATA,
      ConvertWarpfieldFromFnirtParameters,
      ConvertWarpfieldFromWorldParameters,
      ConvertWarpfieldOutputs,
      ConvertWarpfieldParameters,
      ConvertWarpfieldToFnirtParameters,
      convert_warpfield,
      convert_warpfield_execute,
      convert_warpfield_from_fnirt_params,
      convert_warpfield_from_world_params,
      convert_warpfield_params,
      convert_warpfield_to_fnirt_params,
};
