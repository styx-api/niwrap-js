// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EPI_REG_METADATA: Metadata = {
    id: "397743cf48e9d8058e99b76a123e7617766baf7d.boutiques",
    name: "epi_reg",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface EpiRegParameters {
    "@type": "fsl.epi_reg";
    "epi": InputPathType;
    "t1_head": InputPathType;
    "t1_brain": InputPathType;
    "out_base_name": string;
    "echospacing"?: number | null | undefined;
    "fmap"?: InputPathType | null | undefined;
    "fmapmag"?: InputPathType | null | undefined;
    "fmapmagbrain"?: InputPathType | null | undefined;
    "no_clean": boolean;
    "no_fmapreg": boolean;
    "pedir"?: "x" | "y" | "z" | "-x" | "-y" | "-z" | null | undefined;
    "weight_image"?: InputPathType | null | undefined;
    "wmseg"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.epi_reg": epi_reg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.epi_reg": epi_reg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `epi_reg(...)`.
 *
 * @interface
 */
interface EpiRegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Rigid structural-to-epi transform.
     */
    epi2str_inv: OutputPathType;
    /**
     * Rigid epi-to-structural transform.
     */
    epi2str_mat: OutputPathType;
    /**
     * Rigid fieldmap-to-epi transform.
     */
    fmap2epi_mat: OutputPathType;
    /**
     * Rigid fieldmap-to-structural transform.
     */
    fmap2str_mat: OutputPathType;
    /**
     * Fieldmap in epi space.
     */
    fmap_epi: OutputPathType;
    /**
     * Fieldmap in structural space.
     */
    fmap_str: OutputPathType;
    /**
     * Fieldmap magnitude image in structural space.
     */
    fmapmag_str: OutputPathType;
    /**
     * Warpfield to unwarp epi and transform into structural space.
     */
    fullwarp: OutputPathType;
    /**
     * Unwarped and coregistered single volume.
     */
    out_1vol: OutputPathType;
    /**
     * Unwarped and coregistered epi input.
     */
    out_file: OutputPathType;
    /**
     * White matter, gray matter, csf segmentation.
     */
    seg: OutputPathType;
    /**
     * Shiftmap in epi space.
     */
    shiftmap: OutputPathType;
    /**
     * White matter edges for visualization.
     */
    wmedge: OutputPathType;
    /**
     * White matter segmentation used in flirt bbr.
     */
    wmseg_outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param epi EPI Nifti image.
 * @param t1_head Wholehead T1 image.
 * @param t1_brain Brain-extracted T1 image.
 * @param out_base_name Output base name.
 * @param echospacing Effective epi echo spacing (sometimes called dwell time) - in seconds.
 * @param fmap Fieldmap image (in rad/s).
 * @param fmapmag Fieldmap magnitude image - wholehead.
 * @param fmapmagbrain Fieldmap magnitude image - brain extracted.
 * @param no_clean Do not clean up intermediate files.
 * @param no_fmapreg Do not perform registration of fmap to t1 (use if fmap already registered).
 * @param pedir 'x' or 'y' or 'z' or '-x' or '-y' or '-z'. Phase encoding direction, dir = x/y/z/-x/-y/-z.
 * @param weight_image Weighting image (in t1 space).
 * @param wmseg White matter segmentation of t1 image, has to be named                  like the t1brain and end on _wmseg.
 *
 * @returns Parameter dictionary
 */
function epi_reg_params(
    epi: InputPathType,
    t1_head: InputPathType,
    t1_brain: InputPathType,
    out_base_name: string,
    echospacing: number | null = null,
    fmap: InputPathType | null = null,
    fmapmag: InputPathType | null = null,
    fmapmagbrain: InputPathType | null = null,
    no_clean: boolean = false,
    no_fmapreg: boolean = false,
    pedir: "x" | "y" | "z" | "-x" | "-y" | "-z" | null = null,
    weight_image: InputPathType | null = null,
    wmseg: InputPathType | null = null,
): EpiRegParameters {
    const params = {
        "@type": "fsl.epi_reg" as const,
        "epi": epi,
        "t1_head": t1_head,
        "t1_brain": t1_brain,
        "out_base_name": out_base_name,
        "no_clean": no_clean,
        "no_fmapreg": no_fmapreg,
    };
    if (echospacing !== null) {
        params["echospacing"] = echospacing;
    }
    if (fmap !== null) {
        params["fmap"] = fmap;
    }
    if (fmapmag !== null) {
        params["fmapmag"] = fmapmag;
    }
    if (fmapmagbrain !== null) {
        params["fmapmagbrain"] = fmapmagbrain;
    }
    if (pedir !== null) {
        params["pedir"] = pedir;
    }
    if (weight_image !== null) {
        params["weight_image"] = weight_image;
    }
    if (wmseg !== null) {
        params["wmseg"] = wmseg;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function epi_reg_cargs(
    params: EpiRegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("epi_reg");
    cargs.push(["--epi=", execution.inputFile((params["epi"] ?? null))].join(''));
    cargs.push(["--t1=", execution.inputFile((params["t1_head"] ?? null))].join(''));
    cargs.push(["--t1brain=", execution.inputFile((params["t1_brain"] ?? null))].join(''));
    cargs.push(["--out=", (params["out_base_name"] ?? null)].join(''));
    if ((params["echospacing"] ?? null) !== null) {
        cargs.push(["--echospacing=", String((params["echospacing"] ?? null))].join(''));
    }
    if ((params["fmap"] ?? null) !== null) {
        cargs.push(["--fmap=", execution.inputFile((params["fmap"] ?? null))].join(''));
    }
    if ((params["fmapmag"] ?? null) !== null) {
        cargs.push(["--fmapmag=", execution.inputFile((params["fmapmag"] ?? null))].join(''));
    }
    if ((params["fmapmagbrain"] ?? null) !== null) {
        cargs.push(["--fmapmagbrain=", execution.inputFile((params["fmapmagbrain"] ?? null))].join(''));
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("--noclean");
    }
    if ((params["no_fmapreg"] ?? null)) {
        cargs.push("--nofmapreg");
    }
    if ((params["pedir"] ?? null) !== null) {
        cargs.push(["--pedir=", (params["pedir"] ?? null)].join(''));
    }
    if ((params["weight_image"] ?? null) !== null) {
        cargs.push(["--weight=", execution.inputFile((params["weight_image"] ?? null))].join(''));
    }
    if ((params["wmseg"] ?? null) !== null) {
        cargs.push(["--wmseg=", execution.inputFile((params["wmseg"] ?? null))].join(''));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function epi_reg_outputs(
    params: EpiRegParameters,
    execution: Execution,
): EpiRegOutputs {
    const ret: EpiRegOutputs = {
        root: execution.outputFile("."),
        epi2str_inv: execution.outputFile(["epi2str_inv.mat"].join('')),
        epi2str_mat: execution.outputFile(["epi2struct.mat"].join('')),
        fmap2epi_mat: execution.outputFile(["fmap2epi.mat"].join('')),
        fmap2str_mat: execution.outputFile(["fmap2str.mat"].join('')),
        fmap_epi: execution.outputFile(["fmap_epi.nii.gz"].join('')),
        fmap_str: execution.outputFile(["fmap_str.nii.gz"].join('')),
        fmapmag_str: execution.outputFile(["fmapmag_str.nii.gz"].join('')),
        fullwarp: execution.outputFile(["fullwarp.nii.gz"].join('')),
        out_1vol: execution.outputFile(["out_1vol.nii.gz"].join('')),
        out_file: execution.outputFile([(params["out_base_name"] ?? null), ".nii.gz"].join('')),
        seg: execution.outputFile([(params["out_base_name"] ?? null), "_fast_seg.nii.gz"].join('')),
        shiftmap: execution.outputFile(["shiftmap.nii.gz"].join('')),
        wmedge: execution.outputFile([(params["out_base_name"] ?? null), "_fast_wmedge.nii.gz"].join('')),
        wmseg_outfile: execution.outputFile([(params["out_base_name"] ?? null), "_fast_wmseg.nii.gz"].join('')),
    };
    return ret;
}


/**
 * epi_reg
 *
 * Runs FSL epi_reg script for simultaneous coregistration and fieldmap unwarping.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `EpiRegOutputs`).
 */
function epi_reg_execute(
    params: EpiRegParameters,
    runner: Runner | null = null,
): EpiRegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EPI_REG_METADATA);
    params = execution.params(params)
    const cargs = epi_reg_cargs(params, execution)
    const ret = epi_reg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * epi_reg
 *
 * Runs FSL epi_reg script for simultaneous coregistration and fieldmap unwarping.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param epi EPI Nifti image.
 * @param t1_head Wholehead T1 image.
 * @param t1_brain Brain-extracted T1 image.
 * @param out_base_name Output base name.
 * @param echospacing Effective epi echo spacing (sometimes called dwell time) - in seconds.
 * @param fmap Fieldmap image (in rad/s).
 * @param fmapmag Fieldmap magnitude image - wholehead.
 * @param fmapmagbrain Fieldmap magnitude image - brain extracted.
 * @param no_clean Do not clean up intermediate files.
 * @param no_fmapreg Do not perform registration of fmap to t1 (use if fmap already registered).
 * @param pedir 'x' or 'y' or 'z' or '-x' or '-y' or '-z'. Phase encoding direction, dir = x/y/z/-x/-y/-z.
 * @param weight_image Weighting image (in t1 space).
 * @param wmseg White matter segmentation of t1 image, has to be named                  like the t1brain and end on _wmseg.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `EpiRegOutputs`).
 */
function epi_reg(
    epi: InputPathType,
    t1_head: InputPathType,
    t1_brain: InputPathType,
    out_base_name: string,
    echospacing: number | null = null,
    fmap: InputPathType | null = null,
    fmapmag: InputPathType | null = null,
    fmapmagbrain: InputPathType | null = null,
    no_clean: boolean = false,
    no_fmapreg: boolean = false,
    pedir: "x" | "y" | "z" | "-x" | "-y" | "-z" | null = null,
    weight_image: InputPathType | null = null,
    wmseg: InputPathType | null = null,
    runner: Runner | null = null,
): EpiRegOutputs {
    const params = epi_reg_params(epi, t1_head, t1_brain, out_base_name, echospacing, fmap, fmapmag, fmapmagbrain, no_clean, no_fmapreg, pedir, weight_image, wmseg)
    return epi_reg_execute(params, runner);
}


export {
      EPI_REG_METADATA,
      EpiRegOutputs,
      EpiRegParameters,
      epi_reg,
      epi_reg_execute,
      epi_reg_params,
};
