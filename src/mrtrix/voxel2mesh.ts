// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOXEL2MESH_METADATA: Metadata = {
    id: "85ff2c9f04efcbe2d5484d2e2ccd18c1577521ed.boutiques",
    name: "voxel2mesh",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Voxel2meshConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type Voxel2meshConfigParametersTagged = Required<Pick<Voxel2meshConfigParameters, '@type'>> & Voxel2meshConfigParameters;


interface Voxel2meshParameters {
    "@type"?: "mrtrix/voxel2mesh";
    "blocky": boolean;
    "threshold"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Voxel2meshConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "output": string;
}
type Voxel2meshParametersTagged = Required<Pick<Voxel2meshParameters, '@type'>> & Voxel2meshParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function voxel2mesh_config_params(
    key: string,
    value: string,
): Voxel2meshConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function voxel2mesh_config_cargs(
    params: Voxel2meshConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `Voxel2meshParameters(...)`.
 *
 * @interface
 */
interface Voxel2meshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output mesh file.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input image.
 * @param output the output mesh file.
 * @param blocky generate a 'blocky' mesh that precisely represents the voxel edges
 * @param threshold manually set the intensity threshold for the Marching Cubes algorithm
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function voxel2mesh_params(
    input: InputPathType,
    output: string,
    blocky: boolean = false,
    threshold: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Voxel2meshConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Voxel2meshParametersTagged {
    const params = {
        "@type": "mrtrix/voxel2mesh" as const,
        "blocky": blocky,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "output": output,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function voxel2mesh_cargs(
    params: Voxel2meshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("voxel2mesh");
    if ((params["blocky"] ?? false)) {
        cargs.push("-blocky");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => voxel2mesh_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function voxel2mesh_outputs(
    params: Voxel2meshParameters,
    execution: Execution,
): Voxel2meshOutputs {
    const ret: Voxel2meshOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * voxel2mesh
 *
 * Generate a surface mesh representation from a voxel image.
 *
 * This command utilises the Marching Cubes algorithm to generate a polygonal surface that represents the isocontour(s) of the input image at a particular intensity. By default, an appropriate threshold will be determined automatically from the input image, however the intensity value of the isocontour(s) can instead be set manually using the -threhsold option.
 *
 * If the -blocky option is used, then the Marching Cubes algorithm will not be used. Instead, the input image will be interpreted as a binary mask image, and polygonal surfaces will be generated at the outer faces of the voxel clusters within the mask.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Voxel2meshOutputs`).
 */
function voxel2mesh_execute(
    params: Voxel2meshParameters,
    runner: Runner | null = null,
): Voxel2meshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOXEL2MESH_METADATA);
    params = execution.params(params)
    const cargs = voxel2mesh_cargs(params, execution)
    const ret = voxel2mesh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * voxel2mesh
 *
 * Generate a surface mesh representation from a voxel image.
 *
 * This command utilises the Marching Cubes algorithm to generate a polygonal surface that represents the isocontour(s) of the input image at a particular intensity. By default, an appropriate threshold will be determined automatically from the input image, however the intensity value of the isocontour(s) can instead be set manually using the -threhsold option.
 *
 * If the -blocky option is used, then the Marching Cubes algorithm will not be used. Instead, the input image will be interpreted as a binary mask image, and polygonal surfaces will be generated at the outer faces of the voxel clusters within the mask.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input image.
 * @param output the output mesh file.
 * @param blocky generate a 'blocky' mesh that precisely represents the voxel edges
 * @param threshold manually set the intensity threshold for the Marching Cubes algorithm
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Voxel2meshOutputs`).
 */
function voxel2mesh(
    input: InputPathType,
    output: string,
    blocky: boolean = false,
    threshold: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Voxel2meshConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Voxel2meshOutputs {
    const params = voxel2mesh_params(input, output, blocky, threshold, info, quiet, debug, force, nthreads, config, help, version)
    return voxel2mesh_execute(params, runner);
}


export {
      VOXEL2MESH_METADATA,
      Voxel2meshOutputs,
      voxel2mesh,
      voxel2mesh_config_params,
      voxel2mesh_execute,
      voxel2mesh_params,
};
