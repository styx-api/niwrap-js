// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RTVIEW_METADATA: Metadata = {
    id: "bbfc6a7778d4c734c212389406f89e8b0c6cbe09.boutiques",
    name: "rtview",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RtviewParameters {
    "__STYXTYPE__": "rtview";
    "subject"?: string | null | undefined;
    "right_hemi": boolean;
    "polar": boolean;
    "real_file"?: InputPathType | null | undefined;
    "imag_file"?: InputPathType | null | undefined;
    "fsig_file"?: InputPathType | null | undefined;
    "reg_file"?: InputPathType | null | undefined;
    "flat_display": boolean;
    "patch"?: string | null | undefined;
    "tcl_file"?: InputPathType | null | undefined;
    "no_cleanup": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "rtview": rtview_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rtview(...)`.
 *
 * @interface
 */
interface RtviewOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function rtview_params(
    subject: string | null = null,
    right_hemi: boolean = false,
    polar: boolean = false,
    real_file: InputPathType | null = null,
    imag_file: InputPathType | null = null,
    fsig_file: InputPathType | null = null,
    reg_file: InputPathType | null = null,
    flat_display: boolean = false,
    patch: string | null = null,
    tcl_file: InputPathType | null = null,
    no_cleanup: boolean = false,
): RtviewParameters {
    /**
     * Build parameters.
    
     * @param subject Subject to use as display
     * @param right_hemi Display right hemisphere
     * @param polar Display polar data
     * @param real_file File containing real (cosine) values
     * @param imag_file File containing imaginary (sine) values
     * @param fsig_file File containing significance values
     * @param reg_file Registration file for when real/imag/fsig are volumes
     * @param flat_display Display on occip.patch.flat
     * @param patch Display on specified patchname
     * @param tcl_file Use your own TCL command file
     * @param no_cleanup Don't delete temporary directory
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "rtview" as const,
        "right_hemi": right_hemi,
        "polar": polar,
        "flat_display": flat_display,
        "no_cleanup": no_cleanup,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (real_file !== null) {
        params["real_file"] = real_file;
    }
    if (imag_file !== null) {
        params["imag_file"] = imag_file;
    }
    if (fsig_file !== null) {
        params["fsig_file"] = fsig_file;
    }
    if (reg_file !== null) {
        params["reg_file"] = reg_file;
    }
    if (patch !== null) {
        params["patch"] = patch;
    }
    if (tcl_file !== null) {
        params["tcl_file"] = tcl_file;
    }
    return params;
}


function rtview_cargs(
    params: RtviewParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("rtview");
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["right_hemi"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["polar"] ?? null)) {
        cargs.push("--polar");
    }
    if ((params["real_file"] ?? null) !== null) {
        cargs.push(
            "--real",
            execution.inputFile((params["real_file"] ?? null))
        );
    }
    if ((params["imag_file"] ?? null) !== null) {
        cargs.push(
            "--imag",
            execution.inputFile((params["imag_file"] ?? null))
        );
    }
    if ((params["fsig_file"] ?? null) !== null) {
        cargs.push(
            "--fsig",
            execution.inputFile((params["fsig_file"] ?? null))
        );
    }
    if ((params["reg_file"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["reg_file"] ?? null))
        );
    }
    if ((params["flat_display"] ?? null)) {
        cargs.push("--flat");
    }
    if ((params["patch"] ?? null) !== null) {
        cargs.push(
            "--patch",
            (params["patch"] ?? null)
        );
    }
    if ((params["tcl_file"] ?? null) !== null) {
        cargs.push(
            "--tcl",
            execution.inputFile((params["tcl_file"] ?? null))
        );
    }
    if ((params["no_cleanup"] ?? null)) {
        cargs.push("--no-cleanup");
    }
    return cargs;
}


function rtview_outputs(
    params: RtviewParameters,
    execution: Execution,
): RtviewOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RtviewOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function rtview_execute(
    params: RtviewParameters,
    execution: Execution,
): RtviewOutputs {
    /**
     * View FSFAST version 5 retinotopy data using the color wheel. This is a front-end for tksurfer, setting up the environment for using the color wheel.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RtviewOutputs`).
     */
    params = execution.params(params)
    const cargs = rtview_cargs(params, execution)
    const ret = rtview_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function rtview(
    subject: string | null = null,
    right_hemi: boolean = false,
    polar: boolean = false,
    real_file: InputPathType | null = null,
    imag_file: InputPathType | null = null,
    fsig_file: InputPathType | null = null,
    reg_file: InputPathType | null = null,
    flat_display: boolean = false,
    patch: string | null = null,
    tcl_file: InputPathType | null = null,
    no_cleanup: boolean = false,
    runner: Runner | null = null,
): RtviewOutputs {
    /**
     * View FSFAST version 5 retinotopy data using the color wheel. This is a front-end for tksurfer, setting up the environment for using the color wheel.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject to use as display
     * @param right_hemi Display right hemisphere
     * @param polar Display polar data
     * @param real_file File containing real (cosine) values
     * @param imag_file File containing imaginary (sine) values
     * @param fsig_file File containing significance values
     * @param reg_file Registration file for when real/imag/fsig are volumes
     * @param flat_display Display on occip.patch.flat
     * @param patch Display on specified patchname
     * @param tcl_file Use your own TCL command file
     * @param no_cleanup Don't delete temporary directory
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RtviewOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RTVIEW_METADATA);
    const params = rtview_params(subject, right_hemi, polar, real_file, imag_file, fsig_file, reg_file, flat_display, patch, tcl_file, no_cleanup)
    return rtview_execute(params, execution);
}


export {
      RTVIEW_METADATA,
      RtviewOutputs,
      RtviewParameters,
      rtview,
      rtview_params,
};
