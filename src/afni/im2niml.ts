// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IM2NIML_METADATA: Metadata = {
    id: "2a0436ee9182dd43de4cbf9c42cb1f57c2e1fb60.boutiques",
    name: "im2niml",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface Im2nimlParameters {
    "@type": "afni.im2niml";
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.im2niml": im2niml_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.im2niml": im2niml_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `im2niml(...)`.
 *
 * @interface
 */
interface Im2nimlOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * NIML element
     */
    niml_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input image file(s) (e.g. image.jpg)
 *
 * @returns Parameter dictionary
 */
function im2niml_params(
    input_files: Array<InputPathType>,
): Im2nimlParameters {
    const params = {
        "@type": "afni.im2niml" as const,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function im2niml_cargs(
    params: Im2nimlParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("im2niml");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function im2niml_outputs(
    params: Im2nimlParameters,
    execution: Execution,
): Im2nimlOutputs {
    const ret: Im2nimlOutputs = {
        root: execution.outputFile("."),
        niml_output: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * Converts the input image(s) to a text-based NIML element and writes the result to stdout.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Im2nimlOutputs`).
 */
function im2niml_execute(
    params: Im2nimlParameters,
    runner: Runner | null = null,
): Im2nimlOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IM2NIML_METADATA);
    params = execution.params(params)
    const cargs = im2niml_cargs(params, execution)
    const ret = im2niml_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Converts the input image(s) to a text-based NIML element and writes the result to stdout.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input image file(s) (e.g. image.jpg)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Im2nimlOutputs`).
 */
function im2niml(
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): Im2nimlOutputs {
    const params = im2niml_params(input_files)
    return im2niml_execute(params, runner);
}


export {
      IM2NIML_METADATA,
      Im2nimlOutputs,
      Im2nimlParameters,
      im2niml,
      im2niml_execute,
      im2niml_params,
};
