// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMDUMP_METADATA: Metadata = {
    id: "459004bda38f190bf54b7b93ee1f69c9a1440cdf.boutiques",
    name: "imdump",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImdumpParameters {
    "@type": "afni.imdump";
    "input_image": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.imdump": imdump_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.imdump": imdump_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imdump(...)`.
 *
 * @interface
 */
interface ImdumpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Nonzero pixels in the format: x-index y-index value, one pixel per line.
     */
    stdout: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input image file to be processed.
 *
 * @returns Parameter dictionary
 */
function imdump_params(
    input_image: InputPathType,
): ImdumpParameters {
    const params = {
        "@type": "afni.imdump" as const,
        "input_image": input_image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imdump_cargs(
    params: ImdumpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imdump");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imdump_outputs(
    params: ImdumpParameters,
    execution: Execution,
): ImdumpOutputs {
    const ret: ImdumpOutputs = {
        root: execution.outputFile("."),
        stdout: execution.outputFile(["stdout.txt"].join('')),
    };
    return ret;
}


/**
 * Prints out nonzero pixels in an image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `ImdumpOutputs`).
 */
function imdump_execute(
    params: ImdumpParameters,
    execution: Execution,
): ImdumpOutputs {
    params = execution.params(params)
    const cargs = imdump_cargs(params, execution)
    const ret = imdump_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Prints out nonzero pixels in an image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_image Input image file to be processed.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImdumpOutputs`).
 */
function imdump(
    input_image: InputPathType,
    runner: Runner | null = null,
): ImdumpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMDUMP_METADATA);
    const params = imdump_params(input_image)
    return imdump_execute(params, execution);
}


export {
      IMDUMP_METADATA,
      ImdumpOutputs,
      ImdumpParameters,
      imdump,
      imdump_cargs,
      imdump_execute,
      imdump_outputs,
      imdump_params,
};
