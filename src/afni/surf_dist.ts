// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_DIST_METADATA: Metadata = {
    id: "8b5c7176c66dac8d05149bdf650ac16471da45a7.boutiques",
    name: "SurfDist",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfDistParameters {
    "__STYXTYPE__": "SurfDist";
    "surface": InputPathType;
    "nodepairs": InputPathType;
    "node_path_do"?: string | null | undefined;
    "euclidean": boolean;
    "euclidian": boolean;
    "graph": boolean;
    "from_node"?: string | null | undefined;
    "to_nodes"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "SurfDist": surf_dist_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "SurfDist": surf_dist_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_dist(...)`.
 *
 * @interface
 */
interface SurfDistOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the distances between nodes
     */
    distances: OutputPathType;
}


function surf_dist_params(
    surface: InputPathType,
    nodepairs: InputPathType,
    node_path_do: string | null = null,
    euclidean: boolean = false,
    euclidian: boolean = false,
    graph: boolean = false,
    from_node: string | null = null,
    to_nodes: InputPathType | null = null,
): SurfDistParameters {
    /**
     * Build parameters.
    
     * @param surface Surface on which distances are computed.
     * @param nodepairs Specify node pairs for distance computation.
     * @param node_path_do Output the shortest path between each node pair as a SUMA Displayable object.
     * @param euclidean Calculate Euclidean distance, rather than graph distance.
     * @param euclidian Synonym for '-Euclidean'.
     * @param graph Calculate distance along the mesh (default).
     * @param from_node Specify one starting node for pair calculation.
     * @param to_nodes Specify nodes used for pair calculation when using -from_node.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "SurfDist" as const,
        "surface": surface,
        "nodepairs": nodepairs,
        "euclidean": euclidean,
        "euclidian": euclidian,
        "graph": graph,
    };
    if (node_path_do !== null) {
        params["node_path_do"] = node_path_do;
    }
    if (from_node !== null) {
        params["from_node"] = from_node;
    }
    if (to_nodes !== null) {
        params["to_nodes"] = to_nodes;
    }
    return params;
}


function surf_dist_cargs(
    params: SurfDistParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("SurfDist");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["nodepairs"] ?? null)));
    if ((params["node_path_do"] ?? null) !== null) {
        cargs.push(
            "-node_path_do",
            (params["node_path_do"] ?? null)
        );
    }
    if ((params["euclidean"] ?? null)) {
        cargs.push("-Euclidean");
    }
    if ((params["euclidian"] ?? null)) {
        cargs.push("-Euclidian");
    }
    if ((params["graph"] ?? null)) {
        cargs.push("-graph");
    }
    if ((params["from_node"] ?? null) !== null) {
        cargs.push(
            "-from_node",
            (params["from_node"] ?? null)
        );
    }
    if ((params["to_nodes"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["to_nodes"] ?? null))
        );
    }
    return cargs;
}


function surf_dist_outputs(
    params: SurfDistParameters,
    execution: Execution,
): SurfDistOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfDistOutputs = {
        root: execution.outputFile("."),
        distances: execution.outputFile(["example.1D"].join('')),
    };
    return ret;
}


function surf_dist_execute(
    params: SurfDistParameters,
    execution: Execution,
): SurfDistOutputs {
    /**
     * Calculate shortest distance between node pairs on a surface mesh.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfDistOutputs`).
     */
    params = execution.params(params)
    const cargs = surf_dist_cargs(params, execution)
    const ret = surf_dist_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surf_dist(
    surface: InputPathType,
    nodepairs: InputPathType,
    node_path_do: string | null = null,
    euclidean: boolean = false,
    euclidian: boolean = false,
    graph: boolean = false,
    from_node: string | null = null,
    to_nodes: InputPathType | null = null,
    runner: Runner | null = null,
): SurfDistOutputs {
    /**
     * Calculate shortest distance between node pairs on a surface mesh.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param surface Surface on which distances are computed.
     * @param nodepairs Specify node pairs for distance computation.
     * @param node_path_do Output the shortest path between each node pair as a SUMA Displayable object.
     * @param euclidean Calculate Euclidean distance, rather than graph distance.
     * @param euclidian Synonym for '-Euclidean'.
     * @param graph Calculate distance along the mesh (default).
     * @param from_node Specify one starting node for pair calculation.
     * @param to_nodes Specify nodes used for pair calculation when using -from_node.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfDistOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_DIST_METADATA);
    const params = surf_dist_params(surface, nodepairs, node_path_do, euclidean, euclidian, graph, from_node, to_nodes)
    return surf_dist_execute(params, execution);
}


export {
      SURF_DIST_METADATA,
      SurfDistOutputs,
      SurfDistParameters,
      surf_dist,
      surf_dist_params,
};
