// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLVBM_3_PROC_METADATA: Metadata = {
    id: "ff05c77d8554c204f7e186fceecc975b95c18cec.boutiques",
    name: "fslvbm_3_proc",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Fslvbm3ProcParameters {
    "@type": "fsl.fslvbm_3_proc";
    "arch"?: string | null | undefined;
    "coprocessor"?: string | null | undefined;
    "coprocessor_multi"?: string | null | undefined;
    "coprocessor_class"?: string | null | undefined;
    "coprocessor_class_strict": boolean;
    "coprocessor_toolkit"?: string | null | undefined;
    "not_requeueable": boolean;
    "jobhold"?: string | null | undefined;
    "array_hold"?: string | null | undefined;
    "logdir"?: string | null | undefined;
    "mailoptions"?: string | null | undefined;
    "mailto"?: string | null | undefined;
    "name"?: string | null | undefined;
    "priority"?: string | null | undefined;
    "queue"?: string | null | undefined;
    "resource"?: string | null | undefined;
    "delete_job"?: string | null | undefined;
    "memory_gb"?: number | null | undefined;
    "parallel_env_threads"?: string | null | undefined;
    "array_task"?: string | null | undefined;
    "array_native"?: string | null | undefined;
    "number_jobscripts"?: number | null | undefined;
    "keep_jobscript": boolean;
    "coprocessor_name"?: string | null | undefined;
    "has_queues": boolean;
    "project"?: string | null | undefined;
    "submit_scheduler": boolean;
    "runtime_limit"?: number | null | undefined;
    "show_config": boolean;
    "verbose": boolean;
    "version": boolean;
    "config_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslvbm_3_proc": fslvbm_3_proc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslvbm_3_proc": fslvbm_3_proc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslvbm_3_proc(...)`.
 *
 * @interface
 */
interface Fslvbm3ProcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output data directory
     */
    output_directory: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param arch Specify architecture
 * @param coprocessor Specify coprocessor
 * @param coprocessor_multi Specify multiple coprocessors
 * @param coprocessor_class Specify coprocessor class
 * @param coprocessor_class_strict Use strict class matching for coprocessor
 * @param coprocessor_toolkit Specify coprocessor toolkit
 * @param not_requeueable Do not requeue the job
 * @param jobhold Job to hold
 * @param array_hold Array hold
 * @param logdir Specify log directory
 * @param mailoptions Specify mail options
 * @param mailto Specify mail recipient
 * @param name Job name
 * @param priority Job priority
 * @param queue Queue to submit to
 * @param resource Resource identifier
 * @param delete_job Delete specified job
 * @param memory_gb Memory (GB)
 * @param parallel_env_threads Parallel environment and threads
 * @param array_task Array task file
 * @param array_native Array native specification
 * @param number_jobscripts Keep number of job scripts
 * @param keep_jobscript Keep job script
 * @param coprocessor_name Specify coprocessor name
 * @param has_queues Specify queues
 * @param project Specify project name
 * @param submit_scheduler Submit to Scheduler
 * @param runtime_limit Specify runtime limit in minutes
 * @param show_config Show configuration
 * @param verbose Verbose output
 * @param version Version information
 * @param config_file Specify configuration file
 *
 * @returns Parameter dictionary
 */
function fslvbm_3_proc_params(
    arch: string | null = null,
    coprocessor: string | null = null,
    coprocessor_multi: string | null = null,
    coprocessor_class: string | null = null,
    coprocessor_class_strict: boolean = false,
    coprocessor_toolkit: string | null = null,
    not_requeueable: boolean = false,
    jobhold: string | null = null,
    array_hold: string | null = null,
    logdir: string | null = null,
    mailoptions: string | null = null,
    mailto: string | null = null,
    name: string | null = null,
    priority: string | null = null,
    queue: string | null = null,
    resource: string | null = null,
    delete_job: string | null = null,
    memory_gb: number | null = null,
    parallel_env_threads: string | null = null,
    array_task: string | null = null,
    array_native: string | null = null,
    number_jobscripts: number | null = null,
    keep_jobscript: boolean = false,
    coprocessor_name: string | null = null,
    has_queues: boolean = false,
    project: string | null = null,
    submit_scheduler: boolean = false,
    runtime_limit: number | null = null,
    show_config: boolean = false,
    verbose: boolean = false,
    version: boolean = false,
    config_file: InputPathType | null = null,
): Fslvbm3ProcParameters {
    const params = {
        "@type": "fsl.fslvbm_3_proc" as const,
        "coprocessor_class_strict": coprocessor_class_strict,
        "not_requeueable": not_requeueable,
        "keep_jobscript": keep_jobscript,
        "has_queues": has_queues,
        "submit_scheduler": submit_scheduler,
        "show_config": show_config,
        "verbose": verbose,
        "version": version,
    };
    if (arch !== null) {
        params["arch"] = arch;
    }
    if (coprocessor !== null) {
        params["coprocessor"] = coprocessor;
    }
    if (coprocessor_multi !== null) {
        params["coprocessor_multi"] = coprocessor_multi;
    }
    if (coprocessor_class !== null) {
        params["coprocessor_class"] = coprocessor_class;
    }
    if (coprocessor_toolkit !== null) {
        params["coprocessor_toolkit"] = coprocessor_toolkit;
    }
    if (jobhold !== null) {
        params["jobhold"] = jobhold;
    }
    if (array_hold !== null) {
        params["array_hold"] = array_hold;
    }
    if (logdir !== null) {
        params["logdir"] = logdir;
    }
    if (mailoptions !== null) {
        params["mailoptions"] = mailoptions;
    }
    if (mailto !== null) {
        params["mailto"] = mailto;
    }
    if (name !== null) {
        params["name"] = name;
    }
    if (priority !== null) {
        params["priority"] = priority;
    }
    if (queue !== null) {
        params["queue"] = queue;
    }
    if (resource !== null) {
        params["resource"] = resource;
    }
    if (delete_job !== null) {
        params["delete_job"] = delete_job;
    }
    if (memory_gb !== null) {
        params["memory_gb"] = memory_gb;
    }
    if (parallel_env_threads !== null) {
        params["parallel_env_threads"] = parallel_env_threads;
    }
    if (array_task !== null) {
        params["array_task"] = array_task;
    }
    if (array_native !== null) {
        params["array_native"] = array_native;
    }
    if (number_jobscripts !== null) {
        params["number_jobscripts"] = number_jobscripts;
    }
    if (coprocessor_name !== null) {
        params["coprocessor_name"] = coprocessor_name;
    }
    if (project !== null) {
        params["project"] = project;
    }
    if (runtime_limit !== null) {
        params["runtime_limit"] = runtime_limit;
    }
    if (config_file !== null) {
        params["config_file"] = config_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslvbm_3_proc_cargs(
    params: Fslvbm3ProcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslvbm_3_proc");
    if ((params["arch"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["arch"] ?? null)
        );
    }
    if ((params["coprocessor"] ?? null) !== null) {
        cargs.push(
            "-c",
            (params["coprocessor"] ?? null)
        );
    }
    if ((params["coprocessor_multi"] ?? null) !== null) {
        cargs.push(
            "--coprocessor_multi",
            (params["coprocessor_multi"] ?? null)
        );
    }
    if ((params["coprocessor_class"] ?? null) !== null) {
        cargs.push(
            "--coprocessor_class",
            (params["coprocessor_class"] ?? null)
        );
    }
    if ((params["coprocessor_class_strict"] ?? null)) {
        cargs.push("--coprocessor_class_strict");
    }
    if ((params["coprocessor_toolkit"] ?? null) !== null) {
        cargs.push(
            "--coprocessor_toolkit",
            (params["coprocessor_toolkit"] ?? null)
        );
    }
    if ((params["not_requeueable"] ?? null)) {
        cargs.push("-F");
    }
    if ((params["jobhold"] ?? null) !== null) {
        cargs.push(
            "-j",
            (params["jobhold"] ?? null)
        );
    }
    if ((params["array_hold"] ?? null) !== null) {
        cargs.push(
            "--array_hold",
            (params["array_hold"] ?? null)
        );
    }
    if ((params["logdir"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["logdir"] ?? null)
        );
    }
    if ((params["mailoptions"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["mailoptions"] ?? null)
        );
    }
    if ((params["mailto"] ?? null) !== null) {
        cargs.push(
            "-M",
            (params["mailto"] ?? null)
        );
    }
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "-N",
            (params["name"] ?? null)
        );
    }
    if ((params["priority"] ?? null) !== null) {
        cargs.push(
            "-p",
            (params["priority"] ?? null)
        );
    }
    if ((params["queue"] ?? null) !== null) {
        cargs.push(
            "-q",
            (params["queue"] ?? null)
        );
    }
    if ((params["resource"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["resource"] ?? null)
        );
    }
    if ((params["delete_job"] ?? null) !== null) {
        cargs.push(
            "--delete_job",
            (params["delete_job"] ?? null)
        );
    }
    if ((params["memory_gb"] ?? null) !== null) {
        cargs.push(
            "-R",
            String((params["memory_gb"] ?? null))
        );
    }
    if ((params["parallel_env_threads"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["parallel_env_threads"] ?? null)
        );
    }
    if ((params["array_task"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["array_task"] ?? null)
        );
    }
    if ((params["array_native"] ?? null) !== null) {
        cargs.push(
            "--array_native",
            (params["array_native"] ?? null)
        );
    }
    if ((params["number_jobscripts"] ?? null) !== null) {
        cargs.push(
            "-x",
            String((params["number_jobscripts"] ?? null))
        );
    }
    if ((params["keep_jobscript"] ?? null)) {
        cargs.push("--keep_jobscript");
    }
    if ((params["coprocessor_name"] ?? null) !== null) {
        cargs.push(
            "--has_coprocessor",
            (params["coprocessor_name"] ?? null)
        );
    }
    if ((params["has_queues"] ?? null)) {
        cargs.push("--has_queues");
    }
    if ((params["project"] ?? null) !== null) {
        cargs.push(
            "--project",
            (params["project"] ?? null)
        );
    }
    if ((params["submit_scheduler"] ?? null)) {
        cargs.push("-S");
    }
    if ((params["runtime_limit"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["runtime_limit"] ?? null))
        );
    }
    if ((params["show_config"] ?? null)) {
        cargs.push("--show_config");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-V");
    }
    if ((params["config_file"] ?? null) !== null) {
        cargs.push(
            "-z",
            execution.inputFile((params["config_file"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslvbm_3_proc_outputs(
    params: Fslvbm3ProcParameters,
    execution: Execution,
): Fslvbm3ProcOutputs {
    const ret: Fslvbm3ProcOutputs = {
        root: execution.outputFile("."),
        output_directory: execution.outputFile(["fslvbm3a"].join('')),
    };
    return ret;
}


/**
 * Pipeline for voxel-based morphometry analysis using FSL tools.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Fslvbm3ProcOutputs`).
 */
function fslvbm_3_proc_execute(
    params: Fslvbm3ProcParameters,
    execution: Execution,
): Fslvbm3ProcOutputs {
    params = execution.params(params)
    const cargs = fslvbm_3_proc_cargs(params, execution)
    const ret = fslvbm_3_proc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Pipeline for voxel-based morphometry analysis using FSL tools.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param arch Specify architecture
 * @param coprocessor Specify coprocessor
 * @param coprocessor_multi Specify multiple coprocessors
 * @param coprocessor_class Specify coprocessor class
 * @param coprocessor_class_strict Use strict class matching for coprocessor
 * @param coprocessor_toolkit Specify coprocessor toolkit
 * @param not_requeueable Do not requeue the job
 * @param jobhold Job to hold
 * @param array_hold Array hold
 * @param logdir Specify log directory
 * @param mailoptions Specify mail options
 * @param mailto Specify mail recipient
 * @param name Job name
 * @param priority Job priority
 * @param queue Queue to submit to
 * @param resource Resource identifier
 * @param delete_job Delete specified job
 * @param memory_gb Memory (GB)
 * @param parallel_env_threads Parallel environment and threads
 * @param array_task Array task file
 * @param array_native Array native specification
 * @param number_jobscripts Keep number of job scripts
 * @param keep_jobscript Keep job script
 * @param coprocessor_name Specify coprocessor name
 * @param has_queues Specify queues
 * @param project Specify project name
 * @param submit_scheduler Submit to Scheduler
 * @param runtime_limit Specify runtime limit in minutes
 * @param show_config Show configuration
 * @param verbose Verbose output
 * @param version Version information
 * @param config_file Specify configuration file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fslvbm3ProcOutputs`).
 */
function fslvbm_3_proc(
    arch: string | null = null,
    coprocessor: string | null = null,
    coprocessor_multi: string | null = null,
    coprocessor_class: string | null = null,
    coprocessor_class_strict: boolean = false,
    coprocessor_toolkit: string | null = null,
    not_requeueable: boolean = false,
    jobhold: string | null = null,
    array_hold: string | null = null,
    logdir: string | null = null,
    mailoptions: string | null = null,
    mailto: string | null = null,
    name: string | null = null,
    priority: string | null = null,
    queue: string | null = null,
    resource: string | null = null,
    delete_job: string | null = null,
    memory_gb: number | null = null,
    parallel_env_threads: string | null = null,
    array_task: string | null = null,
    array_native: string | null = null,
    number_jobscripts: number | null = null,
    keep_jobscript: boolean = false,
    coprocessor_name: string | null = null,
    has_queues: boolean = false,
    project: string | null = null,
    submit_scheduler: boolean = false,
    runtime_limit: number | null = null,
    show_config: boolean = false,
    verbose: boolean = false,
    version: boolean = false,
    config_file: InputPathType | null = null,
    runner: Runner | null = null,
): Fslvbm3ProcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLVBM_3_PROC_METADATA);
    const params = fslvbm_3_proc_params(arch, coprocessor, coprocessor_multi, coprocessor_class, coprocessor_class_strict, coprocessor_toolkit, not_requeueable, jobhold, array_hold, logdir, mailoptions, mailto, name, priority, queue, resource, delete_job, memory_gb, parallel_env_threads, array_task, array_native, number_jobscripts, keep_jobscript, coprocessor_name, has_queues, project, submit_scheduler, runtime_limit, show_config, verbose, version, config_file)
    return fslvbm_3_proc_execute(params, execution);
}


export {
      FSLVBM_3_PROC_METADATA,
      Fslvbm3ProcOutputs,
      Fslvbm3ProcParameters,
      fslvbm_3_proc,
      fslvbm_3_proc_cargs,
      fslvbm_3_proc_execute,
      fslvbm_3_proc_outputs,
      fslvbm_3_proc_params,
};
