// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABELS_UNION_METADATA: Metadata = {
    id: "31af3a14a7e9b9db29234914f8b77ce6c20e7f2e.boutiques",
    name: "labels_union",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LabelsUnionParameters {
    "@type": "freesurfer.labels_union";
    "label1": InputPathType;
    "label2": InputPathType;
    "outputname": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.labels_union": labels_union_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.labels_union": labels_union_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `labels_union(...)`.
 *
 * @interface
 */
interface LabelsUnionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Union of the two label files
     */
    union_label: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label1 First label file (e.g., rh.BA3a.label)
 * @param label2 Second label file (e.g., rh.BA3b.label)
 * @param outputname Output name for the union label file (e.g., rh.BA3ab.union.label)
 *
 * @returns Parameter dictionary
 */
function labels_union_params(
    label1: InputPathType,
    label2: InputPathType,
    outputname: string,
): LabelsUnionParameters {
    const params = {
        "@type": "freesurfer.labels_union" as const,
        "label1": label1,
        "label2": label2,
        "outputname": outputname,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function labels_union_cargs(
    params: LabelsUnionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("labels_union");
    cargs.push(execution.inputFile((params["label1"] ?? null)));
    cargs.push(execution.inputFile((params["label2"] ?? null)));
    cargs.push((params["outputname"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function labels_union_outputs(
    params: LabelsUnionParameters,
    execution: Execution,
): LabelsUnionOutputs {
    const ret: LabelsUnionOutputs = {
        root: execution.outputFile("."),
        union_label: execution.outputFile([(params["outputname"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Utility to create the union of two label files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelsUnionOutputs`).
 */
function labels_union_execute(
    params: LabelsUnionParameters,
    runner: Runner | null = null,
): LabelsUnionOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABELS_UNION_METADATA);
    params = execution.params(params)
    const cargs = labels_union_cargs(params, execution)
    const ret = labels_union_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Utility to create the union of two label files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param label1 First label file (e.g., rh.BA3a.label)
 * @param label2 Second label file (e.g., rh.BA3b.label)
 * @param outputname Output name for the union label file (e.g., rh.BA3ab.union.label)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelsUnionOutputs`).
 */
function labels_union(
    label1: InputPathType,
    label2: InputPathType,
    outputname: string,
    runner: Runner | null = null,
): LabelsUnionOutputs {
    const params = labels_union_params(label1, label2, outputname)
    return labels_union_execute(params, runner);
}


export {
      LABELS_UNION_METADATA,
      LabelsUnionOutputs,
      LabelsUnionParameters,
      labels_union,
      labels_union_execute,
      labels_union_params,
};
