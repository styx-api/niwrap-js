// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MULTIPLY_IMAGES_METADATA: Metadata = {
    id: "b6e8db4f48e2712b28e3d2e665c15294bd29849c.boutiques",
    name: "MultiplyImages",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface MultiplyImagesParameters {
    "__STYXTYPE__": "MultiplyImages";
    "dimension": 3 | 2;
    "first_input": InputPathType;
    "second_input"?: InputPathType | null | undefined;
    "second_input_2"?: number | null | undefined;
    "output_product_image": string;
    "num_threads"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "MultiplyImages": multiply_images_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "MultiplyImages": multiply_images_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `multiply_images(...)`.
 *
 * @interface
 */
interface MultiplyImagesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Average image file.
     */
    output_product_image_outfile: OutputPathType;
}


function multiply_images_params(
    dimension: 3 | 2,
    first_input: InputPathType,
    output_product_image: string,
    second_input: InputPathType | null = null,
    second_input_2: number | null = null,
    num_threads: number | null = 1,
): MultiplyImagesParameters {
    /**
     * Build parameters.
    
     * @param dimension 3 or 2. Image dimension (2 or 3).
     * @param first_input Image 1.
     * @param output_product_image Outputfname.nii.gz: the name of the resulting image.
     * @param second_input file or string or a float. Image 2 or multiplication weight.
     * @param second_input_2 file or string or a float. Image 2 or multiplication weight.
     * @param num_threads Number of itk threads to use.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "MultiplyImages" as const,
        "dimension": dimension,
        "first_input": first_input,
        "output_product_image": output_product_image,
    };
    if (second_input !== null) {
        params["second_input"] = second_input;
    }
    if (second_input_2 !== null) {
        params["second_input_2"] = second_input_2;
    }
    if (num_threads !== null) {
        params["num_threads"] = num_threads;
    }
    return params;
}


function multiply_images_cargs(
    params: MultiplyImagesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("MultiplyImages");
    cargs.push(String((params["dimension"] ?? null)));
    cargs.push(execution.inputFile((params["first_input"] ?? null)));
    if ((params["second_input"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["second_input"] ?? null)));
    }
    if ((params["second_input_2"] ?? null) !== null) {
        cargs.push(String((params["second_input_2"] ?? null)));
    }
    cargs.push((params["output_product_image"] ?? null));
    if ((params["num_threads"] ?? null) !== null) {
        cargs.push(String((params["num_threads"] ?? null)));
    }
    return cargs;
}


function multiply_images_outputs(
    params: MultiplyImagesParameters,
    execution: Execution,
): MultiplyImagesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MultiplyImagesOutputs = {
        root: execution.outputFile("."),
        output_product_image_outfile: execution.outputFile([(params["output_product_image"] ?? null)].join('')),
    };
    return ret;
}


function multiply_images_execute(
    params: MultiplyImagesParameters,
    execution: Execution,
): MultiplyImagesOutputs {
    /**
     * Multiply 2 images; 2nd image file may also be floating point numerical value, and program will act accordingly -- i.e. read as a number. Program handles vector and tensor images as well.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MultiplyImagesOutputs`).
     */
    params = execution.params(params)
    const cargs = multiply_images_cargs(params, execution)
    const ret = multiply_images_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function multiply_images(
    dimension: 3 | 2,
    first_input: InputPathType,
    output_product_image: string,
    second_input: InputPathType | null = null,
    second_input_2: number | null = null,
    num_threads: number | null = 1,
    runner: Runner | null = null,
): MultiplyImagesOutputs {
    /**
     * Multiply 2 images; 2nd image file may also be floating point numerical value, and program will act accordingly -- i.e. read as a number. Program handles vector and tensor images as well.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param dimension 3 or 2. Image dimension (2 or 3).
     * @param first_input Image 1.
     * @param output_product_image Outputfname.nii.gz: the name of the resulting image.
     * @param second_input file or string or a float. Image 2 or multiplication weight.
     * @param second_input_2 file or string or a float. Image 2 or multiplication weight.
     * @param num_threads Number of itk threads to use.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MultiplyImagesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MULTIPLY_IMAGES_METADATA);
    const params = multiply_images_params(dimension, first_input, output_product_image, second_input, second_input_2, num_threads)
    return multiply_images_execute(params, execution);
}


export {
      MULTIPLY_IMAGES_METADATA,
      MultiplyImagesOutputs,
      MultiplyImagesParameters,
      multiply_images,
      multiply_images_params,
};
