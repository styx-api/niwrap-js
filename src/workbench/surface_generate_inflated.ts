// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_GENERATE_INFLATED_METADATA: Metadata = {
    id: "9c016947a1a72f762f5cf06f27ae9587bfe30607.boutiques",
    name: "surface-generate-inflated",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceGenerateInflatedParameters {
    "__STYXTYPE__": "surface-generate-inflated";
    "anatomical_surface_in": InputPathType;
    "inflated_surface_out": string;
    "very_inflated_surface_out": string;
    "opt_iterations_scale_iterations_scale_value"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-generate-inflated": surface_generate_inflated_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-generate-inflated": surface_generate_inflated_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_generate_inflated(...)`.
 *
 * @interface
 */
interface SurfaceGenerateInflatedOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output inflated surface
     */
    inflated_surface_out: OutputPathType;
    /**
     * the output very inflated surface
     */
    very_inflated_surface_out: OutputPathType;
}


function surface_generate_inflated_params(
    anatomical_surface_in: InputPathType,
    inflated_surface_out: string,
    very_inflated_surface_out: string,
    opt_iterations_scale_iterations_scale_value: number | null = null,
): SurfaceGenerateInflatedParameters {
    /**
     * Build parameters.
    
     * @param anatomical_surface_in the anatomical surface
     * @param inflated_surface_out the output inflated surface
     * @param very_inflated_surface_out the output very inflated surface
     * @param opt_iterations_scale_iterations_scale_value optional iterations scaling: iterations-scale value
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-generate-inflated" as const,
        "anatomical_surface_in": anatomical_surface_in,
        "inflated_surface_out": inflated_surface_out,
        "very_inflated_surface_out": very_inflated_surface_out,
    };
    if (opt_iterations_scale_iterations_scale_value !== null) {
        params["opt_iterations_scale_iterations_scale_value"] = opt_iterations_scale_iterations_scale_value;
    }
    return params;
}


function surface_generate_inflated_cargs(
    params: SurfaceGenerateInflatedParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-generate-inflated");
    cargs.push(execution.inputFile((params["anatomical_surface_in"] ?? null)));
    cargs.push((params["inflated_surface_out"] ?? null));
    cargs.push((params["very_inflated_surface_out"] ?? null));
    if ((params["opt_iterations_scale_iterations_scale_value"] ?? null) !== null) {
        cargs.push(
            "-iterations-scale",
            String((params["opt_iterations_scale_iterations_scale_value"] ?? null))
        );
    }
    return cargs;
}


function surface_generate_inflated_outputs(
    params: SurfaceGenerateInflatedParameters,
    execution: Execution,
): SurfaceGenerateInflatedOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceGenerateInflatedOutputs = {
        root: execution.outputFile("."),
        inflated_surface_out: execution.outputFile([(params["inflated_surface_out"] ?? null)].join('')),
        very_inflated_surface_out: execution.outputFile([(params["very_inflated_surface_out"] ?? null)].join('')),
    };
    return ret;
}


function surface_generate_inflated_execute(
    params: SurfaceGenerateInflatedParameters,
    execution: Execution,
): SurfaceGenerateInflatedOutputs {
    /**
     * Surface generate inflated.
     * 
     * Generate inflated and very inflated surfaces. The output surfaces are 'matched' (have same XYZ range) to the anatomical surface. In most cases, an iterations-scale of 1.0 (default) is sufficient.  However, if the surface contains a large number of vertices (150,000), try an iterations-scale of 2.5.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceGenerateInflatedOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_generate_inflated_cargs(params, execution)
    const ret = surface_generate_inflated_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_generate_inflated(
    anatomical_surface_in: InputPathType,
    inflated_surface_out: string,
    very_inflated_surface_out: string,
    opt_iterations_scale_iterations_scale_value: number | null = null,
    runner: Runner | null = null,
): SurfaceGenerateInflatedOutputs {
    /**
     * Surface generate inflated.
     * 
     * Generate inflated and very inflated surfaces. The output surfaces are 'matched' (have same XYZ range) to the anatomical surface. In most cases, an iterations-scale of 1.0 (default) is sufficient.  However, if the surface contains a large number of vertices (150,000), try an iterations-scale of 2.5.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param anatomical_surface_in the anatomical surface
     * @param inflated_surface_out the output inflated surface
     * @param very_inflated_surface_out the output very inflated surface
     * @param opt_iterations_scale_iterations_scale_value optional iterations scaling: iterations-scale value
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceGenerateInflatedOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_GENERATE_INFLATED_METADATA);
    const params = surface_generate_inflated_params(anatomical_surface_in, inflated_surface_out, very_inflated_surface_out, opt_iterations_scale_iterations_scale_value)
    return surface_generate_inflated_execute(params, execution);
}


export {
      SURFACE_GENERATE_INFLATED_METADATA,
      SurfaceGenerateInflatedOutputs,
      SurfaceGenerateInflatedParameters,
      surface_generate_inflated,
      surface_generate_inflated_params,
};
