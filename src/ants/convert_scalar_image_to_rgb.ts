// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERT_SCALAR_IMAGE_TO_RGB_METADATA: Metadata = {
    id: "3d2bbf73fe4824b5d14e6ad1dad04dc288964f49.boutiques",
    name: "ConvertScalarImageToRGB",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface ConvertScalarImageToRgbParameters {
    "@type": "ants.ConvertScalarImageToRGB";
    "image_dimension": number;
    "input_image": InputPathType;
    "output_image": string;
    "mask": InputPathType;
    "colormap": "grey" | "red" | "green" | "blue" | "copper" | "jet" | "hsv" | "spring" | "summer" | "autumn" | "winter" | "hot" | "cool" | "overunder" | "custom";
    "custom_colormap_file"?: InputPathType | null | undefined;
    "minimum_input"?: number | null | undefined;
    "maximum_input"?: number | null | undefined;
    "minimum_rgb_output"?: number | null | undefined;
    "maximum_rgb_output"?: number | null | undefined;
    "vtk_lookup_table"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.ConvertScalarImageToRGB": convert_scalar_image_to_rgb_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.ConvertScalarImageToRGB": convert_scalar_image_to_rgb_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `convert_scalar_image_to_rgb(...)`.
 *
 * @interface
 */
interface ConvertScalarImageToRgbOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting RGB image after conversion.
     */
    output_rgb_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimensionality of the image (e.g., 2D or 3D).
 * @param input_image The input scalar image to be converted to RGB.
 * @param output_image The output RGB image file.
 * @param mask The mask image to apply during conversion.
 * @param colormap The colormap to use for RGB conversion.
 * @param custom_colormap_file The file specifying the custom colormap (only used if colormap is 'custom').
 * @param minimum_input The minimum input value for scaling.
 * @param maximum_input The maximum input value for scaling.
 * @param minimum_rgb_output The minimum output value for the RGB image. Defaults to 0.
 * @param maximum_rgb_output The maximum output value for the RGB image. Defaults to 255.
 * @param vtk_lookup_table The VTK lookup table to apply for additional customization.
 *
 * @returns Parameter dictionary
 */
function convert_scalar_image_to_rgb_params(
    image_dimension: number,
    input_image: InputPathType,
    output_image: string,
    mask: InputPathType,
    colormap: "grey" | "red" | "green" | "blue" | "copper" | "jet" | "hsv" | "spring" | "summer" | "autumn" | "winter" | "hot" | "cool" | "overunder" | "custom",
    custom_colormap_file: InputPathType | null = null,
    minimum_input: number | null = null,
    maximum_input: number | null = null,
    minimum_rgb_output: number | null = null,
    maximum_rgb_output: number | null = null,
    vtk_lookup_table: string | null = null,
): ConvertScalarImageToRgbParameters {
    const params = {
        "@type": "ants.ConvertScalarImageToRGB" as const,
        "image_dimension": image_dimension,
        "input_image": input_image,
        "output_image": output_image,
        "mask": mask,
        "colormap": colormap,
    };
    if (custom_colormap_file !== null) {
        params["custom_colormap_file"] = custom_colormap_file;
    }
    if (minimum_input !== null) {
        params["minimum_input"] = minimum_input;
    }
    if (maximum_input !== null) {
        params["maximum_input"] = maximum_input;
    }
    if (minimum_rgb_output !== null) {
        params["minimum_rgb_output"] = minimum_rgb_output;
    }
    if (maximum_rgb_output !== null) {
        params["maximum_rgb_output"] = maximum_rgb_output;
    }
    if (vtk_lookup_table !== null) {
        params["vtk_lookup_table"] = vtk_lookup_table;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_scalar_image_to_rgb_cargs(
    params: ConvertScalarImageToRgbParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ConvertScalarImageToRGB");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push((params["colormap"] ?? null));
    if ((params["custom_colormap_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["custom_colormap_file"] ?? null)));
    }
    if ((params["minimum_input"] ?? null) !== null) {
        cargs.push(String((params["minimum_input"] ?? null)));
    }
    if ((params["maximum_input"] ?? null) !== null) {
        cargs.push(String((params["maximum_input"] ?? null)));
    }
    if ((params["minimum_rgb_output"] ?? null) !== null) {
        cargs.push(String((params["minimum_rgb_output"] ?? null)));
    }
    if ((params["maximum_rgb_output"] ?? null) !== null) {
        cargs.push(String((params["maximum_rgb_output"] ?? null)));
    }
    if ((params["vtk_lookup_table"] ?? null) !== null) {
        cargs.push((params["vtk_lookup_table"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function convert_scalar_image_to_rgb_outputs(
    params: ConvertScalarImageToRgbParameters,
    execution: Execution,
): ConvertScalarImageToRgbOutputs {
    const ret: ConvertScalarImageToRgbOutputs = {
        root: execution.outputFile("."),
        output_rgb_image: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ConvertScalarImageToRGB
 *
 * Converts a scalar image to an RGB image using specified parameters. Supports multiple colormap options and customization.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertScalarImageToRgbOutputs`).
 */
function convert_scalar_image_to_rgb_execute(
    params: ConvertScalarImageToRgbParameters,
    runner: Runner | null = null,
): ConvertScalarImageToRgbOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERT_SCALAR_IMAGE_TO_RGB_METADATA);
    params = execution.params(params)
    const cargs = convert_scalar_image_to_rgb_cargs(params, execution)
    const ret = convert_scalar_image_to_rgb_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ConvertScalarImageToRGB
 *
 * Converts a scalar image to an RGB image using specified parameters. Supports multiple colormap options and customization.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimensionality of the image (e.g., 2D or 3D).
 * @param input_image The input scalar image to be converted to RGB.
 * @param output_image The output RGB image file.
 * @param mask The mask image to apply during conversion.
 * @param colormap The colormap to use for RGB conversion.
 * @param custom_colormap_file The file specifying the custom colormap (only used if colormap is 'custom').
 * @param minimum_input The minimum input value for scaling.
 * @param maximum_input The maximum input value for scaling.
 * @param minimum_rgb_output The minimum output value for the RGB image. Defaults to 0.
 * @param maximum_rgb_output The maximum output value for the RGB image. Defaults to 255.
 * @param vtk_lookup_table The VTK lookup table to apply for additional customization.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertScalarImageToRgbOutputs`).
 */
function convert_scalar_image_to_rgb(
    image_dimension: number,
    input_image: InputPathType,
    output_image: string,
    mask: InputPathType,
    colormap: "grey" | "red" | "green" | "blue" | "copper" | "jet" | "hsv" | "spring" | "summer" | "autumn" | "winter" | "hot" | "cool" | "overunder" | "custom",
    custom_colormap_file: InputPathType | null = null,
    minimum_input: number | null = null,
    maximum_input: number | null = null,
    minimum_rgb_output: number | null = null,
    maximum_rgb_output: number | null = null,
    vtk_lookup_table: string | null = null,
    runner: Runner | null = null,
): ConvertScalarImageToRgbOutputs {
    const params = convert_scalar_image_to_rgb_params(image_dimension, input_image, output_image, mask, colormap, custom_colormap_file, minimum_input, maximum_input, minimum_rgb_output, maximum_rgb_output, vtk_lookup_table)
    return convert_scalar_image_to_rgb_execute(params, runner);
}


export {
      CONVERT_SCALAR_IMAGE_TO_RGB_METADATA,
      ConvertScalarImageToRgbOutputs,
      ConvertScalarImageToRgbParameters,
      convert_scalar_image_to_rgb,
      convert_scalar_image_to_rgb_execute,
      convert_scalar_image_to_rgb_params,
};
