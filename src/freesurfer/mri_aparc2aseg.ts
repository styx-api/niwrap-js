// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_APARC2ASEG_METADATA: Metadata = {
    id: "0b4fa72d59bc4736773c396ee961d7d9070c06da.boutiques",
    name: "mri_aparc2aseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriAparc2asegParameters {
    "@type": "freesurfer.mri_aparc2aseg";
    "subject"?: string | null | undefined;
    "output_volfile"?: string | null | undefined;
    "old_ribbon": boolean;
    "new_ribbon": boolean;
    "a2005s": boolean;
    "a2009s": boolean;
    "annot_name"?: string | null | undefined;
    "annot_table"?: string | null | undefined;
    "base_offset"?: number | null | undefined;
    "label_wm": boolean;
    "wmparc_dmax"?: number | null | undefined;
    "rip_unknown": boolean;
    "hypo_as_wm": boolean;
    "no_fix_parahip": boolean;
    "smooth_normals"?: number | null | undefined;
    "crs_test"?: string | null | undefined;
    "left_hemisphere": boolean;
    "right_hemisphere": boolean;
    "threads"?: number | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_aparc2aseg": mri_aparc2aseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_aparc2aseg": mri_aparc2aseg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_aparc2aseg(...)`.
 *
 * @interface
 */
interface MriAparc2asegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output segmentation volume.
     */
    output_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Name of the subject as found in the SUBJECTS_DIR.
 * @param output_volfile Full path of file to save the output segmentation in. Default is mri/aparc+aseg.mgz
 * @param old_ribbon Use mri/hemi.ribbon.mgz as a mask for the cortex
 * @param new_ribbon Mask cortical voxels with mri/ribbon.mgz. Same as --volmask
 * @param a2005s Use ?h.aparc.a2005s.annot. Output will be aparc.a2005s+aseg.mgz.
 * @param a2009s Use ?h.aparc.a2009s.annot. Output will be aparc.a2009s+aseg.mgz.
 * @param annot_name Use annotname surface annotation. By default, uses ?h.aparc.annot.
 * @param annot_table Annotation table file. Default is $FREESURFER_HOME/Simple_surface_labels2009.txt
 * @param base_offset Add offset to all segmentation ids.
 * @param label_wm Re-assign white matter voxel labels to the closest cortical point if within distance.
 * @param wmparc_dmax Max distance (mm) from cortex to be labeled as gyral WM (default 5mm)
 * @param rip_unknown Do not label WM based on 'unknown' cortical label
 * @param hypo_as_wm Label hypointensities as WM
 * @param no_fix_parahip Do not remove unconnected regions from WM parahip
 * @param smooth_normals Change number of surface normal smoothing steps (default is 10).
 * @param crs_test Test mapping of column, row, slice
 * @param left_hemisphere Only process the left hemisphere
 * @param right_hemisphere Only process the right hemisphere
 * @param threads Run in parallel with the specified number of threads
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 *
 * @returns Parameter dictionary
 */
function mri_aparc2aseg_params(
    subject: string | null = null,
    output_volfile: string | null = null,
    old_ribbon: boolean = false,
    new_ribbon: boolean = false,
    a2005s: boolean = false,
    a2009s: boolean = false,
    annot_name: string | null = null,
    annot_table: string | null = null,
    base_offset: number | null = null,
    label_wm: boolean = false,
    wmparc_dmax: number | null = null,
    rip_unknown: boolean = false,
    hypo_as_wm: boolean = false,
    no_fix_parahip: boolean = false,
    smooth_normals: number | null = null,
    crs_test: string | null = null,
    left_hemisphere: boolean = false,
    right_hemisphere: boolean = false,
    threads: number | null = null,
    help: boolean = false,
    version: boolean = false,
): MriAparc2asegParameters {
    const params = {
        "@type": "freesurfer.mri_aparc2aseg" as const,
        "old_ribbon": old_ribbon,
        "new_ribbon": new_ribbon,
        "a2005s": a2005s,
        "a2009s": a2009s,
        "label_wm": label_wm,
        "rip_unknown": rip_unknown,
        "hypo_as_wm": hypo_as_wm,
        "no_fix_parahip": no_fix_parahip,
        "left_hemisphere": left_hemisphere,
        "right_hemisphere": right_hemisphere,
        "help": help,
        "version": version,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (output_volfile !== null) {
        params["output_volfile"] = output_volfile;
    }
    if (annot_name !== null) {
        params["annot_name"] = annot_name;
    }
    if (annot_table !== null) {
        params["annot_table"] = annot_table;
    }
    if (base_offset !== null) {
        params["base_offset"] = base_offset;
    }
    if (wmparc_dmax !== null) {
        params["wmparc_dmax"] = wmparc_dmax;
    }
    if (smooth_normals !== null) {
        params["smooth_normals"] = smooth_normals;
    }
    if (crs_test !== null) {
        params["crs_test"] = crs_test;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_aparc2aseg_cargs(
    params: MriAparc2asegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_aparc2aseg");
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["output_volfile"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_volfile"] ?? null)
        );
    }
    if ((params["old_ribbon"] ?? null)) {
        cargs.push("--old-ribbon");
    }
    if ((params["new_ribbon"] ?? null)) {
        cargs.push("--new-ribbon");
    }
    if ((params["a2005s"] ?? null)) {
        cargs.push("--a2005s");
    }
    if ((params["a2009s"] ?? null)) {
        cargs.push("--a2009s");
    }
    if ((params["annot_name"] ?? null) !== null) {
        cargs.push(
            "--annot",
            (params["annot_name"] ?? null)
        );
    }
    if ((params["annot_table"] ?? null) !== null) {
        cargs.push(
            "--annot-table",
            (params["annot_table"] ?? null)
        );
    }
    if ((params["base_offset"] ?? null) !== null) {
        cargs.push(
            "--base-offset",
            String((params["base_offset"] ?? null))
        );
    }
    if ((params["label_wm"] ?? null)) {
        cargs.push("--labelwm");
    }
    if ((params["wmparc_dmax"] ?? null) !== null) {
        cargs.push(
            "--wmparc-dmax",
            String((params["wmparc_dmax"] ?? null))
        );
    }
    if ((params["rip_unknown"] ?? null)) {
        cargs.push("--rip-unknown");
    }
    if ((params["hypo_as_wm"] ?? null)) {
        cargs.push("--hypo-as-wm");
    }
    if ((params["no_fix_parahip"] ?? null)) {
        cargs.push("--no-fix-parahip");
    }
    if ((params["smooth_normals"] ?? null) !== null) {
        cargs.push(
            "--smooth_normals",
            String((params["smooth_normals"] ?? null))
        );
    }
    if ((params["crs_test"] ?? null) !== null) {
        cargs.push(
            "--crs-test",
            (params["crs_test"] ?? null)
        );
    }
    if ((params["left_hemisphere"] ?? null)) {
        cargs.push("--lh");
    }
    if ((params["right_hemisphere"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_aparc2aseg_outputs(
    params: MriAparc2asegParameters,
    execution: Execution,
): MriAparc2asegOutputs {
    const ret: MriAparc2asegOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile(["mri/aparc+aseg.mgz"].join('')),
    };
    return ret;
}


/**
 * Maps the cortical labels from the automatic cortical parcellation to the automatic segmentation volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriAparc2asegOutputs`).
 */
function mri_aparc2aseg_execute(
    params: MriAparc2asegParameters,
    execution: Execution,
): MriAparc2asegOutputs {
    params = execution.params(params)
    const cargs = mri_aparc2aseg_cargs(params, execution)
    const ret = mri_aparc2aseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Maps the cortical labels from the automatic cortical parcellation to the automatic segmentation volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Name of the subject as found in the SUBJECTS_DIR.
 * @param output_volfile Full path of file to save the output segmentation in. Default is mri/aparc+aseg.mgz
 * @param old_ribbon Use mri/hemi.ribbon.mgz as a mask for the cortex
 * @param new_ribbon Mask cortical voxels with mri/ribbon.mgz. Same as --volmask
 * @param a2005s Use ?h.aparc.a2005s.annot. Output will be aparc.a2005s+aseg.mgz.
 * @param a2009s Use ?h.aparc.a2009s.annot. Output will be aparc.a2009s+aseg.mgz.
 * @param annot_name Use annotname surface annotation. By default, uses ?h.aparc.annot.
 * @param annot_table Annotation table file. Default is $FREESURFER_HOME/Simple_surface_labels2009.txt
 * @param base_offset Add offset to all segmentation ids.
 * @param label_wm Re-assign white matter voxel labels to the closest cortical point if within distance.
 * @param wmparc_dmax Max distance (mm) from cortex to be labeled as gyral WM (default 5mm)
 * @param rip_unknown Do not label WM based on 'unknown' cortical label
 * @param hypo_as_wm Label hypointensities as WM
 * @param no_fix_parahip Do not remove unconnected regions from WM parahip
 * @param smooth_normals Change number of surface normal smoothing steps (default is 10).
 * @param crs_test Test mapping of column, row, slice
 * @param left_hemisphere Only process the left hemisphere
 * @param right_hemisphere Only process the right hemisphere
 * @param threads Run in parallel with the specified number of threads
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAparc2asegOutputs`).
 */
function mri_aparc2aseg(
    subject: string | null = null,
    output_volfile: string | null = null,
    old_ribbon: boolean = false,
    new_ribbon: boolean = false,
    a2005s: boolean = false,
    a2009s: boolean = false,
    annot_name: string | null = null,
    annot_table: string | null = null,
    base_offset: number | null = null,
    label_wm: boolean = false,
    wmparc_dmax: number | null = null,
    rip_unknown: boolean = false,
    hypo_as_wm: boolean = false,
    no_fix_parahip: boolean = false,
    smooth_normals: number | null = null,
    crs_test: string | null = null,
    left_hemisphere: boolean = false,
    right_hemisphere: boolean = false,
    threads: number | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriAparc2asegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_APARC2ASEG_METADATA);
    const params = mri_aparc2aseg_params(subject, output_volfile, old_ribbon, new_ribbon, a2005s, a2009s, annot_name, annot_table, base_offset, label_wm, wmparc_dmax, rip_unknown, hypo_as_wm, no_fix_parahip, smooth_normals, crs_test, left_hemisphere, right_hemisphere, threads, help, version)
    return mri_aparc2aseg_execute(params, execution);
}


export {
      MRI_APARC2ASEG_METADATA,
      MriAparc2asegOutputs,
      MriAparc2asegParameters,
      mri_aparc2aseg,
      mri_aparc2aseg_cargs,
      mri_aparc2aseg_execute,
      mri_aparc2aseg_outputs,
      mri_aparc2aseg_params,
};
