// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CALC_GRAD_PERC_DEV_METADATA: Metadata = {
    id: "7e7b6a76bb0f336c9e61d44022025539cb0b2456.boutiques",
    name: "calc_grad_perc_dev",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface CalcGradPercDevParameters {
    "@type": "fsl.calc_grad_perc_dev";
    "fullwarp_image": InputPathType;
    "out_basename": string;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.calc_grad_perc_dev": calc_grad_perc_dev_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `calc_grad_perc_dev(...)`.
 *
 * @interface
 */
interface CalcGradPercDevOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fullwarp_image Full warp image from gradient_unwarp.py
 * @param out_basename Output basename
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display the help message
 *
 * @returns Parameter dictionary
 */
function calc_grad_perc_dev_params(
    fullwarp_image: InputPathType,
    out_basename: string,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): CalcGradPercDevParameters {
    const params = {
        "@type": "fsl.calc_grad_perc_dev" as const,
        "fullwarp_image": fullwarp_image,
        "out_basename": out_basename,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function calc_grad_perc_dev_cargs(
    params: CalcGradPercDevParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("calc_grad_perc_dev");
    cargs.push(
        "--fullwarp",
        execution.inputFile((params["fullwarp_image"] ?? null))
    );
    cargs.push(
        "-o,--out",
        (params["out_basename"] ?? null)
    );
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v,--verbose");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h,--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function calc_grad_perc_dev_outputs(
    params: CalcGradPercDevParameters,
    execution: Execution,
): CalcGradPercDevOutputs {
    const ret: CalcGradPercDevOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Compute the gradient percent deviation based on a full warp image from gradient_unwarp.py.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CalcGradPercDevOutputs`).
 */
function calc_grad_perc_dev_execute(
    params: CalcGradPercDevParameters,
    execution: Execution,
): CalcGradPercDevOutputs {
    params = execution.params(params)
    const cargs = calc_grad_perc_dev_cargs(params, execution)
    const ret = calc_grad_perc_dev_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute the gradient percent deviation based on a full warp image from gradient_unwarp.py.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param fullwarp_image Full warp image from gradient_unwarp.py
 * @param out_basename Output basename
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display the help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CalcGradPercDevOutputs`).
 */
function calc_grad_perc_dev(
    fullwarp_image: InputPathType,
    out_basename: string,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): CalcGradPercDevOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CALC_GRAD_PERC_DEV_METADATA);
    const params = calc_grad_perc_dev_params(fullwarp_image, out_basename, verbose_flag, help_flag)
    return calc_grad_perc_dev_execute(params, execution);
}


export {
      CALC_GRAD_PERC_DEV_METADATA,
      CalcGradPercDevOutputs,
      CalcGradPercDevParameters,
      calc_grad_perc_dev,
      calc_grad_perc_dev_cargs,
      calc_grad_perc_dev_execute,
      calc_grad_perc_dev_outputs,
      calc_grad_perc_dev_params,
};
