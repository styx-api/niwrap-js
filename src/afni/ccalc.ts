// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CCALC_METADATA: Metadata = {
    id: "b145289273191dd83b1fd1959696713496ba9bee.boutiques",
    name: "ccalc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface CcalcParameters {
    "@type": "afni.ccalc";
    "format"?: string | null | undefined;
    "expr": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.ccalc": ccalc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ccalc(...)`.
 *
 * @interface
 */
interface CcalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param expr Evaluate an expression specified on command line, return answer and quit
 * @param format Format output in a nice form. Choose from 'double', 'nice', 'int', 'rint', 'cint', 'fint', or custom format string (e.g., %n.mf)
 *
 * @returns Parameter dictionary
 */
function ccalc_params(
    expr: string,
    format: string | null = null,
): CcalcParameters {
    const params = {
        "@type": "afni.ccalc" as const,
        "expr": expr,
    };
    if (format !== null) {
        params["format"] = format;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ccalc_cargs(
    params: CcalcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ccalc");
    if ((params["format"] ?? null) !== null) {
        cargs.push(
            "-form",
            (params["format"] ?? null)
        );
    }
    cargs.push(
        "-eval",
        (params["expr"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ccalc_outputs(
    params: CcalcParameters,
    execution: Execution,
): CcalcOutputs {
    const ret: CcalcOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * ccalc
 *
 * Command line calculator with formatted output options.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CcalcOutputs`).
 */
function ccalc_execute(
    params: CcalcParameters,
    runner: Runner | null = null,
): CcalcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CCALC_METADATA);
    params = execution.params(params)
    const cargs = ccalc_cargs(params, execution)
    const ret = ccalc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ccalc
 *
 * Command line calculator with formatted output options.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param expr Evaluate an expression specified on command line, return answer and quit
 * @param format Format output in a nice form. Choose from 'double', 'nice', 'int', 'rint', 'cint', 'fint', or custom format string (e.g., %n.mf)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CcalcOutputs`).
 */
function ccalc(
    expr: string,
    format: string | null = null,
    runner: Runner | null = null,
): CcalcOutputs {
    const params = ccalc_params(expr, format)
    return ccalc_execute(params, runner);
}


export {
      CCALC_METADATA,
      CcalcOutputs,
      CcalcParameters,
      ccalc,
      ccalc_execute,
      ccalc_params,
};
