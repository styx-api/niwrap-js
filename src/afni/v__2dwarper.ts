// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__2DWARPER_METADATA: Metadata = {
    id: "a639e33d0f62eeb0f9bae0c30caea70084cc4a6e.boutiques",
    name: "@2dwarper",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V2dwarperParameters {
    "@type"?: "afni/@2dwarper";
    "input_dataset": InputPathType;
}
type V2dwarperParametersTagged = Required<Pick<V2dwarperParameters, '@type'>> & V2dwarperParameters;


/**
 * Output object returned when calling `V2dwarperParameters(...)`.
 *
 * @interface
 */
interface V2dwarperOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Warped output image from the dataset
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset (e.g., image to be warped)
 *
 * @returns Parameter dictionary
 */
function v__2dwarper_params(
    input_dataset: InputPathType,
): V2dwarperParametersTagged {
    const params = {
        "@type": "afni/@2dwarper" as const,
        "input_dataset": input_dataset,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__2dwarper_cargs(
    params: V2dwarperParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@2dwarper");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__2dwarper_outputs(
    params: V2dwarperParameters,
    execution: Execution,
): V2dwarperOutputs {
    const ret: V2dwarperOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["warped_output"].join('')),
    };
    return ret;
}


/**
 * @2dwarper
 *
 * 2D image warping tool.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2dwarperOutputs`).
 */
function v__2dwarper_execute(
    params: V2dwarperParameters,
    runner: Runner | null = null,
): V2dwarperOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__2DWARPER_METADATA);
    params = execution.params(params)
    const cargs = v__2dwarper_cargs(params, execution)
    const ret = v__2dwarper_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @2dwarper
 *
 * 2D image warping tool.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset (e.g., image to be warped)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2dwarperOutputs`).
 */
function v__2dwarper(
    input_dataset: InputPathType,
    runner: Runner | null = null,
): V2dwarperOutputs {
    const params = v__2dwarper_params(input_dataset)
    return v__2dwarper_execute(params, runner);
}


export {
      V2dwarperOutputs,
      V__2DWARPER_METADATA,
      v__2dwarper,
      v__2dwarper_execute,
      v__2dwarper_params,
};
