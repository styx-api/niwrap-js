// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DICOM_HINFO_METADATA: Metadata = {
    id: "0de7df6566656068c4dc0dc5d6d2bae576cab754.boutiques",
    name: "dicom_hinfo",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface DicomHinfoParameters {
    "__STYXTYPE__": "dicom_hinfo";
    "tag": Array<string>;
    "sepstr"?: string | null | undefined;
    "full_entry": boolean;
    "no_name": boolean;
    "namelast": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dicom_hinfo": dicom_hinfo_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dicom_hinfo(...)`.
 *
 * @interface
 */
interface DicomHinfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dicom_hinfo_params(
    tag: Array<string>,
    sepstr: string | null = null,
    full_entry: boolean = false,
    no_name: boolean = false,
    namelast: boolean = false,
): DicomHinfoParameters {
    /**
     * Build parameters.
    
     * @param tag Specify one or more DICOM tags to print, in the format aaaa,bbbb where aaaa and bbbb are hexadecimal digits.
     * @param sepstr Use the specified string to separate fields instead of space.
     * @param full_entry Output the full entry if it is more than one word or contains white space.
     * @param no_name Omit the filename from the output.
     * @param namelast Place the filename last in the output instead of first.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dicom_hinfo" as const,
        "tag": tag,
        "full_entry": full_entry,
        "no_name": no_name,
        "namelast": namelast,
    };
    if (sepstr !== null) {
        params["sepstr"] = sepstr;
    }
    return params;
}


function dicom_hinfo_cargs(
    params: DicomHinfoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dicom_hinfo");
    cargs.push(
        "-tag",
        ...(params["tag"] ?? null)
    );
    if ((params["sepstr"] ?? null) !== null) {
        cargs.push(
            "-sepstr",
            (params["sepstr"] ?? null)
        );
    }
    if ((params["full_entry"] ?? null)) {
        cargs.push("-full_entry");
    }
    if ((params["no_name"] ?? null)) {
        cargs.push("-no_name");
    }
    if ((params["namelast"] ?? null)) {
        cargs.push("-namelast");
    }
    cargs.push("[FILES...]");
    return cargs;
}


function dicom_hinfo_outputs(
    params: DicomHinfoParameters,
    execution: Execution,
): DicomHinfoOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DicomHinfoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dicom_hinfo_execute(
    params: DicomHinfoParameters,
    execution: Execution,
): DicomHinfoOutputs {
    /**
     * Prints selected information from one or more DICOM files to stdout.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DicomHinfoOutputs`).
     */
    params = execution.params(params)
    const cargs = dicom_hinfo_cargs(params, execution)
    const ret = dicom_hinfo_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dicom_hinfo(
    tag: Array<string>,
    sepstr: string | null = null,
    full_entry: boolean = false,
    no_name: boolean = false,
    namelast: boolean = false,
    runner: Runner | null = null,
): DicomHinfoOutputs {
    /**
     * Prints selected information from one or more DICOM files to stdout.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param tag Specify one or more DICOM tags to print, in the format aaaa,bbbb where aaaa and bbbb are hexadecimal digits.
     * @param sepstr Use the specified string to separate fields instead of space.
     * @param full_entry Output the full entry if it is more than one word or contains white space.
     * @param no_name Omit the filename from the output.
     * @param namelast Place the filename last in the output instead of first.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DicomHinfoOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DICOM_HINFO_METADATA);
    const params = dicom_hinfo_params(tag, sepstr, full_entry, no_name, namelast)
    return dicom_hinfo_execute(params, execution);
}


export {
      DICOM_HINFO_METADATA,
      DicomHinfoOutputs,
      DicomHinfoParameters,
      dicom_hinfo,
      dicom_hinfo_params,
};
