// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FABBER_CEST_METADATA: Metadata = {
    id: "02b8cdea1646edd376c3e6590fd5b1de7b4522ff.boutiques",
    name: "fabber_cest",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FabberCestParameters {
    "__STYXTYPE__": "fabber_cest";
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fabber_cest": fabber_cest_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fabber_cest": fabber_cest_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fabber_cest(...)`.
 *
 * @interface
 */
interface FabberCestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Log file
     */
    logfile: OutputPathType;
    /**
     * Model fit output as a 4d volume
     */
    modelfit_out: OutputPathType;
    /**
     * Residuals output as a 4d volume
     */
    residuals_out: OutputPathType;
    /**
     * Model extras output
     */
    modelextras_out: OutputPathType;
    /**
     * Final MVN distributions output
     */
    mvn_out: OutputPathType;
    /**
     * Parameter means output
     */
    mean_out: OutputPathType;
    /**
     * Parameter standard deviations output
     */
    std_out: OutputPathType;
    /**
     * Parameter variances output
     */
    var_out: OutputPathType;
    /**
     * Parameter Z statistics output
     */
    zstat_out: OutputPathType;
    /**
     * Noise means output
     */
    noise_mean_out: OutputPathType;
    /**
     * Noise standard deviations output
     */
    noise_std_out: OutputPathType;
    /**
     * Free energy output
     */
    free_energy_out: OutputPathType;
}


function fabber_cest_params(
): FabberCestParameters {
    /**
     * Build parameters.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fabber_cest" as const,
    };
    return params;
}


function fabber_cest_cargs(
    params: FabberCestParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fabber_cest");
    cargs.push("[--<option>");
    cargs.push("|");
    cargs.push("--<option>=<value>");
    cargs.push("...]");
    return cargs;
}


function fabber_cest_outputs(
    params: FabberCestParameters,
    execution: Execution,
): FabberCestOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FabberCestOutputs = {
        root: execution.outputFile("."),
        logfile: execution.outputFile(["[OUTPUT]/logfile.log"].join('')),
        modelfit_out: execution.outputFile(["[OUTPUT]/model_fit.nii.gz"].join('')),
        residuals_out: execution.outputFile(["[OUTPUT]/residuals.nii.gz"].join('')),
        modelextras_out: execution.outputFile(["[OUTPUT]/model_extras.nii.gz"].join('')),
        mvn_out: execution.outputFile(["[OUTPUT]/mvn.nii.gz"].join('')),
        mean_out: execution.outputFile(["[OUTPUT]/mean.nii.gz"].join('')),
        std_out: execution.outputFile(["[OUTPUT]/std.nii.gz"].join('')),
        var_out: execution.outputFile(["[OUTPUT]/var.nii.gz"].join('')),
        zstat_out: execution.outputFile(["[OUTPUT]/zstat.nii.gz"].join('')),
        noise_mean_out: execution.outputFile(["[OUTPUT]/noise_mean.nii.gz"].join('')),
        noise_std_out: execution.outputFile(["[OUTPUT]/noise_std.nii.gz"].join('')),
        free_energy_out: execution.outputFile(["[OUTPUT]/free_energy.nii.gz"].join('')),
    };
    return ret;
}


function fabber_cest_execute(
    params: FabberCestParameters,
    execution: Execution,
): FabberCestOutputs {
    /**
     * Fabber Model-based Analysis.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FabberCestOutputs`).
     */
    params = execution.params(params)
    const cargs = fabber_cest_cargs(params, execution)
    const ret = fabber_cest_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fabber_cest(
    runner: Runner | null = null,
): FabberCestOutputs {
    /**
     * Fabber Model-based Analysis.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FabberCestOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FABBER_CEST_METADATA);
    const params = fabber_cest_params()
    return fabber_cest_execute(params, execution);
}


export {
      FABBER_CEST_METADATA,
      FabberCestOutputs,
      FabberCestParameters,
      fabber_cest,
      fabber_cest_params,
};
