// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PLUGOUT_TT_METADATA: Metadata = {
    id: "04af4d4c1502c52e54a05f75f6835830544e9ccb.boutiques",
    name: "plugout_tt",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface PlugoutTtParameters {
    "@type": "afni.plugout_tt";
    "host"?: string | null | undefined;
    "ijk_option": boolean;
    "verbose": boolean;
    "port"?: number | null | undefined;
    "name"?: string | null | undefined;
    "port_offset"?: number | null | undefined;
    "port_offset_quiet"?: number | null | undefined;
    "port_bloc"?: number | null | undefined;
    "max_port_bloc": boolean;
    "max_port_bloc_quiet": boolean;
    "num_assigned_ports": boolean;
    "num_assigned_ports_quiet": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.plugout_tt": plugout_tt_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `plugout_tt(...)`.
 *
 * @interface
 */
interface PlugoutTtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param host Name of the host computer to connect to AFNI on. The default is to connect on the current host using shared memory.
 * @param ijk_option Get voxel indices from AFNI instead of Talairach coordinates.
 * @param verbose Enable verbose mode (prints lots of diagnostic messages).
 * @param port TCP/IP port number to use. The default is 8001.
 * @param name String to use as the name that AFNI assigns to this plugout. The default is something silly.
 * @param port_offset Provide a port offset to allow multiple instances of communicating programs to operate on the same computer. Use an integer in the inclusive range [1025 to 65500].
 * @param port_offset_quiet Provide a port offset to allow multiple instances of communicating programs to operate on the same computer with quiet output in case of issues. Use an integer in the inclusive range [1025 to 65500].
 * @param port_bloc Provide a port offset bloc for easier configuration of multiple instances. PORT_OFFSET_BLOC is an integer between 0 and MAX_BLOC (around 4000).
 * @param max_port_bloc Print the current value of MAX_BLOC and exit. Stay under 2000 for safety.
 * @param max_port_bloc_quiet Print the current value of MAX_BLOC quietly and exit.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI, then quit.
 * @param num_assigned_ports_quiet Print the number of assigned ports used by AFNI quietly, then quit.
 *
 * @returns Parameter dictionary
 */
function plugout_tt_params(
    host: string | null = null,
    ijk_option: boolean = false,
    verbose: boolean = false,
    port: number | null = null,
    name: string | null = null,
    port_offset: number | null = null,
    port_offset_quiet: number | null = null,
    port_bloc: number | null = null,
    max_port_bloc: boolean = false,
    max_port_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
): PlugoutTtParameters {
    const params = {
        "@type": "afni.plugout_tt" as const,
        "ijk_option": ijk_option,
        "verbose": verbose,
        "max_port_bloc": max_port_bloc,
        "max_port_bloc_quiet": max_port_bloc_quiet,
        "num_assigned_ports": num_assigned_ports,
        "num_assigned_ports_quiet": num_assigned_ports_quiet,
    };
    if (host !== null) {
        params["host"] = host;
    }
    if (port !== null) {
        params["port"] = port;
    }
    if (name !== null) {
        params["name"] = name;
    }
    if (port_offset !== null) {
        params["port_offset"] = port_offset;
    }
    if (port_offset_quiet !== null) {
        params["port_offset_quiet"] = port_offset_quiet;
    }
    if (port_bloc !== null) {
        params["port_bloc"] = port_bloc;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function plugout_tt_cargs(
    params: PlugoutTtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("plugout_tt");
    if ((params["host"] ?? null) !== null) {
        cargs.push(
            "-host",
            (params["host"] ?? null)
        );
    }
    if ((params["ijk_option"] ?? null)) {
        cargs.push("-ijk");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["port"] ?? null) !== null) {
        cargs.push(
            "-port",
            String((params["port"] ?? null))
        );
    }
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["name"] ?? null)
        );
    }
    if ((params["port_offset"] ?? null) !== null) {
        cargs.push(
            "-np",
            String((params["port_offset"] ?? null))
        );
    }
    if ((params["port_offset_quiet"] ?? null) !== null) {
        cargs.push(
            "-npq",
            String((params["port_offset_quiet"] ?? null))
        );
    }
    if ((params["port_bloc"] ?? null) !== null) {
        cargs.push(
            "-npb",
            String((params["port_bloc"] ?? null))
        );
    }
    if ((params["max_port_bloc"] ?? null)) {
        cargs.push("-max_port_bloc");
    }
    if ((params["max_port_bloc_quiet"] ?? null)) {
        cargs.push("-max_port_bloc_quiet");
    }
    if ((params["num_assigned_ports"] ?? null)) {
        cargs.push("-num_assigned_ports");
    }
    if ((params["num_assigned_ports_quiet"] ?? null)) {
        cargs.push("-num_assigned_ports_quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function plugout_tt_outputs(
    params: PlugoutTtParameters,
    execution: Execution,
): PlugoutTtOutputs {
    const ret: PlugoutTtOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * plugout_tt
 *
 * This program connects to AFNI and receives notification whenever the user changes Talairach coordinates.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutTtOutputs`).
 */
function plugout_tt_execute(
    params: PlugoutTtParameters,
    runner: Runner | null = null,
): PlugoutTtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PLUGOUT_TT_METADATA);
    params = execution.params(params)
    const cargs = plugout_tt_cargs(params, execution)
    const ret = plugout_tt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * plugout_tt
 *
 * This program connects to AFNI and receives notification whenever the user changes Talairach coordinates.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param host Name of the host computer to connect to AFNI on. The default is to connect on the current host using shared memory.
 * @param ijk_option Get voxel indices from AFNI instead of Talairach coordinates.
 * @param verbose Enable verbose mode (prints lots of diagnostic messages).
 * @param port TCP/IP port number to use. The default is 8001.
 * @param name String to use as the name that AFNI assigns to this plugout. The default is something silly.
 * @param port_offset Provide a port offset to allow multiple instances of communicating programs to operate on the same computer. Use an integer in the inclusive range [1025 to 65500].
 * @param port_offset_quiet Provide a port offset to allow multiple instances of communicating programs to operate on the same computer with quiet output in case of issues. Use an integer in the inclusive range [1025 to 65500].
 * @param port_bloc Provide a port offset bloc for easier configuration of multiple instances. PORT_OFFSET_BLOC is an integer between 0 and MAX_BLOC (around 4000).
 * @param max_port_bloc Print the current value of MAX_BLOC and exit. Stay under 2000 for safety.
 * @param max_port_bloc_quiet Print the current value of MAX_BLOC quietly and exit.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI, then quit.
 * @param num_assigned_ports_quiet Print the number of assigned ports used by AFNI quietly, then quit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutTtOutputs`).
 */
function plugout_tt(
    host: string | null = null,
    ijk_option: boolean = false,
    verbose: boolean = false,
    port: number | null = null,
    name: string | null = null,
    port_offset: number | null = null,
    port_offset_quiet: number | null = null,
    port_bloc: number | null = null,
    max_port_bloc: boolean = false,
    max_port_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
    runner: Runner | null = null,
): PlugoutTtOutputs {
    const params = plugout_tt_params(host, ijk_option, verbose, port, name, port_offset, port_offset_quiet, port_bloc, max_port_bloc, max_port_bloc_quiet, num_assigned_ports, num_assigned_ports_quiet)
    return plugout_tt_execute(params, runner);
}


export {
      PLUGOUT_TT_METADATA,
      PlugoutTtOutputs,
      PlugoutTtParameters,
      plugout_tt,
      plugout_tt_execute,
      plugout_tt_params,
};
