// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRHISTMATCH_METADATA: Metadata = {
    id: "1798cd7ea1a79d9523cf1fd1a7ec35b94aa4a5ab.boutiques",
    name: "mrhistmatch",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrhistmatchConfigParameters {
    "@type": "mrtrix.mrhistmatch.config";
    "key": string;
    "value": string;
}


interface MrhistmatchParameters {
    "@type": "mrtrix.mrhistmatch";
    "mask_input"?: InputPathType | null | undefined;
    "mask_target"?: InputPathType | null | undefined;
    "bins"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrhistmatchConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "type": string;
    "input": InputPathType;
    "target": InputPathType;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.mrhistmatch": mrhistmatch_cargs,
        "mrtrix.mrhistmatch.config": mrhistmatch_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.mrhistmatch": mrhistmatch_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrhistmatch_config_params(
    key: string,
    value: string,
): MrhistmatchConfigParameters {
    const params = {
        "@type": "mrtrix.mrhistmatch.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrhistmatch_config_cargs(
    params: MrhistmatchConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mrhistmatch(...)`.
 *
 * @interface
 */
interface MrhistmatchOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param type_ type of histogram matching to perform; options are: scale,linear,nonlinear
 * @param input the input image to be modified
 * @param target the input image from which to derive the target histogram
 * @param output the output image
 * @param mask_input only generate input histogram based on a specified binary mask image
 * @param mask_target only generate target histogram based on a specified binary mask image
 * @param bins the number of bins to use to generate the histograms
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrhistmatch_params(
    type_: string,
    input: InputPathType,
    target: InputPathType,
    output: string,
    mask_input: InputPathType | null = null,
    mask_target: InputPathType | null = null,
    bins: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrhistmatchConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrhistmatchParameters {
    const params = {
        "@type": "mrtrix.mrhistmatch" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "type": type_,
        "input": input,
        "target": target,
        "output": output,
    };
    if (mask_input !== null) {
        params["mask_input"] = mask_input;
    }
    if (mask_target !== null) {
        params["mask_target"] = mask_target;
    }
    if (bins !== null) {
        params["bins"] = bins;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrhistmatch_cargs(
    params: MrhistmatchParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrhistmatch");
    if ((params["mask_input"] ?? null) !== null) {
        cargs.push(
            "-mask_input",
            execution.inputFile((params["mask_input"] ?? null))
        );
    }
    if ((params["mask_target"] ?? null) !== null) {
        cargs.push(
            "-mask_target",
            execution.inputFile((params["mask_target"] ?? null))
        );
    }
    if ((params["bins"] ?? null) !== null) {
        cargs.push(
            "-bins",
            String((params["bins"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push((params["type"] ?? null));
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push(execution.inputFile((params["target"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrhistmatch_outputs(
    params: MrhistmatchParameters,
    execution: Execution,
): MrhistmatchOutputs {
    const ret: MrhistmatchOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mrhistmatch
 *
 * Modify the intensities of one image to match the histogram of another.
 *
 *
 *
 * References:
 *
 * * If using inverse contrast normalization for inter-modal (DWI - T1) registration:
 * Bhushan, C.; Haldar, J. P.; Choi, S.; Joshi, A. A.; Shattuck, D. W. & Leahy, R. M. Co-registration and distortion correction of diffusion and anatomical images based on inverse contrast normalization. NeuroImage, 2015, 115, 269-280.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrhistmatchOutputs`).
 */
function mrhistmatch_execute(
    params: MrhistmatchParameters,
    runner: Runner | null = null,
): MrhistmatchOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRHISTMATCH_METADATA);
    params = execution.params(params)
    const cargs = mrhistmatch_cargs(params, execution)
    const ret = mrhistmatch_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mrhistmatch
 *
 * Modify the intensities of one image to match the histogram of another.
 *
 *
 *
 * References:
 *
 * * If using inverse contrast normalization for inter-modal (DWI - T1) registration:
 * Bhushan, C.; Haldar, J. P.; Choi, S.; Joshi, A. A.; Shattuck, D. W. & Leahy, R. M. Co-registration and distortion correction of diffusion and anatomical images based on inverse contrast normalization. NeuroImage, 2015, 115, 269-280.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param type_ type of histogram matching to perform; options are: scale,linear,nonlinear
 * @param input the input image to be modified
 * @param target the input image from which to derive the target histogram
 * @param output the output image
 * @param mask_input only generate input histogram based on a specified binary mask image
 * @param mask_target only generate target histogram based on a specified binary mask image
 * @param bins the number of bins to use to generate the histograms
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrhistmatchOutputs`).
 */
function mrhistmatch(
    type_: string,
    input: InputPathType,
    target: InputPathType,
    output: string,
    mask_input: InputPathType | null = null,
    mask_target: InputPathType | null = null,
    bins: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrhistmatchConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrhistmatchOutputs {
    const params = mrhistmatch_params(type_, input, target, output, mask_input, mask_target, bins, info, quiet, debug, force, nthreads, config, help, version)
    return mrhistmatch_execute(params, runner);
}


export {
      MRHISTMATCH_METADATA,
      MrhistmatchConfigParameters,
      MrhistmatchOutputs,
      MrhistmatchParameters,
      mrhistmatch,
      mrhistmatch_config_params,
      mrhistmatch_execute,
      mrhistmatch_params,
};
