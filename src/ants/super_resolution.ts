// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SUPER_RESOLUTION_METADATA: Metadata = {
    id: "43633248dbf860a4c25d3ebe276d5309b6f64610.boutiques",
    name: "SuperResolution",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface SuperResolutionParameters {
    "@type": "ants.SuperResolution";
    "image_dimension": number;
    "output_image": string;
    "domain_image": InputPathType;
    "gradient_sigma": number;
    "mesh_size": number;
    "number_of_levels": number;
    "input_image_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.SuperResolution": super_resolution_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.SuperResolution": super_resolution_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `super_resolution(...)`.
 *
 * @interface
 */
interface SuperResolutionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output super-resolved image file.
     */
    super_resolved_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Specifies the dimensionality of the input images (e.g., 2 for 2D images, 3 for 3D images).
 * @param output_image The file path for the output super-resolved image.
 * @param domain_image The domain image is used as the template space for the alignment of input images.
 * @param gradient_sigma The sigma used for calculating the gradient magnitude of input images. If negative, no weighting is applied.
 * @param mesh_size The size of the mesh used in fitting.
 * @param number_of_levels The number of resolution levels to process.
 * @param input_image_files List of paths to input images to be processed for super resolution.
 *
 * @returns Parameter dictionary
 */
function super_resolution_params(
    image_dimension: number,
    output_image: string,
    domain_image: InputPathType,
    gradient_sigma: number,
    mesh_size: number,
    number_of_levels: number,
    input_image_files: Array<InputPathType>,
): SuperResolutionParameters {
    const params = {
        "@type": "ants.SuperResolution" as const,
        "image_dimension": image_dimension,
        "output_image": output_image,
        "domain_image": domain_image,
        "gradient_sigma": gradient_sigma,
        "mesh_size": mesh_size,
        "number_of_levels": number_of_levels,
        "input_image_files": input_image_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function super_resolution_cargs(
    params: SuperResolutionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SuperResolution");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    cargs.push(execution.inputFile((params["domain_image"] ?? null)));
    cargs.push(String((params["gradient_sigma"] ?? null)));
    cargs.push(String((params["mesh_size"] ?? null)));
    cargs.push(String((params["number_of_levels"] ?? null)));
    cargs.push(...(params["input_image_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function super_resolution_outputs(
    params: SuperResolutionParameters,
    execution: Execution,
): SuperResolutionOutputs {
    const ret: SuperResolutionOutputs = {
        root: execution.outputFile("."),
        super_resolved_image: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * SuperResolution
 *
 * The SuperResolution tool enhances the spatial resolution of input images. The 'gradientSigma' parameter is used in calculating the gradient magnitude of the input images for weighting the voxel points during fitting. If a negative 'gradient' sigma is specified then no weighting is used.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SuperResolutionOutputs`).
 */
function super_resolution_execute(
    params: SuperResolutionParameters,
    runner: Runner | null = null,
): SuperResolutionOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SUPER_RESOLUTION_METADATA);
    params = execution.params(params)
    const cargs = super_resolution_cargs(params, execution)
    const ret = super_resolution_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SuperResolution
 *
 * The SuperResolution tool enhances the spatial resolution of input images. The 'gradientSigma' parameter is used in calculating the gradient magnitude of the input images for weighting the voxel points during fitting. If a negative 'gradient' sigma is specified then no weighting is used.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Specifies the dimensionality of the input images (e.g., 2 for 2D images, 3 for 3D images).
 * @param output_image The file path for the output super-resolved image.
 * @param domain_image The domain image is used as the template space for the alignment of input images.
 * @param gradient_sigma The sigma used for calculating the gradient magnitude of input images. If negative, no weighting is applied.
 * @param mesh_size The size of the mesh used in fitting.
 * @param number_of_levels The number of resolution levels to process.
 * @param input_image_files List of paths to input images to be processed for super resolution.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SuperResolutionOutputs`).
 */
function super_resolution(
    image_dimension: number,
    output_image: string,
    domain_image: InputPathType,
    gradient_sigma: number,
    mesh_size: number,
    number_of_levels: number,
    input_image_files: Array<InputPathType>,
    runner: Runner | null = null,
): SuperResolutionOutputs {
    const params = super_resolution_params(image_dimension, output_image, domain_image, gradient_sigma, mesh_size, number_of_levels, input_image_files)
    return super_resolution_execute(params, runner);
}


export {
      SUPER_RESOLUTION_METADATA,
      SuperResolutionOutputs,
      SuperResolutionParameters,
      super_resolution,
      super_resolution_execute,
      super_resolution_params,
};
