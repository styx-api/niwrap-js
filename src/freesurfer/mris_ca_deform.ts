// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_CA_DEFORM_METADATA: Metadata = {
    id: "f7a184212f3f0c6bda47adcf8ca71b73b93d49f3.boutiques",
    name: "mris_ca_deform",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisCaDeformParameters {
    "@type": "freesurfer.mris_ca_deform";
    "input_surface": InputPathType;
    "label_vol": InputPathType;
    "transform": InputPathType;
    "intensity_vol": InputPathType;
    "output_surface": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_ca_deform": mris_ca_deform_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_ca_deform": mris_ca_deform_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_ca_deform(...)`.
 *
 * @interface
 */
interface MrisCaDeformOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The result of the deformation process, output surface file.
     */
    deformed_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface The input surface file to be deformed.
 * @param label_vol The input volumetric label map.
 * @param transform The transform file, typically a matrix that aligns the volumes.
 * @param intensity_vol The intensity volume that is used in the deformation process.
 * @param output_surface The file name for the output, deformed surface.
 *
 * @returns Parameter dictionary
 */
function mris_ca_deform_params(
    input_surface: InputPathType,
    label_vol: InputPathType,
    transform: InputPathType,
    intensity_vol: InputPathType,
    output_surface: string,
): MrisCaDeformParameters {
    const params = {
        "@type": "freesurfer.mris_ca_deform" as const,
        "input_surface": input_surface,
        "label_vol": label_vol,
        "transform": transform,
        "intensity_vol": intensity_vol,
        "output_surface": output_surface,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_ca_deform_cargs(
    params: MrisCaDeformParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_ca_deform");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["label_vol"] ?? null)));
    cargs.push(execution.inputFile((params["transform"] ?? null)));
    cargs.push(execution.inputFile((params["intensity_vol"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_ca_deform_outputs(
    params: MrisCaDeformParameters,
    execution: Execution,
): MrisCaDeformOutputs {
    const ret: MrisCaDeformOutputs = {
        root: execution.outputFile("."),
        deformed_surface: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Deforms a surface to match it to a volumetric map of cortical labels.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisCaDeformOutputs`).
 */
function mris_ca_deform_execute(
    params: MrisCaDeformParameters,
    runner: Runner | null = null,
): MrisCaDeformOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_CA_DEFORM_METADATA);
    params = execution.params(params)
    const cargs = mris_ca_deform_cargs(params, execution)
    const ret = mris_ca_deform_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Deforms a surface to match it to a volumetric map of cortical labels.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface The input surface file to be deformed.
 * @param label_vol The input volumetric label map.
 * @param transform The transform file, typically a matrix that aligns the volumes.
 * @param intensity_vol The intensity volume that is used in the deformation process.
 * @param output_surface The file name for the output, deformed surface.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisCaDeformOutputs`).
 */
function mris_ca_deform(
    input_surface: InputPathType,
    label_vol: InputPathType,
    transform: InputPathType,
    intensity_vol: InputPathType,
    output_surface: string,
    runner: Runner | null = null,
): MrisCaDeformOutputs {
    const params = mris_ca_deform_params(input_surface, label_vol, transform, intensity_vol, output_surface)
    return mris_ca_deform_execute(params, runner);
}


export {
      MRIS_CA_DEFORM_METADATA,
      MrisCaDeformOutputs,
      MrisCaDeformParameters,
      mris_ca_deform,
      mris_ca_deform_execute,
      mris_ca_deform_params,
};
