// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_RF_LONG_TRAIN_METADATA: Metadata = {
    id: "67ecdb74def4288562f728d10f87ede921f8ca6e.boutiques",
    name: "mri_rf_long_train",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRfLongTrainParameters {
    "__STYXTYPE__": "mri_rf_long_train";
    "seg_dir": string;
    "xform": string;
    "mask"?: string | null | undefined;
    "node_spacing"?: number | null | undefined;
    "prior_spacing"?: number | null | undefined;
    "input_data"?: Array<string> | null | undefined;
    "check": boolean;
    "subjects": Array<string>;
    "output_rfa": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_rf_long_train": mri_rf_long_train_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_rf_long_train": mri_rf_long_train_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_rf_long_train(...)`.
 *
 * @interface
 */
interface MriRfLongTrainOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output RFA file generated by the tool
     */
    output_rfa_file: OutputPathType;
}


function mri_rf_long_train_params(
    seg_dir: string,
    xform: string,
    subjects: Array<string>,
    output_rfa: string,
    mask: string | null = null,
    node_spacing: number | null = null,
    prior_spacing: number | null = null,
    input_data: Array<string> | null = null,
    check: boolean = false,
): MriRfLongTrainParameters {
    /**
     * Build parameters.
    
     * @param seg_dir Path to the segmentation volume directory, relative to $subject/mri.
     * @param xform Atlas transform path relative to $subject/mri/transforms.
     * @param subjects List of subjects for training.
     * @param output_rfa Output RFA filename.
     * @param mask Volume name to use as a mask, path relative to $subject/mri.
     * @param node_spacing Spacing of classifiers in canonical space.
     * @param prior_spacing Spacing of class priors in canonical space.
     * @param input_data Specify training data, path relative to $subject/mri. Can specify multiple inputs. Defaults to 'orig' if not specified.
     * @param check Conduct sanity-check of labels for obvious edit errors.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_rf_long_train" as const,
        "seg_dir": seg_dir,
        "xform": xform,
        "check": check,
        "subjects": subjects,
        "output_rfa": output_rfa,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (node_spacing !== null) {
        params["node_spacing"] = node_spacing;
    }
    if (prior_spacing !== null) {
        params["prior_spacing"] = prior_spacing;
    }
    if (input_data !== null) {
        params["input_data"] = input_data;
    }
    return params;
}


function mri_rf_long_train_cargs(
    params: MriRfLongTrainParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_rf_long_train");
    cargs.push(
        "-seg",
        (params["seg_dir"] ?? null)
    );
    cargs.push(
        "-xform",
        (params["xform"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask"] ?? null)
        );
    }
    if ((params["node_spacing"] ?? null) !== null) {
        cargs.push(
            "-node_spacing",
            String((params["node_spacing"] ?? null))
        );
    }
    if ((params["prior_spacing"] ?? null) !== null) {
        cargs.push(
            "-prior_spacing",
            String((params["prior_spacing"] ?? null))
        );
    }
    if ((params["input_data"] ?? null) !== null) {
        cargs.push(
            "-input",
            ...(params["input_data"] ?? null)
        );
    }
    if ((params["check"] ?? null)) {
        cargs.push("-check");
    }
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_rfa"] ?? null));
    return cargs;
}


function mri_rf_long_train_outputs(
    params: MriRfLongTrainParameters,
    execution: Execution,
): MriRfLongTrainOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriRfLongTrainOutputs = {
        root: execution.outputFile("."),
        output_rfa_file: execution.outputFile([(params["output_rfa"] ?? null), ".rfa"].join('')),
    };
    return ret;
}


function mri_rf_long_train_execute(
    params: MriRfLongTrainParameters,
    execution: Execution,
): MriRfLongTrainOutputs {
    /**
     * Trains GCA data with multiple subjects for FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriRfLongTrainOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_rf_long_train_cargs(params, execution)
    const ret = mri_rf_long_train_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_rf_long_train(
    seg_dir: string,
    xform: string,
    subjects: Array<string>,
    output_rfa: string,
    mask: string | null = null,
    node_spacing: number | null = null,
    prior_spacing: number | null = null,
    input_data: Array<string> | null = null,
    check: boolean = false,
    runner: Runner | null = null,
): MriRfLongTrainOutputs {
    /**
     * Trains GCA data with multiple subjects for FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param seg_dir Path to the segmentation volume directory, relative to $subject/mri.
     * @param xform Atlas transform path relative to $subject/mri/transforms.
     * @param subjects List of subjects for training.
     * @param output_rfa Output RFA filename.
     * @param mask Volume name to use as a mask, path relative to $subject/mri.
     * @param node_spacing Spacing of classifiers in canonical space.
     * @param prior_spacing Spacing of class priors in canonical space.
     * @param input_data Specify training data, path relative to $subject/mri. Can specify multiple inputs. Defaults to 'orig' if not specified.
     * @param check Conduct sanity-check of labels for obvious edit errors.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriRfLongTrainOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_RF_LONG_TRAIN_METADATA);
    const params = mri_rf_long_train_params(seg_dir, xform, subjects, output_rfa, mask, node_spacing, prior_spacing, input_data, check)
    return mri_rf_long_train_execute(params, execution);
}


export {
      MRI_RF_LONG_TRAIN_METADATA,
      MriRfLongTrainOutputs,
      MriRfLongTrainParameters,
      mri_rf_long_train,
      mri_rf_long_train_params,
};
