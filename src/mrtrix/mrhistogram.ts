// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRHISTOGRAM_METADATA: Metadata = {
    id: "5c07265a48110ef8900f48adf78d74320253b0c0.boutiques",
    name: "mrhistogram",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrhistogramConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type MrhistogramConfigParametersTagged = Required<Pick<MrhistogramConfigParameters, '@type'>> & MrhistogramConfigParameters;


interface MrhistogramParameters {
    "@type"?: "mrtrix/mrhistogram";
    "bins"?: number | null | undefined;
    "template"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "ignorezero": boolean;
    "allvolumes": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrhistogramConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "image": InputPathType;
    "hist": string;
}
type MrhistogramParametersTagged = Required<Pick<MrhistogramParameters, '@type'>> & MrhistogramParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrhistogram_config_params(
    key: string,
    value: string,
): MrhistogramConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrhistogram_config_cargs(
    params: MrhistogramConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `MrhistogramParameters(...)`.
 *
 * @interface
 */
interface MrhistogramOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output histogram file
     */
    hist: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image the input image from which the histogram will be computed
 * @param hist the output histogram file
 * @param bins Manually set the number of bins to use to generate the histogram.
 * @param template Use an existing histogram file as the template for histogram formation
 * @param mask Calculate the histogram only within a mask image.
 * @param ignorezero ignore zero-valued data during histogram construction.
 * @param allvolumes generate one histogram across all image volumes, rather than one per image volume
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrhistogram_params(
    image: InputPathType,
    hist: string,
    bins: number | null = null,
    template: InputPathType | null = null,
    mask: InputPathType | null = null,
    ignorezero: boolean = false,
    allvolumes: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrhistogramConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrhistogramParametersTagged {
    const params = {
        "@type": "mrtrix/mrhistogram" as const,
        "ignorezero": ignorezero,
        "allvolumes": allvolumes,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "image": image,
        "hist": hist,
    };
    if (bins !== null) {
        params["bins"] = bins;
    }
    if (template !== null) {
        params["template"] = template;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrhistogram_cargs(
    params: MrhistogramParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrhistogram");
    if ((params["bins"] ?? null) !== null) {
        cargs.push(
            "-bins",
            String((params["bins"] ?? null))
        );
    }
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["ignorezero"] ?? false)) {
        cargs.push("-ignorezero");
    }
    if ((params["allvolumes"] ?? false)) {
        cargs.push("-allvolumes");
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => mrhistogram_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["image"] ?? null)));
    cargs.push((params["hist"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrhistogram_outputs(
    params: MrhistogramParameters,
    execution: Execution,
): MrhistogramOutputs {
    const ret: MrhistogramOutputs = {
        root: execution.outputFile("."),
        hist: execution.outputFile([(params["hist"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mrhistogram
 *
 * Generate a histogram of image intensities.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrhistogramOutputs`).
 */
function mrhistogram_execute(
    params: MrhistogramParameters,
    runner: Runner | null = null,
): MrhistogramOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRHISTOGRAM_METADATA);
    params = execution.params(params)
    const cargs = mrhistogram_cargs(params, execution)
    const ret = mrhistogram_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mrhistogram
 *
 * Generate a histogram of image intensities.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param image the input image from which the histogram will be computed
 * @param hist the output histogram file
 * @param bins Manually set the number of bins to use to generate the histogram.
 * @param template Use an existing histogram file as the template for histogram formation
 * @param mask Calculate the histogram only within a mask image.
 * @param ignorezero ignore zero-valued data during histogram construction.
 * @param allvolumes generate one histogram across all image volumes, rather than one per image volume
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrhistogramOutputs`).
 */
function mrhistogram(
    image: InputPathType,
    hist: string,
    bins: number | null = null,
    template: InputPathType | null = null,
    mask: InputPathType | null = null,
    ignorezero: boolean = false,
    allvolumes: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrhistogramConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrhistogramOutputs {
    const params = mrhistogram_params(image, hist, bins, template, mask, ignorezero, allvolumes, info, quiet, debug, force, nthreads, config, help, version)
    return mrhistogram_execute(params, runner);
}


export {
      MRHISTOGRAM_METADATA,
      MrhistogramOutputs,
      mrhistogram,
      mrhistogram_config_params,
      mrhistogram_execute,
      mrhistogram_params,
};
