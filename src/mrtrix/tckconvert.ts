// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCKCONVERT_METADATA: Metadata = {
    id: "55a4f5691d675bdf7129499cb50a199b880d7c7a.boutiques",
    name: "tckconvert",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface TckconvertConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type TckconvertConfigParametersTagged = Required<Pick<TckconvertConfigParameters, '@type'>> & TckconvertConfigParameters;


interface TckconvertVariousStringParameters {
    "@type"?: "VariousString";
    "obj": string;
}
type TckconvertVariousStringParametersTagged = Required<Pick<TckconvertVariousStringParameters, '@type'>> & TckconvertVariousStringParameters;


interface TckconvertVariousFileParameters {
    "@type"?: "VariousFile";
    "obj": InputPathType;
}
type TckconvertVariousFileParametersTagged = Required<Pick<TckconvertVariousFileParameters, '@type'>> & TckconvertVariousFileParameters;


interface TckconvertParameters {
    "@type"?: "mrtrix/tckconvert";
    "scanner2voxel"?: InputPathType | null | undefined;
    "scanner2image"?: InputPathType | null | undefined;
    "voxel2scanner"?: InputPathType | null | undefined;
    "image2scanner"?: InputPathType | null | undefined;
    "sides"?: number | null | undefined;
    "increment"?: number | null | undefined;
    "dec": boolean;
    "radius"?: number | null | undefined;
    "ascii": boolean;
    "binary": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<TckconvertConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": TckconvertVariousStringParametersTagged | TckconvertVariousFileParametersTagged;
    "output": string;
}
type TckconvertParametersTagged = Required<Pick<TckconvertParameters, '@type'>> & TckconvertParameters;


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function tckconvert_input_cargs_dyn_fn(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "VariousString": tckconvert_various_string_cargs,
        "VariousFile": tckconvert_various_file_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function tckconvert_input_outputs_dyn_fn(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function tckconvert_config_params(
    key: string,
    value: string,
): TckconvertConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckconvert_config_cargs(
    params: TckconvertConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function tckconvert_various_string_params(
    obj: string,
): TckconvertVariousStringParametersTagged {
    const params = {
        "@type": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckconvert_various_string_cargs(
    params: TckconvertVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function tckconvert_various_file_params(
    obj: InputPathType,
): TckconvertVariousFileParametersTagged {
    const params = {
        "@type": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckconvert_various_file_cargs(
    params: TckconvertVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `TckconvertParameters(...)`.
 *
 * @interface
 */
interface TckconvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output track file.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input track file.
 * @param output the output track file.
 * @param scanner2voxel if specified, the properties of this image will be used to convert track point positions from real (scanner) coordinates into voxel coordinates.
 * @param scanner2image if specified, the properties of this image will be used to convert track point positions from real (scanner) coordinates into image coordinates (in mm).
 * @param voxel2scanner if specified, the properties of this image will be used to convert track point positions from voxel coordinates into real (scanner) coordinates.
 * @param image2scanner if specified, the properties of this image will be used to convert track point positions from image coordinates (in mm) into real (scanner) coordinates.
 * @param sides number of sides for streamlines
 * @param increment generate streamline points at every (increment) points
 * @param dec add DEC as a primvar
 * @param radius radius of the streamlines
 * @param ascii write an ASCII VTK file (this is the default)
 * @param binary write a binary VTK file
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function tckconvert_params(
    input: TckconvertVariousStringParametersTagged | TckconvertVariousFileParametersTagged,
    output: string,
    scanner2voxel: InputPathType | null = null,
    scanner2image: InputPathType | null = null,
    voxel2scanner: InputPathType | null = null,
    image2scanner: InputPathType | null = null,
    sides: number | null = null,
    increment: number | null = null,
    dec: boolean = false,
    radius: number | null = null,
    ascii: boolean = false,
    binary: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): TckconvertParametersTagged {
    const params = {
        "@type": "mrtrix/tckconvert" as const,
        "dec": dec,
        "ascii": ascii,
        "binary": binary,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "output": output,
    };
    if (scanner2voxel !== null) {
        params["scanner2voxel"] = scanner2voxel;
    }
    if (scanner2image !== null) {
        params["scanner2image"] = scanner2image;
    }
    if (voxel2scanner !== null) {
        params["voxel2scanner"] = voxel2scanner;
    }
    if (image2scanner !== null) {
        params["image2scanner"] = image2scanner;
    }
    if (sides !== null) {
        params["sides"] = sides;
    }
    if (increment !== null) {
        params["increment"] = increment;
    }
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckconvert_cargs(
    params: TckconvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tckconvert");
    if ((params["scanner2voxel"] ?? null) !== null) {
        cargs.push(
            "-scanner2voxel",
            execution.inputFile((params["scanner2voxel"] ?? null))
        );
    }
    if ((params["scanner2image"] ?? null) !== null) {
        cargs.push(
            "-scanner2image",
            execution.inputFile((params["scanner2image"] ?? null))
        );
    }
    if ((params["voxel2scanner"] ?? null) !== null) {
        cargs.push(
            "-voxel2scanner",
            execution.inputFile((params["voxel2scanner"] ?? null))
        );
    }
    if ((params["image2scanner"] ?? null) !== null) {
        cargs.push(
            "-image2scanner",
            execution.inputFile((params["image2scanner"] ?? null))
        );
    }
    if ((params["sides"] ?? null) !== null) {
        cargs.push(
            "-sides",
            String((params["sides"] ?? null))
        );
    }
    if ((params["increment"] ?? null) !== null) {
        cargs.push(
            "-increment",
            String((params["increment"] ?? null))
        );
    }
    if ((params["dec"] ?? false)) {
        cargs.push("-dec");
    }
    if ((params["radius"] ?? null) !== null) {
        cargs.push(
            "-radius",
            String((params["radius"] ?? null))
        );
    }
    if ((params["ascii"] ?? false)) {
        cargs.push("-ascii");
    }
    if ((params["binary"] ?? false)) {
        cargs.push("-binary");
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => tckconvert_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(...tckconvert_input_cargs_dyn_fn((params["input"] ?? null)["@type"])((params["input"] ?? null), execution));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tckconvert_outputs(
    params: TckconvertParameters,
    execution: Execution,
): TckconvertOutputs {
    const ret: TckconvertOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * tckconvert
 *
 * Convert between different track file formats.
 *
 * The program currently supports MRtrix .tck files (input/output), ascii text files (input/output), VTK polydata files (input/output), and RenderMan RIB (export only).
 *
 * Note that ascii files will be stored with one streamline per numbered file. To support this, the command will use the multi-file numbering syntax, where square brackets denote the position of the numbering for the files, for example:
 *
 * $ tckconvert input.tck output-'[]'.txt
 *
 * will produce files named output-0000.txt, output-0001.txt, output-0002.txt, ...
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TckconvertOutputs`).
 */
function tckconvert_execute(
    params: TckconvertParameters,
    runner: Runner | null = null,
): TckconvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCKCONVERT_METADATA);
    params = execution.params(params)
    const cargs = tckconvert_cargs(params, execution)
    const ret = tckconvert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tckconvert
 *
 * Convert between different track file formats.
 *
 * The program currently supports MRtrix .tck files (input/output), ascii text files (input/output), VTK polydata files (input/output), and RenderMan RIB (export only).
 *
 * Note that ascii files will be stored with one streamline per numbered file. To support this, the command will use the multi-file numbering syntax, where square brackets denote the position of the numbering for the files, for example:
 *
 * $ tckconvert input.tck output-'[]'.txt
 *
 * will produce files named output-0000.txt, output-0001.txt, output-0002.txt, ...
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input track file.
 * @param output the output track file.
 * @param scanner2voxel if specified, the properties of this image will be used to convert track point positions from real (scanner) coordinates into voxel coordinates.
 * @param scanner2image if specified, the properties of this image will be used to convert track point positions from real (scanner) coordinates into image coordinates (in mm).
 * @param voxel2scanner if specified, the properties of this image will be used to convert track point positions from voxel coordinates into real (scanner) coordinates.
 * @param image2scanner if specified, the properties of this image will be used to convert track point positions from image coordinates (in mm) into real (scanner) coordinates.
 * @param sides number of sides for streamlines
 * @param increment generate streamline points at every (increment) points
 * @param dec add DEC as a primvar
 * @param radius radius of the streamlines
 * @param ascii write an ASCII VTK file (this is the default)
 * @param binary write a binary VTK file
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TckconvertOutputs`).
 */
function tckconvert(
    input: TckconvertVariousStringParametersTagged | TckconvertVariousFileParametersTagged,
    output: string,
    scanner2voxel: InputPathType | null = null,
    scanner2image: InputPathType | null = null,
    voxel2scanner: InputPathType | null = null,
    image2scanner: InputPathType | null = null,
    sides: number | null = null,
    increment: number | null = null,
    dec: boolean = false,
    radius: number | null = null,
    ascii: boolean = false,
    binary: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): TckconvertOutputs {
    const params = tckconvert_params(input, output, scanner2voxel, scanner2image, voxel2scanner, image2scanner, sides, increment, dec, radius, ascii, binary, info, quiet, debug, force, nthreads, config, help, version)
    return tckconvert_execute(params, runner);
}


export {
      TCKCONVERT_METADATA,
      TckconvertOutputs,
      tckconvert,
      tckconvert_config_params,
      tckconvert_execute,
      tckconvert_params,
      tckconvert_various_file_params,
      tckconvert_various_string_params,
};
