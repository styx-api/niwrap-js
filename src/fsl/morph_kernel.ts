// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MORPH_KERNEL_METADATA: Metadata = {
    id: "e47987bb46f4a1bd9d940c19f988a584155c5d5f.boutiques",
    name: "morph_kernel",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MorphKernelParameters {
    "__STYXTYPE__": "morph_kernel";
    "cube_side_length": number;
    "sphere_radius": number;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "morph_kernel": morph_kernel_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "morph_kernel": morph_kernel_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `morph_kernel(...)`.
 *
 * @interface
 */
interface MorphKernelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output morphological kernel file
     */
    morph_kernel_output: OutputPathType;
}


function morph_kernel_params(
    cube_side_length: number,
    sphere_radius: number,
): MorphKernelParameters {
    /**
     * Build parameters.
    
     * @param cube_side_length Side length of the cube (e.g., 11)
     * @param sphere_radius Radius of the sphere (e.g., 5.5)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "morph_kernel" as const,
        "cube_side_length": cube_side_length,
        "sphere_radius": sphere_radius,
    };
    return params;
}


function morph_kernel_cargs(
    params: MorphKernelParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("morph_kernel");
    cargs.push(String((params["cube_side_length"] ?? null)));
    cargs.push(String((params["sphere_radius"] ?? null)));
    return cargs;
}


function morph_kernel_outputs(
    params: MorphKernelParameters,
    execution: Execution,
): MorphKernelOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MorphKernelOutputs = {
        root: execution.outputFile("."),
        morph_kernel_output: execution.outputFile(["sphere[OUTPUT_PREFIX].ker"].join('')),
    };
    return ret;
}


function morph_kernel_execute(
    params: MorphKernelParameters,
    execution: Execution,
): MorphKernelOutputs {
    /**
     * Tool to generate morphological kernels.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MorphKernelOutputs`).
     */
    params = execution.params(params)
    const cargs = morph_kernel_cargs(params, execution)
    const ret = morph_kernel_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function morph_kernel(
    cube_side_length: number,
    sphere_radius: number,
    runner: Runner | null = null,
): MorphKernelOutputs {
    /**
     * Tool to generate morphological kernels.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param cube_side_length Side length of the cube (e.g., 11)
     * @param sphere_radius Radius of the sphere (e.g., 5.5)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MorphKernelOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MORPH_KERNEL_METADATA);
    const params = morph_kernel_params(cube_side_length, sphere_radius)
    return morph_kernel_execute(params, execution);
}


export {
      MORPH_KERNEL_METADATA,
      MorphKernelOutputs,
      MorphKernelParameters,
      morph_kernel,
      morph_kernel_params,
};
