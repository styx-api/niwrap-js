// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_EXTREMA_METADATA: Metadata = {
    id: "dab9c5e241b4f90ee6541ca4c63fc1b5bc231d49.boutiques",
    name: "SurfExtrema",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfExtremaParameters {
    "@type"?: "afni/SurfExtrema";
    "input"?: InputPathType | null | undefined;
    "hood"?: number | null | undefined;
    "thresh"?: number | null | undefined;
    "gthresh"?: number | null | undefined;
    "gscale"?: "NONE" | "LMEAN" | "GMEAN" | null | undefined;
    "extype"?: "MAX" | "MIN" | "ABS" | null | undefined;
    "prefix": string;
    "table"?: string | null | undefined;
}
type SurfExtremaParametersTagged = Required<Pick<SurfExtremaParameters, '@type'>> & SurfExtremaParameters;


/**
 * Output object returned when calling `SurfExtremaParameters(...)`.
 *
 * @interface
 */
interface SurfExtremaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the scaled average gradient values.
     */
    output_grd: OutputPathType;
    /**
     * Output file containing the nodes with maximum values.
     */
    output_ext: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Prefix for the output datasets.
 * @param input Input dataset in which Extrema are to be identified.
 * @param hood Neighborhood radius (R) in mm. Default is 8 mm.
 * @param thresh Do not consider nodes with value less than this threshold. Default is 0.
 * @param gthresh Do not consider nodes with gradient less than this threshold. Default is 0.01.
 * @param gscale Scaling to apply to gradient computation.
 * @param extype Find maxima, minima, or extrema. Options are MAX (default), MIN, ABS.
 * @param table Name of file in which to store a record of the extrema found.
 *
 * @returns Parameter dictionary
 */
function surf_extrema_params(
    prefix: string,
    input: InputPathType | null = null,
    hood: number | null = null,
    thresh: number | null = null,
    gthresh: number | null = null,
    gscale: "NONE" | "LMEAN" | "GMEAN" | null = null,
    extype: "MAX" | "MIN" | "ABS" | null = null,
    table: string | null = null,
): SurfExtremaParametersTagged {
    const params = {
        "@type": "afni/SurfExtrema" as const,
        "prefix": prefix,
    };
    if (input !== null) {
        params["input"] = input;
    }
    if (hood !== null) {
        params["hood"] = hood;
    }
    if (thresh !== null) {
        params["thresh"] = thresh;
    }
    if (gthresh !== null) {
        params["gthresh"] = gthresh;
    }
    if (gscale !== null) {
        params["gscale"] = gscale;
    }
    if (extype !== null) {
        params["extype"] = extype;
    }
    if (table !== null) {
        params["table"] = table;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_extrema_cargs(
    params: SurfExtremaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfExtrema");
    if ((params["input"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["input"] ?? null))
        );
    }
    if ((params["hood"] ?? null) !== null) {
        cargs.push(
            "-nbhd_rad",
            String((params["hood"] ?? null))
        );
    }
    if ((params["thresh"] ?? null) !== null) {
        cargs.push(
            "-thresh",
            String((params["thresh"] ?? null))
        );
    }
    if ((params["gthresh"] ?? null) !== null) {
        cargs.push(
            "-gthresh",
            String((params["gthresh"] ?? null))
        );
    }
    if ((params["gscale"] ?? null) !== null) {
        cargs.push(
            "-gscale",
            (params["gscale"] ?? null)
        );
    }
    if ((params["extype"] ?? null) !== null) {
        cargs.push(
            "-extype",
            (params["extype"] ?? null)
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["table"] ?? null) !== null) {
        cargs.push(
            "-table",
            (params["table"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_extrema_outputs(
    params: SurfExtremaParameters,
    execution: Execution,
): SurfExtremaOutputs {
    const ret: SurfExtremaOutputs = {
        root: execution.outputFile("."),
        output_grd: execution.outputFile([(params["prefix"] ?? null), ".grd"].join('')),
        output_ext: execution.outputFile([(params["prefix"] ?? null), ".ext"].join('')),
    };
    return ret;
}


/**
 * SurfExtrema
 *
 * A program finding the local extrema in a dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfExtremaOutputs`).
 */
function surf_extrema_execute(
    params: SurfExtremaParameters,
    runner: Runner | null = null,
): SurfExtremaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_EXTREMA_METADATA);
    params = execution.params(params)
    const cargs = surf_extrema_cargs(params, execution)
    const ret = surf_extrema_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SurfExtrema
 *
 * A program finding the local extrema in a dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Prefix for the output datasets.
 * @param input Input dataset in which Extrema are to be identified.
 * @param hood Neighborhood radius (R) in mm. Default is 8 mm.
 * @param thresh Do not consider nodes with value less than this threshold. Default is 0.
 * @param gthresh Do not consider nodes with gradient less than this threshold. Default is 0.01.
 * @param gscale Scaling to apply to gradient computation.
 * @param extype Find maxima, minima, or extrema. Options are MAX (default), MIN, ABS.
 * @param table Name of file in which to store a record of the extrema found.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfExtremaOutputs`).
 */
function surf_extrema(
    prefix: string,
    input: InputPathType | null = null,
    hood: number | null = null,
    thresh: number | null = null,
    gthresh: number | null = null,
    gscale: "NONE" | "LMEAN" | "GMEAN" | null = null,
    extype: "MAX" | "MIN" | "ABS" | null = null,
    table: string | null = null,
    runner: Runner | null = null,
): SurfExtremaOutputs {
    const params = surf_extrema_params(prefix, input, hood, thresh, gthresh, gscale, extype, table)
    return surf_extrema_execute(params, runner);
}


export {
      SURF_EXTREMA_METADATA,
      SurfExtremaOutputs,
      surf_extrema,
      surf_extrema_execute,
      surf_extrema_params,
};
