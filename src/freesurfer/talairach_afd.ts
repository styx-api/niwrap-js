// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TALAIRACH_AFD_METADATA: Metadata = {
    id: "77c3251247380212cdbe7973621a64bff1fd5736.boutiques",
    name: "talairach_afd",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TalairachAfdParameters {
    "@type": "freesurfer.talairach_afd";
    "subject_name"?: string | null | undefined;
    "xfm_file"?: InputPathType | null | undefined;
    "p_value_threshold"?: number | null | undefined;
    "afd_directory"?: string | null | undefined;
    "verbose": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.talairach_afd": talairach_afd_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `talairach_afd(...)`.
 *
 * @interface
 */
interface TalairachAfdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name Specify subject's name
 * @param xfm_file Specify the talairach.xfm file to check
 * @param p_value_threshold Threshold the p-values at #; Talairach transforms for subjects with p-values <= T are considered as very unlikely
 * @param afd_directory Specify directory containing .afd data files
 * @param verbose Enable verbose output
 *
 * @returns Parameter dictionary
 */
function talairach_afd_params(
    subject_name: string | null = null,
    xfm_file: InputPathType | null = null,
    p_value_threshold: number | null = 0.01,
    afd_directory: string | null = null,
    verbose: boolean = false,
): TalairachAfdParameters {
    const params = {
        "@type": "freesurfer.talairach_afd" as const,
        "verbose": verbose,
    };
    if (subject_name !== null) {
        params["subject_name"] = subject_name;
    }
    if (xfm_file !== null) {
        params["xfm_file"] = xfm_file;
    }
    if (p_value_threshold !== null) {
        params["p_value_threshold"] = p_value_threshold;
    }
    if (afd_directory !== null) {
        params["afd_directory"] = afd_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function talairach_afd_cargs(
    params: TalairachAfdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("talairach_afd");
    if ((params["subject_name"] ?? null) !== null) {
        cargs.push(
            "-subj",
            (params["subject_name"] ?? null)
        );
    }
    if ((params["xfm_file"] ?? null) !== null) {
        cargs.push(
            "-xfm",
            execution.inputFile((params["xfm_file"] ?? null))
        );
    }
    if ((params["p_value_threshold"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["p_value_threshold"] ?? null))
        );
    }
    if ((params["afd_directory"] ?? null) !== null) {
        cargs.push(
            "-afd",
            (params["afd_directory"] ?? null)
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-V");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function talairach_afd_outputs(
    params: TalairachAfdParameters,
    execution: Execution,
): TalairachAfdOutputs {
    const ret: TalairachAfdOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Detects Talairach alignment failures.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `TalairachAfdOutputs`).
 */
function talairach_afd_execute(
    params: TalairachAfdParameters,
    execution: Execution,
): TalairachAfdOutputs {
    params = execution.params(params)
    const cargs = talairach_afd_cargs(params, execution)
    const ret = talairach_afd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Detects Talairach alignment failures.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name Specify subject's name
 * @param xfm_file Specify the talairach.xfm file to check
 * @param p_value_threshold Threshold the p-values at #; Talairach transforms for subjects with p-values <= T are considered as very unlikely
 * @param afd_directory Specify directory containing .afd data files
 * @param verbose Enable verbose output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalairachAfdOutputs`).
 */
function talairach_afd(
    subject_name: string | null = null,
    xfm_file: InputPathType | null = null,
    p_value_threshold: number | null = 0.01,
    afd_directory: string | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): TalairachAfdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TALAIRACH_AFD_METADATA);
    const params = talairach_afd_params(subject_name, xfm_file, p_value_threshold, afd_directory, verbose)
    return talairach_afd_execute(params, execution);
}


export {
      TALAIRACH_AFD_METADATA,
      TalairachAfdOutputs,
      TalairachAfdParameters,
      talairach_afd,
      talairach_afd_cargs,
      talairach_afd_execute,
      talairach_afd_outputs,
      talairach_afd_params,
};
