// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ANOVA3_METADATA: Metadata = {
    id: "89d3a37a3aeb7f4c6c360f1bc16bdccd1f3a7f46.boutiques",
    name: "3dANOVA3",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAnova3Parameters {
    "__STYXTYPE__": "3dANOVA3";
    "type": number;
    "alevels": number;
    "blevels": number;
    "clevels": number;
    "dsets": Array<string>;
    "voxel_num"?: number | null | undefined;
    "diskspace": boolean;
    "mask"?: InputPathType | null | undefined;
    "outfile_fa"?: string | null | undefined;
    "outfile_fb"?: string | null | undefined;
    "outfile_fc"?: string | null | undefined;
    "outfile_fab"?: string | null | undefined;
    "outfile_fac"?: string | null | undefined;
    "outfile_fbc"?: string | null | undefined;
    "outfile_fabc"?: string | null | undefined;
    "outfile_amean"?: string | null | undefined;
    "outfile_bmean"?: string | null | undefined;
    "outfile_cmean"?: string | null | undefined;
    "outfile_xmean"?: string | null | undefined;
    "outfile_adiff"?: string | null | undefined;
    "outfile_bdiff"?: string | null | undefined;
    "outfile_cdiff"?: string | null | undefined;
    "outfile_xdiff"?: string | null | undefined;
    "outfile_acontr"?: string | null | undefined;
    "outfile_bcontr"?: string | null | undefined;
    "outfile_ccontr"?: string | null | undefined;
    "outfile_Abcontr"?: string | null | undefined;
    "outfile_Abdiff"?: string | null | undefined;
    "outfile_abmean"?: string | null | undefined;
    "outfile_bucket"?: string | null | undefined;
    "anova_options"?: Array<string> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dANOVA3": v_3d_anova3_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dANOVA3": v_3d_anova3_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_anova3(...)`.
 *
 * @interface
 */
interface V3dAnova3Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file for the main ANOVA result.
     */
    outfile_fa: OutputPathType | null;
    /**
     * Output file for the main B ANOVA result.
     */
    outfile_fb: OutputPathType | null;
    /**
     * Output file for the main C ANOVA result.
     */
    outfile_fc: OutputPathType | null;
    /**
     * Output file for the interaction between A and B.
     */
    outfile_fab: OutputPathType | null;
    /**
     * Output file for the interaction between A and C.
     */
    outfile_fac: OutputPathType | null;
    /**
     * Output file for the interaction between B and C.
     */
    outfile_fbc: OutputPathType | null;
    /**
     * Output file for the interaction between A, B, and C.
     */
    outfile_fabc: OutputPathType | null;
    /**
     * Output file for the A mean results.
     */
    outfile_amean: OutputPathType | null;
    /**
     * Output file for the B mean results.
     */
    outfile_bmean: OutputPathType | null;
}


function v_3d_anova3_params(
    type_: number,
    alevels: number,
    blevels: number,
    clevels: number,
    dsets: Array<string>,
    voxel_num: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    outfile_fa: string | null = null,
    outfile_fb: string | null = null,
    outfile_fc: string | null = null,
    outfile_fab: string | null = null,
    outfile_fac: string | null = null,
    outfile_fbc: string | null = null,
    outfile_fabc: string | null = null,
    outfile_amean: string | null = null,
    outfile_bmean: string | null = null,
    outfile_cmean: string | null = null,
    outfile_xmean: string | null = null,
    outfile_adiff: string | null = null,
    outfile_bdiff: string | null = null,
    outfile_cdiff: string | null = null,
    outfile_xdiff: string | null = null,
    outfile_acontr: string | null = null,
    outfile_bcontr: string | null = null,
    outfile_ccontr: string | null = null,
    outfile_abcontr: string | null = null,
    outfile_abdiff: string | null = null,
    outfile_abmean: string | null = null,
    outfile_bucket: string | null = null,
    anova_options: Array<string> | null = null,
): V3dAnova3Parameters {
    /**
     * Build parameters.
    
     * @param type_ Type of ANOVA model to be used. k = 1: A,B,C fixed; AxBxC, k = 2: A,B,C random; AxBxC, k = 3: A fixed; B,C random; AxBxC, k = 4: A,B fixed; C random; AxBxC, k = 5: A,B fixed; C random; AxB,BxC,C(A)
     * @param alevels Number of levels for factor A.
     * @param blevels Number of levels for factor B.
     * @param clevels Number of levels for factor C.
     * @param dsets Input data sets for specific levels of factors A, B, and C.
     * @param voxel_num Screen output for specified voxel number.
     * @param diskspace Print out disk space required for program execution.
     * @param mask Use sub-brick #0 of dataset to define which voxels to process.
     * @param outfile_fa Specify the output file for the main ANOVA result.
     * @param outfile_fb Specify the output file for the main B ANOVA result.
     * @param outfile_fc Specify the output file for the main C ANOVA result.
     * @param outfile_fab Specify the output file for the interaction between A and B.
     * @param outfile_fac Specify the output file for the interaction between A and C.
     * @param outfile_fbc Specify the output file for the interaction between B and C.
     * @param outfile_fabc Specify the output file for the interaction between A, B, and C.
     * @param outfile_amean Specify the output file for the A mean results.
     * @param outfile_bmean Specify the output file for the B mean results.
     * @param outfile_cmean Specify the output file for the C mean results.
     * @param outfile_xmean Specify the output file for the overall mean results.
     * @param outfile_adiff Specify the output file for the A difference results.
     * @param outfile_bdiff Specify the output file for the B difference results.
     * @param outfile_cdiff Specify the output file for the C difference results.
     * @param outfile_xdiff Specify the output file for the overall difference results.
     * @param outfile_acontr Specify the output file for the A contrast results.
     * @param outfile_bcontr Specify the output file for the B contrast results.
     * @param outfile_ccontr Specify the output file for the C contrast results.
     * @param outfile_abcontr Specify the output file for the interaction contrast results between A and B (case-sensitive).
     * @param outfile_abdiff Specify the output file for the interaction difference results between A and B (case-sensitive).
     * @param outfile_abmean Specify the output file for the mean results of the interaction between A and B.
     * @param outfile_bucket Specify the output file for the bucket (combined) results.
     * @param anova_options Modified ANOVA computation options. See: https://afni.nimh.nih.gov/sscc/gangc/ANOVA_Mod.html
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dANOVA3" as const,
        "type": type_,
        "alevels": alevels,
        "blevels": blevels,
        "clevels": clevels,
        "dsets": dsets,
        "diskspace": diskspace,
    };
    if (voxel_num !== null) {
        params["voxel_num"] = voxel_num;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (outfile_fa !== null) {
        params["outfile_fa"] = outfile_fa;
    }
    if (outfile_fb !== null) {
        params["outfile_fb"] = outfile_fb;
    }
    if (outfile_fc !== null) {
        params["outfile_fc"] = outfile_fc;
    }
    if (outfile_fab !== null) {
        params["outfile_fab"] = outfile_fab;
    }
    if (outfile_fac !== null) {
        params["outfile_fac"] = outfile_fac;
    }
    if (outfile_fbc !== null) {
        params["outfile_fbc"] = outfile_fbc;
    }
    if (outfile_fabc !== null) {
        params["outfile_fabc"] = outfile_fabc;
    }
    if (outfile_amean !== null) {
        params["outfile_amean"] = outfile_amean;
    }
    if (outfile_bmean !== null) {
        params["outfile_bmean"] = outfile_bmean;
    }
    if (outfile_cmean !== null) {
        params["outfile_cmean"] = outfile_cmean;
    }
    if (outfile_xmean !== null) {
        params["outfile_xmean"] = outfile_xmean;
    }
    if (outfile_adiff !== null) {
        params["outfile_adiff"] = outfile_adiff;
    }
    if (outfile_bdiff !== null) {
        params["outfile_bdiff"] = outfile_bdiff;
    }
    if (outfile_cdiff !== null) {
        params["outfile_cdiff"] = outfile_cdiff;
    }
    if (outfile_xdiff !== null) {
        params["outfile_xdiff"] = outfile_xdiff;
    }
    if (outfile_acontr !== null) {
        params["outfile_acontr"] = outfile_acontr;
    }
    if (outfile_bcontr !== null) {
        params["outfile_bcontr"] = outfile_bcontr;
    }
    if (outfile_ccontr !== null) {
        params["outfile_ccontr"] = outfile_ccontr;
    }
    if (outfile_abcontr !== null) {
        params["outfile_Abcontr"] = outfile_abcontr;
    }
    if (outfile_abdiff !== null) {
        params["outfile_Abdiff"] = outfile_abdiff;
    }
    if (outfile_abmean !== null) {
        params["outfile_abmean"] = outfile_abmean;
    }
    if (outfile_bucket !== null) {
        params["outfile_bucket"] = outfile_bucket;
    }
    if (anova_options !== null) {
        params["anova_options"] = anova_options;
    }
    return params;
}


function v_3d_anova3_cargs(
    params: V3dAnova3Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dANOVA3");
    cargs.push(
        "-type",
        String((params["type"] ?? null))
    );
    cargs.push(
        "-alevels",
        String((params["alevels"] ?? null))
    );
    cargs.push(
        "-blevels",
        String((params["blevels"] ?? null))
    );
    cargs.push(
        "-clevels",
        String((params["clevels"] ?? null))
    );
    cargs.push(
        "-dset",
        ...(params["dsets"] ?? null)
    );
    if ((params["voxel_num"] ?? null) !== null) {
        cargs.push(
            "-voxel",
            String((params["voxel_num"] ?? null))
        );
    }
    if ((params["diskspace"] ?? null)) {
        cargs.push("-diskspace");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["outfile_fa"] ?? null) !== null) {
        cargs.push(
            "-fa",
            (params["outfile_fa"] ?? null)
        );
    }
    if ((params["outfile_fb"] ?? null) !== null) {
        cargs.push(
            "-fb",
            (params["outfile_fb"] ?? null)
        );
    }
    if ((params["outfile_fc"] ?? null) !== null) {
        cargs.push(
            "-fc",
            (params["outfile_fc"] ?? null)
        );
    }
    if ((params["outfile_fab"] ?? null) !== null) {
        cargs.push(
            "-fab",
            (params["outfile_fab"] ?? null)
        );
    }
    if ((params["outfile_fac"] ?? null) !== null) {
        cargs.push(
            "-fac",
            (params["outfile_fac"] ?? null)
        );
    }
    if ((params["outfile_fbc"] ?? null) !== null) {
        cargs.push(
            "-fbc",
            (params["outfile_fbc"] ?? null)
        );
    }
    if ((params["outfile_fabc"] ?? null) !== null) {
        cargs.push(
            "-fabc",
            (params["outfile_fabc"] ?? null)
        );
    }
    if ((params["outfile_amean"] ?? null) !== null) {
        cargs.push(
            "-amean",
            (params["outfile_amean"] ?? null)
        );
    }
    if ((params["outfile_bmean"] ?? null) !== null) {
        cargs.push(
            "-bmean",
            (params["outfile_bmean"] ?? null)
        );
    }
    if ((params["outfile_cmean"] ?? null) !== null) {
        cargs.push(
            "-cmean",
            (params["outfile_cmean"] ?? null)
        );
    }
    if ((params["outfile_xmean"] ?? null) !== null) {
        cargs.push(
            "-xmean",
            (params["outfile_xmean"] ?? null)
        );
    }
    if ((params["outfile_adiff"] ?? null) !== null) {
        cargs.push(
            "-adiff",
            (params["outfile_adiff"] ?? null)
        );
    }
    if ((params["outfile_bdiff"] ?? null) !== null) {
        cargs.push(
            "-bdiff",
            (params["outfile_bdiff"] ?? null)
        );
    }
    if ((params["outfile_cdiff"] ?? null) !== null) {
        cargs.push(
            "-cdiff",
            (params["outfile_cdiff"] ?? null)
        );
    }
    if ((params["outfile_xdiff"] ?? null) !== null) {
        cargs.push(
            "-xdiff",
            (params["outfile_xdiff"] ?? null)
        );
    }
    if ((params["outfile_acontr"] ?? null) !== null) {
        cargs.push(
            "-acontr",
            (params["outfile_acontr"] ?? null)
        );
    }
    if ((params["outfile_bcontr"] ?? null) !== null) {
        cargs.push(
            "-bcontr",
            (params["outfile_bcontr"] ?? null)
        );
    }
    if ((params["outfile_ccontr"] ?? null) !== null) {
        cargs.push(
            "-ccontr",
            (params["outfile_ccontr"] ?? null)
        );
    }
    if ((params["outfile_Abcontr"] ?? null) !== null) {
        cargs.push(
            "-Abcontr",
            (params["outfile_Abcontr"] ?? null)
        );
    }
    if ((params["outfile_Abdiff"] ?? null) !== null) {
        cargs.push(
            "-Abdiff",
            (params["outfile_Abdiff"] ?? null)
        );
    }
    if ((params["outfile_abmean"] ?? null) !== null) {
        cargs.push(
            "-abmean",
            (params["outfile_abmean"] ?? null)
        );
    }
    if ((params["outfile_bucket"] ?? null) !== null) {
        cargs.push(
            "-bucket",
            (params["outfile_bucket"] ?? null)
        );
    }
    if ((params["anova_options"] ?? null) !== null) {
        cargs.push(
            "-old_method -OK -assume_sph",
            ...(params["anova_options"] ?? null)
        );
    }
    return cargs;
}


function v_3d_anova3_outputs(
    params: V3dAnova3Parameters,
    execution: Execution,
): V3dAnova3Outputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dAnova3Outputs = {
        root: execution.outputFile("."),
        outfile_fa: ((params["outfile_fa"] ?? null) !== null) ? execution.outputFile([(params["outfile_fa"] ?? null)].join('')) : null,
        outfile_fb: ((params["outfile_fb"] ?? null) !== null) ? execution.outputFile([(params["outfile_fb"] ?? null)].join('')) : null,
        outfile_fc: ((params["outfile_fc"] ?? null) !== null) ? execution.outputFile([(params["outfile_fc"] ?? null)].join('')) : null,
        outfile_fab: ((params["outfile_fab"] ?? null) !== null) ? execution.outputFile([(params["outfile_fab"] ?? null)].join('')) : null,
        outfile_fac: ((params["outfile_fac"] ?? null) !== null) ? execution.outputFile([(params["outfile_fac"] ?? null)].join('')) : null,
        outfile_fbc: ((params["outfile_fbc"] ?? null) !== null) ? execution.outputFile([(params["outfile_fbc"] ?? null)].join('')) : null,
        outfile_fabc: ((params["outfile_fabc"] ?? null) !== null) ? execution.outputFile([(params["outfile_fabc"] ?? null)].join('')) : null,
        outfile_amean: ((params["outfile_amean"] ?? null) !== null) ? execution.outputFile([(params["outfile_amean"] ?? null)].join('')) : null,
        outfile_bmean: ((params["outfile_bmean"] ?? null) !== null) ? execution.outputFile([(params["outfile_bmean"] ?? null)].join('')) : null,
    };
    return ret;
}


function v_3d_anova3_execute(
    params: V3dAnova3Parameters,
    execution: Execution,
): V3dAnova3Outputs {
    /**
     * Performs three-factor ANOVA on 3D data sets.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dAnova3Outputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_anova3_cargs(params, execution)
    const ret = v_3d_anova3_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_anova3(
    type_: number,
    alevels: number,
    blevels: number,
    clevels: number,
    dsets: Array<string>,
    voxel_num: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    outfile_fa: string | null = null,
    outfile_fb: string | null = null,
    outfile_fc: string | null = null,
    outfile_fab: string | null = null,
    outfile_fac: string | null = null,
    outfile_fbc: string | null = null,
    outfile_fabc: string | null = null,
    outfile_amean: string | null = null,
    outfile_bmean: string | null = null,
    outfile_cmean: string | null = null,
    outfile_xmean: string | null = null,
    outfile_adiff: string | null = null,
    outfile_bdiff: string | null = null,
    outfile_cdiff: string | null = null,
    outfile_xdiff: string | null = null,
    outfile_acontr: string | null = null,
    outfile_bcontr: string | null = null,
    outfile_ccontr: string | null = null,
    outfile_abcontr: string | null = null,
    outfile_abdiff: string | null = null,
    outfile_abmean: string | null = null,
    outfile_bucket: string | null = null,
    anova_options: Array<string> | null = null,
    runner: Runner | null = null,
): V3dAnova3Outputs {
    /**
     * Performs three-factor ANOVA on 3D data sets.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param type_ Type of ANOVA model to be used. k = 1: A,B,C fixed; AxBxC, k = 2: A,B,C random; AxBxC, k = 3: A fixed; B,C random; AxBxC, k = 4: A,B fixed; C random; AxBxC, k = 5: A,B fixed; C random; AxB,BxC,C(A)
     * @param alevels Number of levels for factor A.
     * @param blevels Number of levels for factor B.
     * @param clevels Number of levels for factor C.
     * @param dsets Input data sets for specific levels of factors A, B, and C.
     * @param voxel_num Screen output for specified voxel number.
     * @param diskspace Print out disk space required for program execution.
     * @param mask Use sub-brick #0 of dataset to define which voxels to process.
     * @param outfile_fa Specify the output file for the main ANOVA result.
     * @param outfile_fb Specify the output file for the main B ANOVA result.
     * @param outfile_fc Specify the output file for the main C ANOVA result.
     * @param outfile_fab Specify the output file for the interaction between A and B.
     * @param outfile_fac Specify the output file for the interaction between A and C.
     * @param outfile_fbc Specify the output file for the interaction between B and C.
     * @param outfile_fabc Specify the output file for the interaction between A, B, and C.
     * @param outfile_amean Specify the output file for the A mean results.
     * @param outfile_bmean Specify the output file for the B mean results.
     * @param outfile_cmean Specify the output file for the C mean results.
     * @param outfile_xmean Specify the output file for the overall mean results.
     * @param outfile_adiff Specify the output file for the A difference results.
     * @param outfile_bdiff Specify the output file for the B difference results.
     * @param outfile_cdiff Specify the output file for the C difference results.
     * @param outfile_xdiff Specify the output file for the overall difference results.
     * @param outfile_acontr Specify the output file for the A contrast results.
     * @param outfile_bcontr Specify the output file for the B contrast results.
     * @param outfile_ccontr Specify the output file for the C contrast results.
     * @param outfile_abcontr Specify the output file for the interaction contrast results between A and B (case-sensitive).
     * @param outfile_abdiff Specify the output file for the interaction difference results between A and B (case-sensitive).
     * @param outfile_abmean Specify the output file for the mean results of the interaction between A and B.
     * @param outfile_bucket Specify the output file for the bucket (combined) results.
     * @param anova_options Modified ANOVA computation options. See: https://afni.nimh.nih.gov/sscc/gangc/ANOVA_Mod.html
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dAnova3Outputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ANOVA3_METADATA);
    const params = v_3d_anova3_params(type_, alevels, blevels, clevels, dsets, voxel_num, diskspace, mask, outfile_fa, outfile_fb, outfile_fc, outfile_fab, outfile_fac, outfile_fbc, outfile_fabc, outfile_amean, outfile_bmean, outfile_cmean, outfile_xmean, outfile_adiff, outfile_bdiff, outfile_cdiff, outfile_xdiff, outfile_acontr, outfile_bcontr, outfile_ccontr, outfile_abcontr, outfile_abdiff, outfile_abmean, outfile_bucket, anova_options)
    return v_3d_anova3_execute(params, execution);
}


export {
      V3dAnova3Outputs,
      V3dAnova3Parameters,
      V_3D_ANOVA3_METADATA,
      v_3d_anova3,
      v_3d_anova3_params,
};
