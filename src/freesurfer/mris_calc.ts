// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_CALC_METADATA: Metadata = {
    id: "8fa829f5f800088c450bcf7fa7d7097fee3c8f04.boutiques",
    name: "mris_calc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisCalcParameters {
    "@type": "freesurfer.mris_calc";
    "input_file1": InputPathType;
    "action": string;
    "input_file2_or_float"?: InputPathType | null | undefined;
    "output_file"?: string | null | undefined;
    "label_file"?: InputPathType | null | undefined;
    "verbosity"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_calc": mris_calc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_calc": mris_calc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_calc(...)`.
 *
 * @interface
 */
interface MrisCalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting FreeSurfer curvature overlay or volume file.
     */
    output_curv_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file1 The name of a FreeSurfer curvature overlay (e.g., rh.curv) or volume file (e.g., orig.mgz).
 * @param action Mathematical action to perform on the input file(s), written as a text string.
 * @param input_file2_or_float The second input for the calculation. Can be a file (e.g., rh.thickness) or a float number if the file does not exist.
 * @param output_file Specify the output file name for the result of the calculation.
 * @param label_file Constrain the calculation to vertices defined in the FreeSurfer label file.
 * @param verbosity Set the verbosity of the program.
 *
 * @returns Parameter dictionary
 */
function mris_calc_params(
    input_file1: InputPathType,
    action: string,
    input_file2_or_float: InputPathType | null = null,
    output_file: string | null = null,
    label_file: InputPathType | null = null,
    verbosity: string | null = null,
): MrisCalcParameters {
    const params = {
        "@type": "freesurfer.mris_calc" as const,
        "input_file1": input_file1,
        "action": action,
    };
    if (input_file2_or_float !== null) {
        params["input_file2_or_float"] = input_file2_or_float;
    }
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_calc_cargs(
    params: MrisCalcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_calc");
    cargs.push(execution.inputFile((params["input_file1"] ?? null)));
    cargs.push((params["action"] ?? null));
    if ((params["input_file2_or_float"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["input_file2_or_float"] ?? null)));
    }
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "--output",
            (params["output_file"] ?? null)
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "--label",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "--verbosity",
            (params["verbosity"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_calc_outputs(
    params: MrisCalcParameters,
    execution: Execution,
): MrisCalcOutputs {
    const ret: MrisCalcOutputs = {
        root: execution.outputFile("."),
        output_curv_file: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Simple calculator that operates on FreeSurfer curvatures and volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisCalcOutputs`).
 */
function mris_calc_execute(
    params: MrisCalcParameters,
    runner: Runner | null = null,
): MrisCalcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_CALC_METADATA);
    params = execution.params(params)
    const cargs = mris_calc_cargs(params, execution)
    const ret = mris_calc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Simple calculator that operates on FreeSurfer curvatures and volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file1 The name of a FreeSurfer curvature overlay (e.g., rh.curv) or volume file (e.g., orig.mgz).
 * @param action Mathematical action to perform on the input file(s), written as a text string.
 * @param input_file2_or_float The second input for the calculation. Can be a file (e.g., rh.thickness) or a float number if the file does not exist.
 * @param output_file Specify the output file name for the result of the calculation.
 * @param label_file Constrain the calculation to vertices defined in the FreeSurfer label file.
 * @param verbosity Set the verbosity of the program.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisCalcOutputs`).
 */
function mris_calc(
    input_file1: InputPathType,
    action: string,
    input_file2_or_float: InputPathType | null = null,
    output_file: string | null = null,
    label_file: InputPathType | null = null,
    verbosity: string | null = null,
    runner: Runner | null = null,
): MrisCalcOutputs {
    const params = mris_calc_params(input_file1, action, input_file2_or_float, output_file, label_file, verbosity)
    return mris_calc_execute(params, runner);
}


export {
      MRIS_CALC_METADATA,
      MrisCalcOutputs,
      MrisCalcParameters,
      mris_calc,
      mris_calc_execute,
      mris_calc_params,
};
