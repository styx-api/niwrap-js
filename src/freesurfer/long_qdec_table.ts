// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LONG_QDEC_TABLE_METADATA: Metadata = {
    id: "85d998ffbeab5b312320b201cbb085bfe7125309.boutiques",
    name: "long_qdec_table",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LongQdecTableParameters {
    "@type": "freesurfer.long_qdec_table";
    "qdec_table": InputPathType;
    "split"?: string | null | undefined;
    "cross_flag": boolean;
    "sort"?: string | null | undefined;
    "out"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.long_qdec_table": long_qdec_table_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.long_qdec_table": long_qdec_table_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `long_qdec_table(...)`.
 *
 * @interface
 */
interface LongQdecTableOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output table file generated by the specified operations
     */
    output_table: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param qdec_table QDEC table file specifying the subjects and time points
 * @param split Split table based on column (e.g., use 'fsid-base' to separate subjects)
 * @param cross_flag Collapse table to cross sectional (one line per subject)
 * @param sort Sort table based on column within subject (e.g., 'age')
 * @param out Output file name for operations producing a single table
 *
 * @returns Parameter dictionary
 */
function long_qdec_table_params(
    qdec_table: InputPathType,
    split: string | null = null,
    cross_flag: boolean = false,
    sort: string | null = null,
    out: string | null = null,
): LongQdecTableParameters {
    const params = {
        "@type": "freesurfer.long_qdec_table" as const,
        "qdec_table": qdec_table,
        "cross_flag": cross_flag,
    };
    if (split !== null) {
        params["split"] = split;
    }
    if (sort !== null) {
        params["sort"] = sort;
    }
    if (out !== null) {
        params["out"] = out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function long_qdec_table_cargs(
    params: LongQdecTableParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("long_qdec_table");
    cargs.push(
        "--qdec",
        execution.inputFile((params["qdec_table"] ?? null))
    );
    if ((params["split"] ?? null) !== null) {
        cargs.push(
            "--split",
            (params["split"] ?? null)
        );
    }
    if ((params["cross_flag"] ?? null)) {
        cargs.push("--cross");
    }
    if ((params["sort"] ?? null) !== null) {
        cargs.push(
            "--sort",
            (params["sort"] ?? null)
        );
    }
    if ((params["out"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["out"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function long_qdec_table_outputs(
    params: LongQdecTableParameters,
    execution: Execution,
): LongQdecTableOutputs {
    const ret: LongQdecTableOutputs = {
        root: execution.outputFile("."),
        output_table: ((params["out"] ?? null) !== null) ? execution.outputFile([(params["out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Tool to operate on longitudinal QDEC tables.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `LongQdecTableOutputs`).
 */
function long_qdec_table_execute(
    params: LongQdecTableParameters,
    execution: Execution,
): LongQdecTableOutputs {
    params = execution.params(params)
    const cargs = long_qdec_table_cargs(params, execution)
    const ret = long_qdec_table_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool to operate on longitudinal QDEC tables.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param qdec_table QDEC table file specifying the subjects and time points
 * @param split Split table based on column (e.g., use 'fsid-base' to separate subjects)
 * @param cross_flag Collapse table to cross sectional (one line per subject)
 * @param sort Sort table based on column within subject (e.g., 'age')
 * @param out Output file name for operations producing a single table
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LongQdecTableOutputs`).
 */
function long_qdec_table(
    qdec_table: InputPathType,
    split: string | null = null,
    cross_flag: boolean = false,
    sort: string | null = null,
    out: string | null = null,
    runner: Runner | null = null,
): LongQdecTableOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LONG_QDEC_TABLE_METADATA);
    const params = long_qdec_table_params(qdec_table, split, cross_flag, sort, out)
    return long_qdec_table_execute(params, execution);
}


export {
      LONG_QDEC_TABLE_METADATA,
      LongQdecTableOutputs,
      LongQdecTableParameters,
      long_qdec_table,
      long_qdec_table_cargs,
      long_qdec_table_execute,
      long_qdec_table_outputs,
      long_qdec_table_params,
};
