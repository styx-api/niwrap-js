// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DSVD_METADATA: Metadata = {
    id: "a44411b921407798a01380cba6cb97822fb9b904.boutiques",
    name: "1dsvd",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dsvdParameters {
    "@type": "afni.1dsvd";
    "one": boolean;
    "vmean": boolean;
    "vnorm": boolean;
    "cond": boolean;
    "sing": boolean;
    "sort": boolean;
    "nosort": boolean;
    "asort": boolean;
    "left_eigenvectors": boolean;
    "num_eigenvectors"?: string | null | undefined;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.1dsvd": v_1dsvd_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.1dsvd": v_1dsvd_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dsvd(...)`.
 *
 * @interface
 */
interface V1dsvdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of the SVD computation
     */
    stdout: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input 1D file(s) for SVD computation
 * @param one Make 1st vector be all 1's
 * @param vmean Remove mean from each vector (cannot be used with -one)
 * @param vnorm Make L2-norm of each vector = 1 before SVD
 * @param cond Only print condition number (ratio of extremes)
 * @param sing Only print singular values
 * @param sort Sort singular values in descending order (default)
 * @param nosort Don't sort singular values
 * @param asort Sort singular values in ascending order
 * @param left_eigenvectors Only output left eigenvectors in .1D format
 * @param num_eigenvectors Specify number of left eigenvectors to output
 *
 * @returns Parameter dictionary
 */
function v_1dsvd_params(
    input_files: Array<InputPathType>,
    one: boolean = false,
    vmean: boolean = false,
    vnorm: boolean = false,
    cond: boolean = false,
    sing: boolean = false,
    sort: boolean = false,
    nosort: boolean = false,
    asort: boolean = false,
    left_eigenvectors: boolean = false,
    num_eigenvectors: string | null = null,
): V1dsvdParameters {
    const params = {
        "@type": "afni.1dsvd" as const,
        "one": one,
        "vmean": vmean,
        "vnorm": vnorm,
        "cond": cond,
        "sing": sing,
        "sort": sort,
        "nosort": nosort,
        "asort": asort,
        "left_eigenvectors": left_eigenvectors,
        "input_files": input_files,
    };
    if (num_eigenvectors !== null) {
        params["num_eigenvectors"] = num_eigenvectors;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dsvd_cargs(
    params: V1dsvdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dsvd");
    if ((params["one"] ?? null)) {
        cargs.push("-one");
    }
    if ((params["vmean"] ?? null)) {
        cargs.push("-vmean");
    }
    if ((params["vnorm"] ?? null)) {
        cargs.push("-vnorm");
    }
    if ((params["cond"] ?? null)) {
        cargs.push("-cond");
    }
    if ((params["sing"] ?? null)) {
        cargs.push("-sing");
    }
    if ((params["sort"] ?? null)) {
        cargs.push("-sort");
    }
    if ((params["nosort"] ?? null)) {
        cargs.push("-nosort");
    }
    if ((params["asort"] ?? null)) {
        cargs.push("-asort");
    }
    if ((params["left_eigenvectors"] ?? null)) {
        cargs.push("-1Dleft");
    }
    if ((params["num_eigenvectors"] ?? null) !== null) {
        cargs.push(
            "-nev",
            (params["num_eigenvectors"] ?? null)
        );
    }
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1dsvd_outputs(
    params: V1dsvdParameters,
    execution: Execution,
): V1dsvdOutputs {
    const ret: V1dsvdOutputs = {
        root: execution.outputFile("."),
        stdout: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * Computes SVD of the matrix formed by the 1D file(s) and outputs the result on stdout.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V1dsvdOutputs`).
 */
function v_1dsvd_execute(
    params: V1dsvdParameters,
    execution: Execution,
): V1dsvdOutputs {
    params = execution.params(params)
    const cargs = v_1dsvd_cargs(params, execution)
    const ret = v_1dsvd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes SVD of the matrix formed by the 1D file(s) and outputs the result on stdout.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input 1D file(s) for SVD computation
 * @param one Make 1st vector be all 1's
 * @param vmean Remove mean from each vector (cannot be used with -one)
 * @param vnorm Make L2-norm of each vector = 1 before SVD
 * @param cond Only print condition number (ratio of extremes)
 * @param sing Only print singular values
 * @param sort Sort singular values in descending order (default)
 * @param nosort Don't sort singular values
 * @param asort Sort singular values in ascending order
 * @param left_eigenvectors Only output left eigenvectors in .1D format
 * @param num_eigenvectors Specify number of left eigenvectors to output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dsvdOutputs`).
 */
function v_1dsvd(
    input_files: Array<InputPathType>,
    one: boolean = false,
    vmean: boolean = false,
    vnorm: boolean = false,
    cond: boolean = false,
    sing: boolean = false,
    sort: boolean = false,
    nosort: boolean = false,
    asort: boolean = false,
    left_eigenvectors: boolean = false,
    num_eigenvectors: string | null = null,
    runner: Runner | null = null,
): V1dsvdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DSVD_METADATA);
    const params = v_1dsvd_params(input_files, one, vmean, vnorm, cond, sing, sort, nosort, asort, left_eigenvectors, num_eigenvectors)
    return v_1dsvd_execute(params, execution);
}


export {
      V1dsvdOutputs,
      V1dsvdParameters,
      V_1DSVD_METADATA,
      v_1dsvd,
      v_1dsvd_cargs,
      v_1dsvd_execute,
      v_1dsvd_outputs,
      v_1dsvd_params,
};
