// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BBLABEL_METADATA: Metadata = {
    id: "8029e18ce532d6970cd367d113a7d2298a390304.boutiques",
    name: "bblabel",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BblabelParameters {
    "__STYXTYPE__": "bblabel";
    "labelfile": InputPathType;
    "xmin"?: number | null | undefined;
    "xmax"?: number | null | undefined;
    "ymin"?: number | null | undefined;
    "ymax"?: number | null | undefined;
    "zmin"?: number | null | undefined;
    "zmax"?: number | null | undefined;
    "outlabelfile": string;
    "debug": boolean;
    "umask"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "bblabel": bblabel_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "bblabel": bblabel_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `bblabel(...)`.
 *
 * @interface
 */
interface BblabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with the label points within the specified bounding box.
     */
    output_file: OutputPathType;
}


function bblabel_params(
    labelfile: InputPathType,
    outlabelfile: string,
    xmin: number | null = null,
    xmax: number | null = null,
    ymin: number | null = null,
    ymax: number | null = null,
    zmin: number | null = null,
    zmax: number | null = null,
    debug: boolean = false,
    umask: string | null = null,
): BblabelParameters {
    /**
     * Build parameters.
    
     * @param labelfile Input label file.
     * @param outlabelfile Output label file.
     * @param xmin Minimum x-coordinate for bounding box.
     * @param xmax Maximum x-coordinate for bounding box.
     * @param ymin Minimum y-coordinate for bounding box.
     * @param ymax Maximum y-coordinate for bounding box.
     * @param zmin Minimum z-coordinate for bounding box.
     * @param zmax Maximum z-coordinate for bounding box.
     * @param debug Enable debug mode.
     * @param umask Set Unix file permission mask.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "bblabel" as const,
        "labelfile": labelfile,
        "outlabelfile": outlabelfile,
        "debug": debug,
    };
    if (xmin !== null) {
        params["xmin"] = xmin;
    }
    if (xmax !== null) {
        params["xmax"] = xmax;
    }
    if (ymin !== null) {
        params["ymin"] = ymin;
    }
    if (ymax !== null) {
        params["ymax"] = ymax;
    }
    if (zmin !== null) {
        params["zmin"] = zmin;
    }
    if (zmax !== null) {
        params["zmax"] = zmax;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    return params;
}


function bblabel_cargs(
    params: BblabelParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("bblabel");
    cargs.push(
        "--l",
        execution.inputFile((params["labelfile"] ?? null))
    );
    if ((params["xmin"] ?? null) !== null) {
        cargs.push(
            "--xmin",
            String((params["xmin"] ?? null))
        );
    }
    if ((params["xmax"] ?? null) !== null) {
        cargs.push(
            "--xmax",
            String((params["xmax"] ?? null))
        );
    }
    if ((params["ymin"] ?? null) !== null) {
        cargs.push(
            "--ymin",
            String((params["ymin"] ?? null))
        );
    }
    if ((params["ymax"] ?? null) !== null) {
        cargs.push(
            "--ymax",
            String((params["ymax"] ?? null))
        );
    }
    if ((params["zmin"] ?? null) !== null) {
        cargs.push(
            "--zmin",
            String((params["zmin"] ?? null))
        );
    }
    if ((params["zmax"] ?? null) !== null) {
        cargs.push(
            "--zmax",
            String((params["zmax"] ?? null))
        );
    }
    cargs.push(
        "--o",
        (params["outlabelfile"] ?? null)
    );
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "--umask",
            (params["umask"] ?? null)
        );
    }
    return cargs;
}


function bblabel_outputs(
    params: BblabelParameters,
    execution: Execution,
): BblabelOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BblabelOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["outlabelfile"] ?? null)].join('')),
    };
    return ret;
}


function bblabel_execute(
    params: BblabelParameters,
    execution: Execution,
): BblabelOutputs {
    /**
     * Applies a bounding box to a label, copying only the label points within the specified box to the output.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BblabelOutputs`).
     */
    params = execution.params(params)
    const cargs = bblabel_cargs(params, execution)
    const ret = bblabel_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function bblabel(
    labelfile: InputPathType,
    outlabelfile: string,
    xmin: number | null = null,
    xmax: number | null = null,
    ymin: number | null = null,
    ymax: number | null = null,
    zmin: number | null = null,
    zmax: number | null = null,
    debug: boolean = false,
    umask: string | null = null,
    runner: Runner | null = null,
): BblabelOutputs {
    /**
     * Applies a bounding box to a label, copying only the label points within the specified box to the output.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param labelfile Input label file.
     * @param outlabelfile Output label file.
     * @param xmin Minimum x-coordinate for bounding box.
     * @param xmax Maximum x-coordinate for bounding box.
     * @param ymin Minimum y-coordinate for bounding box.
     * @param ymax Maximum y-coordinate for bounding box.
     * @param zmin Minimum z-coordinate for bounding box.
     * @param zmax Maximum z-coordinate for bounding box.
     * @param debug Enable debug mode.
     * @param umask Set Unix file permission mask.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BblabelOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BBLABEL_METADATA);
    const params = bblabel_params(labelfile, outlabelfile, xmin, xmax, ymin, ymax, zmin, zmax, debug, umask)
    return bblabel_execute(params, execution);
}


export {
      BBLABEL_METADATA,
      BblabelOutputs,
      BblabelParameters,
      bblabel,
      bblabel_params,
};
