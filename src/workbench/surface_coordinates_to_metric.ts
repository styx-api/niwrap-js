// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_COORDINATES_TO_METRIC_METADATA: Metadata = {
    id: "27963325f3dc1a7ba8e6ab2777a568e8f36cde2e.boutiques",
    name: "surface-coordinates-to-metric",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceCoordinatesToMetricParameters {
    "__STYXTYPE__": "surface-coordinates-to-metric";
    "surface": InputPathType;
    "metric_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-coordinates-to-metric": surface_coordinates_to_metric_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-coordinates-to-metric": surface_coordinates_to_metric_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_coordinates_to_metric(...)`.
 *
 * @interface
 */
interface SurfaceCoordinatesToMetricOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


function surface_coordinates_to_metric_params(
    surface: InputPathType,
    metric_out: string,
): SurfaceCoordinatesToMetricParameters {
    /**
     * Build parameters.
    
     * @param surface the surface to use the coordinates of
     * @param metric_out the output metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-coordinates-to-metric" as const,
        "surface": surface,
        "metric_out": metric_out,
    };
    return params;
}


function surface_coordinates_to_metric_cargs(
    params: SurfaceCoordinatesToMetricParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-coordinates-to-metric");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    return cargs;
}


function surface_coordinates_to_metric_outputs(
    params: SurfaceCoordinatesToMetricParameters,
    execution: Execution,
): SurfaceCoordinatesToMetricOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceCoordinatesToMetricOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


function surface_coordinates_to_metric_execute(
    params: SurfaceCoordinatesToMetricParameters,
    execution: Execution,
): SurfaceCoordinatesToMetricOutputs {
    /**
     * Make metric file of surface coordinates.
     * 
     * Puts the coordinates of the surface into a 3-map metric file, as x, y, z.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceCoordinatesToMetricOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_coordinates_to_metric_cargs(params, execution)
    const ret = surface_coordinates_to_metric_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_coordinates_to_metric(
    surface: InputPathType,
    metric_out: string,
    runner: Runner | null = null,
): SurfaceCoordinatesToMetricOutputs {
    /**
     * Make metric file of surface coordinates.
     * 
     * Puts the coordinates of the surface into a 3-map metric file, as x, y, z.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface the surface to use the coordinates of
     * @param metric_out the output metric
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceCoordinatesToMetricOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_COORDINATES_TO_METRIC_METADATA);
    const params = surface_coordinates_to_metric_params(surface, metric_out)
    return surface_coordinates_to_metric_execute(params, execution);
}


export {
      SURFACE_COORDINATES_TO_METRIC_METADATA,
      SurfaceCoordinatesToMetricOutputs,
      SurfaceCoordinatesToMetricParameters,
      surface_coordinates_to_metric,
      surface_coordinates_to_metric_params,
};
