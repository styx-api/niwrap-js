// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_WARP_DRIVE_METADATA: Metadata = {
    id: "33208eefe90260d6cab1186f27531c4689ab5559.boutiques",
    name: "3dWarpDrive",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dWarpDriveParameters {
    "@type": "afni.3dWarpDrive";
    "dataset": InputPathType;
    "base_dataset": InputPathType;
    "prefix": string;
    "shift_only": boolean;
    "shift_rotate": boolean;
    "shift_rotate_scale": boolean;
    "affine_general": boolean;
    "bilinear_general": boolean;
    "linear": boolean;
    "cubic": boolean;
    "NN": boolean;
    "quintic": boolean;
    "input_dataset"?: InputPathType | null | undefined;
    "verbosity_flag": boolean;
    "summary_file"?: string | null | undefined;
    "max_iterations"?: number | null | undefined;
    "delta"?: number | null | undefined;
    "weight"?: string | null | undefined;
    "convergence_thresh"?: number | null | undefined;
    "twopass": boolean;
    "final_mode"?: string | null | undefined;
    "parfix"?: Array<string> | null | undefined;
    "oned_file"?: InputPathType | null | undefined;
    "float_format": boolean;
    "coarserot_init": boolean;
    "oned_matrix_save"?: InputPathType | null | undefined;
    "sdu_order": boolean;
    "sud_order": boolean;
    "dsu_order": boolean;
    "dus_order": boolean;
    "usd_order": boolean;
    "uds_order": boolean;
    "supper_s_matrix": boolean;
    "slower_s_matrix": boolean;
    "ashift": boolean;
    "bshift": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dWarpDrive": v_3d_warp_drive_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dWarpDrive": v_3d_warp_drive_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_warp_drive(...)`.
 *
 * @interface
 */
interface V3dWarpDriveOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Warped dataset output
     */
    output_dataset: OutputPathType;
    /**
     * Summary of calculations
     */
    output_summary: OutputPathType | null;
    /**
     * File with warping parameters
     */
    oned_output_file: OutputPathType | null;
    /**
     * File with transformation matrices
     */
    matrix_output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dataset Input dataset
 * @param base_dataset Load dataset as the base to which the input dataset will be matched. This is a mandatory option.
 * @param prefix Sets the prefix of the output dataset. If 'NULL', no output dataset is written.
 * @param shift_only 3 parameters (shifts)
 * @param shift_rotate 6 parameters (shifts + angles)
 * @param shift_rotate_scale 9 parameters (shifts + angles + scale factors)
 * @param affine_general 12 parameters (3 shifts + 3x3 matrix)
 * @param bilinear_general 39 parameters (3 + 3x3 + 3x3x3). Not implemented and will never be.
 * @param linear Linear interpolation method
 * @param cubic Cubic interpolation method
 * @param nn Nearest neighbor interpolation method [default]
 * @param quintic Quintic interpolation method
 * @param input_dataset Specify the input dataset anywhere in the command line option list.
 * @param verbosity_flag Print out lots of information along the way.
 * @param summary_file Save summary of calculations into text file. If value is '-', summary goes to stdout.
 * @param max_iterations Allow up to 'm' iterations for convergence.
 * @param delta Distance, in voxel size, used to compute image derivatives using finite differences. [Default=1.0]
 * @param weight Set the weighting applied to each voxel proportional to the brick specified here. [Default=computed by program from base]
 * @param convergence_thresh Set the convergence parameter to be RMS 't' voxels movement between iterations. [Default=0.03]
 * @param twopass Do the parameter estimation in two passes, coarse-but-fast first, then fine-but-slow second.
 * @param final_mode Set the final warp to be interpolated using 'mode'.
 * @param parfix Fix the n'th parameter of the warp model to the value 'v'. More than one -parfix option can be used.
 * @param oned_file Write out the warping parameters to this file.
 * @param float_format Write output dataset in float format, even if input dataset is short or byte.
 * @param coarserot_init Initialize shift+rotation parameters by a brute force coarse search.
 * @param oned_matrix_save Save base-to-input transformation matrices in specified file. If the file does not end in '.1D', the program will append '.aff12.1D'.
 * @param sdu_order Set the order of the matrix multiplication for the affine transformations (S=triangular shear, D=diagonal scaling matrix, U=rotation matrix).
 * @param sud_order Set the order of the matrix multiplication for the affine transformations (S=triangular shear, U=rotation matrix, D=diagonal scaling matrix).
 * @param dsu_order Set the order of the matrix multiplication for the affine transformations (D=diagonal scaling matrix, S=triangular shear, U=rotation matrix).
 * @param dus_order Set the order of the matrix multiplication for the affine transformations (D=diagonal scaling matrix, U=rotation matrix, S=triangular shear).
 * @param usd_order Set the order of the matrix multiplication for the affine transformations (U=rotation matrix, S=triangular shear, D=diagonal scaling matrix).
 * @param uds_order Set the order of the matrix multiplication for the affine transformations (U=rotation matrix, D=diagonal scaling matrix, S=triangular shear).
 * @param supper_s_matrix Set the S matrix to be upper triangular.
 * @param slower_s_matrix Set the S matrix to be lower triangular.
 * @param ashift Apply the shift parameters after the matrix transformation.
 * @param bshift Apply the shift parameters before the matrix transformation.
 *
 * @returns Parameter dictionary
 */
function v_3d_warp_drive_params(
    dataset: InputPathType,
    base_dataset: InputPathType,
    prefix: string,
    shift_only: boolean = false,
    shift_rotate: boolean = false,
    shift_rotate_scale: boolean = false,
    affine_general: boolean = false,
    bilinear_general: boolean = false,
    linear: boolean = false,
    cubic: boolean = false,
    nn: boolean = false,
    quintic: boolean = false,
    input_dataset: InputPathType | null = null,
    verbosity_flag: boolean = false,
    summary_file: string | null = null,
    max_iterations: number | null = null,
    delta: number | null = null,
    weight: string | null = null,
    convergence_thresh: number | null = null,
    twopass: boolean = false,
    final_mode: string | null = null,
    parfix: Array<string> | null = null,
    oned_file: InputPathType | null = null,
    float_format: boolean = false,
    coarserot_init: boolean = false,
    oned_matrix_save: InputPathType | null = null,
    sdu_order: boolean = false,
    sud_order: boolean = false,
    dsu_order: boolean = false,
    dus_order: boolean = false,
    usd_order: boolean = false,
    uds_order: boolean = false,
    supper_s_matrix: boolean = false,
    slower_s_matrix: boolean = false,
    ashift: boolean = false,
    bshift: boolean = false,
): V3dWarpDriveParameters {
    const params = {
        "@type": "afni.3dWarpDrive" as const,
        "dataset": dataset,
        "base_dataset": base_dataset,
        "prefix": prefix,
        "shift_only": shift_only,
        "shift_rotate": shift_rotate,
        "shift_rotate_scale": shift_rotate_scale,
        "affine_general": affine_general,
        "bilinear_general": bilinear_general,
        "linear": linear,
        "cubic": cubic,
        "NN": nn,
        "quintic": quintic,
        "verbosity_flag": verbosity_flag,
        "twopass": twopass,
        "float_format": float_format,
        "coarserot_init": coarserot_init,
        "sdu_order": sdu_order,
        "sud_order": sud_order,
        "dsu_order": dsu_order,
        "dus_order": dus_order,
        "usd_order": usd_order,
        "uds_order": uds_order,
        "supper_s_matrix": supper_s_matrix,
        "slower_s_matrix": slower_s_matrix,
        "ashift": ashift,
        "bshift": bshift,
    };
    if (input_dataset !== null) {
        params["input_dataset"] = input_dataset;
    }
    if (summary_file !== null) {
        params["summary_file"] = summary_file;
    }
    if (max_iterations !== null) {
        params["max_iterations"] = max_iterations;
    }
    if (delta !== null) {
        params["delta"] = delta;
    }
    if (weight !== null) {
        params["weight"] = weight;
    }
    if (convergence_thresh !== null) {
        params["convergence_thresh"] = convergence_thresh;
    }
    if (final_mode !== null) {
        params["final_mode"] = final_mode;
    }
    if (parfix !== null) {
        params["parfix"] = parfix;
    }
    if (oned_file !== null) {
        params["oned_file"] = oned_file;
    }
    if (oned_matrix_save !== null) {
        params["oned_matrix_save"] = oned_matrix_save;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_warp_drive_cargs(
    params: V3dWarpDriveParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dWarpDrive");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    cargs.push(
        "-base",
        execution.inputFile((params["base_dataset"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["shift_only"] ?? null)) {
        cargs.push("-shift_only");
    }
    if ((params["shift_rotate"] ?? null)) {
        cargs.push("-shift_rotate");
    }
    if ((params["shift_rotate_scale"] ?? null)) {
        cargs.push("-shift_rotate_scale");
    }
    if ((params["affine_general"] ?? null)) {
        cargs.push("-affine_general");
    }
    if ((params["bilinear_general"] ?? null)) {
        cargs.push("-bilinear_general");
    }
    if ((params["linear"] ?? null)) {
        cargs.push("-linear");
    }
    if ((params["cubic"] ?? null)) {
        cargs.push("-cubic");
    }
    if ((params["NN"] ?? null)) {
        cargs.push("-NN");
    }
    if ((params["quintic"] ?? null)) {
        cargs.push("-quintic");
    }
    if ((params["input_dataset"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["input_dataset"] ?? null))
        );
    }
    if ((params["verbosity_flag"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["summary_file"] ?? null) !== null) {
        cargs.push(
            "-summ",
            (params["summary_file"] ?? null)
        );
    }
    if ((params["max_iterations"] ?? null) !== null) {
        cargs.push(
            "-maxite",
            String((params["max_iterations"] ?? null))
        );
    }
    if ((params["delta"] ?? null) !== null) {
        cargs.push(
            "-delta",
            String((params["delta"] ?? null))
        );
    }
    if ((params["weight"] ?? null) !== null) {
        cargs.push(
            "-weight",
            (params["weight"] ?? null)
        );
    }
    if ((params["convergence_thresh"] ?? null) !== null) {
        cargs.push(
            "-thresh",
            String((params["convergence_thresh"] ?? null))
        );
    }
    if ((params["twopass"] ?? null)) {
        cargs.push("-twopass");
    }
    if ((params["final_mode"] ?? null) !== null) {
        cargs.push(
            "-final",
            (params["final_mode"] ?? null)
        );
    }
    if ((params["parfix"] ?? null) !== null) {
        cargs.push(
            "-parfix",
            ...(params["parfix"] ?? null)
        );
    }
    if ((params["oned_file"] ?? null) !== null) {
        cargs.push(
            "-1Dfile",
            execution.inputFile((params["oned_file"] ?? null))
        );
    }
    if ((params["float_format"] ?? null)) {
        cargs.push("-float");
    }
    if ((params["coarserot_init"] ?? null)) {
        cargs.push("-coarserot");
    }
    if ((params["oned_matrix_save"] ?? null) !== null) {
        cargs.push(
            "-1Dmatrix_save",
            execution.inputFile((params["oned_matrix_save"] ?? null))
        );
    }
    if ((params["sdu_order"] ?? null)) {
        cargs.push("-SDU");
    }
    if ((params["sud_order"] ?? null)) {
        cargs.push("-SUD");
    }
    if ((params["dsu_order"] ?? null)) {
        cargs.push("-DSU");
    }
    if ((params["dus_order"] ?? null)) {
        cargs.push("-DUS");
    }
    if ((params["usd_order"] ?? null)) {
        cargs.push("-USD");
    }
    if ((params["uds_order"] ?? null)) {
        cargs.push("-UDS");
    }
    if ((params["supper_s_matrix"] ?? null)) {
        cargs.push("-Supper");
    }
    if ((params["slower_s_matrix"] ?? null)) {
        cargs.push("-Slower");
    }
    if ((params["ashift"] ?? null)) {
        cargs.push("-ashift");
    }
    if ((params["bshift"] ?? null)) {
        cargs.push("-bshift");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_warp_drive_outputs(
    params: V3dWarpDriveParameters,
    execution: Execution,
): V3dWarpDriveOutputs {
    const ret: V3dWarpDriveOutputs = {
        root: execution.outputFile("."),
        output_dataset: execution.outputFile([(params["prefix"] ?? null), "+orig"].join('')),
        output_summary: ((params["summary_file"] ?? null) !== null) ? execution.outputFile([(params["summary_file"] ?? null)].join('')) : null,
        oned_output_file: ((params["oned_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["oned_file"] ?? null))].join('')) : null,
        matrix_output_file: ((params["oned_matrix_save"] ?? null) !== null) ? execution.outputFile([path.basename((params["oned_matrix_save"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * 3dWarpDrive
 *
 * Warp a dataset to match another one (the base) using an affine transformation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dWarpDriveOutputs`).
 */
function v_3d_warp_drive_execute(
    params: V3dWarpDriveParameters,
    runner: Runner | null = null,
): V3dWarpDriveOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_WARP_DRIVE_METADATA);
    params = execution.params(params)
    const cargs = v_3d_warp_drive_cargs(params, execution)
    const ret = v_3d_warp_drive_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dWarpDrive
 *
 * Warp a dataset to match another one (the base) using an affine transformation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input dataset
 * @param base_dataset Load dataset as the base to which the input dataset will be matched. This is a mandatory option.
 * @param prefix Sets the prefix of the output dataset. If 'NULL', no output dataset is written.
 * @param shift_only 3 parameters (shifts)
 * @param shift_rotate 6 parameters (shifts + angles)
 * @param shift_rotate_scale 9 parameters (shifts + angles + scale factors)
 * @param affine_general 12 parameters (3 shifts + 3x3 matrix)
 * @param bilinear_general 39 parameters (3 + 3x3 + 3x3x3). Not implemented and will never be.
 * @param linear Linear interpolation method
 * @param cubic Cubic interpolation method
 * @param nn Nearest neighbor interpolation method [default]
 * @param quintic Quintic interpolation method
 * @param input_dataset Specify the input dataset anywhere in the command line option list.
 * @param verbosity_flag Print out lots of information along the way.
 * @param summary_file Save summary of calculations into text file. If value is '-', summary goes to stdout.
 * @param max_iterations Allow up to 'm' iterations for convergence.
 * @param delta Distance, in voxel size, used to compute image derivatives using finite differences. [Default=1.0]
 * @param weight Set the weighting applied to each voxel proportional to the brick specified here. [Default=computed by program from base]
 * @param convergence_thresh Set the convergence parameter to be RMS 't' voxels movement between iterations. [Default=0.03]
 * @param twopass Do the parameter estimation in two passes, coarse-but-fast first, then fine-but-slow second.
 * @param final_mode Set the final warp to be interpolated using 'mode'.
 * @param parfix Fix the n'th parameter of the warp model to the value 'v'. More than one -parfix option can be used.
 * @param oned_file Write out the warping parameters to this file.
 * @param float_format Write output dataset in float format, even if input dataset is short or byte.
 * @param coarserot_init Initialize shift+rotation parameters by a brute force coarse search.
 * @param oned_matrix_save Save base-to-input transformation matrices in specified file. If the file does not end in '.1D', the program will append '.aff12.1D'.
 * @param sdu_order Set the order of the matrix multiplication for the affine transformations (S=triangular shear, D=diagonal scaling matrix, U=rotation matrix).
 * @param sud_order Set the order of the matrix multiplication for the affine transformations (S=triangular shear, U=rotation matrix, D=diagonal scaling matrix).
 * @param dsu_order Set the order of the matrix multiplication for the affine transformations (D=diagonal scaling matrix, S=triangular shear, U=rotation matrix).
 * @param dus_order Set the order of the matrix multiplication for the affine transformations (D=diagonal scaling matrix, U=rotation matrix, S=triangular shear).
 * @param usd_order Set the order of the matrix multiplication for the affine transformations (U=rotation matrix, S=triangular shear, D=diagonal scaling matrix).
 * @param uds_order Set the order of the matrix multiplication for the affine transformations (U=rotation matrix, D=diagonal scaling matrix, S=triangular shear).
 * @param supper_s_matrix Set the S matrix to be upper triangular.
 * @param slower_s_matrix Set the S matrix to be lower triangular.
 * @param ashift Apply the shift parameters after the matrix transformation.
 * @param bshift Apply the shift parameters before the matrix transformation.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dWarpDriveOutputs`).
 */
function v_3d_warp_drive(
    dataset: InputPathType,
    base_dataset: InputPathType,
    prefix: string,
    shift_only: boolean = false,
    shift_rotate: boolean = false,
    shift_rotate_scale: boolean = false,
    affine_general: boolean = false,
    bilinear_general: boolean = false,
    linear: boolean = false,
    cubic: boolean = false,
    nn: boolean = false,
    quintic: boolean = false,
    input_dataset: InputPathType | null = null,
    verbosity_flag: boolean = false,
    summary_file: string | null = null,
    max_iterations: number | null = null,
    delta: number | null = null,
    weight: string | null = null,
    convergence_thresh: number | null = null,
    twopass: boolean = false,
    final_mode: string | null = null,
    parfix: Array<string> | null = null,
    oned_file: InputPathType | null = null,
    float_format: boolean = false,
    coarserot_init: boolean = false,
    oned_matrix_save: InputPathType | null = null,
    sdu_order: boolean = false,
    sud_order: boolean = false,
    dsu_order: boolean = false,
    dus_order: boolean = false,
    usd_order: boolean = false,
    uds_order: boolean = false,
    supper_s_matrix: boolean = false,
    slower_s_matrix: boolean = false,
    ashift: boolean = false,
    bshift: boolean = false,
    runner: Runner | null = null,
): V3dWarpDriveOutputs {
    const params = v_3d_warp_drive_params(dataset, base_dataset, prefix, shift_only, shift_rotate, shift_rotate_scale, affine_general, bilinear_general, linear, cubic, nn, quintic, input_dataset, verbosity_flag, summary_file, max_iterations, delta, weight, convergence_thresh, twopass, final_mode, parfix, oned_file, float_format, coarserot_init, oned_matrix_save, sdu_order, sud_order, dsu_order, dus_order, usd_order, uds_order, supper_s_matrix, slower_s_matrix, ashift, bshift)
    return v_3d_warp_drive_execute(params, runner);
}


export {
      V3dWarpDriveOutputs,
      V3dWarpDriveParameters,
      V_3D_WARP_DRIVE_METADATA,
      v_3d_warp_drive,
      v_3d_warp_drive_execute,
      v_3d_warp_drive_params,
};
