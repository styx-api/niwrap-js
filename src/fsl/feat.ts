// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FEAT_METADATA: Metadata = {
    id: "dbbaab6a8f5e02741899d759348059945801df59.boutiques",
    name: "feat",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FeatParameters {
    "__STYXTYPE__": "feat";
    "design_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "feat": feat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "feat": feat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `feat(...)`.
 *
 * @interface
 */
interface FeatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output directory containing all results from FEAT
     */
    output_dir: OutputPathType;
}


function feat_params(
    design_file: InputPathType,
): FeatParameters {
    /**
     * Build parameters.
    
     * @param design_file FEAT design file (e.g. design.fsf)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "feat" as const,
        "design_file": design_file,
    };
    return params;
}


function feat_cargs(
    params: FeatParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("feat");
    cargs.push(execution.inputFile((params["design_file"] ?? null)));
    return cargs;
}


function feat_outputs(
    params: FeatParameters,
    execution: Execution,
): FeatOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FeatOutputs = {
        root: execution.outputFile("."),
        output_dir: execution.outputFile(["design.feat"].join('')),
    };
    return ret;
}


function feat_execute(
    params: FeatParameters,
    execution: Execution,
): FeatOutputs {
    /**
     * fMRI Expert Analysis Tool.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FeatOutputs`).
     */
    params = execution.params(params)
    const cargs = feat_cargs(params, execution)
    const ret = feat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function feat(
    design_file: InputPathType,
    runner: Runner | null = null,
): FeatOutputs {
    /**
     * fMRI Expert Analysis Tool.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param design_file FEAT design file (e.g. design.fsf)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FeatOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FEAT_METADATA);
    const params = feat_params(design_file)
    return feat_execute(params, execution);
}


export {
      FEAT_METADATA,
      FeatOutputs,
      FeatParameters,
      feat,
      feat_params,
};
