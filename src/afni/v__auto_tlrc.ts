// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__AUTO_TLRC_METADATA: Metadata = {
    id: "9ec14a3c3a060032a8913afb5801da9608c8ae87.boutiques",
    name: "@auto_tlrc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAutoTlrcParameters {
    "@type": "afni.@auto_tlrc";
    "base_template": InputPathType;
    "input_anat": InputPathType;
    "no_ss": boolean;
    "warp_orig_vol": boolean;
    "dxyz"?: number | null | undefined;
    "dx"?: number | null | undefined;
    "dy"?: number | null | undefined;
    "dz"?: number | null | undefined;
    "pad_base"?: number | null | undefined;
    "keep_tmp": boolean;
    "clean": boolean;
    "xform"?: string | null | undefined;
    "no_avoid_eyes": boolean;
    "ncr": boolean;
    "onepass": boolean;
    "twopass": boolean;
    "maxite"?: number | null | undefined;
    "not_OK_maxite": boolean;
    "inweight": boolean;
    "rigid_equiv": boolean;
    "init_xform"?: string | null | undefined;
    "no_pre": boolean;
    "out_space"?: string | null | undefined;
    "3dAllineate": boolean;
    "3dAlcost"?: string | null | undefined;
    "overwrite": boolean;
    "apar": InputPathType;
    "input_dataset": InputPathType;
    "pad_input"?: number | null | undefined;
    "onewarp": boolean;
    "twowarp": boolean;
    "rmode"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "suffix"?: string | null | undefined;
    "keep_view": boolean;
    "base_copy"?: string | null | undefined;
    "base_list": boolean;
    "use_gz": boolean;
    "verb": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@auto_tlrc": v__auto_tlrc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@auto_tlrc": v__auto_tlrc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__auto_tlrc(...)`.
 *
 * @interface
 */
interface VAutoTlrcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Transformed anatomical volume dataset in TLRC space.
     */
    output_dataset: OutputPathType | null;
    /**
     * Transform used to align the anatomical dataset to the template.
     */
    transform_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param base_template Reference anatomical volume. Usually this volume is in some standard space like TLRC or MNI space.
 * @param input_anat Original anatomical volume (+orig). The skull is removed by this script unless instructed otherwise (-no_ss).
 * @param apar An anatomical dataset in TLRC space created using Usage 1 of @auto_tlrc.
 * @param input_dataset Dataset (typically EPI time series or statistical dataset) to transform to TLRC space per the transform in TLRC_parent
 * @param no_ss Do not strip skull of input data set because the skull has already been removed or because the template still has the skull.
 * @param warp_orig_vol Produce a TLRC version of the input volume, rather than a TLRC version of the skull-stripped input.
 * @param dxyz Cubic voxel size of output DSET in TLRC space. Default is the resolution of the template.
 * @param dx Size of voxel in the x direction (Right-Left). Default is 1mm.
 * @param dy Size of voxel in the y direction (Anterior-Posterior). Default is 1mm.
 * @param dz Size of voxel in the z direction (Inferior-Superior). Default is 1mm.
 * @param pad_base Pad the base dataset by MM mm in each direction. Default is 15 mm.
 * @param keep_tmp Keep temporary files.
 * @param clean Clean all temporary files, likely left from -keep_tmp option then exit.
 * @param xform Transform to use for warping: Choose from affine_general or shift_rotate_scale. Default is affine_general.
 * @param no_avoid_eyes An option that gets passed to 3dSkullStrip. Use it when parts of the frontal lobes get clipped.
 * @param ncr Do not use -coarserot option for 3dWarpDrive, which is a default.
 * @param onepass Turns off -twopass option for 3dWarpDrive. This will speed up the registration but might fail if the datasets are far apart.
 * @param twopass Opposite of -onepass, default.
 * @param maxite Maximum number of iterations for 3dWarpDrive. Default is 50 for first pass and then doubled to 100 in second pass.
 * @param not_ok_maxite Continue running even if maximum iterations is reached.
 * @param inweight Apply -weight INPUT (in 3dWarpDrive). By default, 3dWarpDrive uses the BASE dataset to weight the alignment cost.
 * @param rigid_equiv Output the rigid-body version of the alignment. Resultant volume is NOT in TLRC space.
 * @param init_xform Apply affine transform in XFORM0.1D before beginning registration and then include XFORM0.1D in the final transform.
 * @param no_pre Delete temporary dataset created by -init_xform
 * @param out_space Set the output to a particular space.
 * @param v_3d_allineate Use 3dAllineate with the lpa+ZZ cost function instead of 3dWarpDrive.
 * @param v_3d_alcost Use another cost function like nmi for 3dAllineate.
 * @param overwrite Overwrite existing output.
 * @param pad_input Pad the input dataset by MM mm in each direction.
 * @param onewarp Create follower data with one interpolation step, instead of two. This option reduces blurring of the output data.
 * @param twowarp Create follower data with two interpolations step, instead of one. This option is for backward compatibility.
 * @param rmode Resampling mode. Choose from: linear, cubic, NN or quintic. Default for 'Usage 1' is cubic.
 * @param prefix Name of the output dataset.
 * @param suffix Name the output dataset by appending this suffix to the prefix of the input data.
 * @param keep_view Do not mark output dataset as +tlrc.
 * @param base_copy Copy base (template) dataset into COPY_PREFIX.
 * @param base_list List the full path of the base dataset.
 * @param use_gz When using '-suffix ..', behave as if you had provided a prefix with '*.gz' at the end.
 * @param verb Increase verbosity of the script.
 *
 * @returns Parameter dictionary
 */
function v__auto_tlrc_params(
    base_template: InputPathType,
    input_anat: InputPathType,
    apar: InputPathType,
    input_dataset: InputPathType,
    no_ss: boolean = false,
    warp_orig_vol: boolean = false,
    dxyz: number | null = null,
    dx: number | null = null,
    dy: number | null = null,
    dz: number | null = null,
    pad_base: number | null = null,
    keep_tmp: boolean = false,
    clean: boolean = false,
    xform: string | null = null,
    no_avoid_eyes: boolean = false,
    ncr: boolean = false,
    onepass: boolean = false,
    twopass: boolean = false,
    maxite: number | null = null,
    not_ok_maxite: boolean = false,
    inweight: boolean = false,
    rigid_equiv: boolean = false,
    init_xform: string | null = null,
    no_pre: boolean = false,
    out_space: string | null = null,
    v_3d_allineate: boolean = false,
    v_3d_alcost: string | null = null,
    overwrite: boolean = false,
    pad_input: number | null = null,
    onewarp: boolean = false,
    twowarp: boolean = false,
    rmode: string | null = null,
    prefix: string | null = null,
    suffix: string | null = null,
    keep_view: boolean = false,
    base_copy: string | null = null,
    base_list: boolean = false,
    use_gz: boolean = false,
    verb: boolean = false,
): VAutoTlrcParameters {
    const params = {
        "@type": "afni.@auto_tlrc" as const,
        "base_template": base_template,
        "input_anat": input_anat,
        "no_ss": no_ss,
        "warp_orig_vol": warp_orig_vol,
        "keep_tmp": keep_tmp,
        "clean": clean,
        "no_avoid_eyes": no_avoid_eyes,
        "ncr": ncr,
        "onepass": onepass,
        "twopass": twopass,
        "not_OK_maxite": not_ok_maxite,
        "inweight": inweight,
        "rigid_equiv": rigid_equiv,
        "no_pre": no_pre,
        "3dAllineate": v_3d_allineate,
        "overwrite": overwrite,
        "apar": apar,
        "input_dataset": input_dataset,
        "onewarp": onewarp,
        "twowarp": twowarp,
        "keep_view": keep_view,
        "base_list": base_list,
        "use_gz": use_gz,
        "verb": verb,
    };
    if (dxyz !== null) {
        params["dxyz"] = dxyz;
    }
    if (dx !== null) {
        params["dx"] = dx;
    }
    if (dy !== null) {
        params["dy"] = dy;
    }
    if (dz !== null) {
        params["dz"] = dz;
    }
    if (pad_base !== null) {
        params["pad_base"] = pad_base;
    }
    if (xform !== null) {
        params["xform"] = xform;
    }
    if (maxite !== null) {
        params["maxite"] = maxite;
    }
    if (init_xform !== null) {
        params["init_xform"] = init_xform;
    }
    if (out_space !== null) {
        params["out_space"] = out_space;
    }
    if (v_3d_alcost !== null) {
        params["3dAlcost"] = v_3d_alcost;
    }
    if (pad_input !== null) {
        params["pad_input"] = pad_input;
    }
    if (rmode !== null) {
        params["rmode"] = rmode;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    if (base_copy !== null) {
        params["base_copy"] = base_copy;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__auto_tlrc_cargs(
    params: VAutoTlrcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@auto_tlrc");
    cargs.push(
        "-base",
        execution.inputFile((params["base_template"] ?? null))
    );
    cargs.push(
        "-input",
        execution.inputFile((params["input_anat"] ?? null))
    );
    if ((params["no_ss"] ?? null)) {
        cargs.push("-no_ss");
    }
    if ((params["warp_orig_vol"] ?? null)) {
        cargs.push("-warp_orig_vol");
    }
    if ((params["dxyz"] ?? null) !== null) {
        cargs.push(
            "-dxyz",
            String((params["dxyz"] ?? null))
        );
    }
    if ((params["dx"] ?? null) !== null) {
        cargs.push(
            "-dx",
            String((params["dx"] ?? null))
        );
    }
    if ((params["dy"] ?? null) !== null) {
        cargs.push(
            "-dy",
            String((params["dy"] ?? null))
        );
    }
    if ((params["dz"] ?? null) !== null) {
        cargs.push(
            "-dz",
            String((params["dz"] ?? null))
        );
    }
    if ((params["pad_base"] ?? null) !== null) {
        cargs.push(
            "-pad_base",
            String((params["pad_base"] ?? null))
        );
    }
    if ((params["keep_tmp"] ?? null)) {
        cargs.push("-keep_tmp");
    }
    if ((params["clean"] ?? null)) {
        cargs.push("-clean");
    }
    if ((params["xform"] ?? null) !== null) {
        cargs.push(
            "-xform",
            (params["xform"] ?? null)
        );
    }
    if ((params["no_avoid_eyes"] ?? null)) {
        cargs.push("-no_avoid_eyes");
    }
    if ((params["ncr"] ?? null)) {
        cargs.push("-ncr");
    }
    if ((params["onepass"] ?? null)) {
        cargs.push("-onepass");
    }
    if ((params["twopass"] ?? null)) {
        cargs.push("-twopass");
    }
    if ((params["maxite"] ?? null) !== null) {
        cargs.push(
            "-maxite",
            String((params["maxite"] ?? null))
        );
    }
    if ((params["not_OK_maxite"] ?? null)) {
        cargs.push("-not_OK_maxite");
    }
    if ((params["inweight"] ?? null)) {
        cargs.push("-inweight");
    }
    if ((params["rigid_equiv"] ?? null)) {
        cargs.push("-rigid_equiv");
    }
    if ((params["init_xform"] ?? null) !== null) {
        cargs.push(
            "-init_xform",
            (params["init_xform"] ?? null)
        );
    }
    if ((params["no_pre"] ?? null)) {
        cargs.push("-no_pre");
    }
    if ((params["out_space"] ?? null) !== null) {
        cargs.push(
            "-out_space",
            (params["out_space"] ?? null)
        );
    }
    if ((params["3dAllineate"] ?? null)) {
        cargs.push("-3dAllineate");
    }
    if ((params["3dAlcost"] ?? null) !== null) {
        cargs.push(
            "-3dAlcost",
            (params["3dAlcost"] ?? null)
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    cargs.push(
        "-apar",
        execution.inputFile((params["apar"] ?? null))
    );
    cargs.push(
        "-input",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    if ((params["pad_input"] ?? null) !== null) {
        cargs.push(
            "-pad_input",
            String((params["pad_input"] ?? null))
        );
    }
    if ((params["onewarp"] ?? null)) {
        cargs.push("-onewarp");
    }
    if ((params["twowarp"] ?? null)) {
        cargs.push("-twowarp");
    }
    if ((params["rmode"] ?? null) !== null) {
        cargs.push(
            "-rmode",
            (params["rmode"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-suffix",
            (params["suffix"] ?? null)
        );
    }
    if ((params["keep_view"] ?? null)) {
        cargs.push("-keep_view");
    }
    if ((params["base_copy"] ?? null) !== null) {
        cargs.push(
            "-base_copy",
            (params["base_copy"] ?? null)
        );
    }
    if ((params["base_list"] ?? null)) {
        cargs.push("-base_list");
    }
    if ((params["use_gz"] ?? null)) {
        cargs.push("-use_gz");
    }
    if ((params["verb"] ?? null)) {
        cargs.push("-verb");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__auto_tlrc_outputs(
    params: VAutoTlrcParameters,
    execution: Execution,
): VAutoTlrcOutputs {
    const ret: VAutoTlrcOutputs = {
        root: execution.outputFile("."),
        output_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
        transform_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".Xat.1D"].join('')) : null,
    };
    return ret;
}


/**
 * @auto_tlrc
 *
 * A script to transform an anatomical dataset to align with some standard space template and to apply the same TLRC transform obtained with @auto_tlrc in Usage 1 mode to other datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAutoTlrcOutputs`).
 */
function v__auto_tlrc_execute(
    params: VAutoTlrcParameters,
    runner: Runner | null = null,
): VAutoTlrcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__AUTO_TLRC_METADATA);
    params = execution.params(params)
    const cargs = v__auto_tlrc_cargs(params, execution)
    const ret = v__auto_tlrc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @auto_tlrc
 *
 * A script to transform an anatomical dataset to align with some standard space template and to apply the same TLRC transform obtained with @auto_tlrc in Usage 1 mode to other datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param base_template Reference anatomical volume. Usually this volume is in some standard space like TLRC or MNI space.
 * @param input_anat Original anatomical volume (+orig). The skull is removed by this script unless instructed otherwise (-no_ss).
 * @param apar An anatomical dataset in TLRC space created using Usage 1 of @auto_tlrc.
 * @param input_dataset Dataset (typically EPI time series or statistical dataset) to transform to TLRC space per the transform in TLRC_parent
 * @param no_ss Do not strip skull of input data set because the skull has already been removed or because the template still has the skull.
 * @param warp_orig_vol Produce a TLRC version of the input volume, rather than a TLRC version of the skull-stripped input.
 * @param dxyz Cubic voxel size of output DSET in TLRC space. Default is the resolution of the template.
 * @param dx Size of voxel in the x direction (Right-Left). Default is 1mm.
 * @param dy Size of voxel in the y direction (Anterior-Posterior). Default is 1mm.
 * @param dz Size of voxel in the z direction (Inferior-Superior). Default is 1mm.
 * @param pad_base Pad the base dataset by MM mm in each direction. Default is 15 mm.
 * @param keep_tmp Keep temporary files.
 * @param clean Clean all temporary files, likely left from -keep_tmp option then exit.
 * @param xform Transform to use for warping: Choose from affine_general or shift_rotate_scale. Default is affine_general.
 * @param no_avoid_eyes An option that gets passed to 3dSkullStrip. Use it when parts of the frontal lobes get clipped.
 * @param ncr Do not use -coarserot option for 3dWarpDrive, which is a default.
 * @param onepass Turns off -twopass option for 3dWarpDrive. This will speed up the registration but might fail if the datasets are far apart.
 * @param twopass Opposite of -onepass, default.
 * @param maxite Maximum number of iterations for 3dWarpDrive. Default is 50 for first pass and then doubled to 100 in second pass.
 * @param not_ok_maxite Continue running even if maximum iterations is reached.
 * @param inweight Apply -weight INPUT (in 3dWarpDrive). By default, 3dWarpDrive uses the BASE dataset to weight the alignment cost.
 * @param rigid_equiv Output the rigid-body version of the alignment. Resultant volume is NOT in TLRC space.
 * @param init_xform Apply affine transform in XFORM0.1D before beginning registration and then include XFORM0.1D in the final transform.
 * @param no_pre Delete temporary dataset created by -init_xform
 * @param out_space Set the output to a particular space.
 * @param v_3d_allineate Use 3dAllineate with the lpa+ZZ cost function instead of 3dWarpDrive.
 * @param v_3d_alcost Use another cost function like nmi for 3dAllineate.
 * @param overwrite Overwrite existing output.
 * @param pad_input Pad the input dataset by MM mm in each direction.
 * @param onewarp Create follower data with one interpolation step, instead of two. This option reduces blurring of the output data.
 * @param twowarp Create follower data with two interpolations step, instead of one. This option is for backward compatibility.
 * @param rmode Resampling mode. Choose from: linear, cubic, NN or quintic. Default for 'Usage 1' is cubic.
 * @param prefix Name of the output dataset.
 * @param suffix Name the output dataset by appending this suffix to the prefix of the input data.
 * @param keep_view Do not mark output dataset as +tlrc.
 * @param base_copy Copy base (template) dataset into COPY_PREFIX.
 * @param base_list List the full path of the base dataset.
 * @param use_gz When using '-suffix ..', behave as if you had provided a prefix with '*.gz' at the end.
 * @param verb Increase verbosity of the script.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAutoTlrcOutputs`).
 */
function v__auto_tlrc(
    base_template: InputPathType,
    input_anat: InputPathType,
    apar: InputPathType,
    input_dataset: InputPathType,
    no_ss: boolean = false,
    warp_orig_vol: boolean = false,
    dxyz: number | null = null,
    dx: number | null = null,
    dy: number | null = null,
    dz: number | null = null,
    pad_base: number | null = null,
    keep_tmp: boolean = false,
    clean: boolean = false,
    xform: string | null = null,
    no_avoid_eyes: boolean = false,
    ncr: boolean = false,
    onepass: boolean = false,
    twopass: boolean = false,
    maxite: number | null = null,
    not_ok_maxite: boolean = false,
    inweight: boolean = false,
    rigid_equiv: boolean = false,
    init_xform: string | null = null,
    no_pre: boolean = false,
    out_space: string | null = null,
    v_3d_allineate: boolean = false,
    v_3d_alcost: string | null = null,
    overwrite: boolean = false,
    pad_input: number | null = null,
    onewarp: boolean = false,
    twowarp: boolean = false,
    rmode: string | null = null,
    prefix: string | null = null,
    suffix: string | null = null,
    keep_view: boolean = false,
    base_copy: string | null = null,
    base_list: boolean = false,
    use_gz: boolean = false,
    verb: boolean = false,
    runner: Runner | null = null,
): VAutoTlrcOutputs {
    const params = v__auto_tlrc_params(base_template, input_anat, apar, input_dataset, no_ss, warp_orig_vol, dxyz, dx, dy, dz, pad_base, keep_tmp, clean, xform, no_avoid_eyes, ncr, onepass, twopass, maxite, not_ok_maxite, inweight, rigid_equiv, init_xform, no_pre, out_space, v_3d_allineate, v_3d_alcost, overwrite, pad_input, onewarp, twowarp, rmode, prefix, suffix, keep_view, base_copy, base_list, use_gz, verb)
    return v__auto_tlrc_execute(params, runner);
}


export {
      VAutoTlrcOutputs,
      VAutoTlrcParameters,
      V__AUTO_TLRC_METADATA,
      v__auto_tlrc,
      v__auto_tlrc_execute,
      v__auto_tlrc_params,
};
