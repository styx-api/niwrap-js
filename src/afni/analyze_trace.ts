// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANALYZE_TRACE_METADATA: Metadata = {
    id: "5171e53d12a5707c7fff96e1018d7b6e069c808d.boutiques",
    name: "AnalyzeTrace",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AnalyzeTraceParameters {
    "__STYXTYPE__": "AnalyzeTrace";
    "tracefile": InputPathType;
    "max_func_lines"?: number | null | undefined;
    "suma_c"?: InputPathType | null | undefined;
    "max_err"?: number | null | undefined;
    "novolreg": boolean;
    "noxform": boolean;
    "setenv"?: string | null | undefined;
    "trace": boolean;
    "extreme_trace": boolean;
    "nomall": boolean;
    "yesmall": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "AnalyzeTrace": analyze_trace_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `analyze_trace(...)`.
 *
 * @interface
 */
interface AnalyzeTraceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function analyze_trace_params(
    tracefile: InputPathType,
    max_func_lines: number | null = null,
    suma_c: InputPathType | null = null,
    max_err: number | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    nomall: boolean = false,
    yesmall: boolean = false,
): AnalyzeTraceParameters {
    /**
     * Build parameters.
    
     * @param tracefile Trace output file obtained by redirecting the program’s trace output.
     * @param max_func_lines Set the maximum number of code lines before a function returns. Default is no limit.
     * @param suma_c FILE is a SUMA_*.c file. It is analyzed for functions that use SUMA_RETURN without ENTRY.
     * @param max_err Stop after encountering MAX_ERR errors reported in log. Default is 5. Error key terms are: 'Error', 'error', 'corruption'.
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
     * @param noxform Same as -novolreg
     * @param setenv Set environment variable ENVname to be ENVvalue. Quotes are necessary.
     * @param trace Turns on In/Out debug and Memory tracing.
     * @param extreme_trace Turns on extreme tracing.
     * @param nomall Turn off memory tracing.
     * @param yesmall Turn on memory tracing (default).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "AnalyzeTrace" as const,
        "tracefile": tracefile,
        "novolreg": novolreg,
        "noxform": noxform,
        "trace": trace,
        "extreme_trace": extreme_trace,
        "nomall": nomall,
        "yesmall": yesmall,
    };
    if (max_func_lines !== null) {
        params["max_func_lines"] = max_func_lines;
    }
    if (suma_c !== null) {
        params["suma_c"] = suma_c;
    }
    if (max_err !== null) {
        params["max_err"] = max_err;
    }
    if (setenv !== null) {
        params["setenv"] = setenv;
    }
    return params;
}


function analyze_trace_cargs(
    params: AnalyzeTraceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("AnalyzeTrace");
    cargs.push(execution.inputFile((params["tracefile"] ?? null)));
    if ((params["max_func_lines"] ?? null) !== null) {
        cargs.push(
            "-max_func_lines",
            String((params["max_func_lines"] ?? null))
        );
    }
    if ((params["suma_c"] ?? null) !== null) {
        cargs.push(
            "-suma_c",
            execution.inputFile((params["suma_c"] ?? null))
        );
    }
    if ((params["max_err"] ?? null) !== null) {
        cargs.push(
            "-max_err",
            String((params["max_err"] ?? null))
        );
    }
    if ((params["novolreg"] ?? null)) {
        cargs.push("-novolreg");
    }
    if ((params["noxform"] ?? null)) {
        cargs.push("-noxform");
    }
    if ((params["setenv"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["setenv"] ?? null)
        );
    }
    if ((params["trace"] ?? null)) {
        cargs.push("-trace");
    }
    if ((params["extreme_trace"] ?? null)) {
        cargs.push("-TRACE");
    }
    if ((params["nomall"] ?? null)) {
        cargs.push("-nomall");
    }
    if ((params["yesmall"] ?? null)) {
        cargs.push("-yesmall");
    }
    return cargs;
}


function analyze_trace_outputs(
    params: AnalyzeTraceParameters,
    execution: Execution,
): AnalyzeTraceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AnalyzeTraceOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function analyze_trace_execute(
    params: AnalyzeTraceParameters,
    execution: Execution,
): AnalyzeTraceOutputs {
    /**
     * A program to analyze SUMA (and AFNI's perhaps) stack output for functions that return with RETURN without bothering to go on the stack.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AnalyzeTraceOutputs`).
     */
    params = execution.params(params)
    const cargs = analyze_trace_cargs(params, execution)
    const ret = analyze_trace_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function analyze_trace(
    tracefile: InputPathType,
    max_func_lines: number | null = null,
    suma_c: InputPathType | null = null,
    max_err: number | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    nomall: boolean = false,
    yesmall: boolean = false,
    runner: Runner | null = null,
): AnalyzeTraceOutputs {
    /**
     * A program to analyze SUMA (and AFNI's perhaps) stack output for functions that return with RETURN without bothering to go on the stack.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param tracefile Trace output file obtained by redirecting the program’s trace output.
     * @param max_func_lines Set the maximum number of code lines before a function returns. Default is no limit.
     * @param suma_c FILE is a SUMA_*.c file. It is analyzed for functions that use SUMA_RETURN without ENTRY.
     * @param max_err Stop after encountering MAX_ERR errors reported in log. Default is 5. Error key terms are: 'Error', 'error', 'corruption'.
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
     * @param noxform Same as -novolreg
     * @param setenv Set environment variable ENVname to be ENVvalue. Quotes are necessary.
     * @param trace Turns on In/Out debug and Memory tracing.
     * @param extreme_trace Turns on extreme tracing.
     * @param nomall Turn off memory tracing.
     * @param yesmall Turn on memory tracing (default).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AnalyzeTraceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANALYZE_TRACE_METADATA);
    const params = analyze_trace_params(tracefile, max_func_lines, suma_c, max_err, novolreg, noxform, setenv, trace, extreme_trace, nomall, yesmall)
    return analyze_trace_execute(params, execution);
}


export {
      ANALYZE_TRACE_METADATA,
      AnalyzeTraceOutputs,
      AnalyzeTraceParameters,
      analyze_trace,
      analyze_trace_params,
};
