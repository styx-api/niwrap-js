// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TALSEGPROB_METADATA: Metadata = {
    id: "626aac96dc3c17343bf04b0cc1216d01a05c06b7.boutiques",
    name: "talsegprob",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TalsegprobParameters {
    "@type"?: "freesurfer/talsegprob";
    "subjects_list"?: Array<string> | null | undefined;
    "fsgd_file"?: InputPathType | null | undefined;
    "segmentation_number"?: number | null | undefined;
    "second_segmentation_number"?: number | null | undefined;
    "hippo_flag": boolean;
    "left_hippo_flag": boolean;
    "right_hippo_flag": boolean;
    "segmentation_file"?: InputPathType | null | undefined;
    "probability_output"?: string | null | undefined;
    "vote_output"?: string | null | undefined;
    "concat_output"?: string | null | undefined;
    "xform_file"?: InputPathType | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "tmpdir"?: string | null | undefined;
    "nocleanup_flag": boolean;
    "version_flag": boolean;
    "echo_flag": boolean;
}
type TalsegprobParametersTagged = Required<Pick<TalsegprobParameters, '@type'>> & TalsegprobParameters;


/**
 * Output object returned when calling `TalsegprobParameters(...)`.
 *
 * @interface
 */
interface TalsegprobOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Probability output file.
     */
    probability_output_file: OutputPathType | null;
    /**
     * Vote output file.
     */
    vote_output_file: OutputPathType | null;
    /**
     * Concatenated output file.
     */
    concat_output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subjects_list List of subjects to include in the analysis.
 * @param fsgd_file FSGD file to get subject list.
 * @param segmentation_number Segmentation number.
 * @param second_segmentation_number Second segmentation number.
 * @param hippo_flag Use segmentation numbers 17 and 53.
 * @param left_hippo_flag Use segmentation number 17.
 * @param right_hippo_flag Use segmentation number 53.
 * @param segmentation_file Use subject/mri/segfile.mgz instead of aseg.
 * @param probability_output Probability output file name.
 * @param vote_output Vote output file name.
 * @param concat_output Concatenated output file name.
 * @param xform_file Transformation file to use (default is talairach.xfm).
 * @param subjects_dir SUBJECTS_DIR to use instead of the one in the environment.
 * @param tmpdir Temporary directory (implies --nocleanup).
 * @param nocleanup_flag Do not delete temporary directory.
 * @param version_flag Display script version information.
 * @param echo_flag Enable command echo, for debug.
 *
 * @returns Parameter dictionary
 */
function talsegprob_params(
    subjects_list: Array<string> | null = null,
    fsgd_file: InputPathType | null = null,
    segmentation_number: number | null = null,
    second_segmentation_number: number | null = null,
    hippo_flag: boolean = false,
    left_hippo_flag: boolean = false,
    right_hippo_flag: boolean = false,
    segmentation_file: InputPathType | null = null,
    probability_output: string | null = null,
    vote_output: string | null = null,
    concat_output: string | null = null,
    xform_file: InputPathType | null = null,
    subjects_dir: string | null = null,
    tmpdir: string | null = null,
    nocleanup_flag: boolean = false,
    version_flag: boolean = false,
    echo_flag: boolean = false,
): TalsegprobParametersTagged {
    const params = {
        "@type": "freesurfer/talsegprob" as const,
        "hippo_flag": hippo_flag,
        "left_hippo_flag": left_hippo_flag,
        "right_hippo_flag": right_hippo_flag,
        "nocleanup_flag": nocleanup_flag,
        "version_flag": version_flag,
        "echo_flag": echo_flag,
    };
    if (subjects_list !== null) {
        params["subjects_list"] = subjects_list;
    }
    if (fsgd_file !== null) {
        params["fsgd_file"] = fsgd_file;
    }
    if (segmentation_number !== null) {
        params["segmentation_number"] = segmentation_number;
    }
    if (second_segmentation_number !== null) {
        params["second_segmentation_number"] = second_segmentation_number;
    }
    if (segmentation_file !== null) {
        params["segmentation_file"] = segmentation_file;
    }
    if (probability_output !== null) {
        params["probability_output"] = probability_output;
    }
    if (vote_output !== null) {
        params["vote_output"] = vote_output;
    }
    if (concat_output !== null) {
        params["concat_output"] = concat_output;
    }
    if (xform_file !== null) {
        params["xform_file"] = xform_file;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (tmpdir !== null) {
        params["tmpdir"] = tmpdir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function talsegprob_cargs(
    params: TalsegprobParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("talsegprob");
    if ((params["subjects_list"] ?? null) !== null) {
        cargs.push(
            "--subjects",
            ...(params["subjects_list"] ?? null)
        );
    }
    if ((params["fsgd_file"] ?? null) !== null) {
        cargs.push(
            "--fsgd",
            execution.inputFile((params["fsgd_file"] ?? null))
        );
    }
    if ((params["segmentation_number"] ?? null) !== null) {
        cargs.push(
            "--seg",
            String((params["segmentation_number"] ?? null))
        );
    }
    if ((params["second_segmentation_number"] ?? null) !== null) {
        cargs.push(
            "<--seg",
            String((params["second_segmentation_number"] ?? null))
        );
    }
    if ((params["hippo_flag"] ?? false)) {
        cargs.push("--hippo");
    }
    if ((params["left_hippo_flag"] ?? false)) {
        cargs.push("--left-hippo");
    }
    if ((params["right_hippo_flag"] ?? false)) {
        cargs.push("--right-hippo");
    }
    if ((params["segmentation_file"] ?? null) !== null) {
        cargs.push(
            "--segmentation",
            execution.inputFile((params["segmentation_file"] ?? null))
        );
    }
    if ((params["probability_output"] ?? null) !== null) {
        cargs.push(
            "--p",
            (params["probability_output"] ?? null)
        );
    }
    if ((params["vote_output"] ?? null) !== null) {
        cargs.push(
            "--vote",
            (params["vote_output"] ?? null)
        );
    }
    if ((params["concat_output"] ?? null) !== null) {
        cargs.push(
            "--c",
            (params["concat_output"] ?? null)
        );
    }
    if ((params["xform_file"] ?? null) !== null) {
        cargs.push(
            "--xform",
            execution.inputFile((params["xform_file"] ?? null))
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sdir",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["tmpdir"] ?? null) !== null) {
        cargs.push(
            "--tmpdir",
            (params["tmpdir"] ?? null)
        );
    }
    if ((params["nocleanup_flag"] ?? false)) {
        cargs.push("--nocleanup");
    }
    if ((params["version_flag"] ?? false)) {
        cargs.push("--version");
    }
    if ((params["echo_flag"] ?? false)) {
        cargs.push("--echo");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function talsegprob_outputs(
    params: TalsegprobParameters,
    execution: Execution,
): TalsegprobOutputs {
    const ret: TalsegprobOutputs = {
        root: execution.outputFile("."),
        probability_output_file: ((params["probability_output"] ?? null) !== null) ? execution.outputFile([(params["probability_output"] ?? null)].join('')) : null,
        vote_output_file: ((params["vote_output"] ?? null) !== null) ? execution.outputFile([(params["vote_output"] ?? null)].join('')) : null,
        concat_output_file: ((params["concat_output"] ?? null) !== null) ? execution.outputFile([(params["concat_output"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * talsegprob
 *
 * Tool to create a binary probability volume from aseg.mgz based on segmentation numbers, resliced to talirach/MNI305/fsaverage space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalsegprobOutputs`).
 */
function talsegprob_execute(
    params: TalsegprobParameters,
    runner: Runner | null = null,
): TalsegprobOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TALSEGPROB_METADATA);
    params = execution.params(params)
    const cargs = talsegprob_cargs(params, execution)
    const ret = talsegprob_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * talsegprob
 *
 * Tool to create a binary probability volume from aseg.mgz based on segmentation numbers, resliced to talirach/MNI305/fsaverage space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects_list List of subjects to include in the analysis.
 * @param fsgd_file FSGD file to get subject list.
 * @param segmentation_number Segmentation number.
 * @param second_segmentation_number Second segmentation number.
 * @param hippo_flag Use segmentation numbers 17 and 53.
 * @param left_hippo_flag Use segmentation number 17.
 * @param right_hippo_flag Use segmentation number 53.
 * @param segmentation_file Use subject/mri/segfile.mgz instead of aseg.
 * @param probability_output Probability output file name.
 * @param vote_output Vote output file name.
 * @param concat_output Concatenated output file name.
 * @param xform_file Transformation file to use (default is talairach.xfm).
 * @param subjects_dir SUBJECTS_DIR to use instead of the one in the environment.
 * @param tmpdir Temporary directory (implies --nocleanup).
 * @param nocleanup_flag Do not delete temporary directory.
 * @param version_flag Display script version information.
 * @param echo_flag Enable command echo, for debug.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalsegprobOutputs`).
 */
function talsegprob(
    subjects_list: Array<string> | null = null,
    fsgd_file: InputPathType | null = null,
    segmentation_number: number | null = null,
    second_segmentation_number: number | null = null,
    hippo_flag: boolean = false,
    left_hippo_flag: boolean = false,
    right_hippo_flag: boolean = false,
    segmentation_file: InputPathType | null = null,
    probability_output: string | null = null,
    vote_output: string | null = null,
    concat_output: string | null = null,
    xform_file: InputPathType | null = null,
    subjects_dir: string | null = null,
    tmpdir: string | null = null,
    nocleanup_flag: boolean = false,
    version_flag: boolean = false,
    echo_flag: boolean = false,
    runner: Runner | null = null,
): TalsegprobOutputs {
    const params = talsegprob_params(subjects_list, fsgd_file, segmentation_number, second_segmentation_number, hippo_flag, left_hippo_flag, right_hippo_flag, segmentation_file, probability_output, vote_output, concat_output, xform_file, subjects_dir, tmpdir, nocleanup_flag, version_flag, echo_flag)
    return talsegprob_execute(params, runner);
}


export {
      TALSEGPROB_METADATA,
      TalsegprobOutputs,
      talsegprob,
      talsegprob_execute,
      talsegprob_params,
};
