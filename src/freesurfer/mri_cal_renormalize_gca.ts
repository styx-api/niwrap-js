// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CAL_RENORMALIZE_GCA_METADATA: Metadata = {
    id: "14248dd0e801de44865ab35dbf488e7e2c657ff0.boutiques",
    name: "mri_cal_renormalize_gca",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCalRenormalizeGcaParameters {
    "__STYXTYPE__": "mri_cal_renormalize_gca";
    "timepoint_file": InputPathType;
    "in_vol": InputPathType;
    "input_atlas": InputPathType;
    "transform_file": InputPathType;
    "output_atlas": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_cal_renormalize_gca": mri_cal_renormalize_gca_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_cal_renormalize_gca": mri_cal_renormalize_gca_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_cal_renormalize_gca(...)`.
 *
 * @interface
 */
interface MriCalRenormalizeGcaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Renormalized output atlas
     */
    output_atlas_file: OutputPathType;
}


function mri_cal_renormalize_gca_params(
    timepoint_file: InputPathType,
    in_vol: InputPathType,
    input_atlas: InputPathType,
    transform_file: InputPathType,
    output_atlas: string,
): MriCalRenormalizeGcaParameters {
    /**
     * Build parameters.
    
     * @param timepoint_file Longitudinal time point file
     * @param in_vol Input volume
     * @param input_atlas Input atlas
     * @param transform_file Transform file
     * @param output_atlas Output atlas
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_cal_renormalize_gca" as const,
        "timepoint_file": timepoint_file,
        "in_vol": in_vol,
        "input_atlas": input_atlas,
        "transform_file": transform_file,
        "output_atlas": output_atlas,
    };
    return params;
}


function mri_cal_renormalize_gca_cargs(
    params: MriCalRenormalizeGcaParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_cal_renormalize_gca");
    cargs.push(execution.inputFile((params["timepoint_file"] ?? null)));
    cargs.push(execution.inputFile((params["in_vol"] ?? null)));
    cargs.push(execution.inputFile((params["input_atlas"] ?? null)));
    cargs.push(execution.inputFile((params["transform_file"] ?? null)));
    cargs.push((params["output_atlas"] ?? null));
    return cargs;
}


function mri_cal_renormalize_gca_outputs(
    params: MriCalRenormalizeGcaParameters,
    execution: Execution,
): MriCalRenormalizeGcaOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriCalRenormalizeGcaOutputs = {
        root: execution.outputFile("."),
        output_atlas_file: execution.outputFile([(params["output_atlas"] ?? null)].join('')),
    };
    return ret;
}


function mri_cal_renormalize_gca_execute(
    params: MriCalRenormalizeGcaParameters,
    execution: Execution,
): MriCalRenormalizeGcaOutputs {
    /**
     * Tool for atlas renormalization in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriCalRenormalizeGcaOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_cal_renormalize_gca_cargs(params, execution)
    const ret = mri_cal_renormalize_gca_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_cal_renormalize_gca(
    timepoint_file: InputPathType,
    in_vol: InputPathType,
    input_atlas: InputPathType,
    transform_file: InputPathType,
    output_atlas: string,
    runner: Runner | null = null,
): MriCalRenormalizeGcaOutputs {
    /**
     * Tool for atlas renormalization in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param timepoint_file Longitudinal time point file
     * @param in_vol Input volume
     * @param input_atlas Input atlas
     * @param transform_file Transform file
     * @param output_atlas Output atlas
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriCalRenormalizeGcaOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CAL_RENORMALIZE_GCA_METADATA);
    const params = mri_cal_renormalize_gca_params(timepoint_file, in_vol, input_atlas, transform_file, output_atlas)
    return mri_cal_renormalize_gca_execute(params, execution);
}


export {
      MRI_CAL_RENORMALIZE_GCA_METADATA,
      MriCalRenormalizeGcaOutputs,
      MriCalRenormalizeGcaParameters,
      mri_cal_renormalize_gca,
      mri_cal_renormalize_gca_params,
};
