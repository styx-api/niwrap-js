// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SYNTHESIZE_METADATA: Metadata = {
    id: "56ff973d99ba2ebaf94ee5e56f8fa7a203776506.boutiques",
    name: "mri_synthesize",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSynthesizeParameters {
    "@type": "freesurfer.mri_synthesize";
    "tr": number;
    "alpha": number;
    "te": number;
    "t1_volume": InputPathType;
    "pd_volume": InputPathType;
    "output_volume": string;
    "fixed_weight": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_synthesize": mri_synthesize_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_synthesize": mri_synthesize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_synthesize(...)`.
 *
 * @interface
 */
interface MriSynthesizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The synthesized FLASH acquisition output volume.
     */
    synthesized_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param tr Repetition time (TR) for the synthesis.
 * @param alpha Flip angle (alpha) in degrees.
 * @param te Echo time (TE) for the synthesis.
 * @param t1_volume Path to the T1 volume.
 * @param pd_volume Path to the PD volume.
 * @param output_volume Path for the output volume.
 * @param fixed_weight Use a fixed weighting to generate an output volume with optimal gray/white contrast.
 *
 * @returns Parameter dictionary
 */
function mri_synthesize_params(
    tr: number,
    alpha: number,
    te: number,
    t1_volume: InputPathType,
    pd_volume: InputPathType,
    output_volume: string,
    fixed_weight: boolean = false,
): MriSynthesizeParameters {
    const params = {
        "@type": "freesurfer.mri_synthesize" as const,
        "tr": tr,
        "alpha": alpha,
        "te": te,
        "t1_volume": t1_volume,
        "pd_volume": pd_volume,
        "output_volume": output_volume,
        "fixed_weight": fixed_weight,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_synthesize_cargs(
    params: MriSynthesizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_synthesize");
    cargs.push(String((params["tr"] ?? null)));
    cargs.push(String((params["alpha"] ?? null)));
    cargs.push(String((params["te"] ?? null)));
    cargs.push(execution.inputFile((params["t1_volume"] ?? null)));
    cargs.push(execution.inputFile((params["pd_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["fixed_weight"] ?? null)) {
        cargs.push("-w");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_synthesize_outputs(
    params: MriSynthesizeParameters,
    execution: Execution,
): MriSynthesizeOutputs {
    const ret: MriSynthesizeOutputs = {
        root: execution.outputFile("."),
        synthesized_output: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_synthesize
 *
 * This program synthesizes a FLASH acquisition based on previously computed T1/PD maps.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSynthesizeOutputs`).
 */
function mri_synthesize_execute(
    params: MriSynthesizeParameters,
    runner: Runner | null = null,
): MriSynthesizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SYNTHESIZE_METADATA);
    params = execution.params(params)
    const cargs = mri_synthesize_cargs(params, execution)
    const ret = mri_synthesize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_synthesize
 *
 * This program synthesizes a FLASH acquisition based on previously computed T1/PD maps.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param tr Repetition time (TR) for the synthesis.
 * @param alpha Flip angle (alpha) in degrees.
 * @param te Echo time (TE) for the synthesis.
 * @param t1_volume Path to the T1 volume.
 * @param pd_volume Path to the PD volume.
 * @param output_volume Path for the output volume.
 * @param fixed_weight Use a fixed weighting to generate an output volume with optimal gray/white contrast.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSynthesizeOutputs`).
 */
function mri_synthesize(
    tr: number,
    alpha: number,
    te: number,
    t1_volume: InputPathType,
    pd_volume: InputPathType,
    output_volume: string,
    fixed_weight: boolean = false,
    runner: Runner | null = null,
): MriSynthesizeOutputs {
    const params = mri_synthesize_params(tr, alpha, te, t1_volume, pd_volume, output_volume, fixed_weight)
    return mri_synthesize_execute(params, runner);
}


export {
      MRI_SYNTHESIZE_METADATA,
      MriSynthesizeOutputs,
      MriSynthesizeParameters,
      mri_synthesize,
      mri_synthesize_execute,
      mri_synthesize_params,
};
