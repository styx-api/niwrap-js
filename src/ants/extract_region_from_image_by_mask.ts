// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EXTRACT_REGION_FROM_IMAGE_BY_MASK_METADATA: Metadata = {
    id: "ab525a5463159d5bccf7402118033d761d1bf086.boutiques",
    name: "ExtractRegionFromImageByMask",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface ExtractRegionFromImageByMaskParameters {
    "@type": "ants.ExtractRegionFromImageByMask";
    "image_dimension": number;
    "input_image": InputPathType;
    "output_image": InputPathType;
    "label_mask_image": InputPathType;
    "label"?: number | null | undefined;
    "pad_radius"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.ExtractRegionFromImageByMask": extract_region_from_image_by_mask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `extract_region_from_image_by_mask(...)`.
 *
 * @interface
 */
interface ExtractRegionFromImageByMaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Dimension of the input image.
 * @param input_image The input image from which a region will be extracted.
 * @param output_image The output image containing the extracted region.
 * @param label_mask_image The label mask image used to extract the bounding box.
 * @param label The label value used to extract the sub-region.
 * @param pad_radius Optional padding radius to be added around the bounding box.
 *
 * @returns Parameter dictionary
 */
function extract_region_from_image_by_mask_params(
    image_dimension: number,
    input_image: InputPathType,
    output_image: InputPathType,
    label_mask_image: InputPathType,
    label: number | null = null,
    pad_radius: number | null = null,
): ExtractRegionFromImageByMaskParameters {
    const params = {
        "@type": "ants.ExtractRegionFromImageByMask" as const,
        "image_dimension": image_dimension,
        "input_image": input_image,
        "output_image": output_image,
        "label_mask_image": label_mask_image,
    };
    if (label !== null) {
        params["label"] = label;
    }
    if (pad_radius !== null) {
        params["pad_radius"] = pad_radius;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function extract_region_from_image_by_mask_cargs(
    params: ExtractRegionFromImageByMaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ExtractRegionFromImageByMask");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push(execution.inputFile((params["output_image"] ?? null)));
    cargs.push(execution.inputFile((params["label_mask_image"] ?? null)));
    if ((params["label"] ?? null) !== null) {
        cargs.push(String((params["label"] ?? null)));
    }
    if ((params["pad_radius"] ?? null) !== null) {
        cargs.push(String((params["pad_radius"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function extract_region_from_image_by_mask_outputs(
    params: ExtractRegionFromImageByMaskParameters,
    execution: Execution,
): ExtractRegionFromImageByMaskOutputs {
    const ret: ExtractRegionFromImageByMaskOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * ExtractRegionFromImageByMask
 *
 * Extract a sub-region from an image using the bounding box from a label image, with an optional padding radius.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ExtractRegionFromImageByMaskOutputs`).
 */
function extract_region_from_image_by_mask_execute(
    params: ExtractRegionFromImageByMaskParameters,
    runner: Runner | null = null,
): ExtractRegionFromImageByMaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EXTRACT_REGION_FROM_IMAGE_BY_MASK_METADATA);
    params = execution.params(params)
    const cargs = extract_region_from_image_by_mask_cargs(params, execution)
    const ret = extract_region_from_image_by_mask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ExtractRegionFromImageByMask
 *
 * Extract a sub-region from an image using the bounding box from a label image, with an optional padding radius.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Dimension of the input image.
 * @param input_image The input image from which a region will be extracted.
 * @param output_image The output image containing the extracted region.
 * @param label_mask_image The label mask image used to extract the bounding box.
 * @param label The label value used to extract the sub-region.
 * @param pad_radius Optional padding radius to be added around the bounding box.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ExtractRegionFromImageByMaskOutputs`).
 */
function extract_region_from_image_by_mask(
    image_dimension: number,
    input_image: InputPathType,
    output_image: InputPathType,
    label_mask_image: InputPathType,
    label: number | null = null,
    pad_radius: number | null = null,
    runner: Runner | null = null,
): ExtractRegionFromImageByMaskOutputs {
    const params = extract_region_from_image_by_mask_params(image_dimension, input_image, output_image, label_mask_image, label, pad_radius)
    return extract_region_from_image_by_mask_execute(params, runner);
}


export {
      EXTRACT_REGION_FROM_IMAGE_BY_MASK_METADATA,
      ExtractRegionFromImageByMaskOutputs,
      ExtractRegionFromImageByMaskParameters,
      extract_region_from_image_by_mask,
      extract_region_from_image_by_mask_execute,
      extract_region_from_image_by_mask_params,
};
