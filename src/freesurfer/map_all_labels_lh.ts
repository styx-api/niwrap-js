// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAP_ALL_LABELS_LH_METADATA: Metadata = {
    id: "5a6492279ef9cbdf418159c3b159dfecfe106e0f.boutiques",
    name: "map_all_labels-lh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MapAllLabelsLhParameters {
    "__STYXTYPE__": "map_all_labels-lh";
    "which": string;
    "fname": string;
    "hemi": string;
    "spherical_surf": InputPathType;
    "subjects": Array<string>;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "map_all_labels-lh": map_all_labels_lh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "map_all_labels-lh": map_all_labels_lh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `map_all_labels_lh(...)`.
 *
 * @interface
 */
interface MapAllLabelsLhOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file generated after processing.
     */
    output_file: OutputPathType;
}


function map_all_labels_lh_params(
    which: string,
    fname: string,
    hemi: string,
    spherical_surf: InputPathType,
    subjects: Array<string>,
    output: string,
): MapAllLabelsLhParameters {
    /**
     * Build parameters.
    
     * @param which Which type of data to process. Options are: coords, label, vals, curv, area.
     * @param fname The file name to process.
     * @param hemi The hemisphere to process (usually 'lh' for left hemisphere).
     * @param spherical_surf The spherical surface file.
     * @param subjects List of subjects to process.
     * @param output Output file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "map_all_labels-lh" as const,
        "which": which,
        "fname": fname,
        "hemi": hemi,
        "spherical_surf": spherical_surf,
        "subjects": subjects,
        "output": output,
    };
    return params;
}


function map_all_labels_lh_cargs(
    params: MapAllLabelsLhParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("map_all_labels-lh");
    cargs.push(
        "-lh",
        (params["which"] ?? null)
    );
    cargs.push((params["fname"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["spherical_surf"] ?? null)));
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


function map_all_labels_lh_outputs(
    params: MapAllLabelsLhParameters,
    execution: Execution,
): MapAllLabelsLhOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MapAllLabelsLhOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function map_all_labels_lh_execute(
    params: MapAllLabelsLhParameters,
    execution: Execution,
): MapAllLabelsLhOutputs {
    /**
     * Paints output onto a subject's left hemisphere using FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MapAllLabelsLhOutputs`).
     */
    params = execution.params(params)
    const cargs = map_all_labels_lh_cargs(params, execution)
    const ret = map_all_labels_lh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function map_all_labels_lh(
    which: string,
    fname: string,
    hemi: string,
    spherical_surf: InputPathType,
    subjects: Array<string>,
    output: string,
    runner: Runner | null = null,
): MapAllLabelsLhOutputs {
    /**
     * Paints output onto a subject's left hemisphere using FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param which Which type of data to process. Options are: coords, label, vals, curv, area.
     * @param fname The file name to process.
     * @param hemi The hemisphere to process (usually 'lh' for left hemisphere).
     * @param spherical_surf The spherical surface file.
     * @param subjects List of subjects to process.
     * @param output Output file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MapAllLabelsLhOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAP_ALL_LABELS_LH_METADATA);
    const params = map_all_labels_lh_params(which, fname, hemi, spherical_surf, subjects, output)
    return map_all_labels_lh_execute(params, execution);
}


export {
      MAP_ALL_LABELS_LH_METADATA,
      MapAllLabelsLhOutputs,
      MapAllLabelsLhParameters,
      map_all_labels_lh,
      map_all_labels_lh_params,
};
