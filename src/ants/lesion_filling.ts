// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LESION_FILLING_METADATA: Metadata = {
    id: "e67424ecd9a0c5e13dd9b069bccb2e63e4348726.boutiques",
    name: "LesionFilling",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface LesionFillingParameters {
    "@type": "ants.LesionFilling";
    "image_dimension": number;
    "t1_image": InputPathType;
    "lesion_mask": InputPathType;
    "output_lesion_filled": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.LesionFilling": lesion_filling_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.LesionFilling": lesion_filling_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `lesion_filling(...)`.
 *
 * @interface
 */
interface LesionFillingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image with filled lesions.
     */
    lesion_filled_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Dimensionality of the image (e.g., 2, 3)
 * @param t1_image Path to the T1 image file.
 * @param lesion_mask Path to the lesion mask image file.
 * @param output_lesion_filled Path for the output file with lesions filled.
 *
 * @returns Parameter dictionary
 */
function lesion_filling_params(
    image_dimension: number,
    t1_image: InputPathType,
    lesion_mask: InputPathType,
    output_lesion_filled: string,
): LesionFillingParameters {
    const params = {
        "@type": "ants.LesionFilling" as const,
        "image_dimension": image_dimension,
        "t1_image": t1_image,
        "lesion_mask": lesion_mask,
        "output_lesion_filled": output_lesion_filled,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function lesion_filling_cargs(
    params: LesionFillingParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("LesionFilling");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["t1_image"] ?? null)));
    cargs.push(execution.inputFile((params["lesion_mask"] ?? null)));
    cargs.push((params["output_lesion_filled"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function lesion_filling_outputs(
    params: LesionFillingParameters,
    execution: Execution,
): LesionFillingOutputs {
    const ret: LesionFillingOutputs = {
        root: execution.outputFile("."),
        lesion_filled_output: execution.outputFile([(params["output_lesion_filled"] ?? null)].join('')),
    };
    return ret;
}


/**
 * LesionFilling
 *
 * A tool for filling lesions in T1 images using a mask.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LesionFillingOutputs`).
 */
function lesion_filling_execute(
    params: LesionFillingParameters,
    runner: Runner | null = null,
): LesionFillingOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LESION_FILLING_METADATA);
    params = execution.params(params)
    const cargs = lesion_filling_cargs(params, execution)
    const ret = lesion_filling_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * LesionFilling
 *
 * A tool for filling lesions in T1 images using a mask.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Dimensionality of the image (e.g., 2, 3)
 * @param t1_image Path to the T1 image file.
 * @param lesion_mask Path to the lesion mask image file.
 * @param output_lesion_filled Path for the output file with lesions filled.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LesionFillingOutputs`).
 */
function lesion_filling(
    image_dimension: number,
    t1_image: InputPathType,
    lesion_mask: InputPathType,
    output_lesion_filled: string,
    runner: Runner | null = null,
): LesionFillingOutputs {
    const params = lesion_filling_params(image_dimension, t1_image, lesion_mask, output_lesion_filled)
    return lesion_filling_execute(params, runner);
}


export {
      LESION_FILLING_METADATA,
      LesionFillingOutputs,
      LesionFillingParameters,
      lesion_filling,
      lesion_filling_execute,
      lesion_filling_params,
};
