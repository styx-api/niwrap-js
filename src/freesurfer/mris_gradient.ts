// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_GRADIENT_METADATA: Metadata = {
    id: "6a9aec026f78bb086a8f7293da907aa14fad157f.boutiques",
    name: "mris_gradient",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisGradientParameters {
    "@type": "freesurfer.mris_gradient";
    "input_surface": InputPathType;
    "input_vector_field": InputPathType;
    "output_gradient_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_gradient": mris_gradient_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_gradient": mris_gradient_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_gradient(...)`.
 *
 * @interface
 */
interface MrisGradientOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting gradient measurement written into a .mgz file.
     */
    output_gradient: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Path to the input surface file.
 * @param input_vector_field Path to the input vector field file.
 * @param output_gradient_file Path to the output gradient file ending with .mgz.
 *
 * @returns Parameter dictionary
 */
function mris_gradient_params(
    input_surface: InputPathType,
    input_vector_field: InputPathType,
    output_gradient_file: string,
): MrisGradientParameters {
    const params = {
        "@type": "freesurfer.mris_gradient" as const,
        "input_surface": input_surface,
        "input_vector_field": input_vector_field,
        "output_gradient_file": output_gradient_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_gradient_cargs(
    params: MrisGradientParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_gradient");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["input_vector_field"] ?? null)));
    cargs.push((params["output_gradient_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_gradient_outputs(
    params: MrisGradientParameters,
    execution: Execution,
): MrisGradientOutputs {
    const ret: MrisGradientOutputs = {
        root: execution.outputFile("."),
        output_gradient: execution.outputFile([(params["output_gradient_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * This program computes the gradient of an intensity profile of the cortical ribbon and writes the resulting measurement into a .mgz file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrisGradientOutputs`).
 */
function mris_gradient_execute(
    params: MrisGradientParameters,
    execution: Execution,
): MrisGradientOutputs {
    params = execution.params(params)
    const cargs = mris_gradient_cargs(params, execution)
    const ret = mris_gradient_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program computes the gradient of an intensity profile of the cortical ribbon and writes the resulting measurement into a .mgz file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Path to the input surface file.
 * @param input_vector_field Path to the input vector field file.
 * @param output_gradient_file Path to the output gradient file ending with .mgz.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisGradientOutputs`).
 */
function mris_gradient(
    input_surface: InputPathType,
    input_vector_field: InputPathType,
    output_gradient_file: string,
    runner: Runner | null = null,
): MrisGradientOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_GRADIENT_METADATA);
    const params = mris_gradient_params(input_surface, input_vector_field, output_gradient_file)
    return mris_gradient_execute(params, execution);
}


export {
      MRIS_GRADIENT_METADATA,
      MrisGradientOutputs,
      MrisGradientParameters,
      mris_gradient,
      mris_gradient_cargs,
      mris_gradient_execute,
      mris_gradient_outputs,
      mris_gradient_params,
};
