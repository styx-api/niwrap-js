// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DPLOT_METADATA: Metadata = {
    id: "2bfceaddc31c668f6033863ed24f7c42fb57321b.boutiques",
    name: "1dplot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dplotNolineParameters {
    "@type"?: "noline";
    "noline": boolean;
    "NOLINE": boolean;
}
type V1dplotNolineParametersTagged = Required<Pick<V1dplotNolineParameters, '@type'>> & V1dplotNolineParameters;


interface V1dplotThickParameters {
    "@type"?: "thick";
    "thick": boolean;
    "THICK": boolean;
}
type V1dplotThickParametersTagged = Required<Pick<V1dplotThickParameters, '@type'>> & V1dplotThickParameters;


interface V1dplotRboxParameters {
    "@type"?: "rbox";
    "rbox"?: string | null | undefined;
    "Rbox"?: string | null | undefined;
}
type V1dplotRboxParametersTagged = Required<Pick<V1dplotRboxParameters, '@type'>> & V1dplotRboxParameters;


interface V1dplotParameters {
    "@type"?: "afni/1dplot";
    "tsfiles": Array<InputPathType>;
    "install": boolean;
    "sep": boolean;
    "one": boolean;
    "sepscl": boolean;
    "noline"?: V1dplotNolineParameters | null | undefined;
    "box": boolean;
    "hist": boolean;
    "norm2": boolean;
    "normx": boolean;
    "norm1": boolean;
    "demean": boolean;
    "x"?: InputPathType | null | undefined;
    "xl10"?: InputPathType | null | undefined;
    "dx"?: number | null | undefined;
    "xzero"?: number | null | undefined;
    "nopush": boolean;
    "ignore"?: number | null | undefined;
    "use"?: number | null | undefined;
    "xlabel"?: string | null | undefined;
    "ylabel"?: string | null | undefined;
    "plabel"?: string | null | undefined;
    "title"?: string | null | undefined;
    "wintitle"?: string | null | undefined;
    "naked": boolean;
    "aspect"?: number | null | undefined;
    "stdin": boolean;
    "ps": boolean;
    "jpg"?: string | null | undefined;
    "jpeg"?: string | null | undefined;
    "png"?: string | null | undefined;
    "pnm"?: string | null | undefined;
    "pngs"?: string | null | undefined;
    "jpgs"?: string | null | undefined;
    "jpegs"?: string | null | undefined;
    "pnms"?: string | null | undefined;
    "ytran"?: string | null | undefined;
    "xtran"?: string | null | undefined;
    "xaxis"?: string | null | undefined;
    "yaxis"?: string | null | undefined;
    "ynames"?: Array<string> | null | undefined;
    "volreg": boolean;
    "thick"?: V1dplotThickParameters | null | undefined;
    "dashed"?: string | null | undefined;
    "setenv"?: string | null | undefined;
    "censor_RGB"?: string | null | undefined;
    "censor"?: InputPathType | null | undefined;
    "CENSORTR"?: Array<string> | null | undefined;
    "concat"?: InputPathType | null | undefined;
    "rbox"?: V1dplotRboxParameters | null | undefined;
    "line"?: string | null | undefined;
}
type V1dplotParametersTagged = Required<Pick<V1dplotParameters, '@type'>> & V1dplotParameters;


/**
 * Build parameters.
 *
 * @param noline Don't plot the connecting lines.
 * @param noline_ Same as -noline, but will not try to plot values outside the rectangular box that contains the graph axes.
 *
 * @returns Parameter dictionary
 */
function v_1dplot_noline_params(
    noline: boolean = false,
    noline_: boolean = false,
): V1dplotNolineParametersTagged {
    const params = {
        "@type": "noline" as const,
        "noline": noline,
        "NOLINE": noline_,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dplot_noline_cargs(
    params: V1dplotNolineParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["noline"] ?? false)) {
        cargs.push("-noline");
    }
    if ((params["NOLINE"] ?? false)) {
        cargs.push("-NOLINE");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param thick Increase the line thickness used for plotting.
 * @param thick_ Twice the power of '-thick' at no extra cost!
 *
 * @returns Parameter dictionary
 */
function v_1dplot_thick_params(
    thick: boolean = false,
    thick_: boolean = false,
): V1dplotThickParametersTagged {
    const params = {
        "@type": "thick" as const,
        "thick": thick,
        "THICK": thick_,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dplot_thick_cargs(
    params: V1dplotThickParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["thick"] ?? false)) {
        cargs.push("-thick");
    }
    if ((params["THICK"] ?? false)) {
        cargs.push("-THICK");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param rbox Draw a rectangular box with specified corners and colors.
 * @param rbox_ Draw a rectangular box with one extra horizontal line.
 *
 * @returns Parameter dictionary
 */
function v_1dplot_rbox_params(
    rbox: string | null = null,
    rbox_: string | null = null,
): V1dplotRboxParametersTagged {
    const params = {
        "@type": "rbox" as const,
    };
    if (rbox !== null) {
        params["rbox"] = rbox;
    }
    if (rbox_ !== null) {
        params["Rbox"] = rbox_;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dplot_rbox_cargs(
    params: V1dplotRboxParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["rbox"] ?? null) !== null) {
        cargs.push(
            "-rbox",
            (params["rbox"] ?? null)
        );
    }
    if ((params["Rbox"] ?? null) !== null) {
        cargs.push(
            "-Rbox",
            (params["Rbox"] ?? null)
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `V1dplotParameters(...)`.
 *
 * @interface
 */
interface V1dplotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param tsfiles Input time series files (*.1D) to be plotted.
 * @param install Install a new X11 colormap.
 * @param sep Plot each column in a separate sub-graph.
 * @param one Plot all columns together in one big graph.
 * @param sepscl Plot each column in a separate sub-graph and allow each sub-graph to have a different y-scale. This option is meaningless with -one!
 * @param noline Don't plot the connecting lines.
 * @param box Plot a small 'box' at each data point.
 * @param hist Plot graphs in histogram style (i.e., vertical boxes).
 * @param norm2 Independently scale each time series plotted to have L_2 norm = 1 (sum of squares).
 * @param normx Independently scale each time series plotted to have max absolute value = 1 (L_infinity norm).
 * @param norm1 Independently scale each time series plotted to have max sum of absolute values = 1 (L_1 norm).
 * @param demean Remove the mean from each time series before normalizing.
 * @param x Use for X axis the data in a specified .1D file.
 * @param xl10 Use log10 of the specified .1D file as the X axis.
 * @param dx Spacing between points on the x-axis.
 * @param xzero Initial x coordinate.
 * @param nopush Don't 'push' axes ranges outwards.
 * @param ignore Skip first 'nn' rows in the input file.
 * @param use Plot 'mm' points.
 * @param xlabel Put string 'aa' below the x-axis.
 * @param ylabel Put string 'aa' to the left of the y-axis.
 * @param plabel Put string 'pp' atop the plot.
 * @param title Same as -plabel, but only works with -ps/-png/-jpg/-pnm options.
 * @param wintitle Set string 'pp' as the title of the frame containing the plot.
 * @param naked Do NOT plot axes or labels, just the graph(s).
 * @param aspect Set the width-to-height ratio of the plot region to 'A'.
 * @param stdin Don't read from tsfile; instead, read from stdin and plot it.
 * @param ps Don't draw plot in a window; instead, write it to stdout in PostScript format.
 * @param jpg Render plot to JPEG image and save to a file named 'fname'.
 * @param jpeg Render plot to JPEG image and save to a file named 'fname'.
 * @param png Render plot to PNG image and save to a file named 'fname'.
 * @param pnm Render plot to PNM image and save to a file named 'fname'.
 * @param pngs Render plot to PNG image of specified size and save to a file named 'fname'.
 * @param jpgs Render plot to JPEG image of specified size and save to a file named 'fname'.
 * @param jpegs Render plot to JPEG image of specified size and save to a file named 'fname'.
 * @param pnms Render plot to PNM image of specified size and save to a file named 'fname'.
 * @param ytran Transform the data along the y-axis by applying the expression to each input value.
 * @param xtran Transform the data along the x-axis by applying the expression to each input value.
 * @param xaxis Set the x-axis to run from value 'b' to value 't', with 'n' major divisions and 'm' minor tic marks per major division.
 * @param yaxis Set the y-axis to run from value 'b' to value 't', with 'n' major divisions and 'm' minor tic marks per major division.
 * @param ynames Use the strings as labels to the right of the graphs, corresponding to each input column.
 * @param volreg Makes the 'ynames' be the same as the 6 labels used in plug_volreg for Roll, Pitch, Yaw, I-S, R-L, and A-P movements.
 * @param thick Increase the line thickness used for plotting.
 * @param dashed Plot dashed lines between data points using specified colon-separated list of dash values (1: solid, 2: longer dashes, 3: shorter dashes).
 * @param setenv Set environment variable 'name' to 'val' for this run of the program only.
 * @param censor_rgb Set the color used for marking to a specified color.
 * @param censor Specify the filename of the censor .1D time series.
 * @param censortr Specify time indexes to be marked in the graph(s).
 * @param concat Specify the filename for the list of concatenated runs.
 * @param rbox Draw a rectangular box.
 * @param line Draw one line segment.
 *
 * @returns Parameter dictionary
 */
function v_1dplot_params(
    tsfiles: Array<InputPathType>,
    install: boolean = false,
    sep: boolean = false,
    one: boolean = false,
    sepscl: boolean = false,
    noline: V1dplotNolineParameters | null = null,
    box: boolean = false,
    hist: boolean = false,
    norm2: boolean = false,
    normx: boolean = false,
    norm1: boolean = false,
    demean: boolean = false,
    x: InputPathType | null = null,
    xl10: InputPathType | null = null,
    dx: number | null = null,
    xzero: number | null = null,
    nopush: boolean = false,
    ignore: number | null = null,
    use: number | null = null,
    xlabel: string | null = null,
    ylabel: string | null = null,
    plabel: string | null = null,
    title: string | null = null,
    wintitle: string | null = null,
    naked: boolean = false,
    aspect: number | null = null,
    stdin: boolean = false,
    ps: boolean = false,
    jpg: string | null = null,
    jpeg: string | null = null,
    png: string | null = null,
    pnm: string | null = null,
    pngs: string | null = null,
    jpgs: string | null = null,
    jpegs: string | null = null,
    pnms: string | null = null,
    ytran: string | null = null,
    xtran: string | null = null,
    xaxis: string | null = null,
    yaxis: string | null = null,
    ynames: Array<string> | null = null,
    volreg: boolean = false,
    thick: V1dplotThickParameters | null = null,
    dashed: string | null = null,
    setenv: string | null = null,
    censor_rgb: string | null = null,
    censor: InputPathType | null = null,
    censortr: Array<string> | null = null,
    concat: InputPathType | null = null,
    rbox: V1dplotRboxParameters | null = null,
    line: string | null = null,
): V1dplotParametersTagged {
    const params = {
        "@type": "afni/1dplot" as const,
        "tsfiles": tsfiles,
        "install": install,
        "sep": sep,
        "one": one,
        "sepscl": sepscl,
        "box": box,
        "hist": hist,
        "norm2": norm2,
        "normx": normx,
        "norm1": norm1,
        "demean": demean,
        "nopush": nopush,
        "naked": naked,
        "stdin": stdin,
        "ps": ps,
        "volreg": volreg,
    };
    if (noline !== null) {
        params["noline"] = noline;
    }
    if (x !== null) {
        params["x"] = x;
    }
    if (xl10 !== null) {
        params["xl10"] = xl10;
    }
    if (dx !== null) {
        params["dx"] = dx;
    }
    if (xzero !== null) {
        params["xzero"] = xzero;
    }
    if (ignore !== null) {
        params["ignore"] = ignore;
    }
    if (use !== null) {
        params["use"] = use;
    }
    if (xlabel !== null) {
        params["xlabel"] = xlabel;
    }
    if (ylabel !== null) {
        params["ylabel"] = ylabel;
    }
    if (plabel !== null) {
        params["plabel"] = plabel;
    }
    if (title !== null) {
        params["title"] = title;
    }
    if (wintitle !== null) {
        params["wintitle"] = wintitle;
    }
    if (aspect !== null) {
        params["aspect"] = aspect;
    }
    if (jpg !== null) {
        params["jpg"] = jpg;
    }
    if (jpeg !== null) {
        params["jpeg"] = jpeg;
    }
    if (png !== null) {
        params["png"] = png;
    }
    if (pnm !== null) {
        params["pnm"] = pnm;
    }
    if (pngs !== null) {
        params["pngs"] = pngs;
    }
    if (jpgs !== null) {
        params["jpgs"] = jpgs;
    }
    if (jpegs !== null) {
        params["jpegs"] = jpegs;
    }
    if (pnms !== null) {
        params["pnms"] = pnms;
    }
    if (ytran !== null) {
        params["ytran"] = ytran;
    }
    if (xtran !== null) {
        params["xtran"] = xtran;
    }
    if (xaxis !== null) {
        params["xaxis"] = xaxis;
    }
    if (yaxis !== null) {
        params["yaxis"] = yaxis;
    }
    if (ynames !== null) {
        params["ynames"] = ynames;
    }
    if (thick !== null) {
        params["thick"] = thick;
    }
    if (dashed !== null) {
        params["dashed"] = dashed;
    }
    if (setenv !== null) {
        params["setenv"] = setenv;
    }
    if (censor_rgb !== null) {
        params["censor_RGB"] = censor_rgb;
    }
    if (censor !== null) {
        params["censor"] = censor;
    }
    if (censortr !== null) {
        params["CENSORTR"] = censortr;
    }
    if (concat !== null) {
        params["concat"] = concat;
    }
    if (rbox !== null) {
        params["rbox"] = rbox;
    }
    if (line !== null) {
        params["line"] = line;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dplot_cargs(
    params: V1dplotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dplot");
    cargs.push(...(params["tsfiles"] ?? null).map(f => execution.inputFile(f)));
    if ((params["install"] ?? false)) {
        cargs.push("-install");
    }
    if ((params["sep"] ?? false)) {
        cargs.push("-sep");
    }
    if ((params["one"] ?? false)) {
        cargs.push("-one");
    }
    if ((params["sepscl"] ?? false)) {
        cargs.push("-sepscl");
    }
    if ((params["noline"] ?? null) !== null) {
        cargs.push(...v_1dplot_noline_cargs((params["noline"] ?? null), execution));
    }
    if ((params["box"] ?? false)) {
        cargs.push("-box");
    }
    if ((params["hist"] ?? false)) {
        cargs.push("-hist");
    }
    if ((params["norm2"] ?? false)) {
        cargs.push("-norm2");
    }
    if ((params["normx"] ?? false)) {
        cargs.push("-normx");
    }
    if ((params["norm1"] ?? false)) {
        cargs.push("-norm1");
    }
    if ((params["demean"] ?? false)) {
        cargs.push("-demean");
    }
    if ((params["x"] ?? null) !== null) {
        cargs.push(
            "-x",
            execution.inputFile((params["x"] ?? null))
        );
    }
    if ((params["xl10"] ?? null) !== null) {
        cargs.push(
            "-xl10",
            execution.inputFile((params["xl10"] ?? null))
        );
    }
    if ((params["dx"] ?? null) !== null) {
        cargs.push(
            "-dx",
            String((params["dx"] ?? null))
        );
    }
    if ((params["xzero"] ?? null) !== null) {
        cargs.push(
            "-xzero",
            String((params["xzero"] ?? null))
        );
    }
    if ((params["nopush"] ?? false)) {
        cargs.push("-nopush");
    }
    if ((params["ignore"] ?? null) !== null) {
        cargs.push(
            "-ignore",
            String((params["ignore"] ?? null))
        );
    }
    if ((params["use"] ?? null) !== null) {
        cargs.push(
            "-use",
            String((params["use"] ?? null))
        );
    }
    if ((params["xlabel"] ?? null) !== null) {
        cargs.push(
            "-xlabel",
            (params["xlabel"] ?? null)
        );
    }
    if ((params["ylabel"] ?? null) !== null) {
        cargs.push(
            "-ylabel",
            (params["ylabel"] ?? null)
        );
    }
    if ((params["plabel"] ?? null) !== null) {
        cargs.push(
            "-plabel",
            (params["plabel"] ?? null)
        );
    }
    if ((params["title"] ?? null) !== null) {
        cargs.push(
            "-title",
            (params["title"] ?? null)
        );
    }
    if ((params["wintitle"] ?? null) !== null) {
        cargs.push(
            "-wintitle",
            (params["wintitle"] ?? null)
        );
    }
    if ((params["naked"] ?? false)) {
        cargs.push("-naked");
    }
    if ((params["aspect"] ?? null) !== null) {
        cargs.push(
            "-aspect",
            String((params["aspect"] ?? null))
        );
    }
    if ((params["stdin"] ?? false)) {
        cargs.push("-stdin");
    }
    if ((params["ps"] ?? false)) {
        cargs.push("-ps");
    }
    if ((params["jpg"] ?? null) !== null) {
        cargs.push(
            "-jpg",
            (params["jpg"] ?? null)
        );
    }
    if ((params["jpeg"] ?? null) !== null) {
        cargs.push(
            "-jpeg",
            (params["jpeg"] ?? null)
        );
    }
    if ((params["png"] ?? null) !== null) {
        cargs.push(
            "-png",
            (params["png"] ?? null)
        );
    }
    if ((params["pnm"] ?? null) !== null) {
        cargs.push(
            "-pnm",
            (params["pnm"] ?? null)
        );
    }
    if ((params["pngs"] ?? null) !== null) {
        cargs.push(
            "-pngs",
            (params["pngs"] ?? null)
        );
    }
    if ((params["jpgs"] ?? null) !== null) {
        cargs.push(
            "-jpgs",
            (params["jpgs"] ?? null)
        );
    }
    if ((params["jpegs"] ?? null) !== null) {
        cargs.push(
            "-jpegs",
            (params["jpegs"] ?? null)
        );
    }
    if ((params["pnms"] ?? null) !== null) {
        cargs.push(
            "-pnms",
            (params["pnms"] ?? null)
        );
    }
    if ((params["ytran"] ?? null) !== null) {
        cargs.push(
            "-ytran",
            (params["ytran"] ?? null)
        );
    }
    if ((params["xtran"] ?? null) !== null) {
        cargs.push(
            "-xtran",
            (params["xtran"] ?? null)
        );
    }
    if ((params["xaxis"] ?? null) !== null) {
        cargs.push(
            "-xaxis",
            (params["xaxis"] ?? null)
        );
    }
    if ((params["yaxis"] ?? null) !== null) {
        cargs.push(
            "-yaxis",
            (params["yaxis"] ?? null)
        );
    }
    if ((params["ynames"] ?? null) !== null) {
        cargs.push(
            "-ynames",
            ...(params["ynames"] ?? null)
        );
    }
    if ((params["volreg"] ?? false)) {
        cargs.push("-volreg");
    }
    if ((params["thick"] ?? null) !== null) {
        cargs.push(...v_1dplot_thick_cargs((params["thick"] ?? null), execution));
    }
    if ((params["dashed"] ?? null) !== null) {
        cargs.push(
            "-dashed",
            (params["dashed"] ?? null)
        );
    }
    if ((params["setenv"] ?? null) !== null) {
        cargs.push(
            "-D",
            (params["setenv"] ?? null)
        );
    }
    if ((params["censor_RGB"] ?? null) !== null) {
        cargs.push(
            "-censor_RGB",
            (params["censor_RGB"] ?? null)
        );
    }
    if ((params["censor"] ?? null) !== null) {
        cargs.push(
            "-censor",
            execution.inputFile((params["censor"] ?? null))
        );
    }
    if ((params["CENSORTR"] ?? null) !== null) {
        cargs.push(
            "-CENSORTR",
            ...(params["CENSORTR"] ?? null)
        );
    }
    if ((params["concat"] ?? null) !== null) {
        cargs.push(
            "-concat",
            execution.inputFile((params["concat"] ?? null))
        );
    }
    if ((params["rbox"] ?? null) !== null) {
        cargs.push(...v_1dplot_rbox_cargs((params["rbox"] ?? null), execution));
    }
    if ((params["line"] ?? null) !== null) {
        cargs.push(
            "-line",
            (params["line"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1dplot_outputs(
    params: V1dplotParameters,
    execution: Execution,
): V1dplotOutputs {
    const ret: V1dplotOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 1dplot
 *
 * Graphs the columns of a *.1D time series file to the X11 screen, or to an image file (.jpg or .png).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dplotOutputs`).
 */
function v_1dplot_execute(
    params: V1dplotParameters,
    runner: Runner | null = null,
): V1dplotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DPLOT_METADATA);
    params = execution.params(params)
    const cargs = v_1dplot_cargs(params, execution)
    const ret = v_1dplot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 1dplot
 *
 * Graphs the columns of a *.1D time series file to the X11 screen, or to an image file (.jpg or .png).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param tsfiles Input time series files (*.1D) to be plotted.
 * @param install Install a new X11 colormap.
 * @param sep Plot each column in a separate sub-graph.
 * @param one Plot all columns together in one big graph.
 * @param sepscl Plot each column in a separate sub-graph and allow each sub-graph to have a different y-scale. This option is meaningless with -one!
 * @param noline Don't plot the connecting lines.
 * @param box Plot a small 'box' at each data point.
 * @param hist Plot graphs in histogram style (i.e., vertical boxes).
 * @param norm2 Independently scale each time series plotted to have L_2 norm = 1 (sum of squares).
 * @param normx Independently scale each time series plotted to have max absolute value = 1 (L_infinity norm).
 * @param norm1 Independently scale each time series plotted to have max sum of absolute values = 1 (L_1 norm).
 * @param demean Remove the mean from each time series before normalizing.
 * @param x Use for X axis the data in a specified .1D file.
 * @param xl10 Use log10 of the specified .1D file as the X axis.
 * @param dx Spacing between points on the x-axis.
 * @param xzero Initial x coordinate.
 * @param nopush Don't 'push' axes ranges outwards.
 * @param ignore Skip first 'nn' rows in the input file.
 * @param use Plot 'mm' points.
 * @param xlabel Put string 'aa' below the x-axis.
 * @param ylabel Put string 'aa' to the left of the y-axis.
 * @param plabel Put string 'pp' atop the plot.
 * @param title Same as -plabel, but only works with -ps/-png/-jpg/-pnm options.
 * @param wintitle Set string 'pp' as the title of the frame containing the plot.
 * @param naked Do NOT plot axes or labels, just the graph(s).
 * @param aspect Set the width-to-height ratio of the plot region to 'A'.
 * @param stdin Don't read from tsfile; instead, read from stdin and plot it.
 * @param ps Don't draw plot in a window; instead, write it to stdout in PostScript format.
 * @param jpg Render plot to JPEG image and save to a file named 'fname'.
 * @param jpeg Render plot to JPEG image and save to a file named 'fname'.
 * @param png Render plot to PNG image and save to a file named 'fname'.
 * @param pnm Render plot to PNM image and save to a file named 'fname'.
 * @param pngs Render plot to PNG image of specified size and save to a file named 'fname'.
 * @param jpgs Render plot to JPEG image of specified size and save to a file named 'fname'.
 * @param jpegs Render plot to JPEG image of specified size and save to a file named 'fname'.
 * @param pnms Render plot to PNM image of specified size and save to a file named 'fname'.
 * @param ytran Transform the data along the y-axis by applying the expression to each input value.
 * @param xtran Transform the data along the x-axis by applying the expression to each input value.
 * @param xaxis Set the x-axis to run from value 'b' to value 't', with 'n' major divisions and 'm' minor tic marks per major division.
 * @param yaxis Set the y-axis to run from value 'b' to value 't', with 'n' major divisions and 'm' minor tic marks per major division.
 * @param ynames Use the strings as labels to the right of the graphs, corresponding to each input column.
 * @param volreg Makes the 'ynames' be the same as the 6 labels used in plug_volreg for Roll, Pitch, Yaw, I-S, R-L, and A-P movements.
 * @param thick Increase the line thickness used for plotting.
 * @param dashed Plot dashed lines between data points using specified colon-separated list of dash values (1: solid, 2: longer dashes, 3: shorter dashes).
 * @param setenv Set environment variable 'name' to 'val' for this run of the program only.
 * @param censor_rgb Set the color used for marking to a specified color.
 * @param censor Specify the filename of the censor .1D time series.
 * @param censortr Specify time indexes to be marked in the graph(s).
 * @param concat Specify the filename for the list of concatenated runs.
 * @param rbox Draw a rectangular box.
 * @param line Draw one line segment.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dplotOutputs`).
 */
function v_1dplot(
    tsfiles: Array<InputPathType>,
    install: boolean = false,
    sep: boolean = false,
    one: boolean = false,
    sepscl: boolean = false,
    noline: V1dplotNolineParameters | null = null,
    box: boolean = false,
    hist: boolean = false,
    norm2: boolean = false,
    normx: boolean = false,
    norm1: boolean = false,
    demean: boolean = false,
    x: InputPathType | null = null,
    xl10: InputPathType | null = null,
    dx: number | null = null,
    xzero: number | null = null,
    nopush: boolean = false,
    ignore: number | null = null,
    use: number | null = null,
    xlabel: string | null = null,
    ylabel: string | null = null,
    plabel: string | null = null,
    title: string | null = null,
    wintitle: string | null = null,
    naked: boolean = false,
    aspect: number | null = null,
    stdin: boolean = false,
    ps: boolean = false,
    jpg: string | null = null,
    jpeg: string | null = null,
    png: string | null = null,
    pnm: string | null = null,
    pngs: string | null = null,
    jpgs: string | null = null,
    jpegs: string | null = null,
    pnms: string | null = null,
    ytran: string | null = null,
    xtran: string | null = null,
    xaxis: string | null = null,
    yaxis: string | null = null,
    ynames: Array<string> | null = null,
    volreg: boolean = false,
    thick: V1dplotThickParameters | null = null,
    dashed: string | null = null,
    setenv: string | null = null,
    censor_rgb: string | null = null,
    censor: InputPathType | null = null,
    censortr: Array<string> | null = null,
    concat: InputPathType | null = null,
    rbox: V1dplotRboxParameters | null = null,
    line: string | null = null,
    runner: Runner | null = null,
): V1dplotOutputs {
    const params = v_1dplot_params(tsfiles, install, sep, one, sepscl, noline, box, hist, norm2, normx, norm1, demean, x, xl10, dx, xzero, nopush, ignore, use, xlabel, ylabel, plabel, title, wintitle, naked, aspect, stdin, ps, jpg, jpeg, png, pnm, pngs, jpgs, jpegs, pnms, ytran, xtran, xaxis, yaxis, ynames, volreg, thick, dashed, setenv, censor_rgb, censor, censortr, concat, rbox, line)
    return v_1dplot_execute(params, runner);
}


export {
      V1dplotOutputs,
      V_1DPLOT_METADATA,
      v_1dplot,
      v_1dplot_execute,
      v_1dplot_noline_params,
      v_1dplot_params,
      v_1dplot_rbox_params,
      v_1dplot_thick_params,
};
