// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SUMA_ALIGN_TO_EXPERIMENT_METADATA: Metadata = {
    id: "759a36ef356f1ca0b7e7edac35edf0400e398072.boutiques",
    name: "@SUMA_AlignToExperiment",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VSumaAlignToExperimentParameters {
    "@type"?: "afni/@SUMA_AlignToExperiment";
    "exp_anat": InputPathType;
    "surf_anat": InputPathType;
    "dxyz"?: number | null | undefined;
    "out_dxyz"?: number | null | undefined;
    "wd": boolean;
    "al": boolean;
    "al_opt"?: string | null | undefined;
    "ok_change_view": boolean;
    "strip_skull"?: string | null | undefined;
    "skull_strip_opt"?: string | null | undefined;
    "align_centers": boolean;
    "init_xform"?: InputPathType | null | undefined;
    "EA_clip_below"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "surf_anat_followers"?: string | null | undefined;
    "followers_interp"?: string | null | undefined;
    "atlas_followers": boolean;
    "echo": boolean;
    "keep_tmp": boolean;
    "overwrite_resp"?: string | null | undefined;
}
type VSumaAlignToExperimentParametersTagged = Required<Pick<VSumaAlignToExperimentParameters, '@type'>> & VSumaAlignToExperimentParameters;


/**
 * Output object returned when calling `VSumaAlignToExperimentParameters(...)`.
 *
 * @interface
 */
interface VSumaAlignToExperimentOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume after alignment.
     */
    aligned_volume: OutputPathType | null;
    /**
     * Output followers dataset after transforming.
     */
    additional_followers: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param exp_anat Name of high resolution anatomical data set in register with experimental data.
 * @param surf_anat Path and name of high resolution antomical data set used to create the surface.
 * @param dxyz Optional parameter to downsample anatomical volumes to dxyz mm voxel resolution before registration.
 * @param out_dxyz Output the final aligned volume at a cubic voxelsize of DXYZmm.
 * @param wd Use 3dWarpDrive's general affine transform (12 param) instead of 3dvolreg's 6 parameters.
 * @param al Use 3dAllineate to do the 12 parameter alignment. Cost function is 'lpa'.
 * @param al_opt Specify set of options to pass to 3dAllineate.
 * @param ok_change_view Be quiet when view of registered volume is changed to match that of the Experiment_Anatomy.
 * @param strip_skull Use 3dSkullStrip to remove non-brain tissue.
 * @param skull_strip_opt Pass the options to 3dSkullStrip.
 * @param align_centers Add an additional transformation to align the volume centers.
 * @param init_xform Apply affine transform file to Surface_Anatomy before beginning registration.
 * @param ea_clip_below Set slices below CLPmm in 'Experiment Anatomy' to zero.
 * @param prefix Prefix for the output volume.
 * @param surf_anat_followers Apply the same alignment transform to additional datasets.
 * @param followers_interp Set the interpolation mode for the follower datasets.
 * @param atlas_followers Automatically set the followers to be atlases in the directory of -surf_anat.
 * @param echo Echo all commands to terminal for debugging.
 * @param keep_tmp Keep temporary files for debugging.
 * @param overwrite_resp Answer 'overwrite' questions automatically.
 *
 * @returns Parameter dictionary
 */
function v__suma_align_to_experiment_params(
    exp_anat: InputPathType,
    surf_anat: InputPathType,
    dxyz: number | null = null,
    out_dxyz: number | null = null,
    wd: boolean = false,
    al: boolean = false,
    al_opt: string | null = null,
    ok_change_view: boolean = false,
    strip_skull: string | null = null,
    skull_strip_opt: string | null = null,
    align_centers: boolean = false,
    init_xform: InputPathType | null = null,
    ea_clip_below: number | null = null,
    prefix: string | null = null,
    surf_anat_followers: string | null = null,
    followers_interp: string | null = null,
    atlas_followers: boolean = false,
    echo: boolean = false,
    keep_tmp: boolean = false,
    overwrite_resp: string | null = null,
): VSumaAlignToExperimentParametersTagged {
    const params = {
        "@type": "afni/@SUMA_AlignToExperiment" as const,
        "exp_anat": exp_anat,
        "surf_anat": surf_anat,
        "wd": wd,
        "al": al,
        "ok_change_view": ok_change_view,
        "align_centers": align_centers,
        "atlas_followers": atlas_followers,
        "echo": echo,
        "keep_tmp": keep_tmp,
    };
    if (dxyz !== null) {
        params["dxyz"] = dxyz;
    }
    if (out_dxyz !== null) {
        params["out_dxyz"] = out_dxyz;
    }
    if (al_opt !== null) {
        params["al_opt"] = al_opt;
    }
    if (strip_skull !== null) {
        params["strip_skull"] = strip_skull;
    }
    if (skull_strip_opt !== null) {
        params["skull_strip_opt"] = skull_strip_opt;
    }
    if (init_xform !== null) {
        params["init_xform"] = init_xform;
    }
    if (ea_clip_below !== null) {
        params["EA_clip_below"] = ea_clip_below;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (surf_anat_followers !== null) {
        params["surf_anat_followers"] = surf_anat_followers;
    }
    if (followers_interp !== null) {
        params["followers_interp"] = followers_interp;
    }
    if (overwrite_resp !== null) {
        params["overwrite_resp"] = overwrite_resp;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__suma_align_to_experiment_cargs(
    params: VSumaAlignToExperimentParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@SUMA_AlignToExperiment");
    cargs.push(
        "-exp_anat",
        execution.inputFile((params["exp_anat"] ?? null))
    );
    cargs.push(
        "-surf_anat",
        execution.inputFile((params["surf_anat"] ?? null))
    );
    if ((params["dxyz"] ?? null) !== null) {
        cargs.push(
            "-dxyz",
            String((params["dxyz"] ?? null))
        );
    }
    if ((params["out_dxyz"] ?? null) !== null) {
        cargs.push(
            "-out_dxyz",
            String((params["out_dxyz"] ?? null))
        );
    }
    if ((params["wd"] ?? false)) {
        cargs.push("-wd");
    }
    if ((params["al"] ?? false)) {
        cargs.push("-al");
    }
    if ((params["al_opt"] ?? null) !== null) {
        cargs.push(
            "-al_opt",
            (params["al_opt"] ?? null)
        );
    }
    if ((params["ok_change_view"] ?? false)) {
        cargs.push("-ok_change_view");
    }
    if ((params["strip_skull"] ?? null) !== null) {
        cargs.push(
            "-strip_skull",
            (params["strip_skull"] ?? null)
        );
    }
    if ((params["skull_strip_opt"] ?? null) !== null) {
        cargs.push(
            "-skull_strip_opt",
            (params["skull_strip_opt"] ?? null)
        );
    }
    if ((params["align_centers"] ?? false)) {
        cargs.push("-align_centers");
    }
    if ((params["init_xform"] ?? null) !== null) {
        cargs.push(
            "-init_xform",
            execution.inputFile((params["init_xform"] ?? null))
        );
    }
    if ((params["EA_clip_below"] ?? null) !== null) {
        cargs.push(
            "-EA_clip_below",
            String((params["EA_clip_below"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["surf_anat_followers"] ?? null) !== null) {
        cargs.push(
            "-surf_anat_followers",
            (params["surf_anat_followers"] ?? null)
        );
    }
    if ((params["followers_interp"] ?? null) !== null) {
        cargs.push(
            "-followers_interp",
            (params["followers_interp"] ?? null)
        );
    }
    if ((params["atlas_followers"] ?? false)) {
        cargs.push("-atlas_followers");
    }
    if ((params["echo"] ?? false)) {
        cargs.push("-echo");
    }
    if ((params["keep_tmp"] ?? false)) {
        cargs.push("-keep_tmp");
    }
    if ((params["overwrite_resp"] ?? null) !== null) {
        cargs.push(
            "-overwrite_resp",
            (params["overwrite_resp"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__suma_align_to_experiment_outputs(
    params: VSumaAlignToExperimentParameters,
    execution: Execution,
): VSumaAlignToExperimentOutputs {
    const ret: VSumaAlignToExperimentOutputs = {
        root: execution.outputFile("."),
        aligned_volume: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_Alnd_Exp.nii.gz"].join('')) : null,
        additional_followers: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_Alnd_Exp_Fdset.nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * @SUMA_AlignToExperiment
 *
 * Creates a version of Surface Anatomy that is registered to Experiment Anatomy.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VSumaAlignToExperimentOutputs`).
 */
function v__suma_align_to_experiment_execute(
    params: VSumaAlignToExperimentParameters,
    runner: Runner | null = null,
): VSumaAlignToExperimentOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SUMA_ALIGN_TO_EXPERIMENT_METADATA);
    params = execution.params(params)
    const cargs = v__suma_align_to_experiment_cargs(params, execution)
    const ret = v__suma_align_to_experiment_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @SUMA_AlignToExperiment
 *
 * Creates a version of Surface Anatomy that is registered to Experiment Anatomy.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param exp_anat Name of high resolution anatomical data set in register with experimental data.
 * @param surf_anat Path and name of high resolution antomical data set used to create the surface.
 * @param dxyz Optional parameter to downsample anatomical volumes to dxyz mm voxel resolution before registration.
 * @param out_dxyz Output the final aligned volume at a cubic voxelsize of DXYZmm.
 * @param wd Use 3dWarpDrive's general affine transform (12 param) instead of 3dvolreg's 6 parameters.
 * @param al Use 3dAllineate to do the 12 parameter alignment. Cost function is 'lpa'.
 * @param al_opt Specify set of options to pass to 3dAllineate.
 * @param ok_change_view Be quiet when view of registered volume is changed to match that of the Experiment_Anatomy.
 * @param strip_skull Use 3dSkullStrip to remove non-brain tissue.
 * @param skull_strip_opt Pass the options to 3dSkullStrip.
 * @param align_centers Add an additional transformation to align the volume centers.
 * @param init_xform Apply affine transform file to Surface_Anatomy before beginning registration.
 * @param ea_clip_below Set slices below CLPmm in 'Experiment Anatomy' to zero.
 * @param prefix Prefix for the output volume.
 * @param surf_anat_followers Apply the same alignment transform to additional datasets.
 * @param followers_interp Set the interpolation mode for the follower datasets.
 * @param atlas_followers Automatically set the followers to be atlases in the directory of -surf_anat.
 * @param echo Echo all commands to terminal for debugging.
 * @param keep_tmp Keep temporary files for debugging.
 * @param overwrite_resp Answer 'overwrite' questions automatically.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VSumaAlignToExperimentOutputs`).
 */
function v__suma_align_to_experiment(
    exp_anat: InputPathType,
    surf_anat: InputPathType,
    dxyz: number | null = null,
    out_dxyz: number | null = null,
    wd: boolean = false,
    al: boolean = false,
    al_opt: string | null = null,
    ok_change_view: boolean = false,
    strip_skull: string | null = null,
    skull_strip_opt: string | null = null,
    align_centers: boolean = false,
    init_xform: InputPathType | null = null,
    ea_clip_below: number | null = null,
    prefix: string | null = null,
    surf_anat_followers: string | null = null,
    followers_interp: string | null = null,
    atlas_followers: boolean = false,
    echo: boolean = false,
    keep_tmp: boolean = false,
    overwrite_resp: string | null = null,
    runner: Runner | null = null,
): VSumaAlignToExperimentOutputs {
    const params = v__suma_align_to_experiment_params(exp_anat, surf_anat, dxyz, out_dxyz, wd, al, al_opt, ok_change_view, strip_skull, skull_strip_opt, align_centers, init_xform, ea_clip_below, prefix, surf_anat_followers, followers_interp, atlas_followers, echo, keep_tmp, overwrite_resp)
    return v__suma_align_to_experiment_execute(params, runner);
}


export {
      VSumaAlignToExperimentOutputs,
      V__SUMA_ALIGN_TO_EXPERIMENT_METADATA,
      v__suma_align_to_experiment,
      v__suma_align_to_experiment_execute,
      v__suma_align_to_experiment_params,
};
