// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CREATE_DENSE_TIMESERIES_METADATA: Metadata = {
    id: "cda17688630bad9be0d1cf4cb8aac8005b0fc14f.boutiques",
    name: "cifti-create-dense-timeseries",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiCreateDenseTimeseriesVolumeParameters {
    "@type": "workbench.cifti-create-dense-timeseries.volume";
    "volume_data": InputPathType;
    "structure_label_volume": InputPathType;
}


interface CiftiCreateDenseTimeseriesLeftMetricParameters {
    "@type": "workbench.cifti-create-dense-timeseries.left_metric";
    "metric": InputPathType;
    "opt_roi_left_roi_metric"?: InputPathType | null | undefined;
}


interface CiftiCreateDenseTimeseriesRightMetricParameters {
    "@type": "workbench.cifti-create-dense-timeseries.right_metric";
    "metric": InputPathType;
    "opt_roi_right_roi_metric"?: InputPathType | null | undefined;
}


interface CiftiCreateDenseTimeseriesCerebellumMetricParameters {
    "@type": "workbench.cifti-create-dense-timeseries.cerebellum_metric";
    "metric": InputPathType;
    "opt_roi_cerebellum_roi_metric"?: InputPathType | null | undefined;
}


interface CiftiCreateDenseTimeseriesParameters {
    "@type": "workbench.cifti-create-dense-timeseries";
    "cifti_out": string;
    "volume"?: CiftiCreateDenseTimeseriesVolumeParameters | null | undefined;
    "left_metric"?: CiftiCreateDenseTimeseriesLeftMetricParameters | null | undefined;
    "right_metric"?: CiftiCreateDenseTimeseriesRightMetricParameters | null | undefined;
    "cerebellum_metric"?: CiftiCreateDenseTimeseriesCerebellumMetricParameters | null | undefined;
    "opt_timestep_interval"?: number | null | undefined;
    "opt_timestart_start"?: number | null | undefined;
    "opt_unit_unit"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-create-dense-timeseries": cifti_create_dense_timeseries_cargs,
        "workbench.cifti-create-dense-timeseries.volume": cifti_create_dense_timeseries_volume_cargs,
        "workbench.cifti-create-dense-timeseries.left_metric": cifti_create_dense_timeseries_left_metric_cargs,
        "workbench.cifti-create-dense-timeseries.right_metric": cifti_create_dense_timeseries_right_metric_cargs,
        "workbench.cifti-create-dense-timeseries.cerebellum_metric": cifti_create_dense_timeseries_cerebellum_metric_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-create-dense-timeseries": cifti_create_dense_timeseries_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param volume_data volume file containing all voxel data for all volume structures
 * @param structure_label_volume label volume file containing labels for cifti structures
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_timeseries_volume_params(
    volume_data: InputPathType,
    structure_label_volume: InputPathType,
): CiftiCreateDenseTimeseriesVolumeParameters {
    const params = {
        "@type": "workbench.cifti-create-dense-timeseries.volume" as const,
        "volume_data": volume_data,
        "structure_label_volume": structure_label_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_timeseries_volume_cargs(
    params: CiftiCreateDenseTimeseriesVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume");
    cargs.push(execution.inputFile((params["volume_data"] ?? null)));
    cargs.push(execution.inputFile((params["structure_label_volume"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param metric the metric file
 * @param opt_roi_left_roi_metric roi of vertices to use from left surface: the ROI as a metric file
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_timeseries_left_metric_params(
    metric: InputPathType,
    opt_roi_left_roi_metric: InputPathType | null = null,
): CiftiCreateDenseTimeseriesLeftMetricParameters {
    const params = {
        "@type": "workbench.cifti-create-dense-timeseries.left_metric" as const,
        "metric": metric,
    };
    if (opt_roi_left_roi_metric !== null) {
        params["opt_roi_left_roi_metric"] = opt_roi_left_roi_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_timeseries_left_metric_cargs(
    params: CiftiCreateDenseTimeseriesLeftMetricParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-metric");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    if ((params["opt_roi_left_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi-left",
            execution.inputFile((params["opt_roi_left_roi_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param metric the metric file
 * @param opt_roi_right_roi_metric roi of vertices to use from right surface: the ROI as a metric file
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_timeseries_right_metric_params(
    metric: InputPathType,
    opt_roi_right_roi_metric: InputPathType | null = null,
): CiftiCreateDenseTimeseriesRightMetricParameters {
    const params = {
        "@type": "workbench.cifti-create-dense-timeseries.right_metric" as const,
        "metric": metric,
    };
    if (opt_roi_right_roi_metric !== null) {
        params["opt_roi_right_roi_metric"] = opt_roi_right_roi_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_timeseries_right_metric_cargs(
    params: CiftiCreateDenseTimeseriesRightMetricParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-metric");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    if ((params["opt_roi_right_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi-right",
            execution.inputFile((params["opt_roi_right_roi_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param metric the metric file
 * @param opt_roi_cerebellum_roi_metric roi of vertices to use from right surface: the ROI as a metric file
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_timeseries_cerebellum_metric_params(
    metric: InputPathType,
    opt_roi_cerebellum_roi_metric: InputPathType | null = null,
): CiftiCreateDenseTimeseriesCerebellumMetricParameters {
    const params = {
        "@type": "workbench.cifti-create-dense-timeseries.cerebellum_metric" as const,
        "metric": metric,
    };
    if (opt_roi_cerebellum_roi_metric !== null) {
        params["opt_roi_cerebellum_roi_metric"] = opt_roi_cerebellum_roi_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_timeseries_cerebellum_metric_cargs(
    params: CiftiCreateDenseTimeseriesCerebellumMetricParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-metric");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    if ((params["opt_roi_cerebellum_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi-cerebellum",
            execution.inputFile((params["opt_roi_cerebellum_roi_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `cifti_create_dense_timeseries(...)`.
 *
 * @interface
 */
interface CiftiCreateDenseTimeseriesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_out the output cifti file
 * @param volume volume component
 * @param left_metric metric for left surface
 * @param right_metric metric for left surface
 * @param cerebellum_metric metric for the cerebellum
 * @param opt_timestep_interval set the timestep: the timestep, in seconds (default 1.0)
 * @param opt_timestart_start set the start time: the time at the first frame, in seconds (default 0.0)
 * @param opt_unit_unit use a unit other than time: unit identifier (default SECOND)
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_timeseries_params(
    cifti_out: string,
    volume: CiftiCreateDenseTimeseriesVolumeParameters | null = null,
    left_metric: CiftiCreateDenseTimeseriesLeftMetricParameters | null = null,
    right_metric: CiftiCreateDenseTimeseriesRightMetricParameters | null = null,
    cerebellum_metric: CiftiCreateDenseTimeseriesCerebellumMetricParameters | null = null,
    opt_timestep_interval: number | null = null,
    opt_timestart_start: number | null = null,
    opt_unit_unit: string | null = null,
): CiftiCreateDenseTimeseriesParameters {
    const params = {
        "@type": "workbench.cifti-create-dense-timeseries" as const,
        "cifti_out": cifti_out,
    };
    if (volume !== null) {
        params["volume"] = volume;
    }
    if (left_metric !== null) {
        params["left_metric"] = left_metric;
    }
    if (right_metric !== null) {
        params["right_metric"] = right_metric;
    }
    if (cerebellum_metric !== null) {
        params["cerebellum_metric"] = cerebellum_metric;
    }
    if (opt_timestep_interval !== null) {
        params["opt_timestep_interval"] = opt_timestep_interval;
    }
    if (opt_timestart_start !== null) {
        params["opt_timestart_start"] = opt_timestart_start;
    }
    if (opt_unit_unit !== null) {
        params["opt_unit_unit"] = opt_unit_unit;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_timeseries_cargs(
    params: CiftiCreateDenseTimeseriesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-create-dense-timeseries");
    cargs.push((params["cifti_out"] ?? null));
    if ((params["volume"] ?? null) !== null) {
        cargs.push(...dynCargs((params["volume"] ?? null)["@type"])((params["volume"] ?? null), execution));
    }
    if ((params["left_metric"] ?? null) !== null) {
        cargs.push(...dynCargs((params["left_metric"] ?? null)["@type"])((params["left_metric"] ?? null), execution));
    }
    if ((params["right_metric"] ?? null) !== null) {
        cargs.push(...dynCargs((params["right_metric"] ?? null)["@type"])((params["right_metric"] ?? null), execution));
    }
    if ((params["cerebellum_metric"] ?? null) !== null) {
        cargs.push(...dynCargs((params["cerebellum_metric"] ?? null)["@type"])((params["cerebellum_metric"] ?? null), execution));
    }
    if ((params["opt_timestep_interval"] ?? null) !== null) {
        cargs.push(
            "-timestep",
            String((params["opt_timestep_interval"] ?? null))
        );
    }
    if ((params["opt_timestart_start"] ?? null) !== null) {
        cargs.push(
            "-timestart",
            String((params["opt_timestart_start"] ?? null))
        );
    }
    if ((params["opt_unit_unit"] ?? null) !== null) {
        cargs.push(
            "-unit",
            (params["opt_unit_unit"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_create_dense_timeseries_outputs(
    params: CiftiCreateDenseTimeseriesParameters,
    execution: Execution,
): CiftiCreateDenseTimeseriesOutputs {
    const ret: CiftiCreateDenseTimeseriesOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Create a cifti dense timeseries.
 *
 * All input files must have the same number of columns/subvolumes.  Only the specified components will be in the output cifti.  At least one component must be specified.
 *
 * See -volume-label-import and -volume-help for format details of label volume files.  The structure-label-volume should have some of the label names from this list, all other label names will be ignored:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT
 *
 * The -unit option accepts these values:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CiftiCreateDenseTimeseriesOutputs`).
 */
function cifti_create_dense_timeseries_execute(
    params: CiftiCreateDenseTimeseriesParameters,
    execution: Execution,
): CiftiCreateDenseTimeseriesOutputs {
    params = execution.params(params)
    const cargs = cifti_create_dense_timeseries_cargs(params, execution)
    const ret = cifti_create_dense_timeseries_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Create a cifti dense timeseries.
 *
 * All input files must have the same number of columns/subvolumes.  Only the specified components will be in the output cifti.  At least one component must be specified.
 *
 * See -volume-label-import and -volume-help for format details of label volume files.  The structure-label-volume should have some of the label names from this list, all other label names will be ignored:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT
 *
 * The -unit option accepts these values:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_out the output cifti file
 * @param volume volume component
 * @param left_metric metric for left surface
 * @param right_metric metric for left surface
 * @param cerebellum_metric metric for the cerebellum
 * @param opt_timestep_interval set the timestep: the timestep, in seconds (default 1.0)
 * @param opt_timestart_start set the start time: the time at the first frame, in seconds (default 0.0)
 * @param opt_unit_unit use a unit other than time: unit identifier (default SECOND)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiCreateDenseTimeseriesOutputs`).
 */
function cifti_create_dense_timeseries(
    cifti_out: string,
    volume: CiftiCreateDenseTimeseriesVolumeParameters | null = null,
    left_metric: CiftiCreateDenseTimeseriesLeftMetricParameters | null = null,
    right_metric: CiftiCreateDenseTimeseriesRightMetricParameters | null = null,
    cerebellum_metric: CiftiCreateDenseTimeseriesCerebellumMetricParameters | null = null,
    opt_timestep_interval: number | null = null,
    opt_timestart_start: number | null = null,
    opt_unit_unit: string | null = null,
    runner: Runner | null = null,
): CiftiCreateDenseTimeseriesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CREATE_DENSE_TIMESERIES_METADATA);
    const params = cifti_create_dense_timeseries_params(cifti_out, volume, left_metric, right_metric, cerebellum_metric, opt_timestep_interval, opt_timestart_start, opt_unit_unit)
    return cifti_create_dense_timeseries_execute(params, execution);
}


export {
      CIFTI_CREATE_DENSE_TIMESERIES_METADATA,
      CiftiCreateDenseTimeseriesCerebellumMetricParameters,
      CiftiCreateDenseTimeseriesLeftMetricParameters,
      CiftiCreateDenseTimeseriesOutputs,
      CiftiCreateDenseTimeseriesParameters,
      CiftiCreateDenseTimeseriesRightMetricParameters,
      CiftiCreateDenseTimeseriesVolumeParameters,
      cifti_create_dense_timeseries,
      cifti_create_dense_timeseries_cargs,
      cifti_create_dense_timeseries_cerebellum_metric_cargs,
      cifti_create_dense_timeseries_cerebellum_metric_params,
      cifti_create_dense_timeseries_execute,
      cifti_create_dense_timeseries_left_metric_cargs,
      cifti_create_dense_timeseries_left_metric_params,
      cifti_create_dense_timeseries_outputs,
      cifti_create_dense_timeseries_params,
      cifti_create_dense_timeseries_right_metric_cargs,
      cifti_create_dense_timeseries_right_metric_params,
      cifti_create_dense_timeseries_volume_cargs,
      cifti_create_dense_timeseries_volume_params,
};
