// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLINTERLEAVE_METADATA: Metadata = {
    id: "214e7be443b411fb9ce6dd8471f2c49ae690f698.boutiques",
    name: "fslinterleave",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslinterleaveParameters {
    "__STYXTYPE__": "fslinterleave";
    "infile1": InputPathType;
    "infile2": InputPathType;
    "outfile": string;
    "reverse_slice_order_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslinterleave": fslinterleave_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslinterleave": fslinterleave_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslinterleave(...)`.
 *
 * @interface
 */
interface FslinterleaveOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Interleaved output image
     */
    interleaved_output: OutputPathType;
}


function fslinterleave_params(
    infile1: InputPathType,
    infile2: InputPathType,
    outfile: string,
    reverse_slice_order_flag: boolean = false,
): FslinterleaveParameters {
    /**
     * Build parameters.
    
     * @param infile1 First input image
     * @param infile2 Second input image
     * @param outfile Output interleaved image
     * @param reverse_slice_order_flag Reverse slice order
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslinterleave" as const,
        "infile1": infile1,
        "infile2": infile2,
        "outfile": outfile,
        "reverse_slice_order_flag": reverse_slice_order_flag,
    };
    return params;
}


function fslinterleave_cargs(
    params: FslinterleaveParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslinterleave");
    cargs.push(execution.inputFile((params["infile1"] ?? null)));
    cargs.push(execution.inputFile((params["infile2"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    if ((params["reverse_slice_order_flag"] ?? null)) {
        cargs.push("-i");
    }
    return cargs;
}


function fslinterleave_outputs(
    params: FslinterleaveParameters,
    execution: Execution,
): FslinterleaveOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslinterleaveOutputs = {
        root: execution.outputFile("."),
        interleaved_output: execution.outputFile([(params["outfile"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


function fslinterleave_execute(
    params: FslinterleaveParameters,
    execution: Execution,
): FslinterleaveOutputs {
    /**
     * Interleaves two input images slice-by-slice to produce an output image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslinterleaveOutputs`).
     */
    params = execution.params(params)
    const cargs = fslinterleave_cargs(params, execution)
    const ret = fslinterleave_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslinterleave(
    infile1: InputPathType,
    infile2: InputPathType,
    outfile: string,
    reverse_slice_order_flag: boolean = false,
    runner: Runner | null = null,
): FslinterleaveOutputs {
    /**
     * Interleaves two input images slice-by-slice to produce an output image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param infile1 First input image
     * @param infile2 Second input image
     * @param outfile Output interleaved image
     * @param reverse_slice_order_flag Reverse slice order
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslinterleaveOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLINTERLEAVE_METADATA);
    const params = fslinterleave_params(infile1, infile2, outfile, reverse_slice_order_flag)
    return fslinterleave_execute(params, execution);
}


export {
      FSLINTERLEAVE_METADATA,
      FslinterleaveOutputs,
      FslinterleaveParameters,
      fslinterleave,
      fslinterleave_params,
};
