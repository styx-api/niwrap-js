// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_N4_BIAS_FIELD_CORRECTION_FS_METADATA: Metadata = {
    id: "f7c05eb76747f2bed1da5f76ca71a39e0e609b4c.boutiques",
    name: "AntsN4BiasFieldCorrectionFs",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface AntsN4BiasFieldCorrectionFsParameters {
    "@type": "freesurfer.AntsN4BiasFieldCorrectionFs";
    "input_file": InputPathType;
    "output_file": string;
    "mask_file"?: InputPathType | null | undefined;
    "shrink_factor"?: number | null | undefined;
    "iterations"?: Array<number> | null | undefined;
    "output_dtype"?: string | null | undefined;
    "replace_zeros"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.AntsN4BiasFieldCorrectionFs": ants_n4_bias_field_correction_fs_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.AntsN4BiasFieldCorrectionFs": ants_n4_bias_field_correction_fs_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_n4_bias_field_correction_fs(...)`.
 *
 * @interface
 */
interface AntsN4BiasFieldCorrectionFsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected volume output file.
     */
    corrected_output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input volume file.
 * @param output_file Corrected output volume file.
 * @param mask_file Use image mask during correction.
 * @param shrink_factor Resample factor to decrease computation time. Default is 4.
 * @param iterations Number of resolutions and max iterations per resolution. Default is `50 50 50 50`, which indicates 4 fitting levels with 50 iterations each.
 * @param output_dtype Corrected output data type. Can be float, uchar, or int. Default is float.
 * @param replace_zeros Replace 0s with offset + scale*rand(). Values will be remasked in the output if remask=1.
 *
 * @returns Parameter dictionary
 */
function ants_n4_bias_field_correction_fs_params(
    input_file: InputPathType,
    output_file: string,
    mask_file: InputPathType | null = null,
    shrink_factor: number | null = null,
    iterations: Array<number> | null = null,
    output_dtype: string | null = null,
    replace_zeros: string | null = null,
): AntsN4BiasFieldCorrectionFsParameters {
    const params = {
        "@type": "freesurfer.AntsN4BiasFieldCorrectionFs" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (shrink_factor !== null) {
        params["shrink_factor"] = shrink_factor;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (output_dtype !== null) {
        params["output_dtype"] = output_dtype;
    }
    if (replace_zeros !== null) {
        params["replace_zeros"] = replace_zeros;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_n4_bias_field_correction_fs_cargs(
    params: AntsN4BiasFieldCorrectionFsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("AntsN4BiasFieldCorrectionFs");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["shrink_factor"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["shrink_factor"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-t",
            ...(params["iterations"] ?? null).map(String)
        );
    }
    if ((params["output_dtype"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["output_dtype"] ?? null)
        );
    }
    if ((params["replace_zeros"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["replace_zeros"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_n4_bias_field_correction_fs_outputs(
    params: AntsN4BiasFieldCorrectionFsParameters,
    execution: Execution,
): AntsN4BiasFieldCorrectionFsOutputs {
    const ret: AntsN4BiasFieldCorrectionFsOutputs = {
        root: execution.outputFile("."),
        corrected_output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * AntsN4BiasFieldCorrectionFs
 *
 * Runs N4 (nonparameteric, nonuniform normalization) retrospective bias correction on an image. This program wraps the AntsN4BiasFieldCorrection utility available in the ANTs package.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsN4BiasFieldCorrectionFsOutputs`).
 */
function ants_n4_bias_field_correction_fs_execute(
    params: AntsN4BiasFieldCorrectionFsParameters,
    runner: Runner | null = null,
): AntsN4BiasFieldCorrectionFsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_N4_BIAS_FIELD_CORRECTION_FS_METADATA);
    params = execution.params(params)
    const cargs = ants_n4_bias_field_correction_fs_cargs(params, execution)
    const ret = ants_n4_bias_field_correction_fs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * AntsN4BiasFieldCorrectionFs
 *
 * Runs N4 (nonparameteric, nonuniform normalization) retrospective bias correction on an image. This program wraps the AntsN4BiasFieldCorrection utility available in the ANTs package.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input volume file.
 * @param output_file Corrected output volume file.
 * @param mask_file Use image mask during correction.
 * @param shrink_factor Resample factor to decrease computation time. Default is 4.
 * @param iterations Number of resolutions and max iterations per resolution. Default is `50 50 50 50`, which indicates 4 fitting levels with 50 iterations each.
 * @param output_dtype Corrected output data type. Can be float, uchar, or int. Default is float.
 * @param replace_zeros Replace 0s with offset + scale*rand(). Values will be remasked in the output if remask=1.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsN4BiasFieldCorrectionFsOutputs`).
 */
function ants_n4_bias_field_correction_fs(
    input_file: InputPathType,
    output_file: string,
    mask_file: InputPathType | null = null,
    shrink_factor: number | null = null,
    iterations: Array<number> | null = null,
    output_dtype: string | null = null,
    replace_zeros: string | null = null,
    runner: Runner | null = null,
): AntsN4BiasFieldCorrectionFsOutputs {
    const params = ants_n4_bias_field_correction_fs_params(input_file, output_file, mask_file, shrink_factor, iterations, output_dtype, replace_zeros)
    return ants_n4_bias_field_correction_fs_execute(params, runner);
}


export {
      ANTS_N4_BIAS_FIELD_CORRECTION_FS_METADATA,
      AntsN4BiasFieldCorrectionFsOutputs,
      AntsN4BiasFieldCorrectionFsParameters,
      ants_n4_bias_field_correction_fs,
      ants_n4_bias_field_correction_fs_execute,
      ants_n4_bias_field_correction_fs_params,
};
