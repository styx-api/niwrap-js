// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_SUBJECT_MIXED_METADATA: Metadata = {
    id: "3c981548ab479f97d30e80a5cf34b82cfb07797d.boutiques",
    name: "label_subject_mixed",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LabelSubjectMixedParameters {
    "@type": "freesurfer.label_subject_mixed";
    "brain_mask": InputPathType;
    "norm_volume": InputPathType;
    "transform": InputPathType;
    "gca_file": InputPathType;
    "aseg_output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.label_subject_mixed": label_subject_mixed_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.label_subject_mixed": label_subject_mixed_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `label_subject_mixed(...)`.
 *
 * @interface
 */
interface LabelSubjectMixedOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Labeled segmentation output
     */
    output_aseg: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param brain_mask Brain mask to be used for final labeling
 * @param norm_volume Normalized volume
 * @param transform Transform file in LTA format
 * @param gca_file Gaussian classifier array (GCA) file
 * @param aseg_output Output aseg file
 *
 * @returns Parameter dictionary
 */
function label_subject_mixed_params(
    brain_mask: InputPathType,
    norm_volume: InputPathType,
    transform: InputPathType,
    gca_file: InputPathType,
    aseg_output: string,
): LabelSubjectMixedParameters {
    const params = {
        "@type": "freesurfer.label_subject_mixed" as const,
        "brain_mask": brain_mask,
        "norm_volume": norm_volume,
        "transform": transform,
        "gca_file": gca_file,
        "aseg_output": aseg_output,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label_subject_mixed_cargs(
    params: LabelSubjectMixedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("label_subject_mixed");
    cargs.push(
        "-mask",
        execution.inputFile((params["brain_mask"] ?? null))
    );
    cargs.push(execution.inputFile((params["norm_volume"] ?? null)));
    cargs.push(execution.inputFile((params["transform"] ?? null)));
    cargs.push(execution.inputFile((params["gca_file"] ?? null)));
    cargs.push((params["aseg_output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label_subject_mixed_outputs(
    params: LabelSubjectMixedParameters,
    execution: Execution,
): LabelSubjectMixedOutputs {
    const ret: LabelSubjectMixedOutputs = {
        root: execution.outputFile("."),
        output_aseg: execution.outputFile([(params["aseg_output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * label_subject_mixed
 *
 * Automatic labeling of brain regions using a Gaussian classifier array.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelSubjectMixedOutputs`).
 */
function label_subject_mixed_execute(
    params: LabelSubjectMixedParameters,
    runner: Runner | null = null,
): LabelSubjectMixedOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_SUBJECT_MIXED_METADATA);
    params = execution.params(params)
    const cargs = label_subject_mixed_cargs(params, execution)
    const ret = label_subject_mixed_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * label_subject_mixed
 *
 * Automatic labeling of brain regions using a Gaussian classifier array.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param brain_mask Brain mask to be used for final labeling
 * @param norm_volume Normalized volume
 * @param transform Transform file in LTA format
 * @param gca_file Gaussian classifier array (GCA) file
 * @param aseg_output Output aseg file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelSubjectMixedOutputs`).
 */
function label_subject_mixed(
    brain_mask: InputPathType,
    norm_volume: InputPathType,
    transform: InputPathType,
    gca_file: InputPathType,
    aseg_output: string,
    runner: Runner | null = null,
): LabelSubjectMixedOutputs {
    const params = label_subject_mixed_params(brain_mask, norm_volume, transform, gca_file, aseg_output)
    return label_subject_mixed_execute(params, runner);
}


export {
      LABEL_SUBJECT_MIXED_METADATA,
      LabelSubjectMixedOutputs,
      LabelSubjectMixedParameters,
      label_subject_mixed,
      label_subject_mixed_execute,
      label_subject_mixed_params,
};
