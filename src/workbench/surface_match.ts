// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_MATCH_METADATA: Metadata = {
    id: "975e55b50cc859adc6088f990f927b4229a7b26c.boutiques",
    name: "surface-match",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceMatchParameters {
    "@type"?: "workbench/surface-match";
    "match_surface_file": InputPathType;
    "input_surface_file": InputPathType;
    "output_surface_name": string;
}
type SurfaceMatchParametersTagged = Required<Pick<SurfaceMatchParameters, '@type'>> & SurfaceMatchParameters;


/**
 * Output object returned when calling `SurfaceMatchParameters(...)`.
 *
 * @interface
 */
interface SurfaceMatchOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param match_surface_file Match (Reference) Surface
 * @param input_surface_file File containing surface that will be transformed
 * @param output_surface_name Surface File after transformation
 *
 * @returns Parameter dictionary
 */
function surface_match_params(
    match_surface_file: InputPathType,
    input_surface_file: InputPathType,
    output_surface_name: string,
): SurfaceMatchParametersTagged {
    const params = {
        "@type": "workbench/surface-match" as const,
        "match_surface_file": match_surface_file,
        "input_surface_file": input_surface_file,
        "output_surface_name": output_surface_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_match_cargs(
    params: SurfaceMatchParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-match");
    cargs.push(execution.inputFile((params["match_surface_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_surface_file"] ?? null)));
    cargs.push((params["output_surface_name"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_match_outputs(
    params: SurfaceMatchParameters,
    execution: Execution,
): SurfaceMatchOutputs {
    const ret: SurfaceMatchOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * surface-match
 *
 * Surface match.
 *
 * The Input Surface File will be transformed so that its coordinate ranges (bounding box) match that of the Match Surface File.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceMatchOutputs`).
 */
function surface_match_execute(
    params: SurfaceMatchParameters,
    runner: Runner | null = null,
): SurfaceMatchOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_MATCH_METADATA);
    params = execution.params(params)
    const cargs = surface_match_cargs(params, execution)
    const ret = surface_match_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-match
 *
 * Surface match.
 *
 * The Input Surface File will be transformed so that its coordinate ranges (bounding box) match that of the Match Surface File.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param match_surface_file Match (Reference) Surface
 * @param input_surface_file File containing surface that will be transformed
 * @param output_surface_name Surface File after transformation
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceMatchOutputs`).
 */
function surface_match(
    match_surface_file: InputPathType,
    input_surface_file: InputPathType,
    output_surface_name: string,
    runner: Runner | null = null,
): SurfaceMatchOutputs {
    const params = surface_match_params(match_surface_file, input_surface_file, output_surface_name)
    return surface_match_execute(params, runner);
}


export {
      SURFACE_MATCH_METADATA,
      SurfaceMatchOutputs,
      surface_match,
      surface_match_execute,
      surface_match_params,
};
