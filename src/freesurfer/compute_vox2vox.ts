// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const COMPUTE_VOX2VOX_METADATA: Metadata = {
    id: "73b2097f0e34a9af6523d118eff4b6ab65435900.boutiques",
    name: "compute_vox2vox",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ComputeVox2voxParameters {
    "@type"?: "freesurfer/compute_vox2vox";
    "source": InputPathType;
    "t4file": InputPathType;
    "target": InputPathType;
}
type ComputeVox2voxParametersTagged = Required<Pick<ComputeVox2voxParameters, '@type'>> & ComputeVox2voxParameters;


/**
 * Output object returned when calling `ComputeVox2voxParameters(...)`.
 *
 * @interface
 */
interface ComputeVox2voxOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source Input 4dfp source file.
 * @param t4file T4 transformation matrix file.
 * @param target Input 4dfp target file.
 *
 * @returns Parameter dictionary
 */
function compute_vox2vox_params(
    source: InputPathType,
    t4file: InputPathType,
    target: InputPathType,
): ComputeVox2voxParametersTagged {
    const params = {
        "@type": "freesurfer/compute_vox2vox" as const,
        "source": source,
        "t4file": t4file,
        "target": target,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function compute_vox2vox_cargs(
    params: ComputeVox2voxParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("compute_vox2vox");
    cargs.push(execution.inputFile((params["source"] ?? null)));
    cargs.push(execution.inputFile((params["t4file"] ?? null)));
    cargs.push(execution.inputFile((params["target"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function compute_vox2vox_outputs(
    params: ComputeVox2voxParameters,
    execution: Execution,
): ComputeVox2voxOutputs {
    const ret: ComputeVox2voxOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * compute_vox2vox
 *
 * Tool for computing voxel-to-voxel transformations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ComputeVox2voxOutputs`).
 */
function compute_vox2vox_execute(
    params: ComputeVox2voxParameters,
    runner: Runner | null = null,
): ComputeVox2voxOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(COMPUTE_VOX2VOX_METADATA);
    params = execution.params(params)
    const cargs = compute_vox2vox_cargs(params, execution)
    const ret = compute_vox2vox_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * compute_vox2vox
 *
 * Tool for computing voxel-to-voxel transformations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source Input 4dfp source file.
 * @param t4file T4 transformation matrix file.
 * @param target Input 4dfp target file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ComputeVox2voxOutputs`).
 */
function compute_vox2vox(
    source: InputPathType,
    t4file: InputPathType,
    target: InputPathType,
    runner: Runner | null = null,
): ComputeVox2voxOutputs {
    const params = compute_vox2vox_params(source, t4file, target)
    return compute_vox2vox_execute(params, runner);
}


export {
      COMPUTE_VOX2VOX_METADATA,
      ComputeVox2voxOutputs,
      compute_vox2vox,
      compute_vox2vox_execute,
      compute_vox2vox_params,
};
