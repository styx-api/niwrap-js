// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PNGAPPEND_METADATA: Metadata = {
    id: "99f67fe0688b60f25c052763d14f04c8c451c98b.boutiques",
    name: "pngappend",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PngappendParameters {
    "@type": "fsl.pngappend";
    "input_files_and_options": Array<string>;
    "output_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.pngappend": pngappend_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `pngappend(...)`.
 *
 * @interface
 */
interface PngappendOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files_and_options List of input files and options for appending (e.g., file1.png +3 file2.png -2 file3.png)
 * @param output_file Output file (e.g., output.png or output.gif)
 *
 * @returns Parameter dictionary
 */
function pngappend_params(
    input_files_and_options: Array<string>,
    output_file: InputPathType,
): PngappendParameters {
    const params = {
        "@type": "fsl.pngappend" as const,
        "input_files_and_options": input_files_and_options,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function pngappend_cargs(
    params: PngappendParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("pngappend");
    cargs.push(...(params["input_files_and_options"] ?? null));
    cargs.push(execution.inputFile((params["output_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function pngappend_outputs(
    params: PngappendParameters,
    execution: Execution,
): PngappendOutputs {
    const ret: PngappendOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Append PNG files horizontally and/or vertically into a new PNG (or GIF) file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `PngappendOutputs`).
 */
function pngappend_execute(
    params: PngappendParameters,
    execution: Execution,
): PngappendOutputs {
    params = execution.params(params)
    const cargs = pngappend_cargs(params, execution)
    const ret = pngappend_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Append PNG files horizontally and/or vertically into a new PNG (or GIF) file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_files_and_options List of input files and options for appending (e.g., file1.png +3 file2.png -2 file3.png)
 * @param output_file Output file (e.g., output.png or output.gif)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PngappendOutputs`).
 */
function pngappend(
    input_files_and_options: Array<string>,
    output_file: InputPathType,
    runner: Runner | null = null,
): PngappendOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PNGAPPEND_METADATA);
    const params = pngappend_params(input_files_and_options, output_file)
    return pngappend_execute(params, execution);
}


export {
      PNGAPPEND_METADATA,
      PngappendOutputs,
      PngappendParameters,
      pngappend,
      pngappend_cargs,
      pngappend_execute,
      pngappend_outputs,
      pngappend_params,
};
