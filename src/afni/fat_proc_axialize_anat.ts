// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_AXIALIZE_ANAT_METADATA: Metadata = {
    id: "93b54cf4587e31bd1fe589e3220826cd9b89c2b5.boutiques",
    name: "fat_proc_axialize_anat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcAxializeAnatParameters {
    "@type": "afni.fat_proc_axialize_anat";
    "in_file": InputPathType;
    "ref_file": InputPathType;
    "prefix": string;
    "mode_t2w": boolean;
    "mode_t1w": boolean;
    "workdir"?: string | null | undefined;
    "out_match_ref": boolean;
    "do_ceil_out": boolean;
    "extra_al_wtmask"?: InputPathType | null | undefined;
    "extra_al_cost"?: string | null | undefined;
    "extra_al_opts"?: string | null | undefined;
    "focus_mask"?: InputPathType | null | undefined;
    "focus_by_ss": boolean;
    "remove_inf_sli"?: number | null | undefined;
    "pre_align_center_mass": boolean;
    "pre_center_mass": boolean;
    "post_lr_symm": boolean;
    "no_pre_lr_symm": boolean;
    "no_clean": boolean;
    "qc_ulay_range"?: Array<number> | null | undefined;
    "no_qc_view": boolean;
    "qc_prefix"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fat_proc_axialize_anat": fat_proc_axialize_anat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fat_proc_axialize_anat": fat_proc_axialize_anat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_proc_axialize_anat(...)`.
 *
 * @interface
 */
interface FatProcAxializeAnatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * An anatomical data set that is regularly situated within its FOV volume
     */
    output_file: OutputPathType;
    /**
     * The working directory with intermediate files
     */
    working_directory: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_file Input anatomical volume full name
 * @param ref_file Reference volume full name, such as TT or MNI
 * @param prefix Output prefix for files and snapshots
 * @param mode_t2w Switch for T2-weighted image processing
 * @param mode_t1w Switch for T1-weighted image processing
 * @param workdir Name of the working subdirectory in the output directory
 * @param out_match_ref Match the final output volume space FOV and spatial resolution to the reference file
 * @param do_ceil_out Apply a ceiling based on the 98%ile value within an automasked volume
 * @param extra_al_wtmask Extra weight mask to emphasize specific parts for alignment
 * @param extra_al_cost Specify a cost function for 3dAllineate to use (default 'lpa')
 * @param extra_al_opts Extra options for 3dAllineate when applying the warp
 * @param focus_mask Input mask to focus processing and alignment
 * @param focus_by_ss Make a mask by simply skullstripping input data set
 * @param remove_inf_sli Remove a number of slices from the inferior part of the FOV
 * @param pre_align_center_mass Pre-align the centers of mass of the volumes
 * @param pre_center_mass Pre-recenter input center of mass to (0, 0, 0)
 * @param post_lr_symm Apply post-alignment left-right symmetrization
 * @param no_pre_lr_symm Turn off pre-alignment left-right symmetrization
 * @param no_clean Do not remove working directory '__WORKING_axialize_anat'
 * @param qc_ulay_range Provide a min (UMIN) and max (UMAX) range for underlay grayscale bar
 * @param no_qc_view Turn off default QC image saving/viewing
 * @param qc_prefix Provide a prefix for QC outputs separate from the main prefix
 *
 * @returns Parameter dictionary
 */
function fat_proc_axialize_anat_params(
    in_file: InputPathType,
    ref_file: InputPathType,
    prefix: string,
    mode_t2w: boolean = false,
    mode_t1w: boolean = false,
    workdir: string | null = null,
    out_match_ref: boolean = false,
    do_ceil_out: boolean = false,
    extra_al_wtmask: InputPathType | null = null,
    extra_al_cost: string | null = null,
    extra_al_opts: string | null = null,
    focus_mask: InputPathType | null = null,
    focus_by_ss: boolean = false,
    remove_inf_sli: number | null = null,
    pre_align_center_mass: boolean = false,
    pre_center_mass: boolean = false,
    post_lr_symm: boolean = false,
    no_pre_lr_symm: boolean = false,
    no_clean: boolean = false,
    qc_ulay_range: Array<number> | null = null,
    no_qc_view: boolean = false,
    qc_prefix: string | null = null,
): FatProcAxializeAnatParameters {
    const params = {
        "@type": "afni.fat_proc_axialize_anat" as const,
        "in_file": in_file,
        "ref_file": ref_file,
        "prefix": prefix,
        "mode_t2w": mode_t2w,
        "mode_t1w": mode_t1w,
        "out_match_ref": out_match_ref,
        "do_ceil_out": do_ceil_out,
        "focus_by_ss": focus_by_ss,
        "pre_align_center_mass": pre_align_center_mass,
        "pre_center_mass": pre_center_mass,
        "post_lr_symm": post_lr_symm,
        "no_pre_lr_symm": no_pre_lr_symm,
        "no_clean": no_clean,
        "no_qc_view": no_qc_view,
    };
    if (workdir !== null) {
        params["workdir"] = workdir;
    }
    if (extra_al_wtmask !== null) {
        params["extra_al_wtmask"] = extra_al_wtmask;
    }
    if (extra_al_cost !== null) {
        params["extra_al_cost"] = extra_al_cost;
    }
    if (extra_al_opts !== null) {
        params["extra_al_opts"] = extra_al_opts;
    }
    if (focus_mask !== null) {
        params["focus_mask"] = focus_mask;
    }
    if (remove_inf_sli !== null) {
        params["remove_inf_sli"] = remove_inf_sli;
    }
    if (qc_ulay_range !== null) {
        params["qc_ulay_range"] = qc_ulay_range;
    }
    if (qc_prefix !== null) {
        params["qc_prefix"] = qc_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_proc_axialize_anat_cargs(
    params: FatProcAxializeAnatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_proc_axialize_anat");
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    cargs.push(execution.inputFile((params["ref_file"] ?? null)));
    cargs.push((params["prefix"] ?? null));
    if ((params["mode_t2w"] ?? null)) {
        cargs.push("-mode_t2w");
    }
    if ((params["mode_t1w"] ?? null)) {
        cargs.push("-mode_t1w");
    }
    if ((params["workdir"] ?? null) !== null) {
        cargs.push(
            "-workdir",
            (params["workdir"] ?? null)
        );
    }
    if ((params["out_match_ref"] ?? null)) {
        cargs.push("-out_match_ref");
    }
    if ((params["do_ceil_out"] ?? null)) {
        cargs.push("-do_ceil_out");
    }
    if ((params["extra_al_wtmask"] ?? null) !== null) {
        cargs.push(
            "-extra_al_wtmask",
            execution.inputFile((params["extra_al_wtmask"] ?? null))
        );
    }
    if ((params["extra_al_cost"] ?? null) !== null) {
        cargs.push(
            "-extra_al_cost",
            (params["extra_al_cost"] ?? null)
        );
    }
    if ((params["extra_al_opts"] ?? null) !== null) {
        cargs.push(
            "-extra_al_opts",
            (params["extra_al_opts"] ?? null)
        );
    }
    if ((params["focus_mask"] ?? null) !== null) {
        cargs.push(
            "-focus_mask",
            execution.inputFile((params["focus_mask"] ?? null))
        );
    }
    if ((params["focus_by_ss"] ?? null)) {
        cargs.push("-focus_by_ss");
    }
    if ((params["remove_inf_sli"] ?? null) !== null) {
        cargs.push(
            "-remove_inf_sli",
            String((params["remove_inf_sli"] ?? null))
        );
    }
    if ((params["pre_align_center_mass"] ?? null)) {
        cargs.push("-pre_align_center_mass");
    }
    if ((params["pre_center_mass"] ?? null)) {
        cargs.push("-pre_center_mass");
    }
    if ((params["post_lr_symm"] ?? null)) {
        cargs.push("-post_lr_symm");
    }
    if ((params["no_pre_lr_symm"] ?? null)) {
        cargs.push("-no_pre_lr_symm");
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    if ((params["qc_ulay_range"] ?? null) !== null) {
        cargs.push(
            "-qc1_ulay_range",
            ...(params["qc_ulay_range"] ?? null).map(String)
        );
    }
    if ((params["no_qc_view"] ?? null)) {
        cargs.push("-no_qc_view");
    }
    if ((params["qc_prefix"] ?? null) !== null) {
        cargs.push(
            "-qc_prefix",
            (params["qc_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_proc_axialize_anat_outputs(
    params: FatProcAxializeAnatParameters,
    execution: Execution,
): FatProcAxializeAnatOutputs {
    const ret: FatProcAxializeAnatOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')),
        working_directory: ((params["workdir"] ?? null) !== null) ? execution.outputFile([(params["workdir"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fat_proc_axialize_anat
 *
 * Helps align the major axes of an anatomical volume to those of the volumetric field of view.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcAxializeAnatOutputs`).
 */
function fat_proc_axialize_anat_execute(
    params: FatProcAxializeAnatParameters,
    runner: Runner | null = null,
): FatProcAxializeAnatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_AXIALIZE_ANAT_METADATA);
    params = execution.params(params)
    const cargs = fat_proc_axialize_anat_cargs(params, execution)
    const ret = fat_proc_axialize_anat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fat_proc_axialize_anat
 *
 * Helps align the major axes of an anatomical volume to those of the volumetric field of view.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_file Input anatomical volume full name
 * @param ref_file Reference volume full name, such as TT or MNI
 * @param prefix Output prefix for files and snapshots
 * @param mode_t2w Switch for T2-weighted image processing
 * @param mode_t1w Switch for T1-weighted image processing
 * @param workdir Name of the working subdirectory in the output directory
 * @param out_match_ref Match the final output volume space FOV and spatial resolution to the reference file
 * @param do_ceil_out Apply a ceiling based on the 98%ile value within an automasked volume
 * @param extra_al_wtmask Extra weight mask to emphasize specific parts for alignment
 * @param extra_al_cost Specify a cost function for 3dAllineate to use (default 'lpa')
 * @param extra_al_opts Extra options for 3dAllineate when applying the warp
 * @param focus_mask Input mask to focus processing and alignment
 * @param focus_by_ss Make a mask by simply skullstripping input data set
 * @param remove_inf_sli Remove a number of slices from the inferior part of the FOV
 * @param pre_align_center_mass Pre-align the centers of mass of the volumes
 * @param pre_center_mass Pre-recenter input center of mass to (0, 0, 0)
 * @param post_lr_symm Apply post-alignment left-right symmetrization
 * @param no_pre_lr_symm Turn off pre-alignment left-right symmetrization
 * @param no_clean Do not remove working directory '__WORKING_axialize_anat'
 * @param qc_ulay_range Provide a min (UMIN) and max (UMAX) range for underlay grayscale bar
 * @param no_qc_view Turn off default QC image saving/viewing
 * @param qc_prefix Provide a prefix for QC outputs separate from the main prefix
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcAxializeAnatOutputs`).
 */
function fat_proc_axialize_anat(
    in_file: InputPathType,
    ref_file: InputPathType,
    prefix: string,
    mode_t2w: boolean = false,
    mode_t1w: boolean = false,
    workdir: string | null = null,
    out_match_ref: boolean = false,
    do_ceil_out: boolean = false,
    extra_al_wtmask: InputPathType | null = null,
    extra_al_cost: string | null = null,
    extra_al_opts: string | null = null,
    focus_mask: InputPathType | null = null,
    focus_by_ss: boolean = false,
    remove_inf_sli: number | null = null,
    pre_align_center_mass: boolean = false,
    pre_center_mass: boolean = false,
    post_lr_symm: boolean = false,
    no_pre_lr_symm: boolean = false,
    no_clean: boolean = false,
    qc_ulay_range: Array<number> | null = null,
    no_qc_view: boolean = false,
    qc_prefix: string | null = null,
    runner: Runner | null = null,
): FatProcAxializeAnatOutputs {
    const params = fat_proc_axialize_anat_params(in_file, ref_file, prefix, mode_t2w, mode_t1w, workdir, out_match_ref, do_ceil_out, extra_al_wtmask, extra_al_cost, extra_al_opts, focus_mask, focus_by_ss, remove_inf_sli, pre_align_center_mass, pre_center_mass, post_lr_symm, no_pre_lr_symm, no_clean, qc_ulay_range, no_qc_view, qc_prefix)
    return fat_proc_axialize_anat_execute(params, runner);
}


export {
      FAT_PROC_AXIALIZE_ANAT_METADATA,
      FatProcAxializeAnatOutputs,
      FatProcAxializeAnatParameters,
      fat_proc_axialize_anat,
      fat_proc_axialize_anat_execute,
      fat_proc_axialize_anat_params,
};
