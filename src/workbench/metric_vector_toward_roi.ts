// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_VECTOR_TOWARD_ROI_METADATA: Metadata = {
    id: "82ce3915240934b58fb359f7a47c43413230f75c.boutiques",
    name: "metric-vector-toward-roi",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricVectorTowardRoiParameters {
    "__STYXTYPE__": "metric-vector-toward-roi";
    "surface": InputPathType;
    "target_roi": InputPathType;
    "metric_out": string;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "metric-vector-toward-roi": metric_vector_toward_roi_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "metric-vector-toward-roi": metric_vector_toward_roi_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metric_vector_toward_roi(...)`.
 *
 * @interface
 */
interface MetricVectorTowardRoiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


function metric_vector_toward_roi_params(
    surface: InputPathType,
    target_roi: InputPathType,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
): MetricVectorTowardRoiParameters {
    /**
     * Build parameters.
    
     * @param surface the surface to compute on
     * @param target_roi the roi to find the shortest path to
     * @param metric_out the output metric
     * @param opt_roi_roi_metric don't compute for vertices outside an roi: the region to compute inside, as a metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric-vector-toward-roi" as const,
        "surface": surface,
        "target_roi": target_roi,
        "metric_out": metric_out,
    };
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    return params;
}


function metric_vector_toward_roi_cargs(
    params: MetricVectorTowardRoiParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-vector-toward-roi");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["target_roi"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    return cargs;
}


function metric_vector_toward_roi_outputs(
    params: MetricVectorTowardRoiParameters,
    execution: Execution,
): MetricVectorTowardRoiOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MetricVectorTowardRoiOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


function metric_vector_toward_roi_execute(
    params: MetricVectorTowardRoiParameters,
    execution: Execution,
): MetricVectorTowardRoiOutputs {
    /**
     * Find if vectors point toward an roi.
     * 
     * At each vertex, compute the vector along the start of the shortest path to the ROI.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MetricVectorTowardRoiOutputs`).
     */
    params = execution.params(params)
    const cargs = metric_vector_toward_roi_cargs(params, execution)
    const ret = metric_vector_toward_roi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function metric_vector_toward_roi(
    surface: InputPathType,
    target_roi: InputPathType,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    runner: Runner | null = null,
): MetricVectorTowardRoiOutputs {
    /**
     * Find if vectors point toward an roi.
     * 
     * At each vertex, compute the vector along the start of the shortest path to the ROI.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface the surface to compute on
     * @param target_roi the roi to find the shortest path to
     * @param metric_out the output metric
     * @param opt_roi_roi_metric don't compute for vertices outside an roi: the region to compute inside, as a metric
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MetricVectorTowardRoiOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_VECTOR_TOWARD_ROI_METADATA);
    const params = metric_vector_toward_roi_params(surface, target_roi, metric_out, opt_roi_roi_metric)
    return metric_vector_toward_roi_execute(params, execution);
}


export {
      METRIC_VECTOR_TOWARD_ROI_METADATA,
      MetricVectorTowardRoiOutputs,
      MetricVectorTowardRoiParameters,
      metric_vector_toward_roi,
      metric_vector_toward_roi_params,
};
