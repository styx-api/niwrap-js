// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BROWSE_MINC_HEADER_TCL_METADATA: Metadata = {
    id: "22e391d58621f276bcf2d734a8c66b008bb55ba4.boutiques",
    name: "browse-minc-header.tcl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BrowseMincHeaderTclParameters {
    "@type": "freesurfer.browse-minc-header.tcl";
    "infile": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.browse-minc-header.tcl": browse_minc_header_tcl_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `browse_minc_header_tcl(...)`.
 *
 * @interface
 */
interface BrowseMincHeaderTclOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile MINC file for which the header is to be browsed
 *
 * @returns Parameter dictionary
 */
function browse_minc_header_tcl_params(
    infile: InputPathType,
): BrowseMincHeaderTclParameters {
    const params = {
        "@type": "freesurfer.browse-minc-header.tcl" as const,
        "infile": infile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function browse_minc_header_tcl_cargs(
    params: BrowseMincHeaderTclParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("browse-minc-header.tcl");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function browse_minc_header_tcl_outputs(
    params: BrowseMincHeaderTclParameters,
    execution: Execution,
): BrowseMincHeaderTclOutputs {
    const ret: BrowseMincHeaderTclOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * browse-minc-header.tcl
 *
 * A tool for browsing MINC file headers, likely part of the FreeSurfer package.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BrowseMincHeaderTclOutputs`).
 */
function browse_minc_header_tcl_execute(
    params: BrowseMincHeaderTclParameters,
    runner: Runner | null = null,
): BrowseMincHeaderTclOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BROWSE_MINC_HEADER_TCL_METADATA);
    params = execution.params(params)
    const cargs = browse_minc_header_tcl_cargs(params, execution)
    const ret = browse_minc_header_tcl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * browse-minc-header.tcl
 *
 * A tool for browsing MINC file headers, likely part of the FreeSurfer package.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param infile MINC file for which the header is to be browsed
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BrowseMincHeaderTclOutputs`).
 */
function browse_minc_header_tcl(
    infile: InputPathType,
    runner: Runner | null = null,
): BrowseMincHeaderTclOutputs {
    const params = browse_minc_header_tcl_params(infile)
    return browse_minc_header_tcl_execute(params, runner);
}


export {
      BROWSE_MINC_HEADER_TCL_METADATA,
      BrowseMincHeaderTclOutputs,
      BrowseMincHeaderTclParameters,
      browse_minc_header_tcl,
      browse_minc_header_tcl_execute,
      browse_minc_header_tcl_params,
};
