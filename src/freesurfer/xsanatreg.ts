// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XSANATREG_METADATA: Metadata = {
    id: "92e3106d67a2897fb7d26ce43be63611d67973c8.boutiques",
    name: "xsanatreg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface XsanatregParameters {
    "__STYXTYPE__": "xsanatreg";
    "src_cordir": string;
    "targ_cordir": string;
    "transform_file": string;
    "temp_directory"?: string | null | undefined;
    "source_minc"?: string | null | undefined;
    "target_minc"?: string | null | undefined;
    "no_cleanup": boolean;
    "version": boolean;
    "umask"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "xsanatreg": xsanatreg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `xsanatreg(...)`.
 *
 * @interface
 */
interface XsanatregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function xsanatreg_params(
    src_cordir: string,
    targ_cordir: string,
    transform_file: string,
    temp_directory: string | null = null,
    source_minc: string | null = null,
    target_minc: string | null = null,
    no_cleanup: boolean = false,
    version: boolean = false,
    umask: string | null = null,
): XsanatregParameters {
    /**
     * Build parameters.
    
     * @param src_cordir Directory of source COR volume
     * @param targ_cordir Directory of target COR volume
     * @param transform_file File in which to store the transformation
     * @param temp_directory Directory for temporary storage, defaults to /tmp
     * @param source_minc File name for source minc, set automatically if not specified
     * @param target_minc File name for target minc, set automatically if not specified
     * @param no_cleanup Do not delete temporary minc files
     * @param version Print version and exit
     * @param umask Set file mode creation mask
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "xsanatreg" as const,
        "src_cordir": src_cordir,
        "targ_cordir": targ_cordir,
        "transform_file": transform_file,
        "no_cleanup": no_cleanup,
        "version": version,
    };
    if (temp_directory !== null) {
        params["temp_directory"] = temp_directory;
    }
    if (source_minc !== null) {
        params["source_minc"] = source_minc;
    }
    if (target_minc !== null) {
        params["target_minc"] = target_minc;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    return params;
}


function xsanatreg_cargs(
    params: XsanatregParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("xsanatreg");
    cargs.push(
        "-src",
        (params["src_cordir"] ?? null)
    );
    cargs.push(
        "-targ",
        (params["targ_cordir"] ?? null)
    );
    cargs.push(
        "-xfm",
        (params["transform_file"] ?? null)
    );
    if ((params["temp_directory"] ?? null) !== null) {
        cargs.push(
            "-tmpdir",
            (params["temp_directory"] ?? null)
        );
    }
    if ((params["source_minc"] ?? null) !== null) {
        cargs.push(
            "-srcminc",
            (params["source_minc"] ?? null)
        );
    }
    if ((params["target_minc"] ?? null) !== null) {
        cargs.push(
            "-targminc",
            (params["target_minc"] ?? null)
        );
    }
    if ((params["no_cleanup"] ?? null)) {
        cargs.push("-nocleanup");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    return cargs;
}


function xsanatreg_outputs(
    params: XsanatregParameters,
    execution: Execution,
): XsanatregOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: XsanatregOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function xsanatreg_execute(
    params: XsanatregParameters,
    execution: Execution,
): XsanatregOutputs {
    /**
     * A tool for registering source and target COR volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `XsanatregOutputs`).
     */
    params = execution.params(params)
    const cargs = xsanatreg_cargs(params, execution)
    const ret = xsanatreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function xsanatreg(
    src_cordir: string,
    targ_cordir: string,
    transform_file: string,
    temp_directory: string | null = null,
    source_minc: string | null = null,
    target_minc: string | null = null,
    no_cleanup: boolean = false,
    version: boolean = false,
    umask: string | null = null,
    runner: Runner | null = null,
): XsanatregOutputs {
    /**
     * A tool for registering source and target COR volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param src_cordir Directory of source COR volume
     * @param targ_cordir Directory of target COR volume
     * @param transform_file File in which to store the transformation
     * @param temp_directory Directory for temporary storage, defaults to /tmp
     * @param source_minc File name for source minc, set automatically if not specified
     * @param target_minc File name for target minc, set automatically if not specified
     * @param no_cleanup Do not delete temporary minc files
     * @param version Print version and exit
     * @param umask Set file mode creation mask
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `XsanatregOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XSANATREG_METADATA);
    const params = xsanatreg_params(src_cordir, targ_cordir, transform_file, temp_directory, source_minc, target_minc, no_cleanup, version, umask)
    return xsanatreg_execute(params, execution);
}


export {
      XSANATREG_METADATA,
      XsanatregOutputs,
      XsanatregParameters,
      xsanatreg,
      xsanatreg_params,
};
