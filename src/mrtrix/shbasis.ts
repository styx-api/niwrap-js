// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SHBASIS_METADATA: Metadata = {
    id: "8d1c3a9e142d8ac3b0cfbca9e0fcd6b3d41e317e.boutiques",
    name: "shbasis",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface ShbasisConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type ShbasisConfigParametersTagged = Required<Pick<ShbasisConfigParameters, '@type'>> & ShbasisConfigParameters;


interface ShbasisParameters {
    "@type"?: "mrtrix/shbasis";
    "convert"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<ShbasisConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "SH": Array<InputPathType>;
}
type ShbasisParametersTagged = Required<Pick<ShbasisParameters, '@type'>> & ShbasisParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function shbasis_config_params(
    key: string,
    value: string,
): ShbasisConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function shbasis_config_cargs(
    params: ShbasisConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `ShbasisParameters(...)`.
 *
 * @interface
 */
interface ShbasisOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param sh the input image(s) of SH coefficients.
 * @param convert convert the image data in-place to the desired basis; options are: old,new,force_oldtonew,force_newtoold.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function shbasis_params(
    sh: Array<InputPathType>,
    convert: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<ShbasisConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): ShbasisParametersTagged {
    const params = {
        "@type": "mrtrix/shbasis" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "SH": sh,
    };
    if (convert !== null) {
        params["convert"] = convert;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function shbasis_cargs(
    params: ShbasisParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("shbasis");
    if ((params["convert"] ?? null) !== null) {
        cargs.push(
            "-convert",
            (params["convert"] ?? null)
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => shbasis_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(...(params["SH"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function shbasis_outputs(
    params: ShbasisParameters,
    execution: Execution,
): ShbasisOutputs {
    const ret: ShbasisOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * shbasis
 *
 * Examine the values in spherical harmonic images to estimate (and optionally change) the SH basis used.
 *
 * In previous versions of MRtrix, the convention used for storing spherical harmonic coefficients was a non-orthonormal basis (the m!=0 coefficients were a factor of sqrt(2) too large). This error has been rectified in newer versions of MRtrix, but will cause issues if processing SH data that was generated using an older version of MRtrix (or vice-versa).
 *
 * This command provides a mechanism for testing the basis used in storage of image data representing a spherical harmonic series per voxel, and allows the user to forcibly modify the raw image data to conform to the desired basis.
 *
 * Note that the "force_*" conversion choices should only be used in cases where this command has previously been unable to automatically determine the SH basis from the image data, but the user themselves are confident of the SH basis of the data.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ShbasisOutputs`).
 */
function shbasis_execute(
    params: ShbasisParameters,
    runner: Runner | null = null,
): ShbasisOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SHBASIS_METADATA);
    params = execution.params(params)
    const cargs = shbasis_cargs(params, execution)
    const ret = shbasis_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * shbasis
 *
 * Examine the values in spherical harmonic images to estimate (and optionally change) the SH basis used.
 *
 * In previous versions of MRtrix, the convention used for storing spherical harmonic coefficients was a non-orthonormal basis (the m!=0 coefficients were a factor of sqrt(2) too large). This error has been rectified in newer versions of MRtrix, but will cause issues if processing SH data that was generated using an older version of MRtrix (or vice-versa).
 *
 * This command provides a mechanism for testing the basis used in storage of image data representing a spherical harmonic series per voxel, and allows the user to forcibly modify the raw image data to conform to the desired basis.
 *
 * Note that the "force_*" conversion choices should only be used in cases where this command has previously been unable to automatically determine the SH basis from the image data, but the user themselves are confident of the SH basis of the data.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param sh the input image(s) of SH coefficients.
 * @param convert convert the image data in-place to the desired basis; options are: old,new,force_oldtonew,force_newtoold.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ShbasisOutputs`).
 */
function shbasis(
    sh: Array<InputPathType>,
    convert: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<ShbasisConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): ShbasisOutputs {
    const params = shbasis_params(sh, convert, info, quiet, debug, force, nthreads, config, help, version)
    return shbasis_execute(params, runner);
}


export {
      SHBASIS_METADATA,
      ShbasisOutputs,
      shbasis,
      shbasis_config_params,
      shbasis_execute,
      shbasis_params,
};
