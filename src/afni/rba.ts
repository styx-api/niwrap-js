// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RBA_METADATA: Metadata = {
    id: "787dd7e6ba494572a30d5b3c250d17d1a6fddc8c.boutiques",
    name: "RBA",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface RbaParameters {
    "__STYXTYPE__": "RBA";
    "prefix": string;
    "dataTable": InputPathType;
    "chains"?: number | null | undefined;
    "iterations"?: number | null | undefined;
    "model"?: string | null | undefined;
    "eoi"?: string | null | undefined;
    "wcp"?: number | null | undefined;
    "tstat"?: string | null | undefined;
    "stdz"?: string | null | undefined;
    "cVars"?: string | null | undefined;
    "qVars"?: string | null | undefined;
    "distROI"?: string | null | undefined;
    "distSubj"?: string | null | undefined;
    "distY"?: string | null | undefined;
    "ridgePlot"?: string | null | undefined;
    "roi"?: string | null | undefined;
    "subj"?: string | null | undefined;
    "scale"?: number | null | undefined;
    "se"?: string | null | undefined;
    "pdp"?: string | null | undefined;
    "mean"?: string | null | undefined;
    "sigma"?: string | null | undefined;
    "debug": boolean;
    "verbose"?: number | null | undefined;
    "md": boolean;
    "r2z": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "RBA": rba_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "RBA": rba_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rba(...)`.
 *
 * @interface
 */
interface RbaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output text file with inference information for effects of interest.
     */
    output_txt: OutputPathType;
    /**
     * Saved R data in binary format for post hoc processing.
     */
    output_rdata: OutputPathType;
}


function rba_params(
    prefix: string,
    data_table: InputPathType,
    chains: number | null = null,
    iterations: number | null = null,
    model: string | null = null,
    eoi: string | null = null,
    wcp: number | null = null,
    tstat: string | null = null,
    stdz: string | null = null,
    c_vars: string | null = null,
    q_vars: string | null = null,
    dist_roi: string | null = null,
    dist_subj: string | null = null,
    dist_y: string | null = null,
    ridge_plot: string | null = null,
    roi: string | null = null,
    subj: string | null = null,
    scale: number | null = null,
    se: string | null = null,
    pdp: string | null = null,
    mean: string | null = null,
    sigma: string | null = null,
    debug: boolean = false,
    verbose: number | null = null,
    md: boolean = false,
    r2z: boolean = false,
): RbaParameters {
    /**
     * Build parameters.
    
     * @param prefix Prefix for output file names.
     * @param data_table Data table in pure text format.
     * @param chains Specify the number of Markov chains.
     * @param iterations Specify the number of iterations per Markov chain.
     * @param model Specify the model formula.
     * @param eoi Identify effects of interest in the output.
     * @param wcp Invoke within-chain parallelization.
     * @param tstat Specify the column name that lists the t-statistic values.
     * @param stdz Identify quantitative variables (or covariates) to be standardized.
     * @param c_vars Identify categorical (qualitative) variables (or factors).
     * @param q_vars Identify quantitative variables (or covariates).
     * @param dist_roi Specify the distribution for the ROIs.
     * @param dist_subj Specify the distribution for the subjects.
     * @param dist_y Specify the distribution for the response variable.
     * @param ridge_plot Plot the posterior distributions stacked together.
     * @param roi Specify the column name that is designated as the region variable.
     * @param subj Specify the column name that is designated as the measuring unit variable (usually subject).
     * @param scale Specify a multiplier for the Y values.
     * @param se This option indicates that standard error for the response variable is available as input.
     * @param pdp Specify the layout of posterior distribution plot.
     * @param mean Specify the formulation for the mean of the likelihood (sampling distribution).
     * @param sigma Specify the formulation for the standard deviation (sigma) of the likelihood (sampling distribution).
     * @param debug This option will enable R to save the parameters in a file for debugging.
     * @param verbose Specify verbose level.
     * @param md This option indicates that there are missing data in the input.
     * @param r2z Perform Fisher transformation on the response variable if it is a correlation coefficient.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "RBA" as const,
        "prefix": prefix,
        "dataTable": data_table,
        "debug": debug,
        "md": md,
        "r2z": r2z,
    };
    if (chains !== null) {
        params["chains"] = chains;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (model !== null) {
        params["model"] = model;
    }
    if (eoi !== null) {
        params["eoi"] = eoi;
    }
    if (wcp !== null) {
        params["wcp"] = wcp;
    }
    if (tstat !== null) {
        params["tstat"] = tstat;
    }
    if (stdz !== null) {
        params["stdz"] = stdz;
    }
    if (c_vars !== null) {
        params["cVars"] = c_vars;
    }
    if (q_vars !== null) {
        params["qVars"] = q_vars;
    }
    if (dist_roi !== null) {
        params["distROI"] = dist_roi;
    }
    if (dist_subj !== null) {
        params["distSubj"] = dist_subj;
    }
    if (dist_y !== null) {
        params["distY"] = dist_y;
    }
    if (ridge_plot !== null) {
        params["ridgePlot"] = ridge_plot;
    }
    if (roi !== null) {
        params["roi"] = roi;
    }
    if (subj !== null) {
        params["subj"] = subj;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (se !== null) {
        params["se"] = se;
    }
    if (pdp !== null) {
        params["pdp"] = pdp;
    }
    if (mean !== null) {
        params["mean"] = mean;
    }
    if (sigma !== null) {
        params["sigma"] = sigma;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


function rba_cargs(
    params: RbaParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("RBA");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-dataTable",
        execution.inputFile((params["dataTable"] ?? null))
    );
    if ((params["chains"] ?? null) !== null) {
        cargs.push(
            "-chains",
            String((params["chains"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-iterations",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "-model",
            (params["model"] ?? null)
        );
    }
    if ((params["eoi"] ?? null) !== null) {
        cargs.push(
            "-EOI",
            (params["eoi"] ?? null)
        );
    }
    if ((params["wcp"] ?? null) !== null) {
        cargs.push(
            "-WCP",
            String((params["wcp"] ?? null))
        );
    }
    if ((params["tstat"] ?? null) !== null) {
        cargs.push(
            "-tstat",
            (params["tstat"] ?? null)
        );
    }
    if ((params["stdz"] ?? null) !== null) {
        cargs.push(
            "-stdz",
            (params["stdz"] ?? null)
        );
    }
    if ((params["cVars"] ?? null) !== null) {
        cargs.push(
            "-cVars",
            (params["cVars"] ?? null)
        );
    }
    if ((params["qVars"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["qVars"] ?? null)
        );
    }
    if ((params["distROI"] ?? null) !== null) {
        cargs.push(
            "-distROI",
            (params["distROI"] ?? null)
        );
    }
    if ((params["distSubj"] ?? null) !== null) {
        cargs.push(
            "-distSubj",
            (params["distSubj"] ?? null)
        );
    }
    if ((params["distY"] ?? null) !== null) {
        cargs.push(
            "-distY",
            (params["distY"] ?? null)
        );
    }
    if ((params["ridgePlot"] ?? null) !== null) {
        cargs.push(
            "-ridgePlot",
            (params["ridgePlot"] ?? null)
        );
    }
    if ((params["roi"] ?? null) !== null) {
        cargs.push(
            "-ROI",
            (params["roi"] ?? null)
        );
    }
    if ((params["subj"] ?? null) !== null) {
        cargs.push(
            "-Subj",
            (params["subj"] ?? null)
        );
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-scale",
            String((params["scale"] ?? null))
        );
    }
    if ((params["se"] ?? null) !== null) {
        cargs.push(
            "-se",
            (params["se"] ?? null)
        );
    }
    if ((params["pdp"] ?? null) !== null) {
        cargs.push(
            "-PDP",
            (params["pdp"] ?? null)
        );
    }
    if ((params["mean"] ?? null) !== null) {
        cargs.push(
            "-mean",
            (params["mean"] ?? null)
        );
    }
    if ((params["sigma"] ?? null) !== null) {
        cargs.push(
            "-sigma",
            (params["sigma"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-dbgArgs");
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbose"] ?? null))
        );
    }
    if ((params["md"] ?? null)) {
        cargs.push("-MD");
    }
    if ((params["r2z"] ?? null)) {
        cargs.push("-r2z");
    }
    return cargs;
}


function rba_outputs(
    params: RbaParameters,
    execution: Execution,
): RbaOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RbaOutputs = {
        root: execution.outputFile("."),
        output_txt: execution.outputFile([(params["prefix"] ?? null), ".txt"].join('')),
        output_rdata: execution.outputFile([(params["prefix"] ?? null), ".RData"].join('')),
    };
    return ret;
}


function rba_execute(
    params: RbaParameters,
    execution: Execution,
): RbaOutputs {
    /**
     * Region-Based Analysis Program through Bayesian Multilevel Modeling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RbaOutputs`).
     */
    params = execution.params(params)
    const cargs = rba_cargs(params, execution)
    const ret = rba_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function rba(
    prefix: string,
    data_table: InputPathType,
    chains: number | null = null,
    iterations: number | null = null,
    model: string | null = null,
    eoi: string | null = null,
    wcp: number | null = null,
    tstat: string | null = null,
    stdz: string | null = null,
    c_vars: string | null = null,
    q_vars: string | null = null,
    dist_roi: string | null = null,
    dist_subj: string | null = null,
    dist_y: string | null = null,
    ridge_plot: string | null = null,
    roi: string | null = null,
    subj: string | null = null,
    scale: number | null = null,
    se: string | null = null,
    pdp: string | null = null,
    mean: string | null = null,
    sigma: string | null = null,
    debug: boolean = false,
    verbose: number | null = null,
    md: boolean = false,
    r2z: boolean = false,
    runner: Runner | null = null,
): RbaOutputs {
    /**
     * Region-Based Analysis Program through Bayesian Multilevel Modeling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix Prefix for output file names.
     * @param data_table Data table in pure text format.
     * @param chains Specify the number of Markov chains.
     * @param iterations Specify the number of iterations per Markov chain.
     * @param model Specify the model formula.
     * @param eoi Identify effects of interest in the output.
     * @param wcp Invoke within-chain parallelization.
     * @param tstat Specify the column name that lists the t-statistic values.
     * @param stdz Identify quantitative variables (or covariates) to be standardized.
     * @param c_vars Identify categorical (qualitative) variables (or factors).
     * @param q_vars Identify quantitative variables (or covariates).
     * @param dist_roi Specify the distribution for the ROIs.
     * @param dist_subj Specify the distribution for the subjects.
     * @param dist_y Specify the distribution for the response variable.
     * @param ridge_plot Plot the posterior distributions stacked together.
     * @param roi Specify the column name that is designated as the region variable.
     * @param subj Specify the column name that is designated as the measuring unit variable (usually subject).
     * @param scale Specify a multiplier for the Y values.
     * @param se This option indicates that standard error for the response variable is available as input.
     * @param pdp Specify the layout of posterior distribution plot.
     * @param mean Specify the formulation for the mean of the likelihood (sampling distribution).
     * @param sigma Specify the formulation for the standard deviation (sigma) of the likelihood (sampling distribution).
     * @param debug This option will enable R to save the parameters in a file for debugging.
     * @param verbose Specify verbose level.
     * @param md This option indicates that there are missing data in the input.
     * @param r2z Perform Fisher transformation on the response variable if it is a correlation coefficient.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RbaOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RBA_METADATA);
    const params = rba_params(prefix, data_table, chains, iterations, model, eoi, wcp, tstat, stdz, c_vars, q_vars, dist_roi, dist_subj, dist_y, ridge_plot, roi, subj, scale, se, pdp, mean, sigma, debug, verbose, md, r2z)
    return rba_execute(params, execution);
}


export {
      RBA_METADATA,
      RbaOutputs,
      RbaParameters,
      rba,
      rba_params,
};
