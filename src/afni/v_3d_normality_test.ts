// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NORMALITY_TEST_METADATA: Metadata = {
    id: "f4e493074cf1abbf672c4d1c6107ad9f408737a2.boutiques",
    name: "3dNormalityTest",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNormalityTestParameters {
    "@type"?: "afni/3dNormalityTest";
    "input": InputPathType;
    "prefix": string;
    "noexp": boolean;
    "pval": boolean;
}
type V3dNormalityTestParametersTagged = Required<Pick<V3dNormalityTestParameters, '@type'>> & V3dNormalityTestParameters;


/**
 * Output object returned when calling `V3dNormalityTestParameters(...)`.
 *
 * @interface
 */
interface V3dNormalityTestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset with results
     */
    output_dataset: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input Specifies the input dataset
 * @param prefix Specifies the name for the output dataset
 * @param noexp Do not convert the A-D statistic to an exponentially distributed value
 * @param pval Output the results as a pure (estimated) p-value
 *
 * @returns Parameter dictionary
 */
function v_3d_normality_test_params(
    input: InputPathType,
    prefix: string,
    noexp: boolean = false,
    pval: boolean = false,
): V3dNormalityTestParametersTagged {
    const params = {
        "@type": "afni/3dNormalityTest" as const,
        "input": input,
        "prefix": prefix,
        "noexp": noexp,
        "pval": pval,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_normality_test_cargs(
    params: V3dNormalityTestParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dNormalityTest");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["noexp"] ?? false)) {
        cargs.push("-noexp");
    }
    if ((params["pval"] ?? false)) {
        cargs.push("-pval");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_normality_test_outputs(
    params: V3dNormalityTestParameters,
    execution: Execution,
): V3dNormalityTestOutputs {
    const ret: V3dNormalityTestOutputs = {
        root: execution.outputFile("."),
        output_dataset: execution.outputFile([(params["prefix"] ?? null), "+orig"].join('')),
    };
    return ret;
}


/**
 * 3dNormalityTest
 *
 * This program tests the input values at each voxel for normality using the Anderson-Darling method.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNormalityTestOutputs`).
 */
function v_3d_normality_test_execute(
    params: V3dNormalityTestParameters,
    runner: Runner | null = null,
): V3dNormalityTestOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NORMALITY_TEST_METADATA);
    params = execution.params(params)
    const cargs = v_3d_normality_test_cargs(params, execution)
    const ret = v_3d_normality_test_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dNormalityTest
 *
 * This program tests the input values at each voxel for normality using the Anderson-Darling method.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input Specifies the input dataset
 * @param prefix Specifies the name for the output dataset
 * @param noexp Do not convert the A-D statistic to an exponentially distributed value
 * @param pval Output the results as a pure (estimated) p-value
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNormalityTestOutputs`).
 */
function v_3d_normality_test(
    input: InputPathType,
    prefix: string,
    noexp: boolean = false,
    pval: boolean = false,
    runner: Runner | null = null,
): V3dNormalityTestOutputs {
    const params = v_3d_normality_test_params(input, prefix, noexp, pval)
    return v_3d_normality_test_execute(params, runner);
}


export {
      V3dNormalityTestOutputs,
      V_3D_NORMALITY_TEST_METADATA,
      v_3d_normality_test,
      v_3d_normality_test_execute,
      v_3d_normality_test_params,
};
