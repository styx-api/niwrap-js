// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSL_MVLM_METADATA: Metadata = {
    id: "31a0128f64412550f40892b3cce40f7029e48f62.boutiques",
    name: "fsl_mvlm",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslMvlmParameters {
    "__STYXTYPE__": "fsl_mvlm";
    "input_file": InputPathType;
    "basename_output_files": string;
    "algorithm"?: string | null | undefined;
    "design_matrix"?: InputPathType | null | undefined;
    "mask_image"?: InputPathType | null | undefined;
    "design_normalization": boolean;
    "variance_normalisation": boolean;
    "demean": boolean;
    "nmf_dim"?: number | null | undefined;
    "nmf_iterations"?: number | null | undefined;
    "verbose": boolean;
    "out_data"?: string | null | undefined;
    "out_vnscales"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fsl_mvlm": fsl_mvlm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fsl_mvlm": fsl_mvlm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsl_mvlm(...)`.
 *
 * @interface
 */
interface FslMvlmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Processed output file
     */
    outfile: OutputPathType;
    /**
     * Pre-processed data output file
     */
    outdata: OutputPathType | null;
    /**
     * Variance normalisation scales file
     */
    vnscales: OutputPathType | null;
}


function fsl_mvlm_params(
    input_file: InputPathType,
    basename_output_files: string,
    algorithm: string | null = null,
    design_matrix: InputPathType | null = null,
    mask_image: InputPathType | null = null,
    design_normalization: boolean = false,
    variance_normalisation: boolean = false,
    demean: boolean = false,
    nmf_dim: number | null = null,
    nmf_iterations: number | null = null,
    verbose: boolean = false,
    out_data: string | null = null,
    out_vnscales: string | null = null,
): FslMvlmParameters {
    /**
     * Build parameters.
    
     * @param input_file Input file (text matrix or 3D/4D image file)
     * @param basename_output_files Basename for output files
     * @param algorithm Algorithm for decomposition: PCA (or SVD; default), PLS, orthoPLS, CVA, SVD-CVA, MLM, NMF
     * @param design_matrix File name of the GLM design matrix (time courses or spatial maps)
     * @param mask_image Mask image file name if input is an image
     * @param design_normalization Switch on normalisation of the design matrix columns to unit standard deviation
     * @param variance_normalisation Perform MELODIC variance-normalisation on data
     * @param demean Switch on de-meaning of design and data
     * @param nmf_dim Number of underlying factors for NMF
     * @param nmf_iterations Number of NMF iterations (default 100)
     * @param verbose Switch on verbose output
     * @param out_data Output file name for pre-processed data
     * @param out_vnscales Output file name for scaling factors for variance normalisation
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fsl_mvlm" as const,
        "input_file": input_file,
        "basename_output_files": basename_output_files,
        "design_normalization": design_normalization,
        "variance_normalisation": variance_normalisation,
        "demean": demean,
        "verbose": verbose,
    };
    if (algorithm !== null) {
        params["algorithm"] = algorithm;
    }
    if (design_matrix !== null) {
        params["design_matrix"] = design_matrix;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    if (nmf_dim !== null) {
        params["nmf_dim"] = nmf_dim;
    }
    if (nmf_iterations !== null) {
        params["nmf_iterations"] = nmf_iterations;
    }
    if (out_data !== null) {
        params["out_data"] = out_data;
    }
    if (out_vnscales !== null) {
        params["out_vnscales"] = out_vnscales;
    }
    return params;
}


function fsl_mvlm_cargs(
    params: FslMvlmParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fsl_mvlm");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["basename_output_files"] ?? null)
    );
    if ((params["algorithm"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["algorithm"] ?? null)
        );
    }
    if ((params["design_matrix"] ?? null) !== null) {
        cargs.push(
            "-d",
            execution.inputFile((params["design_matrix"] ?? null))
        );
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask_image"] ?? null))
        );
    }
    if ((params["design_normalization"] ?? null)) {
        cargs.push("--des_norm");
    }
    if ((params["variance_normalisation"] ?? null)) {
        cargs.push("--vn");
    }
    if ((params["demean"] ?? null)) {
        cargs.push("--demean");
    }
    if ((params["nmf_dim"] ?? null) !== null) {
        cargs.push(
            "--nmf_dim",
            String((params["nmf_dim"] ?? null))
        );
    }
    if ((params["nmf_iterations"] ?? null) !== null) {
        cargs.push(
            "--nmfitt",
            String((params["nmf_iterations"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["out_data"] ?? null) !== null) {
        cargs.push(
            "--out_data",
            (params["out_data"] ?? null)
        );
    }
    if ((params["out_vnscales"] ?? null) !== null) {
        cargs.push(
            "--out_vnscales",
            (params["out_vnscales"] ?? null)
        );
    }
    return cargs;
}


function fsl_mvlm_outputs(
    params: FslMvlmParameters,
    execution: Execution,
): FslMvlmOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslMvlmOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["basename_output_files"] ?? null), "_out.nii.gz"].join('')),
        outdata: ((params["out_data"] ?? null) !== null) ? execution.outputFile([(params["out_data"] ?? null), ".nii.gz"].join('')) : null,
        vnscales: ((params["out_vnscales"] ?? null) !== null) ? execution.outputFile([(params["out_vnscales"] ?? null), ".txt"].join('')) : null,
    };
    return ret;
}


function fsl_mvlm_execute(
    params: FslMvlmParameters,
    execution: Execution,
): FslMvlmOutputs {
    /**
     * Multivariate Linear Model regression on time courses and/or 3D/4D images using SVD (PCA), PLS, normalised PLS, CVA, SVD-CVA or MLM.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslMvlmOutputs`).
     */
    params = execution.params(params)
    const cargs = fsl_mvlm_cargs(params, execution)
    const ret = fsl_mvlm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fsl_mvlm(
    input_file: InputPathType,
    basename_output_files: string,
    algorithm: string | null = null,
    design_matrix: InputPathType | null = null,
    mask_image: InputPathType | null = null,
    design_normalization: boolean = false,
    variance_normalisation: boolean = false,
    demean: boolean = false,
    nmf_dim: number | null = null,
    nmf_iterations: number | null = null,
    verbose: boolean = false,
    out_data: string | null = null,
    out_vnscales: string | null = null,
    runner: Runner | null = null,
): FslMvlmOutputs {
    /**
     * Multivariate Linear Model regression on time courses and/or 3D/4D images using SVD (PCA), PLS, normalised PLS, CVA, SVD-CVA or MLM.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file Input file (text matrix or 3D/4D image file)
     * @param basename_output_files Basename for output files
     * @param algorithm Algorithm for decomposition: PCA (or SVD; default), PLS, orthoPLS, CVA, SVD-CVA, MLM, NMF
     * @param design_matrix File name of the GLM design matrix (time courses or spatial maps)
     * @param mask_image Mask image file name if input is an image
     * @param design_normalization Switch on normalisation of the design matrix columns to unit standard deviation
     * @param variance_normalisation Perform MELODIC variance-normalisation on data
     * @param demean Switch on de-meaning of design and data
     * @param nmf_dim Number of underlying factors for NMF
     * @param nmf_iterations Number of NMF iterations (default 100)
     * @param verbose Switch on verbose output
     * @param out_data Output file name for pre-processed data
     * @param out_vnscales Output file name for scaling factors for variance normalisation
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslMvlmOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSL_MVLM_METADATA);
    const params = fsl_mvlm_params(input_file, basename_output_files, algorithm, design_matrix, mask_image, design_normalization, variance_normalisation, demean, nmf_dim, nmf_iterations, verbose, out_data, out_vnscales)
    return fsl_mvlm_execute(params, execution);
}


export {
      FSL_MVLM_METADATA,
      FslMvlmOutputs,
      FslMvlmParameters,
      fsl_mvlm,
      fsl_mvlm_params,
};
