// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TRR_METADATA: Metadata = {
    id: "bd682eac2506d81d16a0fea9c2fa13b1b23a36c9.boutiques",
    name: "TRR",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface TrrParameters {
    "@type": "afni.TRR";
    "prefix": string;
    "chains"?: number | null | undefined;
    "iterations"?: number | null | undefined;
    "response_var": string;
    "subject_var": string;
    "repetition_var"?: string | null | undefined;
    "condition_var"?: string | null | undefined;
    "data_table": InputPathType;
    "categorical_vars"?: string | null | undefined;
    "quantitative_vars"?: string | null | undefined;
    "response_dist"?: string | null | undefined;
    "model"?: string | null | undefined;
    "plot_size"?: Array<number> | null | undefined;
    "standard_error"?: string | null | undefined;
    "t_stat"?: string | null | undefined;
    "within_chain_parallelization"?: number | null | undefined;
    "debug": boolean;
    "verbose"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.TRR": trr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.TRR": trr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `trr(...)`.
 *
 * @interface
 */
interface TrrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output file containing inference information for effects of interest
     */
    output_file_txt: OutputPathType;
    /**
     * Density plot of the TRR distribution
     */
    output_file_pdf: OutputPathType;
    /**
     * Saved R data in binary format for post hoc processing
     */
    output_file_rdata: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Prefix for output file names
 * @param response_var Specify the column name for the response variable
 * @param subject_var Specify the column name for the subject variable
 * @param data_table Specify the path to the data table in pure text format
 * @param chains Specify the number of Markov chains
 * @param iterations Specify the number of iterations per Markov chain
 * @param repetition_var Specify the column name for the repetition variable
 * @param condition_var Specify the column name for the condition variable
 * @param categorical_vars Identify categorical (qualitative) variables
 * @param quantitative_vars Identify quantitative (covariate) variables
 * @param response_dist Specify the distribution for the response variable (e.g., 'gaussian', 'student', 'exgaussian')
 * @param model Specify the effects associated with explanatory variables
 * @param plot_size Specify the layout of posterior distribution plot (PDP) with width and height in inches
 * @param standard_error Include standard error for the response variable as input
 * @param t_stat Specify the column name for the t-statistic values
 * @param within_chain_parallelization Invoke within-chain parallelization; specify number of threads per chain
 * @param debug Enable R to save the parameters for debugging
 * @param verbose Specify verbose level
 *
 * @returns Parameter dictionary
 */
function trr_params(
    prefix: string,
    response_var: string,
    subject_var: string,
    data_table: InputPathType,
    chains: number | null = null,
    iterations: number | null = null,
    repetition_var: string | null = null,
    condition_var: string | null = null,
    categorical_vars: string | null = null,
    quantitative_vars: string | null = null,
    response_dist: string | null = null,
    model: string | null = null,
    plot_size: Array<number> | null = null,
    standard_error: string | null = null,
    t_stat: string | null = null,
    within_chain_parallelization: number | null = null,
    debug: boolean = false,
    verbose: number | null = null,
): TrrParameters {
    const params = {
        "@type": "afni.TRR" as const,
        "prefix": prefix,
        "response_var": response_var,
        "subject_var": subject_var,
        "data_table": data_table,
        "debug": debug,
    };
    if (chains !== null) {
        params["chains"] = chains;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (repetition_var !== null) {
        params["repetition_var"] = repetition_var;
    }
    if (condition_var !== null) {
        params["condition_var"] = condition_var;
    }
    if (categorical_vars !== null) {
        params["categorical_vars"] = categorical_vars;
    }
    if (quantitative_vars !== null) {
        params["quantitative_vars"] = quantitative_vars;
    }
    if (response_dist !== null) {
        params["response_dist"] = response_dist;
    }
    if (model !== null) {
        params["model"] = model;
    }
    if (plot_size !== null) {
        params["plot_size"] = plot_size;
    }
    if (standard_error !== null) {
        params["standard_error"] = standard_error;
    }
    if (t_stat !== null) {
        params["t_stat"] = t_stat;
    }
    if (within_chain_parallelization !== null) {
        params["within_chain_parallelization"] = within_chain_parallelization;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function trr_cargs(
    params: TrrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("TRR");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["chains"] ?? null) !== null) {
        cargs.push(
            "-chains",
            String((params["chains"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-iterations",
            String((params["iterations"] ?? null))
        );
    }
    cargs.push(
        "-Y",
        (params["response_var"] ?? null)
    );
    cargs.push(
        "-subject",
        (params["subject_var"] ?? null)
    );
    if ((params["repetition_var"] ?? null) !== null) {
        cargs.push(
            "-repetition",
            (params["repetition_var"] ?? null)
        );
    }
    if ((params["condition_var"] ?? null) !== null) {
        cargs.push(
            "-condition",
            (params["condition_var"] ?? null)
        );
    }
    cargs.push(
        "-dataTable",
        execution.inputFile((params["data_table"] ?? null))
    );
    if ((params["categorical_vars"] ?? null) !== null) {
        cargs.push(
            "-cVars",
            (params["categorical_vars"] ?? null)
        );
    }
    if ((params["quantitative_vars"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["quantitative_vars"] ?? null)
        );
    }
    if ((params["response_dist"] ?? null) !== null) {
        cargs.push(
            "-distY",
            (params["response_dist"] ?? null)
        );
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "-model",
            (params["model"] ?? null)
        );
    }
    if ((params["plot_size"] ?? null) !== null) {
        cargs.push(
            "-PDP",
            ...(params["plot_size"] ?? null).map(String)
        );
    }
    if ((params["standard_error"] ?? null) !== null) {
        cargs.push(
            "-se",
            (params["standard_error"] ?? null)
        );
    }
    if ((params["t_stat"] ?? null) !== null) {
        cargs.push(
            "-tstat",
            (params["t_stat"] ?? null)
        );
    }
    if ((params["within_chain_parallelization"] ?? null) !== null) {
        cargs.push(
            "-WCP",
            String((params["within_chain_parallelization"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-dbgArgs");
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function trr_outputs(
    params: TrrParameters,
    execution: Execution,
): TrrOutputs {
    const ret: TrrOutputs = {
        root: execution.outputFile("."),
        output_file_txt: execution.outputFile([(params["prefix"] ?? null), ".txt"].join('')),
        output_file_pdf: execution.outputFile([(params["prefix"] ?? null), ".pdf"].join('')),
        output_file_rdata: execution.outputFile([(params["prefix"] ?? null), ".RData"].join('')),
    };
    return ret;
}


/**
 * Test-Retest Reliability Program through Bayesian Multilevel Modeling.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TrrOutputs`).
 */
function trr_execute(
    params: TrrParameters,
    runner: Runner | null = null,
): TrrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TRR_METADATA);
    params = execution.params(params)
    const cargs = trr_cargs(params, execution)
    const ret = trr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Test-Retest Reliability Program through Bayesian Multilevel Modeling.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Prefix for output file names
 * @param response_var Specify the column name for the response variable
 * @param subject_var Specify the column name for the subject variable
 * @param data_table Specify the path to the data table in pure text format
 * @param chains Specify the number of Markov chains
 * @param iterations Specify the number of iterations per Markov chain
 * @param repetition_var Specify the column name for the repetition variable
 * @param condition_var Specify the column name for the condition variable
 * @param categorical_vars Identify categorical (qualitative) variables
 * @param quantitative_vars Identify quantitative (covariate) variables
 * @param response_dist Specify the distribution for the response variable (e.g., 'gaussian', 'student', 'exgaussian')
 * @param model Specify the effects associated with explanatory variables
 * @param plot_size Specify the layout of posterior distribution plot (PDP) with width and height in inches
 * @param standard_error Include standard error for the response variable as input
 * @param t_stat Specify the column name for the t-statistic values
 * @param within_chain_parallelization Invoke within-chain parallelization; specify number of threads per chain
 * @param debug Enable R to save the parameters for debugging
 * @param verbose Specify verbose level
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TrrOutputs`).
 */
function trr(
    prefix: string,
    response_var: string,
    subject_var: string,
    data_table: InputPathType,
    chains: number | null = null,
    iterations: number | null = null,
    repetition_var: string | null = null,
    condition_var: string | null = null,
    categorical_vars: string | null = null,
    quantitative_vars: string | null = null,
    response_dist: string | null = null,
    model: string | null = null,
    plot_size: Array<number> | null = null,
    standard_error: string | null = null,
    t_stat: string | null = null,
    within_chain_parallelization: number | null = null,
    debug: boolean = false,
    verbose: number | null = null,
    runner: Runner | null = null,
): TrrOutputs {
    const params = trr_params(prefix, response_var, subject_var, data_table, chains, iterations, repetition_var, condition_var, categorical_vars, quantitative_vars, response_dist, model, plot_size, standard_error, t_stat, within_chain_parallelization, debug, verbose)
    return trr_execute(params, runner);
}


export {
      TRR_METADATA,
      TrrOutputs,
      TrrParameters,
      trr,
      trr_execute,
      trr_params,
};
