// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FUSE_INTENSITY_IMAGES_METADATA: Metadata = {
    id: "2802ec190420b6963111965b8b49d44744698bee.boutiques",
    name: "mri_fuse_intensity_images",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFuseIntensityImagesParameters {
    "@type": "freesurfer.mri_fuse_intensity_images";
    "longitudinal_time_point_file": InputPathType;
    "input_volume": InputPathType;
    "transform_file": InputPathType;
    "output_volume": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_fuse_intensity_images": mri_fuse_intensity_images_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_fuse_intensity_images": mri_fuse_intensity_images_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_fuse_intensity_images(...)`.
 *
 * @interface
 */
interface MriFuseIntensityImagesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting fused intensity image
     */
    fused_intensity_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param longitudinal_time_point_file File containing the longitudinal time points
 * @param input_volume Input volume to be fused
 * @param transform_file File containing the transforms
 * @param output_volume Output fused volume
 *
 * @returns Parameter dictionary
 */
function mri_fuse_intensity_images_params(
    longitudinal_time_point_file: InputPathType,
    input_volume: InputPathType,
    transform_file: InputPathType,
    output_volume: string,
): MriFuseIntensityImagesParameters {
    const params = {
        "@type": "freesurfer.mri_fuse_intensity_images" as const,
        "longitudinal_time_point_file": longitudinal_time_point_file,
        "input_volume": input_volume,
        "transform_file": transform_file,
        "output_volume": output_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_fuse_intensity_images_cargs(
    params: MriFuseIntensityImagesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_fuse_intensity_images");
    cargs.push(execution.inputFile((params["longitudinal_time_point_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["transform_file"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_fuse_intensity_images_outputs(
    params: MriFuseIntensityImagesParameters,
    execution: Execution,
): MriFuseIntensityImagesOutputs {
    const ret: MriFuseIntensityImagesOutputs = {
        root: execution.outputFile("."),
        fused_intensity_image: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_fuse_intensity_images
 *
 * Fuses intensity images based on given transforms.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFuseIntensityImagesOutputs`).
 */
function mri_fuse_intensity_images_execute(
    params: MriFuseIntensityImagesParameters,
    runner: Runner | null = null,
): MriFuseIntensityImagesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FUSE_INTENSITY_IMAGES_METADATA);
    params = execution.params(params)
    const cargs = mri_fuse_intensity_images_cargs(params, execution)
    const ret = mri_fuse_intensity_images_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_fuse_intensity_images
 *
 * Fuses intensity images based on given transforms.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param longitudinal_time_point_file File containing the longitudinal time points
 * @param input_volume Input volume to be fused
 * @param transform_file File containing the transforms
 * @param output_volume Output fused volume
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFuseIntensityImagesOutputs`).
 */
function mri_fuse_intensity_images(
    longitudinal_time_point_file: InputPathType,
    input_volume: InputPathType,
    transform_file: InputPathType,
    output_volume: string,
    runner: Runner | null = null,
): MriFuseIntensityImagesOutputs {
    const params = mri_fuse_intensity_images_params(longitudinal_time_point_file, input_volume, transform_file, output_volume)
    return mri_fuse_intensity_images_execute(params, runner);
}


export {
      MRI_FUSE_INTENSITY_IMAGES_METADATA,
      MriFuseIntensityImagesOutputs,
      MriFuseIntensityImagesParameters,
      mri_fuse_intensity_images,
      mri_fuse_intensity_images_execute,
      mri_fuse_intensity_images_params,
};
