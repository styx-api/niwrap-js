// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CONVERT_METADATA: Metadata = {
    id: "70a8b5ced62c481e40ec12dcf2abf0cb66adfb18.boutiques",
    name: "cifti-convert",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiConvertToGiftiExtParameters {
    "@type": "workbench.cifti-convert.to_gifti_ext";
    "cifti_in": InputPathType;
    "gifti_out": string;
}


interface CiftiConvertResetTimepointsParameters {
    "@type": "workbench.cifti-convert.from_gifti_ext.reset_timepoints";
    "timestep": number;
    "timestart": number;
    "opt_unit_unit"?: string | null | undefined;
}


interface CiftiConvertReplaceBinaryParameters {
    "@type": "workbench.cifti-convert.from_gifti_ext.replace_binary";
    "binary_in": string;
    "opt_flip_endian": boolean;
    "opt_transpose": boolean;
}


interface CiftiConvertFromGiftiExtParameters {
    "@type": "workbench.cifti-convert.from_gifti_ext";
    "gifti_in": string;
    "cifti_out": string;
    "reset_timepoints"?: CiftiConvertResetTimepointsParameters | null | undefined;
    "opt_reset_scalars": boolean;
    "opt_column_reset_scalars": boolean;
    "replace_binary"?: CiftiConvertReplaceBinaryParameters | null | undefined;
}


interface CiftiConvertToNiftiParameters {
    "@type": "workbench.cifti-convert.to_nifti";
    "cifti_in": InputPathType;
    "nifti_out": string;
    "opt_smaller_file": boolean;
    "opt_smaller_dims": boolean;
}


interface CiftiConvertResetTimepoints1Parameters {
    "@type": "workbench.cifti-convert.from_nifti.reset_timepoints";
    "timestep": number;
    "timestart": number;
    "opt_unit_unit"?: string | null | undefined;
}


interface CiftiConvertFromNiftiParameters {
    "@type": "workbench.cifti-convert.from_nifti";
    "nifti_in": InputPathType;
    "cifti_template": InputPathType;
    "cifti_out": string;
    "reset_timepoints"?: CiftiConvertResetTimepoints1Parameters | null | undefined;
    "opt_reset_scalars": boolean;
}


interface CiftiConvertToTextParameters {
    "@type": "workbench.cifti-convert.to_text";
    "cifti_in": InputPathType;
    "text_out": string;
    "opt_col_delim_delim_string"?: string | null | undefined;
}


interface CiftiConvertResetTimepoints2Parameters {
    "@type": "workbench.cifti-convert.from_text.reset_timepoints";
    "timestep": number;
    "timestart": number;
    "opt_unit_unit"?: string | null | undefined;
}


interface CiftiConvertFromTextParameters {
    "@type": "workbench.cifti-convert.from_text";
    "text_in": string;
    "cifti_template": InputPathType;
    "cifti_out": string;
    "opt_col_delim_delim_string"?: string | null | undefined;
    "reset_timepoints"?: CiftiConvertResetTimepoints2Parameters | null | undefined;
    "opt_reset_scalars": boolean;
}


interface CiftiConvertParameters {
    "@type": "workbench.cifti-convert";
    "to_gifti_ext"?: CiftiConvertToGiftiExtParameters | null | undefined;
    "from_gifti_ext"?: CiftiConvertFromGiftiExtParameters | null | undefined;
    "to_nifti"?: CiftiConvertToNiftiParameters | null | undefined;
    "from_nifti"?: CiftiConvertFromNiftiParameters | null | undefined;
    "to_text"?: CiftiConvertToTextParameters | null | undefined;
    "from_text"?: CiftiConvertFromTextParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-convert": cifti_convert_cargs,
        "workbench.cifti-convert.to_gifti_ext": cifti_convert_to_gifti_ext_cargs,
        "workbench.cifti-convert.from_gifti_ext": cifti_convert_from_gifti_ext_cargs,
        "workbench.cifti-convert.from_gifti_ext.reset_timepoints": cifti_convert_reset_timepoints_cargs,
        "workbench.cifti-convert.from_gifti_ext.replace_binary": cifti_convert_replace_binary_cargs,
        "workbench.cifti-convert.to_nifti": cifti_convert_to_nifti_cargs,
        "workbench.cifti-convert.from_nifti": cifti_convert_from_nifti_cargs,
        "workbench.cifti-convert.from_nifti.reset_timepoints": cifti_convert_reset_timepoints_1_cargs,
        "workbench.cifti-convert.to_text": cifti_convert_to_text_cargs,
        "workbench.cifti-convert.from_text": cifti_convert_from_text_cargs,
        "workbench.cifti-convert.from_text.reset_timepoints": cifti_convert_reset_timepoints_2_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-convert": cifti_convert_outputs,
        "workbench.cifti-convert.from_gifti_ext": cifti_convert_from_gifti_ext_outputs,
        "workbench.cifti-convert.to_nifti": cifti_convert_to_nifti_outputs,
        "workbench.cifti-convert.from_nifti": cifti_convert_from_nifti_outputs,
        "workbench.cifti-convert.from_text": cifti_convert_from_text_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param cifti_in the input cifti file
 * @param gifti_out output - the output gifti file
 *
 * @returns Parameter dictionary
 */
function cifti_convert_to_gifti_ext_params(
    cifti_in: InputPathType,
    gifti_out: string,
): CiftiConvertToGiftiExtParameters {
    const params = {
        "@type": "workbench.cifti-convert.to_gifti_ext" as const,
        "cifti_in": cifti_in,
        "gifti_out": gifti_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_to_gifti_ext_cargs(
    params: CiftiConvertToGiftiExtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-to-gifti-ext");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["gifti_out"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param timestep the desired time between frames
 * @param timestart the desired time offset of the initial frame
 * @param opt_unit_unit use a unit other than time: unit identifier (default SECOND)
 *
 * @returns Parameter dictionary
 */
function cifti_convert_reset_timepoints_params(
    timestep: number,
    timestart: number,
    opt_unit_unit: string | null = null,
): CiftiConvertResetTimepointsParameters {
    const params = {
        "@type": "workbench.cifti-convert.from_gifti_ext.reset_timepoints" as const,
        "timestep": timestep,
        "timestart": timestart,
    };
    if (opt_unit_unit !== null) {
        params["opt_unit_unit"] = opt_unit_unit;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_reset_timepoints_cargs(
    params: CiftiConvertResetTimepointsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-reset-timepoints");
    cargs.push(String((params["timestep"] ?? null)));
    cargs.push(String((params["timestart"] ?? null)));
    if ((params["opt_unit_unit"] ?? null) !== null) {
        cargs.push(
            "-unit",
            (params["opt_unit_unit"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param binary_in the binary file that contains replacement data
 * @param opt_flip_endian byteswap the binary file
 * @param opt_transpose transpose the binary file
 *
 * @returns Parameter dictionary
 */
function cifti_convert_replace_binary_params(
    binary_in: string,
    opt_flip_endian: boolean = false,
    opt_transpose: boolean = false,
): CiftiConvertReplaceBinaryParameters {
    const params = {
        "@type": "workbench.cifti-convert.from_gifti_ext.replace_binary" as const,
        "binary_in": binary_in,
        "opt_flip_endian": opt_flip_endian,
        "opt_transpose": opt_transpose,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_replace_binary_cargs(
    params: CiftiConvertReplaceBinaryParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-replace-binary");
    cargs.push((params["binary_in"] ?? null));
    if ((params["opt_flip_endian"] ?? null)) {
        cargs.push("-flip-endian");
    }
    if ((params["opt_transpose"] ?? null)) {
        cargs.push("-transpose");
    }
    return cargs;
}


/**
 * Output object returned when calling `CiftiConvertFromGiftiExtParameters | null(...)`.
 *
 * @interface
 */
interface CiftiConvertFromGiftiExtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param gifti_in the input gifti file
 * @param cifti_out the output cifti file
 * @param reset_timepoints reset the mapping along rows to timepoints, taking length from the gifti file
 * @param opt_reset_scalars reset mapping along rows to scalars, taking length from the gifti file
 * @param opt_column_reset_scalars reset mapping along columns to scalar (useful for changing number of series in a sdseries file)
 * @param replace_binary replace data with a binary file
 *
 * @returns Parameter dictionary
 */
function cifti_convert_from_gifti_ext_params(
    gifti_in: string,
    cifti_out: string,
    reset_timepoints: CiftiConvertResetTimepointsParameters | null = null,
    opt_reset_scalars: boolean = false,
    opt_column_reset_scalars: boolean = false,
    replace_binary: CiftiConvertReplaceBinaryParameters | null = null,
): CiftiConvertFromGiftiExtParameters {
    const params = {
        "@type": "workbench.cifti-convert.from_gifti_ext" as const,
        "gifti_in": gifti_in,
        "cifti_out": cifti_out,
        "opt_reset_scalars": opt_reset_scalars,
        "opt_column_reset_scalars": opt_column_reset_scalars,
    };
    if (reset_timepoints !== null) {
        params["reset_timepoints"] = reset_timepoints;
    }
    if (replace_binary !== null) {
        params["replace_binary"] = replace_binary;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_from_gifti_ext_cargs(
    params: CiftiConvertFromGiftiExtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-from-gifti-ext");
    cargs.push((params["gifti_in"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["reset_timepoints"] ?? null) !== null) {
        cargs.push(...dynCargs((params["reset_timepoints"] ?? null)["@type"])((params["reset_timepoints"] ?? null), execution));
    }
    if ((params["opt_reset_scalars"] ?? null)) {
        cargs.push("-reset-scalars");
    }
    if ((params["opt_column_reset_scalars"] ?? null)) {
        cargs.push("-column-reset-scalars");
    }
    if ((params["replace_binary"] ?? null) !== null) {
        cargs.push(...dynCargs((params["replace_binary"] ?? null)["@type"])((params["replace_binary"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_convert_from_gifti_ext_outputs(
    params: CiftiConvertFromGiftiExtParameters,
    execution: Execution,
): CiftiConvertFromGiftiExtOutputs {
    const ret: CiftiConvertFromGiftiExtOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `CiftiConvertToNiftiParameters | null(...)`.
 *
 * @interface
 */
interface CiftiConvertToNiftiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output nifti file
     */
    nifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in the input cifti file
 * @param nifti_out the output nifti file
 * @param opt_smaller_file use better-fitting dimension lengths
 * @param opt_smaller_dims minimize the largest dimension, for tools that don't like large indices
 *
 * @returns Parameter dictionary
 */
function cifti_convert_to_nifti_params(
    cifti_in: InputPathType,
    nifti_out: string,
    opt_smaller_file: boolean = false,
    opt_smaller_dims: boolean = false,
): CiftiConvertToNiftiParameters {
    const params = {
        "@type": "workbench.cifti-convert.to_nifti" as const,
        "cifti_in": cifti_in,
        "nifti_out": nifti_out,
        "opt_smaller_file": opt_smaller_file,
        "opt_smaller_dims": opt_smaller_dims,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_to_nifti_cargs(
    params: CiftiConvertToNiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-to-nifti");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["nifti_out"] ?? null));
    if ((params["opt_smaller_file"] ?? null)) {
        cargs.push("-smaller-file");
    }
    if ((params["opt_smaller_dims"] ?? null)) {
        cargs.push("-smaller-dims");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_convert_to_nifti_outputs(
    params: CiftiConvertToNiftiParameters,
    execution: Execution,
): CiftiConvertToNiftiOutputs {
    const ret: CiftiConvertToNiftiOutputs = {
        root: execution.outputFile("."),
        nifti_out: execution.outputFile([(params["nifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Build parameters.
 *
 * @param timestep the desired time between frames
 * @param timestart the desired time offset of the initial frame
 * @param opt_unit_unit use a unit other than time: unit identifier (default SECOND)
 *
 * @returns Parameter dictionary
 */
function cifti_convert_reset_timepoints_1_params(
    timestep: number,
    timestart: number,
    opt_unit_unit: string | null = null,
): CiftiConvertResetTimepoints1Parameters {
    const params = {
        "@type": "workbench.cifti-convert.from_nifti.reset_timepoints" as const,
        "timestep": timestep,
        "timestart": timestart,
    };
    if (opt_unit_unit !== null) {
        params["opt_unit_unit"] = opt_unit_unit;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_reset_timepoints_1_cargs(
    params: CiftiConvertResetTimepoints1Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-reset-timepoints");
    cargs.push(String((params["timestep"] ?? null)));
    cargs.push(String((params["timestart"] ?? null)));
    if ((params["opt_unit_unit"] ?? null) !== null) {
        cargs.push(
            "-unit",
            (params["opt_unit_unit"] ?? null)
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `CiftiConvertFromNiftiParameters | null(...)`.
 *
 * @interface
 */
interface CiftiConvertFromNiftiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param nifti_in the input nifti file
 * @param cifti_template a cifti file with the dimension(s) and mapping(s) that should be used
 * @param cifti_out the output cifti file
 * @param reset_timepoints reset the mapping along rows to timepoints, taking length from the nifti file
 * @param opt_reset_scalars reset mapping along rows to scalars, taking length from the nifti file
 *
 * @returns Parameter dictionary
 */
function cifti_convert_from_nifti_params(
    nifti_in: InputPathType,
    cifti_template: InputPathType,
    cifti_out: string,
    reset_timepoints: CiftiConvertResetTimepoints1Parameters | null = null,
    opt_reset_scalars: boolean = false,
): CiftiConvertFromNiftiParameters {
    const params = {
        "@type": "workbench.cifti-convert.from_nifti" as const,
        "nifti_in": nifti_in,
        "cifti_template": cifti_template,
        "cifti_out": cifti_out,
        "opt_reset_scalars": opt_reset_scalars,
    };
    if (reset_timepoints !== null) {
        params["reset_timepoints"] = reset_timepoints;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_from_nifti_cargs(
    params: CiftiConvertFromNiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-from-nifti");
    cargs.push(execution.inputFile((params["nifti_in"] ?? null)));
    cargs.push(execution.inputFile((params["cifti_template"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["reset_timepoints"] ?? null) !== null) {
        cargs.push(...dynCargs((params["reset_timepoints"] ?? null)["@type"])((params["reset_timepoints"] ?? null), execution));
    }
    if ((params["opt_reset_scalars"] ?? null)) {
        cargs.push("-reset-scalars");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_convert_from_nifti_outputs(
    params: CiftiConvertFromNiftiParameters,
    execution: Execution,
): CiftiConvertFromNiftiOutputs {
    const ret: CiftiConvertFromNiftiOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Build parameters.
 *
 * @param cifti_in the input cifti file
 * @param text_out output - the output text file
 * @param opt_col_delim_delim_string choose string to put between elements in a row: the string to use (default is a tab character)
 *
 * @returns Parameter dictionary
 */
function cifti_convert_to_text_params(
    cifti_in: InputPathType,
    text_out: string,
    opt_col_delim_delim_string: string | null = null,
): CiftiConvertToTextParameters {
    const params = {
        "@type": "workbench.cifti-convert.to_text" as const,
        "cifti_in": cifti_in,
        "text_out": text_out,
    };
    if (opt_col_delim_delim_string !== null) {
        params["opt_col_delim_delim_string"] = opt_col_delim_delim_string;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_to_text_cargs(
    params: CiftiConvertToTextParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-to-text");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["text_out"] ?? null));
    if ((params["opt_col_delim_delim_string"] ?? null) !== null) {
        cargs.push(
            "-col-delim",
            (params["opt_col_delim_delim_string"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param timestep the desired time between frames
 * @param timestart the desired time offset of the initial frame
 * @param opt_unit_unit use a unit other than time: unit identifier (default SECOND)
 *
 * @returns Parameter dictionary
 */
function cifti_convert_reset_timepoints_2_params(
    timestep: number,
    timestart: number,
    opt_unit_unit: string | null = null,
): CiftiConvertResetTimepoints2Parameters {
    const params = {
        "@type": "workbench.cifti-convert.from_text.reset_timepoints" as const,
        "timestep": timestep,
        "timestart": timestart,
    };
    if (opt_unit_unit !== null) {
        params["opt_unit_unit"] = opt_unit_unit;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_reset_timepoints_2_cargs(
    params: CiftiConvertResetTimepoints2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-reset-timepoints");
    cargs.push(String((params["timestep"] ?? null)));
    cargs.push(String((params["timestart"] ?? null)));
    if ((params["opt_unit_unit"] ?? null) !== null) {
        cargs.push(
            "-unit",
            (params["opt_unit_unit"] ?? null)
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `CiftiConvertFromTextParameters | null(...)`.
 *
 * @interface
 */
interface CiftiConvertFromTextOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param text_in the input text file
 * @param cifti_template a cifti file with the dimension(s) and mapping(s) that should be used
 * @param cifti_out the output cifti file
 * @param opt_col_delim_delim_string specify string that is between elements in a row: the string to use (default is any whitespace)
 * @param reset_timepoints reset the mapping along rows to timepoints, taking length from the text file
 * @param opt_reset_scalars reset mapping along rows to scalars, taking length from the text file
 *
 * @returns Parameter dictionary
 */
function cifti_convert_from_text_params(
    text_in: string,
    cifti_template: InputPathType,
    cifti_out: string,
    opt_col_delim_delim_string: string | null = null,
    reset_timepoints: CiftiConvertResetTimepoints2Parameters | null = null,
    opt_reset_scalars: boolean = false,
): CiftiConvertFromTextParameters {
    const params = {
        "@type": "workbench.cifti-convert.from_text" as const,
        "text_in": text_in,
        "cifti_template": cifti_template,
        "cifti_out": cifti_out,
        "opt_reset_scalars": opt_reset_scalars,
    };
    if (opt_col_delim_delim_string !== null) {
        params["opt_col_delim_delim_string"] = opt_col_delim_delim_string;
    }
    if (reset_timepoints !== null) {
        params["reset_timepoints"] = reset_timepoints;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_from_text_cargs(
    params: CiftiConvertFromTextParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-from-text");
    cargs.push((params["text_in"] ?? null));
    cargs.push(execution.inputFile((params["cifti_template"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_col_delim_delim_string"] ?? null) !== null) {
        cargs.push(
            "-col-delim",
            (params["opt_col_delim_delim_string"] ?? null)
        );
    }
    if ((params["reset_timepoints"] ?? null) !== null) {
        cargs.push(...dynCargs((params["reset_timepoints"] ?? null)["@type"])((params["reset_timepoints"] ?? null), execution));
    }
    if ((params["opt_reset_scalars"] ?? null)) {
        cargs.push("-reset-scalars");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_convert_from_text_outputs(
    params: CiftiConvertFromTextParameters,
    execution: Execution,
): CiftiConvertFromTextOutputs {
    const ret: CiftiConvertFromTextOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `cifti_convert(...)`.
 *
 * @interface
 */
interface CiftiConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `cifti_convert_from_gifti_ext_outputs`.
     */
    from_gifti_ext: CiftiConvertFromGiftiExtOutputs | null;
    /**
     * Outputs from `cifti_convert_to_nifti_outputs`.
     */
    to_nifti: CiftiConvertToNiftiOutputs | null;
    /**
     * Outputs from `cifti_convert_from_nifti_outputs`.
     */
    from_nifti: CiftiConvertFromNiftiOutputs | null;
    /**
     * Outputs from `cifti_convert_from_text_outputs`.
     */
    from_text: CiftiConvertFromTextOutputs | null;
}


/**
 * Build parameters.
 *
 * @param to_gifti_ext convert to GIFTI external binary
 * @param from_gifti_ext convert a GIFTI made with this command back into a CIFTI
 * @param to_nifti convert to NIFTI1
 * @param from_nifti convert a NIFTI (1 or 2) file made with this command back into CIFTI
 * @param to_text convert to a plain text file
 * @param from_text convert from plain text to cifti
 *
 * @returns Parameter dictionary
 */
function cifti_convert_params(
    to_gifti_ext: CiftiConvertToGiftiExtParameters | null = null,
    from_gifti_ext: CiftiConvertFromGiftiExtParameters | null = null,
    to_nifti: CiftiConvertToNiftiParameters | null = null,
    from_nifti: CiftiConvertFromNiftiParameters | null = null,
    to_text: CiftiConvertToTextParameters | null = null,
    from_text: CiftiConvertFromTextParameters | null = null,
): CiftiConvertParameters {
    const params = {
        "@type": "workbench.cifti-convert" as const,
    };
    if (to_gifti_ext !== null) {
        params["to_gifti_ext"] = to_gifti_ext;
    }
    if (from_gifti_ext !== null) {
        params["from_gifti_ext"] = from_gifti_ext;
    }
    if (to_nifti !== null) {
        params["to_nifti"] = to_nifti;
    }
    if (from_nifti !== null) {
        params["from_nifti"] = from_nifti;
    }
    if (to_text !== null) {
        params["to_text"] = to_text;
    }
    if (from_text !== null) {
        params["from_text"] = from_text;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_convert_cargs(
    params: CiftiConvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-convert");
    if ((params["to_gifti_ext"] ?? null) !== null) {
        cargs.push(...dynCargs((params["to_gifti_ext"] ?? null)["@type"])((params["to_gifti_ext"] ?? null), execution));
    }
    if ((params["from_gifti_ext"] ?? null) !== null) {
        cargs.push(...dynCargs((params["from_gifti_ext"] ?? null)["@type"])((params["from_gifti_ext"] ?? null), execution));
    }
    if ((params["to_nifti"] ?? null) !== null) {
        cargs.push(...dynCargs((params["to_nifti"] ?? null)["@type"])((params["to_nifti"] ?? null), execution));
    }
    if ((params["from_nifti"] ?? null) !== null) {
        cargs.push(...dynCargs((params["from_nifti"] ?? null)["@type"])((params["from_nifti"] ?? null), execution));
    }
    if ((params["to_text"] ?? null) !== null) {
        cargs.push(...dynCargs((params["to_text"] ?? null)["@type"])((params["to_text"] ?? null), execution));
    }
    if ((params["from_text"] ?? null) !== null) {
        cargs.push(...dynCargs((params["from_text"] ?? null)["@type"])((params["from_text"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_convert_outputs(
    params: CiftiConvertParameters,
    execution: Execution,
): CiftiConvertOutputs {
    const ret: CiftiConvertOutputs = {
        root: execution.outputFile("."),
        from_gifti_ext: (params["from_gifti_ext"] ?? null) ? (dynOutputs((params["from_gifti_ext"] ?? null)["@type"])?.((params["from_gifti_ext"] ?? null), execution) ?? null) : null,
        to_nifti: (params["to_nifti"] ?? null) ? (dynOutputs((params["to_nifti"] ?? null)["@type"])?.((params["to_nifti"] ?? null), execution) ?? null) : null,
        from_nifti: (params["from_nifti"] ?? null) ? (dynOutputs((params["from_nifti"] ?? null)["@type"])?.((params["from_nifti"] ?? null), execution) ?? null) : null,
        from_text: (params["from_text"] ?? null) ? (dynOutputs((params["from_text"] ?? null)["@type"])?.((params["from_text"] ?? null), execution) ?? null) : null,
    };
    return ret;
}


/**
 * cifti-convert
 *
 * Dump cifti matrix into other formats.
 *
 * This command is used to convert a full CIFTI matrix to/from formats that can be used by programs that don't understand CIFTI.  You must specify exactly one of -to-gifti-ext, -from-gifti-ext, -to-nifti, -from-nifti, -to-text, or -from-text.
 *
 * If you want to write an existing CIFTI file with a different CIFTI version, see -file-convert, and its -cifti-version-convert option.
 *
 * If you want part of the CIFTI file as a metric, label, or volume file, see -cifti-separate.  If you want to create a CIFTI file from metric and/or volume files, see the -cifti-create-* commands.
 *
 * If you want to import a matrix that is restricted to an ROI, first create a template CIFTI file matching that ROI using a -cifti-create-* command.  After importing to CIFTI, you can then expand the file into a standard brainordinates space with -cifti-create-dense-from-template.  If you want to export only part of a CIFTI file, first create an roi-restricted CIFTI file with -cifti-restrict-dense-mapping.
 *
 * The -transpose option to -from-gifti-ext is needed if the replacement binary file is in column-major order.
 *
 * The -unit options accept these values:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiConvertOutputs`).
 */
function cifti_convert_execute(
    params: CiftiConvertParameters,
    runner: Runner | null = null,
): CiftiConvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CONVERT_METADATA);
    params = execution.params(params)
    const cargs = cifti_convert_cargs(params, execution)
    const ret = cifti_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-convert
 *
 * Dump cifti matrix into other formats.
 *
 * This command is used to convert a full CIFTI matrix to/from formats that can be used by programs that don't understand CIFTI.  You must specify exactly one of -to-gifti-ext, -from-gifti-ext, -to-nifti, -from-nifti, -to-text, or -from-text.
 *
 * If you want to write an existing CIFTI file with a different CIFTI version, see -file-convert, and its -cifti-version-convert option.
 *
 * If you want part of the CIFTI file as a metric, label, or volume file, see -cifti-separate.  If you want to create a CIFTI file from metric and/or volume files, see the -cifti-create-* commands.
 *
 * If you want to import a matrix that is restricted to an ROI, first create a template CIFTI file matching that ROI using a -cifti-create-* command.  After importing to CIFTI, you can then expand the file into a standard brainordinates space with -cifti-create-dense-from-template.  If you want to export only part of a CIFTI file, first create an roi-restricted CIFTI file with -cifti-restrict-dense-mapping.
 *
 * The -transpose option to -from-gifti-ext is needed if the replacement binary file is in column-major order.
 *
 * The -unit options accept these values:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param to_gifti_ext convert to GIFTI external binary
 * @param from_gifti_ext convert a GIFTI made with this command back into a CIFTI
 * @param to_nifti convert to NIFTI1
 * @param from_nifti convert a NIFTI (1 or 2) file made with this command back into CIFTI
 * @param to_text convert to a plain text file
 * @param from_text convert from plain text to cifti
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiConvertOutputs`).
 */
function cifti_convert(
    to_gifti_ext: CiftiConvertToGiftiExtParameters | null = null,
    from_gifti_ext: CiftiConvertFromGiftiExtParameters | null = null,
    to_nifti: CiftiConvertToNiftiParameters | null = null,
    from_nifti: CiftiConvertFromNiftiParameters | null = null,
    to_text: CiftiConvertToTextParameters | null = null,
    from_text: CiftiConvertFromTextParameters | null = null,
    runner: Runner | null = null,
): CiftiConvertOutputs {
    const params = cifti_convert_params(to_gifti_ext, from_gifti_ext, to_nifti, from_nifti, to_text, from_text)
    return cifti_convert_execute(params, runner);
}


export {
      CIFTI_CONVERT_METADATA,
      CiftiConvertFromGiftiExtOutputs,
      CiftiConvertFromGiftiExtParameters,
      CiftiConvertFromNiftiOutputs,
      CiftiConvertFromNiftiParameters,
      CiftiConvertFromTextOutputs,
      CiftiConvertFromTextParameters,
      CiftiConvertOutputs,
      CiftiConvertParameters,
      CiftiConvertReplaceBinaryParameters,
      CiftiConvertResetTimepoints1Parameters,
      CiftiConvertResetTimepoints2Parameters,
      CiftiConvertResetTimepointsParameters,
      CiftiConvertToGiftiExtParameters,
      CiftiConvertToNiftiOutputs,
      CiftiConvertToNiftiParameters,
      CiftiConvertToTextParameters,
      cifti_convert,
      cifti_convert_execute,
      cifti_convert_from_gifti_ext_params,
      cifti_convert_from_nifti_params,
      cifti_convert_from_text_params,
      cifti_convert_params,
      cifti_convert_replace_binary_params,
      cifti_convert_reset_timepoints_1_params,
      cifti_convert_reset_timepoints_2_params,
      cifti_convert_reset_timepoints_params,
      cifti_convert_to_gifti_ext_params,
      cifti_convert_to_nifti_params,
      cifti_convert_to_text_params,
};
