// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RCBF_PREP_METADATA: Metadata = {
    id: "1a26630009bc7f6431b9c45507dba269ec5c416e.boutiques",
    name: "rcbf-prep",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RcbfPrepParameters {
    "__STYXTYPE__": "rcbf-prep";
    "outdir": string;
    "rcbfvol": InputPathType;
    "subject"?: string | null | undefined;
    "roitab"?: InputPathType | null | undefined;
    "register"?: InputPathType | null | undefined;
    "template"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "rcbf-prep": rcbf_prep_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "rcbf-prep": rcbf_prep_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rcbf_prep(...)`.
 *
 * @interface
 */
interface RcbfPrepOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Registered and resampled rCBF volume for both hemispheres.
     */
    hemisphere_rcbf: OutputPathType;
    /**
     * rCBF volume resampled to MNI305 space.
     */
    mni305_rcbf: OutputPathType;
    /**
     * Stats file summarizing the ROIs.
     */
    roi_stats: OutputPathType;
}


function rcbf_prep_params(
    outdir: string,
    rcbfvol: InputPathType,
    subject: string | null = null,
    roitab: InputPathType | null = null,
    register: InputPathType | null = null,
    template: InputPathType | null = null,
): RcbfPrepParameters {
    /**
     * Build parameters.
    
     * @param outdir Output directory where results will be stored.
     * @param rcbfvol Input rCBF volume to be registered to the FreeSurfer anatomical.
     * @param subject Subject identifier for FreeSurfer anatomical registration.
     * @param roitab ROI table specifying which ROIs will be summarized, e.g., FreeSurferColorLUT.txt.
     * @param register Registration data file instead of a subject.
     * @param template Template file used instead of rCBF itself.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "rcbf-prep" as const,
        "outdir": outdir,
        "rcbfvol": rcbfvol,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (roitab !== null) {
        params["roitab"] = roitab;
    }
    if (register !== null) {
        params["register"] = register;
    }
    if (template !== null) {
        params["template"] = template;
    }
    return params;
}


function rcbf_prep_cargs(
    params: RcbfPrepParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("rcbf-prep");
    cargs.push(
        "--o",
        (params["outdir"] ?? null)
    );
    cargs.push(
        "--rcbf",
        execution.inputFile((params["rcbfvol"] ?? null))
    );
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["roitab"] ?? null) !== null) {
        cargs.push(
            "--roitab",
            execution.inputFile((params["roitab"] ?? null))
        );
    }
    if ((params["register"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["register"] ?? null))
        );
    }
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "--t",
            execution.inputFile((params["template"] ?? null))
        );
    }
    return cargs;
}


function rcbf_prep_outputs(
    params: RcbfPrepParameters,
    execution: Execution,
): RcbfPrepOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RcbfPrepOutputs = {
        root: execution.outputFile("."),
        hemisphere_rcbf: execution.outputFile([(params["outdir"] ?? null), "/?h.rcbf.mgh"].join('')),
        mni305_rcbf: execution.outputFile([(params["outdir"] ?? null), "/rcbf.mni305.nii"].join('')),
        roi_stats: execution.outputFile([(params["outdir"] ?? null), "/roi.dat"].join('')),
    };
    return ret;
}


function rcbf_prep_execute(
    params: RcbfPrepParameters,
    execution: Execution,
): RcbfPrepOutputs {
    /**
     * Performs integration of rCBF as produced by Siemens scanners with FreeSurfer analysis in preparation for group analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RcbfPrepOutputs`).
     */
    params = execution.params(params)
    const cargs = rcbf_prep_cargs(params, execution)
    const ret = rcbf_prep_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function rcbf_prep(
    outdir: string,
    rcbfvol: InputPathType,
    subject: string | null = null,
    roitab: InputPathType | null = null,
    register: InputPathType | null = null,
    template: InputPathType | null = null,
    runner: Runner | null = null,
): RcbfPrepOutputs {
    /**
     * Performs integration of rCBF as produced by Siemens scanners with FreeSurfer analysis in preparation for group analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param outdir Output directory where results will be stored.
     * @param rcbfvol Input rCBF volume to be registered to the FreeSurfer anatomical.
     * @param subject Subject identifier for FreeSurfer anatomical registration.
     * @param roitab ROI table specifying which ROIs will be summarized, e.g., FreeSurferColorLUT.txt.
     * @param register Registration data file instead of a subject.
     * @param template Template file used instead of rCBF itself.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RcbfPrepOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RCBF_PREP_METADATA);
    const params = rcbf_prep_params(outdir, rcbfvol, subject, roitab, register, template)
    return rcbf_prep_execute(params, execution);
}


export {
      RCBF_PREP_METADATA,
      RcbfPrepOutputs,
      RcbfPrepParameters,
      rcbf_prep,
      rcbf_prep_params,
};
