// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNCONFOUND_METADATA: Metadata = {
    id: "2ccf7c410e301ebdd239b6f4684654f07d566038.boutiques",
    name: "unconfound",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface UnconfoundParameters {
    "__STYXTYPE__": "unconfound";
    "in4d": InputPathType;
    "out4d": string;
    "confound_mat": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "unconfound": unconfound_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "unconfound": unconfound_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `unconfound(...)`.
 *
 * @interface
 */
interface UnconfoundOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output 4D fMRI data after removing confounds
     */
    output_4d: OutputPathType;
}


function unconfound_params(
    in4d: InputPathType,
    out4d: string,
    confound_mat: InputPathType,
): UnconfoundParameters {
    /**
     * Build parameters.
    
     * @param in4d Input 4D fMRI data (e.g., in4d.nii.gz)
     * @param out4d Output 4D fMRI data after removing confounds (e.g., out4d.nii.gz)
     * @param confound_mat Confound matrix file (e.g., confound.mat)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "unconfound" as const,
        "in4d": in4d,
        "out4d": out4d,
        "confound_mat": confound_mat,
    };
    return params;
}


function unconfound_cargs(
    params: UnconfoundParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("unconfound");
    cargs.push(execution.inputFile((params["in4d"] ?? null)));
    cargs.push((params["out4d"] ?? null));
    cargs.push(execution.inputFile((params["confound_mat"] ?? null)));
    return cargs;
}


function unconfound_outputs(
    params: UnconfoundParameters,
    execution: Execution,
): UnconfoundOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: UnconfoundOutputs = {
        root: execution.outputFile("."),
        output_4d: execution.outputFile([(params["out4d"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


function unconfound_execute(
    params: UnconfoundParameters,
    execution: Execution,
): UnconfoundOutputs {
    /**
     * Removing confounds from 4D fMRI data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `UnconfoundOutputs`).
     */
    params = execution.params(params)
    const cargs = unconfound_cargs(params, execution)
    const ret = unconfound_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function unconfound(
    in4d: InputPathType,
    out4d: string,
    confound_mat: InputPathType,
    runner: Runner | null = null,
): UnconfoundOutputs {
    /**
     * Removing confounds from 4D fMRI data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param in4d Input 4D fMRI data (e.g., in4d.nii.gz)
     * @param out4d Output 4D fMRI data after removing confounds (e.g., out4d.nii.gz)
     * @param confound_mat Confound matrix file (e.g., confound.mat)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `UnconfoundOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNCONFOUND_METADATA);
    const params = unconfound_params(in4d, out4d, confound_mat)
    return unconfound_execute(params, execution);
}


export {
      UNCONFOUND_METADATA,
      UnconfoundOutputs,
      UnconfoundParameters,
      unconfound,
      unconfound_params,
};
