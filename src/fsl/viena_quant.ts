// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VIENA_QUANT_METADATA: Metadata = {
    id: "51ebcfad9ed201b8538ee2a9ad0b420654d85cea.boutiques",
    name: "viena_quant",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface VienaQuantParameters {
    "__STYXTYPE__": "viena_quant";
    "input1": InputPathType;
    "input2": InputPathType;
    "ventricle_mask": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "viena_quant": viena_quant_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "viena_quant": viena_quant_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `viena_quant(...)`.
 *
 * @interface
 */
interface VienaQuantOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output quantification result
     */
    output_quantification: OutputPathType;
}


function viena_quant_params(
    input1: InputPathType,
    input2: InputPathType,
    ventricle_mask: InputPathType,
): VienaQuantParameters {
    /**
     * Build parameters.
    
     * @param input1 Input image 1 (e.g. img1.nii.gz)
     * @param input2 Input image 2 (e.g. img2.nii.gz)
     * @param ventricle_mask Ventricle mask (e.g. mask.nii.gz)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "viena_quant" as const,
        "input1": input1,
        "input2": input2,
        "ventricle_mask": ventricle_mask,
    };
    return params;
}


function viena_quant_cargs(
    params: VienaQuantParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("viena_quant");
    cargs.push(execution.inputFile((params["input1"] ?? null)));
    cargs.push(execution.inputFile((params["input2"] ?? null)));
    cargs.push(execution.inputFile((params["ventricle_mask"] ?? null)));
    return cargs;
}


function viena_quant_outputs(
    params: VienaQuantParameters,
    execution: Execution,
): VienaQuantOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VienaQuantOutputs = {
        root: execution.outputFile("."),
        output_quantification: execution.outputFile(["output_quantification.nii.gz"].join('')),
    };
    return ret;
}


function viena_quant_execute(
    params: VienaQuantParameters,
    execution: Execution,
): VienaQuantOutputs {
    /**
     * Automated brain ventricle quantification tool.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VienaQuantOutputs`).
     */
    params = execution.params(params)
    const cargs = viena_quant_cargs(params, execution)
    const ret = viena_quant_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function viena_quant(
    input1: InputPathType,
    input2: InputPathType,
    ventricle_mask: InputPathType,
    runner: Runner | null = null,
): VienaQuantOutputs {
    /**
     * Automated brain ventricle quantification tool.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input1 Input image 1 (e.g. img1.nii.gz)
     * @param input2 Input image 2 (e.g. img2.nii.gz)
     * @param ventricle_mask Ventricle mask (e.g. mask.nii.gz)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VienaQuantOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VIENA_QUANT_METADATA);
    const params = viena_quant_params(input1, input2, ventricle_mask)
    return viena_quant_execute(params, execution);
}


export {
      VIENA_QUANT_METADATA,
      VienaQuantOutputs,
      VienaQuantParameters,
      viena_quant,
      viena_quant_params,
};
