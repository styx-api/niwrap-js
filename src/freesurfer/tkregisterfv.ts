// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TKREGISTERFV_METADATA: Metadata = {
    id: "cfc3de5a8f9a77e456ae1e8dd4af7247e9567b9c.boutiques",
    name: "tkregisterfv",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TkregisterfvParameters {
    "@type": "freesurfer.tkregisterfv";
    "mov"?: InputPathType | null | undefined;
    "targ"?: InputPathType | null | undefined;
    "reg": InputPathType;
    "subject"?: string | null | undefined;
    "fstarg"?: InputPathType | null | undefined;
    "sd"?: string | null | undefined;
    "seg"?: InputPathType | null | undefined;
    "aseg_flag": boolean;
    "aparc_aseg_flag": boolean;
    "opacity"?: number | null | undefined;
    "surfs_flag": boolean;
    "pial_surfs_flag": boolean;
    "all_surfs_flag": boolean;
    "no_surfs_flag": boolean;
    "lh_only_flag": boolean;
    "rh_only_flag": boolean;
    "surf"?: InputPathType | null | undefined;
    "aux_s"?: InputPathType | null | undefined;
    "plane"?: string | null | undefined;
    "no_config_flag": boolean;
    "mov2"?: InputPathType | null | undefined;
    "reg2"?: InputPathType | null | undefined;
    "mov3"?: InputPathType | null | undefined;
    "reg3"?: InputPathType | null | undefined;
    "heat_flag": boolean;
    "regheader_flag": boolean;
    "params"?: Array<number> | null | undefined;
    "flip_x_flag": boolean;
    "flip_y_flag": boolean;
    "flip_z_flag": boolean;
    "fstal": boolean;
    "aux"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.tkregisterfv": tkregisterfv_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tkregisterfv(...)`.
 *
 * @interface
 */
interface TkregisterfvOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param reg LTA registration file
 * @param mov Moving image volume
 * @param targ Target image volume
 * @param subject Subject identifier for FreeSurfer directories
 * @param fstarg Freesurfer target volume instead of orig.mgz
 * @param sd FreeSurfer SUBJECTS_DIR environment variable
 * @param seg Segmentation volume to load
 * @param aseg_flag Load aseg.mgz as segmentation volume
 * @param aparc_aseg_flag Load aparc+aseg.mgz as segmentation volume
 * @param opacity Set segmentation volume opacity
 * @param surfs_flag Load left and right hemisphere white matter surfaces
 * @param pial_surfs_flag Load pial surfaces instead of white matter surfaces
 * @param all_surfs_flag Load both pial and white matter surfaces
 * @param no_surfs_flag Do not load any surfaces
 * @param lh_only_flag Load only left hemisphere surface
 * @param rh_only_flag Load only right hemisphere surface
 * @param surf Explicit path to surface to load
 * @param aux_s Explicit path to auxiliary surface to load
 * @param plane Plane view: cor, sag, ax
 * @param no_config_flag Do not automatically raise transform config window
 * @param mov2 Provide a second moving image volume
 * @param reg2 Provide a second registration file
 * @param mov3 Provide a third moving image volume
 * @param reg3 Provide a third registration file
 * @param heat_flag Use heat map color tables for all volumes
 * @param regheader_flag Create registration file assuming the two volumes share a RAS
 * @param params_ Affine matrix parameters: translations in mm, rotations in degrees
 * @param flip_x_flag Regheader with rx=180
 * @param flip_y_flag Regheader with ry=180
 * @param flip_z_flag Regheader with rz=180
 * @param fstal Modify the talairach.xfm with subject
 * @param aux Load auxiliary volumes with registration
 *
 * @returns Parameter dictionary
 */
function tkregisterfv_params(
    reg: InputPathType,
    mov: InputPathType | null = null,
    targ: InputPathType | null = null,
    subject: string | null = null,
    fstarg: InputPathType | null = null,
    sd: string | null = null,
    seg: InputPathType | null = null,
    aseg_flag: boolean = false,
    aparc_aseg_flag: boolean = false,
    opacity: number | null = null,
    surfs_flag: boolean = false,
    pial_surfs_flag: boolean = false,
    all_surfs_flag: boolean = false,
    no_surfs_flag: boolean = false,
    lh_only_flag: boolean = false,
    rh_only_flag: boolean = false,
    surf: InputPathType | null = null,
    aux_s: InputPathType | null = null,
    plane: string | null = null,
    no_config_flag: boolean = false,
    mov2: InputPathType | null = null,
    reg2: InputPathType | null = null,
    mov3: InputPathType | null = null,
    reg3: InputPathType | null = null,
    heat_flag: boolean = false,
    regheader_flag: boolean = false,
    params_: Array<number> | null = null,
    flip_x_flag: boolean = false,
    flip_y_flag: boolean = false,
    flip_z_flag: boolean = false,
    fstal: boolean = false,
    aux: InputPathType | null = null,
): TkregisterfvParameters {
    const params = {
        "@type": "freesurfer.tkregisterfv" as const,
        "reg": reg,
        "aseg_flag": aseg_flag,
        "aparc_aseg_flag": aparc_aseg_flag,
        "surfs_flag": surfs_flag,
        "pial_surfs_flag": pial_surfs_flag,
        "all_surfs_flag": all_surfs_flag,
        "no_surfs_flag": no_surfs_flag,
        "lh_only_flag": lh_only_flag,
        "rh_only_flag": rh_only_flag,
        "no_config_flag": no_config_flag,
        "heat_flag": heat_flag,
        "regheader_flag": regheader_flag,
        "flip_x_flag": flip_x_flag,
        "flip_y_flag": flip_y_flag,
        "flip_z_flag": flip_z_flag,
        "fstal": fstal,
    };
    if (mov !== null) {
        params["mov"] = mov;
    }
    if (targ !== null) {
        params["targ"] = targ;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (fstarg !== null) {
        params["fstarg"] = fstarg;
    }
    if (sd !== null) {
        params["sd"] = sd;
    }
    if (seg !== null) {
        params["seg"] = seg;
    }
    if (opacity !== null) {
        params["opacity"] = opacity;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    if (aux_s !== null) {
        params["aux_s"] = aux_s;
    }
    if (plane !== null) {
        params["plane"] = plane;
    }
    if (mov2 !== null) {
        params["mov2"] = mov2;
    }
    if (reg2 !== null) {
        params["reg2"] = reg2;
    }
    if (mov3 !== null) {
        params["mov3"] = mov3;
    }
    if (reg3 !== null) {
        params["reg3"] = reg3;
    }
    if (params_ !== null) {
        params["params"] = params_;
    }
    if (aux !== null) {
        params["aux"] = aux;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tkregisterfv_cargs(
    params: TkregisterfvParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tkregisterfv");
    if ((params["mov"] ?? null) !== null) {
        cargs.push(
            "--mov",
            execution.inputFile((params["mov"] ?? null))
        );
    }
    if ((params["targ"] ?? null) !== null) {
        cargs.push(
            "--targ",
            execution.inputFile((params["targ"] ?? null))
        );
    }
    cargs.push(
        "--reg",
        execution.inputFile((params["reg"] ?? null))
    );
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["fstarg"] ?? null) !== null) {
        cargs.push(
            "--fstarg",
            execution.inputFile((params["fstarg"] ?? null))
        );
    }
    if ((params["sd"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["sd"] ?? null)
        );
    }
    if ((params["seg"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["seg"] ?? null))
        );
    }
    if ((params["aseg_flag"] ?? null)) {
        cargs.push("--aseg");
    }
    if ((params["aparc_aseg_flag"] ?? null)) {
        cargs.push("--aparc+aseg");
    }
    if ((params["opacity"] ?? null) !== null) {
        cargs.push(
            "--opacity",
            String((params["opacity"] ?? null))
        );
    }
    if ((params["surfs_flag"] ?? null)) {
        cargs.push("--surfs");
    }
    if ((params["pial_surfs_flag"] ?? null)) {
        cargs.push("--pial-surfs");
    }
    if ((params["all_surfs_flag"] ?? null)) {
        cargs.push("--all-surfs");
    }
    if ((params["no_surfs_flag"] ?? null)) {
        cargs.push("--no-surfs");
    }
    if ((params["lh_only_flag"] ?? null)) {
        cargs.push("--lh-only");
    }
    if ((params["rh_only_flag"] ?? null)) {
        cargs.push("--rh-only");
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            execution.inputFile((params["surf"] ?? null))
        );
    }
    if ((params["aux_s"] ?? null) !== null) {
        cargs.push(
            "--aux-surf",
            execution.inputFile((params["aux_s"] ?? null))
        );
    }
    if ((params["plane"] ?? null) !== null) {
        cargs.push(
            "--plane",
            (params["plane"] ?? null)
        );
    }
    if ((params["no_config_flag"] ?? null)) {
        cargs.push("--no-config");
    }
    if ((params["mov2"] ?? null) !== null) {
        cargs.push(
            "--mov2",
            execution.inputFile((params["mov2"] ?? null))
        );
    }
    if ((params["reg2"] ?? null) !== null) {
        cargs.push(
            "--reg2",
            execution.inputFile((params["reg2"] ?? null))
        );
    }
    if ((params["mov3"] ?? null) !== null) {
        cargs.push(
            "--mov3",
            execution.inputFile((params["mov3"] ?? null))
        );
    }
    if ((params["reg3"] ?? null) !== null) {
        cargs.push(
            "--reg3",
            execution.inputFile((params["reg3"] ?? null))
        );
    }
    if ((params["heat_flag"] ?? null)) {
        cargs.push("--heat");
    }
    if ((params["regheader_flag"] ?? null)) {
        cargs.push("--regheader");
    }
    if ((params["params"] ?? null) !== null) {
        cargs.push(
            "--params",
            ...(params["params"] ?? null).map(String)
        );
    }
    if ((params["flip_x_flag"] ?? null)) {
        cargs.push("--flip-x");
    }
    if ((params["flip_y_flag"] ?? null)) {
        cargs.push("--flip-y");
    }
    if ((params["flip_z_flag"] ?? null)) {
        cargs.push("--flip-z");
    }
    if ((params["fstal"] ?? null)) {
        cargs.push("--fstal");
    }
    if ((params["aux"] ?? null) !== null) {
        cargs.push(
            "--aux",
            execution.inputFile((params["aux"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tkregisterfv_outputs(
    params: TkregisterfvParameters,
    execution: Execution,
): TkregisterfvOutputs {
    const ret: TkregisterfvOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A script that runs freeview with arguments like tkregister, focusing on LTA files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TkregisterfvOutputs`).
 */
function tkregisterfv_execute(
    params: TkregisterfvParameters,
    runner: Runner | null = null,
): TkregisterfvOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TKREGISTERFV_METADATA);
    params = execution.params(params)
    const cargs = tkregisterfv_cargs(params, execution)
    const ret = tkregisterfv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A script that runs freeview with arguments like tkregister, focusing on LTA files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param reg LTA registration file
 * @param mov Moving image volume
 * @param targ Target image volume
 * @param subject Subject identifier for FreeSurfer directories
 * @param fstarg Freesurfer target volume instead of orig.mgz
 * @param sd FreeSurfer SUBJECTS_DIR environment variable
 * @param seg Segmentation volume to load
 * @param aseg_flag Load aseg.mgz as segmentation volume
 * @param aparc_aseg_flag Load aparc+aseg.mgz as segmentation volume
 * @param opacity Set segmentation volume opacity
 * @param surfs_flag Load left and right hemisphere white matter surfaces
 * @param pial_surfs_flag Load pial surfaces instead of white matter surfaces
 * @param all_surfs_flag Load both pial and white matter surfaces
 * @param no_surfs_flag Do not load any surfaces
 * @param lh_only_flag Load only left hemisphere surface
 * @param rh_only_flag Load only right hemisphere surface
 * @param surf Explicit path to surface to load
 * @param aux_s Explicit path to auxiliary surface to load
 * @param plane Plane view: cor, sag, ax
 * @param no_config_flag Do not automatically raise transform config window
 * @param mov2 Provide a second moving image volume
 * @param reg2 Provide a second registration file
 * @param mov3 Provide a third moving image volume
 * @param reg3 Provide a third registration file
 * @param heat_flag Use heat map color tables for all volumes
 * @param regheader_flag Create registration file assuming the two volumes share a RAS
 * @param params_ Affine matrix parameters: translations in mm, rotations in degrees
 * @param flip_x_flag Regheader with rx=180
 * @param flip_y_flag Regheader with ry=180
 * @param flip_z_flag Regheader with rz=180
 * @param fstal Modify the talairach.xfm with subject
 * @param aux Load auxiliary volumes with registration
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TkregisterfvOutputs`).
 */
function tkregisterfv(
    reg: InputPathType,
    mov: InputPathType | null = null,
    targ: InputPathType | null = null,
    subject: string | null = null,
    fstarg: InputPathType | null = null,
    sd: string | null = null,
    seg: InputPathType | null = null,
    aseg_flag: boolean = false,
    aparc_aseg_flag: boolean = false,
    opacity: number | null = null,
    surfs_flag: boolean = false,
    pial_surfs_flag: boolean = false,
    all_surfs_flag: boolean = false,
    no_surfs_flag: boolean = false,
    lh_only_flag: boolean = false,
    rh_only_flag: boolean = false,
    surf: InputPathType | null = null,
    aux_s: InputPathType | null = null,
    plane: string | null = null,
    no_config_flag: boolean = false,
    mov2: InputPathType | null = null,
    reg2: InputPathType | null = null,
    mov3: InputPathType | null = null,
    reg3: InputPathType | null = null,
    heat_flag: boolean = false,
    regheader_flag: boolean = false,
    params_: Array<number> | null = null,
    flip_x_flag: boolean = false,
    flip_y_flag: boolean = false,
    flip_z_flag: boolean = false,
    fstal: boolean = false,
    aux: InputPathType | null = null,
    runner: Runner | null = null,
): TkregisterfvOutputs {
    const params = tkregisterfv_params(reg, mov, targ, subject, fstarg, sd, seg, aseg_flag, aparc_aseg_flag, opacity, surfs_flag, pial_surfs_flag, all_surfs_flag, no_surfs_flag, lh_only_flag, rh_only_flag, surf, aux_s, plane, no_config_flag, mov2, reg2, mov3, reg3, heat_flag, regheader_flag, params_, flip_x_flag, flip_y_flag, flip_z_flag, fstal, aux)
    return tkregisterfv_execute(params, runner);
}


export {
      TKREGISTERFV_METADATA,
      TkregisterfvOutputs,
      TkregisterfvParameters,
      tkregisterfv,
      tkregisterfv_execute,
      tkregisterfv_params,
};
