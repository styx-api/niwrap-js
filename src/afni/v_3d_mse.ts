// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_MSE_METADATA: Metadata = {
    id: "f6ca026af1cb73e73646daceebece681cda8d8dc.boutiques",
    name: "3dMSE",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dMseParameters {
    "@type": "afni.3dMSE";
    "polynomial_order"?: number | null | undefined;
    "autoclip": boolean;
    "automask": boolean;
    "mask"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "scales"?: number | null | undefined;
    "entwin"?: number | null | undefined;
    "rthresh"?: number | null | undefined;
    "dset": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dMSE": v_3d_mse_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dMSE": v_3d_mse_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_mse(...)`.
 *
 * @interface
 */
interface V3dMseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset in BRIK format.
     */
    out_brik: OutputPathType | null;
    /**
     * Output dataset in HEAD format.
     */
    out_head: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dset Input dataset (e.g., dset.nii.gz)
 * @param polynomial_order Remove polynomial trend of order 'm' (default is m=1; m=-1 means no detrending).
 * @param autoclip Clip off low-intensity regions in the dataset.
 * @param automask Use automask to clip low-intensity regions.
 * @param mask Mask to define 'in-brain' voxels.
 * @param prefix Prefix for the output dataset (default is 'MSE').
 * @param scales The number of scales to be used in the calculation (default is 5).
 * @param entwin The window size used in the calculation (default is 2).
 * @param rthresh The radius threshold for determining if values are the same in the SampleEn calculation, in fractions of the standard deviation (default is 0.5).
 *
 * @returns Parameter dictionary
 */
function v_3d_mse_params(
    dset: InputPathType,
    polynomial_order: number | null = null,
    autoclip: boolean = false,
    automask: boolean = false,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    scales: number | null = null,
    entwin: number | null = null,
    rthresh: number | null = null,
): V3dMseParameters {
    const params = {
        "@type": "afni.3dMSE" as const,
        "autoclip": autoclip,
        "automask": automask,
        "dset": dset,
    };
    if (polynomial_order !== null) {
        params["polynomial_order"] = polynomial_order;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (scales !== null) {
        params["scales"] = scales;
    }
    if (entwin !== null) {
        params["entwin"] = entwin;
    }
    if (rthresh !== null) {
        params["rthresh"] = rthresh;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_mse_cargs(
    params: V3dMseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dMSE");
    if ((params["polynomial_order"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polynomial_order"] ?? null))
        );
    }
    if ((params["autoclip"] ?? null)) {
        cargs.push("-autoclip");
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["scales"] ?? null) !== null) {
        cargs.push(
            "-scales",
            String((params["scales"] ?? null))
        );
    }
    if ((params["entwin"] ?? null) !== null) {
        cargs.push(
            "-entwin",
            String((params["entwin"] ?? null))
        );
    }
    if ((params["rthresh"] ?? null) !== null) {
        cargs.push(
            "-rthresh",
            String((params["rthresh"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["dset"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_mse_outputs(
    params: V3dMseParameters,
    execution: Execution,
): V3dMseOutputs {
    const ret: V3dMseOutputs = {
        root: execution.outputFile("."),
        out_brik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
        out_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
    };
    return ret;
}


/**
 * Computes voxelwise multi-scale entropy.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dMseOutputs`).
 */
function v_3d_mse_execute(
    params: V3dMseParameters,
    execution: Execution,
): V3dMseOutputs {
    params = execution.params(params)
    const cargs = v_3d_mse_cargs(params, execution)
    const ret = v_3d_mse_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes voxelwise multi-scale entropy.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dset Input dataset (e.g., dset.nii.gz)
 * @param polynomial_order Remove polynomial trend of order 'm' (default is m=1; m=-1 means no detrending).
 * @param autoclip Clip off low-intensity regions in the dataset.
 * @param automask Use automask to clip low-intensity regions.
 * @param mask Mask to define 'in-brain' voxels.
 * @param prefix Prefix for the output dataset (default is 'MSE').
 * @param scales The number of scales to be used in the calculation (default is 5).
 * @param entwin The window size used in the calculation (default is 2).
 * @param rthresh The radius threshold for determining if values are the same in the SampleEn calculation, in fractions of the standard deviation (default is 0.5).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dMseOutputs`).
 */
function v_3d_mse(
    dset: InputPathType,
    polynomial_order: number | null = null,
    autoclip: boolean = false,
    automask: boolean = false,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    scales: number | null = null,
    entwin: number | null = null,
    rthresh: number | null = null,
    runner: Runner | null = null,
): V3dMseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_MSE_METADATA);
    const params = v_3d_mse_params(dset, polynomial_order, autoclip, automask, mask, prefix, scales, entwin, rthresh)
    return v_3d_mse_execute(params, execution);
}


export {
      V3dMseOutputs,
      V3dMseParameters,
      V_3D_MSE_METADATA,
      v_3d_mse,
      v_3d_mse_cargs,
      v_3d_mse_execute,
      v_3d_mse_outputs,
      v_3d_mse_params,
};
