// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__DJUNCT_OVERLAP_CHECK_METADATA: Metadata = {
    id: "a8443d34f687d1b2ea3ba63dfe89d00208145343.boutiques",
    name: "@djunct_overlap_check",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VDjunctOverlapCheckParameters {
    "__STYXTYPE__": "@djunct_overlap_check";
    "ulay": InputPathType;
    "olay": InputPathType;
    "prefix": string;
    "box_focus_slices"?: InputPathType | null | undefined;
    "montgap"?: number | null | undefined;
    "montcolor"?: string | null | undefined;
    "cbar"?: string | null | undefined;
    "opacity"?: number | null | undefined;
    "zerocolor"?: string | null | undefined;
    "set_dicom_xyz"?: Array<number> | null | undefined;
    "ulay_range"?: Array<number> | null | undefined;
    "ulay_range_nz"?: Array<number> | null | undefined;
    "montx"?: number | null | undefined;
    "monty"?: number | null | undefined;
    "montx_cat"?: number | null | undefined;
    "monty_cat"?: number | null | undefined;
    "label_mode"?: string | null | undefined;
    "pbar_posonly_off": boolean;
    "edgy_ulay": boolean;
    "set_dicom_xyz_off": boolean;
    "no_cor": boolean;
    "no_axi": boolean;
    "no_sag": boolean;
    "no_clean": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@djunct_overlap_check": v__djunct_overlap_check_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__djunct_overlap_check(...)`.
 *
 * @interface
 */
interface VDjunctOverlapCheckOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__djunct_overlap_check_params(
    ulay: InputPathType,
    olay: InputPathType,
    prefix: string,
    box_focus_slices: InputPathType | null = null,
    montgap: number | null = null,
    montcolor: string | null = null,
    cbar: string | null = null,
    opacity: number | null = null,
    zerocolor: string | null = null,
    set_dicom_xyz: Array<number> | null = null,
    ulay_range: Array<number> | null = null,
    ulay_range_nz: Array<number> | null = null,
    montx: number | null = null,
    monty: number | null = null,
    montx_cat: number | null = null,
    monty_cat: number | null = null,
    label_mode: string | null = null,
    pbar_posonly_off: boolean = false,
    edgy_ulay: boolean = false,
    set_dicom_xyz_off: boolean = false,
    no_cor: boolean = false,
    no_axi: boolean = false,
    no_sag: boolean = false,
    no_clean: boolean = false,
): VDjunctOverlapCheckParameters {
    /**
     * Build parameters.
    
     * @param ulay Dataset to use as the underlay (background)
     * @param olay Dataset to use as the overlay (foreground)
     * @param prefix Prefix for the output files
     * @param box_focus_slices Dataset for box focus slices
     * @param montgap Gap between montage slices
     * @param montcolor Color of the montage gap
     * @param cbar Colorbar for the overlay
     * @param opacity Opacity of the overlay
     * @param zerocolor Color for zero values
     * @param set_dicom_xyz Set DICOM coordinates for slice location
     * @param ulay_range Range for underlay values
     * @param ulay_range_nz Range for non-zero underlay values
     * @param montx Number of panels in X direction in montage
     * @param monty Number of panels in Y direction in montage
     * @param montx_cat Number of X panes per image in montage
     * @param monty_cat Number of Y panes per image in montage
     * @param label_mode Label mode
     * @param pbar_posonly_off Turn off position-only p-bar
     * @param edgy_ulay Edgify the underlay
     * @param set_dicom_xyz_off Turn off DICOM coordinates setting
     * @param no_cor Skip coronal slices
     * @param no_axi Skip axial slices
     * @param no_sag Skip sagittal slices
     * @param no_clean Do not clean up temporary files
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@djunct_overlap_check" as const,
        "ulay": ulay,
        "olay": olay,
        "prefix": prefix,
        "pbar_posonly_off": pbar_posonly_off,
        "edgy_ulay": edgy_ulay,
        "set_dicom_xyz_off": set_dicom_xyz_off,
        "no_cor": no_cor,
        "no_axi": no_axi,
        "no_sag": no_sag,
        "no_clean": no_clean,
    };
    if (box_focus_slices !== null) {
        params["box_focus_slices"] = box_focus_slices;
    }
    if (montgap !== null) {
        params["montgap"] = montgap;
    }
    if (montcolor !== null) {
        params["montcolor"] = montcolor;
    }
    if (cbar !== null) {
        params["cbar"] = cbar;
    }
    if (opacity !== null) {
        params["opacity"] = opacity;
    }
    if (zerocolor !== null) {
        params["zerocolor"] = zerocolor;
    }
    if (set_dicom_xyz !== null) {
        params["set_dicom_xyz"] = set_dicom_xyz;
    }
    if (ulay_range !== null) {
        params["ulay_range"] = ulay_range;
    }
    if (ulay_range_nz !== null) {
        params["ulay_range_nz"] = ulay_range_nz;
    }
    if (montx !== null) {
        params["montx"] = montx;
    }
    if (monty !== null) {
        params["monty"] = monty;
    }
    if (montx_cat !== null) {
        params["montx_cat"] = montx_cat;
    }
    if (monty_cat !== null) {
        params["monty_cat"] = monty_cat;
    }
    if (label_mode !== null) {
        params["label_mode"] = label_mode;
    }
    return params;
}


function v__djunct_overlap_check_cargs(
    params: VDjunctOverlapCheckParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@djunct_overlap_check");
    cargs.push(execution.inputFile((params["ulay"] ?? null)));
    cargs.push(execution.inputFile((params["olay"] ?? null)));
    cargs.push((params["prefix"] ?? null));
    if ((params["box_focus_slices"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["box_focus_slices"] ?? null)));
    }
    if ((params["montgap"] ?? null) !== null) {
        cargs.push(
            "-montgap",
            String((params["montgap"] ?? null))
        );
    }
    if ((params["montcolor"] ?? null) !== null) {
        cargs.push(
            "-montcolor",
            (params["montcolor"] ?? null)
        );
    }
    if ((params["cbar"] ?? null) !== null) {
        cargs.push(
            "-cbar",
            (params["cbar"] ?? null)
        );
    }
    if ((params["opacity"] ?? null) !== null) {
        cargs.push(
            "-opacity",
            String((params["opacity"] ?? null))
        );
    }
    if ((params["zerocolor"] ?? null) !== null) {
        cargs.push(
            "-zerocolor",
            (params["zerocolor"] ?? null)
        );
    }
    if ((params["set_dicom_xyz"] ?? null) !== null) {
        cargs.push(
            "-set_dicom_xyz",
            ...(params["set_dicom_xyz"] ?? null).map(String)
        );
    }
    if ((params["ulay_range"] ?? null) !== null) {
        cargs.push(
            "-ulay_range",
            ...(params["ulay_range"] ?? null).map(String)
        );
    }
    if ((params["ulay_range_nz"] ?? null) !== null) {
        cargs.push(
            "-ulay_range_nz",
            ...(params["ulay_range_nz"] ?? null).map(String)
        );
    }
    if ((params["montx"] ?? null) !== null) {
        cargs.push(
            "-montx",
            String((params["montx"] ?? null))
        );
    }
    if ((params["monty"] ?? null) !== null) {
        cargs.push(
            "-monty",
            String((params["monty"] ?? null))
        );
    }
    if ((params["montx_cat"] ?? null) !== null) {
        cargs.push(
            "-montx_cat",
            String((params["montx_cat"] ?? null))
        );
    }
    if ((params["monty_cat"] ?? null) !== null) {
        cargs.push(
            "-monty_cat",
            String((params["monty_cat"] ?? null))
        );
    }
    if ((params["label_mode"] ?? null) !== null) {
        cargs.push(
            "-label_mode",
            (params["label_mode"] ?? null)
        );
    }
    if ((params["pbar_posonly_off"] ?? null)) {
        cargs.push("-pbar_posonly_off");
    }
    if ((params["edgy_ulay"] ?? null)) {
        cargs.push("-edgy_ulay");
    }
    if ((params["set_dicom_xyz_off"] ?? null)) {
        cargs.push("-set_dicom_xyz_off");
    }
    if ((params["no_cor"] ?? null)) {
        cargs.push("-no_cor");
    }
    if ((params["no_axi"] ?? null)) {
        cargs.push("-no_axi");
    }
    if ((params["no_sag"] ?? null)) {
        cargs.push("-no_sag");
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    return cargs;
}


function v__djunct_overlap_check_outputs(
    params: VDjunctOverlapCheckParameters,
    execution: Execution,
): VDjunctOverlapCheckOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VDjunctOverlapCheckOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__djunct_overlap_check_execute(
    params: VDjunctOverlapCheckParameters,
    execution: Execution,
): VDjunctOverlapCheckOutputs {
    /**
     * A helper script for visualizing overlap between datasets in AFNI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VDjunctOverlapCheckOutputs`).
     */
    params = execution.params(params)
    const cargs = v__djunct_overlap_check_cargs(params, execution)
    const ret = v__djunct_overlap_check_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__djunct_overlap_check(
    ulay: InputPathType,
    olay: InputPathType,
    prefix: string,
    box_focus_slices: InputPathType | null = null,
    montgap: number | null = null,
    montcolor: string | null = null,
    cbar: string | null = null,
    opacity: number | null = null,
    zerocolor: string | null = null,
    set_dicom_xyz: Array<number> | null = null,
    ulay_range: Array<number> | null = null,
    ulay_range_nz: Array<number> | null = null,
    montx: number | null = null,
    monty: number | null = null,
    montx_cat: number | null = null,
    monty_cat: number | null = null,
    label_mode: string | null = null,
    pbar_posonly_off: boolean = false,
    edgy_ulay: boolean = false,
    set_dicom_xyz_off: boolean = false,
    no_cor: boolean = false,
    no_axi: boolean = false,
    no_sag: boolean = false,
    no_clean: boolean = false,
    runner: Runner | null = null,
): VDjunctOverlapCheckOutputs {
    /**
     * A helper script for visualizing overlap between datasets in AFNI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param ulay Dataset to use as the underlay (background)
     * @param olay Dataset to use as the overlay (foreground)
     * @param prefix Prefix for the output files
     * @param box_focus_slices Dataset for box focus slices
     * @param montgap Gap between montage slices
     * @param montcolor Color of the montage gap
     * @param cbar Colorbar for the overlay
     * @param opacity Opacity of the overlay
     * @param zerocolor Color for zero values
     * @param set_dicom_xyz Set DICOM coordinates for slice location
     * @param ulay_range Range for underlay values
     * @param ulay_range_nz Range for non-zero underlay values
     * @param montx Number of panels in X direction in montage
     * @param monty Number of panels in Y direction in montage
     * @param montx_cat Number of X panes per image in montage
     * @param monty_cat Number of Y panes per image in montage
     * @param label_mode Label mode
     * @param pbar_posonly_off Turn off position-only p-bar
     * @param edgy_ulay Edgify the underlay
     * @param set_dicom_xyz_off Turn off DICOM coordinates setting
     * @param no_cor Skip coronal slices
     * @param no_axi Skip axial slices
     * @param no_sag Skip sagittal slices
     * @param no_clean Do not clean up temporary files
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VDjunctOverlapCheckOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__DJUNCT_OVERLAP_CHECK_METADATA);
    const params = v__djunct_overlap_check_params(ulay, olay, prefix, box_focus_slices, montgap, montcolor, cbar, opacity, zerocolor, set_dicom_xyz, ulay_range, ulay_range_nz, montx, monty, montx_cat, monty_cat, label_mode, pbar_posonly_off, edgy_ulay, set_dicom_xyz_off, no_cor, no_axi, no_sag, no_clean)
    return v__djunct_overlap_check_execute(params, execution);
}


export {
      VDjunctOverlapCheckOutputs,
      VDjunctOverlapCheckParameters,
      V__DJUNCT_OVERLAP_CHECK_METADATA,
      v__djunct_overlap_check,
      v__djunct_overlap_check_params,
};
