// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__MOVE_TO_SERIES_DIRS_METADATA: Metadata = {
    id: "43e65ff4ccb7c662ae1bcaef0b7fb14c99b76809.boutiques",
    name: "@move.to.series.dirs",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VMoveToSeriesDirsParameters {
    "__STYXTYPE__": "@move.to.series.dirs";
    "action"?: "copy" | "move" | null | undefined;
    "dprefix"?: string | null | undefined;
    "tag"?: string | null | undefined;
    "test": boolean;
    "help": boolean;
    "hist": boolean;
    "ver": boolean;
    "dicom_files": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@move.to.series.dirs": v__move_to_series_dirs_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__move_to_series_dirs(...)`.
 *
 * @interface
 */
interface VMoveToSeriesDirsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__move_to_series_dirs_params(
    dicom_files: Array<InputPathType>,
    action: "copy" | "move" | null = null,
    dprefix: string | null = null,
    tag: string | null = null,
    test: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    ver: boolean = false,
): VMoveToSeriesDirsParameters {
    /**
     * Build parameters.
    
     * @param dicom_files Specify input DICOM files (e.g., IMG*)
     * @param action Specify action to perform: copy or move. Default is copy.
     * @param dprefix Specify directory root for output series directories. Default is current directory.
     * @param tag Specify the DICOM tag to use for partitioning. Default is 0020,0011 (REL Series Number).
     * @param test Run in test mode, only show what would be done without actually moving any files.
     * @param help Show help information.
     * @param hist Show modification history.
     * @param ver Show version number.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@move.to.series.dirs" as const,
        "test": test,
        "help": help,
        "hist": hist,
        "ver": ver,
        "dicom_files": dicom_files,
    };
    if (action !== null) {
        params["action"] = action;
    }
    if (dprefix !== null) {
        params["dprefix"] = dprefix;
    }
    if (tag !== null) {
        params["tag"] = tag;
    }
    return params;
}


function v__move_to_series_dirs_cargs(
    params: VMoveToSeriesDirsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@move.to.series.dirs");
    if ((params["action"] ?? null) !== null) {
        cargs.push(
            "-action",
            (params["action"] ?? null)
        );
    }
    if ((params["dprefix"] ?? null) !== null) {
        cargs.push(
            "-dprefix",
            (params["dprefix"] ?? null)
        );
    }
    if ((params["tag"] ?? null) !== null) {
        cargs.push(
            "-tag",
            (params["tag"] ?? null)
        );
    }
    if ((params["test"] ?? null)) {
        cargs.push("-test");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["hist"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["ver"] ?? null)) {
        cargs.push("-ver");
    }
    cargs.push(...(params["dicom_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function v__move_to_series_dirs_outputs(
    params: VMoveToSeriesDirsParameters,
    execution: Execution,
): VMoveToSeriesDirsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VMoveToSeriesDirsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__move_to_series_dirs_execute(
    params: VMoveToSeriesDirsParameters,
    execution: Execution,
): VMoveToSeriesDirsOutputs {
    /**
     * Partition DICOM files into series directories by copying or moving them to new series directories.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VMoveToSeriesDirsOutputs`).
     */
    params = execution.params(params)
    const cargs = v__move_to_series_dirs_cargs(params, execution)
    const ret = v__move_to_series_dirs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__move_to_series_dirs(
    dicom_files: Array<InputPathType>,
    action: "copy" | "move" | null = null,
    dprefix: string | null = null,
    tag: string | null = null,
    test: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    ver: boolean = false,
    runner: Runner | null = null,
): VMoveToSeriesDirsOutputs {
    /**
     * Partition DICOM files into series directories by copying or moving them to new series directories.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dicom_files Specify input DICOM files (e.g., IMG*)
     * @param action Specify action to perform: copy or move. Default is copy.
     * @param dprefix Specify directory root for output series directories. Default is current directory.
     * @param tag Specify the DICOM tag to use for partitioning. Default is 0020,0011 (REL Series Number).
     * @param test Run in test mode, only show what would be done without actually moving any files.
     * @param help Show help information.
     * @param hist Show modification history.
     * @param ver Show version number.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VMoveToSeriesDirsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__MOVE_TO_SERIES_DIRS_METADATA);
    const params = v__move_to_series_dirs_params(dicom_files, action, dprefix, tag, test, help, hist, ver)
    return v__move_to_series_dirs_execute(params, execution);
}


export {
      VMoveToSeriesDirsOutputs,
      VMoveToSeriesDirsParameters,
      V__MOVE_TO_SERIES_DIRS_METADATA,
      v__move_to_series_dirs,
      v__move_to_series_dirs_params,
};
