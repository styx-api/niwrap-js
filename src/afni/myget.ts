// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MYGET_METADATA: Metadata = {
    id: "e02e3476f488deccf0d90ec8d75f3911d20f2f0e.boutiques",
    name: "myget",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MygetParameters {
    "@type": "afni.myget";
    "protocol_version"?: "-1" | "-1.1" | null | undefined;
    "url": string;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.myget": myget_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.myget": myget_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `myget(...)`.
 *
 * @interface
 */
interface MygetOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The filename to save the downloaded file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param url The URL to download the file from
 * @param output_file The filename to save the downloaded file
 * @param protocol_version Specify protocol version. You can choose between -1 or -1.1
 *
 * @returns Parameter dictionary
 */
function myget_params(
    url: string,
    output_file: string,
    protocol_version: "-1" | "-1.1" | null = null,
): MygetParameters {
    const params = {
        "@type": "afni.myget" as const,
        "url": url,
        "output_file": output_file,
    };
    if (protocol_version !== null) {
        params["protocol_version"] = protocol_version;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function myget_cargs(
    params: MygetParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("myget");
    if ((params["protocol_version"] ?? null) !== null) {
        cargs.push((params["protocol_version"] ?? null));
    }
    cargs.push((params["url"] ?? null));
    cargs.push(
        ">",
        (params["output_file"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function myget_outputs(
    params: MygetParameters,
    execution: Execution,
): MygetOutputs {
    const ret: MygetOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * myget
 *
 * A simple file downloader from a URL.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MygetOutputs`).
 */
function myget_execute(
    params: MygetParameters,
    runner: Runner | null = null,
): MygetOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MYGET_METADATA);
    params = execution.params(params)
    const cargs = myget_cargs(params, execution)
    const ret = myget_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * myget
 *
 * A simple file downloader from a URL.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param url The URL to download the file from
 * @param output_file The filename to save the downloaded file
 * @param protocol_version Specify protocol version. You can choose between -1 or -1.1
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MygetOutputs`).
 */
function myget(
    url: string,
    output_file: string,
    protocol_version: "-1" | "-1.1" | null = null,
    runner: Runner | null = null,
): MygetOutputs {
    const params = myget_params(url, output_file, protocol_version)
    return myget_execute(params, runner);
}


export {
      MYGET_METADATA,
      MygetOutputs,
      MygetParameters,
      myget,
      myget_execute,
      myget_params,
};
