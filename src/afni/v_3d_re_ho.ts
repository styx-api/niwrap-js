// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_RE_HO_METADATA: Metadata = {
    id: "c46ec7166950d75a3ca69b019838d644b481ce05.boutiques",
    name: "3dReHo",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dReHoParameters {
    "@type"?: "afni/3dReHo";
    "prefix": string;
    "inset": InputPathType;
    "nneigh"?: string | null | undefined;
    "chi_sq": boolean;
    "mask"?: InputPathType | null | undefined;
    "neigh_rad"?: number | null | undefined;
    "neigh_x"?: number | null | undefined;
    "neigh_y"?: number | null | undefined;
    "neigh_z"?: number | null | undefined;
    "box_rad"?: number | null | undefined;
    "box_x"?: number | null | undefined;
    "box_y"?: number | null | undefined;
    "box_z"?: number | null | undefined;
    "in_rois"?: InputPathType | null | undefined;
}
type V3dReHoParametersTagged = Required<Pick<V3dReHoParameters, '@type'>> & V3dReHoParameters;


/**
 * Output object returned when calling `V3dReHoParameters(...)`.
 *
 * @interface
 */
interface V3dReHoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing ReHo/Kendall's W value per voxel.
     */
    reho_output: OutputPathType;
    /**
     * List of ROI ReHo values.
     */
    roi_reho_vals: OutputPathType;
    /**
     * Optional output subbrick containing Friedman chi-square value per voxel.
     */
    chi_square: OutputPathType;
    /**
     * ROI Chi-square values file.
     */
    roi_chi_vals: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Output file name part.
 * @param inset Time series input file.
 * @param nneigh Number of voxels in neighborhood, inclusive; can be 7 (for facewise neighbors), 19 (for face- and edge-wise neighbors), 27 (for face-, edge-, and node-wise neighbors). Default is 27.
 * @param chi_sq Switch to output Friedman chi-square value per voxel as a subbrick.
 * @param mask Include a whole brain mask within which to calculate ReHo. Otherwise, data should be masked already.
 * @param neigh_rad Radius R of a desired neighborhood for voxelwise control, must be a floating point number >1. Examples: R=2.0 -> V=33, R=2.3 -> V=57, etc.
 * @param neigh_x Semi-radius length A for ellipsoidal neighborhood.
 * @param neigh_y Semi-radius length B for ellipsoidal neighborhood.
 * @param neigh_z Semi-radius length C for ellipsoidal neighborhood.
 * @param box_rad Cubic box radius BR centered on a given voxel for neighborhood control. Examples: BR=1 -> V=27, BR=2 -> V=125, etc.
 * @param box_x Box volume neighborhood dimension X. Values put in get added in the +/- directions of each axis.
 * @param box_y Box volume neighborhood dimension Y. Values put in get added in the +/- directions of each axis.
 * @param box_z Box volume neighborhood dimension Z. Values put in get added in the +/- directions of each axis.
 * @param in_rois Input a set of ROIs, each labeled with distinct integers. ReHo will be calculated per ROI.
 *
 * @returns Parameter dictionary
 */
function v_3d_re_ho_params(
    prefix: string,
    inset: InputPathType,
    nneigh: string | null = null,
    chi_sq: boolean = false,
    mask: InputPathType | null = null,
    neigh_rad: number | null = null,
    neigh_x: number | null = null,
    neigh_y: number | null = null,
    neigh_z: number | null = null,
    box_rad: number | null = null,
    box_x: number | null = null,
    box_y: number | null = null,
    box_z: number | null = null,
    in_rois: InputPathType | null = null,
): V3dReHoParametersTagged {
    const params = {
        "@type": "afni/3dReHo" as const,
        "prefix": prefix,
        "inset": inset,
        "chi_sq": chi_sq,
    };
    if (nneigh !== null) {
        params["nneigh"] = nneigh;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (neigh_rad !== null) {
        params["neigh_rad"] = neigh_rad;
    }
    if (neigh_x !== null) {
        params["neigh_x"] = neigh_x;
    }
    if (neigh_y !== null) {
        params["neigh_y"] = neigh_y;
    }
    if (neigh_z !== null) {
        params["neigh_z"] = neigh_z;
    }
    if (box_rad !== null) {
        params["box_rad"] = box_rad;
    }
    if (box_x !== null) {
        params["box_x"] = box_x;
    }
    if (box_y !== null) {
        params["box_y"] = box_y;
    }
    if (box_z !== null) {
        params["box_z"] = box_z;
    }
    if (in_rois !== null) {
        params["in_rois"] = in_rois;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_re_ho_cargs(
    params: V3dReHoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dReHo");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-inset",
        execution.inputFile((params["inset"] ?? null))
    );
    if ((params["nneigh"] ?? null) !== null) {
        cargs.push(
            "-nneigh",
            (params["nneigh"] ?? null)
        );
    }
    if ((params["chi_sq"] ?? false)) {
        cargs.push("-chi_sq");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["neigh_rad"] ?? null) !== null) {
        cargs.push(
            "-neigh_RAD",
            String((params["neigh_rad"] ?? null))
        );
    }
    if ((params["neigh_x"] ?? null) !== null) {
        cargs.push(
            "-neigh_X",
            String((params["neigh_x"] ?? null))
        );
    }
    if ((params["neigh_y"] ?? null) !== null) {
        cargs.push(
            "-neigh_Y",
            String((params["neigh_y"] ?? null))
        );
    }
    if ((params["neigh_z"] ?? null) !== null) {
        cargs.push(
            "-neigh_Z",
            String((params["neigh_z"] ?? null))
        );
    }
    if ((params["box_rad"] ?? null) !== null) {
        cargs.push(
            "-box_RAD",
            String((params["box_rad"] ?? null))
        );
    }
    if ((params["box_x"] ?? null) !== null) {
        cargs.push(
            "-box_X",
            String((params["box_x"] ?? null))
        );
    }
    if ((params["box_y"] ?? null) !== null) {
        cargs.push(
            "-box_Y",
            String((params["box_y"] ?? null))
        );
    }
    if ((params["box_z"] ?? null) !== null) {
        cargs.push(
            "-box_Z",
            String((params["box_z"] ?? null))
        );
    }
    if ((params["in_rois"] ?? null) !== null) {
        cargs.push(
            "-in_rois",
            execution.inputFile((params["in_rois"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_re_ho_outputs(
    params: V3dReHoParameters,
    execution: Execution,
): V3dReHoOutputs {
    const ret: V3dReHoOutputs = {
        root: execution.outputFile("."),
        reho_output: execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')),
        roi_reho_vals: execution.outputFile([(params["prefix"] ?? null), "_ROI_reho.vals"].join('')),
        chi_square: execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK[1]"].join('')),
        roi_chi_vals: execution.outputFile([(params["prefix"] ?? null), "_ROI_reho.chi"].join('')),
    };
    return ret;
}


/**
 * 3dReHo
 *
 * 3dReHo calculates Kendall's W per voxel using neighborhood voxels from 4D time series data set.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dReHoOutputs`).
 */
function v_3d_re_ho_execute(
    params: V3dReHoParameters,
    runner: Runner | null = null,
): V3dReHoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_RE_HO_METADATA);
    params = execution.params(params)
    const cargs = v_3d_re_ho_cargs(params, execution)
    const ret = v_3d_re_ho_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dReHo
 *
 * 3dReHo calculates Kendall's W per voxel using neighborhood voxels from 4D time series data set.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Output file name part.
 * @param inset Time series input file.
 * @param nneigh Number of voxels in neighborhood, inclusive; can be 7 (for facewise neighbors), 19 (for face- and edge-wise neighbors), 27 (for face-, edge-, and node-wise neighbors). Default is 27.
 * @param chi_sq Switch to output Friedman chi-square value per voxel as a subbrick.
 * @param mask Include a whole brain mask within which to calculate ReHo. Otherwise, data should be masked already.
 * @param neigh_rad Radius R of a desired neighborhood for voxelwise control, must be a floating point number >1. Examples: R=2.0 -> V=33, R=2.3 -> V=57, etc.
 * @param neigh_x Semi-radius length A for ellipsoidal neighborhood.
 * @param neigh_y Semi-radius length B for ellipsoidal neighborhood.
 * @param neigh_z Semi-radius length C for ellipsoidal neighborhood.
 * @param box_rad Cubic box radius BR centered on a given voxel for neighborhood control. Examples: BR=1 -> V=27, BR=2 -> V=125, etc.
 * @param box_x Box volume neighborhood dimension X. Values put in get added in the +/- directions of each axis.
 * @param box_y Box volume neighborhood dimension Y. Values put in get added in the +/- directions of each axis.
 * @param box_z Box volume neighborhood dimension Z. Values put in get added in the +/- directions of each axis.
 * @param in_rois Input a set of ROIs, each labeled with distinct integers. ReHo will be calculated per ROI.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dReHoOutputs`).
 */
function v_3d_re_ho(
    prefix: string,
    inset: InputPathType,
    nneigh: string | null = null,
    chi_sq: boolean = false,
    mask: InputPathType | null = null,
    neigh_rad: number | null = null,
    neigh_x: number | null = null,
    neigh_y: number | null = null,
    neigh_z: number | null = null,
    box_rad: number | null = null,
    box_x: number | null = null,
    box_y: number | null = null,
    box_z: number | null = null,
    in_rois: InputPathType | null = null,
    runner: Runner | null = null,
): V3dReHoOutputs {
    const params = v_3d_re_ho_params(prefix, inset, nneigh, chi_sq, mask, neigh_rad, neigh_x, neigh_y, neigh_z, box_rad, box_x, box_y, box_z, in_rois)
    return v_3d_re_ho_execute(params, runner);
}


export {
      V3dReHoOutputs,
      V_3D_RE_HO_METADATA,
      v_3d_re_ho,
      v_3d_re_ho_execute,
      v_3d_re_ho_params,
};
