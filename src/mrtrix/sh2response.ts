// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SH2RESPONSE_METADATA: Metadata = {
    id: "4c236ffa31670f857674394a6afbe6341c337edb.boutiques",
    name: "sh2response",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Sh2responseConfigParameters {
    "@type": "mrtrix.sh2response.config";
    "key": string;
    "value": string;
}


interface Sh2responseParameters {
    "@type": "mrtrix.sh2response";
    "lmax"?: number | null | undefined;
    "dump"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Sh2responseConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "SH": InputPathType;
    "mask": InputPathType;
    "directions": InputPathType;
    "response": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.sh2response": sh2response_cargs,
        "mrtrix.sh2response.config": sh2response_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.sh2response": sh2response_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function sh2response_config_params(
    key: string,
    value: string,
): Sh2responseConfigParameters {
    const params = {
        "@type": "mrtrix.sh2response.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2response_config_cargs(
    params: Sh2responseConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `sh2response(...)`.
 *
 * @interface
 */
interface Sh2responseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output axially-symmetric spherical harmonic coefficients
     */
    response: OutputPathType;
    /**
     * dump the m=0 SH coefficients from all voxels in the mask to the output file, rather than their mean 
     */
    dump: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param sh the spherical harmonic decomposition of the diffusion-weighted images
 * @param mask the mask containing the voxels from which to estimate the response function
 * @param directions a 4D image containing the direction vectors along which to estimate the response function
 * @param response the output axially-symmetric spherical harmonic coefficients
 * @param lmax specify the maximum harmonic degree of the response function to estimate
 * @param dump dump the m=0 SH coefficients from all voxels in the mask to the output file, rather than their mean
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function sh2response_params(
    sh: InputPathType,
    mask: InputPathType,
    directions: InputPathType,
    response: string,
    lmax: number | null = null,
    dump: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Sh2responseConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Sh2responseParameters {
    const params = {
        "@type": "mrtrix.sh2response" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "SH": sh,
        "mask": mask,
        "directions": directions,
        "response": response,
    };
    if (lmax !== null) {
        params["lmax"] = lmax;
    }
    if (dump !== null) {
        params["dump"] = dump;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2response_cargs(
    params: Sh2responseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("sh2response");
    if ((params["lmax"] ?? null) !== null) {
        cargs.push(
            "-lmax",
            String((params["lmax"] ?? null))
        );
    }
    if ((params["dump"] ?? null) !== null) {
        cargs.push(
            "-dump",
            (params["dump"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["SH"] ?? null)));
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push(execution.inputFile((params["directions"] ?? null)));
    cargs.push((params["response"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function sh2response_outputs(
    params: Sh2responseParameters,
    execution: Execution,
): Sh2responseOutputs {
    const ret: Sh2responseOutputs = {
        root: execution.outputFile("."),
        response: execution.outputFile([(params["response"] ?? null)].join('')),
        dump: ((params["dump"] ?? null) !== null) ? execution.outputFile([(params["dump"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * sh2response
 *
 * Generate an appropriate response function from the image data for spherical deconvolution.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Sh2responseOutputs`).
 */
function sh2response_execute(
    params: Sh2responseParameters,
    runner: Runner | null = null,
): Sh2responseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SH2RESPONSE_METADATA);
    params = execution.params(params)
    const cargs = sh2response_cargs(params, execution)
    const ret = sh2response_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * sh2response
 *
 * Generate an appropriate response function from the image data for spherical deconvolution.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param sh the spherical harmonic decomposition of the diffusion-weighted images
 * @param mask the mask containing the voxels from which to estimate the response function
 * @param directions a 4D image containing the direction vectors along which to estimate the response function
 * @param response the output axially-symmetric spherical harmonic coefficients
 * @param lmax specify the maximum harmonic degree of the response function to estimate
 * @param dump dump the m=0 SH coefficients from all voxels in the mask to the output file, rather than their mean
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Sh2responseOutputs`).
 */
function sh2response(
    sh: InputPathType,
    mask: InputPathType,
    directions: InputPathType,
    response: string,
    lmax: number | null = null,
    dump: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Sh2responseConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Sh2responseOutputs {
    const params = sh2response_params(sh, mask, directions, response, lmax, dump, info, quiet, debug, force, nthreads, config, help, version)
    return sh2response_execute(params, runner);
}


export {
      SH2RESPONSE_METADATA,
      Sh2responseConfigParameters,
      Sh2responseOutputs,
      Sh2responseParameters,
      sh2response,
      sh2response_config_params,
      sh2response_execute,
      sh2response_params,
};
