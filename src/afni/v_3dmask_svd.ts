// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DMASK_SVD_METADATA: Metadata = {
    id: "5cc0ef9b4df81bcbe1689588ddbddf9e81594730.boutiques",
    name: "3dmaskSVD",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dmaskSvdParameters {
    "__STYXTYPE__": "3dmaskSVD";
    "input_dataset": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dmaskSVD": v_3dmask_svd_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dmaskSVD": v_3dmask_svd_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dmask_svd(...)`.
 *
 * @interface
 */
interface V3dmaskSvdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Singular vector output redirected to this file
     */
    svd_output: OutputPathType;
}


function v_3dmask_svd_params(
    input_dataset: InputPathType,
): V3dmaskSvdParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dmaskSVD" as const,
        "input_dataset": input_dataset,
    };
    return params;
}


function v_3dmask_svd_cargs(
    params: V3dmaskSvdParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dmaskSVD");
    cargs.push("[OPTIONS]");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    return cargs;
}


function v_3dmask_svd_outputs(
    params: V3dmaskSvdParameters,
    execution: Execution,
): V3dmaskSvdOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dmaskSvdOutputs = {
        root: execution.outputFile("."),
        svd_output: execution.outputFile(["../stdout"].join('')),
    };
    return ret;
}


function v_3dmask_svd_execute(
    params: V3dmaskSvdParameters,
    execution: Execution,
): V3dmaskSvdOutputs {
    /**
     * Computes the principal singular vector of the time series vectors extracted from the input dataset over the input mask.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dmaskSvdOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dmask_svd_cargs(params, execution)
    const ret = v_3dmask_svd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3dmask_svd(
    input_dataset: InputPathType,
    runner: Runner | null = null,
): V3dmaskSvdOutputs {
    /**
     * Computes the principal singular vector of the time series vectors extracted from the input dataset over the input mask.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dmaskSvdOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DMASK_SVD_METADATA);
    const params = v_3dmask_svd_params(input_dataset)
    return v_3dmask_svd_execute(params, execution);
}


export {
      V3dmaskSvdOutputs,
      V3dmaskSvdParameters,
      V_3DMASK_SVD_METADATA,
      v_3dmask_svd,
      v_3dmask_svd_params,
};
