// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_INFO_METADATA: Metadata = {
    id: "f8473bd4b6a90f8c8b3dbe8a7c1e45f9016b4d73.boutiques",
    name: "mris_info",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisInfoParameters {
    "__STYXTYPE__": "mris_info";
    "surfacefile": InputPathType;
    "outfile"?: InputPathType | null | undefined;
    "subject_hemi_surfname"?: string | null | undefined;
    "patchfile"?: InputPathType | null | undefined;
    "vertex_number"?: number | null | undefined;
    "extended_vertex_number"?: number | null | undefined;
    "curvfile"?: InputPathType | null | undefined;
    "annotfile"?: InputPathType | null | undefined;
    "edge_stats_id"?: string | null | undefined;
    "edge_number"?: number | null | undefined;
    "vtxno"?: string | null | undefined;
    "matrix_format"?: string | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "label_file"?: InputPathType | null | undefined;
    "edge_file"?: InputPathType | null | undefined;
    "talairach_xfm_flag": boolean;
    "rescale_flag": boolean;
    "area_stats_flag": boolean;
    "quality_stats_flag": boolean;
    "intersections_flag": boolean;
    "nogifti_flag": boolean;
    "version_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_info": mris_info_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_info": mris_info_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_info(...)`.
 *
 * @interface
 */
interface MrisInfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing saved data
     */
    output_file: OutputPathType | null;
    /**
     * File containing edge info
     */
    output_edge_file: OutputPathType | null;
}


function mris_info_params(
    surfacefile: InputPathType,
    outfile: InputPathType | null = null,
    subject_hemi_surfname: string | null = null,
    patchfile: InputPathType | null = null,
    vertex_number: number | null = null,
    extended_vertex_number: number | null = null,
    curvfile: InputPathType | null = null,
    annotfile: InputPathType | null = null,
    edge_stats_id: string | null = null,
    edge_number: number | null = null,
    vtxno: string | null = null,
    matrix_format: string | null = null,
    mask_file: InputPathType | null = null,
    label_file: InputPathType | null = null,
    edge_file: InputPathType | null = null,
    talairach_xfm_flag: boolean = false,
    rescale_flag: boolean = false,
    area_stats_flag: boolean = false,
    quality_stats_flag: boolean = false,
    intersections_flag: boolean = false,
    nogifti_flag: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
): MrisInfoParameters {
    /**
     * Build parameters.
    
     * @param surfacefile Surface file to process
     * @param outfile Save some data to outfile
     * @param subject_hemi_surfname Instead of surfacefile
     * @param patchfile Load patch before reporting
     * @param vertex_number Print out vertex information for vertex vnum
     * @param extended_vertex_number Print out extended vertex information for vertex vnum
     * @param curvfile Check if curvature file vertices match surface vertices
     * @param annotfile Check if annotation file vertices match surface vertices; dump colortable
     * @param edge_stats_id Compute stats on edge metric (n, mean, std, min, max); id=0=length, id=1=dot, id=2=angle, id<0= all
     * @param edge_number Print out extended information about edge
     * @param vtxno Write Matlab file to plot vertex neighborhood
     * @param matrix_format Set format for matrix printing (e.g., %12.8f)
     * @param mask_file Only compute edge and area stats using vertices in mask
     * @param label_file Only compute edge and area stats using vertices in label
     * @param edge_file Print edge info for all edges into file
     * @param talairach_xfm_flag Apply talairach xfm before reporting info
     * @param rescale_flag Rescale group surface to match average metrics
     * @param area_stats_flag Compute stats on triangle area (n, mean, std, min, max)
     * @param quality_stats_flag Print out surface quality stats
     * @param intersections_flag Print the number of vertices that belong to a face that intersects another face
     * @param nogifti_flag No dump of GIFTI struct, read .gii as surface instead
     * @param version_flag Print version and exits
     * @param help_flag No clue what this does
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_info" as const,
        "surfacefile": surfacefile,
        "talairach_xfm_flag": talairach_xfm_flag,
        "rescale_flag": rescale_flag,
        "area_stats_flag": area_stats_flag,
        "quality_stats_flag": quality_stats_flag,
        "intersections_flag": intersections_flag,
        "nogifti_flag": nogifti_flag,
        "version_flag": version_flag,
        "help_flag": help_flag,
    };
    if (outfile !== null) {
        params["outfile"] = outfile;
    }
    if (subject_hemi_surfname !== null) {
        params["subject_hemi_surfname"] = subject_hemi_surfname;
    }
    if (patchfile !== null) {
        params["patchfile"] = patchfile;
    }
    if (vertex_number !== null) {
        params["vertex_number"] = vertex_number;
    }
    if (extended_vertex_number !== null) {
        params["extended_vertex_number"] = extended_vertex_number;
    }
    if (curvfile !== null) {
        params["curvfile"] = curvfile;
    }
    if (annotfile !== null) {
        params["annotfile"] = annotfile;
    }
    if (edge_stats_id !== null) {
        params["edge_stats_id"] = edge_stats_id;
    }
    if (edge_number !== null) {
        params["edge_number"] = edge_number;
    }
    if (vtxno !== null) {
        params["vtxno"] = vtxno;
    }
    if (matrix_format !== null) {
        params["matrix_format"] = matrix_format;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (edge_file !== null) {
        params["edge_file"] = edge_file;
    }
    return params;
}


function mris_info_cargs(
    params: MrisInfoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_info");
    cargs.push(execution.inputFile((params["surfacefile"] ?? null)));
    if ((params["outfile"] ?? null) !== null) {
        cargs.push(
            "--o",
            execution.inputFile((params["outfile"] ?? null))
        );
    }
    if ((params["subject_hemi_surfname"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject_hemi_surfname"] ?? null)
        );
    }
    if ((params["patchfile"] ?? null) !== null) {
        cargs.push(
            "--patch",
            execution.inputFile((params["patchfile"] ?? null))
        );
    }
    if ((params["vertex_number"] ?? null) !== null) {
        cargs.push(
            "--v",
            String((params["vertex_number"] ?? null))
        );
    }
    if ((params["extended_vertex_number"] ?? null) !== null) {
        cargs.push(
            "--vx",
            String((params["extended_vertex_number"] ?? null))
        );
    }
    if ((params["curvfile"] ?? null) !== null) {
        cargs.push(
            "--c",
            execution.inputFile((params["curvfile"] ?? null))
        );
    }
    if ((params["annotfile"] ?? null) !== null) {
        cargs.push(
            "--a",
            execution.inputFile((params["annotfile"] ?? null))
        );
    }
    if ((params["edge_stats_id"] ?? null) !== null) {
        cargs.push(
            "--edge-stats",
            (params["edge_stats_id"] ?? null)
        );
    }
    if ((params["edge_number"] ?? null) !== null) {
        cargs.push(
            "--ex",
            String((params["edge_number"] ?? null))
        );
    }
    if ((params["vtxno"] ?? null) !== null) {
        cargs.push(
            "--v-matlab",
            (params["vtxno"] ?? null)
        );
    }
    if ((params["matrix_format"] ?? null) !== null) {
        cargs.push(
            "--mtx-fmt",
            (params["matrix_format"] ?? null)
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "--label",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["edge_file"] ?? null) !== null) {
        cargs.push(
            "--edge-file",
            execution.inputFile((params["edge_file"] ?? null))
        );
    }
    if ((params["talairach_xfm_flag"] ?? null)) {
        cargs.push("--t");
    }
    if ((params["rescale_flag"] ?? null)) {
        cargs.push("--r");
    }
    if ((params["area_stats_flag"] ?? null)) {
        cargs.push("--area-stats");
    }
    cargs.push("[EDGE_STATS_FLAG]");
    if ((params["quality_stats_flag"] ?? null)) {
        cargs.push("--quality");
    }
    if ((params["intersections_flag"] ?? null)) {
        cargs.push("--intersections");
    }
    if ((params["nogifti_flag"] ?? null)) {
        cargs.push("--nogifti-disp-image");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


function mris_info_outputs(
    params: MrisInfoParameters,
    execution: Execution,
): MrisInfoOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisInfoOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["outfile"] ?? null) !== null) ? execution.outputFile([path.basename((params["outfile"] ?? null))].join('')) : null,
        output_edge_file: ((params["edge_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["edge_file"] ?? null))].join('')) : null,
    };
    return ret;
}


function mris_info_execute(
    params: MrisInfoParameters,
    execution: Execution,
): MrisInfoOutputs {
    /**
     * Prints out information about a surface file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisInfoOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_info_cargs(params, execution)
    const ret = mris_info_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_info(
    surfacefile: InputPathType,
    outfile: InputPathType | null = null,
    subject_hemi_surfname: string | null = null,
    patchfile: InputPathType | null = null,
    vertex_number: number | null = null,
    extended_vertex_number: number | null = null,
    curvfile: InputPathType | null = null,
    annotfile: InputPathType | null = null,
    edge_stats_id: string | null = null,
    edge_number: number | null = null,
    vtxno: string | null = null,
    matrix_format: string | null = null,
    mask_file: InputPathType | null = null,
    label_file: InputPathType | null = null,
    edge_file: InputPathType | null = null,
    talairach_xfm_flag: boolean = false,
    rescale_flag: boolean = false,
    area_stats_flag: boolean = false,
    quality_stats_flag: boolean = false,
    intersections_flag: boolean = false,
    nogifti_flag: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MrisInfoOutputs {
    /**
     * Prints out information about a surface file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surfacefile Surface file to process
     * @param outfile Save some data to outfile
     * @param subject_hemi_surfname Instead of surfacefile
     * @param patchfile Load patch before reporting
     * @param vertex_number Print out vertex information for vertex vnum
     * @param extended_vertex_number Print out extended vertex information for vertex vnum
     * @param curvfile Check if curvature file vertices match surface vertices
     * @param annotfile Check if annotation file vertices match surface vertices; dump colortable
     * @param edge_stats_id Compute stats on edge metric (n, mean, std, min, max); id=0=length, id=1=dot, id=2=angle, id<0= all
     * @param edge_number Print out extended information about edge
     * @param vtxno Write Matlab file to plot vertex neighborhood
     * @param matrix_format Set format for matrix printing (e.g., %12.8f)
     * @param mask_file Only compute edge and area stats using vertices in mask
     * @param label_file Only compute edge and area stats using vertices in label
     * @param edge_file Print edge info for all edges into file
     * @param talairach_xfm_flag Apply talairach xfm before reporting info
     * @param rescale_flag Rescale group surface to match average metrics
     * @param area_stats_flag Compute stats on triangle area (n, mean, std, min, max)
     * @param quality_stats_flag Print out surface quality stats
     * @param intersections_flag Print the number of vertices that belong to a face that intersects another face
     * @param nogifti_flag No dump of GIFTI struct, read .gii as surface instead
     * @param version_flag Print version and exits
     * @param help_flag No clue what this does
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisInfoOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_INFO_METADATA);
    const params = mris_info_params(surfacefile, outfile, subject_hemi_surfname, patchfile, vertex_number, extended_vertex_number, curvfile, annotfile, edge_stats_id, edge_number, vtxno, matrix_format, mask_file, label_file, edge_file, talairach_xfm_flag, rescale_flag, area_stats_flag, quality_stats_flag, intersections_flag, nogifti_flag, version_flag, help_flag)
    return mris_info_execute(params, execution);
}


export {
      MRIS_INFO_METADATA,
      MrisInfoOutputs,
      MrisInfoParameters,
      mris_info,
      mris_info_params,
};
