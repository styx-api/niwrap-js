// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const COR_TO_MINC_METADATA: Metadata = {
    id: "15dda396a0f22d201e6574171b77090fc72b06a2.boutiques",
    name: "cor_to_minc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface CorToMincParameters {
    "@type": "freesurfer.cor_to_minc";
    "cor_directory": string;
    "minc_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.cor_to_minc": cor_to_minc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.cor_to_minc": cor_to_minc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cor_to_minc(...)`.
 *
 * @interface
 */
interface CorToMincOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted MINC file
     */
    output_minc: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cor_directory Directory containing COR files
 * @param minc_file Output MINC file name
 *
 * @returns Parameter dictionary
 */
function cor_to_minc_params(
    cor_directory: string,
    minc_file: string,
): CorToMincParameters {
    const params = {
        "@type": "freesurfer.cor_to_minc" as const,
        "cor_directory": cor_directory,
        "minc_file": minc_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cor_to_minc_cargs(
    params: CorToMincParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("cor_to_minc");
    cargs.push((params["cor_directory"] ?? null));
    cargs.push((params["minc_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cor_to_minc_outputs(
    params: CorToMincParameters,
    execution: Execution,
): CorToMincOutputs {
    const ret: CorToMincOutputs = {
        root: execution.outputFile("."),
        output_minc: execution.outputFile([(params["minc_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Converts a directory of COR files to a MINC file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CorToMincOutputs`).
 */
function cor_to_minc_execute(
    params: CorToMincParameters,
    execution: Execution,
): CorToMincOutputs {
    params = execution.params(params)
    const cargs = cor_to_minc_cargs(params, execution)
    const ret = cor_to_minc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Converts a directory of COR files to a MINC file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param cor_directory Directory containing COR files
 * @param minc_file Output MINC file name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CorToMincOutputs`).
 */
function cor_to_minc(
    cor_directory: string,
    minc_file: string,
    runner: Runner | null = null,
): CorToMincOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(COR_TO_MINC_METADATA);
    const params = cor_to_minc_params(cor_directory, minc_file)
    return cor_to_minc_execute(params, execution);
}


export {
      COR_TO_MINC_METADATA,
      CorToMincOutputs,
      CorToMincParameters,
      cor_to_minc,
      cor_to_minc_cargs,
      cor_to_minc_execute,
      cor_to_minc_outputs,
      cor_to_minc_params,
};
