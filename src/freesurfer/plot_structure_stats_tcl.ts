// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PLOT_STRUCTURE_STATS_TCL_METADATA: Metadata = {
    id: "60fce4021e28a4ededdb51863b8fa98cde23f6df.boutiques",
    name: "plot_structure_stats.tcl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface PlotStructureStatsTclParameters {
    "@type"?: "freesurfer/plot_structure_stats.tcl";
    "input_file": InputPathType;
    "output_file": string;
}
type PlotStructureStatsTclParametersTagged = Required<Pick<PlotStructureStatsTclParameters, '@type'>> & PlotStructureStatsTclParameters;


/**
 * Output object returned when calling `PlotStructureStatsTclParameters(...)`.
 *
 * @interface
 */
interface PlotStructureStatsTclOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated plot
     */
    plot_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input stats file
 * @param output_file Output plot file
 *
 * @returns Parameter dictionary
 */
function plot_structure_stats_tcl_params(
    input_file: InputPathType,
    output_file: string,
): PlotStructureStatsTclParametersTagged {
    const params = {
        "@type": "freesurfer/plot_structure_stats.tcl" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function plot_structure_stats_tcl_cargs(
    params: PlotStructureStatsTclParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("plot_structure_stats.tcl");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function plot_structure_stats_tcl_outputs(
    params: PlotStructureStatsTclParameters,
    execution: Execution,
): PlotStructureStatsTclOutputs {
    const ret: PlotStructureStatsTclOutputs = {
        root: execution.outputFile("."),
        plot_file: execution.outputFile([(params["output_file"] ?? null), ".png"].join('')),
    };
    return ret;
}


/**
 * plot_structure_stats.tcl
 *
 * Script to plot structural statistics.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlotStructureStatsTclOutputs`).
 */
function plot_structure_stats_tcl_execute(
    params: PlotStructureStatsTclParameters,
    runner: Runner | null = null,
): PlotStructureStatsTclOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PLOT_STRUCTURE_STATS_TCL_METADATA);
    params = execution.params(params)
    const cargs = plot_structure_stats_tcl_cargs(params, execution)
    const ret = plot_structure_stats_tcl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * plot_structure_stats.tcl
 *
 * Script to plot structural statistics.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input stats file
 * @param output_file Output plot file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlotStructureStatsTclOutputs`).
 */
function plot_structure_stats_tcl(
    input_file: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): PlotStructureStatsTclOutputs {
    const params = plot_structure_stats_tcl_params(input_file, output_file)
    return plot_structure_stats_tcl_execute(params, runner);
}


export {
      PLOT_STRUCTURE_STATS_TCL_METADATA,
      PlotStructureStatsTclOutputs,
      plot_structure_stats_tcl,
      plot_structure_stats_tcl_execute,
      plot_structure_stats_tcl_params,
};
