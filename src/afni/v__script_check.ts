// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SCRIPT_CHECK_METADATA: Metadata = {
    id: "ecd2a9292bb7df5d7ef5d0acef0705326b404a49.boutiques",
    name: "@ScriptCheck",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VScriptCheckParameters {
    "@type"?: "afni/@ScriptCheck";
    "clean": boolean;
    "suffix"?: string | null | undefined;
    "scripts": Array<InputPathType>;
}
type VScriptCheckParametersTagged = Required<Pick<VScriptCheckParameters, '@type'>> & VScriptCheckParameters;


/**
 * Output object returned when calling `VScriptCheckParameters(...)`.
 *
 * @interface
 */
interface VScriptCheckOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Uncleaned original file with specified suffix
     */
    uncleaned_file: OutputPathType;
    /**
     * Cleaned file if -clean option is used
     */
    cleaned_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param scripts Scripts to be checked for improperly terminated lines
 * @param clean Clean bad line breaks
 * @param suffix Rename uncleaned file with specified suffix. Default is .uncln
 *
 * @returns Parameter dictionary
 */
function v__script_check_params(
    scripts: Array<InputPathType>,
    clean: boolean = false,
    suffix: string | null = null,
): VScriptCheckParametersTagged {
    const params = {
        "@type": "afni/@ScriptCheck" as const,
        "clean": clean,
        "scripts": scripts,
    };
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__script_check_cargs(
    params: VScriptCheckParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@ScriptCheck");
    if ((params["clean"] ?? false)) {
        cargs.push("-clean");
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-suffix",
            (params["suffix"] ?? null)
        );
    }
    cargs.push(...(params["scripts"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__script_check_outputs(
    params: VScriptCheckParameters,
    execution: Execution,
): VScriptCheckOutputs {
    const ret: VScriptCheckOutputs = {
        root: execution.outputFile("."),
        uncleaned_file: execution.outputFile(["{SCRIPT}.uncln"].join('')),
        cleaned_file: execution.outputFile(["{SCRIPT}"].join('')),
    };
    return ret;
}


/**
 * @ScriptCheck
 *
 * Checks scripts for improperly terminated lines and optionally cleans them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VScriptCheckOutputs`).
 */
function v__script_check_execute(
    params: VScriptCheckParameters,
    runner: Runner | null = null,
): VScriptCheckOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SCRIPT_CHECK_METADATA);
    params = execution.params(params)
    const cargs = v__script_check_cargs(params, execution)
    const ret = v__script_check_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @ScriptCheck
 *
 * Checks scripts for improperly terminated lines and optionally cleans them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param scripts Scripts to be checked for improperly terminated lines
 * @param clean Clean bad line breaks
 * @param suffix Rename uncleaned file with specified suffix. Default is .uncln
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VScriptCheckOutputs`).
 */
function v__script_check(
    scripts: Array<InputPathType>,
    clean: boolean = false,
    suffix: string | null = null,
    runner: Runner | null = null,
): VScriptCheckOutputs {
    const params = v__script_check_params(scripts, clean, suffix)
    return v__script_check_execute(params, runner);
}


export {
      VScriptCheckOutputs,
      V__SCRIPT_CHECK_METADATA,
      v__script_check,
      v__script_check_execute,
      v__script_check_params,
};
