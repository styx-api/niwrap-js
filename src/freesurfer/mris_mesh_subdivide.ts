// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MESH_SUBDIVIDE_METADATA: Metadata = {
    id: "fb137b14730056953d8eae8a55716f7ac7551282.boutiques",
    name: "mris_mesh_subdivide",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMeshSubdivideParameters {
    "__STYXTYPE__": "mris_mesh_subdivide";
    "input_surface": InputPathType;
    "output_surface": string;
    "subdivision_method"?: "butterfly" | "loop" | "linear" | null | undefined;
    "iterations"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_mesh_subdivide": mris_mesh_subdivide_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_mesh_subdivide": mris_mesh_subdivide_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_mesh_subdivide(...)`.
 *
 * @interface
 */
interface MrisMeshSubdivideOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The subdivided mesh surface output file
     */
    subdivided_surface: OutputPathType;
}


function mris_mesh_subdivide_params(
    input_surface: InputPathType,
    output_surface: string,
    subdivision_method: "butterfly" | "loop" | "linear" | null = null,
    iterations: number | null = null,
): MrisMeshSubdivideParameters {
    /**
     * Build parameters.
    
     * @param input_surface Name of input surface file
     * @param output_surface Name for output surface file (outputs to same directory as input if path not provided)
     * @param subdivision_method Subdivision method: options are 'butterfly' (default), 'loop', or 'linear'
     * @param iterations Number of subdivision iterations
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_mesh_subdivide" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
    };
    if (subdivision_method !== null) {
        params["subdivision_method"] = subdivision_method;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    return params;
}


function mris_mesh_subdivide_cargs(
    params: MrisMeshSubdivideParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_mesh_subdivide");
    cargs.push(
        "--surf",
        execution.inputFile((params["input_surface"] ?? null))
    );
    cargs.push(
        "--out",
        (params["output_surface"] ?? null)
    );
    if ((params["subdivision_method"] ?? null) !== null) {
        cargs.push(
            "--method",
            (params["subdivision_method"] ?? null)
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "--iter",
            String((params["iterations"] ?? null))
        );
    }
    return cargs;
}


function mris_mesh_subdivide_outputs(
    params: MrisMeshSubdivideParameters,
    execution: Execution,
): MrisMeshSubdivideOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisMeshSubdivideOutputs = {
        root: execution.outputFile("."),
        subdivided_surface: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


function mris_mesh_subdivide_execute(
    params: MrisMeshSubdivideParameters,
    execution: Execution,
): MrisMeshSubdivideOutputs {
    /**
     * This program will subdivide a triangular mesh surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisMeshSubdivideOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_mesh_subdivide_cargs(params, execution)
    const ret = mris_mesh_subdivide_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_mesh_subdivide(
    input_surface: InputPathType,
    output_surface: string,
    subdivision_method: "butterfly" | "loop" | "linear" | null = null,
    iterations: number | null = null,
    runner: Runner | null = null,
): MrisMeshSubdivideOutputs {
    /**
     * This program will subdivide a triangular mesh surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_surface Name of input surface file
     * @param output_surface Name for output surface file (outputs to same directory as input if path not provided)
     * @param subdivision_method Subdivision method: options are 'butterfly' (default), 'loop', or 'linear'
     * @param iterations Number of subdivision iterations
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisMeshSubdivideOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MESH_SUBDIVIDE_METADATA);
    const params = mris_mesh_subdivide_params(input_surface, output_surface, subdivision_method, iterations)
    return mris_mesh_subdivide_execute(params, execution);
}


export {
      MRIS_MESH_SUBDIVIDE_METADATA,
      MrisMeshSubdivideOutputs,
      MrisMeshSubdivideParameters,
      mris_mesh_subdivide,
      mris_mesh_subdivide_params,
};
