// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FS_CHECK_VERSION_METADATA: Metadata = {
    id: "ac2742ad52c0ec9531a37b18769e9a1969669e97.boutiques",
    name: "fs-check-version",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsCheckVersionParameters {
    "__STYXTYPE__": "fs-check-version";
    "subjects_dir": string;
    "outfile": string;
    "subject"?: string | null | undefined;
    "require_match": boolean;
    "no_require_match": boolean;
    "test": boolean;
    "test_debug": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fs-check-version": fs_check_version_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fs-check-version": fs_check_version_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fs_check_version(...)`.
 *
 * @interface
 */
interface FsCheckVersionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file with a 1 if the version matches, otherwise 0
     */
    output_file: OutputPathType;
}


function fs_check_version_params(
    subjects_dir: string,
    outfile: string,
    subject: string | null = null,
    require_match: boolean = false,
    no_require_match: boolean = false,
    test: boolean = false,
    test_debug: boolean = false,
): FsCheckVersionParameters {
    /**
     * Build parameters.
    
     * @param subjects_dir Subjects directory path
     * @param outfile Output file path where result of version check will be written
     * @param subject Subject name (optional)
     * @param require_match Set REQUIRE_FS_MATCH for testing
     * @param no_require_match Unset REQUIRE_FS_MATCH for testing
     * @param test Go through permutations for testing
     * @param test_debug Go through permutations for debugging
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fs-check-version" as const,
        "subjects_dir": subjects_dir,
        "outfile": outfile,
        "require_match": require_match,
        "no_require_match": no_require_match,
        "test": test,
        "test_debug": test_debug,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    return params;
}


function fs_check_version_cargs(
    params: FsCheckVersionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fs-check-version");
    cargs.push(
        "--sd",
        (params["subjects_dir"] ?? null)
    );
    cargs.push(
        "--o",
        (params["outfile"] ?? null)
    );
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["require_match"] ?? null)) {
        cargs.push("--require-match");
    }
    if ((params["no_require_match"] ?? null)) {
        cargs.push("--no-require-match");
    }
    if ((params["test"] ?? null)) {
        cargs.push("--test");
    }
    if ((params["test_debug"] ?? null)) {
        cargs.push("--test-debug");
    }
    return cargs;
}


function fs_check_version_outputs(
    params: FsCheckVersionParameters,
    execution: Execution,
): FsCheckVersionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FsCheckVersionOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


function fs_check_version_execute(
    params: FsCheckVersionParameters,
    execution: Execution,
): FsCheckVersionOutputs {
    /**
     * Script to manage which version of FreeSurfer can be used to analyze data ensuring consistency with the desired version.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FsCheckVersionOutputs`).
     */
    params = execution.params(params)
    const cargs = fs_check_version_cargs(params, execution)
    const ret = fs_check_version_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fs_check_version(
    subjects_dir: string,
    outfile: string,
    subject: string | null = null,
    require_match: boolean = false,
    no_require_match: boolean = false,
    test: boolean = false,
    test_debug: boolean = false,
    runner: Runner | null = null,
): FsCheckVersionOutputs {
    /**
     * Script to manage which version of FreeSurfer can be used to analyze data ensuring consistency with the desired version.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subjects_dir Subjects directory path
     * @param outfile Output file path where result of version check will be written
     * @param subject Subject name (optional)
     * @param require_match Set REQUIRE_FS_MATCH for testing
     * @param no_require_match Unset REQUIRE_FS_MATCH for testing
     * @param test Go through permutations for testing
     * @param test_debug Go through permutations for debugging
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FsCheckVersionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FS_CHECK_VERSION_METADATA);
    const params = fs_check_version_params(subjects_dir, outfile, subject, require_match, no_require_match, test, test_debug)
    return fs_check_version_execute(params, execution);
}


export {
      FS_CHECK_VERSION_METADATA,
      FsCheckVersionOutputs,
      FsCheckVersionParameters,
      fs_check_version,
      fs_check_version_params,
};
