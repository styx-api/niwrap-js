// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FDR_METADATA: Metadata = {
    id: "c6df1fc3c682e8d10bc8100c6ca38bb1d5015a85.boutiques",
    name: "mri_fdr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFdrParameters {
    "__STYXTYPE__": "mri_fdr";
    "input_files": Array<string>;
    "fdr_value": number;
    "default_frame"?: number | null | undefined;
    "positive_only": boolean;
    "negative_only": boolean;
    "all_voxels": boolean;
    "raw_p_values": boolean;
    "threshold_file"?: string | null | undefined;
    "debug": boolean;
    "check_options": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_fdr": mri_fdr_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_fdr": mri_fdr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_fdr(...)`.
 *
 * @interface
 */
interface MriFdrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output after applying FDR correction
     */
    output_corrected: OutputPathType;
    /**
     * Threshold written to text file
     */
    output_threshold: OutputPathType;
}


function mri_fdr_params(
    input_files: Array<string>,
    fdr_value: number,
    default_frame: number | null = null,
    positive_only: boolean = false,
    negative_only: boolean = false,
    all_voxels: boolean = false,
    raw_p_values: boolean = false,
    threshold_file: string | null = null,
    debug: boolean = false,
    check_options: boolean = false,
): MriFdrParameters {
    /**
     * Build parameters.
    
     * @param input_files Input source volume or surface overlay. Specify mask, output, and frame as needed.
     * @param fdr_value FDR value between 0 and 1, typically .05
     * @param default_frame Use input frame when not specifying frame in --i
     * @param positive_only Only consider positive voxels
     * @param negative_only Only consider negative voxels
     * @param all_voxels Consider all voxels regardless of sign (default)
     * @param raw_p_values Input is raw p-values, not -log10(p)
     * @param threshold_file Write threshold to text file
     * @param debug Turn on debugging
     * @param check_options Don't run anything, just check options and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_fdr" as const,
        "input_files": input_files,
        "fdr_value": fdr_value,
        "positive_only": positive_only,
        "negative_only": negative_only,
        "all_voxels": all_voxels,
        "raw_p_values": raw_p_values,
        "debug": debug,
        "check_options": check_options,
    };
    if (default_frame !== null) {
        params["default_frame"] = default_frame;
    }
    if (threshold_file !== null) {
        params["threshold_file"] = threshold_file;
    }
    return params;
}


function mri_fdr_cargs(
    params: MriFdrParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_fdr");
    cargs.push(
        "--i",
        ...(params["input_files"] ?? null)
    );
    cargs.push(
        "--fdr",
        String((params["fdr_value"] ?? null))
    );
    if ((params["default_frame"] ?? null) !== null) {
        cargs.push(
            "--f",
            String((params["default_frame"] ?? null))
        );
    }
    if ((params["positive_only"] ?? null)) {
        cargs.push("--pos");
    }
    if ((params["negative_only"] ?? null)) {
        cargs.push("--neg");
    }
    if ((params["all_voxels"] ?? null)) {
        cargs.push("--abs");
    }
    if ((params["raw_p_values"] ?? null)) {
        cargs.push("--no-log10p");
    }
    if ((params["threshold_file"] ?? null) !== null) {
        cargs.push(
            "--thfile",
            (params["threshold_file"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_options"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


function mri_fdr_outputs(
    params: MriFdrParameters,
    execution: Execution,
): MriFdrOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriFdrOutputs = {
        root: execution.outputFile("."),
        output_corrected: execution.outputFile(["<output>.mgh"].join('')),
        output_threshold: execution.outputFile(["<output>_threshold.txt"].join('')),
    };
    return ret;
}


function mri_fdr_execute(
    params: MriFdrParameters,
    execution: Execution,
): MriFdrOutputs {
    /**
     * A program that performs False Discovery Rate correction.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriFdrOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_fdr_cargs(params, execution)
    const ret = mri_fdr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_fdr(
    input_files: Array<string>,
    fdr_value: number,
    default_frame: number | null = null,
    positive_only: boolean = false,
    negative_only: boolean = false,
    all_voxels: boolean = false,
    raw_p_values: boolean = false,
    threshold_file: string | null = null,
    debug: boolean = false,
    check_options: boolean = false,
    runner: Runner | null = null,
): MriFdrOutputs {
    /**
     * A program that performs False Discovery Rate correction.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_files Input source volume or surface overlay. Specify mask, output, and frame as needed.
     * @param fdr_value FDR value between 0 and 1, typically .05
     * @param default_frame Use input frame when not specifying frame in --i
     * @param positive_only Only consider positive voxels
     * @param negative_only Only consider negative voxels
     * @param all_voxels Consider all voxels regardless of sign (default)
     * @param raw_p_values Input is raw p-values, not -log10(p)
     * @param threshold_file Write threshold to text file
     * @param debug Turn on debugging
     * @param check_options Don't run anything, just check options and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriFdrOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FDR_METADATA);
    const params = mri_fdr_params(input_files, fdr_value, default_frame, positive_only, negative_only, all_voxels, raw_p_values, threshold_file, debug, check_options)
    return mri_fdr_execute(params, execution);
}


export {
      MRI_FDR_METADATA,
      MriFdrOutputs,
      MriFdrParameters,
      mri_fdr,
      mri_fdr_params,
};
