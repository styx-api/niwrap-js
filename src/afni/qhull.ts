// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const QHULL_METADATA: Metadata = {
    id: "7cf282f989e22a92a6d1e41d86ce6515a481efaa.boutiques",
    name: "qhull",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface QhullParameters {
    "@type": "afni.qhull";
    "input_coords": string;
    "delaunay": boolean;
    "furthest_delaunay": boolean;
    "voronoi": boolean;
    "furthest_voronoi": boolean;
    "halfspace_intersection": boolean;
    "triangulated_output": boolean;
    "joggled_input": boolean;
    "verify": boolean;
    "summary": boolean;
    "vertices_incident": boolean;
    "normals": boolean;
    "vertex_coordinates": boolean;
    "halfspace_intersections": boolean;
    "extreme_points": boolean;
    "total_area_volume": boolean;
    "off_format": boolean;
    "geomview_output": boolean;
    "mathematica_output": boolean;
    "print_facets"?: string | null | undefined;
    "output_file"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.qhull": qhull_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.qhull": qhull_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `qhull(...)`.
 *
 * @interface
 */
interface QhullOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with the specified results.
     */
    output_results: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_coords Dimension, number of points, and point coordinates provided via stdin.
 * @param delaunay Compute Delaunay triangulation by lifting points to a paraboloid.
 * @param furthest_delaunay Compute furthest-site Delaunay triangulation (upper convex hull).
 * @param voronoi Compute Voronoi diagram as the dual of the Delaunay triangulation.
 * @param furthest_voronoi Compute furthest-site Voronoi diagram.
 * @param halfspace_intersection Compute halfspace intersection about [1,1,0,...] via polar duality.
 * @param triangulated_output Triangulated output.
 * @param joggled_input Joggled input instead of merged facets.
 * @param verify Verify result: structure, convexity, and point inclusion.
 * @param summary Summary of results.
 * @param vertices_incident Vertices incident to each facet.
 * @param normals Normals with offsets.
 * @param vertex_coordinates Vertex coordinates (if 'Qc', includes coplanar points). If 'v', Voronoi vertices.
 * @param halfspace_intersections Halfspace intersections.
 * @param extreme_points Extreme points (convex hull vertices).
 * @param total_area_volume Compute total area and volume.
 * @param off_format OFF format (if 'v', outputs Voronoi regions).
 * @param geomview_output Geomview output (2-d, 3-d and 4-d).
 * @param mathematica_output Mathematica output (2-d and 3-d).
 * @param print_facets Print facets that include point n, -n if not.
 * @param output_file Output results to file.
 *
 * @returns Parameter dictionary
 */
function qhull_params(
    input_coords: string,
    delaunay: boolean = false,
    furthest_delaunay: boolean = false,
    voronoi: boolean = false,
    furthest_voronoi: boolean = false,
    halfspace_intersection: boolean = false,
    triangulated_output: boolean = false,
    joggled_input: boolean = false,
    verify: boolean = false,
    summary: boolean = false,
    vertices_incident: boolean = false,
    normals: boolean = false,
    vertex_coordinates: boolean = false,
    halfspace_intersections: boolean = false,
    extreme_points: boolean = false,
    total_area_volume: boolean = false,
    off_format: boolean = false,
    geomview_output: boolean = false,
    mathematica_output: boolean = false,
    print_facets: string | null = null,
    output_file: string | null = null,
): QhullParameters {
    const params = {
        "@type": "afni.qhull" as const,
        "input_coords": input_coords,
        "delaunay": delaunay,
        "furthest_delaunay": furthest_delaunay,
        "voronoi": voronoi,
        "furthest_voronoi": furthest_voronoi,
        "halfspace_intersection": halfspace_intersection,
        "triangulated_output": triangulated_output,
        "joggled_input": joggled_input,
        "verify": verify,
        "summary": summary,
        "vertices_incident": vertices_incident,
        "normals": normals,
        "vertex_coordinates": vertex_coordinates,
        "halfspace_intersections": halfspace_intersections,
        "extreme_points": extreme_points,
        "total_area_volume": total_area_volume,
        "off_format": off_format,
        "geomview_output": geomview_output,
        "mathematica_output": mathematica_output,
    };
    if (print_facets !== null) {
        params["print_facets"] = print_facets;
    }
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function qhull_cargs(
    params: QhullParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("qhull");
    cargs.push((params["input_coords"] ?? null));
    if ((params["delaunay"] ?? null)) {
        cargs.push("d");
    }
    if ((params["furthest_delaunay"] ?? null)) {
        cargs.push("d Qu");
    }
    if ((params["voronoi"] ?? null)) {
        cargs.push("v");
    }
    if ((params["furthest_voronoi"] ?? null)) {
        cargs.push("v Qu");
    }
    if ((params["halfspace_intersection"] ?? null)) {
        cargs.push("H1,1");
    }
    if ((params["triangulated_output"] ?? null)) {
        cargs.push("Qt");
    }
    if ((params["joggled_input"] ?? null)) {
        cargs.push("QJ");
    }
    if ((params["verify"] ?? null)) {
        cargs.push("Tv");
    }
    if ((params["summary"] ?? null)) {
        cargs.push("s");
    }
    if ((params["vertices_incident"] ?? null)) {
        cargs.push("i");
    }
    if ((params["normals"] ?? null)) {
        cargs.push("n");
    }
    if ((params["vertex_coordinates"] ?? null)) {
        cargs.push("p");
    }
    if ((params["halfspace_intersections"] ?? null)) {
        cargs.push("Fp");
    }
    if ((params["extreme_points"] ?? null)) {
        cargs.push("Fx");
    }
    if ((params["total_area_volume"] ?? null)) {
        cargs.push("FA");
    }
    if ((params["off_format"] ?? null)) {
        cargs.push("o");
    }
    if ((params["geomview_output"] ?? null)) {
        cargs.push("G");
    }
    if ((params["mathematica_output"] ?? null)) {
        cargs.push("m");
    }
    if ((params["print_facets"] ?? null) !== null) {
        cargs.push(
            "QVn",
            (params["print_facets"] ?? null)
        );
    }
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "TO",
            (params["output_file"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function qhull_outputs(
    params: QhullParameters,
    execution: Execution,
): QhullOutputs {
    const ret: QhullOutputs = {
        root: execution.outputFile("."),
        output_results: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null), ".txt"].join('')) : null,
    };
    return ret;
}


/**
 * qhull
 *
 * Tool to compute convex hulls and related structures.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `QhullOutputs`).
 */
function qhull_execute(
    params: QhullParameters,
    runner: Runner | null = null,
): QhullOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(QHULL_METADATA);
    params = execution.params(params)
    const cargs = qhull_cargs(params, execution)
    const ret = qhull_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * qhull
 *
 * Tool to compute convex hulls and related structures.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_coords Dimension, number of points, and point coordinates provided via stdin.
 * @param delaunay Compute Delaunay triangulation by lifting points to a paraboloid.
 * @param furthest_delaunay Compute furthest-site Delaunay triangulation (upper convex hull).
 * @param voronoi Compute Voronoi diagram as the dual of the Delaunay triangulation.
 * @param furthest_voronoi Compute furthest-site Voronoi diagram.
 * @param halfspace_intersection Compute halfspace intersection about [1,1,0,...] via polar duality.
 * @param triangulated_output Triangulated output.
 * @param joggled_input Joggled input instead of merged facets.
 * @param verify Verify result: structure, convexity, and point inclusion.
 * @param summary Summary of results.
 * @param vertices_incident Vertices incident to each facet.
 * @param normals Normals with offsets.
 * @param vertex_coordinates Vertex coordinates (if 'Qc', includes coplanar points). If 'v', Voronoi vertices.
 * @param halfspace_intersections Halfspace intersections.
 * @param extreme_points Extreme points (convex hull vertices).
 * @param total_area_volume Compute total area and volume.
 * @param off_format OFF format (if 'v', outputs Voronoi regions).
 * @param geomview_output Geomview output (2-d, 3-d and 4-d).
 * @param mathematica_output Mathematica output (2-d and 3-d).
 * @param print_facets Print facets that include point n, -n if not.
 * @param output_file Output results to file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `QhullOutputs`).
 */
function qhull(
    input_coords: string,
    delaunay: boolean = false,
    furthest_delaunay: boolean = false,
    voronoi: boolean = false,
    furthest_voronoi: boolean = false,
    halfspace_intersection: boolean = false,
    triangulated_output: boolean = false,
    joggled_input: boolean = false,
    verify: boolean = false,
    summary: boolean = false,
    vertices_incident: boolean = false,
    normals: boolean = false,
    vertex_coordinates: boolean = false,
    halfspace_intersections: boolean = false,
    extreme_points: boolean = false,
    total_area_volume: boolean = false,
    off_format: boolean = false,
    geomview_output: boolean = false,
    mathematica_output: boolean = false,
    print_facets: string | null = null,
    output_file: string | null = null,
    runner: Runner | null = null,
): QhullOutputs {
    const params = qhull_params(input_coords, delaunay, furthest_delaunay, voronoi, furthest_voronoi, halfspace_intersection, triangulated_output, joggled_input, verify, summary, vertices_incident, normals, vertex_coordinates, halfspace_intersections, extreme_points, total_area_volume, off_format, geomview_output, mathematica_output, print_facets, output_file)
    return qhull_execute(params, runner);
}


export {
      QHULL_METADATA,
      QhullOutputs,
      QhullParameters,
      qhull,
      qhull_execute,
      qhull_params,
};
