// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TBSS_2_REG_METADATA: Metadata = {
    id: "63ea8f1a13e407ea5d4763480fbad687bcda887c.boutiques",
    name: "tbss_2_reg",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Tbss2RegParameters {
    "@type": "fsl.tbss_2_reg";
    "use_fmrib58_fa_1mm": boolean;
    "target_image"?: InputPathType | null | undefined;
    "find_best_target": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.tbss_2_reg": tbss_2_reg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tbss_2_reg(...)`.
 *
 * @interface
 */
interface Tbss2RegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param use_fmrib58_fa_1mm Use FMRIB58_FA_1mm as the target for nonlinear registrations (recommended)
 * @param target_image Use the specified image as the target for nonlinear registrations
 * @param find_best_target Find the best target from all images in the FA
 *
 * @returns Parameter dictionary
 */
function tbss_2_reg_params(
    use_fmrib58_fa_1mm: boolean = false,
    target_image: InputPathType | null = null,
    find_best_target: boolean = false,
): Tbss2RegParameters {
    const params = {
        "@type": "fsl.tbss_2_reg" as const,
        "use_fmrib58_fa_1mm": use_fmrib58_fa_1mm,
        "find_best_target": find_best_target,
    };
    if (target_image !== null) {
        params["target_image"] = target_image;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tbss_2_reg_cargs(
    params: Tbss2RegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tbss_2_reg");
    if ((params["use_fmrib58_fa_1mm"] ?? null)) {
        cargs.push("-T");
    }
    if ((params["target_image"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["target_image"] ?? null))
        );
    }
    if ((params["find_best_target"] ?? null)) {
        cargs.push("-n");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tbss_2_reg_outputs(
    params: Tbss2RegParameters,
    execution: Execution,
): Tbss2RegOutputs {
    const ret: Tbss2RegOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * TBSS utility for target selection and registration for Tract-Based Spatial Statistics (TBSS) analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Tbss2RegOutputs`).
 */
function tbss_2_reg_execute(
    params: Tbss2RegParameters,
    execution: Execution,
): Tbss2RegOutputs {
    params = execution.params(params)
    const cargs = tbss_2_reg_cargs(params, execution)
    const ret = tbss_2_reg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * TBSS utility for target selection and registration for Tract-Based Spatial Statistics (TBSS) analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param use_fmrib58_fa_1mm Use FMRIB58_FA_1mm as the target for nonlinear registrations (recommended)
 * @param target_image Use the specified image as the target for nonlinear registrations
 * @param find_best_target Find the best target from all images in the FA
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tbss2RegOutputs`).
 */
function tbss_2_reg(
    use_fmrib58_fa_1mm: boolean = false,
    target_image: InputPathType | null = null,
    find_best_target: boolean = false,
    runner: Runner | null = null,
): Tbss2RegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TBSS_2_REG_METADATA);
    const params = tbss_2_reg_params(use_fmrib58_fa_1mm, target_image, find_best_target)
    return tbss_2_reg_execute(params, execution);
}


export {
      TBSS_2_REG_METADATA,
      Tbss2RegOutputs,
      Tbss2RegParameters,
      tbss_2_reg,
      tbss_2_reg_cargs,
      tbss_2_reg_execute,
      tbss_2_reg_outputs,
      tbss_2_reg_params,
};
