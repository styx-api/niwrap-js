// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ANATICOR_METADATA: Metadata = {
    id: "7812bf7600226fd27b9134757f2d604e2f65dc7a.boutiques",
    name: "@ANATICOR",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAnaticorParameters {
    "@type"?: "afni/@ANATICOR";
    "ts": InputPathType;
    "polort": string;
    "motion": InputPathType;
    "aseg": InputPathType;
    "prefix": string;
    "radius"?: number | null | undefined;
    "view"?: string | null | undefined;
    "nuisance"?: InputPathType | null | undefined;
    "no_ventricles": boolean;
    "Rsq_WMe": boolean;
    "coverage": boolean;
    "verb": boolean;
    "dirty": boolean;
    "echo": boolean;
}
type VAnaticorParametersTagged = Required<Pick<VAnaticorParameters, '@type'>> & VAnaticorParameters;


/**
 * Output object returned when calling `VAnaticorParameters(...)`.
 *
 * @interface
 */
interface VAnaticorOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output files with the prefix specified by the -prefix option.
     */
    output_files: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param ts Time series volume which should have already undergone preprocessing steps such as despiking, RetroIcor, RVT correction, time shifting, and volume registration.
 * @param polort Polynomial for linear trend removal. Use the same order as for afni_proc.py
 * @param motion Head motion parameters from 3dvolreg, also created by afni_proc.py
 * @param aseg Aseg file from FreeSurfer's segmentation. This aseg volume must be in register with the EPI time series.
 * @param prefix Use output (residual time series) for a prefix
 * @param radius The radius of a local sphere mask in mm. Default is 15 mm for high resolution 1.7x1.7x3mm data.
 * @param view Set the view of the output data. Default is +orig. Choose from +orig, +acpc, or +tlrc.
 * @param nuisance Other nuisance regressors. Each regressor is a column in .1D file
 * @param no_ventricles Do not include LVe regressor
 * @param rsq_wme Produce an explained variance map for WMeLOCAL regressor.
 * @param coverage Produce a spatial coverage map of WMeLOCAL regressor
 * @param verb Verbose flag
 * @param dirty Keep temporary files
 * @param echo Echo each script command for debugging
 *
 * @returns Parameter dictionary
 */
function v__anaticor_params(
    ts: InputPathType,
    polort: string,
    motion: InputPathType,
    aseg: InputPathType,
    prefix: string,
    radius: number | null = null,
    view: string | null = null,
    nuisance: InputPathType | null = null,
    no_ventricles: boolean = false,
    rsq_wme: boolean = false,
    coverage: boolean = false,
    verb: boolean = false,
    dirty: boolean = false,
    echo: boolean = false,
): VAnaticorParametersTagged {
    const params = {
        "@type": "afni/@ANATICOR" as const,
        "ts": ts,
        "polort": polort,
        "motion": motion,
        "aseg": aseg,
        "prefix": prefix,
        "no_ventricles": no_ventricles,
        "Rsq_WMe": rsq_wme,
        "coverage": coverage,
        "verb": verb,
        "dirty": dirty,
        "echo": echo,
    };
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (view !== null) {
        params["view"] = view;
    }
    if (nuisance !== null) {
        params["nuisance"] = nuisance;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__anaticor_cargs(
    params: VAnaticorParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@ANATICOR");
    cargs.push(
        "-ts",
        execution.inputFile((params["ts"] ?? null))
    );
    cargs.push(
        "-polort",
        (params["polort"] ?? null)
    );
    cargs.push(
        "-motion",
        execution.inputFile((params["motion"] ?? null))
    );
    cargs.push(execution.inputFile((params["aseg"] ?? null)));
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["radius"] ?? null) !== null) {
        cargs.push(
            "-radius",
            String((params["radius"] ?? null))
        );
    }
    if ((params["view"] ?? null) !== null) {
        cargs.push((params["view"] ?? null));
    }
    if ((params["nuisance"] ?? null) !== null) {
        cargs.push(
            "-nuisance",
            execution.inputFile((params["nuisance"] ?? null))
        );
    }
    if ((params["no_ventricles"] ?? false)) {
        cargs.push("-no_ventricles");
    }
    if ((params["Rsq_WMe"] ?? false)) {
        cargs.push("-Rsq_WMe");
    }
    if ((params["coverage"] ?? false)) {
        cargs.push("-coverage");
    }
    if ((params["verb"] ?? false)) {
        cargs.push("-verb");
    }
    if ((params["dirty"] ?? false)) {
        cargs.push("-dirty");
    }
    if ((params["echo"] ?? false)) {
        cargs.push("-echo");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__anaticor_outputs(
    params: VAnaticorParameters,
    execution: Execution,
): VAnaticorOutputs {
    const ret: VAnaticorOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile([(params["prefix"] ?? null)].join('')),
    };
    return ret;
}


/**
 * @ANATICOR
 *
 * Script to produce a residual time series cleaned by ANATICOR model.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAnaticorOutputs`).
 */
function v__anaticor_execute(
    params: VAnaticorParameters,
    runner: Runner | null = null,
): VAnaticorOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ANATICOR_METADATA);
    params = execution.params(params)
    const cargs = v__anaticor_cargs(params, execution)
    const ret = v__anaticor_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @ANATICOR
 *
 * Script to produce a residual time series cleaned by ANATICOR model.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param ts Time series volume which should have already undergone preprocessing steps such as despiking, RetroIcor, RVT correction, time shifting, and volume registration.
 * @param polort Polynomial for linear trend removal. Use the same order as for afni_proc.py
 * @param motion Head motion parameters from 3dvolreg, also created by afni_proc.py
 * @param aseg Aseg file from FreeSurfer's segmentation. This aseg volume must be in register with the EPI time series.
 * @param prefix Use output (residual time series) for a prefix
 * @param radius The radius of a local sphere mask in mm. Default is 15 mm for high resolution 1.7x1.7x3mm data.
 * @param view Set the view of the output data. Default is +orig. Choose from +orig, +acpc, or +tlrc.
 * @param nuisance Other nuisance regressors. Each regressor is a column in .1D file
 * @param no_ventricles Do not include LVe regressor
 * @param rsq_wme Produce an explained variance map for WMeLOCAL regressor.
 * @param coverage Produce a spatial coverage map of WMeLOCAL regressor
 * @param verb Verbose flag
 * @param dirty Keep temporary files
 * @param echo Echo each script command for debugging
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAnaticorOutputs`).
 */
function v__anaticor(
    ts: InputPathType,
    polort: string,
    motion: InputPathType,
    aseg: InputPathType,
    prefix: string,
    radius: number | null = null,
    view: string | null = null,
    nuisance: InputPathType | null = null,
    no_ventricles: boolean = false,
    rsq_wme: boolean = false,
    coverage: boolean = false,
    verb: boolean = false,
    dirty: boolean = false,
    echo: boolean = false,
    runner: Runner | null = null,
): VAnaticorOutputs {
    const params = v__anaticor_params(ts, polort, motion, aseg, prefix, radius, view, nuisance, no_ventricles, rsq_wme, coverage, verb, dirty, echo)
    return v__anaticor_execute(params, runner);
}


export {
      VAnaticorOutputs,
      V__ANATICOR_METADATA,
      v__anaticor,
      v__anaticor_execute,
      v__anaticor_params,
};
