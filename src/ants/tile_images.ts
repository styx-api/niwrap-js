// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TILE_IMAGES_METADATA: Metadata = {
    id: "d5c59deda3b33a375285832f265a0151acf9c1d9.boutiques",
    name: "TileImages",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface TileImagesParameters {
    "@type"?: "ants/TileImages";
    "image_dimension": number;
    "output_image": string;
    "layout": string;
    "input_images": Array<InputPathType>;
}
type TileImagesParametersTagged = Required<Pick<TileImagesParameters, '@type'>> & TileImagesParameters;


/**
 * Output object returned when calling `TileImagesParameters(...)`.
 *
 * @interface
 */
interface TileImagesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The final tiled output image.
     */
    tiled_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Dimensionality of the output image.
 * @param output_image The path for the output tiled image.
 * @param layout Defines the structure of the tiled output image. The layout dictates the number and arrangement of input images in the output image.
 * @param input_images Input images to be tiled into the output image. The number of input images should match the layout specification.
 *
 * @returns Parameter dictionary
 */
function tile_images_params(
    image_dimension: number,
    output_image: string,
    layout: string,
    input_images: Array<InputPathType>,
): TileImagesParametersTagged {
    const params = {
        "@type": "ants/TileImages" as const,
        "image_dimension": image_dimension,
        "output_image": output_image,
        "layout": layout,
        "input_images": input_images,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tile_images_cargs(
    params: TileImagesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("TileImages");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    cargs.push((params["layout"] ?? null));
    cargs.push(...(params["input_images"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tile_images_outputs(
    params: TileImagesParameters,
    execution: Execution,
): TileImagesOutputs {
    const ret: TileImagesOutputs = {
        root: execution.outputFile("."),
        tiled_image: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * TileImages
 *
 * TileImages allows assembling images into a multi-dimensional array, producing a single output image. The input images must have a dimension less than or equal to the specified output image dimension.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TileImagesOutputs`).
 */
function tile_images_execute(
    params: TileImagesParameters,
    runner: Runner | null = null,
): TileImagesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TILE_IMAGES_METADATA);
    params = execution.params(params)
    const cargs = tile_images_cargs(params, execution)
    const ret = tile_images_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * TileImages
 *
 * TileImages allows assembling images into a multi-dimensional array, producing a single output image. The input images must have a dimension less than or equal to the specified output image dimension.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Dimensionality of the output image.
 * @param output_image The path for the output tiled image.
 * @param layout Defines the structure of the tiled output image. The layout dictates the number and arrangement of input images in the output image.
 * @param input_images Input images to be tiled into the output image. The number of input images should match the layout specification.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TileImagesOutputs`).
 */
function tile_images(
    image_dimension: number,
    output_image: string,
    layout: string,
    input_images: Array<InputPathType>,
    runner: Runner | null = null,
): TileImagesOutputs {
    const params = tile_images_params(image_dimension, output_image, layout, input_images)
    return tile_images_execute(params, runner);
}


export {
      TILE_IMAGES_METADATA,
      TileImagesOutputs,
      tile_images,
      tile_images_execute,
      tile_images_params,
};
