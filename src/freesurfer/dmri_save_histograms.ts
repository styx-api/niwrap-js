// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_SAVE_HISTOGRAMS_METADATA: Metadata = {
    id: "9c13eb2eb3b781b53fc909106a2b27e609b6ea8f.boutiques",
    name: "dmri_saveHistograms",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriSaveHistogramsParameters {
    "@type"?: "freesurfer/dmri_saveHistograms";
    "parcellation": InputPathType;
    "number_of_bundles": number;
    "vtk_bundle_list": Array<InputPathType>;
    "output_csv": string;
    "brain_bundle_flag": boolean;
}
type DmriSaveHistogramsParametersTagged = Required<Pick<DmriSaveHistogramsParameters, '@type'>> & DmriSaveHistogramsParameters;


/**
 * Output object returned when calling `DmriSaveHistogramsParameters(...)`.
 *
 * @interface
 */
interface DmriSaveHistogramsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * CSV file containing the output histograms.
     */
    histogram_csv: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param parcellation Parcellation file for the tractography data.
 * @param number_of_bundles Number of bundles in the tractography data.
 * @param vtk_bundle_list List of VTK bundles for creating histograms.
 * @param output_csv Output CSV file to save histograms.
 * @param brain_bundle_flag Brain Bundle flag.
 *
 * @returns Parameter dictionary
 */
function dmri_save_histograms_params(
    parcellation: InputPathType,
    number_of_bundles: number,
    vtk_bundle_list: Array<InputPathType>,
    output_csv: string,
    brain_bundle_flag: boolean = false,
): DmriSaveHistogramsParametersTagged {
    const params = {
        "@type": "freesurfer/dmri_saveHistograms" as const,
        "parcellation": parcellation,
        "number_of_bundles": number_of_bundles,
        "vtk_bundle_list": vtk_bundle_list,
        "output_csv": output_csv,
        "brain_bundle_flag": brain_bundle_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_save_histograms_cargs(
    params: DmriSaveHistogramsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_saveHistograms");
    cargs.push(
        "-p",
        execution.inputFile((params["parcellation"] ?? null))
    );
    cargs.push(
        "-f",
        String((params["number_of_bundles"] ?? null))
    );
    cargs.push(...(params["vtk_bundle_list"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(
        "-o",
        (params["output_csv"] ?? null)
    );
    if ((params["brain_bundle_flag"] ?? false)) {
        cargs.push("-bb");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_save_histograms_outputs(
    params: DmriSaveHistogramsParameters,
    execution: Execution,
): DmriSaveHistogramsOutputs {
    const ret: DmriSaveHistogramsOutputs = {
        root: execution.outputFile("."),
        histogram_csv: execution.outputFile(["histograms.csv"].join('')),
    };
    return ret;
}


/**
 * dmri_saveHistograms
 *
 * A tool to save histograms from diffusion MRI tractography data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriSaveHistogramsOutputs`).
 */
function dmri_save_histograms_execute(
    params: DmriSaveHistogramsParameters,
    runner: Runner | null = null,
): DmriSaveHistogramsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_SAVE_HISTOGRAMS_METADATA);
    params = execution.params(params)
    const cargs = dmri_save_histograms_cargs(params, execution)
    const ret = dmri_save_histograms_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_saveHistograms
 *
 * A tool to save histograms from diffusion MRI tractography data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param parcellation Parcellation file for the tractography data.
 * @param number_of_bundles Number of bundles in the tractography data.
 * @param vtk_bundle_list List of VTK bundles for creating histograms.
 * @param output_csv Output CSV file to save histograms.
 * @param brain_bundle_flag Brain Bundle flag.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriSaveHistogramsOutputs`).
 */
function dmri_save_histograms(
    parcellation: InputPathType,
    number_of_bundles: number,
    vtk_bundle_list: Array<InputPathType>,
    output_csv: string,
    brain_bundle_flag: boolean = false,
    runner: Runner | null = null,
): DmriSaveHistogramsOutputs {
    const params = dmri_save_histograms_params(parcellation, number_of_bundles, vtk_bundle_list, output_csv, brain_bundle_flag)
    return dmri_save_histograms_execute(params, runner);
}


export {
      DMRI_SAVE_HISTOGRAMS_METADATA,
      DmriSaveHistogramsOutputs,
      dmri_save_histograms,
      dmri_save_histograms_execute,
      dmri_save_histograms_params,
};
