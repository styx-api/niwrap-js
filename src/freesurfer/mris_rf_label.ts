// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_RF_LABEL_METADATA: Metadata = {
    id: "5d227a8bccb03f1bb79adab691cff32cc55e0f38.boutiques",
    name: "mris_rf_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRfLabelParameters {
    "@type": "freesurfer.mris_rf_label";
    "subject": string;
    "rf_classifier": string;
    "output_name": string;
    "hemi"?: string | null | undefined;
    "surf"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_rf_label": mris_rf_label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_rf_label(...)`.
 *
 * @interface
 */
interface MrisRfLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier
 * @param rf_classifier Random Forest classifier
 * @param output_name Output name
 * @param hemi Process specified hemisphere instead of default (lh).
 * @param surf Change default surface name from 'white' to specified surface.
 *
 * @returns Parameter dictionary
 */
function mris_rf_label_params(
    subject: string,
    rf_classifier: string,
    output_name: string,
    hemi: string | null = null,
    surf: string | null = null,
): MrisRfLabelParameters {
    const params = {
        "@type": "freesurfer.mris_rf_label" as const,
        "subject": subject,
        "rf_classifier": rf_classifier,
        "output_name": output_name,
    };
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_rf_label_cargs(
    params: MrisRfLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_rf_label");
    cargs.push((params["subject"] ?? null));
    cargs.push((params["rf_classifier"] ?? null));
    cargs.push((params["output_name"] ?? null));
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_rf_label_outputs(
    params: MrisRfLabelParameters,
    execution: Execution,
): MrisRfLabelOutputs {
    const ret: MrisRfLabelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_rf_label
 *
 * A tool for labeling regions of a surface using random forest classification.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRfLabelOutputs`).
 */
function mris_rf_label_execute(
    params: MrisRfLabelParameters,
    runner: Runner | null = null,
): MrisRfLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_RF_LABEL_METADATA);
    params = execution.params(params)
    const cargs = mris_rf_label_cargs(params, execution)
    const ret = mris_rf_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_rf_label
 *
 * A tool for labeling regions of a surface using random forest classification.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier
 * @param rf_classifier Random Forest classifier
 * @param output_name Output name
 * @param hemi Process specified hemisphere instead of default (lh).
 * @param surf Change default surface name from 'white' to specified surface.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRfLabelOutputs`).
 */
function mris_rf_label(
    subject: string,
    rf_classifier: string,
    output_name: string,
    hemi: string | null = null,
    surf: string | null = null,
    runner: Runner | null = null,
): MrisRfLabelOutputs {
    const params = mris_rf_label_params(subject, rf_classifier, output_name, hemi, surf)
    return mris_rf_label_execute(params, runner);
}


export {
      MRIS_RF_LABEL_METADATA,
      MrisRfLabelOutputs,
      MrisRfLabelParameters,
      mris_rf_label,
      mris_rf_label_execute,
      mris_rf_label_params,
};
