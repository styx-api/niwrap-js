// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RMZ_METADATA: Metadata = {
    id: "7b3623e5a5e9b6c5f11ff499f54a7ef56d132993.boutiques",
    name: "rmz",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface RmzParameters {
    "@type": "afni.rmz";
    "quiet": boolean;
    "hash_flag"?: number | null | undefined;
    "keep_flag": boolean;
    "filenames": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.rmz": rmz_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rmz(...)`.
 *
 * @interface
 */
interface RmzOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filenames Files to zero out and remove
 * @param quiet Quiet mode
 * @param hash_flag Number of times to zero out the files
 * @param keep_flag Keep the files instead of removing them
 *
 * @returns Parameter dictionary
 */
function rmz_params(
    filenames: Array<InputPathType>,
    quiet: boolean = false,
    hash_flag: number | null = null,
    keep_flag: boolean = false,
): RmzParameters {
    const params = {
        "@type": "afni.rmz" as const,
        "quiet": quiet,
        "keep_flag": keep_flag,
        "filenames": filenames,
    };
    if (hash_flag !== null) {
        params["hash_flag"] = hash_flag;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rmz_cargs(
    params: RmzParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rmz");
    if ((params["quiet"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["hash_flag"] ?? null) !== null) {
        cargs.push(
            "-#",
            String((params["hash_flag"] ?? null))
        );
    }
    if ((params["keep_flag"] ?? null)) {
        cargs.push("-k");
    }
    cargs.push(...(params["filenames"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rmz_outputs(
    params: RmzParameters,
    execution: Execution,
): RmzOutputs {
    const ret: RmzOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Zeros out files before removing them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `RmzOutputs`).
 */
function rmz_execute(
    params: RmzParameters,
    execution: Execution,
): RmzOutputs {
    params = execution.params(params)
    const cargs = rmz_cargs(params, execution)
    const ret = rmz_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Zeros out files before removing them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param filenames Files to zero out and remove
 * @param quiet Quiet mode
 * @param hash_flag Number of times to zero out the files
 * @param keep_flag Keep the files instead of removing them
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RmzOutputs`).
 */
function rmz(
    filenames: Array<InputPathType>,
    quiet: boolean = false,
    hash_flag: number | null = null,
    keep_flag: boolean = false,
    runner: Runner | null = null,
): RmzOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RMZ_METADATA);
    const params = rmz_params(filenames, quiet, hash_flag, keep_flag)
    return rmz_execute(params, execution);
}


export {
      RMZ_METADATA,
      RmzOutputs,
      RmzParameters,
      rmz,
      rmz_cargs,
      rmz_execute,
      rmz_outputs,
      rmz_params,
};
