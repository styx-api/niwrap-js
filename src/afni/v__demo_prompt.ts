// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__DEMO_PROMPT_METADATA: Metadata = {
    id: "4251e0d6491e307ef7755ae3aaf712a6534ad2f2.boutiques",
    name: "@demo_prompt",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VDemoPromptParameters {
    "@type"?: "afni/@demo_prompt";
    "message": string;
}
type VDemoPromptParametersTagged = Required<Pick<VDemoPromptParameters, '@type'>> & VDemoPromptParameters;


/**
 * Output object returned when calling `VDemoPromptParameters(...)`.
 *
 * @interface
 */
interface VDemoPromptOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Status output: 0 if user presses OK, 1 if user cancels
     */
    status: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param message The message to display in the prompt
 *
 * @returns Parameter dictionary
 */
function v__demo_prompt_params(
    message: string,
): VDemoPromptParametersTagged {
    const params = {
        "@type": "afni/@demo_prompt" as const,
        "message": message,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__demo_prompt_cargs(
    params: VDemoPromptParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@demo_prompt");
    cargs.push((params["message"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__demo_prompt_outputs(
    params: VDemoPromptParameters,
    execution: Execution,
): VDemoPromptOutputs {
    const ret: VDemoPromptOutputs = {
        root: execution.outputFile("."),
        status: execution.outputFile(["status"].join('')),
    };
    return ret;
}


/**
 * @demo_prompt
 *
 * Prompts user with a message and waits for acknowledgment.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VDemoPromptOutputs`).
 */
function v__demo_prompt_execute(
    params: VDemoPromptParameters,
    runner: Runner | null = null,
): VDemoPromptOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__DEMO_PROMPT_METADATA);
    params = execution.params(params)
    const cargs = v__demo_prompt_cargs(params, execution)
    const ret = v__demo_prompt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @demo_prompt
 *
 * Prompts user with a message and waits for acknowledgment.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param message The message to display in the prompt
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VDemoPromptOutputs`).
 */
function v__demo_prompt(
    message: string,
    runner: Runner | null = null,
): VDemoPromptOutputs {
    const params = v__demo_prompt_params(message)
    return v__demo_prompt_execute(params, runner);
}


export {
      VDemoPromptOutputs,
      V__DEMO_PROMPT_METADATA,
      v__demo_prompt,
      v__demo_prompt_execute,
      v__demo_prompt_params,
};
