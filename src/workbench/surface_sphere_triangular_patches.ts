// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_SPHERE_TRIANGULAR_PATCHES_METADATA: Metadata = {
    id: "cb66e6f1207807e8529312a550ed72acdff594ee.boutiques",
    name: "surface-sphere-triangular-patches",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceSphereTriangularPatchesParameters {
    "@type"?: "workbench/surface-sphere-triangular-patches";
    "sphere": InputPathType;
    "divisions": number;
    "text_out": string;
}
type SurfaceSphereTriangularPatchesParametersTagged = Required<Pick<SurfaceSphereTriangularPatchesParameters, '@type'>> & SurfaceSphereTriangularPatchesParameters;


/**
 * Output object returned when calling `SurfaceSphereTriangularPatchesParameters(...)`.
 *
 * @interface
 */
interface SurfaceSphereTriangularPatchesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param sphere an undistorted, regularly divided icosahedral sphere
 * @param divisions how many pieces to divide each icosahedral edge into, must divide perfectly into the given sphere
 * @param text_out output - text file for the vertex numbers of the patches
 *
 * @returns Parameter dictionary
 */
function surface_sphere_triangular_patches_params(
    sphere: InputPathType,
    divisions: number,
    text_out: string,
): SurfaceSphereTriangularPatchesParametersTagged {
    const params = {
        "@type": "workbench/surface-sphere-triangular-patches" as const,
        "sphere": sphere,
        "divisions": divisions,
        "text_out": text_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_sphere_triangular_patches_cargs(
    params: SurfaceSphereTriangularPatchesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-sphere-triangular-patches");
    cargs.push(execution.inputFile((params["sphere"] ?? null)));
    cargs.push(String((params["divisions"] ?? null)));
    cargs.push((params["text_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_sphere_triangular_patches_outputs(
    params: SurfaceSphereTriangularPatchesParameters,
    execution: Execution,
): SurfaceSphereTriangularPatchesOutputs {
    const ret: SurfaceSphereTriangularPatchesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * surface-sphere-triangular-patches
 *
 * Divide standard sphere into patches.
 *
 * Divide the given undistorted sphere into equally-sized triangular patches.  Patches overlap by a border of 1 vertex.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceSphereTriangularPatchesOutputs`).
 */
function surface_sphere_triangular_patches_execute(
    params: SurfaceSphereTriangularPatchesParameters,
    runner: Runner | null = null,
): SurfaceSphereTriangularPatchesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_SPHERE_TRIANGULAR_PATCHES_METADATA);
    params = execution.params(params)
    const cargs = surface_sphere_triangular_patches_cargs(params, execution)
    const ret = surface_sphere_triangular_patches_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-sphere-triangular-patches
 *
 * Divide standard sphere into patches.
 *
 * Divide the given undistorted sphere into equally-sized triangular patches.  Patches overlap by a border of 1 vertex.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param sphere an undistorted, regularly divided icosahedral sphere
 * @param divisions how many pieces to divide each icosahedral edge into, must divide perfectly into the given sphere
 * @param text_out output - text file for the vertex numbers of the patches
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceSphereTriangularPatchesOutputs`).
 */
function surface_sphere_triangular_patches(
    sphere: InputPathType,
    divisions: number,
    text_out: string,
    runner: Runner | null = null,
): SurfaceSphereTriangularPatchesOutputs {
    const params = surface_sphere_triangular_patches_params(sphere, divisions, text_out)
    return surface_sphere_triangular_patches_execute(params, runner);
}


export {
      SURFACE_SPHERE_TRIANGULAR_PATCHES_METADATA,
      SurfaceSphereTriangularPatchesOutputs,
      surface_sphere_triangular_patches,
      surface_sphere_triangular_patches_execute,
      surface_sphere_triangular_patches_params,
};
