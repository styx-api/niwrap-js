// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_TOPOLOGYCORRECTION_METADATA: Metadata = {
    id: "40a7e8816236f767c7c17e74f2b35d577fe73190.boutiques",
    name: "mri_topologycorrection",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriTopologycorrectionParameters {
    "@type": "freesurfer.mri_topologycorrection";
    "input_orig_file": InputPathType;
    "input_segmented_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_topologycorrection": mri_topologycorrection_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_topologycorrection": mri_topologycorrection_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_topologycorrection(...)`.
 *
 * @interface
 */
interface MriTopologycorrectionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Directory where output files will be stored.
     */
    output_folder: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_orig_file Path to the original image file.
 * @param input_segmented_file Path to the segmented image file.
 *
 * @returns Parameter dictionary
 */
function mri_topologycorrection_params(
    input_orig_file: InputPathType,
    input_segmented_file: InputPathType,
): MriTopologycorrectionParameters {
    const params = {
        "@type": "freesurfer.mri_topologycorrection" as const,
        "input_orig_file": input_orig_file,
        "input_segmented_file": input_segmented_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_topologycorrection_cargs(
    params: MriTopologycorrectionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_topologycorrection");
    cargs.push(execution.inputFile((params["input_orig_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_segmented_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_topologycorrection_outputs(
    params: MriTopologycorrectionParameters,
    execution: Execution,
): MriTopologycorrectionOutputs {
    const ret: MriTopologycorrectionOutputs = {
        root: execution.outputFile("."),
        output_folder: execution.outputFile(["[OUTPUT_FOLDER]"].join('')),
    };
    return ret;
}


/**
 * Corrects the topology of segmented MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriTopologycorrectionOutputs`).
 */
function mri_topologycorrection_execute(
    params: MriTopologycorrectionParameters,
    runner: Runner | null = null,
): MriTopologycorrectionOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_TOPOLOGYCORRECTION_METADATA);
    params = execution.params(params)
    const cargs = mri_topologycorrection_cargs(params, execution)
    const ret = mri_topologycorrection_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Corrects the topology of segmented MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_orig_file Path to the original image file.
 * @param input_segmented_file Path to the segmented image file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriTopologycorrectionOutputs`).
 */
function mri_topologycorrection(
    input_orig_file: InputPathType,
    input_segmented_file: InputPathType,
    runner: Runner | null = null,
): MriTopologycorrectionOutputs {
    const params = mri_topologycorrection_params(input_orig_file, input_segmented_file)
    return mri_topologycorrection_execute(params, runner);
}


export {
      MRI_TOPOLOGYCORRECTION_METADATA,
      MriTopologycorrectionOutputs,
      MriTopologycorrectionParameters,
      mri_topologycorrection,
      mri_topologycorrection_execute,
      mri_topologycorrection_params,
};
