// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_HEMI_MASK_METADATA: Metadata = {
    id: "4b94a6ae8c0d8d637191b874a8b7d772a046b018.boutiques",
    name: "make_hemi_mask",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MakeHemiMaskParameters {
    "@type": "freesurfer.make_hemi_mask";
    "hemi": string;
    "input_file": InputPathType;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.make_hemi_mask": make_hemi_mask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.make_hemi_mask": make_hemi_mask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `make_hemi_mask(...)`.
 *
 * @interface
 */
interface MakeHemiMaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Hemisphere masked MRI volume output
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param hemi Hemisphere to keep ('lh' for left hemisphere, 'rh' for right hemisphere)
 * @param input_file Input MRI volume file (e.g. input.mgz)
 * @param output_file Output masked MRI volume file (e.g. output.mgz)
 *
 * @returns Parameter dictionary
 */
function make_hemi_mask_params(
    hemi: string,
    input_file: InputPathType,
    output_file: string,
): MakeHemiMaskParameters {
    const params = {
        "@type": "freesurfer.make_hemi_mask" as const,
        "hemi": hemi,
        "input_file": input_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_hemi_mask_cargs(
    params: MakeHemiMaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make_hemi_mask");
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_hemi_mask_outputs(
    params: MakeHemiMaskParameters,
    execution: Execution,
): MakeHemiMaskOutputs {
    const ret: MakeHemiMaskOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * make_hemi_mask
 *
 * Generates a hemisphere mask by registering input to the left/right reversed version using mri_robust_register, then keeps only the selected hemisphere.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeHemiMaskOutputs`).
 */
function make_hemi_mask_execute(
    params: MakeHemiMaskParameters,
    runner: Runner | null = null,
): MakeHemiMaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_HEMI_MASK_METADATA);
    params = execution.params(params)
    const cargs = make_hemi_mask_cargs(params, execution)
    const ret = make_hemi_mask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * make_hemi_mask
 *
 * Generates a hemisphere mask by registering input to the left/right reversed version using mri_robust_register, then keeps only the selected hemisphere.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param hemi Hemisphere to keep ('lh' for left hemisphere, 'rh' for right hemisphere)
 * @param input_file Input MRI volume file (e.g. input.mgz)
 * @param output_file Output masked MRI volume file (e.g. output.mgz)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeHemiMaskOutputs`).
 */
function make_hemi_mask(
    hemi: string,
    input_file: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): MakeHemiMaskOutputs {
    const params = make_hemi_mask_params(hemi, input_file, output_file)
    return make_hemi_mask_execute(params, runner);
}


export {
      MAKE_HEMI_MASK_METADATA,
      MakeHemiMaskOutputs,
      MakeHemiMaskParameters,
      make_hemi_mask,
      make_hemi_mask_execute,
      make_hemi_mask_params,
};
