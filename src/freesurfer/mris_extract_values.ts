// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_EXTRACT_VALUES_METADATA: Metadata = {
    id: "2367e47189e1fa3c5c889bbaca46aee7e7120936.boutiques",
    name: "mris_extract_values",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisExtractValuesParameters {
    "@type"?: "freesurfer/mris_extract_values";
    "surface": InputPathType;
    "overlay": InputPathType;
    "annotation": InputPathType;
    "csvfile": string;
    "num_images": number;
    "image_files": Array<InputPathType>;
}
type MrisExtractValuesParametersTagged = Required<Pick<MrisExtractValuesParameters, '@type'>> & MrisExtractValuesParameters;


/**
 * Output object returned when calling `MrisExtractValuesParameters(...)`.
 *
 * @interface
 */
interface MrisExtractValuesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The CSV file generated by the tool
     */
    output_csv: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface Path to the surface file
 * @param overlay Path to the overlay file
 * @param annotation Path to the annotation file
 * @param csvfile Name of the output CSV file
 * @param num_images Number of image files to process
 * @param image_files List of image files
 *
 * @returns Parameter dictionary
 */
function mris_extract_values_params(
    surface: InputPathType,
    overlay: InputPathType,
    annotation: InputPathType,
    csvfile: string,
    num_images: number,
    image_files: Array<InputPathType>,
): MrisExtractValuesParametersTagged {
    const params = {
        "@type": "freesurfer/mris_extract_values" as const,
        "surface": surface,
        "overlay": overlay,
        "annotation": annotation,
        "csvfile": csvfile,
        "num_images": num_images,
        "image_files": image_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_extract_values_cargs(
    params: MrisExtractValuesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_extract_values");
    cargs.push(
        "-i",
        execution.inputFile((params["surface"] ?? null))
    );
    cargs.push(
        "-v",
        execution.inputFile((params["overlay"] ?? null))
    );
    cargs.push(
        "-a",
        execution.inputFile((params["annotation"] ?? null))
    );
    cargs.push(
        "-o",
        (params["csvfile"] ?? null)
    );
    cargs.push(
        "-m",
        String((params["num_images"] ?? null))
    );
    cargs.push(
        "--images",
        ...(params["image_files"] ?? null).map(f => execution.inputFile(f))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_extract_values_outputs(
    params: MrisExtractValuesParameters,
    execution: Execution,
): MrisExtractValuesOutputs {
    const ret: MrisExtractValuesOutputs = {
        root: execution.outputFile("."),
        output_csv: execution.outputFile([(params["csvfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_extract_values
 *
 * Extracts values from surface, overlay, and annotation files and outputs them to a CSV file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExtractValuesOutputs`).
 */
function mris_extract_values_execute(
    params: MrisExtractValuesParameters,
    runner: Runner | null = null,
): MrisExtractValuesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_EXTRACT_VALUES_METADATA);
    params = execution.params(params)
    const cargs = mris_extract_values_cargs(params, execution)
    const ret = mris_extract_values_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_extract_values
 *
 * Extracts values from surface, overlay, and annotation files and outputs them to a CSV file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param surface Path to the surface file
 * @param overlay Path to the overlay file
 * @param annotation Path to the annotation file
 * @param csvfile Name of the output CSV file
 * @param num_images Number of image files to process
 * @param image_files List of image files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExtractValuesOutputs`).
 */
function mris_extract_values(
    surface: InputPathType,
    overlay: InputPathType,
    annotation: InputPathType,
    csvfile: string,
    num_images: number,
    image_files: Array<InputPathType>,
    runner: Runner | null = null,
): MrisExtractValuesOutputs {
    const params = mris_extract_values_params(surface, overlay, annotation, csvfile, num_images, image_files)
    return mris_extract_values_execute(params, runner);
}


export {
      MRIS_EXTRACT_VALUES_METADATA,
      MrisExtractValuesOutputs,
      mris_extract_values,
      mris_extract_values_execute,
      mris_extract_values_params,
};
