// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TALAIRACH_METADATA: Metadata = {
    id: "9eee2557d6100e1b4597a972b7852b28d1472d3c.boutiques",
    name: "talairach",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TalairachParameters {
    "@type"?: "freesurfer/talairach";
    "input_volume": InputPathType;
    "output_transform": string;
    "log_flag": boolean;
    "debug_flag": boolean;
}
type TalairachParametersTagged = Required<Pick<TalairachParameters, '@type'>> & TalairachParameters;


/**
 * Output object returned when calling `TalairachParameters(...)`.
 *
 * @interface
 */
interface TalairachOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transformation file.
     */
    xfm_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume.
 * @param output_transform Output transform file (xfm).
 * @param log_flag Specify log file. Default is outdir/talarach.log.
 * @param debug_flag Turn on debugging.
 *
 * @returns Parameter dictionary
 */
function talairach_params(
    input_volume: InputPathType,
    output_transform: string,
    log_flag: boolean = false,
    debug_flag: boolean = false,
): TalairachParametersTagged {
    const params = {
        "@type": "freesurfer/talairach" as const,
        "input_volume": input_volume,
        "output_transform": output_transform,
        "log_flag": log_flag,
        "debug_flag": debug_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function talairach_cargs(
    params: TalairachParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("talairach");
    cargs.push(
        "-i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "-xfm",
        (params["output_transform"] ?? null)
    );
    if ((params["log_flag"] ?? false)) {
        cargs.push("--log");
    }
    if ((params["debug_flag"] ?? false)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function talairach_outputs(
    params: TalairachParameters,
    execution: Execution,
): TalairachOutputs {
    const ret: TalairachOutputs = {
        root: execution.outputFile("."),
        xfm_output: execution.outputFile([(params["output_transform"] ?? null)].join('')),
    };
    return ret;
}


/**
 * talairach
 *
 * Front-end for MINC's mritotal to compute the Talairach transform mapping the input volume to the MNI305.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalairachOutputs`).
 */
function talairach_execute(
    params: TalairachParameters,
    runner: Runner | null = null,
): TalairachOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TALAIRACH_METADATA);
    params = execution.params(params)
    const cargs = talairach_cargs(params, execution)
    const ret = talairach_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * talairach
 *
 * Front-end for MINC's mritotal to compute the Talairach transform mapping the input volume to the MNI305.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume.
 * @param output_transform Output transform file (xfm).
 * @param log_flag Specify log file. Default is outdir/talarach.log.
 * @param debug_flag Turn on debugging.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalairachOutputs`).
 */
function talairach(
    input_volume: InputPathType,
    output_transform: string,
    log_flag: boolean = false,
    debug_flag: boolean = false,
    runner: Runner | null = null,
): TalairachOutputs {
    const params = talairach_params(input_volume, output_transform, log_flag, debug_flag)
    return talairach_execute(params, runner);
}


export {
      TALAIRACH_METADATA,
      TalairachOutputs,
      talairach,
      talairach_execute,
      talairach_params,
};
