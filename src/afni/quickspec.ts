// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const QUICKSPEC_METADATA: Metadata = {
    id: "280e96292648ffe2c737c44b5d806c26bc44f50f.boutiques",
    name: "quickspec",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface QuickspecParameters {
    "@type"?: "afni/quickspec";
    "tn": Array<string>;
    "tsn": Array<string>;
    "tsnad"?: Array<string> | null | undefined;
    "tsnadm"?: Array<string> | null | undefined;
    "tsnadl"?: Array<string> | null | undefined;
    "spec"?: string | null | undefined;
    "help": boolean;
}
type QuickspecParametersTagged = Required<Pick<QuickspecParameters, '@type'>> & QuickspecParameters;


/**
 * Output object returned when calling `QuickspecParameters(...)`.
 *
 * @interface
 */
interface QuickspecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The spec file output.
     */
    out_specfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param tn Specify surface type and name.
 * @param tsn Specify surface type, state, and name.
 * @param tsnad Specify surface type, state, name, anatomical correctness, and Local Domain Parent.
 * @param tsnadm Specify surface type, state, name, anatomical correctness, Local Domain Parent, and node marker file.
 * @param tsnadl Specify surface type, state, name, anatomical correctness, Local Domain Parent, and label dataset file.
 * @param spec Name of spec file output. Default is quick.spec.
 * @param help Display help message.
 *
 * @returns Parameter dictionary
 */
function quickspec_params(
    tn: Array<string>,
    tsn: Array<string>,
    tsnad: Array<string> | null = null,
    tsnadm: Array<string> | null = null,
    tsnadl: Array<string> | null = null,
    spec: string | null = null,
    help: boolean = false,
): QuickspecParametersTagged {
    const params = {
        "@type": "afni/quickspec" as const,
        "tn": tn,
        "tsn": tsn,
        "help": help,
    };
    if (tsnad !== null) {
        params["tsnad"] = tsnad;
    }
    if (tsnadm !== null) {
        params["tsnadm"] = tsnadm;
    }
    if (tsnadl !== null) {
        params["tsnadl"] = tsnadl;
    }
    if (spec !== null) {
        params["spec"] = spec;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function quickspec_cargs(
    params: QuickspecParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("quickspec");
    cargs.push(
        "-tn",
        ...(params["tn"] ?? null)
    );
    cargs.push(
        "-tsn",
        ...(params["tsn"] ?? null)
    );
    if ((params["tsnad"] ?? null) !== null) {
        cargs.push(
            "-tsnad",
            ...(params["tsnad"] ?? null)
        );
    }
    if ((params["tsnadm"] ?? null) !== null) {
        cargs.push(
            "-tsnadm",
            ...(params["tsnadm"] ?? null)
        );
    }
    if ((params["tsnadl"] ?? null) !== null) {
        cargs.push(
            "-tsnadl",
            ...(params["tsnadl"] ?? null)
        );
    }
    if ((params["spec"] ?? null) !== null) {
        cargs.push(
            "-spec",
            (params["spec"] ?? null)
        );
    }
    if ((params["help"] ?? false)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function quickspec_outputs(
    params: QuickspecParameters,
    execution: Execution,
): QuickspecOutputs {
    const ret: QuickspecOutputs = {
        root: execution.outputFile("."),
        out_specfile: ((params["spec"] ?? null) !== null) ? execution.outputFile([(params["spec"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * quickspec
 *
 * A quick and dirty way of loading a surface into SUMA or command line programs using a spec file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `QuickspecOutputs`).
 */
function quickspec_execute(
    params: QuickspecParameters,
    runner: Runner | null = null,
): QuickspecOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(QUICKSPEC_METADATA);
    params = execution.params(params)
    const cargs = quickspec_cargs(params, execution)
    const ret = quickspec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * quickspec
 *
 * A quick and dirty way of loading a surface into SUMA or command line programs using a spec file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param tn Specify surface type and name.
 * @param tsn Specify surface type, state, and name.
 * @param tsnad Specify surface type, state, name, anatomical correctness, and Local Domain Parent.
 * @param tsnadm Specify surface type, state, name, anatomical correctness, Local Domain Parent, and node marker file.
 * @param tsnadl Specify surface type, state, name, anatomical correctness, Local Domain Parent, and label dataset file.
 * @param spec Name of spec file output. Default is quick.spec.
 * @param help Display help message.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `QuickspecOutputs`).
 */
function quickspec(
    tn: Array<string>,
    tsn: Array<string>,
    tsnad: Array<string> | null = null,
    tsnadm: Array<string> | null = null,
    tsnadl: Array<string> | null = null,
    spec: string | null = null,
    help: boolean = false,
    runner: Runner | null = null,
): QuickspecOutputs {
    const params = quickspec_params(tn, tsn, tsnad, tsnadm, tsnadl, spec, help)
    return quickspec_execute(params, runner);
}


export {
      QUICKSPEC_METADATA,
      QuickspecOutputs,
      quickspec,
      quickspec_execute,
      quickspec_params,
};
