// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GLTSYMTEST_METADATA: Metadata = {
    id: "cb3ce3fd8a02c860741465a6388d7e399c05c7bb.boutiques",
    name: "GLTsymtest",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface GltsymtestParameters {
    "@type": "afni.GLTsymtest";
    "badonly": boolean;
    "varlist": string;
    "expr": Array<string>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.GLTsymtest": gltsymtest_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gltsymtest(...)`.
 *
 * @interface
 */
interface GltsymtestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param varlist A list of allowed variable names in the expression, separated by commas, semicolons, and/or spaces
 * @param expr GLT symbolic expression(s), enclosed in quotes
 * @param badonly A flag to only output BAD messages rather than all messages
 *
 * @returns Parameter dictionary
 */
function gltsymtest_params(
    varlist: string,
    expr: Array<string>,
    badonly: boolean = false,
): GltsymtestParameters {
    const params = {
        "@type": "afni.GLTsymtest" as const,
        "badonly": badonly,
        "varlist": varlist,
        "expr": expr,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gltsymtest_cargs(
    params: GltsymtestParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("GLTsymtest");
    if ((params["badonly"] ?? null)) {
        cargs.push("-badonly");
    }
    cargs.push((params["varlist"] ?? null));
    cargs.push(...(params["expr"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gltsymtest_outputs(
    params: GltsymtestParameters,
    execution: Execution,
): GltsymtestOutputs {
    const ret: GltsymtestOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool to test the validity of '-gltsym' strings for use with 3dDeconvolve or 3dREMLfit.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GltsymtestOutputs`).
 */
function gltsymtest_execute(
    params: GltsymtestParameters,
    runner: Runner | null = null,
): GltsymtestOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GLTSYMTEST_METADATA);
    params = execution.params(params)
    const cargs = gltsymtest_cargs(params, execution)
    const ret = gltsymtest_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to test the validity of '-gltsym' strings for use with 3dDeconvolve or 3dREMLfit.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param varlist A list of allowed variable names in the expression, separated by commas, semicolons, and/or spaces
 * @param expr GLT symbolic expression(s), enclosed in quotes
 * @param badonly A flag to only output BAD messages rather than all messages
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GltsymtestOutputs`).
 */
function gltsymtest(
    varlist: string,
    expr: Array<string>,
    badonly: boolean = false,
    runner: Runner | null = null,
): GltsymtestOutputs {
    const params = gltsymtest_params(varlist, expr, badonly)
    return gltsymtest_execute(params, runner);
}


export {
      GLTSYMTEST_METADATA,
      GltsymtestOutputs,
      GltsymtestParameters,
      gltsymtest,
      gltsymtest_execute,
      gltsymtest_params,
};
