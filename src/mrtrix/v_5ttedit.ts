// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_5TTEDIT_METADATA: Metadata = {
    id: "600cbbcfcf2cf74592c61897ae8adbd5df0e6fdd.boutiques",
    name: "5ttedit",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface V5tteditConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type V5tteditConfigParametersTagged = Required<Pick<V5tteditConfigParameters, '@type'>> & V5tteditConfigParameters;


interface V5tteditParameters {
    "@type"?: "mrtrix/5ttedit";
    "cgm"?: InputPathType | null | undefined;
    "sgm"?: InputPathType | null | undefined;
    "wm"?: InputPathType | null | undefined;
    "csf"?: InputPathType | null | undefined;
    "path"?: InputPathType | null | undefined;
    "none"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<V5tteditConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "output": string;
}
type V5tteditParametersTagged = Required<Pick<V5tteditParameters, '@type'>> & V5tteditParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function v_5ttedit_config_params(
    key: string,
    value: string,
): V5tteditConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttedit_config_cargs(
    params: V5tteditConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `V5tteditParameters(...)`.
 *
 * @interface
 */
interface V5tteditOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output modified 5TT image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the 5TT image to be modified
 * @param output the output modified 5TT image
 * @param cgm provide a mask of voxels that should be set to cortical grey matter
 * @param sgm provide a mask of voxels that should be set to sub-cortical grey matter
 * @param wm provide a mask of voxels that should be set to white matter
 * @param csf provide a mask of voxels that should be set to CSF
 * @param path provide a mask of voxels that should be set to pathological tissue
 * @param none provide a mask of voxels that should be cleared (i.e. are non-brain); note that this will supersede all other provided masks
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function v_5ttedit_params(
    input: InputPathType,
    output: string,
    cgm: InputPathType | null = null,
    sgm: InputPathType | null = null,
    wm: InputPathType | null = null,
    csf: InputPathType | null = null,
    path: InputPathType | null = null,
    none: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5tteditConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): V5tteditParametersTagged {
    const params = {
        "@type": "mrtrix/5ttedit" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "output": output,
    };
    if (cgm !== null) {
        params["cgm"] = cgm;
    }
    if (sgm !== null) {
        params["sgm"] = sgm;
    }
    if (wm !== null) {
        params["wm"] = wm;
    }
    if (csf !== null) {
        params["csf"] = csf;
    }
    if (path !== null) {
        params["path"] = path;
    }
    if (none !== null) {
        params["none"] = none;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttedit_cargs(
    params: V5tteditParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("5ttedit");
    if ((params["cgm"] ?? null) !== null) {
        cargs.push(
            "-cgm",
            execution.inputFile((params["cgm"] ?? null))
        );
    }
    if ((params["sgm"] ?? null) !== null) {
        cargs.push(
            "-sgm",
            execution.inputFile((params["sgm"] ?? null))
        );
    }
    if ((params["wm"] ?? null) !== null) {
        cargs.push(
            "-wm",
            execution.inputFile((params["wm"] ?? null))
        );
    }
    if ((params["csf"] ?? null) !== null) {
        cargs.push(
            "-csf",
            execution.inputFile((params["csf"] ?? null))
        );
    }
    if ((params["path"] ?? null) !== null) {
        cargs.push(
            "-path",
            execution.inputFile((params["path"] ?? null))
        );
    }
    if ((params["none"] ?? null) !== null) {
        cargs.push(
            "-none",
            execution.inputFile((params["none"] ?? null))
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => v_5ttedit_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5ttedit_outputs(
    params: V5tteditParameters,
    execution: Execution,
): V5tteditOutputs {
    const ret: V5tteditOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * 5ttedit
 *
 * Manually set the partial volume fractions in an ACT five-tissue-type (5TT) image using mask images.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V5tteditOutputs`).
 */
function v_5ttedit_execute(
    params: V5tteditParameters,
    runner: Runner | null = null,
): V5tteditOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_5TTEDIT_METADATA);
    params = execution.params(params)
    const cargs = v_5ttedit_cargs(params, execution)
    const ret = v_5ttedit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 5ttedit
 *
 * Manually set the partial volume fractions in an ACT five-tissue-type (5TT) image using mask images.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the 5TT image to be modified
 * @param output the output modified 5TT image
 * @param cgm provide a mask of voxels that should be set to cortical grey matter
 * @param sgm provide a mask of voxels that should be set to sub-cortical grey matter
 * @param wm provide a mask of voxels that should be set to white matter
 * @param csf provide a mask of voxels that should be set to CSF
 * @param path provide a mask of voxels that should be set to pathological tissue
 * @param none provide a mask of voxels that should be cleared (i.e. are non-brain); note that this will supersede all other provided masks
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V5tteditOutputs`).
 */
function v_5ttedit(
    input: InputPathType,
    output: string,
    cgm: InputPathType | null = null,
    sgm: InputPathType | null = null,
    wm: InputPathType | null = null,
    csf: InputPathType | null = null,
    path: InputPathType | null = null,
    none: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5tteditConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): V5tteditOutputs {
    const params = v_5ttedit_params(input, output, cgm, sgm, wm, csf, path, none, info, quiet, debug, force, nthreads, config, help, version)
    return v_5ttedit_execute(params, runner);
}


export {
      V5tteditOutputs,
      V_5TTEDIT_METADATA,
      v_5ttedit,
      v_5ttedit_config_params,
      v_5ttedit_execute,
      v_5ttedit_params,
};
