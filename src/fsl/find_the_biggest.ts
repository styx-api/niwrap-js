// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIND_THE_BIGGEST_METADATA: Metadata = {
    id: "f239544d494314cd9b9223a5c419f7de4b1e15a8.boutiques",
    name: "find_the_biggest",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FindTheBiggestParameters {
    "@type": "fsl.find_the_biggest";
    "volumes_surfaces": Array<InputPathType>;
    "output_index": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.find_the_biggest": find_the_biggest_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.find_the_biggest": find_the_biggest_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `find_the_biggest(...)`.
 *
 * @interface
 */
interface FindTheBiggestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Index of the largest volume or surface
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volumes_surfaces List of input volumes or surfaces
 * @param output_index Output index of the largest volume or surface
 *
 * @returns Parameter dictionary
 */
function find_the_biggest_params(
    volumes_surfaces: Array<InputPathType>,
    output_index: string,
): FindTheBiggestParameters {
    const params = {
        "@type": "fsl.find_the_biggest" as const,
        "volumes_surfaces": volumes_surfaces,
        "output_index": output_index,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function find_the_biggest_cargs(
    params: FindTheBiggestParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("find_the_biggest");
    cargs.push(...(params["volumes_surfaces"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["output_index"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function find_the_biggest_outputs(
    params: FindTheBiggestParameters,
    execution: Execution,
): FindTheBiggestOutputs {
    const ret: FindTheBiggestOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_index"] ?? null)].join('')),
    };
    return ret;
}


/**
 * find_the_biggest
 *
 * Tool to find the largest volume or surface from a set of inputs.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FindTheBiggestOutputs`).
 */
function find_the_biggest_execute(
    params: FindTheBiggestParameters,
    runner: Runner | null = null,
): FindTheBiggestOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIND_THE_BIGGEST_METADATA);
    params = execution.params(params)
    const cargs = find_the_biggest_cargs(params, execution)
    const ret = find_the_biggest_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * find_the_biggest
 *
 * Tool to find the largest volume or surface from a set of inputs.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param volumes_surfaces List of input volumes or surfaces
 * @param output_index Output index of the largest volume or surface
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FindTheBiggestOutputs`).
 */
function find_the_biggest(
    volumes_surfaces: Array<InputPathType>,
    output_index: string,
    runner: Runner | null = null,
): FindTheBiggestOutputs {
    const params = find_the_biggest_params(volumes_surfaces, output_index)
    return find_the_biggest_execute(params, runner);
}


export {
      FIND_THE_BIGGEST_METADATA,
      FindTheBiggestOutputs,
      FindTheBiggestParameters,
      find_the_biggest,
      find_the_biggest_execute,
      find_the_biggest_params,
};
