// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_DYADIC_VECTORS_METADATA: Metadata = {
    id: "dcd3b4614dc898f6e0238ec07111ca8117f65008.boutiques",
    name: "make_dyadic_vectors",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MakeDyadicVectorsParameters {
    "__STYXTYPE__": "make_dyadic_vectors";
    "theta_vol": InputPathType;
    "phi_vol": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "output": string;
    "perc"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "make_dyadic_vectors": make_dyadic_vectors_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "make_dyadic_vectors": make_dyadic_vectors_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `make_dyadic_vectors(...)`.
 *
 * @interface
 */
interface MakeDyadicVectorsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the generated dyadic vectors
     */
    output_file: OutputPathType;
}


function make_dyadic_vectors_params(
    theta_vol: InputPathType,
    phi_vol: InputPathType,
    output: string,
    mask: InputPathType | null = null,
    perc: number | null = null,
): MakeDyadicVectorsParameters {
    /**
     * Build parameters.
    
     * @param theta_vol Theta volume input file
     * @param phi_vol Phi volume input file
     * @param output Output file
     * @param mask Mask input file (optional)
     * @param perc Percentage angle of the output cone of uncertainty (output will be in degrees)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "make_dyadic_vectors" as const,
        "theta_vol": theta_vol,
        "phi_vol": phi_vol,
        "output": output,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (perc !== null) {
        params["perc"] = perc;
    }
    return params;
}


function make_dyadic_vectors_cargs(
    params: MakeDyadicVectorsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("make_dyadic_vectors");
    cargs.push(execution.inputFile((params["theta_vol"] ?? null)));
    cargs.push(execution.inputFile((params["phi_vol"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask"] ?? null)));
    }
    cargs.push((params["output"] ?? null));
    if ((params["perc"] ?? null) !== null) {
        cargs.push(String((params["perc"] ?? null)));
    }
    return cargs;
}


function make_dyadic_vectors_outputs(
    params: MakeDyadicVectorsParameters,
    execution: Execution,
): MakeDyadicVectorsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MakeDyadicVectorsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function make_dyadic_vectors_execute(
    params: MakeDyadicVectorsParameters,
    execution: Execution,
): MakeDyadicVectorsOutputs {
    /**
     * Generate dyadic vectors from theta and phi volumes.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MakeDyadicVectorsOutputs`).
     */
    params = execution.params(params)
    const cargs = make_dyadic_vectors_cargs(params, execution)
    const ret = make_dyadic_vectors_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function make_dyadic_vectors(
    theta_vol: InputPathType,
    phi_vol: InputPathType,
    output: string,
    mask: InputPathType | null = null,
    perc: number | null = null,
    runner: Runner | null = null,
): MakeDyadicVectorsOutputs {
    /**
     * Generate dyadic vectors from theta and phi volumes.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param theta_vol Theta volume input file
     * @param phi_vol Phi volume input file
     * @param output Output file
     * @param mask Mask input file (optional)
     * @param perc Percentage angle of the output cone of uncertainty (output will be in degrees)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MakeDyadicVectorsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_DYADIC_VECTORS_METADATA);
    const params = make_dyadic_vectors_params(theta_vol, phi_vol, output, mask, perc)
    return make_dyadic_vectors_execute(params, execution);
}


export {
      MAKE_DYADIC_VECTORS_METADATA,
      MakeDyadicVectorsOutputs,
      MakeDyadicVectorsParameters,
      make_dyadic_vectors,
      make_dyadic_vectors_params,
};
