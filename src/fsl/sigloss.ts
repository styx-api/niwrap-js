// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIGLOSS_METADATA: Metadata = {
    id: "fa1b091e696a3f12441128ea72b339367ae2d030.boutiques",
    name: "sigloss",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SiglossParameters {
    "__STYXTYPE__": "sigloss";
    "input_b0map": InputPathType;
    "output_sigloss": string;
    "input_mask"?: InputPathType | null | undefined;
    "echo_time"?: number | null | undefined;
    "slice_direction"?: "x" | "y" | "z" | null | undefined;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sigloss": sigloss_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sigloss(...)`.
 *
 * @interface
 */
interface SiglossOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function sigloss_params(
    input_b0map: InputPathType,
    output_sigloss: string,
    input_mask: InputPathType | null = null,
    echo_time: number | null = null,
    slice_direction: "x" | "y" | "z" | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): SiglossParameters {
    /**
     * Build parameters.
    
     * @param input_b0map Input b0 map image filename (in rad/s)
     * @param output_sigloss Output signal loss image filename
     * @param input_mask Input mask filename
     * @param echo_time Echo time (in seconds)
     * @param slice_direction Slice direction (either x, y or z)
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display this help message
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sigloss" as const,
        "input_b0map": input_b0map,
        "output_sigloss": output_sigloss,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (input_mask !== null) {
        params["input_mask"] = input_mask;
    }
    if (echo_time !== null) {
        params["echo_time"] = echo_time;
    }
    if (slice_direction !== null) {
        params["slice_direction"] = slice_direction;
    }
    return params;
}


function sigloss_cargs(
    params: SiglossParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sigloss");
    cargs.push(
        "-i",
        execution.inputFile((params["input_b0map"] ?? null))
    );
    cargs.push(
        "-s",
        (params["output_sigloss"] ?? null)
    );
    if ((params["input_mask"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["input_mask"] ?? null))
        );
    }
    if ((params["echo_time"] ?? null) !== null) {
        cargs.push(
            "--te",
            String((params["echo_time"] ?? null))
        );
    }
    if ((params["slice_direction"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["slice_direction"] ?? null)
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


function sigloss_outputs(
    params: SiglossParameters,
    execution: Execution,
): SiglossOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SiglossOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function sigloss_execute(
    params: SiglossParameters,
    execution: Execution,
): SiglossOutputs {
    /**
     * Estimates signal loss from a field map (in rad/s).
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SiglossOutputs`).
     */
    params = execution.params(params)
    const cargs = sigloss_cargs(params, execution)
    const ret = sigloss_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sigloss(
    input_b0map: InputPathType,
    output_sigloss: string,
    input_mask: InputPathType | null = null,
    echo_time: number | null = null,
    slice_direction: "x" | "y" | "z" | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): SiglossOutputs {
    /**
     * Estimates signal loss from a field map (in rad/s).
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_b0map Input b0 map image filename (in rad/s)
     * @param output_sigloss Output signal loss image filename
     * @param input_mask Input mask filename
     * @param echo_time Echo time (in seconds)
     * @param slice_direction Slice direction (either x, y or z)
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display this help message
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SiglossOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIGLOSS_METADATA);
    const params = sigloss_params(input_b0map, output_sigloss, input_mask, echo_time, slice_direction, verbose_flag, help_flag)
    return sigloss_execute(params, execution);
}


export {
      SIGLOSS_METADATA,
      SiglossOutputs,
      SiglossParameters,
      sigloss,
      sigloss_params,
};
