// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UPDATE_NEEDED_METADATA: Metadata = {
    id: "db8c9232b3360e24abd621ee1ace6d7a22a54132.boutiques",
    name: "UpdateNeeded",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UpdateNeededParameters {
    "@type"?: "freesurfer/UpdateNeeded";
    "target_file": InputPathType;
    "source_file": InputPathType;
    "additional_source_files"?: Array<InputPathType> | null | undefined;
}
type UpdateNeededParametersTagged = Required<Pick<UpdateNeededParameters, '@type'>> & UpdateNeededParameters;


/**
 * Output object returned when calling `UpdateNeededParameters(...)`.
 *
 * @interface
 */
interface UpdateNeededOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param target_file The target file that needs to be updated.
 * @param source_file The primary source file for updating the target file.
 * @param additional_source_files Additional source files for updating the target file.
 *
 * @returns Parameter dictionary
 */
function update_needed_params(
    target_file: InputPathType,
    source_file: InputPathType,
    additional_source_files: Array<InputPathType> | null = null,
): UpdateNeededParametersTagged {
    const params = {
        "@type": "freesurfer/UpdateNeeded" as const,
        "target_file": target_file,
        "source_file": source_file,
    };
    if (additional_source_files !== null) {
        params["additional_source_files"] = additional_source_files;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function update_needed_cargs(
    params: UpdateNeededParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("UpdateNeeded");
    cargs.push(execution.inputFile((params["target_file"] ?? null)));
    cargs.push(execution.inputFile((params["source_file"] ?? null)));
    if ((params["additional_source_files"] ?? null) !== null) {
        cargs.push(...(params["additional_source_files"] ?? null).map(f => execution.inputFile(f)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function update_needed_outputs(
    params: UpdateNeededParameters,
    execution: Execution,
): UpdateNeededOutputs {
    const ret: UpdateNeededOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * UpdateNeeded
 *
 * A command-line tool to update a target file based on one or more source files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UpdateNeededOutputs`).
 */
function update_needed_execute(
    params: UpdateNeededParameters,
    runner: Runner | null = null,
): UpdateNeededOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UPDATE_NEEDED_METADATA);
    params = execution.params(params)
    const cargs = update_needed_cargs(params, execution)
    const ret = update_needed_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * UpdateNeeded
 *
 * A command-line tool to update a target file based on one or more source files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param target_file The target file that needs to be updated.
 * @param source_file The primary source file for updating the target file.
 * @param additional_source_files Additional source files for updating the target file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UpdateNeededOutputs`).
 */
function update_needed(
    target_file: InputPathType,
    source_file: InputPathType,
    additional_source_files: Array<InputPathType> | null = null,
    runner: Runner | null = null,
): UpdateNeededOutputs {
    const params = update_needed_params(target_file, source_file, additional_source_files)
    return update_needed_execute(params, runner);
}


export {
      UPDATE_NEEDED_METADATA,
      UpdateNeededOutputs,
      update_needed,
      update_needed_execute,
      update_needed_params,
};
