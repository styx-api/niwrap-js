// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_TRANSFORM_METADATA: Metadata = {
    id: "e6c41caaf057c6f68a1db006d796ff5fd5cf374b.boutiques",
    name: "mris_transform",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisTransformParameters {
    "@type": "freesurfer.mris_transform";
    "input_surface": InputPathType;
    "transform": InputPathType;
    "output_surface": string;
    "trx_src"?: InputPathType | null | undefined;
    "trx_dst"?: InputPathType | null | undefined;
    "is_inverse": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_transform": mris_transform_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_transform": mris_transform_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_transform(...)`.
 *
 * @interface
 */
interface MrisTransformOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Transformed output surface file.
     */
    transformed_output_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file, e.g., lh.pial.
 * @param transform Image-to-image transform file, e.g., LTA or M3Z.
 * @param output_surface Output surface file, e.g., lh.out.pial.
 * @param trx_src Specify the source geometry if the transform was created by MNI/mritotal or FSL/flirt.
 * @param trx_dst Specify the destination geometry if the transform does not include this information or the path in the M3Z is invalid.
 * @param is_inverse Use this option when using a transform from destination to source space.
 *
 * @returns Parameter dictionary
 */
function mris_transform_params(
    input_surface: InputPathType,
    transform: InputPathType,
    output_surface: string,
    trx_src: InputPathType | null = null,
    trx_dst: InputPathType | null = null,
    is_inverse: boolean = false,
): MrisTransformParameters {
    const params = {
        "@type": "freesurfer.mris_transform" as const,
        "input_surface": input_surface,
        "transform": transform,
        "output_surface": output_surface,
        "is_inverse": is_inverse,
    };
    if (trx_src !== null) {
        params["trx_src"] = trx_src;
    }
    if (trx_dst !== null) {
        params["trx_dst"] = trx_dst;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_transform_cargs(
    params: MrisTransformParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_transform");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["transform"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    if ((params["trx_src"] ?? null) !== null) {
        cargs.push(
            "--trx-src",
            execution.inputFile((params["trx_src"] ?? null))
        );
    }
    if ((params["trx_dst"] ?? null) !== null) {
        cargs.push(
            "--trx-dst",
            execution.inputFile((params["trx_dst"] ?? null))
        );
    }
    if ((params["is_inverse"] ?? null)) {
        cargs.push("--is-inverse");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_transform_outputs(
    params: MrisTransformParameters,
    execution: Execution,
): MrisTransformOutputs {
    const ret: MrisTransformOutputs = {
        root: execution.outputFile("."),
        transformed_output_surface: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


/**
 * A tool to transform surfaces from one space to another using image transforms.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrisTransformOutputs`).
 */
function mris_transform_execute(
    params: MrisTransformParameters,
    execution: Execution,
): MrisTransformOutputs {
    params = execution.params(params)
    const cargs = mris_transform_cargs(params, execution)
    const ret = mris_transform_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to transform surfaces from one space to another using image transforms.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file, e.g., lh.pial.
 * @param transform Image-to-image transform file, e.g., LTA or M3Z.
 * @param output_surface Output surface file, e.g., lh.out.pial.
 * @param trx_src Specify the source geometry if the transform was created by MNI/mritotal or FSL/flirt.
 * @param trx_dst Specify the destination geometry if the transform does not include this information or the path in the M3Z is invalid.
 * @param is_inverse Use this option when using a transform from destination to source space.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisTransformOutputs`).
 */
function mris_transform(
    input_surface: InputPathType,
    transform: InputPathType,
    output_surface: string,
    trx_src: InputPathType | null = null,
    trx_dst: InputPathType | null = null,
    is_inverse: boolean = false,
    runner: Runner | null = null,
): MrisTransformOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_TRANSFORM_METADATA);
    const params = mris_transform_params(input_surface, transform, output_surface, trx_src, trx_dst, is_inverse)
    return mris_transform_execute(params, execution);
}


export {
      MRIS_TRANSFORM_METADATA,
      MrisTransformOutputs,
      MrisTransformParameters,
      mris_transform,
      mris_transform_cargs,
      mris_transform_execute,
      mris_transform_outputs,
      mris_transform_params,
};
