// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONNECTOME2TCK_METADATA: Metadata = {
    id: "32504798f4152f6e8b935fbdd10c1918fca1272d.boutiques",
    name: "connectome2tck",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Connectome2tckConfigParameters {
    "@type": "mrtrix.connectome2tck.config";
    "key": string;
    "value": string;
}


interface Connectome2tckParameters {
    "@type": "mrtrix.connectome2tck";
    "nodes"?: Array<number> | null | undefined;
    "exclusive": boolean;
    "files"?: string | null | undefined;
    "exemplars"?: InputPathType | null | undefined;
    "keep_unassigned": boolean;
    "keep_self": boolean;
    "tck_weights_in"?: InputPathType | null | undefined;
    "prefix_tck_weights_out"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Connectome2tckConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "tracks_in": InputPathType;
    "assignments_in": InputPathType;
    "prefix_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.connectome2tck": connectome2tck_cargs,
        "mrtrix.connectome2tck.config": connectome2tck_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function connectome2tck_config_params(
    key: string,
    value: string,
): Connectome2tckConfigParameters {
    const params = {
        "@type": "mrtrix.connectome2tck.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function connectome2tck_config_cargs(
    params: Connectome2tckConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `connectome2tck(...)`.
 *
 * @interface
 */
interface Connectome2tckOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param tracks_in the input track file
 * @param assignments_in input text file containing the node assignments for each streamline
 * @param prefix_out the output file / prefix
 * @param nodes only select tracks that involve a set of nodes of interest (provide as a comma-separated list of integers)
 * @param exclusive only select tracks that exclusively connect nodes from within the list of nodes of interest
 * @param files select how the resulting streamlines will be grouped in output files. Options are: per_edge, per_node, single (default: per_edge)
 * @param exemplars generate a mean connection exemplar per edge, rather than keeping all streamlines (the parcellation node image must be provided in order to constrain the exemplar endpoints)
 * @param keep_unassigned by default, the program discards those streamlines that are not successfully assigned to a node. Set this option to generate corresponding outputs containing these streamlines (labelled as node index 0)
 * @param keep_self by default, the program will not output streamlines that connect to the same node at both ends. Set this option to instead keep these self-connections.
 * @param tck_weights_in specify a text scalar file containing the streamline weights
 * @param prefix_tck_weights_out provide a prefix for outputting a text file corresponding to each output file, each containing only the streamline weights relevant for that track file
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function connectome2tck_params(
    tracks_in: InputPathType,
    assignments_in: InputPathType,
    prefix_out: string,
    nodes: Array<number> | null = null,
    exclusive: boolean = false,
    files: string | null = null,
    exemplars: InputPathType | null = null,
    keep_unassigned: boolean = false,
    keep_self: boolean = false,
    tck_weights_in: InputPathType | null = null,
    prefix_tck_weights_out: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Connectome2tckConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Connectome2tckParameters {
    const params = {
        "@type": "mrtrix.connectome2tck" as const,
        "exclusive": exclusive,
        "keep_unassigned": keep_unassigned,
        "keep_self": keep_self,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "tracks_in": tracks_in,
        "assignments_in": assignments_in,
        "prefix_out": prefix_out,
    };
    if (nodes !== null) {
        params["nodes"] = nodes;
    }
    if (files !== null) {
        params["files"] = files;
    }
    if (exemplars !== null) {
        params["exemplars"] = exemplars;
    }
    if (tck_weights_in !== null) {
        params["tck_weights_in"] = tck_weights_in;
    }
    if (prefix_tck_weights_out !== null) {
        params["prefix_tck_weights_out"] = prefix_tck_weights_out;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function connectome2tck_cargs(
    params: Connectome2tckParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("connectome2tck");
    if ((params["nodes"] ?? null) !== null) {
        cargs.push(
            "-nodes",
            (params["nodes"] ?? null).map(String).join(",")
        );
    }
    if ((params["exclusive"] ?? null)) {
        cargs.push("-exclusive");
    }
    if ((params["files"] ?? null) !== null) {
        cargs.push(
            "-files",
            (params["files"] ?? null)
        );
    }
    if ((params["exemplars"] ?? null) !== null) {
        cargs.push(
            "-exemplars",
            execution.inputFile((params["exemplars"] ?? null))
        );
    }
    if ((params["keep_unassigned"] ?? null)) {
        cargs.push("-keep_unassigned");
    }
    if ((params["keep_self"] ?? null)) {
        cargs.push("-keep_self");
    }
    if ((params["tck_weights_in"] ?? null) !== null) {
        cargs.push(
            "-tck_weights_in",
            execution.inputFile((params["tck_weights_in"] ?? null))
        );
    }
    if ((params["prefix_tck_weights_out"] ?? null) !== null) {
        cargs.push(
            "-prefix_tck_weights_out",
            (params["prefix_tck_weights_out"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["tracks_in"] ?? null)));
    cargs.push(execution.inputFile((params["assignments_in"] ?? null)));
    cargs.push((params["prefix_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function connectome2tck_outputs(
    params: Connectome2tckParameters,
    execution: Execution,
): Connectome2tckOutputs {
    const ret: Connectome2tckOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Extract streamlines from a tractogram based on their assignment to parcellated nodes.
 *
 * The compulsory input file "assignments_in" should contain a text file where there is one row for each streamline, and each row contains a list of numbers corresponding to the parcels to which that streamline was assigned (most typically there will be two entries per streamline, one for each endpoint; but this is not strictly a requirement). This file will most typically be generated using the tck2connectome command with the -out_assignments option.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Connectome2tckOutputs`).
 */
function connectome2tck_execute(
    params: Connectome2tckParameters,
    execution: Execution,
): Connectome2tckOutputs {
    params = execution.params(params)
    const cargs = connectome2tck_cargs(params, execution)
    const ret = connectome2tck_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Extract streamlines from a tractogram based on their assignment to parcellated nodes.
 *
 * The compulsory input file "assignments_in" should contain a text file where there is one row for each streamline, and each row contains a list of numbers corresponding to the parcels to which that streamline was assigned (most typically there will be two entries per streamline, one for each endpoint; but this is not strictly a requirement). This file will most typically be generated using the tck2connectome command with the -out_assignments option.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param tracks_in the input track file
 * @param assignments_in input text file containing the node assignments for each streamline
 * @param prefix_out the output file / prefix
 * @param nodes only select tracks that involve a set of nodes of interest (provide as a comma-separated list of integers)
 * @param exclusive only select tracks that exclusively connect nodes from within the list of nodes of interest
 * @param files select how the resulting streamlines will be grouped in output files. Options are: per_edge, per_node, single (default: per_edge)
 * @param exemplars generate a mean connection exemplar per edge, rather than keeping all streamlines (the parcellation node image must be provided in order to constrain the exemplar endpoints)
 * @param keep_unassigned by default, the program discards those streamlines that are not successfully assigned to a node. Set this option to generate corresponding outputs containing these streamlines (labelled as node index 0)
 * @param keep_self by default, the program will not output streamlines that connect to the same node at both ends. Set this option to instead keep these self-connections.
 * @param tck_weights_in specify a text scalar file containing the streamline weights
 * @param prefix_tck_weights_out provide a prefix for outputting a text file corresponding to each output file, each containing only the streamline weights relevant for that track file
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Connectome2tckOutputs`).
 */
function connectome2tck(
    tracks_in: InputPathType,
    assignments_in: InputPathType,
    prefix_out: string,
    nodes: Array<number> | null = null,
    exclusive: boolean = false,
    files: string | null = null,
    exemplars: InputPathType | null = null,
    keep_unassigned: boolean = false,
    keep_self: boolean = false,
    tck_weights_in: InputPathType | null = null,
    prefix_tck_weights_out: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Connectome2tckConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Connectome2tckOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONNECTOME2TCK_METADATA);
    const params = connectome2tck_params(tracks_in, assignments_in, prefix_out, nodes, exclusive, files, exemplars, keep_unassigned, keep_self, tck_weights_in, prefix_tck_weights_out, info, quiet, debug, force, nthreads, config, help, version)
    return connectome2tck_execute(params, execution);
}


export {
      CONNECTOME2TCK_METADATA,
      Connectome2tckConfigParameters,
      Connectome2tckOutputs,
      Connectome2tckParameters,
      connectome2tck,
      connectome2tck_cargs,
      connectome2tck_config_cargs,
      connectome2tck_config_params,
      connectome2tck_execute,
      connectome2tck_outputs,
      connectome2tck_params,
};
