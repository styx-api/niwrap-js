// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLCREATEHD_METADATA: Metadata = {
    id: "29428d4c3cf0a4affa36352137b84ce0662ec544.boutiques",
    name: "fslcreatehd",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslcreatehdParameters {
    "__STYXTYPE__": "fslcreatehd";
    "xsize": number;
    "ysize": number;
    "zsize": number;
    "tsize": number;
    "xvoxsize": number;
    "yvoxsize": number;
    "zvoxsize": number;
    "tr": number;
    "xorigin": number;
    "yorigin": number;
    "zorigin": number;
    "datatype": number;
    "headername": string;
    "nifti_xml_file"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslcreatehd": fslcreatehd_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslcreatehd": fslcreatehd_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslcreatehd(...)`.
 *
 * @interface
 */
interface FslcreatehdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated NIfTI header file
     */
    out_headerfile: OutputPathType;
}


function fslcreatehd_params(
    xsize: number,
    ysize: number,
    zsize: number,
    tsize: number,
    xvoxsize: number,
    yvoxsize: number,
    zvoxsize: number,
    tr: number,
    xorigin: number,
    yorigin: number,
    zorigin: number,
    datatype: number,
    headername: string,
    nifti_xml_file: InputPathType | null = null,
): FslcreatehdParameters {
    /**
     * Build parameters.
    
     * @param xsize Size of the image in the x dimension
     * @param ysize Size of the image in the y dimension
     * @param zsize Size of the image in the z dimension
     * @param tsize Size of the image in the t dimension (time)
     * @param xvoxsize Voxel size in the x dimension
     * @param yvoxsize Voxel size in the y dimension
     * @param zvoxsize Voxel size in the z dimension
     * @param tr Repetition time (TR) of the image
     * @param xorigin Origin of the image in the x dimension
     * @param yorigin Origin of the image in the y dimension
     * @param zorigin Origin of the image in the z dimension
     * @param datatype Datatype of the image (2=char, 4=short, 8=int, 16=float, 64=double)
     * @param headername Name of the header file to be created
     * @param nifti_xml_file NIfTI XML file describing the header configuration (Mutually exclusive with other inputs)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslcreatehd" as const,
        "xsize": xsize,
        "ysize": ysize,
        "zsize": zsize,
        "tsize": tsize,
        "xvoxsize": xvoxsize,
        "yvoxsize": yvoxsize,
        "zvoxsize": zvoxsize,
        "tr": tr,
        "xorigin": xorigin,
        "yorigin": yorigin,
        "zorigin": zorigin,
        "datatype": datatype,
        "headername": headername,
    };
    if (nifti_xml_file !== null) {
        params["nifti_xml_file"] = nifti_xml_file;
    }
    return params;
}


function fslcreatehd_cargs(
    params: FslcreatehdParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslcreatehd");
    cargs.push(String((params["xsize"] ?? null)));
    cargs.push(String((params["ysize"] ?? null)));
    cargs.push(String((params["zsize"] ?? null)));
    cargs.push(String((params["tsize"] ?? null)));
    cargs.push(String((params["xvoxsize"] ?? null)));
    cargs.push(String((params["yvoxsize"] ?? null)));
    cargs.push(String((params["zvoxsize"] ?? null)));
    cargs.push(String((params["tr"] ?? null)));
    cargs.push(String((params["xorigin"] ?? null)));
    cargs.push(String((params["yorigin"] ?? null)));
    cargs.push(String((params["zorigin"] ?? null)));
    cargs.push(String((params["datatype"] ?? null)));
    cargs.push((params["headername"] ?? null));
    if ((params["nifti_xml_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["nifti_xml_file"] ?? null)));
    }
    return cargs;
}


function fslcreatehd_outputs(
    params: FslcreatehdParameters,
    execution: Execution,
): FslcreatehdOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslcreatehdOutputs = {
        root: execution.outputFile("."),
        out_headerfile: execution.outputFile([(params["headername"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


function fslcreatehd_execute(
    params: FslcreatehdParameters,
    execution: Execution,
): FslcreatehdOutputs {
    /**
     * Tool to create a new NIfTI header.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslcreatehdOutputs`).
     */
    params = execution.params(params)
    const cargs = fslcreatehd_cargs(params, execution)
    const ret = fslcreatehd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslcreatehd(
    xsize: number,
    ysize: number,
    zsize: number,
    tsize: number,
    xvoxsize: number,
    yvoxsize: number,
    zvoxsize: number,
    tr: number,
    xorigin: number,
    yorigin: number,
    zorigin: number,
    datatype: number,
    headername: string,
    nifti_xml_file: InputPathType | null = null,
    runner: Runner | null = null,
): FslcreatehdOutputs {
    /**
     * Tool to create a new NIfTI header.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param xsize Size of the image in the x dimension
     * @param ysize Size of the image in the y dimension
     * @param zsize Size of the image in the z dimension
     * @param tsize Size of the image in the t dimension (time)
     * @param xvoxsize Voxel size in the x dimension
     * @param yvoxsize Voxel size in the y dimension
     * @param zvoxsize Voxel size in the z dimension
     * @param tr Repetition time (TR) of the image
     * @param xorigin Origin of the image in the x dimension
     * @param yorigin Origin of the image in the y dimension
     * @param zorigin Origin of the image in the z dimension
     * @param datatype Datatype of the image (2=char, 4=short, 8=int, 16=float, 64=double)
     * @param headername Name of the header file to be created
     * @param nifti_xml_file NIfTI XML file describing the header configuration (Mutually exclusive with other inputs)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslcreatehdOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLCREATEHD_METADATA);
    const params = fslcreatehd_params(xsize, ysize, zsize, tsize, xvoxsize, yvoxsize, zvoxsize, tr, xorigin, yorigin, zorigin, datatype, headername, nifti_xml_file)
    return fslcreatehd_execute(params, execution);
}


export {
      FSLCREATEHD_METADATA,
      FslcreatehdOutputs,
      FslcreatehdParameters,
      fslcreatehd,
      fslcreatehd_params,
};
