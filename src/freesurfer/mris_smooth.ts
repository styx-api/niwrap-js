// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SMOOTH_METADATA: Metadata = {
    id: "5ddfe551ff4f30834ad6bb05e5c9ab00a743812a.boutiques",
    name: "mris_smooth",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSmoothParameters {
    "@type": "freesurfer.mris_smooth";
    "input_surface": InputPathType;
    "output_surface": string;
    "average_iters"?: number | null | undefined;
    "smoothing_iters"?: number | null | undefined;
    "no_write": boolean;
    "curvature_name"?: string | null | undefined;
    "area_name"?: string | null | undefined;
    "gaussian_params"?: Array<number> | null | undefined;
    "normalize_area": boolean;
    "momentum"?: number | null | undefined;
    "snapshot_interval"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_smooth": mris_smooth_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_smooth": mris_smooth_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_smooth(...)`.
 *
 * @interface
 */
interface MrisSmoothOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output smoothed surface file.
     */
    output_surface_file: OutputPathType;
    /**
     * Output curvature file (if written).
     */
    curvature_file: OutputPathType;
    /**
     * Output area file (if written).
     */
    area_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file for smoothing.
 * @param output_surface Output surface file after smoothing.
 * @param average_iters Specify number of curvature averaging iterations (default is 10).
 * @param smoothing_iters Specify number of smoothing iterations (default is 10).
 * @param no_write Disable writing of curvature and area estimates.
 * @param curvature_name Write curvature to a specified file name (default 'curv').
 * @param area_name Write area to a specified file name (default 'area').
 * @param gaussian_params Use Gaussian curvature smoothing with specified norm and steps.
 * @param normalize_area Normalize area after smoothing.
 * @param momentum Set momentum value.
 * @param snapshot_interval Write snapshot every specified number of iterations.
 *
 * @returns Parameter dictionary
 */
function mris_smooth_params(
    input_surface: InputPathType,
    output_surface: string,
    average_iters: number | null = null,
    smoothing_iters: number | null = null,
    no_write: boolean = false,
    curvature_name: string | null = null,
    area_name: string | null = null,
    gaussian_params: Array<number> | null = null,
    normalize_area: boolean = false,
    momentum: number | null = null,
    snapshot_interval: number | null = null,
): MrisSmoothParameters {
    const params = {
        "@type": "freesurfer.mris_smooth" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
        "no_write": no_write,
        "normalize_area": normalize_area,
    };
    if (average_iters !== null) {
        params["average_iters"] = average_iters;
    }
    if (smoothing_iters !== null) {
        params["smoothing_iters"] = smoothing_iters;
    }
    if (curvature_name !== null) {
        params["curvature_name"] = curvature_name;
    }
    if (area_name !== null) {
        params["area_name"] = area_name;
    }
    if (gaussian_params !== null) {
        params["gaussian_params"] = gaussian_params;
    }
    if (momentum !== null) {
        params["momentum"] = momentum;
    }
    if (snapshot_interval !== null) {
        params["snapshot_interval"] = snapshot_interval;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_smooth_cargs(
    params: MrisSmoothParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_smooth");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    if ((params["average_iters"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["average_iters"] ?? null))
        );
    }
    if ((params["smoothing_iters"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["smoothing_iters"] ?? null))
        );
    }
    if ((params["no_write"] ?? null)) {
        cargs.push("-nw");
    }
    if ((params["curvature_name"] ?? null) !== null) {
        cargs.push(
            "-c",
            (params["curvature_name"] ?? null)
        );
    }
    if ((params["area_name"] ?? null) !== null) {
        cargs.push(
            "-b",
            (params["area_name"] ?? null)
        );
    }
    if ((params["gaussian_params"] ?? null) !== null) {
        cargs.push(
            "-g",
            ...(params["gaussian_params"] ?? null).map(String)
        );
    }
    if ((params["normalize_area"] ?? null)) {
        cargs.push("-area");
    }
    if ((params["momentum"] ?? null) !== null) {
        cargs.push(
            "-m",
            String((params["momentum"] ?? null))
        );
    }
    if ((params["snapshot_interval"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["snapshot_interval"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_smooth_outputs(
    params: MrisSmoothParameters,
    execution: Execution,
): MrisSmoothOutputs {
    const ret: MrisSmoothOutputs = {
        root: execution.outputFile("."),
        output_surface_file: execution.outputFile([(params["output_surface"] ?? null)].join('')),
        curvature_file: execution.outputFile(["${OUTPUT_SURFACE}_curvature"].join('')),
        area_file: execution.outputFile(["${OUTPUT_SURFACE}_area"].join('')),
    };
    return ret;
}


/**
 * mris_smooth
 *
 * This program smooths the tessellation of a cortical surface and writes out the mean curvature and area files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSmoothOutputs`).
 */
function mris_smooth_execute(
    params: MrisSmoothParameters,
    runner: Runner | null = null,
): MrisSmoothOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SMOOTH_METADATA);
    params = execution.params(params)
    const cargs = mris_smooth_cargs(params, execution)
    const ret = mris_smooth_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_smooth
 *
 * This program smooths the tessellation of a cortical surface and writes out the mean curvature and area files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file for smoothing.
 * @param output_surface Output surface file after smoothing.
 * @param average_iters Specify number of curvature averaging iterations (default is 10).
 * @param smoothing_iters Specify number of smoothing iterations (default is 10).
 * @param no_write Disable writing of curvature and area estimates.
 * @param curvature_name Write curvature to a specified file name (default 'curv').
 * @param area_name Write area to a specified file name (default 'area').
 * @param gaussian_params Use Gaussian curvature smoothing with specified norm and steps.
 * @param normalize_area Normalize area after smoothing.
 * @param momentum Set momentum value.
 * @param snapshot_interval Write snapshot every specified number of iterations.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSmoothOutputs`).
 */
function mris_smooth(
    input_surface: InputPathType,
    output_surface: string,
    average_iters: number | null = null,
    smoothing_iters: number | null = null,
    no_write: boolean = false,
    curvature_name: string | null = null,
    area_name: string | null = null,
    gaussian_params: Array<number> | null = null,
    normalize_area: boolean = false,
    momentum: number | null = null,
    snapshot_interval: number | null = null,
    runner: Runner | null = null,
): MrisSmoothOutputs {
    const params = mris_smooth_params(input_surface, output_surface, average_iters, smoothing_iters, no_write, curvature_name, area_name, gaussian_params, normalize_area, momentum, snapshot_interval)
    return mris_smooth_execute(params, runner);
}


export {
      MRIS_SMOOTH_METADATA,
      MrisSmoothOutputs,
      MrisSmoothParameters,
      mris_smooth,
      mris_smooth_execute,
      mris_smooth_params,
};
