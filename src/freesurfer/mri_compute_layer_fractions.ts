// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_COMPUTE_LAYER_FRACTIONS_METADATA: Metadata = {
    id: "8e237dcf475aabd98621f6fc5f16a5b4ffec92cc.boutiques",
    name: "mri_compute_layer_fractions",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriComputeLayerFractionsParameters {
    "@type"?: "freesurfer/mri_compute_layer_fractions";
    "reg_file": InputPathType;
    "input_volume": InputPathType;
    "output_stem": string;
    "output_directory"?: string | null | undefined;
    "aseg_file"?: InputPathType | null | undefined;
    "target_volume"?: InputPathType | null | undefined;
    "hemi_flag": boolean;
    "fs_names_flag": boolean;
    "subject_id"?: string | null | undefined;
    "n_layers"?: number | null | undefined;
    "synth_flag": boolean;
    "thickness"?: number | null | undefined;
    "random_file"?: InputPathType | null | undefined;
    "identity_file"?: string | null | undefined;
}
type MriComputeLayerFractionsParametersTagged = Required<Pick<MriComputeLayerFractionsParameters, '@type'>> & MriComputeLayerFractionsParameters;


/**
 * Output object returned when calling `MriComputeLayerFractionsParameters(...)`.
 *
 * @interface
 */
interface MriComputeLayerFractionsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file for layer fractions computation
     */
    layer_fractions_output: OutputPathType;
    /**
     * Synthesized output volume combining layers and aseg
     */
    synth_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param reg_file Input registration file
 * @param input_volume Input volume file
 * @param output_stem Output stem for generated files
 * @param output_directory Output directory specified by SUBJECTS_DIR
 * @param aseg_file Input ASEG file for synthesis
 * @param target_volume Target volume for analysis
 * @param hemi_flag Specify hemisphere processing
 * @param fs_names_flag Flag to use FreeSurfer names
 * @param subject_id Subject ID for processing
 * @param n_layers Number of layers for volume fraction computation
 * @param synth_flag Flag to combine with the ASEG for a single segmentation volume
 * @param thickness Specify cortical thickness fraction
 * @param random_file Specify random volume file
 * @param identity_file Specify identity file
 *
 * @returns Parameter dictionary
 */
function mri_compute_layer_fractions_params(
    reg_file: InputPathType,
    input_volume: InputPathType,
    output_stem: string,
    output_directory: string | null = null,
    aseg_file: InputPathType | null = null,
    target_volume: InputPathType | null = null,
    hemi_flag: boolean = false,
    fs_names_flag: boolean = false,
    subject_id: string | null = null,
    n_layers: number | null = null,
    synth_flag: boolean = false,
    thickness: number | null = null,
    random_file: InputPathType | null = null,
    identity_file: string | null = null,
): MriComputeLayerFractionsParametersTagged {
    const params = {
        "@type": "freesurfer/mri_compute_layer_fractions" as const,
        "reg_file": reg_file,
        "input_volume": input_volume,
        "output_stem": output_stem,
        "hemi_flag": hemi_flag,
        "fs_names_flag": fs_names_flag,
        "synth_flag": synth_flag,
    };
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    if (aseg_file !== null) {
        params["aseg_file"] = aseg_file;
    }
    if (target_volume !== null) {
        params["target_volume"] = target_volume;
    }
    if (subject_id !== null) {
        params["subject_id"] = subject_id;
    }
    if (n_layers !== null) {
        params["n_layers"] = n_layers;
    }
    if (thickness !== null) {
        params["thickness"] = thickness;
    }
    if (random_file !== null) {
        params["random_file"] = random_file;
    }
    if (identity_file !== null) {
        params["identity_file"] = identity_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_compute_layer_fractions_cargs(
    params: MriComputeLayerFractionsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_compute_layer_fractions");
    cargs.push(execution.inputFile((params["reg_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_stem"] ?? null));
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "-SDIR",
            (params["output_directory"] ?? null)
        );
    }
    if ((params["aseg_file"] ?? null) !== null) {
        cargs.push(
            "-a",
            execution.inputFile((params["aseg_file"] ?? null))
        );
    }
    if ((params["target_volume"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["target_volume"] ?? null)));
    }
    if ((params["hemi_flag"] ?? false)) {
        cargs.push("-hemi");
    }
    if ((params["fs_names_flag"] ?? false)) {
        cargs.push("-FS_names");
    }
    if ((params["subject_id"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["subject_id"] ?? null)
        );
    }
    if ((params["n_layers"] ?? null) !== null) {
        cargs.push(
            "-nlayers",
            String((params["n_layers"] ?? null))
        );
    }
    if ((params["synth_flag"] ?? false)) {
        cargs.push("-synth");
    }
    if ((params["thickness"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["thickness"] ?? null))
        );
    }
    if ((params["random_file"] ?? null) !== null) {
        cargs.push(
            "-n",
            execution.inputFile((params["random_file"] ?? null))
        );
    }
    if ((params["identity_file"] ?? null) !== null) {
        cargs.push((params["identity_file"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_compute_layer_fractions_outputs(
    params: MriComputeLayerFractionsParameters,
    execution: Execution,
): MriComputeLayerFractionsOutputs {
    const ret: MriComputeLayerFractionsOutputs = {
        root: execution.outputFile("."),
        layer_fractions_output: execution.outputFile([(params["output_stem"] ?? null), "_layer_fractions.mgz"].join('')),
        synth_output: execution.outputFile([(params["output_stem"] ?? null), "_synth.mgz"].join('')),
    };
    return ret;
}


/**
 * mri_compute_layer_fractions
 *
 * This program computes volumetric partial volume fractions from laminar surfaces using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriComputeLayerFractionsOutputs`).
 */
function mri_compute_layer_fractions_execute(
    params: MriComputeLayerFractionsParameters,
    runner: Runner | null = null,
): MriComputeLayerFractionsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_COMPUTE_LAYER_FRACTIONS_METADATA);
    params = execution.params(params)
    const cargs = mri_compute_layer_fractions_cargs(params, execution)
    const ret = mri_compute_layer_fractions_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_compute_layer_fractions
 *
 * This program computes volumetric partial volume fractions from laminar surfaces using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param reg_file Input registration file
 * @param input_volume Input volume file
 * @param output_stem Output stem for generated files
 * @param output_directory Output directory specified by SUBJECTS_DIR
 * @param aseg_file Input ASEG file for synthesis
 * @param target_volume Target volume for analysis
 * @param hemi_flag Specify hemisphere processing
 * @param fs_names_flag Flag to use FreeSurfer names
 * @param subject_id Subject ID for processing
 * @param n_layers Number of layers for volume fraction computation
 * @param synth_flag Flag to combine with the ASEG for a single segmentation volume
 * @param thickness Specify cortical thickness fraction
 * @param random_file Specify random volume file
 * @param identity_file Specify identity file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriComputeLayerFractionsOutputs`).
 */
function mri_compute_layer_fractions(
    reg_file: InputPathType,
    input_volume: InputPathType,
    output_stem: string,
    output_directory: string | null = null,
    aseg_file: InputPathType | null = null,
    target_volume: InputPathType | null = null,
    hemi_flag: boolean = false,
    fs_names_flag: boolean = false,
    subject_id: string | null = null,
    n_layers: number | null = null,
    synth_flag: boolean = false,
    thickness: number | null = null,
    random_file: InputPathType | null = null,
    identity_file: string | null = null,
    runner: Runner | null = null,
): MriComputeLayerFractionsOutputs {
    const params = mri_compute_layer_fractions_params(reg_file, input_volume, output_stem, output_directory, aseg_file, target_volume, hemi_flag, fs_names_flag, subject_id, n_layers, synth_flag, thickness, random_file, identity_file)
    return mri_compute_layer_fractions_execute(params, runner);
}


export {
      MRI_COMPUTE_LAYER_FRACTIONS_METADATA,
      MriComputeLayerFractionsOutputs,
      mri_compute_layer_fractions,
      mri_compute_layer_fractions_execute,
      mri_compute_layer_fractions_params,
};
