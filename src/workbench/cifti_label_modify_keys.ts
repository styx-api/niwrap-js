// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_LABEL_MODIFY_KEYS_METADATA: Metadata = {
    id: "e0c244e89a233c2d2fc2fd062eb1b5f673b28511.boutiques",
    name: "cifti-label-modify-keys",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiLabelModifyKeysParameters {
    "@type"?: "workbench/cifti-label-modify-keys";
    "cifti_in": InputPathType;
    "remap_file": string;
    "cifti_out": string;
    "opt_column_column"?: string | null | undefined;
}
type CiftiLabelModifyKeysParametersTagged = Required<Pick<CiftiLabelModifyKeysParameters, '@type'>> & CiftiLabelModifyKeysParameters;


/**
 * Output object returned when calling `CiftiLabelModifyKeysParameters(...)`.
 *
 * @interface
 */
interface CiftiLabelModifyKeysOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output dlabel file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in the input dlabel file
 * @param remap_file text file with old and new key values
 * @param cifti_out the output dlabel file
 * @param opt_column_column select a single column to use: the column number or name
 *
 * @returns Parameter dictionary
 */
function cifti_label_modify_keys_params(
    cifti_in: InputPathType,
    remap_file: string,
    cifti_out: string,
    opt_column_column: string | null = null,
): CiftiLabelModifyKeysParametersTagged {
    const params = {
        "@type": "workbench/cifti-label-modify-keys" as const,
        "cifti_in": cifti_in,
        "remap_file": remap_file,
        "cifti_out": cifti_out,
    };
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_label_modify_keys_cargs(
    params: CiftiLabelModifyKeysParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-label-modify-keys");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["remap_file"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_label_modify_keys_outputs(
    params: CiftiLabelModifyKeysParameters,
    execution: Execution,
): CiftiLabelModifyKeysOutputs {
    const ret: CiftiLabelModifyKeysOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-label-modify-keys
 *
 * Change key values in a dlabel file.
 *
 * <remap-file> should have lines of the form 'oldkey newkey', like so:
 *
 * 3 5
 * 5 8
 * 8 2
 *
 * This would change the current label with key '3' to use the key '5' instead, 5 would use 8, and 8 would use 2.  Any collision in key values results in the label that was not specified in the remap file getting remapped to an otherwise unused key.  Remapping more than one key to the same new key, or the same key to more than one new key, results in an error.  This will not change the appearance of the file when displayed, as it will change the key values in the data at the same time.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelModifyKeysOutputs`).
 */
function cifti_label_modify_keys_execute(
    params: CiftiLabelModifyKeysParameters,
    runner: Runner | null = null,
): CiftiLabelModifyKeysOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_LABEL_MODIFY_KEYS_METADATA);
    params = execution.params(params)
    const cargs = cifti_label_modify_keys_cargs(params, execution)
    const ret = cifti_label_modify_keys_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-label-modify-keys
 *
 * Change key values in a dlabel file.
 *
 * <remap-file> should have lines of the form 'oldkey newkey', like so:
 *
 * 3 5
 * 5 8
 * 8 2
 *
 * This would change the current label with key '3' to use the key '5' instead, 5 would use 8, and 8 would use 2.  Any collision in key values results in the label that was not specified in the remap file getting remapped to an otherwise unused key.  Remapping more than one key to the same new key, or the same key to more than one new key, results in an error.  This will not change the appearance of the file when displayed, as it will change the key values in the data at the same time.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the input dlabel file
 * @param remap_file text file with old and new key values
 * @param cifti_out the output dlabel file
 * @param opt_column_column select a single column to use: the column number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelModifyKeysOutputs`).
 */
function cifti_label_modify_keys(
    cifti_in: InputPathType,
    remap_file: string,
    cifti_out: string,
    opt_column_column: string | null = null,
    runner: Runner | null = null,
): CiftiLabelModifyKeysOutputs {
    const params = cifti_label_modify_keys_params(cifti_in, remap_file, cifti_out, opt_column_column)
    return cifti_label_modify_keys_execute(params, runner);
}


export {
      CIFTI_LABEL_MODIFY_KEYS_METADATA,
      CiftiLabelModifyKeysOutputs,
      cifti_label_modify_keys,
      cifti_label_modify_keys_execute,
      cifti_label_modify_keys_params,
};
