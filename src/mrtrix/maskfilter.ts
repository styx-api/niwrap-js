// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MASKFILTER_METADATA: Metadata = {
    id: "d840afad55e7b22d2468db1a39492bd06fd9a30d.boutiques",
    name: "maskfilter",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MaskfilterVariousStringParameters {
    "@type": "mrtrix.maskfilter.VariousString";
    "obj": string;
}


interface MaskfilterVariousFileParameters {
    "@type": "mrtrix.maskfilter.VariousFile";
    "obj": InputPathType;
}


interface MaskfilterConfigParameters {
    "@type": "mrtrix.maskfilter.config";
    "key": string;
    "value": string;
}


interface MaskfilterParameters {
    "@type": "mrtrix.maskfilter";
    "scale"?: number | null | undefined;
    "axes"?: Array<number> | null | undefined;
    "largest": boolean;
    "connectivity": boolean;
    "npass"?: number | null | undefined;
    "extent"?: Array<number> | null | undefined;
    "strides"?: MaskfilterVariousStringParameters | MaskfilterVariousFileParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MaskfilterConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "filter": string;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.maskfilter": maskfilter_cargs,
        "mrtrix.maskfilter.VariousString": maskfilter_various_string_cargs,
        "mrtrix.maskfilter.VariousFile": maskfilter_various_file_cargs,
        "mrtrix.maskfilter.config": maskfilter_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.maskfilter": maskfilter_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function maskfilter_various_string_params(
    obj: string,
): MaskfilterVariousStringParameters {
    const params = {
        "@type": "mrtrix.maskfilter.VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function maskfilter_various_string_cargs(
    params: MaskfilterVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function maskfilter_various_file_params(
    obj: InputPathType,
): MaskfilterVariousFileParameters {
    const params = {
        "@type": "mrtrix.maskfilter.VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function maskfilter_various_file_cargs(
    params: MaskfilterVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function maskfilter_config_params(
    key: string,
    value: string,
): MaskfilterConfigParameters {
    const params = {
        "@type": "mrtrix.maskfilter.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function maskfilter_config_cargs(
    params: MaskfilterConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `maskfilter(...)`.
 *
 * @interface
 */
interface MaskfilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input image.
 * @param filter the type of filter to be applied (clean, connect, dilate, erode, median)
 * @param output the output image.
 * @param scale the maximum scale used to cut bridges. A certain maximum scale cuts bridges up to a width (in voxels) of 2x the provided scale. (Default: 2)
 * @param axes specify which axes should be included in the connected components. By default only the first 3 axes are included. The axes should be provided as a comma-separated list of values.
 * @param largest only retain the largest connected component
 * @param connectivity use 26-voxel-neighbourhood connectivity (Default: 6)
 * @param npass the number of times to repeatedly apply the filter
 * @param extent specify the extent (width) of kernel size in voxels. This can be specified either as a single value to be used for all axes, or as a comma-separated list of the extent for each axis. The default is 3x3x3.
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function maskfilter_params(
    input: InputPathType,
    filter: string,
    output: string,
    scale: number | null = null,
    axes: Array<number> | null = null,
    largest: boolean = false,
    connectivity: boolean = false,
    npass: number | null = null,
    extent: Array<number> | null = null,
    strides: MaskfilterVariousStringParameters | MaskfilterVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MaskfilterConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MaskfilterParameters {
    const params = {
        "@type": "mrtrix.maskfilter" as const,
        "largest": largest,
        "connectivity": connectivity,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "filter": filter,
        "output": output,
    };
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (axes !== null) {
        params["axes"] = axes;
    }
    if (npass !== null) {
        params["npass"] = npass;
    }
    if (extent !== null) {
        params["extent"] = extent;
    }
    if (strides !== null) {
        params["strides"] = strides;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function maskfilter_cargs(
    params: MaskfilterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("maskfilter");
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-scale",
            String((params["scale"] ?? null))
        );
    }
    if ((params["axes"] ?? null) !== null) {
        cargs.push(
            "-axes",
            (params["axes"] ?? null).map(String).join(",")
        );
    }
    if ((params["largest"] ?? null)) {
        cargs.push("-largest");
    }
    if ((params["connectivity"] ?? null)) {
        cargs.push("-connectivity");
    }
    if ((params["npass"] ?? null) !== null) {
        cargs.push(
            "-npass",
            String((params["npass"] ?? null))
        );
    }
    if ((params["extent"] ?? null) !== null) {
        cargs.push(
            "-extent",
            (params["extent"] ?? null).map(String).join(",")
        );
    }
    if ((params["strides"] ?? null) !== null) {
        cargs.push(
            "-strides",
            ...dynCargs((params["strides"] ?? null)["@type"])((params["strides"] ?? null), execution)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["filter"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function maskfilter_outputs(
    params: MaskfilterParameters,
    execution: Execution,
): MaskfilterOutputs {
    const ret: MaskfilterOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * maskfilter
 *
 * Perform filtering operations on 3D / 4D mask images.
 *
 * The available filters are: clean, connect, dilate, erode, median.
 *
 * Each filter has its own unique set of optional parameters.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MaskfilterOutputs`).
 */
function maskfilter_execute(
    params: MaskfilterParameters,
    runner: Runner | null = null,
): MaskfilterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MASKFILTER_METADATA);
    params = execution.params(params)
    const cargs = maskfilter_cargs(params, execution)
    const ret = maskfilter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * maskfilter
 *
 * Perform filtering operations on 3D / 4D mask images.
 *
 * The available filters are: clean, connect, dilate, erode, median.
 *
 * Each filter has its own unique set of optional parameters.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input image.
 * @param filter the type of filter to be applied (clean, connect, dilate, erode, median)
 * @param output the output image.
 * @param scale the maximum scale used to cut bridges. A certain maximum scale cuts bridges up to a width (in voxels) of 2x the provided scale. (Default: 2)
 * @param axes specify which axes should be included in the connected components. By default only the first 3 axes are included. The axes should be provided as a comma-separated list of values.
 * @param largest only retain the largest connected component
 * @param connectivity use 26-voxel-neighbourhood connectivity (Default: 6)
 * @param npass the number of times to repeatedly apply the filter
 * @param extent specify the extent (width) of kernel size in voxels. This can be specified either as a single value to be used for all axes, or as a comma-separated list of the extent for each axis. The default is 3x3x3.
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MaskfilterOutputs`).
 */
function maskfilter(
    input: InputPathType,
    filter: string,
    output: string,
    scale: number | null = null,
    axes: Array<number> | null = null,
    largest: boolean = false,
    connectivity: boolean = false,
    npass: number | null = null,
    extent: Array<number> | null = null,
    strides: MaskfilterVariousStringParameters | MaskfilterVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MaskfilterConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MaskfilterOutputs {
    const params = maskfilter_params(input, filter, output, scale, axes, largest, connectivity, npass, extent, strides, info, quiet, debug, force, nthreads, config, help, version)
    return maskfilter_execute(params, runner);
}


export {
      MASKFILTER_METADATA,
      MaskfilterConfigParameters,
      MaskfilterOutputs,
      MaskfilterParameters,
      MaskfilterVariousFileParameters,
      MaskfilterVariousStringParameters,
      maskfilter,
      maskfilter_config_params,
      maskfilter_execute,
      maskfilter_params,
      maskfilter_various_file_params,
      maskfilter_various_string_params,
};
