// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TBSS_4_PRESTATS_METADATA: Metadata = {
    id: "c3282aef88c580ce9e51953bf80329516d78b6be.boutiques",
    name: "tbss_4_prestats",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Tbss4PrestatsParameters {
    "__STYXTYPE__": "tbss_4_prestats";
    "threshold": number;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tbss_4_prestats": tbss_4_prestats_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tbss_4_prestats(...)`.
 *
 * @interface
 */
interface Tbss4PrestatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function tbss_4_prestats_params(
    threshold: number = 0.2,
): Tbss4PrestatsParameters {
    /**
     * Build parameters.
    
     * @param threshold Thresholding value for the Mean FA Skeleton; recommended value is 0.2
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tbss_4_prestats" as const,
        "threshold": threshold,
    };
    return params;
}


function tbss_4_prestats_cargs(
    params: Tbss4PrestatsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tbss_4_prestats");
    cargs.push(String((params["threshold"] ?? null)));
    return cargs;
}


function tbss_4_prestats_outputs(
    params: Tbss4PrestatsParameters,
    execution: Execution,
): Tbss4PrestatsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Tbss4PrestatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function tbss_4_prestats_execute(
    params: Tbss4PrestatsParameters,
    execution: Execution,
): Tbss4PrestatsOutputs {
    /**
     * A tool for thresholding the Mean FA Skeleton in TBSS analysis.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Tbss4PrestatsOutputs`).
     */
    params = execution.params(params)
    const cargs = tbss_4_prestats_cargs(params, execution)
    const ret = tbss_4_prestats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tbss_4_prestats(
    threshold: number = 0.2,
    runner: Runner | null = null,
): Tbss4PrestatsOutputs {
    /**
     * A tool for thresholding the Mean FA Skeleton in TBSS analysis.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param threshold Thresholding value for the Mean FA Skeleton; recommended value is 0.2
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Tbss4PrestatsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TBSS_4_PRESTATS_METADATA);
    const params = tbss_4_prestats_params(threshold)
    return tbss_4_prestats_execute(params, execution);
}


export {
      TBSS_4_PRESTATS_METADATA,
      Tbss4PrestatsOutputs,
      Tbss4PrestatsParameters,
      tbss_4_prestats,
      tbss_4_prestats_params,
};
