// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CREATE_LUT_METADATA: Metadata = {
    id: "927e39579e62b2b6321d61476b9d896179d49b27.boutiques",
    name: "create_lut",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface CreateLutParameters {
    "__STYXTYPE__": "create_lut";
    "output_file_root": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "create_lut": create_lut_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "create_lut": create_lut_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `create_lut(...)`.
 *
 * @interface
 */
interface CreateLutOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated lookup table files
     */
    output_files: OutputPathType;
}


function create_lut_params(
    output_file_root: string,
): CreateLutParameters {
    /**
     * Build parameters.
    
     * @param output_file_root The root name of the output file to be generated
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "create_lut" as const,
        "output_file_root": output_file_root,
    };
    return params;
}


function create_lut_cargs(
    params: CreateLutParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("create_lut");
    cargs.push((params["output_file_root"] ?? null));
    return cargs;
}


function create_lut_outputs(
    params: CreateLutParameters,
    execution: Execution,
): CreateLutOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CreateLutOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile([(params["output_file_root"] ?? null), ".*"].join('')),
    };
    return ret;
}


function create_lut_execute(
    params: CreateLutParameters,
    execution: Execution,
): CreateLutOutputs {
    /**
     * A tool to create lookup tables.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CreateLutOutputs`).
     */
    params = execution.params(params)
    const cargs = create_lut_cargs(params, execution)
    const ret = create_lut_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function create_lut(
    output_file_root: string,
    runner: Runner | null = null,
): CreateLutOutputs {
    /**
     * A tool to create lookup tables.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param output_file_root The root name of the output file to be generated
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CreateLutOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CREATE_LUT_METADATA);
    const params = create_lut_params(output_file_root)
    return create_lut_execute(params, execution);
}


export {
      CREATE_LUT_METADATA,
      CreateLutOutputs,
      CreateLutParameters,
      create_lut,
      create_lut_params,
};
