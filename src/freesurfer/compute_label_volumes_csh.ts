// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const COMPUTE_LABEL_VOLUMES_CSH_METADATA: Metadata = {
    id: "82638ae4faa0eb9506df9c2f3a56c833cb5de288.boutiques",
    name: "compute_label_volumes.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ComputeLabelVolumesCshParameters {
    "__STYXTYPE__": "compute_label_volumes.csh";
    "label_vol": InputPathType;
    "output_file": string;
    "label_l"?: string | null | undefined;
    "version": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "compute_label_volumes.csh": compute_label_volumes_csh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "compute_label_volumes.csh": compute_label_volumes_csh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `compute_label_volumes_csh(...)`.
 *
 * @interface
 */
interface ComputeLabelVolumesCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file with the computed number of voxels and volumes
     */
    result_file: OutputPathType;
}


function compute_label_volumes_csh_params(
    label_vol: InputPathType,
    output_file: string,
    label_l: string | null = null,
    version: boolean = false,
    help: boolean = false,
): ComputeLabelVolumesCshParameters {
    /**
     * Build parameters.
    
     * @param label_vol Label volume to be analyzed
     * @param output_file Text file where the results are written
     * @param label_l The particular label to be analyzed (case-insensitive option)
     * @param version Print version and exit
     * @param help Print help and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "compute_label_volumes.csh" as const,
        "label_vol": label_vol,
        "output_file": output_file,
        "version": version,
        "help": help,
    };
    if (label_l !== null) {
        params["label_l"] = label_l;
    }
    return params;
}


function compute_label_volumes_csh_cargs(
    params: ComputeLabelVolumesCshParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("compute_label_volumes");
    cargs.push(
        "--vol",
        execution.inputFile((params["label_vol"] ?? null))
    );
    cargs.push(
        "--out",
        (params["output_file"] ?? null)
    );
    if ((params["label_l"] ?? null) !== null) {
        cargs.push(
            "--l",
            (params["label_l"] ?? null)
        );
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


function compute_label_volumes_csh_outputs(
    params: ComputeLabelVolumesCshParameters,
    execution: Execution,
): ComputeLabelVolumesCshOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ComputeLabelVolumesCshOutputs = {
        root: execution.outputFile("."),
        result_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function compute_label_volumes_csh_execute(
    params: ComputeLabelVolumesCshParameters,
    execution: Execution,
): ComputeLabelVolumesCshOutputs {
    /**
     * Computes the number of voxels and the volumes of either all or a particular label in the input label volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ComputeLabelVolumesCshOutputs`).
     */
    params = execution.params(params)
    const cargs = compute_label_volumes_csh_cargs(params, execution)
    const ret = compute_label_volumes_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function compute_label_volumes_csh(
    label_vol: InputPathType,
    output_file: string,
    label_l: string | null = null,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): ComputeLabelVolumesCshOutputs {
    /**
     * Computes the number of voxels and the volumes of either all or a particular label in the input label volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param label_vol Label volume to be analyzed
     * @param output_file Text file where the results are written
     * @param label_l The particular label to be analyzed (case-insensitive option)
     * @param version Print version and exit
     * @param help Print help and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ComputeLabelVolumesCshOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(COMPUTE_LABEL_VOLUMES_CSH_METADATA);
    const params = compute_label_volumes_csh_params(label_vol, output_file, label_l, version, help)
    return compute_label_volumes_csh_execute(params, execution);
}


export {
      COMPUTE_LABEL_VOLUMES_CSH_METADATA,
      ComputeLabelVolumesCshOutputs,
      ComputeLabelVolumesCshParameters,
      compute_label_volumes_csh,
      compute_label_volumes_csh_params,
};
