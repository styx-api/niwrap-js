// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLSELECTVOLS_METADATA: Metadata = {
    id: "b97f2d0f36344dd886c04ca097a1839d519105c0.boutiques",
    name: "fslselectvols",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslselectvolsParameters {
    "__STYXTYPE__": "fslselectvols";
    "input_file": InputPathType;
    "output_file": string;
    "vols_list": string;
    "output_mean_flag": boolean;
    "output_variance_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslselectvols": fslselectvols_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslselectvols": fslselectvols_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslselectvols(...)`.
 *
 * @interface
 */
interface FslselectvolsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output 4D image with selected volumes
     */
    output_4d_image: OutputPathType;
}


function fslselectvols_params(
    input_file: InputPathType,
    output_file: string,
    vols_list: string,
    output_mean_flag: boolean = false,
    output_variance_flag: boolean = false,
    help_flag: boolean = false,
): FslselectvolsParameters {
    /**
     * Build parameters.
    
     * @param input_file Input file name (4D image)
     * @param output_file Output file name (4D image)
     * @param vols_list List of volumes to extract (comma-separated list or ascii file)
     * @param output_mean_flag Output mean instead of concatenation
     * @param output_variance_flag Output variance instead of concatenation
     * @param help_flag Display help text
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslselectvols" as const,
        "input_file": input_file,
        "output_file": output_file,
        "vols_list": vols_list,
        "output_mean_flag": output_mean_flag,
        "output_variance_flag": output_variance_flag,
        "help_flag": help_flag,
    };
    return params;
}


function fslselectvols_cargs(
    params: FslselectvolsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslselectvols");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    cargs.push(
        "--vols",
        (params["vols_list"] ?? null)
    );
    if ((params["output_mean_flag"] ?? null)) {
        cargs.push("-m");
    }
    if ((params["output_variance_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


function fslselectvols_outputs(
    params: FslselectvolsParameters,
    execution: Execution,
): FslselectvolsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslselectvolsOutputs = {
        root: execution.outputFile("."),
        output_4d_image: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function fslselectvols_execute(
    params: FslselectvolsParameters,
    execution: Execution,
): FslselectvolsOutputs {
    /**
     * Select volumes from a 4D time series and output a subset 4D volume.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslselectvolsOutputs`).
     */
    params = execution.params(params)
    const cargs = fslselectvols_cargs(params, execution)
    const ret = fslselectvols_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslselectvols(
    input_file: InputPathType,
    output_file: string,
    vols_list: string,
    output_mean_flag: boolean = false,
    output_variance_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): FslselectvolsOutputs {
    /**
     * Select volumes from a 4D time series and output a subset 4D volume.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file Input file name (4D image)
     * @param output_file Output file name (4D image)
     * @param vols_list List of volumes to extract (comma-separated list or ascii file)
     * @param output_mean_flag Output mean instead of concatenation
     * @param output_variance_flag Output variance instead of concatenation
     * @param help_flag Display help text
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslselectvolsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLSELECTVOLS_METADATA);
    const params = fslselectvols_params(input_file, output_file, vols_list, output_mean_flag, output_variance_flag, help_flag)
    return fslselectvols_execute(params, execution);
}


export {
      FSLSELECTVOLS_METADATA,
      FslselectvolsOutputs,
      FslselectvolsParameters,
      fslselectvols,
      fslselectvols_params,
};
