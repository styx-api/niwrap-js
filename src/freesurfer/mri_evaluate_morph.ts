// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EVALUATE_MORPH_METADATA: Metadata = {
    id: "80d2aca899795eab8a40cb4bb8b3d34e4bf9970e.boutiques",
    name: "mri_evaluate_morph",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriEvaluateMorphParameters {
    "__STYXTYPE__": "mri_evaluate_morph";
    "xform_name": InputPathType;
    "segmentation_files": Array<InputPathType>;
    "output_file": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_evaluate_morph": mri_evaluate_morph_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_evaluate_morph": mri_evaluate_morph_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_evaluate_morph(...)`.
 *
 * @interface
 */
interface MriEvaluateMorphOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file containing overlap results.
     */
    output_overlap_file: OutputPathType;
}


function mri_evaluate_morph_params(
    xform_name: InputPathType,
    segmentation_files: Array<InputPathType>,
    output_file: string,
): MriEvaluateMorphParameters {
    /**
     * Build parameters.
    
     * @param xform_name Transformation file name.
     * @param segmentation_files Input segmentation files.
     * @param output_file Output file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_evaluate_morph" as const,
        "xform_name": xform_name,
        "segmentation_files": segmentation_files,
        "output_file": output_file,
    };
    return params;
}


function mri_evaluate_morph_cargs(
    params: MriEvaluateMorphParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_evaluate_morph");
    cargs.push(execution.inputFile((params["xform_name"] ?? null)));
    cargs.push(...(params["segmentation_files"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


function mri_evaluate_morph_outputs(
    params: MriEvaluateMorphParameters,
    execution: Execution,
): MriEvaluateMorphOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriEvaluateMorphOutputs = {
        root: execution.outputFile("."),
        output_overlap_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function mri_evaluate_morph_execute(
    params: MriEvaluateMorphParameters,
    execution: Execution,
): MriEvaluateMorphOutputs {
    /**
     * This program computes the overlap of a set of segmentations for a given morph using an xform file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriEvaluateMorphOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_evaluate_morph_cargs(params, execution)
    const ret = mri_evaluate_morph_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_evaluate_morph(
    xform_name: InputPathType,
    segmentation_files: Array<InputPathType>,
    output_file: string,
    runner: Runner | null = null,
): MriEvaluateMorphOutputs {
    /**
     * This program computes the overlap of a set of segmentations for a given morph using an xform file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param xform_name Transformation file name.
     * @param segmentation_files Input segmentation files.
     * @param output_file Output file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriEvaluateMorphOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EVALUATE_MORPH_METADATA);
    const params = mri_evaluate_morph_params(xform_name, segmentation_files, output_file)
    return mri_evaluate_morph_execute(params, execution);
}


export {
      MRI_EVALUATE_MORPH_METADATA,
      MriEvaluateMorphOutputs,
      MriEvaluateMorphParameters,
      mri_evaluate_morph,
      mri_evaluate_morph_params,
};
