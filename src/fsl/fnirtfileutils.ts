// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FNIRTFILEUTILS_METADATA: Metadata = {
    id: "4b92ff67bacddb65f4359d0d8064dfaf793a41b8.boutiques",
    name: "fnirtfileutils",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FnirtfileutilsParameters {
    "@type": "fsl.fnirtfileutils";
    "input_coefs": InputPathType;
    "ref_volume"?: InputPathType | null | undefined;
    "out_field"?: string | null | undefined;
    "output_format"?: string | null | undefined;
    "warp_res"?: number | null | undefined;
    "knot_space"?: number | null | undefined;
    "jacobian_output"?: string | null | undefined;
    "jacobian_matrix_output"?: string | null | undefined;
    "with_aff": boolean;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fnirtfileutils": fnirtfileutils_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fnirtfileutils": fnirtfileutils_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fnirtfileutils(...)`.
 *
 * @interface
 */
interface FnirtfileutilsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output field or coefficient volume
     */
    output_field_file: OutputPathType | null;
    /**
     * Output jacobian determinant map volume
     */
    jacobian_output_file: OutputPathType | null;
    /**
     * Output full jacobian matrix 4D-map volume
     */
    jacobian_matrix_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_coefs Filename of input coefficient volume to be converted
 * @param ref_volume Filename for reference volume
 * @param out_field Filename for output field/coef volume - uses relative warp convention
 * @param output_format Output format [field, spline], default=field
 * @param warp_res Warp resolution (mm), only relevant when --outformat=spline
 * @param knot_space Knot-spacing (voxels), only relevant when --outformat=spline
 * @param jacobian_output Filename for output jacobian determinant map volume
 * @param jacobian_matrix_output Filename for output full jacobian matrix 4D-map volume
 * @param with_aff If set, the affine transform is included in the field/jacobian
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display this help message
 *
 * @returns Parameter dictionary
 */
function fnirtfileutils_params(
    input_coefs: InputPathType,
    ref_volume: InputPathType | null = null,
    out_field: string | null = null,
    output_format: string | null = "field",
    warp_res: number | null = null,
    knot_space: number | null = null,
    jacobian_output: string | null = null,
    jacobian_matrix_output: string | null = null,
    with_aff: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): FnirtfileutilsParameters {
    const params = {
        "@type": "fsl.fnirtfileutils" as const,
        "input_coefs": input_coefs,
        "with_aff": with_aff,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (ref_volume !== null) {
        params["ref_volume"] = ref_volume;
    }
    if (out_field !== null) {
        params["out_field"] = out_field;
    }
    if (output_format !== null) {
        params["output_format"] = output_format;
    }
    if (warp_res !== null) {
        params["warp_res"] = warp_res;
    }
    if (knot_space !== null) {
        params["knot_space"] = knot_space;
    }
    if (jacobian_output !== null) {
        params["jacobian_output"] = jacobian_output;
    }
    if (jacobian_matrix_output !== null) {
        params["jacobian_matrix_output"] = jacobian_matrix_output;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fnirtfileutils_cargs(
    params: FnirtfileutilsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fnirtfileutils");
    cargs.push(
        "--in",
        execution.inputFile((params["input_coefs"] ?? null))
    );
    if ((params["ref_volume"] ?? null) !== null) {
        cargs.push(
            "--ref",
            execution.inputFile((params["ref_volume"] ?? null))
        );
    }
    if ((params["out_field"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["out_field"] ?? null)
        );
    }
    if ((params["output_format"] ?? null) !== null) {
        cargs.push(
            "--outformat",
            (params["output_format"] ?? null)
        );
    }
    if ((params["warp_res"] ?? null) !== null) {
        cargs.push(
            "--warpres",
            String((params["warp_res"] ?? null))
        );
    }
    if ((params["knot_space"] ?? null) !== null) {
        cargs.push(
            "--knotspace",
            String((params["knot_space"] ?? null))
        );
    }
    if ((params["jacobian_output"] ?? null) !== null) {
        cargs.push(
            "--jac",
            (params["jacobian_output"] ?? null)
        );
    }
    if ((params["jacobian_matrix_output"] ?? null) !== null) {
        cargs.push(
            "--matjac",
            (params["jacobian_matrix_output"] ?? null)
        );
    }
    if ((params["with_aff"] ?? null)) {
        cargs.push("--withaff");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("--verbose");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fnirtfileutils_outputs(
    params: FnirtfileutilsParameters,
    execution: Execution,
): FnirtfileutilsOutputs {
    const ret: FnirtfileutilsOutputs = {
        root: execution.outputFile("."),
        output_field_file: ((params["out_field"] ?? null) !== null) ? execution.outputFile([(params["out_field"] ?? null), ".nii.gz"].join('')) : null,
        jacobian_output_file: ((params["jacobian_output"] ?? null) !== null) ? execution.outputFile([(params["jacobian_output"] ?? null), ".nii.gz"].join('')) : null,
        jacobian_matrix_file: ((params["jacobian_matrix_output"] ?? null) !== null) ? execution.outputFile([(params["jacobian_matrix_output"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * FNIRT file utilities for FSL - Converts FNIRT warp field coefficients to other formats.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FnirtfileutilsOutputs`).
 */
function fnirtfileutils_execute(
    params: FnirtfileutilsParameters,
    execution: Execution,
): FnirtfileutilsOutputs {
    params = execution.params(params)
    const cargs = fnirtfileutils_cargs(params, execution)
    const ret = fnirtfileutils_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * FNIRT file utilities for FSL - Converts FNIRT warp field coefficients to other formats.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_coefs Filename of input coefficient volume to be converted
 * @param ref_volume Filename for reference volume
 * @param out_field Filename for output field/coef volume - uses relative warp convention
 * @param output_format Output format [field, spline], default=field
 * @param warp_res Warp resolution (mm), only relevant when --outformat=spline
 * @param knot_space Knot-spacing (voxels), only relevant when --outformat=spline
 * @param jacobian_output Filename for output jacobian determinant map volume
 * @param jacobian_matrix_output Filename for output full jacobian matrix 4D-map volume
 * @param with_aff If set, the affine transform is included in the field/jacobian
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display this help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FnirtfileutilsOutputs`).
 */
function fnirtfileutils(
    input_coefs: InputPathType,
    ref_volume: InputPathType | null = null,
    out_field: string | null = null,
    output_format: string | null = "field",
    warp_res: number | null = null,
    knot_space: number | null = null,
    jacobian_output: string | null = null,
    jacobian_matrix_output: string | null = null,
    with_aff: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): FnirtfileutilsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FNIRTFILEUTILS_METADATA);
    const params = fnirtfileutils_params(input_coefs, ref_volume, out_field, output_format, warp_res, knot_space, jacobian_output, jacobian_matrix_output, with_aff, verbose_flag, help_flag)
    return fnirtfileutils_execute(params, execution);
}


export {
      FNIRTFILEUTILS_METADATA,
      FnirtfileutilsOutputs,
      FnirtfileutilsParameters,
      fnirtfileutils,
      fnirtfileutils_cargs,
      fnirtfileutils_execute,
      fnirtfileutils_outputs,
      fnirtfileutils_params,
};
