// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SKELETONIZE_METADATA: Metadata = {
    id: "0fdd79ec24e0401776bf73585a340c5f957f2405.boutiques",
    name: "mris_skeletonize",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSkeletonizeParameters {
    "@type": "freesurfer.mris_skeletonize";
    "surface": string;
    "surfvals": string;
    "mask": string;
    "k1": boolean;
    "curv_nonmaxsup": boolean;
    "gyrus": boolean;
    "sulcus": boolean;
    "outdir"?: string | null | undefined;
    "sphere"?: string | null | undefined;
    "pointset"?: string | null | undefined;
    "label"?: string | null | undefined;
    "nbrsize"?: number | null | undefined;
    "threshold"?: number | null | undefined;
    "cluster"?: number | null | undefined;
    "fwhm"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_skeletonize": mris_skeletonize_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_skeletonize": mris_skeletonize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_skeletonize(...)`.
 *
 * @interface
 */
interface MrisSkeletonizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output skeletonized mask.
     */
    skeleton_output: OutputPathType | null;
    /**
     * Output point set of the skeleton.
     */
    pointset_output: OutputPathType | null;
    /**
     * Label file for the skeletonized output.
     */
    skeleton_label: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param surface Path to the surface file.
 * @param surfvals Pass input explicitly rather than computing it.
 * @param mask Final skeletonized mask file.
 * @param k1 Use k1 from surface (not with --curv-nonmaxsup).
 * @param curv_nonmaxsup Use curvature H computed from surface with non-max suppression (not with --k1).
 * @param gyrus Skeletonize the crowns of the gyri.
 * @param sulcus Skeletonize the fundi of the sulci.
 * @param outdir Directory where all outputs will be saved.
 * @param sphere Sphere path, only needed for nonmax suppression.
 * @param pointset Point set of the skeleton (PointSet.json).
 * @param label Surface label of the skeleton (label file path).
 * @param nbrsize Neighborhood size for 2nd FF (default is 2).
 * @param threshold Used to create initial mask that will be skeletonized (typically about 0.3).
 * @param cluster Cluster the thresholded input and keep the largest nkeep clusters.
 * @param fwhm Smooth surface values by this FWHM.
 *
 * @returns Parameter dictionary
 */
function mris_skeletonize_params(
    surface: string,
    surfvals: string,
    mask: string,
    k1: boolean = false,
    curv_nonmaxsup: boolean = false,
    gyrus: boolean = false,
    sulcus: boolean = false,
    outdir: string | null = null,
    sphere: string | null = null,
    pointset: string | null = null,
    label: string | null = null,
    nbrsize: number | null = null,
    threshold: number | null = null,
    cluster: number | null = null,
    fwhm: number | null = null,
): MrisSkeletonizeParameters {
    const params = {
        "@type": "freesurfer.mris_skeletonize" as const,
        "surface": surface,
        "surfvals": surfvals,
        "mask": mask,
        "k1": k1,
        "curv_nonmaxsup": curv_nonmaxsup,
        "gyrus": gyrus,
        "sulcus": sulcus,
    };
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (sphere !== null) {
        params["sphere"] = sphere;
    }
    if (pointset !== null) {
        params["pointset"] = pointset;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (nbrsize !== null) {
        params["nbrsize"] = nbrsize;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (cluster !== null) {
        params["cluster"] = cluster;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_skeletonize_cargs(
    params: MrisSkeletonizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_skeletonize");
    cargs.push(
        "--surf",
        (params["surface"] ?? null)
    );
    cargs.push(
        "--surfvals",
        (params["surfvals"] ?? null)
    );
    cargs.push(
        "--mask",
        (params["mask"] ?? null)
    );
    if ((params["k1"] ?? null)) {
        cargs.push("--k1");
    }
    if ((params["curv_nonmaxsup"] ?? null)) {
        cargs.push("--curv-nonmaxsup");
    }
    if ((params["gyrus"] ?? null)) {
        cargs.push("--gyrus");
    }
    if ((params["sulcus"] ?? null)) {
        cargs.push("--sulcus");
    }
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "--outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["sphere"] ?? null) !== null) {
        cargs.push(
            "--sphere",
            (params["sphere"] ?? null)
        );
    }
    if ((params["pointset"] ?? null) !== null) {
        cargs.push(
            "--ps",
            (params["pointset"] ?? null)
        );
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "--label",
            (params["label"] ?? null)
        );
    }
    if ((params["nbrsize"] ?? null) !== null) {
        cargs.push(
            "--nbrsize",
            String((params["nbrsize"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["cluster"] ?? null) !== null) {
        cargs.push(
            "--cluster",
            String((params["cluster"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_skeletonize_outputs(
    params: MrisSkeletonizeParameters,
    execution: Execution,
): MrisSkeletonizeOutputs {
    const ret: MrisSkeletonizeOutputs = {
        root: execution.outputFile("."),
        skeleton_output: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/skeleton.mgz"].join('')) : null,
        pointset_output: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/PointSet.json"].join('')) : null,
        skeleton_label: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/skeleton_label.mgz"].join('')) : null,
    };
    return ret;
}


/**
 * mris_skeletonize
 *
 * Computes the skeleton of gyri (ie, the crowns) or sulci (ie, the fundi).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSkeletonizeOutputs`).
 */
function mris_skeletonize_execute(
    params: MrisSkeletonizeParameters,
    runner: Runner | null = null,
): MrisSkeletonizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SKELETONIZE_METADATA);
    params = execution.params(params)
    const cargs = mris_skeletonize_cargs(params, execution)
    const ret = mris_skeletonize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_skeletonize
 *
 * Computes the skeleton of gyri (ie, the crowns) or sulci (ie, the fundi).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param surface Path to the surface file.
 * @param surfvals Pass input explicitly rather than computing it.
 * @param mask Final skeletonized mask file.
 * @param k1 Use k1 from surface (not with --curv-nonmaxsup).
 * @param curv_nonmaxsup Use curvature H computed from surface with non-max suppression (not with --k1).
 * @param gyrus Skeletonize the crowns of the gyri.
 * @param sulcus Skeletonize the fundi of the sulci.
 * @param outdir Directory where all outputs will be saved.
 * @param sphere Sphere path, only needed for nonmax suppression.
 * @param pointset Point set of the skeleton (PointSet.json).
 * @param label Surface label of the skeleton (label file path).
 * @param nbrsize Neighborhood size for 2nd FF (default is 2).
 * @param threshold Used to create initial mask that will be skeletonized (typically about 0.3).
 * @param cluster Cluster the thresholded input and keep the largest nkeep clusters.
 * @param fwhm Smooth surface values by this FWHM.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSkeletonizeOutputs`).
 */
function mris_skeletonize(
    surface: string,
    surfvals: string,
    mask: string,
    k1: boolean = false,
    curv_nonmaxsup: boolean = false,
    gyrus: boolean = false,
    sulcus: boolean = false,
    outdir: string | null = null,
    sphere: string | null = null,
    pointset: string | null = null,
    label: string | null = null,
    nbrsize: number | null = null,
    threshold: number | null = null,
    cluster: number | null = null,
    fwhm: number | null = null,
    runner: Runner | null = null,
): MrisSkeletonizeOutputs {
    const params = mris_skeletonize_params(surface, surfvals, mask, k1, curv_nonmaxsup, gyrus, sulcus, outdir, sphere, pointset, label, nbrsize, threshold, cluster, fwhm)
    return mris_skeletonize_execute(params, runner);
}


export {
      MRIS_SKELETONIZE_METADATA,
      MrisSkeletonizeOutputs,
      MrisSkeletonizeParameters,
      mris_skeletonize,
      mris_skeletonize_execute,
      mris_skeletonize_params,
};
