// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_COMPUTE_LAYER_INTENSITIES_METADATA: Metadata = {
    id: "2a0eb3ef93dc3fd21876edfb530230812af2e366.boutiques",
    name: "mris_compute_layer_intensities",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisComputeLayerIntensitiesParameters {
    "@type"?: "freesurfer/mris_compute_layer_intensities";
    "input_intensity_volume": InputPathType;
    "layer_volume_fractions_file": InputPathType;
    "input_surface": InputPathType;
    "output_overlay": string;
}
type MrisComputeLayerIntensitiesParametersTagged = Required<Pick<MrisComputeLayerIntensitiesParameters, '@type'>> & MrisComputeLayerIntensitiesParameters;


/**
 * Output object returned when calling `MrisComputeLayerIntensitiesParameters(...)`.
 *
 * @interface
 */
interface MrisComputeLayerIntensitiesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output overlay file generated by the tool.
     */
    output_overlay_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_intensity_volume The input intensity volume file.
 * @param layer_volume_fractions_file The layer volume fractions file.
 * @param input_surface The input surface file for layer intensity computation.
 * @param output_overlay The output file where the overlay will be saved.
 *
 * @returns Parameter dictionary
 */
function mris_compute_layer_intensities_params(
    input_intensity_volume: InputPathType,
    layer_volume_fractions_file: InputPathType,
    input_surface: InputPathType,
    output_overlay: string,
): MrisComputeLayerIntensitiesParametersTagged {
    const params = {
        "@type": "freesurfer/mris_compute_layer_intensities" as const,
        "input_intensity_volume": input_intensity_volume,
        "layer_volume_fractions_file": layer_volume_fractions_file,
        "input_surface": input_surface,
        "output_overlay": output_overlay,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_compute_layer_intensities_cargs(
    params: MrisComputeLayerIntensitiesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_compute_layer_intensities");
    cargs.push(execution.inputFile((params["input_intensity_volume"] ?? null)));
    cargs.push(execution.inputFile((params["layer_volume_fractions_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push((params["output_overlay"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_compute_layer_intensities_outputs(
    params: MrisComputeLayerIntensitiesParameters,
    execution: Execution,
): MrisComputeLayerIntensitiesOutputs {
    const ret: MrisComputeLayerIntensitiesOutputs = {
        root: execution.outputFile("."),
        output_overlay_file: execution.outputFile([(params["output_overlay"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_compute_layer_intensities
 *
 * Computes intensity overlays for specified cortical layers based on input volumes and surfaces.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisComputeLayerIntensitiesOutputs`).
 */
function mris_compute_layer_intensities_execute(
    params: MrisComputeLayerIntensitiesParameters,
    runner: Runner | null = null,
): MrisComputeLayerIntensitiesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_COMPUTE_LAYER_INTENSITIES_METADATA);
    params = execution.params(params)
    const cargs = mris_compute_layer_intensities_cargs(params, execution)
    const ret = mris_compute_layer_intensities_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_compute_layer_intensities
 *
 * Computes intensity overlays for specified cortical layers based on input volumes and surfaces.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_intensity_volume The input intensity volume file.
 * @param layer_volume_fractions_file The layer volume fractions file.
 * @param input_surface The input surface file for layer intensity computation.
 * @param output_overlay The output file where the overlay will be saved.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisComputeLayerIntensitiesOutputs`).
 */
function mris_compute_layer_intensities(
    input_intensity_volume: InputPathType,
    layer_volume_fractions_file: InputPathType,
    input_surface: InputPathType,
    output_overlay: string,
    runner: Runner | null = null,
): MrisComputeLayerIntensitiesOutputs {
    const params = mris_compute_layer_intensities_params(input_intensity_volume, layer_volume_fractions_file, input_surface, output_overlay)
    return mris_compute_layer_intensities_execute(params, runner);
}


export {
      MRIS_COMPUTE_LAYER_INTENSITIES_METADATA,
      MrisComputeLayerIntensitiesOutputs,
      mris_compute_layer_intensities,
      mris_compute_layer_intensities_execute,
      mris_compute_layer_intensities_params,
};
