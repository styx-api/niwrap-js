// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MULTISCALE_STATS_METADATA: Metadata = {
    id: "10e7d73f783449c7aa286eab95584fefc27b016a.boutiques",
    name: "mris_multiscale_stats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMultiscaleStatsParameters {
    "@type": "freesurfer.mris_multiscale_stats";
    "output_subject": string;
    "hemi": string;
    "surf": InputPathType;
    "curv": InputPathType;
    "class1_subjects": Array<string>;
    "class2_subjects": Array<string>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_multiscale_stats": mris_multiscale_stats_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_multiscale_stats(...)`.
 *
 * @interface
 */
interface MrisMultiscaleStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_subject The output subject identifier.
 * @param hemi Specify which hemisphere to use.
 * @param surf A spherical surface file suitable for computing geodesics.
 * @param curv The curvature file to be processed.
 * @param class1_subjects List of subjects from one class.
 * @param class2_subjects List of subjects from another class.
 *
 * @returns Parameter dictionary
 */
function mris_multiscale_stats_params(
    output_subject: string,
    hemi: string,
    surf: InputPathType,
    curv: InputPathType,
    class1_subjects: Array<string>,
    class2_subjects: Array<string>,
): MrisMultiscaleStatsParameters {
    const params = {
        "@type": "freesurfer.mris_multiscale_stats" as const,
        "output_subject": output_subject,
        "hemi": hemi,
        "surf": surf,
        "curv": curv,
        "class1_subjects": class1_subjects,
        "class2_subjects": class2_subjects,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_multiscale_stats_cargs(
    params: MrisMultiscaleStatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_multiscale_stats");
    cargs.push(
        "-o",
        (params["output_subject"] ?? null)
    );
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["surf"] ?? null)));
    cargs.push(execution.inputFile((params["curv"] ?? null)));
    cargs.push(...(params["class1_subjects"] ?? null));
    cargs.push(...(params["class2_subjects"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_multiscale_stats_outputs(
    params: MrisMultiscaleStatsParameters,
    execution: Execution,
): MrisMultiscaleStatsOutputs {
    const ret: MrisMultiscaleStatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_multiscale_stats
 *
 * Compute the autocorrelation function of a curvature file using multiscale statistical techniques.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMultiscaleStatsOutputs`).
 */
function mris_multiscale_stats_execute(
    params: MrisMultiscaleStatsParameters,
    runner: Runner | null = null,
): MrisMultiscaleStatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MULTISCALE_STATS_METADATA);
    params = execution.params(params)
    const cargs = mris_multiscale_stats_cargs(params, execution)
    const ret = mris_multiscale_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_multiscale_stats
 *
 * Compute the autocorrelation function of a curvature file using multiscale statistical techniques.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param output_subject The output subject identifier.
 * @param hemi Specify which hemisphere to use.
 * @param surf A spherical surface file suitable for computing geodesics.
 * @param curv The curvature file to be processed.
 * @param class1_subjects List of subjects from one class.
 * @param class2_subjects List of subjects from another class.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMultiscaleStatsOutputs`).
 */
function mris_multiscale_stats(
    output_subject: string,
    hemi: string,
    surf: InputPathType,
    curv: InputPathType,
    class1_subjects: Array<string>,
    class2_subjects: Array<string>,
    runner: Runner | null = null,
): MrisMultiscaleStatsOutputs {
    const params = mris_multiscale_stats_params(output_subject, hemi, surf, curv, class1_subjects, class2_subjects)
    return mris_multiscale_stats_execute(params, runner);
}


export {
      MRIS_MULTISCALE_STATS_METADATA,
      MrisMultiscaleStatsOutputs,
      MrisMultiscaleStatsParameters,
      mris_multiscale_stats,
      mris_multiscale_stats_execute,
      mris_multiscale_stats_params,
};
