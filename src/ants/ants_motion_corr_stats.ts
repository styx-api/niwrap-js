// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_MOTION_CORR_STATS_METADATA: Metadata = {
    id: "0bffc9f3dc5b519482bb987ee079e3de5b2e5ec9.boutiques",
    name: "antsMotionCorrStats",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsMotionCorrStatsParameters {
    "__STYXTYPE__": "antsMotionCorrStats";
    "mask": InputPathType;
    "moco_params": InputPathType;
    "output": string;
    "transform_index"?: number | null | undefined;
    "framewise"?: 0 | 1 | null | undefined;
    "spatial_map": boolean;
    "timeseries_displacement": boolean;
    "help"?: 0 | 1 | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "antsMotionCorrStats": ants_motion_corr_stats_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "antsMotionCorrStats": ants_motion_corr_stats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_motion_corr_stats(...)`.
 *
 * @interface
 */
interface AntsMotionCorrStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The corrected motion parameters.csv file.
     */
    corrected_csv: OutputPathType;
}


function ants_motion_corr_stats_params(
    mask: InputPathType,
    moco_params: InputPathType,
    output: string,
    transform_index: number | null = null,
    framewise: 0 | 1 | null = null,
    spatial_map: boolean = false,
    timeseries_displacement: boolean = false,
    help: 0 | 1 | null = null,
): AntsMotionCorrStatsParameters {
    /**
     * Build parameters.
    
     * @param mask Mask image - compute displacements within mask.
     * @param moco_params Motion correction parameters from antsMotionCorr.
     * @param output Specify the output file.
     * @param transform_index Specify the index for a 3D transform to output.
     * @param framewise Do framewise summary stats.
     * @param spatial_map Output image of displacement magnitude.
     * @param timeseries_displacement Output 4d time-series image of displacement magnitude.
     * @param help Print the help menu. Short version with -h.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "antsMotionCorrStats" as const,
        "mask": mask,
        "moco_params": moco_params,
        "output": output,
        "spatial_map": spatial_map,
        "timeseries_displacement": timeseries_displacement,
    };
    if (transform_index !== null) {
        params["transform_index"] = transform_index;
    }
    if (framewise !== null) {
        params["framewise"] = framewise;
    }
    if (help !== null) {
        params["help"] = help;
    }
    return params;
}


function ants_motion_corr_stats_cargs(
    params: AntsMotionCorrStatsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("antsMotionCorrStats");
    cargs.push(
        "-x",
        execution.inputFile((params["mask"] ?? null))
    );
    cargs.push(
        "-m",
        execution.inputFile((params["moco_params"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    if ((params["transform_index"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["transform_index"] ?? null))
        );
    }
    if ((params["framewise"] ?? null) !== null) {
        cargs.push(
            "-f",
            String((params["framewise"] ?? null))
        );
    }
    if ((params["spatial_map"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["timeseries_displacement"] ?? null)) {
        cargs.push("-d");
    }
    if ((params["help"] ?? null) !== null) {
        cargs.push(
            "--help",
            String((params["help"] ?? null))
        );
    }
    return cargs;
}


function ants_motion_corr_stats_outputs(
    params: AntsMotionCorrStatsParameters,
    execution: Execution,
): AntsMotionCorrStatsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AntsMotionCorrStatsOutputs = {
        root: execution.outputFile("."),
        corrected_csv: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function ants_motion_corr_stats_execute(
    params: AntsMotionCorrStatsParameters,
    execution: Execution,
): AntsMotionCorrStatsOutputs {
    /**
     * Create summary measures of the parameters that are output by antsMotionCorr. Currently only works for linear transforms. Outputs the mean and max displacements for the voxels within a provided mask, at each time point. By default the displacements are relative to the reference space, but the framewise option may be used to provide displacements between consecutive time points.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AntsMotionCorrStatsOutputs`).
     */
    params = execution.params(params)
    const cargs = ants_motion_corr_stats_cargs(params, execution)
    const ret = ants_motion_corr_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ants_motion_corr_stats(
    mask: InputPathType,
    moco_params: InputPathType,
    output: string,
    transform_index: number | null = null,
    framewise: 0 | 1 | null = null,
    spatial_map: boolean = false,
    timeseries_displacement: boolean = false,
    help: 0 | 1 | null = null,
    runner: Runner | null = null,
): AntsMotionCorrStatsOutputs {
    /**
     * Create summary measures of the parameters that are output by antsMotionCorr. Currently only works for linear transforms. Outputs the mean and max displacements for the voxels within a provided mask, at each time point. By default the displacements are relative to the reference space, but the framewise option may be used to provide displacements between consecutive time points.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param mask Mask image - compute displacements within mask.
     * @param moco_params Motion correction parameters from antsMotionCorr.
     * @param output Specify the output file.
     * @param transform_index Specify the index for a 3D transform to output.
     * @param framewise Do framewise summary stats.
     * @param spatial_map Output image of displacement magnitude.
     * @param timeseries_displacement Output 4d time-series image of displacement magnitude.
     * @param help Print the help menu. Short version with -h.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AntsMotionCorrStatsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_MOTION_CORR_STATS_METADATA);
    const params = ants_motion_corr_stats_params(mask, moco_params, output, transform_index, framewise, spatial_map, timeseries_displacement, help)
    return ants_motion_corr_stats_execute(params, execution);
}


export {
      ANTS_MOTION_CORR_STATS_METADATA,
      AntsMotionCorrStatsOutputs,
      AntsMotionCorrStatsParameters,
      ants_motion_corr_stats,
      ants_motion_corr_stats_params,
};
