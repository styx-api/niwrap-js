// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FIELDSIGN_METADATA: Metadata = {
    id: "96cb7d7d10b6cfdeeed7603268ba12e5c46ce56b.boutiques",
    name: "mri_fieldsign",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFieldsignParameters {
    "@type": "freesurfer.mri_fieldsign";
    "fieldsign_file": string;
    "eccen_values": Array<number>;
    "polar_values": Array<number>;
    "subject": string;
    "hemisphere": string;
    "patch_file"?: string | null | undefined;
    "occip_flag": boolean;
    "sphere_flag": boolean;
    "fwhm"?: number | null | undefined;
    "nsmooth"?: number | null | undefined;
    "reverse_flag": boolean;
    "old_flag": boolean;
    "eccen_rotation"?: number | null | undefined;
    "polar_rotation"?: number | null | undefined;
    "eccen_output"?: number | null | undefined;
    "polar_output"?: number | null | undefined;
    "eccen_sfa_file"?: InputPathType | null | undefined;
    "polar_sfa_file"?: InputPathType | null | undefined;
    "sfa_dir"?: string | null | undefined;
    "sfa_true_flag": boolean;
    "debug_flag": boolean;
    "checkopts_flag": boolean;
    "help_flag": boolean;
    "version_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_fieldsign": mri_fieldsign_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_fieldsign(...)`.
 *
 * @interface
 */
interface MriFieldsignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fieldsign_file Output field sign file
 * @param eccen_values Eccentricity values (real and imaginary)
 * @param polar_values Polar values (real and imaginary)
 * @param subject Subject identifier
 * @param hemisphere Hemisphere to process
 * @param patch_file Patch file, without hemi
 * @param occip_flag Use occipital patch (patchfile = occip.patch.flat)
 * @param sphere_flag Use spherical surface instead of patch
 * @param fwhm Full-width at half-maximum (mm)
 * @param nsmooth Number of smoothing steps
 * @param reverse_flag Reverse sign
 * @param old_flag Use old FS estimation code
 * @param eccen_rotation Rotate eccentricity by rotangle degrees
 * @param polar_rotation Rotate polar by rotangle degrees
 * @param eccen_output Output eccentricity angle
 * @param polar_output Output polar angle
 * @param eccen_sfa_file Eccentricity self-frequency average file
 * @param polar_sfa_file Polar self-frequency average file
 * @param sfa_dir SFA directory
 * @param sfa_true_flag Use true real and imaginary (affects small smoothing)
 * @param debug_flag Turn on debugging
 * @param checkopts_flag Check options and exit
 * @param help_flag Display help information
 * @param version_flag Print version and exit
 *
 * @returns Parameter dictionary
 */
function mri_fieldsign_params(
    fieldsign_file: string,
    eccen_values: Array<number>,
    polar_values: Array<number>,
    subject: string,
    hemisphere: string,
    patch_file: string | null = null,
    occip_flag: boolean = false,
    sphere_flag: boolean = false,
    fwhm: number | null = null,
    nsmooth: number | null = null,
    reverse_flag: boolean = false,
    old_flag: boolean = false,
    eccen_rotation: number | null = null,
    polar_rotation: number | null = null,
    eccen_output: number | null = null,
    polar_output: number | null = null,
    eccen_sfa_file: InputPathType | null = null,
    polar_sfa_file: InputPathType | null = null,
    sfa_dir: string | null = null,
    sfa_true_flag: boolean = false,
    debug_flag: boolean = false,
    checkopts_flag: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
): MriFieldsignParameters {
    const params = {
        "@type": "freesurfer.mri_fieldsign" as const,
        "fieldsign_file": fieldsign_file,
        "eccen_values": eccen_values,
        "polar_values": polar_values,
        "subject": subject,
        "hemisphere": hemisphere,
        "occip_flag": occip_flag,
        "sphere_flag": sphere_flag,
        "reverse_flag": reverse_flag,
        "old_flag": old_flag,
        "sfa_true_flag": sfa_true_flag,
        "debug_flag": debug_flag,
        "checkopts_flag": checkopts_flag,
        "help_flag": help_flag,
        "version_flag": version_flag,
    };
    if (patch_file !== null) {
        params["patch_file"] = patch_file;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (nsmooth !== null) {
        params["nsmooth"] = nsmooth;
    }
    if (eccen_rotation !== null) {
        params["eccen_rotation"] = eccen_rotation;
    }
    if (polar_rotation !== null) {
        params["polar_rotation"] = polar_rotation;
    }
    if (eccen_output !== null) {
        params["eccen_output"] = eccen_output;
    }
    if (polar_output !== null) {
        params["polar_output"] = polar_output;
    }
    if (eccen_sfa_file !== null) {
        params["eccen_sfa_file"] = eccen_sfa_file;
    }
    if (polar_sfa_file !== null) {
        params["polar_sfa_file"] = polar_sfa_file;
    }
    if (sfa_dir !== null) {
        params["sfa_dir"] = sfa_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_fieldsign_cargs(
    params: MriFieldsignParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_fieldsign");
    cargs.push(
        "--fs",
        (params["fieldsign_file"] ?? null)
    );
    cargs.push(
        "--eccen",
        ...(params["eccen_values"] ?? null).map(String)
    );
    cargs.push(
        "--polar",
        ...(params["polar_values"] ?? null).map(String)
    );
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemisphere"] ?? null)
    );
    if ((params["patch_file"] ?? null) !== null) {
        cargs.push(
            "--patch",
            (params["patch_file"] ?? null)
        );
    }
    if ((params["occip_flag"] ?? null)) {
        cargs.push("--occip");
    }
    if ((params["sphere_flag"] ?? null)) {
        cargs.push("--sphere");
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["nsmooth"] ?? null) !== null) {
        cargs.push(
            "--nsmooth",
            String((params["nsmooth"] ?? null))
        );
    }
    if ((params["reverse_flag"] ?? null)) {
        cargs.push("--rev");
    }
    if ((params["old_flag"] ?? null)) {
        cargs.push("--old");
    }
    if ((params["eccen_rotation"] ?? null) !== null) {
        cargs.push(
            "--eccen-rot",
            String((params["eccen_rotation"] ?? null))
        );
    }
    if ((params["polar_rotation"] ?? null) !== null) {
        cargs.push(
            "--polar-rot",
            String((params["polar_rotation"] ?? null))
        );
    }
    if ((params["eccen_output"] ?? null) !== null) {
        cargs.push(
            "--eccen-out",
            String((params["eccen_output"] ?? null))
        );
    }
    if ((params["polar_output"] ?? null) !== null) {
        cargs.push(
            "--polar-out",
            String((params["polar_output"] ?? null))
        );
    }
    if ((params["eccen_sfa_file"] ?? null) !== null) {
        cargs.push(
            "--eccen-sfa",
            execution.inputFile((params["eccen_sfa_file"] ?? null))
        );
    }
    if ((params["polar_sfa_file"] ?? null) !== null) {
        cargs.push(
            "--polar-sfa",
            execution.inputFile((params["polar_sfa_file"] ?? null))
        );
    }
    if ((params["sfa_dir"] ?? null) !== null) {
        cargs.push(
            "--sfa",
            (params["sfa_dir"] ?? null)
        );
    }
    if ((params["sfa_true_flag"] ?? null)) {
        cargs.push("--sfa-true");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts_flag"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_fieldsign_outputs(
    params: MriFieldsignParameters,
    execution: Execution,
): MriFieldsignOutputs {
    const ret: MriFieldsignOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_fieldsign
 *
 * Field Sign Mapping Tool from FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFieldsignOutputs`).
 */
function mri_fieldsign_execute(
    params: MriFieldsignParameters,
    runner: Runner | null = null,
): MriFieldsignOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FIELDSIGN_METADATA);
    params = execution.params(params)
    const cargs = mri_fieldsign_cargs(params, execution)
    const ret = mri_fieldsign_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_fieldsign
 *
 * Field Sign Mapping Tool from FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param fieldsign_file Output field sign file
 * @param eccen_values Eccentricity values (real and imaginary)
 * @param polar_values Polar values (real and imaginary)
 * @param subject Subject identifier
 * @param hemisphere Hemisphere to process
 * @param patch_file Patch file, without hemi
 * @param occip_flag Use occipital patch (patchfile = occip.patch.flat)
 * @param sphere_flag Use spherical surface instead of patch
 * @param fwhm Full-width at half-maximum (mm)
 * @param nsmooth Number of smoothing steps
 * @param reverse_flag Reverse sign
 * @param old_flag Use old FS estimation code
 * @param eccen_rotation Rotate eccentricity by rotangle degrees
 * @param polar_rotation Rotate polar by rotangle degrees
 * @param eccen_output Output eccentricity angle
 * @param polar_output Output polar angle
 * @param eccen_sfa_file Eccentricity self-frequency average file
 * @param polar_sfa_file Polar self-frequency average file
 * @param sfa_dir SFA directory
 * @param sfa_true_flag Use true real and imaginary (affects small smoothing)
 * @param debug_flag Turn on debugging
 * @param checkopts_flag Check options and exit
 * @param help_flag Display help information
 * @param version_flag Print version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFieldsignOutputs`).
 */
function mri_fieldsign(
    fieldsign_file: string,
    eccen_values: Array<number>,
    polar_values: Array<number>,
    subject: string,
    hemisphere: string,
    patch_file: string | null = null,
    occip_flag: boolean = false,
    sphere_flag: boolean = false,
    fwhm: number | null = null,
    nsmooth: number | null = null,
    reverse_flag: boolean = false,
    old_flag: boolean = false,
    eccen_rotation: number | null = null,
    polar_rotation: number | null = null,
    eccen_output: number | null = null,
    polar_output: number | null = null,
    eccen_sfa_file: InputPathType | null = null,
    polar_sfa_file: InputPathType | null = null,
    sfa_dir: string | null = null,
    sfa_true_flag: boolean = false,
    debug_flag: boolean = false,
    checkopts_flag: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
    runner: Runner | null = null,
): MriFieldsignOutputs {
    const params = mri_fieldsign_params(fieldsign_file, eccen_values, polar_values, subject, hemisphere, patch_file, occip_flag, sphere_flag, fwhm, nsmooth, reverse_flag, old_flag, eccen_rotation, polar_rotation, eccen_output, polar_output, eccen_sfa_file, polar_sfa_file, sfa_dir, sfa_true_flag, debug_flag, checkopts_flag, help_flag, version_flag)
    return mri_fieldsign_execute(params, runner);
}


export {
      MRI_FIELDSIGN_METADATA,
      MriFieldsignOutputs,
      MriFieldsignParameters,
      mri_fieldsign,
      mri_fieldsign_execute,
      mri_fieldsign_params,
};
