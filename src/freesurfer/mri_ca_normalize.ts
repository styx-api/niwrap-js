// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CA_NORMALIZE_METADATA: Metadata = {
    id: "822a8e4a63033035b2c8f0da0858f4e52e7344bd.boutiques",
    name: "mri_ca_normalize",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCaNormalizeParameters {
    "__STYXTYPE__": "mri_ca_normalize";
    "input_brain_volumes": Array<InputPathType>;
    "atlas_file": InputPathType;
    "xform_file": InputPathType;
    "output_volumes": Array<string>;
    "seg_file"?: InputPathType | null | undefined;
    "sigma_value"?: number | null | undefined;
    "fsamples_file"?: InputPathType | null | undefined;
    "dilate_iters"?: number | null | undefined;
    "nsamples_file"?: InputPathType | null | undefined;
    "mask_vol"?: InputPathType | null | undefined;
    "control_points_file"?: InputPathType | null | undefined;
    "fonly_file"?: InputPathType | null | undefined;
    "diag_file"?: InputPathType | null | undefined;
    "debug_voxel_coords"?: Array<number> | null | undefined;
    "debug_node_coords"?: Array<number> | null | undefined;
    "tr_value"?: number | null | undefined;
    "te_value"?: number | null | undefined;
    "alpha_value"?: number | null | undefined;
    "example_mri_vol"?: InputPathType | null | undefined;
    "extra_norm_pctl"?: number | null | undefined;
    "prior_threshold"?: number | null | undefined;
    "n_regions"?: number | null | undefined;
    "verbose_value"?: number | null | undefined;
    "top_percent"?: number | null | undefined;
    "novar_flag": boolean;
    "renorm_file"?: InputPathType | null | undefined;
    "flash_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_ca_normalize": mri_ca_normalize_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_ca_normalize": mri_ca_normalize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_ca_normalize(...)`.
 *
 * @interface
 */
interface MriCaNormalizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Normalized output volume in mgh format.
     */
    normalized_output: OutputPathType;
}


function mri_ca_normalize_params(
    input_brain_volumes: Array<InputPathType>,
    atlas_file: InputPathType,
    xform_file: InputPathType,
    output_volumes: Array<string>,
    seg_file: InputPathType | null = null,
    sigma_value: number | null = null,
    fsamples_file: InputPathType | null = null,
    dilate_iters: number | null = null,
    nsamples_file: InputPathType | null = null,
    mask_vol: InputPathType | null = null,
    control_points_file: InputPathType | null = null,
    fonly_file: InputPathType | null = null,
    diag_file: InputPathType | null = null,
    debug_voxel_coords: Array<number> | null = null,
    debug_node_coords: Array<number> | null = null,
    tr_value: number | null = null,
    te_value: number | null = null,
    alpha_value: number | null = null,
    example_mri_vol: InputPathType | null = null,
    extra_norm_pctl: number | null = null,
    prior_threshold: number | null = null,
    n_regions: number | null = null,
    verbose_value: number | null = null,
    top_percent: number | null = null,
    novar_flag: boolean = false,
    renorm_file: InputPathType | null = null,
    flash_flag: boolean = false,
): MriCaNormalizeParameters {
    /**
     * Build parameters.
    
     * @param input_brain_volumes Input brain volume(s). Can specify multiple inputs.
     * @param atlas_file Atlas file in GCA format.
     * @param xform_file Transform file in LTA format.
     * @param output_volumes Output volume(s) in either mgh or mgz format. Can specify multiple outputs.
     * @param seg_file Aseg file to help normalization.
     * @param sigma_value Smoothing sigma for bias field if control points specified (default=4).
     * @param fsamples_file Write control points to filename.
     * @param dilate_iters Dilate the brain mask niters times before masking.
     * @param nsamples_file Write transformed normalization control points to filename.
     * @param mask_vol Use mri_vol to mask input.
     * @param control_points_file Define control points from filename.
     * @param fonly_file Only use control points from filename.
     * @param diag_file Write to log file.
     * @param debug_voxel_coords Debug voxel. Needs x, y, z coordinates.
     * @param debug_node_coords Debug node. Needs x, y, z coordinates.
     * @param tr_value Set TR in msec.
     * @param te_value Set TE in msec.
     * @param alpha_value Set alpha in radians.
     * @param example_mri_vol Use T1 (mri_vol) and segmentation as example.
     * @param extra_norm_pctl Use 1+pct and 1-pct to widen the range of T1 values.
     * @param prior_threshold Use prior threshold t (default=.6).
     * @param n_regions Use n regions/struct for normalization.
     * @param verbose_value Used for debugging and diagnostics.
     * @param top_percent Use top p percent (default=.25) white matter points as control points.
     * @param novar_flag Do not use variance estimates.
     * @param renorm_file Renormalize using predicted intensity values in mri_vol.
     * @param flash_flag Use FLASH forward model to predict intensity values.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_ca_normalize" as const,
        "input_brain_volumes": input_brain_volumes,
        "atlas_file": atlas_file,
        "xform_file": xform_file,
        "output_volumes": output_volumes,
        "novar_flag": novar_flag,
        "flash_flag": flash_flag,
    };
    if (seg_file !== null) {
        params["seg_file"] = seg_file;
    }
    if (sigma_value !== null) {
        params["sigma_value"] = sigma_value;
    }
    if (fsamples_file !== null) {
        params["fsamples_file"] = fsamples_file;
    }
    if (dilate_iters !== null) {
        params["dilate_iters"] = dilate_iters;
    }
    if (nsamples_file !== null) {
        params["nsamples_file"] = nsamples_file;
    }
    if (mask_vol !== null) {
        params["mask_vol"] = mask_vol;
    }
    if (control_points_file !== null) {
        params["control_points_file"] = control_points_file;
    }
    if (fonly_file !== null) {
        params["fonly_file"] = fonly_file;
    }
    if (diag_file !== null) {
        params["diag_file"] = diag_file;
    }
    if (debug_voxel_coords !== null) {
        params["debug_voxel_coords"] = debug_voxel_coords;
    }
    if (debug_node_coords !== null) {
        params["debug_node_coords"] = debug_node_coords;
    }
    if (tr_value !== null) {
        params["tr_value"] = tr_value;
    }
    if (te_value !== null) {
        params["te_value"] = te_value;
    }
    if (alpha_value !== null) {
        params["alpha_value"] = alpha_value;
    }
    if (example_mri_vol !== null) {
        params["example_mri_vol"] = example_mri_vol;
    }
    if (extra_norm_pctl !== null) {
        params["extra_norm_pctl"] = extra_norm_pctl;
    }
    if (prior_threshold !== null) {
        params["prior_threshold"] = prior_threshold;
    }
    if (n_regions !== null) {
        params["n_regions"] = n_regions;
    }
    if (verbose_value !== null) {
        params["verbose_value"] = verbose_value;
    }
    if (top_percent !== null) {
        params["top_percent"] = top_percent;
    }
    if (renorm_file !== null) {
        params["renorm_file"] = renorm_file;
    }
    return params;
}


function mri_ca_normalize_cargs(
    params: MriCaNormalizeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_ca_normalize");
    cargs.push(...(params["input_brain_volumes"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(execution.inputFile((params["atlas_file"] ?? null)));
    cargs.push(execution.inputFile((params["xform_file"] ?? null)));
    cargs.push(...(params["output_volumes"] ?? null));
    if ((params["seg_file"] ?? null) !== null) {
        cargs.push(
            "-seg",
            execution.inputFile((params["seg_file"] ?? null))
        );
    }
    if ((params["sigma_value"] ?? null) !== null) {
        cargs.push(
            "-sigma",
            String((params["sigma_value"] ?? null))
        );
    }
    if ((params["fsamples_file"] ?? null) !== null) {
        cargs.push(
            "-fsamples",
            execution.inputFile((params["fsamples_file"] ?? null))
        );
    }
    if ((params["dilate_iters"] ?? null) !== null) {
        cargs.push(
            "-dilate",
            String((params["dilate_iters"] ?? null))
        );
    }
    if ((params["nsamples_file"] ?? null) !== null) {
        cargs.push(
            "-nsamples",
            execution.inputFile((params["nsamples_file"] ?? null))
        );
    }
    if ((params["mask_vol"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_vol"] ?? null))
        );
    }
    if ((params["control_points_file"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["control_points_file"] ?? null))
        );
    }
    if ((params["fonly_file"] ?? null) !== null) {
        cargs.push(
            "-fonly",
            execution.inputFile((params["fonly_file"] ?? null))
        );
    }
    if ((params["diag_file"] ?? null) !== null) {
        cargs.push(
            "-diag",
            execution.inputFile((params["diag_file"] ?? null))
        );
    }
    if ((params["debug_voxel_coords"] ?? null) !== null) {
        cargs.push(
            "-debug_voxel",
            ...(params["debug_voxel_coords"] ?? null).map(String)
        );
    }
    if ((params["debug_node_coords"] ?? null) !== null) {
        cargs.push(
            "-debug_node",
            ...(params["debug_node_coords"] ?? null).map(String)
        );
    }
    if ((params["tr_value"] ?? null) !== null) {
        cargs.push(
            "-tr",
            String((params["tr_value"] ?? null))
        );
    }
    if ((params["te_value"] ?? null) !== null) {
        cargs.push(
            "-te",
            String((params["te_value"] ?? null))
        );
    }
    if ((params["alpha_value"] ?? null) !== null) {
        cargs.push(
            "-alpha",
            String((params["alpha_value"] ?? null))
        );
    }
    if ((params["example_mri_vol"] ?? null) !== null) {
        cargs.push(
            "-example",
            execution.inputFile((params["example_mri_vol"] ?? null))
        );
    }
    if ((params["extra_norm_pctl"] ?? null) !== null) {
        cargs.push(
            "-extra_norm",
            String((params["extra_norm_pctl"] ?? null))
        );
    }
    if ((params["prior_threshold"] ?? null) !== null) {
        cargs.push(
            "-prior",
            String((params["prior_threshold"] ?? null))
        );
    }
    if ((params["n_regions"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["n_regions"] ?? null))
        );
    }
    if ((params["verbose_value"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["verbose_value"] ?? null))
        );
    }
    if ((params["top_percent"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["top_percent"] ?? null))
        );
    }
    if ((params["novar_flag"] ?? null)) {
        cargs.push("-novar");
    }
    if ((params["renorm_file"] ?? null) !== null) {
        cargs.push(
            "-renorm",
            execution.inputFile((params["renorm_file"] ?? null))
        );
    }
    if ((params["flash_flag"] ?? null)) {
        cargs.push("-flash");
    }
    return cargs;
}


function mri_ca_normalize_outputs(
    params: MriCaNormalizeParameters,
    execution: Execution,
): MriCaNormalizeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriCaNormalizeOutputs = {
        root: execution.outputFile("."),
        normalized_output: execution.outputFile(["output.mgh"].join('')),
    };
    return ret;
}


function mri_ca_normalize_execute(
    params: MriCaNormalizeParameters,
    execution: Execution,
): MriCaNormalizeOutputs {
    /**
     * This program creates a normalized volume using the brain volume and an input gca file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriCaNormalizeOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_ca_normalize_cargs(params, execution)
    const ret = mri_ca_normalize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_ca_normalize(
    input_brain_volumes: Array<InputPathType>,
    atlas_file: InputPathType,
    xform_file: InputPathType,
    output_volumes: Array<string>,
    seg_file: InputPathType | null = null,
    sigma_value: number | null = null,
    fsamples_file: InputPathType | null = null,
    dilate_iters: number | null = null,
    nsamples_file: InputPathType | null = null,
    mask_vol: InputPathType | null = null,
    control_points_file: InputPathType | null = null,
    fonly_file: InputPathType | null = null,
    diag_file: InputPathType | null = null,
    debug_voxel_coords: Array<number> | null = null,
    debug_node_coords: Array<number> | null = null,
    tr_value: number | null = null,
    te_value: number | null = null,
    alpha_value: number | null = null,
    example_mri_vol: InputPathType | null = null,
    extra_norm_pctl: number | null = null,
    prior_threshold: number | null = null,
    n_regions: number | null = null,
    verbose_value: number | null = null,
    top_percent: number | null = null,
    novar_flag: boolean = false,
    renorm_file: InputPathType | null = null,
    flash_flag: boolean = false,
    runner: Runner | null = null,
): MriCaNormalizeOutputs {
    /**
     * This program creates a normalized volume using the brain volume and an input gca file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_brain_volumes Input brain volume(s). Can specify multiple inputs.
     * @param atlas_file Atlas file in GCA format.
     * @param xform_file Transform file in LTA format.
     * @param output_volumes Output volume(s) in either mgh or mgz format. Can specify multiple outputs.
     * @param seg_file Aseg file to help normalization.
     * @param sigma_value Smoothing sigma for bias field if control points specified (default=4).
     * @param fsamples_file Write control points to filename.
     * @param dilate_iters Dilate the brain mask niters times before masking.
     * @param nsamples_file Write transformed normalization control points to filename.
     * @param mask_vol Use mri_vol to mask input.
     * @param control_points_file Define control points from filename.
     * @param fonly_file Only use control points from filename.
     * @param diag_file Write to log file.
     * @param debug_voxel_coords Debug voxel. Needs x, y, z coordinates.
     * @param debug_node_coords Debug node. Needs x, y, z coordinates.
     * @param tr_value Set TR in msec.
     * @param te_value Set TE in msec.
     * @param alpha_value Set alpha in radians.
     * @param example_mri_vol Use T1 (mri_vol) and segmentation as example.
     * @param extra_norm_pctl Use 1+pct and 1-pct to widen the range of T1 values.
     * @param prior_threshold Use prior threshold t (default=.6).
     * @param n_regions Use n regions/struct for normalization.
     * @param verbose_value Used for debugging and diagnostics.
     * @param top_percent Use top p percent (default=.25) white matter points as control points.
     * @param novar_flag Do not use variance estimates.
     * @param renorm_file Renormalize using predicted intensity values in mri_vol.
     * @param flash_flag Use FLASH forward model to predict intensity values.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriCaNormalizeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CA_NORMALIZE_METADATA);
    const params = mri_ca_normalize_params(input_brain_volumes, atlas_file, xform_file, output_volumes, seg_file, sigma_value, fsamples_file, dilate_iters, nsamples_file, mask_vol, control_points_file, fonly_file, diag_file, debug_voxel_coords, debug_node_coords, tr_value, te_value, alpha_value, example_mri_vol, extra_norm_pctl, prior_threshold, n_regions, verbose_value, top_percent, novar_flag, renorm_file, flash_flag)
    return mri_ca_normalize_execute(params, execution);
}


export {
      MRI_CA_NORMALIZE_METADATA,
      MriCaNormalizeOutputs,
      MriCaNormalizeParameters,
      mri_ca_normalize,
      mri_ca_normalize_params,
};
