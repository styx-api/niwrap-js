// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICEANIMATE_METADATA: Metadata = {
    id: "05268b7eca1ce9802cba56c1e5171a4d5003db1c.boutiques",
    name: "sliceanimate",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SliceanimateParameters {
    "__STYXTYPE__": "sliceanimate";
    "output_file": string;
    "input_files": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sliceanimate": sliceanimate_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "sliceanimate": sliceanimate_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sliceanimate(...)`.
 *
 * @interface
 */
interface SliceanimateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated animated GIF
     */
    animated_gif: OutputPathType;
}


function sliceanimate_params(
    output_file: string,
    input_files: Array<InputPathType>,
): SliceanimateParameters {
    /**
     * Build parameters.
    
     * @param output_file Output animated GIF file
     * @param input_files Input image files for animation
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sliceanimate" as const,
        "output_file": output_file,
        "input_files": input_files,
    };
    return params;
}


function sliceanimate_cargs(
    params: SliceanimateParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sliceanimate");
    cargs.push((params["output_file"] ?? null));
    cargs.push("--");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function sliceanimate_outputs(
    params: SliceanimateParameters,
    execution: Execution,
): SliceanimateOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SliceanimateOutputs = {
        root: execution.outputFile("."),
        animated_gif: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function sliceanimate_execute(
    params: SliceanimateParameters,
    execution: Execution,
): SliceanimateOutputs {
    /**
     * A tool for animating slices of an image using whirlgif.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SliceanimateOutputs`).
     */
    params = execution.params(params)
    const cargs = sliceanimate_cargs(params, execution)
    const ret = sliceanimate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sliceanimate(
    output_file: string,
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): SliceanimateOutputs {
    /**
     * A tool for animating slices of an image using whirlgif.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param output_file Output animated GIF file
     * @param input_files Input image files for animation
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SliceanimateOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICEANIMATE_METADATA);
    const params = sliceanimate_params(output_file, input_files)
    return sliceanimate_execute(params, execution);
}


export {
      SLICEANIMATE_METADATA,
      SliceanimateOutputs,
      SliceanimateParameters,
      sliceanimate,
      sliceanimate_params,
};
