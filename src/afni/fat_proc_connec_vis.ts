// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_CONNEC_VIS_METADATA: Metadata = {
    id: "a58923b78acab8becd209cc6970f62f6b79c8032.boutiques",
    name: "fat_proc_connec_vis",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcConnecVisParameters {
    "@type": "afni.fat_proc_connec_vis";
    "in_rois": string;
    "prefix": string;
    "prefix_file"?: string | null | undefined;
    "tsmoo_kpb"?: number | null | undefined;
    "tsmoo_niter"?: number | null | undefined;
    "iso_opt"?: string | null | undefined;
    "trackid_no_or": boolean;
    "output_tcat": boolean;
    "output_tstat": boolean;
    "wdir"?: string | null | undefined;
    "no_clean": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fat_proc_connec_vis": fat_proc_connec_vis_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fat_proc_connec_vis": fat_proc_connec_vis_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_proc_connec_vis(...)`.
 *
 * @interface
 */
interface FatProcConnecVisOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Command text file output
     */
    cmd_txt: OutputPathType;
    /**
     * Concatenated ROI masks multibrick file from the -output_tcat flag
     */
    tcat_file: OutputPathType;
    /**
     * Single brick file from 3dTstat operation on the tcat dataset, produced by the -output_tstat flag
     */
    tstat_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_rois List of separate files, each with a single ROI volume mask; can include wildcards, etc. to specify the list
 * @param prefix Directory to contain the output files: *cmd.txt and surface files such as *.gii and *.niml.dset; the namebase of files within this directory will be the default for the program, 'wmc'. The value PPP can contain parts of a path in it.
 * @param prefix_file Prefix for the output files: *cmd.txt and surface files such as *.gii and *.niml.dset; can include path steps; and can make one level of a new directory. For example, if FFF were 'A/B', then the program could make a new directory called 'A' if it didn't exist already and populate it with individual files having the same prefix 'B'.
 * @param tsmoo_kpb 'KPB' parameter in IsoSurface program; default value is 0.01.
 * @param tsmoo_niter 'NITER' parameter in IsoSurface program; default value is 6.
 * @param iso_opt Input one of the 'iso* options' from IsoSurface program, such as 'isorois+dsets', 'mergerois', etc. Quotations around the entry may be needed, especially if something like the '-mergerois [LAB_OUT]' route is being followed. Default: isorois+dsets
 * @param trackid_no_or Use this option to have the program recognize the naming convention of 3dTrackID output and to ignore the OR-logic ROIs, including only the AND-logic (AKA pairwise) connections
 * @param output_tcat Flag to output the multibrick file of concatenated ROI masks; note that the [0]th brick will be all zeros (it is just a placeholder). So, if there are N ROI maps concatenated, there will be N+1 bricks in the output dataset, which has the name PPP_tcat.nii.gz.
 * @param output_tstat Flag to output the single brick file from the 3dTstat operation on the tcat dataset. If there were N ROI maps concatenated, then the largest value should be N. The output file's name will be PPP_tstat.nii.gz.
 * @param wdir Working directory prefix. The format is '__WDIR_connec_vis_PPP', where PPP is the input prefix.
 * @param no_clean Optional switch to NOT remove the working directory (default is to remove the working directory)
 *
 * @returns Parameter dictionary
 */
function fat_proc_connec_vis_params(
    in_rois: string,
    prefix: string,
    prefix_file: string | null = null,
    tsmoo_kpb: number | null = null,
    tsmoo_niter: number | null = null,
    iso_opt: string | null = null,
    trackid_no_or: boolean = false,
    output_tcat: boolean = false,
    output_tstat: boolean = false,
    wdir: string | null = null,
    no_clean: boolean = false,
): FatProcConnecVisParameters {
    const params = {
        "@type": "afni.fat_proc_connec_vis" as const,
        "in_rois": in_rois,
        "prefix": prefix,
        "trackid_no_or": trackid_no_or,
        "output_tcat": output_tcat,
        "output_tstat": output_tstat,
        "no_clean": no_clean,
    };
    if (prefix_file !== null) {
        params["prefix_file"] = prefix_file;
    }
    if (tsmoo_kpb !== null) {
        params["tsmoo_kpb"] = tsmoo_kpb;
    }
    if (tsmoo_niter !== null) {
        params["tsmoo_niter"] = tsmoo_niter;
    }
    if (iso_opt !== null) {
        params["iso_opt"] = iso_opt;
    }
    if (wdir !== null) {
        params["wdir"] = wdir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_proc_connec_vis_cargs(
    params: FatProcConnecVisParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_proc_connec_vis");
    cargs.push((params["in_rois"] ?? null));
    cargs.push((params["prefix"] ?? null));
    if ((params["prefix_file"] ?? null) !== null) {
        cargs.push(
            "-prefix_file",
            (params["prefix_file"] ?? null)
        );
    }
    if ((params["tsmoo_kpb"] ?? null) !== null) {
        cargs.push(
            "-tsmoo_kpb",
            String((params["tsmoo_kpb"] ?? null))
        );
    }
    if ((params["tsmoo_niter"] ?? null) !== null) {
        cargs.push(
            "-tsmoo_niter",
            String((params["tsmoo_niter"] ?? null))
        );
    }
    if ((params["iso_opt"] ?? null) !== null) {
        cargs.push(
            "-iso_opt",
            (params["iso_opt"] ?? null)
        );
    }
    if ((params["trackid_no_or"] ?? null)) {
        cargs.push("-trackid_no_or");
    }
    if ((params["output_tcat"] ?? null)) {
        cargs.push("-output_tcat");
    }
    if ((params["output_tstat"] ?? null)) {
        cargs.push("-output_tstat");
    }
    if ((params["wdir"] ?? null) !== null) {
        cargs.push(
            "-wdir",
            (params["wdir"] ?? null)
        );
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_proc_connec_vis_outputs(
    params: FatProcConnecVisParameters,
    execution: Execution,
): FatProcConnecVisOutputs {
    const ret: FatProcConnecVisOutputs = {
        root: execution.outputFile("."),
        cmd_txt: execution.outputFile([(params["prefix"] ?? null), "_cmd.txt"].join('')),
        tcat_file: execution.outputFile([(params["prefix"] ?? null), "_tcat.nii.gz"].join('')),
        tstat_file: execution.outputFile([(params["prefix"] ?? null), "_tstat.nii.gz"].join('')),
    };
    return ret;
}


/**
 * fat_proc_connec_vis
 *
 * This program is for visualizing the volumetric output of tracking, mainly for the '-dump_rois ...' from 3dTrackID. It creates surface-ized views of the separate white matter connection maps (WMCs) which can be viewed simultaneously in 3D with SUMA.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcConnecVisOutputs`).
 */
function fat_proc_connec_vis_execute(
    params: FatProcConnecVisParameters,
    runner: Runner | null = null,
): FatProcConnecVisOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_CONNEC_VIS_METADATA);
    params = execution.params(params)
    const cargs = fat_proc_connec_vis_cargs(params, execution)
    const ret = fat_proc_connec_vis_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fat_proc_connec_vis
 *
 * This program is for visualizing the volumetric output of tracking, mainly for the '-dump_rois ...' from 3dTrackID. It creates surface-ized views of the separate white matter connection maps (WMCs) which can be viewed simultaneously in 3D with SUMA.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_rois List of separate files, each with a single ROI volume mask; can include wildcards, etc. to specify the list
 * @param prefix Directory to contain the output files: *cmd.txt and surface files such as *.gii and *.niml.dset; the namebase of files within this directory will be the default for the program, 'wmc'. The value PPP can contain parts of a path in it.
 * @param prefix_file Prefix for the output files: *cmd.txt and surface files such as *.gii and *.niml.dset; can include path steps; and can make one level of a new directory. For example, if FFF were 'A/B', then the program could make a new directory called 'A' if it didn't exist already and populate it with individual files having the same prefix 'B'.
 * @param tsmoo_kpb 'KPB' parameter in IsoSurface program; default value is 0.01.
 * @param tsmoo_niter 'NITER' parameter in IsoSurface program; default value is 6.
 * @param iso_opt Input one of the 'iso* options' from IsoSurface program, such as 'isorois+dsets', 'mergerois', etc. Quotations around the entry may be needed, especially if something like the '-mergerois [LAB_OUT]' route is being followed. Default: isorois+dsets
 * @param trackid_no_or Use this option to have the program recognize the naming convention of 3dTrackID output and to ignore the OR-logic ROIs, including only the AND-logic (AKA pairwise) connections
 * @param output_tcat Flag to output the multibrick file of concatenated ROI masks; note that the [0]th brick will be all zeros (it is just a placeholder). So, if there are N ROI maps concatenated, there will be N+1 bricks in the output dataset, which has the name PPP_tcat.nii.gz.
 * @param output_tstat Flag to output the single brick file from the 3dTstat operation on the tcat dataset. If there were N ROI maps concatenated, then the largest value should be N. The output file's name will be PPP_tstat.nii.gz.
 * @param wdir Working directory prefix. The format is '__WDIR_connec_vis_PPP', where PPP is the input prefix.
 * @param no_clean Optional switch to NOT remove the working directory (default is to remove the working directory)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcConnecVisOutputs`).
 */
function fat_proc_connec_vis(
    in_rois: string,
    prefix: string,
    prefix_file: string | null = null,
    tsmoo_kpb: number | null = null,
    tsmoo_niter: number | null = null,
    iso_opt: string | null = null,
    trackid_no_or: boolean = false,
    output_tcat: boolean = false,
    output_tstat: boolean = false,
    wdir: string | null = null,
    no_clean: boolean = false,
    runner: Runner | null = null,
): FatProcConnecVisOutputs {
    const params = fat_proc_connec_vis_params(in_rois, prefix, prefix_file, tsmoo_kpb, tsmoo_niter, iso_opt, trackid_no_or, output_tcat, output_tstat, wdir, no_clean)
    return fat_proc_connec_vis_execute(params, runner);
}


export {
      FAT_PROC_CONNEC_VIS_METADATA,
      FatProcConnecVisOutputs,
      FatProcConnecVisParameters,
      fat_proc_connec_vis,
      fat_proc_connec_vis_execute,
      fat_proc_connec_vis_params,
};
