// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SPAT_NORM_METADATA: Metadata = {
    id: "5e25808dc97cedae2e2d6f6da2b00952c1719962.boutiques",
    name: "3dSpatNorm",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSpatNormParameters {
    "@type": "afni.3dSpatNorm";
    "dataset": InputPathType;
    "prefix"?: string | null | undefined;
    "orig_space": boolean;
    "verbose": boolean;
    "monkey": boolean;
    "marmot": boolean;
    "rat": boolean;
    "human": boolean;
    "bottom_cuts"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dSpatNorm": v_3d_spat_norm_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dSpatNorm": v_3d_spat_norm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_spat_norm(...)`.
 *
 * @interface
 */
interface V3dSpatNormOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset (HEAD file)
     */
    out_head: OutputPathType | null;
    /**
     * Output dataset (BRIK file)
     */
    out_brik: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dataset Input dataset
 * @param prefix Write output dataset using 'ppp' for the prefix
 * @param orig_space Write output dataset using the same grid as dataset
 * @param verbose Write out progress reports
 * @param monkey Monkey business
 * @param marmot Marmoset head
 * @param rat Rat head
 * @param human Bone head (default)
 * @param bottom_cuts Make approximate cuts at the bottom to shave non-brain areas. CUTFLAGS is a string of characters indicating which sides to cut: 'A' for anterior, 'P' for posterior, 'R' for right, 'L' for left. Example: -bottom_cuts APLR
 *
 * @returns Parameter dictionary
 */
function v_3d_spat_norm_params(
    dataset: InputPathType,
    prefix: string | null = null,
    orig_space: boolean = false,
    verbose: boolean = false,
    monkey: boolean = false,
    marmot: boolean = false,
    rat: boolean = false,
    human: boolean = false,
    bottom_cuts: string | null = null,
): V3dSpatNormParameters {
    const params = {
        "@type": "afni.3dSpatNorm" as const,
        "dataset": dataset,
        "orig_space": orig_space,
        "verbose": verbose,
        "monkey": monkey,
        "marmot": marmot,
        "rat": rat,
        "human": human,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (bottom_cuts !== null) {
        params["bottom_cuts"] = bottom_cuts;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_spat_norm_cargs(
    params: V3dSpatNormParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dSpatNorm");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["orig_space"] ?? null)) {
        cargs.push("-orig_space");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["monkey"] ?? null)) {
        cargs.push("-monkey");
    }
    if ((params["marmot"] ?? null)) {
        cargs.push("-marmost");
    }
    if ((params["rat"] ?? null)) {
        cargs.push("-rat");
    }
    if ((params["human"] ?? null)) {
        cargs.push("-human");
    }
    if ((params["bottom_cuts"] ?? null) !== null) {
        cargs.push(
            "-bottom_cuts",
            (params["bottom_cuts"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_spat_norm_outputs(
    params: V3dSpatNormParameters,
    execution: Execution,
): V3dSpatNormOutputs {
    const ret: V3dSpatNormOutputs = {
        root: execution.outputFile("."),
        out_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        out_brik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * 3dSpatNorm
 *
 * An obsolete tool for spatial normalization.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSpatNormOutputs`).
 */
function v_3d_spat_norm_execute(
    params: V3dSpatNormParameters,
    runner: Runner | null = null,
): V3dSpatNormOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SPAT_NORM_METADATA);
    params = execution.params(params)
    const cargs = v_3d_spat_norm_cargs(params, execution)
    const ret = v_3d_spat_norm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dSpatNorm
 *
 * An obsolete tool for spatial normalization.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input dataset
 * @param prefix Write output dataset using 'ppp' for the prefix
 * @param orig_space Write output dataset using the same grid as dataset
 * @param verbose Write out progress reports
 * @param monkey Monkey business
 * @param marmot Marmoset head
 * @param rat Rat head
 * @param human Bone head (default)
 * @param bottom_cuts Make approximate cuts at the bottom to shave non-brain areas. CUTFLAGS is a string of characters indicating which sides to cut: 'A' for anterior, 'P' for posterior, 'R' for right, 'L' for left. Example: -bottom_cuts APLR
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSpatNormOutputs`).
 */
function v_3d_spat_norm(
    dataset: InputPathType,
    prefix: string | null = null,
    orig_space: boolean = false,
    verbose: boolean = false,
    monkey: boolean = false,
    marmot: boolean = false,
    rat: boolean = false,
    human: boolean = false,
    bottom_cuts: string | null = null,
    runner: Runner | null = null,
): V3dSpatNormOutputs {
    const params = v_3d_spat_norm_params(dataset, prefix, orig_space, verbose, monkey, marmot, rat, human, bottom_cuts)
    return v_3d_spat_norm_execute(params, runner);
}


export {
      V3dSpatNormOutputs,
      V3dSpatNormParameters,
      V_3D_SPAT_NORM_METADATA,
      v_3d_spat_norm,
      v_3d_spat_norm_execute,
      v_3d_spat_norm_params,
};
