// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UBER_PROC_PY_METADATA: Metadata = {
    id: "810164b90b5470d8a01aa9ff880068dc2dfc8cc0.boutiques",
    name: "uber_proc.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface UberProcPyParameters {
    "__STYXTYPE__": "uber_proc.py";
    "results_dir"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "uber_proc.py": uber_proc_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `uber_proc_py(...)`.
 *
 * @interface
 */
interface UberProcPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function uber_proc_py_params(
    results_dir: string | null = null,
): UberProcPyParameters {
    /**
     * Build parameters.
    
     * @param results_dir Directory where results will be placed. Default is a new 'uber_results' directory in the current working directory.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "uber_proc.py" as const,
    };
    if (results_dir !== null) {
        params["results_dir"] = results_dir;
    }
    return params;
}


function uber_proc_py_cargs(
    params: UberProcPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("uber_proc.py");
    if ((params["results_dir"] ?? null) !== null) {
        cargs.push((params["results_dir"] ?? null));
    }
    return cargs;
}


function uber_proc_py_outputs(
    params: UberProcPyParameters,
    execution: Execution,
): UberProcPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: UberProcPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function uber_proc_py_execute(
    params: UberProcPyParameters,
    execution: Execution,
): UberProcPyOutputs {
    /**
     * Uber processing tool - work in progress.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `UberProcPyOutputs`).
     */
    params = execution.params(params)
    const cargs = uber_proc_py_cargs(params, execution)
    const ret = uber_proc_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function uber_proc_py(
    results_dir: string | null = null,
    runner: Runner | null = null,
): UberProcPyOutputs {
    /**
     * Uber processing tool - work in progress.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param results_dir Directory where results will be placed. Default is a new 'uber_results' directory in the current working directory.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `UberProcPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UBER_PROC_PY_METADATA);
    const params = uber_proc_py_params(results_dir)
    return uber_proc_py_execute(params, execution);
}


export {
      UBER_PROC_PY_METADATA,
      UberProcPyOutputs,
      UberProcPyParameters,
      uber_proc_py,
      uber_proc_py_params,
};
