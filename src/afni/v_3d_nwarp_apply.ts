// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NWARP_APPLY_METADATA: Metadata = {
    id: "482fdd065e612d0faece31b8bc78fd21f004b766.boutiques",
    name: "3dNwarpApply",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNwarpApplyParameters {
    "@type": "afni.3dNwarpApply";
    "nwarp": string;
    "iwarp": boolean;
    "source": string;
    "master"?: string | null | undefined;
    "newgrid"?: string | null | undefined;
    "dxyz"?: string | null | undefined;
    "interp"?: string | null | undefined;
    "ainterp"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "suffix"?: string | null | undefined;
    "short": boolean;
    "wprefix"?: string | null | undefined;
    "quiet": boolean;
    "verb": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dNwarpApply": v_3d_nwarp_apply_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dNwarpApply": v_3d_nwarp_apply_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_nwarp_apply(...)`.
 *
 * @interface
 */
interface V3dNwarpApplyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Warped output dataset
     */
    warped_output: OutputPathType | null;
    /**
     * Warp dataset generated during application
     */
    generated_warp: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param nwarp The name of the 3D warp dataset. Multiple warps can be catenated.
 * @param source The name of the source dataset to be warped. Multiple datasets can be supplied.
 * @param iwarp Invert the warp specified in '-nwarp'.
 * @param master The name of the master dataset which defines the output grid.
 * @param newgrid The new grid spacing (cubical voxels, in mm).
 * @param dxyz Specify a different grid spacing (cubical voxels, in mm).
 * @param interp The interpolation mode ('NN', 'linear', 'cubic', 'quintic', 'wsinc5').
 * @param ainterp Specify a different interpolation mode for the data than the warp.
 * @param prefix The name of the new output dataset. Multiple names can be supplied if more than one source dataset is input.
 * @param suffix Change the default suffix '_Nwarp' to a user-defined suffix.
 * @param short Write output dataset using 16-bit short integers rather than the usual 32-bit floats.
 * @param wprefix Save every warp generated in the process to a separate dataset.
 * @param quiet Don't be verbose.
 * @param verb Be extra verbose.
 *
 * @returns Parameter dictionary
 */
function v_3d_nwarp_apply_params(
    nwarp: string,
    source: string,
    iwarp: boolean = false,
    master: string | null = null,
    newgrid: string | null = null,
    dxyz: string | null = null,
    interp: string | null = null,
    ainterp: string | null = null,
    prefix: string | null = null,
    suffix: string | null = null,
    short: boolean = false,
    wprefix: string | null = null,
    quiet: boolean = false,
    verb: boolean = false,
): V3dNwarpApplyParameters {
    const params = {
        "@type": "afni.3dNwarpApply" as const,
        "nwarp": nwarp,
        "iwarp": iwarp,
        "source": source,
        "short": short,
        "quiet": quiet,
        "verb": verb,
    };
    if (master !== null) {
        params["master"] = master;
    }
    if (newgrid !== null) {
        params["newgrid"] = newgrid;
    }
    if (dxyz !== null) {
        params["dxyz"] = dxyz;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (ainterp !== null) {
        params["ainterp"] = ainterp;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    if (wprefix !== null) {
        params["wprefix"] = wprefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_nwarp_apply_cargs(
    params: V3dNwarpApplyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dNwarpApply");
    cargs.push(
        "-nwarp",
        (params["nwarp"] ?? null)
    );
    if ((params["iwarp"] ?? null)) {
        cargs.push("-iwarp");
    }
    cargs.push(
        "-source",
        (params["source"] ?? null)
    );
    if ((params["master"] ?? null) !== null) {
        cargs.push(
            "-master",
            (params["master"] ?? null)
        );
    }
    if ((params["newgrid"] ?? null) !== null) {
        cargs.push(
            "-newgrid",
            (params["newgrid"] ?? null)
        );
    }
    if ((params["dxyz"] ?? null) !== null) {
        cargs.push(
            "-dxyz",
            (params["dxyz"] ?? null)
        );
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "-interp",
            (params["interp"] ?? null)
        );
    }
    if ((params["ainterp"] ?? null) !== null) {
        cargs.push(
            "-ainterp",
            (params["ainterp"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-suffix",
            (params["suffix"] ?? null)
        );
    }
    if ((params["short"] ?? null)) {
        cargs.push("-short");
    }
    if ((params["wprefix"] ?? null) !== null) {
        cargs.push(
            "-wprefix",
            (params["wprefix"] ?? null)
        );
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["verb"] ?? null)) {
        cargs.push("-verb");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_nwarp_apply_outputs(
    params: V3dNwarpApplyParameters,
    execution: Execution,
): V3dNwarpApplyOutputs {
    const ret: V3dNwarpApplyOutputs = {
        root: execution.outputFile("."),
        warped_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_", (params["source"] ?? null), "_warped.nii.gz"].join('')) : null,
        generated_warp: ((params["wprefix"] ?? null) !== null) ? execution.outputFile([(params["wprefix"] ?? null), "_warp_????.nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * 3dNwarpApply
 *
 * Program to apply a nonlinear 3D warp saved from 3dQwarp (or 3dNwarpCat, etc.) to a 3D dataset, to produce a warped version of the source dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpApplyOutputs`).
 */
function v_3d_nwarp_apply_execute(
    params: V3dNwarpApplyParameters,
    runner: Runner | null = null,
): V3dNwarpApplyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NWARP_APPLY_METADATA);
    params = execution.params(params)
    const cargs = v_3d_nwarp_apply_cargs(params, execution)
    const ret = v_3d_nwarp_apply_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dNwarpApply
 *
 * Program to apply a nonlinear 3D warp saved from 3dQwarp (or 3dNwarpCat, etc.) to a 3D dataset, to produce a warped version of the source dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param nwarp The name of the 3D warp dataset. Multiple warps can be catenated.
 * @param source The name of the source dataset to be warped. Multiple datasets can be supplied.
 * @param iwarp Invert the warp specified in '-nwarp'.
 * @param master The name of the master dataset which defines the output grid.
 * @param newgrid The new grid spacing (cubical voxels, in mm).
 * @param dxyz Specify a different grid spacing (cubical voxels, in mm).
 * @param interp The interpolation mode ('NN', 'linear', 'cubic', 'quintic', 'wsinc5').
 * @param ainterp Specify a different interpolation mode for the data than the warp.
 * @param prefix The name of the new output dataset. Multiple names can be supplied if more than one source dataset is input.
 * @param suffix Change the default suffix '_Nwarp' to a user-defined suffix.
 * @param short Write output dataset using 16-bit short integers rather than the usual 32-bit floats.
 * @param wprefix Save every warp generated in the process to a separate dataset.
 * @param quiet Don't be verbose.
 * @param verb Be extra verbose.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpApplyOutputs`).
 */
function v_3d_nwarp_apply(
    nwarp: string,
    source: string,
    iwarp: boolean = false,
    master: string | null = null,
    newgrid: string | null = null,
    dxyz: string | null = null,
    interp: string | null = null,
    ainterp: string | null = null,
    prefix: string | null = null,
    suffix: string | null = null,
    short: boolean = false,
    wprefix: string | null = null,
    quiet: boolean = false,
    verb: boolean = false,
    runner: Runner | null = null,
): V3dNwarpApplyOutputs {
    const params = v_3d_nwarp_apply_params(nwarp, source, iwarp, master, newgrid, dxyz, interp, ainterp, prefix, suffix, short, wprefix, quiet, verb)
    return v_3d_nwarp_apply_execute(params, runner);
}


export {
      V3dNwarpApplyOutputs,
      V3dNwarpApplyParameters,
      V_3D_NWARP_APPLY_METADATA,
      v_3d_nwarp_apply,
      v_3d_nwarp_apply_execute,
      v_3d_nwarp_apply_params,
};
