// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TRAC_PATHS_METADATA: Metadata = {
    id: "f085abb25cd93831e33301f753fc93e1f37fab3b.boutiques",
    name: "trac-paths",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TracPathsParameters {
    "@type": "freesurfer.trac-paths";
    "dmrirc_file": InputPathType;
    "log_file"?: string | null | undefined;
    "no_log": boolean;
    "cmd_file"?: string | null | undefined;
    "no_cmd": boolean;
    "no_isrunning": boolean;
    "umask"?: string | null | undefined;
    "group_id"?: string | null | undefined;
    "allow_core_dump": boolean;
    "debug": boolean;
    "dontrun": boolean;
    "version": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.trac-paths": trac_paths_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `trac_paths(...)`.
 *
 * @interface
 */
interface TracPathsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dmrirc_file dmrirc file (see dmrirc.example)
 * @param log_file Log file, default is trac-all.log in the same directory as dmrirc
 * @param no_log Do not save a log file
 * @param cmd_file Cmd file, default is trac-all.cmd in the same directory as dmrirc
 * @param no_cmd Do not save a cmd file
 * @param no_isrunning Do not check whether this subject is currently being processed
 * @param umask Set Unix file permission mask (default 002)
 * @param group_id Check that current group is alpha groupid
 * @param allow_core_dump Set coredump limit to unlimited
 * @param debug Generate much more output
 * @param dontrun Do everything but execute each command
 * @param version Print version of this script and exit
 * @param help Print full contents of help
 *
 * @returns Parameter dictionary
 */
function trac_paths_params(
    dmrirc_file: InputPathType,
    log_file: string | null = null,
    no_log: boolean = false,
    cmd_file: string | null = null,
    no_cmd: boolean = false,
    no_isrunning: boolean = false,
    umask: string | null = null,
    group_id: string | null = null,
    allow_core_dump: boolean = false,
    debug: boolean = false,
    dontrun: boolean = false,
    version: boolean = false,
    help: boolean = false,
): TracPathsParameters {
    const params = {
        "@type": "freesurfer.trac-paths" as const,
        "dmrirc_file": dmrirc_file,
        "no_log": no_log,
        "no_cmd": no_cmd,
        "no_isrunning": no_isrunning,
        "allow_core_dump": allow_core_dump,
        "debug": debug,
        "dontrun": dontrun,
        "version": version,
        "help": help,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (cmd_file !== null) {
        params["cmd_file"] = cmd_file;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    if (group_id !== null) {
        params["group_id"] = group_id;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function trac_paths_cargs(
    params: TracPathsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("trac-paths");
    cargs.push(
        "-c",
        execution.inputFile((params["dmrirc_file"] ?? null))
    );
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["no_log"] ?? null)) {
        cargs.push("-nolog");
    }
    if ((params["cmd_file"] ?? null) !== null) {
        cargs.push(
            "-cmd",
            (params["cmd_file"] ?? null)
        );
    }
    if ((params["no_cmd"] ?? null)) {
        cargs.push("-nocmd");
    }
    if ((params["no_isrunning"] ?? null)) {
        cargs.push("-no-isrunning");
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    if ((params["group_id"] ?? null) !== null) {
        cargs.push(
            "-grp",
            (params["group_id"] ?? null)
        );
    }
    if ((params["allow_core_dump"] ?? null)) {
        cargs.push("-allowcoredump");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["dontrun"] ?? null)) {
        cargs.push("-dontrun");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function trac_paths_outputs(
    params: TracPathsParameters,
    execution: Execution,
): TracPathsOutputs {
    const ret: TracPathsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Tractography for a single subject.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TracPathsOutputs`).
 */
function trac_paths_execute(
    params: TracPathsParameters,
    runner: Runner | null = null,
): TracPathsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TRAC_PATHS_METADATA);
    params = execution.params(params)
    const cargs = trac_paths_cargs(params, execution)
    const ret = trac_paths_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tractography for a single subject.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param dmrirc_file dmrirc file (see dmrirc.example)
 * @param log_file Log file, default is trac-all.log in the same directory as dmrirc
 * @param no_log Do not save a log file
 * @param cmd_file Cmd file, default is trac-all.cmd in the same directory as dmrirc
 * @param no_cmd Do not save a cmd file
 * @param no_isrunning Do not check whether this subject is currently being processed
 * @param umask Set Unix file permission mask (default 002)
 * @param group_id Check that current group is alpha groupid
 * @param allow_core_dump Set coredump limit to unlimited
 * @param debug Generate much more output
 * @param dontrun Do everything but execute each command
 * @param version Print version of this script and exit
 * @param help Print full contents of help
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TracPathsOutputs`).
 */
function trac_paths(
    dmrirc_file: InputPathType,
    log_file: string | null = null,
    no_log: boolean = false,
    cmd_file: string | null = null,
    no_cmd: boolean = false,
    no_isrunning: boolean = false,
    umask: string | null = null,
    group_id: string | null = null,
    allow_core_dump: boolean = false,
    debug: boolean = false,
    dontrun: boolean = false,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): TracPathsOutputs {
    const params = trac_paths_params(dmrirc_file, log_file, no_log, cmd_file, no_cmd, no_isrunning, umask, group_id, allow_core_dump, debug, dontrun, version, help)
    return trac_paths_execute(params, runner);
}


export {
      TRAC_PATHS_METADATA,
      TracPathsOutputs,
      TracPathsParameters,
      trac_paths,
      trac_paths_execute,
      trac_paths_params,
};
