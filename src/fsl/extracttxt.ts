// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EXTRACTTXT_METADATA: Metadata = {
    id: "4a3bed1da6981adbde061512034e1d96efc6c5c8.boutiques",
    name: "extracttxt",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ExtracttxtParameters {
    "__STYXTYPE__": "extracttxt";
    "search_word": string;
    "file": InputPathType;
    "num_trailing_lines"?: number | null | undefined;
    "relative_start"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "extracttxt": extracttxt_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "extracttxt": extracttxt_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `extracttxt(...)`.
 *
 * @interface
 */
interface ExtracttxtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Extracted text output file
     */
    output_file: OutputPathType;
}


function extracttxt_params(
    search_word: string,
    file: InputPathType,
    num_trailing_lines: number | null = 0,
    relative_start: number | null = 0,
): ExtracttxtParameters {
    /**
     * Build parameters.
    
     * @param search_word The word to search for in the file
     * @param file Path to the file where text is to be extracted
     * @param num_trailing_lines Number of trailing lines to include after the search word
     * @param relative_start Relative start position to begin the search
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "extracttxt" as const,
        "search_word": search_word,
        "file": file,
    };
    if (num_trailing_lines !== null) {
        params["num_trailing_lines"] = num_trailing_lines;
    }
    if (relative_start !== null) {
        params["relative_start"] = relative_start;
    }
    return params;
}


function extracttxt_cargs(
    params: ExtracttxtParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("extracttxt");
    cargs.push((params["search_word"] ?? null));
    cargs.push(execution.inputFile((params["file"] ?? null)));
    if ((params["num_trailing_lines"] ?? null) !== null) {
        cargs.push(String((params["num_trailing_lines"] ?? null)));
    }
    if ((params["relative_start"] ?? null) !== null) {
        cargs.push(String((params["relative_start"] ?? null)));
    }
    return cargs;
}


function extracttxt_outputs(
    params: ExtracttxtParameters,
    execution: Execution,
): ExtracttxtOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ExtracttxtOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["output.txt"].join('')),
    };
    return ret;
}


function extracttxt_execute(
    params: ExtracttxtParameters,
    execution: Execution,
): ExtracttxtOutputs {
    /**
     * Extracts text from a file based on a search word.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ExtracttxtOutputs`).
     */
    params = execution.params(params)
    const cargs = extracttxt_cargs(params, execution)
    const ret = extracttxt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function extracttxt(
    search_word: string,
    file: InputPathType,
    num_trailing_lines: number | null = 0,
    relative_start: number | null = 0,
    runner: Runner | null = null,
): ExtracttxtOutputs {
    /**
     * Extracts text from a file based on a search word.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param search_word The word to search for in the file
     * @param file Path to the file where text is to be extracted
     * @param num_trailing_lines Number of trailing lines to include after the search word
     * @param relative_start Relative start position to begin the search
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ExtracttxtOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EXTRACTTXT_METADATA);
    const params = extracttxt_params(search_word, file, num_trailing_lines, relative_start)
    return extracttxt_execute(params, execution);
}


export {
      EXTRACTTXT_METADATA,
      ExtracttxtOutputs,
      ExtracttxtParameters,
      extracttxt,
      extracttxt_params,
};
