// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__NOISY_SKULL_STRIP_METADATA: Metadata = {
    id: "e98b609b47a8089d945c591b91e1f67238f32e0b.boutiques",
    name: "@NoisySkullStrip",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VNoisySkullStripParameters {
    "@type": "afni.@NoisySkullStrip";
    "input_file": InputPathType;
    "keep_tmp": boolean;
    "3dskullstrip_opts"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@NoisySkullStrip": v__noisy_skull_strip_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@NoisySkullStrip": v__noisy_skull_strip_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__noisy_skull_strip(...)`.
 *
 * @interface
 */
interface VNoisySkullStripOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Skull stripped version of ANAT
     */
    anat_ns: OutputPathType;
    /**
     * Special mask output - air
     */
    anat_air: OutputPathType;
    /**
     * Special mask output - skull
     */
    anat_skl: OutputPathType;
    /**
     * Volume used to threshold 'air' out of the volume to be stripped
     */
    anat_lsp: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file The anatomical dataset
 * @param keep_tmp Do not erase temporary files at the end.
 * @param v_3dskullstrip_opts Anything following this option is passed to 3dSkullStrip
 *
 * @returns Parameter dictionary
 */
function v__noisy_skull_strip_params(
    input_file: InputPathType,
    keep_tmp: boolean = false,
    v_3dskullstrip_opts: string | null = null,
): VNoisySkullStripParameters {
    const params = {
        "@type": "afni.@NoisySkullStrip" as const,
        "input_file": input_file,
        "keep_tmp": keep_tmp,
    };
    if (v_3dskullstrip_opts !== null) {
        params["3dskullstrip_opts"] = v_3dskullstrip_opts;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__noisy_skull_strip_cargs(
    params: VNoisySkullStripParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@NoisySkullStrip");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["keep_tmp"] ?? null)) {
        cargs.push("-keep_tmp");
    }
    if ((params["3dskullstrip_opts"] ?? null) !== null) {
        cargs.push(
            "-3dSkullStrip_opts",
            (params["3dskullstrip_opts"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__noisy_skull_strip_outputs(
    params: VNoisySkullStripParameters,
    execution: Execution,
): VNoisySkullStripOutputs {
    const ret: VNoisySkullStripOutputs = {
        root: execution.outputFile("."),
        anat_ns: execution.outputFile([path.basename((params["input_file"] ?? null)), ".ns"].join('')),
        anat_air: execution.outputFile([path.basename((params["input_file"] ?? null)), ".air"].join('')),
        anat_skl: execution.outputFile([path.basename((params["input_file"] ?? null)), ".skl"].join('')),
        anat_lsp: execution.outputFile([path.basename((params["input_file"] ?? null)), ".lsp"].join('')),
    };
    return ret;
}


/**
 * @NoisySkullStrip
 *
 * Strips the skull of anatomical datasets with low SNR.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VNoisySkullStripOutputs`).
 */
function v__noisy_skull_strip_execute(
    params: VNoisySkullStripParameters,
    runner: Runner | null = null,
): VNoisySkullStripOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__NOISY_SKULL_STRIP_METADATA);
    params = execution.params(params)
    const cargs = v__noisy_skull_strip_cargs(params, execution)
    const ret = v__noisy_skull_strip_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @NoisySkullStrip
 *
 * Strips the skull of anatomical datasets with low SNR.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file The anatomical dataset
 * @param keep_tmp Do not erase temporary files at the end.
 * @param v_3dskullstrip_opts Anything following this option is passed to 3dSkullStrip
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VNoisySkullStripOutputs`).
 */
function v__noisy_skull_strip(
    input_file: InputPathType,
    keep_tmp: boolean = false,
    v_3dskullstrip_opts: string | null = null,
    runner: Runner | null = null,
): VNoisySkullStripOutputs {
    const params = v__noisy_skull_strip_params(input_file, keep_tmp, v_3dskullstrip_opts)
    return v__noisy_skull_strip_execute(params, runner);
}


export {
      VNoisySkullStripOutputs,
      VNoisySkullStripParameters,
      V__NOISY_SKULL_STRIP_METADATA,
      v__noisy_skull_strip,
      v__noisy_skull_strip_execute,
      v__noisy_skull_strip_params,
};
