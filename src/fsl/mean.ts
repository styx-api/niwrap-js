// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MEAN_METADATA: Metadata = {
    id: "46eff34bd1907238e1062f34a5b76074989dd865.boutiques",
    name: "mean",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MeanParameters {
    "@type": "fsl.mean";
    "datafile": InputPathType;
    "maskfile": InputPathType;
    "verbose_flag": boolean;
    "debug_level"?: number | null | undefined;
    "timing_flag": boolean;
    "log_dir"?: string | null | undefined;
    "forcedir_flag": boolean;
    "inference_tech"?: string | null | undefined;
    "num_jumps"?: number | null | undefined;
    "num_burnin"?: number | null | undefined;
    "num_sample_every"?: number | null | undefined;
    "num_update_proposalevery"?: number | null | undefined;
    "acceptance_rate"?: number | null | undefined;
    "seed"?: number | null | undefined;
    "error_precision"?: number | null | undefined;
    "noamp_flag": boolean;
    "prior_mean"?: number | null | undefined;
    "prior_std"?: number | null | undefined;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.mean": mean_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.mean": mean_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mean(...)`.
 *
 * @interface
 */
interface MeanOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output log of mean computation
     */
    output_log: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param datafile Regressor data file
 * @param maskfile Mask file
 * @param verbose_flag Switch on diagnostic messages
 * @param debug_level Set debug level
 * @param timing_flag Turn timing on
 * @param log_dir Log directory (default is logdir)
 * @param forcedir_flag Use the actual directory name given - i.e. don't add + to make a new directory
 * @param inference_tech Inference technique: mcmc or laplace (default is mcmc)
 * @param num_jumps Number of jumps to be made by MCMC (default is 5000)
 * @param num_burnin Number of jumps at start of MCMC to be discarded (default is 500)
 * @param num_sample_every Number of jumps for each sample (MCMC) (default is 1)
 * @param num_update_proposalevery Number of jumps for each update to the proposal density std (MCMC) (default is 40)
 * @param acceptance_rate Acceptance rate to aim for (MCMC) (default is 0.6)
 * @param seed Seed for pseudo random number generator
 * @param error_precision Value to fix error precision to (default is -1, which means error precision is not fixed)
 * @param noamp_flag Turn off Analytical Marginalisation of error Precision
 * @param prior_mean Prior mean
 * @param prior_std Prior standard deviation
 * @param help_flag Display help message
 *
 * @returns Parameter dictionary
 */
function mean_params(
    datafile: InputPathType,
    maskfile: InputPathType,
    verbose_flag: boolean = false,
    debug_level: number | null = null,
    timing_flag: boolean = false,
    log_dir: string | null = null,
    forcedir_flag: boolean = false,
    inference_tech: string | null = null,
    num_jumps: number | null = null,
    num_burnin: number | null = null,
    num_sample_every: number | null = null,
    num_update_proposalevery: number | null = null,
    acceptance_rate: number | null = null,
    seed: number | null = null,
    error_precision: number | null = null,
    noamp_flag: boolean = false,
    prior_mean: number | null = null,
    prior_std: number | null = null,
    help_flag: boolean = false,
): MeanParameters {
    const params = {
        "@type": "fsl.mean" as const,
        "datafile": datafile,
        "maskfile": maskfile,
        "verbose_flag": verbose_flag,
        "timing_flag": timing_flag,
        "forcedir_flag": forcedir_flag,
        "noamp_flag": noamp_flag,
        "help_flag": help_flag,
    };
    if (debug_level !== null) {
        params["debug_level"] = debug_level;
    }
    if (log_dir !== null) {
        params["log_dir"] = log_dir;
    }
    if (inference_tech !== null) {
        params["inference_tech"] = inference_tech;
    }
    if (num_jumps !== null) {
        params["num_jumps"] = num_jumps;
    }
    if (num_burnin !== null) {
        params["num_burnin"] = num_burnin;
    }
    if (num_sample_every !== null) {
        params["num_sample_every"] = num_sample_every;
    }
    if (num_update_proposalevery !== null) {
        params["num_update_proposalevery"] = num_update_proposalevery;
    }
    if (acceptance_rate !== null) {
        params["acceptance_rate"] = acceptance_rate;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (error_precision !== null) {
        params["error_precision"] = error_precision;
    }
    if (prior_mean !== null) {
        params["prior_mean"] = prior_mean;
    }
    if (prior_std !== null) {
        params["prior_std"] = prior_std;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mean_cargs(
    params: MeanParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mean");
    cargs.push(
        "--data",
        execution.inputFile((params["datafile"] ?? null))
    );
    cargs.push(
        "--mask",
        execution.inputFile((params["maskfile"] ?? null))
    );
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("--verbose");
    }
    if ((params["debug_level"] ?? null) !== null) {
        cargs.push(
            "--debug",
            String((params["debug_level"] ?? null))
        );
    }
    if ((params["timing_flag"] ?? null)) {
        cargs.push("--to");
    }
    if ((params["log_dir"] ?? null) !== null) {
        cargs.push(
            "--ld",
            (params["log_dir"] ?? null)
        );
    }
    if ((params["forcedir_flag"] ?? null)) {
        cargs.push("--forcedir");
    }
    if ((params["inference_tech"] ?? null) !== null) {
        cargs.push(
            "--inf",
            (params["inference_tech"] ?? null)
        );
    }
    if ((params["num_jumps"] ?? null) !== null) {
        cargs.push(
            "--nj",
            String((params["num_jumps"] ?? null))
        );
    }
    if ((params["num_burnin"] ?? null) !== null) {
        cargs.push(
            "--bi",
            String((params["num_burnin"] ?? null))
        );
    }
    if ((params["num_sample_every"] ?? null) !== null) {
        cargs.push(
            "--se",
            String((params["num_sample_every"] ?? null))
        );
    }
    if ((params["num_update_proposalevery"] ?? null) !== null) {
        cargs.push(
            "--upe",
            String((params["num_update_proposalevery"] ?? null))
        );
    }
    if ((params["acceptance_rate"] ?? null) !== null) {
        cargs.push(
            "--arate",
            String((params["acceptance_rate"] ?? null))
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["error_precision"] ?? null) !== null) {
        cargs.push(
            "--prec",
            String((params["error_precision"] ?? null))
        );
    }
    if ((params["noamp_flag"] ?? null)) {
        cargs.push("--noamp");
    }
    if ((params["prior_mean"] ?? null) !== null) {
        cargs.push(
            "--pm",
            String((params["prior_mean"] ?? null))
        );
    }
    if ((params["prior_std"] ?? null) !== null) {
        cargs.push(
            "--ps",
            String((params["prior_std"] ?? null))
        );
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mean_outputs(
    params: MeanParameters,
    execution: Execution,
): MeanOutputs {
    const ret: MeanOutputs = {
        root: execution.outputFile("."),
        output_log: execution.outputFile(["logdir/mean_output.txt"].join('')),
    };
    return ret;
}


/**
 * mean
 *
 * Diagnostic tool for analyzing and computing mean values for FSL data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MeanOutputs`).
 */
function mean_execute(
    params: MeanParameters,
    runner: Runner | null = null,
): MeanOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MEAN_METADATA);
    params = execution.params(params)
    const cargs = mean_cargs(params, execution)
    const ret = mean_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mean
 *
 * Diagnostic tool for analyzing and computing mean values for FSL data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param datafile Regressor data file
 * @param maskfile Mask file
 * @param verbose_flag Switch on diagnostic messages
 * @param debug_level Set debug level
 * @param timing_flag Turn timing on
 * @param log_dir Log directory (default is logdir)
 * @param forcedir_flag Use the actual directory name given - i.e. don't add + to make a new directory
 * @param inference_tech Inference technique: mcmc or laplace (default is mcmc)
 * @param num_jumps Number of jumps to be made by MCMC (default is 5000)
 * @param num_burnin Number of jumps at start of MCMC to be discarded (default is 500)
 * @param num_sample_every Number of jumps for each sample (MCMC) (default is 1)
 * @param num_update_proposalevery Number of jumps for each update to the proposal density std (MCMC) (default is 40)
 * @param acceptance_rate Acceptance rate to aim for (MCMC) (default is 0.6)
 * @param seed Seed for pseudo random number generator
 * @param error_precision Value to fix error precision to (default is -1, which means error precision is not fixed)
 * @param noamp_flag Turn off Analytical Marginalisation of error Precision
 * @param prior_mean Prior mean
 * @param prior_std Prior standard deviation
 * @param help_flag Display help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MeanOutputs`).
 */
function mean(
    datafile: InputPathType,
    maskfile: InputPathType,
    verbose_flag: boolean = false,
    debug_level: number | null = null,
    timing_flag: boolean = false,
    log_dir: string | null = null,
    forcedir_flag: boolean = false,
    inference_tech: string | null = null,
    num_jumps: number | null = null,
    num_burnin: number | null = null,
    num_sample_every: number | null = null,
    num_update_proposalevery: number | null = null,
    acceptance_rate: number | null = null,
    seed: number | null = null,
    error_precision: number | null = null,
    noamp_flag: boolean = false,
    prior_mean: number | null = null,
    prior_std: number | null = null,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MeanOutputs {
    const params = mean_params(datafile, maskfile, verbose_flag, debug_level, timing_flag, log_dir, forcedir_flag, inference_tech, num_jumps, num_burnin, num_sample_every, num_update_proposalevery, acceptance_rate, seed, error_precision, noamp_flag, prior_mean, prior_std, help_flag)
    return mean_execute(params, runner);
}


export {
      MEAN_METADATA,
      MeanOutputs,
      MeanParameters,
      mean,
      mean_execute,
      mean_params,
};
