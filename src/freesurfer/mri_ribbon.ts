// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_RIBBON_METADATA: Metadata = {
    id: "2304da93e8c915d7208416df97d57e92ea3d0bd3.boutiques",
    name: "mri_ribbon",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRibbonParameters {
    "__STYXTYPE__": "mri_ribbon";
    "label_file"?: InputPathType | null | undefined;
    "inner_surface": InputPathType;
    "outer_surface": InputPathType;
    "input_volume": string;
    "output_volume": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_ribbon": mri_ribbon_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_ribbon": mri_ribbon_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_ribbon(...)`.
 *
 * @interface
 */
interface MriRibbonOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output ribbon volume
     */
    ribbon_output: OutputPathType;
}


function mri_ribbon_params(
    inner_surface: InputPathType,
    outer_surface: InputPathType,
    input_volume: string,
    output_volume: string,
    label_file: InputPathType | null = null,
): MriRibbonParameters {
    /**
     * Build parameters.
    
     * @param inner_surface File name of the inner surface
     * @param outer_surface File name of the outer surface
     * @param input_volume Prefix for the input volume file
     * @param output_volume Prefix for the output volume file
     * @param label_file Label file specifying regions of interest (optional)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_ribbon" as const,
        "inner_surface": inner_surface,
        "outer_surface": outer_surface,
        "input_volume": input_volume,
        "output_volume": output_volume,
    };
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    return params;
}


function mri_ribbon_cargs(
    params: MriRibbonParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_ribbon");
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["inner_surface"] ?? null)));
    cargs.push(execution.inputFile((params["outer_surface"] ?? null)));
    cargs.push((params["input_volume"] ?? null));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


function mri_ribbon_outputs(
    params: MriRibbonParameters,
    execution: Execution,
): MriRibbonOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriRibbonOutputs = {
        root: execution.outputFile("."),
        ribbon_output: execution.outputFile([(params["output_volume"] ?? null), "_ribbon.nii.gz"].join('')),
    };
    return ret;
}


function mri_ribbon_execute(
    params: MriRibbonParameters,
    execution: Execution,
): MriRibbonOutputs {
    /**
     * MRI Ribbon tool to create ribbon volumes from surface files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriRibbonOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_ribbon_cargs(params, execution)
    const ret = mri_ribbon_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_ribbon(
    inner_surface: InputPathType,
    outer_surface: InputPathType,
    input_volume: string,
    output_volume: string,
    label_file: InputPathType | null = null,
    runner: Runner | null = null,
): MriRibbonOutputs {
    /**
     * MRI Ribbon tool to create ribbon volumes from surface files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param inner_surface File name of the inner surface
     * @param outer_surface File name of the outer surface
     * @param input_volume Prefix for the input volume file
     * @param output_volume Prefix for the output volume file
     * @param label_file Label file specifying regions of interest (optional)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriRibbonOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_RIBBON_METADATA);
    const params = mri_ribbon_params(inner_surface, outer_surface, input_volume, output_volume, label_file)
    return mri_ribbon_execute(params, execution);
}


export {
      MRI_RIBBON_METADATA,
      MriRibbonOutputs,
      MriRibbonParameters,
      mri_ribbon,
      mri_ribbon_params,
};
