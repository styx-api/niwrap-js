// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_WARP_CONVERT_METADATA: Metadata = {
    id: "36b7f6d3b0edf16e088ad567445e656a71a7dd89.boutiques",
    name: "mri_warp_convert",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriWarpConvertParameters {
    "__STYXTYPE__": "mri_warp_convert";
    "invox"?: InputPathType | null | undefined;
    "outvox"?: string | null | undefined;
    "insrcgeom"?: InputPathType | null | undefined;
    "downsample": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_warp_convert": mri_warp_convert_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_warp_convert": mri_warp_convert_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_warp_convert(...)`.
 *
 * @interface
 */
interface MriWarpConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted output warp file
     */
    outwarp: OutputPathType | null;
}


function mri_warp_convert_params(
    invox: InputPathType | null = null,
    outvox: string | null = null,
    insrcgeom: InputPathType | null = null,
    downsample: boolean = false,
): MriWarpConvertParameters {
    /**
     * Build parameters.
    
     * @param invox Input file with displacements in source-voxel space
     * @param outvox Output file with displacements in source-voxel space
     * @param insrcgeom Specify source image geometry (moving volume)
     * @param downsample Downsample output M3Z to spacing of 2.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_warp_convert" as const,
        "downsample": downsample,
    };
    if (invox !== null) {
        params["invox"] = invox;
    }
    if (outvox !== null) {
        params["outvox"] = outvox;
    }
    if (insrcgeom !== null) {
        params["insrcgeom"] = insrcgeom;
    }
    return params;
}


function mri_warp_convert_cargs(
    params: MriWarpConvertParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_warp_convert");
    if ((params["invox"] ?? null) !== null) {
        cargs.push(
            "--invox",
            execution.inputFile((params["invox"] ?? null))
        );
    }
    if ((params["outvox"] ?? null) !== null) {
        cargs.push(
            "--outvox",
            (params["outvox"] ?? null)
        );
    }
    if ((params["insrcgeom"] ?? null) !== null) {
        cargs.push(
            "--insrcgeom",
            execution.inputFile((params["insrcgeom"] ?? null))
        );
    }
    if ((params["downsample"] ?? null)) {
        cargs.push("--downsample");
    }
    return cargs;
}


function mri_warp_convert_outputs(
    params: MriWarpConvertParameters,
    execution: Execution,
): MriWarpConvertOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriWarpConvertOutputs = {
        root: execution.outputFile("."),
        outwarp: ((params["outvox"] ?? null) !== null) ? execution.outputFile([(params["outvox"] ?? null)].join('')) : null,
    };
    return ret;
}


function mri_warp_convert_execute(
    params: MriWarpConvertParameters,
    execution: Execution,
): MriWarpConvertOutputs {
    /**
     * This program converts non-linear deformation field warp file formats.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriWarpConvertOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_warp_convert_cargs(params, execution)
    const ret = mri_warp_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_warp_convert(
    invox: InputPathType | null = null,
    outvox: string | null = null,
    insrcgeom: InputPathType | null = null,
    downsample: boolean = false,
    runner: Runner | null = null,
): MriWarpConvertOutputs {
    /**
     * This program converts non-linear deformation field warp file formats.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param invox Input file with displacements in source-voxel space
     * @param outvox Output file with displacements in source-voxel space
     * @param insrcgeom Specify source image geometry (moving volume)
     * @param downsample Downsample output M3Z to spacing of 2.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriWarpConvertOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_WARP_CONVERT_METADATA);
    const params = mri_warp_convert_params(invox, outvox, insrcgeom, downsample)
    return mri_warp_convert_execute(params, execution);
}


export {
      MRI_WARP_CONVERT_METADATA,
      MriWarpConvertOutputs,
      MriWarpConvertParameters,
      mri_warp_convert,
      mri_warp_convert_params,
};
