// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GIFTI_CONVERT_METADATA: Metadata = {
    id: "00ca05307d704bb4b72ca8d609e922d80aac69c0.boutiques",
    name: "gifti-convert",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface GiftiConvertParameters {
    "@type"?: "workbench/gifti-convert";
    "gifti_encoding": string;
    "input_gifti_file": string;
    "output_gifti_file": string;
}
type GiftiConvertParametersTagged = Required<Pick<GiftiConvertParameters, '@type'>> & GiftiConvertParameters;


/**
 * Output object returned when calling `GiftiConvertParameters(...)`.
 *
 * @interface
 */
interface GiftiConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param gifti_encoding what the output encoding should be
 * @param input_gifti_file the input gifti file
 * @param output_gifti_file output - the output gifti file
 *
 * @returns Parameter dictionary
 */
function gifti_convert_params(
    gifti_encoding: string,
    input_gifti_file: string,
    output_gifti_file: string,
): GiftiConvertParametersTagged {
    const params = {
        "@type": "workbench/gifti-convert" as const,
        "gifti_encoding": gifti_encoding,
        "input_gifti_file": input_gifti_file,
        "output_gifti_file": output_gifti_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gifti_convert_cargs(
    params: GiftiConvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-gifti-convert");
    cargs.push((params["gifti_encoding"] ?? null));
    cargs.push((params["input_gifti_file"] ?? null));
    cargs.push((params["output_gifti_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gifti_convert_outputs(
    params: GiftiConvertParameters,
    execution: Execution,
): GiftiConvertOutputs {
    const ret: GiftiConvertOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * gifti-convert
 *
 * Convert a gifti file to a different encoding.
 *
 * The value of <gifti-encoding> must be one of the following:
 *
 * ASCII
 * BASE64_BINARY
 * GZIP_BASE64_BINARY
 * EXTERNAL_FILE_BINARY.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GiftiConvertOutputs`).
 */
function gifti_convert_execute(
    params: GiftiConvertParameters,
    runner: Runner | null = null,
): GiftiConvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GIFTI_CONVERT_METADATA);
    params = execution.params(params)
    const cargs = gifti_convert_cargs(params, execution)
    const ret = gifti_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * gifti-convert
 *
 * Convert a gifti file to a different encoding.
 *
 * The value of <gifti-encoding> must be one of the following:
 *
 * ASCII
 * BASE64_BINARY
 * GZIP_BASE64_BINARY
 * EXTERNAL_FILE_BINARY.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param gifti_encoding what the output encoding should be
 * @param input_gifti_file the input gifti file
 * @param output_gifti_file output - the output gifti file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GiftiConvertOutputs`).
 */
function gifti_convert(
    gifti_encoding: string,
    input_gifti_file: string,
    output_gifti_file: string,
    runner: Runner | null = null,
): GiftiConvertOutputs {
    const params = gifti_convert_params(gifti_encoding, input_gifti_file, output_gifti_file)
    return gifti_convert_execute(params, runner);
}


export {
      GIFTI_CONVERT_METADATA,
      GiftiConvertOutputs,
      gifti_convert,
      gifti_convert_execute,
      gifti_convert_params,
};
