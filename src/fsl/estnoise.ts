// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ESTNOISE_METADATA: Metadata = {
    id: "59d04049b700bc048b0b5ee4a48ddcf7b833de44.boutiques",
    name: "estnoise",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface EstnoiseParameters {
    "@type": "fsl.estnoise";
    "input_4d_data": InputPathType;
    "spatial_sigma"?: number | null | undefined;
    "temp_hp_sigma"?: number | null | undefined;
    "temp_lp_sigma"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.estnoise": estnoise_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.estnoise": estnoise_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `estnoise(...)`.
 *
 * @interface
 */
interface EstnoiseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file containing noise estimates
     */
    output_noise_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_4d_data Input 4D fMRI data (e.g., fmri_data.nii.gz)
 * @param spatial_sigma Spatial smoothing sigma
 * @param temp_hp_sigma Temporal high-pass filter sigma
 * @param temp_lp_sigma Temporal low-pass filter sigma
 *
 * @returns Parameter dictionary
 */
function estnoise_params(
    input_4d_data: InputPathType,
    spatial_sigma: number | null = null,
    temp_hp_sigma: number | null = null,
    temp_lp_sigma: number | null = null,
): EstnoiseParameters {
    const params = {
        "@type": "fsl.estnoise" as const,
        "input_4d_data": input_4d_data,
    };
    if (spatial_sigma !== null) {
        params["spatial_sigma"] = spatial_sigma;
    }
    if (temp_hp_sigma !== null) {
        params["temp_hp_sigma"] = temp_hp_sigma;
    }
    if (temp_lp_sigma !== null) {
        params["temp_lp_sigma"] = temp_lp_sigma;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function estnoise_cargs(
    params: EstnoiseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("estnoise");
    cargs.push(execution.inputFile((params["input_4d_data"] ?? null)));
    if ((params["spatial_sigma"] ?? null) !== null) {
        cargs.push(String((params["spatial_sigma"] ?? null)));
    }
    if ((params["temp_hp_sigma"] ?? null) !== null) {
        cargs.push(String((params["temp_hp_sigma"] ?? null)));
    }
    if ((params["temp_lp_sigma"] ?? null) !== null) {
        cargs.push(String((params["temp_lp_sigma"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function estnoise_outputs(
    params: EstnoiseParameters,
    execution: Execution,
): EstnoiseOutputs {
    const ret: EstnoiseOutputs = {
        root: execution.outputFile("."),
        output_noise_file: execution.outputFile(["noise_estimate.txt"].join('')),
    };
    return ret;
}


/**
 * estnoise
 *
 * Estimate noise in 4D fMRI data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `EstnoiseOutputs`).
 */
function estnoise_execute(
    params: EstnoiseParameters,
    runner: Runner | null = null,
): EstnoiseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ESTNOISE_METADATA);
    params = execution.params(params)
    const cargs = estnoise_cargs(params, execution)
    const ret = estnoise_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * estnoise
 *
 * Estimate noise in 4D fMRI data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_4d_data Input 4D fMRI data (e.g., fmri_data.nii.gz)
 * @param spatial_sigma Spatial smoothing sigma
 * @param temp_hp_sigma Temporal high-pass filter sigma
 * @param temp_lp_sigma Temporal low-pass filter sigma
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `EstnoiseOutputs`).
 */
function estnoise(
    input_4d_data: InputPathType,
    spatial_sigma: number | null = null,
    temp_hp_sigma: number | null = null,
    temp_lp_sigma: number | null = null,
    runner: Runner | null = null,
): EstnoiseOutputs {
    const params = estnoise_params(input_4d_data, spatial_sigma, temp_hp_sigma, temp_lp_sigma)
    return estnoise_execute(params, runner);
}


export {
      ESTNOISE_METADATA,
      EstnoiseOutputs,
      EstnoiseParameters,
      estnoise,
      estnoise_execute,
      estnoise_params,
};
