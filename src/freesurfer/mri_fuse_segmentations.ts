// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FUSE_SEGMENTATIONS_METADATA: Metadata = {
    id: "04388b801a4735a2e7525ce3184cca331a6ec70a.boutiques",
    name: "mri_fuse_segmentations",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFuseSegmentationsParameters {
    "@type": "freesurfer.mri_fuse_segmentations";
    "asegs": Array<InputPathType>;
    "nocc_asegs": Array<InputPathType>;
    "norm_volumes": Array<InputPathType>;
    "transforms"?: Array<InputPathType> | null | undefined;
    "sigma"?: number | null | undefined;
    "input_file": InputPathType;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_fuse_segmentations": mri_fuse_segmentations_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_fuse_segmentations": mri_fuse_segmentations_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_fuse_segmentations(...)`.
 *
 * @interface
 */
interface MriFuseSegmentationsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting fused segmentation as aseg.fused.mgz file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param asegs Path to aseg.mgz files, one per TP
 * @param nocc_asegs Path to aseg.auto_noCCseg.mgz files without CC labels, one per TP
 * @param norm_volumes Path to norm.mgz files, one per TP
 * @param input_file Input norm.mgz file
 * @param output_file Resulting fused segmentation as aseg.fused.mgz file
 * @param transforms Transform files from each TP to the input norm.mgz, can be LTA, M3Z or identity.nofile
 * @param sigma Cross-time sigma (default 3.0)
 *
 * @returns Parameter dictionary
 */
function mri_fuse_segmentations_params(
    asegs: Array<InputPathType>,
    nocc_asegs: Array<InputPathType>,
    norm_volumes: Array<InputPathType>,
    input_file: InputPathType,
    output_file: string,
    transforms: Array<InputPathType> | null = null,
    sigma: number | null = null,
): MriFuseSegmentationsParameters {
    const params = {
        "@type": "freesurfer.mri_fuse_segmentations" as const,
        "asegs": asegs,
        "nocc_asegs": nocc_asegs,
        "norm_volumes": norm_volumes,
        "input_file": input_file,
        "output_file": output_file,
    };
    if (transforms !== null) {
        params["transforms"] = transforms;
    }
    if (sigma !== null) {
        params["sigma"] = sigma;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_fuse_segmentations_cargs(
    params: MriFuseSegmentationsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_fuse_segmentations");
    cargs.push(
        "-a",
        ...(params["asegs"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-c",
        ...(params["nocc_asegs"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-n",
        ...(params["norm_volumes"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["transforms"] ?? null) !== null) {
        cargs.push(
            "-t",
            ...(params["transforms"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["sigma"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["sigma"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_fuse_segmentations_outputs(
    params: MriFuseSegmentationsParameters,
    execution: Execution,
): MriFuseSegmentationsOutputs {
    const ret: MriFuseSegmentationsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_fuse_segmentations
 *
 * Fuse a set of segmentations (asegs) into an initial estimate of a longitudinal one.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFuseSegmentationsOutputs`).
 */
function mri_fuse_segmentations_execute(
    params: MriFuseSegmentationsParameters,
    runner: Runner | null = null,
): MriFuseSegmentationsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FUSE_SEGMENTATIONS_METADATA);
    params = execution.params(params)
    const cargs = mri_fuse_segmentations_cargs(params, execution)
    const ret = mri_fuse_segmentations_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_fuse_segmentations
 *
 * Fuse a set of segmentations (asegs) into an initial estimate of a longitudinal one.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param asegs Path to aseg.mgz files, one per TP
 * @param nocc_asegs Path to aseg.auto_noCCseg.mgz files without CC labels, one per TP
 * @param norm_volumes Path to norm.mgz files, one per TP
 * @param input_file Input norm.mgz file
 * @param output_file Resulting fused segmentation as aseg.fused.mgz file
 * @param transforms Transform files from each TP to the input norm.mgz, can be LTA, M3Z or identity.nofile
 * @param sigma Cross-time sigma (default 3.0)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFuseSegmentationsOutputs`).
 */
function mri_fuse_segmentations(
    asegs: Array<InputPathType>,
    nocc_asegs: Array<InputPathType>,
    norm_volumes: Array<InputPathType>,
    input_file: InputPathType,
    output_file: string,
    transforms: Array<InputPathType> | null = null,
    sigma: number | null = null,
    runner: Runner | null = null,
): MriFuseSegmentationsOutputs {
    const params = mri_fuse_segmentations_params(asegs, nocc_asegs, norm_volumes, input_file, output_file, transforms, sigma)
    return mri_fuse_segmentations_execute(params, runner);
}


export {
      MRI_FUSE_SEGMENTATIONS_METADATA,
      MriFuseSegmentationsOutputs,
      MriFuseSegmentationsParameters,
      mri_fuse_segmentations,
      mri_fuse_segmentations_execute,
      mri_fuse_segmentations_params,
};
