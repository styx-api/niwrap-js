// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_MARRY_METADATA: Metadata = {
    id: "451c2e1e1510e8db86d7d55846288c13e106eaf6.boutiques",
    name: "1dMarry",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dMarryParameters {
    "__STYXTYPE__": "1dMarry";
    "sep"?: string | null | undefined;
    "divorce": boolean;
    "files": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dMarry": v_1d_marry_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dMarry": v_1d_marry_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1d_marry(...)`.
 *
 * @interface
 */
interface V1dMarryOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file when marrying files. This file should be captured using a redirection such as '>'.
     */
    outfile: OutputPathType;
    /**
     * First output file when divorcing.
     */
    divorcee_a: OutputPathType;
    /**
     * Second output file when divorcing.
     */
    divorcee_b: OutputPathType;
}


function v_1d_marry_params(
    files: Array<InputPathType>,
    sep: string | null = null,
    divorce: boolean = false,
): V1dMarryParameters {
    /**
     * Build parameters.
    
     * @param files Input file(s) to be married or divorced.
     * @param sep Separator(s) for marrying files. The first character is used as the separator between values 1 and 2, the second character between values 2 and 3, etc.
     * @param divorce Divorce mode: splits married file into separate files.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dMarry" as const,
        "divorce": divorce,
        "files": files,
    };
    if (sep !== null) {
        params["sep"] = sep;
    }
    return params;
}


function v_1d_marry_cargs(
    params: V1dMarryParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dMarry");
    if ((params["sep"] ?? null) !== null) {
        cargs.push(
            "-sep",
            (params["sep"] ?? null)
        );
    }
    if ((params["divorce"] ?? null)) {
        cargs.push("-divorce");
    }
    cargs.push(...(params["files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function v_1d_marry_outputs(
    params: V1dMarryParameters,
    execution: Execution,
): V1dMarryOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dMarryOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile(["stdout"].join('')),
        divorcee_a: execution.outputFile(["[FILE2]_A.1D"].join('')),
        divorcee_b: execution.outputFile(["[FILE2]_B.1D"].join('')),
    };
    return ret;
}


function v_1d_marry_execute(
    params: V1dMarryParameters,
    execution: Execution,
): V1dMarryOutputs {
    /**
     * Joins together 2 (or more) ragged-right .1D files, for use with 3dDeconvolve -stim_times_AM2, or breaks up 1 married file into 2 (or more) single-valued files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dMarryOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1d_marry_cargs(params, execution)
    const ret = v_1d_marry_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1d_marry(
    files: Array<InputPathType>,
    sep: string | null = null,
    divorce: boolean = false,
    runner: Runner | null = null,
): V1dMarryOutputs {
    /**
     * Joins together 2 (or more) ragged-right .1D files, for use with 3dDeconvolve -stim_times_AM2, or breaks up 1 married file into 2 (or more) single-valued files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param files Input file(s) to be married or divorced.
     * @param sep Separator(s) for marrying files. The first character is used as the separator between values 1 and 2, the second character between values 2 and 3, etc.
     * @param divorce Divorce mode: splits married file into separate files.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dMarryOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_MARRY_METADATA);
    const params = v_1d_marry_params(files, sep, divorce)
    return v_1d_marry_execute(params, execution);
}


export {
      V1dMarryOutputs,
      V1dMarryParameters,
      V_1D_MARRY_METADATA,
      v_1d_marry,
      v_1d_marry_params,
};
