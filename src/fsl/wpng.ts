// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WPNG_METADATA: Metadata = {
    id: "9f9c70ecbedffb509e726c31bb9501a9ecba01a1.boutiques",
    name: "wpng",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface WpngParameters {
    "@type": "fsl.wpng";
    "input_file"?: InputPathType | null | undefined;
    "gamma"?: number | null | undefined;
    "bgcolor"?: string | null | undefined;
    "text_flag": boolean;
    "time_flag": boolean;
    "interlace_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.wpng": wpng_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.wpng": wpng_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `wpng(...)`.
 *
 * @interface
 */
interface WpngOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted PNG file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input PNM file (binary PGM 'P5', PPM 'P6' or PAM 'P8')
 * @param gamma Transfer-function exponent (``gamma'') of the image in floating-point format (e.g., ``0.45455''). If image looks correct on given display system, image gamma is equal to inverse of display-system exponent, i.e., 1 / (LUT * CRT) (where LUT = lookup-table exponent and CRT = CRT exponent; first varies, second is usually 2.2, all are positive)
 * @param bgcolor Desired background color for alpha-channel images, in 7-character hex RGB format (e.g., ``#ff7700'' for orange: same as HTML colors)
 * @param text_flag Prompt interactively for text info (tEXt chunks)
 * @param time_flag Include a tIME chunk (last modification time)
 * @param interlace_flag Write interlaced PNG image
 *
 * @returns Parameter dictionary
 */
function wpng_params(
    input_file: InputPathType | null = null,
    gamma: number | null = null,
    bgcolor: string | null = null,
    text_flag: boolean = false,
    time_flag: boolean = false,
    interlace_flag: boolean = false,
): WpngParameters {
    const params = {
        "@type": "fsl.wpng" as const,
        "text_flag": text_flag,
        "time_flag": time_flag,
        "interlace_flag": interlace_flag,
    };
    if (input_file !== null) {
        params["input_file"] = input_file;
    }
    if (gamma !== null) {
        params["gamma"] = gamma;
    }
    if (bgcolor !== null) {
        params["bgcolor"] = bgcolor;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function wpng_cargs(
    params: WpngParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wpng");
    if ((params["input_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["input_file"] ?? null)));
    }
    if ((params["gamma"] ?? null) !== null) {
        cargs.push(
            "-gamma",
            String((params["gamma"] ?? null))
        );
    }
    if ((params["bgcolor"] ?? null) !== null) {
        cargs.push(
            "-bgcolor",
            (params["bgcolor"] ?? null)
        );
    }
    if ((params["text_flag"] ?? null)) {
        cargs.push("-text");
    }
    if ((params["time_flag"] ?? null)) {
        cargs.push("-time");
    }
    if ((params["interlace_flag"] ?? null)) {
        cargs.push("-interlace");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function wpng_outputs(
    params: WpngParameters,
    execution: Execution,
): WpngOutputs {
    const ret: WpngOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["[INPUT_FILE_BASE_NAME].png"].join('')),
    };
    return ret;
}


/**
 * Simple PGM/PPM/PAM to PNG Converter.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `WpngOutputs`).
 */
function wpng_execute(
    params: WpngParameters,
    execution: Execution,
): WpngOutputs {
    params = execution.params(params)
    const cargs = wpng_cargs(params, execution)
    const ret = wpng_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Simple PGM/PPM/PAM to PNG Converter.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input PNM file (binary PGM 'P5', PPM 'P6' or PAM 'P8')
 * @param gamma Transfer-function exponent (``gamma'') of the image in floating-point format (e.g., ``0.45455''). If image looks correct on given display system, image gamma is equal to inverse of display-system exponent, i.e., 1 / (LUT * CRT) (where LUT = lookup-table exponent and CRT = CRT exponent; first varies, second is usually 2.2, all are positive)
 * @param bgcolor Desired background color for alpha-channel images, in 7-character hex RGB format (e.g., ``#ff7700'' for orange: same as HTML colors)
 * @param text_flag Prompt interactively for text info (tEXt chunks)
 * @param time_flag Include a tIME chunk (last modification time)
 * @param interlace_flag Write interlaced PNG image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `WpngOutputs`).
 */
function wpng(
    input_file: InputPathType | null = null,
    gamma: number | null = null,
    bgcolor: string | null = null,
    text_flag: boolean = false,
    time_flag: boolean = false,
    interlace_flag: boolean = false,
    runner: Runner | null = null,
): WpngOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WPNG_METADATA);
    const params = wpng_params(input_file, gamma, bgcolor, text_flag, time_flag, interlace_flag)
    return wpng_execute(params, execution);
}


export {
      WPNG_METADATA,
      WpngOutputs,
      WpngParameters,
      wpng,
      wpng_cargs,
      wpng_execute,
      wpng_outputs,
      wpng_params,
};
