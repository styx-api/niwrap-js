// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CBLUMWMGYRI_METADATA: Metadata = {
    id: "564e3588afc9810c3dc5013f2e056c14a2f92213.boutiques",
    name: "cblumwmgyri",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface CblumwmgyriParameters {
    "@type": "freesurfer.cblumwmgyri";
    "subject": string;
    "source_seg"?: InputPathType | null | undefined;
    "n_erodes_dilates"?: number | null | undefined;
    "out_seg"?: string | null | undefined;
    "no_segstats": boolean;
    "subjects_dir"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.cblumwmgyri": cblumwmgyri_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.cblumwmgyri": cblumwmgyri_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cblumwmgyri(...)`.
 *
 * @interface
 */
interface CblumwmgyriOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output segmentation file after processing
     */
    output_seg_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier
 * @param source_seg Source segmentation file (default: aparc+aseg.mgz)
 * @param n_erodes_dilates Number of erosions/dilations (default: 2)
 * @param out_seg Output segmentation file (default: sourceseg+cblumwmgyri.mgz)
 * @param no_segstats Do not compute segmentation statistics
 * @param subjects_dir Subjects directory
 *
 * @returns Parameter dictionary
 */
function cblumwmgyri_params(
    subject: string,
    source_seg: InputPathType | null = null,
    n_erodes_dilates: number | null = 2,
    out_seg: string | null = "sourceseg+cblumwmgyri.mgz",
    no_segstats: boolean = false,
    subjects_dir: string | null = null,
): CblumwmgyriParameters {
    const params = {
        "@type": "freesurfer.cblumwmgyri" as const,
        "subject": subject,
        "no_segstats": no_segstats,
    };
    if (source_seg !== null) {
        params["source_seg"] = source_seg;
    }
    if (n_erodes_dilates !== null) {
        params["n_erodes_dilates"] = n_erodes_dilates;
    }
    if (out_seg !== null) {
        params["out_seg"] = out_seg;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cblumwmgyri_cargs(
    params: CblumwmgyriParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("cblumwmgyri");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["source_seg"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["source_seg"] ?? null))
        );
    }
    if ((params["n_erodes_dilates"] ?? null) !== null) {
        cargs.push(
            "--n",
            String((params["n_erodes_dilates"] ?? null))
        );
    }
    if ((params["out_seg"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["out_seg"] ?? null)
        );
    }
    if ((params["no_segstats"] ?? null)) {
        cargs.push("--no-segstats");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cblumwmgyri_outputs(
    params: CblumwmgyriParameters,
    execution: Execution,
): CblumwmgyriOutputs {
    const ret: CblumwmgyriOutputs = {
        root: execution.outputFile("."),
        output_seg_file: ((params["out_seg"] ?? null) !== null) ? execution.outputFile([(params["out_seg"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Segments cerebellar white matter into gyral and core components using geometrical constraints.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CblumwmgyriOutputs`).
 */
function cblumwmgyri_execute(
    params: CblumwmgyriParameters,
    execution: Execution,
): CblumwmgyriOutputs {
    params = execution.params(params)
    const cargs = cblumwmgyri_cargs(params, execution)
    const ret = cblumwmgyri_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Segments cerebellar white matter into gyral and core components using geometrical constraints.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier
 * @param source_seg Source segmentation file (default: aparc+aseg.mgz)
 * @param n_erodes_dilates Number of erosions/dilations (default: 2)
 * @param out_seg Output segmentation file (default: sourceseg+cblumwmgyri.mgz)
 * @param no_segstats Do not compute segmentation statistics
 * @param subjects_dir Subjects directory
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CblumwmgyriOutputs`).
 */
function cblumwmgyri(
    subject: string,
    source_seg: InputPathType | null = null,
    n_erodes_dilates: number | null = 2,
    out_seg: string | null = "sourceseg+cblumwmgyri.mgz",
    no_segstats: boolean = false,
    subjects_dir: string | null = null,
    runner: Runner | null = null,
): CblumwmgyriOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CBLUMWMGYRI_METADATA);
    const params = cblumwmgyri_params(subject, source_seg, n_erodes_dilates, out_seg, no_segstats, subjects_dir)
    return cblumwmgyri_execute(params, execution);
}


export {
      CBLUMWMGYRI_METADATA,
      CblumwmgyriOutputs,
      CblumwmgyriParameters,
      cblumwmgyri,
      cblumwmgyri_cargs,
      cblumwmgyri_execute,
      cblumwmgyri_outputs,
      cblumwmgyri_params,
};
