// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TABLE2MAP_METADATA: Metadata = {
    id: "375fcb71ecdd3f7b02dfe12003321f048a22ccc7.boutiques",
    name: "table2map",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Table2mapParameters {
    "@type": "freesurfer.table2map";
    "input_table": InputPathType;
    "output_map": string;
    "segmentation"?: InputPathType | null | undefined;
    "parcellation"?: InputPathType | null | undefined;
    "columns"?: Array<string> | null | undefined;
    "lookup_table"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.table2map": table2map_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `table2map(...)`.
 *
 * @interface
 */
interface Table2mapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_table Input table.
 * @param output_map Output map.
 * @param segmentation Segmentation to map to.
 * @param parcellation Parcellation to map to.
 * @param columns Table columns to map. All are included by default.
 * @param lookup_table Alternative lookup table.
 *
 * @returns Parameter dictionary
 */
function table2map_params(
    input_table: InputPathType,
    output_map: string,
    segmentation: InputPathType | null = null,
    parcellation: InputPathType | null = null,
    columns: Array<string> | null = null,
    lookup_table: InputPathType | null = null,
): Table2mapParameters {
    const params = {
        "@type": "freesurfer.table2map" as const,
        "input_table": input_table,
        "output_map": output_map,
    };
    if (segmentation !== null) {
        params["segmentation"] = segmentation;
    }
    if (parcellation !== null) {
        params["parcellation"] = parcellation;
    }
    if (columns !== null) {
        params["columns"] = columns;
    }
    if (lookup_table !== null) {
        params["lookup_table"] = lookup_table;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function table2map_cargs(
    params: Table2mapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("table2map");
    cargs.push(
        "-t",
        execution.inputFile((params["input_table"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_map"] ?? null)
    );
    if ((params["segmentation"] ?? null) !== null) {
        cargs.push(
            "-s",
            execution.inputFile((params["segmentation"] ?? null))
        );
    }
    if ((params["parcellation"] ?? null) !== null) {
        cargs.push(
            "-p",
            execution.inputFile((params["parcellation"] ?? null))
        );
    }
    if ((params["columns"] ?? null) !== null) {
        cargs.push(
            "-c",
            ...(params["columns"] ?? null)
        );
    }
    if ((params["lookup_table"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["lookup_table"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function table2map_outputs(
    params: Table2mapParameters,
    execution: Execution,
): Table2mapOutputs {
    const ret: Table2mapOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * table2map
 *
 * A tool to map data from a table onto an output map, optionally using segmentation or parcellation files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Table2mapOutputs`).
 */
function table2map_execute(
    params: Table2mapParameters,
    runner: Runner | null = null,
): Table2mapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TABLE2MAP_METADATA);
    params = execution.params(params)
    const cargs = table2map_cargs(params, execution)
    const ret = table2map_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * table2map
 *
 * A tool to map data from a table onto an output map, optionally using segmentation or parcellation files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_table Input table.
 * @param output_map Output map.
 * @param segmentation Segmentation to map to.
 * @param parcellation Parcellation to map to.
 * @param columns Table columns to map. All are included by default.
 * @param lookup_table Alternative lookup table.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Table2mapOutputs`).
 */
function table2map(
    input_table: InputPathType,
    output_map: string,
    segmentation: InputPathType | null = null,
    parcellation: InputPathType | null = null,
    columns: Array<string> | null = null,
    lookup_table: InputPathType | null = null,
    runner: Runner | null = null,
): Table2mapOutputs {
    const params = table2map_params(input_table, output_map, segmentation, parcellation, columns, lookup_table)
    return table2map_execute(params, runner);
}


export {
      TABLE2MAP_METADATA,
      Table2mapOutputs,
      Table2mapParameters,
      table2map,
      table2map_execute,
      table2map_params,
};
