// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_5TT2GMWMI_METADATA: Metadata = {
    id: "9364810c76c939f13c428191716ed63148337a9a.boutiques",
    name: "5tt2gmwmi",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface V5tt2gmwmiConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type V5tt2gmwmiConfigParametersTagged = Required<Pick<V5tt2gmwmiConfigParameters, '@type'>> & V5tt2gmwmiConfigParameters;


interface V5tt2gmwmiParameters {
    "@type"?: "mrtrix/5tt2gmwmi";
    "mask_in"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<V5tt2gmwmiConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "5tt_in": InputPathType;
    "mask_out": string;
}
type V5tt2gmwmiParametersTagged = Required<Pick<V5tt2gmwmiParameters, '@type'>> & V5tt2gmwmiParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function v_5tt2gmwmi_config_params(
    key: string,
    value: string,
): V5tt2gmwmiConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5tt2gmwmi_config_cargs(
    params: V5tt2gmwmiConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `V5tt2gmwmiParameters(...)`.
 *
 * @interface
 */
interface V5tt2gmwmiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output mask image
     */
    mask_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param v_5tt_in the input 5TT segmented anatomical image
 * @param mask_out the output mask image
 * @param mask_in Filter an input mask image according to those voxels that lie upon the grey matter - white matter boundary. If no input mask is provided, the output will be a whole-brain mask image calculated using the anatomical image only.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function v_5tt2gmwmi_params(
    v_5tt_in: InputPathType,
    mask_out: string,
    mask_in: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5tt2gmwmiConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): V5tt2gmwmiParametersTagged {
    const params = {
        "@type": "mrtrix/5tt2gmwmi" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "5tt_in": v_5tt_in,
        "mask_out": mask_out,
    };
    if (mask_in !== null) {
        params["mask_in"] = mask_in;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5tt2gmwmi_cargs(
    params: V5tt2gmwmiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("5tt2gmwmi");
    if ((params["mask_in"] ?? null) !== null) {
        cargs.push(
            "-mask_in",
            execution.inputFile((params["mask_in"] ?? null))
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => v_5tt2gmwmi_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["5tt_in"] ?? null)));
    cargs.push((params["mask_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5tt2gmwmi_outputs(
    params: V5tt2gmwmiParameters,
    execution: Execution,
): V5tt2gmwmiOutputs {
    const ret: V5tt2gmwmiOutputs = {
        root: execution.outputFile("."),
        mask_out: execution.outputFile([(params["mask_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * 5tt2gmwmi
 *
 * Generate a mask image appropriate for seeding streamlines on the grey matter-white matter interface.
 *
 *
 *
 * References:
 *
 * Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. Anatomically-constrained tractography:Improved diffusion MRI streamlines tractography through effective use of anatomical information. NeuroImage, 2012, 62, 1924-1938.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V5tt2gmwmiOutputs`).
 */
function v_5tt2gmwmi_execute(
    params: V5tt2gmwmiParameters,
    runner: Runner | null = null,
): V5tt2gmwmiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_5TT2GMWMI_METADATA);
    params = execution.params(params)
    const cargs = v_5tt2gmwmi_cargs(params, execution)
    const ret = v_5tt2gmwmi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 5tt2gmwmi
 *
 * Generate a mask image appropriate for seeding streamlines on the grey matter-white matter interface.
 *
 *
 *
 * References:
 *
 * Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. Anatomically-constrained tractography:Improved diffusion MRI streamlines tractography through effective use of anatomical information. NeuroImage, 2012, 62, 1924-1938.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param v_5tt_in the input 5TT segmented anatomical image
 * @param mask_out the output mask image
 * @param mask_in Filter an input mask image according to those voxels that lie upon the grey matter - white matter boundary. If no input mask is provided, the output will be a whole-brain mask image calculated using the anatomical image only.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V5tt2gmwmiOutputs`).
 */
function v_5tt2gmwmi(
    v_5tt_in: InputPathType,
    mask_out: string,
    mask_in: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5tt2gmwmiConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): V5tt2gmwmiOutputs {
    const params = v_5tt2gmwmi_params(v_5tt_in, mask_out, mask_in, info, quiet, debug, force, nthreads, config, help, version)
    return v_5tt2gmwmi_execute(params, runner);
}


export {
      V5tt2gmwmiOutputs,
      V_5TT2GMWMI_METADATA,
      v_5tt2gmwmi,
      v_5tt2gmwmi_config_params,
      v_5tt2gmwmi_execute,
      v_5tt2gmwmi_params,
};
