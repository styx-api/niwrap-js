// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_CURVATURE_STATS_METADATA: Metadata = {
    id: "471b147c9e4a5986d26ffc5619a8d1ade9f883a3.boutiques",
    name: "mris_curvature_stats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisCurvatureStatsParameters {
    "__STYXTYPE__": "mris_curvature_stats";
    "subject_name": string;
    "hemisphere": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_curvature_stats": mris_curvature_stats_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_curvature_stats": mris_curvature_stats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_curvature_stats(...)`.
 *
 * @interface
 */
interface MrisCurvatureStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Scaled curvature file.
     */
    scaled_curvature_file: OutputPathType;
}


function mris_curvature_stats_params(
    subject_name: string,
    hemisphere: string,
): MrisCurvatureStatsParameters {
    /**
     * Build parameters.
    
     * @param subject_name Subject name defined in the SUBJECTS_DIR
     * @param hemisphere Hemisphere, can be 'lh' or 'rh'
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_curvature_stats" as const,
        "subject_name": subject_name,
        "hemisphere": hemisphere,
    };
    return params;
}


function mris_curvature_stats_cargs(
    params: MrisCurvatureStatsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_curvature_stats");
    cargs.push("[OPTIONS]");
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    cargs.push("[CURVFILE...]");
    return cargs;
}


function mris_curvature_stats_outputs(
    params: MrisCurvatureStatsParameters,
    execution: Execution,
): MrisCurvatureStatsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisCurvatureStatsOutputs = {
        root: execution.outputFile("."),
        scaled_curvature_file: execution.outputFile([(params["subject_name"] ?? null), "/surf/", (params["hemisphere"] ?? null), ".[CURVATURE_FILES].scaled.crv"].join('')),
    };
    return ret;
}


function mris_curvature_stats_execute(
    params: MrisCurvatureStatsParameters,
    execution: Execution,
): MrisCurvatureStatsOutputs {
    /**
     * Tool for calculating statistics on surface curvature values.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisCurvatureStatsOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_curvature_stats_cargs(params, execution)
    const ret = mris_curvature_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_curvature_stats(
    subject_name: string,
    hemisphere: string,
    runner: Runner | null = null,
): MrisCurvatureStatsOutputs {
    /**
     * Tool for calculating statistics on surface curvature values.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject_name Subject name defined in the SUBJECTS_DIR
     * @param hemisphere Hemisphere, can be 'lh' or 'rh'
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisCurvatureStatsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_CURVATURE_STATS_METADATA);
    const params = mris_curvature_stats_params(subject_name, hemisphere)
    return mris_curvature_stats_execute(params, execution);
}


export {
      MRIS_CURVATURE_STATS_METADATA,
      MrisCurvatureStatsOutputs,
      MrisCurvatureStatsParameters,
      mris_curvature_stats,
      mris_curvature_stats_params,
};
