// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_COMPUTE_LGI_METADATA: Metadata = {
    id: "54e899bdd2e1bd731402ea4604c71a992774b070.boutiques",
    name: "mris_compute_lgi",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisComputeLgiParameters {
    "__STYXTYPE__": "mris_compute_lgi";
    "input_surface": InputPathType;
    "close_sphere_size"?: number | null | undefined;
    "smooth_iters"?: number | null | undefined;
    "step_size"?: number | null | undefined;
    "echo": boolean;
    "dontrun": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_compute_lgi": mris_compute_lgi_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_compute_lgi": mris_compute_lgi_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_compute_lgi(...)`.
 *
 * @interface
 */
interface MrisComputeLgiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Surface map file containing local gyrification measures
     */
    output_surface_map: OutputPathType;
}


function mris_compute_lgi_params(
    input_surface: InputPathType,
    close_sphere_size: number | null = null,
    smooth_iters: number | null = null,
    step_size: number | null = null,
    echo: boolean = false,
    dontrun: boolean = false,
): MrisComputeLgiParameters {
    /**
     * Build parameters.
    
     * @param input_surface Input surface file, typically lh.pial or rh.pial
     * @param close_sphere_size Use sphere of specified size in mm for morph closing operation (default: 15mm)
     * @param smooth_iters Smooth outer-surface specified number of iterations (default: 30)
     * @param step_size Skip every specified number of vertices when computing lGI (default: 100)
     * @param echo Enable command echo, for debug
     * @param dontrun Just show commands (don't run them)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_compute_lgi" as const,
        "input_surface": input_surface,
        "echo": echo,
        "dontrun": dontrun,
    };
    if (close_sphere_size !== null) {
        params["close_sphere_size"] = close_sphere_size;
    }
    if (smooth_iters !== null) {
        params["smooth_iters"] = smooth_iters;
    }
    if (step_size !== null) {
        params["step_size"] = step_size;
    }
    return params;
}


function mris_compute_lgi_cargs(
    params: MrisComputeLgiParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_compute_lgi");
    cargs.push(
        "--i",
        execution.inputFile((params["input_surface"] ?? null))
    );
    if ((params["close_sphere_size"] ?? null) !== null) {
        cargs.push(
            "--close_sphere_size",
            String((params["close_sphere_size"] ?? null))
        );
    }
    if ((params["smooth_iters"] ?? null) !== null) {
        cargs.push(
            "--smooth_iters",
            String((params["smooth_iters"] ?? null))
        );
    }
    if ((params["step_size"] ?? null) !== null) {
        cargs.push(
            "--step_size",
            String((params["step_size"] ?? null))
        );
    }
    if ((params["echo"] ?? null)) {
        cargs.push("--echo");
    }
    if ((params["dontrun"] ?? null)) {
        cargs.push("--dontrun");
    }
    return cargs;
}


function mris_compute_lgi_outputs(
    params: MrisComputeLgiParameters,
    execution: Execution,
): MrisComputeLgiOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisComputeLgiOutputs = {
        root: execution.outputFile("."),
        output_surface_map: execution.outputFile([path.basename((params["input_surface"] ?? null)), "_lgi"].join('')),
    };
    return ret;
}


function mris_compute_lgi_execute(
    params: MrisComputeLgiParameters,
    execution: Execution,
): MrisComputeLgiOutputs {
    /**
     * Computes local measurements of gyrification at thousands of points over the entire cortical surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisComputeLgiOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_compute_lgi_cargs(params, execution)
    const ret = mris_compute_lgi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_compute_lgi(
    input_surface: InputPathType,
    close_sphere_size: number | null = null,
    smooth_iters: number | null = null,
    step_size: number | null = null,
    echo: boolean = false,
    dontrun: boolean = false,
    runner: Runner | null = null,
): MrisComputeLgiOutputs {
    /**
     * Computes local measurements of gyrification at thousands of points over the entire cortical surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_surface Input surface file, typically lh.pial or rh.pial
     * @param close_sphere_size Use sphere of specified size in mm for morph closing operation (default: 15mm)
     * @param smooth_iters Smooth outer-surface specified number of iterations (default: 30)
     * @param step_size Skip every specified number of vertices when computing lGI (default: 100)
     * @param echo Enable command echo, for debug
     * @param dontrun Just show commands (don't run them)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisComputeLgiOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_COMPUTE_LGI_METADATA);
    const params = mris_compute_lgi_params(input_surface, close_sphere_size, smooth_iters, step_size, echo, dontrun)
    return mris_compute_lgi_execute(params, execution);
}


export {
      MRIS_COMPUTE_LGI_METADATA,
      MrisComputeLgiOutputs,
      MrisComputeLgiParameters,
      mris_compute_lgi,
      mris_compute_lgi_params,
};
