// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEG2FILLED_METADATA: Metadata = {
    id: "894fcea3b0a2a4a1b34ad187f3a8016973d50857.boutiques",
    name: "seg2filled",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Seg2filledParameters {
    "__STYXTYPE__": "seg2filled";
    "seg_file": InputPathType;
    "norm_file": InputPathType;
    "output_file": string;
    "ndil"?: number | null | undefined;
    "cavity_flag": boolean;
    "surf_name"?: string | null | undefined;
    "surf_dir"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "seg2filled": seg2filled_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "seg2filled": seg2filled_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `seg2filled(...)`.
 *
 * @interface
 */
interface Seg2filledOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output filled MGZ file.
     */
    out_filled_mgz: OutputPathType;
}


function seg2filled_params(
    seg_file: InputPathType,
    norm_file: InputPathType,
    output_file: string,
    ndil: number | null = null,
    cavity_flag: boolean = false,
    surf_name: string | null = null,
    surf_dir: string | null = null,
): Seg2filledParameters {
    /**
     * Build parameters.
    
     * @param seg_file Input aseg-style segmentation file (e.g., seg.mgz)
     * @param norm_file Normalization file (e.g., norm.mgz)
     * @param output_file Filled output file (e.g., filled.mgz)
     * @param ndil Number of iterations for dilation used to speed cavity detection.
     * @param cavity_flag Simulate a cavity to test the filling operation.
     * @param surf_name Name for the surface output (creates ?h.surfname).
     * @param surf_dir Directory to put the surface (default is same as filled).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "seg2filled" as const,
        "seg_file": seg_file,
        "norm_file": norm_file,
        "output_file": output_file,
        "cavity_flag": cavity_flag,
    };
    if (ndil !== null) {
        params["ndil"] = ndil;
    }
    if (surf_name !== null) {
        params["surf_name"] = surf_name;
    }
    if (surf_dir !== null) {
        params["surf_dir"] = surf_dir;
    }
    return params;
}


function seg2filled_cargs(
    params: Seg2filledParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("seg2filled");
    cargs.push(
        "-seg",
        ["-", execution.inputFile((params["seg_file"] ?? null))].join('')
    );
    cargs.push(
        "-norm",
        ["-", execution.inputFile((params["norm_file"] ?? null))].join('')
    );
    cargs.push(
        "-o",
        ["-", (params["output_file"] ?? null)].join('')
    );
    if ((params["ndil"] ?? null) !== null) {
        cargs.push(
            "--ndil",
            String((params["ndil"] ?? null))
        );
    }
    if ((params["cavity_flag"] ?? null)) {
        cargs.push("--cavity");
    }
    if ((params["surf_name"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf_name"] ?? null)
        );
    }
    if ((params["surf_dir"] ?? null) !== null) {
        cargs.push(
            "--surfdir",
            (params["surf_dir"] ?? null)
        );
    }
    return cargs;
}


function seg2filled_outputs(
    params: Seg2filledParameters,
    execution: Execution,
): Seg2filledOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Seg2filledOutputs = {
        root: execution.outputFile("."),
        out_filled_mgz: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function seg2filled_execute(
    params: Seg2filledParameters,
    execution: Execution,
): Seg2filledOutputs {
    /**
     * Creates a filled.mgz from an aseg-style segmentation using SAMSEG segmentation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Seg2filledOutputs`).
     */
    params = execution.params(params)
    const cargs = seg2filled_cargs(params, execution)
    const ret = seg2filled_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function seg2filled(
    seg_file: InputPathType,
    norm_file: InputPathType,
    output_file: string,
    ndil: number | null = null,
    cavity_flag: boolean = false,
    surf_name: string | null = null,
    surf_dir: string | null = null,
    runner: Runner | null = null,
): Seg2filledOutputs {
    /**
     * Creates a filled.mgz from an aseg-style segmentation using SAMSEG segmentation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param seg_file Input aseg-style segmentation file (e.g., seg.mgz)
     * @param norm_file Normalization file (e.g., norm.mgz)
     * @param output_file Filled output file (e.g., filled.mgz)
     * @param ndil Number of iterations for dilation used to speed cavity detection.
     * @param cavity_flag Simulate a cavity to test the filling operation.
     * @param surf_name Name for the surface output (creates ?h.surfname).
     * @param surf_dir Directory to put the surface (default is same as filled).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Seg2filledOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEG2FILLED_METADATA);
    const params = seg2filled_params(seg_file, norm_file, output_file, ndil, cavity_flag, surf_name, surf_dir)
    return seg2filled_execute(params, execution);
}


export {
      SEG2FILLED_METADATA,
      Seg2filledOutputs,
      Seg2filledParameters,
      seg2filled,
      seg2filled_params,
};
