// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TRFIX_METADATA: Metadata = {
    id: "a4d956a40d63cb24aa10d171635193de75a94468.boutiques",
    name: "3dTRfix",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTrfixParameters {
    "@type": "afni.3dTRfix";
    "input_file": InputPathType;
    "tr_list"?: InputPathType | null | undefined;
    "time_list"?: InputPathType | null | undefined;
    "prefix": string;
    "output_tr"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dTRfix": v_3d_trfix_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dTRfix": v_3d_trfix_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_trfix(...)`.
 *
 * @interface
 */
interface V3dTrfixOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset header file
     */
    output_file_head: OutputPathType;
    /**
     * Output dataset brik file
     */
    output_file_brik: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input dataset
 * @param prefix Prefix name for output dataset
 * @param tr_list File of time gaps between sub-bricks in input dataset
 * @param time_list File with times at each sub-brick in the input dataset
 * @param output_tr TR value for output dataset (in seconds)
 *
 * @returns Parameter dictionary
 */
function v_3d_trfix_params(
    input_file: InputPathType,
    prefix: string,
    tr_list: InputPathType | null = null,
    time_list: InputPathType | null = null,
    output_tr: number | null = null,
): V3dTrfixParameters {
    const params = {
        "@type": "afni.3dTRfix" as const,
        "input_file": input_file,
        "prefix": prefix,
    };
    if (tr_list !== null) {
        params["tr_list"] = tr_list;
    }
    if (time_list !== null) {
        params["time_list"] = time_list;
    }
    if (output_tr !== null) {
        params["output_tr"] = output_tr;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_trfix_cargs(
    params: V3dTrfixParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dTRfix");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["tr_list"] ?? null) !== null) {
        cargs.push(
            "-TRlist",
            execution.inputFile((params["tr_list"] ?? null))
        );
    }
    if ((params["time_list"] ?? null) !== null) {
        cargs.push(
            "-TIMElist",
            execution.inputFile((params["time_list"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["output_tr"] ?? null) !== null) {
        cargs.push(
            "-TRout",
            String((params["output_tr"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_trfix_outputs(
    params: V3dTrfixParameters,
    execution: Execution,
): V3dTrfixOutputs {
    const ret: V3dTrfixOutputs = {
        root: execution.outputFile("."),
        output_file_head: execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')),
        output_file_brik: execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')),
    };
    return ret;
}


/**
 * Re-sample dataset with irregular time grid to regular time grid via linear interpolation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dTrfixOutputs`).
 */
function v_3d_trfix_execute(
    params: V3dTrfixParameters,
    execution: Execution,
): V3dTrfixOutputs {
    params = execution.params(params)
    const cargs = v_3d_trfix_cargs(params, execution)
    const ret = v_3d_trfix_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Re-sample dataset with irregular time grid to regular time grid via linear interpolation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Input dataset
 * @param prefix Prefix name for output dataset
 * @param tr_list File of time gaps between sub-bricks in input dataset
 * @param time_list File with times at each sub-brick in the input dataset
 * @param output_tr TR value for output dataset (in seconds)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTrfixOutputs`).
 */
function v_3d_trfix(
    input_file: InputPathType,
    prefix: string,
    tr_list: InputPathType | null = null,
    time_list: InputPathType | null = null,
    output_tr: number | null = null,
    runner: Runner | null = null,
): V3dTrfixOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TRFIX_METADATA);
    const params = v_3d_trfix_params(input_file, prefix, tr_list, time_list, output_tr)
    return v_3d_trfix_execute(params, execution);
}


export {
      V3dTrfixOutputs,
      V3dTrfixParameters,
      V_3D_TRFIX_METADATA,
      v_3d_trfix,
      v_3d_trfix_cargs,
      v_3d_trfix_execute,
      v_3d_trfix_outputs,
      v_3d_trfix_params,
};
