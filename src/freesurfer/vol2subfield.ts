// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOL2SUBFIELD_METADATA: Metadata = {
    id: "8e87dfdca63dc2f907be01af6c0939094847bf88.boutiques",
    name: "vol2subfield",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Vol2subfieldParameters {
    "@type"?: "freesurfer/vol2subfield";
    "input_volume": InputPathType;
    "subfield_volume": InputPathType;
    "registration_file": InputPathType;
    "output_volume"?: string | null | undefined;
    "output_registration"?: string | null | undefined;
    "stats_output"?: string | null | undefined;
    "avgwf_output"?: string | null | undefined;
    "avgwfvol_output"?: string | null | undefined;
    "color_table"?: InputPathType | null | undefined;
    "interpolation_nearest": boolean;
    "interpolation_trilin": boolean;
    "interpolation_cubic": boolean;
    "tmp_directory"?: string | null | undefined;
    "preset_subfield_lh_hippoamyg": boolean;
    "preset_subfield_rh_hippoamyg": boolean;
    "preset_subfield_lh_hbt": boolean;
    "preset_subfield_rh_hbt": boolean;
    "preset_subfield_thalamus": boolean;
    "preset_subfield_brainstem": boolean;
}
type Vol2subfieldParametersTagged = Required<Pick<Vol2subfieldParameters, '@type'>> & Vol2subfieldParameters;


/**
 * Output object returned when calling `Vol2subfieldParameters(...)`.
 *
 * @interface
 */
interface Vol2subfieldOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume mapped into subfield volume space
     */
    mapped_output_volume: OutputPathType | null;
    /**
     * Output registration file
     */
    output_registration_file: OutputPathType | null;
    /**
     * Statistics output file generated by mri_segstats
     */
    segmentation_stats_file: OutputPathType | null;
    /**
     * Average waveform output file
     */
    average_waveform_file: OutputPathType | null;
    /**
     * Average waveform volume output file
     */
    average_waveform_volume_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume
 * @param subfield_volume Subfield volume (full path or relative to subject/mri)
 * @param registration_file Registration that maps input volume to conformed space
 * @param output_volume Output volume
 * @param output_registration Registration between input volume and subfield
 * @param stats_output Run mri_segstats with --sum output to this file
 * @param avgwf_output Run mri_segstats with --avgwf output to this file
 * @param avgwfvol_output Run mri_segstats with --avgwfvol output to this file
 * @param color_table Color table to use with mri_segstats
 * @param interpolation_nearest Use nearest neighbor interpolation
 * @param interpolation_trilin Use triliear interpolation
 * @param interpolation_cubic Use cubic interpolation
 * @param tmp_directory Temporary directory for debugging
 * @param preset_subfield_lh_hippoamyg Set subfield to lh.hippoAmygLabels-T1.v21.mgz
 * @param preset_subfield_rh_hippoamyg Set subfield to rh.hippoAmygLabels-T1.v21.mgz
 * @param preset_subfield_lh_hbt Set subfield to lh.hippoAmygLabels-T1.v21.HBT.mgz
 * @param preset_subfield_rh_hbt Set subfield to rh.hippoAmygLabels-T1.v21.HBT.mgz
 * @param preset_subfield_thalamus Set subfield to ThalamicNuclei.v10.T1.mgz
 * @param preset_subfield_brainstem Set subfield to brainstemSsLabels.v12.mgz
 *
 * @returns Parameter dictionary
 */
function vol2subfield_params(
    input_volume: InputPathType,
    subfield_volume: InputPathType,
    registration_file: InputPathType,
    output_volume: string | null = null,
    output_registration: string | null = null,
    stats_output: string | null = null,
    avgwf_output: string | null = null,
    avgwfvol_output: string | null = null,
    color_table: InputPathType | null = null,
    interpolation_nearest: boolean = false,
    interpolation_trilin: boolean = false,
    interpolation_cubic: boolean = false,
    tmp_directory: string | null = null,
    preset_subfield_lh_hippoamyg: boolean = false,
    preset_subfield_rh_hippoamyg: boolean = false,
    preset_subfield_lh_hbt: boolean = false,
    preset_subfield_rh_hbt: boolean = false,
    preset_subfield_thalamus: boolean = false,
    preset_subfield_brainstem: boolean = false,
): Vol2subfieldParametersTagged {
    const params = {
        "@type": "freesurfer/vol2subfield" as const,
        "input_volume": input_volume,
        "subfield_volume": subfield_volume,
        "registration_file": registration_file,
        "interpolation_nearest": interpolation_nearest,
        "interpolation_trilin": interpolation_trilin,
        "interpolation_cubic": interpolation_cubic,
        "preset_subfield_lh_hippoamyg": preset_subfield_lh_hippoamyg,
        "preset_subfield_rh_hippoamyg": preset_subfield_rh_hippoamyg,
        "preset_subfield_lh_hbt": preset_subfield_lh_hbt,
        "preset_subfield_rh_hbt": preset_subfield_rh_hbt,
        "preset_subfield_thalamus": preset_subfield_thalamus,
        "preset_subfield_brainstem": preset_subfield_brainstem,
    };
    if (output_volume !== null) {
        params["output_volume"] = output_volume;
    }
    if (output_registration !== null) {
        params["output_registration"] = output_registration;
    }
    if (stats_output !== null) {
        params["stats_output"] = stats_output;
    }
    if (avgwf_output !== null) {
        params["avgwf_output"] = avgwf_output;
    }
    if (avgwfvol_output !== null) {
        params["avgwfvol_output"] = avgwfvol_output;
    }
    if (color_table !== null) {
        params["color_table"] = color_table;
    }
    if (tmp_directory !== null) {
        params["tmp_directory"] = tmp_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function vol2subfield_cargs(
    params: Vol2subfieldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("vol2subfield");
    cargs.push(
        "--i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "--sf",
        execution.inputFile((params["subfield_volume"] ?? null))
    );
    cargs.push(
        "--reg",
        execution.inputFile((params["registration_file"] ?? null))
    );
    if ((params["output_volume"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_volume"] ?? null)
        );
    }
    if ((params["output_registration"] ?? null) !== null) {
        cargs.push(
            "--outreg",
            (params["output_registration"] ?? null)
        );
    }
    if ((params["stats_output"] ?? null) !== null) {
        cargs.push(
            "--stats",
            (params["stats_output"] ?? null)
        );
    }
    if ((params["avgwf_output"] ?? null) !== null) {
        cargs.push(
            "--avgwf",
            (params["avgwf_output"] ?? null)
        );
    }
    if ((params["avgwfvol_output"] ?? null) !== null) {
        cargs.push(
            "--avgwfvol",
            (params["avgwfvol_output"] ?? null)
        );
    }
    if ((params["color_table"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["color_table"] ?? null))
        );
    }
    if ((params["interpolation_nearest"] ?? false)) {
        cargs.push("--nearest");
    }
    if ((params["interpolation_trilin"] ?? false)) {
        cargs.push("--trilin");
    }
    if ((params["interpolation_cubic"] ?? false)) {
        cargs.push("--cubic");
    }
    if ((params["tmp_directory"] ?? null) !== null) {
        cargs.push(
            "--tmp",
            (params["tmp_directory"] ?? null)
        );
    }
    if ((params["preset_subfield_lh_hippoamyg"] ?? false)) {
        cargs.push("--lh.hippoamyg");
    }
    if ((params["preset_subfield_rh_hippoamyg"] ?? false)) {
        cargs.push("--rh.hippoamyg");
    }
    if ((params["preset_subfield_lh_hbt"] ?? false)) {
        cargs.push("--lh.hbt");
    }
    if ((params["preset_subfield_rh_hbt"] ?? false)) {
        cargs.push("--rh.hbt");
    }
    if ((params["preset_subfield_thalamus"] ?? false)) {
        cargs.push("--thalamus");
    }
    if ((params["preset_subfield_brainstem"] ?? false)) {
        cargs.push("--brainstem");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function vol2subfield_outputs(
    params: Vol2subfieldParameters,
    execution: Execution,
): Vol2subfieldOutputs {
    const ret: Vol2subfieldOutputs = {
        root: execution.outputFile("."),
        mapped_output_volume: ((params["output_volume"] ?? null) !== null) ? execution.outputFile([(params["output_volume"] ?? null)].join('')) : null,
        output_registration_file: ((params["output_registration"] ?? null) !== null) ? execution.outputFile([(params["output_registration"] ?? null)].join('')) : null,
        segmentation_stats_file: ((params["stats_output"] ?? null) !== null) ? execution.outputFile([(params["stats_output"] ?? null)].join('')) : null,
        average_waveform_file: ((params["avgwf_output"] ?? null) !== null) ? execution.outputFile([(params["avgwf_output"] ?? null)].join('')) : null,
        average_waveform_volume_file: ((params["avgwfvol_output"] ?? null) !== null) ? execution.outputFile([(params["avgwfvol_output"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * vol2subfield
 *
 * A tool for integrating arbitrary volumes with volumes that share a RAS space with the orig volume in the FreeSurfer mri folder.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Vol2subfieldOutputs`).
 */
function vol2subfield_execute(
    params: Vol2subfieldParameters,
    runner: Runner | null = null,
): Vol2subfieldOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOL2SUBFIELD_METADATA);
    params = execution.params(params)
    const cargs = vol2subfield_cargs(params, execution)
    const ret = vol2subfield_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * vol2subfield
 *
 * A tool for integrating arbitrary volumes with volumes that share a RAS space with the orig volume in the FreeSurfer mri folder.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume
 * @param subfield_volume Subfield volume (full path or relative to subject/mri)
 * @param registration_file Registration that maps input volume to conformed space
 * @param output_volume Output volume
 * @param output_registration Registration between input volume and subfield
 * @param stats_output Run mri_segstats with --sum output to this file
 * @param avgwf_output Run mri_segstats with --avgwf output to this file
 * @param avgwfvol_output Run mri_segstats with --avgwfvol output to this file
 * @param color_table Color table to use with mri_segstats
 * @param interpolation_nearest Use nearest neighbor interpolation
 * @param interpolation_trilin Use triliear interpolation
 * @param interpolation_cubic Use cubic interpolation
 * @param tmp_directory Temporary directory for debugging
 * @param preset_subfield_lh_hippoamyg Set subfield to lh.hippoAmygLabels-T1.v21.mgz
 * @param preset_subfield_rh_hippoamyg Set subfield to rh.hippoAmygLabels-T1.v21.mgz
 * @param preset_subfield_lh_hbt Set subfield to lh.hippoAmygLabels-T1.v21.HBT.mgz
 * @param preset_subfield_rh_hbt Set subfield to rh.hippoAmygLabels-T1.v21.HBT.mgz
 * @param preset_subfield_thalamus Set subfield to ThalamicNuclei.v10.T1.mgz
 * @param preset_subfield_brainstem Set subfield to brainstemSsLabels.v12.mgz
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Vol2subfieldOutputs`).
 */
function vol2subfield(
    input_volume: InputPathType,
    subfield_volume: InputPathType,
    registration_file: InputPathType,
    output_volume: string | null = null,
    output_registration: string | null = null,
    stats_output: string | null = null,
    avgwf_output: string | null = null,
    avgwfvol_output: string | null = null,
    color_table: InputPathType | null = null,
    interpolation_nearest: boolean = false,
    interpolation_trilin: boolean = false,
    interpolation_cubic: boolean = false,
    tmp_directory: string | null = null,
    preset_subfield_lh_hippoamyg: boolean = false,
    preset_subfield_rh_hippoamyg: boolean = false,
    preset_subfield_lh_hbt: boolean = false,
    preset_subfield_rh_hbt: boolean = false,
    preset_subfield_thalamus: boolean = false,
    preset_subfield_brainstem: boolean = false,
    runner: Runner | null = null,
): Vol2subfieldOutputs {
    const params = vol2subfield_params(input_volume, subfield_volume, registration_file, output_volume, output_registration, stats_output, avgwf_output, avgwfvol_output, color_table, interpolation_nearest, interpolation_trilin, interpolation_cubic, tmp_directory, preset_subfield_lh_hippoamyg, preset_subfield_rh_hippoamyg, preset_subfield_lh_hbt, preset_subfield_rh_hbt, preset_subfield_thalamus, preset_subfield_brainstem)
    return vol2subfield_execute(params, runner);
}


export {
      VOL2SUBFIELD_METADATA,
      Vol2subfieldOutputs,
      vol2subfield,
      vol2subfield_execute,
      vol2subfield_params,
};
