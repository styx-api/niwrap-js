// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMGREG_4DFP_METADATA: Metadata = {
    id: "56f755f16ccfb6ca990d0bdefae3bf38a4194227.boutiques",
    name: "imgreg_4dfp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Imgreg4dfpParameters {
    "__STYXTYPE__": "imgreg_4dfp";
    "target_image": InputPathType;
    "target_mask": string;
    "source_image": InputPathType;
    "source_mask": string;
    "t4file": string;
    "mode": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "imgreg_4dfp": imgreg_4dfp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imgreg_4dfp(...)`.
 *
 * @interface
 */
interface Imgreg4dfpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function imgreg_4dfp_params(
    target_image: InputPathType,
    source_image: InputPathType,
    t4file: string,
    mode: string,
    target_mask: string = "none",
    source_mask: string = "none",
): Imgreg4dfpParameters {
    /**
     * Build parameters.
    
     * @param target_image Target image
     * @param source_image Source image
     * @param t4file Transformation file
     * @param mode Mode of operation
     * @param target_mask Target mask
     * @param source_mask Source mask
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "imgreg_4dfp" as const,
        "target_image": target_image,
        "target_mask": target_mask,
        "source_image": source_image,
        "source_mask": source_mask,
        "t4file": t4file,
        "mode": mode,
    };
    return params;
}


function imgreg_4dfp_cargs(
    params: Imgreg4dfpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("imgreg_4dfp");
    cargs.push(execution.inputFile((params["target_image"] ?? null)));
    cargs.push((params["target_mask"] ?? null));
    cargs.push(execution.inputFile((params["source_image"] ?? null)));
    cargs.push((params["source_mask"] ?? null));
    cargs.push((params["t4file"] ?? null));
    cargs.push((params["mode"] ?? null));
    return cargs;
}


function imgreg_4dfp_outputs(
    params: Imgreg4dfpParameters,
    execution: Execution,
): Imgreg4dfpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Imgreg4dfpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function imgreg_4dfp_execute(
    params: Imgreg4dfpParameters,
    execution: Execution,
): Imgreg4dfpOutputs {
    /**
     * Image registration utility using 4dfp.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Imgreg4dfpOutputs`).
     */
    params = execution.params(params)
    const cargs = imgreg_4dfp_cargs(params, execution)
    const ret = imgreg_4dfp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function imgreg_4dfp(
    target_image: InputPathType,
    source_image: InputPathType,
    t4file: string,
    mode: string,
    target_mask: string = "none",
    source_mask: string = "none",
    runner: Runner | null = null,
): Imgreg4dfpOutputs {
    /**
     * Image registration utility using 4dfp.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param target_image Target image
     * @param source_image Source image
     * @param t4file Transformation file
     * @param mode Mode of operation
     * @param target_mask Target mask
     * @param source_mask Source mask
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Imgreg4dfpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMGREG_4DFP_METADATA);
    const params = imgreg_4dfp_params(target_image, source_image, t4file, mode, target_mask, source_mask)
    return imgreg_4dfp_execute(params, execution);
}


export {
      IMGREG_4DFP_METADATA,
      Imgreg4dfpOutputs,
      Imgreg4dfpParameters,
      imgreg_4dfp,
      imgreg_4dfp_params,
};
