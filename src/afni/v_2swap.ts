// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_2SWAP_METADATA: Metadata = {
    id: "7816342873aa809adec96eabf2b229c9a0d64bcc.boutiques",
    name: "2swap",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V2swapParameters {
    "@type": "afni.2swap";
    "quiet": boolean;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.2swap": v_2swap_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_2swap(...)`.
 *
 * @interface
 */
interface V2swapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input files
 * @param quiet Work quietly
 *
 * @returns Parameter dictionary
 */
function v_2swap_params(
    input_files: Array<InputPathType>,
    quiet: boolean = false,
): V2swapParameters {
    const params = {
        "@type": "afni.2swap" as const,
        "quiet": quiet,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_2swap_cargs(
    params: V2swapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("2swap");
    if ((params["quiet"] ?? null)) {
        cargs.push("-q");
    }
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_2swap_outputs(
    params: V2swapParameters,
    execution: Execution,
): V2swapOutputs {
    const ret: V2swapOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Swaps byte pairs on the files listed.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2swapOutputs`).
 */
function v_2swap_execute(
    params: V2swapParameters,
    runner: Runner | null = null,
): V2swapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_2SWAP_METADATA);
    params = execution.params(params)
    const cargs = v_2swap_cargs(params, execution)
    const ret = v_2swap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Swaps byte pairs on the files listed.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input files
 * @param quiet Work quietly
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2swapOutputs`).
 */
function v_2swap(
    input_files: Array<InputPathType>,
    quiet: boolean = false,
    runner: Runner | null = null,
): V2swapOutputs {
    const params = v_2swap_params(input_files, quiet)
    return v_2swap_execute(params, runner);
}


export {
      V2swapOutputs,
      V2swapParameters,
      V_2SWAP_METADATA,
      v_2swap,
      v_2swap_execute,
      v_2swap_params,
};
