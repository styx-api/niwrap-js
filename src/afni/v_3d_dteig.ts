// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DTEIG_METADATA: Metadata = {
    id: "96580e3014e6c3c304ee3899de8f8b2be948c0fe.boutiques",
    name: "3dDTeig",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDteigParameters {
    "@type"?: "afni/3dDTeig";
    "input_dataset": string;
    "prefix"?: string | null | undefined;
    "datum"?: "byte" | "short" | "float" | null | undefined;
    "sep_dsets": boolean;
    "uddata": boolean;
}
type V3dDteigParametersTagged = Required<Pick<V3dDteigParameters, '@type'>> & V3dDteigParameters;


/**
 * Output object returned when calling `V3dDteigParameters(...)`.
 *
 * @interface
 */
interface V3dDteigOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset with computed eigenvalues, eigenvectors, FA, and MD
     */
    output_dataset: OutputPathType | null;
    /**
     * Output dataset for eigenvalues
     */
    output_lambda: OutputPathType | null;
    /**
     * Output dataset for eigenvectors
     */
    output_eigvec: OutputPathType | null;
    /**
     * Output dataset for fractional anisotropy
     */
    output_fa: OutputPathType | null;
    /**
     * Output dataset for mean diffusivity
     */
    output_md: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset of Dxx, Dxy, Dyy, Dxz, Dyz, Dzz sub-bricks
 * @param prefix Use the given prefix for the output dataset
 * @param datum Coerce the output data to be stored as the given type (byte, short, or float).
 * @param sep_dsets Save eigenvalues, vectors, FA, and MD in separate datasets
 * @param uddata Tensor data is stored as upper diagonal instead of lower diagonal
 *
 * @returns Parameter dictionary
 */
function v_3d_dteig_params(
    input_dataset: string,
    prefix: string | null = null,
    datum: "byte" | "short" | "float" | null = null,
    sep_dsets: boolean = false,
    uddata: boolean = false,
): V3dDteigParametersTagged {
    const params = {
        "@type": "afni/3dDTeig" as const,
        "input_dataset": input_dataset,
        "sep_dsets": sep_dsets,
        "uddata": uddata,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_dteig_cargs(
    params: V3dDteigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dDTeig");
    cargs.push((params["input_dataset"] ?? null));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    if ((params["sep_dsets"] ?? false)) {
        cargs.push("-sep_dsets");
    }
    if ((params["uddata"] ?? false)) {
        cargs.push("-uddata");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_dteig_outputs(
    params: V3dDteigParameters,
    execution: Execution,
): V3dDteigOutputs {
    const ret: V3dDteigOutputs = {
        root: execution.outputFile("."),
        output_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
        output_lambda: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_lambda.nii.gz"].join('')) : null,
        output_eigvec: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_eigvec.nii.gz"].join('')) : null,
        output_fa: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_FA.nii.gz"].join('')) : null,
        output_md: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_MD.nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * 3dDTeig
 *
 * Computes eigenvalues and eigenvectors for an input dataset of tensors.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDteigOutputs`).
 */
function v_3d_dteig_execute(
    params: V3dDteigParameters,
    runner: Runner | null = null,
): V3dDteigOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DTEIG_METADATA);
    params = execution.params(params)
    const cargs = v_3d_dteig_cargs(params, execution)
    const ret = v_3d_dteig_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dDTeig
 *
 * Computes eigenvalues and eigenvectors for an input dataset of tensors.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset of Dxx, Dxy, Dyy, Dxz, Dyz, Dzz sub-bricks
 * @param prefix Use the given prefix for the output dataset
 * @param datum Coerce the output data to be stored as the given type (byte, short, or float).
 * @param sep_dsets Save eigenvalues, vectors, FA, and MD in separate datasets
 * @param uddata Tensor data is stored as upper diagonal instead of lower diagonal
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDteigOutputs`).
 */
function v_3d_dteig(
    input_dataset: string,
    prefix: string | null = null,
    datum: "byte" | "short" | "float" | null = null,
    sep_dsets: boolean = false,
    uddata: boolean = false,
    runner: Runner | null = null,
): V3dDteigOutputs {
    const params = v_3d_dteig_params(input_dataset, prefix, datum, sep_dsets, uddata)
    return v_3d_dteig_execute(params, runner);
}


export {
      V3dDteigOutputs,
      V_3D_DTEIG_METADATA,
      v_3d_dteig,
      v_3d_dteig_execute,
      v_3d_dteig_params,
};
