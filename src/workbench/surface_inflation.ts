// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_INFLATION_METADATA: Metadata = {
    id: "52fbef0aa8fba4f9a9a072fba44a8b1d1157b05d.boutiques",
    name: "surface-inflation",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceInflationParameters {
    "@type": "workbench.surface-inflation";
    "anatomical_surface_in": InputPathType;
    "surface_in": InputPathType;
    "number_of_smoothing_cycles": number;
    "smoothing_strength": number;
    "smoothing_iterations": number;
    "inflation_factor": number;
    "surface_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-inflation": surface_inflation_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-inflation": surface_inflation_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_inflation(...)`.
 *
 * @interface
 */
interface SurfaceInflationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output surface file
     */
    surface_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param anatomical_surface_in the anatomical surface
 * @param surface_in the surface file to inflate
 * @param number_of_smoothing_cycles number of smoothing cycles
 * @param smoothing_strength smoothing strength (ranges [0.0 - 1.0])
 * @param smoothing_iterations smoothing iterations
 * @param inflation_factor inflation factor
 * @param surface_out output surface file
 *
 * @returns Parameter dictionary
 */
function surface_inflation_params(
    anatomical_surface_in: InputPathType,
    surface_in: InputPathType,
    number_of_smoothing_cycles: number,
    smoothing_strength: number,
    smoothing_iterations: number,
    inflation_factor: number,
    surface_out: string,
): SurfaceInflationParameters {
    const params = {
        "@type": "workbench.surface-inflation" as const,
        "anatomical_surface_in": anatomical_surface_in,
        "surface_in": surface_in,
        "number_of_smoothing_cycles": number_of_smoothing_cycles,
        "smoothing_strength": smoothing_strength,
        "smoothing_iterations": smoothing_iterations,
        "inflation_factor": inflation_factor,
        "surface_out": surface_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_inflation_cargs(
    params: SurfaceInflationParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-inflation");
    cargs.push(execution.inputFile((params["anatomical_surface_in"] ?? null)));
    cargs.push(execution.inputFile((params["surface_in"] ?? null)));
    cargs.push(String((params["number_of_smoothing_cycles"] ?? null)));
    cargs.push(String((params["smoothing_strength"] ?? null)));
    cargs.push(String((params["smoothing_iterations"] ?? null)));
    cargs.push(String((params["inflation_factor"] ?? null)));
    cargs.push((params["surface_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_inflation_outputs(
    params: SurfaceInflationParameters,
    execution: Execution,
): SurfaceInflationOutputs {
    const ret: SurfaceInflationOutputs = {
        root: execution.outputFile("."),
        surface_out: execution.outputFile([(params["surface_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-inflation
 *
 * Surface inflation.
 *
 * Inflate a surface by performing cycles that consist of smoothing  followed by inflation (to correct shrinkage caused by smoothing).
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceInflationOutputs`).
 */
function surface_inflation_execute(
    params: SurfaceInflationParameters,
    runner: Runner | null = null,
): SurfaceInflationOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_INFLATION_METADATA);
    params = execution.params(params)
    const cargs = surface_inflation_cargs(params, execution)
    const ret = surface_inflation_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-inflation
 *
 * Surface inflation.
 *
 * Inflate a surface by performing cycles that consist of smoothing  followed by inflation (to correct shrinkage caused by smoothing).
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param anatomical_surface_in the anatomical surface
 * @param surface_in the surface file to inflate
 * @param number_of_smoothing_cycles number of smoothing cycles
 * @param smoothing_strength smoothing strength (ranges [0.0 - 1.0])
 * @param smoothing_iterations smoothing iterations
 * @param inflation_factor inflation factor
 * @param surface_out output surface file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceInflationOutputs`).
 */
function surface_inflation(
    anatomical_surface_in: InputPathType,
    surface_in: InputPathType,
    number_of_smoothing_cycles: number,
    smoothing_strength: number,
    smoothing_iterations: number,
    inflation_factor: number,
    surface_out: string,
    runner: Runner | null = null,
): SurfaceInflationOutputs {
    const params = surface_inflation_params(anatomical_surface_in, surface_in, number_of_smoothing_cycles, smoothing_strength, smoothing_iterations, inflation_factor, surface_out)
    return surface_inflation_execute(params, runner);
}


export {
      SURFACE_INFLATION_METADATA,
      SurfaceInflationOutputs,
      SurfaceInflationParameters,
      surface_inflation,
      surface_inflation_execute,
      surface_inflation_params,
};
