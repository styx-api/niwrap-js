// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_PARCELLATE_METADATA: Metadata = {
    id: "7a5e906368600f826c9c63355f1cd694fa2a618a.boutiques",
    name: "cifti-parcellate",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiParcellateSpatialWeightsParameters {
    "@type": "workbench.cifti-parcellate.spatial_weights";
    "opt_left_area_surf_left_surf"?: InputPathType | null | undefined;
    "opt_right_area_surf_right_surf"?: InputPathType | null | undefined;
    "opt_cerebellum_area_surf_cerebellum_surf"?: InputPathType | null | undefined;
    "opt_left_area_metric_left_metric"?: InputPathType | null | undefined;
    "opt_right_area_metric_right_metric"?: InputPathType | null | undefined;
    "opt_cerebellum_area_metric_cerebellum_metric"?: InputPathType | null | undefined;
}


interface CiftiParcellateExcludeOutliersParameters {
    "@type": "workbench.cifti-parcellate.exclude_outliers";
    "sigma_below": number;
    "sigma_above": number;
}


interface CiftiParcellateParameters {
    "@type": "workbench.cifti-parcellate";
    "cifti_in": InputPathType;
    "cifti_label": InputPathType;
    "direction": string;
    "cifti_out": string;
    "spatial_weights"?: CiftiParcellateSpatialWeightsParameters | null | undefined;
    "opt_cifti_weights_weight_cifti"?: InputPathType | null | undefined;
    "opt_method_method"?: string | null | undefined;
    "exclude_outliers"?: CiftiParcellateExcludeOutliersParameters | null | undefined;
    "opt_only_numeric": boolean;
    "opt_fill_value_value"?: number | null | undefined;
    "opt_nonempty_mask_out_mask_out"?: string | null | undefined;
    "opt_legacy_mode": boolean;
    "opt_include_empty": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-parcellate": cifti_parcellate_cargs,
        "workbench.cifti-parcellate.spatial_weights": cifti_parcellate_spatial_weights_cargs,
        "workbench.cifti-parcellate.exclude_outliers": cifti_parcellate_exclude_outliers_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-parcellate": cifti_parcellate_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param opt_left_area_surf_left_surf use a surface for left vertex areas: the left surface to use, areas are in mm^2
 * @param opt_right_area_surf_right_surf use a surface for right vertex areas: the right surface to use, areas are in mm^2
 * @param opt_cerebellum_area_surf_cerebellum_surf use a surface for cerebellum vertex areas: the cerebellum surface to use, areas are in mm^2
 * @param opt_left_area_metric_left_metric use a metric file for left vertex weights: metric file containing left vertex weights
 * @param opt_right_area_metric_right_metric use a metric file for right vertex weights: metric file containing right vertex weights
 * @param opt_cerebellum_area_metric_cerebellum_metric use a metric file for cerebellum vertex weights: metric file containing cerebellum vertex weights
 *
 * @returns Parameter dictionary
 */
function cifti_parcellate_spatial_weights_params(
    opt_left_area_surf_left_surf: InputPathType | null = null,
    opt_right_area_surf_right_surf: InputPathType | null = null,
    opt_cerebellum_area_surf_cerebellum_surf: InputPathType | null = null,
    opt_left_area_metric_left_metric: InputPathType | null = null,
    opt_right_area_metric_right_metric: InputPathType | null = null,
    opt_cerebellum_area_metric_cerebellum_metric: InputPathType | null = null,
): CiftiParcellateSpatialWeightsParameters {
    const params = {
        "@type": "workbench.cifti-parcellate.spatial_weights" as const,
    };
    if (opt_left_area_surf_left_surf !== null) {
        params["opt_left_area_surf_left_surf"] = opt_left_area_surf_left_surf;
    }
    if (opt_right_area_surf_right_surf !== null) {
        params["opt_right_area_surf_right_surf"] = opt_right_area_surf_right_surf;
    }
    if (opt_cerebellum_area_surf_cerebellum_surf !== null) {
        params["opt_cerebellum_area_surf_cerebellum_surf"] = opt_cerebellum_area_surf_cerebellum_surf;
    }
    if (opt_left_area_metric_left_metric !== null) {
        params["opt_left_area_metric_left_metric"] = opt_left_area_metric_left_metric;
    }
    if (opt_right_area_metric_right_metric !== null) {
        params["opt_right_area_metric_right_metric"] = opt_right_area_metric_right_metric;
    }
    if (opt_cerebellum_area_metric_cerebellum_metric !== null) {
        params["opt_cerebellum_area_metric_cerebellum_metric"] = opt_cerebellum_area_metric_cerebellum_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_parcellate_spatial_weights_cargs(
    params: CiftiParcellateSpatialWeightsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-spatial-weights");
    if ((params["opt_left_area_surf_left_surf"] ?? null) !== null) {
        cargs.push(
            "-left-area-surf",
            execution.inputFile((params["opt_left_area_surf_left_surf"] ?? null))
        );
    }
    if ((params["opt_right_area_surf_right_surf"] ?? null) !== null) {
        cargs.push(
            "-right-area-surf",
            execution.inputFile((params["opt_right_area_surf_right_surf"] ?? null))
        );
    }
    if ((params["opt_cerebellum_area_surf_cerebellum_surf"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-area-surf",
            execution.inputFile((params["opt_cerebellum_area_surf_cerebellum_surf"] ?? null))
        );
    }
    if ((params["opt_left_area_metric_left_metric"] ?? null) !== null) {
        cargs.push(
            "-left-area-metric",
            execution.inputFile((params["opt_left_area_metric_left_metric"] ?? null))
        );
    }
    if ((params["opt_right_area_metric_right_metric"] ?? null) !== null) {
        cargs.push(
            "-right-area-metric",
            execution.inputFile((params["opt_right_area_metric_right_metric"] ?? null))
        );
    }
    if ((params["opt_cerebellum_area_metric_cerebellum_metric"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-area-metric",
            execution.inputFile((params["opt_cerebellum_area_metric_cerebellum_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param sigma_below number of standard deviations below the mean to include
 * @param sigma_above number of standard deviations above the mean to include
 *
 * @returns Parameter dictionary
 */
function cifti_parcellate_exclude_outliers_params(
    sigma_below: number,
    sigma_above: number,
): CiftiParcellateExcludeOutliersParameters {
    const params = {
        "@type": "workbench.cifti-parcellate.exclude_outliers" as const,
        "sigma_below": sigma_below,
        "sigma_above": sigma_above,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_parcellate_exclude_outliers_cargs(
    params: CiftiParcellateExcludeOutliersParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-exclude-outliers");
    cargs.push(String((params["sigma_below"] ?? null)));
    cargs.push(String((params["sigma_above"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `cifti_parcellate(...)`.
 *
 * @interface
 */
interface CiftiParcellateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti file
     */
    cifti_out: OutputPathType;
    /**
     * output a matching pscalar file that has 0s in empty parcels, and 1s elsewhere: the output mask file
     */
    opt_nonempty_mask_out_mask_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param cifti_in the cifti file to parcellate
 * @param cifti_label a cifti label file to use for the parcellation
 * @param direction which mapping to parcellate (integer, ROW, or COLUMN)
 * @param cifti_out output cifti file
 * @param spatial_weights use voxel volume and either vertex areas or metric files as weights
 * @param opt_cifti_weights_weight_cifti use a cifti file containing weights: the weights to use, as a cifti file
 * @param opt_method_method specify method of parcellation (default MEAN, or MODE if label data): the method to use to assign parcel values from the values of member brainordinates
 * @param exclude_outliers exclude non-numeric values and outliers from each parcel by standard deviation
 * @param opt_only_numeric exclude non-numeric values
 * @param opt_fill_value_value specify value to use in empty parcels (default 0): the value to fill empty parcels with
 * @param opt_nonempty_mask_out_mask_out output a matching pscalar file that has 0s in empty parcels, and 1s elsewhere: the output mask file
 * @param opt_legacy_mode use the old behavior, parcels are defined by the intersection between labels and valid data, and empty parcels are discarded
 * @param opt_include_empty deprecated: now the default behavior
 *
 * @returns Parameter dictionary
 */
function cifti_parcellate_params(
    cifti_in: InputPathType,
    cifti_label: InputPathType,
    direction: string,
    cifti_out: string,
    spatial_weights: CiftiParcellateSpatialWeightsParameters | null = null,
    opt_cifti_weights_weight_cifti: InputPathType | null = null,
    opt_method_method: string | null = null,
    exclude_outliers: CiftiParcellateExcludeOutliersParameters | null = null,
    opt_only_numeric: boolean = false,
    opt_fill_value_value: number | null = null,
    opt_nonempty_mask_out_mask_out: string | null = null,
    opt_legacy_mode: boolean = false,
    opt_include_empty: boolean = false,
): CiftiParcellateParameters {
    const params = {
        "@type": "workbench.cifti-parcellate" as const,
        "cifti_in": cifti_in,
        "cifti_label": cifti_label,
        "direction": direction,
        "cifti_out": cifti_out,
        "opt_only_numeric": opt_only_numeric,
        "opt_legacy_mode": opt_legacy_mode,
        "opt_include_empty": opt_include_empty,
    };
    if (spatial_weights !== null) {
        params["spatial_weights"] = spatial_weights;
    }
    if (opt_cifti_weights_weight_cifti !== null) {
        params["opt_cifti_weights_weight_cifti"] = opt_cifti_weights_weight_cifti;
    }
    if (opt_method_method !== null) {
        params["opt_method_method"] = opt_method_method;
    }
    if (exclude_outliers !== null) {
        params["exclude_outliers"] = exclude_outliers;
    }
    if (opt_fill_value_value !== null) {
        params["opt_fill_value_value"] = opt_fill_value_value;
    }
    if (opt_nonempty_mask_out_mask_out !== null) {
        params["opt_nonempty_mask_out_mask_out"] = opt_nonempty_mask_out_mask_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_parcellate_cargs(
    params: CiftiParcellateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-parcellate");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push(execution.inputFile((params["cifti_label"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["spatial_weights"] ?? null) !== null) {
        cargs.push(...dynCargs((params["spatial_weights"] ?? null)["@type"])((params["spatial_weights"] ?? null), execution));
    }
    if ((params["opt_cifti_weights_weight_cifti"] ?? null) !== null) {
        cargs.push(
            "-cifti-weights",
            execution.inputFile((params["opt_cifti_weights_weight_cifti"] ?? null))
        );
    }
    if ((params["opt_method_method"] ?? null) !== null) {
        cargs.push(
            "-method",
            (params["opt_method_method"] ?? null)
        );
    }
    if ((params["exclude_outliers"] ?? null) !== null) {
        cargs.push(...dynCargs((params["exclude_outliers"] ?? null)["@type"])((params["exclude_outliers"] ?? null), execution));
    }
    if ((params["opt_only_numeric"] ?? null)) {
        cargs.push("-only-numeric");
    }
    if ((params["opt_fill_value_value"] ?? null) !== null) {
        cargs.push(
            "-fill-value",
            String((params["opt_fill_value_value"] ?? null))
        );
    }
    if ((params["opt_nonempty_mask_out_mask_out"] ?? null) !== null) {
        cargs.push(
            "-nonempty-mask-out",
            (params["opt_nonempty_mask_out_mask_out"] ?? null)
        );
    }
    if ((params["opt_legacy_mode"] ?? null)) {
        cargs.push("-legacy-mode");
    }
    if ((params["opt_include_empty"] ?? null)) {
        cargs.push("-include-empty");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_parcellate_outputs(
    params: CiftiParcellateParameters,
    execution: Execution,
): CiftiParcellateOutputs {
    const ret: CiftiParcellateOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
        opt_nonempty_mask_out_mask_out: ((params["opt_nonempty_mask_out_mask_out"] ?? null) !== null) ? execution.outputFile([(params["opt_nonempty_mask_out_mask_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Parcellate a cifti file.
 *
 * Each label (other than the unlabeled key) in the cifti label file will be treated as a parcel, and all rows or columns of data within the parcel are averaged together to form the parcel's output row or column.  If -legacy-mode is specified, parcels will be defined as the overlap between a label and the data, with no errors for missing data vertices or voxels, and empty parcels discarded.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.  For dtseries or dscalar, use COLUMN.  If you are parcellating a dconn in both directions, parcellating by ROW first will use much less memory.
 *
 * NOTE: the parcels in the output file are sorted by the numeric label keys, in ascending order.
 *
 * The parameter to the -method option must be one of the following:
 *
 * MAX: the maximum value
 * MIN: the minimum value
 * INDEXMAX: the 1-based index of the maximum value
 * INDEXMIN: the 1-based index of the minimum value
 * SUM: add all values
 * PRODUCT: multiply all values
 * MEAN: the mean of the data
 * STDEV: the standard deviation (N denominator)
 * SAMPSTDEV: the sample standard deviation (N-1 denominator)
 * VARIANCE: the variance of the data
 * TSNR: mean divided by sample standard deviation (N-1 denominator)
 * COV: sample standard deviation (N-1 denominator) divided by mean
 * L2NORM: square root of sum of squares
 * MEDIAN: the median of the data
 * MODE: the mode of the data
 * COUNT_NONZERO: the number of nonzero elements in the data
 *
 * The -*-weights options are mutually exclusive and may only be used with MEAN (default), SUM, STDEV, SAMPSTDEV, VARIANCE, MEDIAN, or MODE (default for label data).
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiParcellateOutputs`).
 */
function cifti_parcellate_execute(
    params: CiftiParcellateParameters,
    runner: Runner | null = null,
): CiftiParcellateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_PARCELLATE_METADATA);
    params = execution.params(params)
    const cargs = cifti_parcellate_cargs(params, execution)
    const ret = cifti_parcellate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Parcellate a cifti file.
 *
 * Each label (other than the unlabeled key) in the cifti label file will be treated as a parcel, and all rows or columns of data within the parcel are averaged together to form the parcel's output row or column.  If -legacy-mode is specified, parcels will be defined as the overlap between a label and the data, with no errors for missing data vertices or voxels, and empty parcels discarded.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.  For dtseries or dscalar, use COLUMN.  If you are parcellating a dconn in both directions, parcellating by ROW first will use much less memory.
 *
 * NOTE: the parcels in the output file are sorted by the numeric label keys, in ascending order.
 *
 * The parameter to the -method option must be one of the following:
 *
 * MAX: the maximum value
 * MIN: the minimum value
 * INDEXMAX: the 1-based index of the maximum value
 * INDEXMIN: the 1-based index of the minimum value
 * SUM: add all values
 * PRODUCT: multiply all values
 * MEAN: the mean of the data
 * STDEV: the standard deviation (N denominator)
 * SAMPSTDEV: the sample standard deviation (N-1 denominator)
 * VARIANCE: the variance of the data
 * TSNR: mean divided by sample standard deviation (N-1 denominator)
 * COV: sample standard deviation (N-1 denominator) divided by mean
 * L2NORM: square root of sum of squares
 * MEDIAN: the median of the data
 * MODE: the mode of the data
 * COUNT_NONZERO: the number of nonzero elements in the data
 *
 * The -*-weights options are mutually exclusive and may only be used with MEAN (default), SUM, STDEV, SAMPSTDEV, VARIANCE, MEDIAN, or MODE (default for label data).
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the cifti file to parcellate
 * @param cifti_label a cifti label file to use for the parcellation
 * @param direction which mapping to parcellate (integer, ROW, or COLUMN)
 * @param cifti_out output cifti file
 * @param spatial_weights use voxel volume and either vertex areas or metric files as weights
 * @param opt_cifti_weights_weight_cifti use a cifti file containing weights: the weights to use, as a cifti file
 * @param opt_method_method specify method of parcellation (default MEAN, or MODE if label data): the method to use to assign parcel values from the values of member brainordinates
 * @param exclude_outliers exclude non-numeric values and outliers from each parcel by standard deviation
 * @param opt_only_numeric exclude non-numeric values
 * @param opt_fill_value_value specify value to use in empty parcels (default 0): the value to fill empty parcels with
 * @param opt_nonempty_mask_out_mask_out output a matching pscalar file that has 0s in empty parcels, and 1s elsewhere: the output mask file
 * @param opt_legacy_mode use the old behavior, parcels are defined by the intersection between labels and valid data, and empty parcels are discarded
 * @param opt_include_empty deprecated: now the default behavior
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiParcellateOutputs`).
 */
function cifti_parcellate(
    cifti_in: InputPathType,
    cifti_label: InputPathType,
    direction: string,
    cifti_out: string,
    spatial_weights: CiftiParcellateSpatialWeightsParameters | null = null,
    opt_cifti_weights_weight_cifti: InputPathType | null = null,
    opt_method_method: string | null = null,
    exclude_outliers: CiftiParcellateExcludeOutliersParameters | null = null,
    opt_only_numeric: boolean = false,
    opt_fill_value_value: number | null = null,
    opt_nonempty_mask_out_mask_out: string | null = null,
    opt_legacy_mode: boolean = false,
    opt_include_empty: boolean = false,
    runner: Runner | null = null,
): CiftiParcellateOutputs {
    const params = cifti_parcellate_params(cifti_in, cifti_label, direction, cifti_out, spatial_weights, opt_cifti_weights_weight_cifti, opt_method_method, exclude_outliers, opt_only_numeric, opt_fill_value_value, opt_nonempty_mask_out_mask_out, opt_legacy_mode, opt_include_empty)
    return cifti_parcellate_execute(params, runner);
}


export {
      CIFTI_PARCELLATE_METADATA,
      CiftiParcellateExcludeOutliersParameters,
      CiftiParcellateOutputs,
      CiftiParcellateParameters,
      CiftiParcellateSpatialWeightsParameters,
      cifti_parcellate,
      cifti_parcellate_exclude_outliers_params,
      cifti_parcellate_execute,
      cifti_parcellate_params,
      cifti_parcellate_spatial_weights_params,
};
