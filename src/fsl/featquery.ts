// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FEATQUERY_METADATA: Metadata = {
    id: "064c21b08fd6f2c812d97dd62eadbdebce72aa0e.boutiques",
    name: "featquery",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FeatqueryParameters {
    "@type"?: "fsl/featquery";
    "n_featdirs": number;
    "featdirs": Array<string>;
    "n_stats": number;
    "stats": Array<string>;
    "output_rootname": string;
    "atlas_flag"?: string | null | undefined;
    "percent_convert_flag": boolean;
    "thresh_flag": boolean;
    "interp_thresh"?: number | null | undefined;
    "timeseries_flag": boolean;
    "weight_flag": boolean;
    "browser_flag": boolean;
    "mask_file": InputPathType;
    "coords"?: Array<number> | null | undefined;
}
type FeatqueryParametersTagged = Required<Pick<FeatqueryParameters, '@type'>> & FeatqueryParameters;


/**
 * Output object returned when calling `FeatqueryParameters(...)`.
 *
 * @interface
 */
interface FeatqueryOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated query report file
     */
    query_report: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param n_featdirs Number of feat directories
 * @param featdirs List of feat directories
 * @param n_stats Number of stats to query
 * @param stats List of stats
 * @param output_rootname Root name for output files
 * @param mask_file Mask file used as a reference for coordinates; if relative, searched within each FEAT directory
 * @param atlas_flag Use selected atlas to generate label (etc.) information
 * @param percent_convert_flag Convert PE / COPE values into percentages
 * @param thresh_flag Threshold stats images
 * @param interp_thresh Affect size of resampled masks by changing post-interpolation thresholding (default 0.5)
 * @param timeseries_flag Create time-series plots
 * @param weight_flag Do not binarise mask (allow weighting)
 * @param browser_flag Popup results in browser when finished
 * @param coords Coordinates specified in voxels (X Y Z)
 *
 * @returns Parameter dictionary
 */
function featquery_params(
    n_featdirs: number,
    featdirs: Array<string>,
    n_stats: number,
    stats: Array<string>,
    output_rootname: string,
    mask_file: InputPathType,
    atlas_flag: string | null = null,
    percent_convert_flag: boolean = false,
    thresh_flag: boolean = false,
    interp_thresh: number | null = null,
    timeseries_flag: boolean = false,
    weight_flag: boolean = false,
    browser_flag: boolean = false,
    coords: Array<number> | null = null,
): FeatqueryParametersTagged {
    const params = {
        "@type": "fsl/featquery" as const,
        "n_featdirs": n_featdirs,
        "featdirs": featdirs,
        "n_stats": n_stats,
        "stats": stats,
        "output_rootname": output_rootname,
        "percent_convert_flag": percent_convert_flag,
        "thresh_flag": thresh_flag,
        "timeseries_flag": timeseries_flag,
        "weight_flag": weight_flag,
        "browser_flag": browser_flag,
        "mask_file": mask_file,
    };
    if (atlas_flag !== null) {
        params["atlas_flag"] = atlas_flag;
    }
    if (interp_thresh !== null) {
        params["interp_thresh"] = interp_thresh;
    }
    if (coords !== null) {
        params["coords"] = coords;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function featquery_cargs(
    params: FeatqueryParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("featquery");
    cargs.push(String((params["n_featdirs"] ?? null)));
    cargs.push(...(params["featdirs"] ?? null));
    cargs.push(String((params["n_stats"] ?? null)));
    cargs.push(...(params["stats"] ?? null));
    cargs.push((params["output_rootname"] ?? null));
    if ((params["atlas_flag"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["atlas_flag"] ?? null)
        );
    }
    if ((params["percent_convert_flag"] ?? false)) {
        cargs.push("-p");
    }
    if ((params["thresh_flag"] ?? false)) {
        cargs.push("-t");
    }
    if ((params["interp_thresh"] ?? null) !== null) {
        cargs.push(
            "-i",
            String((params["interp_thresh"] ?? null))
        );
    }
    if ((params["timeseries_flag"] ?? false)) {
        cargs.push("-s");
    }
    if ((params["weight_flag"] ?? false)) {
        cargs.push("-w");
    }
    if ((params["browser_flag"] ?? false)) {
        cargs.push("-b");
    }
    cargs.push(execution.inputFile((params["mask_file"] ?? null)));
    if ((params["coords"] ?? null) !== null) {
        cargs.push(
            "-vox",
            ...(params["coords"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function featquery_outputs(
    params: FeatqueryParameters,
    execution: Execution,
): FeatqueryOutputs {
    const ret: FeatqueryOutputs = {
        root: execution.outputFile("."),
        query_report: execution.outputFile([(params["output_rootname"] ?? null), "_queryreport.txt"].join('')),
    };
    return ret;
}


/**
 * featquery
 *
 * Tool to extract statistics and/or time series from FEAT directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FeatqueryOutputs`).
 */
function featquery_execute(
    params: FeatqueryParameters,
    runner: Runner | null = null,
): FeatqueryOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FEATQUERY_METADATA);
    params = execution.params(params)
    const cargs = featquery_cargs(params, execution)
    const ret = featquery_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * featquery
 *
 * Tool to extract statistics and/or time series from FEAT directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param n_featdirs Number of feat directories
 * @param featdirs List of feat directories
 * @param n_stats Number of stats to query
 * @param stats List of stats
 * @param output_rootname Root name for output files
 * @param mask_file Mask file used as a reference for coordinates; if relative, searched within each FEAT directory
 * @param atlas_flag Use selected atlas to generate label (etc.) information
 * @param percent_convert_flag Convert PE / COPE values into percentages
 * @param thresh_flag Threshold stats images
 * @param interp_thresh Affect size of resampled masks by changing post-interpolation thresholding (default 0.5)
 * @param timeseries_flag Create time-series plots
 * @param weight_flag Do not binarise mask (allow weighting)
 * @param browser_flag Popup results in browser when finished
 * @param coords Coordinates specified in voxels (X Y Z)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FeatqueryOutputs`).
 */
function featquery(
    n_featdirs: number,
    featdirs: Array<string>,
    n_stats: number,
    stats: Array<string>,
    output_rootname: string,
    mask_file: InputPathType,
    atlas_flag: string | null = null,
    percent_convert_flag: boolean = false,
    thresh_flag: boolean = false,
    interp_thresh: number | null = null,
    timeseries_flag: boolean = false,
    weight_flag: boolean = false,
    browser_flag: boolean = false,
    coords: Array<number> | null = null,
    runner: Runner | null = null,
): FeatqueryOutputs {
    const params = featquery_params(n_featdirs, featdirs, n_stats, stats, output_rootname, mask_file, atlas_flag, percent_convert_flag, thresh_flag, interp_thresh, timeseries_flag, weight_flag, browser_flag, coords)
    return featquery_execute(params, runner);
}


export {
      FEATQUERY_METADATA,
      FeatqueryOutputs,
      featquery,
      featquery_execute,
      featquery_params,
};
