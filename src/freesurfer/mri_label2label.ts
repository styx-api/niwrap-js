// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LABEL2LABEL_METADATA: Metadata = {
    id: "7255a1b7f035f347855905e1c6a580b499579a86.boutiques",
    name: "mri_label2label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLabel2labelParameters {
    "@type": "freesurfer.mri_label2label";
    "src_label": InputPathType;
    "trg_label": string;
    "erode"?: number | null | undefined;
    "open"?: number | null | undefined;
    "close"?: number | null | undefined;
    "dilate"?: number | null | undefined;
    "ring"?: number | null | undefined;
    "src_subject"?: string | null | undefined;
    "trg_subject"?: string | null | undefined;
    "subject"?: string | null | undefined;
    "outmask"?: string | null | undefined;
    "outstat"?: string | null | undefined;
    "sample"?: string | null | undefined;
    "regmethod"?: string | null | undefined;
    "usepathfiles": boolean;
    "hemi"?: string | null | undefined;
    "src_hemi"?: string | null | undefined;
    "trg_hemi"?: string | null | undefined;
    "src_ico_order"?: number | null | undefined;
    "trg_ico_order"?: number | null | undefined;
    "direct"?: string | null | undefined;
    "trgsurf"?: string | null | undefined;
    "surfreg"?: string | null | undefined;
    "srcsurfreg"?: string | null | undefined;
    "trgsurfreg"?: string | null | undefined;
    "srcsurfreg_file"?: string | null | undefined;
    "trgsurfreg_file"?: string | null | undefined;
    "paint"?: string | null | undefined;
    "dmindmin"?: string | null | undefined;
    "baryfill"?: string | null | undefined;
    "label_cortex"?: string | null | undefined;
    "surf_label2mask"?: string | null | undefined;
    "srcmask"?: string | null | undefined;
    "srcmasksign"?: string | null | undefined;
    "srcmaskframe"?: number | null | undefined;
    "xfm"?: string | null | undefined;
    "reg"?: string | null | undefined;
    "xfm_invert": boolean;
    "projabs"?: string | null | undefined;
    "projfrac"?: string | null | undefined;
    "sd"?: string | null | undefined;
    "nohash": boolean;
    "norevmap": boolean;
    "to_scanner"?: string | null | undefined;
    "to_tkr"?: string | null | undefined;
    "scanner": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_label2label": mri_label2label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_label2label(...)`.
 *
 * @interface
 */
interface MriLabel2labelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param src_label Input label file
 * @param trg_label Output label file
 * @param erode Erode the label N times before writing
 * @param open Open the label N times before writing
 * @param close Close the label N times before writing
 * @param dilate Dilate the label N times before writing
 * @param ring Dilate the label N times then remove the original before writing
 * @param src_subject Source subject
 * @param trg_subject Target subject
 * @param subject Use for both target and source
 * @param outmask Save output label as a binary mask (surf only)
 * @param outstat Save output label stat as a mask (surf only)
 * @param sample Sample label onto surface
 * @param regmethod Registration method (surface, volume)
 * @param usepathfiles Read from and write to a path file
 * @param hemi Hemisphere (lh or rh) (with surface)
 * @param src_hemi Source Hemisphere (lh or rh)
 * @param trg_hemi Target Hemisphere (lh or rh)
 * @param src_ico_order When srcsubject=ico
 * @param trg_ico_order When trgsubject=ico
 * @param direct Use the [xyz] coords for src and trg surfaces to do direct lookup
 * @param trgsurf Get xyz from this surface (white)
 * @param surfreg Surface registration (sphere.reg)
 * @param srcsurfreg Source surface registration (sphere.reg)
 * @param trgsurfreg Target surface registration (sphere.reg)
 * @param srcsurfreg_file Specify full path to source reg
 * @param trgsurfreg_file Specify full path to target reg
 * @param paint Map to closest vertex on source surfname if d < dmax
 * @param dmindmin Bin mask with vertex of closest label point when painting
 * @param baryfill Fill with barycentric interpolation
 * @param label_cortex Create a label like ?h.cortex.label
 * @param surf_label2mask Convert a label to a binary mask
 * @param srcmask Source mask surfvalfile thresh <format>
 * @param srcmasksign Source mask sign (<abs>, pos, neg)
 * @param srcmaskframe Source mask frame number (0-based)
 * @param xfm Use xfm file instead of computing tal xfm
 * @param reg Use register.dat file instead of computing tal xfm
 * @param xfm_invert Invert xfm, or reg
 * @param projabs Project dist mm along surf normal
 * @param projfrac Project frac of thickness along surf normal
 * @param sd Use specified subjects directory
 * @param nohash Don't use hash table when regmethod is surface
 * @param norevmap Don't use reverse mapping when regmethod is surface
 * @param to_scanner Convert coords to scanner RAS prior to other operations
 * @param to_tkr Convert coords to tkregister RAS prior to other operations
 * @param scanner Set output coordinate type to scanner
 *
 * @returns Parameter dictionary
 */
function mri_label2label_params(
    src_label: InputPathType,
    trg_label: string,
    erode: number | null = null,
    open: number | null = null,
    close: number | null = null,
    dilate: number | null = null,
    ring: number | null = null,
    src_subject: string | null = null,
    trg_subject: string | null = null,
    subject: string | null = null,
    outmask: string | null = null,
    outstat: string | null = null,
    sample: string | null = null,
    regmethod: string | null = null,
    usepathfiles: boolean = false,
    hemi: string | null = null,
    src_hemi: string | null = null,
    trg_hemi: string | null = null,
    src_ico_order: number | null = null,
    trg_ico_order: number | null = null,
    direct: string | null = null,
    trgsurf: string | null = null,
    surfreg: string | null = null,
    srcsurfreg: string | null = null,
    trgsurfreg: string | null = null,
    srcsurfreg_file: string | null = null,
    trgsurfreg_file: string | null = null,
    paint: string | null = null,
    dmindmin: string | null = null,
    baryfill: string | null = null,
    label_cortex: string | null = null,
    surf_label2mask: string | null = null,
    srcmask: string | null = null,
    srcmasksign: string | null = null,
    srcmaskframe: number | null = null,
    xfm: string | null = null,
    reg: string | null = null,
    xfm_invert: boolean = false,
    projabs: string | null = null,
    projfrac: string | null = null,
    sd: string | null = null,
    nohash: boolean = false,
    norevmap: boolean = false,
    to_scanner: string | null = null,
    to_tkr: string | null = null,
    scanner: boolean = false,
): MriLabel2labelParameters {
    const params = {
        "@type": "freesurfer.mri_label2label" as const,
        "src_label": src_label,
        "trg_label": trg_label,
        "usepathfiles": usepathfiles,
        "xfm_invert": xfm_invert,
        "nohash": nohash,
        "norevmap": norevmap,
        "scanner": scanner,
    };
    if (erode !== null) {
        params["erode"] = erode;
    }
    if (open !== null) {
        params["open"] = open;
    }
    if (close !== null) {
        params["close"] = close;
    }
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (ring !== null) {
        params["ring"] = ring;
    }
    if (src_subject !== null) {
        params["src_subject"] = src_subject;
    }
    if (trg_subject !== null) {
        params["trg_subject"] = trg_subject;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (outmask !== null) {
        params["outmask"] = outmask;
    }
    if (outstat !== null) {
        params["outstat"] = outstat;
    }
    if (sample !== null) {
        params["sample"] = sample;
    }
    if (regmethod !== null) {
        params["regmethod"] = regmethod;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (src_hemi !== null) {
        params["src_hemi"] = src_hemi;
    }
    if (trg_hemi !== null) {
        params["trg_hemi"] = trg_hemi;
    }
    if (src_ico_order !== null) {
        params["src_ico_order"] = src_ico_order;
    }
    if (trg_ico_order !== null) {
        params["trg_ico_order"] = trg_ico_order;
    }
    if (direct !== null) {
        params["direct"] = direct;
    }
    if (trgsurf !== null) {
        params["trgsurf"] = trgsurf;
    }
    if (surfreg !== null) {
        params["surfreg"] = surfreg;
    }
    if (srcsurfreg !== null) {
        params["srcsurfreg"] = srcsurfreg;
    }
    if (trgsurfreg !== null) {
        params["trgsurfreg"] = trgsurfreg;
    }
    if (srcsurfreg_file !== null) {
        params["srcsurfreg_file"] = srcsurfreg_file;
    }
    if (trgsurfreg_file !== null) {
        params["trgsurfreg_file"] = trgsurfreg_file;
    }
    if (paint !== null) {
        params["paint"] = paint;
    }
    if (dmindmin !== null) {
        params["dmindmin"] = dmindmin;
    }
    if (baryfill !== null) {
        params["baryfill"] = baryfill;
    }
    if (label_cortex !== null) {
        params["label_cortex"] = label_cortex;
    }
    if (surf_label2mask !== null) {
        params["surf_label2mask"] = surf_label2mask;
    }
    if (srcmask !== null) {
        params["srcmask"] = srcmask;
    }
    if (srcmasksign !== null) {
        params["srcmasksign"] = srcmasksign;
    }
    if (srcmaskframe !== null) {
        params["srcmaskframe"] = srcmaskframe;
    }
    if (xfm !== null) {
        params["xfm"] = xfm;
    }
    if (reg !== null) {
        params["reg"] = reg;
    }
    if (projabs !== null) {
        params["projabs"] = projabs;
    }
    if (projfrac !== null) {
        params["projfrac"] = projfrac;
    }
    if (sd !== null) {
        params["sd"] = sd;
    }
    if (to_scanner !== null) {
        params["to_scanner"] = to_scanner;
    }
    if (to_tkr !== null) {
        params["to_tkr"] = to_tkr;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_label2label_cargs(
    params: MriLabel2labelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_label2label");
    cargs.push(
        "--srclabel",
        execution.inputFile((params["src_label"] ?? null))
    );
    cargs.push(
        "--trglabel",
        (params["trg_label"] ?? null)
    );
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "--erode",
            String((params["erode"] ?? null))
        );
    }
    if ((params["open"] ?? null) !== null) {
        cargs.push(
            "--open",
            String((params["open"] ?? null))
        );
    }
    if ((params["close"] ?? null) !== null) {
        cargs.push(
            "--close",
            String((params["close"] ?? null))
        );
    }
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "--dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["ring"] ?? null) !== null) {
        cargs.push(
            "--ring",
            String((params["ring"] ?? null))
        );
    }
    if ((params["src_subject"] ?? null) !== null) {
        cargs.push(
            "--srcsubject",
            (params["src_subject"] ?? null)
        );
    }
    if ((params["trg_subject"] ?? null) !== null) {
        cargs.push(
            "--trgsubject",
            (params["trg_subject"] ?? null)
        );
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["outmask"] ?? null) !== null) {
        cargs.push(
            "--outmask",
            (params["outmask"] ?? null)
        );
    }
    if ((params["outstat"] ?? null) !== null) {
        cargs.push(
            "--outstat",
            (params["outstat"] ?? null)
        );
    }
    if ((params["sample"] ?? null) !== null) {
        cargs.push(
            "--sample",
            (params["sample"] ?? null)
        );
    }
    if ((params["regmethod"] ?? null) !== null) {
        cargs.push(
            "--regmethod",
            (params["regmethod"] ?? null)
        );
    }
    if ((params["usepathfiles"] ?? null)) {
        cargs.push("--usepathfiles");
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["src_hemi"] ?? null) !== null) {
        cargs.push(
            "--srchemi",
            (params["src_hemi"] ?? null)
        );
    }
    if ((params["trg_hemi"] ?? null) !== null) {
        cargs.push(
            "--trghemi",
            (params["trg_hemi"] ?? null)
        );
    }
    if ((params["src_ico_order"] ?? null) !== null) {
        cargs.push(
            "--srcicoorder",
            String((params["src_ico_order"] ?? null))
        );
    }
    if ((params["trg_ico_order"] ?? null) !== null) {
        cargs.push(
            "--trgicoorder",
            String((params["trg_ico_order"] ?? null))
        );
    }
    if ((params["direct"] ?? null) !== null) {
        cargs.push(
            "--direct",
            (params["direct"] ?? null)
        );
    }
    if ((params["trgsurf"] ?? null) !== null) {
        cargs.push(
            "--trgsurf",
            (params["trgsurf"] ?? null)
        );
    }
    if ((params["surfreg"] ?? null) !== null) {
        cargs.push(
            "--surfreg",
            (params["surfreg"] ?? null)
        );
    }
    if ((params["srcsurfreg"] ?? null) !== null) {
        cargs.push(
            "--srcsurfreg",
            (params["srcsurfreg"] ?? null)
        );
    }
    if ((params["trgsurfreg"] ?? null) !== null) {
        cargs.push(
            "--trgsurfreg",
            (params["trgsurfreg"] ?? null)
        );
    }
    if ((params["srcsurfreg_file"] ?? null) !== null) {
        cargs.push(
            "--srcsurfreg-file",
            (params["srcsurfreg_file"] ?? null)
        );
    }
    if ((params["trgsurfreg_file"] ?? null) !== null) {
        cargs.push(
            "--trgsurfreg-file",
            (params["trgsurfreg_file"] ?? null)
        );
    }
    if ((params["paint"] ?? null) !== null) {
        cargs.push(
            "--paint",
            (params["paint"] ?? null)
        );
    }
    if ((params["dmindmin"] ?? null) !== null) {
        cargs.push(
            "--dmindmin",
            (params["dmindmin"] ?? null)
        );
    }
    if ((params["baryfill"] ?? null) !== null) {
        cargs.push(
            "--baryfill",
            (params["baryfill"] ?? null)
        );
    }
    if ((params["label_cortex"] ?? null) !== null) {
        cargs.push(
            "--label-cortex",
            (params["label_cortex"] ?? null)
        );
    }
    if ((params["surf_label2mask"] ?? null) !== null) {
        cargs.push(
            "--surf-label2mask",
            (params["surf_label2mask"] ?? null)
        );
    }
    if ((params["srcmask"] ?? null) !== null) {
        cargs.push(
            "--srcmask",
            (params["srcmask"] ?? null)
        );
    }
    if ((params["srcmasksign"] ?? null) !== null) {
        cargs.push(
            "--srcmasksign",
            (params["srcmasksign"] ?? null)
        );
    }
    if ((params["srcmaskframe"] ?? null) !== null) {
        cargs.push(
            "--srcmaskframe",
            String((params["srcmaskframe"] ?? null))
        );
    }
    if ((params["xfm"] ?? null) !== null) {
        cargs.push(
            "--xfm",
            (params["xfm"] ?? null)
        );
    }
    if ((params["reg"] ?? null) !== null) {
        cargs.push(
            "--reg",
            (params["reg"] ?? null)
        );
    }
    if ((params["xfm_invert"] ?? null)) {
        cargs.push("--xfm-invert");
    }
    if ((params["projabs"] ?? null) !== null) {
        cargs.push(
            "--projabs",
            (params["projabs"] ?? null)
        );
    }
    if ((params["projfrac"] ?? null) !== null) {
        cargs.push(
            "--projfrac",
            (params["projfrac"] ?? null)
        );
    }
    if ((params["sd"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["sd"] ?? null)
        );
    }
    if ((params["nohash"] ?? null)) {
        cargs.push("--nohash");
    }
    if ((params["norevmap"] ?? null)) {
        cargs.push("--norevmap");
    }
    if ((params["to_scanner"] ?? null) !== null) {
        cargs.push(
            "--to-scanner",
            (params["to_scanner"] ?? null)
        );
    }
    if ((params["to_tkr"] ?? null) !== null) {
        cargs.push(
            "--to-tkr",
            (params["to_tkr"] ?? null)
        );
    }
    if ((params["scanner"] ?? null)) {
        cargs.push("--scanner");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_label2label_outputs(
    params: MriLabel2labelParameters,
    execution: Execution,
): MriLabel2labelOutputs {
    const ret: MriLabel2labelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_label2label
 *
 * No description.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLabel2labelOutputs`).
 */
function mri_label2label_execute(
    params: MriLabel2labelParameters,
    runner: Runner | null = null,
): MriLabel2labelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LABEL2LABEL_METADATA);
    params = execution.params(params)
    const cargs = mri_label2label_cargs(params, execution)
    const ret = mri_label2label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_label2label
 *
 * No description.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param src_label Input label file
 * @param trg_label Output label file
 * @param erode Erode the label N times before writing
 * @param open Open the label N times before writing
 * @param close Close the label N times before writing
 * @param dilate Dilate the label N times before writing
 * @param ring Dilate the label N times then remove the original before writing
 * @param src_subject Source subject
 * @param trg_subject Target subject
 * @param subject Use for both target and source
 * @param outmask Save output label as a binary mask (surf only)
 * @param outstat Save output label stat as a mask (surf only)
 * @param sample Sample label onto surface
 * @param regmethod Registration method (surface, volume)
 * @param usepathfiles Read from and write to a path file
 * @param hemi Hemisphere (lh or rh) (with surface)
 * @param src_hemi Source Hemisphere (lh or rh)
 * @param trg_hemi Target Hemisphere (lh or rh)
 * @param src_ico_order When srcsubject=ico
 * @param trg_ico_order When trgsubject=ico
 * @param direct Use the [xyz] coords for src and trg surfaces to do direct lookup
 * @param trgsurf Get xyz from this surface (white)
 * @param surfreg Surface registration (sphere.reg)
 * @param srcsurfreg Source surface registration (sphere.reg)
 * @param trgsurfreg Target surface registration (sphere.reg)
 * @param srcsurfreg_file Specify full path to source reg
 * @param trgsurfreg_file Specify full path to target reg
 * @param paint Map to closest vertex on source surfname if d < dmax
 * @param dmindmin Bin mask with vertex of closest label point when painting
 * @param baryfill Fill with barycentric interpolation
 * @param label_cortex Create a label like ?h.cortex.label
 * @param surf_label2mask Convert a label to a binary mask
 * @param srcmask Source mask surfvalfile thresh <format>
 * @param srcmasksign Source mask sign (<abs>, pos, neg)
 * @param srcmaskframe Source mask frame number (0-based)
 * @param xfm Use xfm file instead of computing tal xfm
 * @param reg Use register.dat file instead of computing tal xfm
 * @param xfm_invert Invert xfm, or reg
 * @param projabs Project dist mm along surf normal
 * @param projfrac Project frac of thickness along surf normal
 * @param sd Use specified subjects directory
 * @param nohash Don't use hash table when regmethod is surface
 * @param norevmap Don't use reverse mapping when regmethod is surface
 * @param to_scanner Convert coords to scanner RAS prior to other operations
 * @param to_tkr Convert coords to tkregister RAS prior to other operations
 * @param scanner Set output coordinate type to scanner
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLabel2labelOutputs`).
 */
function mri_label2label(
    src_label: InputPathType,
    trg_label: string,
    erode: number | null = null,
    open: number | null = null,
    close: number | null = null,
    dilate: number | null = null,
    ring: number | null = null,
    src_subject: string | null = null,
    trg_subject: string | null = null,
    subject: string | null = null,
    outmask: string | null = null,
    outstat: string | null = null,
    sample: string | null = null,
    regmethod: string | null = null,
    usepathfiles: boolean = false,
    hemi: string | null = null,
    src_hemi: string | null = null,
    trg_hemi: string | null = null,
    src_ico_order: number | null = null,
    trg_ico_order: number | null = null,
    direct: string | null = null,
    trgsurf: string | null = null,
    surfreg: string | null = null,
    srcsurfreg: string | null = null,
    trgsurfreg: string | null = null,
    srcsurfreg_file: string | null = null,
    trgsurfreg_file: string | null = null,
    paint: string | null = null,
    dmindmin: string | null = null,
    baryfill: string | null = null,
    label_cortex: string | null = null,
    surf_label2mask: string | null = null,
    srcmask: string | null = null,
    srcmasksign: string | null = null,
    srcmaskframe: number | null = null,
    xfm: string | null = null,
    reg: string | null = null,
    xfm_invert: boolean = false,
    projabs: string | null = null,
    projfrac: string | null = null,
    sd: string | null = null,
    nohash: boolean = false,
    norevmap: boolean = false,
    to_scanner: string | null = null,
    to_tkr: string | null = null,
    scanner: boolean = false,
    runner: Runner | null = null,
): MriLabel2labelOutputs {
    const params = mri_label2label_params(src_label, trg_label, erode, open, close, dilate, ring, src_subject, trg_subject, subject, outmask, outstat, sample, regmethod, usepathfiles, hemi, src_hemi, trg_hemi, src_ico_order, trg_ico_order, direct, trgsurf, surfreg, srcsurfreg, trgsurfreg, srcsurfreg_file, trgsurfreg_file, paint, dmindmin, baryfill, label_cortex, surf_label2mask, srcmask, srcmasksign, srcmaskframe, xfm, reg, xfm_invert, projabs, projfrac, sd, nohash, norevmap, to_scanner, to_tkr, scanner)
    return mri_label2label_execute(params, runner);
}


export {
      MRI_LABEL2LABEL_METADATA,
      MriLabel2labelOutputs,
      MriLabel2labelParameters,
      mri_label2label,
      mri_label2label_execute,
      mri_label2label_params,
};
