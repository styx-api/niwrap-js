// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SLICE_NDICE_METADATA: Metadata = {
    id: "998a2cd5417c4b5430994f6eaffe16312f3012f7.boutiques",
    name: "3dSliceNDice",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSliceNdiceParameters {
    "@type": "afni.3dSliceNDice";
    "infile_a": InputPathType;
    "infile_b": InputPathType;
    "output_prefix": string;
    "out_domain"?: "all" | "AorB" | "AandB" | "Amask" | "Bmask" | null | undefined;
    "no_cmd_echo": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dSliceNDice": v_3d_slice_ndice_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dSliceNDice": v_3d_slice_ndice_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_slice_ndice(...)`.
 *
 * @interface
 */
interface V3dSliceNdiceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing Dice coefficients along the right-left axis.
     */
    output_rl: OutputPathType;
    /**
     * Output file containing Dice coefficients along the anterior-posterior axis.
     */
    output_ap: OutputPathType;
    /**
     * Output file containing Dice coefficients along the inferior-superior axis.
     */
    output_is: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile_a Input dataset A (e.g. mask_1.nii.gz)
 * @param infile_b Input dataset B (e.g. mask_2.nii.gz)
 * @param output_prefix Prefix for output files (e.g. result_prefix)
 * @param out_domain Specify which slices to include in the Dice coefficient report. Options are: all (default), AorB, AandB, Amask, Bmask.
 * @param no_cmd_echo Turn OFF recording the command line call in the output *.1D files. Default is to do the recording.
 *
 * @returns Parameter dictionary
 */
function v_3d_slice_ndice_params(
    infile_a: InputPathType,
    infile_b: InputPathType,
    output_prefix: string,
    out_domain: "all" | "AorB" | "AandB" | "Amask" | "Bmask" | null = null,
    no_cmd_echo: boolean = false,
): V3dSliceNdiceParameters {
    const params = {
        "@type": "afni.3dSliceNDice" as const,
        "infile_a": infile_a,
        "infile_b": infile_b,
        "output_prefix": output_prefix,
        "no_cmd_echo": no_cmd_echo,
    };
    if (out_domain !== null) {
        params["out_domain"] = out_domain;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_slice_ndice_cargs(
    params: V3dSliceNdiceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dSliceNDice");
    cargs.push(
        "-insetA",
        execution.inputFile((params["infile_a"] ?? null))
    );
    cargs.push(
        "-insetB",
        execution.inputFile((params["infile_b"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["out_domain"] ?? null) !== null) {
        cargs.push(
            "-out_domain",
            (params["out_domain"] ?? null)
        );
    }
    if ((params["no_cmd_echo"] ?? null)) {
        cargs.push("-no_cmd_echo");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_slice_ndice_outputs(
    params: V3dSliceNdiceParameters,
    execution: Execution,
): V3dSliceNdiceOutputs {
    const ret: V3dSliceNdiceOutputs = {
        root: execution.outputFile("."),
        output_rl: execution.outputFile([(params["output_prefix"] ?? null), "_0_RL.1D"].join('')),
        output_ap: execution.outputFile([(params["output_prefix"] ?? null), "_1_AP.1D"].join('')),
        output_is: execution.outputFile([(params["output_prefix"] ?? null), "_2_IS.1D"].join('')),
    };
    return ret;
}


/**
 * 3dSliceNDice
 *
 * Calculates the Dice coefficient between two volumes on a slice-by-slice basis.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSliceNdiceOutputs`).
 */
function v_3d_slice_ndice_execute(
    params: V3dSliceNdiceParameters,
    runner: Runner | null = null,
): V3dSliceNdiceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SLICE_NDICE_METADATA);
    params = execution.params(params)
    const cargs = v_3d_slice_ndice_cargs(params, execution)
    const ret = v_3d_slice_ndice_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dSliceNDice
 *
 * Calculates the Dice coefficient between two volumes on a slice-by-slice basis.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile_a Input dataset A (e.g. mask_1.nii.gz)
 * @param infile_b Input dataset B (e.g. mask_2.nii.gz)
 * @param output_prefix Prefix for output files (e.g. result_prefix)
 * @param out_domain Specify which slices to include in the Dice coefficient report. Options are: all (default), AorB, AandB, Amask, Bmask.
 * @param no_cmd_echo Turn OFF recording the command line call in the output *.1D files. Default is to do the recording.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSliceNdiceOutputs`).
 */
function v_3d_slice_ndice(
    infile_a: InputPathType,
    infile_b: InputPathType,
    output_prefix: string,
    out_domain: "all" | "AorB" | "AandB" | "Amask" | "Bmask" | null = null,
    no_cmd_echo: boolean = false,
    runner: Runner | null = null,
): V3dSliceNdiceOutputs {
    const params = v_3d_slice_ndice_params(infile_a, infile_b, output_prefix, out_domain, no_cmd_echo)
    return v_3d_slice_ndice_execute(params, runner);
}


export {
      V3dSliceNdiceOutputs,
      V3dSliceNdiceParameters,
      V_3D_SLICE_NDICE_METADATA,
      v_3d_slice_ndice,
      v_3d_slice_ndice_execute,
      v_3d_slice_ndice_params,
};
