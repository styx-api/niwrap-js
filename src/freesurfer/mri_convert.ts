// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CONVERT_METADATA: Metadata = {
    id: "072cf5d2422186514e5e2726e7afe06ff330f744.boutiques",
    name: "mri_convert",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriConvertParameters {
    "__STYXTYPE__": "mri_convert";
    "inp_volume": InputPathType;
    "out_volume": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_convert": mri_convert_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_convert": mri_convert_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_convert(...)`.
 *
 * @interface
 */
interface MriConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted volume output file
     */
    converted_volume: OutputPathType;
}


function mri_convert_params(
    inp_volume: InputPathType,
    out_volume: string,
): MriConvertParameters {
    /**
     * Build parameters.
    
     * @param inp_volume The input volume file
     * @param out_volume The output volume file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_convert" as const,
        "inp_volume": inp_volume,
        "out_volume": out_volume,
    };
    return params;
}


function mri_convert_cargs(
    params: MriConvertParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_convert");
    cargs.push(execution.inputFile((params["inp_volume"] ?? null)));
    cargs.push((params["out_volume"] ?? null));
    cargs.push("[OPTIONS]");
    return cargs;
}


function mri_convert_outputs(
    params: MriConvertParameters,
    execution: Execution,
): MriConvertOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriConvertOutputs = {
        root: execution.outputFile("."),
        converted_volume: execution.outputFile([(params["out_volume"] ?? null)].join('')),
    };
    return ret;
}


function mri_convert_execute(
    params: MriConvertParameters,
    execution: Execution,
): MriConvertOutputs {
    /**
     * A general purpose utility for converting between different file formats supported by FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriConvertOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_convert_cargs(params, execution)
    const ret = mri_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_convert(
    inp_volume: InputPathType,
    out_volume: string,
    runner: Runner | null = null,
): MriConvertOutputs {
    /**
     * A general purpose utility for converting between different file formats supported by FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param inp_volume The input volume file
     * @param out_volume The output volume file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriConvertOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CONVERT_METADATA);
    const params = mri_convert_params(inp_volume, out_volume)
    return mri_convert_execute(params, execution);
}


export {
      MRI_CONVERT_METADATA,
      MriConvertOutputs,
      MriConvertParameters,
      mri_convert,
      mri_convert_params,
};
