// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DPLOT_PY_METADATA: Metadata = {
    id: "1d4b51ffb97efd0a7d1029f51fabf9626d9f1906.boutiques",
    name: "1dplot.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dplotPyParameters {
    "@type": "afni.1dplot.py";
    "infiles": Array<InputPathType>;
    "prefix": string;
    "help": boolean;
    "boxplot_on": boolean;
    "bplot_view"?: string | null | undefined;
    "margin_off": boolean;
    "scale"?: Array<string> | null | undefined;
    "xfile"?: InputPathType | null | undefined;
    "xvals"?: Array<number> | null | undefined;
    "yaxis"?: Array<string> | null | undefined;
    "ylabels"?: Array<string> | null | undefined;
    "ylabels_maxlen"?: number | null | undefined;
    "legend_on": boolean;
    "legend_labels"?: Array<string> | null | undefined;
    "legend_locs"?: Array<string> | null | undefined;
    "xlabel"?: string | null | undefined;
    "title"?: string | null | undefined;
    "reverse_order": boolean;
    "sepscl": boolean;
    "one_graph": boolean;
    "dpi"?: number | null | undefined;
    "figsize"?: Array<number> | null | undefined;
    "fontsize"?: number | null | undefined;
    "fontfamily"?: string | null | undefined;
    "fontstyles"?: string | null | undefined;
    "colors"?: Array<string> | null | undefined;
    "patches"?: Array<string> | null | undefined;
    "censor_trs"?: Array<string> | null | undefined;
    "censor_files"?: Array<InputPathType> | null | undefined;
    "censor_hline"?: Array<string> | null | undefined;
    "censor_rgb"?: string | null | undefined;
    "bkgd_color"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.1dplot.py": v_1dplot_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.1dplot.py": v_1dplot_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dplot_py(...)`.
 *
 * @interface
 */
interface V1dplotPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file, default to .jpg
     */
    output_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infiles One or more file names of text files. Each column in this file will be treated as a separate time series for plotting.
 * @param prefix Output filename or prefix. Default output image type is .jpg
 * @param help See helpfile
 * @param boxplot_on A fun feature to show an additional boxplot adjacent to each time series
 * @param bplot_view Adjust view for boxplots when using censoring
 * @param margin_off Fill the plot frame completely, thus no labels, frame, or titles will be visible
 * @param scale Provide a list of scales to apply to the y-values
 * @param xfile One way to input x-values explicitly: as a "1D" file containing a single file of numbers
 * @param xvals Provide exactly 3 numbers for x-values: start, stop, and stepsize
 * @param yaxis Optional range for each 'infile' y-axis
 * @param ylabels Optional text labels for each 'infile' column
 * @param ylabels_maxlen allows y-axis labels to wrap into multiple rows, each of length <= which the user can decide
 * @param legend_on Turn on the plotting of a legend in the plot(s)
 * @param legend_labels Optional legend labels, if using '-legend_on'
 * @param legend_locs Optional legend locations, if using '-legend_on'
 * @param xlabel Optional text labels for the abscissa/x-axis
 * @param title Optional title for the set of plots
 * @param reverse_order Reverses the order of plotted time series
 * @param sepscl Make each graph have its own y-range
 * @param one_graph Plot multiple infiles in a single subplot
 * @param dpi Choose the output image's DPI. Default value is 150
 * @param figsize Choose the output image's dimensions (units are inches)
 * @param fontsize Change image fontsize; default is 10
 * @param fontfamily Change font-family used; default is monospace
 * @param fontstyles Add a specific font name; should match with chosen font-family
 * @param colors Decide what color(s) to cycle through in plots (one or more)
 * @param patches Specify run lengths for background patches to distinguish runs
 * @param censor_trs Specify time points where censoring has occurred using AFNI index notation
 * @param censor_files Specify time points where censoring has occurred using one or more 1D files
 * @param censor_hline Add a dotted horizontal line to the plot, representing the censor threshold
 * @param censor_rgb Choose the color of the censoring background; default is: [1, 0.7, 0.7]
 * @param bkgd_color Change the background color outside of the plot windows. Default is 0.9
 *
 * @returns Parameter dictionary
 */
function v_1dplot_py_params(
    infiles: Array<InputPathType>,
    prefix: string,
    help: boolean = false,
    boxplot_on: boolean = false,
    bplot_view: string | null = null,
    margin_off: boolean = false,
    scale: Array<string> | null = null,
    xfile: InputPathType | null = null,
    xvals: Array<number> | null = null,
    yaxis: Array<string> | null = null,
    ylabels: Array<string> | null = null,
    ylabels_maxlen: number | null = null,
    legend_on: boolean = false,
    legend_labels: Array<string> | null = null,
    legend_locs: Array<string> | null = null,
    xlabel: string | null = null,
    title: string | null = null,
    reverse_order: boolean = false,
    sepscl: boolean = false,
    one_graph: boolean = false,
    dpi: number | null = null,
    figsize: Array<number> | null = null,
    fontsize: number | null = null,
    fontfamily: string | null = null,
    fontstyles: string | null = null,
    colors: Array<string> | null = null,
    patches: Array<string> | null = null,
    censor_trs: Array<string> | null = null,
    censor_files: Array<InputPathType> | null = null,
    censor_hline: Array<string> | null = null,
    censor_rgb: string | null = null,
    bkgd_color: string | null = null,
): V1dplotPyParameters {
    const params = {
        "@type": "afni.1dplot.py" as const,
        "infiles": infiles,
        "prefix": prefix,
        "help": help,
        "boxplot_on": boxplot_on,
        "margin_off": margin_off,
        "legend_on": legend_on,
        "reverse_order": reverse_order,
        "sepscl": sepscl,
        "one_graph": one_graph,
    };
    if (bplot_view !== null) {
        params["bplot_view"] = bplot_view;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (xfile !== null) {
        params["xfile"] = xfile;
    }
    if (xvals !== null) {
        params["xvals"] = xvals;
    }
    if (yaxis !== null) {
        params["yaxis"] = yaxis;
    }
    if (ylabels !== null) {
        params["ylabels"] = ylabels;
    }
    if (ylabels_maxlen !== null) {
        params["ylabels_maxlen"] = ylabels_maxlen;
    }
    if (legend_labels !== null) {
        params["legend_labels"] = legend_labels;
    }
    if (legend_locs !== null) {
        params["legend_locs"] = legend_locs;
    }
    if (xlabel !== null) {
        params["xlabel"] = xlabel;
    }
    if (title !== null) {
        params["title"] = title;
    }
    if (dpi !== null) {
        params["dpi"] = dpi;
    }
    if (figsize !== null) {
        params["figsize"] = figsize;
    }
    if (fontsize !== null) {
        params["fontsize"] = fontsize;
    }
    if (fontfamily !== null) {
        params["fontfamily"] = fontfamily;
    }
    if (fontstyles !== null) {
        params["fontstyles"] = fontstyles;
    }
    if (colors !== null) {
        params["colors"] = colors;
    }
    if (patches !== null) {
        params["patches"] = patches;
    }
    if (censor_trs !== null) {
        params["censor_trs"] = censor_trs;
    }
    if (censor_files !== null) {
        params["censor_files"] = censor_files;
    }
    if (censor_hline !== null) {
        params["censor_hline"] = censor_hline;
    }
    if (censor_rgb !== null) {
        params["censor_rgb"] = censor_rgb;
    }
    if (bkgd_color !== null) {
        params["bkgd_color"] = bkgd_color;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dplot_py_cargs(
    params: V1dplotPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dplot.py");
    cargs.push(
        "-infiles",
        ...(params["infiles"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["boxplot_on"] ?? null)) {
        cargs.push("-boxplot_on");
    }
    if ((params["bplot_view"] ?? null) !== null) {
        cargs.push(
            "-bplot_view",
            (params["bplot_view"] ?? null)
        );
    }
    if ((params["margin_off"] ?? null)) {
        cargs.push("-margin_off");
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-scale",
            ...(params["scale"] ?? null)
        );
    }
    if ((params["xfile"] ?? null) !== null) {
        cargs.push(
            "-xfile",
            execution.inputFile((params["xfile"] ?? null))
        );
    }
    if ((params["xvals"] ?? null) !== null) {
        cargs.push(
            "-xvals",
            ...(params["xvals"] ?? null).map(String)
        );
    }
    if ((params["yaxis"] ?? null) !== null) {
        cargs.push(
            "-yaxis",
            ...(params["yaxis"] ?? null)
        );
    }
    if ((params["ylabels"] ?? null) !== null) {
        cargs.push(
            "-ylabels",
            ...(params["ylabels"] ?? null)
        );
    }
    if ((params["ylabels_maxlen"] ?? null) !== null) {
        cargs.push(
            "-ylabels_maxlen",
            String((params["ylabels_maxlen"] ?? null))
        );
    }
    if ((params["legend_on"] ?? null)) {
        cargs.push("-legend_on");
    }
    if ((params["legend_labels"] ?? null) !== null) {
        cargs.push(
            "-legend_labels",
            ...(params["legend_labels"] ?? null)
        );
    }
    if ((params["legend_locs"] ?? null) !== null) {
        cargs.push(
            "-legend_locs",
            ...(params["legend_locs"] ?? null)
        );
    }
    if ((params["xlabel"] ?? null) !== null) {
        cargs.push(
            "-xlabel",
            (params["xlabel"] ?? null)
        );
    }
    if ((params["title"] ?? null) !== null) {
        cargs.push(
            "-title",
            (params["title"] ?? null)
        );
    }
    if ((params["reverse_order"] ?? null)) {
        cargs.push("-reverse_order");
    }
    if ((params["sepscl"] ?? null)) {
        cargs.push("-sepscl");
    }
    if ((params["one_graph"] ?? null)) {
        cargs.push("-one_graph");
    }
    if ((params["dpi"] ?? null) !== null) {
        cargs.push(
            "-dpi",
            String((params["dpi"] ?? null))
        );
    }
    if ((params["figsize"] ?? null) !== null) {
        cargs.push(
            "-figsize",
            ...(params["figsize"] ?? null).map(String)
        );
    }
    if ((params["fontsize"] ?? null) !== null) {
        cargs.push(
            "-fontsize",
            String((params["fontsize"] ?? null))
        );
    }
    if ((params["fontfamily"] ?? null) !== null) {
        cargs.push(
            "-fontfamily",
            (params["fontfamily"] ?? null)
        );
    }
    if ((params["fontstyles"] ?? null) !== null) {
        cargs.push(
            "-fontstyles",
            (params["fontstyles"] ?? null)
        );
    }
    if ((params["colors"] ?? null) !== null) {
        cargs.push(
            "-colors",
            ...(params["colors"] ?? null)
        );
    }
    if ((params["patches"] ?? null) !== null) {
        cargs.push(
            "-patches",
            ...(params["patches"] ?? null)
        );
    }
    if ((params["censor_trs"] ?? null) !== null) {
        cargs.push(
            "-censor_trs",
            ...(params["censor_trs"] ?? null)
        );
    }
    if ((params["censor_files"] ?? null) !== null) {
        cargs.push(
            "-censor_files",
            ...(params["censor_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["censor_hline"] ?? null) !== null) {
        cargs.push(
            "-censor_hline",
            ...(params["censor_hline"] ?? null)
        );
    }
    if ((params["censor_rgb"] ?? null) !== null) {
        cargs.push(
            "-censor_RGB",
            (params["censor_rgb"] ?? null)
        );
    }
    if ((params["bkgd_color"] ?? null) !== null) {
        cargs.push(
            "-bkgd_color",
            (params["bkgd_color"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1dplot_py_outputs(
    params: V1dplotPyParameters,
    execution: Execution,
): V1dplotPyOutputs {
    const ret: V1dplotPyOutputs = {
        root: execution.outputFile("."),
        output_image: execution.outputFile([(params["prefix"] ?? null), ".jpg"].join('')),
    };
    return ret;
}


/**
 * This program is for making images to visualize columns of numbers from 1D text files. It uses Python, particularly matplotlib, to create plots.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dplotPyOutputs`).
 */
function v_1dplot_py_execute(
    params: V1dplotPyParameters,
    runner: Runner | null = null,
): V1dplotPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DPLOT_PY_METADATA);
    params = execution.params(params)
    const cargs = v_1dplot_py_cargs(params, execution)
    const ret = v_1dplot_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program is for making images to visualize columns of numbers from 1D text files. It uses Python, particularly matplotlib, to create plots.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infiles One or more file names of text files. Each column in this file will be treated as a separate time series for plotting.
 * @param prefix Output filename or prefix. Default output image type is .jpg
 * @param help See helpfile
 * @param boxplot_on A fun feature to show an additional boxplot adjacent to each time series
 * @param bplot_view Adjust view for boxplots when using censoring
 * @param margin_off Fill the plot frame completely, thus no labels, frame, or titles will be visible
 * @param scale Provide a list of scales to apply to the y-values
 * @param xfile One way to input x-values explicitly: as a "1D" file containing a single file of numbers
 * @param xvals Provide exactly 3 numbers for x-values: start, stop, and stepsize
 * @param yaxis Optional range for each 'infile' y-axis
 * @param ylabels Optional text labels for each 'infile' column
 * @param ylabels_maxlen allows y-axis labels to wrap into multiple rows, each of length <= which the user can decide
 * @param legend_on Turn on the plotting of a legend in the plot(s)
 * @param legend_labels Optional legend labels, if using '-legend_on'
 * @param legend_locs Optional legend locations, if using '-legend_on'
 * @param xlabel Optional text labels for the abscissa/x-axis
 * @param title Optional title for the set of plots
 * @param reverse_order Reverses the order of plotted time series
 * @param sepscl Make each graph have its own y-range
 * @param one_graph Plot multiple infiles in a single subplot
 * @param dpi Choose the output image's DPI. Default value is 150
 * @param figsize Choose the output image's dimensions (units are inches)
 * @param fontsize Change image fontsize; default is 10
 * @param fontfamily Change font-family used; default is monospace
 * @param fontstyles Add a specific font name; should match with chosen font-family
 * @param colors Decide what color(s) to cycle through in plots (one or more)
 * @param patches Specify run lengths for background patches to distinguish runs
 * @param censor_trs Specify time points where censoring has occurred using AFNI index notation
 * @param censor_files Specify time points where censoring has occurred using one or more 1D files
 * @param censor_hline Add a dotted horizontal line to the plot, representing the censor threshold
 * @param censor_rgb Choose the color of the censoring background; default is: [1, 0.7, 0.7]
 * @param bkgd_color Change the background color outside of the plot windows. Default is 0.9
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dplotPyOutputs`).
 */
function v_1dplot_py(
    infiles: Array<InputPathType>,
    prefix: string,
    help: boolean = false,
    boxplot_on: boolean = false,
    bplot_view: string | null = null,
    margin_off: boolean = false,
    scale: Array<string> | null = null,
    xfile: InputPathType | null = null,
    xvals: Array<number> | null = null,
    yaxis: Array<string> | null = null,
    ylabels: Array<string> | null = null,
    ylabels_maxlen: number | null = null,
    legend_on: boolean = false,
    legend_labels: Array<string> | null = null,
    legend_locs: Array<string> | null = null,
    xlabel: string | null = null,
    title: string | null = null,
    reverse_order: boolean = false,
    sepscl: boolean = false,
    one_graph: boolean = false,
    dpi: number | null = null,
    figsize: Array<number> | null = null,
    fontsize: number | null = null,
    fontfamily: string | null = null,
    fontstyles: string | null = null,
    colors: Array<string> | null = null,
    patches: Array<string> | null = null,
    censor_trs: Array<string> | null = null,
    censor_files: Array<InputPathType> | null = null,
    censor_hline: Array<string> | null = null,
    censor_rgb: string | null = null,
    bkgd_color: string | null = null,
    runner: Runner | null = null,
): V1dplotPyOutputs {
    const params = v_1dplot_py_params(infiles, prefix, help, boxplot_on, bplot_view, margin_off, scale, xfile, xvals, yaxis, ylabels, ylabels_maxlen, legend_on, legend_labels, legend_locs, xlabel, title, reverse_order, sepscl, one_graph, dpi, figsize, fontsize, fontfamily, fontstyles, colors, patches, censor_trs, censor_files, censor_hline, censor_rgb, bkgd_color)
    return v_1dplot_py_execute(params, runner);
}


export {
      V1dplotPyOutputs,
      V1dplotPyParameters,
      V_1DPLOT_PY_METADATA,
      v_1dplot_py,
      v_1dplot_py_execute,
      v_1dplot_py_params,
};
