// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AFNI_METADATA: Metadata = {
    id: "976a6bf171352d9ba286989af93704f8127a9901.boutiques",
    name: "afni",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AfniParameters {
    "@type"?: "afni/afni";
    "session_directories"?: string | null | undefined;
    "bysub"?: Array<string> | null | undefined;
    "all_dsets": boolean;
    "purge": boolean;
    "posfunc": boolean;
    "recursive": boolean;
    "no1D": boolean;
    "nocsv": boolean;
    "notsv": boolean;
    "unique": boolean;
    "orient"?: string | null | undefined;
    "noplugins": boolean;
    "seehidden": boolean;
    "allow_all_plugins": boolean;
    "yesplugouts": boolean;
    "debug_plugouts": boolean;
    "noplugouts": boolean;
    "skip_afnirc": boolean;
    "layout"?: InputPathType | null | undefined;
    "niml": boolean;
    "np"?: number | null | undefined;
    "npq"?: number | null | undefined;
    "npb"?: number | null | undefined;
    "com"?: string | null | undefined;
    "comsep"?: string | null | undefined;
}
type AfniParametersTagged = Required<Pick<AfniParameters, '@type'>> & AfniParameters;


/**
 * Output object returned when calling `AfniParameters(...)`.
 *
 * @interface
 */
interface AfniOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file for the session data
     */
    session_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param session_directories Input session directories containing the datasets
 * @param bysub Gather all datasets corresponding to a single subject identifier
 * @param all_dsets Read in all datasets from all listed folders together
 * @param purge Conserve memory by purging unused datasets
 * @param posfunc Start up the color 'pbar' to use only positive function values
 * @param recursive Recursively search each session_directory for more session subdirectories
 * @param no1_d Tells AFNI not to read *.1D timeseries files
 * @param nocsv Tells AFNI not to read *.csv files
 * @param notsv Tells AFNI not to read *.tsv files
 * @param unique Create a unique set of colors for each AFNI controller window
 * @param orient Orientation code for displaying x-y-z coordinates
 * @param noplugins Do not load plugins
 * @param seehidden Show hidden plugins
 * @param allow_all_plugins Do not hide plugins
 * @param yesplugouts Listen for plugouts
 * @param debug_plugouts Plugout code prints lots of messages (for debugging)
 * @param noplugouts Do not listen for plugouts
 * @param skip_afnirc Do not read .afnirc file
 * @param layout Read initial windows layout from a file
 * @param niml Turn on listening for NIML-formatted data from SUMA
 * @param np Provide a port offset for multiple instances
 * @param npq Like -np but quieter in case of errors
 * @param npb Provide a block of port numbers
 * @param com Specify command strings to drive AFNI on startup
 * @param comsep Character to use as a separator for commands
 *
 * @returns Parameter dictionary
 */
function afni_params(
    session_directories: string | null = null,
    bysub: Array<string> | null = null,
    all_dsets: boolean = false,
    purge: boolean = false,
    posfunc: boolean = false,
    recursive: boolean = false,
    no1_d: boolean = false,
    nocsv: boolean = false,
    notsv: boolean = false,
    unique: boolean = false,
    orient: string | null = null,
    noplugins: boolean = false,
    seehidden: boolean = false,
    allow_all_plugins: boolean = false,
    yesplugouts: boolean = false,
    debug_plugouts: boolean = false,
    noplugouts: boolean = false,
    skip_afnirc: boolean = false,
    layout: InputPathType | null = null,
    niml: boolean = false,
    np: number | null = null,
    npq: number | null = null,
    npb: number | null = null,
    com: string | null = null,
    comsep: string | null = null,
): AfniParametersTagged {
    const params = {
        "@type": "afni/afni" as const,
        "all_dsets": all_dsets,
        "purge": purge,
        "posfunc": posfunc,
        "recursive": recursive,
        "no1D": no1_d,
        "nocsv": nocsv,
        "notsv": notsv,
        "unique": unique,
        "noplugins": noplugins,
        "seehidden": seehidden,
        "allow_all_plugins": allow_all_plugins,
        "yesplugouts": yesplugouts,
        "debug_plugouts": debug_plugouts,
        "noplugouts": noplugouts,
        "skip_afnirc": skip_afnirc,
        "niml": niml,
    };
    if (session_directories !== null) {
        params["session_directories"] = session_directories;
    }
    if (bysub !== null) {
        params["bysub"] = bysub;
    }
    if (orient !== null) {
        params["orient"] = orient;
    }
    if (layout !== null) {
        params["layout"] = layout;
    }
    if (np !== null) {
        params["np"] = np;
    }
    if (npq !== null) {
        params["npq"] = npq;
    }
    if (npb !== null) {
        params["npb"] = npb;
    }
    if (com !== null) {
        params["com"] = com;
    }
    if (comsep !== null) {
        params["comsep"] = comsep;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function afni_cargs(
    params: AfniParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("afni");
    if ((params["session_directories"] ?? null) !== null) {
        cargs.push((params["session_directories"] ?? null));
    }
    if ((params["bysub"] ?? null) !== null) {
        cargs.push(
            "-bysub",
            ...(params["bysub"] ?? null)
        );
    }
    if ((params["all_dsets"] ?? false)) {
        cargs.push("-all_dsets");
    }
    if ((params["purge"] ?? false)) {
        cargs.push("-purge");
    }
    if ((params["posfunc"] ?? false)) {
        cargs.push("-posfunc");
    }
    if ((params["recursive"] ?? false)) {
        cargs.push("-R");
    }
    if ((params["no1D"] ?? false)) {
        cargs.push("-no1D");
    }
    if ((params["nocsv"] ?? false)) {
        cargs.push("-nocsv");
    }
    if ((params["notsv"] ?? false)) {
        cargs.push("-notsv");
    }
    if ((params["unique"] ?? false)) {
        cargs.push("-unique");
    }
    if ((params["orient"] ?? null) !== null) {
        cargs.push(
            "-orient",
            (params["orient"] ?? null)
        );
    }
    if ((params["noplugins"] ?? false)) {
        cargs.push("-noplugins");
    }
    if ((params["seehidden"] ?? false)) {
        cargs.push("-seehidden");
    }
    if ((params["allow_all_plugins"] ?? false)) {
        cargs.push("-DAFNI_ALLOW_ALL_PLUGINS=YES");
    }
    if ((params["yesplugouts"] ?? false)) {
        cargs.push("-yesplugouts");
    }
    if ((params["debug_plugouts"] ?? false)) {
        cargs.push("-YESplugouts");
    }
    if ((params["noplugouts"] ?? false)) {
        cargs.push("-noplugouts");
    }
    if ((params["skip_afnirc"] ?? false)) {
        cargs.push("-skip_afnirc");
    }
    if ((params["layout"] ?? null) !== null) {
        cargs.push(
            "-layout",
            execution.inputFile((params["layout"] ?? null))
        );
    }
    if ((params["niml"] ?? false)) {
        cargs.push("-niml");
    }
    if ((params["np"] ?? null) !== null) {
        cargs.push(
            "-np",
            String((params["np"] ?? null))
        );
    }
    if ((params["npq"] ?? null) !== null) {
        cargs.push(
            "-npq",
            String((params["npq"] ?? null))
        );
    }
    if ((params["npb"] ?? null) !== null) {
        cargs.push(
            "-npb",
            String((params["npb"] ?? null))
        );
    }
    if ((params["com"] ?? null) !== null) {
        cargs.push(
            "-com",
            (params["com"] ?? null)
        );
    }
    if ((params["comsep"] ?? null) !== null) {
        cargs.push(
            "-comsep",
            (params["comsep"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function afni_outputs(
    params: AfniParameters,
    execution: Execution,
): AfniOutputs {
    const ret: AfniOutputs = {
        root: execution.outputFile("."),
        session_output: execution.outputFile(["output_session.nii.gz"].join('')),
    };
    return ret;
}


/**
 * afni
 *
 * Tool for reading in sessions of 3D datasets and visualizing them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AfniOutputs`).
 */
function afni_execute(
    params: AfniParameters,
    runner: Runner | null = null,
): AfniOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AFNI_METADATA);
    params = execution.params(params)
    const cargs = afni_cargs(params, execution)
    const ret = afni_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * afni
 *
 * Tool for reading in sessions of 3D datasets and visualizing them.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param session_directories Input session directories containing the datasets
 * @param bysub Gather all datasets corresponding to a single subject identifier
 * @param all_dsets Read in all datasets from all listed folders together
 * @param purge Conserve memory by purging unused datasets
 * @param posfunc Start up the color 'pbar' to use only positive function values
 * @param recursive Recursively search each session_directory for more session subdirectories
 * @param no1_d Tells AFNI not to read *.1D timeseries files
 * @param nocsv Tells AFNI not to read *.csv files
 * @param notsv Tells AFNI not to read *.tsv files
 * @param unique Create a unique set of colors for each AFNI controller window
 * @param orient Orientation code for displaying x-y-z coordinates
 * @param noplugins Do not load plugins
 * @param seehidden Show hidden plugins
 * @param allow_all_plugins Do not hide plugins
 * @param yesplugouts Listen for plugouts
 * @param debug_plugouts Plugout code prints lots of messages (for debugging)
 * @param noplugouts Do not listen for plugouts
 * @param skip_afnirc Do not read .afnirc file
 * @param layout Read initial windows layout from a file
 * @param niml Turn on listening for NIML-formatted data from SUMA
 * @param np Provide a port offset for multiple instances
 * @param npq Like -np but quieter in case of errors
 * @param npb Provide a block of port numbers
 * @param com Specify command strings to drive AFNI on startup
 * @param comsep Character to use as a separator for commands
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AfniOutputs`).
 */
function afni_(
    session_directories: string | null = null,
    bysub: Array<string> | null = null,
    all_dsets: boolean = false,
    purge: boolean = false,
    posfunc: boolean = false,
    recursive: boolean = false,
    no1_d: boolean = false,
    nocsv: boolean = false,
    notsv: boolean = false,
    unique: boolean = false,
    orient: string | null = null,
    noplugins: boolean = false,
    seehidden: boolean = false,
    allow_all_plugins: boolean = false,
    yesplugouts: boolean = false,
    debug_plugouts: boolean = false,
    noplugouts: boolean = false,
    skip_afnirc: boolean = false,
    layout: InputPathType | null = null,
    niml: boolean = false,
    np: number | null = null,
    npq: number | null = null,
    npb: number | null = null,
    com: string | null = null,
    comsep: string | null = null,
    runner: Runner | null = null,
): AfniOutputs {
    const params = afni_params(session_directories, bysub, all_dsets, purge, posfunc, recursive, no1_d, nocsv, notsv, unique, orient, noplugins, seehidden, allow_all_plugins, yesplugouts, debug_plugouts, noplugouts, skip_afnirc, layout, niml, np, npq, npb, com, comsep)
    return afni_execute(params, runner);
}


export {
      AFNI_METADATA,
      AfniOutputs,
      afni_,
      afni_execute,
      afni_params,
};
