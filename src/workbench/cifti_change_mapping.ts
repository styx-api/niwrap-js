// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CHANGE_MAPPING_METADATA: Metadata = {
    id: "bdf7120ed8ef92f923c54fb40a4145591fa2cca1.boutiques",
    name: "cifti-change-mapping",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiChangeMappingSeriesParameters {
    "@type": "workbench.cifti-change-mapping.series";
    "step": number;
    "start": number;
    "opt_unit_unit"?: string | null | undefined;
}


interface CiftiChangeMappingScalarParameters {
    "@type": "workbench.cifti-change-mapping.scalar";
    "opt_name_file_file"?: string | null | undefined;
}


interface CiftiChangeMappingFromCiftiParameters {
    "@type": "workbench.cifti-change-mapping.from_cifti";
    "template_cifti": InputPathType;
    "direction": string;
}


interface CiftiChangeMappingParameters {
    "@type": "workbench.cifti-change-mapping";
    "data_cifti": InputPathType;
    "direction": string;
    "cifti_out": string;
    "series"?: CiftiChangeMappingSeriesParameters | null | undefined;
    "scalar"?: CiftiChangeMappingScalarParameters | null | undefined;
    "from_cifti"?: CiftiChangeMappingFromCiftiParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-change-mapping": cifti_change_mapping_cargs,
        "workbench.cifti-change-mapping.series": cifti_change_mapping_series_cargs,
        "workbench.cifti-change-mapping.scalar": cifti_change_mapping_scalar_cargs,
        "workbench.cifti-change-mapping.from_cifti": cifti_change_mapping_from_cifti_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-change-mapping": cifti_change_mapping_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param step increment between series points
 * @param start start value of the series
 * @param opt_unit_unit select unit for series (default SECOND): unit identifier
 *
 * @returns Parameter dictionary
 */
function cifti_change_mapping_series_params(
    step: number,
    start: number,
    opt_unit_unit: string | null = null,
): CiftiChangeMappingSeriesParameters {
    const params = {
        "@type": "workbench.cifti-change-mapping.series" as const,
        "step": step,
        "start": start,
    };
    if (opt_unit_unit !== null) {
        params["opt_unit_unit"] = opt_unit_unit;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_change_mapping_series_cargs(
    params: CiftiChangeMappingSeriesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-series");
    cargs.push(String((params["step"] ?? null)));
    cargs.push(String((params["start"] ?? null)));
    if ((params["opt_unit_unit"] ?? null) !== null) {
        cargs.push(
            "-unit",
            (params["opt_unit_unit"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param opt_name_file_file specify names for the maps: text file containing map names, one per line
 *
 * @returns Parameter dictionary
 */
function cifti_change_mapping_scalar_params(
    opt_name_file_file: string | null = null,
): CiftiChangeMappingScalarParameters {
    const params = {
        "@type": "workbench.cifti-change-mapping.scalar" as const,
    };
    if (opt_name_file_file !== null) {
        params["opt_name_file_file"] = opt_name_file_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_change_mapping_scalar_cargs(
    params: CiftiChangeMappingScalarParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-scalar");
    if ((params["opt_name_file_file"] ?? null) !== null) {
        cargs.push(
            "-name-file",
            (params["opt_name_file_file"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param template_cifti a cifti file containing the desired mapping
 * @param direction which direction to copy the mapping from
 *
 * @returns Parameter dictionary
 */
function cifti_change_mapping_from_cifti_params(
    template_cifti: InputPathType,
    direction: string,
): CiftiChangeMappingFromCiftiParameters {
    const params = {
        "@type": "workbench.cifti-change-mapping.from_cifti" as const,
        "template_cifti": template_cifti,
        "direction": direction,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_change_mapping_from_cifti_cargs(
    params: CiftiChangeMappingFromCiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-from-cifti");
    cargs.push(execution.inputFile((params["template_cifti"] ?? null)));
    cargs.push((params["direction"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `cifti_change_mapping(...)`.
 *
 * @interface
 */
interface CiftiChangeMappingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param data_cifti the cifti file to use the data from
 * @param direction which direction on <data-cifti> to replace the mapping
 * @param cifti_out the output cifti file
 * @param series set the mapping to series
 * @param scalar set the mapping to scalar
 * @param from_cifti copy mapping from another cifti file
 *
 * @returns Parameter dictionary
 */
function cifti_change_mapping_params(
    data_cifti: InputPathType,
    direction: string,
    cifti_out: string,
    series: CiftiChangeMappingSeriesParameters | null = null,
    scalar: CiftiChangeMappingScalarParameters | null = null,
    from_cifti: CiftiChangeMappingFromCiftiParameters | null = null,
): CiftiChangeMappingParameters {
    const params = {
        "@type": "workbench.cifti-change-mapping" as const,
        "data_cifti": data_cifti,
        "direction": direction,
        "cifti_out": cifti_out,
    };
    if (series !== null) {
        params["series"] = series;
    }
    if (scalar !== null) {
        params["scalar"] = scalar;
    }
    if (from_cifti !== null) {
        params["from_cifti"] = from_cifti;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_change_mapping_cargs(
    params: CiftiChangeMappingParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-change-mapping");
    cargs.push(execution.inputFile((params["data_cifti"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["series"] ?? null) !== null) {
        cargs.push(...dynCargs((params["series"] ?? null)["@type"])((params["series"] ?? null), execution));
    }
    if ((params["scalar"] ?? null) !== null) {
        cargs.push(...dynCargs((params["scalar"] ?? null)["@type"])((params["scalar"] ?? null), execution));
    }
    if ((params["from_cifti"] ?? null) !== null) {
        cargs.push(...dynCargs((params["from_cifti"] ?? null)["@type"])((params["from_cifti"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_change_mapping_outputs(
    params: CiftiChangeMappingParameters,
    execution: Execution,
): CiftiChangeMappingOutputs {
    const ret: CiftiChangeMappingOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Convert to scalar, copy mapping, etc.
 *
 * Take an existing cifti file and change one of the mappings.  Exactly one of -series, -scalar, or -from-cifti must be specified.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
 *
 * The argument to -unit must be one of the following:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CiftiChangeMappingOutputs`).
 */
function cifti_change_mapping_execute(
    params: CiftiChangeMappingParameters,
    execution: Execution,
): CiftiChangeMappingOutputs {
    params = execution.params(params)
    const cargs = cifti_change_mapping_cargs(params, execution)
    const ret = cifti_change_mapping_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert to scalar, copy mapping, etc.
 *
 * Take an existing cifti file and change one of the mappings.  Exactly one of -series, -scalar, or -from-cifti must be specified.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
 *
 * The argument to -unit must be one of the following:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param data_cifti the cifti file to use the data from
 * @param direction which direction on <data-cifti> to replace the mapping
 * @param cifti_out the output cifti file
 * @param series set the mapping to series
 * @param scalar set the mapping to scalar
 * @param from_cifti copy mapping from another cifti file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiChangeMappingOutputs`).
 */
function cifti_change_mapping(
    data_cifti: InputPathType,
    direction: string,
    cifti_out: string,
    series: CiftiChangeMappingSeriesParameters | null = null,
    scalar: CiftiChangeMappingScalarParameters | null = null,
    from_cifti: CiftiChangeMappingFromCiftiParameters | null = null,
    runner: Runner | null = null,
): CiftiChangeMappingOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CHANGE_MAPPING_METADATA);
    const params = cifti_change_mapping_params(data_cifti, direction, cifti_out, series, scalar, from_cifti)
    return cifti_change_mapping_execute(params, execution);
}


export {
      CIFTI_CHANGE_MAPPING_METADATA,
      CiftiChangeMappingFromCiftiParameters,
      CiftiChangeMappingOutputs,
      CiftiChangeMappingParameters,
      CiftiChangeMappingScalarParameters,
      CiftiChangeMappingSeriesParameters,
      cifti_change_mapping,
      cifti_change_mapping_cargs,
      cifti_change_mapping_execute,
      cifti_change_mapping_from_cifti_cargs,
      cifti_change_mapping_from_cifti_params,
      cifti_change_mapping_outputs,
      cifti_change_mapping_params,
      cifti_change_mapping_scalar_cargs,
      cifti_change_mapping_scalar_params,
      cifti_change_mapping_series_cargs,
      cifti_change_mapping_series_params,
};
