// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_EDU_01_SCALE_METADATA: Metadata = {
    id: "bf9e7a5bd7bc4419390243111049a4474109df28.boutiques",
    name: "3dEdu_01_scale",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dEdu01ScaleParameters {
    "@type": "afni.3dEdu_01_scale";
    "input": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "mult_factors"?: Array<number> | null | undefined;
    "option_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dEdu_01_scale": v_3d_edu_01_scale_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_edu_01_scale(...)`.
 *
 * @interface
 */
interface V3dEdu01ScaleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input Input dataset
 * @param mask Mask dataset on same grid/data structure as the input dataset
 * @param mult_factors Numerical factors for multiplying each voxel; each voxel is multiplied by both A and B
 * @param option_flag Option flag to do something
 *
 * @returns Parameter dictionary
 */
function v_3d_edu_01_scale_params(
    input: InputPathType,
    mask: InputPathType | null = null,
    mult_factors: Array<number> | null = null,
    option_flag: boolean = false,
): V3dEdu01ScaleParameters {
    const params = {
        "@type": "afni.3dEdu_01_scale" as const,
        "input": input,
        "option_flag": option_flag,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (mult_factors !== null) {
        params["mult_factors"] = mult_factors;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_edu_01_scale_cargs(
    params: V3dEdu01ScaleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dEdu_01_scale");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["mult_factors"] ?? null) !== null) {
        cargs.push(
            "-mult_facs",
            ...(params["mult_factors"] ?? null).map(String)
        );
    }
    if ((params["option_flag"] ?? null)) {
        cargs.push("-some_opt");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_edu_01_scale_outputs(
    params: V3dEdu01ScaleParameters,
    execution: Execution,
): V3dEdu01ScaleOutputs {
    const ret: V3dEdu01ScaleOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 3dEdu_01_scale
 *
 * Educational program to create a new AFNI program. Scales and masks dataset volumes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dEdu01ScaleOutputs`).
 */
function v_3d_edu_01_scale_execute(
    params: V3dEdu01ScaleParameters,
    runner: Runner | null = null,
): V3dEdu01ScaleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_EDU_01_SCALE_METADATA);
    params = execution.params(params)
    const cargs = v_3d_edu_01_scale_cargs(params, execution)
    const ret = v_3d_edu_01_scale_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dEdu_01_scale
 *
 * Educational program to create a new AFNI program. Scales and masks dataset volumes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input Input dataset
 * @param mask Mask dataset on same grid/data structure as the input dataset
 * @param mult_factors Numerical factors for multiplying each voxel; each voxel is multiplied by both A and B
 * @param option_flag Option flag to do something
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dEdu01ScaleOutputs`).
 */
function v_3d_edu_01_scale(
    input: InputPathType,
    mask: InputPathType | null = null,
    mult_factors: Array<number> | null = null,
    option_flag: boolean = false,
    runner: Runner | null = null,
): V3dEdu01ScaleOutputs {
    const params = v_3d_edu_01_scale_params(input, mask, mult_factors, option_flag)
    return v_3d_edu_01_scale_execute(params, runner);
}


export {
      V3dEdu01ScaleOutputs,
      V3dEdu01ScaleParameters,
      V_3D_EDU_01_SCALE_METADATA,
      v_3d_edu_01_scale,
      v_3d_edu_01_scale_execute,
      v_3d_edu_01_scale_params,
};
