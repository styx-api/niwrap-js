// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LABEL_VOLUME_METADATA: Metadata = {
    id: "ee89fc69a4f2636ea1f0a072d5cd1e5cd8d3081c.boutiques",
    name: "mri_label_volume",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLabelVolumeParameters {
    "@type": "freesurfer.mri_label_volume";
    "volume": InputPathType;
    "labels": Array<string>;
    "partial_volume_effects"?: InputPathType | null | undefined;
    "intracranial_volume"?: InputPathType | null | undefined;
    "spreadsheet_subject"?: string | null | undefined;
    "non_zero_voxels": boolean;
    "replace_label_in"?: string | null | undefined;
    "replace_label_out"?: string | null | undefined;
    "brain_volume"?: InputPathType | null | undefined;
    "percentage": boolean;
    "log_results"?: InputPathType | null | undefined;
    "atlas_transform_file"?: InputPathType | null | undefined;
    "atlas_scalefactor"?: number | null | undefined;
    "etiv_transform_file"?: InputPathType | null | undefined;
    "etiv_scalefactor"?: number | null | undefined;
    "etiv_subject"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_label_volume": mri_label_volume_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_label_volume": mri_label_volume_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_label_volume(...)`.
 *
 * @interface
 */
interface MriLabelVolumeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Computed volume results.
     */
    output_volume_results: OutputPathType;
    /**
     * Log file if -l option is used.
     */
    output_log_results: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume Volume file (e.g., volume.mgz) to analyze
 * @param labels Labels to compute volume for
 * @param partial_volume_effects Compute partial volume effects using intensity volume
 * @param intracranial_volume Normalize by the intracranial volume in provided file
 * @param spreadsheet_subject Output in spreadsheet mode, including subject name
 * @param non_zero_voxels Compute volume of all non-zero voxels (e.g. for computing brain volume)
 * @param replace_label_in Replace label <in> with label <out>.
 * @param replace_label_out Label to replace with
 * @param brain_volume Compute the brain volume from provided brain volume file and normalize by it
 * @param percentage Compute volume as a percentage of all non-zero labels
 * @param log_results Log results to provided file
 * @param atlas_transform_file Specify LTA or XFM atlas transform file and scale factor to use for ICV correction
 * @param atlas_scalefactor Scale factor for ICV correction
 * @param etiv_transform_file Same as -atlas_icv
 * @param etiv_scalefactor eTIV scale factor
 * @param etiv_subject Same as -eTIV, and generate MATLAB data appending subject to structure
 *
 * @returns Parameter dictionary
 */
function mri_label_volume_params(
    volume: InputPathType,
    labels: Array<string>,
    partial_volume_effects: InputPathType | null = null,
    intracranial_volume: InputPathType | null = null,
    spreadsheet_subject: string | null = null,
    non_zero_voxels: boolean = false,
    replace_label_in: string | null = null,
    replace_label_out: string | null = null,
    brain_volume: InputPathType | null = null,
    percentage: boolean = false,
    log_results: InputPathType | null = null,
    atlas_transform_file: InputPathType | null = null,
    atlas_scalefactor: number | null = null,
    etiv_transform_file: InputPathType | null = null,
    etiv_scalefactor: number | null = null,
    etiv_subject: string | null = null,
): MriLabelVolumeParameters {
    const params = {
        "@type": "freesurfer.mri_label_volume" as const,
        "volume": volume,
        "labels": labels,
        "non_zero_voxels": non_zero_voxels,
        "percentage": percentage,
    };
    if (partial_volume_effects !== null) {
        params["partial_volume_effects"] = partial_volume_effects;
    }
    if (intracranial_volume !== null) {
        params["intracranial_volume"] = intracranial_volume;
    }
    if (spreadsheet_subject !== null) {
        params["spreadsheet_subject"] = spreadsheet_subject;
    }
    if (replace_label_in !== null) {
        params["replace_label_in"] = replace_label_in;
    }
    if (replace_label_out !== null) {
        params["replace_label_out"] = replace_label_out;
    }
    if (brain_volume !== null) {
        params["brain_volume"] = brain_volume;
    }
    if (log_results !== null) {
        params["log_results"] = log_results;
    }
    if (atlas_transform_file !== null) {
        params["atlas_transform_file"] = atlas_transform_file;
    }
    if (atlas_scalefactor !== null) {
        params["atlas_scalefactor"] = atlas_scalefactor;
    }
    if (etiv_transform_file !== null) {
        params["etiv_transform_file"] = etiv_transform_file;
    }
    if (etiv_scalefactor !== null) {
        params["etiv_scalefactor"] = etiv_scalefactor;
    }
    if (etiv_subject !== null) {
        params["etiv_subject"] = etiv_subject;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_label_volume_cargs(
    params: MriLabelVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_label_volume");
    cargs.push(execution.inputFile((params["volume"] ?? null)));
    cargs.push(...(params["labels"] ?? null));
    if ((params["partial_volume_effects"] ?? null) !== null) {
        cargs.push(
            "-pv",
            execution.inputFile((params["partial_volume_effects"] ?? null))
        );
    }
    if ((params["intracranial_volume"] ?? null) !== null) {
        cargs.push(
            "-icv",
            execution.inputFile((params["intracranial_volume"] ?? null))
        );
    }
    if ((params["spreadsheet_subject"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["spreadsheet_subject"] ?? null)
        );
    }
    if ((params["non_zero_voxels"] ?? null)) {
        cargs.push("-a");
    }
    if ((params["replace_label_in"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["replace_label_in"] ?? null)
        );
    }
    if ((params["replace_label_out"] ?? null) !== null) {
        cargs.push((params["replace_label_out"] ?? null));
    }
    if ((params["brain_volume"] ?? null) !== null) {
        cargs.push(
            "-b",
            execution.inputFile((params["brain_volume"] ?? null))
        );
    }
    if ((params["percentage"] ?? null)) {
        cargs.push("-p");
    }
    if ((params["log_results"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["log_results"] ?? null))
        );
    }
    if ((params["atlas_transform_file"] ?? null) !== null) {
        cargs.push(
            "-atlas_icv",
            execution.inputFile((params["atlas_transform_file"] ?? null))
        );
    }
    if ((params["atlas_scalefactor"] ?? null) !== null) {
        cargs.push(String((params["atlas_scalefactor"] ?? null)));
    }
    if ((params["etiv_transform_file"] ?? null) !== null) {
        cargs.push(
            "-eTIV",
            execution.inputFile((params["etiv_transform_file"] ?? null))
        );
    }
    if ((params["etiv_scalefactor"] ?? null) !== null) {
        cargs.push(String((params["etiv_scalefactor"] ?? null)));
    }
    if ((params["etiv_subject"] ?? null) !== null) {
        cargs.push(
            "-eTIV_matdat",
            (params["etiv_subject"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_label_volume_outputs(
    params: MriLabelVolumeParameters,
    execution: Execution,
): MriLabelVolumeOutputs {
    const ret: MriLabelVolumeOutputs = {
        root: execution.outputFile("."),
        output_volume_results: execution.outputFile(["volume_label_results.txt"].join('')),
        output_log_results: execution.outputFile(["volume_log.txt"].join('')),
    };
    return ret;
}


/**
 * A tool to compute volumes of labeled voxels within MRI images, often used in conjunction with FreeSurfer processed data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLabelVolumeOutputs`).
 */
function mri_label_volume_execute(
    params: MriLabelVolumeParameters,
    runner: Runner | null = null,
): MriLabelVolumeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LABEL_VOLUME_METADATA);
    params = execution.params(params)
    const cargs = mri_label_volume_cargs(params, execution)
    const ret = mri_label_volume_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to compute volumes of labeled voxels within MRI images, often used in conjunction with FreeSurfer processed data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param volume Volume file (e.g., volume.mgz) to analyze
 * @param labels Labels to compute volume for
 * @param partial_volume_effects Compute partial volume effects using intensity volume
 * @param intracranial_volume Normalize by the intracranial volume in provided file
 * @param spreadsheet_subject Output in spreadsheet mode, including subject name
 * @param non_zero_voxels Compute volume of all non-zero voxels (e.g. for computing brain volume)
 * @param replace_label_in Replace label <in> with label <out>.
 * @param replace_label_out Label to replace with
 * @param brain_volume Compute the brain volume from provided brain volume file and normalize by it
 * @param percentage Compute volume as a percentage of all non-zero labels
 * @param log_results Log results to provided file
 * @param atlas_transform_file Specify LTA or XFM atlas transform file and scale factor to use for ICV correction
 * @param atlas_scalefactor Scale factor for ICV correction
 * @param etiv_transform_file Same as -atlas_icv
 * @param etiv_scalefactor eTIV scale factor
 * @param etiv_subject Same as -eTIV, and generate MATLAB data appending subject to structure
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLabelVolumeOutputs`).
 */
function mri_label_volume(
    volume: InputPathType,
    labels: Array<string>,
    partial_volume_effects: InputPathType | null = null,
    intracranial_volume: InputPathType | null = null,
    spreadsheet_subject: string | null = null,
    non_zero_voxels: boolean = false,
    replace_label_in: string | null = null,
    replace_label_out: string | null = null,
    brain_volume: InputPathType | null = null,
    percentage: boolean = false,
    log_results: InputPathType | null = null,
    atlas_transform_file: InputPathType | null = null,
    atlas_scalefactor: number | null = null,
    etiv_transform_file: InputPathType | null = null,
    etiv_scalefactor: number | null = null,
    etiv_subject: string | null = null,
    runner: Runner | null = null,
): MriLabelVolumeOutputs {
    const params = mri_label_volume_params(volume, labels, partial_volume_effects, intracranial_volume, spreadsheet_subject, non_zero_voxels, replace_label_in, replace_label_out, brain_volume, percentage, log_results, atlas_transform_file, atlas_scalefactor, etiv_transform_file, etiv_scalefactor, etiv_subject)
    return mri_label_volume_execute(params, runner);
}


export {
      MRI_LABEL_VOLUME_METADATA,
      MriLabelVolumeOutputs,
      MriLabelVolumeParameters,
      mri_label_volume,
      mri_label_volume_execute,
      mri_label_volume_params,
};
