// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ROW_FILLIN_METADATA: Metadata = {
    id: "efdbcc5556b9f847fe0eba3e015856a0addd50be.boutiques",
    name: "3dRowFillin",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dRowFillinParameters {
    "__STYXTYPE__": "3dRowFillin";
    "maxgap"?: number | null | undefined;
    "dir"?: string | null | undefined;
    "binary": boolean;
    "prefix"?: string | null | undefined;
    "input_dataset": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dRowFillin": v_3d_row_fillin_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dRowFillin": v_3d_row_fillin_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_row_fillin(...)`.
 *
 * @interface
 */
interface V3dRowFillinOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset in BRIK format
     */
    output_brik: OutputPathType | null;
    /**
     * Output dataset in HEAD format
     */
    output_head: OutputPathType | null;
}


function v_3d_row_fillin_params(
    input_dataset: InputPathType,
    maxgap: number | null = null,
    dir: string | null = null,
    binary: boolean = false,
    prefix: string | null = null,
): V3dRowFillinParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input 3D dataset (e.g., dataset+orig)
     * @param maxgap Set the maximum length of a blank region that will be filled in
     * @param dir Set the direction of fill, e.g., A-P, P-A, I-S, S-I, L-R, R-L, x, y, z, XYZ.OR, XYZ.AND
     * @param binary Turn input dataset to binary (0 and 1) before filling in. Output will also be binary.
     * @param prefix Set the prefix for the output dataset
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dRowFillin" as const,
        "binary": binary,
        "input_dataset": input_dataset,
    };
    if (maxgap !== null) {
        params["maxgap"] = maxgap;
    }
    if (dir !== null) {
        params["dir"] = dir;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function v_3d_row_fillin_cargs(
    params: V3dRowFillinParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dRowFillin");
    if ((params["maxgap"] ?? null) !== null) {
        cargs.push(
            "-maxgap",
            String((params["maxgap"] ?? null))
        );
    }
    if ((params["dir"] ?? null) !== null) {
        cargs.push(
            "-dir",
            (params["dir"] ?? null)
        );
    }
    if ((params["binary"] ?? null)) {
        cargs.push("-binary");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    return cargs;
}


function v_3d_row_fillin_outputs(
    params: V3dRowFillinParameters,
    execution: Execution,
): V3dRowFillinOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dRowFillinOutputs = {
        root: execution.outputFile("."),
        output_brik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
        output_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
    };
    return ret;
}


function v_3d_row_fillin_execute(
    params: V3dRowFillinParameters,
    execution: Execution,
): V3dRowFillinOutputs {
    /**
     * Fills in blank regions in 1D rows extracted from a 3D dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dRowFillinOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_row_fillin_cargs(params, execution)
    const ret = v_3d_row_fillin_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_row_fillin(
    input_dataset: InputPathType,
    maxgap: number | null = null,
    dir: string | null = null,
    binary: boolean = false,
    prefix: string | null = null,
    runner: Runner | null = null,
): V3dRowFillinOutputs {
    /**
     * Fills in blank regions in 1D rows extracted from a 3D dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input 3D dataset (e.g., dataset+orig)
     * @param maxgap Set the maximum length of a blank region that will be filled in
     * @param dir Set the direction of fill, e.g., A-P, P-A, I-S, S-I, L-R, R-L, x, y, z, XYZ.OR, XYZ.AND
     * @param binary Turn input dataset to binary (0 and 1) before filling in. Output will also be binary.
     * @param prefix Set the prefix for the output dataset
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dRowFillinOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ROW_FILLIN_METADATA);
    const params = v_3d_row_fillin_params(input_dataset, maxgap, dir, binary, prefix)
    return v_3d_row_fillin_execute(params, execution);
}


export {
      V3dRowFillinOutputs,
      V3dRowFillinParameters,
      V_3D_ROW_FILLIN_METADATA,
      v_3d_row_fillin,
      v_3d_row_fillin_params,
};
