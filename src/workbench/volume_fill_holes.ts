// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_FILL_HOLES_METADATA: Metadata = {
    id: "725b5c73221db0c7e169a6d533ca30608a523ba9.boutiques",
    name: "volume-fill-holes",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeFillHolesParameters {
    "@type": "workbench.volume-fill-holes";
    "volume_in": InputPathType;
    "volume_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-fill-holes": volume_fill_holes_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-fill-holes": volume_fill_holes_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_fill_holes(...)`.
 *
 * @interface
 */
interface VolumeFillHolesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output ROI volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_in the input ROI volume
 * @param volume_out the output ROI volume
 *
 * @returns Parameter dictionary
 */
function volume_fill_holes_params(
    volume_in: InputPathType,
    volume_out: string,
): VolumeFillHolesParameters {
    const params = {
        "@type": "workbench.volume-fill-holes" as const,
        "volume_in": volume_in,
        "volume_out": volume_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_fill_holes_cargs(
    params: VolumeFillHolesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-fill-holes");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_fill_holes_outputs(
    params: VolumeFillHolesParameters,
    execution: Execution,
): VolumeFillHolesOutputs {
    const ret: VolumeFillHolesOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Fill holes in an roi volume.
 *
 * Finds all face-connected parts that are not included in the ROI, and fills all but the largest one with ones.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeFillHolesOutputs`).
 */
function volume_fill_holes_execute(
    params: VolumeFillHolesParameters,
    runner: Runner | null = null,
): VolumeFillHolesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_FILL_HOLES_METADATA);
    params = execution.params(params)
    const cargs = volume_fill_holes_cargs(params, execution)
    const ret = volume_fill_holes_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Fill holes in an roi volume.
 *
 * Finds all face-connected parts that are not included in the ROI, and fills all but the largest one with ones.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_in the input ROI volume
 * @param volume_out the output ROI volume
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeFillHolesOutputs`).
 */
function volume_fill_holes(
    volume_in: InputPathType,
    volume_out: string,
    runner: Runner | null = null,
): VolumeFillHolesOutputs {
    const params = volume_fill_holes_params(volume_in, volume_out)
    return volume_fill_holes_execute(params, runner);
}


export {
      VOLUME_FILL_HOLES_METADATA,
      VolumeFillHolesOutputs,
      VolumeFillHolesParameters,
      volume_fill_holes,
      volume_fill_holes_execute,
      volume_fill_holes_params,
};
