// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DFFT_METADATA: Metadata = {
    id: "1b564754f8ff373ff1545761e4e2740ba1cf898f.boutiques",
    name: "1dfft",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dfftParameters {
    "@type": "afni.1dfft";
    "infile": InputPathType;
    "outfile": string;
    "ignore"?: number | null | undefined;
    "use"?: number | null | undefined;
    "nfft"?: number | null | undefined;
    "tocx": boolean;
    "fromcx": boolean;
    "hilbert": boolean;
    "nodetrend": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.1dfft": v_1dfft_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.1dfft": v_1dfft_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dfft(...)`.
 *
 * @interface
 */
interface V1dfftOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with the absolute value of the FFT of the input columns.
     */
    out_fft: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input .1D file containing an ASCII list of numbers arranged in columns.
 * @param outfile Output file to store the FFT results.
 * @param ignore Skip the first 'sss' lines in the input file. [default = no skipping]
 * @param use Use only 'uuu' lines of the input file. [default = use them all]
 * @param nfft Set FFT length to 'nnn'. [default = length of data (# of lines used)]
 * @param tocx Save Re and Im parts of transform in 2 columns.
 * @param fromcx Convert 2 column complex input into 1 column real output. Note: This will not work if the original data FFT length was an odd number.
 * @param hilbert When -fromcx is used, the inverse FFT will do the Hilbert transform instead.
 * @param nodetrend Skip the detrending of the input.
 *
 * @returns Parameter dictionary
 */
function v_1dfft_params(
    infile: InputPathType,
    outfile: string,
    ignore: number | null = null,
    use: number | null = null,
    nfft: number | null = null,
    tocx: boolean = false,
    fromcx: boolean = false,
    hilbert: boolean = false,
    nodetrend: boolean = false,
): V1dfftParameters {
    const params = {
        "@type": "afni.1dfft" as const,
        "infile": infile,
        "outfile": outfile,
        "tocx": tocx,
        "fromcx": fromcx,
        "hilbert": hilbert,
        "nodetrend": nodetrend,
    };
    if (ignore !== null) {
        params["ignore"] = ignore;
    }
    if (use !== null) {
        params["use"] = use;
    }
    if (nfft !== null) {
        params["nfft"] = nfft;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dfft_cargs(
    params: V1dfftParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dfft");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    if ((params["ignore"] ?? null) !== null) {
        cargs.push(
            "-ignore",
            String((params["ignore"] ?? null))
        );
    }
    if ((params["use"] ?? null) !== null) {
        cargs.push(
            "-use",
            String((params["use"] ?? null))
        );
    }
    if ((params["nfft"] ?? null) !== null) {
        cargs.push(
            "-nfft",
            String((params["nfft"] ?? null))
        );
    }
    if ((params["tocx"] ?? null)) {
        cargs.push("-tocx");
    }
    if ((params["fromcx"] ?? null)) {
        cargs.push("-fromcx");
    }
    if ((params["hilbert"] ?? null)) {
        cargs.push("-hilbert");
    }
    if ((params["nodetrend"] ?? null)) {
        cargs.push("-nodetrend");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1dfft_outputs(
    params: V1dfftParameters,
    execution: Execution,
): V1dfftOutputs {
    const ret: V1dfftOutputs = {
        root: execution.outputFile("."),
        out_fft: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Compute the absolute value of the FFT of input columns from an AFNI 1D file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V1dfftOutputs`).
 */
function v_1dfft_execute(
    params: V1dfftParameters,
    execution: Execution,
): V1dfftOutputs {
    params = execution.params(params)
    const cargs = v_1dfft_cargs(params, execution)
    const ret = v_1dfft_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute the absolute value of the FFT of input columns from an AFNI 1D file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input .1D file containing an ASCII list of numbers arranged in columns.
 * @param outfile Output file to store the FFT results.
 * @param ignore Skip the first 'sss' lines in the input file. [default = no skipping]
 * @param use Use only 'uuu' lines of the input file. [default = use them all]
 * @param nfft Set FFT length to 'nnn'. [default = length of data (# of lines used)]
 * @param tocx Save Re and Im parts of transform in 2 columns.
 * @param fromcx Convert 2 column complex input into 1 column real output. Note: This will not work if the original data FFT length was an odd number.
 * @param hilbert When -fromcx is used, the inverse FFT will do the Hilbert transform instead.
 * @param nodetrend Skip the detrending of the input.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dfftOutputs`).
 */
function v_1dfft(
    infile: InputPathType,
    outfile: string,
    ignore: number | null = null,
    use: number | null = null,
    nfft: number | null = null,
    tocx: boolean = false,
    fromcx: boolean = false,
    hilbert: boolean = false,
    nodetrend: boolean = false,
    runner: Runner | null = null,
): V1dfftOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DFFT_METADATA);
    const params = v_1dfft_params(infile, outfile, ignore, use, nfft, tocx, fromcx, hilbert, nodetrend)
    return v_1dfft_execute(params, execution);
}


export {
      V1dfftOutputs,
      V1dfftParameters,
      V_1DFFT_METADATA,
      v_1dfft,
      v_1dfft_cargs,
      v_1dfft_execute,
      v_1dfft_outputs,
      v_1dfft_params,
};
