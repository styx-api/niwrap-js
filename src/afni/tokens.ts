// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TOKENS_METADATA: Metadata = {
    id: "fa203a3c21c39761a0f8e237a33304c1ff4334e3.boutiques",
    name: "tokens",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface TokensParameters {
    "__STYXTYPE__": "tokens";
    "infile"?: InputPathType | null | undefined;
    "extra_char"?: Array<string> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tokens": tokens_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tokens(...)`.
 *
 * @interface
 */
interface TokensOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function tokens_params(
    infile: InputPathType | null = null,
    extra_char: Array<string> | null = null,
): TokensParameters {
    /**
     * Build parameters.
    
     * @param infile Specify input file (stdin if none)
     * @param extra_char Specify extra character to count as valid. Can be used more than once.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tokens" as const,
    };
    if (infile !== null) {
        params["infile"] = infile;
    }
    if (extra_char !== null) {
        params["extra_char"] = extra_char;
    }
    return params;
}


function tokens_cargs(
    params: TokensParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tokens");
    if ((params["infile"] ?? null) !== null) {
        cargs.push(
            "-infile",
            execution.inputFile((params["infile"] ?? null))
        );
    }
    if ((params["extra_char"] ?? null) !== null) {
        cargs.push(
            "-extra",
            ...(params["extra_char"] ?? null)
        );
    }
    return cargs;
}


function tokens_outputs(
    params: TokensParameters,
    execution: Execution,
): TokensOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TokensOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function tokens_execute(
    params: TokensParameters,
    execution: Execution,
): TokensOutputs {
    /**
     * Token counting tool.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TokensOutputs`).
     */
    params = execution.params(params)
    const cargs = tokens_cargs(params, execution)
    const ret = tokens_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tokens(
    infile: InputPathType | null = null,
    extra_char: Array<string> | null = null,
    runner: Runner | null = null,
): TokensOutputs {
    /**
     * Token counting tool.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param infile Specify input file (stdin if none)
     * @param extra_char Specify extra character to count as valid. Can be used more than once.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TokensOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TOKENS_METADATA);
    const params = tokens_params(infile, extra_char)
    return tokens_execute(params, execution);
}


export {
      TOKENS_METADATA,
      TokensOutputs,
      TokensParameters,
      tokens,
      tokens_params,
};
