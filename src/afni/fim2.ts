// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIM2_METADATA: Metadata = {
    id: "821c0c76727aa989e97731a04d2596a66d166df2.boutiques",
    name: "fim2",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface Fim2Parameters {
    "@type": "afni.fim2";
    "image_files": Array<InputPathType>;
    "pcnt"?: number | null | undefined;
    "pcthresh"?: number | null | undefined;
    "im1"?: number | null | undefined;
    "num"?: number | null | undefined;
    "non": boolean;
    "coef"?: number | null | undefined;
    "ort"?: Array<InputPathType> | null | undefined;
    "ideal"?: Array<InputPathType> | null | undefined;
    "polref"?: number | null | undefined;
    "fimfile"?: string | null | undefined;
    "corr": boolean;
    "corfile"?: string | null | undefined;
    "cnrfile"?: string | null | undefined;
    "sigfile"?: string | null | undefined;
    "fitfile"?: string | null | undefined;
    "subort"?: string | null | undefined;
    "flim": boolean;
    "clean": boolean;
    "clip": boolean;
    "q": boolean;
    "dfspace": boolean;
    "regbase"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fim2": fim2_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fim2": fim2_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fim2(...)`.
 *
 * @interface
 */
interface Fim2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Activation magnitudes output file
     */
    activation_magnitudes: OutputPathType | null;
    /**
     * Correlation image output file
     */
    correlation_image: OutputPathType | null;
    /**
     * Contrast-to-noise image output file
     */
    contrast_to_noise_image: OutputPathType | null;
    /**
     * Standard deviation image output file
     */
    std_deviation_image: OutputPathType | null;
    /**
     * Least squares fit coefficients image files
     */
    ls_fit_coefficients: OutputPathType | null;
    /**
     * Subtracted ortho reference time series images
     */
    subtracted_references: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param image_files Input MRI image files
 * @param pcnt Correlation coefficient threshold will be 1 - 0.01 * #
 * @param pcthresh Correlation coefficient threshold will be #
 * @param im1 Index of image file to use as first in time series; default is 1
 * @param num Number of images to actually use; default is to use all images
 * @param non Turn off default normalization of the output activation image
 * @param coef Scaling factor to convert the activation output from floats to short ints
 * @param ort Filename of a time series to which the image data will be orthogonalized before correlations are computed
 * @param ideal Filename of a time series to which the image data is to be correlated
 * @param polref Use polynomials of order 0..# as extra 'orts'; default is 0
 * @param fimfile Filename to save activation magnitudes in
 * @param corr Indicates to write correlation output to image file 'fimfile.CORR'
 * @param corfile Filename to save correlation image in
 * @param cnrfile Filename to save contrast-to-noise image in
 * @param sigfile Filename to save standard deviation image in
 * @param fitfile Image files of the least squares fit coefficients of all the -ort and -polref time series
 * @param subort Filename of the new timeseries of images with the orts and polrefs subtracted out
 * @param flim Write outputs in mrilib 'float' format
 * @param clean Output images won't have the +/- 10000 values forced into their corners for scaling purposes
 * @param clip Set to zero regions of low intensity in output correlations, etc.
 * @param q Quiet operation mode
 * @param dfspace Use the 'dfspace' filter to register the images spatially before filtering.
 * @param regbase Read image in file 'fname' as the base image for registration
 *
 * @returns Parameter dictionary
 */
function fim2_params(
    image_files: Array<InputPathType>,
    pcnt: number | null = null,
    pcthresh: number | null = null,
    im1: number | null = null,
    num: number | null = null,
    non: boolean = false,
    coef: number | null = null,
    ort: Array<InputPathType> | null = null,
    ideal: Array<InputPathType> | null = null,
    polref: number | null = null,
    fimfile: string | null = null,
    corr: boolean = false,
    corfile: string | null = null,
    cnrfile: string | null = null,
    sigfile: string | null = null,
    fitfile: string | null = null,
    subort: string | null = null,
    flim: boolean = false,
    clean: boolean = false,
    clip: boolean = false,
    q: boolean = false,
    dfspace: boolean = false,
    regbase: string | null = null,
): Fim2Parameters {
    const params = {
        "@type": "afni.fim2" as const,
        "image_files": image_files,
        "non": non,
        "corr": corr,
        "flim": flim,
        "clean": clean,
        "clip": clip,
        "q": q,
        "dfspace": dfspace,
    };
    if (pcnt !== null) {
        params["pcnt"] = pcnt;
    }
    if (pcthresh !== null) {
        params["pcthresh"] = pcthresh;
    }
    if (im1 !== null) {
        params["im1"] = im1;
    }
    if (num !== null) {
        params["num"] = num;
    }
    if (coef !== null) {
        params["coef"] = coef;
    }
    if (ort !== null) {
        params["ort"] = ort;
    }
    if (ideal !== null) {
        params["ideal"] = ideal;
    }
    if (polref !== null) {
        params["polref"] = polref;
    }
    if (fimfile !== null) {
        params["fimfile"] = fimfile;
    }
    if (corfile !== null) {
        params["corfile"] = corfile;
    }
    if (cnrfile !== null) {
        params["cnrfile"] = cnrfile;
    }
    if (sigfile !== null) {
        params["sigfile"] = sigfile;
    }
    if (fitfile !== null) {
        params["fitfile"] = fitfile;
    }
    if (subort !== null) {
        params["subort"] = subort;
    }
    if (regbase !== null) {
        params["regbase"] = regbase;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fim2_cargs(
    params: Fim2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fim2");
    cargs.push(...(params["image_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["pcnt"] ?? null) !== null) {
        cargs.push(
            "-pcnt",
            String((params["pcnt"] ?? null))
        );
    }
    if ((params["pcthresh"] ?? null) !== null) {
        cargs.push(
            "-pcthresh",
            String((params["pcthresh"] ?? null))
        );
    }
    if ((params["im1"] ?? null) !== null) {
        cargs.push(
            "-im1",
            String((params["im1"] ?? null))
        );
    }
    if ((params["num"] ?? null) !== null) {
        cargs.push(
            "-num",
            String((params["num"] ?? null))
        );
    }
    if ((params["non"] ?? null)) {
        cargs.push("-non");
    }
    if ((params["coef"] ?? null) !== null) {
        cargs.push(
            "-coef",
            String((params["coef"] ?? null))
        );
    }
    if ((params["ort"] ?? null) !== null) {
        cargs.push(
            "-ort",
            ...(params["ort"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["ideal"] ?? null) !== null) {
        cargs.push(
            "-ideal",
            ...(params["ideal"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["polref"] ?? null) !== null) {
        cargs.push(
            "-polref",
            String((params["polref"] ?? null))
        );
    }
    if ((params["fimfile"] ?? null) !== null) {
        cargs.push(
            "-fimfile",
            (params["fimfile"] ?? null)
        );
    }
    if ((params["corr"] ?? null)) {
        cargs.push("-corr");
    }
    if ((params["corfile"] ?? null) !== null) {
        cargs.push(
            "-corfile",
            (params["corfile"] ?? null)
        );
    }
    if ((params["cnrfile"] ?? null) !== null) {
        cargs.push(
            "-cnrfile",
            (params["cnrfile"] ?? null)
        );
    }
    if ((params["sigfile"] ?? null) !== null) {
        cargs.push(
            "-sigfile",
            (params["sigfile"] ?? null)
        );
    }
    if ((params["fitfile"] ?? null) !== null) {
        cargs.push(
            "-fitfile",
            (params["fitfile"] ?? null)
        );
    }
    if ((params["subort"] ?? null) !== null) {
        cargs.push(
            "-subort",
            (params["subort"] ?? null)
        );
    }
    if ((params["flim"] ?? null)) {
        cargs.push("-flim");
    }
    if ((params["clean"] ?? null)) {
        cargs.push("-clean");
    }
    if ((params["clip"] ?? null)) {
        cargs.push("-clip");
    }
    if ((params["q"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["dfspace"] ?? null)) {
        cargs.push("-dfspace");
    }
    if ((params["regbase"] ?? null) !== null) {
        cargs.push(
            "-regbase",
            (params["regbase"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fim2_outputs(
    params: Fim2Parameters,
    execution: Execution,
): Fim2Outputs {
    const ret: Fim2Outputs = {
        root: execution.outputFile("."),
        activation_magnitudes: ((params["fimfile"] ?? null) !== null) ? execution.outputFile([(params["fimfile"] ?? null)].join('')) : null,
        correlation_image: ((params["corfile"] ?? null) !== null) ? execution.outputFile([(params["corfile"] ?? null)].join('')) : null,
        contrast_to_noise_image: ((params["cnrfile"] ?? null) !== null) ? execution.outputFile([(params["cnrfile"] ?? null)].join('')) : null,
        std_deviation_image: ((params["sigfile"] ?? null) !== null) ? execution.outputFile([(params["sigfile"] ?? null)].join('')) : null,
        ls_fit_coefficients: ((params["fitfile"] ?? null) !== null) ? execution.outputFile([(params["fitfile"] ?? null)].join('')) : null,
        subtracted_references: ((params["subort"] ?? null) !== null) ? execution.outputFile([(params["subort"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fim2
 *
 * Functional Imaging Mapping Tool.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fim2Outputs`).
 */
function fim2_execute(
    params: Fim2Parameters,
    runner: Runner | null = null,
): Fim2Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIM2_METADATA);
    params = execution.params(params)
    const cargs = fim2_cargs(params, execution)
    const ret = fim2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fim2
 *
 * Functional Imaging Mapping Tool.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param image_files Input MRI image files
 * @param pcnt Correlation coefficient threshold will be 1 - 0.01 * #
 * @param pcthresh Correlation coefficient threshold will be #
 * @param im1 Index of image file to use as first in time series; default is 1
 * @param num Number of images to actually use; default is to use all images
 * @param non Turn off default normalization of the output activation image
 * @param coef Scaling factor to convert the activation output from floats to short ints
 * @param ort Filename of a time series to which the image data will be orthogonalized before correlations are computed
 * @param ideal Filename of a time series to which the image data is to be correlated
 * @param polref Use polynomials of order 0..# as extra 'orts'; default is 0
 * @param fimfile Filename to save activation magnitudes in
 * @param corr Indicates to write correlation output to image file 'fimfile.CORR'
 * @param corfile Filename to save correlation image in
 * @param cnrfile Filename to save contrast-to-noise image in
 * @param sigfile Filename to save standard deviation image in
 * @param fitfile Image files of the least squares fit coefficients of all the -ort and -polref time series
 * @param subort Filename of the new timeseries of images with the orts and polrefs subtracted out
 * @param flim Write outputs in mrilib 'float' format
 * @param clean Output images won't have the +/- 10000 values forced into their corners for scaling purposes
 * @param clip Set to zero regions of low intensity in output correlations, etc.
 * @param q Quiet operation mode
 * @param dfspace Use the 'dfspace' filter to register the images spatially before filtering.
 * @param regbase Read image in file 'fname' as the base image for registration
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fim2Outputs`).
 */
function fim2(
    image_files: Array<InputPathType>,
    pcnt: number | null = null,
    pcthresh: number | null = null,
    im1: number | null = null,
    num: number | null = null,
    non: boolean = false,
    coef: number | null = null,
    ort: Array<InputPathType> | null = null,
    ideal: Array<InputPathType> | null = null,
    polref: number | null = null,
    fimfile: string | null = null,
    corr: boolean = false,
    corfile: string | null = null,
    cnrfile: string | null = null,
    sigfile: string | null = null,
    fitfile: string | null = null,
    subort: string | null = null,
    flim: boolean = false,
    clean: boolean = false,
    clip: boolean = false,
    q: boolean = false,
    dfspace: boolean = false,
    regbase: string | null = null,
    runner: Runner | null = null,
): Fim2Outputs {
    const params = fim2_params(image_files, pcnt, pcthresh, im1, num, non, coef, ort, ideal, polref, fimfile, corr, corfile, cnrfile, sigfile, fitfile, subort, flim, clean, clip, q, dfspace, regbase)
    return fim2_execute(params, runner);
}


export {
      FIM2_METADATA,
      Fim2Outputs,
      Fim2Parameters,
      fim2,
      fim2_execute,
      fim2_params,
};
