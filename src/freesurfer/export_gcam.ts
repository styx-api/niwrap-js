// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EXPORT_GCAM_METADATA: Metadata = {
    id: "433fb1878c30c38bab33359daa220e7ac52950c8.boutiques",
    name: "exportGcam",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ExportGcamParameters {
    "@type": "freesurfer.exportGcam";
    "fixed": InputPathType;
    "moving": InputPathType;
    "morph": InputPathType;
    "out_gcam": string;
    "zlib_buffer"?: number | null | undefined;
    "bbox_threshold"?: number | null | undefined;
    "interp_method"?: "linear" | "nearest" | null | undefined;
    "test": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.exportGcam": export_gcam_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.exportGcam": export_gcam_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `export_gcam(...)`.
 *
 * @interface
 */
interface ExportGcamOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output GCAM file.
     */
    output_gcam_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fixed Fixed volume.
 * @param moving Moving volume.
 * @param morph Morph.
 * @param out_gcam Output GCAM (Geodesic Coordinate-based Anatomic Mapping).
 * @param zlib_buffer Zlib buffer pre-allocation multiplier.
 * @param bbox_threshold Threshold for bounding box. If absent, no bbox will be used.
 * @param interp_method Interpolation method. Choices: linear, nearest. Default is linear.
 * @param test Write out test files to verify the equivalence of tm3d and gcam morphs.
 *
 * @returns Parameter dictionary
 */
function export_gcam_params(
    fixed: InputPathType,
    moving: InputPathType,
    morph: InputPathType,
    out_gcam: string,
    zlib_buffer: number | null = null,
    bbox_threshold: number | null = null,
    interp_method: "linear" | "nearest" | null = "linear",
    test: boolean = false,
): ExportGcamParameters {
    const params = {
        "@type": "freesurfer.exportGcam" as const,
        "fixed": fixed,
        "moving": moving,
        "morph": morph,
        "out_gcam": out_gcam,
        "test": test,
    };
    if (zlib_buffer !== null) {
        params["zlib_buffer"] = zlib_buffer;
    }
    if (bbox_threshold !== null) {
        params["bbox_threshold"] = bbox_threshold;
    }
    if (interp_method !== null) {
        params["interp_method"] = interp_method;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function export_gcam_cargs(
    params: ExportGcamParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("exportGcam");
    cargs.push(
        "--fixed",
        execution.inputFile((params["fixed"] ?? null))
    );
    cargs.push(
        "--moving",
        execution.inputFile((params["moving"] ?? null))
    );
    cargs.push(
        "--morph",
        execution.inputFile((params["morph"] ?? null))
    );
    cargs.push(
        "--out_gcam",
        (params["out_gcam"] ?? null)
    );
    if ((params["zlib_buffer"] ?? null) !== null) {
        cargs.push(
            "--zlib_buffer",
            String((params["zlib_buffer"] ?? null))
        );
    }
    if ((params["bbox_threshold"] ?? null) !== null) {
        cargs.push(
            "--bbox_threshold",
            String((params["bbox_threshold"] ?? null))
        );
    }
    if ((params["interp_method"] ?? null) !== null) {
        cargs.push(
            "--interp",
            (params["interp_method"] ?? null)
        );
    }
    if ((params["test"] ?? null)) {
        cargs.push("--test");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function export_gcam_outputs(
    params: ExportGcamParameters,
    execution: Execution,
): ExportGcamOutputs {
    const ret: ExportGcamOutputs = {
        root: execution.outputFile("."),
        output_gcam_file: execution.outputFile([(params["out_gcam"] ?? null)].join('')),
    };
    return ret;
}


/**
 * A tool for exporting GCAM (Geodesic Coordinate-based Anatomic Mapping) morphs.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ExportGcamOutputs`).
 */
function export_gcam_execute(
    params: ExportGcamParameters,
    runner: Runner | null = null,
): ExportGcamOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EXPORT_GCAM_METADATA);
    params = execution.params(params)
    const cargs = export_gcam_cargs(params, execution)
    const ret = export_gcam_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for exporting GCAM (Geodesic Coordinate-based Anatomic Mapping) morphs.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param fixed Fixed volume.
 * @param moving Moving volume.
 * @param morph Morph.
 * @param out_gcam Output GCAM (Geodesic Coordinate-based Anatomic Mapping).
 * @param zlib_buffer Zlib buffer pre-allocation multiplier.
 * @param bbox_threshold Threshold for bounding box. If absent, no bbox will be used.
 * @param interp_method Interpolation method. Choices: linear, nearest. Default is linear.
 * @param test Write out test files to verify the equivalence of tm3d and gcam morphs.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ExportGcamOutputs`).
 */
function export_gcam(
    fixed: InputPathType,
    moving: InputPathType,
    morph: InputPathType,
    out_gcam: string,
    zlib_buffer: number | null = null,
    bbox_threshold: number | null = null,
    interp_method: "linear" | "nearest" | null = "linear",
    test: boolean = false,
    runner: Runner | null = null,
): ExportGcamOutputs {
    const params = export_gcam_params(fixed, moving, morph, out_gcam, zlib_buffer, bbox_threshold, interp_method, test)
    return export_gcam_execute(params, runner);
}


export {
      EXPORT_GCAM_METADATA,
      ExportGcamOutputs,
      ExportGcamParameters,
      export_gcam,
      export_gcam_execute,
      export_gcam_params,
};
