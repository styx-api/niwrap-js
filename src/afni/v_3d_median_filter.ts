// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_MEDIAN_FILTER_METADATA: Metadata = {
    id: "e4ff1f00010a20a209cf31d2f6355a6142d17c25.boutiques",
    name: "3dMedianFilter",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dMedianFilterParameters {
    "__STYXTYPE__": "3dMedianFilter";
    "irad"?: number | null | undefined;
    "iter"?: number | null | undefined;
    "verbose": boolean;
    "prefix"?: string | null | undefined;
    "automask": boolean;
    "dataset": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dMedianFilter": v_3d_median_filter_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dMedianFilter": v_3d_median_filter_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_median_filter(...)`.
 *
 * @interface
 */
interface V3dMedianFilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset is stored in float format.
     */
    output_brik: OutputPathType | null;
    /**
     * Output dataset header file.
     */
    output_head: OutputPathType | null;
}


function v_3d_median_filter_params(
    dataset: InputPathType,
    irad: number | null = null,
    iter: number | null = null,
    verbose: boolean = false,
    prefix: string | null = null,
    automask: boolean = false,
): V3dMedianFilterParameters {
    /**
     * Build parameters.
    
     * @param dataset Input dataset
     * @param irad Radius in voxels of spherical regions
     * @param iter Iterate 'n' times [default=1]
     * @param verbose Be verbose during run
     * @param prefix Use 'pp' for prefix of output dataset
     * @param automask Create a mask (a la 3dAutomask)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dMedianFilter" as const,
        "verbose": verbose,
        "automask": automask,
        "dataset": dataset,
    };
    if (irad !== null) {
        params["irad"] = irad;
    }
    if (iter !== null) {
        params["iter"] = iter;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function v_3d_median_filter_cargs(
    params: V3dMedianFilterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dMedianFilter");
    if ((params["irad"] ?? null) !== null) {
        cargs.push(
            "-irad",
            String((params["irad"] ?? null))
        );
    }
    if ((params["iter"] ?? null) !== null) {
        cargs.push(
            "-iter",
            String((params["iter"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    return cargs;
}


function v_3d_median_filter_outputs(
    params: V3dMedianFilterParameters,
    execution: Execution,
): V3dMedianFilterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dMedianFilterOutputs = {
        root: execution.outputFile("."),
        output_brik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+tlrc.BRIK"].join('')) : null,
        output_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+tlrc.HEAD"].join('')) : null,
    };
    return ret;
}


function v_3d_median_filter_execute(
    params: V3dMedianFilterParameters,
    execution: Execution,
): V3dMedianFilterOutputs {
    /**
     * Computes the median in a spherical neighborhood around each point in the input to produce the output.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dMedianFilterOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_median_filter_cargs(params, execution)
    const ret = v_3d_median_filter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_median_filter(
    dataset: InputPathType,
    irad: number | null = null,
    iter: number | null = null,
    verbose: boolean = false,
    prefix: string | null = null,
    automask: boolean = false,
    runner: Runner | null = null,
): V3dMedianFilterOutputs {
    /**
     * Computes the median in a spherical neighborhood around each point in the input to produce the output.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dataset Input dataset
     * @param irad Radius in voxels of spherical regions
     * @param iter Iterate 'n' times [default=1]
     * @param verbose Be verbose during run
     * @param prefix Use 'pp' for prefix of output dataset
     * @param automask Create a mask (a la 3dAutomask)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dMedianFilterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_MEDIAN_FILTER_METADATA);
    const params = v_3d_median_filter_params(dataset, irad, iter, verbose, prefix, automask)
    return v_3d_median_filter_execute(params, execution);
}


export {
      V3dMedianFilterOutputs,
      V3dMedianFilterParameters,
      V_3D_MEDIAN_FILTER_METADATA,
      v_3d_median_filter,
      v_3d_median_filter_params,
};
