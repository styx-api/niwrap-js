// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DTIGEN_METADATA: Metadata = {
    id: "abaee699f51242a35eba0eb7f3373dacc2e8c362.boutiques",
    name: "dtigen",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface DtigenParameters {
    "@type": "fsl.dtigen";
    "tensor": InputPathType;
    "s0": InputPathType;
    "output_data": string;
    "bvecs": InputPathType;
    "bvals": InputPathType;
    "brainmask": InputPathType;
    "kurtosis"?: InputPathType | null | undefined;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.dtigen": dtigen_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.dtigen": dtigen_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dtigen(...)`.
 *
 * @interface
 */
interface DtigenOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output diffusion data
     */
    output_diffusion_data: OutputPathType;
    /**
     * Mean kurtosis map
     */
    output_kurtosis_map: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param tensor Input tensor file
 * @param s0 Input S0 file
 * @param output_data Output data file
 * @param bvecs bvecs ASCII text file
 * @param bvals bvals ASCII text file
 * @param brainmask Brain mask file
 * @param kurtosis Mean kurtosis map
 * @param help Display help message
 *
 * @returns Parameter dictionary
 */
function dtigen_params(
    tensor: InputPathType,
    s0: InputPathType,
    output_data: string,
    bvecs: InputPathType,
    bvals: InputPathType,
    brainmask: InputPathType,
    kurtosis: InputPathType | null = null,
    help: boolean = false,
): DtigenParameters {
    const params = {
        "@type": "fsl.dtigen" as const,
        "tensor": tensor,
        "s0": s0,
        "output_data": output_data,
        "bvecs": bvecs,
        "bvals": bvals,
        "brainmask": brainmask,
        "help": help,
    };
    if (kurtosis !== null) {
        params["kurtosis"] = kurtosis;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dtigen_cargs(
    params: DtigenParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dtigen");
    cargs.push(
        "-t",
        execution.inputFile((params["tensor"] ?? null))
    );
    cargs.push(
        "--s0",
        execution.inputFile((params["s0"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_data"] ?? null)
    );
    cargs.push(
        "-r",
        execution.inputFile((params["bvecs"] ?? null))
    );
    cargs.push(
        "-b",
        execution.inputFile((params["bvals"] ?? null))
    );
    cargs.push(
        "-m",
        execution.inputFile((params["brainmask"] ?? null))
    );
    if ((params["kurtosis"] ?? null) !== null) {
        cargs.push(
            "--kurt",
            execution.inputFile((params["kurtosis"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dtigen_outputs(
    params: DtigenParameters,
    execution: Execution,
): DtigenOutputs {
    const ret: DtigenOutputs = {
        root: execution.outputFile("."),
        output_diffusion_data: execution.outputFile([(params["output_data"] ?? null), ".nii.gz"].join('')),
        output_kurtosis_map: ((params["kurtosis"] ?? null) !== null) ? execution.outputFile([path.basename((params["kurtosis"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * dtigen
 *
 * Generate diffusion data using tensor model.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DtigenOutputs`).
 */
function dtigen_execute(
    params: DtigenParameters,
    runner: Runner | null = null,
): DtigenOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DTIGEN_METADATA);
    params = execution.params(params)
    const cargs = dtigen_cargs(params, execution)
    const ret = dtigen_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dtigen
 *
 * Generate diffusion data using tensor model.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param tensor Input tensor file
 * @param s0 Input S0 file
 * @param output_data Output data file
 * @param bvecs bvecs ASCII text file
 * @param bvals bvals ASCII text file
 * @param brainmask Brain mask file
 * @param kurtosis Mean kurtosis map
 * @param help Display help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DtigenOutputs`).
 */
function dtigen(
    tensor: InputPathType,
    s0: InputPathType,
    output_data: string,
    bvecs: InputPathType,
    bvals: InputPathType,
    brainmask: InputPathType,
    kurtosis: InputPathType | null = null,
    help: boolean = false,
    runner: Runner | null = null,
): DtigenOutputs {
    const params = dtigen_params(tensor, s0, output_data, bvecs, bvals, brainmask, kurtosis, help)
    return dtigen_execute(params, runner);
}


export {
      DTIGEN_METADATA,
      DtigenOutputs,
      DtigenParameters,
      dtigen,
      dtigen_execute,
      dtigen_params,
};
