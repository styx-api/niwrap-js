// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_REGRESSION_METADATA: Metadata = {
    id: "e3641a35c57716914631d8e27cdf8dee58a0c389.boutiques",
    name: "metric-regression",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricRegressionRemoveParameters {
    "@type": "workbench.metric-regression.remove";
    "metric": InputPathType;
    "opt_remove_column_column"?: string | null | undefined;
}


interface MetricRegressionKeepParameters {
    "@type": "workbench.metric-regression.keep";
    "metric": InputPathType;
    "opt_keep_column_column"?: string | null | undefined;
}


interface MetricRegressionParameters {
    "@type": "workbench.metric-regression";
    "metric_in": InputPathType;
    "metric_out": string;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_column_column"?: string | null | undefined;
    "remove"?: Array<MetricRegressionRemoveParameters> | null | undefined;
    "keep"?: Array<MetricRegressionKeepParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metric-regression": metric_regression_cargs,
        "workbench.metric-regression.remove": metric_regression_remove_cargs,
        "workbench.metric-regression.keep": metric_regression_keep_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.metric-regression": metric_regression_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param metric the metric file to use
 * @param opt_remove_column_column select a column to use, rather than all: the column number or name
 *
 * @returns Parameter dictionary
 */
function metric_regression_remove_params(
    metric: InputPathType,
    opt_remove_column_column: string | null = null,
): MetricRegressionRemoveParameters {
    const params = {
        "@type": "workbench.metric-regression.remove" as const,
        "metric": metric,
    };
    if (opt_remove_column_column !== null) {
        params["opt_remove_column_column"] = opt_remove_column_column;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_regression_remove_cargs(
    params: MetricRegressionRemoveParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-remove");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    if ((params["opt_remove_column_column"] ?? null) !== null) {
        cargs.push(
            "-remove-column",
            (params["opt_remove_column_column"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param metric the metric file to use
 * @param opt_keep_column_column select a column to use, rather than all: the column number or name
 *
 * @returns Parameter dictionary
 */
function metric_regression_keep_params(
    metric: InputPathType,
    opt_keep_column_column: string | null = null,
): MetricRegressionKeepParameters {
    const params = {
        "@type": "workbench.metric-regression.keep" as const,
        "metric": metric,
    };
    if (opt_keep_column_column !== null) {
        params["opt_keep_column_column"] = opt_keep_column_column;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_regression_keep_cargs(
    params: MetricRegressionKeepParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-keep");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    if ((params["opt_keep_column_column"] ?? null) !== null) {
        cargs.push(
            "-keep-column",
            (params["opt_keep_column_column"] ?? null)
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `metric_regression(...)`.
 *
 * @interface
 */
interface MetricRegressionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param metric_in the metric to regress from
 * @param metric_out the output metric
 * @param opt_roi_roi_metric only regress inside an roi: the area to use for regression, as a metric
 * @param opt_column_column select a single column to regress from: the column number or name
 * @param remove specify a metric to regress out
 * @param keep specify a metric to include in regression, but not remove
 *
 * @returns Parameter dictionary
 */
function metric_regression_params(
    metric_in: InputPathType,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    remove: Array<MetricRegressionRemoveParameters> | null = null,
    keep: Array<MetricRegressionKeepParameters> | null = null,
): MetricRegressionParameters {
    const params = {
        "@type": "workbench.metric-regression" as const,
        "metric_in": metric_in,
        "metric_out": metric_out,
    };
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (remove !== null) {
        params["remove"] = remove;
    }
    if (keep !== null) {
        params["keep"] = keep;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_regression_cargs(
    params: MetricRegressionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-regression");
    cargs.push(execution.inputFile((params["metric_in"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    if ((params["remove"] ?? null) !== null) {
        cargs.push(...(params["remove"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["keep"] ?? null) !== null) {
        cargs.push(...(params["keep"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_regression_outputs(
    params: MetricRegressionParameters,
    execution: Execution,
): MetricRegressionOutputs {
    const ret: MetricRegressionOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Regress spatial map out of a metric file.
 *
 * For each regressor, its mean across the surface is subtracted from its data.  Each input map is then regressed against these, and a constant term.  The resulting regressed slopes of all regressors specified with -remove are multiplied with their respective regressor maps, and these are subtracted from the input map.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MetricRegressionOutputs`).
 */
function metric_regression_execute(
    params: MetricRegressionParameters,
    execution: Execution,
): MetricRegressionOutputs {
    params = execution.params(params)
    const cargs = metric_regression_cargs(params, execution)
    const ret = metric_regression_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Regress spatial map out of a metric file.
 *
 * For each regressor, its mean across the surface is subtracted from its data.  Each input map is then regressed against these, and a constant term.  The resulting regressed slopes of all regressors specified with -remove are multiplied with their respective regressor maps, and these are subtracted from the input map.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param metric_in the metric to regress from
 * @param metric_out the output metric
 * @param opt_roi_roi_metric only regress inside an roi: the area to use for regression, as a metric
 * @param opt_column_column select a single column to regress from: the column number or name
 * @param remove specify a metric to regress out
 * @param keep specify a metric to include in regression, but not remove
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricRegressionOutputs`).
 */
function metric_regression(
    metric_in: InputPathType,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    remove: Array<MetricRegressionRemoveParameters> | null = null,
    keep: Array<MetricRegressionKeepParameters> | null = null,
    runner: Runner | null = null,
): MetricRegressionOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_REGRESSION_METADATA);
    const params = metric_regression_params(metric_in, metric_out, opt_roi_roi_metric, opt_column_column, remove, keep)
    return metric_regression_execute(params, execution);
}


export {
      METRIC_REGRESSION_METADATA,
      MetricRegressionKeepParameters,
      MetricRegressionOutputs,
      MetricRegressionParameters,
      MetricRegressionRemoveParameters,
      metric_regression,
      metric_regression_cargs,
      metric_regression_execute,
      metric_regression_keep_cargs,
      metric_regression_keep_params,
      metric_regression_outputs,
      metric_regression_params,
      metric_regression_remove_cargs,
      metric_regression_remove_params,
};
