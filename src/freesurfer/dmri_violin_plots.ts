// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_VIOLIN_PLOTS_METADATA: Metadata = {
    id: "bfd3395e98f397268b14fd38e421efd6a400a506.boutiques",
    name: "dmri_violinPlots",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriViolinPlotsParameters {
    "@type": "freesurfer.dmri_violinPlots";
    "input_directory": string;
    "labels": InputPathType;
    "structure": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_violinPlots": dmri_violin_plots_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_violin_plots(...)`.
 *
 * @interface
 */
interface DmriViolinPlotsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_directory Directory with all subjects
 * @param labels CSV file with group labels
 * @param structure Name of the structure
 *
 * @returns Parameter dictionary
 */
function dmri_violin_plots_params(
    input_directory: string,
    labels: InputPathType,
    structure: string,
): DmriViolinPlotsParameters {
    const params = {
        "@type": "freesurfer.dmri_violinPlots" as const,
        "input_directory": input_directory,
        "labels": labels,
        "structure": structure,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_violin_plots_cargs(
    params: DmriViolinPlotsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_violinPlots");
    cargs.push(
        "-i",
        (params["input_directory"] ?? null)
    );
    cargs.push(
        "-l",
        execution.inputFile((params["labels"] ?? null))
    );
    cargs.push(
        "-s",
        (params["structure"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_violin_plots_outputs(
    params: DmriViolinPlotsParameters,
    execution: Execution,
): DmriViolinPlotsOutputs {
    const ret: DmriViolinPlotsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * dmri_violinPlots
 *
 * Generate violin plots for dMRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriViolinPlotsOutputs`).
 */
function dmri_violin_plots_execute(
    params: DmriViolinPlotsParameters,
    runner: Runner | null = null,
): DmriViolinPlotsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_VIOLIN_PLOTS_METADATA);
    params = execution.params(params)
    const cargs = dmri_violin_plots_cargs(params, execution)
    const ret = dmri_violin_plots_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_violinPlots
 *
 * Generate violin plots for dMRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_directory Directory with all subjects
 * @param labels CSV file with group labels
 * @param structure Name of the structure
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriViolinPlotsOutputs`).
 */
function dmri_violin_plots(
    input_directory: string,
    labels: InputPathType,
    structure: string,
    runner: Runner | null = null,
): DmriViolinPlotsOutputs {
    const params = dmri_violin_plots_params(input_directory, labels, structure)
    return dmri_violin_plots_execute(params, runner);
}


export {
      DMRI_VIOLIN_PLOTS_METADATA,
      DmriViolinPlotsOutputs,
      DmriViolinPlotsParameters,
      dmri_violin_plots,
      dmri_violin_plots_execute,
      dmri_violin_plots_params,
};
