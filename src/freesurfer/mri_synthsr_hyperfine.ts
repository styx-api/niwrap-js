// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SYNTHSR_HYPERFINE_METADATA: Metadata = {
    id: "57ebf5df91e40f506a0d1c025ac3cea3737635c1.boutiques",
    name: "mri_synthsr_hyperfine",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSynthsrHyperfineParameters {
    "@type": "freesurfer.mri_synthsr_hyperfine";
    "t1_image": InputPathType;
    "t2_image": InputPathType;
    "output": string;
    "threads"?: number | null | undefined;
    "cpu": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_synthsr_hyperfine": mri_synthsr_hyperfine_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_synthsr_hyperfine": mri_synthsr_hyperfine_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_synthsr_hyperfine(...)`.
 *
 * @interface
 */
interface MriSynthsrHyperfineOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Synthetic 1mm MP-RAGE(s) generated from T1 and T2 inputs
     */
    synthetic_mprage: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param t1_image T1 image(s) to super-resolve, at native 1.5x1.5x5 axial resolution. Can be a path to an image or to a folder.
 * @param t2_image T2 image(s). Must be a folder if --t1 designates a folder. These must be registered to the T1s, in physical coordinates (i.e., with the headers, do NOT resample when registering; see instructions on FreeSurfer wiki)
 * @param output Output(s), i.e. synthetic 1mm MP-RAGE(s). Must be a folder if --t1 designates a folder.
 * @param threads (optional) Number of cores to be used. Default is 1.
 * @param cpu (optional) Enforce running with CPU rather than GPU.
 *
 * @returns Parameter dictionary
 */
function mri_synthsr_hyperfine_params(
    t1_image: InputPathType,
    t2_image: InputPathType,
    output: string,
    threads: number | null = null,
    cpu: boolean = false,
): MriSynthsrHyperfineParameters {
    const params = {
        "@type": "freesurfer.mri_synthsr_hyperfine" as const,
        "t1_image": t1_image,
        "t2_image": t2_image,
        "output": output,
        "cpu": cpu,
    };
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_synthsr_hyperfine_cargs(
    params: MriSynthsrHyperfineParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_synthsr_hyperfine");
    cargs.push(
        "--t1",
        execution.inputFile((params["t1_image"] ?? null))
    );
    cargs.push(
        "--t2",
        execution.inputFile((params["t2_image"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output"] ?? null)
    );
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["cpu"] ?? null)) {
        cargs.push("--cpu");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_synthsr_hyperfine_outputs(
    params: MriSynthsrHyperfineParameters,
    execution: Execution,
): MriSynthsrHyperfineOutputs {
    const ret: MriSynthsrHyperfineOutputs = {
        root: execution.outputFile("."),
        synthetic_mprage: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_synthsr_hyperfine
 *
 * Implementation of SynthSR that generates a synthetic 1mm MP-RAGE from a pair of T1-T2 standard Hyperfine scans (1.5x1.5x5mm axial).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSynthsrHyperfineOutputs`).
 */
function mri_synthsr_hyperfine_execute(
    params: MriSynthsrHyperfineParameters,
    runner: Runner | null = null,
): MriSynthsrHyperfineOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SYNTHSR_HYPERFINE_METADATA);
    params = execution.params(params)
    const cargs = mri_synthsr_hyperfine_cargs(params, execution)
    const ret = mri_synthsr_hyperfine_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_synthsr_hyperfine
 *
 * Implementation of SynthSR that generates a synthetic 1mm MP-RAGE from a pair of T1-T2 standard Hyperfine scans (1.5x1.5x5mm axial).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param t1_image T1 image(s) to super-resolve, at native 1.5x1.5x5 axial resolution. Can be a path to an image or to a folder.
 * @param t2_image T2 image(s). Must be a folder if --t1 designates a folder. These must be registered to the T1s, in physical coordinates (i.e., with the headers, do NOT resample when registering; see instructions on FreeSurfer wiki)
 * @param output Output(s), i.e. synthetic 1mm MP-RAGE(s). Must be a folder if --t1 designates a folder.
 * @param threads (optional) Number of cores to be used. Default is 1.
 * @param cpu (optional) Enforce running with CPU rather than GPU.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSynthsrHyperfineOutputs`).
 */
function mri_synthsr_hyperfine(
    t1_image: InputPathType,
    t2_image: InputPathType,
    output: string,
    threads: number | null = null,
    cpu: boolean = false,
    runner: Runner | null = null,
): MriSynthsrHyperfineOutputs {
    const params = mri_synthsr_hyperfine_params(t1_image, t2_image, output, threads, cpu)
    return mri_synthsr_hyperfine_execute(params, runner);
}


export {
      MRI_SYNTHSR_HYPERFINE_METADATA,
      MriSynthsrHyperfineOutputs,
      MriSynthsrHyperfineParameters,
      mri_synthsr_hyperfine,
      mri_synthsr_hyperfine_execute,
      mri_synthsr_hyperfine_params,
};
