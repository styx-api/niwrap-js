// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_RESCALE_METADATA: Metadata = {
    id: "7c34665e3228c1d75cd583cfdaebcd5129ccb2cf.boutiques",
    name: "mris_rescale",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRescaleParameters {
    "@type": "freesurfer.mris_rescale";
    "input_surface": InputPathType;
    "output_surface": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_rescale": mris_rescale_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_rescale": mris_rescale_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_rescale(...)`.
 *
 * @interface
 */
interface MrisRescaleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The file containing the rescaled surface.
     */
    rescaled_output_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface The input surface file to be rescaled.
 * @param output_surface The output surface file after rescaling.
 *
 * @returns Parameter dictionary
 */
function mris_rescale_params(
    input_surface: InputPathType,
    output_surface: string,
): MrisRescaleParameters {
    const params = {
        "@type": "freesurfer.mris_rescale" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_rescale_cargs(
    params: MrisRescaleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_rescale");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_rescale_outputs(
    params: MrisRescaleParameters,
    execution: Execution,
): MrisRescaleOutputs {
    const ret: MrisRescaleOutputs = {
        root: execution.outputFile("."),
        rescaled_output_surface: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


/**
 * This program will rescale a surface representation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrisRescaleOutputs`).
 */
function mris_rescale_execute(
    params: MrisRescaleParameters,
    execution: Execution,
): MrisRescaleOutputs {
    params = execution.params(params)
    const cargs = mris_rescale_cargs(params, execution)
    const ret = mris_rescale_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program will rescale a surface representation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface The input surface file to be rescaled.
 * @param output_surface The output surface file after rescaling.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRescaleOutputs`).
 */
function mris_rescale(
    input_surface: InputPathType,
    output_surface: string,
    runner: Runner | null = null,
): MrisRescaleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_RESCALE_METADATA);
    const params = mris_rescale_params(input_surface, output_surface)
    return mris_rescale_execute(params, execution);
}


export {
      MRIS_RESCALE_METADATA,
      MrisRescaleOutputs,
      MrisRescaleParameters,
      mris_rescale,
      mris_rescale_cargs,
      mris_rescale_execute,
      mris_rescale_outputs,
      mris_rescale_params,
};
