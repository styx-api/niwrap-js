// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_PROBE_IMA_METADATA: Metadata = {
    id: "b65fa164df8c152f809036a62acf6694a68d33bd.boutiques",
    name: "mri_probe_ima",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriProbeImaParameters {
    "__STYXTYPE__": "mri_probe_ima";
    "ima_file": InputPathType;
    "key_string"?: string | null | undefined;
    "offset_type_len"?: string | null | undefined;
    "attribute_name"?: string | null | undefined;
    "fileinfo": boolean;
    "dictionary": boolean;
    "ob_stem"?: string | null | undefined;
    "help": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_probe_ima": mri_probe_ima_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_probe_ima(...)`.
 *
 * @interface
 */
interface MriProbeImaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mri_probe_ima_params(
    ima_file: InputPathType,
    key_string: string | null = null,
    offset_type_len: string | null = null,
    attribute_name: string | null = null,
    fileinfo: boolean = false,
    dictionary: boolean = false,
    ob_stem: string | null = null,
    help: boolean = false,
    version: boolean = false,
): MriProbeImaParameters {
    /**
     * Build parameters.
    
     * @param ima_file Path to the IMA file to be probed.
     * @param key_string String from dictionary to query the IMA file.
     * @param offset_type_len Offset, type, and string length for querying. Type can be short, int, long, float, double, or string.
     * @param attribute_name Name of the file information attribute to query.
     * @param fileinfo Dump the interpreted file information.
     * @param dictionary Dump the dictionary without the need of an IMA file.
     * @param ob_stem Dump binary pixel data into bshort with stem prefix.
     * @param help Show help message and exit.
     * @param version Print version and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_probe_ima" as const,
        "ima_file": ima_file,
        "fileinfo": fileinfo,
        "dictionary": dictionary,
        "help": help,
        "version": version,
    };
    if (key_string !== null) {
        params["key_string"] = key_string;
    }
    if (offset_type_len !== null) {
        params["offset_type_len"] = offset_type_len;
    }
    if (attribute_name !== null) {
        params["attribute_name"] = attribute_name;
    }
    if (ob_stem !== null) {
        params["ob_stem"] = ob_stem;
    }
    return params;
}


function mri_probe_ima_cargs(
    params: MriProbeImaParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_probe_ima");
    cargs.push(
        "--i",
        execution.inputFile((params["ima_file"] ?? null))
    );
    if ((params["key_string"] ?? null) !== null) {
        cargs.push(
            "--key",
            (params["key_string"] ?? null)
        );
    }
    if ((params["offset_type_len"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["offset_type_len"] ?? null)
        );
    }
    if ((params["attribute_name"] ?? null) !== null) {
        cargs.push(
            "--attr",
            (params["attribute_name"] ?? null)
        );
    }
    if ((params["fileinfo"] ?? null)) {
        cargs.push("--fileinfo");
    }
    if ((params["dictionary"] ?? null)) {
        cargs.push("--dictionary");
    }
    if ((params["ob_stem"] ?? null) !== null) {
        cargs.push(
            "--ob",
            (params["ob_stem"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function mri_probe_ima_outputs(
    params: MriProbeImaParameters,
    execution: Execution,
): MriProbeImaOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriProbeImaOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mri_probe_ima_execute(
    params: MriProbeImaParameters,
    execution: Execution,
): MriProbeImaOutputs {
    /**
     * Query Siemens IMA files to extract header information.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriProbeImaOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_probe_ima_cargs(params, execution)
    const ret = mri_probe_ima_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_probe_ima(
    ima_file: InputPathType,
    key_string: string | null = null,
    offset_type_len: string | null = null,
    attribute_name: string | null = null,
    fileinfo: boolean = false,
    dictionary: boolean = false,
    ob_stem: string | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriProbeImaOutputs {
    /**
     * Query Siemens IMA files to extract header information.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param ima_file Path to the IMA file to be probed.
     * @param key_string String from dictionary to query the IMA file.
     * @param offset_type_len Offset, type, and string length for querying. Type can be short, int, long, float, double, or string.
     * @param attribute_name Name of the file information attribute to query.
     * @param fileinfo Dump the interpreted file information.
     * @param dictionary Dump the dictionary without the need of an IMA file.
     * @param ob_stem Dump binary pixel data into bshort with stem prefix.
     * @param help Show help message and exit.
     * @param version Print version and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriProbeImaOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_PROBE_IMA_METADATA);
    const params = mri_probe_ima_params(ima_file, key_string, offset_type_len, attribute_name, fileinfo, dictionary, ob_stem, help, version)
    return mri_probe_ima_execute(params, execution);
}


export {
      MRI_PROBE_IMA_METADATA,
      MriProbeImaOutputs,
      MriProbeImaParameters,
      mri_probe_ima,
      mri_probe_ima_params,
};
