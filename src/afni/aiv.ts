// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AIV_METADATA: Metadata = {
    id: "05bb93514322b857558474baa36c5e97e4bbf89e.boutiques",
    name: "aiv",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AivParameters {
    "@type"?: "afni/aiv";
    "verbose": boolean;
    "quiet": boolean;
    "title"?: string | null | undefined;
    "port"?: number | null | undefined;
    "pad"?: string | null | undefined;
    "input_images": Array<InputPathType>;
}
type AivParametersTagged = Required<Pick<AivParameters, '@type'>> & AivParameters;


/**
 * Output object returned when calling `AivParameters(...)`.
 *
 * @interface
 */
interface AivOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_images Input image files (e.g., img1.jpg, img2.bmp).
 * @param verbose Print out the image filenames for progress tracking.
 * @param quiet Run the program in quiet mode.
 * @param title Specify the window title.
 * @param port Listen to TCP/IP port for incoming images.
 * @param pad Pad all input images to be the same size.
 *
 * @returns Parameter dictionary
 */
function aiv_params(
    input_images: Array<InputPathType>,
    verbose: boolean = false,
    quiet: boolean = false,
    title: string | null = null,
    port: number | null = null,
    pad: string | null = null,
): AivParametersTagged {
    const params = {
        "@type": "afni/aiv" as const,
        "verbose": verbose,
        "quiet": quiet,
        "input_images": input_images,
    };
    if (title !== null) {
        params["title"] = title;
    }
    if (port !== null) {
        params["port"] = port;
    }
    if (pad !== null) {
        params["pad"] = pad;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function aiv_cargs(
    params: AivParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("aiv");
    if ((params["verbose"] ?? false)) {
        cargs.push("-v");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-q");
    }
    if ((params["title"] ?? null) !== null) {
        cargs.push(
            "-title",
            (params["title"] ?? null)
        );
    }
    if ((params["port"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["port"] ?? null))
        );
    }
    if ((params["pad"] ?? null) !== null) {
        cargs.push(
            "-pad",
            (params["pad"] ?? null)
        );
    }
    cargs.push(...(params["input_images"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function aiv_outputs(
    params: AivParameters,
    execution: Execution,
): AivOutputs {
    const ret: AivOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * aiv
 *
 * AFNI Image Viewer program. Shows the 2D images on the command line in an AFNI-like image viewer.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AivOutputs`).
 */
function aiv_execute(
    params: AivParameters,
    runner: Runner | null = null,
): AivOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AIV_METADATA);
    params = execution.params(params)
    const cargs = aiv_cargs(params, execution)
    const ret = aiv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * aiv
 *
 * AFNI Image Viewer program. Shows the 2D images on the command line in an AFNI-like image viewer.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_images Input image files (e.g., img1.jpg, img2.bmp).
 * @param verbose Print out the image filenames for progress tracking.
 * @param quiet Run the program in quiet mode.
 * @param title Specify the window title.
 * @param port Listen to TCP/IP port for incoming images.
 * @param pad Pad all input images to be the same size.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AivOutputs`).
 */
function aiv(
    input_images: Array<InputPathType>,
    verbose: boolean = false,
    quiet: boolean = false,
    title: string | null = null,
    port: number | null = null,
    pad: string | null = null,
    runner: Runner | null = null,
): AivOutputs {
    const params = aiv_params(input_images, verbose, quiet, title, port, pad)
    return aiv_execute(params, runner);
}


export {
      AIV_METADATA,
      AivOutputs,
      aiv,
      aiv_execute,
      aiv_params,
};
