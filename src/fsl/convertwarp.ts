// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERTWARP_METADATA: Metadata = {
    id: "cd7b2e6bda3ae320e54128fba7348ed3eb91d604.boutiques",
    name: "convertwarp",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ConvertwarpParameters {
    "__STYXTYPE__": "convertwarp";
    "abswarp": boolean;
    "cons_jacobian": boolean;
    "jacobian_max"?: number | null | undefined;
    "jacobian_min"?: number | null | undefined;
    "midmat"?: InputPathType | null | undefined;
    "out_abswarp": boolean;
    "out_relwarp": boolean;
    "output_type"?: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null | undefined;
    "postmat"?: InputPathType | null | undefined;
    "premat"?: InputPathType | null | undefined;
    "reference": InputPathType;
    "relwarp": boolean;
    "shift_direction"?: "y-" | "y" | "x" | "x-" | "z" | "z-" | null | undefined;
    "shift_in_file"?: InputPathType | null | undefined;
    "warp1"?: InputPathType | null | undefined;
    "warp2"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "convertwarp": convertwarp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "convertwarp": convertwarp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `convertwarp(...)`.
 *
 * @interface
 */
interface ConvertwarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Name of output file, containing warps that are the combination of all those given as arguments. the format of this will be a field-file (rather than spline coefficients) with any affine components included.
     */
    out_file: OutputPathType;
    /**
     * Name of output file, containing the warp as field or coefficients.
     */
    out_file_: OutputPathType;
}


function convertwarp_params(
    reference: InputPathType,
    abswarp: boolean = false,
    cons_jacobian: boolean = false,
    jacobian_max: number | null = null,
    jacobian_min: number | null = null,
    midmat: InputPathType | null = null,
    out_abswarp: boolean = false,
    out_relwarp: boolean = false,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    postmat: InputPathType | null = null,
    premat: InputPathType | null = null,
    relwarp: boolean = false,
    shift_direction: "y-" | "y" | "x" | "x-" | "z" | "z-" | null = null,
    shift_in_file: InputPathType | null = null,
    warp1: InputPathType | null = null,
    warp2: InputPathType | null = null,
): ConvertwarpParameters {
    /**
     * Build parameters.
    
     * @param reference Name of a file in target space of the full transform.
     * @param abswarp If set it indicates that the warps in --warp1 and --warp2 should be interpreted as absolute. i.e. the values in --warp1/2 are the coordinates in the next space, rather than displacements. this flag is ignored if --warp1/2 was created by fnirt, which always creates relative displacements.
     * @param cons_jacobian Constrain the jacobian of the warpfield to lie within specified min/max limits.
     * @param jacobian_max Maximum acceptable jacobian value for constraint (default 100.0).
     * @param jacobian_min Minimum acceptable jacobian value for constraint (default 0.01).
     * @param midmat Name of file containing mid-warp-affine transform.
     * @param out_abswarp If set it indicates that the warps in --out should be absolute, i.e. the values in --out are displacements from the coordinates in --ref.
     * @param out_relwarp If set it indicates that the warps in --out should be relative, i.e. the values in --out are displacements from the coordinates in --ref.
     * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
     * @param postmat Name of file containing an affine transform (applied last). it could e.g. be an affine transform that maps the mni152-space into a better approximation to the talairach-space (if indeed there is one).
     * @param premat Filename for pre-transform (affine matrix).
     * @param relwarp If set it indicates that the warps in --warp1/2 should be interpreted as relative. i.e. the values in --warp1/2 are displacements from the coordinates in the next space.
     * @param shift_direction 'y-' or 'y' or 'x' or 'x-' or 'z' or 'z-'. Indicates the direction that the distortions from --shiftmap goes. it depends on the direction and polarity of the phase-encoding in the epi sequence.
     * @param shift_in_file Name of file containing a "shiftmap", a non-linear transform with displacements only in one direction (applied first, before premat). this would typically be a fieldmap that has been pre-processed using fugue that maps a subjects functional (epi) data onto an undistorted space (i.e. a space that corresponds to his/her true anatomy).
     * @param warp1 Name of file containing initial warp-fields/coefficients (follows premat). this could e.g. be a fnirt-transform from a subjects structural scan to an average of a group of subjects.
     * @param warp2 Name of file containing secondary warp-fields/coefficients (after warp1/midmat but before postmat). this could e.g. be a fnirt-transform from the average of a group of subjects to some standard space (e.g. mni152).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "convertwarp" as const,
        "abswarp": abswarp,
        "cons_jacobian": cons_jacobian,
        "out_abswarp": out_abswarp,
        "out_relwarp": out_relwarp,
        "reference": reference,
        "relwarp": relwarp,
    };
    if (jacobian_max !== null) {
        params["jacobian_max"] = jacobian_max;
    }
    if (jacobian_min !== null) {
        params["jacobian_min"] = jacobian_min;
    }
    if (midmat !== null) {
        params["midmat"] = midmat;
    }
    if (output_type !== null) {
        params["output_type"] = output_type;
    }
    if (postmat !== null) {
        params["postmat"] = postmat;
    }
    if (premat !== null) {
        params["premat"] = premat;
    }
    if (shift_direction !== null) {
        params["shift_direction"] = shift_direction;
    }
    if (shift_in_file !== null) {
        params["shift_in_file"] = shift_in_file;
    }
    if (warp1 !== null) {
        params["warp1"] = warp1;
    }
    if (warp2 !== null) {
        params["warp2"] = warp2;
    }
    return params;
}


function convertwarp_cargs(
    params: ConvertwarpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("convertwarp");
    if ((params["abswarp"] ?? null)) {
        cargs.push("--abs");
    }
    if ((params["cons_jacobian"] ?? null)) {
        cargs.push("--constrainj");
    }
    if ((params["jacobian_max"] ?? null) !== null) {
        cargs.push(["--jmax=", String((params["jacobian_max"] ?? null))].join(''));
    }
    if ((params["jacobian_min"] ?? null) !== null) {
        cargs.push(["--jmin=", String((params["jacobian_min"] ?? null))].join(''));
    }
    if ((params["midmat"] ?? null) !== null) {
        cargs.push(["--midmat=", execution.inputFile((params["midmat"] ?? null))].join(''));
    }
    if ((params["out_abswarp"] ?? null)) {
        cargs.push("--absout");
    }
    if ((params["out_relwarp"] ?? null)) {
        cargs.push("--relout");
    }
    if ((params["output_type"] ?? null) !== null) {
        cargs.push((params["output_type"] ?? null));
    }
    if ((params["postmat"] ?? null) !== null) {
        cargs.push(["--postmat=", execution.inputFile((params["postmat"] ?? null))].join(''));
    }
    if ((params["premat"] ?? null) !== null) {
        cargs.push(["--premat=", execution.inputFile((params["premat"] ?? null))].join(''));
    }
    cargs.push(["--ref=", execution.inputFile((params["reference"] ?? null))].join(''));
    if ((params["relwarp"] ?? null)) {
        cargs.push("--rel");
    }
    if ((params["shift_direction"] ?? null) !== null) {
        cargs.push(["--shiftdir=", (params["shift_direction"] ?? null)].join(''));
    }
    if ((params["shift_in_file"] ?? null) !== null) {
        cargs.push(["--shiftmap=", execution.inputFile((params["shift_in_file"] ?? null))].join(''));
    }
    if ((params["warp1"] ?? null) !== null) {
        cargs.push(["--warp1=", execution.inputFile((params["warp1"] ?? null))].join(''));
    }
    if ((params["warp2"] ?? null) !== null) {
        cargs.push(["--warp2=", execution.inputFile((params["warp2"] ?? null))].join(''));
    }
    return cargs;
}


function convertwarp_outputs(
    params: ConvertwarpParameters,
    execution: Execution,
): ConvertwarpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ConvertwarpOutputs = {
        root: execution.outputFile("."),
        out_file: execution.outputFile([path.basename((params["reference"] ?? null)), "_concatwarp"].join('')),
        out_file_: execution.outputFile(["out_file"].join('')),
    };
    return ret;
}


function convertwarp_execute(
    params: ConvertwarpParameters,
    execution: Execution,
): ConvertwarpOutputs {
    /**
     * Use FSL convertwarp for combining multiple transforms into one.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ConvertwarpOutputs`).
     */
    params = execution.params(params)
    const cargs = convertwarp_cargs(params, execution)
    const ret = convertwarp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function convertwarp(
    reference: InputPathType,
    abswarp: boolean = false,
    cons_jacobian: boolean = false,
    jacobian_max: number | null = null,
    jacobian_min: number | null = null,
    midmat: InputPathType | null = null,
    out_abswarp: boolean = false,
    out_relwarp: boolean = false,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    postmat: InputPathType | null = null,
    premat: InputPathType | null = null,
    relwarp: boolean = false,
    shift_direction: "y-" | "y" | "x" | "x-" | "z" | "z-" | null = null,
    shift_in_file: InputPathType | null = null,
    warp1: InputPathType | null = null,
    warp2: InputPathType | null = null,
    runner: Runner | null = null,
): ConvertwarpOutputs {
    /**
     * Use FSL convertwarp for combining multiple transforms into one.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param reference Name of a file in target space of the full transform.
     * @param abswarp If set it indicates that the warps in --warp1 and --warp2 should be interpreted as absolute. i.e. the values in --warp1/2 are the coordinates in the next space, rather than displacements. this flag is ignored if --warp1/2 was created by fnirt, which always creates relative displacements.
     * @param cons_jacobian Constrain the jacobian of the warpfield to lie within specified min/max limits.
     * @param jacobian_max Maximum acceptable jacobian value for constraint (default 100.0).
     * @param jacobian_min Minimum acceptable jacobian value for constraint (default 0.01).
     * @param midmat Name of file containing mid-warp-affine transform.
     * @param out_abswarp If set it indicates that the warps in --out should be absolute, i.e. the values in --out are displacements from the coordinates in --ref.
     * @param out_relwarp If set it indicates that the warps in --out should be relative, i.e. the values in --out are displacements from the coordinates in --ref.
     * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
     * @param postmat Name of file containing an affine transform (applied last). it could e.g. be an affine transform that maps the mni152-space into a better approximation to the talairach-space (if indeed there is one).
     * @param premat Filename for pre-transform (affine matrix).
     * @param relwarp If set it indicates that the warps in --warp1/2 should be interpreted as relative. i.e. the values in --warp1/2 are displacements from the coordinates in the next space.
     * @param shift_direction 'y-' or 'y' or 'x' or 'x-' or 'z' or 'z-'. Indicates the direction that the distortions from --shiftmap goes. it depends on the direction and polarity of the phase-encoding in the epi sequence.
     * @param shift_in_file Name of file containing a "shiftmap", a non-linear transform with displacements only in one direction (applied first, before premat). this would typically be a fieldmap that has been pre-processed using fugue that maps a subjects functional (epi) data onto an undistorted space (i.e. a space that corresponds to his/her true anatomy).
     * @param warp1 Name of file containing initial warp-fields/coefficients (follows premat). this could e.g. be a fnirt-transform from a subjects structural scan to an average of a group of subjects.
     * @param warp2 Name of file containing secondary warp-fields/coefficients (after warp1/midmat but before postmat). this could e.g. be a fnirt-transform from the average of a group of subjects to some standard space (e.g. mni152).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ConvertwarpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERTWARP_METADATA);
    const params = convertwarp_params(reference, abswarp, cons_jacobian, jacobian_max, jacobian_min, midmat, out_abswarp, out_relwarp, output_type, postmat, premat, relwarp, shift_direction, shift_in_file, warp1, warp2)
    return convertwarp_execute(params, execution);
}


export {
      CONVERTWARP_METADATA,
      ConvertwarpOutputs,
      ConvertwarpParameters,
      convertwarp,
      convertwarp_params,
};
