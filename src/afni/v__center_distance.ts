// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__CENTER_DISTANCE_METADATA: Metadata = {
    id: "f179e8348e56e5e6c674b858f8ada01c7b1547c8.boutiques",
    name: "@Center_Distance",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VCenterDistanceParameters {
    "@type"?: "afni/@Center_Distance";
    "dset1": InputPathType;
    "dset2": InputPathType;
}
type VCenterDistanceParametersTagged = Required<Pick<VCenterDistanceParameters, '@type'>> & VCenterDistanceParameters;


/**
 * Output object returned when calling `VCenterDistanceParameters(...)`.
 *
 * @interface
 */
interface VCenterDistanceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The calculated distance between the centers of DSET_1 and DSET_2
     */
    distance_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dset1 First dataset file (e.g. file1.nii.gz)
 * @param dset2 Second dataset file (e.g. file2.nii.gz)
 *
 * @returns Parameter dictionary
 */
function v__center_distance_params(
    dset1: InputPathType,
    dset2: InputPathType,
): VCenterDistanceParametersTagged {
    const params = {
        "@type": "afni/@Center_Distance" as const,
        "dset1": dset1,
        "dset2": dset2,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__center_distance_cargs(
    params: VCenterDistanceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@Center_Distance");
    cargs.push(
        "-dset",
        execution.inputFile((params["dset1"] ?? null))
    );
    cargs.push(execution.inputFile((params["dset2"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__center_distance_outputs(
    params: VCenterDistanceParameters,
    execution: Execution,
): VCenterDistanceOutputs {
    const ret: VCenterDistanceOutputs = {
        root: execution.outputFile("."),
        distance_output: execution.outputFile(["distance.txt"].join('')),
    };
    return ret;
}


/**
 * @Center_Distance
 *
 * Tool to calculate the distance between the centers of two datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VCenterDistanceOutputs`).
 */
function v__center_distance_execute(
    params: VCenterDistanceParameters,
    runner: Runner | null = null,
): VCenterDistanceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__CENTER_DISTANCE_METADATA);
    params = execution.params(params)
    const cargs = v__center_distance_cargs(params, execution)
    const ret = v__center_distance_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @Center_Distance
 *
 * Tool to calculate the distance between the centers of two datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dset1 First dataset file (e.g. file1.nii.gz)
 * @param dset2 Second dataset file (e.g. file2.nii.gz)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VCenterDistanceOutputs`).
 */
function v__center_distance(
    dset1: InputPathType,
    dset2: InputPathType,
    runner: Runner | null = null,
): VCenterDistanceOutputs {
    const params = v__center_distance_params(dset1, dset2)
    return v__center_distance_execute(params, runner);
}


export {
      VCenterDistanceOutputs,
      V__CENTER_DISTANCE_METADATA,
      v__center_distance,
      v__center_distance_execute,
      v__center_distance_params,
};
