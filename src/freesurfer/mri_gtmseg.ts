// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_GTMSEG_METADATA: Metadata = {
    id: "1751da2ccfc8c90c9966c0f60af5462d531c0486.boutiques",
    name: "mri_gtmseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriGtmsegParameters {
    "@type": "freesurfer.mri_gtmseg";
    "output_volume": string;
    "source_subject": string;
    "internal_usf"?: number | null | undefined;
    "apas_file"?: InputPathType | null | undefined;
    "context_annotation"?: Array<string> | null | undefined;
    "subseg_wm": boolean;
    "wm_annotation"?: Array<string> | null | undefined;
    "dmax"?: number | null | undefined;
    "keep_hypo": boolean;
    "keep_cc": boolean;
    "ctab"?: InputPathType | null | undefined;
    "lhminmax"?: Array<number> | null | undefined;
    "rhminmax"?: Array<number> | null | undefined;
    "output_usf"?: number | null | undefined;
    "threads"?: number | null | undefined;
    "threads_max": boolean;
    "threads_max_1": boolean;
    "debug": boolean;
    "check_opts": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_gtmseg": mri_gtmseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_gtmseg(...)`.
 *
 * @interface
 */
interface MriGtmsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_volume Output volume (output will be subject/mri/outvol)
 * @param source_subject Source subject
 * @param internal_usf Upsampling factor (default 2)
 * @param apas_file Defines extra-cerebral and subcortical segmentations (apas+head.mgz)
 * @param context_annotation Use annotation to segment cortex (aparc.annot,1000,2000)
 * @param subseg_wm Turn on segmenting of WM into smaller parts (off by default)
 * @param wm_annotation Use annotation to subsegment white matter
 * @param dmax Distance from cortex for white matter segmentation to be considered 'unsegmented' (default 5.000000)
 * @param keep_hypo Do not convert white matter hypointensities to a white matter label
 * @param keep_cc Do not convert corpus callosum to a white matter label
 * @param ctab Copy items in ctab.lut into master ctab merging or overwriting what is there
 * @param lhminmax For defining left hemisphere ribbon in APAS (default: 1000 1900)
 * @param rhminmax For defining right hemisphere ribbon in APAS (default: 2000 2900)
 * @param output_usf Set actual output resolution. Default is to be the same as the --internal-usf
 * @param threads Use N threads (with Open MP)
 * @param threads_max Use the maximum allowable number of threads for this computer
 * @param threads_max_1 Use one less than the maximum allowable number of threads for this computer
 * @param debug Turn on debugging
 * @param check_opts Don't run anything, just check options and exit
 *
 * @returns Parameter dictionary
 */
function mri_gtmseg_params(
    output_volume: string,
    source_subject: string,
    internal_usf: number | null = null,
    apas_file: InputPathType | null = null,
    context_annotation: Array<string> | null = null,
    subseg_wm: boolean = false,
    wm_annotation: Array<string> | null = null,
    dmax: number | null = null,
    keep_hypo: boolean = false,
    keep_cc: boolean = false,
    ctab: InputPathType | null = null,
    lhminmax: Array<number> | null = null,
    rhminmax: Array<number> | null = null,
    output_usf: number | null = null,
    threads: number | null = null,
    threads_max: boolean = false,
    threads_max_1: boolean = false,
    debug: boolean = false,
    check_opts: boolean = false,
): MriGtmsegParameters {
    const params = {
        "@type": "freesurfer.mri_gtmseg" as const,
        "output_volume": output_volume,
        "source_subject": source_subject,
        "subseg_wm": subseg_wm,
        "keep_hypo": keep_hypo,
        "keep_cc": keep_cc,
        "threads_max": threads_max,
        "threads_max_1": threads_max_1,
        "debug": debug,
        "check_opts": check_opts,
    };
    if (internal_usf !== null) {
        params["internal_usf"] = internal_usf;
    }
    if (apas_file !== null) {
        params["apas_file"] = apas_file;
    }
    if (context_annotation !== null) {
        params["context_annotation"] = context_annotation;
    }
    if (wm_annotation !== null) {
        params["wm_annotation"] = wm_annotation;
    }
    if (dmax !== null) {
        params["dmax"] = dmax;
    }
    if (ctab !== null) {
        params["ctab"] = ctab;
    }
    if (lhminmax !== null) {
        params["lhminmax"] = lhminmax;
    }
    if (rhminmax !== null) {
        params["rhminmax"] = rhminmax;
    }
    if (output_usf !== null) {
        params["output_usf"] = output_usf;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_gtmseg_cargs(
    params: MriGtmsegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_gtmseg");
    cargs.push(
        "--o",
        (params["output_volume"] ?? null)
    );
    cargs.push(
        "--s",
        (params["source_subject"] ?? null)
    );
    if ((params["internal_usf"] ?? null) !== null) {
        cargs.push(
            "--internal-usf",
            String((params["internal_usf"] ?? null))
        );
    }
    if ((params["apas_file"] ?? null) !== null) {
        cargs.push(
            "--apas",
            execution.inputFile((params["apas_file"] ?? null))
        );
    }
    if ((params["context_annotation"] ?? null) !== null) {
        cargs.push(
            "--ctx-annot",
            ...(params["context_annotation"] ?? null)
        );
    }
    if ((params["subseg_wm"] ?? null)) {
        cargs.push("--subseg-wm");
    }
    if ((params["wm_annotation"] ?? null) !== null) {
        cargs.push(
            "--wm-annot",
            ...(params["wm_annotation"] ?? null)
        );
    }
    if ((params["dmax"] ?? null) !== null) {
        cargs.push(
            "--dmax",
            String((params["dmax"] ?? null))
        );
    }
    if ((params["keep_hypo"] ?? null)) {
        cargs.push("--keep-hypo");
    }
    if ((params["keep_cc"] ?? null)) {
        cargs.push("--keep-cc");
    }
    if ((params["ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab"] ?? null))
        );
    }
    if ((params["lhminmax"] ?? null) !== null) {
        cargs.push(
            "--lhminmax",
            ...(params["lhminmax"] ?? null).map(String)
        );
    }
    if ((params["rhminmax"] ?? null) !== null) {
        cargs.push(
            "--rhminmax",
            ...(params["rhminmax"] ?? null).map(String)
        );
    }
    if ((params["output_usf"] ?? null) !== null) {
        cargs.push(
            "--output-usf",
            String((params["output_usf"] ?? null))
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["threads_max"] ?? null)) {
        cargs.push("--threads-max");
    }
    if ((params["threads_max_1"] ?? null)) {
        cargs.push("--threads-max-1");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_opts"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_gtmseg_outputs(
    params: MriGtmsegParameters,
    execution: Execution,
): MriGtmsegOutputs {
    const ret: MriGtmsegOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Creates a segmentation that can be used with the geometric transfer matrix (GTM).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGtmsegOutputs`).
 */
function mri_gtmseg_execute(
    params: MriGtmsegParameters,
    runner: Runner | null = null,
): MriGtmsegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_GTMSEG_METADATA);
    params = execution.params(params)
    const cargs = mri_gtmseg_cargs(params, execution)
    const ret = mri_gtmseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Creates a segmentation that can be used with the geometric transfer matrix (GTM).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param output_volume Output volume (output will be subject/mri/outvol)
 * @param source_subject Source subject
 * @param internal_usf Upsampling factor (default 2)
 * @param apas_file Defines extra-cerebral and subcortical segmentations (apas+head.mgz)
 * @param context_annotation Use annotation to segment cortex (aparc.annot,1000,2000)
 * @param subseg_wm Turn on segmenting of WM into smaller parts (off by default)
 * @param wm_annotation Use annotation to subsegment white matter
 * @param dmax Distance from cortex for white matter segmentation to be considered 'unsegmented' (default 5.000000)
 * @param keep_hypo Do not convert white matter hypointensities to a white matter label
 * @param keep_cc Do not convert corpus callosum to a white matter label
 * @param ctab Copy items in ctab.lut into master ctab merging or overwriting what is there
 * @param lhminmax For defining left hemisphere ribbon in APAS (default: 1000 1900)
 * @param rhminmax For defining right hemisphere ribbon in APAS (default: 2000 2900)
 * @param output_usf Set actual output resolution. Default is to be the same as the --internal-usf
 * @param threads Use N threads (with Open MP)
 * @param threads_max Use the maximum allowable number of threads for this computer
 * @param threads_max_1 Use one less than the maximum allowable number of threads for this computer
 * @param debug Turn on debugging
 * @param check_opts Don't run anything, just check options and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGtmsegOutputs`).
 */
function mri_gtmseg(
    output_volume: string,
    source_subject: string,
    internal_usf: number | null = null,
    apas_file: InputPathType | null = null,
    context_annotation: Array<string> | null = null,
    subseg_wm: boolean = false,
    wm_annotation: Array<string> | null = null,
    dmax: number | null = null,
    keep_hypo: boolean = false,
    keep_cc: boolean = false,
    ctab: InputPathType | null = null,
    lhminmax: Array<number> | null = null,
    rhminmax: Array<number> | null = null,
    output_usf: number | null = null,
    threads: number | null = null,
    threads_max: boolean = false,
    threads_max_1: boolean = false,
    debug: boolean = false,
    check_opts: boolean = false,
    runner: Runner | null = null,
): MriGtmsegOutputs {
    const params = mri_gtmseg_params(output_volume, source_subject, internal_usf, apas_file, context_annotation, subseg_wm, wm_annotation, dmax, keep_hypo, keep_cc, ctab, lhminmax, rhminmax, output_usf, threads, threads_max, threads_max_1, debug, check_opts)
    return mri_gtmseg_execute(params, runner);
}


export {
      MRI_GTMSEG_METADATA,
      MriGtmsegOutputs,
      MriGtmsegParameters,
      mri_gtmseg,
      mri_gtmseg_execute,
      mri_gtmseg_params,
};
