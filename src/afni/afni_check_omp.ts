// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AFNI_CHECK_OMP_METADATA: Metadata = {
    id: "32dd1aee513bc5242efdf26e5514ec120679a8b1.boutiques",
    name: "afni_check_omp",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AfniCheckOmpParameters {
    "__STYXTYPE__": "afni_check_omp";
    "iterations"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "afni_check_omp": afni_check_omp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `afni_check_omp(...)`.
 *
 * @interface
 */
interface AfniCheckOmpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function afni_check_omp_params(
    iterations: number | null = null,
): AfniCheckOmpParameters {
    /**
     * Build parameters.
    
     * @param iterations Number of iterations to run
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "afni_check_omp" as const,
    };
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    return params;
}


function afni_check_omp_cargs(
    params: AfniCheckOmpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("afni_check_omp");
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(String((params["iterations"] ?? null)));
    }
    return cargs;
}


function afni_check_omp_outputs(
    params: AfniCheckOmpParameters,
    execution: Execution,
): AfniCheckOmpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AfniCheckOmpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function afni_check_omp_execute(
    params: AfniCheckOmpParameters,
    execution: Execution,
): AfniCheckOmpOutputs {
    /**
     * Tool to check the OpenMP multi-threading environment for AFNI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AfniCheckOmpOutputs`).
     */
    params = execution.params(params)
    const cargs = afni_check_omp_cargs(params, execution)
    const ret = afni_check_omp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function afni_check_omp(
    iterations: number | null = null,
    runner: Runner | null = null,
): AfniCheckOmpOutputs {
    /**
     * Tool to check the OpenMP multi-threading environment for AFNI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param iterations Number of iterations to run
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AfniCheckOmpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AFNI_CHECK_OMP_METADATA);
    const params = afni_check_omp_params(iterations)
    return afni_check_omp_execute(params, execution);
}


export {
      AFNI_CHECK_OMP_METADATA,
      AfniCheckOmpOutputs,
      AfniCheckOmpParameters,
      afni_check_omp,
      afni_check_omp_params,
};
