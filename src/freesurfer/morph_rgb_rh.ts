// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MORPH_RGB_RH_METADATA: Metadata = {
    id: "a6a24e50abf67ab8cf1bf35fab1d30fde98e108c.boutiques",
    name: "morph_rgb-rh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MorphRgbRhParameters {
    "__STYXTYPE__": "morph_rgb-rh";
    "subject_id": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "morph_rgb-rh": morph_rgb_rh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `morph_rgb_rh(...)`.
 *
 * @interface
 */
interface MorphRgbRhOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function morph_rgb_rh_params(
    subject_id: string,
): MorphRgbRhParameters {
    /**
     * Build parameters.
    
     * @param subject_id Subject ID for which the RGB morphing should be performed.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "morph_rgb-rh" as const,
        "subject_id": subject_id,
    };
    return params;
}


function morph_rgb_rh_cargs(
    params: MorphRgbRhParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("morph_rgb-rh");
    cargs.push(
        "-rh",
        (params["subject_id"] ?? null)
    );
    return cargs;
}


function morph_rgb_rh_outputs(
    params: MorphRgbRhParameters,
    execution: Execution,
): MorphRgbRhOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MorphRgbRhOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function morph_rgb_rh_execute(
    params: MorphRgbRhParameters,
    execution: Execution,
): MorphRgbRhOutputs {
    /**
     * Morphs RGB values onto a FreeSurfer right hemisphere surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MorphRgbRhOutputs`).
     */
    params = execution.params(params)
    const cargs = morph_rgb_rh_cargs(params, execution)
    const ret = morph_rgb_rh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function morph_rgb_rh(
    subject_id: string,
    runner: Runner | null = null,
): MorphRgbRhOutputs {
    /**
     * Morphs RGB values onto a FreeSurfer right hemisphere surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject_id Subject ID for which the RGB morphing should be performed.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MorphRgbRhOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MORPH_RGB_RH_METADATA);
    const params = morph_rgb_rh_params(subject_id)
    return morph_rgb_rh_execute(params, execution);
}


export {
      MORPH_RGB_RH_METADATA,
      MorphRgbRhOutputs,
      MorphRgbRhParameters,
      morph_rgb_rh,
      morph_rgb_rh_params,
};
