// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEGMENT_HA_T1_SH_METADATA: Metadata = {
    id: "10e5f048c0c96d580fd404286652db4a21db113f.boutiques",
    name: "segmentHA_T1.sh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SegmentHaT1ShParameters {
    "@type": "freesurfer.segmentHA_T1.sh";
    "input_image": InputPathType;
    "output_directory": string;
    "brain_mask"?: InputPathType | null | undefined;
    "verbose": boolean;
    "debug": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.segmentHA_T1.sh": segment_ha_t1_sh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.segmentHA_T1.sh": segment_ha_t1_sh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `segment_ha_t1_sh(...)`.
 *
 * @interface
 */
interface SegmentHaT1ShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmented hippocampal subfields.
     */
    hippocampus_aseg: OutputPathType;
    /**
     * Segmented amygdalar subfields.
     */
    amygdala_aseg: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image The input T1-weighted MRI image for hippocampal/amygdalar segmentation.
 * @param output_directory The directory where the output will be saved.
 * @param brain_mask Use a specific brain mask for segmentation.
 * @param verbose Increase the verbosity of the output.
 * @param debug Enable debugging mode.
 *
 * @returns Parameter dictionary
 */
function segment_ha_t1_sh_params(
    input_image: InputPathType,
    output_directory: string,
    brain_mask: InputPathType | null = null,
    verbose: boolean = false,
    debug: boolean = false,
): SegmentHaT1ShParameters {
    const params = {
        "@type": "freesurfer.segmentHA_T1.sh" as const,
        "input_image": input_image,
        "output_directory": output_directory,
        "verbose": verbose,
        "debug": debug,
    };
    if (brain_mask !== null) {
        params["brain_mask"] = brain_mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function segment_ha_t1_sh_cargs(
    params: SegmentHaT1ShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("segmentHA_T1.sh");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_directory"] ?? null));
    if ((params["brain_mask"] ?? null) !== null) {
        cargs.push(
            "--brainmask",
            execution.inputFile((params["brain_mask"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("--verbose");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function segment_ha_t1_sh_outputs(
    params: SegmentHaT1ShParameters,
    execution: Execution,
): SegmentHaT1ShOutputs {
    const ret: SegmentHaT1ShOutputs = {
        root: execution.outputFile("."),
        hippocampus_aseg: execution.outputFile([(params["output_directory"] ?? null), "/hippocampus_aseg.mgz"].join('')),
        amygdala_aseg: execution.outputFile([(params["output_directory"] ?? null), "/amygdala_aseg.mgz"].join('')),
    };
    return ret;
}


/**
 * Tool for hippocampal/amygdalar subfield segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `SegmentHaT1ShOutputs`).
 */
function segment_ha_t1_sh_execute(
    params: SegmentHaT1ShParameters,
    execution: Execution,
): SegmentHaT1ShOutputs {
    params = execution.params(params)
    const cargs = segment_ha_t1_sh_cargs(params, execution)
    const ret = segment_ha_t1_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for hippocampal/amygdalar subfield segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image The input T1-weighted MRI image for hippocampal/amygdalar segmentation.
 * @param output_directory The directory where the output will be saved.
 * @param brain_mask Use a specific brain mask for segmentation.
 * @param verbose Increase the verbosity of the output.
 * @param debug Enable debugging mode.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentHaT1ShOutputs`).
 */
function segment_ha_t1_sh(
    input_image: InputPathType,
    output_directory: string,
    brain_mask: InputPathType | null = null,
    verbose: boolean = false,
    debug: boolean = false,
    runner: Runner | null = null,
): SegmentHaT1ShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEGMENT_HA_T1_SH_METADATA);
    const params = segment_ha_t1_sh_params(input_image, output_directory, brain_mask, verbose, debug)
    return segment_ha_t1_sh_execute(params, execution);
}


export {
      SEGMENT_HA_T1_SH_METADATA,
      SegmentHaT1ShOutputs,
      SegmentHaT1ShParameters,
      segment_ha_t1_sh,
      segment_ha_t1_sh_cargs,
      segment_ha_t1_sh_execute,
      segment_ha_t1_sh_outputs,
      segment_ha_t1_sh_params,
};
