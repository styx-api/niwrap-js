// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ALLINEATE_METADATA: Metadata = {
    id: "9e9b34eca4cf79e9ab56b274a89a3cd8dc932bed.boutiques",
    name: "3dAllineate",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAllineateParameters {
    "__STYXTYPE__": "3dAllineate";
    "source": InputPathType;
    "base"?: InputPathType | null | undefined;
    "prefix": string;
    "param_save"?: string | null | undefined;
    "param_apply"?: string | null | undefined;
    "matrix_save"?: string | null | undefined;
    "matrix_apply"?: string | null | undefined;
    "cost"?: string | null | undefined;
    "interp"?: string | null | undefined;
    "final"?: string | null | undefined;
    "nmatch"?: number | null | undefined;
    "nopad": boolean;
    "verbose": boolean;
    "quiet": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dAllineate": v_3d_allineate_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dAllineate": v_3d_allineate_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_allineate(...)`.
 *
 * @interface
 */
interface V3dAllineateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset brick file
     */
    out_brik: OutputPathType;
    /**
     * Output dataset head file
     */
    out_head: OutputPathType;
    /**
     * File holding saved warp parameters
     */
    out_param_save: OutputPathType | null;
    /**
     * File holding saved matrix transformations
     */
    out_matrix_save: OutputPathType | null;
}


function v_3d_allineate_params(
    source: InputPathType,
    prefix: string,
    base: InputPathType | null = null,
    param_save: string | null = null,
    param_apply: string | null = null,
    matrix_save: string | null = null,
    matrix_apply: string | null = null,
    cost: string | null = null,
    interp: string | null = null,
    final: string | null = null,
    nmatch: number | null = null,
    nopad: boolean = false,
    verbose: boolean = false,
    quiet: boolean = false,
): V3dAllineateParameters {
    /**
     * Build parameters.
    
     * @param source Source dataset file
     * @param prefix Output prefix
     * @param base Base dataset file
     * @param param_save Save the warp parameters in ASCII (.1D) format into file
     * @param param_apply Read warp parameters from file and apply them to the source dataset
     * @param matrix_save Save the transformation matrix for each sub-brick into file
     * @param matrix_apply Use the matrices in file to define the spatial transformations to be applied
     * @param cost Defines the 'cost' function that defines the matching between the source and the base
     * @param interp Defines interpolation method to use during matching process
     * @param final Defines the interpolation mode used to create the output dataset
     * @param nmatch Use at most 'nnn' scattered points to match the datasets
     * @param nopad Do not use zero-padding on the base image
     * @param verbose Print out verbose progress reports
     * @param quiet Don't print out verbose stuff
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dAllineate" as const,
        "source": source,
        "prefix": prefix,
        "nopad": nopad,
        "verbose": verbose,
        "quiet": quiet,
    };
    if (base !== null) {
        params["base"] = base;
    }
    if (param_save !== null) {
        params["param_save"] = param_save;
    }
    if (param_apply !== null) {
        params["param_apply"] = param_apply;
    }
    if (matrix_save !== null) {
        params["matrix_save"] = matrix_save;
    }
    if (matrix_apply !== null) {
        params["matrix_apply"] = matrix_apply;
    }
    if (cost !== null) {
        params["cost"] = cost;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (final !== null) {
        params["final"] = final;
    }
    if (nmatch !== null) {
        params["nmatch"] = nmatch;
    }
    return params;
}


function v_3d_allineate_cargs(
    params: V3dAllineateParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dAllineate");
    cargs.push(execution.inputFile((params["source"] ?? null)));
    if ((params["base"] ?? null) !== null) {
        cargs.push(
            "-base",
            execution.inputFile((params["base"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["param_save"] ?? null) !== null) {
        cargs.push(
            "-1Dparam_save",
            (params["param_save"] ?? null)
        );
    }
    if ((params["param_apply"] ?? null) !== null) {
        cargs.push(
            "-1Dparam_apply",
            (params["param_apply"] ?? null)
        );
    }
    if ((params["matrix_save"] ?? null) !== null) {
        cargs.push(
            "-1Dmatrix_save",
            (params["matrix_save"] ?? null)
        );
    }
    if ((params["matrix_apply"] ?? null) !== null) {
        cargs.push(
            "-1Dmatrix_apply",
            (params["matrix_apply"] ?? null)
        );
    }
    if ((params["cost"] ?? null) !== null) {
        cargs.push(
            "-cost",
            (params["cost"] ?? null)
        );
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "-interp",
            (params["interp"] ?? null)
        );
    }
    if ((params["final"] ?? null) !== null) {
        cargs.push(
            "-final",
            (params["final"] ?? null)
        );
    }
    if ((params["nmatch"] ?? null) !== null) {
        cargs.push(
            "-nmatch",
            String((params["nmatch"] ?? null))
        );
    }
    if ((params["nopad"] ?? null)) {
        cargs.push("-nopad");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    return cargs;
}


function v_3d_allineate_outputs(
    params: V3dAllineateParameters,
    execution: Execution,
): V3dAllineateOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dAllineateOutputs = {
        root: execution.outputFile("."),
        out_brik: execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')),
        out_head: execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')),
        out_param_save: ((params["param_save"] ?? null) !== null) ? execution.outputFile([(params["param_save"] ?? null)].join('')) : null,
        out_matrix_save: ((params["matrix_save"] ?? null) !== null) ? execution.outputFile([(params["matrix_save"] ?? null)].join('')) : null,
    };
    return ret;
}


function v_3d_allineate_execute(
    params: V3dAllineateParameters,
    execution: Execution,
): V3dAllineateOutputs {
    /**
     * Program to align one dataset (the 'source') to a 'base' dataset using an affine (matrix) transformation of space.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dAllineateOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_allineate_cargs(params, execution)
    const ret = v_3d_allineate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_allineate(
    source: InputPathType,
    prefix: string,
    base: InputPathType | null = null,
    param_save: string | null = null,
    param_apply: string | null = null,
    matrix_save: string | null = null,
    matrix_apply: string | null = null,
    cost: string | null = null,
    interp: string | null = null,
    final: string | null = null,
    nmatch: number | null = null,
    nopad: boolean = false,
    verbose: boolean = false,
    quiet: boolean = false,
    runner: Runner | null = null,
): V3dAllineateOutputs {
    /**
     * Program to align one dataset (the 'source') to a 'base' dataset using an affine (matrix) transformation of space.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param source Source dataset file
     * @param prefix Output prefix
     * @param base Base dataset file
     * @param param_save Save the warp parameters in ASCII (.1D) format into file
     * @param param_apply Read warp parameters from file and apply them to the source dataset
     * @param matrix_save Save the transformation matrix for each sub-brick into file
     * @param matrix_apply Use the matrices in file to define the spatial transformations to be applied
     * @param cost Defines the 'cost' function that defines the matching between the source and the base
     * @param interp Defines interpolation method to use during matching process
     * @param final Defines the interpolation mode used to create the output dataset
     * @param nmatch Use at most 'nnn' scattered points to match the datasets
     * @param nopad Do not use zero-padding on the base image
     * @param verbose Print out verbose progress reports
     * @param quiet Don't print out verbose stuff
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dAllineateOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ALLINEATE_METADATA);
    const params = v_3d_allineate_params(source, prefix, base, param_save, param_apply, matrix_save, matrix_apply, cost, interp, final, nmatch, nopad, verbose, quiet)
    return v_3d_allineate_execute(params, execution);
}


export {
      V3dAllineateOutputs,
      V3dAllineateParameters,
      V_3D_ALLINEATE_METADATA,
      v_3d_allineate,
      v_3d_allineate_params,
};
