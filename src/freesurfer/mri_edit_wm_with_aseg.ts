// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EDIT_WM_WITH_ASEG_METADATA: Metadata = {
    id: "812c15dd26820bc2fee714f6109422a18cbfbb57.boutiques",
    name: "mri_edit_wm_with_aseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriEditWmWithAsegParameters {
    "@type": "freesurfer.mri_edit_wm_with_aseg";
    "input_wm": InputPathType;
    "input_t1_brain": InputPathType;
    "aseg": InputPathType;
    "output_wm": string;
    "fillven": boolean;
    "fix_scm_ha"?: number | null | undefined;
    "fix_scm_ha_only"?: string | null | undefined;
    "keep": boolean;
    "keep_in": boolean;
    "lh": boolean;
    "rh": boolean;
    "fix_ento_wm"?: string | null | undefined;
    "sa_fix_ento_wm"?: string | null | undefined;
    "debug_voxel"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_edit_wm_with_aseg": mri_edit_wm_with_aseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_edit_wm_with_aseg": mri_edit_wm_with_aseg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_edit_wm_with_aseg(...)`.
 *
 * @interface
 */
interface MriEditWmWithAsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Edited white matter output file
     */
    output_wm_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_wm Input white matter file
 * @param input_t1_brain Input T1/brain file
 * @param aseg Anatomical segmentation file
 * @param output_wm Output white matter file
 * @param fillven Fill ventricular system
 * @param fix_scm_ha Remove voxels in amygdala, ILV, and parts of hippocampus
 * @param fix_scm_ha_only Standalone: fix SCM using aseg.presurf.mgz
 * @param keep Keep edits as found in output volume
 * @param keep_in Keep edits as found in input volume
 * @param lh Erase right hemisphere labels from output
 * @param rh Erase left hemisphere labels from output
 * @param fix_ento_wm Insert lhval rhval where {3,4}006 and {3,4}201 in entowm volume
 * @param sa_fix_ento_wm Standalone version of fix ento-WM
 * @param debug_voxel Specify a voxel to edit with coordinates Gx Gy Gz
 *
 * @returns Parameter dictionary
 */
function mri_edit_wm_with_aseg_params(
    input_wm: InputPathType,
    input_t1_brain: InputPathType,
    aseg: InputPathType,
    output_wm: string,
    fillven: boolean = false,
    fix_scm_ha: number | null = null,
    fix_scm_ha_only: string | null = null,
    keep: boolean = false,
    keep_in: boolean = false,
    lh: boolean = false,
    rh: boolean = false,
    fix_ento_wm: string | null = null,
    sa_fix_ento_wm: string | null = null,
    debug_voxel: Array<number> | null = null,
): MriEditWmWithAsegParameters {
    const params = {
        "@type": "freesurfer.mri_edit_wm_with_aseg" as const,
        "input_wm": input_wm,
        "input_t1_brain": input_t1_brain,
        "aseg": aseg,
        "output_wm": output_wm,
        "fillven": fillven,
        "keep": keep,
        "keep_in": keep_in,
        "lh": lh,
        "rh": rh,
    };
    if (fix_scm_ha !== null) {
        params["fix_scm_ha"] = fix_scm_ha;
    }
    if (fix_scm_ha_only !== null) {
        params["fix_scm_ha_only"] = fix_scm_ha_only;
    }
    if (fix_ento_wm !== null) {
        params["fix_ento_wm"] = fix_ento_wm;
    }
    if (sa_fix_ento_wm !== null) {
        params["sa_fix_ento_wm"] = sa_fix_ento_wm;
    }
    if (debug_voxel !== null) {
        params["debug_voxel"] = debug_voxel;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_edit_wm_with_aseg_cargs(
    params: MriEditWmWithAsegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_edit_wm_with_aseg");
    cargs.push(execution.inputFile((params["input_wm"] ?? null)));
    cargs.push(execution.inputFile((params["input_t1_brain"] ?? null)));
    cargs.push(execution.inputFile((params["aseg"] ?? null)));
    cargs.push((params["output_wm"] ?? null));
    if ((params["fillven"] ?? null)) {
        cargs.push("-fillven");
    }
    if ((params["fix_scm_ha"] ?? null) !== null) {
        cargs.push(
            "-fix-scm-ha",
            String((params["fix_scm_ha"] ?? null))
        );
    }
    if ((params["fix_scm_ha_only"] ?? null) !== null) {
        cargs.push(
            "-fix-scm-ha-only",
            (params["fix_scm_ha_only"] ?? null)
        );
    }
    if ((params["keep"] ?? null)) {
        cargs.push("-keep");
    }
    if ((params["keep_in"] ?? null)) {
        cargs.push("-keep-in");
    }
    if ((params["lh"] ?? null)) {
        cargs.push("-lh");
    }
    if ((params["rh"] ?? null)) {
        cargs.push("-rh");
    }
    if ((params["fix_ento_wm"] ?? null) !== null) {
        cargs.push(
            "-fix-ento-wm",
            (params["fix_ento_wm"] ?? null)
        );
    }
    if ((params["sa_fix_ento_wm"] ?? null) !== null) {
        cargs.push(
            "-sa-fix-ento-wm",
            (params["sa_fix_ento_wm"] ?? null)
        );
    }
    if ((params["debug_voxel"] ?? null) !== null) {
        cargs.push(
            "-debug_voxel",
            ...(params["debug_voxel"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_edit_wm_with_aseg_outputs(
    params: MriEditWmWithAsegParameters,
    execution: Execution,
): MriEditWmWithAsegOutputs {
    const ret: MriEditWmWithAsegOutputs = {
        root: execution.outputFile("."),
        output_wm_file: execution.outputFile([(params["output_wm"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_edit_wm_with_aseg
 *
 * A tool for editing white matter with anatomical segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriEditWmWithAsegOutputs`).
 */
function mri_edit_wm_with_aseg_execute(
    params: MriEditWmWithAsegParameters,
    runner: Runner | null = null,
): MriEditWmWithAsegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EDIT_WM_WITH_ASEG_METADATA);
    params = execution.params(params)
    const cargs = mri_edit_wm_with_aseg_cargs(params, execution)
    const ret = mri_edit_wm_with_aseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_edit_wm_with_aseg
 *
 * A tool for editing white matter with anatomical segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_wm Input white matter file
 * @param input_t1_brain Input T1/brain file
 * @param aseg Anatomical segmentation file
 * @param output_wm Output white matter file
 * @param fillven Fill ventricular system
 * @param fix_scm_ha Remove voxels in amygdala, ILV, and parts of hippocampus
 * @param fix_scm_ha_only Standalone: fix SCM using aseg.presurf.mgz
 * @param keep Keep edits as found in output volume
 * @param keep_in Keep edits as found in input volume
 * @param lh Erase right hemisphere labels from output
 * @param rh Erase left hemisphere labels from output
 * @param fix_ento_wm Insert lhval rhval where {3,4}006 and {3,4}201 in entowm volume
 * @param sa_fix_ento_wm Standalone version of fix ento-WM
 * @param debug_voxel Specify a voxel to edit with coordinates Gx Gy Gz
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriEditWmWithAsegOutputs`).
 */
function mri_edit_wm_with_aseg(
    input_wm: InputPathType,
    input_t1_brain: InputPathType,
    aseg: InputPathType,
    output_wm: string,
    fillven: boolean = false,
    fix_scm_ha: number | null = null,
    fix_scm_ha_only: string | null = null,
    keep: boolean = false,
    keep_in: boolean = false,
    lh: boolean = false,
    rh: boolean = false,
    fix_ento_wm: string | null = null,
    sa_fix_ento_wm: string | null = null,
    debug_voxel: Array<number> | null = null,
    runner: Runner | null = null,
): MriEditWmWithAsegOutputs {
    const params = mri_edit_wm_with_aseg_params(input_wm, input_t1_brain, aseg, output_wm, fillven, fix_scm_ha, fix_scm_ha_only, keep, keep_in, lh, rh, fix_ento_wm, sa_fix_ento_wm, debug_voxel)
    return mri_edit_wm_with_aseg_execute(params, runner);
}


export {
      MRI_EDIT_WM_WITH_ASEG_METADATA,
      MriEditWmWithAsegOutputs,
      MriEditWmWithAsegParameters,
      mri_edit_wm_with_aseg,
      mri_edit_wm_with_aseg_execute,
      mri_edit_wm_with_aseg_params,
};
