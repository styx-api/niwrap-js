// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSL_RIGID_REGISTER_METADATA: Metadata = {
    id: "0e36527961ef5f32edd4250263430f3e00b08730.boutiques",
    name: "fsl_rigid_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FslRigidRegisterParameters {
    "__STYXTYPE__": "fsl_rigid_register";
    "refvol": InputPathType;
    "inputvol": InputPathType;
    "outputvol": string;
    "fslmat"?: string | null | undefined;
    "regmat"?: string | null | undefined;
    "xfmmat"?: string | null | undefined;
    "ltamat"?: string | null | undefined;
    "noinitgeom": boolean;
    "applyxfm"?: InputPathType | null | undefined;
    "applyinitxfm": boolean;
    "initxfm"?: InputPathType | null | undefined;
    "maxangle"?: number | null | undefined;
    "interp"?: string | null | undefined;
    "dof"?: number | null | undefined;
    "bins"?: number | null | undefined;
    "cost"?: string | null | undefined;
    "tmpdir"?: string | null | undefined;
    "nocleanup": boolean;
    "cleanup": boolean;
    "subject"?: string | null | undefined;
    "version": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fsl_rigid_register": fsl_rigid_register_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fsl_rigid_register": fsl_rigid_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsl_rigid_register(...)`.
 *
 * @interface
 */
interface FslRigidRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The registration matrix in FSL format.
     */
    fslmat_output: OutputPathType;
}


function fsl_rigid_register_params(
    refvol: InputPathType,
    inputvol: InputPathType,
    outputvol: string,
    fslmat: string | null = null,
    regmat: string | null = null,
    xfmmat: string | null = null,
    ltamat: string | null = null,
    noinitgeom: boolean = false,
    applyxfm: InputPathType | null = null,
    applyinitxfm: boolean = false,
    initxfm: InputPathType | null = null,
    maxangle: number | null = null,
    interp: string | null = null,
    dof: number | null = null,
    bins: number | null = null,
    cost: string | null = null,
    tmpdir: string | null = null,
    nocleanup: boolean = false,
    cleanup: boolean = false,
    subject: string | null = null,
    version: boolean = false,
    help: boolean = false,
): FslRigidRegisterParameters {
    /**
     * Build parameters.
    
     * @param refvol Reference/Target volume.
     * @param inputvol Input/Moveable volume.
     * @param outputvol Input resampled to reference.
     * @param fslmat Specifies explicitly where to store the FSL registration matrix.
     * @param regmat Get registration matrix in register.dat file format.
     * @param xfmmat Get registration matrix as MNI xfm file.
     * @param ltamat Get registration matrix as MGH lta file.
     * @param noinitgeom Do not initialize matrix based on geometry.
     * @param applyxfm Apply a transformation file to the input without registration.
     * @param applyinitxfm Apply initial transformation to the input without registration.
     * @param initxfm Use this as an initial matrix for registration.
     * @param maxangle Only search over +/- max angle degrees.
     * @param interp Interpolation method: trilinear, nearestneighbour, sinc.
     * @param dof Use degrees of freedom instead of 6.
     * @param bins Number of bins to use (default 256).
     * @param cost Objective function: mutualinfo, corratio (default), normcorr, normmi, leastsq.
     * @param tmpdir Specify temporary directory.
     * @param nocleanup Do not delete temporary files.
     * @param cleanup Delete temporary files (default).
     * @param subject Only puts it in the register.dat file.
     * @param version Print version and exit.
     * @param help Print help and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fsl_rigid_register" as const,
        "refvol": refvol,
        "inputvol": inputvol,
        "outputvol": outputvol,
        "noinitgeom": noinitgeom,
        "applyinitxfm": applyinitxfm,
        "nocleanup": nocleanup,
        "cleanup": cleanup,
        "version": version,
        "help": help,
    };
    if (fslmat !== null) {
        params["fslmat"] = fslmat;
    }
    if (regmat !== null) {
        params["regmat"] = regmat;
    }
    if (xfmmat !== null) {
        params["xfmmat"] = xfmmat;
    }
    if (ltamat !== null) {
        params["ltamat"] = ltamat;
    }
    if (applyxfm !== null) {
        params["applyxfm"] = applyxfm;
    }
    if (initxfm !== null) {
        params["initxfm"] = initxfm;
    }
    if (maxangle !== null) {
        params["maxangle"] = maxangle;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (dof !== null) {
        params["dof"] = dof;
    }
    if (bins !== null) {
        params["bins"] = bins;
    }
    if (cost !== null) {
        params["cost"] = cost;
    }
    if (tmpdir !== null) {
        params["tmpdir"] = tmpdir;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    return params;
}


function fsl_rigid_register_cargs(
    params: FslRigidRegisterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fsl_rigid_register");
    cargs.push(
        "-r",
        execution.inputFile((params["refvol"] ?? null))
    );
    cargs.push(
        "-i",
        execution.inputFile((params["inputvol"] ?? null))
    );
    cargs.push(
        "-o",
        (params["outputvol"] ?? null)
    );
    if ((params["fslmat"] ?? null) !== null) {
        cargs.push(
            "-fslmat",
            (params["fslmat"] ?? null)
        );
    }
    if ((params["regmat"] ?? null) !== null) {
        cargs.push(
            "-regmat",
            (params["regmat"] ?? null)
        );
    }
    if ((params["xfmmat"] ?? null) !== null) {
        cargs.push(
            "-xfmmat",
            (params["xfmmat"] ?? null)
        );
    }
    if ((params["ltamat"] ?? null) !== null) {
        cargs.push(
            "-ltamat",
            (params["ltamat"] ?? null)
        );
    }
    if ((params["noinitgeom"] ?? null)) {
        cargs.push("-noinitgeom");
    }
    if ((params["applyxfm"] ?? null) !== null) {
        cargs.push(
            "-applyxfm",
            execution.inputFile((params["applyxfm"] ?? null))
        );
    }
    if ((params["applyinitxfm"] ?? null)) {
        cargs.push("-applyinitxfm");
    }
    if ((params["initxfm"] ?? null) !== null) {
        cargs.push(
            "-initxfm",
            execution.inputFile((params["initxfm"] ?? null))
        );
    }
    if ((params["maxangle"] ?? null) !== null) {
        cargs.push(
            "-maxangle",
            String((params["maxangle"] ?? null))
        );
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "-interp",
            (params["interp"] ?? null)
        );
    }
    if ((params["dof"] ?? null) !== null) {
        cargs.push(
            "-dof",
            String((params["dof"] ?? null))
        );
    }
    if ((params["bins"] ?? null) !== null) {
        cargs.push(
            "-bins",
            String((params["bins"] ?? null))
        );
    }
    if ((params["cost"] ?? null) !== null) {
        cargs.push(
            "-cost",
            (params["cost"] ?? null)
        );
    }
    if ((params["tmpdir"] ?? null) !== null) {
        cargs.push(
            "-tmpdir",
            (params["tmpdir"] ?? null)
        );
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("-nocleanup");
    }
    if ((params["cleanup"] ?? null)) {
        cargs.push("-cleanup");
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "-subject",
            (params["subject"] ?? null)
        );
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function fsl_rigid_register_outputs(
    params: FslRigidRegisterParameters,
    execution: Execution,
): FslRigidRegisterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslRigidRegisterOutputs = {
        root: execution.outputFile("."),
        fslmat_output: execution.outputFile([(params["outputvol"] ?? null), ".fslmat"].join('')),
    };
    return ret;
}


function fsl_rigid_register_execute(
    params: FslRigidRegisterParameters,
    execution: Execution,
): FslRigidRegisterOutputs {
    /**
     * A front-end tool for FSL's FLIRT that computes a rigid registration matrix and resamples the input volume to the reference volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslRigidRegisterOutputs`).
     */
    params = execution.params(params)
    const cargs = fsl_rigid_register_cargs(params, execution)
    const ret = fsl_rigid_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fsl_rigid_register(
    refvol: InputPathType,
    inputvol: InputPathType,
    outputvol: string,
    fslmat: string | null = null,
    regmat: string | null = null,
    xfmmat: string | null = null,
    ltamat: string | null = null,
    noinitgeom: boolean = false,
    applyxfm: InputPathType | null = null,
    applyinitxfm: boolean = false,
    initxfm: InputPathType | null = null,
    maxangle: number | null = null,
    interp: string | null = null,
    dof: number | null = null,
    bins: number | null = null,
    cost: string | null = null,
    tmpdir: string | null = null,
    nocleanup: boolean = false,
    cleanup: boolean = false,
    subject: string | null = null,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): FslRigidRegisterOutputs {
    /**
     * A front-end tool for FSL's FLIRT that computes a rigid registration matrix and resamples the input volume to the reference volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param refvol Reference/Target volume.
     * @param inputvol Input/Moveable volume.
     * @param outputvol Input resampled to reference.
     * @param fslmat Specifies explicitly where to store the FSL registration matrix.
     * @param regmat Get registration matrix in register.dat file format.
     * @param xfmmat Get registration matrix as MNI xfm file.
     * @param ltamat Get registration matrix as MGH lta file.
     * @param noinitgeom Do not initialize matrix based on geometry.
     * @param applyxfm Apply a transformation file to the input without registration.
     * @param applyinitxfm Apply initial transformation to the input without registration.
     * @param initxfm Use this as an initial matrix for registration.
     * @param maxangle Only search over +/- max angle degrees.
     * @param interp Interpolation method: trilinear, nearestneighbour, sinc.
     * @param dof Use degrees of freedom instead of 6.
     * @param bins Number of bins to use (default 256).
     * @param cost Objective function: mutualinfo, corratio (default), normcorr, normmi, leastsq.
     * @param tmpdir Specify temporary directory.
     * @param nocleanup Do not delete temporary files.
     * @param cleanup Delete temporary files (default).
     * @param subject Only puts it in the register.dat file.
     * @param version Print version and exit.
     * @param help Print help and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslRigidRegisterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSL_RIGID_REGISTER_METADATA);
    const params = fsl_rigid_register_params(refvol, inputvol, outputvol, fslmat, regmat, xfmmat, ltamat, noinitgeom, applyxfm, applyinitxfm, initxfm, maxangle, interp, dof, bins, cost, tmpdir, nocleanup, cleanup, subject, version, help)
    return fsl_rigid_register_execute(params, execution);
}


export {
      FSL_RIGID_REGISTER_METADATA,
      FslRigidRegisterOutputs,
      FslRigidRegisterParameters,
      fsl_rigid_register,
      fsl_rigid_register_params,
};
