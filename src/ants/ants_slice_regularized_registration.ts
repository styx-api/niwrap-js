// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_SLICE_REGULARIZED_REGISTRATION_METADATA: Metadata = {
    id: "34ad1b0da76f5786fb67baa5172a8cd5bcbbe04d.boutiques",
    name: "antsSliceRegularizedRegistration",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsSliceRegularizedRegistrationParameters {
    "@type": "ants.antsSliceRegularizedRegistration";
    "polydegree": number;
    "output": string;
    "metric": string;
    "transform": string;
    "iterations": string;
    "shrink_factors": string;
    "smoothing_sigmas": string;
    "mask"?: InputPathType | null | undefined;
    "interpolation"?: "Linear" | "NearestNeighbor" | "MultiLabel" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | "GenericLabel" | null | undefined;
    "verbose"?: 0 | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.antsSliceRegularizedRegistration": ants_slice_regularized_registration_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.antsSliceRegularizedRegistration": ants_slice_regularized_registration_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_slice_regularized_registration(...)`.
 *
 * @interface
 */
interface AntsSliceRegularizedRegistrationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output is the polynomial fit to Tx & Ty.
     */
    polynomial_fit: OutputPathType;
    /**
     * Output is the transformed image.
     */
    transformed_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param polydegree Degree of polynomial up to zDimension-2. Controls the polynomial degree. 0 means no regularization.
 * @param output Specify the output transform prefix (output format is .nii.gz). Optionally, one can choose to warp the moving image to the fixed space, and if the inverse transform exists, one can also output the warped fixed image.
 * @param metric Four image metrics are available: GC: global correlation, CC: ANTS neighborhood cross correlation, MI: Mutual information, and MeanSquares: mean-squares intensity difference.
 * @param transform Several transform options are available. The gradientStep or learningRate characterizes the gradient descent optimization.
 * @param iterations Specify the number of iterations at each level.
 * @param shrink_factors Specify the shrink factor for the virtual domain (typically the fixed image) at each level.
 * @param smoothing_sigmas Specify the amount of smoothing at each level.
 * @param mask Fixed image mask to limit voxels considered by the metric.
 * @param interpolation Several interpolation options are available in ITK.
 * @param verbose Verbose option.
 *
 * @returns Parameter dictionary
 */
function ants_slice_regularized_registration_params(
    polydegree: number,
    output: string,
    metric: string,
    transform: string,
    iterations: string,
    shrink_factors: string,
    smoothing_sigmas: string,
    mask: InputPathType | null = null,
    interpolation: "Linear" | "NearestNeighbor" | "MultiLabel" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | "GenericLabel" | null = null,
    verbose: 0 | null = null,
): AntsSliceRegularizedRegistrationParameters {
    const params = {
        "@type": "ants.antsSliceRegularizedRegistration" as const,
        "polydegree": polydegree,
        "output": output,
        "metric": metric,
        "transform": transform,
        "iterations": iterations,
        "shrink_factors": shrink_factors,
        "smoothing_sigmas": smoothing_sigmas,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (interpolation !== null) {
        params["interpolation"] = interpolation;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_slice_regularized_registration_cargs(
    params: AntsSliceRegularizedRegistrationParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsSliceRegularizedRegistration");
    cargs.push(
        "-p",
        String((params["polydegree"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    cargs.push(
        "-m",
        (params["metric"] ?? null)
    );
    cargs.push(
        "-t",
        (params["transform"] ?? null)
    );
    cargs.push(
        "-i",
        (params["iterations"] ?? null)
    );
    cargs.push(
        "-f",
        (params["shrink_factors"] ?? null)
    );
    cargs.push(
        "-s",
        (params["smoothing_sigmas"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-x",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["interpolation"] ?? null) !== null) {
        cargs.push(
            "-n",
            (params["interpolation"] ?? null)
        );
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_slice_regularized_registration_outputs(
    params: AntsSliceRegularizedRegistrationParameters,
    execution: Execution,
): AntsSliceRegularizedRegistrationOutputs {
    const ret: AntsSliceRegularizedRegistrationOutputs = {
        root: execution.outputFile("."),
        polynomial_fit: execution.outputFile(["[OUTPUT_PREFIX]TxTy_poly.csv"].join('')),
        transformed_image: execution.outputFile(["[OUTPUT_PREFIX].nii.gz"].join('')),
    };
    return ret;
}


/**
 * antsSliceRegularizedRegistration
 *
 * This program is a user-level application for slice-by-slice translation registration. Results are regularized in z using polynomial regression. The program is targeted at spinal cord MRI. Only one stage is supported where a stage consists of a transform; an image metric; and iterations, shrink factors, and smoothing sigmas for each level. Specialized for 3D data: fixed image is 3D, moving image is 3D. Registration is performed slice-by-slice then regularized in z. The parameter -p controls the polynomial degree. -p 0 means no regularization.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsSliceRegularizedRegistrationOutputs`).
 */
function ants_slice_regularized_registration_execute(
    params: AntsSliceRegularizedRegistrationParameters,
    runner: Runner | null = null,
): AntsSliceRegularizedRegistrationOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_SLICE_REGULARIZED_REGISTRATION_METADATA);
    params = execution.params(params)
    const cargs = ants_slice_regularized_registration_cargs(params, execution)
    const ret = ants_slice_regularized_registration_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * antsSliceRegularizedRegistration
 *
 * This program is a user-level application for slice-by-slice translation registration. Results are regularized in z using polynomial regression. The program is targeted at spinal cord MRI. Only one stage is supported where a stage consists of a transform; an image metric; and iterations, shrink factors, and smoothing sigmas for each level. Specialized for 3D data: fixed image is 3D, moving image is 3D. Registration is performed slice-by-slice then regularized in z. The parameter -p controls the polynomial degree. -p 0 means no regularization.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param polydegree Degree of polynomial up to zDimension-2. Controls the polynomial degree. 0 means no regularization.
 * @param output Specify the output transform prefix (output format is .nii.gz). Optionally, one can choose to warp the moving image to the fixed space, and if the inverse transform exists, one can also output the warped fixed image.
 * @param metric Four image metrics are available: GC: global correlation, CC: ANTS neighborhood cross correlation, MI: Mutual information, and MeanSquares: mean-squares intensity difference.
 * @param transform Several transform options are available. The gradientStep or learningRate characterizes the gradient descent optimization.
 * @param iterations Specify the number of iterations at each level.
 * @param shrink_factors Specify the shrink factor for the virtual domain (typically the fixed image) at each level.
 * @param smoothing_sigmas Specify the amount of smoothing at each level.
 * @param mask Fixed image mask to limit voxels considered by the metric.
 * @param interpolation Several interpolation options are available in ITK.
 * @param verbose Verbose option.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsSliceRegularizedRegistrationOutputs`).
 */
function ants_slice_regularized_registration(
    polydegree: number,
    output: string,
    metric: string,
    transform: string,
    iterations: string,
    shrink_factors: string,
    smoothing_sigmas: string,
    mask: InputPathType | null = null,
    interpolation: "Linear" | "NearestNeighbor" | "MultiLabel" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | "GenericLabel" | null = null,
    verbose: 0 | null = null,
    runner: Runner | null = null,
): AntsSliceRegularizedRegistrationOutputs {
    const params = ants_slice_regularized_registration_params(polydegree, output, metric, transform, iterations, shrink_factors, smoothing_sigmas, mask, interpolation, verbose)
    return ants_slice_regularized_registration_execute(params, runner);
}


export {
      ANTS_SLICE_REGULARIZED_REGISTRATION_METADATA,
      AntsSliceRegularizedRegistrationOutputs,
      AntsSliceRegularizedRegistrationParameters,
      ants_slice_regularized_registration,
      ants_slice_regularized_registration_execute,
      ants_slice_regularized_registration_params,
};
