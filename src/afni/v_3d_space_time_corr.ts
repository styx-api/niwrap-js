// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SPACE_TIME_CORR_METADATA: Metadata = {
    id: "6c145ad16f230ce2c8671d5d52e1f53f0abd0f68.boutiques",
    name: "3dSpaceTimeCorr",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSpaceTimeCorrParameters {
    "@type": "afni.3dSpaceTimeCorr";
    "insetA": InputPathType;
    "insetB": InputPathType;
    "prefix": string;
    "mask"?: InputPathType | null | undefined;
    "out_Zcorr": boolean;
    "freeze_insetA_ijk"?: Array<number> | null | undefined;
    "freeze_insetA_xyz"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dSpaceTimeCorr": v_3d_space_time_corr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dSpaceTimeCorr": v_3d_space_time_corr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_space_time_corr(...)`.
 *
 * @interface
 */
interface V3dSpaceTimeCorrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output data set with space-time correlation coefficients.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param inset_a First 4D data set.
 * @param inset_b Second 4D data set. Must have the same spatial dimensions and number of time points as insetA.
 * @param prefix Output filename/base.
 * @param mask Optional mask for calculations. Recommended for speed and interpretability.
 * @param out_zcorr Switch to output Fisher Z transform of spatial map correlation instead of Pearson r values.
 * @param freeze_inset_a_ijk Freeze the seed voxel location in the insetA data set using ijk indices while the seed location in insetB moves throughout the volume or mask. Provide three ijk values.
 * @param freeze_inset_a_xyz Freeze the seed voxel location in the insetA data set using xyz coordinates while the seed location in insetB moves throughout the volume or mask. Provide three xyz values.
 *
 * @returns Parameter dictionary
 */
function v_3d_space_time_corr_params(
    inset_a: InputPathType,
    inset_b: InputPathType,
    prefix: string,
    mask: InputPathType | null = null,
    out_zcorr: boolean = false,
    freeze_inset_a_ijk: Array<number> | null = null,
    freeze_inset_a_xyz: Array<number> | null = null,
): V3dSpaceTimeCorrParameters {
    const params = {
        "@type": "afni.3dSpaceTimeCorr" as const,
        "insetA": inset_a,
        "insetB": inset_b,
        "prefix": prefix,
        "out_Zcorr": out_zcorr,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (freeze_inset_a_ijk !== null) {
        params["freeze_insetA_ijk"] = freeze_inset_a_ijk;
    }
    if (freeze_inset_a_xyz !== null) {
        params["freeze_insetA_xyz"] = freeze_inset_a_xyz;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_space_time_corr_cargs(
    params: V3dSpaceTimeCorrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dSpaceTimeCorr");
    cargs.push(
        "-insetA",
        execution.inputFile((params["insetA"] ?? null))
    );
    cargs.push(
        "-insetB",
        execution.inputFile((params["insetB"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["out_Zcorr"] ?? null)) {
        cargs.push("-out_Zcorr");
    }
    if ((params["freeze_insetA_ijk"] ?? null) !== null) {
        cargs.push(
            "-freeze_insetA_ijk",
            ...(params["freeze_insetA_ijk"] ?? null).map(String)
        );
    }
    if ((params["freeze_insetA_xyz"] ?? null) !== null) {
        cargs.push(
            "-freeze_insetA_xyz",
            ...(params["freeze_insetA_xyz"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_space_time_corr_outputs(
    params: V3dSpaceTimeCorrParameters,
    execution: Execution,
): V3dSpaceTimeCorrOutputs {
    const ret: V3dSpaceTimeCorrOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


/**
 * 3dSpaceTimeCorr
 *
 * Calculates correlation coefficients between two 4D datasets using space+time patterns.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSpaceTimeCorrOutputs`).
 */
function v_3d_space_time_corr_execute(
    params: V3dSpaceTimeCorrParameters,
    runner: Runner | null = null,
): V3dSpaceTimeCorrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SPACE_TIME_CORR_METADATA);
    params = execution.params(params)
    const cargs = v_3d_space_time_corr_cargs(params, execution)
    const ret = v_3d_space_time_corr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dSpaceTimeCorr
 *
 * Calculates correlation coefficients between two 4D datasets using space+time patterns.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param inset_a First 4D data set.
 * @param inset_b Second 4D data set. Must have the same spatial dimensions and number of time points as insetA.
 * @param prefix Output filename/base.
 * @param mask Optional mask for calculations. Recommended for speed and interpretability.
 * @param out_zcorr Switch to output Fisher Z transform of spatial map correlation instead of Pearson r values.
 * @param freeze_inset_a_ijk Freeze the seed voxel location in the insetA data set using ijk indices while the seed location in insetB moves throughout the volume or mask. Provide three ijk values.
 * @param freeze_inset_a_xyz Freeze the seed voxel location in the insetA data set using xyz coordinates while the seed location in insetB moves throughout the volume or mask. Provide three xyz values.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSpaceTimeCorrOutputs`).
 */
function v_3d_space_time_corr(
    inset_a: InputPathType,
    inset_b: InputPathType,
    prefix: string,
    mask: InputPathType | null = null,
    out_zcorr: boolean = false,
    freeze_inset_a_ijk: Array<number> | null = null,
    freeze_inset_a_xyz: Array<number> | null = null,
    runner: Runner | null = null,
): V3dSpaceTimeCorrOutputs {
    const params = v_3d_space_time_corr_params(inset_a, inset_b, prefix, mask, out_zcorr, freeze_inset_a_ijk, freeze_inset_a_xyz)
    return v_3d_space_time_corr_execute(params, runner);
}


export {
      V3dSpaceTimeCorrOutputs,
      V3dSpaceTimeCorrParameters,
      V_3D_SPACE_TIME_CORR_METADATA,
      v_3d_space_time_corr,
      v_3d_space_time_corr_execute,
      v_3d_space_time_corr_params,
};
