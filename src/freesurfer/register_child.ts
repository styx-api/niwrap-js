// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REGISTER_CHILD_METADATA: Metadata = {
    id: "124bc6cb9bedaf17bebd52280c60e66fb88bd963.boutiques",
    name: "register_child",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RegisterChildParameters {
    "@type": "freesurfer.register_child";
    "input_volume": InputPathType;
    "output_directory": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.register_child": register_child_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.register_child": register_child_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `register_child(...)`.
 *
 * @interface
 */
interface RegisterChildOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File where transformed control points are written.
     */
    transformed_control_points: OutputPathType;
    /**
     * File where intensity normalized volume is written.
     */
    intensity_normalized_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input MR volume to be used for registration.
 * @param output_directory Directory where output files will be written.
 *
 * @returns Parameter dictionary
 */
function register_child_params(
    input_volume: InputPathType,
    output_directory: string,
): RegisterChildParameters {
    const params = {
        "@type": "freesurfer.register_child" as const,
        "input_volume": input_volume,
        "output_directory": output_directory,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function register_child_cargs(
    params: RegisterChildParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("register_child");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_directory"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function register_child_outputs(
    params: RegisterChildParameters,
    execution: Execution,
): RegisterChildOutputs {
    const ret: RegisterChildOutputs = {
        root: execution.outputFile("."),
        transformed_control_points: execution.outputFile([(params["output_directory"] ?? null), "/fsamples"].join('')),
        intensity_normalized_volume: execution.outputFile([(params["output_directory"] ?? null), "/norm"].join('')),
    };
    return ret;
}


/**
 * register_child
 *
 * A tool used for registering MR volumes with a child's atlas in Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterChildOutputs`).
 */
function register_child_execute(
    params: RegisterChildParameters,
    runner: Runner | null = null,
): RegisterChildOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REGISTER_CHILD_METADATA);
    params = execution.params(params)
    const cargs = register_child_cargs(params, execution)
    const ret = register_child_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * register_child
 *
 * A tool used for registering MR volumes with a child's atlas in Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input MR volume to be used for registration.
 * @param output_directory Directory where output files will be written.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterChildOutputs`).
 */
function register_child(
    input_volume: InputPathType,
    output_directory: string,
    runner: Runner | null = null,
): RegisterChildOutputs {
    const params = register_child_params(input_volume, output_directory)
    return register_child_execute(params, runner);
}


export {
      REGISTER_CHILD_METADATA,
      RegisterChildOutputs,
      RegisterChildParameters,
      register_child,
      register_child_execute,
      register_child_params,
};
