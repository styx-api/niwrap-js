// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ESTIMATE_FIBER_BINGHAMS_METADATA: Metadata = {
    id: "3306ec1bd81313c82c8f949725c330afcc33ca8a.boutiques",
    name: "estimate-fiber-binghams",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface EstimateFiberBinghamsParameters {
    "@type": "workbench.estimate-fiber-binghams";
    "merged_f1samples": InputPathType;
    "merged_th1samples": InputPathType;
    "merged_ph1samples": InputPathType;
    "merged_f2samples": InputPathType;
    "merged_th2samples": InputPathType;
    "merged_ph2samples": InputPathType;
    "merged_f3samples": InputPathType;
    "merged_th3samples": InputPathType;
    "merged_ph3samples": InputPathType;
    "label_volume": InputPathType;
    "cifti_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.estimate-fiber-binghams": estimate_fiber_binghams_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.estimate-fiber-binghams": estimate_fiber_binghams_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `estimate_fiber_binghams(...)`.
 *
 * @interface
 */
interface EstimateFiberBinghamsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti fiber distributons file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param merged_f1samples fiber 1 strength samples
 * @param merged_th1samples fiber 1 theta samples
 * @param merged_ph1samples fiber 1 phi samples
 * @param merged_f2samples fiber 2 strength samples
 * @param merged_th2samples fiber 2 theta samples
 * @param merged_ph2samples fiber 2 phi samples
 * @param merged_f3samples fiber 3 strength samples
 * @param merged_th3samples fiber 3 theta samples
 * @param merged_ph3samples fiber 3 phi samples
 * @param label_volume volume of cifti structure labels
 * @param cifti_out output cifti fiber distributons file
 *
 * @returns Parameter dictionary
 */
function estimate_fiber_binghams_params(
    merged_f1samples: InputPathType,
    merged_th1samples: InputPathType,
    merged_ph1samples: InputPathType,
    merged_f2samples: InputPathType,
    merged_th2samples: InputPathType,
    merged_ph2samples: InputPathType,
    merged_f3samples: InputPathType,
    merged_th3samples: InputPathType,
    merged_ph3samples: InputPathType,
    label_volume: InputPathType,
    cifti_out: string,
): EstimateFiberBinghamsParameters {
    const params = {
        "@type": "workbench.estimate-fiber-binghams" as const,
        "merged_f1samples": merged_f1samples,
        "merged_th1samples": merged_th1samples,
        "merged_ph1samples": merged_ph1samples,
        "merged_f2samples": merged_f2samples,
        "merged_th2samples": merged_th2samples,
        "merged_ph2samples": merged_ph2samples,
        "merged_f3samples": merged_f3samples,
        "merged_th3samples": merged_th3samples,
        "merged_ph3samples": merged_ph3samples,
        "label_volume": label_volume,
        "cifti_out": cifti_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function estimate_fiber_binghams_cargs(
    params: EstimateFiberBinghamsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-estimate-fiber-binghams");
    cargs.push(execution.inputFile((params["merged_f1samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_th1samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_ph1samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_f2samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_th2samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_ph2samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_f3samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_th3samples"] ?? null)));
    cargs.push(execution.inputFile((params["merged_ph3samples"] ?? null)));
    cargs.push(execution.inputFile((params["label_volume"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function estimate_fiber_binghams_outputs(
    params: EstimateFiberBinghamsParameters,
    execution: Execution,
): EstimateFiberBinghamsOutputs {
    const ret: EstimateFiberBinghamsOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Estimate fiber orientation distributions from bedpostx samples.
 *
 * This command does an estimation of a bingham distribution for each fiber orientation in each voxel which is labeled a structure identifier.  These labelings come from the <label-volume> argument, which must have labels that match the following strings:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `EstimateFiberBinghamsOutputs`).
 */
function estimate_fiber_binghams_execute(
    params: EstimateFiberBinghamsParameters,
    execution: Execution,
): EstimateFiberBinghamsOutputs {
    params = execution.params(params)
    const cargs = estimate_fiber_binghams_cargs(params, execution)
    const ret = estimate_fiber_binghams_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Estimate fiber orientation distributions from bedpostx samples.
 *
 * This command does an estimation of a bingham distribution for each fiber orientation in each voxel which is labeled a structure identifier.  These labelings come from the <label-volume> argument, which must have labels that match the following strings:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param merged_f1samples fiber 1 strength samples
 * @param merged_th1samples fiber 1 theta samples
 * @param merged_ph1samples fiber 1 phi samples
 * @param merged_f2samples fiber 2 strength samples
 * @param merged_th2samples fiber 2 theta samples
 * @param merged_ph2samples fiber 2 phi samples
 * @param merged_f3samples fiber 3 strength samples
 * @param merged_th3samples fiber 3 theta samples
 * @param merged_ph3samples fiber 3 phi samples
 * @param label_volume volume of cifti structure labels
 * @param cifti_out output cifti fiber distributons file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `EstimateFiberBinghamsOutputs`).
 */
function estimate_fiber_binghams(
    merged_f1samples: InputPathType,
    merged_th1samples: InputPathType,
    merged_ph1samples: InputPathType,
    merged_f2samples: InputPathType,
    merged_th2samples: InputPathType,
    merged_ph2samples: InputPathType,
    merged_f3samples: InputPathType,
    merged_th3samples: InputPathType,
    merged_ph3samples: InputPathType,
    label_volume: InputPathType,
    cifti_out: string,
    runner: Runner | null = null,
): EstimateFiberBinghamsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ESTIMATE_FIBER_BINGHAMS_METADATA);
    const params = estimate_fiber_binghams_params(merged_f1samples, merged_th1samples, merged_ph1samples, merged_f2samples, merged_th2samples, merged_ph2samples, merged_f3samples, merged_th3samples, merged_ph3samples, label_volume, cifti_out)
    return estimate_fiber_binghams_execute(params, execution);
}


export {
      ESTIMATE_FIBER_BINGHAMS_METADATA,
      EstimateFiberBinghamsOutputs,
      EstimateFiberBinghamsParameters,
      estimate_fiber_binghams,
      estimate_fiber_binghams_cargs,
      estimate_fiber_binghams_execute,
      estimate_fiber_binghams_outputs,
      estimate_fiber_binghams_params,
};
