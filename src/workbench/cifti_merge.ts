// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_MERGE_METADATA: Metadata = {
    id: "4d282f9c70868b6c676ce722c7cf68c4b8aa1f6f.boutiques",
    name: "cifti-merge",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiMergeUpToParameters {
    "__STYXTYPE__": "up_to";
    "last_index": string;
    "opt_reverse": boolean;
}


interface CiftiMergeIndexParameters {
    "__STYXTYPE__": "index";
    "index": string;
    "up_to"?: CiftiMergeUpToParameters | null | undefined;
}


interface CiftiMergeCiftiParameters {
    "__STYXTYPE__": "cifti";
    "cifti_in": InputPathType;
    "index"?: Array<CiftiMergeIndexParameters> | null | undefined;
}


interface CiftiMergeParameters {
    "__STYXTYPE__": "cifti-merge";
    "cifti_out": string;
    "opt_direction_direction"?: string | null | undefined;
    "opt_mem_limit_limit_gb"?: number | null | undefined;
    "cifti"?: Array<CiftiMergeCiftiParameters> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cifti-merge": cifti_merge_cargs,
        "cifti": cifti_merge_cifti_cargs,
        "index": cifti_merge_index_cargs,
        "up_to": cifti_merge_up_to_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "cifti-merge": cifti_merge_outputs,
    };
    return outputsFuncs[t];
}


function cifti_merge_up_to_params(
    last_index: string,
    opt_reverse: boolean = false,
): CiftiMergeUpToParameters {
    /**
     * Build parameters.
    
     * @param last_index the number or name of the last index to include
     * @param opt_reverse use the range in reverse order
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "up_to" as const,
        "last_index": last_index,
        "opt_reverse": opt_reverse,
    };
    return params;
}


function cifti_merge_up_to_cargs(
    params: CiftiMergeUpToParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-up-to");
    cargs.push((params["last_index"] ?? null));
    if ((params["opt_reverse"] ?? null)) {
        cargs.push("-reverse");
    }
    return cargs;
}


function cifti_merge_index_params(
    index: string,
    up_to: CiftiMergeUpToParameters | null = null,
): CiftiMergeIndexParameters {
    /**
     * Build parameters.
    
     * @param index the index number (starting from 1), or name
     * @param up_to use an inclusive range of indices
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "index" as const,
        "index": index,
    };
    if (up_to !== null) {
        params["up_to"] = up_to;
    }
    return params;
}


function cifti_merge_index_cargs(
    params: CiftiMergeIndexParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-index");
    cargs.push((params["index"] ?? null));
    if ((params["up_to"] ?? null) !== null) {
        cargs.push(...dynCargs((params["up_to"] ?? null).__STYXTYPE__)((params["up_to"] ?? null), execution));
    }
    return cargs;
}


function cifti_merge_cifti_params(
    cifti_in: InputPathType,
    index: Array<CiftiMergeIndexParameters> | null = null,
): CiftiMergeCiftiParameters {
    /**
     * Build parameters.
    
     * @param cifti_in a cifti file to use data from
     * @param index select a single index to use
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti" as const,
        "cifti_in": cifti_in,
    };
    if (index !== null) {
        params["index"] = index;
    }
    return params;
}


function cifti_merge_cifti_cargs(
    params: CiftiMergeCiftiParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-cifti");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    if ((params["index"] ?? null) !== null) {
        cargs.push(...(params["index"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    return cargs;
}


/**
 * Output object returned when calling `cifti_merge(...)`.
 *
 * @interface
 */
interface CiftiMergeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti file
     */
    cifti_out: OutputPathType;
}


function cifti_merge_params(
    cifti_out: string,
    opt_direction_direction: string | null = null,
    opt_mem_limit_limit_gb: number | null = null,
    cifti: Array<CiftiMergeCiftiParameters> | null = null,
): CiftiMergeParameters {
    /**
     * Build parameters.
    
     * @param cifti_out output cifti file
     * @param opt_direction_direction merge in a direction other than along rows: the dimension to split/concatenate along, default ROW
     * @param opt_mem_limit_limit_gb restrict memory used for file reading efficiency: memory limit in gigabytes
     * @param cifti specify an input cifti file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti-merge" as const,
        "cifti_out": cifti_out,
    };
    if (opt_direction_direction !== null) {
        params["opt_direction_direction"] = opt_direction_direction;
    }
    if (opt_mem_limit_limit_gb !== null) {
        params["opt_mem_limit_limit_gb"] = opt_mem_limit_limit_gb;
    }
    if (cifti !== null) {
        params["cifti"] = cifti;
    }
    return params;
}


function cifti_merge_cargs(
    params: CiftiMergeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-merge");
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_direction_direction"] ?? null) !== null) {
        cargs.push(
            "-direction",
            (params["opt_direction_direction"] ?? null)
        );
    }
    if ((params["opt_mem_limit_limit_gb"] ?? null) !== null) {
        cargs.push(
            "-mem-limit",
            String((params["opt_mem_limit_limit_gb"] ?? null))
        );
    }
    if ((params["cifti"] ?? null) !== null) {
        cargs.push(...(params["cifti"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    return cargs;
}


function cifti_merge_outputs(
    params: CiftiMergeParameters,
    execution: Execution,
): CiftiMergeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CiftiMergeOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


function cifti_merge_execute(
    params: CiftiMergeParameters,
    execution: Execution,
): CiftiMergeOutputs {
    /**
     * Merge or split on series, scalar, or label dimensions.
     * 
     * Given input CIFTI files for which mappings along the selected direction are the same type, all either series, scalars, or labels, and the other dimensions are index-compatible, this command concatenates the data in the specified indices/ranges along the selected direction (by default, on typical 2D cifti, concatenate horizontally, so rows become longer).  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
     * 
     * Example: wb_command -cifti-merge out.dtseries.nii -cifti first.dtseries.nii -index 1 -cifti second.dtseries.nii
     * 
     * This example would take the first column from first.dtseries.nii, followed by all columns from second.dtseries.nii, and write these columns to out.dtseries.nii.  .
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CiftiMergeOutputs`).
     */
    params = execution.params(params)
    const cargs = cifti_merge_cargs(params, execution)
    const ret = cifti_merge_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cifti_merge(
    cifti_out: string,
    opt_direction_direction: string | null = null,
    opt_mem_limit_limit_gb: number | null = null,
    cifti: Array<CiftiMergeCiftiParameters> | null = null,
    runner: Runner | null = null,
): CiftiMergeOutputs {
    /**
     * Merge or split on series, scalar, or label dimensions.
     * 
     * Given input CIFTI files for which mappings along the selected direction are the same type, all either series, scalars, or labels, and the other dimensions are index-compatible, this command concatenates the data in the specified indices/ranges along the selected direction (by default, on typical 2D cifti, concatenate horizontally, so rows become longer).  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
     * 
     * Example: wb_command -cifti-merge out.dtseries.nii -cifti first.dtseries.nii -index 1 -cifti second.dtseries.nii
     * 
     * This example would take the first column from first.dtseries.nii, followed by all columns from second.dtseries.nii, and write these columns to out.dtseries.nii.  .
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param cifti_out output cifti file
     * @param opt_direction_direction merge in a direction other than along rows: the dimension to split/concatenate along, default ROW
     * @param opt_mem_limit_limit_gb restrict memory used for file reading efficiency: memory limit in gigabytes
     * @param cifti specify an input cifti file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CiftiMergeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_MERGE_METADATA);
    const params = cifti_merge_params(cifti_out, opt_direction_direction, opt_mem_limit_limit_gb, cifti)
    return cifti_merge_execute(params, execution);
}


export {
      CIFTI_MERGE_METADATA,
      CiftiMergeCiftiParameters,
      CiftiMergeIndexParameters,
      CiftiMergeOutputs,
      CiftiMergeParameters,
      CiftiMergeUpToParameters,
      cifti_merge,
      cifti_merge_cifti_params,
      cifti_merge_index_params,
      cifti_merge_params,
      cifti_merge_up_to_params,
};
