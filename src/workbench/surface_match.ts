// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_MATCH_METADATA: Metadata = {
    id: "7d679c04784ea9862b5def825b069decfde8f8d4.boutiques",
    name: "surface-match",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceMatchParameters {
    "__STYXTYPE__": "surface-match";
    "match_surface_file": InputPathType;
    "input_surface_file": InputPathType;
    "output_surface_name": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-match": surface_match_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_match(...)`.
 *
 * @interface
 */
interface SurfaceMatchOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function surface_match_params(
    match_surface_file: InputPathType,
    input_surface_file: InputPathType,
    output_surface_name: string,
): SurfaceMatchParameters {
    /**
     * Build parameters.
    
     * @param match_surface_file Match (Reference) Surface
     * @param input_surface_file File containing surface that will be transformed
     * @param output_surface_name Surface File after transformation
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-match" as const,
        "match_surface_file": match_surface_file,
        "input_surface_file": input_surface_file,
        "output_surface_name": output_surface_name,
    };
    return params;
}


function surface_match_cargs(
    params: SurfaceMatchParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-match");
    cargs.push(execution.inputFile((params["match_surface_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_surface_file"] ?? null)));
    cargs.push((params["output_surface_name"] ?? null));
    return cargs;
}


function surface_match_outputs(
    params: SurfaceMatchParameters,
    execution: Execution,
): SurfaceMatchOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceMatchOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function surface_match_execute(
    params: SurfaceMatchParameters,
    execution: Execution,
): SurfaceMatchOutputs {
    /**
     * Surface match.
     * 
     * The Input Surface File will be transformed so that its coordinate ranges (bounding box) match that of the Match Surface File.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceMatchOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_match_cargs(params, execution)
    const ret = surface_match_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_match(
    match_surface_file: InputPathType,
    input_surface_file: InputPathType,
    output_surface_name: string,
    runner: Runner | null = null,
): SurfaceMatchOutputs {
    /**
     * Surface match.
     * 
     * The Input Surface File will be transformed so that its coordinate ranges (bounding box) match that of the Match Surface File.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param match_surface_file Match (Reference) Surface
     * @param input_surface_file File containing surface that will be transformed
     * @param output_surface_name Surface File after transformation
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceMatchOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_MATCH_METADATA);
    const params = surface_match_params(match_surface_file, input_surface_file, output_surface_name)
    return surface_match_execute(params, execution);
}


export {
      SURFACE_MATCH_METADATA,
      SurfaceMatchOutputs,
      SurfaceMatchParameters,
      surface_match,
      surface_match_params,
};
