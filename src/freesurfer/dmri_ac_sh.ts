// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_AC_SH_METADATA: Metadata = {
    id: "a5e9ef0f18ba9932988056847d608cbe806d5bed.boutiques",
    name: "dmri_ac.sh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriAcShParameters {
    "__STYXTYPE__": "dmri_ac.sh";
    "additional_args"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dmri_ac.sh": dmri_ac_sh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_ac_sh(...)`.
 *
 * @interface
 */
interface DmriAcShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dmri_ac_sh_params(
    additional_args: string | null = null,
): DmriAcShParameters {
    /**
     * Build parameters.
    
     * @param additional_args Additional arguments for dmri_ac.sh script.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dmri_ac.sh" as const,
    };
    if (additional_args !== null) {
        params["additional_args"] = additional_args;
    }
    return params;
}


function dmri_ac_sh_cargs(
    params: DmriAcShParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dmri_ac.sh");
    if ((params["additional_args"] ?? null) !== null) {
        cargs.push((params["additional_args"] ?? null));
    }
    return cargs;
}


function dmri_ac_sh_outputs(
    params: DmriAcShParameters,
    execution: Execution,
): DmriAcShOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DmriAcShOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dmri_ac_sh_execute(
    params: DmriAcShParameters,
    execution: Execution,
): DmriAcShOutputs {
    /**
     * A script related to diffusion MRI processing in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DmriAcShOutputs`).
     */
    params = execution.params(params)
    const cargs = dmri_ac_sh_cargs(params, execution)
    const ret = dmri_ac_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dmri_ac_sh(
    additional_args: string | null = null,
    runner: Runner | null = null,
): DmriAcShOutputs {
    /**
     * A script related to diffusion MRI processing in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param additional_args Additional arguments for dmri_ac.sh script.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DmriAcShOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_AC_SH_METADATA);
    const params = dmri_ac_sh_params(additional_args)
    return dmri_ac_sh_execute(params, execution);
}


export {
      DMRI_AC_SH_METADATA,
      DmriAcShOutputs,
      DmriAcShParameters,
      dmri_ac_sh,
      dmri_ac_sh_params,
};
