// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DENOISE_IMAGE_METADATA: Metadata = {
    id: "dd9cbbb4389367b37aac087edf973dfbcbdeb4d3.boutiques",
    name: "DenoiseImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface DenoiseImageCorrectedOutputParameters {
    "@type"?: "correctedOutput";
    "correctedOutputFileName": string;
}
type DenoiseImageCorrectedOutputParametersTagged = Required<Pick<DenoiseImageCorrectedOutputParameters, '@type'>> & DenoiseImageCorrectedOutputParameters;


interface DenoiseImageCorrectedOutputNoiseParameters {
    "@type"?: "correctedOutputNoise";
    "correctedOutputFileName": string;
    "noiseFile"?: string | null | undefined;
}
type DenoiseImageCorrectedOutputNoiseParametersTagged = Required<Pick<DenoiseImageCorrectedOutputNoiseParameters, '@type'>> & DenoiseImageCorrectedOutputNoiseParameters;


interface DenoiseImageParameters {
    "@type"?: "ants/DenoiseImage";
    "image_dimensionality"?: 2 | 3 | 4 | null | undefined;
    "noise_model"?: "Gaussian" | "Rician" | null | undefined;
    "shrink_factor"?: number | null | undefined;
    "mask_image"?: InputPathType | null | undefined;
    "patch_radius"?: string | null | undefined;
    "search_radius"?: string | null | undefined;
    "verbose"?: 0 | 1 | null | undefined;
    "input_image": InputPathType;
    "output": DenoiseImageCorrectedOutputParametersTagged | DenoiseImageCorrectedOutputNoiseParametersTagged;
}
type DenoiseImageParametersTagged = Required<Pick<DenoiseImageParameters, '@type'>> & DenoiseImageParameters;


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function denoise_image_output_cargs_dyn_fn(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "correctedOutput": denoise_image_corrected_output_cargs,
        "correctedOutputNoise": denoise_image_corrected_output_noise_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function denoise_image_output_outputs_dyn_fn(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "correctedOutput": denoise_image_corrected_output_outputs,
        "correctedOutputNoise": denoise_image_corrected_output_noise_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `DenoiseImageCorrectedOutputParameters(...)`.
 *
 * @interface
 */
interface DenoiseImageCorrectedOutputOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Denoised image.
     */
    output_image_outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param corrected_output_file_name Output file name.
 *
 * @returns Parameter dictionary
 */
function denoise_image_corrected_output_params(
    corrected_output_file_name: string,
): DenoiseImageCorrectedOutputParametersTagged {
    const params = {
        "@type": "correctedOutput" as const,
        "correctedOutputFileName": corrected_output_file_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function denoise_image_corrected_output_cargs(
    params: DenoiseImageCorrectedOutputParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["correctedOutputFileName"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function denoise_image_corrected_output_outputs(
    params: DenoiseImageCorrectedOutputParameters,
    execution: Execution,
): DenoiseImageCorrectedOutputOutputs {
    const ret: DenoiseImageCorrectedOutputOutputs = {
        root: execution.outputFile("."),
        output_image_outfile: execution.outputFile([(params["correctedOutputFileName"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `DenoiseImageCorrectedOutputNoiseParameters(...)`.
 *
 * @interface
 */
interface DenoiseImageCorrectedOutputNoiseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Denoised output image.
     */
    output_image_outfile: OutputPathType;
    /**
     * Noise map image.
     */
    output_bias_image: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param corrected_output_file_name Output file name.
 * @param noise_file Output noise map image.
 *
 * @returns Parameter dictionary
 */
function denoise_image_corrected_output_noise_params(
    corrected_output_file_name: string,
    noise_file: string | null = null,
): DenoiseImageCorrectedOutputNoiseParametersTagged {
    const params = {
        "@type": "correctedOutputNoise" as const,
        "correctedOutputFileName": corrected_output_file_name,
    };
    if (noise_file !== null) {
        params["noiseFile"] = noise_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function denoise_image_corrected_output_noise_cargs(
    params: DenoiseImageCorrectedOutputNoiseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["noiseFile"] ?? null) !== null) {
        cargs.push(["[", (params["correctedOutputFileName"] ?? null), ",", (params["noiseFile"] ?? null), "]"].join(''));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function denoise_image_corrected_output_noise_outputs(
    params: DenoiseImageCorrectedOutputNoiseParameters,
    execution: Execution,
): DenoiseImageCorrectedOutputNoiseOutputs {
    const ret: DenoiseImageCorrectedOutputNoiseOutputs = {
        root: execution.outputFile("."),
        output_image_outfile: execution.outputFile([(params["correctedOutputFileName"] ?? null)].join('')),
        output_bias_image: ((params["noiseFile"] ?? null) !== null) ? execution.outputFile([(params["noiseFile"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Output object returned when calling `DenoiseImageParameters(...)`.
 *
 * @interface
 */
interface DenoiseImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `DenoiseImageCorrectedOutputParameters` or `DenoiseImageCorrectedOutputNoiseParameters`.
     */
    output: DenoiseImageCorrectedOutputOutputs | DenoiseImageCorrectedOutputNoiseOutputs;
}


/**
 * Build parameters.
 *
 * @param input_image -i, --input-image inputImageFilename. A scalar image is expected as input for noise correction.
 * @param output The denoised version of the input image, with optional noise map image.
 * @param image_dimensionality -d, --image-dimensionality 2/3/4. This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param noise_model -n, --noise-model Rician/(Gaussian). Employ a Rician or Gaussian noise model.
 * @param shrink_factor -s, --shrink-factor (1)/2/3/... Running noise correction on large images can be time consuming. To lessen computation time, the input image can be resampled. The shrink factor, specified as a single integer, describes this resampling. Shrink factor = 1 is the default.
 * @param mask_image -x, --mask-image maskImageFilename. If a mask image is specified, denoising is only performed in the mask region.
 * @param patch_radius -p, --patch-radius 1x1x1. Patch radius. Default is 1x1x1.
 * @param search_radius -r, --search-radius 2x2x2. Search radius. Default is 2x2x2.
 * @param verbose Verbose output.
 *
 * @returns Parameter dictionary
 */
function denoise_image_params(
    input_image: InputPathType,
    output: DenoiseImageCorrectedOutputParametersTagged | DenoiseImageCorrectedOutputNoiseParametersTagged,
    image_dimensionality: 2 | 3 | 4 | null = null,
    noise_model: "Gaussian" | "Rician" | null = null,
    shrink_factor: number | null = null,
    mask_image: InputPathType | null = null,
    patch_radius: string | null = null,
    search_radius: string | null = null,
    verbose: 0 | 1 | null = null,
): DenoiseImageParametersTagged {
    const params = {
        "@type": "ants/DenoiseImage" as const,
        "input_image": input_image,
        "output": output,
    };
    if (image_dimensionality !== null) {
        params["image_dimensionality"] = image_dimensionality;
    }
    if (noise_model !== null) {
        params["noise_model"] = noise_model;
    }
    if (shrink_factor !== null) {
        params["shrink_factor"] = shrink_factor;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    if (patch_radius !== null) {
        params["patch_radius"] = patch_radius;
    }
    if (search_radius !== null) {
        params["search_radius"] = search_radius;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function denoise_image_cargs(
    params: DenoiseImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("DenoiseImage");
    if ((params["image_dimensionality"] ?? null) !== null) {
        cargs.push(
            "--image-dimensionality",
            String((params["image_dimensionality"] ?? null))
        );
    }
    if ((params["noise_model"] ?? null) !== null) {
        cargs.push(
            "--noise-model",
            (params["noise_model"] ?? null)
        );
    }
    if ((params["shrink_factor"] ?? null) !== null) {
        cargs.push(
            "--shrink-factor",
            String((params["shrink_factor"] ?? null))
        );
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(
            "--mask-image",
            execution.inputFile((params["mask_image"] ?? null))
        );
    }
    if ((params["patch_radius"] ?? null) !== null) {
        cargs.push(
            "--patch-radius",
            (params["patch_radius"] ?? null)
        );
    }
    if ((params["search_radius"] ?? null) !== null) {
        cargs.push(
            "--search-radius",
            (params["search_radius"] ?? null)
        );
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "--verbose",
            String((params["verbose"] ?? null))
        );
    }
    cargs.push(
        "--input-image",
        execution.inputFile((params["input_image"] ?? null))
    );
    cargs.push(
        "--output",
        ...denoise_image_output_cargs_dyn_fn((params["output"] ?? null)["@type"])((params["output"] ?? null), execution)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function denoise_image_outputs(
    params: DenoiseImageParameters,
    execution: Execution,
): DenoiseImageOutputs {
    const ret: DenoiseImageOutputs = {
        root: execution.outputFile("."),
        output: denoise_image_output_outputs_dyn_fn((params["output"] ?? null)["@type"])?.((params["output"] ?? null), execution),
    };
    return ret;
}


/**
 * DenoiseImage
 *
 * Denoise an image using a spatially adaptive filter originally described in J. V. Manjon, P. Coupe, Luis Marti-Bonmati, D. L. Collins, and M. Robles. Adaptive Non-Local Means Denoising of MR Images With Spatially Varying Noise Levels, Journal of Magnetic Resonance Imaging, 31:192-203, June 2010.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DenoiseImageOutputs`).
 */
function denoise_image_execute(
    params: DenoiseImageParameters,
    runner: Runner | null = null,
): DenoiseImageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DENOISE_IMAGE_METADATA);
    params = execution.params(params)
    const cargs = denoise_image_cargs(params, execution)
    const ret = denoise_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * DenoiseImage
 *
 * Denoise an image using a spatially adaptive filter originally described in J. V. Manjon, P. Coupe, Luis Marti-Bonmati, D. L. Collins, and M. Robles. Adaptive Non-Local Means Denoising of MR Images With Spatially Varying Noise Levels, Journal of Magnetic Resonance Imaging, 31:192-203, June 2010.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param input_image -i, --input-image inputImageFilename. A scalar image is expected as input for noise correction.
 * @param output The denoised version of the input image, with optional noise map image.
 * @param image_dimensionality -d, --image-dimensionality 2/3/4. This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param noise_model -n, --noise-model Rician/(Gaussian). Employ a Rician or Gaussian noise model.
 * @param shrink_factor -s, --shrink-factor (1)/2/3/... Running noise correction on large images can be time consuming. To lessen computation time, the input image can be resampled. The shrink factor, specified as a single integer, describes this resampling. Shrink factor = 1 is the default.
 * @param mask_image -x, --mask-image maskImageFilename. If a mask image is specified, denoising is only performed in the mask region.
 * @param patch_radius -p, --patch-radius 1x1x1. Patch radius. Default is 1x1x1.
 * @param search_radius -r, --search-radius 2x2x2. Search radius. Default is 2x2x2.
 * @param verbose Verbose output.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DenoiseImageOutputs`).
 */
function denoise_image(
    input_image: InputPathType,
    output: DenoiseImageCorrectedOutputParametersTagged | DenoiseImageCorrectedOutputNoiseParametersTagged,
    image_dimensionality: 2 | 3 | 4 | null = null,
    noise_model: "Gaussian" | "Rician" | null = null,
    shrink_factor: number | null = null,
    mask_image: InputPathType | null = null,
    patch_radius: string | null = null,
    search_radius: string | null = null,
    verbose: 0 | 1 | null = null,
    runner: Runner | null = null,
): DenoiseImageOutputs {
    const params = denoise_image_params(input_image, output, image_dimensionality, noise_model, shrink_factor, mask_image, patch_radius, search_radius, verbose)
    return denoise_image_execute(params, runner);
}


export {
      DENOISE_IMAGE_METADATA,
      DenoiseImageCorrectedOutputNoiseOutputs,
      DenoiseImageCorrectedOutputOutputs,
      DenoiseImageOutputs,
      denoise_image,
      denoise_image_corrected_output_noise_params,
      denoise_image_corrected_output_params,
      denoise_image_execute,
      denoise_image_params,
};
