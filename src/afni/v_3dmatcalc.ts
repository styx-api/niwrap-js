// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DMATCALC_METADATA: Metadata = {
    id: "8f178bdc30988773d64483c60aa601e33c83d9f6.boutiques",
    name: "3dmatcalc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dmatcalcParameters {
    "@type"?: "afni/3dmatcalc";
    "input_dataset": InputPathType;
    "input_matrix": InputPathType;
    "output_dataset": string;
    "mask"?: InputPathType | null | undefined;
}
type V3dmatcalcParametersTagged = Required<Pick<V3dmatcalcParameters, '@type'>> & V3dmatcalcParameters;


/**
 * Output object returned when calling `V3dmatcalcParameters(...)`.
 *
 * @interface
 */
interface V3dmatcalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset header file.
     */
    output_header: OutputPathType;
    /**
     * Output dataset brick file.
     */
    output_brick: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset to be processed.
 * @param input_matrix The matrix to be applied, specified as a .1D file or as an expression in the syntax of 1dmatcalc.
 * @param output_dataset Prefix for the output dataset.
 * @param mask Apply the matrix only to voxels in the mask; other voxels will be set to all zeroes.
 *
 * @returns Parameter dictionary
 */
function v_3dmatcalc_params(
    input_dataset: InputPathType,
    input_matrix: InputPathType,
    output_dataset: string,
    mask: InputPathType | null = null,
): V3dmatcalcParametersTagged {
    const params = {
        "@type": "afni/3dmatcalc" as const,
        "input_dataset": input_dataset,
        "input_matrix": input_matrix,
        "output_dataset": output_dataset,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dmatcalc_cargs(
    params: V3dmatcalcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dmatcalc");
    cargs.push(
        "-input",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    cargs.push(
        "-matrix",
        execution.inputFile((params["input_matrix"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["output_dataset"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dmatcalc_outputs(
    params: V3dmatcalcParameters,
    execution: Execution,
): V3dmatcalcOutputs {
    const ret: V3dmatcalcOutputs = {
        root: execution.outputFile("."),
        output_header: execution.outputFile([(params["output_dataset"] ?? null), "+tlrc.HEAD"].join('')),
        output_brick: execution.outputFile([(params["output_dataset"] ?? null), "+tlrc.BRIK"].join('')),
    };
    return ret;
}


/**
 * 3dmatcalc
 *
 * Apply a matrix to a dataset, voxel-by-voxel, to produce a new dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dmatcalcOutputs`).
 */
function v_3dmatcalc_execute(
    params: V3dmatcalcParameters,
    runner: Runner | null = null,
): V3dmatcalcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DMATCALC_METADATA);
    params = execution.params(params)
    const cargs = v_3dmatcalc_cargs(params, execution)
    const ret = v_3dmatcalc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dmatcalc
 *
 * Apply a matrix to a dataset, voxel-by-voxel, to produce a new dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset to be processed.
 * @param input_matrix The matrix to be applied, specified as a .1D file or as an expression in the syntax of 1dmatcalc.
 * @param output_dataset Prefix for the output dataset.
 * @param mask Apply the matrix only to voxels in the mask; other voxels will be set to all zeroes.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dmatcalcOutputs`).
 */
function v_3dmatcalc(
    input_dataset: InputPathType,
    input_matrix: InputPathType,
    output_dataset: string,
    mask: InputPathType | null = null,
    runner: Runner | null = null,
): V3dmatcalcOutputs {
    const params = v_3dmatcalc_params(input_dataset, input_matrix, output_dataset, mask)
    return v_3dmatcalc_execute(params, runner);
}


export {
      V3dmatcalcOutputs,
      V_3DMATCALC_METADATA,
      v_3dmatcalc,
      v_3dmatcalc_execute,
      v_3dmatcalc_params,
};
