// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_4DFPTOANALYZE_METADATA: Metadata = {
    id: "080e23daf4f3437b96205f8c01ae61740cf84a3b.boutiques",
    name: "4dfptoanalyze",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface V4dfptoanalyzeParameters {
    "__STYXTYPE__": "4dfptoanalyze";
    "input_file": InputPathType;
    "scale_factor"?: number | null | undefined;
    "output_8bit": boolean;
    "spm99": boolean;
    "endianness"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "4dfptoanalyze": v_4dfptoanalyze_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "4dfptoanalyze": v_4dfptoanalyze_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_4dfptoanalyze(...)`.
 *
 * @interface
 */
interface V4dfptoanalyzeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Header file of Analyze format output
     */
    analyze_hdr: OutputPathType;
    /**
     * Image file of Analyze format output
     */
    analyze_img: OutputPathType;
}


function v_4dfptoanalyze_params(
    input_file: InputPathType,
    scale_factor: number | null = null,
    output_8bit: boolean = false,
    spm99: boolean = false,
    endianness: string | null = null,
): V4dfptoanalyzeParameters {
    /**
     * Build parameters.
    
     * @param input_file Input 4dfp filename
     * @param scale_factor Scale output values by specified factor
     * @param output_8bit Output 8 bit unsigned char
     * @param spm99 Include origin and scale in hdr
     * @param endianness Output big or little endian (default CPU endian)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "4dfptoanalyze" as const,
        "input_file": input_file,
        "output_8bit": output_8bit,
        "spm99": spm99,
    };
    if (scale_factor !== null) {
        params["scale_factor"] = scale_factor;
    }
    if (endianness !== null) {
        params["endianness"] = endianness;
    }
    return params;
}


function v_4dfptoanalyze_cargs(
    params: V4dfptoanalyzeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("4dfptoanalyze");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["scale_factor"] ?? null) !== null) {
        cargs.push(
            "-c",
            String((params["scale_factor"] ?? null))
        );
    }
    if ((params["output_8bit"] ?? null)) {
        cargs.push("-8");
    }
    if ((params["spm99"] ?? null)) {
        cargs.push("-SPM99");
    }
    if ((params["endianness"] ?? null) !== null) {
        cargs.push(
            "-@",
            (params["endianness"] ?? null)
        );
    }
    return cargs;
}


function v_4dfptoanalyze_outputs(
    params: V4dfptoanalyzeParameters,
    execution: Execution,
): V4dfptoanalyzeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V4dfptoanalyzeOutputs = {
        root: execution.outputFile("."),
        analyze_hdr: execution.outputFile([path.basename((params["input_file"] ?? null)), "_analyze.hdr"].join('')),
        analyze_img: execution.outputFile([path.basename((params["input_file"] ?? null)), "_analyze.img"].join('')),
    };
    return ret;
}


function v_4dfptoanalyze_execute(
    params: V4dfptoanalyzeParameters,
    execution: Execution,
): V4dfptoanalyzeOutputs {
    /**
     * Converts 4dfp formatted files to Analyze format.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V4dfptoanalyzeOutputs`).
     */
    params = execution.params(params)
    const cargs = v_4dfptoanalyze_cargs(params, execution)
    const ret = v_4dfptoanalyze_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_4dfptoanalyze(
    input_file: InputPathType,
    scale_factor: number | null = null,
    output_8bit: boolean = false,
    spm99: boolean = false,
    endianness: string | null = null,
    runner: Runner | null = null,
): V4dfptoanalyzeOutputs {
    /**
     * Converts 4dfp formatted files to Analyze format.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Input 4dfp filename
     * @param scale_factor Scale output values by specified factor
     * @param output_8bit Output 8 bit unsigned char
     * @param spm99 Include origin and scale in hdr
     * @param endianness Output big or little endian (default CPU endian)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V4dfptoanalyzeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_4DFPTOANALYZE_METADATA);
    const params = v_4dfptoanalyze_params(input_file, scale_factor, output_8bit, spm99, endianness)
    return v_4dfptoanalyze_execute(params, execution);
}


export {
      V4dfptoanalyzeOutputs,
      V4dfptoanalyzeParameters,
      V_4DFPTOANALYZE_METADATA,
      v_4dfptoanalyze,
      v_4dfptoanalyze_params,
};
