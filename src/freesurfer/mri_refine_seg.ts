// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_REFINE_SEG_METADATA: Metadata = {
    id: "fedbb56a7b39cb49e4a0e963f96d90e569f37745.boutiques",
    name: "mri_refine_seg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRefineSegParameters {
    "@type"?: "freesurfer/mri_refine_seg";
    "input_segmentation": InputPathType;
    "output_segmentation": string;
    "debug": boolean;
}
type MriRefineSegParametersTagged = Required<Pick<MriRefineSegParameters, '@type'>> & MriRefineSegParameters;


/**
 * Output object returned when calling `MriRefineSegParameters(...)`.
 *
 * @interface
 */
interface MriRefineSegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Refined segmentation output file.
     */
    refined_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_segmentation Input segmentation file.
 * @param output_segmentation Refined segmentation output name.
 * @param debug Save the original segmentation, a mask of the refined voxels, and a pointset of the refined clusters to the output directory.
 *
 * @returns Parameter dictionary
 */
function mri_refine_seg_params(
    input_segmentation: InputPathType,
    output_segmentation: string,
    debug: boolean = false,
): MriRefineSegParametersTagged {
    const params = {
        "@type": "freesurfer/mri_refine_seg" as const,
        "input_segmentation": input_segmentation,
        "output_segmentation": output_segmentation,
        "debug": debug,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_refine_seg_cargs(
    params: MriRefineSegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_refine_seg");
    cargs.push(
        "-i",
        execution.inputFile((params["input_segmentation"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_segmentation"] ?? null)
    );
    if ((params["debug"] ?? false)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_refine_seg_outputs(
    params: MriRefineSegParameters,
    execution: Execution,
): MriRefineSegOutputs {
    const ret: MriRefineSegOutputs = {
        root: execution.outputFile("."),
        refined_output: execution.outputFile([(params["output_segmentation"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_refine_seg
 *
 * Refines a messy segmentation by recoding stray voxels.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRefineSegOutputs`).
 */
function mri_refine_seg_execute(
    params: MriRefineSegParameters,
    runner: Runner | null = null,
): MriRefineSegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_REFINE_SEG_METADATA);
    params = execution.params(params)
    const cargs = mri_refine_seg_cargs(params, execution)
    const ret = mri_refine_seg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_refine_seg
 *
 * Refines a messy segmentation by recoding stray voxels.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_segmentation Input segmentation file.
 * @param output_segmentation Refined segmentation output name.
 * @param debug Save the original segmentation, a mask of the refined voxels, and a pointset of the refined clusters to the output directory.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRefineSegOutputs`).
 */
function mri_refine_seg(
    input_segmentation: InputPathType,
    output_segmentation: string,
    debug: boolean = false,
    runner: Runner | null = null,
): MriRefineSegOutputs {
    const params = mri_refine_seg_params(input_segmentation, output_segmentation, debug)
    return mri_refine_seg_execute(params, runner);
}


export {
      MRI_REFINE_SEG_METADATA,
      MriRefineSegOutputs,
      mri_refine_seg,
      mri_refine_seg_execute,
      mri_refine_seg_params,
};
