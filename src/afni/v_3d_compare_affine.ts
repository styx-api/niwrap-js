// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_COMPARE_AFFINE_METADATA: Metadata = {
    id: "04d001195182e6193557b2d3270db9ca8f081ce9.boutiques",
    name: "3dCompareAffine",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dCompareAffineParameters {
    "@type"?: "afni/3dCompareAffine";
    "mask"?: string | null | undefined;
    "dset"?: InputPathType | null | undefined;
    "affine"?: Array<string> | null | undefined;
}
type V3dCompareAffineParametersTagged = Required<Pick<V3dCompareAffineParameters, '@type'>> & V3dCompareAffineParameters;


/**
 * Output object returned when calling `V3dCompareAffineParameters(...)`.
 *
 * @interface
 */
interface V3dCompareAffineOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing comparison results of affine transformations
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param mask Dataset containing non-zero voxels used as the region over which to compare the affine transformations.
 * @param dset Dataset to compute an automask from it and use that mask as the spatial region for comparison.
 * @param affine Input an affine transformation (file or 'MATRIX'). Multiple '-affine' options can be used to input multiple files.
 *
 * @returns Parameter dictionary
 */
function v_3d_compare_affine_params(
    mask: string | null = null,
    dset: InputPathType | null = null,
    affine: Array<string> | null = null,
): V3dCompareAffineParametersTagged {
    const params = {
        "@type": "afni/3dCompareAffine" as const,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (dset !== null) {
        params["dset"] = dset;
    }
    if (affine !== null) {
        params["affine"] = affine;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_compare_affine_cargs(
    params: V3dCompareAffineParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dCompareAffine");
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask"] ?? null)
        );
    }
    if ((params["dset"] ?? null) !== null) {
        cargs.push(
            "-dset",
            execution.inputFile((params["dset"] ?? null))
        );
    }
    if ((params["affine"] ?? null) !== null) {
        cargs.push(
            "-affine",
            ...(params["affine"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_compare_affine_outputs(
    params: V3dCompareAffineParameters,
    execution: Execution,
): V3dCompareAffineOutputs {
    const ret: V3dCompareAffineOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile(["[OUTPUT_PREFIX]_comparison.txt"].join('')),
    };
    return ret;
}


/**
 * 3dCompareAffine
 *
 * Compares two (or more) affine spatial transformations on a dataset and outputs measurements of their differences in spatial displacements.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dCompareAffineOutputs`).
 */
function v_3d_compare_affine_execute(
    params: V3dCompareAffineParameters,
    runner: Runner | null = null,
): V3dCompareAffineOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_COMPARE_AFFINE_METADATA);
    params = execution.params(params)
    const cargs = v_3d_compare_affine_cargs(params, execution)
    const ret = v_3d_compare_affine_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dCompareAffine
 *
 * Compares two (or more) affine spatial transformations on a dataset and outputs measurements of their differences in spatial displacements.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param mask Dataset containing non-zero voxels used as the region over which to compare the affine transformations.
 * @param dset Dataset to compute an automask from it and use that mask as the spatial region for comparison.
 * @param affine Input an affine transformation (file or 'MATRIX'). Multiple '-affine' options can be used to input multiple files.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dCompareAffineOutputs`).
 */
function v_3d_compare_affine(
    mask: string | null = null,
    dset: InputPathType | null = null,
    affine: Array<string> | null = null,
    runner: Runner | null = null,
): V3dCompareAffineOutputs {
    const params = v_3d_compare_affine_params(mask, dset, affine)
    return v_3d_compare_affine_execute(params, runner);
}


export {
      V3dCompareAffineOutputs,
      V_3D_COMPARE_AFFINE_METADATA,
      v_3d_compare_affine,
      v_3d_compare_affine_execute,
      v_3d_compare_affine_params,
};
