// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_TOPO_FIXER_METADATA: Metadata = {
    id: "4b97f9063ba3136c5f175963808d0468021279ab.boutiques",
    name: "mris_topo_fixer",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisTopoFixerParameters {
    "__STYXTYPE__": "mris_topo_fixer";
    "input_surface": InputPathType;
    "output_surface": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_topo_fixer": mris_topo_fixer_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_topo_fixer": mris_topo_fixer_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_topo_fixer(...)`.
 *
 * @interface
 */
interface MrisTopoFixerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Surface file with fixed topology.
     */
    fixed_surface: OutputPathType;
}


function mris_topo_fixer_params(
    input_surface: InputPathType,
    output_surface: string,
): MrisTopoFixerParameters {
    /**
     * Build parameters.
    
     * @param input_surface Input surface file that needs topological fixing.
     * @param output_surface Output surface file with fixed topology.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_topo_fixer" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
    };
    return params;
}


function mris_topo_fixer_cargs(
    params: MrisTopoFixerParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_topo_fixer");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    return cargs;
}


function mris_topo_fixer_outputs(
    params: MrisTopoFixerParameters,
    execution: Execution,
): MrisTopoFixerOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisTopoFixerOutputs = {
        root: execution.outputFile("."),
        fixed_surface: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


function mris_topo_fixer_execute(
    params: MrisTopoFixerParameters,
    execution: Execution,
): MrisTopoFixerOutputs {
    /**
     * FreeSurfer tool for fixing topological defects in cortical surface meshes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisTopoFixerOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_topo_fixer_cargs(params, execution)
    const ret = mris_topo_fixer_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_topo_fixer(
    input_surface: InputPathType,
    output_surface: string,
    runner: Runner | null = null,
): MrisTopoFixerOutputs {
    /**
     * FreeSurfer tool for fixing topological defects in cortical surface meshes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_surface Input surface file that needs topological fixing.
     * @param output_surface Output surface file with fixed topology.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisTopoFixerOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_TOPO_FIXER_METADATA);
    const params = mris_topo_fixer_params(input_surface, output_surface)
    return mris_topo_fixer_execute(params, execution);
}


export {
      MRIS_TOPO_FIXER_METADATA,
      MrisTopoFixerOutputs,
      MrisTopoFixerParameters,
      mris_topo_fixer,
      mris_topo_fixer_params,
};
