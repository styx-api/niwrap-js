// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_MESH_METADATA: Metadata = {
    id: "6066359d8c294ca53c640b4ebcdab63e664ed84c.boutiques",
    name: "SurfMesh",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfMeshParameters {
    "@type": "afni.SurfMesh";
    "input_surface": string;
    "output_surface": string;
    "edge_fraction": number;
    "surface_volume"?: InputPathType | null | undefined;
    "one_state": boolean;
    "anatomical_label": boolean;
    "no_volume_registration": boolean;
    "set_env"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.SurfMesh": surf_mesh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.SurfMesh": surf_mesh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_mesh(...)`.
 *
 * @interface
 */
interface SurfMeshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface file
     */
    output_surface_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file with specified type
 * @param output_surface Output surface file with specified type
 * @param edge_fraction Fraction of edges to simplify the surface
 * @param surface_volume Surface volume file
 * @param one_state Make all input surfaces have the same state
 * @param anatomical_label Label all input surfaces as anatomically correct
 * @param no_volume_registration Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume
 * @param set_env Set environment variable
 *
 * @returns Parameter dictionary
 */
function surf_mesh_params(
    input_surface: string,
    output_surface: string,
    edge_fraction: number,
    surface_volume: InputPathType | null = null,
    one_state: boolean = false,
    anatomical_label: boolean = false,
    no_volume_registration: boolean = false,
    set_env: string | null = null,
): SurfMeshParameters {
    const params = {
        "@type": "afni.SurfMesh" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
        "edge_fraction": edge_fraction,
        "one_state": one_state,
        "anatomical_label": anatomical_label,
        "no_volume_registration": no_volume_registration,
    };
    if (surface_volume !== null) {
        params["surface_volume"] = surface_volume;
    }
    if (set_env !== null) {
        params["set_env"] = set_env;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_mesh_cargs(
    params: SurfMeshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfMesh");
    cargs.push(
        "-i_TYPE",
        (params["input_surface"] ?? null)
    );
    cargs.push(
        "-o_TYPE",
        (params["output_surface"] ?? null)
    );
    cargs.push(
        "-edges",
        String((params["edge_fraction"] ?? null))
    );
    if ((params["surface_volume"] ?? null) !== null) {
        cargs.push(
            "-sv",
            execution.inputFile((params["surface_volume"] ?? null))
        );
    }
    if ((params["one_state"] ?? null)) {
        cargs.push("-onestate");
    }
    if ((params["anatomical_label"] ?? null)) {
        cargs.push("-anatomical");
    }
    if ((params["no_volume_registration"] ?? null)) {
        cargs.push("-novolreg");
    }
    if ((params["set_env"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["set_env"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_mesh_outputs(
    params: SurfMeshParameters,
    execution: Execution,
): SurfMeshOutputs {
    const ret: SurfMeshOutputs = {
        root: execution.outputFile("."),
        output_surface_file: execution.outputFile([(params["output_surface"] ?? null), ".surface"].join('')),
    };
    return ret;
}


/**
 * Surface mesh manipulation tool.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfMeshOutputs`).
 */
function surf_mesh_execute(
    params: SurfMeshParameters,
    runner: Runner | null = null,
): SurfMeshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_MESH_METADATA);
    params = execution.params(params)
    const cargs = surf_mesh_cargs(params, execution)
    const ret = surf_mesh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Surface mesh manipulation tool.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_surface Input surface file with specified type
 * @param output_surface Output surface file with specified type
 * @param edge_fraction Fraction of edges to simplify the surface
 * @param surface_volume Surface volume file
 * @param one_state Make all input surfaces have the same state
 * @param anatomical_label Label all input surfaces as anatomically correct
 * @param no_volume_registration Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume
 * @param set_env Set environment variable
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfMeshOutputs`).
 */
function surf_mesh(
    input_surface: string,
    output_surface: string,
    edge_fraction: number,
    surface_volume: InputPathType | null = null,
    one_state: boolean = false,
    anatomical_label: boolean = false,
    no_volume_registration: boolean = false,
    set_env: string | null = null,
    runner: Runner | null = null,
): SurfMeshOutputs {
    const params = surf_mesh_params(input_surface, output_surface, edge_fraction, surface_volume, one_state, anatomical_label, no_volume_registration, set_env)
    return surf_mesh_execute(params, runner);
}


export {
      SURF_MESH_METADATA,
      SurfMeshOutputs,
      SurfMeshParameters,
      surf_mesh,
      surf_mesh_execute,
      surf_mesh_params,
};
