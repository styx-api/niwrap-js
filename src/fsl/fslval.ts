// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLVAL_METADATA: Metadata = {
    id: "e6d1ee0a9f6e7b463e09c6cb327e0160466fa559.boutiques",
    name: "fslval",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslvalParameters {
    "@type"?: "fsl/fslval";
    "input_file": InputPathType;
    "keyword": string;
}
type FslvalParametersTagged = Required<Pick<FslvalParameters, '@type'>> & FslvalParameters;


/**
 * Output object returned when calling `FslvalParameters(...)`.
 *
 * @interface
 */
interface FslvalOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output printed to standard out
     */
    stdout: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input NIfTI image file
 * @param keyword Keyword to query from the NIfTI header
 *
 * @returns Parameter dictionary
 */
function fslval_params(
    input_file: InputPathType,
    keyword: string,
): FslvalParametersTagged {
    const params = {
        "@type": "fsl/fslval" as const,
        "input_file": input_file,
        "keyword": keyword,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslval_cargs(
    params: FslvalParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslval");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["keyword"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslval_outputs(
    params: FslvalParameters,
    execution: Execution,
): FslvalOutputs {
    const ret: FslvalOutputs = {
        root: execution.outputFile("."),
        stdout: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * fslval
 *
 * Tool for printing out header information from NIfTI image files.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslvalOutputs`).
 */
function fslval_execute(
    params: FslvalParameters,
    runner: Runner | null = null,
): FslvalOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLVAL_METADATA);
    params = execution.params(params)
    const cargs = fslval_cargs(params, execution)
    const ret = fslval_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fslval
 *
 * Tool for printing out header information from NIfTI image files.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input NIfTI image file
 * @param keyword Keyword to query from the NIfTI header
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslvalOutputs`).
 */
function fslval(
    input_file: InputPathType,
    keyword: string,
    runner: Runner | null = null,
): FslvalOutputs {
    const params = fslval_params(input_file, keyword)
    return fslval_execute(params, runner);
}


export {
      FSLVAL_METADATA,
      FslvalOutputs,
      fslval,
      fslval_execute,
      fslval_params,
};
