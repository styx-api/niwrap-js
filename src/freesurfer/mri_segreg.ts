// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SEGREG_METADATA: Metadata = {
    id: "fbb7801d3f529e275219ef56894722f7f60ba8c2.boutiques",
    name: "mri_segreg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSegregParameters {
    "@type"?: "freesurfer/mri_segreg";
    "input_file": InputPathType;
    "output_file": string;
}
type MriSegregParametersTagged = Required<Pick<MriSegregParameters, '@type'>> & MriSegregParameters;


/**
 * Output object returned when calling `MriSegregParameters(...)`.
 *
 * @interface
 */
interface MriSegregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file generated by mri_segreg
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input image file. All formats accepted by mri_convert can be used.
 * @param output_file Output file for the processed image
 *
 * @returns Parameter dictionary
 */
function mri_segreg_params(
    input_file: InputPathType,
    output_file: string = "output.mgz",
): MriSegregParametersTagged {
    const params = {
        "@type": "freesurfer/mri_segreg" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_segreg_cargs(
    params: MriSegregParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_segreg");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? "output.mgz"));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_segreg_outputs(
    params: MriSegregParameters,
    execution: Execution,
): MriSegregOutputs {
    const ret: MriSegregOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["output_file"] ?? "output.mgz")].join('')),
    };
    return ret;
}


/**
 * mri_segreg
 *
 * MRI Segregation tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegregOutputs`).
 */
function mri_segreg_execute(
    params: MriSegregParameters,
    runner: Runner | null = null,
): MriSegregOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SEGREG_METADATA);
    params = execution.params(params)
    const cargs = mri_segreg_cargs(params, execution)
    const ret = mri_segreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_segreg
 *
 * MRI Segregation tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input image file. All formats accepted by mri_convert can be used.
 * @param output_file Output file for the processed image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegregOutputs`).
 */
function mri_segreg(
    input_file: InputPathType,
    output_file: string = "output.mgz",
    runner: Runner | null = null,
): MriSegregOutputs {
    const params = mri_segreg_params(input_file, output_file)
    return mri_segreg_execute(params, runner);
}


export {
      MRI_SEGREG_METADATA,
      MriSegregOutputs,
      mri_segreg,
      mri_segreg_execute,
      mri_segreg_params,
};
