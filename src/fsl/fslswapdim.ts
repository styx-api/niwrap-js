// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLSWAPDIM_METADATA: Metadata = {
    id: "9e980373806c6b79986b0c65ad3aef65d28c6571.boutiques",
    name: "fslswapdim",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslswapdimParameters {
    "__STYXTYPE__": "fslswapdim";
    "input_file": InputPathType;
    "axis_a": string;
    "axis_b": string;
    "axis_c": string;
    "output_file"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslswapdim": fslswapdim_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslswapdim": fslswapdim_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslswapdim(...)`.
 *
 * @interface
 */
interface FslswapdimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image with swapped dimensions
     */
    output_image: OutputPathType | null;
}


function fslswapdim_params(
    input_file: InputPathType,
    axis_a: string,
    axis_b: string,
    axis_c: string,
    output_file: string | null = null,
): FslswapdimParameters {
    /**
     * Build parameters.
    
     * @param input_file Input image (e.g. img.nii.gz)
     * @param axis_a New x-axis dimension (e.g., -x, x, RL, etc.)
     * @param axis_b New y-axis dimension (e.g., -y, y, PA, etc.)
     * @param axis_c New z-axis dimension (e.g., -z, z, IS, etc.)
     * @param output_file Output image (e.g., output.nii.gz). If not specified, the equivalent transformation matrix is written to the standard output.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslswapdim" as const,
        "input_file": input_file,
        "axis_a": axis_a,
        "axis_b": axis_b,
        "axis_c": axis_c,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


function fslswapdim_cargs(
    params: FslswapdimParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslswapdim");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["axis_a"] ?? null));
    cargs.push((params["axis_b"] ?? null));
    cargs.push((params["axis_c"] ?? null));
    if ((params["output_file"] ?? null) !== null) {
        cargs.push((params["output_file"] ?? null));
    }
    return cargs;
}


function fslswapdim_outputs(
    params: FslswapdimParameters,
    execution: Execution,
): FslswapdimOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslswapdimOutputs = {
        root: execution.outputFile("."),
        output_image: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function fslswapdim_execute(
    params: FslswapdimParameters,
    execution: Execution,
): FslswapdimOutputs {
    /**
     * Swap dimensions of an image volume.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslswapdimOutputs`).
     */
    params = execution.params(params)
    const cargs = fslswapdim_cargs(params, execution)
    const ret = fslswapdim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslswapdim(
    input_file: InputPathType,
    axis_a: string,
    axis_b: string,
    axis_c: string,
    output_file: string | null = null,
    runner: Runner | null = null,
): FslswapdimOutputs {
    /**
     * Swap dimensions of an image volume.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file Input image (e.g. img.nii.gz)
     * @param axis_a New x-axis dimension (e.g., -x, x, RL, etc.)
     * @param axis_b New y-axis dimension (e.g., -y, y, PA, etc.)
     * @param axis_c New z-axis dimension (e.g., -z, z, IS, etc.)
     * @param output_file Output image (e.g., output.nii.gz). If not specified, the equivalent transformation matrix is written to the standard output.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslswapdimOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLSWAPDIM_METADATA);
    const params = fslswapdim_params(input_file, axis_a, axis_b, axis_c, output_file)
    return fslswapdim_execute(params, execution);
}


export {
      FSLSWAPDIM_METADATA,
      FslswapdimOutputs,
      FslswapdimParameters,
      fslswapdim,
      fslswapdim_params,
};
