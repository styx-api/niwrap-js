// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SUMA_MAKE_SPEC_SF_METADATA: Metadata = {
    id: "b2f1fc4d123e03415cf587f26d4d91d1d54dd486.boutiques",
    name: "@SUMA_Make_Spec_SF",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VSumaMakeSpecSfParameters {
    "@type": "afni.@SUMA_Make_Spec_SF";
    "debug_level"?: number | null | undefined;
    "surface_path"?: string | null | undefined;
    "subject_id": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@SUMA_Make_Spec_SF": v__suma_make_spec_sf_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@SUMA_Make_Spec_SF": v__suma_make_spec_sf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__suma_make_spec_sf(...)`.
 *
 * @interface
 */
interface VSumaMakeSpecSfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * All created files are stored in SURFACES directory
     */
    output_files: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_id Required subject ID for file naming
 * @param debug_level Print debug information along the way
 * @param surface_path Path to directory containing 'SURFACES' and AFNI volume used in creating the surfaces
 *
 * @returns Parameter dictionary
 */
function v__suma_make_spec_sf_params(
    subject_id: string,
    debug_level: number | null = null,
    surface_path: string | null = null,
): VSumaMakeSpecSfParameters {
    const params = {
        "@type": "afni.@SUMA_Make_Spec_SF" as const,
        "subject_id": subject_id,
    };
    if (debug_level !== null) {
        params["debug_level"] = debug_level;
    }
    if (surface_path !== null) {
        params["surface_path"] = surface_path;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__suma_make_spec_sf_cargs(
    params: VSumaMakeSpecSfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@SUMA_Make_Spec_SF");
    if ((params["debug_level"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug_level"] ?? null))
        );
    }
    if ((params["surface_path"] ?? null) !== null) {
        cargs.push(
            "-sfpath",
            (params["surface_path"] ?? null)
        );
    }
    cargs.push(
        "-sid",
        (params["subject_id"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__suma_make_spec_sf_outputs(
    params: VSumaMakeSpecSfParameters,
    execution: Execution,
): VSumaMakeSpecSfOutputs {
    const ret: VSumaMakeSpecSfOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile(["SURFACES/*"].join('')),
    };
    return ret;
}


/**
 * Prepare for surface viewing in SUMA.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VSumaMakeSpecSfOutputs`).
 */
function v__suma_make_spec_sf_execute(
    params: VSumaMakeSpecSfParameters,
    runner: Runner | null = null,
): VSumaMakeSpecSfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SUMA_MAKE_SPEC_SF_METADATA);
    params = execution.params(params)
    const cargs = v__suma_make_spec_sf_cargs(params, execution)
    const ret = v__suma_make_spec_sf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Prepare for surface viewing in SUMA.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param subject_id Required subject ID for file naming
 * @param debug_level Print debug information along the way
 * @param surface_path Path to directory containing 'SURFACES' and AFNI volume used in creating the surfaces
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VSumaMakeSpecSfOutputs`).
 */
function v__suma_make_spec_sf(
    subject_id: string,
    debug_level: number | null = null,
    surface_path: string | null = null,
    runner: Runner | null = null,
): VSumaMakeSpecSfOutputs {
    const params = v__suma_make_spec_sf_params(subject_id, debug_level, surface_path)
    return v__suma_make_spec_sf_execute(params, runner);
}


export {
      VSumaMakeSpecSfOutputs,
      VSumaMakeSpecSfParameters,
      V__SUMA_MAKE_SPEC_SF_METADATA,
      v__suma_make_spec_sf,
      v__suma_make_spec_sf_execute,
      v__suma_make_spec_sf_params,
};
