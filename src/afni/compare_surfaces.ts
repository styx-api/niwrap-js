// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const COMPARE_SURFACES_METADATA: Metadata = {
    id: "653d6f831efb2cdba11144f083f4857fcc5112b4.boutiques",
    name: "CompareSurfaces",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface CompareSurfacesParameters {
    "@type": "afni.CompareSurfaces";
    "spec_file": InputPathType;
    "hemisphere": "L" | "R";
    "volume_parent_1": InputPathType;
    "volume_parent_2": InputPathType;
    "file_prefix"?: string | null | undefined;
    "one_node"?: number | null | undefined;
    "node_range"?: Array<number> | null | undefined;
    "no_consistency_check": boolean;
    "no_volreg": boolean;
    "no_transform": boolean;
    "set_environment_variable"?: string | null | undefined;
    "trace": boolean;
    "extreme_trace": boolean;
    "no_memory_trace": boolean;
    "yes_memory_trace": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.CompareSurfaces": compare_surfaces_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.CompareSurfaces": compare_surfaces_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `compare_surfaces(...)`.
 *
 * @interface
 */
interface CompareSurfacesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Distance output file.
     */
    distance_output_file: OutputPathType | null;
    /**
     * Node color output file.
     */
    color_output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param spec_file File containing surface specification.
 * @param hemisphere Specify the hemisphere being processed (left or right).
 * @param volume_parent_1 Volume parent BRIK for first surface.
 * @param volume_parent_2 Volume parent BRIK for second surface.
 * @param file_prefix Prefix for distance and node color output files. Existing file will not be overwritten.
 * @param one_node Output results for node index only. This option is for debugging.
 * @param node_range Output results from node istart to node istop only. This option is for debugging.
 * @param no_consistency_check Skip mesh orientation consistency check. This speeds up the start time so it is useful for debugging runs.
 * @param no_volreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
 * @param no_transform Same as -novolreg.
 * @param set_environment_variable Set environment variable ENVname to be ENVvalue. Quotes are necessary.
 * @param trace Turns on In/Out debug and Memory tracing.
 * @param extreme_trace Turns on extreme tracing.
 * @param no_memory_trace Turn off memory tracing.
 * @param yes_memory_trace Turn on memory tracing (default).
 *
 * @returns Parameter dictionary
 */
function compare_surfaces_params(
    spec_file: InputPathType,
    hemisphere: "L" | "R",
    volume_parent_1: InputPathType,
    volume_parent_2: InputPathType,
    file_prefix: string | null = null,
    one_node: number | null = null,
    node_range: Array<number> | null = null,
    no_consistency_check: boolean = false,
    no_volreg: boolean = false,
    no_transform: boolean = false,
    set_environment_variable: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    no_memory_trace: boolean = false,
    yes_memory_trace: boolean = false,
): CompareSurfacesParameters {
    const params = {
        "@type": "afni.CompareSurfaces" as const,
        "spec_file": spec_file,
        "hemisphere": hemisphere,
        "volume_parent_1": volume_parent_1,
        "volume_parent_2": volume_parent_2,
        "no_consistency_check": no_consistency_check,
        "no_volreg": no_volreg,
        "no_transform": no_transform,
        "trace": trace,
        "extreme_trace": extreme_trace,
        "no_memory_trace": no_memory_trace,
        "yes_memory_trace": yes_memory_trace,
    };
    if (file_prefix !== null) {
        params["file_prefix"] = file_prefix;
    }
    if (one_node !== null) {
        params["one_node"] = one_node;
    }
    if (node_range !== null) {
        params["node_range"] = node_range;
    }
    if (set_environment_variable !== null) {
        params["set_environment_variable"] = set_environment_variable;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function compare_surfaces_cargs(
    params: CompareSurfacesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("CompareSurfaces");
    cargs.push(
        "-spec",
        execution.inputFile((params["spec_file"] ?? null))
    );
    cargs.push(
        "-hemi",
        (params["hemisphere"] ?? null)
    );
    cargs.push(
        "-sv1",
        execution.inputFile((params["volume_parent_1"] ?? null))
    );
    cargs.push(
        "-sv2",
        execution.inputFile((params["volume_parent_2"] ?? null))
    );
    if ((params["file_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["file_prefix"] ?? null)
        );
    }
    if ((params["one_node"] ?? null) !== null) {
        cargs.push(
            "-onenode",
            String((params["one_node"] ?? null))
        );
    }
    if ((params["node_range"] ?? null) !== null) {
        cargs.push(
            "-noderange",
            ...(params["node_range"] ?? null).map(String)
        );
    }
    if ((params["no_consistency_check"] ?? null)) {
        cargs.push("-nocons");
    }
    if ((params["no_volreg"] ?? null)) {
        cargs.push("-novolreg");
    }
    if ((params["no_transform"] ?? null)) {
        cargs.push("-noxform");
    }
    if ((params["set_environment_variable"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["set_environment_variable"] ?? null)
        );
    }
    if ((params["trace"] ?? null)) {
        cargs.push("-trace");
    }
    if ((params["extreme_trace"] ?? null)) {
        cargs.push("-TRACE");
    }
    if ((params["no_memory_trace"] ?? null)) {
        cargs.push("-nomall");
    }
    if ((params["yes_memory_trace"] ?? null)) {
        cargs.push("-yesmall");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function compare_surfaces_outputs(
    params: CompareSurfacesParameters,
    execution: Execution,
): CompareSurfacesOutputs {
    const ret: CompareSurfacesOutputs = {
        root: execution.outputFile("."),
        distance_output_file: ((params["file_prefix"] ?? null) !== null) ? execution.outputFile([(params["file_prefix"] ?? null), "_distance.txt"].join('')) : null,
        color_output_file: ((params["file_prefix"] ?? null) !== null) ? execution.outputFile([(params["file_prefix"] ?? null), "_color.txt"].join('')) : null,
    };
    return ret;
}


/**
 * Calculates distance at each node in Surface 1 (S1) to Surface 2 (S2) along the local surface normal at each node in S1. Superseded by SurfToSurf.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CompareSurfacesOutputs`).
 */
function compare_surfaces_execute(
    params: CompareSurfacesParameters,
    runner: Runner | null = null,
): CompareSurfacesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(COMPARE_SURFACES_METADATA);
    params = execution.params(params)
    const cargs = compare_surfaces_cargs(params, execution)
    const ret = compare_surfaces_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Calculates distance at each node in Surface 1 (S1) to Surface 2 (S2) along the local surface normal at each node in S1. Superseded by SurfToSurf.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param spec_file File containing surface specification.
 * @param hemisphere Specify the hemisphere being processed (left or right).
 * @param volume_parent_1 Volume parent BRIK for first surface.
 * @param volume_parent_2 Volume parent BRIK for second surface.
 * @param file_prefix Prefix for distance and node color output files. Existing file will not be overwritten.
 * @param one_node Output results for node index only. This option is for debugging.
 * @param node_range Output results from node istart to node istop only. This option is for debugging.
 * @param no_consistency_check Skip mesh orientation consistency check. This speeds up the start time so it is useful for debugging runs.
 * @param no_volreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
 * @param no_transform Same as -novolreg.
 * @param set_environment_variable Set environment variable ENVname to be ENVvalue. Quotes are necessary.
 * @param trace Turns on In/Out debug and Memory tracing.
 * @param extreme_trace Turns on extreme tracing.
 * @param no_memory_trace Turn off memory tracing.
 * @param yes_memory_trace Turn on memory tracing (default).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CompareSurfacesOutputs`).
 */
function compare_surfaces(
    spec_file: InputPathType,
    hemisphere: "L" | "R",
    volume_parent_1: InputPathType,
    volume_parent_2: InputPathType,
    file_prefix: string | null = null,
    one_node: number | null = null,
    node_range: Array<number> | null = null,
    no_consistency_check: boolean = false,
    no_volreg: boolean = false,
    no_transform: boolean = false,
    set_environment_variable: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    no_memory_trace: boolean = false,
    yes_memory_trace: boolean = false,
    runner: Runner | null = null,
): CompareSurfacesOutputs {
    const params = compare_surfaces_params(spec_file, hemisphere, volume_parent_1, volume_parent_2, file_prefix, one_node, node_range, no_consistency_check, no_volreg, no_transform, set_environment_variable, trace, extreme_trace, no_memory_trace, yes_memory_trace)
    return compare_surfaces_execute(params, runner);
}


export {
      COMPARE_SURFACES_METADATA,
      CompareSurfacesOutputs,
      CompareSurfacesParameters,
      compare_surfaces,
      compare_surfaces_execute,
      compare_surfaces_params,
};
