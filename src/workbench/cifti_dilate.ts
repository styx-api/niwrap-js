// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_DILATE_METADATA: Metadata = {
    id: "907e475cef6dbf3556c5c8ea8d183b2219169bf5.boutiques",
    name: "cifti-dilate",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiDilateLeftSurfaceParameters {
    "__STYXTYPE__": "left_surface";
    "surface": InputPathType;
    "opt_left_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiDilateRightSurfaceParameters {
    "__STYXTYPE__": "right_surface";
    "surface": InputPathType;
    "opt_right_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiDilateCerebellumSurfaceParameters {
    "__STYXTYPE__": "cerebellum_surface";
    "surface": InputPathType;
    "opt_cerebellum_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiDilateParameters {
    "__STYXTYPE__": "cifti-dilate";
    "cifti_in": InputPathType;
    "direction": string;
    "surface_distance": number;
    "volume_distance": number;
    "cifti_out": string;
    "left_surface"?: CiftiDilateLeftSurfaceParameters | null | undefined;
    "right_surface"?: CiftiDilateRightSurfaceParameters | null | undefined;
    "cerebellum_surface"?: CiftiDilateCerebellumSurfaceParameters | null | undefined;
    "opt_bad_brainordinate_roi_roi_cifti"?: InputPathType | null | undefined;
    "opt_nearest": boolean;
    "opt_merged_volume": boolean;
    "opt_legacy_mode": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cifti-dilate": cifti_dilate_cargs,
        "left_surface": cifti_dilate_left_surface_cargs,
        "right_surface": cifti_dilate_right_surface_cargs,
        "cerebellum_surface": cifti_dilate_cerebellum_surface_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "cifti-dilate": cifti_dilate_outputs,
    };
    return outputsFuncs[t];
}


function cifti_dilate_left_surface_params(
    surface: InputPathType,
    opt_left_corrected_areas_area_metric: InputPathType | null = null,
): CiftiDilateLeftSurfaceParameters {
    /**
     * Build parameters.
    
     * @param surface the left surface file
     * @param opt_left_corrected_areas_area_metric vertex areas to use instead of computing them from the left surface: the corrected vertex areas, as a metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "left_surface" as const,
        "surface": surface,
    };
    if (opt_left_corrected_areas_area_metric !== null) {
        params["opt_left_corrected_areas_area_metric"] = opt_left_corrected_areas_area_metric;
    }
    return params;
}


function cifti_dilate_left_surface_cargs(
    params: CiftiDilateLeftSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-left-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_left_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-left-corrected-areas",
            execution.inputFile((params["opt_left_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


function cifti_dilate_right_surface_params(
    surface: InputPathType,
    opt_right_corrected_areas_area_metric: InputPathType | null = null,
): CiftiDilateRightSurfaceParameters {
    /**
     * Build parameters.
    
     * @param surface the right surface file
     * @param opt_right_corrected_areas_area_metric vertex areas to use instead of computing them from the right surface: the corrected vertex areas, as a metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "right_surface" as const,
        "surface": surface,
    };
    if (opt_right_corrected_areas_area_metric !== null) {
        params["opt_right_corrected_areas_area_metric"] = opt_right_corrected_areas_area_metric;
    }
    return params;
}


function cifti_dilate_right_surface_cargs(
    params: CiftiDilateRightSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-right-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_right_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-right-corrected-areas",
            execution.inputFile((params["opt_right_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


function cifti_dilate_cerebellum_surface_params(
    surface: InputPathType,
    opt_cerebellum_corrected_areas_area_metric: InputPathType | null = null,
): CiftiDilateCerebellumSurfaceParameters {
    /**
     * Build parameters.
    
     * @param surface the cerebellum surface file
     * @param opt_cerebellum_corrected_areas_area_metric vertex areas to use instead of computing them from the cerebellum surface: the corrected vertex areas, as a metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cerebellum_surface" as const,
        "surface": surface,
    };
    if (opt_cerebellum_corrected_areas_area_metric !== null) {
        params["opt_cerebellum_corrected_areas_area_metric"] = opt_cerebellum_corrected_areas_area_metric;
    }
    return params;
}


function cifti_dilate_cerebellum_surface_cargs(
    params: CiftiDilateCerebellumSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-cerebellum-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_cerebellum_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-corrected-areas",
            execution.inputFile((params["opt_cerebellum_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `cifti_dilate(...)`.
 *
 * @interface
 */
interface CiftiDilateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


function cifti_dilate_params(
    cifti_in: InputPathType,
    direction: string,
    surface_distance: number,
    volume_distance: number,
    cifti_out: string,
    left_surface: CiftiDilateLeftSurfaceParameters | null = null,
    right_surface: CiftiDilateRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiDilateCerebellumSurfaceParameters | null = null,
    opt_bad_brainordinate_roi_roi_cifti: InputPathType | null = null,
    opt_nearest: boolean = false,
    opt_merged_volume: boolean = false,
    opt_legacy_mode: boolean = false,
): CiftiDilateParameters {
    /**
     * Build parameters.
    
     * @param cifti_in the input cifti file
     * @param direction which dimension to dilate along, ROW or COLUMN
     * @param surface_distance the distance to dilate on surfaces, in mm
     * @param volume_distance the distance to dilate in the volume, in mm
     * @param cifti_out the output cifti file
     * @param left_surface specify the left surface to use
     * @param right_surface specify the right surface to use
     * @param cerebellum_surface specify the cerebellum surface to use
     * @param opt_bad_brainordinate_roi_roi_cifti specify an roi of brainordinates to overwrite, rather than zeros: cifti dscalar or dtseries file, positive values denote brainordinates to have their values replaced
     * @param opt_nearest use nearest good value instead of a weighted average
     * @param opt_merged_volume treat volume components as if they were a single component
     * @param opt_legacy_mode use the math from v1.3.2 and earlier for weighted dilation
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti-dilate" as const,
        "cifti_in": cifti_in,
        "direction": direction,
        "surface_distance": surface_distance,
        "volume_distance": volume_distance,
        "cifti_out": cifti_out,
        "opt_nearest": opt_nearest,
        "opt_merged_volume": opt_merged_volume,
        "opt_legacy_mode": opt_legacy_mode,
    };
    if (left_surface !== null) {
        params["left_surface"] = left_surface;
    }
    if (right_surface !== null) {
        params["right_surface"] = right_surface;
    }
    if (cerebellum_surface !== null) {
        params["cerebellum_surface"] = cerebellum_surface;
    }
    if (opt_bad_brainordinate_roi_roi_cifti !== null) {
        params["opt_bad_brainordinate_roi_roi_cifti"] = opt_bad_brainordinate_roi_roi_cifti;
    }
    return params;
}


function cifti_dilate_cargs(
    params: CiftiDilateParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-dilate");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push(String((params["surface_distance"] ?? null)));
    cargs.push(String((params["volume_distance"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["left_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["left_surface"] ?? null).__STYXTYPE__)((params["left_surface"] ?? null), execution));
    }
    if ((params["right_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["right_surface"] ?? null).__STYXTYPE__)((params["right_surface"] ?? null), execution));
    }
    if ((params["cerebellum_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["cerebellum_surface"] ?? null).__STYXTYPE__)((params["cerebellum_surface"] ?? null), execution));
    }
    if ((params["opt_bad_brainordinate_roi_roi_cifti"] ?? null) !== null) {
        cargs.push(
            "-bad-brainordinate-roi",
            execution.inputFile((params["opt_bad_brainordinate_roi_roi_cifti"] ?? null))
        );
    }
    if ((params["opt_nearest"] ?? null)) {
        cargs.push("-nearest");
    }
    if ((params["opt_merged_volume"] ?? null)) {
        cargs.push("-merged-volume");
    }
    if ((params["opt_legacy_mode"] ?? null)) {
        cargs.push("-legacy-mode");
    }
    return cargs;
}


function cifti_dilate_outputs(
    params: CiftiDilateParameters,
    execution: Execution,
): CiftiDilateOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CiftiDilateOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


function cifti_dilate_execute(
    params: CiftiDilateParameters,
    execution: Execution,
): CiftiDilateOutputs {
    /**
     * Dilate a cifti file.
     * 
     * For all data values designated as bad, if they neighbor a good value or are within the specified distance of a good value in the same kind of model, replace the value with a distance weighted average of nearby good values, otherwise set the value to zero.  If -nearest is specified, it will use the value from the closest good value within range instead of a weighted average.  When the input file contains label data, nearest dilation is used on the surface, and weighted popularity is used in the volume.
     * 
     * The -*-corrected-areas options are intended for dilating on group average surfaces, but it is only an approximate correction for the reduction of structure in a group average surface.
     * 
     * If -bad-brainordinate-roi is specified, all values, including those with value zero, are good, except for locations with a positive value in the ROI.  If it is not specified, only values equal to zero are bad.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CiftiDilateOutputs`).
     */
    params = execution.params(params)
    const cargs = cifti_dilate_cargs(params, execution)
    const ret = cifti_dilate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cifti_dilate(
    cifti_in: InputPathType,
    direction: string,
    surface_distance: number,
    volume_distance: number,
    cifti_out: string,
    left_surface: CiftiDilateLeftSurfaceParameters | null = null,
    right_surface: CiftiDilateRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiDilateCerebellumSurfaceParameters | null = null,
    opt_bad_brainordinate_roi_roi_cifti: InputPathType | null = null,
    opt_nearest: boolean = false,
    opt_merged_volume: boolean = false,
    opt_legacy_mode: boolean = false,
    runner: Runner | null = null,
): CiftiDilateOutputs {
    /**
     * Dilate a cifti file.
     * 
     * For all data values designated as bad, if they neighbor a good value or are within the specified distance of a good value in the same kind of model, replace the value with a distance weighted average of nearby good values, otherwise set the value to zero.  If -nearest is specified, it will use the value from the closest good value within range instead of a weighted average.  When the input file contains label data, nearest dilation is used on the surface, and weighted popularity is used in the volume.
     * 
     * The -*-corrected-areas options are intended for dilating on group average surfaces, but it is only an approximate correction for the reduction of structure in a group average surface.
     * 
     * If -bad-brainordinate-roi is specified, all values, including those with value zero, are good, except for locations with a positive value in the ROI.  If it is not specified, only values equal to zero are bad.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param cifti_in the input cifti file
     * @param direction which dimension to dilate along, ROW or COLUMN
     * @param surface_distance the distance to dilate on surfaces, in mm
     * @param volume_distance the distance to dilate in the volume, in mm
     * @param cifti_out the output cifti file
     * @param left_surface specify the left surface to use
     * @param right_surface specify the right surface to use
     * @param cerebellum_surface specify the cerebellum surface to use
     * @param opt_bad_brainordinate_roi_roi_cifti specify an roi of brainordinates to overwrite, rather than zeros: cifti dscalar or dtseries file, positive values denote brainordinates to have their values replaced
     * @param opt_nearest use nearest good value instead of a weighted average
     * @param opt_merged_volume treat volume components as if they were a single component
     * @param opt_legacy_mode use the math from v1.3.2 and earlier for weighted dilation
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CiftiDilateOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_DILATE_METADATA);
    const params = cifti_dilate_params(cifti_in, direction, surface_distance, volume_distance, cifti_out, left_surface, right_surface, cerebellum_surface, opt_bad_brainordinate_roi_roi_cifti, opt_nearest, opt_merged_volume, opt_legacy_mode)
    return cifti_dilate_execute(params, execution);
}


export {
      CIFTI_DILATE_METADATA,
      CiftiDilateCerebellumSurfaceParameters,
      CiftiDilateLeftSurfaceParameters,
      CiftiDilateOutputs,
      CiftiDilateParameters,
      CiftiDilateRightSurfaceParameters,
      cifti_dilate,
      cifti_dilate_cerebellum_surface_params,
      cifti_dilate_left_surface_params,
      cifti_dilate_params,
      cifti_dilate_right_surface_params,
};
