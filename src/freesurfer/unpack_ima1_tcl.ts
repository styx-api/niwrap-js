// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACK_IMA1_TCL_METADATA: Metadata = {
    id: "879dfc4e2c1cd294a8c370964cc378f77296eb2a.boutiques",
    name: "unpack_ima1.tcl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UnpackIma1TclParameters {
    "@type"?: "freesurfer/unpack_ima1.tcl";
    "input_directory": string;
    "output_directory": string;
}
type UnpackIma1TclParametersTagged = Required<Pick<UnpackIma1TclParameters, '@type'>> & UnpackIma1TclParameters;


/**
 * Output object returned when calling `UnpackIma1TclParameters(...)`.
 *
 * @interface
 */
interface UnpackIma1TclOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output directory containing unpacked files
     */
    output_directory: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_directory The directory containing the input files to be unpacked.
 * @param output_directory The directory where the unpacked files will be stored.
 *
 * @returns Parameter dictionary
 */
function unpack_ima1_tcl_params(
    input_directory: string,
    output_directory: string,
): UnpackIma1TclParametersTagged {
    const params = {
        "@type": "freesurfer/unpack_ima1.tcl" as const,
        "input_directory": input_directory,
        "output_directory": output_directory,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function unpack_ima1_tcl_cargs(
    params: UnpackIma1TclParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("unpack_ima1.tcl");
    cargs.push((params["input_directory"] ?? null));
    cargs.push((params["output_directory"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function unpack_ima1_tcl_outputs(
    params: UnpackIma1TclParameters,
    execution: Execution,
): UnpackIma1TclOutputs {
    const ret: UnpackIma1TclOutputs = {
        root: execution.outputFile("."),
        output_directory: execution.outputFile([(params["output_directory"] ?? null)].join('')),
    };
    return ret;
}


/**
 * unpack_ima1.tcl
 *
 * A tool for unpacking images using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpackIma1TclOutputs`).
 */
function unpack_ima1_tcl_execute(
    params: UnpackIma1TclParameters,
    runner: Runner | null = null,
): UnpackIma1TclOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACK_IMA1_TCL_METADATA);
    params = execution.params(params)
    const cargs = unpack_ima1_tcl_cargs(params, execution)
    const ret = unpack_ima1_tcl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * unpack_ima1.tcl
 *
 * A tool for unpacking images using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_directory The directory containing the input files to be unpacked.
 * @param output_directory The directory where the unpacked files will be stored.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpackIma1TclOutputs`).
 */
function unpack_ima1_tcl(
    input_directory: string,
    output_directory: string,
    runner: Runner | null = null,
): UnpackIma1TclOutputs {
    const params = unpack_ima1_tcl_params(input_directory, output_directory)
    return unpack_ima1_tcl_execute(params, runner);
}


export {
      UNPACK_IMA1_TCL_METADATA,
      UnpackIma1TclOutputs,
      unpack_ima1_tcl,
      unpack_ima1_tcl_execute,
      unpack_ima1_tcl_params,
};
