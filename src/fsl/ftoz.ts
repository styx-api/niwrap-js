// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FTOZ_METADATA: Metadata = {
    id: "718b41cdb8c184566bcb56e5205ff75364795c69.boutiques",
    name: "ftoz",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FtozParameters {
    "__STYXTYPE__": "ftoz";
    "input_file": InputPathType;
    "dof1": number;
    "dof2": number;
    "output_file"?: string | null | undefined;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "ftoz": ftoz_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "ftoz": ftoz_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ftoz(...)`.
 *
 * @interface
 */
interface FtozOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the converted Z-scores
     */
    output_zscores: OutputPathType | null;
}


function ftoz_params(
    input_file: InputPathType,
    dof1: number,
    dof2: number,
    output_file: string | null = "zstats",
    help_flag: boolean = false,
): FtozParameters {
    /**
     * Build parameters.
    
     * @param input_file File containing F-statistics
     * @param dof1 Degrees of freedom 1 for F-to-Z conversion
     * @param dof2 Degrees of freedom 2 for F-to-Z conversion
     * @param output_file Output file for Z-scores
     * @param help_flag Display this help and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ftoz" as const,
        "input_file": input_file,
        "dof1": dof1,
        "dof2": dof2,
        "help_flag": help_flag,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


function ftoz_cargs(
    params: FtozParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("ftoz");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push(String((params["dof1"] ?? null)));
    cargs.push(String((params["dof2"] ?? null)));
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "-zout",
            (params["output_file"] ?? null)
        );
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function ftoz_outputs(
    params: FtozParameters,
    execution: Execution,
): FtozOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FtozOutputs = {
        root: execution.outputFile("."),
        output_zscores: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function ftoz_execute(
    params: FtozParameters,
    execution: Execution,
): FtozOutputs {
    /**
     * Convert F-statistics to Z-scores.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FtozOutputs`).
     */
    params = execution.params(params)
    const cargs = ftoz_cargs(params, execution)
    const ret = ftoz_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ftoz(
    input_file: InputPathType,
    dof1: number,
    dof2: number,
    output_file: string | null = "zstats",
    help_flag: boolean = false,
    runner: Runner | null = null,
): FtozOutputs {
    /**
     * Convert F-statistics to Z-scores.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file File containing F-statistics
     * @param dof1 Degrees of freedom 1 for F-to-Z conversion
     * @param dof2 Degrees of freedom 2 for F-to-Z conversion
     * @param output_file Output file for Z-scores
     * @param help_flag Display this help and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FtozOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FTOZ_METADATA);
    const params = ftoz_params(input_file, dof1, dof2, output_file, help_flag)
    return ftoz_execute(params, execution);
}


export {
      FTOZ_METADATA,
      FtozOutputs,
      FtozParameters,
      ftoz,
      ftoz_params,
};
