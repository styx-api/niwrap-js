// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SUMA_GLXDINO_METADATA: Metadata = {
    id: "ff8213640ad8c997c8565a4312bacb57bfcc0bcd.boutiques",
    name: "SUMA_glxdino",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SumaGlxdinoParameters {
    "@type": "afni.SUMA_glxdino";
    "verbose": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.SUMA_glxdino": suma_glxdino_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `suma_glxdino(...)`.
 *
 * @interface
 */
interface SumaGlxdinoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param verbose Switch on diagnostic messages
 *
 * @returns Parameter dictionary
 */
function suma_glxdino_params(
    verbose: boolean = false,
): SumaGlxdinoParameters {
    const params = {
        "@type": "afni.SUMA_glxdino" as const,
        "verbose": verbose,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function suma_glxdino_cargs(
    params: SumaGlxdinoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SUMA_glxdino");
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function suma_glxdino_outputs(
    params: SumaGlxdinoParameters,
    execution: Execution,
): SumaGlxdinoOutputs {
    const ret: SumaGlxdinoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * SUMA_glxdino
 *
 * A simple openGL test program using GLX. If it does not run, then SUMA certainly won't.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SumaGlxdinoOutputs`).
 */
function suma_glxdino_execute(
    params: SumaGlxdinoParameters,
    runner: Runner | null = null,
): SumaGlxdinoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SUMA_GLXDINO_METADATA);
    params = execution.params(params)
    const cargs = suma_glxdino_cargs(params, execution)
    const ret = suma_glxdino_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SUMA_glxdino
 *
 * A simple openGL test program using GLX. If it does not run, then SUMA certainly won't.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param verbose Switch on diagnostic messages
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SumaGlxdinoOutputs`).
 */
function suma_glxdino(
    verbose: boolean = false,
    runner: Runner | null = null,
): SumaGlxdinoOutputs {
    const params = suma_glxdino_params(verbose)
    return suma_glxdino_execute(params, runner);
}


export {
      SUMA_GLXDINO_METADATA,
      SumaGlxdinoOutputs,
      SumaGlxdinoParameters,
      suma_glxdino,
      suma_glxdino_execute,
      suma_glxdino_params,
};
