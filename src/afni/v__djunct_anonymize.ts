// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__DJUNCT_ANONYMIZE_METADATA: Metadata = {
    id: "b39c604a1cb220842f1bff1090f5403b2eb497f0.boutiques",
    name: "@djunct_anonymize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VDjunctAnonymizeParameters {
    "__STYXTYPE__": "@djunct_anonymize";
    "input": InputPathType;
    "add_note"?: string | null | undefined;
    "copy_to"?: InputPathType | null | undefined;
    "overwrite": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@djunct_anonymize": v__djunct_anonymize_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__djunct_anonymize(...)`.
 *
 * @interface
 */
interface VDjunctAnonymizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__djunct_anonymize_params(
    input: InputPathType,
    add_note: string | null = null,
    copy_to: InputPathType | null = null,
    overwrite: boolean = false,
): VDjunctAnonymizeParameters {
    /**
     * Build parameters.
    
     * @param input Input dataset
     * @param add_note Add a note to the history after anonymizing
     * @param copy_to Copy the input to a new file, which is then anonymized
     * @param overwrite Overwrite the existing file if using -copy_to
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@djunct_anonymize" as const,
        "input": input,
        "overwrite": overwrite,
    };
    if (add_note !== null) {
        params["add_note"] = add_note;
    }
    if (copy_to !== null) {
        params["copy_to"] = copy_to;
    }
    return params;
}


function v__djunct_anonymize_cargs(
    params: VDjunctAnonymizeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@djunct_anonymize");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    if ((params["add_note"] ?? null) !== null) {
        cargs.push(
            "-add_note",
            (params["add_note"] ?? null)
        );
    }
    if ((params["copy_to"] ?? null) !== null) {
        cargs.push(
            "-copy_to",
            execution.inputFile((params["copy_to"] ?? null))
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    return cargs;
}


function v__djunct_anonymize_outputs(
    params: VDjunctAnonymizeParameters,
    execution: Execution,
): VDjunctAnonymizeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VDjunctAnonymizeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__djunct_anonymize_execute(
    params: VDjunctAnonymizeParameters,
    execution: Execution,
): VDjunctAnonymizeOutputs {
    /**
     * Helper program to anonymize files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VDjunctAnonymizeOutputs`).
     */
    params = execution.params(params)
    const cargs = v__djunct_anonymize_cargs(params, execution)
    const ret = v__djunct_anonymize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__djunct_anonymize(
    input: InputPathType,
    add_note: string | null = null,
    copy_to: InputPathType | null = null,
    overwrite: boolean = false,
    runner: Runner | null = null,
): VDjunctAnonymizeOutputs {
    /**
     * Helper program to anonymize files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input Input dataset
     * @param add_note Add a note to the history after anonymizing
     * @param copy_to Copy the input to a new file, which is then anonymized
     * @param overwrite Overwrite the existing file if using -copy_to
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VDjunctAnonymizeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__DJUNCT_ANONYMIZE_METADATA);
    const params = v__djunct_anonymize_params(input, add_note, copy_to, overwrite)
    return v__djunct_anonymize_execute(params, execution);
}


export {
      VDjunctAnonymizeOutputs,
      VDjunctAnonymizeParameters,
      V__DJUNCT_ANONYMIZE_METADATA,
      v__djunct_anonymize,
      v__djunct_anonymize_params,
};
