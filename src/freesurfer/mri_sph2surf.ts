// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SPH2SURF_METADATA: Metadata = {
    id: "dd6b3e285073d710fdf923d6ed2c4a5936c19c32.boutiques",
    name: "mri-sph2surf",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSph2surfParameters {
    "__STYXTYPE__": "mri-sph2surf";
    "instem": string;
    "outstem": string;
    "hemi": string;
    "subject": string;
    "offset"?: number | null | undefined;
    "svitdir"?: string | null | undefined;
    "umask"?: string | null | undefined;
    "verbose": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri-sph2surf": mri_sph2surf_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri-sph2surf": mri_sph2surf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_sph2surf(...)`.
 *
 * @interface
 */
interface MriSph2surfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface data file in the form outstem-lh.w (or rh).
     */
    output_file: OutputPathType;
}


function mri_sph2surf_params(
    instem: string,
    outstem: string,
    hemi: string,
    subject: string,
    offset: number | null = 0,
    svitdir: string | null = "/usr/local/freesurfer/subjects/subject/svit",
    umask: string | null = null,
    verbose: boolean = false,
    version: boolean = false,
): MriSph2surfParameters {
    /**
     * Build parameters.
    
     * @param instem Input stem of a bfloat file. The full input file name must take the form instem-lh_000.bfloat (or rh).
     * @param outstem Output stem for the resulting file. The output file will have the name outstem-lh.w (or rh).
     * @param hemi Specifies the hemisphere for processing. Acceptable values are 'lh' or 'rh'.
     * @param subject Specifies the subject identifier for the FreeSurfer processing pipeline.
     * @param offset Zero-based plane/frame number. Default is 0.
     * @param svitdir Directory for svit. Default is '/usr/local/freesurfer/subjects/subject/svit'.
     * @param umask Specifies a new user mask.
     * @param verbose Enable verbose output.
     * @param version Show version information.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri-sph2surf" as const,
        "instem": instem,
        "outstem": outstem,
        "hemi": hemi,
        "subject": subject,
        "verbose": verbose,
        "version": version,
    };
    if (offset !== null) {
        params["offset"] = offset;
    }
    if (svitdir !== null) {
        params["svitdir"] = svitdir;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    return params;
}


function mri_sph2surf_cargs(
    params: MriSph2surfParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri-sph2surf");
    cargs.push(
        "-i",
        (params["instem"] ?? null)
    );
    cargs.push(
        "-o",
        (params["outstem"] ?? null)
    );
    cargs.push(
        "-hemi",
        (params["hemi"] ?? null)
    );
    cargs.push(
        "-s",
        (params["subject"] ?? null)
    );
    if ((params["offset"] ?? null) !== null) {
        cargs.push(
            "-offset",
            String((params["offset"] ?? null))
        );
    }
    if ((params["svitdir"] ?? null) !== null) {
        cargs.push(
            "-svitdir",
            (params["svitdir"] ?? null)
        );
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verbose");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    return cargs;
}


function mri_sph2surf_outputs(
    params: MriSph2surfParameters,
    execution: Execution,
): MriSph2surfOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriSph2surfOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["outstem"] ?? null), "-", (params["hemi"] ?? null), ".w"].join('')),
    };
    return ret;
}


function mri_sph2surf_execute(
    params: MriSph2surfParameters,
    execution: Execution,
): MriSph2surfOutputs {
    /**
     * Converts spherical functional data to surface data in the FreeSurfer processing pipeline.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriSph2surfOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_sph2surf_cargs(params, execution)
    const ret = mri_sph2surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_sph2surf(
    instem: string,
    outstem: string,
    hemi: string,
    subject: string,
    offset: number | null = 0,
    svitdir: string | null = "/usr/local/freesurfer/subjects/subject/svit",
    umask: string | null = null,
    verbose: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriSph2surfOutputs {
    /**
     * Converts spherical functional data to surface data in the FreeSurfer processing pipeline.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param instem Input stem of a bfloat file. The full input file name must take the form instem-lh_000.bfloat (or rh).
     * @param outstem Output stem for the resulting file. The output file will have the name outstem-lh.w (or rh).
     * @param hemi Specifies the hemisphere for processing. Acceptable values are 'lh' or 'rh'.
     * @param subject Specifies the subject identifier for the FreeSurfer processing pipeline.
     * @param offset Zero-based plane/frame number. Default is 0.
     * @param svitdir Directory for svit. Default is '/usr/local/freesurfer/subjects/subject/svit'.
     * @param umask Specifies a new user mask.
     * @param verbose Enable verbose output.
     * @param version Show version information.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriSph2surfOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SPH2SURF_METADATA);
    const params = mri_sph2surf_params(instem, outstem, hemi, subject, offset, svitdir, umask, verbose, version)
    return mri_sph2surf_execute(params, execution);
}


export {
      MRI_SPH2SURF_METADATA,
      MriSph2surfOutputs,
      MriSph2surfParameters,
      mri_sph2surf,
      mri_sph2surf_params,
};
