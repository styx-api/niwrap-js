// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SCALE_TO_MAP_METADATA: Metadata = {
    id: "06ba06811b98fb7d08d9ac952d96068b1af51f39.boutiques",
    name: "ScaleToMap",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ScaleToMapTraceParameters {
    "@type": "afni.ScaleToMap.trace";
    "trace": boolean;
    "TRACE": boolean;
}


interface ScaleToMapParameters {
    "@type": "afni.ScaleToMap";
    "input_file": InputPathType;
    "icol": number;
    "vcol": number;
    "cmap"?: string | null | undefined;
    "cmapfile"?: InputPathType | null | undefined;
    "cmapdb"?: InputPathType | null | undefined;
    "frf": boolean;
    "clp"?: Array<number> | null | undefined;
    "perc_clp"?: Array<number> | null | undefined;
    "apr"?: number | null | undefined;
    "anr"?: number | null | undefined;
    "interp": boolean;
    "nointerp": boolean;
    "direct": boolean;
    "msk_zero": boolean;
    "msk"?: Array<number> | null | undefined;
    "msk_col"?: Array<number> | null | undefined;
    "nomsk_col": boolean;
    "br"?: number | null | undefined;
    "help": boolean;
    "verbose": boolean;
    "showmap": boolean;
    "showdb": boolean;
    "novolreg": boolean;
    "noxform": boolean;
    "setenv"?: string | null | undefined;
    "trace"?: ScaleToMapTraceParameters | null | undefined;
    "nomall": boolean;
    "yesmall": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.ScaleToMap": scale_to_map_cargs,
        "afni.ScaleToMap.trace": scale_to_map_trace_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param trace Turns on In/Out debug and Memory tracing. It's recommended to redirect stdout to a file when using this option.
 * @param trace_ Turns on extreme tracing.
 *
 * @returns Parameter dictionary
 */
function scale_to_map_trace_params(
    trace: boolean = false,
    trace_: boolean = false,
): ScaleToMapTraceParameters {
    const params = {
        "@type": "afni.ScaleToMap.trace" as const,
        "trace": trace,
        "TRACE": trace_,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function scale_to_map_trace_cargs(
    params: ScaleToMapTraceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["trace"] ?? null)) {
        cargs.push("-trace");
    }
    if ((params["TRACE"] ?? null)) {
        cargs.push("-TRACE");
    }
    return cargs;
}


/**
 * Output object returned when calling `scale_to_map(...)`.
 *
 * @interface
 */
interface ScaleToMapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input file in 1D formatted ascii containing node values
 * @param icol Index of node index column (-1 if node index is implicit)
 * @param vcol Index of node value column
 * @param cmap Choose one of the standard colormaps available with SUMA
 * @param cmapfile Read color map from a Mapfile
 * @param cmapdb Read color maps from an AFNI .pal file
 * @param frf Indicate that the first row in the file is the first color
 * @param clp Clip values in IntVect to specified range
 * @param perc_clp Percentile clip values in IntVect to specified range
 * @param apr Clip values in IntVect to [0 range]
 * @param anr Clip values in IntVect to [-range range]
 * @param interp Use color interpolation between colors in colormap (default)
 * @param nointerp Turn off color interpolation within the colormap
 * @param direct Directly map values to index of color in colormap
 * @param msk_zero Mask values that are 0
 * @param msk Mask values in vcol between specified range
 * @param msk_col Set color of masked voxels
 * @param nomsk_col Do not output nodes that got masked
 * @param br Apply a brightness factor to colormap and mask color
 * @param help Display help message
 * @param verbose Verbose mode
 * @param showmap Print colormap to screen and quit
 * @param showdb Print colors and colormaps of AFNI along with any loaded from Palfile
 * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume
 * @param noxform Same as -novolreg
 * @param setenv Set environment variable ENVname to ENVvalue. Quotes are necessary
 * @param trace Turns on In/Out debug and Memory tracing. It's recommended to redirect stdout to a file when using this option.
 * @param nomall Turn off memory tracing
 * @param yesmall Turn on memory tracing (default)
 *
 * @returns Parameter dictionary
 */
function scale_to_map_params(
    input_file: InputPathType,
    icol: number,
    vcol: number,
    cmap: string | null = null,
    cmapfile: InputPathType | null = null,
    cmapdb: InputPathType | null = null,
    frf: boolean = false,
    clp: Array<number> | null = null,
    perc_clp: Array<number> | null = null,
    apr: number | null = null,
    anr: number | null = null,
    interp: boolean = false,
    nointerp: boolean = false,
    direct: boolean = false,
    msk_zero: boolean = false,
    msk: Array<number> | null = null,
    msk_col: Array<number> | null = null,
    nomsk_col: boolean = false,
    br: number | null = null,
    help: boolean = false,
    verbose: boolean = false,
    showmap: boolean = false,
    showdb: boolean = false,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: ScaleToMapTraceParameters | null = null,
    nomall: boolean = false,
    yesmall: boolean = false,
): ScaleToMapParameters {
    const params = {
        "@type": "afni.ScaleToMap" as const,
        "input_file": input_file,
        "icol": icol,
        "vcol": vcol,
        "frf": frf,
        "interp": interp,
        "nointerp": nointerp,
        "direct": direct,
        "msk_zero": msk_zero,
        "nomsk_col": nomsk_col,
        "help": help,
        "verbose": verbose,
        "showmap": showmap,
        "showdb": showdb,
        "novolreg": novolreg,
        "noxform": noxform,
        "nomall": nomall,
        "yesmall": yesmall,
    };
    if (cmap !== null) {
        params["cmap"] = cmap;
    }
    if (cmapfile !== null) {
        params["cmapfile"] = cmapfile;
    }
    if (cmapdb !== null) {
        params["cmapdb"] = cmapdb;
    }
    if (clp !== null) {
        params["clp"] = clp;
    }
    if (perc_clp !== null) {
        params["perc_clp"] = perc_clp;
    }
    if (apr !== null) {
        params["apr"] = apr;
    }
    if (anr !== null) {
        params["anr"] = anr;
    }
    if (msk !== null) {
        params["msk"] = msk;
    }
    if (msk_col !== null) {
        params["msk_col"] = msk_col;
    }
    if (br !== null) {
        params["br"] = br;
    }
    if (setenv !== null) {
        params["setenv"] = setenv;
    }
    if (trace !== null) {
        params["trace"] = trace;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function scale_to_map_cargs(
    params: ScaleToMapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ScaleToMap");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push(String((params["icol"] ?? null)));
    cargs.push(String((params["vcol"] ?? null)));
    if ((params["cmap"] ?? null) !== null) {
        cargs.push(
            "-cmap",
            (params["cmap"] ?? null)
        );
    }
    if ((params["cmapfile"] ?? null) !== null) {
        cargs.push(
            "-cmapfile",
            execution.inputFile((params["cmapfile"] ?? null))
        );
    }
    if ((params["cmapdb"] ?? null) !== null) {
        cargs.push(
            "-cmapdb",
            execution.inputFile((params["cmapdb"] ?? null))
        );
    }
    if ((params["frf"] ?? null)) {
        cargs.push("-frf");
    }
    if ((params["clp"] ?? null) !== null) {
        cargs.push(
            "-clp",
            ...(params["clp"] ?? null).map(String)
        );
    }
    if ((params["perc_clp"] ?? null) !== null) {
        cargs.push(
            "-perc_clp",
            ...(params["perc_clp"] ?? null).map(String)
        );
    }
    if ((params["apr"] ?? null) !== null) {
        cargs.push(
            "-apr",
            String((params["apr"] ?? null))
        );
    }
    if ((params["anr"] ?? null) !== null) {
        cargs.push(
            "-anr",
            String((params["anr"] ?? null))
        );
    }
    if ((params["interp"] ?? null)) {
        cargs.push("-interp");
    }
    if ((params["nointerp"] ?? null)) {
        cargs.push("-nointerp");
    }
    if ((params["direct"] ?? null)) {
        cargs.push("-direct");
    }
    if ((params["msk_zero"] ?? null)) {
        cargs.push("-msk_zero");
    }
    if ((params["msk"] ?? null) !== null) {
        cargs.push(
            "-msk",
            ...(params["msk"] ?? null).map(String)
        );
    }
    if ((params["msk_col"] ?? null) !== null) {
        cargs.push(
            "-msk_col",
            ...(params["msk_col"] ?? null).map(String)
        );
    }
    if ((params["nomsk_col"] ?? null)) {
        cargs.push("-nomsk_col");
    }
    if ((params["br"] ?? null) !== null) {
        cargs.push(
            "-br",
            String((params["br"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["showmap"] ?? null)) {
        cargs.push("-showmap");
    }
    if ((params["showdb"] ?? null)) {
        cargs.push("-showdb");
    }
    if ((params["novolreg"] ?? null)) {
        cargs.push("-novolreg");
    }
    if ((params["noxform"] ?? null)) {
        cargs.push("-noxform");
    }
    if ((params["setenv"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["setenv"] ?? null)
        );
    }
    if ((params["trace"] ?? null) !== null) {
        cargs.push(...dynCargs((params["trace"] ?? null)["@type"])((params["trace"] ?? null), execution));
    }
    if ((params["nomall"] ?? null)) {
        cargs.push("-nomall");
    }
    if ((params["yesmall"] ?? null)) {
        cargs.push("-yesmall");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function scale_to_map_outputs(
    params: ScaleToMapParameters,
    execution: Execution,
): ScaleToMapOutputs {
    const ret: ScaleToMapOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * ScaleToMap
 *
 * Tool to scale values to a color map.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ScaleToMapOutputs`).
 */
function scale_to_map_execute(
    params: ScaleToMapParameters,
    runner: Runner | null = null,
): ScaleToMapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SCALE_TO_MAP_METADATA);
    params = execution.params(params)
    const cargs = scale_to_map_cargs(params, execution)
    const ret = scale_to_map_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ScaleToMap
 *
 * Tool to scale values to a color map.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Input file in 1D formatted ascii containing node values
 * @param icol Index of node index column (-1 if node index is implicit)
 * @param vcol Index of node value column
 * @param cmap Choose one of the standard colormaps available with SUMA
 * @param cmapfile Read color map from a Mapfile
 * @param cmapdb Read color maps from an AFNI .pal file
 * @param frf Indicate that the first row in the file is the first color
 * @param clp Clip values in IntVect to specified range
 * @param perc_clp Percentile clip values in IntVect to specified range
 * @param apr Clip values in IntVect to [0 range]
 * @param anr Clip values in IntVect to [-range range]
 * @param interp Use color interpolation between colors in colormap (default)
 * @param nointerp Turn off color interpolation within the colormap
 * @param direct Directly map values to index of color in colormap
 * @param msk_zero Mask values that are 0
 * @param msk Mask values in vcol between specified range
 * @param msk_col Set color of masked voxels
 * @param nomsk_col Do not output nodes that got masked
 * @param br Apply a brightness factor to colormap and mask color
 * @param help Display help message
 * @param verbose Verbose mode
 * @param showmap Print colormap to screen and quit
 * @param showdb Print colors and colormaps of AFNI along with any loaded from Palfile
 * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume
 * @param noxform Same as -novolreg
 * @param setenv Set environment variable ENVname to ENVvalue. Quotes are necessary
 * @param trace Turns on In/Out debug and Memory tracing. It's recommended to redirect stdout to a file when using this option.
 * @param nomall Turn off memory tracing
 * @param yesmall Turn on memory tracing (default)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ScaleToMapOutputs`).
 */
function scale_to_map(
    input_file: InputPathType,
    icol: number,
    vcol: number,
    cmap: string | null = null,
    cmapfile: InputPathType | null = null,
    cmapdb: InputPathType | null = null,
    frf: boolean = false,
    clp: Array<number> | null = null,
    perc_clp: Array<number> | null = null,
    apr: number | null = null,
    anr: number | null = null,
    interp: boolean = false,
    nointerp: boolean = false,
    direct: boolean = false,
    msk_zero: boolean = false,
    msk: Array<number> | null = null,
    msk_col: Array<number> | null = null,
    nomsk_col: boolean = false,
    br: number | null = null,
    help: boolean = false,
    verbose: boolean = false,
    showmap: boolean = false,
    showdb: boolean = false,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: ScaleToMapTraceParameters | null = null,
    nomall: boolean = false,
    yesmall: boolean = false,
    runner: Runner | null = null,
): ScaleToMapOutputs {
    const params = scale_to_map_params(input_file, icol, vcol, cmap, cmapfile, cmapdb, frf, clp, perc_clp, apr, anr, interp, nointerp, direct, msk_zero, msk, msk_col, nomsk_col, br, help, verbose, showmap, showdb, novolreg, noxform, setenv, trace, nomall, yesmall)
    return scale_to_map_execute(params, runner);
}


export {
      SCALE_TO_MAP_METADATA,
      ScaleToMapOutputs,
      ScaleToMapParameters,
      ScaleToMapTraceParameters,
      scale_to_map,
      scale_to_map_execute,
      scale_to_map_params,
      scale_to_map_trace_params,
};
