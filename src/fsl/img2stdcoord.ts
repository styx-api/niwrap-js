// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMG2STDCOORD_METADATA: Metadata = {
    id: "1d7099e68b2ebab0fcf6f19fecfa832c5ec7908f.boutiques",
    name: "img2stdcoord",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Img2stdcoordParameters {
    "__STYXTYPE__": "img2stdcoord";
    "coordinate_file": string;
    "input_image": InputPathType;
    "standard_image"?: InputPathType | null | undefined;
    "affine_transform"?: InputPathType | null | undefined;
    "warp_field"?: InputPathType | null | undefined;
    "prewarp_affine_transform"?: InputPathType | null | undefined;
    "voxel_flag": boolean;
    "mm_flag": boolean;
    "verbose_flag_1": boolean;
    "verbose_flag_2": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "img2stdcoord": img2stdcoord_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `img2stdcoord(...)`.
 *
 * @interface
 */
interface Img2stdcoordOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function img2stdcoord_params(
    coordinate_file: string,
    input_image: InputPathType,
    standard_image: InputPathType | null = null,
    affine_transform: InputPathType | null = null,
    warp_field: InputPathType | null = null,
    prewarp_affine_transform: InputPathType | null = null,
    voxel_flag: boolean = false,
    mm_flag: boolean = false,
    verbose_flag_1: boolean = false,
    verbose_flag_2: boolean = false,
    help_flag: boolean = false,
): Img2stdcoordParameters {
    /**
     * Build parameters.
    
     * @param coordinate_file Filename containing coordinates. If '-' is used, coordinates are read from standard input.
     * @param input_image Filename of input image.
     * @param standard_image Filename of standard image.
     * @param affine_transform Filename of affine transform (e.g., example_func2standard.mat).
     * @param warp_field Filename of warp field (e.g., highres2standard_warp.nii.gz).
     * @param prewarp_affine_transform Filename of pre-warp affine transform (e.g., example_func2highres.mat). Default is identity.
     * @param voxel_flag Input coordinates in voxels (default).
     * @param mm_flag Input coordinates in mm.
     * @param verbose_flag_1 Verbose output.
     * @param verbose_flag_2 More verbose output.
     * @param help_flag Display help message.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "img2stdcoord" as const,
        "coordinate_file": coordinate_file,
        "input_image": input_image,
        "voxel_flag": voxel_flag,
        "mm_flag": mm_flag,
        "verbose_flag_1": verbose_flag_1,
        "verbose_flag_2": verbose_flag_2,
        "help_flag": help_flag,
    };
    if (standard_image !== null) {
        params["standard_image"] = standard_image;
    }
    if (affine_transform !== null) {
        params["affine_transform"] = affine_transform;
    }
    if (warp_field !== null) {
        params["warp_field"] = warp_field;
    }
    if (prewarp_affine_transform !== null) {
        params["prewarp_affine_transform"] = prewarp_affine_transform;
    }
    return params;
}


function img2stdcoord_cargs(
    params: Img2stdcoordParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("img2stdcoord");
    cargs.push((params["coordinate_file"] ?? null));
    cargs.push(
        "-img",
        execution.inputFile((params["input_image"] ?? null))
    );
    if ((params["standard_image"] ?? null) !== null) {
        cargs.push(
            "-std",
            execution.inputFile((params["standard_image"] ?? null))
        );
    }
    if ((params["affine_transform"] ?? null) !== null) {
        cargs.push(
            "-xfm",
            execution.inputFile((params["affine_transform"] ?? null))
        );
    }
    if ((params["warp_field"] ?? null) !== null) {
        cargs.push(
            "-warp",
            execution.inputFile((params["warp_field"] ?? null))
        );
    }
    if ((params["prewarp_affine_transform"] ?? null) !== null) {
        cargs.push(
            "-premat",
            execution.inputFile((params["prewarp_affine_transform"] ?? null))
        );
    }
    if ((params["voxel_flag"] ?? null)) {
        cargs.push("-vox");
    }
    if ((params["mm_flag"] ?? null)) {
        cargs.push("-mm");
    }
    if ((params["verbose_flag_1"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["verbose_flag_2"] ?? null)) {
        cargs.push("-verbose");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function img2stdcoord_outputs(
    params: Img2stdcoordParameters,
    execution: Execution,
): Img2stdcoordOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Img2stdcoordOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function img2stdcoord_execute(
    params: Img2stdcoordParameters,
    execution: Execution,
): Img2stdcoordOutputs {
    /**
     * Transforms image coordinates using standard space transformations.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Img2stdcoordOutputs`).
     */
    params = execution.params(params)
    const cargs = img2stdcoord_cargs(params, execution)
    const ret = img2stdcoord_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function img2stdcoord(
    coordinate_file: string,
    input_image: InputPathType,
    standard_image: InputPathType | null = null,
    affine_transform: InputPathType | null = null,
    warp_field: InputPathType | null = null,
    prewarp_affine_transform: InputPathType | null = null,
    voxel_flag: boolean = false,
    mm_flag: boolean = false,
    verbose_flag_1: boolean = false,
    verbose_flag_2: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): Img2stdcoordOutputs {
    /**
     * Transforms image coordinates using standard space transformations.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param coordinate_file Filename containing coordinates. If '-' is used, coordinates are read from standard input.
     * @param input_image Filename of input image.
     * @param standard_image Filename of standard image.
     * @param affine_transform Filename of affine transform (e.g., example_func2standard.mat).
     * @param warp_field Filename of warp field (e.g., highres2standard_warp.nii.gz).
     * @param prewarp_affine_transform Filename of pre-warp affine transform (e.g., example_func2highres.mat). Default is identity.
     * @param voxel_flag Input coordinates in voxels (default).
     * @param mm_flag Input coordinates in mm.
     * @param verbose_flag_1 Verbose output.
     * @param verbose_flag_2 More verbose output.
     * @param help_flag Display help message.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Img2stdcoordOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMG2STDCOORD_METADATA);
    const params = img2stdcoord_params(coordinate_file, input_image, standard_image, affine_transform, warp_field, prewarp_affine_transform, voxel_flag, mm_flag, verbose_flag_1, verbose_flag_2, help_flag)
    return img2stdcoord_execute(params, execution);
}


export {
      IMG2STDCOORD_METADATA,
      Img2stdcoordOutputs,
      Img2stdcoordParameters,
      img2stdcoord,
      img2stdcoord_params,
};
