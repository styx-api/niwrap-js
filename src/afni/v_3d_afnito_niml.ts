// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_AFNITO_NIML_METADATA: Metadata = {
    id: "95aceaf6a84ca94fe976a820712d66c290312cfe.boutiques",
    name: "3dAFNItoNIML",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAfnitoNimlParameters {
    "@type": "afni.3dAFNItoNIML";
    "dset": InputPathType;
    "data": boolean;
    "ascii": boolean;
    "tcp"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dAFNItoNIML": v_3d_afnito_niml_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_afnito_niml(...)`.
 *
 * @interface
 */
interface V3dAfnitoNimlOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dset AFNI dataset
 * @param data Also put the data into the output (will be huge).
 * @param ascii Format in ASCII, not binary (even huger).
 * @param tcp Instead of stdout, send the dataset to a socket. Implies '-data' as well.
 *
 * @returns Parameter dictionary
 */
function v_3d_afnito_niml_params(
    dset: InputPathType,
    data: boolean = false,
    ascii: boolean = false,
    tcp: string | null = null,
): V3dAfnitoNimlParameters {
    const params = {
        "@type": "afni.3dAFNItoNIML" as const,
        "dset": dset,
        "data": data,
        "ascii": ascii,
    };
    if (tcp !== null) {
        params["tcp"] = tcp;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_afnito_niml_cargs(
    params: V3dAfnitoNimlParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dAFNItoNIML");
    cargs.push(execution.inputFile((params["dset"] ?? null)));
    if ((params["data"] ?? null)) {
        cargs.push("-data");
    }
    if ((params["ascii"] ?? null)) {
        cargs.push("-ascii");
    }
    if ((params["tcp"] ?? null) !== null) {
        cargs.push(
            "-tcp",
            (params["tcp"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_afnito_niml_outputs(
    params: V3dAfnitoNimlParameters,
    execution: Execution,
): V3dAfnitoNimlOutputs {
    const ret: V3dAfnitoNimlOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Dumps AFNI dataset header information to stdout in NIML format. Mostly for debugging and testing purposes!.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dAfnitoNimlOutputs`).
 */
function v_3d_afnito_niml_execute(
    params: V3dAfnitoNimlParameters,
    execution: Execution,
): V3dAfnitoNimlOutputs {
    params = execution.params(params)
    const cargs = v_3d_afnito_niml_cargs(params, execution)
    const ret = v_3d_afnito_niml_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Dumps AFNI dataset header information to stdout in NIML format. Mostly for debugging and testing purposes!.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dset AFNI dataset
 * @param data Also put the data into the output (will be huge).
 * @param ascii Format in ASCII, not binary (even huger).
 * @param tcp Instead of stdout, send the dataset to a socket. Implies '-data' as well.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAfnitoNimlOutputs`).
 */
function v_3d_afnito_niml(
    dset: InputPathType,
    data: boolean = false,
    ascii: boolean = false,
    tcp: string | null = null,
    runner: Runner | null = null,
): V3dAfnitoNimlOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_AFNITO_NIML_METADATA);
    const params = v_3d_afnito_niml_params(dset, data, ascii, tcp)
    return v_3d_afnito_niml_execute(params, execution);
}


export {
      V3dAfnitoNimlOutputs,
      V3dAfnitoNimlParameters,
      V_3D_AFNITO_NIML_METADATA,
      v_3d_afnito_niml,
      v_3d_afnito_niml_cargs,
      v_3d_afnito_niml_execute,
      v_3d_afnito_niml_outputs,
      v_3d_afnito_niml_params,
};
