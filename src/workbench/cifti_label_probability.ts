// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_LABEL_PROBABILITY_METADATA: Metadata = {
    id: "f07d6d6741808c71835239e6130a80db4872e584.boutiques",
    name: "cifti-label-probability",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiLabelProbabilityParameters {
    "@type"?: "workbench/cifti-label-probability";
    "label_maps": InputPathType;
    "probability_dscalar_out": string;
    "opt_exclude_unlabeled": boolean;
}
type CiftiLabelProbabilityParametersTagged = Required<Pick<CiftiLabelProbabilityParameters, '@type'>> & CiftiLabelProbabilityParameters;


/**
 * Output object returned when calling `CiftiLabelProbabilityParameters(...)`.
 *
 * @interface
 */
interface CiftiLabelProbabilityOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the relative frequencies of each label at each vertex/voxel
     */
    probability_dscalar_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label_maps cifti dlabel file containing individual label maps from many subjects
 * @param probability_dscalar_out the relative frequencies of each label at each vertex/voxel
 * @param opt_exclude_unlabeled don't make a probability map of the unlabeled key
 *
 * @returns Parameter dictionary
 */
function cifti_label_probability_params(
    label_maps: InputPathType,
    probability_dscalar_out: string,
    opt_exclude_unlabeled: boolean = false,
): CiftiLabelProbabilityParametersTagged {
    const params = {
        "@type": "workbench/cifti-label-probability" as const,
        "label_maps": label_maps,
        "probability_dscalar_out": probability_dscalar_out,
        "opt_exclude_unlabeled": opt_exclude_unlabeled,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_label_probability_cargs(
    params: CiftiLabelProbabilityParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-label-probability");
    cargs.push(execution.inputFile((params["label_maps"] ?? null)));
    cargs.push((params["probability_dscalar_out"] ?? null));
    if ((params["opt_exclude_unlabeled"] ?? false)) {
        cargs.push("-exclude-unlabeled");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_label_probability_outputs(
    params: CiftiLabelProbabilityParameters,
    execution: Execution,
): CiftiLabelProbabilityOutputs {
    const ret: CiftiLabelProbabilityOutputs = {
        root: execution.outputFile("."),
        probability_dscalar_out: execution.outputFile([(params["probability_dscalar_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-label-probability
 *
 * Find frequency of cifti labels.
 *
 * This command outputs a set of soft ROIs, one for each label in the input, where the value is how many of the input maps had that label at that vertex/voxel, divided by the number of input maps.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelProbabilityOutputs`).
 */
function cifti_label_probability_execute(
    params: CiftiLabelProbabilityParameters,
    runner: Runner | null = null,
): CiftiLabelProbabilityOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_LABEL_PROBABILITY_METADATA);
    params = execution.params(params)
    const cargs = cifti_label_probability_cargs(params, execution)
    const ret = cifti_label_probability_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-label-probability
 *
 * Find frequency of cifti labels.
 *
 * This command outputs a set of soft ROIs, one for each label in the input, where the value is how many of the input maps had that label at that vertex/voxel, divided by the number of input maps.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param label_maps cifti dlabel file containing individual label maps from many subjects
 * @param probability_dscalar_out the relative frequencies of each label at each vertex/voxel
 * @param opt_exclude_unlabeled don't make a probability map of the unlabeled key
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelProbabilityOutputs`).
 */
function cifti_label_probability(
    label_maps: InputPathType,
    probability_dscalar_out: string,
    opt_exclude_unlabeled: boolean = false,
    runner: Runner | null = null,
): CiftiLabelProbabilityOutputs {
    const params = cifti_label_probability_params(label_maps, probability_dscalar_out, opt_exclude_unlabeled)
    return cifti_label_probability_execute(params, runner);
}


export {
      CIFTI_LABEL_PROBABILITY_METADATA,
      CiftiLabelProbabilityOutputs,
      cifti_label_probability,
      cifti_label_probability_execute,
      cifti_label_probability_params,
};
