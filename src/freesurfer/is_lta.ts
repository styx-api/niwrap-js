// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IS_LTA_METADATA: Metadata = {
    id: "5b9882c3525933a7e40833c3e89a1444ba13a395.boutiques",
    name: "IsLTA",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface IsLtaParameters {
    "@type"?: "freesurfer/IsLTA";
    "candidate_file": InputPathType;
    "outfile": string;
}
type IsLtaParametersTagged = Required<Pick<IsLtaParameters, '@type'>> & IsLtaParameters;


/**
 * Output object returned when calling `IsLtaParameters(...)`.
 *
 * @interface
 */
interface IsLtaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing 1 if the candidate file is an LTA, otherwise 0
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param candidate_file Candidate file to check if it is an LTA
 * @param outfile Output file to write the result
 *
 * @returns Parameter dictionary
 */
function is_lta_params(
    candidate_file: InputPathType,
    outfile: string,
): IsLtaParametersTagged {
    const params = {
        "@type": "freesurfer/IsLTA" as const,
        "candidate_file": candidate_file,
        "outfile": outfile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function is_lta_cargs(
    params: IsLtaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("IsLTA");
    cargs.push(
        "--r",
        execution.inputFile((params["candidate_file"] ?? null))
    );
    cargs.push(
        "--o",
        (params["outfile"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function is_lta_outputs(
    params: IsLtaParameters,
    execution: Execution,
): IsLtaOutputs {
    const ret: IsLtaOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * IsLTA
 *
 * Determines if a given file is an LTA (Linear Transform Array) file. Outputs 1 if true, otherwise outputs 0.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `IsLtaOutputs`).
 */
function is_lta_execute(
    params: IsLtaParameters,
    runner: Runner | null = null,
): IsLtaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IS_LTA_METADATA);
    params = execution.params(params)
    const cargs = is_lta_cargs(params, execution)
    const ret = is_lta_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * IsLTA
 *
 * Determines if a given file is an LTA (Linear Transform Array) file. Outputs 1 if true, otherwise outputs 0.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param candidate_file Candidate file to check if it is an LTA
 * @param outfile Output file to write the result
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `IsLtaOutputs`).
 */
function is_lta(
    candidate_file: InputPathType,
    outfile: string,
    runner: Runner | null = null,
): IsLtaOutputs {
    const params = is_lta_params(candidate_file, outfile)
    return is_lta_execute(params, runner);
}


export {
      IS_LTA_METADATA,
      IsLtaOutputs,
      is_lta,
      is_lta_execute,
      is_lta_params,
};
