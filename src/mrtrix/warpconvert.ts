// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WARPCONVERT_METADATA: Metadata = {
    id: "32e6c5d3c78c56a0fcca0c5a864eb34e71feeb43.boutiques",
    name: "warpconvert",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface WarpconvertConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface WarpconvertParameters {
    "__STYXTYPE__": "warpconvert";
    "template"?: InputPathType | null | undefined;
    "midway_space": boolean;
    "from"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<WarpconvertConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "in": InputPathType;
    "type": string;
    "out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "warpconvert": warpconvert_cargs,
        "config": warpconvert_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "warpconvert": warpconvert_outputs,
    };
    return outputsFuncs[t];
}


function warpconvert_config_params(
    key: string,
    value: string,
): WarpconvertConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function warpconvert_config_cargs(
    params: WarpconvertConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `warpconvert(...)`.
 *
 * @interface
 */
interface WarpconvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output warp image.
     */
    out: OutputPathType;
}


function warpconvert_params(
    in_: InputPathType,
    type_: string,
    out: string,
    template: InputPathType | null = null,
    midway_space: boolean = false,
    from_: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<WarpconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): WarpconvertParameters {
    /**
     * Build parameters.
    
     * @param in_ the input warp image.
     * @param type_ the conversion type required. Valid choices are: deformation2displacement, displacement2deformation, warpfull2deformation, warpfull2displacement
     * @param out the output warp image.
     * @param template define a template image when converting a warpfull file (which is defined on a grid in the midway space between image 1 & 2). For example to generate the deformation field that maps image1 to image2, then supply image2 as the template image
     * @param midway_space to be used only with warpfull2deformation and warpfull2displacement conversion types. The output will only contain the non-linear warp to map an input image to the midway space (defined by the warpfull grid). If a linear transform exists in the warpfull file header then it will be composed and included in the output.
     * @param from_ to be used only with warpfull2deformation and warpfull2displacement conversion types. Used to define the direction of the desired output field.Use -from 1 to obtain the image1->image2 field and from 2 for image2->image1. Can be used in combination with the -midway_space option to produce a field that only maps to midway space.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "warpconvert" as const,
        "midway_space": midway_space,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "in": in_,
        "type": type_,
        "out": out,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (from_ !== null) {
        params["from"] = from_;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function warpconvert_cargs(
    params: WarpconvertParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("warpconvert");
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["midway_space"] ?? null)) {
        cargs.push("-midway_space");
    }
    if ((params["from"] ?? null) !== null) {
        cargs.push(
            "-from",
            String((params["from"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["in"] ?? null)));
    cargs.push((params["type"] ?? null));
    cargs.push((params["out"] ?? null));
    return cargs;
}


function warpconvert_outputs(
    params: WarpconvertParameters,
    execution: Execution,
): WarpconvertOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: WarpconvertOutputs = {
        root: execution.outputFile("."),
        out: execution.outputFile([(params["out"] ?? null)].join('')),
    };
    return ret;
}


function warpconvert_execute(
    params: WarpconvertParameters,
    execution: Execution,
): WarpconvertOutputs {
    /**
     * Convert between different representations of a non-linear warp.
     * 
     * A deformation field is defined as an image where each voxel defines the corresponding position in the other image (in scanner space coordinates). A displacement field stores the displacements (in mm) to the other image from the each voxel's position (in scanner space). The warpfull file is the 5D format output from mrregister -nl_warp_full, which contains linear transforms, warps and their inverses that map each image to a midway space.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `WarpconvertOutputs`).
     */
    params = execution.params(params)
    const cargs = warpconvert_cargs(params, execution)
    const ret = warpconvert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function warpconvert(
    in_: InputPathType,
    type_: string,
    out: string,
    template: InputPathType | null = null,
    midway_space: boolean = false,
    from_: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<WarpconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): WarpconvertOutputs {
    /**
     * Convert between different representations of a non-linear warp.
     * 
     * A deformation field is defined as an image where each voxel defines the corresponding position in the other image (in scanner space coordinates). A displacement field stores the displacements (in mm) to the other image from the each voxel's position (in scanner space). The warpfull file is the 5D format output from mrregister -nl_warp_full, which contains linear transforms, warps and their inverses that map each image to a midway space.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param in_ the input warp image.
     * @param type_ the conversion type required. Valid choices are: deformation2displacement, displacement2deformation, warpfull2deformation, warpfull2displacement
     * @param out the output warp image.
     * @param template define a template image when converting a warpfull file (which is defined on a grid in the midway space between image 1 & 2). For example to generate the deformation field that maps image1 to image2, then supply image2 as the template image
     * @param midway_space to be used only with warpfull2deformation and warpfull2displacement conversion types. The output will only contain the non-linear warp to map an input image to the midway space (defined by the warpfull grid). If a linear transform exists in the warpfull file header then it will be composed and included in the output.
     * @param from_ to be used only with warpfull2deformation and warpfull2displacement conversion types. Used to define the direction of the desired output field.Use -from 1 to obtain the image1->image2 field and from 2 for image2->image1. Can be used in combination with the -midway_space option to produce a field that only maps to midway space.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `WarpconvertOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WARPCONVERT_METADATA);
    const params = warpconvert_params(in_, type_, out, template, midway_space, from_, info, quiet, debug, force, nthreads, config, help, version)
    return warpconvert_execute(params, execution);
}


export {
      WARPCONVERT_METADATA,
      WarpconvertConfigParameters,
      WarpconvertOutputs,
      WarpconvertParameters,
      warpconvert,
      warpconvert_config_params,
      warpconvert_params,
};
