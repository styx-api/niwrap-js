// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSDCMDECOMPRESS_METADATA: Metadata = {
    id: "30d6a93931c489cde2efd8a6696b27e23a3c1869.boutiques",
    name: "fsdcmdecompress",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsdcmdecompressParameters {
    "@type": "freesurfer.fsdcmdecompress";
    "indcmfile": InputPathType;
    "outdcmfile": string;
    "dcmtk": boolean;
    "jpeg": boolean;
    "rle": boolean;
    "gdcm": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fsdcmdecompress": fsdcmdecompress_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.fsdcmdecompress": fsdcmdecompress_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsdcmdecompress(...)`.
 *
 * @interface
 */
interface FsdcmdecompressOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The decompressed DICOM file
     */
    out_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param indcmfile Input DICOM file to decompress
 * @param outdcmfile Output decompressed DICOM file
 * @param dcmtk Use DCMTK for decompression (either dcmdrle.fs or dcmdjpeg.fs)
 * @param jpeg DICOM is JPEG compressed (ignored without --dcmtk)
 * @param rle DICOM is RLE compressed (ignored without --dcmtk)
 * @param gdcm Use GDCM for decompression (default)
 *
 * @returns Parameter dictionary
 */
function fsdcmdecompress_params(
    indcmfile: InputPathType,
    outdcmfile: string,
    dcmtk: boolean = false,
    jpeg: boolean = false,
    rle: boolean = false,
    gdcm: boolean = false,
): FsdcmdecompressParameters {
    const params = {
        "@type": "freesurfer.fsdcmdecompress" as const,
        "indcmfile": indcmfile,
        "outdcmfile": outdcmfile,
        "dcmtk": dcmtk,
        "jpeg": jpeg,
        "rle": rle,
        "gdcm": gdcm,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fsdcmdecompress_cargs(
    params: FsdcmdecompressParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsdcmdecompress");
    cargs.push(
        "--i",
        execution.inputFile((params["indcmfile"] ?? null))
    );
    cargs.push(
        "--o",
        (params["outdcmfile"] ?? null)
    );
    if ((params["dcmtk"] ?? null)) {
        cargs.push("--dcmtk");
    }
    if ((params["jpeg"] ?? null)) {
        cargs.push("--jpeg");
    }
    if ((params["rle"] ?? null)) {
        cargs.push("--rle");
    }
    if ((params["gdcm"] ?? null)) {
        cargs.push("--gdcm");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fsdcmdecompress_outputs(
    params: FsdcmdecompressParameters,
    execution: Execution,
): FsdcmdecompressOutputs {
    const ret: FsdcmdecompressOutputs = {
        root: execution.outputFile("."),
        out_file: execution.outputFile([(params["outdcmfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * A tool for decompressing DICOM files using GDCM or DCMTK.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FsdcmdecompressOutputs`).
 */
function fsdcmdecompress_execute(
    params: FsdcmdecompressParameters,
    execution: Execution,
): FsdcmdecompressOutputs {
    params = execution.params(params)
    const cargs = fsdcmdecompress_cargs(params, execution)
    const ret = fsdcmdecompress_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for decompressing DICOM files using GDCM or DCMTK.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param indcmfile Input DICOM file to decompress
 * @param outdcmfile Output decompressed DICOM file
 * @param dcmtk Use DCMTK for decompression (either dcmdrle.fs or dcmdjpeg.fs)
 * @param jpeg DICOM is JPEG compressed (ignored without --dcmtk)
 * @param rle DICOM is RLE compressed (ignored without --dcmtk)
 * @param gdcm Use GDCM for decompression (default)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsdcmdecompressOutputs`).
 */
function fsdcmdecompress(
    indcmfile: InputPathType,
    outdcmfile: string,
    dcmtk: boolean = false,
    jpeg: boolean = false,
    rle: boolean = false,
    gdcm: boolean = false,
    runner: Runner | null = null,
): FsdcmdecompressOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSDCMDECOMPRESS_METADATA);
    const params = fsdcmdecompress_params(indcmfile, outdcmfile, dcmtk, jpeg, rle, gdcm)
    return fsdcmdecompress_execute(params, execution);
}


export {
      FSDCMDECOMPRESS_METADATA,
      FsdcmdecompressOutputs,
      FsdcmdecompressParameters,
      fsdcmdecompress,
      fsdcmdecompress_cargs,
      fsdcmdecompress_execute,
      fsdcmdecompress_outputs,
      fsdcmdecompress_params,
};
