// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_VOX2VOX_METADATA: Metadata = {
    id: "a9c7d072c67909100e5d0cc0f852b4f198351ffb.boutiques",
    name: "dmri_vox2vox",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriVox2voxParameters {
    "__STYXTYPE__": "dmri_vox2vox";
    "input_files": Array<InputPathType>;
    "input_directory"?: string | null | undefined;
    "output_files": Array<string>;
    "output_directory"?: string | null | undefined;
    "input_reference": InputPathType;
    "output_reference": InputPathType;
    "affine_registration": InputPathType;
    "nonlinear_registration": InputPathType;
    "inverse_nonlinear": boolean;
    "debug": boolean;
    "check_options": boolean;
    "help": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dmri_vox2vox": dmri_vox2vox_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_vox2vox(...)`.
 *
 * @interface
 */
interface DmriVox2voxOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dmri_vox2vox_params(
    input_files: Array<InputPathType>,
    output_files: Array<string>,
    input_reference: InputPathType,
    output_reference: InputPathType,
    affine_registration: InputPathType,
    nonlinear_registration: InputPathType,
    input_directory: string | null = null,
    output_directory: string | null = null,
    inverse_nonlinear: boolean = false,
    debug: boolean = false,
    check_options: boolean = false,
    help: boolean = false,
    version: boolean = false,
): DmriVox2voxParameters {
    /**
     * Build parameters.
    
     * @param input_files Input text file(s)
     * @param output_files Output text file(s), as many as inputs
     * @param input_reference Input reference volume
     * @param output_reference Output reference volume
     * @param affine_registration Affine registration file (.mat) to be applied first
     * @param nonlinear_registration Nonlinear registration file (.m3z) to be applied second
     * @param input_directory Input directory, if specified, names of input text files are relative to this
     * @param output_directory Output directory, if specified, names of output text files are relative to this
     * @param inverse_nonlinear Apply inverse of nonlinear warp when --regnl is used
     * @param debug Turn on debugging
     * @param check_options Check options and exit without running
     * @param help Print out information on how to use this program
     * @param version Print out version and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dmri_vox2vox" as const,
        "input_files": input_files,
        "output_files": output_files,
        "input_reference": input_reference,
        "output_reference": output_reference,
        "affine_registration": affine_registration,
        "nonlinear_registration": nonlinear_registration,
        "inverse_nonlinear": inverse_nonlinear,
        "debug": debug,
        "check_options": check_options,
        "help": help,
        "version": version,
    };
    if (input_directory !== null) {
        params["input_directory"] = input_directory;
    }
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    return params;
}


function dmri_vox2vox_cargs(
    params: DmriVox2voxParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dmri_vox2vox");
    cargs.push(
        "--in",
        ...(params["input_files"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["input_directory"] ?? null) !== null) {
        cargs.push(
            "--indir",
            (params["input_directory"] ?? null)
        );
    }
    cargs.push(
        "--out",
        ...(params["output_files"] ?? null)
    );
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "--outdir",
            (params["output_directory"] ?? null)
        );
    }
    cargs.push(
        "--inref",
        execution.inputFile((params["input_reference"] ?? null))
    );
    cargs.push(
        "--outref",
        execution.inputFile((params["output_reference"] ?? null))
    );
    cargs.push(
        "--reg",
        execution.inputFile((params["affine_registration"] ?? null))
    );
    cargs.push(
        "--regnl",
        execution.inputFile((params["nonlinear_registration"] ?? null))
    );
    if ((params["inverse_nonlinear"] ?? null)) {
        cargs.push("--invnl");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_options"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function dmri_vox2vox_outputs(
    params: DmriVox2voxParameters,
    execution: Execution,
): DmriVox2voxOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DmriVox2voxOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dmri_vox2vox_execute(
    params: DmriVox2voxParameters,
    execution: Execution,
): DmriVox2voxOutputs {
    /**
     * Tool for voxel-to-voxel transformations in diffusion MRI data processing.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DmriVox2voxOutputs`).
     */
    params = execution.params(params)
    const cargs = dmri_vox2vox_cargs(params, execution)
    const ret = dmri_vox2vox_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dmri_vox2vox(
    input_files: Array<InputPathType>,
    output_files: Array<string>,
    input_reference: InputPathType,
    output_reference: InputPathType,
    affine_registration: InputPathType,
    nonlinear_registration: InputPathType,
    input_directory: string | null = null,
    output_directory: string | null = null,
    inverse_nonlinear: boolean = false,
    debug: boolean = false,
    check_options: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DmriVox2voxOutputs {
    /**
     * Tool for voxel-to-voxel transformations in diffusion MRI data processing.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_files Input text file(s)
     * @param output_files Output text file(s), as many as inputs
     * @param input_reference Input reference volume
     * @param output_reference Output reference volume
     * @param affine_registration Affine registration file (.mat) to be applied first
     * @param nonlinear_registration Nonlinear registration file (.m3z) to be applied second
     * @param input_directory Input directory, if specified, names of input text files are relative to this
     * @param output_directory Output directory, if specified, names of output text files are relative to this
     * @param inverse_nonlinear Apply inverse of nonlinear warp when --regnl is used
     * @param debug Turn on debugging
     * @param check_options Check options and exit without running
     * @param help Print out information on how to use this program
     * @param version Print out version and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DmriVox2voxOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_VOX2VOX_METADATA);
    const params = dmri_vox2vox_params(input_files, output_files, input_reference, output_reference, affine_registration, nonlinear_registration, input_directory, output_directory, inverse_nonlinear, debug, check_options, help, version)
    return dmri_vox2vox_execute(params, execution);
}


export {
      DMRI_VOX2VOX_METADATA,
      DmriVox2voxOutputs,
      DmriVox2voxParameters,
      dmri_vox2vox,
      dmri_vox2vox_params,
};
