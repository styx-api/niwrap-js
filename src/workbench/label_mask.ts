// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_MASK_METADATA: Metadata = {
    id: "2751ac1aa6078e57d950752da509a34d477965c0.boutiques",
    name: "label-mask",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface LabelMaskParameters {
    "__STYXTYPE__": "label-mask";
    "label": InputPathType;
    "mask": InputPathType;
    "label_out": string;
    "opt_column_column"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "label-mask": label_mask_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "label-mask": label_mask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `label_mask(...)`.
 *
 * @interface
 */
interface LabelMaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output label file
     */
    label_out: OutputPathType;
}


function label_mask_params(
    label: InputPathType,
    mask: InputPathType,
    label_out: string,
    opt_column_column: string | null = null,
): LabelMaskParameters {
    /**
     * Build parameters.
    
     * @param label the label file to mask
     * @param mask the mask metric
     * @param label_out the output label file
     * @param opt_column_column select a single column: the column number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "label-mask" as const,
        "label": label,
        "mask": mask,
        "label_out": label_out,
    };
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    return params;
}


function label_mask_cargs(
    params: LabelMaskParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-label-mask");
    cargs.push(execution.inputFile((params["label"] ?? null)));
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push((params["label_out"] ?? null));
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    return cargs;
}


function label_mask_outputs(
    params: LabelMaskParameters,
    execution: Execution,
): LabelMaskOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: LabelMaskOutputs = {
        root: execution.outputFile("."),
        label_out: execution.outputFile([(params["label_out"] ?? null)].join('')),
    };
    return ret;
}


function label_mask_execute(
    params: LabelMaskParameters,
    execution: Execution,
): LabelMaskOutputs {
    /**
     * Mask a label file.
     * 
     * By default, the output label is a copy of the input label, but with the 'unused' label wherever the mask metric is zero or negative.  if -column is specified, the output contains only one column, the masked version of the specified input column.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `LabelMaskOutputs`).
     */
    params = execution.params(params)
    const cargs = label_mask_cargs(params, execution)
    const ret = label_mask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function label_mask(
    label: InputPathType,
    mask: InputPathType,
    label_out: string,
    opt_column_column: string | null = null,
    runner: Runner | null = null,
): LabelMaskOutputs {
    /**
     * Mask a label file.
     * 
     * By default, the output label is a copy of the input label, but with the 'unused' label wherever the mask metric is zero or negative.  if -column is specified, the output contains only one column, the masked version of the specified input column.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param label the label file to mask
     * @param mask the mask metric
     * @param label_out the output label file
     * @param opt_column_column select a single column: the column number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `LabelMaskOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_MASK_METADATA);
    const params = label_mask_params(label, mask, label_out, opt_column_column)
    return label_mask_execute(params, execution);
}


export {
      LABEL_MASK_METADATA,
      LabelMaskOutputs,
      LabelMaskParameters,
      label_mask,
      label_mask_params,
};
