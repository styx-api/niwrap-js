// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPHARM_DECO_METADATA: Metadata = {
    id: "3cbbf2779039075f5f650ce59cd2419e01af55c0.boutiques",
    name: "SpharmDeco",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SpharmDecoParameters {
    "@type": "afni.SpharmDeco";
    "i_type_s": InputPathType;
    "unit_sph_label": string;
    "order_l": number;
    "i_type_sd"?: Array<InputPathType> | null | undefined;
    "data_d"?: InputPathType | null | undefined;
    "bases_prefix"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "o_type_sdr"?: Array<InputPathType> | null | undefined;
    "debug"?: number | null | undefined;
    "sigma"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.SpharmDeco": spharm_deco_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.SpharmDeco": spharm_deco_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `spharm_deco(...)`.
 *
 * @interface
 */
interface SpharmDecoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Reconstructed data or surface files named based on PREFIX.
     */
    reconstructed_data: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param i_type_s Unit sphere, isotopic to the surface domain over which the data to be decomposed is defined.
 * @param unit_sph_label Label of the unit sphere.
 * @param order_l Decomposition order.
 * @param i_type_sd A surface whose node coordinates provide data vectors (X, Y, Z) to be decomposed or a dataset whose columns are to be individually decomposed. You can specify multiple surfaces to be processed.
 * @param data_d Data vectors to be decomposed.
 * @param bases_prefix Save the basis functions under the prefix BASES_PREFIX.
 * @param prefix Write out the reconstructed data into dataset PREFIX and write the beta coefficients for each processed data column.
 * @param o_type_sdr Write out a new surface with reconstructed coordinates.
 * @param debug Debug levels (1-3)
 * @param sigma Smoothing parameter (0 .. 0.001) which weighs down the contribution of higher order harmonics.
 *
 * @returns Parameter dictionary
 */
function spharm_deco_params(
    i_type_s: InputPathType,
    unit_sph_label: string,
    order_l: number,
    i_type_sd: Array<InputPathType> | null = null,
    data_d: InputPathType | null = null,
    bases_prefix: string | null = null,
    prefix: string | null = null,
    o_type_sdr: Array<InputPathType> | null = null,
    debug: number | null = null,
    sigma: number | null = null,
): SpharmDecoParameters {
    const params = {
        "@type": "afni.SpharmDeco" as const,
        "i_type_s": i_type_s,
        "unit_sph_label": unit_sph_label,
        "order_l": order_l,
    };
    if (i_type_sd !== null) {
        params["i_type_sd"] = i_type_sd;
    }
    if (data_d !== null) {
        params["data_d"] = data_d;
    }
    if (bases_prefix !== null) {
        params["bases_prefix"] = bases_prefix;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (o_type_sdr !== null) {
        params["o_type_sdr"] = o_type_sdr;
    }
    if (debug !== null) {
        params["debug"] = debug;
    }
    if (sigma !== null) {
        params["sigma"] = sigma;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function spharm_deco_cargs(
    params: SpharmDecoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SpharmDeco");
    cargs.push(execution.inputFile((params["i_type_s"] ?? null)));
    cargs.push((params["unit_sph_label"] ?? null));
    cargs.push(String((params["order_l"] ?? null)));
    if ((params["i_type_sd"] ?? null) !== null) {
        cargs.push(...(params["i_type_sd"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["data_d"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["data_d"] ?? null)));
    }
    if ((params["bases_prefix"] ?? null) !== null) {
        cargs.push((params["bases_prefix"] ?? null));
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push((params["prefix"] ?? null));
    }
    if ((params["o_type_sdr"] ?? null) !== null) {
        cargs.push(...(params["o_type_sdr"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["debug"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug"] ?? null))
        );
    }
    if ((params["sigma"] ?? null) !== null) {
        cargs.push(
            "-sigma",
            String((params["sigma"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function spharm_deco_outputs(
    params: SpharmDecoParameters,
    execution: Execution,
): SpharmDecoOutputs {
    const ret: SpharmDecoOutputs = {
        root: execution.outputFile("."),
        reconstructed_data: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_reconstructed"].join('')) : null,
    };
    return ret;
}


/**
 * SpharmDeco
 *
 * Spherical Harmonics Decomposition of a surface's coordinates or data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpharmDecoOutputs`).
 */
function spharm_deco_execute(
    params: SpharmDecoParameters,
    runner: Runner | null = null,
): SpharmDecoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPHARM_DECO_METADATA);
    params = execution.params(params)
    const cargs = spharm_deco_cargs(params, execution)
    const ret = spharm_deco_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SpharmDeco
 *
 * Spherical Harmonics Decomposition of a surface's coordinates or data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param i_type_s Unit sphere, isotopic to the surface domain over which the data to be decomposed is defined.
 * @param unit_sph_label Label of the unit sphere.
 * @param order_l Decomposition order.
 * @param i_type_sd A surface whose node coordinates provide data vectors (X, Y, Z) to be decomposed or a dataset whose columns are to be individually decomposed. You can specify multiple surfaces to be processed.
 * @param data_d Data vectors to be decomposed.
 * @param bases_prefix Save the basis functions under the prefix BASES_PREFIX.
 * @param prefix Write out the reconstructed data into dataset PREFIX and write the beta coefficients for each processed data column.
 * @param o_type_sdr Write out a new surface with reconstructed coordinates.
 * @param debug Debug levels (1-3)
 * @param sigma Smoothing parameter (0 .. 0.001) which weighs down the contribution of higher order harmonics.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpharmDecoOutputs`).
 */
function spharm_deco(
    i_type_s: InputPathType,
    unit_sph_label: string,
    order_l: number,
    i_type_sd: Array<InputPathType> | null = null,
    data_d: InputPathType | null = null,
    bases_prefix: string | null = null,
    prefix: string | null = null,
    o_type_sdr: Array<InputPathType> | null = null,
    debug: number | null = null,
    sigma: number | null = null,
    runner: Runner | null = null,
): SpharmDecoOutputs {
    const params = spharm_deco_params(i_type_s, unit_sph_label, order_l, i_type_sd, data_d, bases_prefix, prefix, o_type_sdr, debug, sigma)
    return spharm_deco_execute(params, runner);
}


export {
      SPHARM_DECO_METADATA,
      SpharmDecoOutputs,
      SpharmDecoParameters,
      spharm_deco,
      spharm_deco_execute,
      spharm_deco_params,
};
