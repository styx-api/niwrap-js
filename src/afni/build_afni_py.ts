// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BUILD_AFNI_PY_METADATA: Metadata = {
    id: "a6b65e6fa762c332efd5d39d0bb4c55e05e3452f.boutiques",
    name: "build_afni.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface BuildAfniPyParameters {
    "@type": "afni.build_afni.py";
    "build_root": string;
    "clean_root"?: string | null | undefined;
    "git_branch"?: string | null | undefined;
    "git_tag"?: string | null | undefined;
    "git_update"?: string | null | undefined;
    "make_target"?: string | null | undefined;
    "makefile"?: string | null | undefined;
    "package"?: string | null | undefined;
    "prep_only": boolean;
    "run_cmake"?: string | null | undefined;
    "run_make"?: string | null | undefined;
    "verbose_level"?: number | null | undefined;
    "help": boolean;
    "history": boolean;
    "show_valid_opts": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.build_afni.py": build_afni_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.build_afni.py": build_afni_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `build_afni_py(...)`.
 *
 * @interface
 */
interface BuildAfniPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Command history file
     */
    command_history_file: OutputPathType;
    /**
     * Screen output history file
     */
    screen_output_history: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param build_root Root directory to use for git and building
 * @param clean_root Specify whether to clean up the build_root. Default is yes.
 * @param git_branch Specify a branch to checkout in git. Default is master.
 * @param git_tag Specify a tag to checkout in git. Default is LAST_TAG.
 * @param git_update Specify whether to update git repo. Default is yes.
 * @param make_target Specify target for make command. Default is itall.
 * @param makefile Specify an alternate Makefile to build from.
 * @param package_ Specify the desired package to build.
 * @param prep_only Prepare to but do not run (c)make.
 * @param run_cmake Choose whether to run a cmake build. Default is no.
 * @param run_make Choose whether to run a make build. Default is yes.
 * @param verbose_level Set the verbosity level. Default is 1.
 * @param help Show help message
 * @param history Show module history
 * @param show_valid_opts List valid options
 * @param version Show the current version
 *
 * @returns Parameter dictionary
 */
function build_afni_py_params(
    build_root: string,
    clean_root: string | null = null,
    git_branch: string | null = null,
    git_tag: string | null = null,
    git_update: string | null = null,
    make_target: string | null = null,
    makefile: string | null = null,
    package_: string | null = null,
    prep_only: boolean = false,
    run_cmake: string | null = null,
    run_make: string | null = null,
    verbose_level: number | null = null,
    help: boolean = false,
    history: boolean = false,
    show_valid_opts: boolean = false,
    version: boolean = false,
): BuildAfniPyParameters {
    const params = {
        "@type": "afni.build_afni.py" as const,
        "build_root": build_root,
        "prep_only": prep_only,
        "help": help,
        "history": history,
        "show_valid_opts": show_valid_opts,
        "version": version,
    };
    if (clean_root !== null) {
        params["clean_root"] = clean_root;
    }
    if (git_branch !== null) {
        params["git_branch"] = git_branch;
    }
    if (git_tag !== null) {
        params["git_tag"] = git_tag;
    }
    if (git_update !== null) {
        params["git_update"] = git_update;
    }
    if (make_target !== null) {
        params["make_target"] = make_target;
    }
    if (makefile !== null) {
        params["makefile"] = makefile;
    }
    if (package_ !== null) {
        params["package"] = package_;
    }
    if (run_cmake !== null) {
        params["run_cmake"] = run_cmake;
    }
    if (run_make !== null) {
        params["run_make"] = run_make;
    }
    if (verbose_level !== null) {
        params["verbose_level"] = verbose_level;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function build_afni_py_cargs(
    params: BuildAfniPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("build_afni.py");
    cargs.push(
        "-build_root",
        (params["build_root"] ?? null)
    );
    if ((params["clean_root"] ?? null) !== null) {
        cargs.push(
            "-clean_root",
            (params["clean_root"] ?? null)
        );
    }
    if ((params["git_branch"] ?? null) !== null) {
        cargs.push(
            "-git_branch",
            (params["git_branch"] ?? null)
        );
    }
    if ((params["git_tag"] ?? null) !== null) {
        cargs.push(
            "-git_tag",
            (params["git_tag"] ?? null)
        );
    }
    if ((params["git_update"] ?? null) !== null) {
        cargs.push(
            "-git_update",
            (params["git_update"] ?? null)
        );
    }
    if ((params["make_target"] ?? null) !== null) {
        cargs.push(
            "-make_target",
            (params["make_target"] ?? null)
        );
    }
    if ((params["makefile"] ?? null) !== null) {
        cargs.push(
            "-makefile",
            (params["makefile"] ?? null)
        );
    }
    if ((params["package"] ?? null) !== null) {
        cargs.push(
            "-package",
            (params["package"] ?? null)
        );
    }
    if ((params["prep_only"] ?? null)) {
        cargs.push("-prep_only");
    }
    if ((params["run_cmake"] ?? null) !== null) {
        cargs.push(
            "-run_cmake",
            (params["run_cmake"] ?? null)
        );
    }
    if ((params["run_make"] ?? null) !== null) {
        cargs.push(
            "-run_make",
            (params["run_make"] ?? null)
        );
    }
    if ((params["verbose_level"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbose_level"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["history"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["show_valid_opts"] ?? null)) {
        cargs.push("-show_valid_opts");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function build_afni_py_outputs(
    params: BuildAfniPyParameters,
    execution: Execution,
): BuildAfniPyOutputs {
    const ret: BuildAfniPyOutputs = {
        root: execution.outputFile("."),
        command_history_file: execution.outputFile([(params["build_root"] ?? null), "/hist_commands.txt"].join('')),
        screen_output_history: execution.outputFile([(params["build_root"] ?? null), "/screen_output_history.txt"].join('')),
    };
    return ret;
}


/**
 * build_afni.py
 *
 * Compile an AFNI package from the git repository.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BuildAfniPyOutputs`).
 */
function build_afni_py_execute(
    params: BuildAfniPyParameters,
    runner: Runner | null = null,
): BuildAfniPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BUILD_AFNI_PY_METADATA);
    params = execution.params(params)
    const cargs = build_afni_py_cargs(params, execution)
    const ret = build_afni_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * build_afni.py
 *
 * Compile an AFNI package from the git repository.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param build_root Root directory to use for git and building
 * @param clean_root Specify whether to clean up the build_root. Default is yes.
 * @param git_branch Specify a branch to checkout in git. Default is master.
 * @param git_tag Specify a tag to checkout in git. Default is LAST_TAG.
 * @param git_update Specify whether to update git repo. Default is yes.
 * @param make_target Specify target for make command. Default is itall.
 * @param makefile Specify an alternate Makefile to build from.
 * @param package_ Specify the desired package to build.
 * @param prep_only Prepare to but do not run (c)make.
 * @param run_cmake Choose whether to run a cmake build. Default is no.
 * @param run_make Choose whether to run a make build. Default is yes.
 * @param verbose_level Set the verbosity level. Default is 1.
 * @param help Show help message
 * @param history Show module history
 * @param show_valid_opts List valid options
 * @param version Show the current version
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BuildAfniPyOutputs`).
 */
function build_afni_py(
    build_root: string,
    clean_root: string | null = null,
    git_branch: string | null = null,
    git_tag: string | null = null,
    git_update: string | null = null,
    make_target: string | null = null,
    makefile: string | null = null,
    package_: string | null = null,
    prep_only: boolean = false,
    run_cmake: string | null = null,
    run_make: string | null = null,
    verbose_level: number | null = null,
    help: boolean = false,
    history: boolean = false,
    show_valid_opts: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): BuildAfniPyOutputs {
    const params = build_afni_py_params(build_root, clean_root, git_branch, git_tag, git_update, make_target, makefile, package_, prep_only, run_cmake, run_make, verbose_level, help, history, show_valid_opts, version)
    return build_afni_py_execute(params, runner);
}


export {
      BUILD_AFNI_PY_METADATA,
      BuildAfniPyOutputs,
      BuildAfniPyParameters,
      build_afni_py,
      build_afni_py_execute,
      build_afni_py_params,
};
