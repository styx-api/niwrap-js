// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_CM_METADATA: Metadata = {
    id: "6ed0027b8ed77baf1cc48dacbb43734191dfd437.boutiques",
    name: "3dCM",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dCmParameters {
    "@type": "afni.3dCM";
    "dset": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "automask": boolean;
    "set_origin"?: Array<number> | null | undefined;
    "local_ijk": boolean;
    "roi_vals"?: Array<number> | null | undefined;
    "all_rois": boolean;
    "icent": boolean;
    "dcent": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dCM": v_3d_cm_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_cm(...)`.
 *
 * @interface
 */
interface V3dCmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * center of mass of the dataset
     */
    stdout: string[];
}


/**
 * Build parameters.
 *
 * @param dset Input dataset.
 * @param mask Use the specified dataset as a mask. Only voxels with nonzero values in 'mset' will be averaged from 'dataset'. Both datasets must have the same number of voxels.
 * @param automask Generate the mask automatically.
 * @param set_origin After computing the CM of the dataset, set the origin fields in the header so that the CM will be at (x,y,z) in DICOM coordinates.
 * @param local_ijk Output values as (i,j,k) in local orientation.
 * @param roi_vals Compute center of mass for each blob with specified voxel values.
 * @param all_rois Automatically find all ROI values and compute their centers of mass.
 * @param icent Compute Internal Center, which finds the center voxel closest to the center of mass.
 * @param dcent Compute Distance Center, the center voxel with the shortest average distance to all other voxels. This is computationally expensive.
 *
 * @returns Parameter dictionary
 */
function v_3d_cm_params(
    dset: InputPathType,
    mask: InputPathType | null = null,
    automask: boolean = false,
    set_origin: Array<number> | null = null,
    local_ijk: boolean = false,
    roi_vals: Array<number> | null = null,
    all_rois: boolean = false,
    icent: boolean = false,
    dcent: boolean = false,
): V3dCmParameters {
    const params = {
        "@type": "afni.3dCM" as const,
        "dset": dset,
        "automask": automask,
        "local_ijk": local_ijk,
        "all_rois": all_rois,
        "icent": icent,
        "dcent": dcent,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (set_origin !== null) {
        params["set_origin"] = set_origin;
    }
    if (roi_vals !== null) {
        params["roi_vals"] = roi_vals;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_cm_cargs(
    params: V3dCmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dCM");
    cargs.push(execution.inputFile((params["dset"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["set_origin"] ?? null) !== null) {
        cargs.push(
            "-set",
            ...(params["set_origin"] ?? null).map(String)
        );
    }
    if ((params["local_ijk"] ?? null)) {
        cargs.push("-local_ijk");
    }
    if ((params["roi_vals"] ?? null) !== null) {
        cargs.push(
            "-roi_vals",
            ...(params["roi_vals"] ?? null).map(String)
        );
    }
    if ((params["all_rois"] ?? null)) {
        cargs.push("-all_rois");
    }
    if ((params["icent"] ?? null)) {
        cargs.push("-Icent");
    }
    if ((params["dcent"] ?? null)) {
        cargs.push("-Dcent");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_cm_outputs(
    params: V3dCmParameters,
    execution: Execution,
): V3dCmOutputs {
    const ret: V3dCmOutputs = {
        root: execution.outputFile("."),
        stdout: [],
    };
    return ret;
}


/**
 * 3dCM
 *
 * Tool for computing the center of mass of a dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dCmOutputs`).
 */
function v_3d_cm_execute(
    params: V3dCmParameters,
    runner: Runner | null = null,
): V3dCmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_CM_METADATA);
    params = execution.params(params)
    const cargs = v_3d_cm_cargs(params, execution)
    const ret = v_3d_cm_outputs(params, execution)
    execution.run(cargs, s => ret.stdout.push(s));
    return ret;
}


/**
 * 3dCM
 *
 * Tool for computing the center of mass of a dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dset Input dataset.
 * @param mask Use the specified dataset as a mask. Only voxels with nonzero values in 'mset' will be averaged from 'dataset'. Both datasets must have the same number of voxels.
 * @param automask Generate the mask automatically.
 * @param set_origin After computing the CM of the dataset, set the origin fields in the header so that the CM will be at (x,y,z) in DICOM coordinates.
 * @param local_ijk Output values as (i,j,k) in local orientation.
 * @param roi_vals Compute center of mass for each blob with specified voxel values.
 * @param all_rois Automatically find all ROI values and compute their centers of mass.
 * @param icent Compute Internal Center, which finds the center voxel closest to the center of mass.
 * @param dcent Compute Distance Center, the center voxel with the shortest average distance to all other voxels. This is computationally expensive.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dCmOutputs`).
 */
function v_3d_cm(
    dset: InputPathType,
    mask: InputPathType | null = null,
    automask: boolean = false,
    set_origin: Array<number> | null = null,
    local_ijk: boolean = false,
    roi_vals: Array<number> | null = null,
    all_rois: boolean = false,
    icent: boolean = false,
    dcent: boolean = false,
    runner: Runner | null = null,
): V3dCmOutputs {
    const params = v_3d_cm_params(dset, mask, automask, set_origin, local_ijk, roi_vals, all_rois, icent, dcent)
    return v_3d_cm_execute(params, runner);
}


export {
      V3dCmOutputs,
      V3dCmParameters,
      V_3D_CM_METADATA,
      v_3d_cm,
      v_3d_cm_execute,
      v_3d_cm_params,
};
