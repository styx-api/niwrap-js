// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_TRANSLATE_ANNOTATION_METADATA: Metadata = {
    id: "ff0cfbba26df08e97c0f75744311fd74364e37d6.boutiques",
    name: "mris_translate_annotation",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisTranslateAnnotationParameters {
    "@type": "freesurfer.mris_translate_annotation";
    "subject": string;
    "hemi": string;
    "in_annot": InputPathType;
    "translation_file": InputPathType;
    "out_annot": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_translate_annotation": mris_translate_annotation_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_translate_annotation": mris_translate_annotation_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_translate_annotation(...)`.
 *
 * @interface
 */
interface MrisTranslateAnnotationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file with the translated annotation.
     */
    output_annotation: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject The subject identifier.
 * @param hemi Hemisphere identifier (e.g., lh or rh).
 * @param in_annot Input annotation file.
 * @param translation_file Translation table file.
 * @param out_annot Output annotation file.
 *
 * @returns Parameter dictionary
 */
function mris_translate_annotation_params(
    subject: string,
    hemi: string,
    in_annot: InputPathType,
    translation_file: InputPathType,
    out_annot: string,
): MrisTranslateAnnotationParameters {
    const params = {
        "@type": "freesurfer.mris_translate_annotation" as const,
        "subject": subject,
        "hemi": hemi,
        "in_annot": in_annot,
        "translation_file": translation_file,
        "out_annot": out_annot,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_translate_annotation_cargs(
    params: MrisTranslateAnnotationParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_translate_annotation");
    cargs.push((params["subject"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["in_annot"] ?? null)));
    cargs.push(execution.inputFile((params["translation_file"] ?? null)));
    cargs.push((params["out_annot"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_translate_annotation_outputs(
    params: MrisTranslateAnnotationParameters,
    execution: Execution,
): MrisTranslateAnnotationOutputs {
    const ret: MrisTranslateAnnotationOutputs = {
        root: execution.outputFile("."),
        output_annotation: execution.outputFile([(params["out_annot"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_translate_annotation
 *
 * This program applies a translation table to an annotation file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisTranslateAnnotationOutputs`).
 */
function mris_translate_annotation_execute(
    params: MrisTranslateAnnotationParameters,
    runner: Runner | null = null,
): MrisTranslateAnnotationOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_TRANSLATE_ANNOTATION_METADATA);
    params = execution.params(params)
    const cargs = mris_translate_annotation_cargs(params, execution)
    const ret = mris_translate_annotation_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_translate_annotation
 *
 * This program applies a translation table to an annotation file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject The subject identifier.
 * @param hemi Hemisphere identifier (e.g., lh or rh).
 * @param in_annot Input annotation file.
 * @param translation_file Translation table file.
 * @param out_annot Output annotation file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisTranslateAnnotationOutputs`).
 */
function mris_translate_annotation(
    subject: string,
    hemi: string,
    in_annot: InputPathType,
    translation_file: InputPathType,
    out_annot: string,
    runner: Runner | null = null,
): MrisTranslateAnnotationOutputs {
    const params = mris_translate_annotation_params(subject, hemi, in_annot, translation_file, out_annot)
    return mris_translate_annotation_execute(params, runner);
}


export {
      MRIS_TRANSLATE_ANNOTATION_METADATA,
      MrisTranslateAnnotationOutputs,
      MrisTranslateAnnotationParameters,
      mris_translate_annotation,
      mris_translate_annotation_execute,
      mris_translate_annotation_params,
};
