// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NIFTI_TOOL_METADATA: Metadata = {
    id: "38a2d9449adee7d6233168e977d87d95385ebe37.boutiques",
    name: "nifti_tool",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface NiftiToolParameters {
    "__STYXTYPE__": "nifti_tool";
    "action": string;
    "input_files"?: Array<InputPathType> | null | undefined;
    "field"?: string | null | undefined;
    "mod_field"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "debug"?: number | null | undefined;
    "overwrite": boolean;
    "convert2dtype"?: string | null | undefined;
    "convert_fail_choice"?: string | null | undefined;
    "convert_verify": boolean;
    "add_comment_ext"?: string | null | undefined;
    "rm_ext"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "nifti_tool": nifti_tool_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "nifti_tool": nifti_tool_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `nifti_tool(...)`.
 *
 * @interface
 */
interface NiftiToolOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The nifti file generated as output.
     */
    output_file: OutputPathType | null;
}


function nifti_tool_params(
    action: string,
    input_files: Array<InputPathType> | null = null,
    field: string | null = null,
    mod_field: string | null = null,
    prefix: string | null = null,
    debug: number | null = null,
    overwrite: boolean = false,
    convert2dtype: string | null = null,
    convert_fail_choice: string | null = null,
    convert_verify: boolean = false,
    add_comment_ext: string | null = null,
    rm_ext: string | null = null,
): NiftiToolParameters {
    /**
     * Build parameters.
    
     * @param action Action type that defines what nifti_tool will do.
     * @param input_files One or more input nifti files.
     * @param field Field name to display, modify, or compare.
     * @param mod_field Field name and new value to modify.
     * @param prefix Prefix for the output file.
     * @param debug Debugging level (0-3).
     * @param overwrite Overwrite input files with modifications.
     * @param convert2dtype Convert data to a new datatype.
     * @param convert_fail_choice Action on conversion failure (ignore, warn, fail).
     * @param convert_verify Verify datatype conversion exactness.
     * @param add_comment_ext Add COMMENT-type extension to dataset.
     * @param rm_ext Remove extension by index or ALL.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "nifti_tool" as const,
        "action": action,
        "overwrite": overwrite,
        "convert_verify": convert_verify,
    };
    if (input_files !== null) {
        params["input_files"] = input_files;
    }
    if (field !== null) {
        params["field"] = field;
    }
    if (mod_field !== null) {
        params["mod_field"] = mod_field;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (debug !== null) {
        params["debug"] = debug;
    }
    if (convert2dtype !== null) {
        params["convert2dtype"] = convert2dtype;
    }
    if (convert_fail_choice !== null) {
        params["convert_fail_choice"] = convert_fail_choice;
    }
    if (add_comment_ext !== null) {
        params["add_comment_ext"] = add_comment_ext;
    }
    if (rm_ext !== null) {
        params["rm_ext"] = rm_ext;
    }
    return params;
}


function nifti_tool_cargs(
    params: NiftiToolParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("nifti_tool");
    cargs.push((params["action"] ?? null));
    if ((params["input_files"] ?? null) !== null) {
        cargs.push(
            "-infiles",
            ...(params["input_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["field"] ?? null) !== null) {
        cargs.push(
            "-field",
            (params["field"] ?? null)
        );
    }
    if ((params["mod_field"] ?? null) !== null) {
        cargs.push(
            "-mod_field",
            (params["mod_field"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["debug"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug"] ?? null))
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    if ((params["convert2dtype"] ?? null) !== null) {
        cargs.push(
            "-convert2dtype",
            (params["convert2dtype"] ?? null)
        );
    }
    if ((params["convert_fail_choice"] ?? null) !== null) {
        cargs.push(
            "-convert_fail_choice",
            (params["convert_fail_choice"] ?? null)
        );
    }
    if ((params["convert_verify"] ?? null)) {
        cargs.push("-convert_verify");
    }
    if ((params["add_comment_ext"] ?? null) !== null) {
        cargs.push(
            "-add_comment_ext",
            (params["add_comment_ext"] ?? null)
        );
    }
    if ((params["rm_ext"] ?? null) !== null) {
        cargs.push(
            "-rm_ext",
            (params["rm_ext"] ?? null)
        );
    }
    return cargs;
}


function nifti_tool_outputs(
    params: NiftiToolParameters,
    execution: Execution,
): NiftiToolOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: NiftiToolOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii"].join('')) : null,
    };
    return ret;
}


function nifti_tool_execute(
    params: NiftiToolParameters,
    execution: Execution,
): NiftiToolOutputs {
    /**
     * Display, modify, or compare nifti headers.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `NiftiToolOutputs`).
     */
    params = execution.params(params)
    const cargs = nifti_tool_cargs(params, execution)
    const ret = nifti_tool_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function nifti_tool(
    action: string,
    input_files: Array<InputPathType> | null = null,
    field: string | null = null,
    mod_field: string | null = null,
    prefix: string | null = null,
    debug: number | null = null,
    overwrite: boolean = false,
    convert2dtype: string | null = null,
    convert_fail_choice: string | null = null,
    convert_verify: boolean = false,
    add_comment_ext: string | null = null,
    rm_ext: string | null = null,
    runner: Runner | null = null,
): NiftiToolOutputs {
    /**
     * Display, modify, or compare nifti headers.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param action Action type that defines what nifti_tool will do.
     * @param input_files One or more input nifti files.
     * @param field Field name to display, modify, or compare.
     * @param mod_field Field name and new value to modify.
     * @param prefix Prefix for the output file.
     * @param debug Debugging level (0-3).
     * @param overwrite Overwrite input files with modifications.
     * @param convert2dtype Convert data to a new datatype.
     * @param convert_fail_choice Action on conversion failure (ignore, warn, fail).
     * @param convert_verify Verify datatype conversion exactness.
     * @param add_comment_ext Add COMMENT-type extension to dataset.
     * @param rm_ext Remove extension by index or ALL.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `NiftiToolOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NIFTI_TOOL_METADATA);
    const params = nifti_tool_params(action, input_files, field, mod_field, prefix, debug, overwrite, convert2dtype, convert_fail_choice, convert_verify, add_comment_ext, rm_ext)
    return nifti_tool_execute(params, execution);
}


export {
      NIFTI_TOOL_METADATA,
      NiftiToolOutputs,
      NiftiToolParameters,
      nifti_tool,
      nifti_tool_params,
};
