// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_MASK_METADATA: Metadata = {
    id: "63170647bafcd7131594caf978d3951bd09b8dc0.boutiques",
    name: "metric-mask",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricMaskParameters {
    "@type": "workbench.metric-mask";
    "metric": InputPathType;
    "mask": InputPathType;
    "metric_out": string;
    "opt_column_column"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metric-mask": metric_mask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.metric-mask": metric_mask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metric_mask(...)`.
 *
 * @interface
 */
interface MetricMaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param metric the input metric
 * @param mask the mask metric
 * @param metric_out the output metric
 * @param opt_column_column select a single column: the column number or name
 *
 * @returns Parameter dictionary
 */
function metric_mask_params(
    metric: InputPathType,
    mask: InputPathType,
    metric_out: string,
    opt_column_column: string | null = null,
): MetricMaskParameters {
    const params = {
        "@type": "workbench.metric-mask" as const,
        "metric": metric,
        "mask": mask,
        "metric_out": metric_out,
    };
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_mask_cargs(
    params: MetricMaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-mask");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_mask_outputs(
    params: MetricMaskParameters,
    execution: Execution,
): MetricMaskOutputs {
    const ret: MetricMaskOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * metric-mask
 *
 * Mask a metric file.
 *
 * By default, the output metric is a copy of the input metric, but with zeros wherever the mask metric is zero or negative.  if -column is specified, the output contains only one column, the masked version of the specified input column.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricMaskOutputs`).
 */
function metric_mask_execute(
    params: MetricMaskParameters,
    runner: Runner | null = null,
): MetricMaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_MASK_METADATA);
    params = execution.params(params)
    const cargs = metric_mask_cargs(params, execution)
    const ret = metric_mask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * metric-mask
 *
 * Mask a metric file.
 *
 * By default, the output metric is a copy of the input metric, but with zeros wherever the mask metric is zero or negative.  if -column is specified, the output contains only one column, the masked version of the specified input column.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param metric the input metric
 * @param mask the mask metric
 * @param metric_out the output metric
 * @param opt_column_column select a single column: the column number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricMaskOutputs`).
 */
function metric_mask(
    metric: InputPathType,
    mask: InputPathType,
    metric_out: string,
    opt_column_column: string | null = null,
    runner: Runner | null = null,
): MetricMaskOutputs {
    const params = metric_mask_params(metric, mask, metric_out, opt_column_column)
    return metric_mask_execute(params, runner);
}


export {
      METRIC_MASK_METADATA,
      MetricMaskOutputs,
      MetricMaskParameters,
      metric_mask,
      metric_mask_execute,
      metric_mask_params,
};
