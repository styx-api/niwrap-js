// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSREAD_ANNOT_METADATA: Metadata = {
    id: "1aee44cf7efa00cb2630f7f3d7fb84af69eadb4f.boutiques",
    name: "FSread_annot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FsreadAnnotParameters {
    "__STYXTYPE__": "FSread_annot";
    "infile": InputPathType;
    "hemi"?: string | null | undefined;
    "fscmap"?: InputPathType | null | undefined;
    "fscmap_range"?: Array<number> | null | undefined;
    "fsversion"?: string | null | undefined;
    "col_1d"?: string | null | undefined;
    "roi_1d"?: string | null | undefined;
    "cmap_1d"?: string | null | undefined;
    "show_fscmap": boolean;
    "dset"?: string | null | undefined;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "FSread_annot": fsread_annot_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "FSread_annot": fsread_annot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsread_annot(...)`.
 *
 * @interface
 */
interface FsreadAnnotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output 4-column 1D color file.
     */
    out_col_1d: OutputPathType;
    /**
     * Output 5-column 1D ROI file.
     */
    out_roi_1d: OutputPathType;
    /**
     * Output niml formatted label dataset.
     */
    out_niml_dset: OutputPathType;
    /**
     * Output 4-column 1D color map file.
     */
    out_cmap_1d: OutputPathType;
}


function fsread_annot_params(
    infile: InputPathType,
    hemi: string | null = null,
    fscmap: InputPathType | null = null,
    fscmap_range: Array<number> | null = null,
    fsversion: string | null = null,
    col_1d: string | null = null,
    roi_1d: string | null = null,
    cmap_1d: string | null = null,
    show_fscmap: boolean = false,
    dset: string | null = null,
    help: boolean = false,
): FsreadAnnotParameters {
    /**
     * Build parameters.
    
     * @param infile Binary formatted FreeSurfer annotation file.
     * @param hemi Specify hemisphere. HEMI is one of lh or rh. Program guesses by default.
     * @param fscmap Get the colormap from the Freesurfer colormap file CMAPFILE. Colormaps inside the ANNOTFILE would be ignored.
     * @param fscmap_range CMAPFILE contains multiple types of labels. The annotation values in ANNOTFILE can map to multiple labels if you do not restrict the range with iMin and iMax.
     * @param fsversion VER is the annotation file vintage. Choose from 2009 or 2005.
     * @param col_1d Write a 4-column 1D color file.
     * @param roi_1d Write a 5-column 1D roi file.
     * @param cmap_1d Write a 4-column 1D color map file.
     * @param show_fscmap Show the info of the colormap in the ANNOT file.
     * @param dset Write the annotation and colormap as a niml formatted Label Dset.
     * @param help Display help message.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "FSread_annot" as const,
        "infile": infile,
        "show_fscmap": show_fscmap,
        "help": help,
    };
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (fscmap !== null) {
        params["fscmap"] = fscmap;
    }
    if (fscmap_range !== null) {
        params["fscmap_range"] = fscmap_range;
    }
    if (fsversion !== null) {
        params["fsversion"] = fsversion;
    }
    if (col_1d !== null) {
        params["col_1d"] = col_1d;
    }
    if (roi_1d !== null) {
        params["roi_1d"] = roi_1d;
    }
    if (cmap_1d !== null) {
        params["cmap_1d"] = cmap_1d;
    }
    if (dset !== null) {
        params["dset"] = dset;
    }
    return params;
}


function fsread_annot_cargs(
    params: FsreadAnnotParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("FSread_annot");
    cargs.push(
        "-input",
        ["-", execution.inputFile((params["infile"] ?? null))].join('')
    );
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "-hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["fscmap"] ?? null) !== null) {
        cargs.push(
            "-FScmap",
            execution.inputFile((params["fscmap"] ?? null))
        );
    }
    if ((params["fscmap_range"] ?? null) !== null) {
        cargs.push(
            "-FScmaprange",
            ...(params["fscmap_range"] ?? null).map(String)
        );
    }
    if ((params["fsversion"] ?? null) !== null) {
        cargs.push(
            "-FSversion",
            (params["fsversion"] ?? null)
        );
    }
    if ((params["col_1d"] ?? null) !== null) {
        cargs.push(
            "-col_1D",
            (params["col_1d"] ?? null)
        );
    }
    if ((params["roi_1d"] ?? null) !== null) {
        cargs.push(
            "-roi_1D",
            (params["roi_1d"] ?? null)
        );
    }
    if ((params["cmap_1d"] ?? null) !== null) {
        cargs.push(
            "-cmap_1D",
            (params["cmap_1d"] ?? null)
        );
    }
    if ((params["show_fscmap"] ?? null)) {
        cargs.push("-show_FScmap");
    }
    if ((params["dset"] ?? null) !== null) {
        cargs.push(
            "-dset",
            (params["dset"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function fsread_annot_outputs(
    params: FsreadAnnotParameters,
    execution: Execution,
): FsreadAnnotOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FsreadAnnotOutputs = {
        root: execution.outputFile("."),
        out_col_1d: execution.outputFile(["annot.1D.col"].join('')),
        out_roi_1d: execution.outputFile(["annot.1D.roi"].join('')),
        out_niml_dset: execution.outputFile(["annot.niml.dset"].join('')),
        out_cmap_1d: execution.outputFile(["annot.1D.cmap"].join('')),
    };
    return ret;
}


function fsread_annot_execute(
    params: FsreadAnnotParameters,
    execution: Execution,
): FsreadAnnotOutputs {
    /**
     * Reads a FreeSurfer annotation file and outputs an equivalent ROI file and/or a colormap file for use with SUMA.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FsreadAnnotOutputs`).
     */
    params = execution.params(params)
    const cargs = fsread_annot_cargs(params, execution)
    const ret = fsread_annot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fsread_annot(
    infile: InputPathType,
    hemi: string | null = null,
    fscmap: InputPathType | null = null,
    fscmap_range: Array<number> | null = null,
    fsversion: string | null = null,
    col_1d: string | null = null,
    roi_1d: string | null = null,
    cmap_1d: string | null = null,
    show_fscmap: boolean = false,
    dset: string | null = null,
    help: boolean = false,
    runner: Runner | null = null,
): FsreadAnnotOutputs {
    /**
     * Reads a FreeSurfer annotation file and outputs an equivalent ROI file and/or a colormap file for use with SUMA.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param infile Binary formatted FreeSurfer annotation file.
     * @param hemi Specify hemisphere. HEMI is one of lh or rh. Program guesses by default.
     * @param fscmap Get the colormap from the Freesurfer colormap file CMAPFILE. Colormaps inside the ANNOTFILE would be ignored.
     * @param fscmap_range CMAPFILE contains multiple types of labels. The annotation values in ANNOTFILE can map to multiple labels if you do not restrict the range with iMin and iMax.
     * @param fsversion VER is the annotation file vintage. Choose from 2009 or 2005.
     * @param col_1d Write a 4-column 1D color file.
     * @param roi_1d Write a 5-column 1D roi file.
     * @param cmap_1d Write a 4-column 1D color map file.
     * @param show_fscmap Show the info of the colormap in the ANNOT file.
     * @param dset Write the annotation and colormap as a niml formatted Label Dset.
     * @param help Display help message.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FsreadAnnotOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSREAD_ANNOT_METADATA);
    const params = fsread_annot_params(infile, hemi, fscmap, fscmap_range, fsversion, col_1d, roi_1d, cmap_1d, show_fscmap, dset, help)
    return fsread_annot_execute(params, execution);
}


export {
      FSREAD_ANNOT_METADATA,
      FsreadAnnotOutputs,
      FsreadAnnotParameters,
      fsread_annot,
      fsread_annot_params,
};
