// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TBSS_X_METADATA: Metadata = {
    id: "993b4b1ad9a84f9af08b7b3baafd57b75769beef.boutiques",
    name: "tbss_x",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface TbssXParameters {
    "@type"?: "fsl/tbss_x";
    "scalar_dirs": Array<string>;
    "vector_dirs": Array<string>;
}
type TbssXParametersTagged = Required<Pick<TbssXParameters, '@type'>> & TbssXParameters;


/**
 * Output object returned when calling `TbssXParameters(...)`.
 *
 * @interface
 */
interface TbssXOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param scalar_dirs List of scalar directories (e.g., F1, F2)
 * @param vector_dirs List of vector directories (e.g., D1, D2)
 *
 * @returns Parameter dictionary
 */
function tbss_x_params(
    scalar_dirs: Array<string>,
    vector_dirs: Array<string>,
): TbssXParametersTagged {
    const params = {
        "@type": "fsl/tbss_x" as const,
        "scalar_dirs": scalar_dirs,
        "vector_dirs": vector_dirs,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tbss_x_cargs(
    params: TbssXParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tbss_x");
    cargs.push(...(params["scalar_dirs"] ?? null));
    cargs.push(...(params["vector_dirs"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tbss_x_outputs(
    params: TbssXParameters,
    execution: Execution,
): TbssXOutputs {
    const ret: TbssXOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * tbss_x
 *
 * TBSS cross-subject script for processing scalar and vector directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TbssXOutputs`).
 */
function tbss_x_execute(
    params: TbssXParameters,
    runner: Runner | null = null,
): TbssXOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TBSS_X_METADATA);
    params = execution.params(params)
    const cargs = tbss_x_cargs(params, execution)
    const ret = tbss_x_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tbss_x
 *
 * TBSS cross-subject script for processing scalar and vector directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param scalar_dirs List of scalar directories (e.g., F1, F2)
 * @param vector_dirs List of vector directories (e.g., D1, D2)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TbssXOutputs`).
 */
function tbss_x(
    scalar_dirs: Array<string>,
    vector_dirs: Array<string>,
    runner: Runner | null = null,
): TbssXOutputs {
    const params = tbss_x_params(scalar_dirs, vector_dirs)
    return tbss_x_execute(params, runner);
}


export {
      TBSS_X_METADATA,
      TbssXOutputs,
      tbss_x,
      tbss_x_execute,
      tbss_x_params,
};
