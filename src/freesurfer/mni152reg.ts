// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MNI152REG_METADATA: Metadata = {
    id: "dfc37620e722a922c216aae5f87bf785a7f52f00.boutiques",
    name: "mni152reg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Mni152regParameters {
    "@type": "freesurfer.mni152reg";
    "subject": string;
    "register_1mm": boolean;
    "output"?: string | null | undefined;
    "symmetric": boolean;
    "save_volume": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mni152reg": mni152reg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mni152reg": mni152reg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mni152reg(...)`.
 *
 * @interface
 */
interface Mni152regOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registration matrix for standard 2mm target
     */
    reg_matrix_2mm: OutputPathType;
    /**
     * Output registration matrix for 1mm target when --1 flag is used
     */
    reg_matrix_1mm: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject FreeSurfer subject ID
 * @param register_1mm Register to 1mm target (instead of 2mm)
 * @param output Explicitly set output registration file
 * @param symmetric Register to FSL symmetric target
 * @param save_volume Sample original to output space
 *
 * @returns Parameter dictionary
 */
function mni152reg_params(
    subject: string,
    register_1mm: boolean = false,
    output: string | null = null,
    symmetric: boolean = false,
    save_volume: boolean = false,
): Mni152regParameters {
    const params = {
        "@type": "freesurfer.mni152reg" as const,
        "subject": subject,
        "register_1mm": register_1mm,
        "symmetric": symmetric,
        "save_volume": save_volume,
    };
    if (output !== null) {
        params["output"] = output;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mni152reg_cargs(
    params: Mni152regParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mni152reg");
    cargs.push(
        "-s",
        (params["subject"] ?? null)
    );
    if ((params["register_1mm"] ?? null)) {
        cargs.push("--1");
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output"] ?? null)
        );
    }
    if ((params["symmetric"] ?? null)) {
        cargs.push("--sym");
    }
    if ((params["save_volume"] ?? null)) {
        cargs.push("--save-vol");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mni152reg_outputs(
    params: Mni152regParameters,
    execution: Execution,
): Mni152regOutputs {
    const ret: Mni152regOutputs = {
        root: execution.outputFile("."),
        reg_matrix_2mm: execution.outputFile(["$SUBJECTS_DIR/", (params["subject"] ?? null), "/mri/transforms/reg.mni152.2mm.dat"].join('')),
        reg_matrix_1mm: execution.outputFile(["$SUBJECTS_DIR/", (params["subject"] ?? null), "/mri/transforms/reg.mni152.1mm.dat"].join('')),
    };
    return ret;
}


/**
 * mni152reg
 *
 * Registers the FreeSurfer subject to the FSL MNI 152 brain to create a tkregister-style registration matrix.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Mni152regOutputs`).
 */
function mni152reg_execute(
    params: Mni152regParameters,
    runner: Runner | null = null,
): Mni152regOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MNI152REG_METADATA);
    params = execution.params(params)
    const cargs = mni152reg_cargs(params, execution)
    const ret = mni152reg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mni152reg
 *
 * Registers the FreeSurfer subject to the FSL MNI 152 brain to create a tkregister-style registration matrix.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject FreeSurfer subject ID
 * @param register_1mm Register to 1mm target (instead of 2mm)
 * @param output Explicitly set output registration file
 * @param symmetric Register to FSL symmetric target
 * @param save_volume Sample original to output space
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Mni152regOutputs`).
 */
function mni152reg(
    subject: string,
    register_1mm: boolean = false,
    output: string | null = null,
    symmetric: boolean = false,
    save_volume: boolean = false,
    runner: Runner | null = null,
): Mni152regOutputs {
    const params = mni152reg_params(subject, register_1mm, output, symmetric, save_volume)
    return mni152reg_execute(params, runner);
}


export {
      MNI152REG_METADATA,
      Mni152regOutputs,
      Mni152regParameters,
      mni152reg,
      mni152reg_execute,
      mni152reg_params,
};
