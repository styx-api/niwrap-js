// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LABEL_HISTO_METADATA: Metadata = {
    id: "643c58f8665ec46cd1322bb1c0c35f74ac658dc2.boutiques",
    name: "mri_label_histo",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLabelHistoParameters {
    "@type"?: "freesurfer/mri_label_histo";
    "t1_volume": InputPathType;
    "labeled_volume": InputPathType;
    "label": number;
    "output": string;
}
type MriLabelHistoParametersTagged = Required<Pick<MriLabelHistoParameters, '@type'>> & MriLabelHistoParameters;


/**
 * Output object returned when calling `MriLabelHistoParameters(...)`.
 *
 * @interface
 */
interface MriLabelHistoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Histogram of voxel values for the specified label.
     */
    histogram_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param t1_volume Input T1-weighted anatomical volume.
 * @param labeled_volume Input volume with labeled regions.
 * @param label Label of the region of interest.
 * @param output Output file for histogram.
 *
 * @returns Parameter dictionary
 */
function mri_label_histo_params(
    t1_volume: InputPathType,
    labeled_volume: InputPathType,
    label: number,
    output: string,
): MriLabelHistoParametersTagged {
    const params = {
        "@type": "freesurfer/mri_label_histo" as const,
        "t1_volume": t1_volume,
        "labeled_volume": labeled_volume,
        "label": label,
        "output": output,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_label_histo_cargs(
    params: MriLabelHistoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_label_histo");
    cargs.push(execution.inputFile((params["t1_volume"] ?? null)));
    cargs.push(execution.inputFile((params["labeled_volume"] ?? null)));
    cargs.push(String((params["label"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_label_histo_outputs(
    params: MriLabelHistoParameters,
    execution: Execution,
): MriLabelHistoOutputs {
    const ret: MriLabelHistoOutputs = {
        root: execution.outputFile("."),
        histogram_output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_label_histo
 *
 * Tool for creating a histogram of voxel values within a specified label.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLabelHistoOutputs`).
 */
function mri_label_histo_execute(
    params: MriLabelHistoParameters,
    runner: Runner | null = null,
): MriLabelHistoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LABEL_HISTO_METADATA);
    params = execution.params(params)
    const cargs = mri_label_histo_cargs(params, execution)
    const ret = mri_label_histo_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_label_histo
 *
 * Tool for creating a histogram of voxel values within a specified label.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param t1_volume Input T1-weighted anatomical volume.
 * @param labeled_volume Input volume with labeled regions.
 * @param label Label of the region of interest.
 * @param output Output file for histogram.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLabelHistoOutputs`).
 */
function mri_label_histo(
    t1_volume: InputPathType,
    labeled_volume: InputPathType,
    label: number,
    output: string,
    runner: Runner | null = null,
): MriLabelHistoOutputs {
    const params = mri_label_histo_params(t1_volume, labeled_volume, label, output)
    return mri_label_histo_execute(params, runner);
}


export {
      MRI_LABEL_HISTO_METADATA,
      MriLabelHistoOutputs,
      mri_label_histo,
      mri_label_histo_execute,
      mri_label_histo_params,
};
