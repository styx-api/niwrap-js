// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRFILTER_METADATA: Metadata = {
    id: "3bb2ab8375a99185acaeac0f9e608829bff091ac.boutiques",
    name: "mrfilter",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrfilterVariousStringParameters {
    "__STYXTYPE__": "VariousString";
    "obj": string;
}


interface MrfilterVariousFileParameters {
    "__STYXTYPE__": "VariousFile";
    "obj": InputPathType;
}


interface MrfilterConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface MrfilterParameters {
    "__STYXTYPE__": "mrfilter";
    "axes"?: Array<number> | null | undefined;
    "inverse": boolean;
    "magnitude": boolean;
    "centre_zero": boolean;
    "stdev"?: Array<number> | null | undefined;
    "magnitude_1": boolean;
    "scanner": boolean;
    "extent"?: Array<number> | null | undefined;
    "extent_1"?: Array<number> | null | undefined;
    "stdev_1"?: Array<number> | null | undefined;
    "fwhm"?: Array<number> | null | undefined;
    "extent_2"?: Array<number> | null | undefined;
    "zupper"?: number | null | undefined;
    "zlower"?: number | null | undefined;
    "bridge"?: number | null | undefined;
    "maskin"?: InputPathType | null | undefined;
    "maskout"?: string | null | undefined;
    "strides"?: MrfilterVariousStringParameters | MrfilterVariousFileParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrfilterConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "filter": string;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mrfilter": mrfilter_cargs,
        "VariousString": mrfilter_various_string_cargs,
        "VariousFile": mrfilter_various_file_cargs,
        "config": mrfilter_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mrfilter": mrfilter_outputs,
    };
    return outputsFuncs[t];
}


function mrfilter_various_string_params(
    obj: string,
): MrfilterVariousStringParameters {
    /**
     * Build parameters.
    
     * @param obj String object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


function mrfilter_various_string_cargs(
    params: MrfilterVariousStringParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


function mrfilter_various_file_params(
    obj: InputPathType,
): MrfilterVariousFileParameters {
    /**
     * Build parameters.
    
     * @param obj File object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


function mrfilter_various_file_cargs(
    params: MrfilterVariousFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


function mrfilter_config_params(
    key: string,
    value: string,
): MrfilterConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function mrfilter_config_cargs(
    params: MrfilterConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mrfilter(...)`.
 *
 * @interface
 */
interface MrfilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image.
     */
    output: OutputPathType;
    /**
     * Output a refined mask based on a spatially coherent region with normal intensity range. 
     */
    maskout: OutputPathType | null;
}


function mrfilter_params(
    input: InputPathType,
    filter: string,
    output: string,
    axes: Array<number> | null = null,
    inverse: boolean = false,
    magnitude: boolean = false,
    centre_zero: boolean = false,
    stdev: Array<number> | null = null,
    magnitude_1: boolean = false,
    scanner: boolean = false,
    extent: Array<number> | null = null,
    extent_1: Array<number> | null = null,
    stdev_1: Array<number> | null = null,
    fwhm: Array<number> | null = null,
    extent_2: Array<number> | null = null,
    zupper: number | null = null,
    zlower: number | null = null,
    bridge: number | null = null,
    maskin: InputPathType | null = null,
    maskout: string | null = null,
    strides: MrfilterVariousStringParameters | MrfilterVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrfilterConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrfilterParameters {
    /**
     * Build parameters.
    
     * @param input the input image.
     * @param filter the type of filter to be applied
     * @param output the output image.
     * @param axes the axes along which to apply the Fourier Transform. By default, the transform is applied along the three spatial axes. Provide as a comma-separate list of axis indices.
     * @param inverse apply the inverse FFT
     * @param magnitude output a magnitude image rather than a complex-valued image
     * @param centre_zero re-arrange the FFT results so that the zero-frequency component appears in the centre of the image, rather than at the edges
     * @param stdev the standard deviation of the Gaussian kernel used to smooth the input image (in mm). The image is smoothed to reduced large spurious gradients caused by noise. Use this option to override the default stdev of 1 voxel. This can be specified either as a single value to be used for all 3 axes, or as a comma-separated list of 3 values, one for each axis.
     * @param magnitude_1 output the gradient magnitude, rather than the default x,y,z components
     * @param scanner define the gradient with respect to the scanner coordinate frame of reference.
     * @param extent specify extent of median filtering neighbourhood in voxels. This can be specified either as a single value to be used for all 3 axes, or as a comma-separated list of 3 values, one for each axis (default: 3x3x3).
     * @param extent_1 specify extent of normalisation filtering neighbourhood in voxels. This can be specified either as a single value to be used for all 3 axes, or as a comma-separated list of 3 values, one for each axis (default: 3x3x3).
     * @param stdev_1 apply Gaussian smoothing with the specified standard deviation. The standard deviation is defined in mm (Default 1 voxel). This can be specified either as a single value to be used for all axes, or as a comma-separated list of the stdev for each axis.
     * @param fwhm apply Gaussian smoothing with the specified full-width half maximum. The FWHM is defined in mm (Default 1 voxel * 2.3548). This can be specified either as a single value to be used for all axes, or as a comma-separated list of the FWHM for each axis.
     * @param extent_2 specify the extent (width) of kernel size in voxels. This can be specified either as a single value to be used for all axes, or as a comma-separated list of the extent for each axis. The default extent is 2 * ceil(2.5 * stdev / voxel_size) - 1.
     * @param zupper define high intensity outliers: default: 2.5
     * @param zlower define low intensity outliers: default: 2.5
     * @param bridge number of voxels to gap to fill holes in mask: default: 4
     * @param maskin initial mask that defines the maximum spatial extent and the region from which to smaple the intensity range.
     * @param maskout Output a refined mask based on a spatially coherent region with normal intensity range.
     * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mrfilter" as const,
        "inverse": inverse,
        "magnitude": magnitude,
        "centre_zero": centre_zero,
        "magnitude_1": magnitude_1,
        "scanner": scanner,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "filter": filter,
        "output": output,
    };
    if (axes !== null) {
        params["axes"] = axes;
    }
    if (stdev !== null) {
        params["stdev"] = stdev;
    }
    if (extent !== null) {
        params["extent"] = extent;
    }
    if (extent_1 !== null) {
        params["extent_1"] = extent_1;
    }
    if (stdev_1 !== null) {
        params["stdev_1"] = stdev_1;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (extent_2 !== null) {
        params["extent_2"] = extent_2;
    }
    if (zupper !== null) {
        params["zupper"] = zupper;
    }
    if (zlower !== null) {
        params["zlower"] = zlower;
    }
    if (bridge !== null) {
        params["bridge"] = bridge;
    }
    if (maskin !== null) {
        params["maskin"] = maskin;
    }
    if (maskout !== null) {
        params["maskout"] = maskout;
    }
    if (strides !== null) {
        params["strides"] = strides;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function mrfilter_cargs(
    params: MrfilterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mrfilter");
    if ((params["axes"] ?? null) !== null) {
        cargs.push(
            "-axes",
            ...(params["axes"] ?? null).map(String)
        );
    }
    if ((params["inverse"] ?? null)) {
        cargs.push("-inverse");
    }
    if ((params["magnitude"] ?? null)) {
        cargs.push("-magnitude");
    }
    if ((params["centre_zero"] ?? null)) {
        cargs.push("-centre_zero");
    }
    if ((params["stdev"] ?? null) !== null) {
        cargs.push(
            "-stdev",
            (params["stdev"] ?? null).map(String).join(",")
        );
    }
    if ((params["magnitude_1"] ?? null)) {
        cargs.push("-magnitude");
    }
    if ((params["scanner"] ?? null)) {
        cargs.push("-scanner");
    }
    if ((params["extent"] ?? null) !== null) {
        cargs.push(
            "-extent",
            (params["extent"] ?? null).map(String).join(",")
        );
    }
    if ((params["extent_1"] ?? null) !== null) {
        cargs.push(
            "-extent",
            (params["extent_1"] ?? null).map(String).join(",")
        );
    }
    if ((params["stdev_1"] ?? null) !== null) {
        cargs.push(
            "-stdev",
            (params["stdev_1"] ?? null).map(String).join(",")
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "-fwhm",
            (params["fwhm"] ?? null).map(String).join(",")
        );
    }
    if ((params["extent_2"] ?? null) !== null) {
        cargs.push(
            "-extent",
            (params["extent_2"] ?? null).map(String).join(",")
        );
    }
    if ((params["zupper"] ?? null) !== null) {
        cargs.push(
            "-zupper",
            String((params["zupper"] ?? null))
        );
    }
    if ((params["zlower"] ?? null) !== null) {
        cargs.push(
            "-zlower",
            String((params["zlower"] ?? null))
        );
    }
    if ((params["bridge"] ?? null) !== null) {
        cargs.push(
            "-bridge",
            String((params["bridge"] ?? null))
        );
    }
    if ((params["maskin"] ?? null) !== null) {
        cargs.push(
            "-maskin",
            execution.inputFile((params["maskin"] ?? null))
        );
    }
    if ((params["maskout"] ?? null) !== null) {
        cargs.push(
            "-maskout",
            (params["maskout"] ?? null)
        );
    }
    if ((params["strides"] ?? null) !== null) {
        cargs.push(
            "-strides",
            ...dynCargs((params["strides"] ?? null).__STYXTYPE__)((params["strides"] ?? null), execution)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["filter"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


function mrfilter_outputs(
    params: MrfilterParameters,
    execution: Execution,
): MrfilterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrfilterOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
        maskout: ((params["maskout"] ?? null) !== null) ? execution.outputFile([(params["maskout"] ?? null)].join('')) : null,
    };
    return ret;
}


function mrfilter_execute(
    params: MrfilterParameters,
    execution: Execution,
): MrfilterOutputs {
    /**
     * Perform filtering operations on 3D / 4D MR images.
     * 
     * The available filters are: fft, gradient, median, smooth, normalise, zclean.
     * 
     * Each filter has its own unique set of optional parameters.
     * 
     * For 4D images, each 3D volume is processed independently.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrfilterOutputs`).
     */
    params = execution.params(params)
    const cargs = mrfilter_cargs(params, execution)
    const ret = mrfilter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mrfilter(
    input: InputPathType,
    filter: string,
    output: string,
    axes: Array<number> | null = null,
    inverse: boolean = false,
    magnitude: boolean = false,
    centre_zero: boolean = false,
    stdev: Array<number> | null = null,
    magnitude_1: boolean = false,
    scanner: boolean = false,
    extent: Array<number> | null = null,
    extent_1: Array<number> | null = null,
    stdev_1: Array<number> | null = null,
    fwhm: Array<number> | null = null,
    extent_2: Array<number> | null = null,
    zupper: number | null = null,
    zlower: number | null = null,
    bridge: number | null = null,
    maskin: InputPathType | null = null,
    maskout: string | null = null,
    strides: MrfilterVariousStringParameters | MrfilterVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrfilterConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrfilterOutputs {
    /**
     * Perform filtering operations on 3D / 4D MR images.
     * 
     * The available filters are: fft, gradient, median, smooth, normalise, zclean.
     * 
     * Each filter has its own unique set of optional parameters.
     * 
     * For 4D images, each 3D volume is processed independently.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param input the input image.
     * @param filter the type of filter to be applied
     * @param output the output image.
     * @param axes the axes along which to apply the Fourier Transform. By default, the transform is applied along the three spatial axes. Provide as a comma-separate list of axis indices.
     * @param inverse apply the inverse FFT
     * @param magnitude output a magnitude image rather than a complex-valued image
     * @param centre_zero re-arrange the FFT results so that the zero-frequency component appears in the centre of the image, rather than at the edges
     * @param stdev the standard deviation of the Gaussian kernel used to smooth the input image (in mm). The image is smoothed to reduced large spurious gradients caused by noise. Use this option to override the default stdev of 1 voxel. This can be specified either as a single value to be used for all 3 axes, or as a comma-separated list of 3 values, one for each axis.
     * @param magnitude_1 output the gradient magnitude, rather than the default x,y,z components
     * @param scanner define the gradient with respect to the scanner coordinate frame of reference.
     * @param extent specify extent of median filtering neighbourhood in voxels. This can be specified either as a single value to be used for all 3 axes, or as a comma-separated list of 3 values, one for each axis (default: 3x3x3).
     * @param extent_1 specify extent of normalisation filtering neighbourhood in voxels. This can be specified either as a single value to be used for all 3 axes, or as a comma-separated list of 3 values, one for each axis (default: 3x3x3).
     * @param stdev_1 apply Gaussian smoothing with the specified standard deviation. The standard deviation is defined in mm (Default 1 voxel). This can be specified either as a single value to be used for all axes, or as a comma-separated list of the stdev for each axis.
     * @param fwhm apply Gaussian smoothing with the specified full-width half maximum. The FWHM is defined in mm (Default 1 voxel * 2.3548). This can be specified either as a single value to be used for all axes, or as a comma-separated list of the FWHM for each axis.
     * @param extent_2 specify the extent (width) of kernel size in voxels. This can be specified either as a single value to be used for all axes, or as a comma-separated list of the extent for each axis. The default extent is 2 * ceil(2.5 * stdev / voxel_size) - 1.
     * @param zupper define high intensity outliers: default: 2.5
     * @param zlower define low intensity outliers: default: 2.5
     * @param bridge number of voxels to gap to fill holes in mask: default: 4
     * @param maskin initial mask that defines the maximum spatial extent and the region from which to smaple the intensity range.
     * @param maskout Output a refined mask based on a spatially coherent region with normal intensity range.
     * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrfilterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRFILTER_METADATA);
    const params = mrfilter_params(input, filter, output, axes, inverse, magnitude, centre_zero, stdev, magnitude_1, scanner, extent, extent_1, stdev_1, fwhm, extent_2, zupper, zlower, bridge, maskin, maskout, strides, info, quiet, debug, force, nthreads, config, help, version)
    return mrfilter_execute(params, execution);
}


export {
      MRFILTER_METADATA,
      MrfilterConfigParameters,
      MrfilterOutputs,
      MrfilterParameters,
      MrfilterVariousFileParameters,
      MrfilterVariousStringParameters,
      mrfilter,
      mrfilter_config_params,
      mrfilter_params,
      mrfilter_various_file_params,
      mrfilter_various_string_params,
};
