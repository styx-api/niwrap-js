// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABELS_INTERSECT_METADATA: Metadata = {
    id: "5d639bbfd162e906e9059ca104ed147ca988037e.boutiques",
    name: "labels_intersect",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LabelsIntersectParameters {
    "@type"?: "freesurfer/labels_intersect";
    "label1": InputPathType;
    "label2": InputPathType;
    "outputname": string;
}
type LabelsIntersectParametersTagged = Required<Pick<LabelsIntersectParameters, '@type'>> & LabelsIntersectParameters;


/**
 * Output object returned when calling `LabelsIntersectParameters(...)`.
 *
 * @interface
 */
interface LabelsIntersectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting intersected label file
     */
    output_label: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label1 First input label file
 * @param label2 Second input label file
 * @param outputname Output label file name
 *
 * @returns Parameter dictionary
 */
function labels_intersect_params(
    label1: InputPathType,
    label2: InputPathType,
    outputname: string,
): LabelsIntersectParametersTagged {
    const params = {
        "@type": "freesurfer/labels_intersect" as const,
        "label1": label1,
        "label2": label2,
        "outputname": outputname,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function labels_intersect_cargs(
    params: LabelsIntersectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("labels_intersect");
    cargs.push(execution.inputFile((params["label1"] ?? null)));
    cargs.push(execution.inputFile((params["label2"] ?? null)));
    cargs.push((params["outputname"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function labels_intersect_outputs(
    params: LabelsIntersectParameters,
    execution: Execution,
): LabelsIntersectOutputs {
    const ret: LabelsIntersectOutputs = {
        root: execution.outputFile("."),
        output_label: execution.outputFile([(params["outputname"] ?? null)].join('')),
    };
    return ret;
}


/**
 * labels_intersect
 *
 * Tool to find the intersection of two label files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelsIntersectOutputs`).
 */
function labels_intersect_execute(
    params: LabelsIntersectParameters,
    runner: Runner | null = null,
): LabelsIntersectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABELS_INTERSECT_METADATA);
    params = execution.params(params)
    const cargs = labels_intersect_cargs(params, execution)
    const ret = labels_intersect_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * labels_intersect
 *
 * Tool to find the intersection of two label files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param label1 First input label file
 * @param label2 Second input label file
 * @param outputname Output label file name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelsIntersectOutputs`).
 */
function labels_intersect(
    label1: InputPathType,
    label2: InputPathType,
    outputname: string,
    runner: Runner | null = null,
): LabelsIntersectOutputs {
    const params = labels_intersect_params(label1, label2, outputname)
    return labels_intersect_execute(params, runner);
}


export {
      LABELS_INTERSECT_METADATA,
      LabelsIntersectOutputs,
      labels_intersect,
      labels_intersect_execute,
      labels_intersect_params,
};
