// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CLUSTER2HTML_METADATA: Metadata = {
    id: "925e8e0be1f7da665d4183d8334764fd95443ece.boutiques",
    name: "cluster2html",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Cluster2htmlParameters {
    "@type"?: "fsl/cluster2html";
    "featdir": string;
    "inroot": string;
    "std_flag": boolean;
}
type Cluster2htmlParametersTagged = Required<Pick<Cluster2htmlParameters, '@type'>> & Cluster2htmlParameters;


/**
 * Output object returned when calling `Cluster2htmlParameters(...)`.
 *
 * @interface
 */
interface Cluster2htmlOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param featdir Directory containing the FEAT analysis results
 * @param inroot Root name for cluster files (should not contain the _std extension)
 * @param std_flag Indicate that the input files contain the _std extension
 *
 * @returns Parameter dictionary
 */
function cluster2html_params(
    featdir: string,
    inroot: string,
    std_flag: boolean = false,
): Cluster2htmlParametersTagged {
    const params = {
        "@type": "fsl/cluster2html" as const,
        "featdir": featdir,
        "inroot": inroot,
        "std_flag": std_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cluster2html_cargs(
    params: Cluster2htmlParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("cluster2html");
    cargs.push((params["featdir"] ?? null));
    cargs.push((params["inroot"] ?? null));
    if ((params["std_flag"] ?? false)) {
        cargs.push("-std");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cluster2html_outputs(
    params: Cluster2htmlParameters,
    execution: Execution,
): Cluster2htmlOutputs {
    const ret: Cluster2htmlOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * cluster2html
 *
 * Generates an HTML report from cluster-based FEAT analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Cluster2htmlOutputs`).
 */
function cluster2html_execute(
    params: Cluster2htmlParameters,
    runner: Runner | null = null,
): Cluster2htmlOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CLUSTER2HTML_METADATA);
    params = execution.params(params)
    const cargs = cluster2html_cargs(params, execution)
    const ret = cluster2html_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cluster2html
 *
 * Generates an HTML report from cluster-based FEAT analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param featdir Directory containing the FEAT analysis results
 * @param inroot Root name for cluster files (should not contain the _std extension)
 * @param std_flag Indicate that the input files contain the _std extension
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Cluster2htmlOutputs`).
 */
function cluster2html(
    featdir: string,
    inroot: string,
    std_flag: boolean = false,
    runner: Runner | null = null,
): Cluster2htmlOutputs {
    const params = cluster2html_params(featdir, inroot, std_flag)
    return cluster2html_execute(params, runner);
}


export {
      CLUSTER2HTML_METADATA,
      Cluster2htmlOutputs,
      cluster2html,
      cluster2html_execute,
      cluster2html_params,
};
