// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERT_TO_JPG_METADATA: Metadata = {
    id: "05ba9d9a81340f45633926fc4c293fdf619a95ab.boutiques",
    name: "ConvertToJpg",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface ConvertToJpgParameters {
    "@type": "ants.ConvertToJpg";
    "infile": InputPathType;
    "outfile": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.ConvertToJpg": convert_to_jpg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.ConvertToJpg": convert_to_jpg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `convert_to_jpg(...)`.
 *
 * @interface
 */
interface ConvertToJpgOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The converted JPG image.
     */
    output_jpg: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile The input file in NIfTI format.
 * @param outfile The output file in JPG format.
 *
 * @returns Parameter dictionary
 */
function convert_to_jpg_params(
    infile: InputPathType,
    outfile: string,
): ConvertToJpgParameters {
    const params = {
        "@type": "ants.ConvertToJpg" as const,
        "infile": infile,
        "outfile": outfile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_to_jpg_cargs(
    params: ConvertToJpgParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ConvertToJpg");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function convert_to_jpg_outputs(
    params: ConvertToJpgParameters,
    execution: Execution,
): ConvertToJpgOutputs {
    const ret: ConvertToJpgOutputs = {
        root: execution.outputFile("."),
        output_jpg: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ConvertToJpg
 *
 * A tool to convert NIfTI images to JPG format.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertToJpgOutputs`).
 */
function convert_to_jpg_execute(
    params: ConvertToJpgParameters,
    runner: Runner | null = null,
): ConvertToJpgOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERT_TO_JPG_METADATA);
    params = execution.params(params)
    const cargs = convert_to_jpg_cargs(params, execution)
    const ret = convert_to_jpg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ConvertToJpg
 *
 * A tool to convert NIfTI images to JPG format.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param infile The input file in NIfTI format.
 * @param outfile The output file in JPG format.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertToJpgOutputs`).
 */
function convert_to_jpg(
    infile: InputPathType,
    outfile: string,
    runner: Runner | null = null,
): ConvertToJpgOutputs {
    const params = convert_to_jpg_params(infile, outfile)
    return convert_to_jpg_execute(params, runner);
}


export {
      CONVERT_TO_JPG_METADATA,
      ConvertToJpgOutputs,
      ConvertToJpgParameters,
      convert_to_jpg,
      convert_to_jpg_execute,
      convert_to_jpg_params,
};
