// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FIT_BIAS_METADATA: Metadata = {
    id: "1eacfe3c45c52ee2621a3e01000cfc1b2f3a0ed6.boutiques",
    name: "mri_fit_bias",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFitBiasParameters {
    "@type": "freesurfer.mri_fit_bias";
    "inputvol": InputPathType;
    "lpf_cutoff"?: number | null | undefined;
    "segvol": InputPathType;
    "maskvol": InputPathType;
    "outvol": string;
    "biasfield": string;
    "dctvol"?: string | null | undefined;
    "threshold"?: number | null | undefined;
    "nerode"?: number | null | undefined;
    "nthreads"?: number | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_fit_bias": mri_fit_bias_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_fit_bias": mri_fit_bias_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_fit_bias(...)`.
 *
 * @interface
 */
interface MriFitBiasOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Bias corrected output volume
     */
    corrected_output: OutputPathType;
    /**
     * Generated bias field
     */
    generated_bias_field: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param inputvol Input volume for intensity normalization
 * @param segvol Segmentation volume to define WM and Cortex (e.g., aseg.presurf.mgz)
 * @param maskvol Mask volume; zero everything outside of the mask (e.g., brainmask.mgz)
 * @param outvol Bias corrected output volume
 * @param biasfield Output bias field
 * @param lpf_cutoff Low-pass filter cutoff in mm (default is 23.000000)
 * @param dctvol DCT fields file for debugging
 * @param threshold Mask out anything <= threshold value
 * @param nerode 3D erode segmentation by n steps (default is 1)
 * @param nthreads Number of threads to use
 * @param debug Turn on debugging mode
 * @param checkopts Don't run anything, just check options and exit
 *
 * @returns Parameter dictionary
 */
function mri_fit_bias_params(
    inputvol: InputPathType,
    segvol: InputPathType,
    maskvol: InputPathType,
    outvol: string,
    biasfield: string,
    lpf_cutoff: number | null = 23.0,
    dctvol: string | null = null,
    threshold: number | null = null,
    nerode: number | null = 1,
    nthreads: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
): MriFitBiasParameters {
    const params = {
        "@type": "freesurfer.mri_fit_bias" as const,
        "inputvol": inputvol,
        "segvol": segvol,
        "maskvol": maskvol,
        "outvol": outvol,
        "biasfield": biasfield,
        "debug": debug,
        "checkopts": checkopts,
    };
    if (lpf_cutoff !== null) {
        params["lpf_cutoff"] = lpf_cutoff;
    }
    if (dctvol !== null) {
        params["dctvol"] = dctvol;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (nerode !== null) {
        params["nerode"] = nerode;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_fit_bias_cargs(
    params: MriFitBiasParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_fit_bias");
    cargs.push(
        "--i",
        execution.inputFile((params["inputvol"] ?? null))
    );
    if ((params["lpf_cutoff"] ?? null) !== null) {
        cargs.push(
            "--cutoff",
            String((params["lpf_cutoff"] ?? null))
        );
    }
    cargs.push(
        "--seg",
        execution.inputFile((params["segvol"] ?? null))
    );
    cargs.push(
        "--mask",
        execution.inputFile((params["maskvol"] ?? null))
    );
    cargs.push(
        "--o",
        (params["outvol"] ?? null)
    );
    cargs.push(
        "--bias",
        (params["biasfield"] ?? null)
    );
    if ((params["dctvol"] ?? null) !== null) {
        cargs.push(
            "--dct",
            (params["dctvol"] ?? null)
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["nerode"] ?? null) !== null) {
        cargs.push(
            "--erode",
            String((params["nerode"] ?? null))
        );
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_fit_bias_outputs(
    params: MriFitBiasParameters,
    execution: Execution,
): MriFitBiasOutputs {
    const ret: MriFitBiasOutputs = {
        root: execution.outputFile("."),
        corrected_output: execution.outputFile([(params["outvol"] ?? null)].join('')),
        generated_bias_field: execution.outputFile([(params["biasfield"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_fit_bias
 *
 * A tool for intensity normalization and bias correction in MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFitBiasOutputs`).
 */
function mri_fit_bias_execute(
    params: MriFitBiasParameters,
    runner: Runner | null = null,
): MriFitBiasOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FIT_BIAS_METADATA);
    params = execution.params(params)
    const cargs = mri_fit_bias_cargs(params, execution)
    const ret = mri_fit_bias_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_fit_bias
 *
 * A tool for intensity normalization and bias correction in MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param inputvol Input volume for intensity normalization
 * @param segvol Segmentation volume to define WM and Cortex (e.g., aseg.presurf.mgz)
 * @param maskvol Mask volume; zero everything outside of the mask (e.g., brainmask.mgz)
 * @param outvol Bias corrected output volume
 * @param biasfield Output bias field
 * @param lpf_cutoff Low-pass filter cutoff in mm (default is 23.000000)
 * @param dctvol DCT fields file for debugging
 * @param threshold Mask out anything <= threshold value
 * @param nerode 3D erode segmentation by n steps (default is 1)
 * @param nthreads Number of threads to use
 * @param debug Turn on debugging mode
 * @param checkopts Don't run anything, just check options and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFitBiasOutputs`).
 */
function mri_fit_bias(
    inputvol: InputPathType,
    segvol: InputPathType,
    maskvol: InputPathType,
    outvol: string,
    biasfield: string,
    lpf_cutoff: number | null = 23.0,
    dctvol: string | null = null,
    threshold: number | null = null,
    nerode: number | null = 1,
    nthreads: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    runner: Runner | null = null,
): MriFitBiasOutputs {
    const params = mri_fit_bias_params(inputvol, segvol, maskvol, outvol, biasfield, lpf_cutoff, dctvol, threshold, nerode, nthreads, debug, checkopts)
    return mri_fit_bias_execute(params, runner);
}


export {
      MRI_FIT_BIAS_METADATA,
      MriFitBiasOutputs,
      MriFitBiasParameters,
      mri_fit_bias,
      mri_fit_bias_execute,
      mri_fit_bias_params,
};
