// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__CLUST_EXP_RUN_SHINY_METADATA: Metadata = {
    id: "fda3a7d2925f29a17f3a4aecaecf82a67d6aa1fc.boutiques",
    name: "@ClustExp_run_shiny",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VClustExpRunShinyParameters {
    "__STYXTYPE__": "@ClustExp_run_shiny";
    "directory": string;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@ClustExp_run_shiny": v__clust_exp_run_shiny_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__clust_exp_run_shiny(...)`.
 *
 * @interface
 */
interface VClustExpRunShinyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__clust_exp_run_shiny_params(
    directory: string,
    help: boolean = false,
): VClustExpRunShinyParameters {
    /**
     * Build parameters.
    
     * @param directory Folder created by ClustExp_StatParse.py
     * @param help Show help message
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@ClustExp_run_shiny" as const,
        "directory": directory,
        "help": help,
    };
    return params;
}


function v__clust_exp_run_shiny_cargs(
    params: VClustExpRunShinyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@ClustExp_run_shiny");
    cargs.push((params["directory"] ?? null));
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function v__clust_exp_run_shiny_outputs(
    params: VClustExpRunShinyParameters,
    execution: Execution,
): VClustExpRunShinyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VClustExpRunShinyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__clust_exp_run_shiny_execute(
    params: VClustExpRunShinyParameters,
    execution: Execution,
): VClustExpRunShinyOutputs {
    /**
     * Launch a shiny app that was created by ClustExp_StatParse.py.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VClustExpRunShinyOutputs`).
     */
    params = execution.params(params)
    const cargs = v__clust_exp_run_shiny_cargs(params, execution)
    const ret = v__clust_exp_run_shiny_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__clust_exp_run_shiny(
    directory: string,
    help: boolean = false,
    runner: Runner | null = null,
): VClustExpRunShinyOutputs {
    /**
     * Launch a shiny app that was created by ClustExp_StatParse.py.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param directory Folder created by ClustExp_StatParse.py
     * @param help Show help message
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VClustExpRunShinyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__CLUST_EXP_RUN_SHINY_METADATA);
    const params = v__clust_exp_run_shiny_params(directory, help)
    return v__clust_exp_run_shiny_execute(params, execution);
}


export {
      VClustExpRunShinyOutputs,
      VClustExpRunShinyParameters,
      V__CLUST_EXP_RUN_SHINY_METADATA,
      v__clust_exp_run_shiny,
      v__clust_exp_run_shiny_params,
};
