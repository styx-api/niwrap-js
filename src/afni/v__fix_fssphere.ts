// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__FIX_FSSPHERE_METADATA: Metadata = {
    id: "f74e39104dce4bf48131b40121e83b0669d1fac9.boutiques",
    name: "@fix_FSsphere",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VFixFssphereParameters {
    "@type": "afni.@fix_FSsphere";
    "spec_file": InputPathType;
    "sphere_file": InputPathType;
    "num_iterations"?: number | null | undefined;
    "extent_lim"?: number | null | undefined;
    "project_first": boolean;
    "keep_temp": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@fix_FSsphere": v__fix_fssphere_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@fix_FSsphere": v__fix_fssphere_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__fix_fssphere(...)`.
 *
 * @interface
 */
interface VFixFssphereOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected surface
     */
    corrected_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param spec_file Spec file
 * @param sphere_file SPHERE.asc is the sphere to be used
 * @param num_iterations Number of local smoothing operations. Default is 3000
 * @param extent_lim Extent, in mm, by which troubled sections are fattened. Default is 6
 * @param project_first Project to a sphere, before smoothing. Default is 0
 * @param keep_temp Keep temporary files
 *
 * @returns Parameter dictionary
 */
function v__fix_fssphere_params(
    spec_file: InputPathType,
    sphere_file: InputPathType,
    num_iterations: number | null = null,
    extent_lim: number | null = null,
    project_first: boolean = false,
    keep_temp: boolean = false,
): VFixFssphereParameters {
    const params = {
        "@type": "afni.@fix_FSsphere" as const,
        "spec_file": spec_file,
        "sphere_file": sphere_file,
        "project_first": project_first,
        "keep_temp": keep_temp,
    };
    if (num_iterations !== null) {
        params["num_iterations"] = num_iterations;
    }
    if (extent_lim !== null) {
        params["extent_lim"] = extent_lim;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__fix_fssphere_cargs(
    params: VFixFssphereParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@fix_FSsphere");
    cargs.push(
        "-spec",
        execution.inputFile((params["spec_file"] ?? null))
    );
    cargs.push(
        "-sphere",
        execution.inputFile((params["sphere_file"] ?? null))
    );
    if ((params["num_iterations"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["num_iterations"] ?? null))
        );
    }
    if ((params["extent_lim"] ?? null) !== null) {
        cargs.push(
            "-lim",
            String((params["extent_lim"] ?? null))
        );
    }
    if ((params["project_first"] ?? null)) {
        cargs.push("-project_first");
    }
    if ((params["keep_temp"] ?? null)) {
        cargs.push("-keep_temp");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__fix_fssphere_outputs(
    params: VFixFssphereParameters,
    execution: Execution,
): VFixFssphereOutputs {
    const ret: VFixFssphereOutputs = {
        root: execution.outputFile("."),
        corrected_surface: execution.outputFile(["[SPHERE]_fxd.asc"].join('')),
    };
    return ret;
}


/**
 * Tool for fixing errors in FreeSurfer spherical surfaces.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VFixFssphereOutputs`).
 */
function v__fix_fssphere_execute(
    params: VFixFssphereParameters,
    execution: Execution,
): VFixFssphereOutputs {
    params = execution.params(params)
    const cargs = v__fix_fssphere_cargs(params, execution)
    const ret = v__fix_fssphere_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for fixing errors in FreeSurfer spherical surfaces.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param spec_file Spec file
 * @param sphere_file SPHERE.asc is the sphere to be used
 * @param num_iterations Number of local smoothing operations. Default is 3000
 * @param extent_lim Extent, in mm, by which troubled sections are fattened. Default is 6
 * @param project_first Project to a sphere, before smoothing. Default is 0
 * @param keep_temp Keep temporary files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VFixFssphereOutputs`).
 */
function v__fix_fssphere(
    spec_file: InputPathType,
    sphere_file: InputPathType,
    num_iterations: number | null = null,
    extent_lim: number | null = null,
    project_first: boolean = false,
    keep_temp: boolean = false,
    runner: Runner | null = null,
): VFixFssphereOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__FIX_FSSPHERE_METADATA);
    const params = v__fix_fssphere_params(spec_file, sphere_file, num_iterations, extent_lim, project_first, keep_temp)
    return v__fix_fssphere_execute(params, execution);
}


export {
      VFixFssphereOutputs,
      VFixFssphereParameters,
      V__FIX_FSSPHERE_METADATA,
      v__fix_fssphere,
      v__fix_fssphere_cargs,
      v__fix_fssphere_execute,
      v__fix_fssphere_outputs,
      v__fix_fssphere_params,
};
