// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SBTIV_METADATA: Metadata = {
    id: "48b2c4316f4126f05735de6d4b50fba4dbe07310.boutiques",
    name: "sbtiv",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SbtivParameters {
    "__STYXTYPE__": "sbtiv";
    "input_file": InputPathType;
    "output_file"?: string | null | undefined;
    "labels_file"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sbtiv": sbtiv_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "sbtiv": sbtiv_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sbtiv(...)`.
 *
 * @interface
 */
interface SbtivOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Intracranial stats output file.
     */
    out_file: OutputPathType | null;
}


function sbtiv_params(
    input_file: InputPathType,
    output_file: string | null = null,
    labels_file: InputPathType | null = null,
): SbtivParameters {
    /**
     * Build parameters.
    
     * @param input_file Volume stats input file.
     * @param output_file Intracranial stats output file.
     * @param labels_file File containing a list of intracranial structure labelnames to include in the calculation
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sbtiv" as const,
        "input_file": input_file,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    if (labels_file !== null) {
        params["labels_file"] = labels_file;
    }
    return params;
}


function sbtiv_cargs(
    params: SbtivParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sbtiv");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_file"] ?? null)
        );
    }
    if ((params["labels_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["labels_file"] ?? null))
        );
    }
    return cargs;
}


function sbtiv_outputs(
    params: SbtivParameters,
    execution: Execution,
): SbtivOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SbtivOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function sbtiv_execute(
    params: SbtivParameters,
    execution: Execution,
): SbtivOutputs {
    /**
     * Tool to calculate the total intracranial volume of a subject by summing individual volumes computed by samseg.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SbtivOutputs`).
     */
    params = execution.params(params)
    const cargs = sbtiv_cargs(params, execution)
    const ret = sbtiv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sbtiv(
    input_file: InputPathType,
    output_file: string | null = null,
    labels_file: InputPathType | null = null,
    runner: Runner | null = null,
): SbtivOutputs {
    /**
     * Tool to calculate the total intracranial volume of a subject by summing individual volumes computed by samseg.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Volume stats input file.
     * @param output_file Intracranial stats output file.
     * @param labels_file File containing a list of intracranial structure labelnames to include in the calculation
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SbtivOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SBTIV_METADATA);
    const params = sbtiv_params(input_file, output_file, labels_file)
    return sbtiv_execute(params, execution);
}


export {
      SBTIV_METADATA,
      SbtivOutputs,
      SbtivParameters,
      sbtiv,
      sbtiv_params,
};
