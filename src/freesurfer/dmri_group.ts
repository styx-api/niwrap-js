// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_GROUP_METADATA: Metadata = {
    id: "93e524a844ab2f832a6731597f76dcfcfbb61112.boutiques",
    name: "dmri_group",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriGroupParameters {
    "@type": "freesurfer.dmri_group";
    "input_list": InputPathType;
    "reference_volume": InputPathType;
    "output_base": string;
    "no_interpolation": boolean;
    "sections_num"?: number | null | undefined;
    "debug_mode": boolean;
    "check_options": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_group": dmri_group_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_group(...)`.
 *
 * @interface
 */
interface DmriGroupOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_list Text file with list of individual inputs
 * @param reference_volume Reference volume for output path
 * @param output_base Base name of output stats files
 * @param no_interpolation Do not attempt to interpolate along-tract measures (Assume that subjects are sampled at equivalent positions)
 * @param sections_num Divide the pathway into a number of sections and output average measures for each section
 * @param debug_mode Turn on debugging
 * @param check_options Don't run anything, just check options and exit
 *
 * @returns Parameter dictionary
 */
function dmri_group_params(
    input_list: InputPathType,
    reference_volume: InputPathType,
    output_base: string,
    no_interpolation: boolean = false,
    sections_num: number | null = null,
    debug_mode: boolean = false,
    check_options: boolean = false,
): DmriGroupParameters {
    const params = {
        "@type": "freesurfer.dmri_group" as const,
        "input_list": input_list,
        "reference_volume": reference_volume,
        "output_base": output_base,
        "no_interpolation": no_interpolation,
        "debug_mode": debug_mode,
        "check_options": check_options,
    };
    if (sections_num !== null) {
        params["sections_num"] = sections_num;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_group_cargs(
    params: DmriGroupParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_group");
    cargs.push(
        "--list",
        execution.inputFile((params["input_list"] ?? null))
    );
    cargs.push(
        "--ref",
        execution.inputFile((params["reference_volume"] ?? null))
    );
    cargs.push(
        "--out",
        (params["output_base"] ?? null)
    );
    if ((params["no_interpolation"] ?? null)) {
        cargs.push("--nointerp");
    }
    if ((params["sections_num"] ?? null) !== null) {
        cargs.push(
            "--sec",
            String((params["sections_num"] ?? null))
        );
    }
    if ((params["debug_mode"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_options"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_group_outputs(
    params: DmriGroupParameters,
    execution: Execution,
): DmriGroupOutputs {
    const ret: DmriGroupOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * dmri_group
 *
 * A tool to process and analyze diffusion MRI group data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriGroupOutputs`).
 */
function dmri_group_execute(
    params: DmriGroupParameters,
    runner: Runner | null = null,
): DmriGroupOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_GROUP_METADATA);
    params = execution.params(params)
    const cargs = dmri_group_cargs(params, execution)
    const ret = dmri_group_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_group
 *
 * A tool to process and analyze diffusion MRI group data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_list Text file with list of individual inputs
 * @param reference_volume Reference volume for output path
 * @param output_base Base name of output stats files
 * @param no_interpolation Do not attempt to interpolate along-tract measures (Assume that subjects are sampled at equivalent positions)
 * @param sections_num Divide the pathway into a number of sections and output average measures for each section
 * @param debug_mode Turn on debugging
 * @param check_options Don't run anything, just check options and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriGroupOutputs`).
 */
function dmri_group(
    input_list: InputPathType,
    reference_volume: InputPathType,
    output_base: string,
    no_interpolation: boolean = false,
    sections_num: number | null = null,
    debug_mode: boolean = false,
    check_options: boolean = false,
    runner: Runner | null = null,
): DmriGroupOutputs {
    const params = dmri_group_params(input_list, reference_volume, output_base, no_interpolation, sections_num, debug_mode, check_options)
    return dmri_group_execute(params, runner);
}


export {
      DMRI_GROUP_METADATA,
      DmriGroupOutputs,
      DmriGroupParameters,
      dmri_group,
      dmri_group_execute,
      dmri_group_params,
};
