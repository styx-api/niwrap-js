// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_PERIODOGRAM_METADATA: Metadata = {
    id: "6103fc4ec1736b577ce1d3b54eaf5ff203d3fbf7.boutiques",
    name: "3dPeriodogram",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dPeriodogramParameters {
    "@type": "afni.3dPeriodogram";
    "prefix"?: string | null | undefined;
    "taper"?: number | null | undefined;
    "nfft"?: number | null | undefined;
    "dataset": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dPeriodogram": v_3d_periodogram_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dPeriodogram": v_3d_periodogram_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_periodogram(...)`.
 *
 * @interface
 */
interface V3dPeriodogramOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset header file
     */
    output_header: OutputPathType | null;
    /**
     * Output dataset brick file
     */
    output_brick: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dataset Input dataset
 * @param prefix Prefix for the output dataset
 * @param taper Fraction of data to taper
 * @param nfft Set FFT length to a specific number of points
 *
 * @returns Parameter dictionary
 */
function v_3d_periodogram_params(
    dataset: InputPathType,
    prefix: string | null = null,
    taper: number | null = null,
    nfft: number | null = null,
): V3dPeriodogramParameters {
    const params = {
        "@type": "afni.3dPeriodogram" as const,
        "dataset": dataset,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (taper !== null) {
        params["taper"] = taper;
    }
    if (nfft !== null) {
        params["nfft"] = nfft;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_periodogram_cargs(
    params: V3dPeriodogramParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dPeriodogram");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["taper"] ?? null) !== null) {
        cargs.push(
            "-taper",
            String((params["taper"] ?? null))
        );
    }
    if ((params["nfft"] ?? null) !== null) {
        cargs.push(
            "-nfft",
            String((params["nfft"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_periodogram_outputs(
    params: V3dPeriodogramParameters,
    execution: Execution,
): V3dPeriodogramOutputs {
    const ret: V3dPeriodogramOutputs = {
        root: execution.outputFile("."),
        output_header: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".HEAD"].join('')) : null,
        output_brick: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * 3dPeriodogram
 *
 * Computes the periodogram of each voxel time series. The periodogram is a crude estimate of the power spectrum.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dPeriodogramOutputs`).
 */
function v_3d_periodogram_execute(
    params: V3dPeriodogramParameters,
    runner: Runner | null = null,
): V3dPeriodogramOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_PERIODOGRAM_METADATA);
    params = execution.params(params)
    const cargs = v_3d_periodogram_cargs(params, execution)
    const ret = v_3d_periodogram_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dPeriodogram
 *
 * Computes the periodogram of each voxel time series. The periodogram is a crude estimate of the power spectrum.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input dataset
 * @param prefix Prefix for the output dataset
 * @param taper Fraction of data to taper
 * @param nfft Set FFT length to a specific number of points
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dPeriodogramOutputs`).
 */
function v_3d_periodogram(
    dataset: InputPathType,
    prefix: string | null = null,
    taper: number | null = null,
    nfft: number | null = null,
    runner: Runner | null = null,
): V3dPeriodogramOutputs {
    const params = v_3d_periodogram_params(dataset, prefix, taper, nfft)
    return v_3d_periodogram_execute(params, runner);
}


export {
      V3dPeriodogramOutputs,
      V3dPeriodogramParameters,
      V_3D_PERIODOGRAM_METADATA,
      v_3d_periodogram,
      v_3d_periodogram_execute,
      v_3d_periodogram_params,
};
