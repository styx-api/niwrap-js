// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ROIGROW_METADATA: Metadata = {
    id: "f4aa7a593eb763743bac7b66d6cbfc7d7a8e1e49.boutiques",
    name: "ROIgrow",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface RoigrowParameters {
    "__STYXTYPE__": "ROIgrow";
    "input_surface": string;
    "roi_labels": string;
    "lim_distance": number;
    "output_prefix"?: string | null | undefined;
    "full_list": boolean;
    "grow_from_edge": boolean;
    "insphere_diameter"?: number | null | undefined;
    "inbox_edges"?: Array<number> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "ROIgrow": roigrow_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "ROIgrow": roigrow_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `roigrow(...)`.
 *
 * @interface
 */
interface RoigrowOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * 1D output dataset.
     */
    output_file: OutputPathType | null;
}


function roigrow_params(
    input_surface: string,
    roi_labels: string,
    lim_distance: number,
    output_prefix: string | null = null,
    full_list: boolean = false,
    grow_from_edge: boolean = false,
    insphere_diameter: number | null = null,
    inbox_edges: Array<number> | null = null,
): RoigrowParameters {
    /**
     * Build parameters.
    
     * @param input_surface Specify input surface. You can also use -t* and -spec and -surf methods to input surfaces.
     * @param roi_labels Data column containing integer labels of ROIs. Each integer label gets grown separately.
     * @param lim_distance Distance to cover from each node. The units of LIM are those of the surface's node coordinates. Distances are calculated along the surface's mesh.
     * @param output_prefix Prefix of 1D output dataset. Default is ROIgrow
     * @param full_list Output a row for each node on the surface. Nodes not in the grown ROI, receive a 0 for a label. This option is ONLY for use with -roi_labels.
     * @param grow_from_edge Grow ROIs from their edges rather than the brute force default. This might make the program faster on large ROIs and large surfaces.
     * @param insphere_diameter Diameter of the sphere inside which nodes are added instead of growing along the surface.
     * @param inbox_edges Use a box of edge widths E1, E2, E3 instead of DIA.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ROIgrow" as const,
        "input_surface": input_surface,
        "roi_labels": roi_labels,
        "lim_distance": lim_distance,
        "full_list": full_list,
        "grow_from_edge": grow_from_edge,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (insphere_diameter !== null) {
        params["insphere_diameter"] = insphere_diameter;
    }
    if (inbox_edges !== null) {
        params["inbox_edges"] = inbox_edges;
    }
    return params;
}


function roigrow_cargs(
    params: RoigrowParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("ROIgrow");
    cargs.push(
        "-i_TYPE",
        (params["input_surface"] ?? null)
    );
    cargs.push(
        "-roi_labels",
        (params["roi_labels"] ?? null)
    );
    cargs.push(
        "-lim",
        String((params["lim_distance"] ?? null))
    );
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["full_list"] ?? null)) {
        cargs.push("-full_list");
    }
    if ((params["grow_from_edge"] ?? null)) {
        cargs.push("-grow_from_edge");
    }
    if ((params["insphere_diameter"] ?? null) !== null) {
        cargs.push(
            "-insphere",
            String((params["insphere_diameter"] ?? null))
        );
    }
    if ((params["inbox_edges"] ?? null) !== null) {
        cargs.push(
            "-inbox",
            ...(params["inbox_edges"] ?? null).map(String)
        );
    }
    return cargs;
}


function roigrow_outputs(
    params: RoigrowParameters,
    execution: Execution,
): RoigrowOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RoigrowOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


function roigrow_execute(
    params: RoigrowParameters,
    execution: Execution,
): RoigrowOutputs {
    /**
     * A program to expand an ROI on the surface.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RoigrowOutputs`).
     */
    params = execution.params(params)
    const cargs = roigrow_cargs(params, execution)
    const ret = roigrow_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function roigrow(
    input_surface: string,
    roi_labels: string,
    lim_distance: number,
    output_prefix: string | null = null,
    full_list: boolean = false,
    grow_from_edge: boolean = false,
    insphere_diameter: number | null = null,
    inbox_edges: Array<number> | null = null,
    runner: Runner | null = null,
): RoigrowOutputs {
    /**
     * A program to expand an ROI on the surface.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_surface Specify input surface. You can also use -t* and -spec and -surf methods to input surfaces.
     * @param roi_labels Data column containing integer labels of ROIs. Each integer label gets grown separately.
     * @param lim_distance Distance to cover from each node. The units of LIM are those of the surface's node coordinates. Distances are calculated along the surface's mesh.
     * @param output_prefix Prefix of 1D output dataset. Default is ROIgrow
     * @param full_list Output a row for each node on the surface. Nodes not in the grown ROI, receive a 0 for a label. This option is ONLY for use with -roi_labels.
     * @param grow_from_edge Grow ROIs from their edges rather than the brute force default. This might make the program faster on large ROIs and large surfaces.
     * @param insphere_diameter Diameter of the sphere inside which nodes are added instead of growing along the surface.
     * @param inbox_edges Use a box of edge widths E1, E2, E3 instead of DIA.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RoigrowOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ROIGROW_METADATA);
    const params = roigrow_params(input_surface, roi_labels, lim_distance, output_prefix, full_list, grow_from_edge, insphere_diameter, inbox_edges)
    return roigrow_execute(params, execution);
}


export {
      ROIGROW_METADATA,
      RoigrowOutputs,
      RoigrowParameters,
      roigrow,
      roigrow_params,
};
