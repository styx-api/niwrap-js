// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CREATE_T2COMBINED_METADATA: Metadata = {
    id: "59237e7a370479a59f7c6f4d5c7258eeec07c44d.boutiques",
    name: "mri_create_t2combined",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCreateT2combinedParameters {
    "@type": "freesurfer.mri_create_t2combined";
    "subjid": string;
    "t1wb": InputPathType;
    "t2upper": InputPathType;
    "t2middle"?: InputPathType | null | undefined;
    "t2lower": InputPathType;
    "t2combined": string;
    "show": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_create_t2combined": mri_create_t2combined_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_create_t2combined": mri_create_t2combined_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_create_t2combined(...)`.
 *
 * @interface
 */
interface MriCreateT2combinedOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Log file generated by the command
     */
    logfile: OutputPathType;
    /**
     * The T2* 7T combined partial-brain halves output file
     */
    t2combined_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjid Subject ID of the FreeSurfer anatomical
 * @param t1wb T1 7T whole-brain image
 * @param t2upper T2* 7T partial-brain upper half image
 * @param t2lower T2* 7T partial-brain lower half image
 * @param t2combined Output file for T2* 7T combined partial-brain halves
 * @param t2middle T2* 7T partial-brain middle half image, or enter 'none'
 * @param show If the last argument is 'show', then the commands that will run are shown but not executed.
 *
 * @returns Parameter dictionary
 */
function mri_create_t2combined_params(
    subjid: string,
    t1wb: InputPathType,
    t2upper: InputPathType,
    t2lower: InputPathType,
    t2combined: string,
    t2middle: InputPathType | null = null,
    show: boolean = false,
): MriCreateT2combinedParameters {
    const params = {
        "@type": "freesurfer.mri_create_t2combined" as const,
        "subjid": subjid,
        "t1wb": t1wb,
        "t2upper": t2upper,
        "t2lower": t2lower,
        "t2combined": t2combined,
        "show": show,
    };
    if (t2middle !== null) {
        params["t2middle"] = t2middle;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_create_t2combined_cargs(
    params: MriCreateT2combinedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_create_t2combined");
    cargs.push((params["subjid"] ?? null));
    cargs.push(execution.inputFile((params["t1wb"] ?? null)));
    cargs.push(execution.inputFile((params["t2upper"] ?? null)));
    if ((params["t2middle"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["t2middle"] ?? null)));
    }
    cargs.push(execution.inputFile((params["t2lower"] ?? null)));
    cargs.push((params["t2combined"] ?? null));
    if ((params["show"] ?? null)) {
        cargs.push("show");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_create_t2combined_outputs(
    params: MriCreateT2combinedParameters,
    execution: Execution,
): MriCreateT2combinedOutputs {
    const ret: MriCreateT2combinedOutputs = {
        root: execution.outputFile("."),
        logfile: execution.outputFile(["/root/mri_create_t2combined.log"].join('')),
        t2combined_output: execution.outputFile([(params["t2combined"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_create_t2combined
 *
 * Utility to combine two or three T2* 7T partial-brain volumes into one volume, retaining resolution and registered to the MPRAGE anatomical.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCreateT2combinedOutputs`).
 */
function mri_create_t2combined_execute(
    params: MriCreateT2combinedParameters,
    runner: Runner | null = null,
): MriCreateT2combinedOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CREATE_T2COMBINED_METADATA);
    params = execution.params(params)
    const cargs = mri_create_t2combined_cargs(params, execution)
    const ret = mri_create_t2combined_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_create_t2combined
 *
 * Utility to combine two or three T2* 7T partial-brain volumes into one volume, retaining resolution and registered to the MPRAGE anatomical.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjid Subject ID of the FreeSurfer anatomical
 * @param t1wb T1 7T whole-brain image
 * @param t2upper T2* 7T partial-brain upper half image
 * @param t2lower T2* 7T partial-brain lower half image
 * @param t2combined Output file for T2* 7T combined partial-brain halves
 * @param t2middle T2* 7T partial-brain middle half image, or enter 'none'
 * @param show If the last argument is 'show', then the commands that will run are shown but not executed.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCreateT2combinedOutputs`).
 */
function mri_create_t2combined(
    subjid: string,
    t1wb: InputPathType,
    t2upper: InputPathType,
    t2lower: InputPathType,
    t2combined: string,
    t2middle: InputPathType | null = null,
    show: boolean = false,
    runner: Runner | null = null,
): MriCreateT2combinedOutputs {
    const params = mri_create_t2combined_params(subjid, t1wb, t2upper, t2lower, t2combined, t2middle, show)
    return mri_create_t2combined_execute(params, runner);
}


export {
      MRI_CREATE_T2COMBINED_METADATA,
      MriCreateT2combinedOutputs,
      MriCreateT2combinedParameters,
      mri_create_t2combined,
      mri_create_t2combined_execute,
      mri_create_t2combined_params,
};
