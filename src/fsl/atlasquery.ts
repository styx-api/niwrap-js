// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ATLASQUERY_METADATA: Metadata = {
    id: "0d022e73cfae9cb93ff3b9cca233367e5050b8e6.boutiques",
    name: "atlasquery",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface AtlasqueryParameters {
    "__STYXTYPE__": "atlasquery";
    "dumpatlases_flag": boolean;
    "atlas"?: string | null | undefined;
    "coord"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "atlasquery": atlasquery_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `atlasquery(...)`.
 *
 * @interface
 */
interface AtlasqueryOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function atlasquery_params(
    dumpatlases_flag: boolean = false,
    atlas: string | null = null,
    coord: string | null = null,
    mask: InputPathType | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): AtlasqueryParameters {
    /**
     * Build parameters.
    
     * @param dumpatlases_flag Dump a list of available atlases
     * @param atlas Name of atlas to use
     * @param coord Coordinate to query in the format X,Y,Z
     * @param mask A mask image to use during structural lookups
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Show help message and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "atlasquery" as const,
        "dumpatlases_flag": dumpatlases_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (atlas !== null) {
        params["atlas"] = atlas;
    }
    if (coord !== null) {
        params["coord"] = coord;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


function atlasquery_cargs(
    params: AtlasqueryParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("atlasquery");
    if ((params["dumpatlases_flag"] ?? null)) {
        cargs.push("--dumpatlases");
    }
    if ((params["atlas"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["atlas"] ?? null)
        );
    }
    if ((params["coord"] ?? null) !== null) {
        cargs.push(
            "-c",
            (params["coord"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-V");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


function atlasquery_outputs(
    params: AtlasqueryParameters,
    execution: Execution,
): AtlasqueryOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AtlasqueryOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function atlasquery_execute(
    params: AtlasqueryParameters,
    execution: Execution,
): AtlasqueryOutputs {
    /**
     * Structural lookup tool for FSL atlases.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AtlasqueryOutputs`).
     */
    params = execution.params(params)
    const cargs = atlasquery_cargs(params, execution)
    const ret = atlasquery_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function atlasquery(
    dumpatlases_flag: boolean = false,
    atlas: string | null = null,
    coord: string | null = null,
    mask: InputPathType | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): AtlasqueryOutputs {
    /**
     * Structural lookup tool for FSL atlases.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param dumpatlases_flag Dump a list of available atlases
     * @param atlas Name of atlas to use
     * @param coord Coordinate to query in the format X,Y,Z
     * @param mask A mask image to use during structural lookups
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Show help message and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AtlasqueryOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ATLASQUERY_METADATA);
    const params = atlasquery_params(dumpatlases_flag, atlas, coord, mask, verbose_flag, help_flag)
    return atlasquery_execute(params, execution);
}


export {
      ATLASQUERY_METADATA,
      AtlasqueryOutputs,
      AtlasqueryParameters,
      atlasquery,
      atlasquery_params,
};
