// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EDIT_SEGMENTATION_METADATA: Metadata = {
    id: "25345594af6f00c5d1125c06b5d3a088c2d5244f.boutiques",
    name: "mri_edit_segmentation",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriEditSegmentationParameters {
    "__STYXTYPE__": "mri_edit_segmentation";
    "input_segmentation": InputPathType;
    "t1_volume": InputPathType;
    "output_segmentation": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_edit_segmentation": mri_edit_segmentation_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_edit_segmentation": mri_edit_segmentation_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_edit_segmentation(...)`.
 *
 * @interface
 */
interface MriEditSegmentationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting edited segmentation file.
     */
    output_segmentation_file: OutputPathType;
}


function mri_edit_segmentation_params(
    input_segmentation: InputPathType,
    t1_volume: InputPathType,
    output_segmentation: string,
): MriEditSegmentationParameters {
    /**
     * Build parameters.
    
     * @param input_segmentation Input segmentation file.
     * @param t1_volume T1 volume file.
     * @param output_segmentation Output segmentation file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_edit_segmentation" as const,
        "input_segmentation": input_segmentation,
        "t1_volume": t1_volume,
        "output_segmentation": output_segmentation,
    };
    return params;
}


function mri_edit_segmentation_cargs(
    params: MriEditSegmentationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_edit_segmentation");
    cargs.push(execution.inputFile((params["input_segmentation"] ?? null)));
    cargs.push(execution.inputFile((params["t1_volume"] ?? null)));
    cargs.push((params["output_segmentation"] ?? null));
    return cargs;
}


function mri_edit_segmentation_outputs(
    params: MriEditSegmentationParameters,
    execution: Execution,
): MriEditSegmentationOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriEditSegmentationOutputs = {
        root: execution.outputFile("."),
        output_segmentation_file: execution.outputFile([(params["output_segmentation"] ?? null)].join('')),
    };
    return ret;
}


function mri_edit_segmentation_execute(
    params: MriEditSegmentationParameters,
    execution: Execution,
): MriEditSegmentationOutputs {
    /**
     * A tool used for editing segmentations.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriEditSegmentationOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_edit_segmentation_cargs(params, execution)
    const ret = mri_edit_segmentation_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_edit_segmentation(
    input_segmentation: InputPathType,
    t1_volume: InputPathType,
    output_segmentation: string,
    runner: Runner | null = null,
): MriEditSegmentationOutputs {
    /**
     * A tool used for editing segmentations.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_segmentation Input segmentation file.
     * @param t1_volume T1 volume file.
     * @param output_segmentation Output segmentation file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriEditSegmentationOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EDIT_SEGMENTATION_METADATA);
    const params = mri_edit_segmentation_params(input_segmentation, t1_volume, output_segmentation)
    return mri_edit_segmentation_execute(params, execution);
}


export {
      MRI_EDIT_SEGMENTATION_METADATA,
      MriEditSegmentationOutputs,
      MriEditSegmentationParameters,
      mri_edit_segmentation,
      mri_edit_segmentation_params,
};
