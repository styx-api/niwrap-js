// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PROBTRACKX_DOT_CONVERT_METADATA: Metadata = {
    id: "b29597e31e2270ad6df214d52b90ea8e4c08e0d5.boutiques",
    name: "probtrackx-dot-convert",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface ProbtrackxDotConvertRowVoxelsParameters {
    "@type": "workbench.probtrackx-dot-convert.row_voxels";
    "voxel_list_file": string;
    "label_vol": InputPathType;
}


interface ProbtrackxDotConvertRowCiftiParameters {
    "@type": "workbench.probtrackx-dot-convert.row_cifti";
    "cifti": InputPathType;
    "direction": string;
}


interface ProbtrackxDotConvertColVoxelsParameters {
    "@type": "workbench.probtrackx-dot-convert.col_voxels";
    "voxel_list_file": string;
    "label_vol": InputPathType;
}


interface ProbtrackxDotConvertColCiftiParameters {
    "@type": "workbench.probtrackx-dot-convert.col_cifti";
    "cifti": InputPathType;
    "direction": string;
}


interface ProbtrackxDotConvertParameters {
    "@type": "workbench.probtrackx-dot-convert";
    "dot_file": string;
    "cifti_out": string;
    "row_voxels"?: ProbtrackxDotConvertRowVoxelsParameters | null | undefined;
    "opt_row_surface_roi_metric"?: InputPathType | null | undefined;
    "row_cifti"?: ProbtrackxDotConvertRowCiftiParameters | null | undefined;
    "col_voxels"?: ProbtrackxDotConvertColVoxelsParameters | null | undefined;
    "opt_col_surface_roi_metric"?: InputPathType | null | undefined;
    "col_cifti"?: ProbtrackxDotConvertColCiftiParameters | null | undefined;
    "opt_transpose": boolean;
    "opt_make_symmetric": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.probtrackx-dot-convert": probtrackx_dot_convert_cargs,
        "workbench.probtrackx-dot-convert.row_voxels": probtrackx_dot_convert_row_voxels_cargs,
        "workbench.probtrackx-dot-convert.row_cifti": probtrackx_dot_convert_row_cifti_cargs,
        "workbench.probtrackx-dot-convert.col_voxels": probtrackx_dot_convert_col_voxels_cargs,
        "workbench.probtrackx-dot-convert.col_cifti": probtrackx_dot_convert_col_cifti_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.probtrackx-dot-convert": probtrackx_dot_convert_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param voxel_list_file a text file containing IJK indices for the voxels used
 * @param label_vol a label volume with the dimensions and sform used, with structure labels
 *
 * @returns Parameter dictionary
 */
function probtrackx_dot_convert_row_voxels_params(
    voxel_list_file: string,
    label_vol: InputPathType,
): ProbtrackxDotConvertRowVoxelsParameters {
    const params = {
        "@type": "workbench.probtrackx-dot-convert.row_voxels" as const,
        "voxel_list_file": voxel_list_file,
        "label_vol": label_vol,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function probtrackx_dot_convert_row_voxels_cargs(
    params: ProbtrackxDotConvertRowVoxelsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-row-voxels");
    cargs.push((params["voxel_list_file"] ?? null));
    cargs.push(execution.inputFile((params["label_vol"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param cifti the cifti file to take the mapping from
 * @param direction which dimension to take the mapping along, ROW or COLUMN
 *
 * @returns Parameter dictionary
 */
function probtrackx_dot_convert_row_cifti_params(
    cifti: InputPathType,
    direction: string,
): ProbtrackxDotConvertRowCiftiParameters {
    const params = {
        "@type": "workbench.probtrackx-dot-convert.row_cifti" as const,
        "cifti": cifti,
        "direction": direction,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function probtrackx_dot_convert_row_cifti_cargs(
    params: ProbtrackxDotConvertRowCiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-row-cifti");
    cargs.push(execution.inputFile((params["cifti"] ?? null)));
    cargs.push((params["direction"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param voxel_list_file a text file containing IJK indices for the voxels used
 * @param label_vol a label volume with the dimensions and sform used, with structure labels
 *
 * @returns Parameter dictionary
 */
function probtrackx_dot_convert_col_voxels_params(
    voxel_list_file: string,
    label_vol: InputPathType,
): ProbtrackxDotConvertColVoxelsParameters {
    const params = {
        "@type": "workbench.probtrackx-dot-convert.col_voxels" as const,
        "voxel_list_file": voxel_list_file,
        "label_vol": label_vol,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function probtrackx_dot_convert_col_voxels_cargs(
    params: ProbtrackxDotConvertColVoxelsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-col-voxels");
    cargs.push((params["voxel_list_file"] ?? null));
    cargs.push(execution.inputFile((params["label_vol"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param cifti the cifti file to take the mapping from
 * @param direction which dimension to take the mapping along, ROW or COLUMN
 *
 * @returns Parameter dictionary
 */
function probtrackx_dot_convert_col_cifti_params(
    cifti: InputPathType,
    direction: string,
): ProbtrackxDotConvertColCiftiParameters {
    const params = {
        "@type": "workbench.probtrackx-dot-convert.col_cifti" as const,
        "cifti": cifti,
        "direction": direction,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function probtrackx_dot_convert_col_cifti_cargs(
    params: ProbtrackxDotConvertColCiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-col-cifti");
    cargs.push(execution.inputFile((params["cifti"] ?? null)));
    cargs.push((params["direction"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `probtrackx_dot_convert(...)`.
 *
 * @interface
 */
interface ProbtrackxDotConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dot_file input .dot file
 * @param cifti_out output cifti file
 * @param row_voxels the output mapping along a row will be voxels
 * @param opt_row_surface_roi_metric the output mapping along a row will be surface vertices: a metric file with positive values on all vertices used
 * @param row_cifti take the mapping along a row from a cifti file
 * @param col_voxels the output mapping along a column will be voxels
 * @param opt_col_surface_roi_metric the output mapping along a column will be surface vertices: a metric file with positive values on all vertices used
 * @param col_cifti take the mapping along a column from a cifti file
 * @param opt_transpose transpose the input matrix
 * @param opt_make_symmetric transform half-square input into full matrix output
 *
 * @returns Parameter dictionary
 */
function probtrackx_dot_convert_params(
    dot_file: string,
    cifti_out: string,
    row_voxels: ProbtrackxDotConvertRowVoxelsParameters | null = null,
    opt_row_surface_roi_metric: InputPathType | null = null,
    row_cifti: ProbtrackxDotConvertRowCiftiParameters | null = null,
    col_voxels: ProbtrackxDotConvertColVoxelsParameters | null = null,
    opt_col_surface_roi_metric: InputPathType | null = null,
    col_cifti: ProbtrackxDotConvertColCiftiParameters | null = null,
    opt_transpose: boolean = false,
    opt_make_symmetric: boolean = false,
): ProbtrackxDotConvertParameters {
    const params = {
        "@type": "workbench.probtrackx-dot-convert" as const,
        "dot_file": dot_file,
        "cifti_out": cifti_out,
        "opt_transpose": opt_transpose,
        "opt_make_symmetric": opt_make_symmetric,
    };
    if (row_voxels !== null) {
        params["row_voxels"] = row_voxels;
    }
    if (opt_row_surface_roi_metric !== null) {
        params["opt_row_surface_roi_metric"] = opt_row_surface_roi_metric;
    }
    if (row_cifti !== null) {
        params["row_cifti"] = row_cifti;
    }
    if (col_voxels !== null) {
        params["col_voxels"] = col_voxels;
    }
    if (opt_col_surface_roi_metric !== null) {
        params["opt_col_surface_roi_metric"] = opt_col_surface_roi_metric;
    }
    if (col_cifti !== null) {
        params["col_cifti"] = col_cifti;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function probtrackx_dot_convert_cargs(
    params: ProbtrackxDotConvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-probtrackx-dot-convert");
    cargs.push((params["dot_file"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["row_voxels"] ?? null) !== null) {
        cargs.push(...dynCargs((params["row_voxels"] ?? null)["@type"])((params["row_voxels"] ?? null), execution));
    }
    if ((params["opt_row_surface_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-row-surface",
            execution.inputFile((params["opt_row_surface_roi_metric"] ?? null))
        );
    }
    if ((params["row_cifti"] ?? null) !== null) {
        cargs.push(...dynCargs((params["row_cifti"] ?? null)["@type"])((params["row_cifti"] ?? null), execution));
    }
    if ((params["col_voxels"] ?? null) !== null) {
        cargs.push(...dynCargs((params["col_voxels"] ?? null)["@type"])((params["col_voxels"] ?? null), execution));
    }
    if ((params["opt_col_surface_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-col-surface",
            execution.inputFile((params["opt_col_surface_roi_metric"] ?? null))
        );
    }
    if ((params["col_cifti"] ?? null) !== null) {
        cargs.push(...dynCargs((params["col_cifti"] ?? null)["@type"])((params["col_cifti"] ?? null), execution));
    }
    if ((params["opt_transpose"] ?? null)) {
        cargs.push("-transpose");
    }
    if ((params["opt_make_symmetric"] ?? null)) {
        cargs.push("-make-symmetric");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function probtrackx_dot_convert_outputs(
    params: ProbtrackxDotConvertParameters,
    execution: Execution,
): ProbtrackxDotConvertOutputs {
    const ret: ProbtrackxDotConvertOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * probtrackx-dot-convert
 *
 * Convert a .dot file from probtrackx to cifti.
 *
 * NOTE: exactly one -row option and one -col option must be used.
 *
 * If the input file does not have its indexes sorted in the correct ordering, this command may take longer than expected.  Specifying -transpose will transpose the input matrix before trying to put its values into the cifti file, which is currently needed for at least matrix2 in order to display it as intended.  How the cifti file is displayed is based on which -row option is specified: if -row-voxels is specified, then it will display data on volume slices.  The label names in the label volume(s) must have the following names, other names are ignored:
 *
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ProbtrackxDotConvertOutputs`).
 */
function probtrackx_dot_convert_execute(
    params: ProbtrackxDotConvertParameters,
    runner: Runner | null = null,
): ProbtrackxDotConvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PROBTRACKX_DOT_CONVERT_METADATA);
    params = execution.params(params)
    const cargs = probtrackx_dot_convert_cargs(params, execution)
    const ret = probtrackx_dot_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * probtrackx-dot-convert
 *
 * Convert a .dot file from probtrackx to cifti.
 *
 * NOTE: exactly one -row option and one -col option must be used.
 *
 * If the input file does not have its indexes sorted in the correct ordering, this command may take longer than expected.  Specifying -transpose will transpose the input matrix before trying to put its values into the cifti file, which is currently needed for at least matrix2 in order to display it as intended.  How the cifti file is displayed is based on which -row option is specified: if -row-voxels is specified, then it will display data on volume slices.  The label names in the label volume(s) must have the following names, other names are ignored:
 *
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param dot_file input .dot file
 * @param cifti_out output cifti file
 * @param row_voxels the output mapping along a row will be voxels
 * @param opt_row_surface_roi_metric the output mapping along a row will be surface vertices: a metric file with positive values on all vertices used
 * @param row_cifti take the mapping along a row from a cifti file
 * @param col_voxels the output mapping along a column will be voxels
 * @param opt_col_surface_roi_metric the output mapping along a column will be surface vertices: a metric file with positive values on all vertices used
 * @param col_cifti take the mapping along a column from a cifti file
 * @param opt_transpose transpose the input matrix
 * @param opt_make_symmetric transform half-square input into full matrix output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ProbtrackxDotConvertOutputs`).
 */
function probtrackx_dot_convert(
    dot_file: string,
    cifti_out: string,
    row_voxels: ProbtrackxDotConvertRowVoxelsParameters | null = null,
    opt_row_surface_roi_metric: InputPathType | null = null,
    row_cifti: ProbtrackxDotConvertRowCiftiParameters | null = null,
    col_voxels: ProbtrackxDotConvertColVoxelsParameters | null = null,
    opt_col_surface_roi_metric: InputPathType | null = null,
    col_cifti: ProbtrackxDotConvertColCiftiParameters | null = null,
    opt_transpose: boolean = false,
    opt_make_symmetric: boolean = false,
    runner: Runner | null = null,
): ProbtrackxDotConvertOutputs {
    const params = probtrackx_dot_convert_params(dot_file, cifti_out, row_voxels, opt_row_surface_roi_metric, row_cifti, col_voxels, opt_col_surface_roi_metric, col_cifti, opt_transpose, opt_make_symmetric)
    return probtrackx_dot_convert_execute(params, runner);
}


export {
      PROBTRACKX_DOT_CONVERT_METADATA,
      ProbtrackxDotConvertColCiftiParameters,
      ProbtrackxDotConvertColVoxelsParameters,
      ProbtrackxDotConvertOutputs,
      ProbtrackxDotConvertParameters,
      ProbtrackxDotConvertRowCiftiParameters,
      ProbtrackxDotConvertRowVoxelsParameters,
      probtrackx_dot_convert,
      probtrackx_dot_convert_col_cifti_params,
      probtrackx_dot_convert_col_voxels_params,
      probtrackx_dot_convert_execute,
      probtrackx_dot_convert_params,
      probtrackx_dot_convert_row_cifti_params,
      probtrackx_dot_convert_row_voxels_params,
};
