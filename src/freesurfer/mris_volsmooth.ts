// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_VOLSMOOTH_METADATA: Metadata = {
    id: "9803f4111198e4885811e3cd818e96b4c577f351.boutiques",
    name: "mris_volsmooth",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisVolsmoothParameters {
    "@type": "freesurfer.mris_volsmooth";
    "input_volume": InputPathType;
    "output_volume": string;
    "registration": InputPathType;
    "projfrac"?: number | null | undefined;
    "projfrac_avg"?: string | null | undefined;
    "fill_ribbon": boolean;
    "surf_out"?: string | null | undefined;
    "fwhm"?: number | null | undefined;
    "niters"?: number | null | undefined;
    "vol_fwhm"?: number | null | undefined;
    "log"?: string | null | undefined;
    "nocleanup": boolean;
    "debug": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_volsmooth": mris_volsmooth_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_volsmooth": mris_volsmooth_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_volsmooth(...)`.
 *
 * @interface
 */
interface MrisVolsmoothOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume file after surface-based smoothing.
     */
    outvol_file: OutputPathType;
    /**
     * Left hemisphere smoothed surface output.
     */
    lh_surface_output: OutputPathType | null;
    /**
     * Right hemisphere smoothed surface output.
     */
    rh_surface_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_volume Source volume with values that will be smoothed on the surface.
 * @param output_volume Output volume.
 * @param registration TKRegister-style registration matrix that maps between the input/output volumes and the FreeSurfer surface anatomical.
 * @param projfrac Fraction of thickness to project along surface normal.
 * @param projfrac_avg Average sampling along normal, specified by min, max, and delta.
 * @param fill_ribbon Fill ribbon.
 * @param surf_out Save smoothed surfaces as basename.?h.mgh
 * @param fwhm Surface smoothing by full-width/half-max in mm.
 * @param niters Specify surface smoothing by number of nearest neighbor smoothing iterations.
 * @param vol_fwhm Volume smoothing outside of the surface. Surface voxels and non-surface voxels are smoothed separately.
 * @param log Explicitly set log file.
 * @param nocleanup Do not delete temporary files.
 * @param debug Turn on debugging.
 *
 * @returns Parameter dictionary
 */
function mris_volsmooth_params(
    input_volume: InputPathType,
    output_volume: string,
    registration: InputPathType,
    projfrac: number | null = null,
    projfrac_avg: string | null = null,
    fill_ribbon: boolean = false,
    surf_out: string | null = null,
    fwhm: number | null = null,
    niters: number | null = null,
    vol_fwhm: number | null = null,
    log: string | null = null,
    nocleanup: boolean = false,
    debug: boolean = false,
): MrisVolsmoothParameters {
    const params = {
        "@type": "freesurfer.mris_volsmooth" as const,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "registration": registration,
        "fill_ribbon": fill_ribbon,
        "nocleanup": nocleanup,
        "debug": debug,
    };
    if (projfrac !== null) {
        params["projfrac"] = projfrac;
    }
    if (projfrac_avg !== null) {
        params["projfrac_avg"] = projfrac_avg;
    }
    if (surf_out !== null) {
        params["surf_out"] = surf_out;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (niters !== null) {
        params["niters"] = niters;
    }
    if (vol_fwhm !== null) {
        params["vol_fwhm"] = vol_fwhm;
    }
    if (log !== null) {
        params["log"] = log;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_volsmooth_cargs(
    params: MrisVolsmoothParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_volsmooth");
    cargs.push(
        "-i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_volume"] ?? null)
    );
    cargs.push(
        "-reg",
        execution.inputFile((params["registration"] ?? null))
    );
    if ((params["projfrac"] ?? null) !== null) {
        cargs.push(
            "--projfrac",
            String((params["projfrac"] ?? null))
        );
    }
    if ((params["projfrac_avg"] ?? null) !== null) {
        cargs.push(
            "--projfrac-avg",
            (params["projfrac_avg"] ?? null)
        );
    }
    if ((params["fill_ribbon"] ?? null)) {
        cargs.push("--fill-ribbon");
    }
    if ((params["surf_out"] ?? null) !== null) {
        cargs.push(
            "--surf-out",
            (params["surf_out"] ?? null)
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["niters"] ?? null) !== null) {
        cargs.push(
            "--niters",
            String((params["niters"] ?? null))
        );
    }
    if ((params["vol_fwhm"] ?? null) !== null) {
        cargs.push(
            "--vol-fwhm",
            String((params["vol_fwhm"] ?? null))
        );
    }
    if ((params["log"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log"] ?? null)
        );
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("--nocleanup");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_volsmooth_outputs(
    params: MrisVolsmoothParameters,
    execution: Execution,
): MrisVolsmoothOutputs {
    const ret: MrisVolsmoothOutputs = {
        root: execution.outputFile("."),
        outvol_file: execution.outputFile([(params["output_volume"] ?? null), ".mgh"].join('')),
        lh_surface_output: ((params["surf_out"] ?? null) !== null) ? execution.outputFile([(params["surf_out"] ?? null), ".lh.mgh"].join('')) : null,
        rh_surface_output: ((params["surf_out"] ?? null) !== null) ? execution.outputFile([(params["surf_out"] ?? null), ".rh.mgh"].join('')) : null,
    };
    return ret;
}


/**
 * mris_volsmooth
 *
 * Performs surface-based smoothing inside a volume by sampling a volume to a surface, smoothing on the surface, then replacing the surface voxels in the volume with values that were smoothed.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisVolsmoothOutputs`).
 */
function mris_volsmooth_execute(
    params: MrisVolsmoothParameters,
    runner: Runner | null = null,
): MrisVolsmoothOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_VOLSMOOTH_METADATA);
    params = execution.params(params)
    const cargs = mris_volsmooth_cargs(params, execution)
    const ret = mris_volsmooth_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_volsmooth
 *
 * Performs surface-based smoothing inside a volume by sampling a volume to a surface, smoothing on the surface, then replacing the surface voxels in the volume with values that were smoothed.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Source volume with values that will be smoothed on the surface.
 * @param output_volume Output volume.
 * @param registration TKRegister-style registration matrix that maps between the input/output volumes and the FreeSurfer surface anatomical.
 * @param projfrac Fraction of thickness to project along surface normal.
 * @param projfrac_avg Average sampling along normal, specified by min, max, and delta.
 * @param fill_ribbon Fill ribbon.
 * @param surf_out Save smoothed surfaces as basename.?h.mgh
 * @param fwhm Surface smoothing by full-width/half-max in mm.
 * @param niters Specify surface smoothing by number of nearest neighbor smoothing iterations.
 * @param vol_fwhm Volume smoothing outside of the surface. Surface voxels and non-surface voxels are smoothed separately.
 * @param log Explicitly set log file.
 * @param nocleanup Do not delete temporary files.
 * @param debug Turn on debugging.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisVolsmoothOutputs`).
 */
function mris_volsmooth(
    input_volume: InputPathType,
    output_volume: string,
    registration: InputPathType,
    projfrac: number | null = null,
    projfrac_avg: string | null = null,
    fill_ribbon: boolean = false,
    surf_out: string | null = null,
    fwhm: number | null = null,
    niters: number | null = null,
    vol_fwhm: number | null = null,
    log: string | null = null,
    nocleanup: boolean = false,
    debug: boolean = false,
    runner: Runner | null = null,
): MrisVolsmoothOutputs {
    const params = mris_volsmooth_params(input_volume, output_volume, registration, projfrac, projfrac_avg, fill_ribbon, surf_out, fwhm, niters, vol_fwhm, log, nocleanup, debug)
    return mris_volsmooth_execute(params, runner);
}


export {
      MRIS_VOLSMOOTH_METADATA,
      MrisVolsmoothOutputs,
      MrisVolsmoothParameters,
      mris_volsmooth,
      mris_volsmooth_execute,
      mris_volsmooth_params,
};
