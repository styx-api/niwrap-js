// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AVSCALE_METADATA: Metadata = {
    id: "55dd77b83020d0048dbe4f542385e6f483818b7c.boutiques",
    name: "avscale",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface AvscaleParameters {
    "__STYXTYPE__": "avscale";
    "allparams_flag": boolean;
    "inverteddies_flag": boolean;
    "matrix_file": InputPathType;
    "non_reference_volume"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "avscale": avscale_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "avscale": avscale_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `avscale(...)`.
 *
 * @interface
 */
interface AvscaleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file.
     */
    output_file: OutputPathType;
}


function avscale_params(
    matrix_file: InputPathType,
    allparams_flag: boolean = false,
    inverteddies_flag: boolean = false,
    non_reference_volume: InputPathType | null = null,
): AvscaleParameters {
    /**
     * Build parameters.
    
     * @param matrix_file The path to the matrix file.
     * @param allparams_flag Flag for all parameters.
     * @param inverteddies_flag Flag for inverted eddies.
     * @param non_reference_volume The path to the non-reference volume.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "avscale" as const,
        "allparams_flag": allparams_flag,
        "inverteddies_flag": inverteddies_flag,
        "matrix_file": matrix_file,
    };
    if (non_reference_volume !== null) {
        params["non_reference_volume"] = non_reference_volume;
    }
    return params;
}


function avscale_cargs(
    params: AvscaleParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("avscale");
    if ((params["allparams_flag"] ?? null)) {
        cargs.push("--allparams");
    }
    if ((params["inverteddies_flag"] ?? null)) {
        cargs.push("--inverteddies");
    }
    cargs.push(execution.inputFile((params["matrix_file"] ?? null)));
    if ((params["non_reference_volume"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["non_reference_volume"] ?? null)));
    }
    cargs.push(">");
    cargs.push("output.txt");
    return cargs;
}


function avscale_outputs(
    params: AvscaleParameters,
    execution: Execution,
): AvscaleOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AvscaleOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["output.txt"].join('')),
    };
    return ret;
}


function avscale_execute(
    params: AvscaleParameters,
    execution: Execution,
): AvscaleOutputs {
    /**
     * A command line tool for computing affine transformations.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AvscaleOutputs`).
     */
    params = execution.params(params)
    const cargs = avscale_cargs(params, execution)
    const ret = avscale_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function avscale(
    matrix_file: InputPathType,
    allparams_flag: boolean = false,
    inverteddies_flag: boolean = false,
    non_reference_volume: InputPathType | null = null,
    runner: Runner | null = null,
): AvscaleOutputs {
    /**
     * A command line tool for computing affine transformations.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param matrix_file The path to the matrix file.
     * @param allparams_flag Flag for all parameters.
     * @param inverteddies_flag Flag for inverted eddies.
     * @param non_reference_volume The path to the non-reference volume.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AvscaleOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AVSCALE_METADATA);
    const params = avscale_params(matrix_file, allparams_flag, inverteddies_flag, non_reference_volume)
    return avscale_execute(params, execution);
}


export {
      AVSCALE_METADATA,
      AvscaleOutputs,
      AvscaleParameters,
      avscale,
      avscale_params,
};
