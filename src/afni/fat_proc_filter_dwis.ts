// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_FILTER_DWIS_METADATA: Metadata = {
    id: "3def8805da69fa90cfe590bc1ca23a15f6d16d00.boutiques",
    name: "fat_proc_filter_dwis",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcFilterDwisParameters {
    "@type": "afni.fat_proc_filter_dwis";
    "input_dwi": InputPathType;
    "input_gradient": InputPathType;
    "select_string": string;
    "select_file"?: InputPathType | null | undefined;
    "output_prefix": string;
    "input_bvals"?: InputPathType | null | undefined;
    "unit_mag_out": boolean;
    "qc_prefix"?: string | null | undefined;
    "no_qc_view": boolean;
    "no_cmd_out": boolean;
    "do_movie"?: "AGIF" | "MPEG" | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fat_proc_filter_dwis": fat_proc_filter_dwis_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fat_proc_filter_dwis": fat_proc_filter_dwis_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_proc_filter_dwis(...)`.
 *
 * @interface
 */
interface FatProcFilterDwisOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Filtered 4D DWI dataset.
     */
    filtered_dwi: OutputPathType;
    /**
     * Filtered gradient file matching input format.
     */
    filtered_bvecs: OutputPathType;
    /**
     * Filtered b-values file, if provided.
     */
    filtered_bvals: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dwi Name of a 4D file of DWIs (required).
 * @param input_gradient Bvec/bmat file from the gradients. Required. One of these options must be used: -in_col_matA, -in_col_matT, -in_col_vec, -in_row_vec
 * @param select_string A string of indices and index ranges for selecting which volumes/grads/bvals to keep. This string gets applied to the volume, bval|bvec|bmat files for an input set. Either this or -select_file is required.
 * @param output_prefix Output prefix for all the volumes and text files. Required.
 * @param select_file A file containing a string of indices and index ranges for selecting which volumes/grads/bvals to keep. This string gets applied to the volume, bval|bvec|bmat files for an input set. Either this or -select is required.
 * @param input_bvals If the bvec/bmat is a file of unit-magnitude values, then the bvalues can be input.
 * @param unit_mag_out Ensure that the output grad information is unit magnitude.
 * @param qc_prefix Set the prefix of the QC image files separately.
 * @param no_qc_view Turn off generating QC image files.
 * @param no_cmd_out Don't save the command line call of this program and the location where it was run.
 * @param do_movie Output a movie of the newly created dataset (AGIF or MPEG).
 *
 * @returns Parameter dictionary
 */
function fat_proc_filter_dwis_params(
    input_dwi: InputPathType,
    input_gradient: InputPathType,
    select_string: string,
    output_prefix: string,
    select_file: InputPathType | null = null,
    input_bvals: InputPathType | null = null,
    unit_mag_out: boolean = false,
    qc_prefix: string | null = null,
    no_qc_view: boolean = false,
    no_cmd_out: boolean = false,
    do_movie: "AGIF" | "MPEG" | null = null,
): FatProcFilterDwisParameters {
    const params = {
        "@type": "afni.fat_proc_filter_dwis" as const,
        "input_dwi": input_dwi,
        "input_gradient": input_gradient,
        "select_string": select_string,
        "output_prefix": output_prefix,
        "unit_mag_out": unit_mag_out,
        "no_qc_view": no_qc_view,
        "no_cmd_out": no_cmd_out,
    };
    if (select_file !== null) {
        params["select_file"] = select_file;
    }
    if (input_bvals !== null) {
        params["input_bvals"] = input_bvals;
    }
    if (qc_prefix !== null) {
        params["qc_prefix"] = qc_prefix;
    }
    if (do_movie !== null) {
        params["do_movie"] = do_movie;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_proc_filter_dwis_cargs(
    params: FatProcFilterDwisParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_proc_filter_dwis");
    cargs.push(
        "-in_dwi",
        execution.inputFile((params["input_dwi"] ?? null))
    );
    cargs.push(
        "-in_col_matA|-in_col_matT|-in_col_vec|-in_row_vec",
        execution.inputFile((params["input_gradient"] ?? null))
    );
    cargs.push(
        "-select",
        (params["select_string"] ?? null)
    );
    if ((params["select_file"] ?? null) !== null) {
        cargs.push(
            "-select_file",
            execution.inputFile((params["select_file"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["input_bvals"] ?? null) !== null) {
        cargs.push(
            "-in_bvals",
            execution.inputFile((params["input_bvals"] ?? null))
        );
    }
    if ((params["unit_mag_out"] ?? null)) {
        cargs.push("-unit_mag_out");
    }
    if ((params["qc_prefix"] ?? null) !== null) {
        cargs.push(
            "-qc_prefix",
            (params["qc_prefix"] ?? null)
        );
    }
    if ((params["no_qc_view"] ?? null)) {
        cargs.push("-no_qc_view");
    }
    if ((params["no_cmd_out"] ?? null)) {
        cargs.push("-no_cmd_out");
    }
    if ((params["do_movie"] ?? null) !== null) {
        cargs.push(
            "-do_movie",
            (params["do_movie"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_proc_filter_dwis_outputs(
    params: FatProcFilterDwisParameters,
    execution: Execution,
): FatProcFilterDwisOutputs {
    const ret: FatProcFilterDwisOutputs = {
        root: execution.outputFile("."),
        filtered_dwi: execution.outputFile([(params["output_prefix"] ?? null), "_filtered.nii.gz"].join('')),
        filtered_bvecs: execution.outputFile([(params["output_prefix"] ?? null), "_filtered.bvecs"].join('')),
        filtered_bvals: execution.outputFile([(params["output_prefix"] ?? null), "_filtered.bvals"].join('')),
    };
    return ret;
}


/**
 * Filter out user-found and user-defined bad volumes from DWI data sets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcFilterDwisOutputs`).
 */
function fat_proc_filter_dwis_execute(
    params: FatProcFilterDwisParameters,
    runner: Runner | null = null,
): FatProcFilterDwisOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_FILTER_DWIS_METADATA);
    params = execution.params(params)
    const cargs = fat_proc_filter_dwis_cargs(params, execution)
    const ret = fat_proc_filter_dwis_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Filter out user-found and user-defined bad volumes from DWI data sets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dwi Name of a 4D file of DWIs (required).
 * @param input_gradient Bvec/bmat file from the gradients. Required. One of these options must be used: -in_col_matA, -in_col_matT, -in_col_vec, -in_row_vec
 * @param select_string A string of indices and index ranges for selecting which volumes/grads/bvals to keep. This string gets applied to the volume, bval|bvec|bmat files for an input set. Either this or -select_file is required.
 * @param output_prefix Output prefix for all the volumes and text files. Required.
 * @param select_file A file containing a string of indices and index ranges for selecting which volumes/grads/bvals to keep. This string gets applied to the volume, bval|bvec|bmat files for an input set. Either this or -select is required.
 * @param input_bvals If the bvec/bmat is a file of unit-magnitude values, then the bvalues can be input.
 * @param unit_mag_out Ensure that the output grad information is unit magnitude.
 * @param qc_prefix Set the prefix of the QC image files separately.
 * @param no_qc_view Turn off generating QC image files.
 * @param no_cmd_out Don't save the command line call of this program and the location where it was run.
 * @param do_movie Output a movie of the newly created dataset (AGIF or MPEG).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcFilterDwisOutputs`).
 */
function fat_proc_filter_dwis(
    input_dwi: InputPathType,
    input_gradient: InputPathType,
    select_string: string,
    output_prefix: string,
    select_file: InputPathType | null = null,
    input_bvals: InputPathType | null = null,
    unit_mag_out: boolean = false,
    qc_prefix: string | null = null,
    no_qc_view: boolean = false,
    no_cmd_out: boolean = false,
    do_movie: "AGIF" | "MPEG" | null = null,
    runner: Runner | null = null,
): FatProcFilterDwisOutputs {
    const params = fat_proc_filter_dwis_params(input_dwi, input_gradient, select_string, output_prefix, select_file, input_bvals, unit_mag_out, qc_prefix, no_qc_view, no_cmd_out, do_movie)
    return fat_proc_filter_dwis_execute(params, runner);
}


export {
      FAT_PROC_FILTER_DWIS_METADATA,
      FatProcFilterDwisOutputs,
      FatProcFilterDwisParameters,
      fat_proc_filter_dwis,
      fat_proc_filter_dwis_execute,
      fat_proc_filter_dwis_params,
};
