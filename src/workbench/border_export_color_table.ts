// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BORDER_EXPORT_COLOR_TABLE_METADATA: Metadata = {
    id: "c4fae465526913da9084677d6ed578ea3f03a993.boutiques",
    name: "border-export-color-table",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface BorderExportColorTableParameters {
    "@type"?: "workbench/border-export-color-table";
    "border_file": InputPathType;
    "table_out": string;
    "opt_class_colors": boolean;
}
type BorderExportColorTableParametersTagged = Required<Pick<BorderExportColorTableParameters, '@type'>> & BorderExportColorTableParameters;


/**
 * Output object returned when calling `BorderExportColorTableParameters(...)`.
 *
 * @interface
 */
interface BorderExportColorTableOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param border_file the input border file
 * @param table_out output - the output text file
 * @param opt_class_colors use class colors instead of the name colors
 *
 * @returns Parameter dictionary
 */
function border_export_color_table_params(
    border_file: InputPathType,
    table_out: string,
    opt_class_colors: boolean = false,
): BorderExportColorTableParametersTagged {
    const params = {
        "@type": "workbench/border-export-color-table" as const,
        "border_file": border_file,
        "table_out": table_out,
        "opt_class_colors": opt_class_colors,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function border_export_color_table_cargs(
    params: BorderExportColorTableParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-border-export-color-table");
    cargs.push(execution.inputFile((params["border_file"] ?? null)));
    cargs.push((params["table_out"] ?? null));
    if ((params["opt_class_colors"] ?? false)) {
        cargs.push("-class-colors");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function border_export_color_table_outputs(
    params: BorderExportColorTableParameters,
    execution: Execution,
): BorderExportColorTableOutputs {
    const ret: BorderExportColorTableOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * border-export-color-table
 *
 * Write border names and colors as text.
 *
 * Takes the names and colors of each border, and writes it to the same format as -metric-label-import expects.  By default, the borders are colored by border name, specify -class-colors to color them by class instead.  The key values start at 1 and follow the order of the borders in the file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderExportColorTableOutputs`).
 */
function border_export_color_table_execute(
    params: BorderExportColorTableParameters,
    runner: Runner | null = null,
): BorderExportColorTableOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BORDER_EXPORT_COLOR_TABLE_METADATA);
    params = execution.params(params)
    const cargs = border_export_color_table_cargs(params, execution)
    const ret = border_export_color_table_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * border-export-color-table
 *
 * Write border names and colors as text.
 *
 * Takes the names and colors of each border, and writes it to the same format as -metric-label-import expects.  By default, the borders are colored by border name, specify -class-colors to color them by class instead.  The key values start at 1 and follow the order of the borders in the file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param border_file the input border file
 * @param table_out output - the output text file
 * @param opt_class_colors use class colors instead of the name colors
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderExportColorTableOutputs`).
 */
function border_export_color_table(
    border_file: InputPathType,
    table_out: string,
    opt_class_colors: boolean = false,
    runner: Runner | null = null,
): BorderExportColorTableOutputs {
    const params = border_export_color_table_params(border_file, table_out, opt_class_colors)
    return border_export_color_table_execute(params, runner);
}


export {
      BORDER_EXPORT_COLOR_TABLE_METADATA,
      BorderExportColorTableOutputs,
      border_export_color_table,
      border_export_color_table_execute,
      border_export_color_table_params,
};
