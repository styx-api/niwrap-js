// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTSINTEGRATE_VECTOR_FIELD_METADATA: Metadata = {
    id: "834181e3e327a31ccc73d56b821e216f4579fc76.boutiques",
    name: "ANTSIntegrateVectorField",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsintegrateVectorFieldParameters {
    "@type": "ants.ANTSIntegrateVectorField";
    "vector_field_input": InputPathType;
    "roi_mask_input": InputPathType;
    "fibers_output": string;
    "length_image_output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.ANTSIntegrateVectorField": antsintegrate_vector_field_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.ANTSIntegrateVectorField": antsintegrate_vector_field_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `antsintegrate_vector_field(...)`.
 *
 * @interface
 */
interface AntsintegrateVectorFieldOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output is the fibers as a VTK text file.
     */
    fibers_out_vtk: OutputPathType;
    /**
     * The output is the length image.
     */
    length_image_out_nii: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param vector_field_input Input vector field image (e.g., VecImageIN.nii.gz), where vectors are voxels.
 * @param roi_mask_input Input ROI mask image (e.g., ROIMaskIN.nii.gz), an integer image controlling where the integration is performed.
 * @param fibers_output Output VTK text file for fibers (e.g., FibersOUT.vtk).
 * @param length_image_output Output length image (e.g., LengthImageOUT.nii.gz).
 *
 * @returns Parameter dictionary
 */
function antsintegrate_vector_field_params(
    vector_field_input: InputPathType,
    roi_mask_input: InputPathType,
    fibers_output: string,
    length_image_output: string,
): AntsintegrateVectorFieldParameters {
    const params = {
        "@type": "ants.ANTSIntegrateVectorField" as const,
        "vector_field_input": vector_field_input,
        "roi_mask_input": roi_mask_input,
        "fibers_output": fibers_output,
        "length_image_output": length_image_output,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function antsintegrate_vector_field_cargs(
    params: AntsintegrateVectorFieldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ANTSIntegrateVectorField");
    cargs.push(execution.inputFile((params["vector_field_input"] ?? null)));
    cargs.push(execution.inputFile((params["roi_mask_input"] ?? null)));
    cargs.push((params["fibers_output"] ?? null));
    cargs.push((params["length_image_output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function antsintegrate_vector_field_outputs(
    params: AntsintegrateVectorFieldParameters,
    execution: Execution,
): AntsintegrateVectorFieldOutputs {
    const ret: AntsintegrateVectorFieldOutputs = {
        root: execution.outputFile("."),
        fibers_out_vtk: execution.outputFile([(params["fibers_output"] ?? null)].join('')),
        length_image_out_nii: execution.outputFile([(params["length_image_output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ANTSIntegrateVectorField
 *
 * This tool integrates a vector field, where vectors are voxels, using a region of interest (ROI) mask. The ROI mask controls where the integration is performed and specifies the starting point region.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsintegrateVectorFieldOutputs`).
 */
function antsintegrate_vector_field_execute(
    params: AntsintegrateVectorFieldParameters,
    runner: Runner | null = null,
): AntsintegrateVectorFieldOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTSINTEGRATE_VECTOR_FIELD_METADATA);
    params = execution.params(params)
    const cargs = antsintegrate_vector_field_cargs(params, execution)
    const ret = antsintegrate_vector_field_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ANTSIntegrateVectorField
 *
 * This tool integrates a vector field, where vectors are voxels, using a region of interest (ROI) mask. The ROI mask controls where the integration is performed and specifies the starting point region.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param vector_field_input Input vector field image (e.g., VecImageIN.nii.gz), where vectors are voxels.
 * @param roi_mask_input Input ROI mask image (e.g., ROIMaskIN.nii.gz), an integer image controlling where the integration is performed.
 * @param fibers_output Output VTK text file for fibers (e.g., FibersOUT.vtk).
 * @param length_image_output Output length image (e.g., LengthImageOUT.nii.gz).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsintegrateVectorFieldOutputs`).
 */
function antsintegrate_vector_field(
    vector_field_input: InputPathType,
    roi_mask_input: InputPathType,
    fibers_output: string,
    length_image_output: string,
    runner: Runner | null = null,
): AntsintegrateVectorFieldOutputs {
    const params = antsintegrate_vector_field_params(vector_field_input, roi_mask_input, fibers_output, length_image_output)
    return antsintegrate_vector_field_execute(params, runner);
}


export {
      ANTSINTEGRATE_VECTOR_FIELD_METADATA,
      AntsintegrateVectorFieldOutputs,
      AntsintegrateVectorFieldParameters,
      antsintegrate_vector_field,
      antsintegrate_vector_field_execute,
      antsintegrate_vector_field_params,
};
