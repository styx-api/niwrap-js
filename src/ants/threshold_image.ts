// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const THRESHOLD_IMAGE_METADATA: Metadata = {
    id: "8cf8b0c4869168dc7cd4d8ddd7703d636b4075fc.boutiques",
    name: "ThresholdImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface ThresholdImageParameters {
    "@type": "ants.ThresholdImage";
    "image_dimension": number;
    "image_in": InputPathType;
    "out_image": string;
    "threshlo"?: number | null | undefined;
    "threshhi"?: number | null | undefined;
    "inside_value"?: number | null | undefined;
    "outside_value"?: number | null | undefined;
    "otsu_number_of_thresholds"?: number | null | undefined;
    "kmeans_number_of_thresholds"?: number | null | undefined;
    "mask_image"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.ThresholdImage": threshold_image_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.ThresholdImage": threshold_image_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `threshold_image(...)`.
 *
 * @interface
 */
interface ThresholdImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting image after thresholding.
     */
    output_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimension of the input image.
 * @param image_in The input image file to be thresholded.
 * @param out_image The output image file after thresholding.
 * @param threshlo The lower threshold value for fixed thresholding.
 * @param threshhi The upper threshold value for fixed thresholding.
 * @param inside_value The pixel value to be used inside the threshold range.
 * @param outside_value The pixel value to be used outside the threshold range.
 * @param otsu_number_of_thresholds Number of thresholds to use when applying the Otsu method.
 * @param kmeans_number_of_thresholds Number of thresholds to use when applying the K-means method.
 * @param mask_image Optional mask image for the thresholding operation.
 *
 * @returns Parameter dictionary
 */
function threshold_image_params(
    image_dimension: number,
    image_in: InputPathType,
    out_image: string,
    threshlo: number | null = null,
    threshhi: number | null = null,
    inside_value: number | null = null,
    outside_value: number | null = null,
    otsu_number_of_thresholds: number | null = null,
    kmeans_number_of_thresholds: number | null = null,
    mask_image: InputPathType | null = null,
): ThresholdImageParameters {
    const params = {
        "@type": "ants.ThresholdImage" as const,
        "image_dimension": image_dimension,
        "image_in": image_in,
        "out_image": out_image,
    };
    if (threshlo !== null) {
        params["threshlo"] = threshlo;
    }
    if (threshhi !== null) {
        params["threshhi"] = threshhi;
    }
    if (inside_value !== null) {
        params["inside_value"] = inside_value;
    }
    if (outside_value !== null) {
        params["outside_value"] = outside_value;
    }
    if (otsu_number_of_thresholds !== null) {
        params["otsu_number_of_thresholds"] = otsu_number_of_thresholds;
    }
    if (kmeans_number_of_thresholds !== null) {
        params["kmeans_number_of_thresholds"] = kmeans_number_of_thresholds;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function threshold_image_cargs(
    params: ThresholdImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ThresholdImage");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["image_in"] ?? null)));
    cargs.push((params["out_image"] ?? null));
    if ((params["threshlo"] ?? null) !== null) {
        cargs.push(String((params["threshlo"] ?? null)));
    }
    if ((params["threshhi"] ?? null) !== null) {
        cargs.push(String((params["threshhi"] ?? null)));
    }
    if ((params["inside_value"] ?? null) !== null) {
        cargs.push(String((params["inside_value"] ?? null)));
    }
    if ((params["outside_value"] ?? null) !== null) {
        cargs.push(String((params["outside_value"] ?? null)));
    }
    if ((params["otsu_number_of_thresholds"] ?? null) !== null) {
        cargs.push(String((params["otsu_number_of_thresholds"] ?? null)));
    }
    if ((params["kmeans_number_of_thresholds"] ?? null) !== null) {
        cargs.push(String((params["kmeans_number_of_thresholds"] ?? null)));
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask_image"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function threshold_image_outputs(
    params: ThresholdImageParameters,
    execution: Execution,
): ThresholdImageOutputs {
    const ret: ThresholdImageOutputs = {
        root: execution.outputFile("."),
        output_image: execution.outputFile([(params["out_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ThresholdImage
 *
 * Image thresholding utility that applies different thresholding techniques to an input image. It can use fixed thresholds, Otsu method, or K-means for thresholding.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ThresholdImageOutputs`).
 */
function threshold_image_execute(
    params: ThresholdImageParameters,
    runner: Runner | null = null,
): ThresholdImageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(THRESHOLD_IMAGE_METADATA);
    params = execution.params(params)
    const cargs = threshold_image_cargs(params, execution)
    const ret = threshold_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ThresholdImage
 *
 * Image thresholding utility that applies different thresholding techniques to an input image. It can use fixed thresholds, Otsu method, or K-means for thresholding.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimension of the input image.
 * @param image_in The input image file to be thresholded.
 * @param out_image The output image file after thresholding.
 * @param threshlo The lower threshold value for fixed thresholding.
 * @param threshhi The upper threshold value for fixed thresholding.
 * @param inside_value The pixel value to be used inside the threshold range.
 * @param outside_value The pixel value to be used outside the threshold range.
 * @param otsu_number_of_thresholds Number of thresholds to use when applying the Otsu method.
 * @param kmeans_number_of_thresholds Number of thresholds to use when applying the K-means method.
 * @param mask_image Optional mask image for the thresholding operation.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ThresholdImageOutputs`).
 */
function threshold_image(
    image_dimension: number,
    image_in: InputPathType,
    out_image: string,
    threshlo: number | null = null,
    threshhi: number | null = null,
    inside_value: number | null = null,
    outside_value: number | null = null,
    otsu_number_of_thresholds: number | null = null,
    kmeans_number_of_thresholds: number | null = null,
    mask_image: InputPathType | null = null,
    runner: Runner | null = null,
): ThresholdImageOutputs {
    const params = threshold_image_params(image_dimension, image_in, out_image, threshlo, threshhi, inside_value, outside_value, otsu_number_of_thresholds, kmeans_number_of_thresholds, mask_image)
    return threshold_image_execute(params, runner);
}


export {
      THRESHOLD_IMAGE_METADATA,
      ThresholdImageOutputs,
      ThresholdImageParameters,
      threshold_image,
      threshold_image_execute,
      threshold_image_params,
};
