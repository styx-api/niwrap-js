// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_STATS2SEG_METADATA: Metadata = {
    id: "7e0c5f5d6a788384f4579ed9b9699dd6dad8dac7.boutiques",
    name: "mri_stats2seg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriStats2segParameters {
    "@type": "freesurfer.mri_stats2seg";
    "stat_file": InputPathType;
    "segmentation_volume": InputPathType;
    "output_file": string;
    "debug": boolean;
    "check_opts": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_stats2seg": mri_stats2seg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_stats2seg": mri_stats2seg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_stats2seg(...)`.
 *
 * @interface
 */
interface MriStats2segOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output segmented file.
     */
    segmented_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param stat_file Stat file in an MRI format.
 * @param segmentation_volume Segmentation volume file.
 * @param output_file Output file.
 * @param debug Turn on debugging.
 * @param check_opts Don't run anything, just check options and exit.
 *
 * @returns Parameter dictionary
 */
function mri_stats2seg_params(
    stat_file: InputPathType,
    segmentation_volume: InputPathType,
    output_file: string,
    debug: boolean = false,
    check_opts: boolean = false,
): MriStats2segParameters {
    const params = {
        "@type": "freesurfer.mri_stats2seg" as const,
        "stat_file": stat_file,
        "segmentation_volume": segmentation_volume,
        "output_file": output_file,
        "debug": debug,
        "check_opts": check_opts,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_stats2seg_cargs(
    params: MriStats2segParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_stats2seg");
    cargs.push(
        "--stat",
        execution.inputFile((params["stat_file"] ?? null))
    );
    cargs.push(
        "--seg",
        execution.inputFile((params["segmentation_volume"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output_file"] ?? null)
    );
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_opts"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_stats2seg_outputs(
    params: MriStats2segParameters,
    execution: Execution,
): MriStats2segOutputs {
    const ret: MriStats2segOutputs = {
        root: execution.outputFile("."),
        segmented_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_stats2seg
 *
 * A command-line tool for converting MRI statistical maps to segmented volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriStats2segOutputs`).
 */
function mri_stats2seg_execute(
    params: MriStats2segParameters,
    runner: Runner | null = null,
): MriStats2segOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_STATS2SEG_METADATA);
    params = execution.params(params)
    const cargs = mri_stats2seg_cargs(params, execution)
    const ret = mri_stats2seg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_stats2seg
 *
 * A command-line tool for converting MRI statistical maps to segmented volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param stat_file Stat file in an MRI format.
 * @param segmentation_volume Segmentation volume file.
 * @param output_file Output file.
 * @param debug Turn on debugging.
 * @param check_opts Don't run anything, just check options and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriStats2segOutputs`).
 */
function mri_stats2seg(
    stat_file: InputPathType,
    segmentation_volume: InputPathType,
    output_file: string,
    debug: boolean = false,
    check_opts: boolean = false,
    runner: Runner | null = null,
): MriStats2segOutputs {
    const params = mri_stats2seg_params(stat_file, segmentation_volume, output_file, debug, check_opts)
    return mri_stats2seg_execute(params, runner);
}


export {
      MRI_STATS2SEG_METADATA,
      MriStats2segOutputs,
      MriStats2segParameters,
      mri_stats2seg,
      mri_stats2seg_execute,
      mri_stats2seg_params,
};
