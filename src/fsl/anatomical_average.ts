// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANATOMICAL_AVERAGE_METADATA: Metadata = {
    id: "778f5a5c8d722b93a945cefdef351a0babd00a75.boutiques",
    name: "AnatomicalAverage",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface AnatomicalAverageParameters {
    "__STYXTYPE__": "AnatomicalAverage";
    "output_basename": string;
    "input_images": Array<InputPathType>;
    "standard_image"?: InputPathType | null | undefined;
    "standard_brain_mask"?: InputPathType | null | undefined;
    "no_crop_flag": boolean;
    "work_dir"?: string | null | undefined;
    "brainsize"?: number | null | undefined;
    "noclean_flag": boolean;
    "verbose_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "AnatomicalAverage": anatomical_average_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "AnatomicalAverage": anatomical_average_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `anatomical_average(...)`.
 *
 * @interface
 */
interface AnatomicalAverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Averaged anatomical image
     */
    avg_output: OutputPathType;
}


function anatomical_average_params(
    output_basename: string,
    input_images: Array<InputPathType>,
    standard_image: InputPathType | null = null,
    standard_brain_mask: InputPathType | null = null,
    no_crop_flag: boolean = false,
    work_dir: string | null = null,
    brainsize: number | null = null,
    noclean_flag: boolean = false,
    verbose_flag: boolean = false,
): AnatomicalAverageParameters {
    /**
     * Build parameters.
    
     * @param output_basename Output basename
     * @param input_images List of input images
     * @param standard_image Standard image (default is MNI152_T1_2mm)
     * @param standard_brain_mask Standard brain mask (default is MNI152_T1_2mm_brain_mask_dil)
     * @param no_crop_flag Do not crop images
     * @param work_dir Local, temporary working directory (to be cleaned up - i.e. deleted)
     * @param brainsize Specify brainsize in mm for internal ROI (via robustfov)
     * @param noclean_flag Do not run the cleanup
     * @param verbose_flag Verbose output
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "AnatomicalAverage" as const,
        "output_basename": output_basename,
        "input_images": input_images,
        "no_crop_flag": no_crop_flag,
        "noclean_flag": noclean_flag,
        "verbose_flag": verbose_flag,
    };
    if (standard_image !== null) {
        params["standard_image"] = standard_image;
    }
    if (standard_brain_mask !== null) {
        params["standard_brain_mask"] = standard_brain_mask;
    }
    if (work_dir !== null) {
        params["work_dir"] = work_dir;
    }
    if (brainsize !== null) {
        params["brainsize"] = brainsize;
    }
    return params;
}


function anatomical_average_cargs(
    params: AnatomicalAverageParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("AnatomicalAverage");
    cargs.push(
        "-o",
        (params["output_basename"] ?? null)
    );
    cargs.push(...(params["input_images"] ?? null).map(f => execution.inputFile(f)));
    if ((params["standard_image"] ?? null) !== null) {
        cargs.push(
            "-s",
            execution.inputFile((params["standard_image"] ?? null))
        );
    }
    if ((params["standard_brain_mask"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["standard_brain_mask"] ?? null))
        );
    }
    if ((params["no_crop_flag"] ?? null)) {
        cargs.push("-n");
    }
    if ((params["work_dir"] ?? null) !== null) {
        cargs.push(
            "-w",
            (params["work_dir"] ?? null)
        );
    }
    if ((params["brainsize"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["brainsize"] ?? null))
        );
    }
    if ((params["noclean_flag"] ?? null)) {
        cargs.push("--noclean");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


function anatomical_average_outputs(
    params: AnatomicalAverageParameters,
    execution: Execution,
): AnatomicalAverageOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AnatomicalAverageOutputs = {
        root: execution.outputFile("."),
        avg_output: execution.outputFile([(params["output_basename"] ?? null), "_avg.nii.gz"].join('')),
    };
    return ret;
}


function anatomical_average_execute(
    params: AnatomicalAverageParameters,
    execution: Execution,
): AnatomicalAverageOutputs {
    /**
     * Tool to create an anatomical average of input brain images.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AnatomicalAverageOutputs`).
     */
    params = execution.params(params)
    const cargs = anatomical_average_cargs(params, execution)
    const ret = anatomical_average_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function anatomical_average(
    output_basename: string,
    input_images: Array<InputPathType>,
    standard_image: InputPathType | null = null,
    standard_brain_mask: InputPathType | null = null,
    no_crop_flag: boolean = false,
    work_dir: string | null = null,
    brainsize: number | null = null,
    noclean_flag: boolean = false,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): AnatomicalAverageOutputs {
    /**
     * Tool to create an anatomical average of input brain images.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param output_basename Output basename
     * @param input_images List of input images
     * @param standard_image Standard image (default is MNI152_T1_2mm)
     * @param standard_brain_mask Standard brain mask (default is MNI152_T1_2mm_brain_mask_dil)
     * @param no_crop_flag Do not crop images
     * @param work_dir Local, temporary working directory (to be cleaned up - i.e. deleted)
     * @param brainsize Specify brainsize in mm for internal ROI (via robustfov)
     * @param noclean_flag Do not run the cleanup
     * @param verbose_flag Verbose output
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AnatomicalAverageOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANATOMICAL_AVERAGE_METADATA);
    const params = anatomical_average_params(output_basename, input_images, standard_image, standard_brain_mask, no_crop_flag, work_dir, brainsize, noclean_flag, verbose_flag)
    return anatomical_average_execute(params, execution);
}


export {
      ANATOMICAL_AVERAGE_METADATA,
      AnatomicalAverageOutputs,
      AnatomicalAverageParameters,
      anatomical_average,
      anatomical_average_params,
};
