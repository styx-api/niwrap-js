// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DEPTH_MAP_METADATA: Metadata = {
    id: "b4b586aabaa0388928e52c39e0a960a38ea18d5b.boutiques",
    name: "3dDepthMap",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDepthMapParameters {
    "__STYXTYPE__": "3dDepthMap";
    "input_dataset": InputPathType;
    "output_prefix": string;
    "mask"?: InputPathType | null | undefined;
    "dist_squared": boolean;
    "ignore_voxdims": boolean;
    "rimify"?: number | null | undefined;
    "zeros_are_zero": boolean;
    "zeros_are_neg": boolean;
    "nz_are_neg": boolean;
    "bounds_are_not_zero": boolean;
    "only2D"?: string | null | undefined;
    "binary_only": boolean;
    "verbosity"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dDepthMap": v_3d_depth_map_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dDepthMap": v_3d_depth_map_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_depth_map(...)`.
 *
 * @interface
 */
interface V3dDepthMapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output file
     */
    output_file: OutputPathType;
}


function v_3d_depth_map_params(
    input_dataset: InputPathType,
    output_prefix: string,
    mask: InputPathType | null = null,
    dist_squared: boolean = false,
    ignore_voxdims: boolean = false,
    rimify: number | null = null,
    zeros_are_zero: boolean = false,
    zeros_are_neg: boolean = false,
    nz_are_neg: boolean = false,
    bounds_are_not_zero: boolean = false,
    only2_d: string | null = null,
    binary_only: boolean = false,
    verbosity: number | null = null,
): V3dDepthMapParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset
     * @param output_prefix Output prefix name
     * @param mask Mask dataset, applied after the EDT has been calculated
     * @param dist_squared Output EDT values as distance squared
     * @param ignore_voxdims Ignore voxel dimensions, producing outputs as if each voxel dimension was unity
     * @param rimify Output a map of each ROI's boundary layer up to thickness RIM
     * @param zeros_are_zero EDT values only reported within nonzero locations of the input dataset
     * @param zeros_are_neg EDT values in the zero/background regions will be negative
     * @param nz_are_neg EDT values in the nonzero ROI regions will be negative
     * @param bounds_are_not_zero Treat FOV boundaries for nonzero ROIs as open (i.e., continue infinitely)
     * @param only2_d Run EDT in 2D along the specified plane (axi|cor|sag)
     * @param binary_only Treat the input as a binary mask for a faster calculation
     * @param verbosity Manage verbosity when running code (default: 1)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dDepthMap" as const,
        "input_dataset": input_dataset,
        "output_prefix": output_prefix,
        "dist_squared": dist_squared,
        "ignore_voxdims": ignore_voxdims,
        "zeros_are_zero": zeros_are_zero,
        "zeros_are_neg": zeros_are_neg,
        "nz_are_neg": nz_are_neg,
        "bounds_are_not_zero": bounds_are_not_zero,
        "binary_only": binary_only,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (rimify !== null) {
        params["rimify"] = rimify;
    }
    if (only2_d !== null) {
        params["only2D"] = only2_d;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


function v_3d_depth_map_cargs(
    params: V3dDepthMapParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dDepthMap");
    cargs.push(
        "-input",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["dist_squared"] ?? null)) {
        cargs.push("-dist_sq");
    }
    if ((params["ignore_voxdims"] ?? null)) {
        cargs.push("-ignore_voxdims");
    }
    if ((params["rimify"] ?? null) !== null) {
        cargs.push(
            "-rimify",
            String((params["rimify"] ?? null))
        );
    }
    if ((params["zeros_are_zero"] ?? null)) {
        cargs.push("-zeros_are_zero");
    }
    if ((params["zeros_are_neg"] ?? null)) {
        cargs.push("-zeros_are_neg");
    }
    if ((params["nz_are_neg"] ?? null)) {
        cargs.push("-nz_are_neg");
    }
    if ((params["bounds_are_not_zero"] ?? null)) {
        cargs.push("-bounds_are_not_zero");
    }
    if ((params["only2D"] ?? null) !== null) {
        cargs.push(
            "-only2D",
            (params["only2D"] ?? null)
        );
    }
    if ((params["binary_only"] ?? null)) {
        cargs.push("-binary_only");
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    return cargs;
}


function v_3d_depth_map_outputs(
    params: V3dDepthMapParameters,
    execution: Execution,
): V3dDepthMapOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dDepthMapOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_prefix"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


function v_3d_depth_map_execute(
    params: V3dDepthMapParameters,
    execution: Execution,
): V3dDepthMapOutputs {
    /**
     * Calculates the Euclidean Distance Transform (EDT) for 3D volumes, allowing computation of ROI depth maps and applying various adjustments like masking and rimification.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dDepthMapOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_depth_map_cargs(params, execution)
    const ret = v_3d_depth_map_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_depth_map(
    input_dataset: InputPathType,
    output_prefix: string,
    mask: InputPathType | null = null,
    dist_squared: boolean = false,
    ignore_voxdims: boolean = false,
    rimify: number | null = null,
    zeros_are_zero: boolean = false,
    zeros_are_neg: boolean = false,
    nz_are_neg: boolean = false,
    bounds_are_not_zero: boolean = false,
    only2_d: string | null = null,
    binary_only: boolean = false,
    verbosity: number | null = null,
    runner: Runner | null = null,
): V3dDepthMapOutputs {
    /**
     * Calculates the Euclidean Distance Transform (EDT) for 3D volumes, allowing computation of ROI depth maps and applying various adjustments like masking and rimification.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset
     * @param output_prefix Output prefix name
     * @param mask Mask dataset, applied after the EDT has been calculated
     * @param dist_squared Output EDT values as distance squared
     * @param ignore_voxdims Ignore voxel dimensions, producing outputs as if each voxel dimension was unity
     * @param rimify Output a map of each ROI's boundary layer up to thickness RIM
     * @param zeros_are_zero EDT values only reported within nonzero locations of the input dataset
     * @param zeros_are_neg EDT values in the zero/background regions will be negative
     * @param nz_are_neg EDT values in the nonzero ROI regions will be negative
     * @param bounds_are_not_zero Treat FOV boundaries for nonzero ROIs as open (i.e., continue infinitely)
     * @param only2_d Run EDT in 2D along the specified plane (axi|cor|sag)
     * @param binary_only Treat the input as a binary mask for a faster calculation
     * @param verbosity Manage verbosity when running code (default: 1)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dDepthMapOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DEPTH_MAP_METADATA);
    const params = v_3d_depth_map_params(input_dataset, output_prefix, mask, dist_squared, ignore_voxdims, rimify, zeros_are_zero, zeros_are_neg, nz_are_neg, bounds_are_not_zero, only2_d, binary_only, verbosity)
    return v_3d_depth_map_execute(params, execution);
}


export {
      V3dDepthMapOutputs,
      V3dDepthMapParameters,
      V_3D_DEPTH_MAP_METADATA,
      v_3d_depth_map,
      v_3d_depth_map_params,
};
