// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_GROUP_IN_CORR_METADATA: Metadata = {
    id: "783e0b2b58c72c469e00378de705788029b59277.boutiques",
    name: "3dGroupInCorr",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dGroupInCorrParameters {
    "@type": "afni.3dGroupInCorr";
    "set_a": InputPathType;
    "set_b"?: InputPathType | null | undefined;
    "apair": boolean;
    "label_a"?: string | null | undefined;
    "label_b"?: string | null | undefined;
    "pooled": boolean;
    "unpooled": boolean;
    "paired": boolean;
    "nosix": boolean;
    "covariates_file"?: InputPathType | null | undefined;
    "center"?: string | null | undefined;
    "seed_radius"?: number | null | undefined;
    "sendall": boolean;
    "donocov": boolean;
    "dospcov": boolean;
    "cluster"?: string | null | undefined;
    "read": boolean;
    "ztest": boolean;
    "ah"?: string | null | undefined;
    "port_offset"?: number | null | undefined;
    "port_offset_quiet"?: number | null | undefined;
    "port_bloc"?: number | null | undefined;
    "suma": boolean;
    "quiet": boolean;
    "verbose": boolean;
    "very_verbose": boolean;
    "debug": boolean;
    "batch"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dGroupInCorr": v_3d_group_in_corr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dGroupInCorr": v_3d_group_in_corr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_group_in_corr(...)`.
 *
 * @interface
 */
interface V3dGroupInCorrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Results from analysis
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param set_a Setup file describing the first dataset collection.
 * @param set_b Setup file describing the second dataset collection for two-sample t-test analysis.
 * @param apair Use -setA collection again but with different seed locations; produce paired t-test.
 * @param label_a Label for sub-bricks corresponding to setA.
 * @param label_b Label for sub-bricks corresponding to setB.
 * @param pooled Use pooled variance estimator for two-sample un-paired t-test.
 * @param unpooled Use unpooled variance estimator for two-sample un-paired t-test.
 * @param paired Use a two-sample paired t-test.
 * @param nosix Suppress the individual 1-sample t-tests and only return the difference 2-sample t-test.
 * @param covariates_file File containing covariate values for each dataset.
 * @param center Option for centering covariates.
 * @param seed_radius Radius for seed voxel time series averaging (mm).
 * @param sendall Send all individual subject results to AFNI along with group statistics.
 * @param donocov Compute results both with and without covariates.
 * @param dospcov Compute Spearman (rank) correlation coefficient of subject correlation results vs each covariate.
 * @param cluster Input results from a 3dClustSim run to interface with AFNI.
 * @param read Force program to read data into memory instead of memory mapping.
 * @param ztest Debugging option to test if input data is all zero.
 * @param ah Connect to AFNI/SUMA on a remote host.
 * @param port_offset Provide a port offset.
 * @param port_offset_quiet Provide a port offset, with less verbose output.
 * @param port_bloc Provide a port offset bloc.
 * @param suma Talk to SUMA instead of AFNI.
 * @param quiet Suppress informational messages.
 * @param verbose Print extra informational messages.
 * @param very_verbose Print even more detailed informational messages.
 * @param debug Enable internal testing.
 * @param batch Run program in batch mode with specified METHOD and command file.
 *
 * @returns Parameter dictionary
 */
function v_3d_group_in_corr_params(
    set_a: InputPathType,
    set_b: InputPathType | null = null,
    apair: boolean = false,
    label_a: string | null = null,
    label_b: string | null = null,
    pooled: boolean = false,
    unpooled: boolean = false,
    paired: boolean = false,
    nosix: boolean = false,
    covariates_file: InputPathType | null = null,
    center: string | null = null,
    seed_radius: number | null = null,
    sendall: boolean = false,
    donocov: boolean = false,
    dospcov: boolean = false,
    cluster: string | null = null,
    read: boolean = false,
    ztest: boolean = false,
    ah: string | null = null,
    port_offset: number | null = null,
    port_offset_quiet: number | null = null,
    port_bloc: number | null = null,
    suma: boolean = false,
    quiet: boolean = false,
    verbose: boolean = false,
    very_verbose: boolean = false,
    debug: boolean = false,
    batch: string | null = null,
): V3dGroupInCorrParameters {
    const params = {
        "@type": "afni.3dGroupInCorr" as const,
        "set_a": set_a,
        "apair": apair,
        "pooled": pooled,
        "unpooled": unpooled,
        "paired": paired,
        "nosix": nosix,
        "sendall": sendall,
        "donocov": donocov,
        "dospcov": dospcov,
        "read": read,
        "ztest": ztest,
        "suma": suma,
        "quiet": quiet,
        "verbose": verbose,
        "very_verbose": very_verbose,
        "debug": debug,
    };
    if (set_b !== null) {
        params["set_b"] = set_b;
    }
    if (label_a !== null) {
        params["label_a"] = label_a;
    }
    if (label_b !== null) {
        params["label_b"] = label_b;
    }
    if (covariates_file !== null) {
        params["covariates_file"] = covariates_file;
    }
    if (center !== null) {
        params["center"] = center;
    }
    if (seed_radius !== null) {
        params["seed_radius"] = seed_radius;
    }
    if (cluster !== null) {
        params["cluster"] = cluster;
    }
    if (ah !== null) {
        params["ah"] = ah;
    }
    if (port_offset !== null) {
        params["port_offset"] = port_offset;
    }
    if (port_offset_quiet !== null) {
        params["port_offset_quiet"] = port_offset_quiet;
    }
    if (port_bloc !== null) {
        params["port_bloc"] = port_bloc;
    }
    if (batch !== null) {
        params["batch"] = batch;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_group_in_corr_cargs(
    params: V3dGroupInCorrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dGroupInCorr");
    cargs.push(
        "-setA",
        execution.inputFile((params["set_a"] ?? null))
    );
    if ((params["set_b"] ?? null) !== null) {
        cargs.push(
            "-setB",
            execution.inputFile((params["set_b"] ?? null))
        );
    }
    if ((params["apair"] ?? null)) {
        cargs.push("-Apair");
    }
    if ((params["label_a"] ?? null) !== null) {
        cargs.push(
            "-labelA",
            (params["label_a"] ?? null)
        );
    }
    if ((params["label_b"] ?? null) !== null) {
        cargs.push(
            "-labelB",
            (params["label_b"] ?? null)
        );
    }
    if ((params["pooled"] ?? null)) {
        cargs.push("-pooled");
    }
    if ((params["unpooled"] ?? null)) {
        cargs.push("-unpooled");
    }
    if ((params["paired"] ?? null)) {
        cargs.push("-paired");
    }
    if ((params["nosix"] ?? null)) {
        cargs.push("-nosix");
    }
    if ((params["covariates_file"] ?? null) !== null) {
        cargs.push(
            "-covariates",
            execution.inputFile((params["covariates_file"] ?? null))
        );
    }
    if ((params["center"] ?? null) !== null) {
        cargs.push(
            "-center",
            (params["center"] ?? null)
        );
    }
    if ((params["seed_radius"] ?? null) !== null) {
        cargs.push(
            "-seedrad",
            String((params["seed_radius"] ?? null))
        );
    }
    if ((params["sendall"] ?? null)) {
        cargs.push("-sendall");
    }
    if ((params["donocov"] ?? null)) {
        cargs.push("-donocov");
    }
    if ((params["dospcov"] ?? null)) {
        cargs.push("-dospcov");
    }
    if ((params["cluster"] ?? null) !== null) {
        cargs.push(
            "-clust",
            (params["cluster"] ?? null)
        );
    }
    if ((params["read"] ?? null)) {
        cargs.push("-read");
    }
    if ((params["ztest"] ?? null)) {
        cargs.push("-ztest");
    }
    if ((params["ah"] ?? null) !== null) {
        cargs.push(
            "-ah",
            (params["ah"] ?? null)
        );
    }
    if ((params["port_offset"] ?? null) !== null) {
        cargs.push(
            "-np",
            String((params["port_offset"] ?? null))
        );
    }
    if ((params["port_offset_quiet"] ?? null) !== null) {
        cargs.push(
            "-npq",
            String((params["port_offset_quiet"] ?? null))
        );
    }
    if ((params["port_bloc"] ?? null) !== null) {
        cargs.push(
            "-npb",
            String((params["port_bloc"] ?? null))
        );
    }
    if ((params["suma"] ?? null)) {
        cargs.push("-suma");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["very_verbose"] ?? null)) {
        cargs.push("-VERB");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["batch"] ?? null) !== null) {
        cargs.push(
            "-batch",
            (params["batch"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_group_in_corr_outputs(
    params: V3dGroupInCorrParameters,
    execution: Execution,
): V3dGroupInCorrOutputs {
    const ret: V3dGroupInCorrOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([path.basename((params["set_a"] ?? null)), ".results.nii"].join('')),
    };
    return ret;
}


/**
 * Functional connectivity analysis in group of subjects.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dGroupInCorrOutputs`).
 */
function v_3d_group_in_corr_execute(
    params: V3dGroupInCorrParameters,
    execution: Execution,
): V3dGroupInCorrOutputs {
    params = execution.params(params)
    const cargs = v_3d_group_in_corr_cargs(params, execution)
    const ret = v_3d_group_in_corr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Functional connectivity analysis in group of subjects.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param set_a Setup file describing the first dataset collection.
 * @param set_b Setup file describing the second dataset collection for two-sample t-test analysis.
 * @param apair Use -setA collection again but with different seed locations; produce paired t-test.
 * @param label_a Label for sub-bricks corresponding to setA.
 * @param label_b Label for sub-bricks corresponding to setB.
 * @param pooled Use pooled variance estimator for two-sample un-paired t-test.
 * @param unpooled Use unpooled variance estimator for two-sample un-paired t-test.
 * @param paired Use a two-sample paired t-test.
 * @param nosix Suppress the individual 1-sample t-tests and only return the difference 2-sample t-test.
 * @param covariates_file File containing covariate values for each dataset.
 * @param center Option for centering covariates.
 * @param seed_radius Radius for seed voxel time series averaging (mm).
 * @param sendall Send all individual subject results to AFNI along with group statistics.
 * @param donocov Compute results both with and without covariates.
 * @param dospcov Compute Spearman (rank) correlation coefficient of subject correlation results vs each covariate.
 * @param cluster Input results from a 3dClustSim run to interface with AFNI.
 * @param read Force program to read data into memory instead of memory mapping.
 * @param ztest Debugging option to test if input data is all zero.
 * @param ah Connect to AFNI/SUMA on a remote host.
 * @param port_offset Provide a port offset.
 * @param port_offset_quiet Provide a port offset, with less verbose output.
 * @param port_bloc Provide a port offset bloc.
 * @param suma Talk to SUMA instead of AFNI.
 * @param quiet Suppress informational messages.
 * @param verbose Print extra informational messages.
 * @param very_verbose Print even more detailed informational messages.
 * @param debug Enable internal testing.
 * @param batch Run program in batch mode with specified METHOD and command file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dGroupInCorrOutputs`).
 */
function v_3d_group_in_corr(
    set_a: InputPathType,
    set_b: InputPathType | null = null,
    apair: boolean = false,
    label_a: string | null = null,
    label_b: string | null = null,
    pooled: boolean = false,
    unpooled: boolean = false,
    paired: boolean = false,
    nosix: boolean = false,
    covariates_file: InputPathType | null = null,
    center: string | null = null,
    seed_radius: number | null = null,
    sendall: boolean = false,
    donocov: boolean = false,
    dospcov: boolean = false,
    cluster: string | null = null,
    read: boolean = false,
    ztest: boolean = false,
    ah: string | null = null,
    port_offset: number | null = null,
    port_offset_quiet: number | null = null,
    port_bloc: number | null = null,
    suma: boolean = false,
    quiet: boolean = false,
    verbose: boolean = false,
    very_verbose: boolean = false,
    debug: boolean = false,
    batch: string | null = null,
    runner: Runner | null = null,
): V3dGroupInCorrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_GROUP_IN_CORR_METADATA);
    const params = v_3d_group_in_corr_params(set_a, set_b, apair, label_a, label_b, pooled, unpooled, paired, nosix, covariates_file, center, seed_radius, sendall, donocov, dospcov, cluster, read, ztest, ah, port_offset, port_offset_quiet, port_bloc, suma, quiet, verbose, very_verbose, debug, batch)
    return v_3d_group_in_corr_execute(params, execution);
}


export {
      V3dGroupInCorrOutputs,
      V3dGroupInCorrParameters,
      V_3D_GROUP_IN_CORR_METADATA,
      v_3d_group_in_corr,
      v_3d_group_in_corr_cargs,
      v_3d_group_in_corr_execute,
      v_3d_group_in_corr_outputs,
      v_3d_group_in_corr_params,
};
