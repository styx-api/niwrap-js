// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AFF2RIGID_METADATA: Metadata = {
    id: "d0d509179394a363831303d1ec819c729bcc7701.boutiques",
    name: "aff2rigid",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Aff2rigidParameters {
    "@type": "fsl.aff2rigid";
    "input_transform": InputPathType;
    "output_transform": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.aff2rigid": aff2rigid_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `aff2rigid(...)`.
 *
 * @interface
 */
interface Aff2rigidOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_transform Input FLIRT transform (12 DOF) from the input image to standard space.
 * @param output_transform Output matrix which will convert the input image to standard space using a 6 DOF transformation.
 *
 * @returns Parameter dictionary
 */
function aff2rigid_params(
    input_transform: InputPathType,
    output_transform: string,
): Aff2rigidParameters {
    const params = {
        "@type": "fsl.aff2rigid" as const,
        "input_transform": input_transform,
        "output_transform": output_transform,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function aff2rigid_cargs(
    params: Aff2rigidParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("aff2rigid");
    cargs.push(execution.inputFile((params["input_transform"] ?? null)));
    cargs.push((params["output_transform"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function aff2rigid_outputs(
    params: Aff2rigidParameters,
    execution: Execution,
): Aff2rigidOutputs {
    const ret: Aff2rigidOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * aff2rigid
 *
 * Tool for converting affine transformations to rigid transformations.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Aff2rigidOutputs`).
 */
function aff2rigid_execute(
    params: Aff2rigidParameters,
    runner: Runner | null = null,
): Aff2rigidOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AFF2RIGID_METADATA);
    params = execution.params(params)
    const cargs = aff2rigid_cargs(params, execution)
    const ret = aff2rigid_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * aff2rigid
 *
 * Tool for converting affine transformations to rigid transformations.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_transform Input FLIRT transform (12 DOF) from the input image to standard space.
 * @param output_transform Output matrix which will convert the input image to standard space using a 6 DOF transformation.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Aff2rigidOutputs`).
 */
function aff2rigid(
    input_transform: InputPathType,
    output_transform: string,
    runner: Runner | null = null,
): Aff2rigidOutputs {
    const params = aff2rigid_params(input_transform, output_transform)
    return aff2rigid_execute(params, runner);
}


export {
      AFF2RIGID_METADATA,
      Aff2rigidOutputs,
      Aff2rigidParameters,
      aff2rigid,
      aff2rigid_execute,
      aff2rigid_params,
};
