// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EDDY_CORRECT_METADATA: Metadata = {
    id: "c21f792dc85e3c8b5478bfa95141438203590207.boutiques",
    name: "eddy_correct",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface EddyCorrectParameters {
    "__STYXTYPE__": "eddy_correct";
    "4d_input": InputPathType;
    "4d_output": string;
    "reference_no": number;
    "interp_method"?: "trilinear" | "spline" | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "eddy_correct": eddy_correct_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "eddy_correct": eddy_correct_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `eddy_correct(...)`.
 *
 * @interface
 */
interface EddyCorrectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected 4D output image file
     */
    corrected_4d_output: OutputPathType;
}


function eddy_correct_params(
    v_4d_input: InputPathType,
    v_4d_output: string,
    reference_no: number,
    interp_method: "trilinear" | "spline" | null = "trilinear",
): EddyCorrectParameters {
    /**
     * Build parameters.
    
     * @param v_4d_input Input 4D image file (e.g., dti.nii.gz)
     * @param v_4d_output Output 4D image file (e.g., dti_corrected.nii.gz)
     * @param reference_no Reference number
     * @param interp_method Interpolation method to use: 'trilinear' or 'spline'
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "eddy_correct" as const,
        "4d_input": v_4d_input,
        "4d_output": v_4d_output,
        "reference_no": reference_no,
    };
    if (interp_method !== null) {
        params["interp_method"] = interp_method;
    }
    return params;
}


function eddy_correct_cargs(
    params: EddyCorrectParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("eddy_correct");
    cargs.push(execution.inputFile((params["4d_input"] ?? null)));
    cargs.push((params["4d_output"] ?? null));
    if ((params["interp_method"] ?? null) !== null) {
        cargs.push([String((params["reference_no"] ?? null)), (params["interp_method"] ?? null)].join(''));
    }
    return cargs;
}


function eddy_correct_outputs(
    params: EddyCorrectParameters,
    execution: Execution,
): EddyCorrectOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: EddyCorrectOutputs = {
        root: execution.outputFile("."),
        corrected_4d_output: execution.outputFile([(params["4d_output"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


function eddy_correct_execute(
    params: EddyCorrectParameters,
    execution: Execution,
): EddyCorrectOutputs {
    /**
     * Eddy current correction tool for FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `EddyCorrectOutputs`).
     */
    params = execution.params(params)
    const cargs = eddy_correct_cargs(params, execution)
    const ret = eddy_correct_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function eddy_correct(
    v_4d_input: InputPathType,
    v_4d_output: string,
    reference_no: number,
    interp_method: "trilinear" | "spline" | null = "trilinear",
    runner: Runner | null = null,
): EddyCorrectOutputs {
    /**
     * Eddy current correction tool for FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param v_4d_input Input 4D image file (e.g., dti.nii.gz)
     * @param v_4d_output Output 4D image file (e.g., dti_corrected.nii.gz)
     * @param reference_no Reference number
     * @param interp_method Interpolation method to use: 'trilinear' or 'spline'
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `EddyCorrectOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EDDY_CORRECT_METADATA);
    const params = eddy_correct_params(v_4d_input, v_4d_output, reference_no, interp_method)
    return eddy_correct_execute(params, execution);
}


export {
      EDDY_CORRECT_METADATA,
      EddyCorrectOutputs,
      EddyCorrectParameters,
      eddy_correct,
      eddy_correct_params,
};
