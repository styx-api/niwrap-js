// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DMATCALC_METADATA: Metadata = {
    id: "363bd7932d82bc77c3f5fe6e0307d7efddad15de.boutiques",
    name: "1dmatcalc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dmatcalcParameters {
    "__STYXTYPE__": "1dmatcalc";
    "expression"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dmatcalc": v_1dmatcalc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dmatcalc": v_1dmatcalc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dmatcalc(...)`.
 *
 * @interface
 */
interface V1dmatcalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file resulting from the evaluated expression
     */
    output_file: OutputPathType;
}


function v_1dmatcalc_params(
    expression: string | null = null,
): V1dmatcalcParameters {
    /**
     * Build parameters.
    
     * @param expression Expression to evaluate the RPN matrix-valued operations
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dmatcalc" as const,
    };
    if (expression !== null) {
        params["expression"] = expression;
    }
    return params;
}


function v_1dmatcalc_cargs(
    params: V1dmatcalcParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dmatcalc");
    if ((params["expression"] ?? null) !== null) {
        cargs.push((params["expression"] ?? null));
    }
    return cargs;
}


function v_1dmatcalc_outputs(
    params: V1dmatcalcParameters,
    execution: Execution,
): V1dmatcalcOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dmatcalcOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["[OUTPUT_FILE]"].join('')),
    };
    return ret;
}


function v_1dmatcalc_execute(
    params: V1dmatcalcParameters,
    execution: Execution,
): V1dmatcalcOutputs {
    /**
     * A tool to evaluate space-delimited RPN (Reverse Polish Notation) matrix-valued expressions.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dmatcalcOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1dmatcalc_cargs(params, execution)
    const ret = v_1dmatcalc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1dmatcalc(
    expression: string | null = null,
    runner: Runner | null = null,
): V1dmatcalcOutputs {
    /**
     * A tool to evaluate space-delimited RPN (Reverse Polish Notation) matrix-valued expressions.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param expression Expression to evaluate the RPN matrix-valued operations
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dmatcalcOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DMATCALC_METADATA);
    const params = v_1dmatcalc_params(expression)
    return v_1dmatcalc_execute(params, execution);
}


export {
      V1dmatcalcOutputs,
      V1dmatcalcParameters,
      V_1DMATCALC_METADATA,
      v_1dmatcalc,
      v_1dmatcalc_params,
};
