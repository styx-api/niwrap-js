// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EXTRACT_REGION_FROM_IMAGE_METADATA: Metadata = {
    id: "10d27f71688084d6c7f941dd2b6d185bedce38a8.boutiques",
    name: "ExtractRegionFromImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface ExtractRegionFromImageRegionMinMaxIndexParameters {
    "@type"?: "region_min_max_index";
    "min_index": string;
    "max_index": string;
}
type ExtractRegionFromImageRegionMinMaxIndexParametersTagged = Required<Pick<ExtractRegionFromImageRegionMinMaxIndexParameters, '@type'>> & ExtractRegionFromImageRegionMinMaxIndexParameters;


interface ExtractRegionFromImageRegionLabelParameters {
    "@type"?: "region_label";
    "label": string;
}
type ExtractRegionFromImageRegionLabelParametersTagged = Required<Pick<ExtractRegionFromImageRegionLabelParameters, '@type'>> & ExtractRegionFromImageRegionLabelParameters;


interface ExtractRegionFromImageRegionDomainImageParameters {
    "@type"?: "region_domain_image";
    "domain_image": InputPathType;
}
type ExtractRegionFromImageRegionDomainImageParametersTagged = Required<Pick<ExtractRegionFromImageRegionDomainImageParameters, '@type'>> & ExtractRegionFromImageRegionDomainImageParameters;


interface ExtractRegionFromImageRegionLabelWithImageParameters {
    "@type"?: "region_label_with_image";
    "label": string;
    "label_image": InputPathType;
}
type ExtractRegionFromImageRegionLabelWithImageParametersTagged = Required<Pick<ExtractRegionFromImageRegionLabelWithImageParameters, '@type'>> & ExtractRegionFromImageRegionLabelWithImageParameters;


interface ExtractRegionFromImageParameters {
    "@type"?: "ants/ExtractRegionFromImage";
    "image_dimension": number;
    "input_image": InputPathType;
    "output_image": string;
    "region_specification": ExtractRegionFromImageRegionMinMaxIndexParametersTagged | ExtractRegionFromImageRegionLabelParametersTagged | ExtractRegionFromImageRegionDomainImageParametersTagged | ExtractRegionFromImageRegionLabelWithImageParametersTagged;
}
type ExtractRegionFromImageParametersTagged = Required<Pick<ExtractRegionFromImageParameters, '@type'>> & ExtractRegionFromImageParameters;


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function extract_region_from_image_region_specification_cargs_dyn_fn(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "region_min_max_index": extract_region_from_image_region_min_max_index_cargs,
        "region_label": extract_region_from_image_region_label_cargs,
        "region_domain_image": extract_region_from_image_region_domain_image_cargs,
        "region_label_with_image": extract_region_from_image_region_label_with_image_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function extract_region_from_image_region_specification_outputs_dyn_fn(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param min_index Minimum index to define the starting point of the region.
 * @param max_index Maximum index to define the endpoint of the region.
 *
 * @returns Parameter dictionary
 */
function extract_region_from_image_region_min_max_index_params(
    min_index: string,
    max_index: string,
): ExtractRegionFromImageRegionMinMaxIndexParametersTagged {
    const params = {
        "@type": "region_min_max_index" as const,
        "min_index": min_index,
        "max_index": max_index,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function extract_region_from_image_region_min_max_index_cargs(
    params: ExtractRegionFromImageRegionMinMaxIndexParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["min_index"] ?? null));
    cargs.push((params["max_index"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param label Label value to extract the region corresponding to the specified label.
 *
 * @returns Parameter dictionary
 */
function extract_region_from_image_region_label_params(
    label: string,
): ExtractRegionFromImageRegionLabelParametersTagged {
    const params = {
        "@type": "region_label" as const,
        "label": label,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function extract_region_from_image_region_label_cargs(
    params: ExtractRegionFromImageRegionLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["label"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param domain_image Image defining the domain from which to extract the region.
 *
 * @returns Parameter dictionary
 */
function extract_region_from_image_region_domain_image_params(
    domain_image: InputPathType,
): ExtractRegionFromImageRegionDomainImageParametersTagged {
    const params = {
        "@type": "region_domain_image" as const,
        "domain_image": domain_image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function extract_region_from_image_region_domain_image_cargs(
    params: ExtractRegionFromImageRegionDomainImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["domain_image"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param label Label value used for the region extraction.
 * @param label_image Image containing label information.
 *
 * @returns Parameter dictionary
 */
function extract_region_from_image_region_label_with_image_params(
    label: string,
    label_image: InputPathType,
): ExtractRegionFromImageRegionLabelWithImageParametersTagged {
    const params = {
        "@type": "region_label_with_image" as const,
        "label": label,
        "label_image": label_image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function extract_region_from_image_region_label_with_image_cargs(
    params: ExtractRegionFromImageRegionLabelWithImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["label"] ?? null));
    cargs.push(execution.inputFile((params["label_image"] ?? null)));
    cargs.push("1");
    return cargs;
}


/**
 * Output object returned when calling `ExtractRegionFromImageParameters(...)`.
 *
 * @interface
 */
interface ExtractRegionFromImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the extracted region.
     */
    output_image_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimensionality of the image.
 * @param input_image Path to the input image from which the region will be extracted.
 * @param output_image Path to the output image where the extracted region will be saved.
 * @param region_specification Specify the region to extract using indices, label, domain image, or label with label image.
 *
 * @returns Parameter dictionary
 */
function extract_region_from_image_params(
    image_dimension: number,
    input_image: InputPathType,
    output_image: string,
    region_specification: ExtractRegionFromImageRegionMinMaxIndexParametersTagged | ExtractRegionFromImageRegionLabelParametersTagged | ExtractRegionFromImageRegionDomainImageParametersTagged | ExtractRegionFromImageRegionLabelWithImageParametersTagged,
): ExtractRegionFromImageParametersTagged {
    const params = {
        "@type": "ants/ExtractRegionFromImage" as const,
        "image_dimension": image_dimension,
        "input_image": input_image,
        "output_image": output_image,
        "region_specification": region_specification,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function extract_region_from_image_cargs(
    params: ExtractRegionFromImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ExtractRegionFromImage");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    cargs.push(...extract_region_from_image_region_specification_cargs_dyn_fn((params["region_specification"] ?? null)["@type"])((params["region_specification"] ?? null), execution));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function extract_region_from_image_outputs(
    params: ExtractRegionFromImageParameters,
    execution: Execution,
): ExtractRegionFromImageOutputs {
    const ret: ExtractRegionFromImageOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ExtractRegionFromImage
 *
 * ExtractRegionFromImage can be used to extract a specific region from a given image. The region can be specified via indices, label, or another domain image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ExtractRegionFromImageOutputs`).
 */
function extract_region_from_image_execute(
    params: ExtractRegionFromImageParameters,
    runner: Runner | null = null,
): ExtractRegionFromImageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EXTRACT_REGION_FROM_IMAGE_METADATA);
    params = execution.params(params)
    const cargs = extract_region_from_image_cargs(params, execution)
    const ret = extract_region_from_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ExtractRegionFromImage
 *
 * ExtractRegionFromImage can be used to extract a specific region from a given image. The region can be specified via indices, label, or another domain image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimensionality of the image.
 * @param input_image Path to the input image from which the region will be extracted.
 * @param output_image Path to the output image where the extracted region will be saved.
 * @param region_specification Specify the region to extract using indices, label, domain image, or label with label image.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ExtractRegionFromImageOutputs`).
 */
function extract_region_from_image(
    image_dimension: number,
    input_image: InputPathType,
    output_image: string,
    region_specification: ExtractRegionFromImageRegionMinMaxIndexParametersTagged | ExtractRegionFromImageRegionLabelParametersTagged | ExtractRegionFromImageRegionDomainImageParametersTagged | ExtractRegionFromImageRegionLabelWithImageParametersTagged,
    runner: Runner | null = null,
): ExtractRegionFromImageOutputs {
    const params = extract_region_from_image_params(image_dimension, input_image, output_image, region_specification)
    return extract_region_from_image_execute(params, runner);
}


export {
      EXTRACT_REGION_FROM_IMAGE_METADATA,
      ExtractRegionFromImageOutputs,
      extract_region_from_image,
      extract_region_from_image_execute,
      extract_region_from_image_params,
      extract_region_from_image_region_domain_image_params,
      extract_region_from_image_region_label_params,
      extract_region_from_image_region_label_with_image_params,
      extract_region_from_image_region_min_max_index_params,
};
