// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_POLYFIT_METADATA: Metadata = {
    id: "71d806c929428c9ef4f179dbd4ad3511aa5ac59a.boutiques",
    name: "3dPolyfit",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dPolyfitParameters {
    "__STYXTYPE__": "3dPolyfit";
    "input_dataset": InputPathType;
    "poly_order"?: number | null | undefined;
    "blur"?: number | null | undefined;
    "median_radius"?: number | null | undefined;
    "output_prefix"?: string | null | undefined;
    "resid_prefix"?: string | null | undefined;
    "coeff_output"?: string | null | undefined;
    "automask": boolean;
    "mask_dataset"?: InputPathType | null | undefined;
    "mean_scale": boolean;
    "clip_box": boolean;
    "fit_method"?: number | null | undefined;
    "base_dataset"?: InputPathType | null | undefined;
    "verbose": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dPolyfit": v_3d_polyfit_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dPolyfit": v_3d_polyfit_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_polyfit(...)`.
 *
 * @interface
 */
interface V3dPolyfitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Fitted output dataset
     */
    output_file: OutputPathType | null;
    /**
     * Residual dataset
     */
    resid_file: OutputPathType | null;
    /**
     * Coefficient output file
     */
    coeff_file: OutputPathType | null;
}


function v_3d_polyfit_params(
    input_dataset: InputPathType,
    poly_order: number | null = null,
    blur: number | null = null,
    median_radius: number | null = null,
    output_prefix: string | null = null,
    resid_prefix: string | null = null,
    coeff_output: string | null = null,
    automask: boolean = false,
    mask_dataset: InputPathType | null = null,
    mean_scale: boolean = false,
    clip_box: boolean = false,
    fit_method: number | null = null,
    base_dataset: InputPathType | null = null,
    verbose: boolean = false,
): V3dPolyfitParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset (e.g., data.nii.gz)
     * @param poly_order Maximum polynomial order (0..9); [default=3]; [n=0 is the constant 1]; [n=-1 means only use volumes from '-base']
     * @param blur Gaussian blur input dataset (inside mask) with FWHM='f' (mm)
     * @param median_radius Radius (voxels) of preliminary median filter of input; default is no blurring
     * @param output_prefix Use 'pp' for prefix of output dataset (the fit); default prefix is 'Polyfit'; use NULL to skip this output
     * @param resid_prefix Use 'rr' for the prefix of the residual dataset; default is not to output residuals
     * @param coeff_output Save coefficients of fit into text file cc.1D; default is not to save these coefficients
     * @param automask Create a mask (a la 3dAutomask)
     * @param mask_dataset Create a mask from nonzero voxels in 'mset'; default is not to use a mask
     * @param mean_scale Scale the mean value of the fit (inside the mask) to 1; probably this option is not useful for anything
     * @param clip_box Clip fit values outside the rectilinear box containing the mask to the edge of that box, to avoid weird artifacts
     * @param fit_method Set 'mm' to 2 for least squares fit; set it to 1 for L1 fit [default method=2]; [Note that L1 fitting is slower than L2 fitting]
     * @param base_dataset In addition to the polynomial fit, also use the volumes in dataset 'bb' as extra basis functions
     * @param verbose Print fun and useful progress reports
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dPolyfit" as const,
        "input_dataset": input_dataset,
        "automask": automask,
        "mean_scale": mean_scale,
        "clip_box": clip_box,
        "verbose": verbose,
    };
    if (poly_order !== null) {
        params["poly_order"] = poly_order;
    }
    if (blur !== null) {
        params["blur"] = blur;
    }
    if (median_radius !== null) {
        params["median_radius"] = median_radius;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (resid_prefix !== null) {
        params["resid_prefix"] = resid_prefix;
    }
    if (coeff_output !== null) {
        params["coeff_output"] = coeff_output;
    }
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    if (fit_method !== null) {
        params["fit_method"] = fit_method;
    }
    if (base_dataset !== null) {
        params["base_dataset"] = base_dataset;
    }
    return params;
}


function v_3d_polyfit_cargs(
    params: V3dPolyfitParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dPolyfit");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["poly_order"] ?? null) !== null) {
        cargs.push(
            "-nord",
            String((params["poly_order"] ?? null))
        );
    }
    if ((params["blur"] ?? null) !== null) {
        cargs.push(
            "-blur",
            String((params["blur"] ?? null))
        );
    }
    if ((params["median_radius"] ?? null) !== null) {
        cargs.push(
            "-mrad",
            String((params["median_radius"] ?? null))
        );
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["resid_prefix"] ?? null) !== null) {
        cargs.push(
            "-resid",
            (params["resid_prefix"] ?? null)
        );
    }
    if ((params["coeff_output"] ?? null) !== null) {
        cargs.push(
            "-1Dcoef",
            (params["coeff_output"] ?? null)
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    if ((params["mean_scale"] ?? null)) {
        cargs.push("-mone");
    }
    if ((params["clip_box"] ?? null)) {
        cargs.push("-mclip");
    }
    if ((params["fit_method"] ?? null) !== null) {
        cargs.push(
            "-meth",
            String((params["fit_method"] ?? null))
        );
    }
    if ((params["base_dataset"] ?? null) !== null) {
        cargs.push(
            "-base",
            execution.inputFile((params["base_dataset"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    return cargs;
}


function v_3d_polyfit_outputs(
    params: V3dPolyfitParameters,
    execution: Execution,
): V3dPolyfitOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dPolyfitOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".nii.gz"].join('')) : null,
        resid_file: ((params["resid_prefix"] ?? null) !== null) ? execution.outputFile([(params["resid_prefix"] ?? null), ".nii.gz"].join('')) : null,
        coeff_file: ((params["coeff_output"] ?? null) !== null) ? execution.outputFile([(params["coeff_output"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


function v_3d_polyfit_execute(
    params: V3dPolyfitParameters,
    execution: Execution,
): V3dPolyfitOutputs {
    /**
     * Fits a polynomial in space to the input dataset and outputs that fitted dataset. You can also add your own basis datasets to the fitting mix.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dPolyfitOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_polyfit_cargs(params, execution)
    const ret = v_3d_polyfit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_polyfit(
    input_dataset: InputPathType,
    poly_order: number | null = null,
    blur: number | null = null,
    median_radius: number | null = null,
    output_prefix: string | null = null,
    resid_prefix: string | null = null,
    coeff_output: string | null = null,
    automask: boolean = false,
    mask_dataset: InputPathType | null = null,
    mean_scale: boolean = false,
    clip_box: boolean = false,
    fit_method: number | null = null,
    base_dataset: InputPathType | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): V3dPolyfitOutputs {
    /**
     * Fits a polynomial in space to the input dataset and outputs that fitted dataset. You can also add your own basis datasets to the fitting mix.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset (e.g., data.nii.gz)
     * @param poly_order Maximum polynomial order (0..9); [default=3]; [n=0 is the constant 1]; [n=-1 means only use volumes from '-base']
     * @param blur Gaussian blur input dataset (inside mask) with FWHM='f' (mm)
     * @param median_radius Radius (voxels) of preliminary median filter of input; default is no blurring
     * @param output_prefix Use 'pp' for prefix of output dataset (the fit); default prefix is 'Polyfit'; use NULL to skip this output
     * @param resid_prefix Use 'rr' for the prefix of the residual dataset; default is not to output residuals
     * @param coeff_output Save coefficients of fit into text file cc.1D; default is not to save these coefficients
     * @param automask Create a mask (a la 3dAutomask)
     * @param mask_dataset Create a mask from nonzero voxels in 'mset'; default is not to use a mask
     * @param mean_scale Scale the mean value of the fit (inside the mask) to 1; probably this option is not useful for anything
     * @param clip_box Clip fit values outside the rectilinear box containing the mask to the edge of that box, to avoid weird artifacts
     * @param fit_method Set 'mm' to 2 for least squares fit; set it to 1 for L1 fit [default method=2]; [Note that L1 fitting is slower than L2 fitting]
     * @param base_dataset In addition to the polynomial fit, also use the volumes in dataset 'bb' as extra basis functions
     * @param verbose Print fun and useful progress reports
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dPolyfitOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_POLYFIT_METADATA);
    const params = v_3d_polyfit_params(input_dataset, poly_order, blur, median_radius, output_prefix, resid_prefix, coeff_output, automask, mask_dataset, mean_scale, clip_box, fit_method, base_dataset, verbose)
    return v_3d_polyfit_execute(params, execution);
}


export {
      V3dPolyfitOutputs,
      V3dPolyfitParameters,
      V_3D_POLYFIT_METADATA,
      v_3d_polyfit,
      v_3d_polyfit_params,
};
