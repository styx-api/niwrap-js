// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TTOZ_METADATA: Metadata = {
    id: "9988bec3a64455c5b76a5e959148ef7d7d9455c4.boutiques",
    name: "ttoz",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface TtozParameters {
    "__STYXTYPE__": "ttoz";
    "varsfile": InputPathType;
    "cbsfile": InputPathType;
    "dof": number;
    "outputvol"?: string | null | undefined;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "ttoz": ttoz_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "ttoz": ttoz_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ttoz(...)`.
 *
 * @interface
 */
interface TtozOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output Z-statistic volume
     */
    output_zvol: OutputPathType | null;
}


function ttoz_params(
    varsfile: InputPathType,
    cbsfile: InputPathType,
    dof: number,
    outputvol: string | null = null,
    help_flag: boolean = false,
): TtozParameters {
    /**
     * Build parameters.
    
     * @param varsfile Input variables file
     * @param cbsfile Input CBS file
     * @param dof Degrees of freedom
     * @param outputvol Output volume name (default is zstats)
     * @param help_flag Display help information
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ttoz" as const,
        "varsfile": varsfile,
        "cbsfile": cbsfile,
        "dof": dof,
        "help_flag": help_flag,
    };
    if (outputvol !== null) {
        params["outputvol"] = outputvol;
    }
    return params;
}


function ttoz_cargs(
    params: TtozParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("ttoz");
    cargs.push(execution.inputFile((params["varsfile"] ?? null)));
    cargs.push(execution.inputFile((params["cbsfile"] ?? null)));
    cargs.push(String((params["dof"] ?? null)));
    if ((params["outputvol"] ?? null) !== null) {
        cargs.push(
            "-zout",
            (params["outputvol"] ?? null)
        );
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function ttoz_outputs(
    params: TtozParameters,
    execution: Execution,
): TtozOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TtozOutputs = {
        root: execution.outputFile("."),
        output_zvol: ((params["outputvol"] ?? null) !== null) ? execution.outputFile([(params["outputvol"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function ttoz_execute(
    params: TtozParameters,
    execution: Execution,
): TtozOutputs {
    /**
     * Tool to convert a T-statistic image to a Z-statistic image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TtozOutputs`).
     */
    params = execution.params(params)
    const cargs = ttoz_cargs(params, execution)
    const ret = ttoz_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ttoz(
    varsfile: InputPathType,
    cbsfile: InputPathType,
    dof: number,
    outputvol: string | null = null,
    help_flag: boolean = false,
    runner: Runner | null = null,
): TtozOutputs {
    /**
     * Tool to convert a T-statistic image to a Z-statistic image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param varsfile Input variables file
     * @param cbsfile Input CBS file
     * @param dof Degrees of freedom
     * @param outputvol Output volume name (default is zstats)
     * @param help_flag Display help information
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TtozOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TTOZ_METADATA);
    const params = ttoz_params(varsfile, cbsfile, dof, outputvol, help_flag)
    return ttoz_execute(params, execution);
}


export {
      TTOZ_METADATA,
      TtozOutputs,
      TtozParameters,
      ttoz,
      ttoz_params,
};
