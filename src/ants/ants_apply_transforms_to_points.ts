// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_APPLY_TRANSFORMS_TO_POINTS_METADATA: Metadata = {
    id: "1ba8745cbb78f985d998ca462d13cc2627bbcd68.boutiques",
    name: "antsApplyTransformsToPoints",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsApplyTransformsToPointsSingleTransformParameters {
    "__STYXTYPE__": "single_transform";
}


interface AntsApplyTransformsToPointsInverseTransformParameters {
    "__STYXTYPE__": "inverse_transform";
    "transform_file": InputPathType;
}


interface AntsApplyTransformsToPointsParameters {
    "__STYXTYPE__": "antsApplyTransformsToPoints";
    "dimensionality"?: 2 | 3 | null | undefined;
    "precision"?: 0 | 1 | null | undefined;
    "forantsr"?: 0 | 1 | null | undefined;
    "input": InputPathType;
    "output": string;
    "transform"?: AntsApplyTransformsToPointsSingleTransformParameters | AntsApplyTransformsToPointsInverseTransformParameters | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "antsApplyTransformsToPoints": ants_apply_transforms_to_points_cargs,
        "single_transform": ants_apply_transforms_to_points_single_transform_cargs,
        "inverse_transform": ants_apply_transforms_to_points_inverse_transform_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "antsApplyTransformsToPoints": ants_apply_transforms_to_points_outputs,
    };
    return outputsFuncs[t];
}


function ants_apply_transforms_to_points_single_transform_params(
): AntsApplyTransformsToPointsSingleTransformParameters {
    /**
     * Build parameters.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "single_transform" as const,
    };
    return params;
}


function ants_apply_transforms_to_points_single_transform_cargs(
    params: AntsApplyTransformsToPointsSingleTransformParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("[TRANSFORM]");
    return cargs;
}


function ants_apply_transforms_to_points_inverse_transform_params(
    transform_file: InputPathType,
): AntsApplyTransformsToPointsInverseTransformParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "inverse_transform" as const,
        "transform_file": transform_file,
    };
    return params;
}


function ants_apply_transforms_to_points_inverse_transform_cargs(
    params: AntsApplyTransformsToPointsInverseTransformParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push([execution.inputFile((params["transform_file"] ?? null)), ",1"].join(''));
    return cargs;
}


/**
 * Output object returned when calling `ants_apply_transforms_to_points(...)`.
 *
 * @interface
 */
interface AntsApplyTransformsToPointsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output is the CSV file containing warped points.
     */
    warped_points: OutputPathType;
}


function ants_apply_transforms_to_points_params(
    input: InputPathType,
    output: string,
    dimensionality: 2 | 3 | null = null,
    precision: 0 | 1 | null = null,
    forantsr: 0 | 1 | null = null,
    transform: AntsApplyTransformsToPointsSingleTransformParameters | AntsApplyTransformsToPointsInverseTransformParameters | null = null,
): AntsApplyTransformsToPointsParameters {
    /**
     * Build parameters.
    
     * @param input Input CSV file with columns including x,y,z,t headers that define the points in physical space, or a 2D .mha binary image file.
     * @param output Output the warped points to a CSV file.
     * @param dimensionality This option forces the points to be treated as a specified-dimensionality.
     * @param precision Use double precision.
     * @param forantsr Set true for ANTsR IO.
     * @param transform Transform file(s) to apply to the input points. Uses an inverse transform if specified as [transformFileName,1].
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "antsApplyTransformsToPoints" as const,
        "input": input,
        "output": output,
    };
    if (dimensionality !== null) {
        params["dimensionality"] = dimensionality;
    }
    if (precision !== null) {
        params["precision"] = precision;
    }
    if (forantsr !== null) {
        params["forantsr"] = forantsr;
    }
    if (transform !== null) {
        params["transform"] = transform;
    }
    return params;
}


function ants_apply_transforms_to_points_cargs(
    params: AntsApplyTransformsToPointsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("antsApplyTransformsToPoints");
    if ((params["dimensionality"] ?? null) !== null) {
        cargs.push(
            "--dimensionality",
            String((params["dimensionality"] ?? null))
        );
    }
    if ((params["precision"] ?? null) !== null) {
        cargs.push(
            "--precision",
            String((params["precision"] ?? null))
        );
    }
    if ((params["forantsr"] ?? null) !== null) {
        cargs.push(
            "--forantsr",
            String((params["forantsr"] ?? null))
        );
    }
    cargs.push(
        "-i",
        execution.inputFile((params["input"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    if ((params["transform"] ?? null) !== null) {
        cargs.push(
            "-t",
            ...dynCargs((params["transform"] ?? null).__STYXTYPE__)((params["transform"] ?? null), execution)
        );
    }
    return cargs;
}


function ants_apply_transforms_to_points_outputs(
    params: AntsApplyTransformsToPointsParameters,
    execution: Execution,
): AntsApplyTransformsToPointsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AntsApplyTransformsToPointsOutputs = {
        root: execution.outputFile("."),
        warped_points: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function ants_apply_transforms_to_points_execute(
    params: AntsApplyTransformsToPointsParameters,
    execution: Execution,
): AntsApplyTransformsToPointsOutputs {
    /**
     * antsApplyTransformsToPoints, applied to an input image, transforms it according to a reference image and a transform (or a set of transforms). It reads in a CSV file with the first D columns defining the spatial location where the spatial location is defined in physical coordinates. The CSV file should have a header row.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AntsApplyTransformsToPointsOutputs`).
     */
    params = execution.params(params)
    const cargs = ants_apply_transforms_to_points_cargs(params, execution)
    const ret = ants_apply_transforms_to_points_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ants_apply_transforms_to_points(
    input: InputPathType,
    output: string,
    dimensionality: 2 | 3 | null = null,
    precision: 0 | 1 | null = null,
    forantsr: 0 | 1 | null = null,
    transform: AntsApplyTransformsToPointsSingleTransformParameters | AntsApplyTransformsToPointsInverseTransformParameters | null = null,
    runner: Runner | null = null,
): AntsApplyTransformsToPointsOutputs {
    /**
     * antsApplyTransformsToPoints, applied to an input image, transforms it according to a reference image and a transform (or a set of transforms). It reads in a CSV file with the first D columns defining the spatial location where the spatial location is defined in physical coordinates. The CSV file should have a header row.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param input Input CSV file with columns including x,y,z,t headers that define the points in physical space, or a 2D .mha binary image file.
     * @param output Output the warped points to a CSV file.
     * @param dimensionality This option forces the points to be treated as a specified-dimensionality.
     * @param precision Use double precision.
     * @param forantsr Set true for ANTsR IO.
     * @param transform Transform file(s) to apply to the input points. Uses an inverse transform if specified as [transformFileName,1].
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AntsApplyTransformsToPointsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_APPLY_TRANSFORMS_TO_POINTS_METADATA);
    const params = ants_apply_transforms_to_points_params(input, output, dimensionality, precision, forantsr, transform)
    return ants_apply_transforms_to_points_execute(params, execution);
}


export {
      ANTS_APPLY_TRANSFORMS_TO_POINTS_METADATA,
      AntsApplyTransformsToPointsInverseTransformParameters,
      AntsApplyTransformsToPointsOutputs,
      AntsApplyTransformsToPointsParameters,
      AntsApplyTransformsToPointsSingleTransformParameters,
      ants_apply_transforms_to_points,
      ants_apply_transforms_to_points_inverse_transform_params,
      ants_apply_transforms_to_points_params,
      ants_apply_transforms_to_points_single_transform_params,
};
