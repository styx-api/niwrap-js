// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MINC2SEQINFO_METADATA: Metadata = {
    id: "40252e04328965715491d4e0d301dc7e8b671e34.boutiques",
    name: "minc2seqinfo",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Minc2seqinfoParameters {
    "@type"?: "freesurfer/minc2seqinfo";
    "mincfile": InputPathType;
    "seqinfofile": string;
}
type Minc2seqinfoParametersTagged = Required<Pick<Minc2seqinfoParameters, '@type'>> & Minc2seqinfoParameters;


/**
 * Output object returned when calling `Minc2seqinfoParameters(...)`.
 *
 * @interface
 */
interface Minc2seqinfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the extracted sequence information.
     */
    out_seqinfofile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param mincfile Input MINC file from which to extract sequence information.
 * @param seqinfofile Output file where the sequence information will be stored.
 *
 * @returns Parameter dictionary
 */
function minc2seqinfo_params(
    mincfile: InputPathType,
    seqinfofile: string,
): Minc2seqinfoParametersTagged {
    const params = {
        "@type": "freesurfer/minc2seqinfo" as const,
        "mincfile": mincfile,
        "seqinfofile": seqinfofile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function minc2seqinfo_cargs(
    params: Minc2seqinfoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("minc2seqinfo");
    cargs.push(execution.inputFile((params["mincfile"] ?? null)));
    cargs.push((params["seqinfofile"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function minc2seqinfo_outputs(
    params: Minc2seqinfoParameters,
    execution: Execution,
): Minc2seqinfoOutputs {
    const ret: Minc2seqinfoOutputs = {
        root: execution.outputFile("."),
        out_seqinfofile: execution.outputFile([(params["seqinfofile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * minc2seqinfo
 *
 * Tool for extracting sequence information from MINC files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Minc2seqinfoOutputs`).
 */
function minc2seqinfo_execute(
    params: Minc2seqinfoParameters,
    runner: Runner | null = null,
): Minc2seqinfoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MINC2SEQINFO_METADATA);
    params = execution.params(params)
    const cargs = minc2seqinfo_cargs(params, execution)
    const ret = minc2seqinfo_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * minc2seqinfo
 *
 * Tool for extracting sequence information from MINC files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param mincfile Input MINC file from which to extract sequence information.
 * @param seqinfofile Output file where the sequence information will be stored.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Minc2seqinfoOutputs`).
 */
function minc2seqinfo(
    mincfile: InputPathType,
    seqinfofile: string,
    runner: Runner | null = null,
): Minc2seqinfoOutputs {
    const params = minc2seqinfo_params(mincfile, seqinfofile)
    return minc2seqinfo_execute(params, runner);
}


export {
      MINC2SEQINFO_METADATA,
      Minc2seqinfoOutputs,
      minc2seqinfo,
      minc2seqinfo_execute,
      minc2seqinfo_params,
};
