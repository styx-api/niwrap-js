// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PRINT_UNIQUE_LABELS_CSH_METADATA: Metadata = {
    id: "e9fb80f03f3d4d6c2fbe65561d9c32f6e16bc580.boutiques",
    name: "print_unique_labels.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface PrintUniqueLabelsCshParameters {
    "__STYXTYPE__": "print_unique_labels.csh";
    "label_volume": InputPathType;
    "list_only": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "print_unique_labels.csh": print_unique_labels_csh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "print_unique_labels.csh": print_unique_labels_csh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `print_unique_labels_csh(...)`.
 *
 * @interface
 */
interface PrintUniqueLabelsCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with the list of unique labels
     */
    results_file: OutputPathType;
}


function print_unique_labels_csh_params(
    label_volume: InputPathType,
    list_only: boolean = false,
): PrintUniqueLabelsCshParameters {
    /**
     * Build parameters.
    
     * @param label_volume Label volume to be analyzed
     * @param list_only Only list the labels
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "print_unique_labels.csh" as const,
        "label_volume": label_volume,
        "list_only": list_only,
    };
    return params;
}


function print_unique_labels_csh_cargs(
    params: PrintUniqueLabelsCshParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("print_unique_labels.csh");
    cargs.push(
        "--vol",
        execution.inputFile((params["label_volume"] ?? null))
    );
    if ((params["list_only"] ?? null)) {
        cargs.push("--list");
    }
    return cargs;
}


function print_unique_labels_csh_outputs(
    params: PrintUniqueLabelsCshParameters,
    execution: Execution,
): PrintUniqueLabelsCshOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: PrintUniqueLabelsCshOutputs = {
        root: execution.outputFile("."),
        results_file: execution.outputFile(["[OUTPUT_FILE]"].join('')),
    };
    return ret;
}


function print_unique_labels_csh_execute(
    params: PrintUniqueLabelsCshParameters,
    execution: Execution,
): PrintUniqueLabelsCshOutputs {
    /**
     * Prints the list of unique labels (with structure name) in the input volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `PrintUniqueLabelsCshOutputs`).
     */
    params = execution.params(params)
    const cargs = print_unique_labels_csh_cargs(params, execution)
    const ret = print_unique_labels_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function print_unique_labels_csh(
    label_volume: InputPathType,
    list_only: boolean = false,
    runner: Runner | null = null,
): PrintUniqueLabelsCshOutputs {
    /**
     * Prints the list of unique labels (with structure name) in the input volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param label_volume Label volume to be analyzed
     * @param list_only Only list the labels
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `PrintUniqueLabelsCshOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PRINT_UNIQUE_LABELS_CSH_METADATA);
    const params = print_unique_labels_csh_params(label_volume, list_only)
    return print_unique_labels_csh_execute(params, execution);
}


export {
      PRINT_UNIQUE_LABELS_CSH_METADATA,
      PrintUniqueLabelsCshOutputs,
      PrintUniqueLabelsCshParameters,
      print_unique_labels_csh,
      print_unique_labels_csh_params,
};
