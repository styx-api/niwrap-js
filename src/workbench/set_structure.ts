// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SET_STRUCTURE_METADATA: Metadata = {
    id: "60f5a5ba046998d47b40d412b42f09c1a0bf64b8.boutiques",
    name: "set-structure",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SetStructureParameters {
    "@type": "workbench.set-structure";
    "data_file": string;
    "structure": string;
    "opt_surface_type_type"?: string | null | undefined;
    "opt_surface_secondary_type_secondary_type"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.set-structure": set_structure_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `set_structure(...)`.
 *
 * @interface
 */
interface SetStructureOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param data_file the file to set the structure of
 * @param structure the structure to set the file to
 * @param opt_surface_type_type set the type of a surface (only used if file is a surface file): name of surface type
 * @param opt_surface_secondary_type_secondary_type set the secondary type of a surface (only used if file is a surface file): name of surface secondary type
 *
 * @returns Parameter dictionary
 */
function set_structure_params(
    data_file: string,
    structure: string,
    opt_surface_type_type: string | null = null,
    opt_surface_secondary_type_secondary_type: string | null = null,
): SetStructureParameters {
    const params = {
        "@type": "workbench.set-structure" as const,
        "data_file": data_file,
        "structure": structure,
    };
    if (opt_surface_type_type !== null) {
        params["opt_surface_type_type"] = opt_surface_type_type;
    }
    if (opt_surface_secondary_type_secondary_type !== null) {
        params["opt_surface_secondary_type_secondary_type"] = opt_surface_secondary_type_secondary_type;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function set_structure_cargs(
    params: SetStructureParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-set-structure");
    cargs.push((params["data_file"] ?? null));
    cargs.push((params["structure"] ?? null));
    if ((params["opt_surface_type_type"] ?? null) !== null) {
        cargs.push(
            "-surface-type",
            (params["opt_surface_type_type"] ?? null)
        );
    }
    if ((params["opt_surface_secondary_type_secondary_type"] ?? null) !== null) {
        cargs.push(
            "-surface-secondary-type",
            (params["opt_surface_secondary_type_secondary_type"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function set_structure_outputs(
    params: SetStructureParameters,
    execution: Execution,
): SetStructureOutputs {
    const ret: SetStructureOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * set-structure
 *
 * Set structure of a data file.
 *
 * The existing file is modified and rewritten to the same filename.  Valid values for the structure name are:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT
 *
 * Valid names for the surface type are:
 *
 * UNKNOWN
 * RECONSTRUCTION
 * ANATOMICAL
 * INFLATED
 * VERY_INFLATED
 * SPHERICAL
 * SEMI_SPHERICAL
 * ELLIPSOID
 * FLAT
 * HULL
 *
 * Valid names for the surface secondary type are:
 *
 * INVALID
 * GRAY_WHITE
 * MIDTHICKNESS
 * PIAL
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SetStructureOutputs`).
 */
function set_structure_execute(
    params: SetStructureParameters,
    runner: Runner | null = null,
): SetStructureOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SET_STRUCTURE_METADATA);
    params = execution.params(params)
    const cargs = set_structure_cargs(params, execution)
    const ret = set_structure_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * set-structure
 *
 * Set structure of a data file.
 *
 * The existing file is modified and rewritten to the same filename.  Valid values for the structure name are:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT
 *
 * Valid names for the surface type are:
 *
 * UNKNOWN
 * RECONSTRUCTION
 * ANATOMICAL
 * INFLATED
 * VERY_INFLATED
 * SPHERICAL
 * SEMI_SPHERICAL
 * ELLIPSOID
 * FLAT
 * HULL
 *
 * Valid names for the surface secondary type are:
 *
 * INVALID
 * GRAY_WHITE
 * MIDTHICKNESS
 * PIAL
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param data_file the file to set the structure of
 * @param structure the structure to set the file to
 * @param opt_surface_type_type set the type of a surface (only used if file is a surface file): name of surface type
 * @param opt_surface_secondary_type_secondary_type set the secondary type of a surface (only used if file is a surface file): name of surface secondary type
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SetStructureOutputs`).
 */
function set_structure(
    data_file: string,
    structure: string,
    opt_surface_type_type: string | null = null,
    opt_surface_secondary_type_secondary_type: string | null = null,
    runner: Runner | null = null,
): SetStructureOutputs {
    const params = set_structure_params(data_file, structure, opt_surface_type_type, opt_surface_secondary_type_secondary_type)
    return set_structure_execute(params, runner);
}


export {
      SET_STRUCTURE_METADATA,
      SetStructureOutputs,
      SetStructureParameters,
      set_structure,
      set_structure_execute,
      set_structure_params,
};
