// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_FWHMX_METADATA: Metadata = {
    id: "408b0ca2210d336d7abec8bdaf127930c857b898.boutiques",
    name: "3dFWHMx",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dFwhmxParameters {
    "@type"?: "afni/3dFWHMx";
    "mask"?: InputPathType | null | undefined;
    "automask": boolean;
    "demed": boolean;
    "unif": boolean;
    "detrend"?: number | null | undefined;
    "detprefix"?: string | null | undefined;
    "geom": boolean;
    "arith": boolean;
    "combine": boolean;
    "out"?: string | null | undefined;
    "compat": boolean;
    "acf"?: string | null | undefined;
    "infile": InputPathType;
}
type V3dFwhmxParametersTagged = Required<Pick<V3dFwhmxParameters, '@type'>> & V3dFwhmxParameters;


/**
 * Output object returned when calling `V3dFwhmxParameters(...)`.
 *
 * @interface
 */
interface V3dFwhmxOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing FWHM/ACF estimates
     */
    out_file: OutputPathType | null;
    /**
     * Detrended dataset file
     */
    detrended_dataset: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infile Input dataset
 * @param mask Use only voxels that are nonzero in dataset 'mmm'
 * @param automask Compute a mask from THIS dataset
 * @param demed if the input dataset has more than one sub-brick then subtract the median of each voxel's time series before processing FWHM
 * @param unif Normalize each voxel's time series to have the same MAD before processing FWHM, implies -demed
 * @param detrend Detrend to order 'q'. If q is not given, the program picks q=NT/30; -detrend disables -demed, and includes -unif
 * @param detprefix Save the detrended file into a dataset with prefix 'd'
 * @param geom Compute the final estimate as the geometric mean
 * @param arith Compute the final estimate as the arithmetic mean
 * @param combine Combine the final measurements along each axis into one result
 * @param out Write output to file 'ttt' (3 columns of numbers). If not given, the sub-brick outputs are not written. Use '-out -' to write to stdout, if desired
 * @param compat Be compatible with the older 3dFWHM
 * @param acf Compute the spatial autocorrelation of the data as a function of radius, then fit that to a model and output the model parameters
 *
 * @returns Parameter dictionary
 */
function v_3d_fwhmx_params(
    infile: InputPathType,
    mask: InputPathType | null = null,
    automask: boolean = false,
    demed: boolean = false,
    unif: boolean = false,
    detrend: number | null = null,
    detprefix: string | null = null,
    geom: boolean = false,
    arith: boolean = false,
    combine: boolean = false,
    out: string | null = null,
    compat: boolean = false,
    acf: string | null = null,
): V3dFwhmxParametersTagged {
    const params = {
        "@type": "afni/3dFWHMx" as const,
        "automask": automask,
        "demed": demed,
        "unif": unif,
        "geom": geom,
        "arith": arith,
        "combine": combine,
        "compat": compat,
        "infile": infile,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (detrend !== null) {
        params["detrend"] = detrend;
    }
    if (detprefix !== null) {
        params["detprefix"] = detprefix;
    }
    if (out !== null) {
        params["out"] = out;
    }
    if (acf !== null) {
        params["acf"] = acf;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_fwhmx_cargs(
    params: V3dFwhmxParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dFWHMx");
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["automask"] ?? false)) {
        cargs.push("-automask");
    }
    if ((params["demed"] ?? false)) {
        cargs.push("-demed");
    }
    if ((params["unif"] ?? false)) {
        cargs.push("-unif");
    }
    if ((params["detrend"] ?? null) !== null) {
        cargs.push(
            "-detrend",
            String((params["detrend"] ?? null))
        );
    }
    if ((params["detprefix"] ?? null) !== null) {
        cargs.push(
            "-detprefix",
            (params["detprefix"] ?? null)
        );
    }
    if ((params["geom"] ?? false)) {
        cargs.push("-geom");
    }
    if ((params["arith"] ?? false)) {
        cargs.push("-arith");
    }
    if ((params["combine"] ?? false)) {
        cargs.push("-combine");
    }
    if ((params["out"] ?? null) !== null) {
        cargs.push(
            "-out",
            (params["out"] ?? null)
        );
    }
    if ((params["compat"] ?? false)) {
        cargs.push("-compat");
    }
    if ((params["acf"] ?? null) !== null) {
        cargs.push(
            "-acf",
            (params["acf"] ?? null)
        );
    }
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_fwhmx_outputs(
    params: V3dFwhmxParameters,
    execution: Execution,
): V3dFwhmxOutputs {
    const ret: V3dFwhmxOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["out"] ?? null) !== null) ? execution.outputFile([(params["out"] ?? null), ".1D"].join('')) : null,
        detrended_dataset: ((params["detprefix"] ?? null) !== null) ? execution.outputFile([(params["detprefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * 3dFWHMx
 *
 * Compute Full Width at Half Maximum (FWHM) for FMRI datasets using AutoCorrelation Function (ACF).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dFwhmxOutputs`).
 */
function v_3d_fwhmx_execute(
    params: V3dFwhmxParameters,
    runner: Runner | null = null,
): V3dFwhmxOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_FWHMX_METADATA);
    params = execution.params(params)
    const cargs = v_3d_fwhmx_cargs(params, execution)
    const ret = v_3d_fwhmx_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dFWHMx
 *
 * Compute Full Width at Half Maximum (FWHM) for FMRI datasets using AutoCorrelation Function (ACF).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input dataset
 * @param mask Use only voxels that are nonzero in dataset 'mmm'
 * @param automask Compute a mask from THIS dataset
 * @param demed if the input dataset has more than one sub-brick then subtract the median of each voxel's time series before processing FWHM
 * @param unif Normalize each voxel's time series to have the same MAD before processing FWHM, implies -demed
 * @param detrend Detrend to order 'q'. If q is not given, the program picks q=NT/30; -detrend disables -demed, and includes -unif
 * @param detprefix Save the detrended file into a dataset with prefix 'd'
 * @param geom Compute the final estimate as the geometric mean
 * @param arith Compute the final estimate as the arithmetic mean
 * @param combine Combine the final measurements along each axis into one result
 * @param out Write output to file 'ttt' (3 columns of numbers). If not given, the sub-brick outputs are not written. Use '-out -' to write to stdout, if desired
 * @param compat Be compatible with the older 3dFWHM
 * @param acf Compute the spatial autocorrelation of the data as a function of radius, then fit that to a model and output the model parameters
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dFwhmxOutputs`).
 */
function v_3d_fwhmx(
    infile: InputPathType,
    mask: InputPathType | null = null,
    automask: boolean = false,
    demed: boolean = false,
    unif: boolean = false,
    detrend: number | null = null,
    detprefix: string | null = null,
    geom: boolean = false,
    arith: boolean = false,
    combine: boolean = false,
    out: string | null = null,
    compat: boolean = false,
    acf: string | null = null,
    runner: Runner | null = null,
): V3dFwhmxOutputs {
    const params = v_3d_fwhmx_params(infile, mask, automask, demed, unif, detrend, detprefix, geom, arith, combine, out, compat, acf)
    return v_3d_fwhmx_execute(params, runner);
}


export {
      V3dFwhmxOutputs,
      V_3D_FWHMX_METADATA,
      v_3d_fwhmx,
      v_3d_fwhmx_execute,
      v_3d_fwhmx_params,
};
