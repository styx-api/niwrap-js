// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_DEFACER_METADATA: Metadata = {
    id: "9a76bd7cdcb71bdf4008e0ef5d9f6b52b2c77e7e.boutiques",
    name: "mri_defacer",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriDefacerParameters {
    "@type": "freesurfer.mri_defacer";
    "input_volume": InputPathType;
    "headmask": InputPathType;
    "tempsurf": InputPathType;
    "templabel"?: Array<InputPathType> | null | undefined;
    "watermark"?: number | null | undefined;
    "defaced_volume": string;
    "facemask"?: string | null | undefined;
    "fill_constants"?: Array<number> | null | undefined;
    "exclude_mask"?: InputPathType | null | undefined;
    "tempreg"?: InputPathType | null | undefined;
    "minsurfpath"?: string | null | undefined;
    "maxsurfpath"?: string | null | undefined;
    "distbounds"?: InputPathType | null | undefined;
    "distoverlay"?: InputPathType | null | undefined;
    "distdat"?: InputPathType | null | undefined;
    "statspath"?: InputPathType | null | undefined;
    "output_tempsurf"?: InputPathType | null | undefined;
    "apply_to_volume"?: Array<string> | null | undefined;
    "ripple_center"?: Array<number> | null | undefined;
    "apply_ripple"?: Array<string> | null | undefined;
    "diagnostic_level"?: number | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_defacer": mri_defacer_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_defacer(...)`.
 *
 * @interface
 */
interface MriDefacerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume
 * @param headmask Head mask volume
 * @param tempsurf Template surface file
 * @param defaced_volume Output defaced volume
 * @param templabel Template label, specify one or multiple labels
 * @param watermark Watermark density
 * @param facemask Face mask volume
 * @param fill_constants Constants for filling within/outside the mask
 * @param exclude_mask Mask to exclude from defacing
 * @param tempreg Registration file to apply to surface
 * @param minsurfpath Output minimum surface path
 * @param maxsurfpath Output maximum surface path
 * @param distbounds File with distance bounds for each label
 * @param distoverlay Overlay file showing distance for each vertex
 * @param distdat File with distances for each vertex
 * @param statspath Statistics path for nxmask with means and modes
 * @param output_tempsurf Output template surface after watermark/ripple
 * @param apply_to_volume Apply face mask and registration to another volume
 * @param ripple_center Center of ripple effect
 * @param apply_ripple Apply ripple effect on surface
 * @param diagnostic_level Set diagnostic level
 * @param debug Turn on debugging
 * @param checkopts Check options and exit without executing
 * @param version Print version and exit
 *
 * @returns Parameter dictionary
 */
function mri_defacer_params(
    input_volume: InputPathType,
    headmask: InputPathType,
    tempsurf: InputPathType,
    defaced_volume: string,
    templabel: Array<InputPathType> | null = null,
    watermark: number | null = null,
    facemask: string | null = null,
    fill_constants: Array<number> | null = null,
    exclude_mask: InputPathType | null = null,
    tempreg: InputPathType | null = null,
    minsurfpath: string | null = null,
    maxsurfpath: string | null = null,
    distbounds: InputPathType | null = null,
    distoverlay: InputPathType | null = null,
    distdat: InputPathType | null = null,
    statspath: InputPathType | null = null,
    output_tempsurf: InputPathType | null = null,
    apply_to_volume: Array<string> | null = null,
    ripple_center: Array<number> | null = null,
    apply_ripple: Array<string> | null = null,
    diagnostic_level: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
): MriDefacerParameters {
    const params = {
        "@type": "freesurfer.mri_defacer" as const,
        "input_volume": input_volume,
        "headmask": headmask,
        "tempsurf": tempsurf,
        "defaced_volume": defaced_volume,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    };
    if (templabel !== null) {
        params["templabel"] = templabel;
    }
    if (watermark !== null) {
        params["watermark"] = watermark;
    }
    if (facemask !== null) {
        params["facemask"] = facemask;
    }
    if (fill_constants !== null) {
        params["fill_constants"] = fill_constants;
    }
    if (exclude_mask !== null) {
        params["exclude_mask"] = exclude_mask;
    }
    if (tempreg !== null) {
        params["tempreg"] = tempreg;
    }
    if (minsurfpath !== null) {
        params["minsurfpath"] = minsurfpath;
    }
    if (maxsurfpath !== null) {
        params["maxsurfpath"] = maxsurfpath;
    }
    if (distbounds !== null) {
        params["distbounds"] = distbounds;
    }
    if (distoverlay !== null) {
        params["distoverlay"] = distoverlay;
    }
    if (distdat !== null) {
        params["distdat"] = distdat;
    }
    if (statspath !== null) {
        params["statspath"] = statspath;
    }
    if (output_tempsurf !== null) {
        params["output_tempsurf"] = output_tempsurf;
    }
    if (apply_to_volume !== null) {
        params["apply_to_volume"] = apply_to_volume;
    }
    if (ripple_center !== null) {
        params["ripple_center"] = ripple_center;
    }
    if (apply_ripple !== null) {
        params["apply_ripple"] = apply_ripple;
    }
    if (diagnostic_level !== null) {
        params["diagnostic_level"] = diagnostic_level;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_defacer_cargs(
    params: MriDefacerParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_defacer");
    cargs.push(
        "-i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "-hm",
        execution.inputFile((params["headmask"] ?? null))
    );
    cargs.push(
        "-ts",
        execution.inputFile((params["tempsurf"] ?? null))
    );
    if ((params["templabel"] ?? null) !== null) {
        cargs.push(
            "--l",
            ...(params["templabel"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["watermark"] ?? null) !== null) {
        cargs.push(
            "--w",
            String((params["watermark"] ?? null))
        );
    }
    cargs.push(
        "-o",
        (params["defaced_volume"] ?? null)
    );
    if ((params["facemask"] ?? null) !== null) {
        cargs.push(
            "--m",
            (params["facemask"] ?? null)
        );
    }
    if ((params["fill_constants"] ?? null) !== null) {
        cargs.push(
            "--fill-const",
            ...(params["fill_constants"] ?? null).map(String)
        );
    }
    if ((params["exclude_mask"] ?? null) !== null) {
        cargs.push(
            "--xmask",
            execution.inputFile((params["exclude_mask"] ?? null))
        );
    }
    if ((params["tempreg"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["tempreg"] ?? null))
        );
    }
    if ((params["minsurfpath"] ?? null) !== null) {
        cargs.push(
            "--min",
            (params["minsurfpath"] ?? null)
        );
    }
    if ((params["maxsurfpath"] ?? null) !== null) {
        cargs.push(
            "--max",
            (params["maxsurfpath"] ?? null)
        );
    }
    if ((params["distbounds"] ?? null) !== null) {
        cargs.push(
            "--distbounds",
            execution.inputFile((params["distbounds"] ?? null))
        );
    }
    if ((params["distoverlay"] ?? null) !== null) {
        cargs.push(
            "--distoverlay",
            execution.inputFile((params["distoverlay"] ?? null))
        );
    }
    if ((params["distdat"] ?? null) !== null) {
        cargs.push(
            "--distdat",
            execution.inputFile((params["distdat"] ?? null))
        );
    }
    if ((params["statspath"] ?? null) !== null) {
        cargs.push(
            "--stats",
            execution.inputFile((params["statspath"] ?? null))
        );
    }
    if ((params["output_tempsurf"] ?? null) !== null) {
        cargs.push(
            "--ots",
            execution.inputFile((params["output_tempsurf"] ?? null))
        );
    }
    if ((params["apply_to_volume"] ?? null) !== null) {
        cargs.push(
            "--apply",
            ...(params["apply_to_volume"] ?? null)
        );
    }
    if ((params["ripple_center"] ?? null) !== null) {
        cargs.push(
            "--ripple-center",
            ...(params["ripple_center"] ?? null).map(String)
        );
    }
    if ((params["apply_ripple"] ?? null) !== null) {
        cargs.push(
            "--apply-ripple",
            ...(params["apply_ripple"] ?? null)
        );
    }
    if ((params["diagnostic_level"] ?? null) !== null) {
        cargs.push(
            "--gdiag",
            String((params["diagnostic_level"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_defacer_outputs(
    params: MriDefacerParameters,
    execution: Execution,
): MriDefacerOutputs {
    const ret: MriDefacerOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_defacer
 *
 * Tool for defacing MRI images to remove facial features.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriDefacerOutputs`).
 */
function mri_defacer_execute(
    params: MriDefacerParameters,
    runner: Runner | null = null,
): MriDefacerOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_DEFACER_METADATA);
    params = execution.params(params)
    const cargs = mri_defacer_cargs(params, execution)
    const ret = mri_defacer_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_defacer
 *
 * Tool for defacing MRI images to remove facial features.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume
 * @param headmask Head mask volume
 * @param tempsurf Template surface file
 * @param defaced_volume Output defaced volume
 * @param templabel Template label, specify one or multiple labels
 * @param watermark Watermark density
 * @param facemask Face mask volume
 * @param fill_constants Constants for filling within/outside the mask
 * @param exclude_mask Mask to exclude from defacing
 * @param tempreg Registration file to apply to surface
 * @param minsurfpath Output minimum surface path
 * @param maxsurfpath Output maximum surface path
 * @param distbounds File with distance bounds for each label
 * @param distoverlay Overlay file showing distance for each vertex
 * @param distdat File with distances for each vertex
 * @param statspath Statistics path for nxmask with means and modes
 * @param output_tempsurf Output template surface after watermark/ripple
 * @param apply_to_volume Apply face mask and registration to another volume
 * @param ripple_center Center of ripple effect
 * @param apply_ripple Apply ripple effect on surface
 * @param diagnostic_level Set diagnostic level
 * @param debug Turn on debugging
 * @param checkopts Check options and exit without executing
 * @param version Print version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriDefacerOutputs`).
 */
function mri_defacer(
    input_volume: InputPathType,
    headmask: InputPathType,
    tempsurf: InputPathType,
    defaced_volume: string,
    templabel: Array<InputPathType> | null = null,
    watermark: number | null = null,
    facemask: string | null = null,
    fill_constants: Array<number> | null = null,
    exclude_mask: InputPathType | null = null,
    tempreg: InputPathType | null = null,
    minsurfpath: string | null = null,
    maxsurfpath: string | null = null,
    distbounds: InputPathType | null = null,
    distoverlay: InputPathType | null = null,
    distdat: InputPathType | null = null,
    statspath: InputPathType | null = null,
    output_tempsurf: InputPathType | null = null,
    apply_to_volume: Array<string> | null = null,
    ripple_center: Array<number> | null = null,
    apply_ripple: Array<string> | null = null,
    diagnostic_level: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriDefacerOutputs {
    const params = mri_defacer_params(input_volume, headmask, tempsurf, defaced_volume, templabel, watermark, facemask, fill_constants, exclude_mask, tempreg, minsurfpath, maxsurfpath, distbounds, distoverlay, distdat, statspath, output_tempsurf, apply_to_volume, ripple_center, apply_ripple, diagnostic_level, debug, checkopts, version)
    return mri_defacer_execute(params, runner);
}


export {
      MRI_DEFACER_METADATA,
      MriDefacerOutputs,
      MriDefacerParameters,
      mri_defacer,
      mri_defacer_execute,
      mri_defacer_params,
};
