// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EDIT_SEGMENTATION_WITH_SURFACES_METADATA: Metadata = {
    id: "614cbaf4e68b2c661673f9ec5cc63e68fd4c73fe.boutiques",
    name: "mri_edit_segmentation_with_surfaces",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriEditSegmentationWithSurfacesParameters {
    "@type": "freesurfer.mri_edit_segmentation_with_surfaces";
    "aseg_name": InputPathType;
    "surface_dir": string;
    "norm_volume": InputPathType;
    "output_volume": string;
    "label_file"?: InputPathType | null | undefined;
    "hypo_flag"?: "1" | "0" | null | undefined;
    "cerebellum_flag"?: "1" | "0" | null | undefined;
    "cortex_flag"?: "1" | "0" | null | undefined;
    "annotation_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_edit_segmentation_with_surfaces": mri_edit_segmentation_with_surfaces_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_edit_segmentation_with_surfaces": mri_edit_segmentation_with_surfaces_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_edit_segmentation_with_surfaces(...)`.
 *
 * @interface
 */
interface MriEditSegmentationWithSurfacesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Edited output volume
     */
    output_volume_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param aseg_name The aseg file to be edited
 * @param surface_dir Directory containing surface files
 * @param norm_volume Normalized volume file
 * @param output_volume Output volume file
 * @param label_file Limit calculations to specified label
 * @param hypo_flag Turn hypointensity editing on/off (1=on, 0=off)
 * @param cerebellum_flag Turn cerebellum editing on/off (1=on, 0=off)
 * @param cortex_flag Turn cortex editing on/off (1=on, 0=off)
 * @param annotation_file Compute properties for each label in the annotation file separately
 *
 * @returns Parameter dictionary
 */
function mri_edit_segmentation_with_surfaces_params(
    aseg_name: InputPathType,
    surface_dir: string,
    norm_volume: InputPathType,
    output_volume: string,
    label_file: InputPathType | null = null,
    hypo_flag: "1" | "0" | null = null,
    cerebellum_flag: "1" | "0" | null = null,
    cortex_flag: "1" | "0" | null = null,
    annotation_file: InputPathType | null = null,
): MriEditSegmentationWithSurfacesParameters {
    const params = {
        "@type": "freesurfer.mri_edit_segmentation_with_surfaces" as const,
        "aseg_name": aseg_name,
        "surface_dir": surface_dir,
        "norm_volume": norm_volume,
        "output_volume": output_volume,
    };
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (hypo_flag !== null) {
        params["hypo_flag"] = hypo_flag;
    }
    if (cerebellum_flag !== null) {
        params["cerebellum_flag"] = cerebellum_flag;
    }
    if (cortex_flag !== null) {
        params["cortex_flag"] = cortex_flag;
    }
    if (annotation_file !== null) {
        params["annotation_file"] = annotation_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_edit_segmentation_with_surfaces_cargs(
    params: MriEditSegmentationWithSurfacesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_edit_segmentation_with_surfaces");
    cargs.push(execution.inputFile((params["aseg_name"] ?? null)));
    cargs.push((params["surface_dir"] ?? null));
    cargs.push(execution.inputFile((params["norm_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["hypo_flag"] ?? null) !== null) {
        cargs.push(
            "-hypo",
            (params["hypo_flag"] ?? null)
        );
    }
    if ((params["cerebellum_flag"] ?? null) !== null) {
        cargs.push(
            "-cerebellum",
            (params["cerebellum_flag"] ?? null)
        );
    }
    if ((params["cortex_flag"] ?? null) !== null) {
        cargs.push(
            "-cortex",
            (params["cortex_flag"] ?? null)
        );
    }
    if ((params["annotation_file"] ?? null) !== null) {
        cargs.push(
            "-a",
            execution.inputFile((params["annotation_file"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_edit_segmentation_with_surfaces_outputs(
    params: MriEditSegmentationWithSurfacesParameters,
    execution: Execution,
): MriEditSegmentationWithSurfacesOutputs {
    const ret: MriEditSegmentationWithSurfacesOutputs = {
        root: execution.outputFile("."),
        output_volume_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_edit_segmentation_with_surfaces
 *
 * This program edits an aseg with the surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriEditSegmentationWithSurfacesOutputs`).
 */
function mri_edit_segmentation_with_surfaces_execute(
    params: MriEditSegmentationWithSurfacesParameters,
    runner: Runner | null = null,
): MriEditSegmentationWithSurfacesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EDIT_SEGMENTATION_WITH_SURFACES_METADATA);
    params = execution.params(params)
    const cargs = mri_edit_segmentation_with_surfaces_cargs(params, execution)
    const ret = mri_edit_segmentation_with_surfaces_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_edit_segmentation_with_surfaces
 *
 * This program edits an aseg with the surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param aseg_name The aseg file to be edited
 * @param surface_dir Directory containing surface files
 * @param norm_volume Normalized volume file
 * @param output_volume Output volume file
 * @param label_file Limit calculations to specified label
 * @param hypo_flag Turn hypointensity editing on/off (1=on, 0=off)
 * @param cerebellum_flag Turn cerebellum editing on/off (1=on, 0=off)
 * @param cortex_flag Turn cortex editing on/off (1=on, 0=off)
 * @param annotation_file Compute properties for each label in the annotation file separately
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriEditSegmentationWithSurfacesOutputs`).
 */
function mri_edit_segmentation_with_surfaces(
    aseg_name: InputPathType,
    surface_dir: string,
    norm_volume: InputPathType,
    output_volume: string,
    label_file: InputPathType | null = null,
    hypo_flag: "1" | "0" | null = null,
    cerebellum_flag: "1" | "0" | null = null,
    cortex_flag: "1" | "0" | null = null,
    annotation_file: InputPathType | null = null,
    runner: Runner | null = null,
): MriEditSegmentationWithSurfacesOutputs {
    const params = mri_edit_segmentation_with_surfaces_params(aseg_name, surface_dir, norm_volume, output_volume, label_file, hypo_flag, cerebellum_flag, cortex_flag, annotation_file)
    return mri_edit_segmentation_with_surfaces_execute(params, runner);
}


export {
      MRI_EDIT_SEGMENTATION_WITH_SURFACES_METADATA,
      MriEditSegmentationWithSurfacesOutputs,
      MriEditSegmentationWithSurfacesParameters,
      mri_edit_segmentation_with_surfaces,
      mri_edit_segmentation_with_surfaces_execute,
      mri_edit_segmentation_with_surfaces_params,
};
