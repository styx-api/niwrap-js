// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_AVERAGE_METADATA: Metadata = {
    id: "e4592244ed0a54b4182ce9f5b2c0d504dc9489bf.boutiques",
    name: "surface-average",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceAverageSurfParameters {
    "__STYXTYPE__": "surf";
    "surface": InputPathType;
    "opt_weight_weight"?: number | null | undefined;
}


interface SurfaceAverageParameters {
    "__STYXTYPE__": "surface-average";
    "surface_out": string;
    "opt_stddev_stddev_metric_out"?: string | null | undefined;
    "opt_uncertainty_uncert_metric_out"?: string | null | undefined;
    "surf"?: Array<SurfaceAverageSurfParameters> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-average": surface_average_cargs,
        "surf": surface_average_surf_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-average": surface_average_outputs,
    };
    return outputsFuncs[t];
}


function surface_average_surf_params(
    surface: InputPathType,
    opt_weight_weight: number | null = null,
): SurfaceAverageSurfParameters {
    /**
     * Build parameters.
    
     * @param surface a surface file to average
     * @param opt_weight_weight specify a weighted average: the weight to use (default 1)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surf" as const,
        "surface": surface,
    };
    if (opt_weight_weight !== null) {
        params["opt_weight_weight"] = opt_weight_weight;
    }
    return params;
}


function surface_average_surf_cargs(
    params: SurfaceAverageSurfParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-surf");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_weight_weight"] ?? null) !== null) {
        cargs.push(
            "-weight",
            String((params["opt_weight_weight"] ?? null))
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `surface_average(...)`.
 *
 * @interface
 */
interface SurfaceAverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output averaged surface
     */
    surface_out: OutputPathType;
    /**
     * compute 3D sample standard deviation: the output metric for 3D sample standard deviation
     */
    opt_stddev_stddev_metric_out: OutputPathType | null;
    /**
     * compute caret5 'uncertainty': the output metric for uncertainty
     */
    opt_uncertainty_uncert_metric_out: OutputPathType | null;
}


function surface_average_params(
    surface_out: string,
    opt_stddev_stddev_metric_out: string | null = null,
    opt_uncertainty_uncert_metric_out: string | null = null,
    surf: Array<SurfaceAverageSurfParameters> | null = null,
): SurfaceAverageParameters {
    /**
     * Build parameters.
    
     * @param surface_out the output averaged surface
     * @param opt_stddev_stddev_metric_out compute 3D sample standard deviation: the output metric for 3D sample standard deviation
     * @param opt_uncertainty_uncert_metric_out compute caret5 'uncertainty': the output metric for uncertainty
     * @param surf specify a surface to include in the average
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-average" as const,
        "surface_out": surface_out,
    };
    if (opt_stddev_stddev_metric_out !== null) {
        params["opt_stddev_stddev_metric_out"] = opt_stddev_stddev_metric_out;
    }
    if (opt_uncertainty_uncert_metric_out !== null) {
        params["opt_uncertainty_uncert_metric_out"] = opt_uncertainty_uncert_metric_out;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    return params;
}


function surface_average_cargs(
    params: SurfaceAverageParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-average");
    cargs.push((params["surface_out"] ?? null));
    if ((params["opt_stddev_stddev_metric_out"] ?? null) !== null) {
        cargs.push(
            "-stddev",
            (params["opt_stddev_stddev_metric_out"] ?? null)
        );
    }
    if ((params["opt_uncertainty_uncert_metric_out"] ?? null) !== null) {
        cargs.push(
            "-uncertainty",
            (params["opt_uncertainty_uncert_metric_out"] ?? null)
        );
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(...(params["surf"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    return cargs;
}


function surface_average_outputs(
    params: SurfaceAverageParameters,
    execution: Execution,
): SurfaceAverageOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceAverageOutputs = {
        root: execution.outputFile("."),
        surface_out: execution.outputFile([(params["surface_out"] ?? null)].join('')),
        opt_stddev_stddev_metric_out: ((params["opt_stddev_stddev_metric_out"] ?? null) !== null) ? execution.outputFile([(params["opt_stddev_stddev_metric_out"] ?? null)].join('')) : null,
        opt_uncertainty_uncert_metric_out: ((params["opt_uncertainty_uncert_metric_out"] ?? null) !== null) ? execution.outputFile([(params["opt_uncertainty_uncert_metric_out"] ?? null)].join('')) : null,
    };
    return ret;
}


function surface_average_execute(
    params: SurfaceAverageParameters,
    execution: Execution,
): SurfaceAverageOutputs {
    /**
     * Average surface files together.
     * 
     * The 3D sample standard deviation is computed as 'sqrt(sum(squaredlength(xyz - mean(xyz)))/(n - 1))'.
     * 
     * Uncertainty is a legacy measure used in caret5, and is computed as 'sum(length(xyz - mean(xyz)))/n'.
     * 
     * When weights are used, the 3D sample standard deviation treats them as reliability weights.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceAverageOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_average_cargs(params, execution)
    const ret = surface_average_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_average(
    surface_out: string,
    opt_stddev_stddev_metric_out: string | null = null,
    opt_uncertainty_uncert_metric_out: string | null = null,
    surf: Array<SurfaceAverageSurfParameters> | null = null,
    runner: Runner | null = null,
): SurfaceAverageOutputs {
    /**
     * Average surface files together.
     * 
     * The 3D sample standard deviation is computed as 'sqrt(sum(squaredlength(xyz - mean(xyz)))/(n - 1))'.
     * 
     * Uncertainty is a legacy measure used in caret5, and is computed as 'sum(length(xyz - mean(xyz)))/n'.
     * 
     * When weights are used, the 3D sample standard deviation treats them as reliability weights.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface_out the output averaged surface
     * @param opt_stddev_stddev_metric_out compute 3D sample standard deviation: the output metric for 3D sample standard deviation
     * @param opt_uncertainty_uncert_metric_out compute caret5 'uncertainty': the output metric for uncertainty
     * @param surf specify a surface to include in the average
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceAverageOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_AVERAGE_METADATA);
    const params = surface_average_params(surface_out, opt_stddev_stddev_metric_out, opt_uncertainty_uncert_metric_out, surf)
    return surface_average_execute(params, execution);
}


export {
      SURFACE_AVERAGE_METADATA,
      SurfaceAverageOutputs,
      SurfaceAverageParameters,
      SurfaceAverageSurfParameters,
      surface_average,
      surface_average_params,
      surface_average_surf_params,
};
