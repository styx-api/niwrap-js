// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_IMIT2W_FROM_T1W_METADATA: Metadata = {
    id: "6e4b31f9dba6fea968d8d0b43da6d2ef2dfdf294.boutiques",
    name: "fat_proc_imit2w_from_t1w",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcImit2wFromT1wParameters {
    "@type"?: "afni/fat_proc_imit2w_from_t1w";
    "t1_file": InputPathType;
    "prefix": string;
    "workdir"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "ss_blur_fwhm"?: number | null | undefined;
    "no_clean": boolean;
    "no_qc_view": boolean;
    "qc_prefix"?: string | null | undefined;
}
type FatProcImit2wFromT1wParametersTagged = Required<Pick<FatProcImit2wFromT1wParameters, '@type'>> & FatProcImit2wFromT1wParameters;


/**
 * Output object returned when calling `FatProcImit2wFromT1wParameters(...)`.
 *
 * @interface
 */
interface FatProcImit2wFromT1wOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Volume with T2w-like tissue contrast from T1w
     */
    t2w_contrast_volume: OutputPathType;
    /**
     * Cleaned/processed version of the input T1w volume with scaled skull and noise outside the brain
     */
    cleaned_t1w_volume: OutputPathType;
    /**
     * Skull-stripped version of the T1w volume
     */
    skull_stripped_t1w: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param t1_file Full name of the input T1w volume
 * @param prefix Output prefix for files and snapshots
 * @param workdir Specify a working directory, which can be removed (default: __WORKING_imit2w_from_t1w)
 * @param mask Optional input of a pre-skullstripped T1_FILE (either mask or skull-stripped volume)
 * @param ss_blur_fwhm Optional, add in blurring during the 3dSkullStrip part (in mm, default: 2 FWHM)
 * @param no_clean Optional switch to NOT remove working directory '__WORKING_imit2w_from_t1w' (default: remove working dir)
 * @param no_qc_view Turn off the automatic creation of QC montages (default: on)
 * @param qc_prefix Change the prefix of the QC images (default: use prefix of volumes)
 *
 * @returns Parameter dictionary
 */
function fat_proc_imit2w_from_t1w_params(
    t1_file: InputPathType,
    prefix: string,
    workdir: string | null = null,
    mask: InputPathType | null = null,
    ss_blur_fwhm: number | null = null,
    no_clean: boolean = false,
    no_qc_view: boolean = false,
    qc_prefix: string | null = null,
): FatProcImit2wFromT1wParametersTagged {
    const params = {
        "@type": "afni/fat_proc_imit2w_from_t1w" as const,
        "t1_file": t1_file,
        "prefix": prefix,
        "no_clean": no_clean,
        "no_qc_view": no_qc_view,
    };
    if (workdir !== null) {
        params["workdir"] = workdir;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (ss_blur_fwhm !== null) {
        params["ss_blur_fwhm"] = ss_blur_fwhm;
    }
    if (qc_prefix !== null) {
        params["qc_prefix"] = qc_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_proc_imit2w_from_t1w_cargs(
    params: FatProcImit2wFromT1wParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_proc_imit2w_from_t1w");
    cargs.push(
        "-inset",
        execution.inputFile((params["t1_file"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["workdir"] ?? null) !== null) {
        cargs.push(
            "-workdir",
            (params["workdir"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["ss_blur_fwhm"] ?? null) !== null) {
        cargs.push(
            "-ss_blur_fwhm",
            String((params["ss_blur_fwhm"] ?? null))
        );
    }
    if ((params["no_clean"] ?? false)) {
        cargs.push("-no_clean");
    }
    if ((params["no_qc_view"] ?? false)) {
        cargs.push("-no_qc_view");
    }
    if ((params["qc_prefix"] ?? null) !== null) {
        cargs.push(
            "-qc_prefix",
            (params["qc_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_proc_imit2w_from_t1w_outputs(
    params: FatProcImit2wFromT1wParameters,
    execution: Execution,
): FatProcImit2wFromT1wOutputs {
    const ret: FatProcImit2wFromT1wOutputs = {
        root: execution.outputFile("."),
        t2w_contrast_volume: execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')),
        cleaned_t1w_volume: execution.outputFile([(params["prefix"] ?? null), "_orig.nii.gz"].join('')),
        skull_stripped_t1w: execution.outputFile([(params["prefix"] ?? null), "_orig_ss.nii.gz"].join('')),
    };
    return ret;
}


/**
 * fat_proc_imit2w_from_t1w
 *
 * Process T1w anatomical images to generate an imitation T2w-contrast image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcImit2wFromT1wOutputs`).
 */
function fat_proc_imit2w_from_t1w_execute(
    params: FatProcImit2wFromT1wParameters,
    runner: Runner | null = null,
): FatProcImit2wFromT1wOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_IMIT2W_FROM_T1W_METADATA);
    params = execution.params(params)
    const cargs = fat_proc_imit2w_from_t1w_cargs(params, execution)
    const ret = fat_proc_imit2w_from_t1w_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fat_proc_imit2w_from_t1w
 *
 * Process T1w anatomical images to generate an imitation T2w-contrast image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param t1_file Full name of the input T1w volume
 * @param prefix Output prefix for files and snapshots
 * @param workdir Specify a working directory, which can be removed (default: __WORKING_imit2w_from_t1w)
 * @param mask Optional input of a pre-skullstripped T1_FILE (either mask or skull-stripped volume)
 * @param ss_blur_fwhm Optional, add in blurring during the 3dSkullStrip part (in mm, default: 2 FWHM)
 * @param no_clean Optional switch to NOT remove working directory '__WORKING_imit2w_from_t1w' (default: remove working dir)
 * @param no_qc_view Turn off the automatic creation of QC montages (default: on)
 * @param qc_prefix Change the prefix of the QC images (default: use prefix of volumes)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcImit2wFromT1wOutputs`).
 */
function fat_proc_imit2w_from_t1w(
    t1_file: InputPathType,
    prefix: string,
    workdir: string | null = null,
    mask: InputPathType | null = null,
    ss_blur_fwhm: number | null = null,
    no_clean: boolean = false,
    no_qc_view: boolean = false,
    qc_prefix: string | null = null,
    runner: Runner | null = null,
): FatProcImit2wFromT1wOutputs {
    const params = fat_proc_imit2w_from_t1w_params(t1_file, prefix, workdir, mask, ss_blur_fwhm, no_clean, no_qc_view, qc_prefix)
    return fat_proc_imit2w_from_t1w_execute(params, runner);
}


export {
      FAT_PROC_IMIT2W_FROM_T1W_METADATA,
      FatProcImit2wFromT1wOutputs,
      fat_proc_imit2w_from_t1w,
      fat_proc_imit2w_from_t1w_execute,
      fat_proc_imit2w_from_t1w_params,
};
