// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_JACOBIAN_METADATA: Metadata = {
    id: "c86d79feae349e7fe21b17a4ef927e93ff05549c.boutiques",
    name: "mris_jacobian",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisJacobianParameters {
    "@type"?: "freesurfer/mris_jacobian";
    "original_surface": InputPathType;
    "mapped_surface": InputPathType;
    "jacobian_file": string;
    "log": boolean;
    "noscale": boolean;
    "invert": boolean;
}
type MrisJacobianParametersTagged = Required<Pick<MrisJacobianParameters, '@type'>> & MrisJacobianParameters;


/**
 * Output object returned when calling `MrisJacobianParameters(...)`.
 *
 * @interface
 */
interface MrisJacobianOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the Jacobian of the surface mapping.
     */
    output_jacobian_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param original_surface The original surface file.
 * @param mapped_surface The mapped surface file.
 * @param jacobian_file The output file name for the Jacobian.
 * @param log Compute and write out log of Jacobian.
 * @param noscale Don't scale Jacobian by total surface areas.
 * @param invert Compute -1/Jacobian for Jacobian < 1.
 *
 * @returns Parameter dictionary
 */
function mris_jacobian_params(
    original_surface: InputPathType,
    mapped_surface: InputPathType,
    jacobian_file: string,
    log: boolean = false,
    noscale: boolean = false,
    invert: boolean = false,
): MrisJacobianParametersTagged {
    const params = {
        "@type": "freesurfer/mris_jacobian" as const,
        "original_surface": original_surface,
        "mapped_surface": mapped_surface,
        "jacobian_file": jacobian_file,
        "log": log,
        "noscale": noscale,
        "invert": invert,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_jacobian_cargs(
    params: MrisJacobianParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_jacobian");
    cargs.push(execution.inputFile((params["original_surface"] ?? null)));
    cargs.push(execution.inputFile((params["mapped_surface"] ?? null)));
    cargs.push((params["jacobian_file"] ?? null));
    if ((params["log"] ?? false)) {
        cargs.push("-log");
    }
    if ((params["noscale"] ?? false)) {
        cargs.push("-noscale");
    }
    if ((params["invert"] ?? false)) {
        cargs.push("-invert");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_jacobian_outputs(
    params: MrisJacobianParameters,
    execution: Execution,
): MrisJacobianOutputs {
    const ret: MrisJacobianOutputs = {
        root: execution.outputFile("."),
        output_jacobian_file: execution.outputFile([(params["jacobian_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_jacobian
 *
 * This program computes the Jacobian of a surface mapping.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisJacobianOutputs`).
 */
function mris_jacobian_execute(
    params: MrisJacobianParameters,
    runner: Runner | null = null,
): MrisJacobianOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_JACOBIAN_METADATA);
    params = execution.params(params)
    const cargs = mris_jacobian_cargs(params, execution)
    const ret = mris_jacobian_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_jacobian
 *
 * This program computes the Jacobian of a surface mapping.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param original_surface The original surface file.
 * @param mapped_surface The mapped surface file.
 * @param jacobian_file The output file name for the Jacobian.
 * @param log Compute and write out log of Jacobian.
 * @param noscale Don't scale Jacobian by total surface areas.
 * @param invert Compute -1/Jacobian for Jacobian < 1.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisJacobianOutputs`).
 */
function mris_jacobian(
    original_surface: InputPathType,
    mapped_surface: InputPathType,
    jacobian_file: string,
    log: boolean = false,
    noscale: boolean = false,
    invert: boolean = false,
    runner: Runner | null = null,
): MrisJacobianOutputs {
    const params = mris_jacobian_params(original_surface, mapped_surface, jacobian_file, log, noscale, invert)
    return mris_jacobian_execute(params, runner);
}


export {
      MRIS_JACOBIAN_METADATA,
      MrisJacobianOutputs,
      mris_jacobian,
      mris_jacobian_execute,
      mris_jacobian_params,
};
