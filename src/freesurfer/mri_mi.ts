// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MI_METADATA: Metadata = {
    id: "ffac01dcb4fffeff7d686cc81a49d4b02727cd13.boutiques",
    name: "mri_mi",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMiParameters {
    "@type": "freesurfer.mri_mi";
    "input_file1": InputPathType;
    "input_file2": InputPathType;
    "bins"?: string | null | undefined;
    "silent": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_mi": mri_mi_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_mi(...)`.
 *
 * @interface
 */
interface MriMiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file1 First input file name.
 * @param input_file2 Second input file name.
 * @param bins Specifies the number of bins for the two input volumes. Default is 64x64.
 * @param silent Write out only the final mutual information result.
 *
 * @returns Parameter dictionary
 */
function mri_mi_params(
    input_file1: InputPathType,
    input_file2: InputPathType,
    bins: string | null = null,
    silent: boolean = false,
): MriMiParameters {
    const params = {
        "@type": "freesurfer.mri_mi" as const,
        "input_file1": input_file1,
        "input_file2": input_file2,
        "silent": silent,
    };
    if (bins !== null) {
        params["bins"] = bins;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_mi_cargs(
    params: MriMiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_mi");
    cargs.push(execution.inputFile((params["input_file1"] ?? null)));
    cargs.push(execution.inputFile((params["input_file2"] ?? null)));
    if ((params["bins"] ?? null) !== null) {
        cargs.push(
            "--bins",
            (params["bins"] ?? null)
        );
    }
    if ((params["silent"] ?? null)) {
        cargs.push("--silent");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_mi_outputs(
    params: MriMiParameters,
    execution: Execution,
): MriMiOutputs {
    const ret: MriMiOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Computes mutual information (mi) between two input volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriMiOutputs`).
 */
function mri_mi_execute(
    params: MriMiParameters,
    execution: Execution,
): MriMiOutputs {
    params = execution.params(params)
    const cargs = mri_mi_cargs(params, execution)
    const ret = mri_mi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes mutual information (mi) between two input volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file1 First input file name.
 * @param input_file2 Second input file name.
 * @param bins Specifies the number of bins for the two input volumes. Default is 64x64.
 * @param silent Write out only the final mutual information result.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMiOutputs`).
 */
function mri_mi(
    input_file1: InputPathType,
    input_file2: InputPathType,
    bins: string | null = null,
    silent: boolean = false,
    runner: Runner | null = null,
): MriMiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MI_METADATA);
    const params = mri_mi_params(input_file1, input_file2, bins, silent)
    return mri_mi_execute(params, execution);
}


export {
      MRI_MI_METADATA,
      MriMiOutputs,
      MriMiParameters,
      mri_mi,
      mri_mi_cargs,
      mri_mi_execute,
      mri_mi_outputs,
      mri_mi_params,
};
