// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APAS2ASEG_METADATA: Metadata = {
    id: "b0d97f3396e26e9aab951655046a2c4a8aae1689.boutiques",
    name: "apas2aseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Apas2asegParameters {
    "@type": "freesurfer.apas2aseg";
    "subject"?: string | null | undefined;
    "input_aparc_aseg"?: InputPathType | null | undefined;
    "output_seg"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.apas2aseg": apas2aseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.apas2aseg": apas2aseg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `apas2aseg(...)`.
 *
 * @interface
 */
interface Apas2asegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output segmentation file resulting from the conversion process.
     */
    output_seg_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier specifying the directory where the subject's data is stored.
 * @param input_aparc_aseg Input aparc+aseg.mgz file to be converted.
 * @param output_seg Output file for the new segmentation (e.g., apas-aseg.mgz).
 *
 * @returns Parameter dictionary
 */
function apas2aseg_params(
    subject: string | null = null,
    input_aparc_aseg: InputPathType | null = null,
    output_seg: string | null = null,
): Apas2asegParameters {
    const params = {
        "@type": "freesurfer.apas2aseg" as const,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (input_aparc_aseg !== null) {
        params["input_aparc_aseg"] = input_aparc_aseg;
    }
    if (output_seg !== null) {
        params["output_seg"] = output_seg;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function apas2aseg_cargs(
    params: Apas2asegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("apas2aseg");
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["input_aparc_aseg"] ?? null) !== null) {
        cargs.push(
            "--i",
            execution.inputFile((params["input_aparc_aseg"] ?? null))
        );
    }
    if ((params["output_seg"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_seg"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function apas2aseg_outputs(
    params: Apas2asegParameters,
    execution: Execution,
): Apas2asegOutputs {
    const ret: Apas2asegOutputs = {
        root: execution.outputFile("."),
        output_seg_file: ((params["output_seg"] ?? null) !== null) ? execution.outputFile([(params["output_seg"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * apas2aseg
 *
 * Converts aparc+aseg.mgz into aseg.mgz-like format by replacing specific cortical segmentations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Apas2asegOutputs`).
 */
function apas2aseg_execute(
    params: Apas2asegParameters,
    runner: Runner | null = null,
): Apas2asegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APAS2ASEG_METADATA);
    params = execution.params(params)
    const cargs = apas2aseg_cargs(params, execution)
    const ret = apas2aseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * apas2aseg
 *
 * Converts aparc+aseg.mgz into aseg.mgz-like format by replacing specific cortical segmentations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier specifying the directory where the subject's data is stored.
 * @param input_aparc_aseg Input aparc+aseg.mgz file to be converted.
 * @param output_seg Output file for the new segmentation (e.g., apas-aseg.mgz).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Apas2asegOutputs`).
 */
function apas2aseg(
    subject: string | null = null,
    input_aparc_aseg: InputPathType | null = null,
    output_seg: string | null = null,
    runner: Runner | null = null,
): Apas2asegOutputs {
    const params = apas2aseg_params(subject, input_aparc_aseg, output_seg)
    return apas2aseg_execute(params, runner);
}


export {
      APAS2ASEG_METADATA,
      Apas2asegOutputs,
      Apas2asegParameters,
      apas2aseg,
      apas2aseg_execute,
      apas2aseg_params,
};
