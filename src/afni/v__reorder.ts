// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__REORDER_METADATA: Metadata = {
    id: "93af53020ee1088a33b0e58234dc8960b688e23e.boutiques",
    name: "@Reorder",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VReorderParameters {
    "__STYXTYPE__": "@Reorder";
    "input_dataset": InputPathType;
    "mapfile": InputPathType;
    "prefix": string;
    "offset"?: number | null | undefined;
    "save_work": boolean;
    "test": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@Reorder": v__reorder_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@Reorder": v__reorder_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__reorder(...)`.
 *
 * @interface
 */
interface VReorderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Reordered output dataset
     */
    output_dataset: OutputPathType;
}


function v__reorder_params(
    input_dataset: InputPathType,
    mapfile: InputPathType,
    prefix: string,
    offset: number | null = null,
    save_work: boolean = false,
    test: boolean = false,
): VReorderParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset to reorder (e.g. EPI+tlrc)
     * @param mapfile TR to event mapping file (e.g. events.txt)
     * @param prefix Prefix for the output dataset
     * @param offset Offset mapfile TR indices by OFFSET (in TRs)
     * @param save_work Do not delete work directory (reorder.work.dir) at the end
     * @param test Just report sub-bricks, do not create datasets
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@Reorder" as const,
        "input_dataset": input_dataset,
        "mapfile": mapfile,
        "prefix": prefix,
        "save_work": save_work,
        "test": test,
    };
    if (offset !== null) {
        params["offset"] = offset;
    }
    return params;
}


function v__reorder_cargs(
    params: VReorderParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@Reorder");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    cargs.push(execution.inputFile((params["mapfile"] ?? null)));
    cargs.push((params["prefix"] ?? null));
    if ((params["offset"] ?? null) !== null) {
        cargs.push(
            "-offset",
            String((params["offset"] ?? null))
        );
    }
    if ((params["save_work"] ?? null)) {
        cargs.push("-save_work");
    }
    if ((params["test"] ?? null)) {
        cargs.push("-test");
    }
    return cargs;
}


function v__reorder_outputs(
    params: VReorderParameters,
    execution: Execution,
): VReorderOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VReorderOutputs = {
        root: execution.outputFile("."),
        output_dataset: execution.outputFile([(params["prefix"] ?? null), "+tlrc"].join('')),
    };
    return ret;
}


function v__reorder_execute(
    params: VReorderParameters,
    execution: Execution,
): VReorderOutputs {
    /**
     * Reorder sub-bricks of a dataset based on event mapping. Works similarly to the Reorder plugin.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VReorderOutputs`).
     */
    params = execution.params(params)
    const cargs = v__reorder_cargs(params, execution)
    const ret = v__reorder_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__reorder(
    input_dataset: InputPathType,
    mapfile: InputPathType,
    prefix: string,
    offset: number | null = null,
    save_work: boolean = false,
    test: boolean = false,
    runner: Runner | null = null,
): VReorderOutputs {
    /**
     * Reorder sub-bricks of a dataset based on event mapping. Works similarly to the Reorder plugin.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset to reorder (e.g. EPI+tlrc)
     * @param mapfile TR to event mapping file (e.g. events.txt)
     * @param prefix Prefix for the output dataset
     * @param offset Offset mapfile TR indices by OFFSET (in TRs)
     * @param save_work Do not delete work directory (reorder.work.dir) at the end
     * @param test Just report sub-bricks, do not create datasets
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VReorderOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__REORDER_METADATA);
    const params = v__reorder_params(input_dataset, mapfile, prefix, offset, save_work, test)
    return v__reorder_execute(params, execution);
}


export {
      VReorderOutputs,
      VReorderParameters,
      V__REORDER_METADATA,
      v__reorder,
      v__reorder_params,
};
