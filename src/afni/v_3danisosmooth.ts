// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DANISOSMOOTH_METADATA: Metadata = {
    id: "1ba569c84d08290efa7b480422abdfb93ead68bf.boutiques",
    name: "3danisosmooth",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3danisosmoothParameters {
    "@type": "afni.3danisosmooth";
    "input_dataset": InputPathType;
    "prefix"?: string | null | undefined;
    "iterations"?: number | null | undefined;
    "2d_flag": boolean;
    "3d_flag": boolean;
    "mask_dataset"?: InputPathType | null | undefined;
    "automask_flag": boolean;
    "viewer_flag": boolean;
    "nosmooth_flag": boolean;
    "sigma1"?: number | null | undefined;
    "sigma2"?: number | null | undefined;
    "deltat"?: number | null | undefined;
    "savetempdata_flag": boolean;
    "save_temp_with_diff_measures_flag": boolean;
    "phiding_flag": boolean;
    "phiexp_flag": boolean;
    "noneg_flag": boolean;
    "setneg_value"?: number | null | undefined;
    "edgefraction"?: number | null | undefined;
    "datum_type"?: string | null | undefined;
    "matchorig_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3danisosmooth": v_3danisosmooth_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3danisosmooth": v_3danisosmooth_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3danisosmooth(...)`.
 *
 * @interface
 */
interface V3danisosmoothOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset after anisotropic smoothing
     */
    output_dataset: OutputPathType | null;
    /**
     * Gradient dataset saved at each iteration
     */
    gradient_data: OutputPathType;
    /**
     * Eigens dataset saved at each iteration
     */
    eigens_data: OutputPathType;
    /**
     * Phi dataset saved at each iteration
     */
    phi_data: OutputPathType;
    /**
     * Dtensor dataset saved at each iteration
     */
    dtensor_data: OutputPathType;
    /**
     * Ematrix dataset saved at the first sub-brick iteration
     */
    ematrix_data: OutputPathType;
    /**
     * Flux dataset saved at the first sub-brick iteration
     */
    flux_data: OutputPathType;
    /**
     * Gmatrix dataset saved at the first sub-brick iteration
     */
    gmatrix_data: OutputPathType;
    /**
     * Dataset containing FA, MD, Cl, Cp, and Cs values saved at each iteration
     */
    diff_measures_data: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset to be smoothed
 * @param prefix Output dataset prefix name
 * @param iterations Number of iterations (default=10)
 * @param v_2d_flag Smooth a slice at a time (default)
 * @param v_3d_flag Smooth through slices
 * @param mask_dataset Use specified dataset as mask to include/exclude voxels
 * @param automask_flag Automatically compute mask for dataset
 * @param viewer_flag Show central axial slice image every iteration
 * @param nosmooth_flag Do not do intermediate smoothing of gradients
 * @param sigma1 Gaussian smoothing sigma before gradient computation (default=0.5)
 * @param sigma2 Gaussian smoothing sigma after gradient computation (default=1.0)
 * @param deltat Pseudo-time step (default=0.25)
 * @param savetempdata_flag Save temporary datasets each iteration
 * @param save_temp_with_diff_measures_flag Save temporary datasets with different measures in a dataset
 * @param phiding_flag Use Ding method for computing phi (default)
 * @param phiexp_flag Use exponential method for computing phi
 * @param noneg_flag Set negative voxels to 0
 * @param setneg_value Set negative voxels to specified value
 * @param edgefraction Adjust the fraction of the anisotropic component added (0 to 1, default=0.5)
 * @param datum_type Specify type for output data (byte, short, float) [default=float]
 * @param matchorig_flag Match datum type and clip min/max to input data
 * @param help_flag Print help message
 *
 * @returns Parameter dictionary
 */
function v_3danisosmooth_params(
    input_dataset: InputPathType,
    prefix: string | null = null,
    iterations: number | null = null,
    v_2d_flag: boolean = false,
    v_3d_flag: boolean = false,
    mask_dataset: InputPathType | null = null,
    automask_flag: boolean = false,
    viewer_flag: boolean = false,
    nosmooth_flag: boolean = false,
    sigma1: number | null = null,
    sigma2: number | null = null,
    deltat: number | null = null,
    savetempdata_flag: boolean = false,
    save_temp_with_diff_measures_flag: boolean = false,
    phiding_flag: boolean = false,
    phiexp_flag: boolean = false,
    noneg_flag: boolean = false,
    setneg_value: number | null = null,
    edgefraction: number | null = null,
    datum_type: string | null = null,
    matchorig_flag: boolean = false,
    help_flag: boolean = false,
): V3danisosmoothParameters {
    const params = {
        "@type": "afni.3danisosmooth" as const,
        "input_dataset": input_dataset,
        "2d_flag": v_2d_flag,
        "3d_flag": v_3d_flag,
        "automask_flag": automask_flag,
        "viewer_flag": viewer_flag,
        "nosmooth_flag": nosmooth_flag,
        "savetempdata_flag": savetempdata_flag,
        "save_temp_with_diff_measures_flag": save_temp_with_diff_measures_flag,
        "phiding_flag": phiding_flag,
        "phiexp_flag": phiexp_flag,
        "noneg_flag": noneg_flag,
        "matchorig_flag": matchorig_flag,
        "help_flag": help_flag,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    if (sigma1 !== null) {
        params["sigma1"] = sigma1;
    }
    if (sigma2 !== null) {
        params["sigma2"] = sigma2;
    }
    if (deltat !== null) {
        params["deltat"] = deltat;
    }
    if (setneg_value !== null) {
        params["setneg_value"] = setneg_value;
    }
    if (edgefraction !== null) {
        params["edgefraction"] = edgefraction;
    }
    if (datum_type !== null) {
        params["datum_type"] = datum_type;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3danisosmooth_cargs(
    params: V3danisosmoothParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3danisosmooth");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-iters",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["2d_flag"] ?? null)) {
        cargs.push("-2D");
    }
    if ((params["3d_flag"] ?? null)) {
        cargs.push("-3D");
    }
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    if ((params["automask_flag"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["viewer_flag"] ?? null)) {
        cargs.push("-viewer");
    }
    if ((params["nosmooth_flag"] ?? null)) {
        cargs.push("-nosmooth");
    }
    if ((params["sigma1"] ?? null) !== null) {
        cargs.push(
            "-sigma1",
            String((params["sigma1"] ?? null))
        );
    }
    if ((params["sigma2"] ?? null) !== null) {
        cargs.push(
            "-sigma2",
            String((params["sigma2"] ?? null))
        );
    }
    if ((params["deltat"] ?? null) !== null) {
        cargs.push(
            "-deltat",
            String((params["deltat"] ?? null))
        );
    }
    if ((params["savetempdata_flag"] ?? null)) {
        cargs.push("-savetempdata");
    }
    if ((params["save_temp_with_diff_measures_flag"] ?? null)) {
        cargs.push("-save_temp_with_diff_measures");
    }
    if ((params["phiding_flag"] ?? null)) {
        cargs.push("-phiding");
    }
    if ((params["phiexp_flag"] ?? null)) {
        cargs.push("-phiexp");
    }
    if ((params["noneg_flag"] ?? null)) {
        cargs.push("-noneg");
    }
    if ((params["setneg_value"] ?? null) !== null) {
        cargs.push(
            "-setneg",
            String((params["setneg_value"] ?? null))
        );
    }
    if ((params["edgefraction"] ?? null) !== null) {
        cargs.push(
            "-edgefraction",
            String((params["edgefraction"] ?? null))
        );
    }
    if ((params["datum_type"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum_type"] ?? null)
        );
    }
    if ((params["matchorig_flag"] ?? null)) {
        cargs.push("-matchorig");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3danisosmooth_outputs(
    params: V3danisosmoothParameters,
    execution: Execution,
): V3danisosmoothOutputs {
    const ret: V3danisosmoothOutputs = {
        root: execution.outputFile("."),
        output_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+smooth"].join('')) : null,
        gradient_data: execution.outputFile(["Gradient.ITER"].join('')),
        eigens_data: execution.outputFile(["Eigens.ITER"].join('')),
        phi_data: execution.outputFile(["phi.ITER"].join('')),
        dtensor_data: execution.outputFile(["Dtensor.ITER"].join('')),
        ematrix_data: execution.outputFile(["Ematrix.ITER"].join('')),
        flux_data: execution.outputFile(["Flux.ITER"].join('')),
        gmatrix_data: execution.outputFile(["Gmatrix.ITER"].join('')),
        diff_measures_data: execution.outputFile(["Diff_measures.ITER"].join('')),
    };
    return ret;
}


/**
 * Smooths a dataset using an anisotropic smoothing technique.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3danisosmoothOutputs`).
 */
function v_3danisosmooth_execute(
    params: V3danisosmoothParameters,
    execution: Execution,
): V3danisosmoothOutputs {
    params = execution.params(params)
    const cargs = v_3danisosmooth_cargs(params, execution)
    const ret = v_3danisosmooth_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Smooths a dataset using an anisotropic smoothing technique.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset to be smoothed
 * @param prefix Output dataset prefix name
 * @param iterations Number of iterations (default=10)
 * @param v_2d_flag Smooth a slice at a time (default)
 * @param v_3d_flag Smooth through slices
 * @param mask_dataset Use specified dataset as mask to include/exclude voxels
 * @param automask_flag Automatically compute mask for dataset
 * @param viewer_flag Show central axial slice image every iteration
 * @param nosmooth_flag Do not do intermediate smoothing of gradients
 * @param sigma1 Gaussian smoothing sigma before gradient computation (default=0.5)
 * @param sigma2 Gaussian smoothing sigma after gradient computation (default=1.0)
 * @param deltat Pseudo-time step (default=0.25)
 * @param savetempdata_flag Save temporary datasets each iteration
 * @param save_temp_with_diff_measures_flag Save temporary datasets with different measures in a dataset
 * @param phiding_flag Use Ding method for computing phi (default)
 * @param phiexp_flag Use exponential method for computing phi
 * @param noneg_flag Set negative voxels to 0
 * @param setneg_value Set negative voxels to specified value
 * @param edgefraction Adjust the fraction of the anisotropic component added (0 to 1, default=0.5)
 * @param datum_type Specify type for output data (byte, short, float) [default=float]
 * @param matchorig_flag Match datum type and clip min/max to input data
 * @param help_flag Print help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3danisosmoothOutputs`).
 */
function v_3danisosmooth(
    input_dataset: InputPathType,
    prefix: string | null = null,
    iterations: number | null = null,
    v_2d_flag: boolean = false,
    v_3d_flag: boolean = false,
    mask_dataset: InputPathType | null = null,
    automask_flag: boolean = false,
    viewer_flag: boolean = false,
    nosmooth_flag: boolean = false,
    sigma1: number | null = null,
    sigma2: number | null = null,
    deltat: number | null = null,
    savetempdata_flag: boolean = false,
    save_temp_with_diff_measures_flag: boolean = false,
    phiding_flag: boolean = false,
    phiexp_flag: boolean = false,
    noneg_flag: boolean = false,
    setneg_value: number | null = null,
    edgefraction: number | null = null,
    datum_type: string | null = null,
    matchorig_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): V3danisosmoothOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DANISOSMOOTH_METADATA);
    const params = v_3danisosmooth_params(input_dataset, prefix, iterations, v_2d_flag, v_3d_flag, mask_dataset, automask_flag, viewer_flag, nosmooth_flag, sigma1, sigma2, deltat, savetempdata_flag, save_temp_with_diff_measures_flag, phiding_flag, phiexp_flag, noneg_flag, setneg_value, edgefraction, datum_type, matchorig_flag, help_flag)
    return v_3danisosmooth_execute(params, execution);
}


export {
      V3danisosmoothOutputs,
      V3danisosmoothParameters,
      V_3DANISOSMOOTH_METADATA,
      v_3danisosmooth,
      v_3danisosmooth_cargs,
      v_3danisosmooth_execute,
      v_3danisosmooth_outputs,
      v_3danisosmooth_params,
};
