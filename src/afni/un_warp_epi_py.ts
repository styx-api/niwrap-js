// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UN_WARP_EPI_PY_METADATA: Metadata = {
    id: "e93607b1115d9db7a51efc4be5147b1c6e23ca56.boutiques",
    name: "unWarpEPI.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface UnWarpEpiPyParameters {
    "__STYXTYPE__": "unWarpEPI.py";
    "forward": InputPathType;
    "reverse": InputPathType;
    "anat4warp": InputPathType;
    "data": string;
    "subjID": string;
    "giant_move": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "unWarpEPI.py": un_warp_epi_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `un_warp_epi_py(...)`.
 *
 * @interface
 */
interface UnWarpEpiPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function un_warp_epi_py_params(
    forward: InputPathType,
    reverse: InputPathType,
    anat4warp: InputPathType,
    data: string,
    subj_id: string,
    giant_move: boolean = false,
): UnWarpEpiPyParameters {
    /**
     * Build parameters.
    
     * @param forward Calibration matching data to be corrected
     * @param reverse Calibration with opposing polarity to data to be corrected
     * @param anat4warp Reference anatomical dataset
     * @param data Data to be corrected (same polarity as forward calibration data). Separate with commas if specifying multiple datasets.
     * @param subj_id ID of subject to be corrected
     * @param giant_move Set giant_move option for align_epi_anat if final align of anatomy to corrected EPI fails if datasets are far apart in space.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "unWarpEPI.py" as const,
        "forward": forward,
        "reverse": reverse,
        "anat4warp": anat4warp,
        "data": data,
        "subjID": subj_id,
        "giant_move": giant_move,
    };
    return params;
}


function un_warp_epi_py_cargs(
    params: UnWarpEpiPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("unWarpEPI.py");
    cargs.push(
        "-f",
        execution.inputFile((params["forward"] ?? null))
    );
    cargs.push(
        "-r",
        execution.inputFile((params["reverse"] ?? null))
    );
    cargs.push(
        "-a",
        execution.inputFile((params["anat4warp"] ?? null))
    );
    cargs.push(
        "-d",
        (params["data"] ?? null)
    );
    cargs.push(
        "-s",
        (params["subjID"] ?? null)
    );
    if ((params["giant_move"] ?? null)) {
        cargs.push("-g");
    }
    return cargs;
}


function un_warp_epi_py_outputs(
    params: UnWarpEpiPyParameters,
    execution: Execution,
): UnWarpEpiPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: UnWarpEpiPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function un_warp_epi_py_execute(
    params: UnWarpEpiPyParameters,
    execution: Execution,
): UnWarpEpiPyOutputs {
    /**
     * Routine to unwarp EPI data set using another data set with opposite polarity.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `UnWarpEpiPyOutputs`).
     */
    params = execution.params(params)
    const cargs = un_warp_epi_py_cargs(params, execution)
    const ret = un_warp_epi_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function un_warp_epi_py(
    forward: InputPathType,
    reverse: InputPathType,
    anat4warp: InputPathType,
    data: string,
    subj_id: string,
    giant_move: boolean = false,
    runner: Runner | null = null,
): UnWarpEpiPyOutputs {
    /**
     * Routine to unwarp EPI data set using another data set with opposite polarity.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param forward Calibration matching data to be corrected
     * @param reverse Calibration with opposing polarity to data to be corrected
     * @param anat4warp Reference anatomical dataset
     * @param data Data to be corrected (same polarity as forward calibration data). Separate with commas if specifying multiple datasets.
     * @param subj_id ID of subject to be corrected
     * @param giant_move Set giant_move option for align_epi_anat if final align of anatomy to corrected EPI fails if datasets are far apart in space.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `UnWarpEpiPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UN_WARP_EPI_PY_METADATA);
    const params = un_warp_epi_py_params(forward, reverse, anat4warp, data, subj_id, giant_move)
    return un_warp_epi_py_execute(params, execution);
}


export {
      UN_WARP_EPI_PY_METADATA,
      UnWarpEpiPyOutputs,
      UnWarpEpiPyParameters,
      un_warp_epi_py,
      un_warp_epi_py_params,
};
