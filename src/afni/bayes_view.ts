// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BAYES_VIEW_METADATA: Metadata = {
    id: "9505bae1fe22a390a7c949d3eee05a64bdd40fb6.boutiques",
    name: "bayes_view",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface BayesViewParameters {
    "@type"?: "afni/bayes_view";
    "input_folder": string;
    "help": boolean;
    "shiny_folder"?: string | null | undefined;
}
type BayesViewParametersTagged = Required<Pick<BayesViewParameters, '@type'>> & BayesViewParameters;


/**
 * Output object returned when calling `BayesViewParameters(...)`.
 *
 * @interface
 */
interface BayesViewOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_folder Path to a folder containing .RData files
 * @param help Show help message
 * @param shiny_folder Use a custom shiny folder (for testing purposes)
 *
 * @returns Parameter dictionary
 */
function bayes_view_params(
    input_folder: string,
    help: boolean = false,
    shiny_folder: string | null = null,
): BayesViewParametersTagged {
    const params = {
        "@type": "afni/bayes_view" as const,
        "input_folder": input_folder,
        "help": help,
    };
    if (shiny_folder !== null) {
        params["shiny_folder"] = shiny_folder;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function bayes_view_cargs(
    params: BayesViewParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("bayes_view");
    cargs.push((params["input_folder"] ?? null));
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["shiny_folder"] ?? null) !== null) {
        cargs.push(
            "-ShinyFolder",
            (params["shiny_folder"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function bayes_view_outputs(
    params: BayesViewParameters,
    execution: Execution,
): BayesViewOutputs {
    const ret: BayesViewOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * bayes_view
 *
 * Launch a shiny app to visualize RBA output files. The files must have the .RData extension.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BayesViewOutputs`).
 */
function bayes_view_execute(
    params: BayesViewParameters,
    runner: Runner | null = null,
): BayesViewOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BAYES_VIEW_METADATA);
    params = execution.params(params)
    const cargs = bayes_view_cargs(params, execution)
    const ret = bayes_view_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * bayes_view
 *
 * Launch a shiny app to visualize RBA output files. The files must have the .RData extension.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_folder Path to a folder containing .RData files
 * @param help Show help message
 * @param shiny_folder Use a custom shiny folder (for testing purposes)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BayesViewOutputs`).
 */
function bayes_view(
    input_folder: string,
    help: boolean = false,
    shiny_folder: string | null = null,
    runner: Runner | null = null,
): BayesViewOutputs {
    const params = bayes_view_params(input_folder, help, shiny_folder)
    return bayes_view_execute(params, runner);
}


export {
      BAYES_VIEW_METADATA,
      BayesViewOutputs,
      bayes_view,
      bayes_view_execute,
      bayes_view_params,
};
