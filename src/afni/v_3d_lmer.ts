// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LMER_METADATA: Metadata = {
    id: "8a20ec1dad15f735378cd37a5c99e69b69118bc1.boutiques",
    name: "3dLMEr",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLmerParameters {
    "@type": "afni.3dLMEr";
    "bound_lower"?: number | null | undefined;
    "bound_upper"?: number | null | undefined;
    "cio": boolean;
    "data_table": InputPathType;
    "debug_args": boolean;
    "glf_code"?: string | null | undefined;
    "glt_code"?: string | null | undefined;
    "help": boolean;
    "input_file_column"?: string | null | undefined;
    "jobs"?: number | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "model": string;
    "prefix": string;
    "qvar_centers"?: string | null | undefined;
    "qvars"?: string | null | undefined;
    "resid"?: string | null | undefined;
    "rio": boolean;
    "show_options": boolean;
    "ss_type"?: number | null | undefined;
    "trr": boolean;
    "vvar_centers"?: string | null | undefined;
    "vvars"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dLMEr": v_3d_lmer_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dLMEr": v_3d_lmer_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_lmer(...)`.
 *
 * @interface
 */
interface V3dLmerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file
     */
    output_file: OutputPathType;
    /**
     * Output residuals file
     */
    residuals_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param data_table List the data structure with a header as the first line
 * @param model Specify the model structure for all the variables
 * @param prefix Output file name
 * @param bound_lower Specify the lower and upper bounds for outlier removal
 * @param bound_upper Specify the lower and upper bounds for outlier removal
 * @param cio Use AFNI's C io functions
 * @param debug_args Enable R to save the parameters for debugging
 * @param glf_code Specify a general linear F-style (GLF) formulation
 * @param glt_code Specify the label and weights of interest in a general linear t-style (GLT) formulation
 * @param help Display the help message
 * @param input_file_column Specify the column name for input files of effect estimate
 * @param jobs Number of jobs for parallel computing
 * @param mask Process voxels inside this mask only
 * @param qvar_centers Specify centering values for quantitative variables
 * @param qvars Identify quantitative variables (or covariates)
 * @param resid Output file name for the residuals
 * @param rio Use R's io functions
 * @param show_options List of allowed options
 * @param ss_type Specify the type for sums of squares in the F-statistics
 * @param trr Perform test-retest reliability analysis
 * @param vvar_centers Specify centering values for voxel-wise covariates
 * @param vvars Identify voxel-wise covariates
 *
 * @returns Parameter dictionary
 */
function v_3d_lmer_params(
    data_table: InputPathType,
    model: string,
    prefix: string,
    bound_lower: number | null = null,
    bound_upper: number | null = null,
    cio: boolean = false,
    debug_args: boolean = false,
    glf_code: string | null = null,
    glt_code: string | null = null,
    help: boolean = false,
    input_file_column: string | null = null,
    jobs: number | null = null,
    mask: InputPathType | null = null,
    qvar_centers: string | null = null,
    qvars: string | null = null,
    resid: string | null = null,
    rio: boolean = false,
    show_options: boolean = false,
    ss_type: number | null = null,
    trr: boolean = false,
    vvar_centers: string | null = null,
    vvars: string | null = null,
): V3dLmerParameters {
    const params = {
        "@type": "afni.3dLMEr" as const,
        "cio": cio,
        "data_table": data_table,
        "debug_args": debug_args,
        "help": help,
        "model": model,
        "prefix": prefix,
        "rio": rio,
        "show_options": show_options,
        "trr": trr,
    };
    if (bound_lower !== null) {
        params["bound_lower"] = bound_lower;
    }
    if (bound_upper !== null) {
        params["bound_upper"] = bound_upper;
    }
    if (glf_code !== null) {
        params["glf_code"] = glf_code;
    }
    if (glt_code !== null) {
        params["glt_code"] = glt_code;
    }
    if (input_file_column !== null) {
        params["input_file_column"] = input_file_column;
    }
    if (jobs !== null) {
        params["jobs"] = jobs;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (qvar_centers !== null) {
        params["qvar_centers"] = qvar_centers;
    }
    if (qvars !== null) {
        params["qvars"] = qvars;
    }
    if (resid !== null) {
        params["resid"] = resid;
    }
    if (ss_type !== null) {
        params["ss_type"] = ss_type;
    }
    if (vvar_centers !== null) {
        params["vvar_centers"] = vvar_centers;
    }
    if (vvars !== null) {
        params["vvars"] = vvars;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_lmer_cargs(
    params: V3dLmerParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dLMEr");
    if ((params["bound_lower"] ?? null) !== null) {
        cargs.push(String((params["bound_lower"] ?? null)));
    }
    if ((params["bound_upper"] ?? null) !== null) {
        cargs.push(String((params["bound_upper"] ?? null)));
    }
    if ((params["cio"] ?? null)) {
        cargs.push("-cio");
    }
    cargs.push(
        "-dataTable",
        execution.inputFile((params["data_table"] ?? null))
    );
    if ((params["debug_args"] ?? null)) {
        cargs.push("-dbgArgs");
    }
    if ((params["glf_code"] ?? null) !== null) {
        cargs.push(
            "-glfCode",
            (params["glf_code"] ?? null)
        );
    }
    if ((params["glt_code"] ?? null) !== null) {
        cargs.push(
            "-gltCode",
            (params["glt_code"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["input_file_column"] ?? null) !== null) {
        cargs.push(
            "-IF",
            (params["input_file_column"] ?? null)
        );
    }
    if ((params["jobs"] ?? null) !== null) {
        cargs.push(
            "-jobs",
            String((params["jobs"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    cargs.push(
        "-model",
        (params["model"] ?? null)
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["qvar_centers"] ?? null) !== null) {
        cargs.push(
            "-qVarCenters",
            (params["qvar_centers"] ?? null)
        );
    }
    if ((params["qvars"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["qvars"] ?? null)
        );
    }
    if ((params["resid"] ?? null) !== null) {
        cargs.push(
            "-resid",
            (params["resid"] ?? null)
        );
    }
    if ((params["rio"] ?? null)) {
        cargs.push("-Rio");
    }
    if ((params["show_options"] ?? null)) {
        cargs.push("-show_allowed_options");
    }
    if ((params["ss_type"] ?? null) !== null) {
        cargs.push(
            "-SS_type",
            String((params["ss_type"] ?? null))
        );
    }
    if ((params["trr"] ?? null)) {
        cargs.push("-TRR");
    }
    if ((params["vvar_centers"] ?? null) !== null) {
        cargs.push(
            "-vVarCenters",
            (params["vvar_centers"] ?? null)
        );
    }
    if ((params["vvars"] ?? null) !== null) {
        cargs.push(
            "-vVars",
            (params["vvars"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_lmer_outputs(
    params: V3dLmerParameters,
    execution: Execution,
): V3dLmerOutputs {
    const ret: V3dLmerOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')),
        residuals_file: ((params["resid"] ?? null) !== null) ? execution.outputFile([(params["resid"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * 3dLMEr
 *
 * Program for Voxelwise Linear Mixed-Effects (LME) Analysis.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLmerOutputs`).
 */
function v_3d_lmer_execute(
    params: V3dLmerParameters,
    runner: Runner | null = null,
): V3dLmerOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LMER_METADATA);
    params = execution.params(params)
    const cargs = v_3d_lmer_cargs(params, execution)
    const ret = v_3d_lmer_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dLMEr
 *
 * Program for Voxelwise Linear Mixed-Effects (LME) Analysis.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param data_table List the data structure with a header as the first line
 * @param model Specify the model structure for all the variables
 * @param prefix Output file name
 * @param bound_lower Specify the lower and upper bounds for outlier removal
 * @param bound_upper Specify the lower and upper bounds for outlier removal
 * @param cio Use AFNI's C io functions
 * @param debug_args Enable R to save the parameters for debugging
 * @param glf_code Specify a general linear F-style (GLF) formulation
 * @param glt_code Specify the label and weights of interest in a general linear t-style (GLT) formulation
 * @param help Display the help message
 * @param input_file_column Specify the column name for input files of effect estimate
 * @param jobs Number of jobs for parallel computing
 * @param mask Process voxels inside this mask only
 * @param qvar_centers Specify centering values for quantitative variables
 * @param qvars Identify quantitative variables (or covariates)
 * @param resid Output file name for the residuals
 * @param rio Use R's io functions
 * @param show_options List of allowed options
 * @param ss_type Specify the type for sums of squares in the F-statistics
 * @param trr Perform test-retest reliability analysis
 * @param vvar_centers Specify centering values for voxel-wise covariates
 * @param vvars Identify voxel-wise covariates
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLmerOutputs`).
 */
function v_3d_lmer(
    data_table: InputPathType,
    model: string,
    prefix: string,
    bound_lower: number | null = null,
    bound_upper: number | null = null,
    cio: boolean = false,
    debug_args: boolean = false,
    glf_code: string | null = null,
    glt_code: string | null = null,
    help: boolean = false,
    input_file_column: string | null = null,
    jobs: number | null = null,
    mask: InputPathType | null = null,
    qvar_centers: string | null = null,
    qvars: string | null = null,
    resid: string | null = null,
    rio: boolean = false,
    show_options: boolean = false,
    ss_type: number | null = null,
    trr: boolean = false,
    vvar_centers: string | null = null,
    vvars: string | null = null,
    runner: Runner | null = null,
): V3dLmerOutputs {
    const params = v_3d_lmer_params(data_table, model, prefix, bound_lower, bound_upper, cio, debug_args, glf_code, glt_code, help, input_file_column, jobs, mask, qvar_centers, qvars, resid, rio, show_options, ss_type, trr, vvar_centers, vvars)
    return v_3d_lmer_execute(params, runner);
}


export {
      V3dLmerOutputs,
      V3dLmerParameters,
      V_3D_LMER_METADATA,
      v_3d_lmer,
      v_3d_lmer_execute,
      v_3d_lmer_params,
};
