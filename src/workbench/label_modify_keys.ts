// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_MODIFY_KEYS_METADATA: Metadata = {
    id: "d6011104900b541ac706e3e2a8d7222e98ae764f.boutiques",
    name: "label-modify-keys",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface LabelModifyKeysParameters {
    "@type"?: "workbench/label-modify-keys";
    "label_in": InputPathType;
    "remap_file": string;
    "label_out": string;
    "opt_column_column"?: string | null | undefined;
}
type LabelModifyKeysParametersTagged = Required<Pick<LabelModifyKeysParameters, '@type'>> & LabelModifyKeysParameters;


/**
 * Output object returned when calling `LabelModifyKeysParameters(...)`.
 *
 * @interface
 */
interface LabelModifyKeysOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output label file
     */
    label_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label_in the input label file
 * @param remap_file text file with old and new key values
 * @param label_out output label file
 * @param opt_column_column select a single column to use: the column number or name
 *
 * @returns Parameter dictionary
 */
function label_modify_keys_params(
    label_in: InputPathType,
    remap_file: string,
    label_out: string,
    opt_column_column: string | null = null,
): LabelModifyKeysParametersTagged {
    const params = {
        "@type": "workbench/label-modify-keys" as const,
        "label_in": label_in,
        "remap_file": remap_file,
        "label_out": label_out,
    };
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label_modify_keys_cargs(
    params: LabelModifyKeysParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-label-modify-keys");
    cargs.push(execution.inputFile((params["label_in"] ?? null)));
    cargs.push((params["remap_file"] ?? null));
    cargs.push((params["label_out"] ?? null));
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label_modify_keys_outputs(
    params: LabelModifyKeysParameters,
    execution: Execution,
): LabelModifyKeysOutputs {
    const ret: LabelModifyKeysOutputs = {
        root: execution.outputFile("."),
        label_out: execution.outputFile([(params["label_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * label-modify-keys
 *
 * Change key values in a label file.
 *
 * <remap-file> should have lines of the form 'oldkey newkey', like so:
 *
 * 3 5
 * 5 8
 * 8 2
 *
 * This would change the current label with key '3' to use the key '5' instead, 5 would use 8, and 8 would use 2.  Any collision in key values results in the label that was not specified in the remap file getting remapped to an otherwise unused key.  Remapping more than one key to the same new key, or the same key to more than one new key, results in an error.  This will not change the appearance of the file when displayed, as it will change the key values in the data at the same time.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelModifyKeysOutputs`).
 */
function label_modify_keys_execute(
    params: LabelModifyKeysParameters,
    runner: Runner | null = null,
): LabelModifyKeysOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_MODIFY_KEYS_METADATA);
    params = execution.params(params)
    const cargs = label_modify_keys_cargs(params, execution)
    const ret = label_modify_keys_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * label-modify-keys
 *
 * Change key values in a label file.
 *
 * <remap-file> should have lines of the form 'oldkey newkey', like so:
 *
 * 3 5
 * 5 8
 * 8 2
 *
 * This would change the current label with key '3' to use the key '5' instead, 5 would use 8, and 8 would use 2.  Any collision in key values results in the label that was not specified in the remap file getting remapped to an otherwise unused key.  Remapping more than one key to the same new key, or the same key to more than one new key, results in an error.  This will not change the appearance of the file when displayed, as it will change the key values in the data at the same time.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param label_in the input label file
 * @param remap_file text file with old and new key values
 * @param label_out output label file
 * @param opt_column_column select a single column to use: the column number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelModifyKeysOutputs`).
 */
function label_modify_keys(
    label_in: InputPathType,
    remap_file: string,
    label_out: string,
    opt_column_column: string | null = null,
    runner: Runner | null = null,
): LabelModifyKeysOutputs {
    const params = label_modify_keys_params(label_in, remap_file, label_out, opt_column_column)
    return label_modify_keys_execute(params, runner);
}


export {
      LABEL_MODIFY_KEYS_METADATA,
      LabelModifyKeysOutputs,
      label_modify_keys,
      label_modify_keys_execute,
      label_modify_keys_params,
};
