// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FATCAT_MATPLOT_METADATA: Metadata = {
    id: "ea9e34c417e4d60f8cb488d20b44ee9b288b0053.boutiques",
    name: "FATCAT_matplot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatcatMatplotParameters {
    "@type"?: "afni/FATCAT_matplot";
    "directory": string;
    "shiny_folder": boolean;
}
type FatcatMatplotParametersTagged = Required<Pick<FatcatMatplotParameters, '@type'>> & FatcatMatplotParameters;


/**
 * Output object returned when calling `FatcatMatplotParameters(...)`.
 *
 * @interface
 */
interface FatcatMatplotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param directory Path to a folder containing .netcc and/or .grid files.
 * @param shiny_folder Use a custom shiny folder (for testing purposes).
 *
 * @returns Parameter dictionary
 */
function fatcat_matplot_params(
    directory: string,
    shiny_folder: boolean = false,
): FatcatMatplotParametersTagged {
    const params = {
        "@type": "afni/FATCAT_matplot" as const,
        "directory": directory,
        "shiny_folder": shiny_folder,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fatcat_matplot_cargs(
    params: FatcatMatplotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("FATCAT_matplot");
    cargs.push((params["directory"] ?? null));
    if ((params["shiny_folder"] ?? false)) {
        cargs.push("-ShinyFolder");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fatcat_matplot_outputs(
    params: FatcatMatplotParameters,
    execution: Execution,
): FatcatMatplotOutputs {
    const ret: FatcatMatplotOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * FATCAT_matplot
 *
 * Launch a shiny app to visualize .netcc and/or .grid files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatcatMatplotOutputs`).
 */
function fatcat_matplot_execute(
    params: FatcatMatplotParameters,
    runner: Runner | null = null,
): FatcatMatplotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FATCAT_MATPLOT_METADATA);
    params = execution.params(params)
    const cargs = fatcat_matplot_cargs(params, execution)
    const ret = fatcat_matplot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * FATCAT_matplot
 *
 * Launch a shiny app to visualize .netcc and/or .grid files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param directory Path to a folder containing .netcc and/or .grid files.
 * @param shiny_folder Use a custom shiny folder (for testing purposes).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatcatMatplotOutputs`).
 */
function fatcat_matplot(
    directory: string,
    shiny_folder: boolean = false,
    runner: Runner | null = null,
): FatcatMatplotOutputs {
    const params = fatcat_matplot_params(directory, shiny_folder)
    return fatcat_matplot_execute(params, runner);
}


export {
      FATCAT_MATPLOT_METADATA,
      FatcatMatplotOutputs,
      fatcat_matplot,
      fatcat_matplot_execute,
      fatcat_matplot_params,
};
