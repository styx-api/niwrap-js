// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMCALC_METADATA: Metadata = {
    id: "619429e3eb3a18d69af5e0d47edb5f5289323a19.boutiques",
    name: "imcalc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImcalcParameters {
    "__STYXTYPE__": "imcalc";
    "datum_type"?: string | null | undefined;
    "image_inputs"?: Array<InputPathType> | null | undefined;
    "expression": string;
    "output_name"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "imcalc": imcalc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "imcalc": imcalc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imcalc(...)`.
 *
 * @interface
 */
interface ImcalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file produced after applying the expression to input images
     */
    output_image: OutputPathType | null;
}


function imcalc_params(
    expression: string,
    datum_type: string | null = null,
    image_inputs: Array<InputPathType> | null = null,
    output_name: string | null = null,
): ImcalcParameters {
    /**
     * Build parameters.
    
     * @param expression Apply the expression within quotes to the input images, one voxel at a time, to produce the output image. (e.g., "sqrt(a*b)" to compute the geometric mean)
     * @param datum_type Coerce the output data to be stored as the given type: byte, short, or float. Default is the datum of the first input image on the command line.
     * @param image_inputs Read image 'dname' and call the voxel values 'a' in the expression. 'a' may be any letter from 'a' to 'z'. If some letter name is used in the expression but not present in one of the image options here, then that variable is set to 0.
     * @param output_name Use 'name' for the output image filename. Default is 'imcalc.out'.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "imcalc" as const,
        "expression": expression,
    };
    if (datum_type !== null) {
        params["datum_type"] = datum_type;
    }
    if (image_inputs !== null) {
        params["image_inputs"] = image_inputs;
    }
    if (output_name !== null) {
        params["output_name"] = output_name;
    }
    return params;
}


function imcalc_cargs(
    params: ImcalcParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("imcalc");
    if ((params["datum_type"] ?? null) !== null) {
        cargs.push(
            "-datum type",
            (params["datum_type"] ?? null)
        );
    }
    if ((params["image_inputs"] ?? null) !== null) {
        cargs.push(
            "-a",
            ...(params["image_inputs"] ?? null).map(f => execution.inputFile(f))
        );
    }
    cargs.push(
        "-expr",
        (params["expression"] ?? null)
    );
    if ((params["output_name"] ?? null) !== null) {
        cargs.push(
            "-output",
            (params["output_name"] ?? null)
        );
    }
    return cargs;
}


function imcalc_outputs(
    params: ImcalcParameters,
    execution: Execution,
): ImcalcOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ImcalcOutputs = {
        root: execution.outputFile("."),
        output_image: ((params["output_name"] ?? null) !== null) ? execution.outputFile([(params["output_name"] ?? null)].join('')) : null,
    };
    return ret;
}


function imcalc_execute(
    params: ImcalcParameters,
    execution: Execution,
): ImcalcOutputs {
    /**
     * Tool for arithmetic operations on 2D images, pixel-by-pixel.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ImcalcOutputs`).
     */
    params = execution.params(params)
    const cargs = imcalc_cargs(params, execution)
    const ret = imcalc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function imcalc(
    expression: string,
    datum_type: string | null = null,
    image_inputs: Array<InputPathType> | null = null,
    output_name: string | null = null,
    runner: Runner | null = null,
): ImcalcOutputs {
    /**
     * Tool for arithmetic operations on 2D images, pixel-by-pixel.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param expression Apply the expression within quotes to the input images, one voxel at a time, to produce the output image. (e.g., "sqrt(a*b)" to compute the geometric mean)
     * @param datum_type Coerce the output data to be stored as the given type: byte, short, or float. Default is the datum of the first input image on the command line.
     * @param image_inputs Read image 'dname' and call the voxel values 'a' in the expression. 'a' may be any letter from 'a' to 'z'. If some letter name is used in the expression but not present in one of the image options here, then that variable is set to 0.
     * @param output_name Use 'name' for the output image filename. Default is 'imcalc.out'.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ImcalcOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMCALC_METADATA);
    const params = imcalc_params(expression, datum_type, image_inputs, output_name)
    return imcalc_execute(params, execution);
}


export {
      IMCALC_METADATA,
      ImcalcOutputs,
      ImcalcParameters,
      imcalc,
      imcalc_params,
};
