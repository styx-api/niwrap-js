// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RUN_SAMSEG_LONG_METADATA: Metadata = {
    id: "281cafde4435543fa9734d7698891e798550c9ed.boutiques",
    name: "run_samseg_long",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RunSamsegLongParameters {
    "__STYXTYPE__": "run_samseg_long";
    "timepoint": Array<InputPathType>;
    "output": string;
    "lesion": boolean;
    "threshold"?: number | null | undefined;
    "samples"?: number | null | undefined;
    "burnin"?: number | null | undefined;
    "lesion_mask_structure"?: string | null | undefined;
    "lesion_mask_pattern"?: Array<number> | null | undefined;
    "mode"?: Array<string> | null | undefined;
    "atlas"?: string | null | undefined;
    "deformation_hyperprior"?: number | null | undefined;
    "gmm_hyperprior"?: number | null | undefined;
    "save_warp": boolean;
    "save_mesh": boolean;
    "save_posteriors"?: Array<string> | null | undefined;
    "pallidum_separate": boolean;
    "threads"?: number | null | undefined;
    "tp_to_base_transform"?: Array<InputPathType> | null | undefined;
    "force_different_resolutions": boolean;
    "history": boolean;
    "showfigs": boolean;
    "movie": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "run_samseg_long": run_samseg_long_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `run_samseg_long(...)`.
 *
 * @interface
 */
interface RunSamsegLongOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function run_samseg_long_params(
    timepoint: Array<InputPathType>,
    output: string,
    lesion: boolean = false,
    threshold: number | null = null,
    samples: number | null = null,
    burnin: number | null = null,
    lesion_mask_structure: string | null = null,
    lesion_mask_pattern: Array<number> | null = null,
    mode: Array<string> | null = null,
    atlas: string | null = null,
    deformation_hyperprior: number | null = null,
    gmm_hyperprior: number | null = null,
    save_warp: boolean = false,
    save_mesh: boolean = false,
    save_posteriors: Array<string> | null = null,
    pallidum_separate: boolean = false,
    threads: number | null = null,
    tp_to_base_transform: Array<InputPathType> | null = null,
    force_different_resolutions: boolean = false,
    history: boolean = false,
    showfigs: boolean = false,
    movie: boolean = false,
): RunSamsegLongParameters {
    /**
     * Build parameters.
    
     * @param timepoint Configure a timepoint with multiple inputs.
     * @param output Output directory.
     * @param lesion Enable lesion segmentation (requires tensorflow).
     * @param threshold Lesion threshold for final segmentation. Requires lesion segmentation.
     * @param samples Number of samples for lesion segmentation. Requires lesion segmentation.
     * @param burnin Number of burn-in samples for lesion segmentation. Requires lesion segmentation.
     * @param lesion_mask_structure Intensity mask brain structure. Requires lesion segmentation.
     * @param lesion_mask_pattern Lesion mask list: -1 below lesion mask structure mean, +1 above, 0 no mask. Requires lesion segmentation.
     * @param mode Output basenames for the input image mode.
     * @param atlas Point to an alternative atlas directory.
     * @param deformation_hyperprior Strength of the latent deformation hyperprior.
     * @param gmm_hyperprior Strength of the latent GMM hyperprior.
     * @param save_warp Save the image->template warp fields.
     * @param save_mesh Save the final mesh of each timepoint in template space.
     * @param save_posteriors Save posterior volumes to the 'posteriors' subdirectory.
     * @param pallidum_separate Move pallidum outside of global white matter class. Use with T2/flair.
     * @param threads Number of threads to use. Defaults to OMP_NUM_THREADS or 1.
     * @param tp_to_base_transform Transformation file for each time point to base.
     * @param force_different_resolutions Force run even if time points have different resolutions.
     * @param history Save history.
     * @param showfigs Show figures during run.
     * @param movie Show history as arrow key controlled time sequence.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "run_samseg_long" as const,
        "timepoint": timepoint,
        "output": output,
        "lesion": lesion,
        "save_warp": save_warp,
        "save_mesh": save_mesh,
        "pallidum_separate": pallidum_separate,
        "force_different_resolutions": force_different_resolutions,
        "history": history,
        "showfigs": showfigs,
        "movie": movie,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (samples !== null) {
        params["samples"] = samples;
    }
    if (burnin !== null) {
        params["burnin"] = burnin;
    }
    if (lesion_mask_structure !== null) {
        params["lesion_mask_structure"] = lesion_mask_structure;
    }
    if (lesion_mask_pattern !== null) {
        params["lesion_mask_pattern"] = lesion_mask_pattern;
    }
    if (mode !== null) {
        params["mode"] = mode;
    }
    if (atlas !== null) {
        params["atlas"] = atlas;
    }
    if (deformation_hyperprior !== null) {
        params["deformation_hyperprior"] = deformation_hyperprior;
    }
    if (gmm_hyperprior !== null) {
        params["gmm_hyperprior"] = gmm_hyperprior;
    }
    if (save_posteriors !== null) {
        params["save_posteriors"] = save_posteriors;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (tp_to_base_transform !== null) {
        params["tp_to_base_transform"] = tp_to_base_transform;
    }
    return params;
}


function run_samseg_long_cargs(
    params: RunSamsegLongParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("run_samseg_long");
    cargs.push(
        "-t",
        ...(params["timepoint"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    if ((params["lesion"] ?? null)) {
        cargs.push("--lesion");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["samples"] ?? null) !== null) {
        cargs.push(
            "--samples",
            String((params["samples"] ?? null))
        );
    }
    if ((params["burnin"] ?? null) !== null) {
        cargs.push(
            "--burnin",
            String((params["burnin"] ?? null))
        );
    }
    if ((params["lesion_mask_structure"] ?? null) !== null) {
        cargs.push(
            "--lesion-mask-structure",
            (params["lesion_mask_structure"] ?? null)
        );
    }
    if ((params["lesion_mask_pattern"] ?? null) !== null) {
        cargs.push(
            "--lesion-mask-pattern",
            ...(params["lesion_mask_pattern"] ?? null).map(String)
        );
    }
    if ((params["mode"] ?? null) !== null) {
        cargs.push(
            "-m",
            ...(params["mode"] ?? null)
        );
    }
    if ((params["atlas"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["atlas"] ?? null)
        );
    }
    if ((params["deformation_hyperprior"] ?? null) !== null) {
        cargs.push(
            "--deformation-hyperprior",
            String((params["deformation_hyperprior"] ?? null))
        );
    }
    if ((params["gmm_hyperprior"] ?? null) !== null) {
        cargs.push(
            "--gmm-hyperprior",
            String((params["gmm_hyperprior"] ?? null))
        );
    }
    if ((params["save_warp"] ?? null)) {
        cargs.push("--save-warp");
    }
    if ((params["save_mesh"] ?? null)) {
        cargs.push("--save-mesh");
    }
    if ((params["save_posteriors"] ?? null) !== null) {
        cargs.push(
            "--save-posteriors",
            ...(params["save_posteriors"] ?? null)
        );
    }
    if ((params["pallidum_separate"] ?? null)) {
        cargs.push("--pallidum-separate");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["tp_to_base_transform"] ?? null) !== null) {
        cargs.push(
            "--tp-to-base-transform",
            ...(params["tp_to_base_transform"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["force_different_resolutions"] ?? null)) {
        cargs.push("--force-different-resolutions");
    }
    if ((params["history"] ?? null)) {
        cargs.push("--history");
    }
    if ((params["showfigs"] ?? null)) {
        cargs.push("--showfigs");
    }
    if ((params["movie"] ?? null)) {
        cargs.push("--movie");
    }
    return cargs;
}


function run_samseg_long_outputs(
    params: RunSamsegLongParameters,
    execution: Execution,
): RunSamsegLongOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RunSamsegLongOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function run_samseg_long_execute(
    params: RunSamsegLongParameters,
    execution: Execution,
): RunSamsegLongOutputs {
    /**
     * Longitudinal image segmentation using SAMSEG.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RunSamsegLongOutputs`).
     */
    params = execution.params(params)
    const cargs = run_samseg_long_cargs(params, execution)
    const ret = run_samseg_long_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function run_samseg_long(
    timepoint: Array<InputPathType>,
    output: string,
    lesion: boolean = false,
    threshold: number | null = null,
    samples: number | null = null,
    burnin: number | null = null,
    lesion_mask_structure: string | null = null,
    lesion_mask_pattern: Array<number> | null = null,
    mode: Array<string> | null = null,
    atlas: string | null = null,
    deformation_hyperprior: number | null = null,
    gmm_hyperprior: number | null = null,
    save_warp: boolean = false,
    save_mesh: boolean = false,
    save_posteriors: Array<string> | null = null,
    pallidum_separate: boolean = false,
    threads: number | null = null,
    tp_to_base_transform: Array<InputPathType> | null = null,
    force_different_resolutions: boolean = false,
    history: boolean = false,
    showfigs: boolean = false,
    movie: boolean = false,
    runner: Runner | null = null,
): RunSamsegLongOutputs {
    /**
     * Longitudinal image segmentation using SAMSEG.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param timepoint Configure a timepoint with multiple inputs.
     * @param output Output directory.
     * @param lesion Enable lesion segmentation (requires tensorflow).
     * @param threshold Lesion threshold for final segmentation. Requires lesion segmentation.
     * @param samples Number of samples for lesion segmentation. Requires lesion segmentation.
     * @param burnin Number of burn-in samples for lesion segmentation. Requires lesion segmentation.
     * @param lesion_mask_structure Intensity mask brain structure. Requires lesion segmentation.
     * @param lesion_mask_pattern Lesion mask list: -1 below lesion mask structure mean, +1 above, 0 no mask. Requires lesion segmentation.
     * @param mode Output basenames for the input image mode.
     * @param atlas Point to an alternative atlas directory.
     * @param deformation_hyperprior Strength of the latent deformation hyperprior.
     * @param gmm_hyperprior Strength of the latent GMM hyperprior.
     * @param save_warp Save the image->template warp fields.
     * @param save_mesh Save the final mesh of each timepoint in template space.
     * @param save_posteriors Save posterior volumes to the 'posteriors' subdirectory.
     * @param pallidum_separate Move pallidum outside of global white matter class. Use with T2/flair.
     * @param threads Number of threads to use. Defaults to OMP_NUM_THREADS or 1.
     * @param tp_to_base_transform Transformation file for each time point to base.
     * @param force_different_resolutions Force run even if time points have different resolutions.
     * @param history Save history.
     * @param showfigs Show figures during run.
     * @param movie Show history as arrow key controlled time sequence.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RunSamsegLongOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RUN_SAMSEG_LONG_METADATA);
    const params = run_samseg_long_params(timepoint, output, lesion, threshold, samples, burnin, lesion_mask_structure, lesion_mask_pattern, mode, atlas, deformation_hyperprior, gmm_hyperprior, save_warp, save_mesh, save_posteriors, pallidum_separate, threads, tp_to_base_transform, force_different_resolutions, history, showfigs, movie)
    return run_samseg_long_execute(params, execution);
}


export {
      RUN_SAMSEG_LONG_METADATA,
      RunSamsegLongOutputs,
      RunSamsegLongParameters,
      run_samseg_long,
      run_samseg_long_params,
};
