// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REALTIME_RECEIVER_PY_METADATA: Metadata = {
    id: "eb886e6e6cd896903b705e4bb02ee85f394bd4d4.boutiques",
    name: "realtime_receiver.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface RealtimeReceiverPyParameters {
    "@type"?: "afni/realtime_receiver.py";
    "show_data"?: "yes" | "no" | null | undefined;
    "write_text_data"?: string | null | undefined;
    "data_choice"?: "motion" | "motion_norm" | "all_extras" | "diff_ratio" | null | undefined;
    "serial_port"?: string | null | undefined;
    "show_demo_gui"?: "yes" | "no" | null | undefined;
    "dc_params"?: Array<number> | null | undefined;
    "extras_on_one_line"?: "yes" | "no" | null | undefined;
    "show_comm_times": boolean;
    "show_demo_data": boolean;
    "swap": boolean;
    "tcp_port"?: number | null | undefined;
    "verbosity"?: number | null | undefined;
}
type RealtimeReceiverPyParametersTagged = Required<Pick<RealtimeReceiverPyParameters, '@type'>> & RealtimeReceiverPyParameters;


/**
 * Output object returned when calling `RealtimeReceiverPyParameters(...)`.
 *
 * @interface
 */
interface RealtimeReceiverPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param show_data Display incoming data in terminal window
 * @param write_text_data Write data to text file
 * @param data_choice Pick which data to send as feedback
 * @param serial_port Specify serial port file for feedback data
 * @param show_demo_gui Demonstrate a feedback GUI
 * @param dc_params Set data_choice parameters, e.g. for diff_ratio, params P1 P2
 * @param extras_on_one_line Show 'extras' on one line only
 * @param show_comm_times Display communication times
 * @param show_demo_data Display feedback data in terminal window
 * @param swap Swap bytes of incoming data
 * @param tcp_port Specify TCP port for incoming connections
 * @param verbosity Set the verbosity level
 *
 * @returns Parameter dictionary
 */
function realtime_receiver_py_params(
    show_data: "yes" | "no" | null = null,
    write_text_data: string | null = null,
    data_choice: "motion" | "motion_norm" | "all_extras" | "diff_ratio" | null = null,
    serial_port: string | null = null,
    show_demo_gui: "yes" | "no" | null = null,
    dc_params: Array<number> | null = null,
    extras_on_one_line: "yes" | "no" | null = null,
    show_comm_times: boolean = false,
    show_demo_data: boolean = false,
    swap: boolean = false,
    tcp_port: number | null = null,
    verbosity: number | null = null,
): RealtimeReceiverPyParametersTagged {
    const params = {
        "@type": "afni/realtime_receiver.py" as const,
        "show_comm_times": show_comm_times,
        "show_demo_data": show_demo_data,
        "swap": swap,
    };
    if (show_data !== null) {
        params["show_data"] = show_data;
    }
    if (write_text_data !== null) {
        params["write_text_data"] = write_text_data;
    }
    if (data_choice !== null) {
        params["data_choice"] = data_choice;
    }
    if (serial_port !== null) {
        params["serial_port"] = serial_port;
    }
    if (show_demo_gui !== null) {
        params["show_demo_gui"] = show_demo_gui;
    }
    if (dc_params !== null) {
        params["dc_params"] = dc_params;
    }
    if (extras_on_one_line !== null) {
        params["extras_on_one_line"] = extras_on_one_line;
    }
    if (tcp_port !== null) {
        params["tcp_port"] = tcp_port;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function realtime_receiver_py_cargs(
    params: RealtimeReceiverPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("realtime_receiver.py");
    if ((params["show_data"] ?? null) !== null) {
        cargs.push(
            "-show_data",
            (params["show_data"] ?? null)
        );
    }
    if ((params["write_text_data"] ?? null) !== null) {
        cargs.push(
            "-write_text_data",
            (params["write_text_data"] ?? null)
        );
    }
    if ((params["data_choice"] ?? null) !== null) {
        cargs.push(
            "-data_choice",
            (params["data_choice"] ?? null)
        );
    }
    if ((params["serial_port"] ?? null) !== null) {
        cargs.push(
            "-serial_port",
            (params["serial_port"] ?? null)
        );
    }
    if ((params["show_demo_gui"] ?? null) !== null) {
        cargs.push(
            "-show_demo_gui",
            (params["show_demo_gui"] ?? null)
        );
    }
    if ((params["dc_params"] ?? null) !== null) {
        cargs.push(
            "-dc_params",
            ...(params["dc_params"] ?? null).map(String)
        );
    }
    if ((params["extras_on_one_line"] ?? null) !== null) {
        cargs.push(
            "-extras_on_one_line",
            (params["extras_on_one_line"] ?? null)
        );
    }
    if ((params["show_comm_times"] ?? false)) {
        cargs.push("-show_comm_times");
    }
    if ((params["show_demo_data"] ?? false)) {
        cargs.push("-show_demo_data");
    }
    if ((params["swap"] ?? false)) {
        cargs.push("-swap");
    }
    if ((params["tcp_port"] ?? null) !== null) {
        cargs.push(
            "-tcp_port",
            String((params["tcp_port"] ?? null))
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function realtime_receiver_py_outputs(
    params: RealtimeReceiverPyParameters,
    execution: Execution,
): RealtimeReceiverPyOutputs {
    const ret: RealtimeReceiverPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * realtime_receiver.py
 *
 * Program to receive and display real-time plugin data from AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RealtimeReceiverPyOutputs`).
 */
function realtime_receiver_py_execute(
    params: RealtimeReceiverPyParameters,
    runner: Runner | null = null,
): RealtimeReceiverPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REALTIME_RECEIVER_PY_METADATA);
    params = execution.params(params)
    const cargs = realtime_receiver_py_cargs(params, execution)
    const ret = realtime_receiver_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * realtime_receiver.py
 *
 * Program to receive and display real-time plugin data from AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param show_data Display incoming data in terminal window
 * @param write_text_data Write data to text file
 * @param data_choice Pick which data to send as feedback
 * @param serial_port Specify serial port file for feedback data
 * @param show_demo_gui Demonstrate a feedback GUI
 * @param dc_params Set data_choice parameters, e.g. for diff_ratio, params P1 P2
 * @param extras_on_one_line Show 'extras' on one line only
 * @param show_comm_times Display communication times
 * @param show_demo_data Display feedback data in terminal window
 * @param swap Swap bytes of incoming data
 * @param tcp_port Specify TCP port for incoming connections
 * @param verbosity Set the verbosity level
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RealtimeReceiverPyOutputs`).
 */
function realtime_receiver_py(
    show_data: "yes" | "no" | null = null,
    write_text_data: string | null = null,
    data_choice: "motion" | "motion_norm" | "all_extras" | "diff_ratio" | null = null,
    serial_port: string | null = null,
    show_demo_gui: "yes" | "no" | null = null,
    dc_params: Array<number> | null = null,
    extras_on_one_line: "yes" | "no" | null = null,
    show_comm_times: boolean = false,
    show_demo_data: boolean = false,
    swap: boolean = false,
    tcp_port: number | null = null,
    verbosity: number | null = null,
    runner: Runner | null = null,
): RealtimeReceiverPyOutputs {
    const params = realtime_receiver_py_params(show_data, write_text_data, data_choice, serial_port, show_demo_gui, dc_params, extras_on_one_line, show_comm_times, show_demo_data, swap, tcp_port, verbosity)
    return realtime_receiver_py_execute(params, runner);
}


export {
      REALTIME_RECEIVER_PY_METADATA,
      RealtimeReceiverPyOutputs,
      realtime_receiver_py,
      realtime_receiver_py_execute,
      realtime_receiver_py_params,
};
