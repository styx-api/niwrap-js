// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRAVERAGEHEADER_METADATA: Metadata = {
    id: "157f0794eeda94318eeaa422b5298c388c67f70c.boutiques",
    name: "mraverageheader",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MraverageheaderConfigParameters {
    "@type": "mrtrix.mraverageheader.config";
    "key": string;
    "value": string;
}


interface MraverageheaderParameters {
    "@type": "mrtrix.mraverageheader";
    "padding"?: number | null | undefined;
    "resolution"?: string | null | undefined;
    "fill": boolean;
    "datatype"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MraverageheaderConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": Array<InputPathType>;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.mraverageheader": mraverageheader_cargs,
        "mrtrix.mraverageheader.config": mraverageheader_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.mraverageheader": mraverageheader_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mraverageheader_config_params(
    key: string,
    value: string,
): MraverageheaderConfigParameters {
    const params = {
        "@type": "mrtrix.mraverageheader.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mraverageheader_config_cargs(
    params: MraverageheaderConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mraverageheader(...)`.
 *
 * @interface
 */
interface MraverageheaderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input image(s).
 * @param output the output image
 * @param padding  boundary box padding in voxels. Default: 0
 * @param resolution  subsampling of template compared to smallest voxel size in any input image. Valid options are 'mean': unbiased but loss of resolution for individual images possible, and 'max': smallest voxel size of any input image defines the resolution. Default: mean
 * @param fill  set the intensity in the first volume of the average space to 1
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mraverageheader_params(
    input: Array<InputPathType>,
    output: string,
    padding: number | null = null,
    resolution: string | null = null,
    fill: boolean = false,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MraverageheaderConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MraverageheaderParameters {
    const params = {
        "@type": "mrtrix.mraverageheader" as const,
        "fill": fill,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "output": output,
    };
    if (padding !== null) {
        params["padding"] = padding;
    }
    if (resolution !== null) {
        params["resolution"] = resolution;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mraverageheader_cargs(
    params: MraverageheaderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mraverageheader");
    if ((params["padding"] ?? null) !== null) {
        cargs.push(
            "-padding",
            String((params["padding"] ?? null))
        );
    }
    if ((params["resolution"] ?? null) !== null) {
        cargs.push(
            "-resolution",
            (params["resolution"] ?? null)
        );
    }
    if ((params["fill"] ?? null)) {
        cargs.push("-fill");
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datatype",
            (params["datatype"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...(params["input"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mraverageheader_outputs(
    params: MraverageheaderParameters,
    execution: Execution,
): MraverageheaderOutputs {
    const ret: MraverageheaderOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mraverageheader
 *
 * Calculate the average (unbiased) coordinate space of all input images.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MraverageheaderOutputs`).
 */
function mraverageheader_execute(
    params: MraverageheaderParameters,
    runner: Runner | null = null,
): MraverageheaderOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRAVERAGEHEADER_METADATA);
    params = execution.params(params)
    const cargs = mraverageheader_cargs(params, execution)
    const ret = mraverageheader_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mraverageheader
 *
 * Calculate the average (unbiased) coordinate space of all input images.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input image(s).
 * @param output the output image
 * @param padding  boundary box padding in voxels. Default: 0
 * @param resolution  subsampling of template compared to smallest voxel size in any input image. Valid options are 'mean': unbiased but loss of resolution for individual images possible, and 'max': smallest voxel size of any input image defines the resolution. Default: mean
 * @param fill  set the intensity in the first volume of the average space to 1
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MraverageheaderOutputs`).
 */
function mraverageheader(
    input: Array<InputPathType>,
    output: string,
    padding: number | null = null,
    resolution: string | null = null,
    fill: boolean = false,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MraverageheaderConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MraverageheaderOutputs {
    const params = mraverageheader_params(input, output, padding, resolution, fill, datatype, info, quiet, debug, force, nthreads, config, help, version)
    return mraverageheader_execute(params, runner);
}


export {
      MRAVERAGEHEADER_METADATA,
      MraverageheaderConfigParameters,
      MraverageheaderOutputs,
      MraverageheaderParameters,
      mraverageheader,
      mraverageheader_config_params,
      mraverageheader_execute,
      mraverageheader_params,
};
