// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_PROFILE_CLUSTERING_METADATA: Metadata = {
    id: "d05a50a56ea6dcbf1723835e699f7dd1938ab8f5.boutiques",
    name: "mris_profileClustering",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisProfileClusteringParameters {
    "@type"?: "freesurfer/mris_profileClustering";
    "input_file": InputPathType;
    "output_file": string;
    "other_options"?: string | null | undefined;
}
type MrisProfileClusteringParametersTagged = Required<Pick<MrisProfileClusteringParameters, '@type'>> & MrisProfileClusteringParameters;


/**
 * Output object returned when calling `MrisProfileClusteringParameters(...)`.
 *
 * @interface
 */
interface MrisProfileClusteringOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File with the clustering results.
     */
    clustering_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input file required for clustering.
 * @param output_file Output file to store clustering results.
 * @param other_options Other various options for tuning the clustering process.
 *
 * @returns Parameter dictionary
 */
function mris_profile_clustering_params(
    input_file: InputPathType,
    output_file: string,
    other_options: string | null = null,
): MrisProfileClusteringParametersTagged {
    const params = {
        "@type": "freesurfer/mris_profileClustering" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    if (other_options !== null) {
        params["other_options"] = other_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_profile_clustering_cargs(
    params: MrisProfileClusteringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_profileClustering");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    if ((params["other_options"] ?? null) !== null) {
        cargs.push((params["other_options"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_profile_clustering_outputs(
    params: MrisProfileClusteringParameters,
    execution: Execution,
): MrisProfileClusteringOutputs {
    const ret: MrisProfileClusteringOutputs = {
        root: execution.outputFile("."),
        clustering_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_profileClustering
 *
 * A tool from Freesurfer for clustering based on profile data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisProfileClusteringOutputs`).
 */
function mris_profile_clustering_execute(
    params: MrisProfileClusteringParameters,
    runner: Runner | null = null,
): MrisProfileClusteringOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_PROFILE_CLUSTERING_METADATA);
    params = execution.params(params)
    const cargs = mris_profile_clustering_cargs(params, execution)
    const ret = mris_profile_clustering_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_profileClustering
 *
 * A tool from Freesurfer for clustering based on profile data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input file required for clustering.
 * @param output_file Output file to store clustering results.
 * @param other_options Other various options for tuning the clustering process.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisProfileClusteringOutputs`).
 */
function mris_profile_clustering(
    input_file: InputPathType,
    output_file: string,
    other_options: string | null = null,
    runner: Runner | null = null,
): MrisProfileClusteringOutputs {
    const params = mris_profile_clustering_params(input_file, output_file, other_options)
    return mris_profile_clustering_execute(params, runner);
}


export {
      MRIS_PROFILE_CLUSTERING_METADATA,
      MrisProfileClusteringOutputs,
      mris_profile_clustering,
      mris_profile_clustering_execute,
      mris_profile_clustering_params,
};
