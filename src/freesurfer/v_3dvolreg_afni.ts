// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DVOLREG_AFNI_METADATA: Metadata = {
    id: "80aae3856a13a6dd770babdd60fe4d17ad449c07.boutiques",
    name: "3dvolreg.afni",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface V3dvolregAfniParameters {
    "__STYXTYPE__": "3dvolreg.afni";
    "input_file": InputPathType;
    "output_file": string;
    "options"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dvolreg.afni": v_3dvolreg_afni_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dvolreg.afni": v_3dvolreg_afni_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dvolreg_afni(...)`.
 *
 * @interface
 */
interface V3dvolregAfniOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of the registered dataset
     */
    registered_output: OutputPathType;
}


function v_3dvolreg_afni_params(
    input_file: InputPathType,
    output_file: string,
    options: string | null = null,
): V3dvolregAfniParameters {
    /**
     * Build parameters.
    
     * @param input_file Input dataset to be registered
     * @param output_file Output dataset with applied registration
     * @param options Options for 3dvolreg (consult AFNI documentation for details)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dvolreg.afni" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    if (options !== null) {
        params["options"] = options;
    }
    return params;
}


function v_3dvolreg_afni_cargs(
    params: V3dvolregAfniParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dvolreg.afni");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    if ((params["options"] ?? null) !== null) {
        cargs.push((params["options"] ?? null));
    }
    return cargs;
}


function v_3dvolreg_afni_outputs(
    params: V3dvolregAfniParameters,
    execution: Execution,
): V3dvolregAfniOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dvolregAfniOutputs = {
        root: execution.outputFile("."),
        registered_output: execution.outputFile([(params["output_file"] ?? null), ".nii"].join('')),
    };
    return ret;
}


function v_3dvolreg_afni_execute(
    params: V3dvolregAfniParameters,
    execution: Execution,
): V3dvolregAfniOutputs {
    /**
     * AFNI program for volume registration.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dvolregAfniOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dvolreg_afni_cargs(params, execution)
    const ret = v_3dvolreg_afni_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3dvolreg_afni(
    input_file: InputPathType,
    output_file: string,
    options: string | null = null,
    runner: Runner | null = null,
): V3dvolregAfniOutputs {
    /**
     * AFNI program for volume registration.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Input dataset to be registered
     * @param output_file Output dataset with applied registration
     * @param options Options for 3dvolreg (consult AFNI documentation for details)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dvolregAfniOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DVOLREG_AFNI_METADATA);
    const params = v_3dvolreg_afni_params(input_file, output_file, options)
    return v_3dvolreg_afni_execute(params, execution);
}


export {
      V3dvolregAfniOutputs,
      V3dvolregAfniParameters,
      V_3DVOLREG_AFNI_METADATA,
      v_3dvolreg_afni,
      v_3dvolreg_afni_params,
};
