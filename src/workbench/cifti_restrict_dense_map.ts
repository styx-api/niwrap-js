// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_RESTRICT_DENSE_MAP_METADATA: Metadata = {
    id: "4fdac7bf03188fb3145cd70863d71f8655ef81bf.boutiques",
    name: "cifti-restrict-dense-map",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiRestrictDenseMapParameters {
    "@type": "workbench.cifti-restrict-dense-map";
    "cifti_in": InputPathType;
    "direction": string;
    "cifti_out": string;
    "opt_cifti_roi_roi_cifti"?: InputPathType | null | undefined;
    "opt_left_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_right_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_cerebellum_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_vol_roi_roi_vol"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-restrict-dense-map": cifti_restrict_dense_map_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-restrict-dense-map": cifti_restrict_dense_map_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cifti_restrict_dense_map(...)`.
 *
 * @interface
 */
interface CiftiRestrictDenseMapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in the input cifti
 * @param direction which dimension to change the mapping on (integer, 'ROW', or 'COLUMN')
 * @param cifti_out the output cifti
 * @param opt_cifti_roi_roi_cifti cifti file containing combined rois: the rois as a cifti file
 * @param opt_left_roi_roi_metric vertices to use from left hemisphere: the left roi as a metric file
 * @param opt_right_roi_roi_metric vertices to use from right hemisphere: the right roi as a metric file
 * @param opt_cerebellum_roi_roi_metric vertices to use from cerebellum: the cerebellum roi as a metric file
 * @param opt_vol_roi_roi_vol voxels to use: the roi volume file
 *
 * @returns Parameter dictionary
 */
function cifti_restrict_dense_map_params(
    cifti_in: InputPathType,
    direction: string,
    cifti_out: string,
    opt_cifti_roi_roi_cifti: InputPathType | null = null,
    opt_left_roi_roi_metric: InputPathType | null = null,
    opt_right_roi_roi_metric: InputPathType | null = null,
    opt_cerebellum_roi_roi_metric: InputPathType | null = null,
    opt_vol_roi_roi_vol: InputPathType | null = null,
): CiftiRestrictDenseMapParameters {
    const params = {
        "@type": "workbench.cifti-restrict-dense-map" as const,
        "cifti_in": cifti_in,
        "direction": direction,
        "cifti_out": cifti_out,
    };
    if (opt_cifti_roi_roi_cifti !== null) {
        params["opt_cifti_roi_roi_cifti"] = opt_cifti_roi_roi_cifti;
    }
    if (opt_left_roi_roi_metric !== null) {
        params["opt_left_roi_roi_metric"] = opt_left_roi_roi_metric;
    }
    if (opt_right_roi_roi_metric !== null) {
        params["opt_right_roi_roi_metric"] = opt_right_roi_roi_metric;
    }
    if (opt_cerebellum_roi_roi_metric !== null) {
        params["opt_cerebellum_roi_roi_metric"] = opt_cerebellum_roi_roi_metric;
    }
    if (opt_vol_roi_roi_vol !== null) {
        params["opt_vol_roi_roi_vol"] = opt_vol_roi_roi_vol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_restrict_dense_map_cargs(
    params: CiftiRestrictDenseMapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-restrict-dense-map");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_cifti_roi_roi_cifti"] ?? null) !== null) {
        cargs.push(
            "-cifti-roi",
            execution.inputFile((params["opt_cifti_roi_roi_cifti"] ?? null))
        );
    }
    if ((params["opt_left_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-left-roi",
            execution.inputFile((params["opt_left_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_right_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-right-roi",
            execution.inputFile((params["opt_right_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_cerebellum_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-roi",
            execution.inputFile((params["opt_cerebellum_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_vol_roi_roi_vol"] ?? null) !== null) {
        cargs.push(
            "-vol-roi",
            execution.inputFile((params["opt_vol_roi_roi_vol"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_restrict_dense_map_outputs(
    params: CiftiRestrictDenseMapParameters,
    execution: Execution,
): CiftiRestrictDenseMapOutputs {
    const ret: CiftiRestrictDenseMapOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-restrict-dense-map
 *
 * Exclude brainordinates from a cifti file.
 *
 * Writes a modified version of <cifti-in>, where all brainordinates outside the specified roi(s) are removed from the file.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.  If -cifti-roi is specified, no other -*-roi option may be specified.  If not using -cifti-roi, any -*-roi options not present will discard the relevant structure, if present in the input file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiRestrictDenseMapOutputs`).
 */
function cifti_restrict_dense_map_execute(
    params: CiftiRestrictDenseMapParameters,
    runner: Runner | null = null,
): CiftiRestrictDenseMapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_RESTRICT_DENSE_MAP_METADATA);
    params = execution.params(params)
    const cargs = cifti_restrict_dense_map_cargs(params, execution)
    const ret = cifti_restrict_dense_map_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-restrict-dense-map
 *
 * Exclude brainordinates from a cifti file.
 *
 * Writes a modified version of <cifti-in>, where all brainordinates outside the specified roi(s) are removed from the file.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.  If -cifti-roi is specified, no other -*-roi option may be specified.  If not using -cifti-roi, any -*-roi options not present will discard the relevant structure, if present in the input file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the input cifti
 * @param direction which dimension to change the mapping on (integer, 'ROW', or 'COLUMN')
 * @param cifti_out the output cifti
 * @param opt_cifti_roi_roi_cifti cifti file containing combined rois: the rois as a cifti file
 * @param opt_left_roi_roi_metric vertices to use from left hemisphere: the left roi as a metric file
 * @param opt_right_roi_roi_metric vertices to use from right hemisphere: the right roi as a metric file
 * @param opt_cerebellum_roi_roi_metric vertices to use from cerebellum: the cerebellum roi as a metric file
 * @param opt_vol_roi_roi_vol voxels to use: the roi volume file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiRestrictDenseMapOutputs`).
 */
function cifti_restrict_dense_map(
    cifti_in: InputPathType,
    direction: string,
    cifti_out: string,
    opt_cifti_roi_roi_cifti: InputPathType | null = null,
    opt_left_roi_roi_metric: InputPathType | null = null,
    opt_right_roi_roi_metric: InputPathType | null = null,
    opt_cerebellum_roi_roi_metric: InputPathType | null = null,
    opt_vol_roi_roi_vol: InputPathType | null = null,
    runner: Runner | null = null,
): CiftiRestrictDenseMapOutputs {
    const params = cifti_restrict_dense_map_params(cifti_in, direction, cifti_out, opt_cifti_roi_roi_cifti, opt_left_roi_roi_metric, opt_right_roi_roi_metric, opt_cerebellum_roi_roi_metric, opt_vol_roi_roi_vol)
    return cifti_restrict_dense_map_execute(params, runner);
}


export {
      CIFTI_RESTRICT_DENSE_MAP_METADATA,
      CiftiRestrictDenseMapOutputs,
      CiftiRestrictDenseMapParameters,
      cifti_restrict_dense_map,
      cifti_restrict_dense_map_execute,
      cifti_restrict_dense_map_params,
};
