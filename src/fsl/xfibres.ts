// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XFIBRES_METADATA: Metadata = {
    id: "fafbeb72d013b0b0ce07781341982cb881937d4d.boutiques",
    name: "xfibres",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface XfibresParameters {
    "@type": "fsl.xfibres";
    "datafile": InputPathType;
    "maskfile": InputPathType;
    "bvecs": InputPathType;
    "bvals": InputPathType;
    "logdir"?: string | null | undefined;
    "forcedir": boolean;
    "max_fibres"?: number | null | undefined;
    "model"?: number | null | undefined;
    "fudge"?: string | null | undefined;
    "num_jumps"?: number | null | undefined;
    "num_burnin"?: number | null | undefined;
    "burnin_noard"?: number | null | undefined;
    "sampleevery"?: number | null | undefined;
    "updateproposal"?: number | null | undefined;
    "seed"?: string | null | undefined;
    "noard": boolean;
    "allard": boolean;
    "nospat": boolean;
    "nonlinear": boolean;
    "cnonlinear": boolean;
    "rician": boolean;
    "add_f0": boolean;
    "ard_f0": boolean;
    "rmean"?: number | null | undefined;
    "rstd"?: number | null | undefined;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.xfibres": xfibres_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.xfibres": xfibres_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `xfibres(...)`.
 *
 * @interface
 */
interface XfibresOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Log directory where output files are saved
     */
    output_logdir: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param datafile Data file (e.g., diffusion data)
 * @param maskfile Mask file defining brain voxels
 * @param bvecs B vectors file
 * @param bvals B values file
 * @param logdir Log directory (default is logdir)
 * @param forcedir Use the actual directory name given - i.e., don't add + to make a new directory
 * @param max_fibres Maximum number of fibres to fit in each voxel (default 1)
 * @param model Model to use: 1=deconv. with sticks (default), 2=deconv. with sticks and a range of diffusivities, 3=deconv. with zeppelins
 * @param fudge ARD fudge factor
 * @param num_jumps Number of jumps to be made by MCMC (default 1250)
 * @param num_burnin Total number of jumps at start of MCMC to be discarded (default 1000)
 * @param burnin_noard Number of burnin jumps before ARD is imposed (default 0)
 * @param sampleevery Number of jumps for each sample (MCMC) (default 25)
 * @param updateproposal Number of jumps for each update to the proposal density std (MCMC) (default 40)
 * @param seed Seed for pseudo-random number generator
 * @param noard Turn ARD off on all fibres
 * @param allard Turn ARD on all fibres
 * @param nospat Initialize with tensor, not spatially
 * @param nonlinear Initialize with nonlinear fitting
 * @param cnonlinear Initialize with constrained nonlinear fitting
 * @param rician Use Rician noise modelling
 * @param add_f0 Add to the model an unattenuated signal compartment
 * @param ard_f0 Use ARD on F0
 * @param rmean Set the prior mean for R of model 3 (default: 0.13 - must be <0.5)
 * @param rstd Set the prior standard deviation for R of model 3 (default: 0.03)
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display help message
 *
 * @returns Parameter dictionary
 */
function xfibres_params(
    datafile: InputPathType,
    maskfile: InputPathType,
    bvecs: InputPathType,
    bvals: InputPathType,
    logdir: string | null = null,
    forcedir: boolean = false,
    max_fibres: number | null = null,
    model: number | null = null,
    fudge: string | null = null,
    num_jumps: number | null = null,
    num_burnin: number | null = null,
    burnin_noard: number | null = null,
    sampleevery: number | null = null,
    updateproposal: number | null = null,
    seed: string | null = null,
    noard: boolean = false,
    allard: boolean = false,
    nospat: boolean = false,
    nonlinear: boolean = false,
    cnonlinear: boolean = false,
    rician: boolean = false,
    add_f0: boolean = false,
    ard_f0: boolean = false,
    rmean: number | null = null,
    rstd: number | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): XfibresParameters {
    const params = {
        "@type": "fsl.xfibres" as const,
        "datafile": datafile,
        "maskfile": maskfile,
        "bvecs": bvecs,
        "bvals": bvals,
        "forcedir": forcedir,
        "noard": noard,
        "allard": allard,
        "nospat": nospat,
        "nonlinear": nonlinear,
        "cnonlinear": cnonlinear,
        "rician": rician,
        "add_f0": add_f0,
        "ard_f0": ard_f0,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (logdir !== null) {
        params["logdir"] = logdir;
    }
    if (max_fibres !== null) {
        params["max_fibres"] = max_fibres;
    }
    if (model !== null) {
        params["model"] = model;
    }
    if (fudge !== null) {
        params["fudge"] = fudge;
    }
    if (num_jumps !== null) {
        params["num_jumps"] = num_jumps;
    }
    if (num_burnin !== null) {
        params["num_burnin"] = num_burnin;
    }
    if (burnin_noard !== null) {
        params["burnin_noard"] = burnin_noard;
    }
    if (sampleevery !== null) {
        params["sampleevery"] = sampleevery;
    }
    if (updateproposal !== null) {
        params["updateproposal"] = updateproposal;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (rmean !== null) {
        params["rmean"] = rmean;
    }
    if (rstd !== null) {
        params["rstd"] = rstd;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function xfibres_cargs(
    params: XfibresParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("xfibres");
    cargs.push(
        "-k",
        execution.inputFile((params["datafile"] ?? null))
    );
    cargs.push(
        "-m",
        execution.inputFile((params["maskfile"] ?? null))
    );
    cargs.push(
        "-r",
        execution.inputFile((params["bvecs"] ?? null))
    );
    cargs.push(
        "-b",
        execution.inputFile((params["bvals"] ?? null))
    );
    if ((params["logdir"] ?? null) !== null) {
        cargs.push(
            "--ld",
            (params["logdir"] ?? null)
        );
    }
    if ((params["forcedir"] ?? null)) {
        cargs.push("--forcedir");
    }
    if ((params["max_fibres"] ?? null) !== null) {
        cargs.push(
            "--nf",
            String((params["max_fibres"] ?? null))
        );
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "--model",
            String((params["model"] ?? null))
        );
    }
    if ((params["fudge"] ?? null) !== null) {
        cargs.push(
            "--fudge",
            (params["fudge"] ?? null)
        );
    }
    if ((params["num_jumps"] ?? null) !== null) {
        cargs.push(
            "--nj",
            String((params["num_jumps"] ?? null))
        );
    }
    if ((params["num_burnin"] ?? null) !== null) {
        cargs.push(
            "--bi",
            String((params["num_burnin"] ?? null))
        );
    }
    if ((params["burnin_noard"] ?? null) !== null) {
        cargs.push(
            "--bn",
            String((params["burnin_noard"] ?? null))
        );
    }
    if ((params["sampleevery"] ?? null) !== null) {
        cargs.push(
            "--se",
            String((params["sampleevery"] ?? null))
        );
    }
    if ((params["updateproposal"] ?? null) !== null) {
        cargs.push(
            "--upe",
            String((params["updateproposal"] ?? null))
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            (params["seed"] ?? null)
        );
    }
    if ((params["noard"] ?? null)) {
        cargs.push("--noard");
    }
    if ((params["allard"] ?? null)) {
        cargs.push("--allard");
    }
    if ((params["nospat"] ?? null)) {
        cargs.push("--nospat");
    }
    if ((params["nonlinear"] ?? null)) {
        cargs.push("--nonlinear");
    }
    if ((params["cnonlinear"] ?? null)) {
        cargs.push("--cnonlinear");
    }
    if ((params["rician"] ?? null)) {
        cargs.push("--rician");
    }
    if ((params["add_f0"] ?? null)) {
        cargs.push("--f0");
    }
    if ((params["ard_f0"] ?? null)) {
        cargs.push("--ardf0");
    }
    if ((params["rmean"] ?? null) !== null) {
        cargs.push(
            "--Rmean",
            String((params["rmean"] ?? null))
        );
    }
    if ((params["rstd"] ?? null) !== null) {
        cargs.push(
            "--Rstd",
            String((params["rstd"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-V");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function xfibres_outputs(
    params: XfibresParameters,
    execution: Execution,
): XfibresOutputs {
    const ret: XfibresOutputs = {
        root: execution.outputFile("."),
        output_logdir: execution.outputFile(["logdir"].join('')),
    };
    return ret;
}


/**
 * xfibres
 *
 * Part of FSL - estimates diffusion parameters for multiple fibres per voxel.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XfibresOutputs`).
 */
function xfibres_execute(
    params: XfibresParameters,
    runner: Runner | null = null,
): XfibresOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XFIBRES_METADATA);
    params = execution.params(params)
    const cargs = xfibres_cargs(params, execution)
    const ret = xfibres_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * xfibres
 *
 * Part of FSL - estimates diffusion parameters for multiple fibres per voxel.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param datafile Data file (e.g., diffusion data)
 * @param maskfile Mask file defining brain voxels
 * @param bvecs B vectors file
 * @param bvals B values file
 * @param logdir Log directory (default is logdir)
 * @param forcedir Use the actual directory name given - i.e., don't add + to make a new directory
 * @param max_fibres Maximum number of fibres to fit in each voxel (default 1)
 * @param model Model to use: 1=deconv. with sticks (default), 2=deconv. with sticks and a range of diffusivities, 3=deconv. with zeppelins
 * @param fudge ARD fudge factor
 * @param num_jumps Number of jumps to be made by MCMC (default 1250)
 * @param num_burnin Total number of jumps at start of MCMC to be discarded (default 1000)
 * @param burnin_noard Number of burnin jumps before ARD is imposed (default 0)
 * @param sampleevery Number of jumps for each sample (MCMC) (default 25)
 * @param updateproposal Number of jumps for each update to the proposal density std (MCMC) (default 40)
 * @param seed Seed for pseudo-random number generator
 * @param noard Turn ARD off on all fibres
 * @param allard Turn ARD on all fibres
 * @param nospat Initialize with tensor, not spatially
 * @param nonlinear Initialize with nonlinear fitting
 * @param cnonlinear Initialize with constrained nonlinear fitting
 * @param rician Use Rician noise modelling
 * @param add_f0 Add to the model an unattenuated signal compartment
 * @param ard_f0 Use ARD on F0
 * @param rmean Set the prior mean for R of model 3 (default: 0.13 - must be <0.5)
 * @param rstd Set the prior standard deviation for R of model 3 (default: 0.03)
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XfibresOutputs`).
 */
function xfibres(
    datafile: InputPathType,
    maskfile: InputPathType,
    bvecs: InputPathType,
    bvals: InputPathType,
    logdir: string | null = null,
    forcedir: boolean = false,
    max_fibres: number | null = null,
    model: number | null = null,
    fudge: string | null = null,
    num_jumps: number | null = null,
    num_burnin: number | null = null,
    burnin_noard: number | null = null,
    sampleevery: number | null = null,
    updateproposal: number | null = null,
    seed: string | null = null,
    noard: boolean = false,
    allard: boolean = false,
    nospat: boolean = false,
    nonlinear: boolean = false,
    cnonlinear: boolean = false,
    rician: boolean = false,
    add_f0: boolean = false,
    ard_f0: boolean = false,
    rmean: number | null = null,
    rstd: number | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): XfibresOutputs {
    const params = xfibres_params(datafile, maskfile, bvecs, bvals, logdir, forcedir, max_fibres, model, fudge, num_jumps, num_burnin, burnin_noard, sampleevery, updateproposal, seed, noard, allard, nospat, nonlinear, cnonlinear, rician, add_f0, ard_f0, rmean, rstd, verbose_flag, help_flag)
    return xfibres_execute(params, runner);
}


export {
      XFIBRES_METADATA,
      XfibresOutputs,
      XfibresParameters,
      xfibres,
      xfibres_execute,
      xfibres_params,
};
