// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SMOOTH_IMAGE_METADATA: Metadata = {
    id: "c743ecca2407454064c39d3994944e2822b5560a.boutiques",
    name: "SmoothImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface SmoothImageParameters {
    "@type": "ants.SmoothImage";
    "image_dimension": number;
    "image_ext": InputPathType;
    "smoothing_sigma": string;
    "out_image_ext": string;
    "sigma_units"?: 0 | 1 | null | undefined;
    "median_filter"?: 0 | 1 | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.SmoothImage": smooth_image_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.SmoothImage": smooth_image_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `smooth_image(...)`.
 *
 * @interface
 */
interface SmoothImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output smoothed image file.
     */
    smoothed_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Specifies the dimensionality of the image.
 * @param image_ext The input image file to be smoothed.
 * @param smoothing_sigma The sigma value for smoothing. A separate sigma may be specified for each dimension, e.g., '1.5x1x2'.
 * @param out_image_ext The output smoothed image file.
 * @param sigma_units Determines if sigma is in spacing units (1) or not (0). Default is 0.
 * @param median_filter Whether to use median filter. Default is 0. If using median filter, sigma represents the radius in voxels.
 *
 * @returns Parameter dictionary
 */
function smooth_image_params(
    image_dimension: number,
    image_ext: InputPathType,
    smoothing_sigma: string,
    out_image_ext: string,
    sigma_units: 0 | 1 | null = null,
    median_filter: 0 | 1 | null = null,
): SmoothImageParameters {
    const params = {
        "@type": "ants.SmoothImage" as const,
        "image_dimension": image_dimension,
        "image_ext": image_ext,
        "smoothing_sigma": smoothing_sigma,
        "out_image_ext": out_image_ext,
    };
    if (sigma_units !== null) {
        params["sigma_units"] = sigma_units;
    }
    if (median_filter !== null) {
        params["median_filter"] = median_filter;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function smooth_image_cargs(
    params: SmoothImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SmoothImage");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["image_ext"] ?? null)));
    cargs.push((params["smoothing_sigma"] ?? null));
    cargs.push((params["out_image_ext"] ?? null));
    if ((params["sigma_units"] ?? null) !== null) {
        cargs.push(String((params["sigma_units"] ?? null)));
    }
    if ((params["median_filter"] ?? null) !== null) {
        cargs.push(String((params["median_filter"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function smooth_image_outputs(
    params: SmoothImageParameters,
    execution: Execution,
): SmoothImageOutputs {
    const ret: SmoothImageOutputs = {
        root: execution.outputFile("."),
        smoothed_image: execution.outputFile([(params["out_image_ext"] ?? null)].join('')),
    };
    return ret;
}


/**
 * SmoothImage allows smoothing of images with adjustable sigma values, offering optional median filtering functionality.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `SmoothImageOutputs`).
 */
function smooth_image_execute(
    params: SmoothImageParameters,
    execution: Execution,
): SmoothImageOutputs {
    params = execution.params(params)
    const cargs = smooth_image_cargs(params, execution)
    const ret = smooth_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SmoothImage allows smoothing of images with adjustable sigma values, offering optional median filtering functionality.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Specifies the dimensionality of the image.
 * @param image_ext The input image file to be smoothed.
 * @param smoothing_sigma The sigma value for smoothing. A separate sigma may be specified for each dimension, e.g., '1.5x1x2'.
 * @param out_image_ext The output smoothed image file.
 * @param sigma_units Determines if sigma is in spacing units (1) or not (0). Default is 0.
 * @param median_filter Whether to use median filter. Default is 0. If using median filter, sigma represents the radius in voxels.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SmoothImageOutputs`).
 */
function smooth_image(
    image_dimension: number,
    image_ext: InputPathType,
    smoothing_sigma: string,
    out_image_ext: string,
    sigma_units: 0 | 1 | null = null,
    median_filter: 0 | 1 | null = null,
    runner: Runner | null = null,
): SmoothImageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SMOOTH_IMAGE_METADATA);
    const params = smooth_image_params(image_dimension, image_ext, smoothing_sigma, out_image_ext, sigma_units, median_filter)
    return smooth_image_execute(params, execution);
}


export {
      SMOOTH_IMAGE_METADATA,
      SmoothImageOutputs,
      SmoothImageParameters,
      smooth_image,
      smooth_image_cargs,
      smooth_image_execute,
      smooth_image_outputs,
      smooth_image_params,
};
