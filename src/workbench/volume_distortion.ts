// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_DISTORTION_METADATA: Metadata = {
    id: "f464c64c99492f4d9a2eb716c6ec4b3129d243aa.boutiques",
    name: "volume-distortion",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeDistortionParameters {
    "__STYXTYPE__": "volume-distortion";
    "warpfield": string;
    "volume_out": string;
    "opt_fnirt_source_volume"?: string | null | undefined;
    "opt_circular": boolean;
    "opt_log2": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-distortion": volume_distortion_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-distortion": volume_distortion_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_distortion(...)`.
 *
 * @interface
 */
interface VolumeDistortionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output distortion measures
     */
    volume_out: OutputPathType;
}


function volume_distortion_params(
    warpfield: string,
    volume_out: string,
    opt_fnirt_source_volume: string | null = null,
    opt_circular: boolean = false,
    opt_log2: boolean = false,
): VolumeDistortionParameters {
    /**
     * Build parameters.
    
     * @param warpfield the warpfield to compute the distortion of
     * @param volume_out the output distortion measures
     * @param opt_fnirt_source_volume MUST be used if using a fnirt warpfield: the source volume used when generating the warpfield
     * @param opt_circular use the circle-based formula for the anisotropic measure
     * @param opt_log2 apply base-2 log transform
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-distortion" as const,
        "warpfield": warpfield,
        "volume_out": volume_out,
        "opt_circular": opt_circular,
        "opt_log2": opt_log2,
    };
    if (opt_fnirt_source_volume !== null) {
        params["opt_fnirt_source_volume"] = opt_fnirt_source_volume;
    }
    return params;
}


function volume_distortion_cargs(
    params: VolumeDistortionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-distortion");
    cargs.push((params["warpfield"] ?? null));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_fnirt_source_volume"] ?? null) !== null) {
        cargs.push(
            "-fnirt",
            (params["opt_fnirt_source_volume"] ?? null)
        );
    }
    if ((params["opt_circular"] ?? null)) {
        cargs.push("-circular");
    }
    if ((params["opt_log2"] ?? null)) {
        cargs.push("-log2");
    }
    return cargs;
}


function volume_distortion_outputs(
    params: VolumeDistortionParameters,
    execution: Execution,
): VolumeDistortionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeDistortionOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_distortion_execute(
    params: VolumeDistortionParameters,
    execution: Execution,
): VolumeDistortionOutputs {
    /**
     * Calculate volume warpfield distortion.
     * 
     * Calculates isotropic and anisotropic distortions in the volume warpfield.  At each voxel, the gradient of the absolute warpfield is computed to obtain the local affine transforms for each voxel (jacobian matrices), and strain tensors are derived from them.  The isotropic component (volumetric expansion ratio) is the product of the three principal strains.  The default measure ('elongation') for the anisotropic component is the largest principal strain divided by the smallest.
     * 
     * The -circular option instead calculates the anisotropic component by transforming the principal strains into log space, considering them as x-values of points on a circle 120 degrees apart, finds the circle's diameter, and transforms that back to a ratio.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeDistortionOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_distortion_cargs(params, execution)
    const ret = volume_distortion_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_distortion(
    warpfield: string,
    volume_out: string,
    opt_fnirt_source_volume: string | null = null,
    opt_circular: boolean = false,
    opt_log2: boolean = false,
    runner: Runner | null = null,
): VolumeDistortionOutputs {
    /**
     * Calculate volume warpfield distortion.
     * 
     * Calculates isotropic and anisotropic distortions in the volume warpfield.  At each voxel, the gradient of the absolute warpfield is computed to obtain the local affine transforms for each voxel (jacobian matrices), and strain tensors are derived from them.  The isotropic component (volumetric expansion ratio) is the product of the three principal strains.  The default measure ('elongation') for the anisotropic component is the largest principal strain divided by the smallest.
     * 
     * The -circular option instead calculates the anisotropic component by transforming the principal strains into log space, considering them as x-values of points on a circle 120 degrees apart, finds the circle's diameter, and transforms that back to a ratio.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param warpfield the warpfield to compute the distortion of
     * @param volume_out the output distortion measures
     * @param opt_fnirt_source_volume MUST be used if using a fnirt warpfield: the source volume used when generating the warpfield
     * @param opt_circular use the circle-based formula for the anisotropic measure
     * @param opt_log2 apply base-2 log transform
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeDistortionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_DISTORTION_METADATA);
    const params = volume_distortion_params(warpfield, volume_out, opt_fnirt_source_volume, opt_circular, opt_log2)
    return volume_distortion_execute(params, execution);
}


export {
      VOLUME_DISTORTION_METADATA,
      VolumeDistortionOutputs,
      VolumeDistortionParameters,
      volume_distortion,
      volume_distortion_params,
};
