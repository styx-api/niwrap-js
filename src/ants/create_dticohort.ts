// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CREATE_DTICOHORT_METADATA: Metadata = {
    id: "392ec59826736bb66886c60168c30dead2affec4.boutiques",
    name: "CreateDTICohort",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface CreateDticohortParameters {
    "@type": "ants.CreateDTICohort";
    "image_dimensionality"?: 2 | 3 | null | undefined;
    "dti_atlas": InputPathType;
    "label_mask_image"?: string | null | undefined;
    "noise_sigma"?: number | null | undefined;
    "pathology"?: string | null | undefined;
    "dwi_parameters": string;
    "registered_population"?: InputPathType | null | undefined;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.CreateDTICohort": create_dticohort_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.CreateDTICohort": create_dticohort_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `create_dticohort(...)`.
 *
 * @interface
 */
interface CreateDticohortOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The directory where the output data will be stored.
     */
    output_directory: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dti_atlas A diffusion tensor atlas image is required input for creating the cohort.
 * @param dwi_parameters This option specifies the parameters of the output diffusion-weighted images, including the directions and b-values. Directions can be specified using a direction file or scheme file.
 * @param output The output consists of a set of diffusion-weighted images for each subject. Control and experimental subject numbers can be specified.
 * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param label_mask_image A mask image can be specified which determines the region(s) to which the simulated pathology operations are applied. If no mask is specified one is created by thresholding the atlas FA map at 0.2 unless a lower threshold is specified.
 * @param noise_sigma This parameter characterizes the Rician noise in the original DWI images. Default value is 18.
 * @param pathology The user can specify the simulated pathology in a given area using a label mask. Pathology is simulated by changing the eigenvalues. One can specify the number of voxels affected in each region or the proportion of voxels affected. Change is specified as a proportion of the current eigenvalues.
 * @param registered_population To introduce inter-subject variability, a registered DTI population to the DTI atlas is required. This is modeled by PCA decomposition.
 *
 * @returns Parameter dictionary
 */
function create_dticohort_params(
    dti_atlas: InputPathType,
    dwi_parameters: string,
    output: string,
    image_dimensionality: 2 | 3 | null = null,
    label_mask_image: string | null = null,
    noise_sigma: number | null = null,
    pathology: string | null = null,
    registered_population: InputPathType | null = null,
): CreateDticohortParameters {
    const params = {
        "@type": "ants.CreateDTICohort" as const,
        "dti_atlas": dti_atlas,
        "dwi_parameters": dwi_parameters,
        "output": output,
    };
    if (image_dimensionality !== null) {
        params["image_dimensionality"] = image_dimensionality;
    }
    if (label_mask_image !== null) {
        params["label_mask_image"] = label_mask_image;
    }
    if (noise_sigma !== null) {
        params["noise_sigma"] = noise_sigma;
    }
    if (pathology !== null) {
        params["pathology"] = pathology;
    }
    if (registered_population !== null) {
        params["registered_population"] = registered_population;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function create_dticohort_cargs(
    params: CreateDticohortParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("CreateDTICohort");
    if ((params["image_dimensionality"] ?? null) !== null) {
        cargs.push(
            "--image-dimensionality",
            String((params["image_dimensionality"] ?? null))
        );
    }
    cargs.push(
        "--dti-atlas",
        execution.inputFile((params["dti_atlas"] ?? null))
    );
    if ((params["label_mask_image"] ?? null) !== null) {
        cargs.push(
            "--label-mask-image",
            (params["label_mask_image"] ?? null)
        );
    }
    if ((params["noise_sigma"] ?? null) !== null) {
        cargs.push(
            "--noise-sigma",
            String((params["noise_sigma"] ?? null))
        );
    }
    if ((params["pathology"] ?? null) !== null) {
        cargs.push(
            "--pathology",
            (params["pathology"] ?? null)
        );
    }
    cargs.push(
        "--dwi-parameters",
        (params["dwi_parameters"] ?? null)
    );
    if ((params["registered_population"] ?? null) !== null) {
        cargs.push(
            "--registered-population",
            execution.inputFile((params["registered_population"] ?? null))
        );
    }
    cargs.push(
        "--output",
        (params["output"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function create_dticohort_outputs(
    params: CreateDticohortParameters,
    execution: Execution,
): CreateDticohortOutputs {
    const ret: CreateDticohortOutputs = {
        root: execution.outputFile("."),
        output_directory: execution.outputFile(["[OUTPUT_DIRECTORY]"].join('')),
    };
    return ret;
}


/**
 * CreateDTICohort
 *
 * CreateDTICohort implements the work of Van Hecke et al. to create simulated DTI data sets. The only difference is that all registrations (both for the input population and for the output population) are assumed to take place outside of this program.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CreateDticohortOutputs`).
 */
function create_dticohort_execute(
    params: CreateDticohortParameters,
    runner: Runner | null = null,
): CreateDticohortOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CREATE_DTICOHORT_METADATA);
    params = execution.params(params)
    const cargs = create_dticohort_cargs(params, execution)
    const ret = create_dticohort_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * CreateDTICohort
 *
 * CreateDTICohort implements the work of Van Hecke et al. to create simulated DTI data sets. The only difference is that all registrations (both for the input population and for the output population) are assumed to take place outside of this program.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param dti_atlas A diffusion tensor atlas image is required input for creating the cohort.
 * @param dwi_parameters This option specifies the parameters of the output diffusion-weighted images, including the directions and b-values. Directions can be specified using a direction file or scheme file.
 * @param output The output consists of a set of diffusion-weighted images for each subject. Control and experimental subject numbers can be specified.
 * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param label_mask_image A mask image can be specified which determines the region(s) to which the simulated pathology operations are applied. If no mask is specified one is created by thresholding the atlas FA map at 0.2 unless a lower threshold is specified.
 * @param noise_sigma This parameter characterizes the Rician noise in the original DWI images. Default value is 18.
 * @param pathology The user can specify the simulated pathology in a given area using a label mask. Pathology is simulated by changing the eigenvalues. One can specify the number of voxels affected in each region or the proportion of voxels affected. Change is specified as a proportion of the current eigenvalues.
 * @param registered_population To introduce inter-subject variability, a registered DTI population to the DTI atlas is required. This is modeled by PCA decomposition.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CreateDticohortOutputs`).
 */
function create_dticohort(
    dti_atlas: InputPathType,
    dwi_parameters: string,
    output: string,
    image_dimensionality: 2 | 3 | null = null,
    label_mask_image: string | null = null,
    noise_sigma: number | null = null,
    pathology: string | null = null,
    registered_population: InputPathType | null = null,
    runner: Runner | null = null,
): CreateDticohortOutputs {
    const params = create_dticohort_params(dti_atlas, dwi_parameters, output, image_dimensionality, label_mask_image, noise_sigma, pathology, registered_population)
    return create_dticohort_execute(params, runner);
}


export {
      CREATE_DTICOHORT_METADATA,
      CreateDticohortOutputs,
      CreateDticohortParameters,
      create_dticohort,
      create_dticohort_execute,
      create_dticohort_params,
};
