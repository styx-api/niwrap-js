// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_TORT_PLOT_DP_ALIGN_METADATA: Metadata = {
    id: "476f4d1a86214009b6eb0878d5070c11cd6a6a27.boutiques",
    name: "adjunct_tort_plot_dp_align",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctTortPlotDpAlignParameters {
    "__STYXTYPE__": "adjunct_tort_plot_dp_align";
    "input_file": InputPathType;
    "output_prefix": string;
    "enorm_max"?: number | null | undefined;
    "enorm_hline"?: number | null | undefined;
    "no_svg": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "adjunct_tort_plot_dp_align": adjunct_tort_plot_dp_align_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "adjunct_tort_plot_dp_align": adjunct_tort_plot_dp_align_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_tort_plot_dp_align(...)`.
 *
 * @interface
 */
interface AdjunctTortPlotDpAlignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file containing 6 columns of data for the rigid-body alignment parameters estimated by DIFFPREP.
     */
    align_params: OutputPathType;
    /**
     * Text file with 1 column of data, the Euclidean norm of the differences of the rigid body alignment parameters.
     */
    enorm_file: OutputPathType;
    /**
     * A plot of enorm and the alignment parameters in JPG format.
     */
    plot_jpg: OutputPathType;
    /**
     * A plot of enorm and the alignment parameters in SVG format.
     */
    plot_svg: OutputPathType;
}


function adjunct_tort_plot_dp_align_params(
    input_file: InputPathType,
    output_prefix: string,
    enorm_max: number | null = null,
    enorm_hline: number | null = null,
    no_svg: boolean = false,
): AdjunctTortPlotDpAlignParameters {
    /**
     * Build parameters.
    
     * @param input_file Name of DIFFPREP-produced file to parse, probably ending in '_transformations.txt'.
     * @param output_prefix Base of output files; can contain path information. Should *not* include any extension.
     * @param enorm_max Specify max value of y-axis of enorm plot in SVG image. Useful for having a constant value across a study.
     * @param enorm_hline Specify value of a horizontal, dotted, bright cyan line for the enorm plot in SVG image. Can help with visualization.
     * @param no_svg Opt to turn off even checking to plot an SVG version of the figure.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "adjunct_tort_plot_dp_align" as const,
        "input_file": input_file,
        "output_prefix": output_prefix,
        "no_svg": no_svg,
    };
    if (enorm_max !== null) {
        params["enorm_max"] = enorm_max;
    }
    if (enorm_hline !== null) {
        params["enorm_hline"] = enorm_hline;
    }
    return params;
}


function adjunct_tort_plot_dp_align_cargs(
    params: AdjunctTortPlotDpAlignParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("adjunct_tort_plot_dp_align");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["enorm_max"] ?? null) !== null) {
        cargs.push(
            "-enorm_max",
            String((params["enorm_max"] ?? null))
        );
    }
    if ((params["enorm_hline"] ?? null) !== null) {
        cargs.push(
            "-enorm_hline",
            String((params["enorm_hline"] ?? null))
        );
    }
    if ((params["no_svg"] ?? null)) {
        cargs.push("-no_svg");
    }
    return cargs;
}


function adjunct_tort_plot_dp_align_outputs(
    params: AdjunctTortPlotDpAlignParameters,
    execution: Execution,
): AdjunctTortPlotDpAlignOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AdjunctTortPlotDpAlignOutputs = {
        root: execution.outputFile("."),
        align_params: execution.outputFile([(params["output_prefix"] ?? null), "_align.1D"].join('')),
        enorm_file: execution.outputFile([(params["output_prefix"] ?? null), "_enorm.1D"].join('')),
        plot_jpg: execution.outputFile([(params["output_prefix"] ?? null), ".jpg"].join('')),
        plot_svg: execution.outputFile([(params["output_prefix"] ?? null), ".svg"].join('')),
    };
    return ret;
}


function adjunct_tort_plot_dp_align_execute(
    params: AdjunctTortPlotDpAlignParameters,
    execution: Execution,
): AdjunctTortPlotDpAlignOutputs {
    /**
     * Tool to display the rigid-body alignment parameters from TORTOISE's DIFFPREP, useful for analyzing subject motion in DWI data.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AdjunctTortPlotDpAlignOutputs`).
     */
    params = execution.params(params)
    const cargs = adjunct_tort_plot_dp_align_cargs(params, execution)
    const ret = adjunct_tort_plot_dp_align_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function adjunct_tort_plot_dp_align(
    input_file: InputPathType,
    output_prefix: string,
    enorm_max: number | null = null,
    enorm_hline: number | null = null,
    no_svg: boolean = false,
    runner: Runner | null = null,
): AdjunctTortPlotDpAlignOutputs {
    /**
     * Tool to display the rigid-body alignment parameters from TORTOISE's DIFFPREP, useful for analyzing subject motion in DWI data.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Name of DIFFPREP-produced file to parse, probably ending in '_transformations.txt'.
     * @param output_prefix Base of output files; can contain path information. Should *not* include any extension.
     * @param enorm_max Specify max value of y-axis of enorm plot in SVG image. Useful for having a constant value across a study.
     * @param enorm_hline Specify value of a horizontal, dotted, bright cyan line for the enorm plot in SVG image. Can help with visualization.
     * @param no_svg Opt to turn off even checking to plot an SVG version of the figure.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AdjunctTortPlotDpAlignOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_TORT_PLOT_DP_ALIGN_METADATA);
    const params = adjunct_tort_plot_dp_align_params(input_file, output_prefix, enorm_max, enorm_hline, no_svg)
    return adjunct_tort_plot_dp_align_execute(params, execution);
}


export {
      ADJUNCT_TORT_PLOT_DP_ALIGN_METADATA,
      AdjunctTortPlotDpAlignOutputs,
      AdjunctTortPlotDpAlignParameters,
      adjunct_tort_plot_dp_align,
      adjunct_tort_plot_dp_align_params,
};
