// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMLN_METADATA: Metadata = {
    id: "8b01d07542dbd623ad758acd765f26736fdf23cd.boutiques",
    name: "imln",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ImlnParameters {
    "@type": "fsl.imln";
    "input_file": InputPathType;
    "link_name": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.imln": imln_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.imln": imln_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imln(...)`.
 *
 * @interface
 */
interface ImlnOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The created link to the input file
     */
    output_link: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file The source file (file1) to create a link to
 * @param link_name The name for the link (file2)
 *
 * @returns Parameter dictionary
 */
function imln_params(
    input_file: InputPathType,
    link_name: string,
): ImlnParameters {
    const params = {
        "@type": "fsl.imln" as const,
        "input_file": input_file,
        "link_name": link_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imln_cargs(
    params: ImlnParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imln");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["link_name"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imln_outputs(
    params: ImlnParameters,
    execution: Execution,
): ImlnOutputs {
    const ret: ImlnOutputs = {
        root: execution.outputFile("."),
        output_link: execution.outputFile([(params["link_name"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Creates a link (called file2) to file1.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImlnOutputs`).
 */
function imln_execute(
    params: ImlnParameters,
    runner: Runner | null = null,
): ImlnOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMLN_METADATA);
    params = execution.params(params)
    const cargs = imln_cargs(params, execution)
    const ret = imln_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Creates a link (called file2) to file1.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file The source file (file1) to create a link to
 * @param link_name The name for the link (file2)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImlnOutputs`).
 */
function imln(
    input_file: InputPathType,
    link_name: string,
    runner: Runner | null = null,
): ImlnOutputs {
    const params = imln_params(input_file, link_name)
    return imln_execute(params, runner);
}


export {
      IMLN_METADATA,
      ImlnOutputs,
      ImlnParameters,
      imln,
      imln_execute,
      imln_params,
};
