// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_CLUST_METADATA: Metadata = {
    id: "7db6f82a57760f7846747e87ee25e2273bf54f9f.boutiques",
    name: "SurfClust",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfClustParameters {
    "__STYXTYPE__": "SurfClust";
    "specfile"?: InputPathType | null | undefined;
    "input_surface"?: string | null | undefined;
    "input_surf_name"?: InputPathType | null | undefined;
    "input_dataset": Array<InputPathType>;
    "rmm": number;
    "amm2"?: number | null | undefined;
    "min_nodes"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "out_clusterdset": boolean;
    "out_roidset": boolean;
    "out_fulllist": boolean;
    "sort_none": boolean;
    "sort_n_nodes": boolean;
    "sort_area": boolean;
    "thresh_col"?: number | null | undefined;
    "thresh"?: number | null | undefined;
    "athresh"?: number | null | undefined;
    "ir_range"?: Array<number> | null | undefined;
    "ex_range"?: Array<number> | null | undefined;
    "prepend_node_index": boolean;
    "update"?: number | null | undefined;
    "no_cent": boolean;
    "cent": boolean;
    "novolreg": boolean;
    "noxform": boolean;
    "set_env"?: string | null | undefined;
    "trace": boolean;
    "trace_extreme": boolean;
    "no_memory_trace": boolean;
    "yes_memory_trace": boolean;
    "mini_help": boolean;
    "help": boolean;
    "extreme_help": boolean;
    "view_help": boolean;
    "web_help": boolean;
    "find_help"?: string | null | undefined;
    "raw_help": boolean;
    "spx_help": boolean;
    "aspx_help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "SurfClust": surf_clust_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "SurfClust": surf_clust_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_clust(...)`.
 *
 * @interface
 */
interface SurfClustOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Cluster table output
     */
    cluster_table: OutputPathType | null;
    /**
     * Clustered version of input dataset
     */
    clustered_dataset: OutputPathType | null;
    /**
     * ROI dataset with rank of clusters
     */
    roi_dataset: OutputPathType | null;
}


function surf_clust_params(
    input_dataset: Array<InputPathType>,
    rmm: number,
    specfile: InputPathType | null = null,
    input_surface: string | null = null,
    input_surf_name: InputPathType | null = null,
    amm2: number | null = null,
    min_nodes: number | null = null,
    prefix: string | null = null,
    out_clusterdset: boolean = false,
    out_roidset: boolean = false,
    out_fulllist: boolean = false,
    sort_none: boolean = false,
    sort_n_nodes: boolean = false,
    sort_area: boolean = false,
    thresh_col: number | null = null,
    thresh: number | null = null,
    athresh: number | null = null,
    ir_range: Array<number> | null = null,
    ex_range: Array<number> | null = null,
    prepend_node_index: boolean = false,
    update: number | null = null,
    no_cent: boolean = false,
    cent: boolean = false,
    novolreg: boolean = false,
    noxform: boolean = false,
    set_env: string | null = null,
    trace: boolean = false,
    trace_extreme: boolean = false,
    no_memory_trace: boolean = false,
    yes_memory_trace: boolean = false,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    view_help: boolean = false,
    web_help: boolean = false,
    find_help: string | null = null,
    raw_help: boolean = false,
    spx_help: boolean = false,
    aspx_help: boolean = false,
): SurfClustParameters {
    /**
     * Build parameters.
    
     * @param input_dataset The input dataset and the index of the datacolumn to use (index 0 for 1st column). Values of 0 indicate inactive nodes.
     * @param rmm Maximum distance between an activated node and the cluster to which it belongs.
     * @param specfile The surface spec file
     * @param input_surface The input surface name
     * @param input_surf_name Full name of the input surface
     * @param amm2 Minimum area for clusters
     * @param min_nodes Minimum nodes for clusters
     * @param prefix Prefix for output. Default is the prefix of the input dataset.
     * @param out_clusterdset Output a clustered version of input dataset
     * @param out_roidset Output an ROI dataset with the rank of its cluster
     * @param out_fulllist Output a value for all nodes of input surface
     * @param sort_none No sorting of ROI clusters
     * @param sort_n_nodes Sorting based on number of nodes in cluster
     * @param sort_area Sorting based on area of clusters (default)
     * @param thresh_col Index of thresholding column. Default is column 0.
     * @param thresh Apply thresholding prior to clustering.
     * @param athresh Apply absolute thresholding prior to clustering
     * @param ir_range Apply thresholding in range. A node n is considered if thresh_col[n] >= R0 && thresh_col[n] <= R1
     * @param ex_range Apply thresholding outside of range. A node n is considered if thresh_col[n] < R0 || thresh_col[n] > R1
     * @param prepend_node_index Force the output dataset to have node indices in column 0 of output.
     * @param update Pacify me when perc of the data have been processed. perc is between 1% and 50%. Default is no update.
     * @param no_cent Do not find the central nodes
     * @param cent Do find the central nodes (default)
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
     * @param noxform Same as -novolreg
     * @param set_env Set environment variable ENVname to be ENVvalue. Quotes are necessary.
     * @param trace Turns on In/Out debug and Memory tracing.
     * @param trace_extreme Turns on extreme tracing.
     * @param no_memory_trace Turn off memory tracing.
     * @param yes_memory_trace Turn on memory tracing (default).
     * @param mini_help Mini help, same as -help in many cases.
     * @param help The entire help output.
     * @param extreme_help Extreme help, same as -help in majority of cases.
     * @param view_help Open help in text editor. AFNI will try to find a GUI editor on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
     * @param web_help Open help in web browser. AFNI will try to find a browser. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
     * @param find_help Look for lines in this program's -help output that match (approximately) the given word.
     * @param raw_help Help string unedited.
     * @param spx_help Help string in sphinx format, but do not try to autoformat.
     * @param aspx_help Help string in sphinx format with autoformatting of options.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "SurfClust" as const,
        "input_dataset": input_dataset,
        "rmm": rmm,
        "out_clusterdset": out_clusterdset,
        "out_roidset": out_roidset,
        "out_fulllist": out_fulllist,
        "sort_none": sort_none,
        "sort_n_nodes": sort_n_nodes,
        "sort_area": sort_area,
        "prepend_node_index": prepend_node_index,
        "no_cent": no_cent,
        "cent": cent,
        "novolreg": novolreg,
        "noxform": noxform,
        "trace": trace,
        "trace_extreme": trace_extreme,
        "no_memory_trace": no_memory_trace,
        "yes_memory_trace": yes_memory_trace,
        "mini_help": mini_help,
        "help": help,
        "extreme_help": extreme_help,
        "view_help": view_help,
        "web_help": web_help,
        "raw_help": raw_help,
        "spx_help": spx_help,
        "aspx_help": aspx_help,
    };
    if (specfile !== null) {
        params["specfile"] = specfile;
    }
    if (input_surface !== null) {
        params["input_surface"] = input_surface;
    }
    if (input_surf_name !== null) {
        params["input_surf_name"] = input_surf_name;
    }
    if (amm2 !== null) {
        params["amm2"] = amm2;
    }
    if (min_nodes !== null) {
        params["min_nodes"] = min_nodes;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (thresh_col !== null) {
        params["thresh_col"] = thresh_col;
    }
    if (thresh !== null) {
        params["thresh"] = thresh;
    }
    if (athresh !== null) {
        params["athresh"] = athresh;
    }
    if (ir_range !== null) {
        params["ir_range"] = ir_range;
    }
    if (ex_range !== null) {
        params["ex_range"] = ex_range;
    }
    if (update !== null) {
        params["update"] = update;
    }
    if (set_env !== null) {
        params["set_env"] = set_env;
    }
    if (find_help !== null) {
        params["find_help"] = find_help;
    }
    return params;
}


function surf_clust_cargs(
    params: SurfClustParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("SurfClust");
    if ((params["specfile"] ?? null) !== null) {
        cargs.push(
            "-spec",
            execution.inputFile((params["specfile"] ?? null))
        );
    }
    if ((params["input_surface"] ?? null) !== null) {
        cargs.push(
            "-surf_A",
            (params["input_surface"] ?? null)
        );
    }
    if ((params["input_surf_name"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["input_surf_name"] ?? null))
        );
    }
    cargs.push(
        "-input",
        ...(params["input_dataset"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-rmm",
        String((params["rmm"] ?? null))
    );
    if ((params["amm2"] ?? null) !== null) {
        cargs.push(
            "-amm2",
            String((params["amm2"] ?? null))
        );
    }
    if ((params["min_nodes"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["min_nodes"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["out_clusterdset"] ?? null)) {
        cargs.push("-out_clusterdset");
    }
    if ((params["out_roidset"] ?? null)) {
        cargs.push("-out_roidset");
    }
    if ((params["out_fulllist"] ?? null)) {
        cargs.push("-out_fulllist");
    }
    if ((params["sort_none"] ?? null)) {
        cargs.push("-sort_none");
    }
    if ((params["sort_n_nodes"] ?? null)) {
        cargs.push("-sort_n_nodes");
    }
    if ((params["sort_area"] ?? null)) {
        cargs.push("-sort_area");
    }
    if ((params["thresh_col"] ?? null) !== null) {
        cargs.push(
            "-thresh_col",
            String((params["thresh_col"] ?? null))
        );
    }
    if ((params["thresh"] ?? null) !== null) {
        cargs.push(
            "-thresh",
            String((params["thresh"] ?? null))
        );
    }
    if ((params["athresh"] ?? null) !== null) {
        cargs.push(
            "-athresh",
            String((params["athresh"] ?? null))
        );
    }
    if ((params["ir_range"] ?? null) !== null) {
        cargs.push(
            "-ir_range",
            ...(params["ir_range"] ?? null).map(String)
        );
    }
    if ((params["ex_range"] ?? null) !== null) {
        cargs.push(
            "-ex_range",
            ...(params["ex_range"] ?? null).map(String)
        );
    }
    if ((params["prepend_node_index"] ?? null)) {
        cargs.push("-prepend_node_index");
    }
    if ((params["update"] ?? null) !== null) {
        cargs.push(
            "-update",
            String((params["update"] ?? null))
        );
    }
    if ((params["no_cent"] ?? null)) {
        cargs.push("-no_cent");
    }
    if ((params["cent"] ?? null)) {
        cargs.push("-cent");
    }
    if ((params["novolreg"] ?? null)) {
        cargs.push("-novolreg");
    }
    if ((params["noxform"] ?? null)) {
        cargs.push("-noxform");
    }
    if ((params["set_env"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["set_env"] ?? null)
        );
    }
    if ((params["trace"] ?? null)) {
        cargs.push("-trace");
    }
    if ((params["trace_extreme"] ?? null)) {
        cargs.push("-TRACE");
    }
    if ((params["no_memory_trace"] ?? null)) {
        cargs.push("-nomall");
    }
    if ((params["yes_memory_trace"] ?? null)) {
        cargs.push("-yesmall");
    }
    if ((params["mini_help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["extreme_help"] ?? null)) {
        cargs.push("-HELP");
    }
    if ((params["view_help"] ?? null)) {
        cargs.push("-h_view");
    }
    if ((params["web_help"] ?? null)) {
        cargs.push("-h_web");
    }
    if ((params["find_help"] ?? null) !== null) {
        cargs.push(
            "-h_find",
            (params["find_help"] ?? null)
        );
    }
    if ((params["raw_help"] ?? null)) {
        cargs.push("-h_raw");
    }
    if ((params["spx_help"] ?? null)) {
        cargs.push("-h_spx");
    }
    if ((params["aspx_help"] ?? null)) {
        cargs.push("-h_aspx");
    }
    return cargs;
}


function surf_clust_outputs(
    params: SurfClustParameters,
    execution: Execution,
): SurfClustOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfClustOutputs = {
        root: execution.outputFile("."),
        cluster_table: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_ClstTable_rXX_aXX.1D"].join('')) : null,
        clustered_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_Clustered_rXX_aXX.dset"].join('')) : null,
        roi_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_ClstMsk_rXX_aXX.dset"].join('')) : null,
    };
    return ret;
}


function surf_clust_execute(
    params: SurfClustParameters,
    execution: Execution,
): SurfClustOutputs {
    /**
     * A program to perform clustering analysis surfaces.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfClustOutputs`).
     */
    params = execution.params(params)
    const cargs = surf_clust_cargs(params, execution)
    const ret = surf_clust_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surf_clust(
    input_dataset: Array<InputPathType>,
    rmm: number,
    specfile: InputPathType | null = null,
    input_surface: string | null = null,
    input_surf_name: InputPathType | null = null,
    amm2: number | null = null,
    min_nodes: number | null = null,
    prefix: string | null = null,
    out_clusterdset: boolean = false,
    out_roidset: boolean = false,
    out_fulllist: boolean = false,
    sort_none: boolean = false,
    sort_n_nodes: boolean = false,
    sort_area: boolean = false,
    thresh_col: number | null = null,
    thresh: number | null = null,
    athresh: number | null = null,
    ir_range: Array<number> | null = null,
    ex_range: Array<number> | null = null,
    prepend_node_index: boolean = false,
    update: number | null = null,
    no_cent: boolean = false,
    cent: boolean = false,
    novolreg: boolean = false,
    noxform: boolean = false,
    set_env: string | null = null,
    trace: boolean = false,
    trace_extreme: boolean = false,
    no_memory_trace: boolean = false,
    yes_memory_trace: boolean = false,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    view_help: boolean = false,
    web_help: boolean = false,
    find_help: string | null = null,
    raw_help: boolean = false,
    spx_help: boolean = false,
    aspx_help: boolean = false,
    runner: Runner | null = null,
): SurfClustOutputs {
    /**
     * A program to perform clustering analysis surfaces.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset The input dataset and the index of the datacolumn to use (index 0 for 1st column). Values of 0 indicate inactive nodes.
     * @param rmm Maximum distance between an activated node and the cluster to which it belongs.
     * @param specfile The surface spec file
     * @param input_surface The input surface name
     * @param input_surf_name Full name of the input surface
     * @param amm2 Minimum area for clusters
     * @param min_nodes Minimum nodes for clusters
     * @param prefix Prefix for output. Default is the prefix of the input dataset.
     * @param out_clusterdset Output a clustered version of input dataset
     * @param out_roidset Output an ROI dataset with the rank of its cluster
     * @param out_fulllist Output a value for all nodes of input surface
     * @param sort_none No sorting of ROI clusters
     * @param sort_n_nodes Sorting based on number of nodes in cluster
     * @param sort_area Sorting based on area of clusters (default)
     * @param thresh_col Index of thresholding column. Default is column 0.
     * @param thresh Apply thresholding prior to clustering.
     * @param athresh Apply absolute thresholding prior to clustering
     * @param ir_range Apply thresholding in range. A node n is considered if thresh_col[n] >= R0 && thresh_col[n] <= R1
     * @param ex_range Apply thresholding outside of range. A node n is considered if thresh_col[n] < R0 || thresh_col[n] > R1
     * @param prepend_node_index Force the output dataset to have node indices in column 0 of output.
     * @param update Pacify me when perc of the data have been processed. perc is between 1% and 50%. Default is no update.
     * @param no_cent Do not find the central nodes
     * @param cent Do find the central nodes (default)
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations present in the Surface Volume.
     * @param noxform Same as -novolreg
     * @param set_env Set environment variable ENVname to be ENVvalue. Quotes are necessary.
     * @param trace Turns on In/Out debug and Memory tracing.
     * @param trace_extreme Turns on extreme tracing.
     * @param no_memory_trace Turn off memory tracing.
     * @param yes_memory_trace Turn on memory tracing (default).
     * @param mini_help Mini help, same as -help in many cases.
     * @param help The entire help output.
     * @param extreme_help Extreme help, same as -help in majority of cases.
     * @param view_help Open help in text editor. AFNI will try to find a GUI editor on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
     * @param web_help Open help in web browser. AFNI will try to find a browser. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
     * @param find_help Look for lines in this program's -help output that match (approximately) the given word.
     * @param raw_help Help string unedited.
     * @param spx_help Help string in sphinx format, but do not try to autoformat.
     * @param aspx_help Help string in sphinx format with autoformatting of options.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfClustOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_CLUST_METADATA);
    const params = surf_clust_params(input_dataset, rmm, specfile, input_surface, input_surf_name, amm2, min_nodes, prefix, out_clusterdset, out_roidset, out_fulllist, sort_none, sort_n_nodes, sort_area, thresh_col, thresh, athresh, ir_range, ex_range, prepend_node_index, update, no_cent, cent, novolreg, noxform, set_env, trace, trace_extreme, no_memory_trace, yes_memory_trace, mini_help, help, extreme_help, view_help, web_help, find_help, raw_help, spx_help, aspx_help)
    return surf_clust_execute(params, execution);
}


export {
      SURF_CLUST_METADATA,
      SurfClustOutputs,
      SurfClustParameters,
      surf_clust,
      surf_clust_params,
};
