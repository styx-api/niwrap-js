// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XHEMI_TAL_METADATA: Metadata = {
    id: "75297464bbd5b47449915f4f1464c80da7860766.boutiques",
    name: "xhemi-tal",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface XhemiTalParameters {
    "@type": "freesurfer.xhemi-tal";
    "subject": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.xhemi-tal": xhemi_tal_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `xhemi_tal(...)`.
 *
 * @interface
 */
interface XhemiTalOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject for which to compute the talairach.xfm
 *
 * @returns Parameter dictionary
 */
function xhemi_tal_params(
    subject: string,
): XhemiTalParameters {
    const params = {
        "@type": "freesurfer.xhemi-tal" as const,
        "subject": subject,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function xhemi_tal_cargs(
    params: XhemiTalParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("xhemi-tal");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function xhemi_tal_outputs(
    params: XhemiTalParameters,
    execution: Execution,
): XhemiTalOutputs {
    const ret: XhemiTalOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Computes the talairach.xfm for xhemi based on the original (unflipped) talairach.xfm.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `XhemiTalOutputs`).
 */
function xhemi_tal_execute(
    params: XhemiTalParameters,
    execution: Execution,
): XhemiTalOutputs {
    params = execution.params(params)
    const cargs = xhemi_tal_cargs(params, execution)
    const ret = xhemi_tal_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes the talairach.xfm for xhemi based on the original (unflipped) talairach.xfm.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject for which to compute the talairach.xfm
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XhemiTalOutputs`).
 */
function xhemi_tal(
    subject: string,
    runner: Runner | null = null,
): XhemiTalOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XHEMI_TAL_METADATA);
    const params = xhemi_tal_params(subject)
    return xhemi_tal_execute(params, execution);
}


export {
      XHEMI_TAL_METADATA,
      XhemiTalOutputs,
      XhemiTalParameters,
      xhemi_tal,
      xhemi_tal_cargs,
      xhemi_tal_execute,
      xhemi_tal_outputs,
      xhemi_tal_params,
};
