// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLPSPEC_METADATA: Metadata = {
    id: "b2e748aa04cc04f9115ff307e1950503455d4af2.boutiques",
    name: "fslpspec",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslpspecParameters {
    "@type": "fsl.fslpspec";
    "infile": InputPathType;
    "outfile"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslpspec": fslpspec_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslpspec": fslpspec_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslpspec(...)`.
 *
 * @interface
 */
interface FslpspecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output power spectrum image
     */
    output_pspec: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infile Input 4D fMRI time series image (e.g. fMRI_data.nii.gz)
 * @param outfile Output power spectrum image (e.g. pspec_data.nii.gz)
 *
 * @returns Parameter dictionary
 */
function fslpspec_params(
    infile: InputPathType,
    outfile: string | null = null,
): FslpspecParameters {
    const params = {
        "@type": "fsl.fslpspec" as const,
        "infile": infile,
    };
    if (outfile !== null) {
        params["outfile"] = outfile;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslpspec_cargs(
    params: FslpspecParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslpspec");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    if ((params["outfile"] ?? null) !== null) {
        cargs.push((params["outfile"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslpspec_outputs(
    params: FslpspecParameters,
    execution: Execution,
): FslpspecOutputs {
    const ret: FslpspecOutputs = {
        root: execution.outputFile("."),
        output_pspec: ((params["outfile"] ?? null) !== null) ? execution.outputFile([(params["outfile"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fslpspec
 *
 * Estimate the power spectrum of 4D fMRI time series data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslpspecOutputs`).
 */
function fslpspec_execute(
    params: FslpspecParameters,
    runner: Runner | null = null,
): FslpspecOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLPSPEC_METADATA);
    params = execution.params(params)
    const cargs = fslpspec_cargs(params, execution)
    const ret = fslpspec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fslpspec
 *
 * Estimate the power spectrum of 4D fMRI time series data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param infile Input 4D fMRI time series image (e.g. fMRI_data.nii.gz)
 * @param outfile Output power spectrum image (e.g. pspec_data.nii.gz)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslpspecOutputs`).
 */
function fslpspec(
    infile: InputPathType,
    outfile: string | null = null,
    runner: Runner | null = null,
): FslpspecOutputs {
    const params = fslpspec_params(infile, outfile)
    return fslpspec_execute(params, runner);
}


export {
      FSLPSPEC_METADATA,
      FslpspecOutputs,
      FslpspecParameters,
      fslpspec,
      fslpspec_execute,
      fslpspec_params,
};
