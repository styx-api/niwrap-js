// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const QUICK_ALPHA_VALS_PY_METADATA: Metadata = {
    id: "43400d28d72275606480ec0f8739d52a9c960123.boutiques",
    name: "quick.alpha.vals.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface QuickAlphaValsPyParameters {
    "__STYXTYPE__": "quick.alpha.vals.py";
    "niter"?: number | null | undefined;
    "max_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "quick.alpha.vals.py": quick_alpha_vals_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "quick.alpha.vals.py": quick_alpha_vals_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `quick_alpha_vals_py(...)`.
 *
 * @interface
 */
interface QuickAlphaValsPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated alpha table file
     */
    alpha_table: OutputPathType;
}


function quick_alpha_vals_py_params(
    max_file: InputPathType,
    niter: number | null = null,
): QuickAlphaValsPyParameters {
    /**
     * Build parameters.
    
     * @param max_file File containing maximum z values
     * @param niter Number of iterations that should be in the z file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "quick.alpha.vals.py" as const,
        "max_file": max_file,
    };
    if (niter !== null) {
        params["niter"] = niter;
    }
    return params;
}


function quick_alpha_vals_py_cargs(
    params: QuickAlphaValsPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("quick.alpha.vals.py");
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["niter"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["max_file"] ?? null)));
    return cargs;
}


function quick_alpha_vals_py_outputs(
    params: QuickAlphaValsPyParameters,
    execution: Execution,
): QuickAlphaValsPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: QuickAlphaValsPyOutputs = {
        root: execution.outputFile("."),
        alpha_table: execution.outputFile(["alpha_table.txt"].join('')),
    };
    return ret;
}


function quick_alpha_vals_py_execute(
    params: QuickAlphaValsPyParameters,
    execution: Execution,
): QuickAlphaValsPyOutputs {
    /**
     * Generate an alpha table from slow_surf_clustsim.py results.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `QuickAlphaValsPyOutputs`).
     */
    params = execution.params(params)
    const cargs = quick_alpha_vals_py_cargs(params, execution)
    const ret = quick_alpha_vals_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function quick_alpha_vals_py(
    max_file: InputPathType,
    niter: number | null = null,
    runner: Runner | null = null,
): QuickAlphaValsPyOutputs {
    /**
     * Generate an alpha table from slow_surf_clustsim.py results.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param max_file File containing maximum z values
     * @param niter Number of iterations that should be in the z file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `QuickAlphaValsPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(QUICK_ALPHA_VALS_PY_METADATA);
    const params = quick_alpha_vals_py_params(max_file, niter)
    return quick_alpha_vals_py_execute(params, execution);
}


export {
      QUICK_ALPHA_VALS_PY_METADATA,
      QuickAlphaValsPyOutputs,
      QuickAlphaValsPyParameters,
      quick_alpha_vals_py,
      quick_alpha_vals_py_params,
};
