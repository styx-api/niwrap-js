// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_SIMPLIFY_COST_METADATA: Metadata = {
    id: "0291c293f6b2eaf6626f15fdc0c7c7079ef500e7.boutiques",
    name: "adjunct_simplify_cost",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctSimplifyCostParameters {
    "__STYXTYPE__": "adjunct_simplify_cost";
    "cost_function": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "adjunct_simplify_cost": adjunct_simplify_cost_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_simplify_cost(...)`.
 *
 * @interface
 */
interface AdjunctSimplifyCostOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function adjunct_simplify_cost_params(
    cost_function: string,
): AdjunctSimplifyCostParameters {
    /**
     * Build parameters.
    
     * @param cost_function The cost function name to be simplified.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "adjunct_simplify_cost" as const,
        "cost_function": cost_function,
    };
    return params;
}


function adjunct_simplify_cost_cargs(
    params: AdjunctSimplifyCostParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("adjunct_simplify_cost.py");
    cargs.push((params["cost_function"] ?? null));
    return cargs;
}


function adjunct_simplify_cost_outputs(
    params: AdjunctSimplifyCostParameters,
    execution: Execution,
): AdjunctSimplifyCostOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AdjunctSimplifyCostOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function adjunct_simplify_cost_execute(
    params: AdjunctSimplifyCostParameters,
    execution: Execution,
): AdjunctSimplifyCostOutputs {
    /**
     * Simplifies a cost function name by removing the '+' and anything following it.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AdjunctSimplifyCostOutputs`).
     */
    params = execution.params(params)
    const cargs = adjunct_simplify_cost_cargs(params, execution)
    const ret = adjunct_simplify_cost_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function adjunct_simplify_cost(
    cost_function: string,
    runner: Runner | null = null,
): AdjunctSimplifyCostOutputs {
    /**
     * Simplifies a cost function name by removing the '+' and anything following it.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param cost_function The cost function name to be simplified.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AdjunctSimplifyCostOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_SIMPLIFY_COST_METADATA);
    const params = adjunct_simplify_cost_params(cost_function)
    return adjunct_simplify_cost_execute(params, execution);
}


export {
      ADJUNCT_SIMPLIFY_COST_METADATA,
      AdjunctSimplifyCostOutputs,
      AdjunctSimplifyCostParameters,
      adjunct_simplify_cost,
      adjunct_simplify_cost_params,
};
