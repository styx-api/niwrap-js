// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IFH2HDR_METADATA: Metadata = {
    id: "e59ad437a43879fdeda8a194eb2d5e26f853b35c.boutiques",
    name: "ifh2hdr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Ifh2hdrParameters {
    "@type": "freesurfer.ifh2hdr";
    "input_file": InputPathType;
    "range"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.ifh2hdr": ifh2hdr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ifh2hdr(...)`.
 *
 * @interface
 */
interface Ifh2hdrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input 4dfp file
 * @param range Set range for the 4dfp file. Format: <float>[to<float>].
 *
 * @returns Parameter dictionary
 */
function ifh2hdr_params(
    input_file: InputPathType,
    range: string | null = null,
): Ifh2hdrParameters {
    const params = {
        "@type": "freesurfer.ifh2hdr" as const,
        "input_file": input_file,
    };
    if (range !== null) {
        params["range"] = range;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ifh2hdr_cargs(
    params: Ifh2hdrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ifh2hdr");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["range"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["range"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ifh2hdr_outputs(
    params: Ifh2hdrParameters,
    execution: Execution,
): Ifh2hdrOutputs {
    const ret: Ifh2hdrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * ifh2hdr
 *
 * Tool for converting IFH (Interfile Header) to HDR (Header) format in 4dfp (Four-Dimensional Functional Image) file format.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Ifh2hdrOutputs`).
 */
function ifh2hdr_execute(
    params: Ifh2hdrParameters,
    runner: Runner | null = null,
): Ifh2hdrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IFH2HDR_METADATA);
    params = execution.params(params)
    const cargs = ifh2hdr_cargs(params, execution)
    const ret = ifh2hdr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ifh2hdr
 *
 * Tool for converting IFH (Interfile Header) to HDR (Header) format in 4dfp (Four-Dimensional Functional Image) file format.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input 4dfp file
 * @param range Set range for the 4dfp file. Format: <float>[to<float>].
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Ifh2hdrOutputs`).
 */
function ifh2hdr(
    input_file: InputPathType,
    range: string | null = null,
    runner: Runner | null = null,
): Ifh2hdrOutputs {
    const params = ifh2hdr_params(input_file, range)
    return ifh2hdr_execute(params, runner);
}


export {
      IFH2HDR_METADATA,
      Ifh2hdrOutputs,
      Ifh2hdrParameters,
      ifh2hdr,
      ifh2hdr_execute,
      ifh2hdr_params,
};
