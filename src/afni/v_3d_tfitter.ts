// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TFITTER_METADATA: Metadata = {
    id: "8451a7cd8aa8de8047fb4bbe324982a2fbf6f94a.boutiques",
    name: "3dTfitter",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTfitterParameters {
    "__STYXTYPE__": "3dTfitter";
    "RHS": string;
    "LHS"?: Array<string> | null | undefined;
    "polort"?: number | null | undefined;
    "vthr"?: number | null | undefined;
    "FALTUNG"?: Array<string> | null | undefined;
    "lsqfit": boolean;
    "l1fit": boolean;
    "l2lasso"?: Array<string> | null | undefined;
    "lasso_centro_block"?: Array<string> | null | undefined;
    "l2sqrtlasso"?: Array<string> | null | undefined;
    "consign"?: Array<string> | null | undefined;
    "consFAL"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "label"?: Array<string> | null | undefined;
    "fitts"?: string | null | undefined;
    "errsum"?: string | null | undefined;
    "mask"?: string | null | undefined;
    "quiet": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dTfitter": v_3d_tfitter_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dTfitter": v_3d_tfitter_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tfitter(...)`.
 *
 * @interface
 */
interface V3dTfitterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset for LHS parameters.
     */
    output_prefix: OutputPathType | null;
    /**
     * Output fitted time series dataset.
     */
    fitted_time_series: OutputPathType | null;
    /**
     * Output error sums dataset.
     */
    error_sums: OutputPathType | null;
}


function v_3d_tfitter_params(
    rhs: string,
    lhs: Array<string> | null = null,
    polort: number | null = null,
    vthr: number | null = null,
    faltung: Array<string> | null = null,
    lsqfit: boolean = false,
    l1fit: boolean = false,
    l2lasso: Array<string> | null = null,
    lasso_centro_block: Array<string> | null = null,
    l2sqrtlasso: Array<string> | null = null,
    consign: Array<string> | null = null,
    cons_fal: string | null = null,
    prefix: string | null = null,
    label: Array<string> | null = null,
    fitts: string | null = null,
    errsum: string | null = null,
    mask: string | null = null,
    quiet: boolean = false,
): V3dTfitterParameters {
    /**
     * Build parameters.
    
     * @param rhs Specifies the right-hand-side 3D+time dataset. ('rset' can also be a 1D file with 1 column)
     * @param lhs Specifies a column (or columns) of the left-hand-side matrix. More than one 'lset' can follow the '-LHS' option.
     * @param polort Add 'p+1' Legendre polynomial columns to the LHS matrix.
     * @param vthr The value 'v' (between 0.0 and 0.09, inclusive) defines the threshold below which LHS vectors will be omitted from the regression analysis.
     * @param faltung Specifies a convolution (German: Faltung) model to be added to the LHS matrix. Followed by four arguments: 'fset', 'fpre', 'pen', 'fac'.
     * @param lsqfit Solve equations via least squares [the default method].
     * @param l1fit Solve equations via least sum of absolute residuals.
     * @param l2lasso Solve equations via least squares with a LASSO (L1) penalty on the coefficients. Followed by 'lam' and optional 'i j k ...'
     * @param lasso_centro_block Defines a block of coefficients that will be penalized together.
     * @param l2sqrtlasso Similar to '-l2lasso', but aims to minimize sqrt(Q2)+lam*L1.
     * @param consign Indicates that the sign of some output LHS parameters should be constrained in the solution.
     * @param cons_fal Constrain the deconvolution time series from '-FALTUNG' to be positive if 'c' is '+' or to be negative if 'c' is '-'.
     * @param prefix Prefix for the output dataset (LHS parameters) filename.
     * @param label Specifies sub-brick labels in the output LHS parameter dataset.
     * @param fitts Prefix filename for the output fitted time series dataset.
     * @param errsum Prefix filename for the error sums dataset.
     * @param mask Read in dataset 'ms' to use as a mask; only voxels with nonzero values in the mask will be processed.
     * @param quiet Don't print progress report messages.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dTfitter" as const,
        "RHS": rhs,
        "lsqfit": lsqfit,
        "l1fit": l1fit,
        "quiet": quiet,
    };
    if (lhs !== null) {
        params["LHS"] = lhs;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (vthr !== null) {
        params["vthr"] = vthr;
    }
    if (faltung !== null) {
        params["FALTUNG"] = faltung;
    }
    if (l2lasso !== null) {
        params["l2lasso"] = l2lasso;
    }
    if (lasso_centro_block !== null) {
        params["lasso_centro_block"] = lasso_centro_block;
    }
    if (l2sqrtlasso !== null) {
        params["l2sqrtlasso"] = l2sqrtlasso;
    }
    if (consign !== null) {
        params["consign"] = consign;
    }
    if (cons_fal !== null) {
        params["consFAL"] = cons_fal;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (fitts !== null) {
        params["fitts"] = fitts;
    }
    if (errsum !== null) {
        params["errsum"] = errsum;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


function v_3d_tfitter_cargs(
    params: V3dTfitterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dTfitter");
    cargs.push(
        "-RHS",
        (params["RHS"] ?? null)
    );
    if ((params["LHS"] ?? null) !== null) {
        cargs.push(
            "-LHS",
            ...(params["LHS"] ?? null)
        );
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["vthr"] ?? null) !== null) {
        cargs.push(
            "-vthr",
            String((params["vthr"] ?? null))
        );
    }
    if ((params["FALTUNG"] ?? null) !== null) {
        cargs.push(
            "-FALTUNG",
            ...(params["FALTUNG"] ?? null)
        );
    }
    if ((params["lsqfit"] ?? null)) {
        cargs.push("-lsqfit");
    }
    if ((params["l1fit"] ?? null)) {
        cargs.push("-l1fit");
    }
    if ((params["l2lasso"] ?? null) !== null) {
        cargs.push(
            "-l2lasso",
            ...(params["l2lasso"] ?? null)
        );
    }
    if ((params["lasso_centro_block"] ?? null) !== null) {
        cargs.push(
            "-lasso_centro_block",
            ...(params["lasso_centro_block"] ?? null)
        );
    }
    if ((params["l2sqrtlasso"] ?? null) !== null) {
        cargs.push(
            "-l2sqrtlasso",
            ...(params["l2sqrtlasso"] ?? null)
        );
    }
    if ((params["consign"] ?? null) !== null) {
        cargs.push(
            "-consign",
            ...(params["consign"] ?? null)
        );
    }
    if ((params["consFAL"] ?? null) !== null) {
        cargs.push(
            "-consFAL",
            (params["consFAL"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "-label",
            ...(params["label"] ?? null)
        );
    }
    if ((params["fitts"] ?? null) !== null) {
        cargs.push(
            "-fitts",
            (params["fitts"] ?? null)
        );
    }
    if ((params["errsum"] ?? null) !== null) {
        cargs.push(
            "-errsum",
            (params["errsum"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask"] ?? null)
        );
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    return cargs;
}


function v_3d_tfitter_outputs(
    params: V3dTfitterParameters,
    execution: Execution,
): V3dTfitterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dTfitterOutputs = {
        root: execution.outputFile("."),
        output_prefix: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
        fitted_time_series: ((params["fitts"] ?? null) !== null) ? execution.outputFile([(params["fitts"] ?? null), ".nii.gz"].join('')) : null,
        error_sums: ((params["errsum"] ?? null) !== null) ? execution.outputFile([(params["errsum"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function v_3d_tfitter_execute(
    params: V3dTfitterParameters,
    execution: Execution,
): V3dTfitterOutputs {
    /**
     * * At each voxel, assembles and solves a set of linear equations.
     *  ++ The matrix at each voxel may be the same or may be different.
     *  ++ This flexibility (for voxel-wise regressors) is one feature
     *     that makes 3dTfitter different from 3dDeconvolve.
     *  ++ Another distinguishing feature is that 3dTfitter allows for
     *     L2, L1, and L2+L1 (LASSO) regression solvers, and allows you
     *     to impose sign constraints on the solution parameters.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dTfitterOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_tfitter_cargs(params, execution)
    const ret = v_3d_tfitter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_tfitter(
    rhs: string,
    lhs: Array<string> | null = null,
    polort: number | null = null,
    vthr: number | null = null,
    faltung: Array<string> | null = null,
    lsqfit: boolean = false,
    l1fit: boolean = false,
    l2lasso: Array<string> | null = null,
    lasso_centro_block: Array<string> | null = null,
    l2sqrtlasso: Array<string> | null = null,
    consign: Array<string> | null = null,
    cons_fal: string | null = null,
    prefix: string | null = null,
    label: Array<string> | null = null,
    fitts: string | null = null,
    errsum: string | null = null,
    mask: string | null = null,
    quiet: boolean = false,
    runner: Runner | null = null,
): V3dTfitterOutputs {
    /**
     * * At each voxel, assembles and solves a set of linear equations.
     *  ++ The matrix at each voxel may be the same or may be different.
     *  ++ This flexibility (for voxel-wise regressors) is one feature
     *     that makes 3dTfitter different from 3dDeconvolve.
     *  ++ Another distinguishing feature is that 3dTfitter allows for
     *     L2, L1, and L2+L1 (LASSO) regression solvers, and allows you
     *     to impose sign constraints on the solution parameters.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param rhs Specifies the right-hand-side 3D+time dataset. ('rset' can also be a 1D file with 1 column)
     * @param lhs Specifies a column (or columns) of the left-hand-side matrix. More than one 'lset' can follow the '-LHS' option.
     * @param polort Add 'p+1' Legendre polynomial columns to the LHS matrix.
     * @param vthr The value 'v' (between 0.0 and 0.09, inclusive) defines the threshold below which LHS vectors will be omitted from the regression analysis.
     * @param faltung Specifies a convolution (German: Faltung) model to be added to the LHS matrix. Followed by four arguments: 'fset', 'fpre', 'pen', 'fac'.
     * @param lsqfit Solve equations via least squares [the default method].
     * @param l1fit Solve equations via least sum of absolute residuals.
     * @param l2lasso Solve equations via least squares with a LASSO (L1) penalty on the coefficients. Followed by 'lam' and optional 'i j k ...'
     * @param lasso_centro_block Defines a block of coefficients that will be penalized together.
     * @param l2sqrtlasso Similar to '-l2lasso', but aims to minimize sqrt(Q2)+lam*L1.
     * @param consign Indicates that the sign of some output LHS parameters should be constrained in the solution.
     * @param cons_fal Constrain the deconvolution time series from '-FALTUNG' to be positive if 'c' is '+' or to be negative if 'c' is '-'.
     * @param prefix Prefix for the output dataset (LHS parameters) filename.
     * @param label Specifies sub-brick labels in the output LHS parameter dataset.
     * @param fitts Prefix filename for the output fitted time series dataset.
     * @param errsum Prefix filename for the error sums dataset.
     * @param mask Read in dataset 'ms' to use as a mask; only voxels with nonzero values in the mask will be processed.
     * @param quiet Don't print progress report messages.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dTfitterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TFITTER_METADATA);
    const params = v_3d_tfitter_params(rhs, lhs, polort, vthr, faltung, lsqfit, l1fit, l2lasso, lasso_centro_block, l2sqrtlasso, consign, cons_fal, prefix, label, fitts, errsum, mask, quiet)
    return v_3d_tfitter_execute(params, execution);
}


export {
      V3dTfitterOutputs,
      V3dTfitterParameters,
      V_3D_TFITTER_METADATA,
      v_3d_tfitter,
      v_3d_tfitter_params,
};
