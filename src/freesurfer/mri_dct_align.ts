// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_DCT_ALIGN_METADATA: Metadata = {
    id: "41e6e579d5ddb08e54325cc779dff53fb8fda430.boutiques",
    name: "mri_dct_align",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriDctAlignParameters {
    "@type": "freesurfer.mri_dct_align";
    "source": InputPathType;
    "destination": InputPathType;
    "output_xform": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_dct_align": mri_dct_align_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_dct_align": mri_dct_align_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_dct_align(...)`.
 *
 * @interface
 */
interface MriDctAlignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Transformation file resulting from the alignment
     */
    output_xform_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source Source image file
 * @param destination Destination image file
 * @param output_xform Output transformation file
 *
 * @returns Parameter dictionary
 */
function mri_dct_align_params(
    source: InputPathType,
    destination: InputPathType,
    output_xform: string,
): MriDctAlignParameters {
    const params = {
        "@type": "freesurfer.mri_dct_align" as const,
        "source": source,
        "destination": destination,
        "output_xform": output_xform,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_dct_align_cargs(
    params: MriDctAlignParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_dct_align");
    cargs.push(execution.inputFile((params["source"] ?? null)));
    cargs.push(execution.inputFile((params["destination"] ?? null)));
    cargs.push((params["output_xform"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_dct_align_outputs(
    params: MriDctAlignParameters,
    execution: Execution,
): MriDctAlignOutputs {
    const ret: MriDctAlignOutputs = {
        root: execution.outputFile("."),
        output_xform_file: execution.outputFile([(params["output_xform"] ?? null)].join('')),
    };
    return ret;
}


/**
 * MRI DCT alignment tool from FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriDctAlignOutputs`).
 */
function mri_dct_align_execute(
    params: MriDctAlignParameters,
    runner: Runner | null = null,
): MriDctAlignOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_DCT_ALIGN_METADATA);
    params = execution.params(params)
    const cargs = mri_dct_align_cargs(params, execution)
    const ret = mri_dct_align_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * MRI DCT alignment tool from FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source Source image file
 * @param destination Destination image file
 * @param output_xform Output transformation file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriDctAlignOutputs`).
 */
function mri_dct_align(
    source: InputPathType,
    destination: InputPathType,
    output_xform: string,
    runner: Runner | null = null,
): MriDctAlignOutputs {
    const params = mri_dct_align_params(source, destination, output_xform)
    return mri_dct_align_execute(params, runner);
}


export {
      MRI_DCT_ALIGN_METADATA,
      MriDctAlignOutputs,
      MriDctAlignParameters,
      mri_dct_align,
      mri_dct_align_execute,
      mri_dct_align_params,
};
