// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RCA_LONG_TP_INIT_METADATA: Metadata = {
    id: "1ba25741004958df03ca6fd11c8637b4fcf2ca35.boutiques",
    name: "rca-long-tp-init",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RcaLongTpInitParameters {
    "@type": "freesurfer.rca-long-tp-init";
    "timepoint": string;
    "base": string;
    "use_long_base_ctrl_vol": boolean;
    "hemisphere"?: "lh" | "rh" | null | undefined;
    "expert_opts"?: InputPathType | null | undefined;
    "subject"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.rca-long-tp-init": rca_long_tp_init_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rca_long_tp_init(...)`.
 *
 * @interface
 */
interface RcaLongTpInitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param timepoint Timepoint identifier
 * @param base Base identifier
 * @param use_long_base_ctrl_vol Use long base control volume
 * @param hemisphere Specify the hemisphere (left or right)
 * @param expert_opts Expert options file
 * @param subject Subject identifier for testing; put after -long
 *
 * @returns Parameter dictionary
 */
function rca_long_tp_init_params(
    timepoint: string,
    base: string,
    use_long_base_ctrl_vol: boolean = false,
    hemisphere: "lh" | "rh" | null = null,
    expert_opts: InputPathType | null = null,
    subject: string | null = null,
): RcaLongTpInitParameters {
    const params = {
        "@type": "freesurfer.rca-long-tp-init" as const,
        "timepoint": timepoint,
        "base": base,
        "use_long_base_ctrl_vol": use_long_base_ctrl_vol,
    };
    if (hemisphere !== null) {
        params["hemisphere"] = hemisphere;
    }
    if (expert_opts !== null) {
        params["expert_opts"] = expert_opts;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rca_long_tp_init_cargs(
    params: RcaLongTpInitParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rca-long-tp-init");
    cargs.push(
        "-long",
        (params["timepoint"] ?? null)
    );
    cargs.push((params["base"] ?? null));
    if ((params["use_long_base_ctrl_vol"] ?? null)) {
        cargs.push("-uselongbasectrlvol");
    }
    if ((params["hemisphere"] ?? null) !== null) {
        cargs.push(
            "-hemi",
            (params["hemisphere"] ?? null)
        );
    }
    if ((params["expert_opts"] ?? null) !== null) {
        cargs.push(
            "-expert",
            execution.inputFile((params["expert_opts"] ?? null))
        );
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["subject"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rca_long_tp_init_outputs(
    params: RcaLongTpInitParameters,
    execution: Execution,
): RcaLongTpInitOutputs {
    const ret: RcaLongTpInitOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * rca-long-tp-init
 *
 * Initialize long timepoint subject for recon-all processing.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RcaLongTpInitOutputs`).
 */
function rca_long_tp_init_execute(
    params: RcaLongTpInitParameters,
    runner: Runner | null = null,
): RcaLongTpInitOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RCA_LONG_TP_INIT_METADATA);
    params = execution.params(params)
    const cargs = rca_long_tp_init_cargs(params, execution)
    const ret = rca_long_tp_init_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * rca-long-tp-init
 *
 * Initialize long timepoint subject for recon-all processing.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param timepoint Timepoint identifier
 * @param base Base identifier
 * @param use_long_base_ctrl_vol Use long base control volume
 * @param hemisphere Specify the hemisphere (left or right)
 * @param expert_opts Expert options file
 * @param subject Subject identifier for testing; put after -long
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RcaLongTpInitOutputs`).
 */
function rca_long_tp_init(
    timepoint: string,
    base: string,
    use_long_base_ctrl_vol: boolean = false,
    hemisphere: "lh" | "rh" | null = null,
    expert_opts: InputPathType | null = null,
    subject: string | null = null,
    runner: Runner | null = null,
): RcaLongTpInitOutputs {
    const params = rca_long_tp_init_params(timepoint, base, use_long_base_ctrl_vol, hemisphere, expert_opts, subject)
    return rca_long_tp_init_execute(params, runner);
}


export {
      RCA_LONG_TP_INIT_METADATA,
      RcaLongTpInitOutputs,
      RcaLongTpInitParameters,
      rca_long_tp_init,
      rca_long_tp_init_execute,
      rca_long_tp_init_params,
};
