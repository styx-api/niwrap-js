// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const STIMBAND_METADATA: Metadata = {
    id: "0fd66dc3c918c574a8c27c7cb16b3f971f5ac250.boutiques",
    name: "stimband",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface StimbandParameters {
    "@type": "afni.stimband";
    "verbose_flag": boolean;
    "matrixfiles": Array<InputPathType>;
    "additional_matrixfiles"?: Array<InputPathType> | null | undefined;
    "min_freq"?: number | null | undefined;
    "min_bwidth"?: number | null | undefined;
    "min_pow"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.stimband": stimband_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.stimband": stimband_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `stimband(...)`.
 *
 * @interface
 */
interface StimbandOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The frequency band covering at least 90% of the power of the stimulus columns.
     */
    output_band: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param matrixfiles Path to matrix files.
 * @param verbose_flag Print the power band for each individual stimulus column from each matrix.
 * @param additional_matrixfiles Another way to read 1 or more matrix files.
 * @param min_freq Set the minimum frequency output for the band. Default value is 0.01.
 * @param min_bwidth Set the minimum bandwidth output (top frequency minus bottom frequency). Default is 0.03.
 * @param min_pow Set the minimum power fraction (percentage) to 'ff' instead of the default 90%. Value must be in the range 50..99.
 *
 * @returns Parameter dictionary
 */
function stimband_params(
    matrixfiles: Array<InputPathType>,
    verbose_flag: boolean = false,
    additional_matrixfiles: Array<InputPathType> | null = null,
    min_freq: number | null = null,
    min_bwidth: number | null = null,
    min_pow: number | null = null,
): StimbandParameters {
    const params = {
        "@type": "afni.stimband" as const,
        "verbose_flag": verbose_flag,
        "matrixfiles": matrixfiles,
    };
    if (additional_matrixfiles !== null) {
        params["additional_matrixfiles"] = additional_matrixfiles;
    }
    if (min_freq !== null) {
        params["min_freq"] = min_freq;
    }
    if (min_bwidth !== null) {
        params["min_bwidth"] = min_bwidth;
    }
    if (min_pow !== null) {
        params["min_pow"] = min_pow;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function stimband_cargs(
    params: StimbandParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("stimband");
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-verb");
    }
    cargs.push(...(params["matrixfiles"] ?? null).map(f => execution.inputFile(f)));
    if ((params["additional_matrixfiles"] ?? null) !== null) {
        cargs.push(
            "-matrix",
            ...(params["additional_matrixfiles"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["min_freq"] ?? null) !== null) {
        cargs.push(
            "-min_freq",
            String((params["min_freq"] ?? null))
        );
    }
    if ((params["min_bwidth"] ?? null) !== null) {
        cargs.push(
            "-min_bwidth",
            String((params["min_bwidth"] ?? null))
        );
    }
    if ((params["min_pow"] ?? null) !== null) {
        cargs.push(
            "-min_pow",
            String((params["min_pow"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function stimband_outputs(
    params: StimbandParameters,
    execution: Execution,
): StimbandOutputs {
    const ret: StimbandOutputs = {
        root: execution.outputFile("."),
        output_band: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * Determines frequency band covering at least 90% of the 'power' (|FFT|^2) of stimulus columns from X.nocensor.xmat.1D files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `StimbandOutputs`).
 */
function stimband_execute(
    params: StimbandParameters,
    runner: Runner | null = null,
): StimbandOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(STIMBAND_METADATA);
    params = execution.params(params)
    const cargs = stimband_cargs(params, execution)
    const ret = stimband_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Determines frequency band covering at least 90% of the 'power' (|FFT|^2) of stimulus columns from X.nocensor.xmat.1D files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param matrixfiles Path to matrix files.
 * @param verbose_flag Print the power band for each individual stimulus column from each matrix.
 * @param additional_matrixfiles Another way to read 1 or more matrix files.
 * @param min_freq Set the minimum frequency output for the band. Default value is 0.01.
 * @param min_bwidth Set the minimum bandwidth output (top frequency minus bottom frequency). Default is 0.03.
 * @param min_pow Set the minimum power fraction (percentage) to 'ff' instead of the default 90%. Value must be in the range 50..99.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `StimbandOutputs`).
 */
function stimband(
    matrixfiles: Array<InputPathType>,
    verbose_flag: boolean = false,
    additional_matrixfiles: Array<InputPathType> | null = null,
    min_freq: number | null = null,
    min_bwidth: number | null = null,
    min_pow: number | null = null,
    runner: Runner | null = null,
): StimbandOutputs {
    const params = stimband_params(matrixfiles, verbose_flag, additional_matrixfiles, min_freq, min_bwidth, min_pow)
    return stimband_execute(params, runner);
}


export {
      STIMBAND_METADATA,
      StimbandOutputs,
      StimbandParameters,
      stimband,
      stimband_execute,
      stimband_params,
};
