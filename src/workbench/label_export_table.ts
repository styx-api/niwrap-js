// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_EXPORT_TABLE_METADATA: Metadata = {
    id: "685eb5ec17a869040ae1ee0ac3283a5b460783d0.boutiques",
    name: "label-export-table",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface LabelExportTableParameters {
    "@type"?: "workbench/label-export-table";
    "label_in": InputPathType;
    "table_out": string;
}
type LabelExportTableParametersTagged = Required<Pick<LabelExportTableParameters, '@type'>> & LabelExportTableParameters;


/**
 * Output object returned when calling `LabelExportTableParameters(...)`.
 *
 * @interface
 */
interface LabelExportTableOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label_in the input label file
 * @param table_out output - the output text file
 *
 * @returns Parameter dictionary
 */
function label_export_table_params(
    label_in: InputPathType,
    table_out: string,
): LabelExportTableParametersTagged {
    const params = {
        "@type": "workbench/label-export-table" as const,
        "label_in": label_in,
        "table_out": table_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label_export_table_cargs(
    params: LabelExportTableParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-label-export-table");
    cargs.push(execution.inputFile((params["label_in"] ?? null)));
    cargs.push((params["table_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label_export_table_outputs(
    params: LabelExportTableParameters,
    execution: Execution,
): LabelExportTableOutputs {
    const ret: LabelExportTableOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * label-export-table
 *
 * Export label table from gifti as text.
 *
 * Takes the label table from the gifti label file, and writes it to a text format matching what is expected by -metric-label-import.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelExportTableOutputs`).
 */
function label_export_table_execute(
    params: LabelExportTableParameters,
    runner: Runner | null = null,
): LabelExportTableOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_EXPORT_TABLE_METADATA);
    params = execution.params(params)
    const cargs = label_export_table_cargs(params, execution)
    const ret = label_export_table_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * label-export-table
 *
 * Export label table from gifti as text.
 *
 * Takes the label table from the gifti label file, and writes it to a text format matching what is expected by -metric-label-import.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param label_in the input label file
 * @param table_out output - the output text file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelExportTableOutputs`).
 */
function label_export_table(
    label_in: InputPathType,
    table_out: string,
    runner: Runner | null = null,
): LabelExportTableOutputs {
    const params = label_export_table_params(label_in, table_out)
    return label_export_table_execute(params, runner);
}


export {
      LABEL_EXPORT_TABLE_METADATA,
      LabelExportTableOutputs,
      label_export_table,
      label_export_table_execute,
      label_export_table_params,
};
