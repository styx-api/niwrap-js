// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MAKE_FACE_PARCELLATION_METADATA: Metadata = {
    id: "a83c31ac33801cde424aa5e0a50696c422d569e6.boutiques",
    name: "mris_make_face_parcellation",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMakeFaceParcellationParameters {
    "@type"?: "freesurfer/mris_make_face_parcellation";
    "input_surface": InputPathType;
    "ico_file": InputPathType;
    "output_annot": string;
    "colortable"?: InputPathType | null | undefined;
}
type MrisMakeFaceParcellationParametersTagged = Required<Pick<MrisMakeFaceParcellationParameters, '@type'>> & MrisMakeFaceParcellationParameters;


/**
 * Output object returned when calling `MrisMakeFaceParcellationParameters(...)`.
 *
 * @interface
 */
interface MrisMakeFaceParcellationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated annotation file based on the icosahedral face mapping.
     */
    annot_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file (e.g. lh.sphere or lh.sphere.reg)
 * @param ico_file Icosahedron file (e.g. ic3.tri)
 * @param output_annot Output annotation file (e.g. lh.ic3.annot)
 * @param colortable Color table file (e.g. colortable.txt)
 *
 * @returns Parameter dictionary
 */
function mris_make_face_parcellation_params(
    input_surface: InputPathType,
    ico_file: InputPathType,
    output_annot: string,
    colortable: InputPathType | null = null,
): MrisMakeFaceParcellationParametersTagged {
    const params = {
        "@type": "freesurfer/mris_make_face_parcellation" as const,
        "input_surface": input_surface,
        "ico_file": ico_file,
        "output_annot": output_annot,
    };
    if (colortable !== null) {
        params["colortable"] = colortable;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_make_face_parcellation_cargs(
    params: MrisMakeFaceParcellationParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_make_face_parcellation");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["ico_file"] ?? null)));
    cargs.push((params["output_annot"] ?? null));
    if ((params["colortable"] ?? null) !== null) {
        cargs.push(
            "-ctab",
            execution.inputFile((params["colortable"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_make_face_parcellation_outputs(
    params: MrisMakeFaceParcellationParameters,
    execution: Execution,
): MrisMakeFaceParcellationOutputs {
    const ret: MrisMakeFaceParcellationOutputs = {
        root: execution.outputFile("."),
        annot_file: execution.outputFile([(params["output_annot"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_make_face_parcellation
 *
 * Generates a parcellation based on which icosahedral face each vertex maps to.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMakeFaceParcellationOutputs`).
 */
function mris_make_face_parcellation_execute(
    params: MrisMakeFaceParcellationParameters,
    runner: Runner | null = null,
): MrisMakeFaceParcellationOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MAKE_FACE_PARCELLATION_METADATA);
    params = execution.params(params)
    const cargs = mris_make_face_parcellation_cargs(params, execution)
    const ret = mris_make_face_parcellation_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_make_face_parcellation
 *
 * Generates a parcellation based on which icosahedral face each vertex maps to.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file (e.g. lh.sphere or lh.sphere.reg)
 * @param ico_file Icosahedron file (e.g. ic3.tri)
 * @param output_annot Output annotation file (e.g. lh.ic3.annot)
 * @param colortable Color table file (e.g. colortable.txt)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMakeFaceParcellationOutputs`).
 */
function mris_make_face_parcellation(
    input_surface: InputPathType,
    ico_file: InputPathType,
    output_annot: string,
    colortable: InputPathType | null = null,
    runner: Runner | null = null,
): MrisMakeFaceParcellationOutputs {
    const params = mris_make_face_parcellation_params(input_surface, ico_file, output_annot, colortable)
    return mris_make_face_parcellation_execute(params, runner);
}


export {
      MRIS_MAKE_FACE_PARCELLATION_METADATA,
      MrisMakeFaceParcellationOutputs,
      mris_make_face_parcellation,
      mris_make_face_parcellation_execute,
      mris_make_face_parcellation_params,
};
