// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ABIDS_JSON_TOOL_PY_METADATA: Metadata = {
    id: "a9dbf330af1f3822b5e39734d477a5a6979179ef.boutiques",
    name: "abids_json_tool.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AbidsJsonToolPyParameters {
    "@type": "afni.abids_json_tool.py";
    "input_file": InputPathType;
    "prefix": string;
    "txt2json": boolean;
    "json2txt": boolean;
    "add_json"?: Array<string> | null | undefined;
    "del_json"?: string | null | undefined;
    "force_add": boolean;
    "overwrite": boolean;
    "help": boolean;
    "delimiter_major"?: string | null | undefined;
    "delimiter_minor"?: string | null | undefined;
    "literal_keys": boolean;
    "values_stay_str": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.abids_json_tool.py": abids_json_tool_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `abids_json_tool_py(...)`.
 *
 * @interface
 */
interface AbidsJsonToolPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file One file to convert. Enter NULL with -add_json to create new json file.
 * @param prefix Output file name.
 * @param txt2json Convert from ':' separated text file to json formatted file.
 * @param json2txt Convert from json formatted file to ':' separated text file.
 * @param add_json Add an attribute to the end of the specified json file.
 * @param del_json Remove attribute (KEY) from the -input json file.
 * @param force_add Use with -add_json to overwrite an existing attribute in the specified json file.
 * @param overwrite Use caution as this will overwrite the -prefix file if it exists!!
 * @param help Show this help and exit.
 * @param delimiter_major Specify the new (major) delimiter to separate keys and values when using '-txt2json' opt.
 * @param delimiter_minor Specify the new (minor) delimiter to separate value items when using '-txt2json' opt.
 * @param literal_keys Do not replace spaces with '_', nor parentheses and brackets with ''.
 * @param values_stay_str Each numeric or str item gets saved as a str; otherwise, guess at int and float.
 *
 * @returns Parameter dictionary
 */
function abids_json_tool_py_params(
    input_file: InputPathType,
    prefix: string,
    txt2json: boolean = false,
    json2txt: boolean = false,
    add_json: Array<string> | null = null,
    del_json: string | null = null,
    force_add: boolean = false,
    overwrite: boolean = false,
    help: boolean = false,
    delimiter_major: string | null = null,
    delimiter_minor: string | null = null,
    literal_keys: boolean = false,
    values_stay_str: boolean = false,
): AbidsJsonToolPyParameters {
    const params = {
        "@type": "afni.abids_json_tool.py" as const,
        "input_file": input_file,
        "prefix": prefix,
        "txt2json": txt2json,
        "json2txt": json2txt,
        "force_add": force_add,
        "overwrite": overwrite,
        "help": help,
        "literal_keys": literal_keys,
        "values_stay_str": values_stay_str,
    };
    if (add_json !== null) {
        params["add_json"] = add_json;
    }
    if (del_json !== null) {
        params["del_json"] = del_json;
    }
    if (delimiter_major !== null) {
        params["delimiter_major"] = delimiter_major;
    }
    if (delimiter_minor !== null) {
        params["delimiter_minor"] = delimiter_minor;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function abids_json_tool_py_cargs(
    params: AbidsJsonToolPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("abids_json_tool.py");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["txt2json"] ?? null)) {
        cargs.push("-txt2json");
    }
    if ((params["json2txt"] ?? null)) {
        cargs.push("-json2txt");
    }
    if ((params["add_json"] ?? null) !== null) {
        cargs.push(
            "-add_json",
            ...(params["add_json"] ?? null)
        );
    }
    if ((params["del_json"] ?? null) !== null) {
        cargs.push(
            "-del_json",
            (params["del_json"] ?? null)
        );
    }
    if ((params["force_add"] ?? null)) {
        cargs.push("-f");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["delimiter_major"] ?? null) !== null) {
        cargs.push(
            "-delimiter_major",
            (params["delimiter_major"] ?? null)
        );
    }
    if ((params["delimiter_minor"] ?? null) !== null) {
        cargs.push(
            "-delimiter_minor",
            (params["delimiter_minor"] ?? null)
        );
    }
    if ((params["literal_keys"] ?? null)) {
        cargs.push("-literal_keys");
    }
    if ((params["values_stay_str"] ?? null)) {
        cargs.push("-values_stay_str");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function abids_json_tool_py_outputs(
    params: AbidsJsonToolPyParameters,
    execution: Execution,
): AbidsJsonToolPyOutputs {
    const ret: AbidsJsonToolPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * This script helps to manipulate json files in various ways.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AbidsJsonToolPyOutputs`).
 */
function abids_json_tool_py_execute(
    params: AbidsJsonToolPyParameters,
    runner: Runner | null = null,
): AbidsJsonToolPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ABIDS_JSON_TOOL_PY_METADATA);
    params = execution.params(params)
    const cargs = abids_json_tool_py_cargs(params, execution)
    const ret = abids_json_tool_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This script helps to manipulate json files in various ways.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file One file to convert. Enter NULL with -add_json to create new json file.
 * @param prefix Output file name.
 * @param txt2json Convert from ':' separated text file to json formatted file.
 * @param json2txt Convert from json formatted file to ':' separated text file.
 * @param add_json Add an attribute to the end of the specified json file.
 * @param del_json Remove attribute (KEY) from the -input json file.
 * @param force_add Use with -add_json to overwrite an existing attribute in the specified json file.
 * @param overwrite Use caution as this will overwrite the -prefix file if it exists!!
 * @param help Show this help and exit.
 * @param delimiter_major Specify the new (major) delimiter to separate keys and values when using '-txt2json' opt.
 * @param delimiter_minor Specify the new (minor) delimiter to separate value items when using '-txt2json' opt.
 * @param literal_keys Do not replace spaces with '_', nor parentheses and brackets with ''.
 * @param values_stay_str Each numeric or str item gets saved as a str; otherwise, guess at int and float.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AbidsJsonToolPyOutputs`).
 */
function abids_json_tool_py(
    input_file: InputPathType,
    prefix: string,
    txt2json: boolean = false,
    json2txt: boolean = false,
    add_json: Array<string> | null = null,
    del_json: string | null = null,
    force_add: boolean = false,
    overwrite: boolean = false,
    help: boolean = false,
    delimiter_major: string | null = null,
    delimiter_minor: string | null = null,
    literal_keys: boolean = false,
    values_stay_str: boolean = false,
    runner: Runner | null = null,
): AbidsJsonToolPyOutputs {
    const params = abids_json_tool_py_params(input_file, prefix, txt2json, json2txt, add_json, del_json, force_add, overwrite, help, delimiter_major, delimiter_minor, literal_keys, values_stay_str)
    return abids_json_tool_py_execute(params, runner);
}


export {
      ABIDS_JSON_TOOL_PY_METADATA,
      AbidsJsonToolPyOutputs,
      AbidsJsonToolPyParameters,
      abids_json_tool_py,
      abids_json_tool_py_execute,
      abids_json_tool_py_params,
};
