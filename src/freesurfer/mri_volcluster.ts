// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_VOLCLUSTER_METADATA: Metadata = {
    id: "fdaf30eb5afbebdd35bdb91759b66ca33eb92e6a.boutiques",
    name: "mri_volcluster",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriVolclusterParameters {
    "@type"?: "freesurfer/mri_volcluster";
    "input_file": InputPathType;
    "summary_file"?: string | null | undefined;
    "output_volid"?: string | null | undefined;
    "output_cluster_num_volid"?: string | null | undefined;
    "cwsig_volid"?: string | null | undefined;
    "pointset_file"?: string | null | undefined;
    "min_threshold"?: number | null | undefined;
    "max_threshold"?: number | null | undefined;
    "sign"?: string | null | undefined;
    "no_adjust_flag": boolean;
    "match_value"?: number | null | undefined;
    "cwpval_threshold"?: number | null | undefined;
    "registration_file"?: InputPathType | null | undefined;
    "mni152reg_flag": boolean;
    "regheader_subject"?: string | null | undefined;
    "fsaverage_flag": boolean;
    "frame_number"?: number | null | undefined;
    "csd_files"?: Array<InputPathType> | null | undefined;
    "cwsig_map"?: string | null | undefined;
    "vwsig_map"?: string | null | undefined;
    "max_cwpval_file"?: string | null | undefined;
    "csdpdf_file"?: string | null | undefined;
    "csdpdf_only_flag": boolean;
    "fwhm_value"?: number | null | undefined;
    "fwhm_file"?: InputPathType | null | undefined;
    "min_size"?: number | null | undefined;
    "min_size_vox"?: number | null | undefined;
    "min_distance"?: number | null | undefined;
    "allow_diag_flag": boolean;
    "bonferroni_number"?: number | null | undefined;
    "bonferroni_max_number"?: number | null | undefined;
    "sig2p_max_flag": boolean;
    "gte_flag": boolean;
    "mask_volid"?: InputPathType | null | undefined;
    "mask_type"?: string | null | undefined;
    "mask_frame"?: number | null | undefined;
    "mask_threshold"?: number | null | undefined;
    "mask_sign"?: string | null | undefined;
    "mask_invert_flag": boolean;
    "out_mask_volid"?: string | null | undefined;
    "out_mask_type"?: string | null | undefined;
    "label_file"?: string | null | undefined;
    "nlabel_cluster"?: number | null | undefined;
    "label_base"?: string | null | undefined;
    "synth_func"?: string | null | undefined;
    "diagnostic_level"?: number | null | undefined;
    "fill_params"?: string | null | undefined;
    "help_flag": boolean;
}
type MriVolclusterParametersTagged = Required<Pick<MriVolclusterParameters, '@type'>> & MriVolclusterParameters;


/**
 * Output object returned when calling `MriVolclusterParameters(...)`.
 *
 * @interface
 */
interface MriVolclusterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume after clustering.
     */
    output_volume: OutputPathType | null;
    /**
     * Output cluster number volume.
     */
    output_cluster_number_volume: OutputPathType | null;
    /**
     * Final binary mask output.
     */
    output_binary_mask: OutputPathType | null;
    /**
     * Saved cluster as label file.
     */
    output_label_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file Source of volume values.
 * @param summary_file Text summary file.
 * @param output_volid Output volume ID after clustering.
 * @param output_cluster_num_volid Output volume ID with cluster number values.
 * @param cwsig_volid Volume ID for clusterwise significance.
 * @param pointset_file Create a freeview pointset of the clusters.
 * @param min_threshold Minimum intensity threshold.
 * @param max_threshold Maximum intensity threshold.
 * @param sign Sign for one-sided tests (<abs>, pos, neg).
 * @param no_adjust_flag Do not adjust threshold for one-tailed tests.
 * @param match_value Set thmin=matchval-0.5 and thmax=matchval+0.5.
 * @param cwpval_threshold Require clusters to have cwp < threshold.
 * @param registration_file For reporting Talairach coordinates.
 * @param mni152reg_flag Input is in MNI152 space.
 * @param regheader_subject Use header registration with subject.
 * @param fsaverage_flag Assume input is in fsaverage space.
 * @param frame_number Perform cluster analysis on the nth frame (0-based).
 * @param csd_files Cluster simulation data files.
 * @param cwsig_map Map of corrected cluster-wise significances.
 * @param vwsig_map Map of corrected voxel-wise significances.
 * @param max_cwpval_file Save p-value of the largest cluster.
 * @param csdpdf_file PDF/CDF of cluster and max significance.
 * @param csdpdf_only_flag Write CSD PDF file and exit.
 * @param fwhm_value FWHM in mm^3, forces GRF analysis.
 * @param fwhm_file Text file with FWHM in mm^3 for GRF.
 * @param min_size Minimum volume (mm^3) for a cluster.
 * @param min_size_vox Minimum number of contiguous voxels for a cluster.
 * @param min_distance Minimum distance between peak clusters.
 * @param allow_diag_flag Allow diagonal adjacency for contiguity.
 * @param bonferroni_number Bonferroni correction across spaces.
 * @param bonferroni_max_number Bonferroni correction applied to maximum.
 * @param sig2p_max_flag Convert maximum significance to p-value.
 * @param gte_flag Use >= when computing p-value from CSD.
 * @param mask_volid Mask volume ID.
 * @param mask_type File type of mask volume.
 * @param mask_frame Nth frame of mask to use.
 * @param mask_threshold Upper threshold for the mask.
 * @param mask_sign Sign in mask thresholding (<abs>, neg, pos).
 * @param mask_invert_flag Invert mask after thresholding.
 * @param out_mask_volid Path for final binary mask.
 * @param out_mask_type File type for output mask.
 * @param label_file File to save nth cluster as a label.
 * @param nlabel_cluster Save the nth cluster as a label.
 * @param label_base Base name for saving clusters as labels.
 * @param synth_func Function for synthetic data (uniform, loguniform, gaussian).
 * @param diagnostic_level Set diagnostic level.
 * @param fill_params Parameters for fill operation (invol outvol matchval).
 * @param help_flag Display help message and exit.
 *
 * @returns Parameter dictionary
 */
function mri_volcluster_params(
    input_file: InputPathType,
    summary_file: string | null = null,
    output_volid: string | null = null,
    output_cluster_num_volid: string | null = null,
    cwsig_volid: string | null = null,
    pointset_file: string | null = null,
    min_threshold: number | null = null,
    max_threshold: number | null = null,
    sign: string | null = null,
    no_adjust_flag: boolean = false,
    match_value: number | null = null,
    cwpval_threshold: number | null = null,
    registration_file: InputPathType | null = null,
    mni152reg_flag: boolean = false,
    regheader_subject: string | null = null,
    fsaverage_flag: boolean = false,
    frame_number: number | null = null,
    csd_files: Array<InputPathType> | null = null,
    cwsig_map: string | null = null,
    vwsig_map: string | null = null,
    max_cwpval_file: string | null = null,
    csdpdf_file: string | null = null,
    csdpdf_only_flag: boolean = false,
    fwhm_value: number | null = null,
    fwhm_file: InputPathType | null = null,
    min_size: number | null = null,
    min_size_vox: number | null = null,
    min_distance: number | null = null,
    allow_diag_flag: boolean = false,
    bonferroni_number: number | null = null,
    bonferroni_max_number: number | null = null,
    sig2p_max_flag: boolean = false,
    gte_flag: boolean = false,
    mask_volid: InputPathType | null = null,
    mask_type: string | null = null,
    mask_frame: number | null = null,
    mask_threshold: number | null = null,
    mask_sign: string | null = null,
    mask_invert_flag: boolean = false,
    out_mask_volid: string | null = null,
    out_mask_type: string | null = null,
    label_file: string | null = null,
    nlabel_cluster: number | null = null,
    label_base: string | null = null,
    synth_func: string | null = null,
    diagnostic_level: number | null = null,
    fill_params: string | null = null,
    help_flag: boolean = false,
): MriVolclusterParametersTagged {
    const params = {
        "@type": "freesurfer/mri_volcluster" as const,
        "input_file": input_file,
        "no_adjust_flag": no_adjust_flag,
        "mni152reg_flag": mni152reg_flag,
        "fsaverage_flag": fsaverage_flag,
        "csdpdf_only_flag": csdpdf_only_flag,
        "allow_diag_flag": allow_diag_flag,
        "sig2p_max_flag": sig2p_max_flag,
        "gte_flag": gte_flag,
        "mask_invert_flag": mask_invert_flag,
        "help_flag": help_flag,
    };
    if (summary_file !== null) {
        params["summary_file"] = summary_file;
    }
    if (output_volid !== null) {
        params["output_volid"] = output_volid;
    }
    if (output_cluster_num_volid !== null) {
        params["output_cluster_num_volid"] = output_cluster_num_volid;
    }
    if (cwsig_volid !== null) {
        params["cwsig_volid"] = cwsig_volid;
    }
    if (pointset_file !== null) {
        params["pointset_file"] = pointset_file;
    }
    if (min_threshold !== null) {
        params["min_threshold"] = min_threshold;
    }
    if (max_threshold !== null) {
        params["max_threshold"] = max_threshold;
    }
    if (sign !== null) {
        params["sign"] = sign;
    }
    if (match_value !== null) {
        params["match_value"] = match_value;
    }
    if (cwpval_threshold !== null) {
        params["cwpval_threshold"] = cwpval_threshold;
    }
    if (registration_file !== null) {
        params["registration_file"] = registration_file;
    }
    if (regheader_subject !== null) {
        params["regheader_subject"] = regheader_subject;
    }
    if (frame_number !== null) {
        params["frame_number"] = frame_number;
    }
    if (csd_files !== null) {
        params["csd_files"] = csd_files;
    }
    if (cwsig_map !== null) {
        params["cwsig_map"] = cwsig_map;
    }
    if (vwsig_map !== null) {
        params["vwsig_map"] = vwsig_map;
    }
    if (max_cwpval_file !== null) {
        params["max_cwpval_file"] = max_cwpval_file;
    }
    if (csdpdf_file !== null) {
        params["csdpdf_file"] = csdpdf_file;
    }
    if (fwhm_value !== null) {
        params["fwhm_value"] = fwhm_value;
    }
    if (fwhm_file !== null) {
        params["fwhm_file"] = fwhm_file;
    }
    if (min_size !== null) {
        params["min_size"] = min_size;
    }
    if (min_size_vox !== null) {
        params["min_size_vox"] = min_size_vox;
    }
    if (min_distance !== null) {
        params["min_distance"] = min_distance;
    }
    if (bonferroni_number !== null) {
        params["bonferroni_number"] = bonferroni_number;
    }
    if (bonferroni_max_number !== null) {
        params["bonferroni_max_number"] = bonferroni_max_number;
    }
    if (mask_volid !== null) {
        params["mask_volid"] = mask_volid;
    }
    if (mask_type !== null) {
        params["mask_type"] = mask_type;
    }
    if (mask_frame !== null) {
        params["mask_frame"] = mask_frame;
    }
    if (mask_threshold !== null) {
        params["mask_threshold"] = mask_threshold;
    }
    if (mask_sign !== null) {
        params["mask_sign"] = mask_sign;
    }
    if (out_mask_volid !== null) {
        params["out_mask_volid"] = out_mask_volid;
    }
    if (out_mask_type !== null) {
        params["out_mask_type"] = out_mask_type;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (nlabel_cluster !== null) {
        params["nlabel_cluster"] = nlabel_cluster;
    }
    if (label_base !== null) {
        params["label_base"] = label_base;
    }
    if (synth_func !== null) {
        params["synth_func"] = synth_func;
    }
    if (diagnostic_level !== null) {
        params["diagnostic_level"] = diagnostic_level;
    }
    if (fill_params !== null) {
        params["fill_params"] = fill_params;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_volcluster_cargs(
    params: MriVolclusterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_volcluster");
    cargs.push(
        "--in",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["summary_file"] ?? null) !== null) {
        cargs.push(
            "--sum",
            (params["summary_file"] ?? null)
        );
    }
    if ((params["output_volid"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["output_volid"] ?? null)
        );
    }
    if ((params["output_cluster_num_volid"] ?? null) !== null) {
        cargs.push(
            "--ocn",
            (params["output_cluster_num_volid"] ?? null)
        );
    }
    if ((params["cwsig_volid"] ?? null) !== null) {
        cargs.push(
            "--cwsig",
            (params["cwsig_volid"] ?? null)
        );
    }
    if ((params["pointset_file"] ?? null) !== null) {
        cargs.push(
            "--pointset",
            (params["pointset_file"] ?? null)
        );
    }
    if ((params["min_threshold"] ?? null) !== null) {
        cargs.push(
            "--thmin",
            String((params["min_threshold"] ?? null))
        );
    }
    if ((params["max_threshold"] ?? null) !== null) {
        cargs.push(
            "--thmax",
            String((params["max_threshold"] ?? null))
        );
    }
    if ((params["sign"] ?? null) !== null) {
        cargs.push(
            "--sign",
            (params["sign"] ?? null)
        );
    }
    if ((params["no_adjust_flag"] ?? false)) {
        cargs.push("--no-adjust");
    }
    if ((params["match_value"] ?? null) !== null) {
        cargs.push(
            "--match",
            String((params["match_value"] ?? null))
        );
    }
    if ((params["cwpval_threshold"] ?? null) !== null) {
        cargs.push(
            "--cwpvalthresh",
            String((params["cwpval_threshold"] ?? null))
        );
    }
    if ((params["registration_file"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["registration_file"] ?? null))
        );
    }
    if ((params["mni152reg_flag"] ?? false)) {
        cargs.push("--mni152reg");
    }
    if ((params["regheader_subject"] ?? null) !== null) {
        cargs.push(
            "--regheader",
            (params["regheader_subject"] ?? null)
        );
    }
    if ((params["fsaverage_flag"] ?? false)) {
        cargs.push("--fsaverage");
    }
    if ((params["frame_number"] ?? null) !== null) {
        cargs.push(
            "--frame",
            String((params["frame_number"] ?? null))
        );
    }
    if ((params["csd_files"] ?? null) !== null) {
        cargs.push(
            "--csd",
            ...(params["csd_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["cwsig_map"] ?? null) !== null) {
        cargs.push(
            "--cwsig",
            (params["cwsig_map"] ?? null)
        );
    }
    if ((params["vwsig_map"] ?? null) !== null) {
        cargs.push(
            "--vwsig",
            (params["vwsig_map"] ?? null)
        );
    }
    if ((params["max_cwpval_file"] ?? null) !== null) {
        cargs.push(
            "--maxcwpval",
            (params["max_cwpval_file"] ?? null)
        );
    }
    if ((params["csdpdf_file"] ?? null) !== null) {
        cargs.push(
            "--csdpdf",
            (params["csdpdf_file"] ?? null)
        );
    }
    if ((params["csdpdf_only_flag"] ?? false)) {
        cargs.push("--csdpdf-only");
    }
    if ((params["fwhm_value"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm_value"] ?? null))
        );
    }
    if ((params["fwhm_file"] ?? null) !== null) {
        cargs.push(
            "--fwhmdat",
            execution.inputFile((params["fwhm_file"] ?? null))
        );
    }
    if ((params["min_size"] ?? null) !== null) {
        cargs.push(
            "--minsize",
            String((params["min_size"] ?? null))
        );
    }
    if ((params["min_size_vox"] ?? null) !== null) {
        cargs.push(
            "--minsizevox",
            String((params["min_size_vox"] ?? null))
        );
    }
    if ((params["min_distance"] ?? null) !== null) {
        cargs.push(
            "--mindist",
            String((params["min_distance"] ?? null))
        );
    }
    if ((params["allow_diag_flag"] ?? false)) {
        cargs.push("--allowdiag");
    }
    if ((params["bonferroni_number"] ?? null) !== null) {
        cargs.push(
            "--bonferroni",
            String((params["bonferroni_number"] ?? null))
        );
    }
    if ((params["bonferroni_max_number"] ?? null) !== null) {
        cargs.push(
            "--bonferroni-max",
            String((params["bonferroni_max_number"] ?? null))
        );
    }
    if ((params["sig2p_max_flag"] ?? false)) {
        cargs.push("--sig2p-max");
    }
    if ((params["gte_flag"] ?? false)) {
        cargs.push("--gte");
    }
    if ((params["mask_volid"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_volid"] ?? null))
        );
    }
    if ((params["mask_type"] ?? null) !== null) {
        cargs.push(
            "--mask_type",
            (params["mask_type"] ?? null)
        );
    }
    if ((params["mask_frame"] ?? null) !== null) {
        cargs.push(
            "--maskframe",
            String((params["mask_frame"] ?? null))
        );
    }
    if ((params["mask_threshold"] ?? null) !== null) {
        cargs.push(
            "--maskthresh",
            String((params["mask_threshold"] ?? null))
        );
    }
    if ((params["mask_sign"] ?? null) !== null) {
        cargs.push(
            "--masksign",
            (params["mask_sign"] ?? null)
        );
    }
    if ((params["mask_invert_flag"] ?? false)) {
        cargs.push("--maskinvert");
    }
    if ((params["out_mask_volid"] ?? null) !== null) {
        cargs.push(
            "--outmask",
            (params["out_mask_volid"] ?? null)
        );
    }
    if ((params["out_mask_type"] ?? null) !== null) {
        cargs.push(
            "--outmask_type",
            (params["out_mask_type"] ?? null)
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "--label",
            (params["label_file"] ?? null)
        );
    }
    if ((params["nlabel_cluster"] ?? null) !== null) {
        cargs.push(
            "--nlabelcluster",
            String((params["nlabel_cluster"] ?? null))
        );
    }
    if ((params["label_base"] ?? null) !== null) {
        cargs.push(
            "--labelbase",
            (params["label_base"] ?? null)
        );
    }
    if ((params["synth_func"] ?? null) !== null) {
        cargs.push(
            "--synth",
            (params["synth_func"] ?? null)
        );
    }
    if ((params["diagnostic_level"] ?? null) !== null) {
        cargs.push(
            "--diag",
            String((params["diagnostic_level"] ?? null))
        );
    }
    if ((params["fill_params"] ?? null) !== null) {
        cargs.push(
            "--fill",
            (params["fill_params"] ?? null)
        );
    }
    if ((params["help_flag"] ?? false)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_volcluster_outputs(
    params: MriVolclusterParameters,
    execution: Execution,
): MriVolclusterOutputs {
    const ret: MriVolclusterOutputs = {
        root: execution.outputFile("."),
        output_volume: ((params["output_volid"] ?? null) !== null) ? execution.outputFile([(params["output_volid"] ?? null)].join('')) : null,
        output_cluster_number_volume: ((params["output_cluster_num_volid"] ?? null) !== null) ? execution.outputFile([(params["output_cluster_num_volid"] ?? null)].join('')) : null,
        output_binary_mask: ((params["out_mask_volid"] ?? null) !== null) ? execution.outputFile([(params["out_mask_volid"] ?? null)].join('')) : null,
        output_label_file: ((params["label_file"] ?? null) !== null) ? execution.outputFile([(params["label_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * mri_volcluster
 *
 * A tool for finding clusters in a volume, useful for analyzing MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriVolclusterOutputs`).
 */
function mri_volcluster_execute(
    params: MriVolclusterParameters,
    runner: Runner | null = null,
): MriVolclusterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_VOLCLUSTER_METADATA);
    params = execution.params(params)
    const cargs = mri_volcluster_cargs(params, execution)
    const ret = mri_volcluster_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_volcluster
 *
 * A tool for finding clusters in a volume, useful for analyzing MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Source of volume values.
 * @param summary_file Text summary file.
 * @param output_volid Output volume ID after clustering.
 * @param output_cluster_num_volid Output volume ID with cluster number values.
 * @param cwsig_volid Volume ID for clusterwise significance.
 * @param pointset_file Create a freeview pointset of the clusters.
 * @param min_threshold Minimum intensity threshold.
 * @param max_threshold Maximum intensity threshold.
 * @param sign Sign for one-sided tests (<abs>, pos, neg).
 * @param no_adjust_flag Do not adjust threshold for one-tailed tests.
 * @param match_value Set thmin=matchval-0.5 and thmax=matchval+0.5.
 * @param cwpval_threshold Require clusters to have cwp < threshold.
 * @param registration_file For reporting Talairach coordinates.
 * @param mni152reg_flag Input is in MNI152 space.
 * @param regheader_subject Use header registration with subject.
 * @param fsaverage_flag Assume input is in fsaverage space.
 * @param frame_number Perform cluster analysis on the nth frame (0-based).
 * @param csd_files Cluster simulation data files.
 * @param cwsig_map Map of corrected cluster-wise significances.
 * @param vwsig_map Map of corrected voxel-wise significances.
 * @param max_cwpval_file Save p-value of the largest cluster.
 * @param csdpdf_file PDF/CDF of cluster and max significance.
 * @param csdpdf_only_flag Write CSD PDF file and exit.
 * @param fwhm_value FWHM in mm^3, forces GRF analysis.
 * @param fwhm_file Text file with FWHM in mm^3 for GRF.
 * @param min_size Minimum volume (mm^3) for a cluster.
 * @param min_size_vox Minimum number of contiguous voxels for a cluster.
 * @param min_distance Minimum distance between peak clusters.
 * @param allow_diag_flag Allow diagonal adjacency for contiguity.
 * @param bonferroni_number Bonferroni correction across spaces.
 * @param bonferroni_max_number Bonferroni correction applied to maximum.
 * @param sig2p_max_flag Convert maximum significance to p-value.
 * @param gte_flag Use >= when computing p-value from CSD.
 * @param mask_volid Mask volume ID.
 * @param mask_type File type of mask volume.
 * @param mask_frame Nth frame of mask to use.
 * @param mask_threshold Upper threshold for the mask.
 * @param mask_sign Sign in mask thresholding (<abs>, neg, pos).
 * @param mask_invert_flag Invert mask after thresholding.
 * @param out_mask_volid Path for final binary mask.
 * @param out_mask_type File type for output mask.
 * @param label_file File to save nth cluster as a label.
 * @param nlabel_cluster Save the nth cluster as a label.
 * @param label_base Base name for saving clusters as labels.
 * @param synth_func Function for synthetic data (uniform, loguniform, gaussian).
 * @param diagnostic_level Set diagnostic level.
 * @param fill_params Parameters for fill operation (invol outvol matchval).
 * @param help_flag Display help message and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriVolclusterOutputs`).
 */
function mri_volcluster(
    input_file: InputPathType,
    summary_file: string | null = null,
    output_volid: string | null = null,
    output_cluster_num_volid: string | null = null,
    cwsig_volid: string | null = null,
    pointset_file: string | null = null,
    min_threshold: number | null = null,
    max_threshold: number | null = null,
    sign: string | null = null,
    no_adjust_flag: boolean = false,
    match_value: number | null = null,
    cwpval_threshold: number | null = null,
    registration_file: InputPathType | null = null,
    mni152reg_flag: boolean = false,
    regheader_subject: string | null = null,
    fsaverage_flag: boolean = false,
    frame_number: number | null = null,
    csd_files: Array<InputPathType> | null = null,
    cwsig_map: string | null = null,
    vwsig_map: string | null = null,
    max_cwpval_file: string | null = null,
    csdpdf_file: string | null = null,
    csdpdf_only_flag: boolean = false,
    fwhm_value: number | null = null,
    fwhm_file: InputPathType | null = null,
    min_size: number | null = null,
    min_size_vox: number | null = null,
    min_distance: number | null = null,
    allow_diag_flag: boolean = false,
    bonferroni_number: number | null = null,
    bonferroni_max_number: number | null = null,
    sig2p_max_flag: boolean = false,
    gte_flag: boolean = false,
    mask_volid: InputPathType | null = null,
    mask_type: string | null = null,
    mask_frame: number | null = null,
    mask_threshold: number | null = null,
    mask_sign: string | null = null,
    mask_invert_flag: boolean = false,
    out_mask_volid: string | null = null,
    out_mask_type: string | null = null,
    label_file: string | null = null,
    nlabel_cluster: number | null = null,
    label_base: string | null = null,
    synth_func: string | null = null,
    diagnostic_level: number | null = null,
    fill_params: string | null = null,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MriVolclusterOutputs {
    const params = mri_volcluster_params(input_file, summary_file, output_volid, output_cluster_num_volid, cwsig_volid, pointset_file, min_threshold, max_threshold, sign, no_adjust_flag, match_value, cwpval_threshold, registration_file, mni152reg_flag, regheader_subject, fsaverage_flag, frame_number, csd_files, cwsig_map, vwsig_map, max_cwpval_file, csdpdf_file, csdpdf_only_flag, fwhm_value, fwhm_file, min_size, min_size_vox, min_distance, allow_diag_flag, bonferroni_number, bonferroni_max_number, sig2p_max_flag, gte_flag, mask_volid, mask_type, mask_frame, mask_threshold, mask_sign, mask_invert_flag, out_mask_volid, out_mask_type, label_file, nlabel_cluster, label_base, synth_func, diagnostic_level, fill_params, help_flag)
    return mri_volcluster_execute(params, runner);
}


export {
      MRI_VOLCLUSTER_METADATA,
      MriVolclusterOutputs,
      mri_volcluster,
      mri_volcluster_execute,
      mri_volcluster_params,
};
