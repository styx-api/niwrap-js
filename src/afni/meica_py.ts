// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MEICA_PY_METADATA: Metadata = {
    id: "b446f47c0652504fc62596ad7811f616934e7136.boutiques",
    name: "meica.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MeicaPyParameters {
    "@type"?: "afni/meica.py";
    "infile": InputPathType;
    "echo_times": string;
    "affine": string;
    "output_directory": string;
    "components"?: number | null | undefined;
    "talairach": boolean;
    "threshold"?: number | null | undefined;
    "debug": boolean;
}
type MeicaPyParametersTagged = Required<Pick<MeicaPyParameters, '@type'>> & MeicaPyParameters;


/**
 * Output object returned when calling `MeicaPyParameters(...)`.
 *
 * @interface
 */
interface MeicaPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Cleaned BOLD image after ME-ICA processing
     */
    cleaned_bold: OutputPathType;
    /**
     * Independent components result of ICA
     */
    components_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input image dataset (e.g. dataset.nii.gz)
 * @param echo_times Echo times (e.g. 15.0,30.0,45.0)
 * @param affine Affine registration matrix
 * @param output_directory Output directory
 * @param components Number of components for ICA
 * @param talairach Apply standard Talairach transformation
 * @param threshold Threshold value for masking
 * @param debug Enable debug mode
 *
 * @returns Parameter dictionary
 */
function meica_py_params(
    infile: InputPathType,
    echo_times: string,
    affine: string,
    output_directory: string,
    components: number | null = null,
    talairach: boolean = false,
    threshold: number | null = null,
    debug: boolean = false,
): MeicaPyParametersTagged {
    const params = {
        "@type": "afni/meica.py" as const,
        "infile": infile,
        "echo_times": echo_times,
        "affine": affine,
        "output_directory": output_directory,
        "talairach": talairach,
        "debug": debug,
    };
    if (components !== null) {
        params["components"] = components;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function meica_py_cargs(
    params: MeicaPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("meica.py");
    cargs.push(
        "-d",
        execution.inputFile((params["infile"] ?? null))
    );
    cargs.push(
        "-e",
        (params["echo_times"] ?? null)
    );
    cargs.push(
        "-a",
        (params["affine"] ?? null)
    );
    cargs.push(
        "-o",
        (params["output_directory"] ?? null)
    );
    if ((params["components"] ?? null) !== null) {
        cargs.push(
            "-c",
            String((params["components"] ?? null))
        );
    }
    if ((params["talairach"] ?? false)) {
        cargs.push("-t");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["debug"] ?? false)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function meica_py_outputs(
    params: MeicaPyParameters,
    execution: Execution,
): MeicaPyOutputs {
    const ret: MeicaPyOutputs = {
        root: execution.outputFile("."),
        cleaned_bold: execution.outputFile([(params["output_directory"] ?? null), "/cleaned_bold.nii.gz"].join('')),
        components_output: execution.outputFile([(params["output_directory"] ?? null), "/components.nii.gz"].join('')),
    };
    return ret;
}


/**
 * meica.py
 *
 * Multi-Echo Independent Component Analysis for fMRI denoising.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MeicaPyOutputs`).
 */
function meica_py_execute(
    params: MeicaPyParameters,
    runner: Runner | null = null,
): MeicaPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MEICA_PY_METADATA);
    params = execution.params(params)
    const cargs = meica_py_cargs(params, execution)
    const ret = meica_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * meica.py
 *
 * Multi-Echo Independent Component Analysis for fMRI denoising.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input image dataset (e.g. dataset.nii.gz)
 * @param echo_times Echo times (e.g. 15.0,30.0,45.0)
 * @param affine Affine registration matrix
 * @param output_directory Output directory
 * @param components Number of components for ICA
 * @param talairach Apply standard Talairach transformation
 * @param threshold Threshold value for masking
 * @param debug Enable debug mode
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MeicaPyOutputs`).
 */
function meica_py(
    infile: InputPathType,
    echo_times: string,
    affine: string,
    output_directory: string,
    components: number | null = null,
    talairach: boolean = false,
    threshold: number | null = null,
    debug: boolean = false,
    runner: Runner | null = null,
): MeicaPyOutputs {
    const params = meica_py_params(infile, echo_times, affine, output_directory, components, talairach, threshold, debug)
    return meica_py_execute(params, runner);
}


export {
      MEICA_PY_METADATA,
      MeicaPyOutputs,
      meica_py,
      meica_py_execute,
      meica_py_params,
};
