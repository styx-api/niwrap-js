// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ENTROPY_METADATA: Metadata = {
    id: "37180c210ae193dc8f3a04afa2996bd7472200be.boutiques",
    name: "3dEntropy",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dEntropyParameters {
    "@type"?: "afni/3dEntropy";
    "zskip": boolean;
    "input_dataset": InputPathType;
}
type V3dEntropyParametersTagged = Required<Pick<V3dEntropyParameters, '@type'>> & V3dEntropyParameters;


/**
 * Output object returned when calling `V3dEntropyParameters(...)`.
 *
 * @interface
 */
interface V3dEntropyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset (stored as 16 bit shorts)
 * @param zskip Skip 0 values in the entropy computation
 *
 * @returns Parameter dictionary
 */
function v_3d_entropy_params(
    input_dataset: InputPathType,
    zskip: boolean = false,
): V3dEntropyParametersTagged {
    const params = {
        "@type": "afni/3dEntropy" as const,
        "zskip": zskip,
        "input_dataset": input_dataset,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_entropy_cargs(
    params: V3dEntropyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dEntropy");
    if ((params["zskip"] ?? false)) {
        cargs.push("-zskip");
    }
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_entropy_outputs(
    params: V3dEntropyParameters,
    execution: Execution,
): V3dEntropyOutputs {
    const ret: V3dEntropyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 3dEntropy
 *
 * Computes entropy for a 3D dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dEntropyOutputs`).
 */
function v_3d_entropy_execute(
    params: V3dEntropyParameters,
    runner: Runner | null = null,
): V3dEntropyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ENTROPY_METADATA);
    params = execution.params(params)
    const cargs = v_3d_entropy_cargs(params, execution)
    const ret = v_3d_entropy_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dEntropy
 *
 * Computes entropy for a 3D dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset (stored as 16 bit shorts)
 * @param zskip Skip 0 values in the entropy computation
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dEntropyOutputs`).
 */
function v_3d_entropy(
    input_dataset: InputPathType,
    zskip: boolean = false,
    runner: Runner | null = null,
): V3dEntropyOutputs {
    const params = v_3d_entropy_params(input_dataset, zskip)
    return v_3d_entropy_execute(params, runner);
}


export {
      V3dEntropyOutputs,
      V_3D_ENTROPY_METADATA,
      v_3d_entropy,
      v_3d_entropy_execute,
      v_3d_entropy_params,
};
