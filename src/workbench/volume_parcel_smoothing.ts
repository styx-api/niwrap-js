// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_PARCEL_SMOOTHING_METADATA: Metadata = {
    id: "36a7b69f25d89c982a0bd6b5f93ad16e2648b1ff.boutiques",
    name: "volume-parcel-smoothing",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeParcelSmoothingParameters {
    "@type": "workbench.volume-parcel-smoothing";
    "data_volume": InputPathType;
    "label_volume": InputPathType;
    "kernel": number;
    "volume_out": string;
    "opt_fwhm": boolean;
    "opt_fix_zeros": boolean;
    "opt_subvolume_subvol"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-parcel-smoothing": volume_parcel_smoothing_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-parcel-smoothing": volume_parcel_smoothing_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_parcel_smoothing(...)`.
 *
 * @interface
 */
interface VolumeParcelSmoothingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param data_volume the volume to smooth
 * @param label_volume a label volume containing the parcels to smooth
 * @param kernel the size of the gaussian smoothing kernel in mm, as sigma by default
 * @param volume_out the output volume
 * @param opt_fwhm smoothing kernel size is FWHM, not sigma
 * @param opt_fix_zeros treat zero values as not being data
 * @param opt_subvolume_subvol select a single subvolume to smooth: the subvolume number or name
 *
 * @returns Parameter dictionary
 */
function volume_parcel_smoothing_params(
    data_volume: InputPathType,
    label_volume: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fwhm: boolean = false,
    opt_fix_zeros: boolean = false,
    opt_subvolume_subvol: string | null = null,
): VolumeParcelSmoothingParameters {
    const params = {
        "@type": "workbench.volume-parcel-smoothing" as const,
        "data_volume": data_volume,
        "label_volume": label_volume,
        "kernel": kernel,
        "volume_out": volume_out,
        "opt_fwhm": opt_fwhm,
        "opt_fix_zeros": opt_fix_zeros,
    };
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_parcel_smoothing_cargs(
    params: VolumeParcelSmoothingParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-parcel-smoothing");
    cargs.push(execution.inputFile((params["data_volume"] ?? null)));
    cargs.push(execution.inputFile((params["label_volume"] ?? null)));
    cargs.push(String((params["kernel"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_fwhm"] ?? null)) {
        cargs.push("-fwhm");
    }
    if ((params["opt_fix_zeros"] ?? null)) {
        cargs.push("-fix-zeros");
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_parcel_smoothing_outputs(
    params: VolumeParcelSmoothingParameters,
    execution: Execution,
): VolumeParcelSmoothingOutputs {
    const ret: VolumeParcelSmoothingOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Smooth parcels in a volume separately.
 *
 * The volume is smoothed within each label in the label volume using data only from within the label.  Equivalent to running volume smoothing with ROIs matching each label separately, then adding the resulting volumes, but faster.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VolumeParcelSmoothingOutputs`).
 */
function volume_parcel_smoothing_execute(
    params: VolumeParcelSmoothingParameters,
    execution: Execution,
): VolumeParcelSmoothingOutputs {
    params = execution.params(params)
    const cargs = volume_parcel_smoothing_cargs(params, execution)
    const ret = volume_parcel_smoothing_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Smooth parcels in a volume separately.
 *
 * The volume is smoothed within each label in the label volume using data only from within the label.  Equivalent to running volume smoothing with ROIs matching each label separately, then adding the resulting volumes, but faster.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param data_volume the volume to smooth
 * @param label_volume a label volume containing the parcels to smooth
 * @param kernel the size of the gaussian smoothing kernel in mm, as sigma by default
 * @param volume_out the output volume
 * @param opt_fwhm smoothing kernel size is FWHM, not sigma
 * @param opt_fix_zeros treat zero values as not being data
 * @param opt_subvolume_subvol select a single subvolume to smooth: the subvolume number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeParcelSmoothingOutputs`).
 */
function volume_parcel_smoothing(
    data_volume: InputPathType,
    label_volume: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fwhm: boolean = false,
    opt_fix_zeros: boolean = false,
    opt_subvolume_subvol: string | null = null,
    runner: Runner | null = null,
): VolumeParcelSmoothingOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_PARCEL_SMOOTHING_METADATA);
    const params = volume_parcel_smoothing_params(data_volume, label_volume, kernel, volume_out, opt_fwhm, opt_fix_zeros, opt_subvolume_subvol)
    return volume_parcel_smoothing_execute(params, execution);
}


export {
      VOLUME_PARCEL_SMOOTHING_METADATA,
      VolumeParcelSmoothingOutputs,
      VolumeParcelSmoothingParameters,
      volume_parcel_smoothing,
      volume_parcel_smoothing_cargs,
      volume_parcel_smoothing_execute,
      volume_parcel_smoothing_outputs,
      volume_parcel_smoothing_params,
};
