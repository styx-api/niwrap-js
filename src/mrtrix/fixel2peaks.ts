// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIXEL2PEAKS_METADATA: Metadata = {
    id: "5e3b8600a7924403d728fedc4abecdb6bc9848fe.boutiques",
    name: "fixel2peaks",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Fixel2peaksConfigParameters {
    "@type": "mrtrix.fixel2peaks.config";
    "key": string;
    "value": string;
}


interface Fixel2peaksVariousStringParameters {
    "@type": "mrtrix.fixel2peaks.VariousString";
    "obj": string;
}


interface Fixel2peaksVariousFileParameters {
    "@type": "mrtrix.fixel2peaks.VariousFile";
    "obj": InputPathType;
}


interface Fixel2peaksParameters {
    "@type": "mrtrix.fixel2peaks";
    "number"?: number | null | undefined;
    "nan": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Fixel2peaksConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "in": Fixel2peaksVariousStringParameters | Fixel2peaksVariousFileParameters;
    "out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.fixel2peaks": fixel2peaks_cargs,
        "mrtrix.fixel2peaks.config": fixel2peaks_config_cargs,
        "mrtrix.fixel2peaks.VariousString": fixel2peaks_various_string_cargs,
        "mrtrix.fixel2peaks.VariousFile": fixel2peaks_various_file_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.fixel2peaks": fixel2peaks_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function fixel2peaks_config_params(
    key: string,
    value: string,
): Fixel2peaksConfigParameters {
    const params = {
        "@type": "mrtrix.fixel2peaks.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2peaks_config_cargs(
    params: Fixel2peaksConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function fixel2peaks_various_string_params(
    obj: string,
): Fixel2peaksVariousStringParameters {
    const params = {
        "@type": "mrtrix.fixel2peaks.VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2peaks_various_string_cargs(
    params: Fixel2peaksVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function fixel2peaks_various_file_params(
    obj: InputPathType,
): Fixel2peaksVariousFileParameters {
    const params = {
        "@type": "mrtrix.fixel2peaks.VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2peaks_various_file_cargs(
    params: Fixel2peaksVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `fixel2peaks(...)`.
 *
 * @interface
 */
interface Fixel2peaksOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output peaks image
     */
    out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_ the input fixel information
 * @param out the output peaks image
 * @param number_ maximum number of fixels in each voxel (default: based on input data)
 * @param nan fill excess peak data with NaNs rather than zeroes
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function fixel2peaks_params(
    in_: Fixel2peaksVariousStringParameters | Fixel2peaksVariousFileParameters,
    out: string,
    number_: number | null = null,
    nan: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fixel2peaksConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Fixel2peaksParameters {
    const params = {
        "@type": "mrtrix.fixel2peaks" as const,
        "nan": nan,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "in": in_,
        "out": out,
    };
    if (number_ !== null) {
        params["number"] = number_;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2peaks_cargs(
    params: Fixel2peaksParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fixel2peaks");
    if ((params["number"] ?? null) !== null) {
        cargs.push(
            "-number",
            String((params["number"] ?? null))
        );
    }
    if ((params["nan"] ?? null)) {
        cargs.push("-nan");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...dynCargs((params["in"] ?? null)["@type"])((params["in"] ?? null), execution));
    cargs.push((params["out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fixel2peaks_outputs(
    params: Fixel2peaksParameters,
    execution: Execution,
): Fixel2peaksOutputs {
    const ret: Fixel2peaksOutputs = {
        root: execution.outputFile("."),
        out: execution.outputFile([(params["out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Convert data in the fixel directory format into a 4D image of 3-vectors.
 *
 * If a fixel data file is provided as input, then the 3-vectors in the output image will be scaled based on the data in that file. If the input is instead the fixel directory, or the index or directions file, then all output 3-vectors will possess unit norm.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Fixel2peaksOutputs`).
 */
function fixel2peaks_execute(
    params: Fixel2peaksParameters,
    execution: Execution,
): Fixel2peaksOutputs {
    params = execution.params(params)
    const cargs = fixel2peaks_cargs(params, execution)
    const ret = fixel2peaks_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert data in the fixel directory format into a 4D image of 3-vectors.
 *
 * If a fixel data file is provided as input, then the 3-vectors in the output image will be scaled based on the data in that file. If the input is instead the fixel directory, or the index or directions file, then all output 3-vectors will possess unit norm.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param in_ the input fixel information
 * @param out the output peaks image
 * @param number_ maximum number of fixels in each voxel (default: based on input data)
 * @param nan fill excess peak data with NaNs rather than zeroes
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fixel2peaksOutputs`).
 */
function fixel2peaks(
    in_: Fixel2peaksVariousStringParameters | Fixel2peaksVariousFileParameters,
    out: string,
    number_: number | null = null,
    nan: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fixel2peaksConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Fixel2peaksOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIXEL2PEAKS_METADATA);
    const params = fixel2peaks_params(in_, out, number_, nan, info, quiet, debug, force, nthreads, config, help, version)
    return fixel2peaks_execute(params, execution);
}


export {
      FIXEL2PEAKS_METADATA,
      Fixel2peaksConfigParameters,
      Fixel2peaksOutputs,
      Fixel2peaksParameters,
      Fixel2peaksVariousFileParameters,
      Fixel2peaksVariousStringParameters,
      fixel2peaks,
      fixel2peaks_cargs,
      fixel2peaks_config_cargs,
      fixel2peaks_config_params,
      fixel2peaks_execute,
      fixel2peaks_outputs,
      fixel2peaks_params,
      fixel2peaks_various_file_cargs,
      fixel2peaks_various_file_params,
      fixel2peaks_various_string_cargs,
      fixel2peaks_various_string_params,
};
