// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const JKGCATRAIN_METADATA: Metadata = {
    id: "2fc935b295a01c3e8c5075c012db63cd4ba471d7.boutiques",
    name: "jkgcatrain",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface JkgcatrainParameters {
    "@type": "freesurfer.jkgcatrain";
    "gca_directory": string;
    "iteration_number"?: number | null | undefined;
    "num_threads"?: number | null | undefined;
    "no_submit": boolean;
    "mail_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.jkgcatrain": jkgcatrain_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `jkgcatrain(...)`.
 *
 * @interface
 */
interface JkgcatrainOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param gca_directory Output directory from gcatrain.
 * @param iteration_number Iteration number (usually 2).
 * @param num_threads Number of threads to use.
 * @param no_submit Run serially, do not use pbsubmit.
 * @param mail_flag Mail to user when jobs are pbsubmitted or finished.
 *
 * @returns Parameter dictionary
 */
function jkgcatrain_params(
    gca_directory: string,
    iteration_number: number | null = null,
    num_threads: number | null = null,
    no_submit: boolean = false,
    mail_flag: boolean = false,
): JkgcatrainParameters {
    const params = {
        "@type": "freesurfer.jkgcatrain" as const,
        "gca_directory": gca_directory,
        "no_submit": no_submit,
        "mail_flag": mail_flag,
    };
    if (iteration_number !== null) {
        params["iteration_number"] = iteration_number;
    }
    if (num_threads !== null) {
        params["num_threads"] = num_threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function jkgcatrain_cargs(
    params: JkgcatrainParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("jkgcatrain");
    cargs.push(
        "--g",
        (params["gca_directory"] ?? null)
    );
    if ((params["iteration_number"] ?? null) !== null) {
        cargs.push(
            "--iter",
            String((params["iteration_number"] ?? null))
        );
    }
    if ((params["num_threads"] ?? null) !== null) {
        cargs.push(
            "--nthreads",
            String((params["num_threads"] ?? null))
        );
    }
    if ((params["no_submit"] ?? null)) {
        cargs.push("--no-submit");
    }
    if ((params["mail_flag"] ?? null)) {
        cargs.push("--pb-m");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function jkgcatrain_outputs(
    params: JkgcatrainParameters,
    execution: Execution,
): JkgcatrainOutputs {
    const ret: JkgcatrainOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * jkgcatrain
 *
 * Jackknife training of GCA using existing output from gcatrain.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `JkgcatrainOutputs`).
 */
function jkgcatrain_execute(
    params: JkgcatrainParameters,
    runner: Runner | null = null,
): JkgcatrainOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(JKGCATRAIN_METADATA);
    params = execution.params(params)
    const cargs = jkgcatrain_cargs(params, execution)
    const ret = jkgcatrain_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * jkgcatrain
 *
 * Jackknife training of GCA using existing output from gcatrain.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param gca_directory Output directory from gcatrain.
 * @param iteration_number Iteration number (usually 2).
 * @param num_threads Number of threads to use.
 * @param no_submit Run serially, do not use pbsubmit.
 * @param mail_flag Mail to user when jobs are pbsubmitted or finished.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `JkgcatrainOutputs`).
 */
function jkgcatrain(
    gca_directory: string,
    iteration_number: number | null = null,
    num_threads: number | null = null,
    no_submit: boolean = false,
    mail_flag: boolean = false,
    runner: Runner | null = null,
): JkgcatrainOutputs {
    const params = jkgcatrain_params(gca_directory, iteration_number, num_threads, no_submit, mail_flag)
    return jkgcatrain_execute(params, runner);
}


export {
      JKGCATRAIN_METADATA,
      JkgcatrainOutputs,
      JkgcatrainParameters,
      jkgcatrain,
      jkgcatrain_execute,
      jkgcatrain_params,
};
