// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SS3T_CSD_BETA1_METADATA: Metadata = {
    id: "02df08185e6be9ec2c2813ee30e45a9daebade1a.boutiques",
    name: "ss3t_csd_beta1",
    package: "mrtrix3tissue",
    container_image_tag: "brainlife/3tissue:5.2.8",
};


interface Ss3tCsdBeta1ConfigParameters {
    "@type": "mrtrix3tissue.ss3t_csd_beta1.config";
    "key": string;
    "value": string;
}


interface Ss3tCsdBeta1ResponseOdfParameters {
    "@type": "mrtrix3tissue.ss3t_csd_beta1.response_odf";
    "response": InputPathType;
    "odf": string;
}


interface Ss3tCsdBeta1Parameters {
    "@type": "mrtrix3tissue.ss3t_csd_beta1";
    "mask"?: InputPathType | null | undefined;
    "bzero_pct"?: number | null | undefined;
    "niter"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Ss3tCsdBeta1ConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "dwi": InputPathType;
    "response_odf": Array<Ss3tCsdBeta1ResponseOdfParameters>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix3tissue.ss3t_csd_beta1": ss3t_csd_beta1_cargs,
        "mrtrix3tissue.ss3t_csd_beta1.config": ss3t_csd_beta1_config_cargs,
        "mrtrix3tissue.ss3t_csd_beta1.response_odf": ss3t_csd_beta1_response_odf_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix3tissue.ss3t_csd_beta1": ss3t_csd_beta1_outputs,
        "mrtrix3tissue.ss3t_csd_beta1.response_odf": ss3t_csd_beta1_response_odf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function ss3t_csd_beta1_config_params(
    key: string,
    value: string,
): Ss3tCsdBeta1ConfigParameters {
    const params = {
        "@type": "mrtrix3tissue.ss3t_csd_beta1.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ss3t_csd_beta1_config_cargs(
    params: Ss3tCsdBeta1ConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `Array<Ss3tCsdBeta1ResponseOdfParameters>(...)`.
 *
 * @interface
 */
interface Ss3tCsdBeta1ResponseOdfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output ODF image
     */
    odf: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param response input tissue response
 * @param odf output ODF image
 *
 * @returns Parameter dictionary
 */
function ss3t_csd_beta1_response_odf_params(
    response: InputPathType,
    odf: string,
): Ss3tCsdBeta1ResponseOdfParameters {
    const params = {
        "@type": "mrtrix3tissue.ss3t_csd_beta1.response_odf" as const,
        "response": response,
        "odf": odf,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ss3t_csd_beta1_response_odf_cargs(
    params: Ss3tCsdBeta1ResponseOdfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["response"] ?? null)));
    cargs.push((params["odf"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ss3t_csd_beta1_response_odf_outputs(
    params: Ss3tCsdBeta1ResponseOdfParameters,
    execution: Execution,
): Ss3tCsdBeta1ResponseOdfOutputs {
    const ret: Ss3tCsdBeta1ResponseOdfOutputs = {
        root: execution.outputFile("."),
        odf: execution.outputFile([(params["odf"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `ss3t_csd_beta1(...)`.
 *
 * @interface
 */
interface Ss3tCsdBeta1Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `ss3t_csd_beta1_response_odf_outputs`.This is a list of outputs with the same length and order as the inputs.
     */
    response_odf: Array<Ss3tCsdBeta1ResponseOdfOutputs>;
}


/**
 * Build parameters.
 *
 * @param dwi the input diffusion-weighted image
 * @param response_odf pairs of input tissue response and output ODF images
 * @param mask only perform computation within the specified binary brain mask image.
 * @param bzero_pct the threshold below which the amplitude of the FOD is assumed to be zero, expressed as an absolute amplitude (default = 0).
 * @param niter the maximum number of iterations to perform for each voxel (default = 50). Use '-niter 0' for a linear unconstrained spherical deconvolution.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function ss3t_csd_beta1_params(
    dwi: InputPathType,
    response_odf: Array<Ss3tCsdBeta1ResponseOdfParameters>,
    mask: InputPathType | null = null,
    bzero_pct: number | null = null,
    niter: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Ss3tCsdBeta1ConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Ss3tCsdBeta1Parameters {
    const params = {
        "@type": "mrtrix3tissue.ss3t_csd_beta1" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "dwi": dwi,
        "response_odf": response_odf,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (bzero_pct !== null) {
        params["bzero_pct"] = bzero_pct;
    }
    if (niter !== null) {
        params["niter"] = niter;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ss3t_csd_beta1_cargs(
    params: Ss3tCsdBeta1Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ss3t_csd_beta1");
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["bzero_pct"] ?? null) !== null) {
        cargs.push(
            "-bzero_pct",
            String((params["bzero_pct"] ?? null))
        );
    }
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["niter"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["dwi"] ?? null)));
    cargs.push(...(params["response_odf"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ss3t_csd_beta1_outputs(
    params: Ss3tCsdBeta1Parameters,
    execution: Execution,
): Ss3tCsdBeta1Outputs {
    const ret: Ss3tCsdBeta1Outputs = {
        root: execution.outputFile("."),
        response_odf: (params["response_odf"] ?? null).map(i => dynOutputs(i["@type"])?.(i, execution) ?? null),
    };
    return ret;
}


/**
 * SS3T-CSD: beta 1 implementation
 *
 * * Dhollander, T. & Connelly, A. A novel iterative approach to reap the benefits of multi-tissue CSD from just single-shell (+b=0) diffusion MRI data. Proc Intl Soc Mag Reson Med, 2016, 3010.
 *
 * Author: MRTrix3Tissue Developers
 *
 * URL: https://3tissue.github.io/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Ss3tCsdBeta1Outputs`).
 */
function ss3t_csd_beta1_execute(
    params: Ss3tCsdBeta1Parameters,
    execution: Execution,
): Ss3tCsdBeta1Outputs {
    params = execution.params(params)
    const cargs = ss3t_csd_beta1_cargs(params, execution)
    const ret = ss3t_csd_beta1_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SS3T-CSD: beta 1 implementation
 *
 * * Dhollander, T. & Connelly, A. A novel iterative approach to reap the benefits of multi-tissue CSD from just single-shell (+b=0) diffusion MRI data. Proc Intl Soc Mag Reson Med, 2016, 3010.
 *
 * Author: MRTrix3Tissue Developers
 *
 * URL: https://3tissue.github.io/
 *
 * @param dwi the input diffusion-weighted image
 * @param response_odf pairs of input tissue response and output ODF images
 * @param mask only perform computation within the specified binary brain mask image.
 * @param bzero_pct the threshold below which the amplitude of the FOD is assumed to be zero, expressed as an absolute amplitude (default = 0).
 * @param niter the maximum number of iterations to perform for each voxel (default = 50). Use '-niter 0' for a linear unconstrained spherical deconvolution.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Ss3tCsdBeta1Outputs`).
 */
function ss3t_csd_beta1(
    dwi: InputPathType,
    response_odf: Array<Ss3tCsdBeta1ResponseOdfParameters>,
    mask: InputPathType | null = null,
    bzero_pct: number | null = null,
    niter: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Ss3tCsdBeta1ConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Ss3tCsdBeta1Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SS3T_CSD_BETA1_METADATA);
    const params = ss3t_csd_beta1_params(dwi, response_odf, mask, bzero_pct, niter, info, quiet, debug, force, nthreads, config, help, version)
    return ss3t_csd_beta1_execute(params, execution);
}


export {
      SS3T_CSD_BETA1_METADATA,
      Ss3tCsdBeta1ConfigParameters,
      Ss3tCsdBeta1Outputs,
      Ss3tCsdBeta1Parameters,
      Ss3tCsdBeta1ResponseOdfOutputs,
      Ss3tCsdBeta1ResponseOdfParameters,
      ss3t_csd_beta1,
      ss3t_csd_beta1_cargs,
      ss3t_csd_beta1_config_cargs,
      ss3t_csd_beta1_config_params,
      ss3t_csd_beta1_execute,
      ss3t_csd_beta1_outputs,
      ss3t_csd_beta1_params,
      ss3t_csd_beta1_response_odf_cargs,
      ss3t_csd_beta1_response_odf_outputs,
      ss3t_csd_beta1_response_odf_params,
};
