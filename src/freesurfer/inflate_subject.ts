// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const INFLATE_SUBJECT_METADATA: Metadata = {
    id: "6029c2b4a651632f9eac7ca7ed954a7f944c2c59.boutiques",
    name: "inflate_subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface InflateSubjectParameters {
    "@type"?: "freesurfer/inflate_subject";
    "args"?: string | null | undefined;
}
type InflateSubjectParametersTagged = Required<Pick<InflateSubjectParameters, '@type'>> & InflateSubjectParameters;


/**
 * Output object returned when calling `InflateSubjectParameters(...)`.
 *
 * @interface
 */
interface InflateSubjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of inflate_subject command
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param args Arguments for the inflate_subject command
 *
 * @returns Parameter dictionary
 */
function inflate_subject_params(
    args: string | null = null,
): InflateSubjectParametersTagged {
    const params = {
        "@type": "freesurfer/inflate_subject" as const,
    };
    if (args !== null) {
        params["args"] = args;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function inflate_subject_cargs(
    params: InflateSubjectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("inflate_subject");
    if ((params["args"] ?? null) !== null) {
        cargs.push((params["args"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function inflate_subject_outputs(
    params: InflateSubjectParameters,
    execution: Execution,
): InflateSubjectOutputs {
    const ret: InflateSubjectOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["args"] ?? null) !== null) ? execution.outputFile([(params["args"] ?? null), "_output.txt"].join('')) : null,
    };
    return ret;
}


/**
 * inflate_subject
 *
 * Inflate subject script for FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `InflateSubjectOutputs`).
 */
function inflate_subject_execute(
    params: InflateSubjectParameters,
    runner: Runner | null = null,
): InflateSubjectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(INFLATE_SUBJECT_METADATA);
    params = execution.params(params)
    const cargs = inflate_subject_cargs(params, execution)
    const ret = inflate_subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * inflate_subject
 *
 * Inflate subject script for FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param args Arguments for the inflate_subject command
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `InflateSubjectOutputs`).
 */
function inflate_subject(
    args: string | null = null,
    runner: Runner | null = null,
): InflateSubjectOutputs {
    const params = inflate_subject_params(args)
    return inflate_subject_execute(params, runner);
}


export {
      INFLATE_SUBJECT_METADATA,
      InflateSubjectOutputs,
      inflate_subject,
      inflate_subject_execute,
      inflate_subject_params,
};
