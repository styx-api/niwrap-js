// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_ALIGN_LONG_CSH_METADATA: Metadata = {
    id: "3dac0db504b68600ee6128715087b3a1f9eb17a0.boutiques",
    name: "mri_align_long.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriAlignLongCshParameters {
    "@type": "freesurfer.mri_align_long.csh";
    "base_id": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_align_long.csh": mri_align_long_csh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_align_long.csh": mri_align_long_csh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_align_long_csh(...)`.
 *
 * @interface
 */
interface MriAlignLongCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Aligned norm volume in base space
     */
    aligned_norm: OutputPathType;
    /**
     * Aligned aseg volume in base space
     */
    aligned_aseg: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param base_id Identifier for the base subject
 *
 * @returns Parameter dictionary
 */
function mri_align_long_csh_params(
    base_id: string,
): MriAlignLongCshParameters {
    const params = {
        "@type": "freesurfer.mri_align_long.csh" as const,
        "base_id": base_id,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_align_long_csh_cargs(
    params: MriAlignLongCshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_align_long.csh");
    cargs.push((params["base_id"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_align_long_csh_outputs(
    params: MriAlignLongCshParameters,
    execution: Execution,
): MriAlignLongCshOutputs {
    const ret: MriAlignLongCshOutputs = {
        root: execution.outputFile("."),
        aligned_norm: execution.outputFile(["[base_id].long.base/mri/norm-base.mgz"].join('')),
        aligned_aseg: execution.outputFile(["[base_id].long.base/mri/aseg.base.mgz"].join('')),
    };
    return ret;
}


/**
 * Aligns all longitudinal norm and aseg files to the base space in FreeSurfer processing.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAlignLongCshOutputs`).
 */
function mri_align_long_csh_execute(
    params: MriAlignLongCshParameters,
    runner: Runner | null = null,
): MriAlignLongCshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_ALIGN_LONG_CSH_METADATA);
    params = execution.params(params)
    const cargs = mri_align_long_csh_cargs(params, execution)
    const ret = mri_align_long_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Aligns all longitudinal norm and aseg files to the base space in FreeSurfer processing.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param base_id Identifier for the base subject
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAlignLongCshOutputs`).
 */
function mri_align_long_csh(
    base_id: string,
    runner: Runner | null = null,
): MriAlignLongCshOutputs {
    const params = mri_align_long_csh_params(base_id)
    return mri_align_long_csh_execute(params, runner);
}


export {
      MRI_ALIGN_LONG_CSH_METADATA,
      MriAlignLongCshOutputs,
      MriAlignLongCshParameters,
      mri_align_long_csh,
      mri_align_long_csh_execute,
      mri_align_long_csh_params,
};
