// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DIRFLIP_METADATA: Metadata = {
    id: "d8812d8343a227a55e2791ff77c8b329d1aaf85d.boutiques",
    name: "dirflip",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface DirflipConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type DirflipConfigParametersTagged = Required<Pick<DirflipConfigParameters, '@type'>> & DirflipConfigParameters;


interface DirflipParameters {
    "@type"?: "mrtrix/dirflip";
    "permutations"?: number | null | undefined;
    "cartesian": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<DirflipConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "in": InputPathType;
    "out": string;
}
type DirflipParametersTagged = Required<Pick<DirflipParameters, '@type'>> & DirflipParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function dirflip_config_params(
    key: string,
    value: string,
): DirflipConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dirflip_config_cargs(
    params: DirflipConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `DirflipParameters(...)`.
 *
 * @interface
 */
interface DirflipOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output files for the directions.
     */
    out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_ the input files for the directions.
 * @param out the output files for the directions.
 * @param permutations number of permutations to try (default: 100000000)
 * @param cartesian Output the directions in Cartesian coordinates [x y z] instead of [az el].
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function dirflip_params(
    in_: InputPathType,
    out: string,
    permutations: number | null = null,
    cartesian: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DirflipConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): DirflipParametersTagged {
    const params = {
        "@type": "mrtrix/dirflip" as const,
        "cartesian": cartesian,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "in": in_,
        "out": out,
    };
    if (permutations !== null) {
        params["permutations"] = permutations;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dirflip_cargs(
    params: DirflipParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dirflip");
    if ((params["permutations"] ?? null) !== null) {
        cargs.push(
            "-permutations",
            String((params["permutations"] ?? null))
        );
    }
    if ((params["cartesian"] ?? false)) {
        cargs.push("-cartesian");
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dirflip_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["in"] ?? null)));
    cargs.push((params["out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dirflip_outputs(
    params: DirflipParameters,
    execution: Execution,
): DirflipOutputs {
    const ret: DirflipOutputs = {
        root: execution.outputFile("."),
        out: execution.outputFile([(params["out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * dirflip
 *
 * Invert the polarity of individual directions so as to optimise a unipolar electrostatic repulsion model.
 *
 * The orientations themselves are not affected, only their polarity; this is necessary to ensure near-optimal distribution of DW directions for eddy-current correction.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DirflipOutputs`).
 */
function dirflip_execute(
    params: DirflipParameters,
    runner: Runner | null = null,
): DirflipOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DIRFLIP_METADATA);
    params = execution.params(params)
    const cargs = dirflip_cargs(params, execution)
    const ret = dirflip_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dirflip
 *
 * Invert the polarity of individual directions so as to optimise a unipolar electrostatic repulsion model.
 *
 * The orientations themselves are not affected, only their polarity; this is necessary to ensure near-optimal distribution of DW directions for eddy-current correction.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param in_ the input files for the directions.
 * @param out the output files for the directions.
 * @param permutations number of permutations to try (default: 100000000)
 * @param cartesian Output the directions in Cartesian coordinates [x y z] instead of [az el].
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DirflipOutputs`).
 */
function dirflip(
    in_: InputPathType,
    out: string,
    permutations: number | null = null,
    cartesian: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DirflipConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DirflipOutputs {
    const params = dirflip_params(in_, out, permutations, cartesian, info, quiet, debug, force, nthreads, config, help, version)
    return dirflip_execute(params, runner);
}


export {
      DIRFLIP_METADATA,
      DirflipOutputs,
      dirflip,
      dirflip_config_params,
      dirflip_execute,
      dirflip_params,
};
