// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_MVM_METADATA: Metadata = {
    id: "77f08ae920d7900f854bd512d3effcbc6bc7e8b4.boutiques",
    name: "3dMVM",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dMvmParameters {
    "@type": "afni.3dMVM";
    "dbgArgs"?: string | null | undefined;
    "prefix": string;
    "jobs"?: number | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "bsVars": string;
    "wsVars"?: string | null | undefined;
    "qVars"?: string | null | undefined;
    "qVarCenters"?: string | null | undefined;
    "num_glt"?: number | null | undefined;
    "gltLabel"?: string | null | undefined;
    "gltCode"?: string | null | undefined;
    "num_glf"?: number | null | undefined;
    "glfLabel"?: string | null | undefined;
    "glfCode"?: string | null | undefined;
    "dataTable": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dMVM": v_3d_mvm_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dMVM": v_3d_mvm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_mvm(...)`.
 *
 * @interface
 */
interface V3dMvmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output HEAD file in AFNI format
     */
    outfile_head: OutputPathType;
    /**
     * Output BRIK file in AFNI format
     */
    outfile_brik: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Output file name prefix
 * @param bs_vars Formula for between-subjects variables
 * @param data_table Data table for analysis
 * @param dbg_args Enable R to save parameters in a file for debugging
 * @param jobs Number of jobs for parallel processing
 * @param mask Only process voxels inside this mask
 * @param ws_vars Formula for within-subjects variables
 * @param q_vars Comma-separated list of quantitative variables (covariates)
 * @param q_var_centers Comma-separated centering values for quantitative variables
 * @param num_glt Number of general linear t-tests (GLTs)
 * @param glt_label Label for each general linear t-test (GLT)
 * @param glt_code Coding for each general linear t-test (GLT)
 * @param num_glf Number of general linear F-tests (GLFs)
 * @param glf_label Label for each general linear F-test (GLF)
 * @param glf_code Coding for each general linear F-test (GLF)
 *
 * @returns Parameter dictionary
 */
function v_3d_mvm_params(
    prefix: string,
    bs_vars: string,
    data_table: string,
    dbg_args: string | null = null,
    jobs: number | null = null,
    mask: InputPathType | null = null,
    ws_vars: string | null = null,
    q_vars: string | null = null,
    q_var_centers: string | null = null,
    num_glt: number | null = null,
    glt_label: string | null = null,
    glt_code: string | null = null,
    num_glf: number | null = null,
    glf_label: string | null = null,
    glf_code: string | null = null,
): V3dMvmParameters {
    const params = {
        "@type": "afni.3dMVM" as const,
        "prefix": prefix,
        "bsVars": bs_vars,
        "dataTable": data_table,
    };
    if (dbg_args !== null) {
        params["dbgArgs"] = dbg_args;
    }
    if (jobs !== null) {
        params["jobs"] = jobs;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (ws_vars !== null) {
        params["wsVars"] = ws_vars;
    }
    if (q_vars !== null) {
        params["qVars"] = q_vars;
    }
    if (q_var_centers !== null) {
        params["qVarCenters"] = q_var_centers;
    }
    if (num_glt !== null) {
        params["num_glt"] = num_glt;
    }
    if (glt_label !== null) {
        params["gltLabel"] = glt_label;
    }
    if (glt_code !== null) {
        params["gltCode"] = glt_code;
    }
    if (num_glf !== null) {
        params["num_glf"] = num_glf;
    }
    if (glf_label !== null) {
        params["glfLabel"] = glf_label;
    }
    if (glf_code !== null) {
        params["glfCode"] = glf_code;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_mvm_cargs(
    params: V3dMvmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dMVM");
    if ((params["dbgArgs"] ?? null) !== null) {
        cargs.push((params["dbgArgs"] ?? null));
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["jobs"] ?? null) !== null) {
        cargs.push(
            "-jobs",
            String((params["jobs"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    cargs.push(
        "-bsVars",
        (params["bsVars"] ?? null)
    );
    if ((params["wsVars"] ?? null) !== null) {
        cargs.push(
            "-wsVars",
            (params["wsVars"] ?? null)
        );
    }
    if ((params["qVars"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["qVars"] ?? null)
        );
    }
    if ((params["qVarCenters"] ?? null) !== null) {
        cargs.push(
            "-qVarCenters",
            (params["qVarCenters"] ?? null)
        );
    }
    if ((params["num_glt"] ?? null) !== null) {
        cargs.push(
            "-num_glt",
            String((params["num_glt"] ?? null))
        );
    }
    if ((params["gltLabel"] ?? null) !== null) {
        cargs.push(
            "-gltLabel",
            (params["gltLabel"] ?? null)
        );
    }
    if ((params["gltCode"] ?? null) !== null) {
        cargs.push(
            "-gltCode",
            (params["gltCode"] ?? null)
        );
    }
    if ((params["num_glf"] ?? null) !== null) {
        cargs.push(
            "-num_glf",
            String((params["num_glf"] ?? null))
        );
    }
    if ((params["glfLabel"] ?? null) !== null) {
        cargs.push(
            "-glfLabel",
            (params["glfLabel"] ?? null)
        );
    }
    if ((params["glfCode"] ?? null) !== null) {
        cargs.push(
            "-glfCode",
            (params["glfCode"] ?? null)
        );
    }
    cargs.push(
        "-dataTable",
        (params["dataTable"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_mvm_outputs(
    params: V3dMvmParameters,
    execution: Execution,
): V3dMvmOutputs {
    const ret: V3dMvmOutputs = {
        root: execution.outputFile("."),
        outfile_head: execution.outputFile([(params["prefix"] ?? null), "+tlrc.HEAD"].join('')),
        outfile_brik: execution.outputFile([(params["prefix"] ?? null), "+tlrc.BRIK"].join('')),
    };
    return ret;
}


/**
 * AFNI Group Analysis Program with Multi-Variate Modeling Approach.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dMvmOutputs`).
 */
function v_3d_mvm_execute(
    params: V3dMvmParameters,
    execution: Execution,
): V3dMvmOutputs {
    params = execution.params(params)
    const cargs = v_3d_mvm_cargs(params, execution)
    const ret = v_3d_mvm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * AFNI Group Analysis Program with Multi-Variate Modeling Approach.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Output file name prefix
 * @param bs_vars Formula for between-subjects variables
 * @param data_table Data table for analysis
 * @param dbg_args Enable R to save parameters in a file for debugging
 * @param jobs Number of jobs for parallel processing
 * @param mask Only process voxels inside this mask
 * @param ws_vars Formula for within-subjects variables
 * @param q_vars Comma-separated list of quantitative variables (covariates)
 * @param q_var_centers Comma-separated centering values for quantitative variables
 * @param num_glt Number of general linear t-tests (GLTs)
 * @param glt_label Label for each general linear t-test (GLT)
 * @param glt_code Coding for each general linear t-test (GLT)
 * @param num_glf Number of general linear F-tests (GLFs)
 * @param glf_label Label for each general linear F-test (GLF)
 * @param glf_code Coding for each general linear F-test (GLF)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dMvmOutputs`).
 */
function v_3d_mvm(
    prefix: string,
    bs_vars: string,
    data_table: string,
    dbg_args: string | null = null,
    jobs: number | null = null,
    mask: InputPathType | null = null,
    ws_vars: string | null = null,
    q_vars: string | null = null,
    q_var_centers: string | null = null,
    num_glt: number | null = null,
    glt_label: string | null = null,
    glt_code: string | null = null,
    num_glf: number | null = null,
    glf_label: string | null = null,
    glf_code: string | null = null,
    runner: Runner | null = null,
): V3dMvmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_MVM_METADATA);
    const params = v_3d_mvm_params(prefix, bs_vars, data_table, dbg_args, jobs, mask, ws_vars, q_vars, q_var_centers, num_glt, glt_label, glt_code, num_glf, glf_label, glf_code)
    return v_3d_mvm_execute(params, execution);
}


export {
      V3dMvmOutputs,
      V3dMvmParameters,
      V_3D_MVM_METADATA,
      v_3d_mvm,
      v_3d_mvm_cargs,
      v_3d_mvm_execute,
      v_3d_mvm_outputs,
      v_3d_mvm_params,
};
