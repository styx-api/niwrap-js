// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const STAT_NORMALIZE_METADATA: Metadata = {
    id: "539aab15bed68c488933181c1c8d2ed1041f0cb8.boutiques",
    name: "stat_normalize",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface StatNormalizeParameters {
    "@type": "freesurfer.stat_normalize";
    "input_sv_prefix": string;
    "output_sv_prefix": string;
    "resolution"?: number | null | undefined;
    "field_of_view"?: number | null | undefined;
    "sph_avg"?: string | null | undefined;
    "xfm_file"?: string | null | undefined;
    "fix_xfm_flag": boolean;
    "float2int_option"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.stat_normalize": stat_normalize_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `stat_normalize(...)`.
 *
 * @interface
 */
interface StatNormalizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_sv_prefix Input subject volume prefix.
 * @param output_sv_prefix Output subject volume prefix.
 * @param resolution Set output resolution in mm (default is 8mm).
 * @param field_of_view Set output field of view (default is 256).
 * @param sph_avg Average in spherical coordinates by specifying hemisphere and surface.
 * @param xfm_file Use specified transform file (subjid/mri/transforms/xfmfile).
 * @param fix_xfm_flag Fix transform for non-zero center of original volume.
 * @param float2int_option Specify float to int conversion to tkregister or round.
 *
 * @returns Parameter dictionary
 */
function stat_normalize_params(
    input_sv_prefix: string,
    output_sv_prefix: string,
    resolution: number | null = null,
    field_of_view: number | null = null,
    sph_avg: string | null = null,
    xfm_file: string | null = null,
    fix_xfm_flag: boolean = false,
    float2int_option: string | null = null,
): StatNormalizeParameters {
    const params = {
        "@type": "freesurfer.stat_normalize" as const,
        "input_sv_prefix": input_sv_prefix,
        "output_sv_prefix": output_sv_prefix,
        "fix_xfm_flag": fix_xfm_flag,
    };
    if (resolution !== null) {
        params["resolution"] = resolution;
    }
    if (field_of_view !== null) {
        params["field_of_view"] = field_of_view;
    }
    if (sph_avg !== null) {
        params["sph_avg"] = sph_avg;
    }
    if (xfm_file !== null) {
        params["xfm_file"] = xfm_file;
    }
    if (float2int_option !== null) {
        params["float2int_option"] = float2int_option;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function stat_normalize_cargs(
    params: StatNormalizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("stat_normalize");
    cargs.push((params["input_sv_prefix"] ?? null));
    cargs.push((params["output_sv_prefix"] ?? null));
    if ((params["resolution"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["resolution"] ?? null))
        );
    }
    if ((params["field_of_view"] ?? null) !== null) {
        cargs.push(
            "-f",
            String((params["field_of_view"] ?? null))
        );
    }
    if ((params["sph_avg"] ?? null) !== null) {
        cargs.push(
            "-S",
            (params["sph_avg"] ?? null)
        );
    }
    if ((params["xfm_file"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["xfm_file"] ?? null)
        );
    }
    if ((params["fix_xfm_flag"] ?? null)) {
        cargs.push("-i");
    }
    if ((params["float2int_option"] ?? null) !== null) {
        cargs.push(
            "-c",
            (params["float2int_option"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function stat_normalize_outputs(
    params: StatNormalizeParameters,
    execution: Execution,
): StatNormalizeOutputs {
    const ret: StatNormalizeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * stat_normalize
 *
 * This program will convert and average a sequence of volume-based statistics in Talairach space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `StatNormalizeOutputs`).
 */
function stat_normalize_execute(
    params: StatNormalizeParameters,
    runner: Runner | null = null,
): StatNormalizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(STAT_NORMALIZE_METADATA);
    params = execution.params(params)
    const cargs = stat_normalize_cargs(params, execution)
    const ret = stat_normalize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * stat_normalize
 *
 * This program will convert and average a sequence of volume-based statistics in Talairach space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_sv_prefix Input subject volume prefix.
 * @param output_sv_prefix Output subject volume prefix.
 * @param resolution Set output resolution in mm (default is 8mm).
 * @param field_of_view Set output field of view (default is 256).
 * @param sph_avg Average in spherical coordinates by specifying hemisphere and surface.
 * @param xfm_file Use specified transform file (subjid/mri/transforms/xfmfile).
 * @param fix_xfm_flag Fix transform for non-zero center of original volume.
 * @param float2int_option Specify float to int conversion to tkregister or round.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `StatNormalizeOutputs`).
 */
function stat_normalize(
    input_sv_prefix: string,
    output_sv_prefix: string,
    resolution: number | null = null,
    field_of_view: number | null = null,
    sph_avg: string | null = null,
    xfm_file: string | null = null,
    fix_xfm_flag: boolean = false,
    float2int_option: string | null = null,
    runner: Runner | null = null,
): StatNormalizeOutputs {
    const params = stat_normalize_params(input_sv_prefix, output_sv_prefix, resolution, field_of_view, sph_avg, xfm_file, fix_xfm_flag, float2int_option)
    return stat_normalize_execute(params, runner);
}


export {
      STAT_NORMALIZE_METADATA,
      StatNormalizeOutputs,
      StatNormalizeParameters,
      stat_normalize,
      stat_normalize_execute,
      stat_normalize_params,
};
