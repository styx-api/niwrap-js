// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TAL_COMPARE_METADATA: Metadata = {
    id: "69e7450b13f782d1237ff9c2a94dbb046eb71dae.boutiques",
    name: "tal_compare",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TalCompareParameters {
    "@type"?: "freesurfer/tal_compare";
    "ref_file": InputPathType;
    "moving_file": InputPathType;
    "output_file": string;
    "verbose": boolean;
}
type TalCompareParametersTagged = Required<Pick<TalCompareParameters, '@type'>> & TalCompareParameters;


/**
 * Output object returned when calling `TalCompareParameters(...)`.
 *
 * @interface
 */
interface TalCompareOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Comparison results output file.
     */
    comparison_results: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param ref_file Reference TAL database file.
 * @param moving_file Moving TAL database file to compare against the reference.
 * @param output_file Output file to store comparison results.
 * @param verbose Enable verbose output.
 *
 * @returns Parameter dictionary
 */
function tal_compare_params(
    ref_file: InputPathType,
    moving_file: InputPathType,
    output_file: string,
    verbose: boolean = false,
): TalCompareParametersTagged {
    const params = {
        "@type": "freesurfer/tal_compare" as const,
        "ref_file": ref_file,
        "moving_file": moving_file,
        "output_file": output_file,
        "verbose": verbose,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tal_compare_cargs(
    params: TalCompareParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tal_compare");
    cargs.push(execution.inputFile((params["ref_file"] ?? null)));
    cargs.push(execution.inputFile((params["moving_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    if ((params["verbose"] ?? false)) {
        cargs.push("-v");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tal_compare_outputs(
    params: TalCompareParameters,
    execution: Execution,
): TalCompareOutputs {
    const ret: TalCompareOutputs = {
        root: execution.outputFile("."),
        comparison_results: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * tal_compare
 *
 * Tool for comparing TAL databases.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalCompareOutputs`).
 */
function tal_compare_execute(
    params: TalCompareParameters,
    runner: Runner | null = null,
): TalCompareOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TAL_COMPARE_METADATA);
    params = execution.params(params)
    const cargs = tal_compare_cargs(params, execution)
    const ret = tal_compare_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tal_compare
 *
 * Tool for comparing TAL databases.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param ref_file Reference TAL database file.
 * @param moving_file Moving TAL database file to compare against the reference.
 * @param output_file Output file to store comparison results.
 * @param verbose Enable verbose output.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalCompareOutputs`).
 */
function tal_compare(
    ref_file: InputPathType,
    moving_file: InputPathType,
    output_file: string,
    verbose: boolean = false,
    runner: Runner | null = null,
): TalCompareOutputs {
    const params = tal_compare_params(ref_file, moving_file, output_file, verbose)
    return tal_compare_execute(params, runner);
}


export {
      TAL_COMPARE_METADATA,
      TalCompareOutputs,
      tal_compare,
      tal_compare_execute,
      tal_compare_params,
};
