// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_REGISTER_TO_LABEL_METADATA: Metadata = {
    id: "b00fbe227f09c99f90b831e88a28b35aea383a7c.boutiques",
    name: "mris_register_to_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRegisterToLabelParameters {
    "@type"?: "freesurfer/mris_register_to_label";
    "surface": InputPathType;
    "regfile": InputPathType;
    "mri_reg": InputPathType;
    "mov_volume": InputPathType;
    "resolution": number;
    "max_rot"?: number | null | undefined;
    "max_trans"?: number | null | undefined;
    "subject"?: string | null | undefined;
    "label"?: string | null | undefined;
    "out_reg"?: string | null | undefined;
    "downsample"?: number | null | undefined;
    "cost_file"?: InputPathType | null | undefined;
}
type MrisRegisterToLabelParametersTagged = Required<Pick<MrisRegisterToLabelParameters, '@type'>> & MrisRegisterToLabelParameters;


/**
 * Output object returned when calling `MrisRegisterToLabelParameters(...)`.
 *
 * @interface
 */
interface MrisRegisterToLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface Surface file for registration
 * @param regfile Registration file
 * @param mri_reg Volume for MRI registration
 * @param mov_volume Volume on which label points are specified
 * @param resolution Resolution for calculations
 * @param max_rot Maximum angle (degrees) to search over for rotation
 * @param max_trans Maximum translation (mm) to search over
 * @param subject Specify name of subject for register.dat file
 * @param label Load label and limit calculations to it
 * @param out_reg Output registration at lowest cost
 * @param downsample Downsample input volume by a factor
 * @param cost_file Cost file for registration
 *
 * @returns Parameter dictionary
 */
function mris_register_to_label_params(
    surface: InputPathType,
    regfile: InputPathType,
    mri_reg: InputPathType,
    mov_volume: InputPathType,
    resolution: number,
    max_rot: number | null = null,
    max_trans: number | null = null,
    subject: string | null = null,
    label: string | null = null,
    out_reg: string | null = null,
    downsample: number | null = null,
    cost_file: InputPathType | null = null,
): MrisRegisterToLabelParametersTagged {
    const params = {
        "@type": "freesurfer/mris_register_to_label" as const,
        "surface": surface,
        "regfile": regfile,
        "mri_reg": mri_reg,
        "mov_volume": mov_volume,
        "resolution": resolution,
    };
    if (max_rot !== null) {
        params["max_rot"] = max_rot;
    }
    if (max_trans !== null) {
        params["max_trans"] = max_trans;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (out_reg !== null) {
        params["out_reg"] = out_reg;
    }
    if (downsample !== null) {
        params["downsample"] = downsample;
    }
    if (cost_file !== null) {
        params["cost_file"] = cost_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_register_to_label_cargs(
    params: MrisRegisterToLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_register_to_label");
    cargs.push(
        "--surf",
        execution.inputFile((params["surface"] ?? null))
    );
    cargs.push(
        "--reg",
        execution.inputFile((params["regfile"] ?? null))
    );
    cargs.push(
        "--mri_reg",
        execution.inputFile((params["mri_reg"] ?? null))
    );
    cargs.push(
        "--mov",
        execution.inputFile((params["mov_volume"] ?? null))
    );
    cargs.push(
        "--res",
        String((params["resolution"] ?? null))
    );
    if ((params["max_rot"] ?? null) !== null) {
        cargs.push(
            "--max_rot",
            String((params["max_rot"] ?? null))
        );
    }
    if ((params["max_trans"] ?? null) !== null) {
        cargs.push(
            "--max_trans",
            String((params["max_trans"] ?? null))
        );
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "--label",
            (params["label"] ?? null)
        );
    }
    if ((params["out_reg"] ?? null) !== null) {
        cargs.push(
            "--out-reg",
            (params["out_reg"] ?? null)
        );
    }
    if ((params["downsample"] ?? null) !== null) {
        cargs.push(
            "--downsample",
            String((params["downsample"] ?? null))
        );
    }
    if ((params["cost_file"] ?? null) !== null) {
        cargs.push(
            "--cost",
            execution.inputFile((params["cost_file"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_register_to_label_outputs(
    params: MrisRegisterToLabelParameters,
    execution: Execution,
): MrisRegisterToLabelOutputs {
    const ret: MrisRegisterToLabelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_register_to_label
 *
 * Register a surface to a volume using a label.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRegisterToLabelOutputs`).
 */
function mris_register_to_label_execute(
    params: MrisRegisterToLabelParameters,
    runner: Runner | null = null,
): MrisRegisterToLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_REGISTER_TO_LABEL_METADATA);
    params = execution.params(params)
    const cargs = mris_register_to_label_cargs(params, execution)
    const ret = mris_register_to_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_register_to_label
 *
 * Register a surface to a volume using a label.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param surface Surface file for registration
 * @param regfile Registration file
 * @param mri_reg Volume for MRI registration
 * @param mov_volume Volume on which label points are specified
 * @param resolution Resolution for calculations
 * @param max_rot Maximum angle (degrees) to search over for rotation
 * @param max_trans Maximum translation (mm) to search over
 * @param subject Specify name of subject for register.dat file
 * @param label Load label and limit calculations to it
 * @param out_reg Output registration at lowest cost
 * @param downsample Downsample input volume by a factor
 * @param cost_file Cost file for registration
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRegisterToLabelOutputs`).
 */
function mris_register_to_label(
    surface: InputPathType,
    regfile: InputPathType,
    mri_reg: InputPathType,
    mov_volume: InputPathType,
    resolution: number,
    max_rot: number | null = null,
    max_trans: number | null = null,
    subject: string | null = null,
    label: string | null = null,
    out_reg: string | null = null,
    downsample: number | null = null,
    cost_file: InputPathType | null = null,
    runner: Runner | null = null,
): MrisRegisterToLabelOutputs {
    const params = mris_register_to_label_params(surface, regfile, mri_reg, mov_volume, resolution, max_rot, max_trans, subject, label, out_reg, downsample, cost_file)
    return mris_register_to_label_execute(params, runner);
}


export {
      MRIS_REGISTER_TO_LABEL_METADATA,
      MrisRegisterToLabelOutputs,
      mris_register_to_label,
      mris_register_to_label_execute,
      mris_register_to_label_params,
};
