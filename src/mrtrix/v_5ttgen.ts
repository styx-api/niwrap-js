// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_5TTGEN_METADATA: Metadata = {
    id: "610645ba3a7aae051da2d03b93a8a05133c9b7bb.boutiques",
    name: "5ttgen",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface V5ttgenFreesurferParameters {
    "@type": "mrtrix.5ttgen.freesurfer";
    "input": InputPathType;
    "output": string;
    "lut"?: InputPathType | null | undefined;
}


interface V5ttgenFslParameters {
    "@type": "mrtrix.5ttgen.fsl";
    "input": InputPathType;
    "output": string;
    "t2"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "premasked": boolean;
}


interface V5ttgenGifParameters {
    "@type": "mrtrix.5ttgen.gif";
    "input": InputPathType;
    "output": string;
}


interface V5ttgenHsvsParameters {
    "@type": "mrtrix.5ttgen.hsvs";
    "input": InputPathType;
    "output": string;
    "template"?: InputPathType | null | undefined;
    "hippocampi"?: "subfields" | "first" | "aseg" | null | undefined;
    "thalami"?: "nuclei" | "first" | "aseg" | null | undefined;
    "white_stem": boolean;
}


interface V5ttgenConfigParameters {
    "@type": "mrtrix.5ttgen.config";
    "key": string;
    "value": string;
}


interface V5ttgenParameters {
    "@type": "mrtrix.5ttgen";
    "algorithm": V5ttgenFreesurferParameters | V5ttgenFslParameters | V5ttgenGifParameters | V5ttgenHsvsParameters;
    "nocrop": boolean;
    "sgm_amyg_hipp": boolean;
    "nocleanup": boolean;
    "scratch"?: string | null | undefined;
    "continue"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<V5ttgenConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.5ttgen": v_5ttgen_cargs,
        "mrtrix.5ttgen.freesurfer": v_5ttgen_freesurfer_cargs,
        "mrtrix.5ttgen.fsl": v_5ttgen_fsl_cargs,
        "mrtrix.5ttgen.gif": v_5ttgen_gif_cargs,
        "mrtrix.5ttgen.hsvs": v_5ttgen_hsvs_cargs,
        "mrtrix.5ttgen.config": v_5ttgen_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.5ttgen": v_5ttgen_outputs,
        "mrtrix.5ttgen.freesurfer": v_5ttgen_freesurfer_outputs,
        "mrtrix.5ttgen.fsl": v_5ttgen_fsl_outputs,
        "mrtrix.5ttgen.gif": v_5ttgen_gif_outputs,
        "mrtrix.5ttgen.hsvs": v_5ttgen_hsvs_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `V5ttgenFreesurferParameters(...)`.
 *
 * @interface
 */
interface V5ttgenFreesurferOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output 5TT image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input FreeSurfer parcellation image (any image containing 'aseg' in its name)
 * @param output The output 5TT image
 * @param lut Manually provide path to the lookup table on which the input parcellation image is based (e.g. FreeSurferColorLUT.txt)
 *
 * @returns Parameter dictionary
 */
function v_5ttgen_freesurfer_params(
    input: InputPathType,
    output: string,
    lut: InputPathType | null = null,
): V5ttgenFreesurferParameters {
    const params = {
        "@type": "mrtrix.5ttgen.freesurfer" as const,
        "input": input,
        "output": output,
    };
    if (lut !== null) {
        params["lut"] = lut;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttgen_freesurfer_cargs(
    params: V5ttgenFreesurferParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("freesurfer");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    if ((params["lut"] ?? null) !== null) {
        cargs.push(
            "-lut",
            execution.inputFile((params["lut"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5ttgen_freesurfer_outputs(
    params: V5ttgenFreesurferParameters,
    execution: Execution,
): V5ttgenFreesurferOutputs {
    const ret: V5ttgenFreesurferOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `V5ttgenFslParameters(...)`.
 *
 * @interface
 */
interface V5ttgenFslOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output 5TT image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input T1-weighted image
 * @param output The output 5TT image
 * @param t2 Provide a T2-weighted image in addition to the default T1-weighted image; this will be used as a second input to FSL FAST
 * @param mask Manually provide a brain mask, rather than deriving one in the script
 * @param premasked Indicate that brain masking has already been applied to the input image
 *
 * @returns Parameter dictionary
 */
function v_5ttgen_fsl_params(
    input: InputPathType,
    output: string,
    t2: InputPathType | null = null,
    mask: InputPathType | null = null,
    premasked: boolean = false,
): V5ttgenFslParameters {
    const params = {
        "@type": "mrtrix.5ttgen.fsl" as const,
        "input": input,
        "output": output,
        "premasked": premasked,
    };
    if (t2 !== null) {
        params["t2"] = t2;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttgen_fsl_cargs(
    params: V5ttgenFslParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsl");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    if ((params["t2"] ?? null) !== null) {
        cargs.push(
            "-t2",
            execution.inputFile((params["t2"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["premasked"] ?? null)) {
        cargs.push("-premasked");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5ttgen_fsl_outputs(
    params: V5ttgenFslParameters,
    execution: Execution,
): V5ttgenFslOutputs {
    const ret: V5ttgenFslOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `V5ttgenGifParameters(...)`.
 *
 * @interface
 */
interface V5ttgenGifOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output 5TT image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input Geodesic Information Flow (GIF) segmentation image
 * @param output The output 5TT image
 *
 * @returns Parameter dictionary
 */
function v_5ttgen_gif_params(
    input: InputPathType,
    output: string,
): V5ttgenGifParameters {
    const params = {
        "@type": "mrtrix.5ttgen.gif" as const,
        "input": input,
        "output": output,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttgen_gif_cargs(
    params: V5ttgenGifParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gif");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5ttgen_gif_outputs(
    params: V5ttgenGifParameters,
    execution: Execution,
): V5ttgenGifOutputs {
    const ret: V5ttgenGifOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `V5ttgenHsvsParameters(...)`.
 *
 * @interface
 */
interface V5ttgenHsvsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output 5TT image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input FreeSurfer subject directory
 * @param output The output 5TT image
 * @param template Provide an image that will form the template for the generated 5TT image
 * @param hippocampi Select method to be used for hippocampi (& amygdalae) segmentation; options are: subfields,first,aseg
 * @param thalami Select method to be used for thalamic segmentation; options are: nuclei,first,aseg
 * @param white_stem Classify the brainstem as white matter
 *
 * @returns Parameter dictionary
 */
function v_5ttgen_hsvs_params(
    input: InputPathType,
    output: string,
    template: InputPathType | null = null,
    hippocampi: "subfields" | "first" | "aseg" | null = null,
    thalami: "nuclei" | "first" | "aseg" | null = null,
    white_stem: boolean = false,
): V5ttgenHsvsParameters {
    const params = {
        "@type": "mrtrix.5ttgen.hsvs" as const,
        "input": input,
        "output": output,
        "white_stem": white_stem,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (hippocampi !== null) {
        params["hippocampi"] = hippocampi;
    }
    if (thalami !== null) {
        params["thalami"] = thalami;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttgen_hsvs_cargs(
    params: V5ttgenHsvsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("hsvs");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["hippocampi"] ?? null) !== null) {
        cargs.push(
            "-hippocampi",
            (params["hippocampi"] ?? null)
        );
    }
    if ((params["thalami"] ?? null) !== null) {
        cargs.push(
            "-thalami",
            (params["thalami"] ?? null)
        );
    }
    if ((params["white_stem"] ?? null)) {
        cargs.push("-white_stem");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5ttgen_hsvs_outputs(
    params: V5ttgenHsvsParameters,
    execution: Execution,
): V5ttgenHsvsOutputs {
    const ret: V5ttgenHsvsOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function v_5ttgen_config_params(
    key: string,
    value: string,
): V5ttgenConfigParameters {
    const params = {
        "@type": "mrtrix.5ttgen.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttgen_config_cargs(
    params: V5ttgenConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `v_5ttgen(...)`.
 *
 * @interface
 */
interface V5ttgenOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `V5ttgenFreesurferParameters` or `V5ttgenFslParameters` or `V5ttgenGifParameters` or `V5ttgenHsvsParameters`.
     */
    algorithm: V5ttgenFreesurferOutputs | V5ttgenFslOutputs | V5ttgenGifOutputs | V5ttgenHsvsOutputs;
}


/**
 * Build parameters.
 *
 * @param algorithm Select the algorithm to be used to complete the script operation; additional details and options become available once an algorithm is nominated. Options are: freesurfer, fsl, gif, hsvs
 * @param nocrop Do NOT crop the resulting 5TT image to reduce its size (keep the same dimensions as the input image)
 * @param sgm_amyg_hipp Represent the amygdalae and hippocampi as sub-cortical grey matter in the 5TT image
 * @param nocleanup do not delete intermediate files during script execution, and do not delete scratch directory at script completion.
 * @param scratch manually specify the path in which to generate the scratch directory.
 * @param continue_ continue the script from a previous execution; must provide the scratch directory path, and the name of the last successfully-generated file.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function v_5ttgen_params(
    algorithm: V5ttgenFreesurferParameters | V5ttgenFslParameters | V5ttgenGifParameters | V5ttgenHsvsParameters,
    nocrop: boolean = false,
    sgm_amyg_hipp: boolean = false,
    nocleanup: boolean = false,
    scratch: string | null = null,
    continue_: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5ttgenConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): V5ttgenParameters {
    const params = {
        "@type": "mrtrix.5ttgen" as const,
        "algorithm": algorithm,
        "nocrop": nocrop,
        "sgm_amyg_hipp": sgm_amyg_hipp,
        "nocleanup": nocleanup,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
    };
    if (scratch !== null) {
        params["scratch"] = scratch;
    }
    if (continue_ !== null) {
        params["continue"] = continue_;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttgen_cargs(
    params: V5ttgenParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("5ttgen");
    cargs.push(...dynCargs((params["algorithm"] ?? null)["@type"])((params["algorithm"] ?? null), execution));
    if ((params["nocrop"] ?? null)) {
        cargs.push("-nocrop");
    }
    if ((params["sgm_amyg_hipp"] ?? null)) {
        cargs.push("-sgm_amyg_hipp");
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("-nocleanup");
    }
    if ((params["scratch"] ?? null) !== null) {
        cargs.push(
            "-scratch",
            (params["scratch"] ?? null)
        );
    }
    if ((params["continue"] ?? null) !== null) {
        cargs.push(
            "-continue",
            (params["continue"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5ttgen_outputs(
    params: V5ttgenParameters,
    execution: Execution,
): V5ttgenOutputs {
    const ret: V5ttgenOutputs = {
        root: execution.outputFile("."),
        algorithm: dynOutputs((params["algorithm"] ?? null)["@type"])?.((params["algorithm"] ?? null), execution),
    };
    return ret;
}


/**
 * Generate a 5TT image suitable for ACT.
 *
 * 5ttgen acts as a 'master' script for generating a five-tissue-type (5TT) segmented tissue image suitable for use in Anatomically-Constrained Tractography (ACT). A range of different algorithms are available for completing this task. When using this script, the name of the algorithm to be used must appear as the first argument on the command-line after '5ttgen'. The subsequent compulsory arguments and options available depend on the particular algorithm being invoked.
 * Each algorithm available also has its own help page, including necessary references; e.g. to see the help page of the 'fsl' algorithm, type '5ttgen fsl'.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V5ttgenOutputs`).
 */
function v_5ttgen_execute(
    params: V5ttgenParameters,
    execution: Execution,
): V5ttgenOutputs {
    params = execution.params(params)
    const cargs = v_5ttgen_cargs(params, execution)
    const ret = v_5ttgen_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Generate a 5TT image suitable for ACT.
 *
 * 5ttgen acts as a 'master' script for generating a five-tissue-type (5TT) segmented tissue image suitable for use in Anatomically-Constrained Tractography (ACT). A range of different algorithms are available for completing this task. When using this script, the name of the algorithm to be used must appear as the first argument on the command-line after '5ttgen'. The subsequent compulsory arguments and options available depend on the particular algorithm being invoked.
 * Each algorithm available also has its own help page, including necessary references; e.g. to see the help page of the 'fsl' algorithm, type '5ttgen fsl'.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param algorithm Select the algorithm to be used to complete the script operation; additional details and options become available once an algorithm is nominated. Options are: freesurfer, fsl, gif, hsvs
 * @param nocrop Do NOT crop the resulting 5TT image to reduce its size (keep the same dimensions as the input image)
 * @param sgm_amyg_hipp Represent the amygdalae and hippocampi as sub-cortical grey matter in the 5TT image
 * @param nocleanup do not delete intermediate files during script execution, and do not delete scratch directory at script completion.
 * @param scratch manually specify the path in which to generate the scratch directory.
 * @param continue_ continue the script from a previous execution; must provide the scratch directory path, and the name of the last successfully-generated file.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V5ttgenOutputs`).
 */
function v_5ttgen(
    algorithm: V5ttgenFreesurferParameters | V5ttgenFslParameters | V5ttgenGifParameters | V5ttgenHsvsParameters,
    nocrop: boolean = false,
    sgm_amyg_hipp: boolean = false,
    nocleanup: boolean = false,
    scratch: string | null = null,
    continue_: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5ttgenConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): V5ttgenOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_5TTGEN_METADATA);
    const params = v_5ttgen_params(algorithm, nocrop, sgm_amyg_hipp, nocleanup, scratch, continue_, info, quiet, debug, force, nthreads, config, help, version)
    return v_5ttgen_execute(params, execution);
}


export {
      V5ttgenConfigParameters,
      V5ttgenFreesurferOutputs,
      V5ttgenFreesurferParameters,
      V5ttgenFslOutputs,
      V5ttgenFslParameters,
      V5ttgenGifOutputs,
      V5ttgenGifParameters,
      V5ttgenHsvsOutputs,
      V5ttgenHsvsParameters,
      V5ttgenOutputs,
      V5ttgenParameters,
      V_5TTGEN_METADATA,
      v_5ttgen,
      v_5ttgen_cargs,
      v_5ttgen_config_cargs,
      v_5ttgen_config_params,
      v_5ttgen_execute,
      v_5ttgen_freesurfer_cargs,
      v_5ttgen_freesurfer_outputs,
      v_5ttgen_freesurfer_params,
      v_5ttgen_fsl_cargs,
      v_5ttgen_fsl_outputs,
      v_5ttgen_fsl_params,
      v_5ttgen_gif_cargs,
      v_5ttgen_gif_outputs,
      v_5ttgen_gif_params,
      v_5ttgen_hsvs_cargs,
      v_5ttgen_hsvs_outputs,
      v_5ttgen_hsvs_params,
      v_5ttgen_outputs,
      v_5ttgen_params,
};
