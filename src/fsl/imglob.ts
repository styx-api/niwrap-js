// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMGLOB_METADATA: Metadata = {
    id: "69cd7a2cb4c69776a7db0456b3cb5af52ec8ff76.boutiques",
    name: "imglob",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ImglobParameters {
    "@type": "fsl.imglob";
    "multiple_extensions": boolean;
    "input_list": Array<string>;
    "single_extension": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.imglob": imglob_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imglob(...)`.
 *
 * @interface
 */
interface ImglobOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_list List of image names or file paths
 * @param multiple_extensions Output list of images with full extensions
 * @param single_extension Output one image with full extension
 *
 * @returns Parameter dictionary
 */
function imglob_params(
    input_list: Array<string>,
    multiple_extensions: boolean = false,
    single_extension: boolean = false,
): ImglobParameters {
    const params = {
        "@type": "fsl.imglob" as const,
        "multiple_extensions": multiple_extensions,
        "input_list": input_list,
        "single_extension": single_extension,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imglob_cargs(
    params: ImglobParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imglob");
    if ((params["multiple_extensions"] ?? null)) {
        cargs.push("-extensions");
    }
    cargs.push(...(params["input_list"] ?? null));
    if ((params["single_extension"] ?? null)) {
        cargs.push("-extension");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imglob_outputs(
    params: ImglobParameters,
    execution: Execution,
): ImglobOutputs {
    const ret: ImglobOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * imglob
 *
 * Tool for generating image lists with specific extensions.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImglobOutputs`).
 */
function imglob_execute(
    params: ImglobParameters,
    runner: Runner | null = null,
): ImglobOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMGLOB_METADATA);
    params = execution.params(params)
    const cargs = imglob_cargs(params, execution)
    const ret = imglob_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * imglob
 *
 * Tool for generating image lists with specific extensions.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_list List of image names or file paths
 * @param multiple_extensions Output list of images with full extensions
 * @param single_extension Output one image with full extension
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImglobOutputs`).
 */
function imglob(
    input_list: Array<string>,
    multiple_extensions: boolean = false,
    single_extension: boolean = false,
    runner: Runner | null = null,
): ImglobOutputs {
    const params = imglob_params(input_list, multiple_extensions, single_extension)
    return imglob_execute(params, runner);
}


export {
      IMGLOB_METADATA,
      ImglobOutputs,
      ImglobParameters,
      imglob,
      imglob_execute,
      imglob_params,
};
