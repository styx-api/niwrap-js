// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CVS_REGISTER_METADATA: Metadata = {
    id: "3bb422fbeb829e6f72b0b527bc53abe39a30f29d.boutiques",
    name: "mri_cvs_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCvsRegisterParameters {
    "@type": "freesurfer.mri_cvs_register";
    "mov_subjid": string;
    "template_subjid"?: string | null | undefined;
    "templatedir"?: string | null | undefined;
    "mni_flag": boolean;
    "outdir"?: string | null | undefined;
    "asegfname"?: string | null | undefined;
    "voltype"?: string | null | undefined;
    "step1_flag": boolean;
    "step2_flag": boolean;
    "step3_flag": boolean;
    "noaseg_flag": boolean;
    "nointensity_flag": boolean;
    "hemi_flag": boolean;
    "masktargethemi_flag": boolean;
    "maskmovinghemi_flag": boolean;
    "nocleanup_flag": boolean;
    "keepelreg_flag": boolean;
    "keepallm3z_flag": boolean;
    "cleanall_flag": boolean;
    "cleansurfreg_flag": boolean;
    "cleanelreg_flag": boolean;
    "cleanvolreg_flag": boolean;
    "m3d_flag": boolean;
    "openmp"?: number | null | undefined;
    "nolog_flag": boolean;
    "version_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_cvs_register": mri_cvs_register_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_cvs_register": mri_cvs_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_cvs_register(...)`.
 *
 * @interface
 */
interface MriCvsRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The final morph that combines correspondences recovered in all registration steps.
     */
    final_cvs_morph: OutputPathType | null;
    /**
     * The CVS morphed norm.mgz file; final result of CVS with all registration steps contributions.
     */
    final_cvs_morphed_norm: OutputPathType | null;
    /**
     * The CVS morphed aseg.mgz file with all registration steps contributions.
     */
    final_cvs_morphed_aseg: OutputPathType | null;
    /**
     * Morphed aseg.mgz file result of CVS up to step (3)(i) and contains elatic morph and aseg-based nonlinear registration.
     */
    step1_morphed_aseg: OutputPathType | null;
    /**
     * Morphed norm.mgz file result of CVS up to step (3)(i) and contains elatic morph and aseg-based nonlinear registration.
     */
    step1_morphed_norm: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param mov_subjid FreeSurfer subject name as found in $SUBJECTS_DIR. This identifies the subject that is to be moved / registered to the target.
 * @param template_subjid FreeSurfer subject name as found in $SUBJECTS_DIR (or --templatedir). This identifies the subject that is to be kept fixed (template).
 * @param templatedir Directory of the template subject's SUBJECTS_DIR if different from that of the moving subject.
 * @param mni_flag Use the CVS atlas in MNI152 space as a target for registration.
 * @param outdir Name of the output directory where all the registration results are written.
 * @param asegfname Name of the segmentation volume used in volumetric registration step. Do not use the file extension.
 * @param voltype Changes the input from norm.mgz to voltype.mgz.
 * @param step1_flag Only do step 1 (spherical registration).
 * @param step2_flag Only do step 2 (elastic registration).
 * @param step3_flag Only do step 3 (volumetric registration).
 * @param noaseg_flag Do not use aseg volumes in the volumetric registration pipeline.
 * @param nointensity_flag Do not use intensity volumes in the volumetric registration pipeline.
 * @param hemi_flag Run CVS registration only on one hemisphere.
 * @param masktargethemi_flag Use with --hemi when hemi is registered to full brain target.
 * @param maskmovinghemi_flag Use with --hemi when full brain is registered to single hemi target.
 * @param nocleanup_flag Do not delete temporary files.
 * @param keepelreg_flag Do not delete elastic registration outcomes.
 * @param keepallm3z_flag Do not delete m3z morph files computed during CVS.
 * @param cleanall_flag Overwrite / recompute all CVS-related morphs.
 * @param cleansurfreg_flag Overwrite/recompute CVS-related surface registration morphs.
 * @param cleanelreg_flag Overwrite / recompute CVS-related elastic registration morph.
 * @param cleanvolreg_flag Overwrite / recompute CVS-related volumetric morphs.
 * @param m3d_flag Use m3d instead of m3z for registration morphs.
 * @param openmp Assign the number of nodes for openmp runs.
 * @param nolog_flag Do not produce a log file.
 * @param version_flag Print version and exit.
 * @param help_flag Print help and exit.
 *
 * @returns Parameter dictionary
 */
function mri_cvs_register_params(
    mov_subjid: string,
    template_subjid: string | null = null,
    templatedir: string | null = null,
    mni_flag: boolean = false,
    outdir: string | null = null,
    asegfname: string | null = null,
    voltype: string | null = null,
    step1_flag: boolean = false,
    step2_flag: boolean = false,
    step3_flag: boolean = false,
    noaseg_flag: boolean = false,
    nointensity_flag: boolean = false,
    hemi_flag: boolean = false,
    masktargethemi_flag: boolean = false,
    maskmovinghemi_flag: boolean = false,
    nocleanup_flag: boolean = false,
    keepelreg_flag: boolean = false,
    keepallm3z_flag: boolean = false,
    cleanall_flag: boolean = false,
    cleansurfreg_flag: boolean = false,
    cleanelreg_flag: boolean = false,
    cleanvolreg_flag: boolean = false,
    m3d_flag: boolean = false,
    openmp: number | null = null,
    nolog_flag: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
): MriCvsRegisterParameters {
    const params = {
        "@type": "freesurfer.mri_cvs_register" as const,
        "mov_subjid": mov_subjid,
        "mni_flag": mni_flag,
        "step1_flag": step1_flag,
        "step2_flag": step2_flag,
        "step3_flag": step3_flag,
        "noaseg_flag": noaseg_flag,
        "nointensity_flag": nointensity_flag,
        "hemi_flag": hemi_flag,
        "masktargethemi_flag": masktargethemi_flag,
        "maskmovinghemi_flag": maskmovinghemi_flag,
        "nocleanup_flag": nocleanup_flag,
        "keepelreg_flag": keepelreg_flag,
        "keepallm3z_flag": keepallm3z_flag,
        "cleanall_flag": cleanall_flag,
        "cleansurfreg_flag": cleansurfreg_flag,
        "cleanelreg_flag": cleanelreg_flag,
        "cleanvolreg_flag": cleanvolreg_flag,
        "m3d_flag": m3d_flag,
        "nolog_flag": nolog_flag,
        "version_flag": version_flag,
        "help_flag": help_flag,
    };
    if (template_subjid !== null) {
        params["template_subjid"] = template_subjid;
    }
    if (templatedir !== null) {
        params["templatedir"] = templatedir;
    }
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (asegfname !== null) {
        params["asegfname"] = asegfname;
    }
    if (voltype !== null) {
        params["voltype"] = voltype;
    }
    if (openmp !== null) {
        params["openmp"] = openmp;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_cvs_register_cargs(
    params: MriCvsRegisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_cvs_register");
    cargs.push(
        "--mov",
        (params["mov_subjid"] ?? null)
    );
    if ((params["template_subjid"] ?? null) !== null) {
        cargs.push(
            "--template",
            (params["template_subjid"] ?? null)
        );
    }
    if ((params["templatedir"] ?? null) !== null) {
        cargs.push(
            "--templatedir",
            (params["templatedir"] ?? null)
        );
    }
    if ((params["mni_flag"] ?? null)) {
        cargs.push("--mni");
    }
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "--outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["asegfname"] ?? null) !== null) {
        cargs.push(
            "--asegfname",
            (params["asegfname"] ?? null)
        );
    }
    if ((params["voltype"] ?? null) !== null) {
        cargs.push(
            "--voltype",
            (params["voltype"] ?? null)
        );
    }
    if ((params["step1_flag"] ?? null)) {
        cargs.push("--step1");
    }
    if ((params["step2_flag"] ?? null)) {
        cargs.push("--step2");
    }
    if ((params["step3_flag"] ?? null)) {
        cargs.push("--step3");
    }
    if ((params["noaseg_flag"] ?? null)) {
        cargs.push("--noaseg");
    }
    if ((params["nointensity_flag"] ?? null)) {
        cargs.push("--nointensity");
    }
    if ((params["hemi_flag"] ?? null)) {
        cargs.push("--hemi");
    }
    if ((params["masktargethemi_flag"] ?? null)) {
        cargs.push("--masktargethemi");
    }
    if ((params["maskmovinghemi_flag"] ?? null)) {
        cargs.push("--maskmovinghemi");
    }
    if ((params["nocleanup_flag"] ?? null)) {
        cargs.push("--nocleanup");
    }
    if ((params["keepelreg_flag"] ?? null)) {
        cargs.push("--keepelreg");
    }
    if ((params["keepallm3z_flag"] ?? null)) {
        cargs.push("--keepallm3z");
    }
    if ((params["cleanall_flag"] ?? null)) {
        cargs.push("--cleanall");
    }
    if ((params["cleansurfreg_flag"] ?? null)) {
        cargs.push("--cleansurfreg");
    }
    if ((params["cleanelreg_flag"] ?? null)) {
        cargs.push("--cleanelreg");
    }
    if ((params["cleanvolreg_flag"] ?? null)) {
        cargs.push("--cleanvolreg");
    }
    if ((params["m3d_flag"] ?? null)) {
        cargs.push("--m3d");
    }
    if ((params["openmp"] ?? null) !== null) {
        cargs.push(
            "--openmp",
            String((params["openmp"] ?? null))
        );
    }
    if ((params["nolog_flag"] ?? null)) {
        cargs.push("--nolog");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_cvs_register_outputs(
    params: MriCvsRegisterParameters,
    execution: Execution,
): MriCvsRegisterOutputs {
    const ret: MriCvsRegisterOutputs = {
        root: execution.outputFile("."),
        final_cvs_morph: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/final_CVSmorph_toTEMPLATE.m3z"].join('')) : null,
        final_cvs_morphed_norm: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/final_CVSmorphed_toTEMPLATE_norm.mgz"].join('')) : null,
        final_cvs_morphed_aseg: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/final_CVSmorphed_toTEMPLATE_aseg.mgz"].join('')) : null,
        step1_morphed_aseg: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/step1_CVSmorphed_toTEMPLATE_aseg.mgz"].join('')) : null,
        step1_morphed_norm: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/step1_CVSmorphed_toTEMPLATE_norm.mgz"].join('')) : null,
    };
    return ret;
}


/**
 * Combined Volume and Surface Registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriCvsRegisterOutputs`).
 */
function mri_cvs_register_execute(
    params: MriCvsRegisterParameters,
    execution: Execution,
): MriCvsRegisterOutputs {
    params = execution.params(params)
    const cargs = mri_cvs_register_cargs(params, execution)
    const ret = mri_cvs_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Combined Volume and Surface Registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param mov_subjid FreeSurfer subject name as found in $SUBJECTS_DIR. This identifies the subject that is to be moved / registered to the target.
 * @param template_subjid FreeSurfer subject name as found in $SUBJECTS_DIR (or --templatedir). This identifies the subject that is to be kept fixed (template).
 * @param templatedir Directory of the template subject's SUBJECTS_DIR if different from that of the moving subject.
 * @param mni_flag Use the CVS atlas in MNI152 space as a target for registration.
 * @param outdir Name of the output directory where all the registration results are written.
 * @param asegfname Name of the segmentation volume used in volumetric registration step. Do not use the file extension.
 * @param voltype Changes the input from norm.mgz to voltype.mgz.
 * @param step1_flag Only do step 1 (spherical registration).
 * @param step2_flag Only do step 2 (elastic registration).
 * @param step3_flag Only do step 3 (volumetric registration).
 * @param noaseg_flag Do not use aseg volumes in the volumetric registration pipeline.
 * @param nointensity_flag Do not use intensity volumes in the volumetric registration pipeline.
 * @param hemi_flag Run CVS registration only on one hemisphere.
 * @param masktargethemi_flag Use with --hemi when hemi is registered to full brain target.
 * @param maskmovinghemi_flag Use with --hemi when full brain is registered to single hemi target.
 * @param nocleanup_flag Do not delete temporary files.
 * @param keepelreg_flag Do not delete elastic registration outcomes.
 * @param keepallm3z_flag Do not delete m3z morph files computed during CVS.
 * @param cleanall_flag Overwrite / recompute all CVS-related morphs.
 * @param cleansurfreg_flag Overwrite/recompute CVS-related surface registration morphs.
 * @param cleanelreg_flag Overwrite / recompute CVS-related elastic registration morph.
 * @param cleanvolreg_flag Overwrite / recompute CVS-related volumetric morphs.
 * @param m3d_flag Use m3d instead of m3z for registration morphs.
 * @param openmp Assign the number of nodes for openmp runs.
 * @param nolog_flag Do not produce a log file.
 * @param version_flag Print version and exit.
 * @param help_flag Print help and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCvsRegisterOutputs`).
 */
function mri_cvs_register(
    mov_subjid: string,
    template_subjid: string | null = null,
    templatedir: string | null = null,
    mni_flag: boolean = false,
    outdir: string | null = null,
    asegfname: string | null = null,
    voltype: string | null = null,
    step1_flag: boolean = false,
    step2_flag: boolean = false,
    step3_flag: boolean = false,
    noaseg_flag: boolean = false,
    nointensity_flag: boolean = false,
    hemi_flag: boolean = false,
    masktargethemi_flag: boolean = false,
    maskmovinghemi_flag: boolean = false,
    nocleanup_flag: boolean = false,
    keepelreg_flag: boolean = false,
    keepallm3z_flag: boolean = false,
    cleanall_flag: boolean = false,
    cleansurfreg_flag: boolean = false,
    cleanelreg_flag: boolean = false,
    cleanvolreg_flag: boolean = false,
    m3d_flag: boolean = false,
    openmp: number | null = null,
    nolog_flag: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MriCvsRegisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CVS_REGISTER_METADATA);
    const params = mri_cvs_register_params(mov_subjid, template_subjid, templatedir, mni_flag, outdir, asegfname, voltype, step1_flag, step2_flag, step3_flag, noaseg_flag, nointensity_flag, hemi_flag, masktargethemi_flag, maskmovinghemi_flag, nocleanup_flag, keepelreg_flag, keepallm3z_flag, cleanall_flag, cleansurfreg_flag, cleanelreg_flag, cleanvolreg_flag, m3d_flag, openmp, nolog_flag, version_flag, help_flag)
    return mri_cvs_register_execute(params, execution);
}


export {
      MRI_CVS_REGISTER_METADATA,
      MriCvsRegisterOutputs,
      MriCvsRegisterParameters,
      mri_cvs_register,
      mri_cvs_register_cargs,
      mri_cvs_register_execute,
      mri_cvs_register_outputs,
      mri_cvs_register_params,
};
