// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CA_REGISTER_METADATA: Metadata = {
    id: "f463d3d02c660de351d5bcb59e59793ce9ee0d30.boutiques",
    name: "mri_ca_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCaRegisterParameters {
    "@type": "freesurfer.mri_ca_register";
    "input_volume": InputPathType;
    "template": InputPathType;
    "output_volume": string;
    "tolerance"?: number | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "transform_lta"?: InputPathType | null | undefined;
    "level"?: number | null | undefined;
    "read_intensity": boolean;
    "align": boolean;
    "invert_save_file"?: string | null | undefined;
    "distance"?: number | null | undefined;
    "regularize"?: number | null | undefined;
    "regularize_mean"?: number | null | undefined;
    "scale_smoothness"?: number | null | undefined;
    "nobright": boolean;
    "renormalize_map": boolean;
    "renormalize"?: InputPathType | null | undefined;
    "read_lta": boolean;
    "smoothness"?: number | null | undefined;
    "samples"?: number | null | undefined;
    "nsmall"?: number | null | undefined;
    "fixed": boolean;
    "optimal": boolean;
    "noneg": boolean;
    "wm": boolean;
    "min_avgs"?: number | null | undefined;
    "transform_limit"?: number | null | undefined;
    "relabel"?: number | null | undefined;
    "relabel_avgs"?: number | null | undefined;
    "reset_avgs"?: number | null | undefined;
    "vf_file"?: string | null | undefined;
    "diag_file"?: string | null | undefined;
    "tr"?: number | null | undefined;
    "te"?: number | null | undefined;
    "example"?: string | null | undefined;
    "bigventricles": boolean;
    "uncompress": boolean;
    "second_pass_renorm": boolean;
    "threads"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_ca_register": mri_ca_register_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_ca_register": mri_ca_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_ca_register(...)`.
 *
 * @interface
 */
interface MriCaRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Multidimensional transform in m3d format
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume
 * @param template Template in GCA format
 * @param output_volume Output volume in M3D format
 * @param tolerance Defines convergence of registration
 * @param mask Specifies volume to use as a mask
 * @param transform_lta Transform in LTA format
 * @param level Defines how many surrounding voxels will be used in interpolations, default is 6
 * @param read_intensity Allows reading of multiple intensity normalization
 * @param align Enable alignment
 * @param invert_save_file Invert and save as GCAM file
 * @param distance Distance for registration
 * @param regularize Regularization parameter
 * @param regularize_mean Mean regularization
 * @param scale_smoothness Smoothness scaling factor
 * @param nobright Disable brightness adjustment
 * @param renormalize_map Renormalize using map
 * @param renormalize Renormalize with intensity file
 * @param read_lta Use LTA file for registration
 * @param smoothness Smoothness parameter
 * @param samples Sample points for registration
 * @param nsmall Number of small features
 * @param fixed Fixed mode for registration
 * @param optimal Optimal registration settings
 * @param noneg Disallow negative values
 * @param wm White matter flag
 * @param min_avgs Minimum number of averages
 * @param transform_limit Transform limit
 * @param relabel Relabel options
 * @param relabel_avgs Relabel averages
 * @param reset_avgs Reset averages
 * @param vf_file VF file name
 * @param diag_file Diagnostic file name
 * @param tr TR parameter
 * @param te TE parameter
 * @param example Example file
 * @param bigventricles Handle big ventricles
 * @param uncompress Uncompress files
 * @param second_pass_renorm Second pass renormalization
 * @param threads Number of threads
 *
 * @returns Parameter dictionary
 */
function mri_ca_register_params(
    input_volume: InputPathType,
    template: InputPathType,
    output_volume: string,
    tolerance: number | null = null,
    mask: InputPathType | null = null,
    transform_lta: InputPathType | null = null,
    level: number | null = null,
    read_intensity: boolean = false,
    align: boolean = false,
    invert_save_file: string | null = null,
    distance: number | null = null,
    regularize: number | null = null,
    regularize_mean: number | null = null,
    scale_smoothness: number | null = null,
    nobright: boolean = false,
    renormalize_map: boolean = false,
    renormalize: InputPathType | null = null,
    read_lta: boolean = false,
    smoothness: number | null = null,
    samples: number | null = null,
    nsmall: number | null = null,
    fixed: boolean = false,
    optimal: boolean = false,
    noneg: boolean = false,
    wm: boolean = false,
    min_avgs: number | null = null,
    transform_limit: number | null = null,
    relabel: number | null = null,
    relabel_avgs: number | null = null,
    reset_avgs: number | null = null,
    vf_file: string | null = null,
    diag_file: string | null = null,
    tr: number | null = null,
    te: number | null = null,
    example: string | null = null,
    bigventricles: boolean = false,
    uncompress: boolean = false,
    second_pass_renorm: boolean = false,
    threads: number | null = null,
): MriCaRegisterParameters {
    const params = {
        "@type": "freesurfer.mri_ca_register" as const,
        "input_volume": input_volume,
        "template": template,
        "output_volume": output_volume,
        "read_intensity": read_intensity,
        "align": align,
        "nobright": nobright,
        "renormalize_map": renormalize_map,
        "read_lta": read_lta,
        "fixed": fixed,
        "optimal": optimal,
        "noneg": noneg,
        "wm": wm,
        "bigventricles": bigventricles,
        "uncompress": uncompress,
        "second_pass_renorm": second_pass_renorm,
    };
    if (tolerance !== null) {
        params["tolerance"] = tolerance;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (transform_lta !== null) {
        params["transform_lta"] = transform_lta;
    }
    if (level !== null) {
        params["level"] = level;
    }
    if (invert_save_file !== null) {
        params["invert_save_file"] = invert_save_file;
    }
    if (distance !== null) {
        params["distance"] = distance;
    }
    if (regularize !== null) {
        params["regularize"] = regularize;
    }
    if (regularize_mean !== null) {
        params["regularize_mean"] = regularize_mean;
    }
    if (scale_smoothness !== null) {
        params["scale_smoothness"] = scale_smoothness;
    }
    if (renormalize !== null) {
        params["renormalize"] = renormalize;
    }
    if (smoothness !== null) {
        params["smoothness"] = smoothness;
    }
    if (samples !== null) {
        params["samples"] = samples;
    }
    if (nsmall !== null) {
        params["nsmall"] = nsmall;
    }
    if (min_avgs !== null) {
        params["min_avgs"] = min_avgs;
    }
    if (transform_limit !== null) {
        params["transform_limit"] = transform_limit;
    }
    if (relabel !== null) {
        params["relabel"] = relabel;
    }
    if (relabel_avgs !== null) {
        params["relabel_avgs"] = relabel_avgs;
    }
    if (reset_avgs !== null) {
        params["reset_avgs"] = reset_avgs;
    }
    if (vf_file !== null) {
        params["vf_file"] = vf_file;
    }
    if (diag_file !== null) {
        params["diag_file"] = diag_file;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (te !== null) {
        params["te"] = te;
    }
    if (example !== null) {
        params["example"] = example;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_ca_register_cargs(
    params: MriCaRegisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_ca_register");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["template"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["tolerance"] ?? null) !== null) {
        cargs.push(
            "-tol",
            String((params["tolerance"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["transform_lta"] ?? null) !== null) {
        cargs.push(
            "-T",
            execution.inputFile((params["transform_lta"] ?? null))
        );
    }
    if ((params["level"] ?? null) !== null) {
        cargs.push(
            "-level",
            String((params["level"] ?? null))
        );
    }
    if ((params["read_intensity"] ?? null)) {
        cargs.push("-ri");
    }
    if ((params["align"] ?? null)) {
        cargs.push("-align");
    }
    if ((params["invert_save_file"] ?? null) !== null) {
        cargs.push(
            "-invert-and-save",
            (params["invert_save_file"] ?? null)
        );
    }
    if ((params["distance"] ?? null) !== null) {
        cargs.push(
            "-dist",
            String((params["distance"] ?? null))
        );
    }
    if ((params["regularize"] ?? null) !== null) {
        cargs.push(
            "-regularize",
            String((params["regularize"] ?? null))
        );
    }
    if ((params["regularize_mean"] ?? null) !== null) {
        cargs.push(
            "-regularize-mean",
            String((params["regularize_mean"] ?? null))
        );
    }
    if ((params["scale_smoothness"] ?? null) !== null) {
        cargs.push(
            "-scale_smoothness",
            String((params["scale_smoothness"] ?? null))
        );
    }
    if ((params["nobright"] ?? null)) {
        cargs.push("-nobright");
    }
    if ((params["renormalize_map"] ?? null)) {
        cargs.push("-renormalize_map");
    }
    if ((params["renormalize"] ?? null) !== null) {
        cargs.push(
            "-renormalize",
            execution.inputFile((params["renormalize"] ?? null))
        );
    }
    if ((params["read_lta"] ?? null)) {
        cargs.push("-read_lta");
    }
    if ((params["smoothness"] ?? null) !== null) {
        cargs.push(
            "-smoothness",
            String((params["smoothness"] ?? null))
        );
    }
    if ((params["samples"] ?? null) !== null) {
        cargs.push(
            "-samples",
            String((params["samples"] ?? null))
        );
    }
    if ((params["nsmall"] ?? null) !== null) {
        cargs.push(
            "-nsmall",
            String((params["nsmall"] ?? null))
        );
    }
    if ((params["fixed"] ?? null)) {
        cargs.push("-fixed");
    }
    if ((params["optimal"] ?? null)) {
        cargs.push("-optimal");
    }
    if ((params["noneg"] ?? null)) {
        cargs.push("-noneg");
    }
    if ((params["wm"] ?? null)) {
        cargs.push("-wm");
    }
    if ((params["min_avgs"] ?? null) !== null) {
        cargs.push(
            "-min_avgs",
            String((params["min_avgs"] ?? null))
        );
    }
    if ((params["transform_limit"] ?? null) !== null) {
        cargs.push(
            "-tl",
            String((params["transform_limit"] ?? null))
        );
    }
    if ((params["relabel"] ?? null) !== null) {
        cargs.push(
            "-relabel",
            String((params["relabel"] ?? null))
        );
    }
    if ((params["relabel_avgs"] ?? null) !== null) {
        cargs.push(
            "-relabel_avgs",
            String((params["relabel_avgs"] ?? null))
        );
    }
    if ((params["reset_avgs"] ?? null) !== null) {
        cargs.push(
            "-reset_avgs",
            String((params["reset_avgs"] ?? null))
        );
    }
    if ((params["vf_file"] ?? null) !== null) {
        cargs.push(
            "-vf",
            (params["vf_file"] ?? null)
        );
    }
    if ((params["diag_file"] ?? null) !== null) {
        cargs.push(
            "-diag",
            (params["diag_file"] ?? null)
        );
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-tr",
            String((params["tr"] ?? null))
        );
    }
    if ((params["te"] ?? null) !== null) {
        cargs.push(
            "-te",
            String((params["te"] ?? null))
        );
    }
    if ((params["example"] ?? null) !== null) {
        cargs.push(
            "-example",
            (params["example"] ?? null)
        );
    }
    if ((params["bigventricles"] ?? null)) {
        cargs.push("-<no>bigventricles");
    }
    if ((params["uncompress"] ?? null)) {
        cargs.push("-uncompress");
    }
    if ((params["second_pass_renorm"] ?? null)) {
        cargs.push("-secondpassrenorm");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "-threads",
            String((params["threads"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_ca_register_outputs(
    params: MriCaRegisterParameters,
    execution: Execution,
): MriCaRegisterOutputs {
    const ret: MriCaRegisterOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null), ".m3d"].join('')),
    };
    return ret;
}


/**
 * mri_ca_register
 *
 * Generates a multi-dimensional talairach transform from a gca file and talairach.lta file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCaRegisterOutputs`).
 */
function mri_ca_register_execute(
    params: MriCaRegisterParameters,
    runner: Runner | null = null,
): MriCaRegisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CA_REGISTER_METADATA);
    params = execution.params(params)
    const cargs = mri_ca_register_cargs(params, execution)
    const ret = mri_ca_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_ca_register
 *
 * Generates a multi-dimensional talairach transform from a gca file and talairach.lta file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume
 * @param template Template in GCA format
 * @param output_volume Output volume in M3D format
 * @param tolerance Defines convergence of registration
 * @param mask Specifies volume to use as a mask
 * @param transform_lta Transform in LTA format
 * @param level Defines how many surrounding voxels will be used in interpolations, default is 6
 * @param read_intensity Allows reading of multiple intensity normalization
 * @param align Enable alignment
 * @param invert_save_file Invert and save as GCAM file
 * @param distance Distance for registration
 * @param regularize Regularization parameter
 * @param regularize_mean Mean regularization
 * @param scale_smoothness Smoothness scaling factor
 * @param nobright Disable brightness adjustment
 * @param renormalize_map Renormalize using map
 * @param renormalize Renormalize with intensity file
 * @param read_lta Use LTA file for registration
 * @param smoothness Smoothness parameter
 * @param samples Sample points for registration
 * @param nsmall Number of small features
 * @param fixed Fixed mode for registration
 * @param optimal Optimal registration settings
 * @param noneg Disallow negative values
 * @param wm White matter flag
 * @param min_avgs Minimum number of averages
 * @param transform_limit Transform limit
 * @param relabel Relabel options
 * @param relabel_avgs Relabel averages
 * @param reset_avgs Reset averages
 * @param vf_file VF file name
 * @param diag_file Diagnostic file name
 * @param tr TR parameter
 * @param te TE parameter
 * @param example Example file
 * @param bigventricles Handle big ventricles
 * @param uncompress Uncompress files
 * @param second_pass_renorm Second pass renormalization
 * @param threads Number of threads
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCaRegisterOutputs`).
 */
function mri_ca_register(
    input_volume: InputPathType,
    template: InputPathType,
    output_volume: string,
    tolerance: number | null = null,
    mask: InputPathType | null = null,
    transform_lta: InputPathType | null = null,
    level: number | null = null,
    read_intensity: boolean = false,
    align: boolean = false,
    invert_save_file: string | null = null,
    distance: number | null = null,
    regularize: number | null = null,
    regularize_mean: number | null = null,
    scale_smoothness: number | null = null,
    nobright: boolean = false,
    renormalize_map: boolean = false,
    renormalize: InputPathType | null = null,
    read_lta: boolean = false,
    smoothness: number | null = null,
    samples: number | null = null,
    nsmall: number | null = null,
    fixed: boolean = false,
    optimal: boolean = false,
    noneg: boolean = false,
    wm: boolean = false,
    min_avgs: number | null = null,
    transform_limit: number | null = null,
    relabel: number | null = null,
    relabel_avgs: number | null = null,
    reset_avgs: number | null = null,
    vf_file: string | null = null,
    diag_file: string | null = null,
    tr: number | null = null,
    te: number | null = null,
    example: string | null = null,
    bigventricles: boolean = false,
    uncompress: boolean = false,
    second_pass_renorm: boolean = false,
    threads: number | null = null,
    runner: Runner | null = null,
): MriCaRegisterOutputs {
    const params = mri_ca_register_params(input_volume, template, output_volume, tolerance, mask, transform_lta, level, read_intensity, align, invert_save_file, distance, regularize, regularize_mean, scale_smoothness, nobright, renormalize_map, renormalize, read_lta, smoothness, samples, nsmall, fixed, optimal, noneg, wm, min_avgs, transform_limit, relabel, relabel_avgs, reset_avgs, vf_file, diag_file, tr, te, example, bigventricles, uncompress, second_pass_renorm, threads)
    return mri_ca_register_execute(params, runner);
}


export {
      MRI_CA_REGISTER_METADATA,
      MriCaRegisterOutputs,
      MriCaRegisterParameters,
      mri_ca_register,
      mri_ca_register_execute,
      mri_ca_register_params,
};
