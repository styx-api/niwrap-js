// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_CAPTURE_PLANE_METADATA: Metadata = {
    id: "b2bfd3d4513396540148947511ec229d0418fc44.boutiques",
    name: "volume-capture-plane",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeCapturePlaneParameters {
    "@type": "workbench.volume-capture-plane";
    "volume": InputPathType;
    "subvolume": string;
    "interp": string;
    "h_dim": number;
    "v_dim": number;
    "scale_min": number;
    "scale_max": number;
    "bottom_left_x": number;
    "bottom_left_y": number;
    "bottom_left_z": number;
    "bottom_right_x": number;
    "bottom_right_y": number;
    "bottom_right_z": number;
    "top_left_x": number;
    "top_left_y": number;
    "top_left_z": number;
    "image": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-capture-plane": volume_capture_plane_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_capture_plane(...)`.
 *
 * @interface
 */
interface VolumeCapturePlaneOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume the volume file to interpolate from
 * @param subvolume the name or number of the subvolume to use
 * @param interp interpolation type
 * @param h_dim width of output image, in pixels
 * @param v_dim height of output image, in pixels
 * @param scale_min value to render as black
 * @param scale_max value to render as white
 * @param bottom_left_x x-coordinate of the bottom left of the output image
 * @param bottom_left_y y-coordinate of the bottom left of the output image
 * @param bottom_left_z z-coordinate of the bottom left of the output image
 * @param bottom_right_x x-coordinate of the bottom right of the output image
 * @param bottom_right_y y-coordinate of the bottom right of the output image
 * @param bottom_right_z z-coordinate of the bottom right of the output image
 * @param top_left_x x-coordinate of the top left of the output image
 * @param top_left_y y-coordinate of the top left of the output image
 * @param top_left_z z-coordinate of the top left of the output image
 * @param image output - the output image
 *
 * @returns Parameter dictionary
 */
function volume_capture_plane_params(
    volume: InputPathType,
    subvolume: string,
    interp: string,
    h_dim: number,
    v_dim: number,
    scale_min: number,
    scale_max: number,
    bottom_left_x: number,
    bottom_left_y: number,
    bottom_left_z: number,
    bottom_right_x: number,
    bottom_right_y: number,
    bottom_right_z: number,
    top_left_x: number,
    top_left_y: number,
    top_left_z: number,
    image: string,
): VolumeCapturePlaneParameters {
    const params = {
        "@type": "workbench.volume-capture-plane" as const,
        "volume": volume,
        "subvolume": subvolume,
        "interp": interp,
        "h_dim": h_dim,
        "v_dim": v_dim,
        "scale_min": scale_min,
        "scale_max": scale_max,
        "bottom_left_x": bottom_left_x,
        "bottom_left_y": bottom_left_y,
        "bottom_left_z": bottom_left_z,
        "bottom_right_x": bottom_right_x,
        "bottom_right_y": bottom_right_y,
        "bottom_right_z": bottom_right_z,
        "top_left_x": top_left_x,
        "top_left_y": top_left_y,
        "top_left_z": top_left_z,
        "image": image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_capture_plane_cargs(
    params: VolumeCapturePlaneParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-capture-plane");
    cargs.push(execution.inputFile((params["volume"] ?? null)));
    cargs.push((params["subvolume"] ?? null));
    cargs.push((params["interp"] ?? null));
    cargs.push(String((params["h_dim"] ?? null)));
    cargs.push(String((params["v_dim"] ?? null)));
    cargs.push(String((params["scale_min"] ?? null)));
    cargs.push(String((params["scale_max"] ?? null)));
    cargs.push(String((params["bottom_left_x"] ?? null)));
    cargs.push(String((params["bottom_left_y"] ?? null)));
    cargs.push(String((params["bottom_left_z"] ?? null)));
    cargs.push(String((params["bottom_right_x"] ?? null)));
    cargs.push(String((params["bottom_right_y"] ?? null)));
    cargs.push(String((params["bottom_right_z"] ?? null)));
    cargs.push(String((params["top_left_x"] ?? null)));
    cargs.push(String((params["top_left_y"] ?? null)));
    cargs.push(String((params["top_left_z"] ?? null)));
    cargs.push((params["image"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_capture_plane_outputs(
    params: VolumeCapturePlaneParameters,
    execution: Execution,
): VolumeCapturePlaneOutputs {
    const ret: VolumeCapturePlaneOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Interpolate image from plane through volume.
 *
 * NOTE: If you want to generate an image with all of the capabilities of the GUI rendering, see -show-scene.
 *
 * Renders an image of an arbitrary plane through the volume file, with a simple linear grayscale palette.  The parameter <interp> must be one of:
 *
 * CUBIC
 * ENCLOSING_VOXEL
 * TRILINEAR.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeCapturePlaneOutputs`).
 */
function volume_capture_plane_execute(
    params: VolumeCapturePlaneParameters,
    runner: Runner | null = null,
): VolumeCapturePlaneOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_CAPTURE_PLANE_METADATA);
    params = execution.params(params)
    const cargs = volume_capture_plane_cargs(params, execution)
    const ret = volume_capture_plane_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Interpolate image from plane through volume.
 *
 * NOTE: If you want to generate an image with all of the capabilities of the GUI rendering, see -show-scene.
 *
 * Renders an image of an arbitrary plane through the volume file, with a simple linear grayscale palette.  The parameter <interp> must be one of:
 *
 * CUBIC
 * ENCLOSING_VOXEL
 * TRILINEAR.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume the volume file to interpolate from
 * @param subvolume the name or number of the subvolume to use
 * @param interp interpolation type
 * @param h_dim width of output image, in pixels
 * @param v_dim height of output image, in pixels
 * @param scale_min value to render as black
 * @param scale_max value to render as white
 * @param bottom_left_x x-coordinate of the bottom left of the output image
 * @param bottom_left_y y-coordinate of the bottom left of the output image
 * @param bottom_left_z z-coordinate of the bottom left of the output image
 * @param bottom_right_x x-coordinate of the bottom right of the output image
 * @param bottom_right_y y-coordinate of the bottom right of the output image
 * @param bottom_right_z z-coordinate of the bottom right of the output image
 * @param top_left_x x-coordinate of the top left of the output image
 * @param top_left_y y-coordinate of the top left of the output image
 * @param top_left_z z-coordinate of the top left of the output image
 * @param image output - the output image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeCapturePlaneOutputs`).
 */
function volume_capture_plane(
    volume: InputPathType,
    subvolume: string,
    interp: string,
    h_dim: number,
    v_dim: number,
    scale_min: number,
    scale_max: number,
    bottom_left_x: number,
    bottom_left_y: number,
    bottom_left_z: number,
    bottom_right_x: number,
    bottom_right_y: number,
    bottom_right_z: number,
    top_left_x: number,
    top_left_y: number,
    top_left_z: number,
    image: string,
    runner: Runner | null = null,
): VolumeCapturePlaneOutputs {
    const params = volume_capture_plane_params(volume, subvolume, interp, h_dim, v_dim, scale_min, scale_max, bottom_left_x, bottom_left_y, bottom_left_z, bottom_right_x, bottom_right_y, bottom_right_z, top_left_x, top_left_y, top_left_z, image)
    return volume_capture_plane_execute(params, runner);
}


export {
      VOLUME_CAPTURE_PLANE_METADATA,
      VolumeCapturePlaneOutputs,
      VolumeCapturePlaneParameters,
      volume_capture_plane,
      volume_capture_plane_execute,
      volume_capture_plane_params,
};
