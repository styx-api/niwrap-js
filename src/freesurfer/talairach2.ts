// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TALAIRACH2_METADATA: Metadata = {
    id: "200a3bdd395b88d5b03ecdc9cf8d79338e29d2f2.boutiques",
    name: "talairach2",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Talairach2Parameters {
    "__STYXTYPE__": "talairach2";
    "subject_id": string;
    "mgz_flag"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "talairach2": talairach2_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `talairach2(...)`.
 *
 * @interface
 */
interface Talairach2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function talairach2_params(
    subject_id: string,
    mgz_flag: string | null = null,
): Talairach2Parameters {
    /**
     * Build parameters.
    
     * @param subject_id Subject identifier for the talairach transformation.
     * @param mgz_flag Flag to indicate whether mgz format is used.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "talairach2" as const,
        "subject_id": subject_id,
    };
    if (mgz_flag !== null) {
        params["mgz_flag"] = mgz_flag;
    }
    return params;
}


function talairach2_cargs(
    params: Talairach2Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("talairach2");
    cargs.push((params["subject_id"] ?? null));
    if ((params["mgz_flag"] ?? null) !== null) {
        cargs.push((params["mgz_flag"] ?? null));
    }
    return cargs;
}


function talairach2_outputs(
    params: Talairach2Parameters,
    execution: Execution,
): Talairach2Outputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Talairach2Outputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function talairach2_execute(
    params: Talairach2Parameters,
    execution: Execution,
): Talairach2Outputs {
    /**
     * Tool for processing and converting talairach transformation files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Talairach2Outputs`).
     */
    params = execution.params(params)
    const cargs = talairach2_cargs(params, execution)
    const ret = talairach2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function talairach2(
    subject_id: string,
    mgz_flag: string | null = null,
    runner: Runner | null = null,
): Talairach2Outputs {
    /**
     * Tool for processing and converting talairach transformation files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject_id Subject identifier for the talairach transformation.
     * @param mgz_flag Flag to indicate whether mgz format is used.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Talairach2Outputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TALAIRACH2_METADATA);
    const params = talairach2_params(subject_id, mgz_flag)
    return talairach2_execute(params, execution);
}


export {
      TALAIRACH2_METADATA,
      Talairach2Outputs,
      Talairach2Parameters,
      talairach2,
      talairach2_params,
};
