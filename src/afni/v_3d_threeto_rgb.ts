// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_THREETO_RGB_METADATA: Metadata = {
    id: "9e2d64e118fc6f51565e791f8cb22a6510ace6f5.boutiques",
    name: "3dThreetoRGB",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dThreetoRgbParameters {
    "@type": "afni.3dThreetoRGB";
    "output_prefix"?: string | null | undefined;
    "scale_factor"?: number | null | undefined;
    "mask_dataset"?: InputPathType | null | undefined;
    "fim": boolean;
    "anat": boolean;
    "input_dataset": InputPathType;
    "input_dataset2"?: InputPathType | null | undefined;
    "input_dataset3"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dThreetoRGB": v_3d_threeto_rgb_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dThreetoRGB": v_3d_threeto_rgb_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_threeto_rgb(...)`.
 *
 * @interface
 */
interface V3dThreetoRgbOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * RGB-valued dataset output
     */
    output_dataset_head: OutputPathType | null;
    /**
     * RGB-valued dataset output
     */
    output_dataset_brik: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset or first dataset if three datasets are provided
 * @param output_prefix Write output into dataset with specified prefix
 * @param scale_factor Multiply input values by this factor before using as RGB
 * @param mask_dataset Only output nonzero values where the mask dataset is nonzero
 * @param fim Write result as a 'fim' type dataset (default behavior)
 * @param anat Write result as a anatomical type dataset
 * @param input_dataset2 Second dataset, required only if three datasets are provided
 * @param input_dataset3 Third dataset, required only if three datasets are provided
 *
 * @returns Parameter dictionary
 */
function v_3d_threeto_rgb_params(
    input_dataset: InputPathType,
    output_prefix: string | null = null,
    scale_factor: number | null = null,
    mask_dataset: InputPathType | null = null,
    fim: boolean = false,
    anat: boolean = false,
    input_dataset2: InputPathType | null = null,
    input_dataset3: InputPathType | null = null,
): V3dThreetoRgbParameters {
    const params = {
        "@type": "afni.3dThreetoRGB" as const,
        "fim": fim,
        "anat": anat,
        "input_dataset": input_dataset,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (scale_factor !== null) {
        params["scale_factor"] = scale_factor;
    }
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    if (input_dataset2 !== null) {
        params["input_dataset2"] = input_dataset2;
    }
    if (input_dataset3 !== null) {
        params["input_dataset3"] = input_dataset3;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_threeto_rgb_cargs(
    params: V3dThreetoRgbParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dThreetoRGB");
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["scale_factor"] ?? null) !== null) {
        cargs.push(
            "-scale",
            String((params["scale_factor"] ?? null))
        );
    }
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    if ((params["fim"] ?? null)) {
        cargs.push("-fim");
    }
    if ((params["anat"] ?? null)) {
        cargs.push("-anat");
    }
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["input_dataset2"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["input_dataset2"] ?? null)));
    }
    if ((params["input_dataset3"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["input_dataset3"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_threeto_rgb_outputs(
    params: V3dThreetoRgbParameters,
    execution: Execution,
): V3dThreetoRgbOutputs {
    const ret: V3dThreetoRgbOutputs = {
        root: execution.outputFile("."),
        output_dataset_head: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "+rgb.HEAD"].join('')) : null,
        output_dataset_brik: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "+rgb.BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * 3dThreetoRGB
 *
 * Converts 3 sub-bricks of input to an RGB-valued dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dThreetoRgbOutputs`).
 */
function v_3d_threeto_rgb_execute(
    params: V3dThreetoRgbParameters,
    runner: Runner | null = null,
): V3dThreetoRgbOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_THREETO_RGB_METADATA);
    params = execution.params(params)
    const cargs = v_3d_threeto_rgb_cargs(params, execution)
    const ret = v_3d_threeto_rgb_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dThreetoRGB
 *
 * Converts 3 sub-bricks of input to an RGB-valued dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset or first dataset if three datasets are provided
 * @param output_prefix Write output into dataset with specified prefix
 * @param scale_factor Multiply input values by this factor before using as RGB
 * @param mask_dataset Only output nonzero values where the mask dataset is nonzero
 * @param fim Write result as a 'fim' type dataset (default behavior)
 * @param anat Write result as a anatomical type dataset
 * @param input_dataset2 Second dataset, required only if three datasets are provided
 * @param input_dataset3 Third dataset, required only if three datasets are provided
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dThreetoRgbOutputs`).
 */
function v_3d_threeto_rgb(
    input_dataset: InputPathType,
    output_prefix: string | null = null,
    scale_factor: number | null = null,
    mask_dataset: InputPathType | null = null,
    fim: boolean = false,
    anat: boolean = false,
    input_dataset2: InputPathType | null = null,
    input_dataset3: InputPathType | null = null,
    runner: Runner | null = null,
): V3dThreetoRgbOutputs {
    const params = v_3d_threeto_rgb_params(input_dataset, output_prefix, scale_factor, mask_dataset, fim, anat, input_dataset2, input_dataset3)
    return v_3d_threeto_rgb_execute(params, runner);
}


export {
      V3dThreetoRgbOutputs,
      V3dThreetoRgbParameters,
      V_3D_THREETO_RGB_METADATA,
      v_3d_threeto_rgb,
      v_3d_threeto_rgb_execute,
      v_3d_threeto_rgb_params,
};
