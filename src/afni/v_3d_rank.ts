// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_RANK_METADATA: Metadata = {
    id: "5a23cfc12c0e4363654019cb91a34ed7f2b61e4e.boutiques",
    name: "3dRank",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dRankParameters {
    "@type"?: "afni/3dRank";
    "input_datasets": Array<InputPathType>;
    "output_prefix"?: string | null | undefined;
    "version_info": boolean;
    "help_info": boolean;
}
type V3dRankParametersTagged = Required<Pick<V3dRankParameters, '@type'>> & V3dRankParameters;


/**
 * Output object returned when calling `V3dRankParameters(...)`.
 *
 * @interface
 */
interface V3dRankOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output dataset in AFNI format (.HEAD file)
     */
    output_dataset_head: OutputPathType | null;
    /**
     * Main output dataset in AFNI format (.BRIK file)
     */
    output_dataset_brik: OutputPathType | null;
    /**
     * Rank map 1D file showing the mapping from the rank to the integral values in the input dataset
     */
    rank_map_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_datasets Input datasets. Acceptable data types are: byte, short, and floats.
 * @param output_prefix Output prefix. If you have multiple datasets on input, the prefix is preceded by r00., r01., etc. If no prefix is given, the default is rank.DATASET1, rank.DATASET2, etc.
 * @param version_info Print author and version info
 * @param help_info Print this help screen
 *
 * @returns Parameter dictionary
 */
function v_3d_rank_params(
    input_datasets: Array<InputPathType>,
    output_prefix: string | null = null,
    version_info: boolean = false,
    help_info: boolean = false,
): V3dRankParametersTagged {
    const params = {
        "@type": "afni/3dRank" as const,
        "input_datasets": input_datasets,
        "version_info": version_info,
        "help_info": help_info,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_rank_cargs(
    params: V3dRankParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dRank");
    cargs.push(...(params["input_datasets"] ?? null).map(f => execution.inputFile(f)));
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["version_info"] ?? false)) {
        cargs.push("-ver");
    }
    if ((params["help_info"] ?? false)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_rank_outputs(
    params: V3dRankParameters,
    execution: Execution,
): V3dRankOutputs {
    const ret: V3dRankOutputs = {
        root: execution.outputFile("."),
        output_dataset_head: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".HEAD"].join('')) : null,
        output_dataset_brik: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".BRIK"].join('')) : null,
        rank_map_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


/**
 * 3dRank
 *
 * Replaces voxel values by their rank in the set of values collected over all voxels in all input datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dRankOutputs`).
 */
function v_3d_rank_execute(
    params: V3dRankParameters,
    runner: Runner | null = null,
): V3dRankOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_RANK_METADATA);
    params = execution.params(params)
    const cargs = v_3d_rank_cargs(params, execution)
    const ret = v_3d_rank_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dRank
 *
 * Replaces voxel values by their rank in the set of values collected over all voxels in all input datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_datasets Input datasets. Acceptable data types are: byte, short, and floats.
 * @param output_prefix Output prefix. If you have multiple datasets on input, the prefix is preceded by r00., r01., etc. If no prefix is given, the default is rank.DATASET1, rank.DATASET2, etc.
 * @param version_info Print author and version info
 * @param help_info Print this help screen
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dRankOutputs`).
 */
function v_3d_rank(
    input_datasets: Array<InputPathType>,
    output_prefix: string | null = null,
    version_info: boolean = false,
    help_info: boolean = false,
    runner: Runner | null = null,
): V3dRankOutputs {
    const params = v_3d_rank_params(input_datasets, output_prefix, version_info, help_info)
    return v_3d_rank_execute(params, runner);
}


export {
      V3dRankOutputs,
      V_3D_RANK_METADATA,
      v_3d_rank,
      v_3d_rank_execute,
      v_3d_rank_params,
};
