// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_UPSAMPLE_METADATA: Metadata = {
    id: "1517c44535a12e8aed86c6a112d119fc406a90b4.boutiques",
    name: "3dUpsample",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dUpsampleParameters {
    "@type": "afni.3dUpsample";
    "upsample_factor": number;
    "input_dataset": string;
    "linear_interpolation": boolean;
    "output_prefix"?: string | null | undefined;
    "verbose_flag": boolean;
    "datatype"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dUpsample": v_3d_upsample_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dUpsample": v_3d_upsample_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_upsample(...)`.
 *
 * @interface
 */
interface V3dUpsampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Upsampled dataset in BRIK format.
     */
    output_brik: OutputPathType | null;
    /**
     * Header information for the upsampled dataset.
     */
    output_head: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param upsample_factor Upsampling factor; must be between 2 and 320 (inclusive)
 * @param input_dataset Input dataset
 * @param linear_interpolation Use linear interpolation instead of 7th order polynomial interpolation
 * @param output_prefix Define the prefix name of the output dataset; default is 'Upsam'
 * @param verbose_flag Print verbose output
 * @param datatype Specify the datatype for the output dataset (float, short, byte); default is float
 *
 * @returns Parameter dictionary
 */
function v_3d_upsample_params(
    upsample_factor: number,
    input_dataset: string,
    linear_interpolation: boolean = false,
    output_prefix: string | null = null,
    verbose_flag: boolean = false,
    datatype: string | null = null,
): V3dUpsampleParameters {
    const params = {
        "@type": "afni.3dUpsample" as const,
        "upsample_factor": upsample_factor,
        "input_dataset": input_dataset,
        "linear_interpolation": linear_interpolation,
        "verbose_flag": verbose_flag,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_upsample_cargs(
    params: V3dUpsampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dUpsample");
    cargs.push(
        "-n",
        String((params["upsample_factor"] ?? null))
    );
    cargs.push(
        "-input",
        (params["input_dataset"] ?? null)
    );
    if ((params["linear_interpolation"] ?? null)) {
        cargs.push("-1");
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datatype"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_upsample_outputs(
    params: V3dUpsampleParameters,
    execution: Execution,
): V3dUpsampleOutputs {
    const ret: V3dUpsampleOutputs = {
        root: execution.outputFile("."),
        output_brik: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "+orig.BRIK"].join('')) : null,
        output_head: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "+orig.HEAD"].join('')) : null,
    };
    return ret;
}


/**
 * Upsamples a 3D+time dataset in the time direction by a specified factor.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dUpsampleOutputs`).
 */
function v_3d_upsample_execute(
    params: V3dUpsampleParameters,
    execution: Execution,
): V3dUpsampleOutputs {
    params = execution.params(params)
    const cargs = v_3d_upsample_cargs(params, execution)
    const ret = v_3d_upsample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Upsamples a 3D+time dataset in the time direction by a specified factor.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param upsample_factor Upsampling factor; must be between 2 and 320 (inclusive)
 * @param input_dataset Input dataset
 * @param linear_interpolation Use linear interpolation instead of 7th order polynomial interpolation
 * @param output_prefix Define the prefix name of the output dataset; default is 'Upsam'
 * @param verbose_flag Print verbose output
 * @param datatype Specify the datatype for the output dataset (float, short, byte); default is float
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dUpsampleOutputs`).
 */
function v_3d_upsample(
    upsample_factor: number,
    input_dataset: string,
    linear_interpolation: boolean = false,
    output_prefix: string | null = null,
    verbose_flag: boolean = false,
    datatype: string | null = null,
    runner: Runner | null = null,
): V3dUpsampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_UPSAMPLE_METADATA);
    const params = v_3d_upsample_params(upsample_factor, input_dataset, linear_interpolation, output_prefix, verbose_flag, datatype)
    return v_3d_upsample_execute(params, execution);
}


export {
      V3dUpsampleOutputs,
      V3dUpsampleParameters,
      V_3D_UPSAMPLE_METADATA,
      v_3d_upsample,
      v_3d_upsample_cargs,
      v_3d_upsample_execute,
      v_3d_upsample_outputs,
      v_3d_upsample_params,
};
