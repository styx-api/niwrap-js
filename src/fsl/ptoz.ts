// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PTOZ_METADATA: Metadata = {
    id: "90ca0bfcdf251f34c678715ab57693120c296204.boutiques",
    name: "ptoz",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PtozParameters {
    "@type"?: "fsl/ptoz";
    "p_value": number;
    "tail_flag": boolean;
    "grf_flag"?: number | null | undefined;
}
type PtozParametersTagged = Required<Pick<PtozParameters, '@type'>> & PtozParameters;


/**
 * Output object returned when calling `PtozParameters(...)`.
 *
 * @interface
 */
interface PtozOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param p_value p-value to convert
 * @param tail_flag Use 2-tailed conversion
 * @param grf_flag Use GRF maximum-height theory instead of Gaussian pdf
 *
 * @returns Parameter dictionary
 */
function ptoz_params(
    p_value: number,
    tail_flag: boolean = false,
    grf_flag: number | null = null,
): PtozParametersTagged {
    const params = {
        "@type": "fsl/ptoz" as const,
        "p_value": p_value,
        "tail_flag": tail_flag,
    };
    if (grf_flag !== null) {
        params["grf_flag"] = grf_flag;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ptoz_cargs(
    params: PtozParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ptoz");
    cargs.push(String((params["p_value"] ?? null)));
    if ((params["tail_flag"] ?? false)) {
        cargs.push("-2");
    }
    if ((params["grf_flag"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["grf_flag"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ptoz_outputs(
    params: PtozParameters,
    execution: Execution,
): PtozOutputs {
    const ret: PtozOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * ptoz
 *
 * Convert p-values to z-values.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PtozOutputs`).
 */
function ptoz_execute(
    params: PtozParameters,
    runner: Runner | null = null,
): PtozOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PTOZ_METADATA);
    params = execution.params(params)
    const cargs = ptoz_cargs(params, execution)
    const ret = ptoz_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ptoz
 *
 * Convert p-values to z-values.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param p_value p-value to convert
 * @param tail_flag Use 2-tailed conversion
 * @param grf_flag Use GRF maximum-height theory instead of Gaussian pdf
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PtozOutputs`).
 */
function ptoz(
    p_value: number,
    tail_flag: boolean = false,
    grf_flag: number | null = null,
    runner: Runner | null = null,
): PtozOutputs {
    const params = ptoz_params(p_value, tail_flag, grf_flag)
    return ptoz_execute(params, runner);
}


export {
      PTOZ_METADATA,
      PtozOutputs,
      ptoz,
      ptoz_execute,
      ptoz_params,
};
