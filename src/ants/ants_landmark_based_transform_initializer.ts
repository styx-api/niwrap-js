// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_LANDMARK_BASED_TRANSFORM_INITIALIZER_METADATA: Metadata = {
    id: "0a1f0f529ca0b132289382b0bfa307fd1e5cda95.boutiques",
    name: "antsLandmarkBasedTransformInitializer",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsLandmarkBasedTransformInitializerParameters {
    "@type": "ants.antsLandmarkBasedTransformInitializer";
    "dimension": number;
    "fixed_image": InputPathType;
    "moving_image": InputPathType;
    "transform_type": "rigid" | "affine" | "bspline";
    "output_transform": string;
    "mesh_size"?: string | null | undefined;
    "number_of_levels"?: number | null | undefined;
    "order"?: number | null | undefined;
    "enforce_stationary_boundaries"?: 0 | 1 | null | undefined;
    "landmark_weights"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.antsLandmarkBasedTransformInitializer": ants_landmark_based_transform_initializer_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.antsLandmarkBasedTransformInitializer": ants_landmark_based_transform_initializer_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_landmark_based_transform_initializer(...)`.
 *
 * @interface
 */
interface AntsLandmarkBasedTransformInitializerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file containing the initialized transform.
     */
    output_transform: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dimension The dimensionality of the registration problem (e.g., 2 for 2D, 3 for 3D).
 * @param fixed_image The fixed image in the registration process.
 * @param moving_image The moving image in the registration process.
 * @param transform_type The type of transform to initialize. Options are 'rigid', 'affine', or 'bspline'.
 * @param output_transform The output transform file that will be created.
 * @param mesh_size The mesh size for the B-spline transform, specified as 'meshSize[0]xmeshSize[1]x...'. Default is '1x1x1'.
 * @param number_of_levels Number of levels for multi-resolution fitting. Default is 4.
 * @param order The polynomial order of the B-spline transform. Default is 3.
 * @param enforce_stationary_boundaries Enforces stationary boundaries for the B-spline transform. Default is 1 (true).
 * @param landmark_weights File containing landmark weights. Each row is either 'label,labelWeight' or 'labelWeight'.
 *
 * @returns Parameter dictionary
 */
function ants_landmark_based_transform_initializer_params(
    dimension: number,
    fixed_image: InputPathType,
    moving_image: InputPathType,
    transform_type: "rigid" | "affine" | "bspline",
    output_transform: string,
    mesh_size: string | null = null,
    number_of_levels: number | null = null,
    order: number | null = null,
    enforce_stationary_boundaries: 0 | 1 | null = null,
    landmark_weights: InputPathType | null = null,
): AntsLandmarkBasedTransformInitializerParameters {
    const params = {
        "@type": "ants.antsLandmarkBasedTransformInitializer" as const,
        "dimension": dimension,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "transform_type": transform_type,
        "output_transform": output_transform,
    };
    if (mesh_size !== null) {
        params["mesh_size"] = mesh_size;
    }
    if (number_of_levels !== null) {
        params["number_of_levels"] = number_of_levels;
    }
    if (order !== null) {
        params["order"] = order;
    }
    if (enforce_stationary_boundaries !== null) {
        params["enforce_stationary_boundaries"] = enforce_stationary_boundaries;
    }
    if (landmark_weights !== null) {
        params["landmark_weights"] = landmark_weights;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_landmark_based_transform_initializer_cargs(
    params: AntsLandmarkBasedTransformInitializerParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsLandmarkBasedTransformInitializer");
    cargs.push(String((params["dimension"] ?? null)));
    cargs.push(execution.inputFile((params["fixed_image"] ?? null)));
    cargs.push(execution.inputFile((params["moving_image"] ?? null)));
    cargs.push((params["transform_type"] ?? null));
    cargs.push((params["output_transform"] ?? null));
    if ((params["mesh_size"] ?? null) !== null) {
        cargs.push((params["mesh_size"] ?? null));
    }
    if ((params["number_of_levels"] ?? null) !== null) {
        cargs.push(String((params["number_of_levels"] ?? null)));
    }
    if ((params["order"] ?? null) !== null) {
        cargs.push(String((params["order"] ?? null)));
    }
    if ((params["enforce_stationary_boundaries"] ?? null) !== null) {
        cargs.push(String((params["enforce_stationary_boundaries"] ?? null)));
    }
    if ((params["landmark_weights"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["landmark_weights"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_landmark_based_transform_initializer_outputs(
    params: AntsLandmarkBasedTransformInitializerParameters,
    execution: Execution,
): AntsLandmarkBasedTransformInitializerOutputs {
    const ret: AntsLandmarkBasedTransformInitializerOutputs = {
        root: execution.outputFile("."),
        output_transform: execution.outputFile([(params["output_transform"] ?? null)].join('')),
    };
    return ret;
}


/**
 * This tool initializes a transform between two images based on corresponding landmarks.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `AntsLandmarkBasedTransformInitializerOutputs`).
 */
function ants_landmark_based_transform_initializer_execute(
    params: AntsLandmarkBasedTransformInitializerParameters,
    execution: Execution,
): AntsLandmarkBasedTransformInitializerOutputs {
    params = execution.params(params)
    const cargs = ants_landmark_based_transform_initializer_cargs(params, execution)
    const ret = ants_landmark_based_transform_initializer_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This tool initializes a transform between two images based on corresponding landmarks.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param dimension The dimensionality of the registration problem (e.g., 2 for 2D, 3 for 3D).
 * @param fixed_image The fixed image in the registration process.
 * @param moving_image The moving image in the registration process.
 * @param transform_type The type of transform to initialize. Options are 'rigid', 'affine', or 'bspline'.
 * @param output_transform The output transform file that will be created.
 * @param mesh_size The mesh size for the B-spline transform, specified as 'meshSize[0]xmeshSize[1]x...'. Default is '1x1x1'.
 * @param number_of_levels Number of levels for multi-resolution fitting. Default is 4.
 * @param order The polynomial order of the B-spline transform. Default is 3.
 * @param enforce_stationary_boundaries Enforces stationary boundaries for the B-spline transform. Default is 1 (true).
 * @param landmark_weights File containing landmark weights. Each row is either 'label,labelWeight' or 'labelWeight'.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsLandmarkBasedTransformInitializerOutputs`).
 */
function ants_landmark_based_transform_initializer(
    dimension: number,
    fixed_image: InputPathType,
    moving_image: InputPathType,
    transform_type: "rigid" | "affine" | "bspline",
    output_transform: string,
    mesh_size: string | null = null,
    number_of_levels: number | null = null,
    order: number | null = null,
    enforce_stationary_boundaries: 0 | 1 | null = null,
    landmark_weights: InputPathType | null = null,
    runner: Runner | null = null,
): AntsLandmarkBasedTransformInitializerOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_LANDMARK_BASED_TRANSFORM_INITIALIZER_METADATA);
    const params = ants_landmark_based_transform_initializer_params(dimension, fixed_image, moving_image, transform_type, output_transform, mesh_size, number_of_levels, order, enforce_stationary_boundaries, landmark_weights)
    return ants_landmark_based_transform_initializer_execute(params, execution);
}


export {
      ANTS_LANDMARK_BASED_TRANSFORM_INITIALIZER_METADATA,
      AntsLandmarkBasedTransformInitializerOutputs,
      AntsLandmarkBasedTransformInitializerParameters,
      ants_landmark_based_transform_initializer,
      ants_landmark_based_transform_initializer_cargs,
      ants_landmark_based_transform_initializer_execute,
      ants_landmark_based_transform_initializer_outputs,
      ants_landmark_based_transform_initializer_params,
};
