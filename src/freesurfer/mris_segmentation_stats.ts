// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SEGMENTATION_STATS_METADATA: Metadata = {
    id: "7e3ee3ba2a78febe7620d4f6780e4c14229db52d.boutiques",
    name: "mris_segmentation_stats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSegmentationStatsParameters {
    "@type": "freesurfer.mris_segmentation_stats";
    "overlay_name": string;
    "segmentation_label_name": string;
    "subjects": Array<string>;
    "roc_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_segmentation_stats": mris_segmentation_stats_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_segmentation_stats": mris_segmentation_stats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_segmentation_stats(...)`.
 *
 * @interface
 */
interface MrisSegmentationStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * ROC curve file
     */
    roc_output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param overlay_name Overlay name for segmentation
 * @param segmentation_label_name Segmentation label name
 * @param subjects List of subjects to process
 * @param roc_file File for ROC curve output
 *
 * @returns Parameter dictionary
 */
function mris_segmentation_stats_params(
    overlay_name: string,
    segmentation_label_name: string,
    subjects: Array<string>,
    roc_file: string,
): MrisSegmentationStatsParameters {
    const params = {
        "@type": "freesurfer.mris_segmentation_stats" as const,
        "overlay_name": overlay_name,
        "segmentation_label_name": segmentation_label_name,
        "subjects": subjects,
        "roc_file": roc_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_segmentation_stats_cargs(
    params: MrisSegmentationStatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_segmentation_stats");
    cargs.push((params["overlay_name"] ?? null));
    cargs.push((params["segmentation_label_name"] ?? null));
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["roc_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_segmentation_stats_outputs(
    params: MrisSegmentationStatsParameters,
    execution: Execution,
): MrisSegmentationStatsOutputs {
    const ret: MrisSegmentationStatsOutputs = {
        root: execution.outputFile("."),
        roc_output_file: execution.outputFile([(params["roc_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Tool for calculating segmentation statistics.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSegmentationStatsOutputs`).
 */
function mris_segmentation_stats_execute(
    params: MrisSegmentationStatsParameters,
    runner: Runner | null = null,
): MrisSegmentationStatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SEGMENTATION_STATS_METADATA);
    params = execution.params(params)
    const cargs = mris_segmentation_stats_cargs(params, execution)
    const ret = mris_segmentation_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for calculating segmentation statistics.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param overlay_name Overlay name for segmentation
 * @param segmentation_label_name Segmentation label name
 * @param subjects List of subjects to process
 * @param roc_file File for ROC curve output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSegmentationStatsOutputs`).
 */
function mris_segmentation_stats(
    overlay_name: string,
    segmentation_label_name: string,
    subjects: Array<string>,
    roc_file: string,
    runner: Runner | null = null,
): MrisSegmentationStatsOutputs {
    const params = mris_segmentation_stats_params(overlay_name, segmentation_label_name, subjects, roc_file)
    return mris_segmentation_stats_execute(params, runner);
}


export {
      MRIS_SEGMENTATION_STATS_METADATA,
      MrisSegmentationStatsOutputs,
      MrisSegmentationStatsParameters,
      mris_segmentation_stats,
      mris_segmentation_stats_execute,
      mris_segmentation_stats_params,
};
