// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_ROIS_FROM_EXTREMA_METADATA: Metadata = {
    id: "0caffb618e201f15ec1e86b69b9eeed2c42f3660.boutiques",
    name: "cifti-rois-from-extrema",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiRoisFromExtremaGaussianParameters {
    "@type": "workbench.cifti-rois-from-extrema.gaussian";
    "surf_sigma": number;
    "vol_sigma": number;
}


interface CiftiRoisFromExtremaParameters {
    "@type": "workbench.cifti-rois-from-extrema";
    "cifti": InputPathType;
    "surf_limit": number;
    "vol_limit": number;
    "direction": string;
    "cifti_out": string;
    "opt_left_surface_surface"?: InputPathType | null | undefined;
    "opt_right_surface_surface"?: InputPathType | null | undefined;
    "opt_cerebellum_surface_surface"?: InputPathType | null | undefined;
    "gaussian"?: CiftiRoisFromExtremaGaussianParameters | null | undefined;
    "opt_overlap_logic_method"?: string | null | undefined;
    "opt_merged_volume": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-rois-from-extrema": cifti_rois_from_extrema_cargs,
        "workbench.cifti-rois-from-extrema.gaussian": cifti_rois_from_extrema_gaussian_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-rois-from-extrema": cifti_rois_from_extrema_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param surf_sigma the sigma for the surface gaussian kernel, in mm
 * @param vol_sigma the sigma for the volume gaussian kernel, in mm
 *
 * @returns Parameter dictionary
 */
function cifti_rois_from_extrema_gaussian_params(
    surf_sigma: number,
    vol_sigma: number,
): CiftiRoisFromExtremaGaussianParameters {
    const params = {
        "@type": "workbench.cifti-rois-from-extrema.gaussian" as const,
        "surf_sigma": surf_sigma,
        "vol_sigma": vol_sigma,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_rois_from_extrema_gaussian_cargs(
    params: CiftiRoisFromExtremaGaussianParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-gaussian");
    cargs.push(String((params["surf_sigma"] ?? null)));
    cargs.push(String((params["vol_sigma"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `cifti_rois_from_extrema(...)`.
 *
 * @interface
 */
interface CiftiRoisFromExtremaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti the input cifti
 * @param surf_limit geodesic distance limit from vertex, in mm
 * @param vol_limit euclidean distance limit from voxel center, in mm
 * @param direction which dimension an extrema map is along, ROW or COLUMN
 * @param cifti_out the output cifti
 * @param opt_left_surface_surface specify the left surface to use: the left surface file
 * @param opt_right_surface_surface specify the right surface to use: the right surface file
 * @param opt_cerebellum_surface_surface specify the cerebellum surface to use: the cerebellum surface file
 * @param gaussian generate gaussian kernels instead of flat ROIs
 * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
 * @param opt_merged_volume treat volume components as if they were a single component
 *
 * @returns Parameter dictionary
 */
function cifti_rois_from_extrema_params(
    cifti: InputPathType,
    surf_limit: number,
    vol_limit: number,
    direction: string,
    cifti_out: string,
    opt_left_surface_surface: InputPathType | null = null,
    opt_right_surface_surface: InputPathType | null = null,
    opt_cerebellum_surface_surface: InputPathType | null = null,
    gaussian: CiftiRoisFromExtremaGaussianParameters | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_merged_volume: boolean = false,
): CiftiRoisFromExtremaParameters {
    const params = {
        "@type": "workbench.cifti-rois-from-extrema" as const,
        "cifti": cifti,
        "surf_limit": surf_limit,
        "vol_limit": vol_limit,
        "direction": direction,
        "cifti_out": cifti_out,
        "opt_merged_volume": opt_merged_volume,
    };
    if (opt_left_surface_surface !== null) {
        params["opt_left_surface_surface"] = opt_left_surface_surface;
    }
    if (opt_right_surface_surface !== null) {
        params["opt_right_surface_surface"] = opt_right_surface_surface;
    }
    if (opt_cerebellum_surface_surface !== null) {
        params["opt_cerebellum_surface_surface"] = opt_cerebellum_surface_surface;
    }
    if (gaussian !== null) {
        params["gaussian"] = gaussian;
    }
    if (opt_overlap_logic_method !== null) {
        params["opt_overlap_logic_method"] = opt_overlap_logic_method;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_rois_from_extrema_cargs(
    params: CiftiRoisFromExtremaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-rois-from-extrema");
    cargs.push(execution.inputFile((params["cifti"] ?? null)));
    cargs.push(String((params["surf_limit"] ?? null)));
    cargs.push(String((params["vol_limit"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_left_surface_surface"] ?? null) !== null) {
        cargs.push(
            "-left-surface",
            execution.inputFile((params["opt_left_surface_surface"] ?? null))
        );
    }
    if ((params["opt_right_surface_surface"] ?? null) !== null) {
        cargs.push(
            "-right-surface",
            execution.inputFile((params["opt_right_surface_surface"] ?? null))
        );
    }
    if ((params["opt_cerebellum_surface_surface"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-surface",
            execution.inputFile((params["opt_cerebellum_surface_surface"] ?? null))
        );
    }
    if ((params["gaussian"] ?? null) !== null) {
        cargs.push(...dynCargs((params["gaussian"] ?? null)["@type"])((params["gaussian"] ?? null), execution));
    }
    if ((params["opt_overlap_logic_method"] ?? null) !== null) {
        cargs.push(
            "-overlap-logic",
            (params["opt_overlap_logic_method"] ?? null)
        );
    }
    if ((params["opt_merged_volume"] ?? null)) {
        cargs.push("-merged-volume");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_rois_from_extrema_outputs(
    params: CiftiRoisFromExtremaParameters,
    execution: Execution,
): CiftiRoisFromExtremaOutputs {
    const ret: CiftiRoisFromExtremaOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Create cifti roi maps from extrema maps.
 *
 * For each nonzero value in each map, make a map with an ROI around that location.  If the -gaussian option is specified, then normalized gaussian kernels are output instead of ROIs.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CiftiRoisFromExtremaOutputs`).
 */
function cifti_rois_from_extrema_execute(
    params: CiftiRoisFromExtremaParameters,
    execution: Execution,
): CiftiRoisFromExtremaOutputs {
    params = execution.params(params)
    const cargs = cifti_rois_from_extrema_cargs(params, execution)
    const ret = cifti_rois_from_extrema_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Create cifti roi maps from extrema maps.
 *
 * For each nonzero value in each map, make a map with an ROI around that location.  If the -gaussian option is specified, then normalized gaussian kernels are output instead of ROIs.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti the input cifti
 * @param surf_limit geodesic distance limit from vertex, in mm
 * @param vol_limit euclidean distance limit from voxel center, in mm
 * @param direction which dimension an extrema map is along, ROW or COLUMN
 * @param cifti_out the output cifti
 * @param opt_left_surface_surface specify the left surface to use: the left surface file
 * @param opt_right_surface_surface specify the right surface to use: the right surface file
 * @param opt_cerebellum_surface_surface specify the cerebellum surface to use: the cerebellum surface file
 * @param gaussian generate gaussian kernels instead of flat ROIs
 * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
 * @param opt_merged_volume treat volume components as if they were a single component
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiRoisFromExtremaOutputs`).
 */
function cifti_rois_from_extrema(
    cifti: InputPathType,
    surf_limit: number,
    vol_limit: number,
    direction: string,
    cifti_out: string,
    opt_left_surface_surface: InputPathType | null = null,
    opt_right_surface_surface: InputPathType | null = null,
    opt_cerebellum_surface_surface: InputPathType | null = null,
    gaussian: CiftiRoisFromExtremaGaussianParameters | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_merged_volume: boolean = false,
    runner: Runner | null = null,
): CiftiRoisFromExtremaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_ROIS_FROM_EXTREMA_METADATA);
    const params = cifti_rois_from_extrema_params(cifti, surf_limit, vol_limit, direction, cifti_out, opt_left_surface_surface, opt_right_surface_surface, opt_cerebellum_surface_surface, gaussian, opt_overlap_logic_method, opt_merged_volume)
    return cifti_rois_from_extrema_execute(params, execution);
}


export {
      CIFTI_ROIS_FROM_EXTREMA_METADATA,
      CiftiRoisFromExtremaGaussianParameters,
      CiftiRoisFromExtremaOutputs,
      CiftiRoisFromExtremaParameters,
      cifti_rois_from_extrema,
      cifti_rois_from_extrema_cargs,
      cifti_rois_from_extrema_execute,
      cifti_rois_from_extrema_gaussian_cargs,
      cifti_rois_from_extrema_gaussian_params,
      cifti_rois_from_extrema_outputs,
      cifti_rois_from_extrema_params,
};
