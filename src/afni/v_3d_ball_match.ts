// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_BALL_MATCH_METADATA: Metadata = {
    id: "e91bd8bca8af6f73af7781b32ec76cb4701697b9.boutiques",
    name: "3dBallMatch",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dBallMatchParameters {
    "@type": "afni.3dBallMatch";
    "input_dataset": InputPathType;
    "radius"?: number | null | undefined;
    "dataset_option"?: string | null | undefined;
    "ball_radius"?: number | null | undefined;
    "spheroid_axes"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dBallMatch": v_3d_ball_match_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dBallMatch": v_3d_ball_match_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_ball_match(...)`.
 *
 * @interface
 */
interface V3dBallMatchOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output containing matching coordinates and related data
     */
    output_stdout: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset (e.g., Fred.nii)
 * @param radius Radius of the 3D ball to match (in mm)
 * @param dataset_option Specifies the input dataset
 * @param ball_radius Set the radius of the 3D ball to match (mm)
 * @param spheroid_axes Match with a spheroid of revolution, with principal axis radius 'a' and secondary axes radii 'b'
 *
 * @returns Parameter dictionary
 */
function v_3d_ball_match_params(
    input_dataset: InputPathType,
    radius: number | null = null,
    dataset_option: string | null = null,
    ball_radius: number | null = null,
    spheroid_axes: Array<number> | null = null,
): V3dBallMatchParameters {
    const params = {
        "@type": "afni.3dBallMatch" as const,
        "input_dataset": input_dataset,
    };
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (dataset_option !== null) {
        params["dataset_option"] = dataset_option;
    }
    if (ball_radius !== null) {
        params["ball_radius"] = ball_radius;
    }
    if (spheroid_axes !== null) {
        params["spheroid_axes"] = spheroid_axes;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_ball_match_cargs(
    params: V3dBallMatchParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dBallMatch");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["radius"] ?? null) !== null) {
        cargs.push(String((params["radius"] ?? null)));
    }
    if ((params["dataset_option"] ?? null) !== null) {
        cargs.push(
            "-input",
            (params["dataset_option"] ?? null)
        );
    }
    if ((params["ball_radius"] ?? null) !== null) {
        cargs.push(
            "-ball",
            String((params["ball_radius"] ?? null))
        );
    }
    if ((params["spheroid_axes"] ?? null) !== null) {
        cargs.push(
            "-spheroid",
            ...(params["spheroid_axes"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_ball_match_outputs(
    params: V3dBallMatchParameters,
    execution: Execution,
): V3dBallMatchOutputs {
    const ret: V3dBallMatchOutputs = {
        root: execution.outputFile("."),
        output_stdout: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * 3dBallMatch
 *
 * A tool to find a good match between a ball (filled sphere) of the given radius and a dataset to determine a crude approximate center of the brain quickly.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBallMatchOutputs`).
 */
function v_3d_ball_match_execute(
    params: V3dBallMatchParameters,
    runner: Runner | null = null,
): V3dBallMatchOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_BALL_MATCH_METADATA);
    params = execution.params(params)
    const cargs = v_3d_ball_match_cargs(params, execution)
    const ret = v_3d_ball_match_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dBallMatch
 *
 * A tool to find a good match between a ball (filled sphere) of the given radius and a dataset to determine a crude approximate center of the brain quickly.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset (e.g., Fred.nii)
 * @param radius Radius of the 3D ball to match (in mm)
 * @param dataset_option Specifies the input dataset
 * @param ball_radius Set the radius of the 3D ball to match (mm)
 * @param spheroid_axes Match with a spheroid of revolution, with principal axis radius 'a' and secondary axes radii 'b'
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBallMatchOutputs`).
 */
function v_3d_ball_match(
    input_dataset: InputPathType,
    radius: number | null = null,
    dataset_option: string | null = null,
    ball_radius: number | null = null,
    spheroid_axes: Array<number> | null = null,
    runner: Runner | null = null,
): V3dBallMatchOutputs {
    const params = v_3d_ball_match_params(input_dataset, radius, dataset_option, ball_radius, spheroid_axes)
    return v_3d_ball_match_execute(params, runner);
}


export {
      V3dBallMatchOutputs,
      V3dBallMatchParameters,
      V_3D_BALL_MATCH_METADATA,
      v_3d_ball_match,
      v_3d_ball_match_execute,
      v_3d_ball_match_params,
};
