// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CREATE_DENSE_FROM_TEMPLATE_METADATA: Metadata = {
    id: "11c74fde04f118c37341d938760e0fb6ae8b5218.boutiques",
    name: "cifti-create-dense-from-template",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiCreateDenseFromTemplateSeriesParameters {
    "@type"?: "series";
    "step": number;
    "start": number;
    "opt_unit_unit"?: string | null | undefined;
}
type CiftiCreateDenseFromTemplateSeriesParametersTagged = Required<Pick<CiftiCreateDenseFromTemplateSeriesParameters, '@type'>> & CiftiCreateDenseFromTemplateSeriesParameters;


interface CiftiCreateDenseFromTemplateVolumeAllParameters {
    "@type"?: "volume_all";
    "volume_in": InputPathType;
    "opt_from_cropped": boolean;
}
type CiftiCreateDenseFromTemplateVolumeAllParametersTagged = Required<Pick<CiftiCreateDenseFromTemplateVolumeAllParameters, '@type'>> & CiftiCreateDenseFromTemplateVolumeAllParameters;


interface CiftiCreateDenseFromTemplateCiftiParameters {
    "@type"?: "cifti";
    "cifti_in": InputPathType;
}
type CiftiCreateDenseFromTemplateCiftiParametersTagged = Required<Pick<CiftiCreateDenseFromTemplateCiftiParameters, '@type'>> & CiftiCreateDenseFromTemplateCiftiParameters;


interface CiftiCreateDenseFromTemplateMetricParameters {
    "@type"?: "metric";
    "structure": string;
    "metric_in": InputPathType;
}
type CiftiCreateDenseFromTemplateMetricParametersTagged = Required<Pick<CiftiCreateDenseFromTemplateMetricParameters, '@type'>> & CiftiCreateDenseFromTemplateMetricParameters;


interface CiftiCreateDenseFromTemplateLabelParameters {
    "@type"?: "label";
    "structure": string;
    "label_in": InputPathType;
}
type CiftiCreateDenseFromTemplateLabelParametersTagged = Required<Pick<CiftiCreateDenseFromTemplateLabelParameters, '@type'>> & CiftiCreateDenseFromTemplateLabelParameters;


interface CiftiCreateDenseFromTemplateVolumeParameters {
    "@type"?: "volume";
    "structure": string;
    "volume_in": InputPathType;
    "opt_from_cropped": boolean;
}
type CiftiCreateDenseFromTemplateVolumeParametersTagged = Required<Pick<CiftiCreateDenseFromTemplateVolumeParameters, '@type'>> & CiftiCreateDenseFromTemplateVolumeParameters;


interface CiftiCreateDenseFromTemplateParameters {
    "@type"?: "workbench/cifti-create-dense-from-template";
    "template_cifti": InputPathType;
    "cifti_out": string;
    "series"?: CiftiCreateDenseFromTemplateSeriesParameters | null | undefined;
    "volume_all"?: CiftiCreateDenseFromTemplateVolumeAllParameters | null | undefined;
    "opt_label_collision_action"?: string | null | undefined;
    "cifti"?: Array<CiftiCreateDenseFromTemplateCiftiParameters> | null | undefined;
    "metric"?: Array<CiftiCreateDenseFromTemplateMetricParameters> | null | undefined;
    "label"?: Array<CiftiCreateDenseFromTemplateLabelParameters> | null | undefined;
    "volume"?: Array<CiftiCreateDenseFromTemplateVolumeParameters> | null | undefined;
}
type CiftiCreateDenseFromTemplateParametersTagged = Required<Pick<CiftiCreateDenseFromTemplateParameters, '@type'>> & CiftiCreateDenseFromTemplateParameters;


/**
 * Build parameters.
 *
 * @param step increment between series points
 * @param start start value of the series
 * @param opt_unit_unit select unit for series (default SECOND): unit identifier
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_from_template_series_params(
    step: number,
    start: number,
    opt_unit_unit: string | null = null,
): CiftiCreateDenseFromTemplateSeriesParametersTagged {
    const params = {
        "@type": "series" as const,
        "step": step,
        "start": start,
    };
    if (opt_unit_unit !== null) {
        params["opt_unit_unit"] = opt_unit_unit;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_from_template_series_cargs(
    params: CiftiCreateDenseFromTemplateSeriesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-series");
    cargs.push(String((params["step"] ?? null)));
    cargs.push(String((params["start"] ?? null)));
    if ((params["opt_unit_unit"] ?? null) !== null) {
        cargs.push(
            "-unit",
            (params["opt_unit_unit"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param volume_in the input volume file
 * @param opt_from_cropped the input is cropped to the size of the voxel data in the template file
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_from_template_volume_all_params(
    volume_in: InputPathType,
    opt_from_cropped: boolean = false,
): CiftiCreateDenseFromTemplateVolumeAllParametersTagged {
    const params = {
        "@type": "volume_all" as const,
        "volume_in": volume_in,
        "opt_from_cropped": opt_from_cropped,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_from_template_volume_all_cargs(
    params: CiftiCreateDenseFromTemplateVolumeAllParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume-all");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    if ((params["opt_from_cropped"] ?? false)) {
        cargs.push("-from-cropped");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param cifti_in cifti file containing input data
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_from_template_cifti_params(
    cifti_in: InputPathType,
): CiftiCreateDenseFromTemplateCiftiParametersTagged {
    const params = {
        "@type": "cifti" as const,
        "cifti_in": cifti_in,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_from_template_cifti_cargs(
    params: CiftiCreateDenseFromTemplateCiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cifti");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param structure which structure to put the metric file into
 * @param metric_in input metric file
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_from_template_metric_params(
    structure: string,
    metric_in: InputPathType,
): CiftiCreateDenseFromTemplateMetricParametersTagged {
    const params = {
        "@type": "metric" as const,
        "structure": structure,
        "metric_in": metric_in,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_from_template_metric_cargs(
    params: CiftiCreateDenseFromTemplateMetricParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-metric");
    cargs.push((params["structure"] ?? null));
    cargs.push(execution.inputFile((params["metric_in"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param structure which structure to put the label file into
 * @param label_in input label file
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_from_template_label_params(
    structure: string,
    label_in: InputPathType,
): CiftiCreateDenseFromTemplateLabelParametersTagged {
    const params = {
        "@type": "label" as const,
        "structure": structure,
        "label_in": label_in,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_from_template_label_cargs(
    params: CiftiCreateDenseFromTemplateLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-label");
    cargs.push((params["structure"] ?? null));
    cargs.push(execution.inputFile((params["label_in"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param structure which structure to put the volume file into
 * @param volume_in the input volume file
 * @param opt_from_cropped the input is cropped to the size of the volume structure
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_from_template_volume_params(
    structure: string,
    volume_in: InputPathType,
    opt_from_cropped: boolean = false,
): CiftiCreateDenseFromTemplateVolumeParametersTagged {
    const params = {
        "@type": "volume" as const,
        "structure": structure,
        "volume_in": volume_in,
        "opt_from_cropped": opt_from_cropped,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_from_template_volume_cargs(
    params: CiftiCreateDenseFromTemplateVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume");
    cargs.push((params["structure"] ?? null));
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    if ((params["opt_from_cropped"] ?? false)) {
        cargs.push("-from-cropped");
    }
    return cargs;
}


/**
 * Output object returned when calling `CiftiCreateDenseFromTemplateParameters(...)`.
 *
 * @interface
 */
interface CiftiCreateDenseFromTemplateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param template_cifti file to match brainordinates of
 * @param cifti_out the output cifti file
 * @param series make a dtseries file instead of a dscalar
 * @param volume_all specify an input volume file for all voxel data
 * @param opt_label_collision_action how to handle conflicts between label keys: 'ERROR', 'SURFACES_FIRST', or 'LEGACY', default 'ERROR', use 'LEGACY' to match v1.4.2 and earlier
 * @param cifti use input data from a cifti file
 * @param metric use input data from a metric file
 * @param label use input data from surface label files
 * @param volume use a volume file for a single volume structure's data
 *
 * @returns Parameter dictionary
 */
function cifti_create_dense_from_template_params(
    template_cifti: InputPathType,
    cifti_out: string,
    series: CiftiCreateDenseFromTemplateSeriesParameters | null = null,
    volume_all: CiftiCreateDenseFromTemplateVolumeAllParameters | null = null,
    opt_label_collision_action: string | null = null,
    cifti: Array<CiftiCreateDenseFromTemplateCiftiParameters> | null = null,
    metric: Array<CiftiCreateDenseFromTemplateMetricParameters> | null = null,
    label: Array<CiftiCreateDenseFromTemplateLabelParameters> | null = null,
    volume: Array<CiftiCreateDenseFromTemplateVolumeParameters> | null = null,
): CiftiCreateDenseFromTemplateParametersTagged {
    const params = {
        "@type": "workbench/cifti-create-dense-from-template" as const,
        "template_cifti": template_cifti,
        "cifti_out": cifti_out,
    };
    if (series !== null) {
        params["series"] = series;
    }
    if (volume_all !== null) {
        params["volume_all"] = volume_all;
    }
    if (opt_label_collision_action !== null) {
        params["opt_label_collision_action"] = opt_label_collision_action;
    }
    if (cifti !== null) {
        params["cifti"] = cifti;
    }
    if (metric !== null) {
        params["metric"] = metric;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (volume !== null) {
        params["volume"] = volume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_dense_from_template_cargs(
    params: CiftiCreateDenseFromTemplateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-create-dense-from-template");
    cargs.push(execution.inputFile((params["template_cifti"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["series"] ?? null) !== null) {
        cargs.push(...cifti_create_dense_from_template_series_cargs((params["series"] ?? null), execution));
    }
    if ((params["volume_all"] ?? null) !== null) {
        cargs.push(...cifti_create_dense_from_template_volume_all_cargs((params["volume_all"] ?? null), execution));
    }
    if ((params["opt_label_collision_action"] ?? null) !== null) {
        cargs.push(
            "-label-collision",
            (params["opt_label_collision_action"] ?? null)
        );
    }
    if ((params["cifti"] ?? null) !== null) {
        cargs.push(...(params["cifti"] ?? null).map(s => cifti_create_dense_from_template_cifti_cargs(s, execution)).flat());
    }
    if ((params["metric"] ?? null) !== null) {
        cargs.push(...(params["metric"] ?? null).map(s => cifti_create_dense_from_template_metric_cargs(s, execution)).flat());
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(...(params["label"] ?? null).map(s => cifti_create_dense_from_template_label_cargs(s, execution)).flat());
    }
    if ((params["volume"] ?? null) !== null) {
        cargs.push(...(params["volume"] ?? null).map(s => cifti_create_dense_from_template_volume_cargs(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_create_dense_from_template_outputs(
    params: CiftiCreateDenseFromTemplateParameters,
    execution: Execution,
): CiftiCreateDenseFromTemplateOutputs {
    const ret: CiftiCreateDenseFromTemplateOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-create-dense-from-template
 *
 * Create cifti with matching dense map.
 *
 * This command helps you make a new dscalar, dtseries, or dlabel cifti file that matches the brainordinate space used in another cifti file.  The template file must have the desired brainordinate space in the mapping along the column direction (for dtseries, dscalar, dlabel, and symmetric dconn this is always the case).  All input cifti files must have a brain models mapping along column and use the same volume space and/or surface vertex count as the template for structures that they contain.  If any input files contain label data, then input files with non-label data are not allowed, and the -series option may not be used.
 *
 * Any structure that isn't covered by an input is filled with zeros or the unlabeled key.
 *
 * The <structure> argument of -metric, -label or -volume must be one of the following:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT
 *
 * The argument to -unit must be one of the following:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiCreateDenseFromTemplateOutputs`).
 */
function cifti_create_dense_from_template_execute(
    params: CiftiCreateDenseFromTemplateParameters,
    runner: Runner | null = null,
): CiftiCreateDenseFromTemplateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CREATE_DENSE_FROM_TEMPLATE_METADATA);
    params = execution.params(params)
    const cargs = cifti_create_dense_from_template_cargs(params, execution)
    const ret = cifti_create_dense_from_template_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-create-dense-from-template
 *
 * Create cifti with matching dense map.
 *
 * This command helps you make a new dscalar, dtseries, or dlabel cifti file that matches the brainordinate space used in another cifti file.  The template file must have the desired brainordinate space in the mapping along the column direction (for dtseries, dscalar, dlabel, and symmetric dconn this is always the case).  All input cifti files must have a brain models mapping along column and use the same volume space and/or surface vertex count as the template for structures that they contain.  If any input files contain label data, then input files with non-label data are not allowed, and the -series option may not be used.
 *
 * Any structure that isn't covered by an input is filled with zeros or the unlabeled key.
 *
 * The <structure> argument of -metric, -label or -volume must be one of the following:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT
 *
 * The argument to -unit must be one of the following:
 *
 * SECOND
 * HERTZ
 * METER
 * RADIAN.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param template_cifti file to match brainordinates of
 * @param cifti_out the output cifti file
 * @param series make a dtseries file instead of a dscalar
 * @param volume_all specify an input volume file for all voxel data
 * @param opt_label_collision_action how to handle conflicts between label keys: 'ERROR', 'SURFACES_FIRST', or 'LEGACY', default 'ERROR', use 'LEGACY' to match v1.4.2 and earlier
 * @param cifti use input data from a cifti file
 * @param metric use input data from a metric file
 * @param label use input data from surface label files
 * @param volume use a volume file for a single volume structure's data
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiCreateDenseFromTemplateOutputs`).
 */
function cifti_create_dense_from_template(
    template_cifti: InputPathType,
    cifti_out: string,
    series: CiftiCreateDenseFromTemplateSeriesParameters | null = null,
    volume_all: CiftiCreateDenseFromTemplateVolumeAllParameters | null = null,
    opt_label_collision_action: string | null = null,
    cifti: Array<CiftiCreateDenseFromTemplateCiftiParameters> | null = null,
    metric: Array<CiftiCreateDenseFromTemplateMetricParameters> | null = null,
    label: Array<CiftiCreateDenseFromTemplateLabelParameters> | null = null,
    volume: Array<CiftiCreateDenseFromTemplateVolumeParameters> | null = null,
    runner: Runner | null = null,
): CiftiCreateDenseFromTemplateOutputs {
    const params = cifti_create_dense_from_template_params(template_cifti, cifti_out, series, volume_all, opt_label_collision_action, cifti, metric, label, volume)
    return cifti_create_dense_from_template_execute(params, runner);
}


export {
      CIFTI_CREATE_DENSE_FROM_TEMPLATE_METADATA,
      CiftiCreateDenseFromTemplateOutputs,
      cifti_create_dense_from_template,
      cifti_create_dense_from_template_cifti_params,
      cifti_create_dense_from_template_execute,
      cifti_create_dense_from_template_label_params,
      cifti_create_dense_from_template_metric_params,
      cifti_create_dense_from_template_params,
      cifti_create_dense_from_template_series_params,
      cifti_create_dense_from_template_volume_all_params,
      cifti_create_dense_from_template_volume_params,
};
