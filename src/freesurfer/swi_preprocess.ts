// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SWI_PREPROCESS_METADATA: Metadata = {
    id: "0a62bba43bd4d353f03ef8edbdd3c20d69162315.boutiques",
    name: "swi_preprocess",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SwiPreprocessParameters {
    "@type"?: "freesurfer/swi_preprocess";
    "scanner": "ge" | "siemens" | "philips";
    "ge_file"?: InputPathType | null | undefined;
    "philips_file"?: InputPathType | null | undefined;
    "siemens_magnitude"?: InputPathType | null | undefined;
    "siemens_phase"?: InputPathType | null | undefined;
    "out_magnitude": string;
    "out_phase": string;
}
type SwiPreprocessParametersTagged = Required<Pick<SwiPreprocessParameters, '@type'>> & SwiPreprocessParameters;


/**
 * Output object returned when calling `SwiPreprocessParameters(...)`.
 *
 * @interface
 */
interface SwiPreprocessOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output magnitude file in NIfTI format.
     */
    output_magnitude_file: OutputPathType;
    /**
     * Output phase file in NIfTI format.
     */
    output_phase_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param scanner Name of the scanner (one of ge, siemens or philips)
 * @param out_magnitude Name of the output magnitude file after preprocessing. Ensure it has a .nii suffix
 * @param out_phase Name of the output phase file after preprocessing. Ensure it has a .nii suffix
 * @param ge_file Name of the input GE file (only compatible with --scanner ge option)
 * @param philips_file Name of the input Philips file (only compatible with --scanner philips option)
 * @param siemens_magnitude Name of the input Siemens magnitude file (only compatible with --scanner siemens option)
 * @param siemens_phase Name of the input Siemens phase file (only compatible with --scanner siemens option)
 *
 * @returns Parameter dictionary
 */
function swi_preprocess_params(
    scanner: "ge" | "siemens" | "philips",
    out_magnitude: string,
    out_phase: string,
    ge_file: InputPathType | null = null,
    philips_file: InputPathType | null = null,
    siemens_magnitude: InputPathType | null = null,
    siemens_phase: InputPathType | null = null,
): SwiPreprocessParametersTagged {
    const params = {
        "@type": "freesurfer/swi_preprocess" as const,
        "scanner": scanner,
        "out_magnitude": out_magnitude,
        "out_phase": out_phase,
    };
    if (ge_file !== null) {
        params["ge_file"] = ge_file;
    }
    if (philips_file !== null) {
        params["philips_file"] = philips_file;
    }
    if (siemens_magnitude !== null) {
        params["siemens_magnitude"] = siemens_magnitude;
    }
    if (siemens_phase !== null) {
        params["siemens_phase"] = siemens_phase;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function swi_preprocess_cargs(
    params: SwiPreprocessParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("swi_preprocess");
    cargs.push(
        "--scanner",
        (params["scanner"] ?? null)
    );
    if ((params["ge_file"] ?? null) !== null) {
        cargs.push(
            "--ge_file",
            execution.inputFile((params["ge_file"] ?? null))
        );
    }
    if ((params["philips_file"] ?? null) !== null) {
        cargs.push(
            "--philips_file",
            execution.inputFile((params["philips_file"] ?? null))
        );
    }
    if ((params["siemens_magnitude"] ?? null) !== null) {
        cargs.push(
            "--siemens_mag",
            execution.inputFile((params["siemens_magnitude"] ?? null))
        );
    }
    if ((params["siemens_phase"] ?? null) !== null) {
        cargs.push(
            "--siemens_phase",
            execution.inputFile((params["siemens_phase"] ?? null))
        );
    }
    cargs.push(
        "--out_magnitude",
        (params["out_magnitude"] ?? null)
    );
    cargs.push(
        "--out_phase",
        (params["out_phase"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function swi_preprocess_outputs(
    params: SwiPreprocessParameters,
    execution: Execution,
): SwiPreprocessOutputs {
    const ret: SwiPreprocessOutputs = {
        root: execution.outputFile("."),
        output_magnitude_file: execution.outputFile([(params["out_magnitude"] ?? null)].join('')),
        output_phase_file: execution.outputFile([(params["out_phase"] ?? null)].join('')),
    };
    return ret;
}


/**
 * swi_preprocess
 *
 * Pre-process the Susceptibility-weighted images and write out nifti files for feeding into PRELUDE (Phase Unwrapping Library of FSL).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SwiPreprocessOutputs`).
 */
function swi_preprocess_execute(
    params: SwiPreprocessParameters,
    runner: Runner | null = null,
): SwiPreprocessOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SWI_PREPROCESS_METADATA);
    params = execution.params(params)
    const cargs = swi_preprocess_cargs(params, execution)
    const ret = swi_preprocess_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * swi_preprocess
 *
 * Pre-process the Susceptibility-weighted images and write out nifti files for feeding into PRELUDE (Phase Unwrapping Library of FSL).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param scanner Name of the scanner (one of ge, siemens or philips)
 * @param out_magnitude Name of the output magnitude file after preprocessing. Ensure it has a .nii suffix
 * @param out_phase Name of the output phase file after preprocessing. Ensure it has a .nii suffix
 * @param ge_file Name of the input GE file (only compatible with --scanner ge option)
 * @param philips_file Name of the input Philips file (only compatible with --scanner philips option)
 * @param siemens_magnitude Name of the input Siemens magnitude file (only compatible with --scanner siemens option)
 * @param siemens_phase Name of the input Siemens phase file (only compatible with --scanner siemens option)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SwiPreprocessOutputs`).
 */
function swi_preprocess(
    scanner: "ge" | "siemens" | "philips",
    out_magnitude: string,
    out_phase: string,
    ge_file: InputPathType | null = null,
    philips_file: InputPathType | null = null,
    siemens_magnitude: InputPathType | null = null,
    siemens_phase: InputPathType | null = null,
    runner: Runner | null = null,
): SwiPreprocessOutputs {
    const params = swi_preprocess_params(scanner, out_magnitude, out_phase, ge_file, philips_file, siemens_magnitude, siemens_phase)
    return swi_preprocess_execute(params, runner);
}


export {
      SWI_PREPROCESS_METADATA,
      SwiPreprocessOutputs,
      swi_preprocess,
      swi_preprocess_execute,
      swi_preprocess_params,
};
