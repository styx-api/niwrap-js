// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TEST_TUTORIALS_SH_METADATA: Metadata = {
    id: "9883254460c717895085469ee6ef3030faa9e4a9.boutiques",
    name: "test_tutorials.sh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TestTutorialsShParameters {
    "@type": "freesurfer.test_tutorials.sh";
    "all_tutorials": boolean;
    "quick_test": boolean;
    "auto_quit_freeview": boolean;
    "skip_all_guis": boolean;
    "skip_tk_guis": boolean;
    "skip_qdec_guis": boolean;
    "individual_subject": boolean;
    "troubleshooting": boolean;
    "group_analysis": boolean;
    "qdec": boolean;
    "longitudinal": boolean;
    "roi_analysis": boolean;
    "diffusion": boolean;
    "tracula": boolean;
    "fsfast": boolean;
    "multimodal": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.test_tutorials.sh": test_tutorials_sh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `test_tutorials_sh(...)`.
 *
 * @interface
 */
interface TestTutorialsShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param all_tutorials Run all tutorials
 * @param quick_test Perform a quick subset of commands
 * @param auto_quit_freeview Automatically closes freeview after opening
 * @param skip_all_guis Skips all commands that open a GUI
 * @param skip_tk_guis Skips commands that open a tk GUI (tkmedit, tksurfer, etc)
 * @param skip_qdec_guis Skips commands that open qdec
 * @param individual_subject Do Interaction with Individual Subject Data tutorial
 * @param troubleshooting Do Troubleshooting tutorial
 * @param group_analysis Do Group Analysis tutorial
 * @param qdec Do QDEC tutorial
 * @param longitudinal Do Longitudinal tutorial
 * @param roi_analysis Do ROI Analysis tutorial
 * @param diffusion Do Diffusion tutorial
 * @param tracula Do TRACULA tutorial
 * @param fsfast Do FSFASt tutorial
 * @param multimodal Do Mulimodal tutorial
 *
 * @returns Parameter dictionary
 */
function test_tutorials_sh_params(
    all_tutorials: boolean = false,
    quick_test: boolean = false,
    auto_quit_freeview: boolean = false,
    skip_all_guis: boolean = false,
    skip_tk_guis: boolean = false,
    skip_qdec_guis: boolean = false,
    individual_subject: boolean = false,
    troubleshooting: boolean = false,
    group_analysis: boolean = false,
    qdec: boolean = false,
    longitudinal: boolean = false,
    roi_analysis: boolean = false,
    diffusion: boolean = false,
    tracula: boolean = false,
    fsfast: boolean = false,
    multimodal: boolean = false,
): TestTutorialsShParameters {
    const params = {
        "@type": "freesurfer.test_tutorials.sh" as const,
        "all_tutorials": all_tutorials,
        "quick_test": quick_test,
        "auto_quit_freeview": auto_quit_freeview,
        "skip_all_guis": skip_all_guis,
        "skip_tk_guis": skip_tk_guis,
        "skip_qdec_guis": skip_qdec_guis,
        "individual_subject": individual_subject,
        "troubleshooting": troubleshooting,
        "group_analysis": group_analysis,
        "qdec": qdec,
        "longitudinal": longitudinal,
        "roi_analysis": roi_analysis,
        "diffusion": diffusion,
        "tracula": tracula,
        "fsfast": fsfast,
        "multimodal": multimodal,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function test_tutorials_sh_cargs(
    params: TestTutorialsShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("test_tutorials.sh");
    if ((params["all_tutorials"] ?? null)) {
        cargs.push("-all");
    }
    if ((params["quick_test"] ?? null)) {
        cargs.push("-quick");
    }
    if ((params["auto_quit_freeview"] ?? null)) {
        cargs.push("-auto_quit_freeview");
    }
    if ((params["skip_all_guis"] ?? null)) {
        cargs.push("-skip_all_guis");
    }
    if ((params["skip_tk_guis"] ?? null)) {
        cargs.push("-skip_tk_guis");
    }
    if ((params["skip_qdec_guis"] ?? null)) {
        cargs.push("-skip_qdec_guis");
    }
    if ((params["individual_subject"] ?? null)) {
        cargs.push("-individual_subject");
    }
    if ((params["troubleshooting"] ?? null)) {
        cargs.push("-troubleshooting");
    }
    if ((params["group_analysis"] ?? null)) {
        cargs.push("-group_analysis");
    }
    if ((params["qdec"] ?? null)) {
        cargs.push("-qdec");
    }
    if ((params["longitudinal"] ?? null)) {
        cargs.push("-longitudinal");
    }
    if ((params["roi_analysis"] ?? null)) {
        cargs.push("-roi_analysis");
    }
    if ((params["diffusion"] ?? null)) {
        cargs.push("-diffusion");
    }
    if ((params["tracula"] ?? null)) {
        cargs.push("-tracula");
    }
    if ((params["fsfast"] ?? null)) {
        cargs.push("-fsfast");
    }
    if ((params["multimodal"] ?? null)) {
        cargs.push("-multimodal");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function test_tutorials_sh_outputs(
    params: TestTutorialsShParameters,
    execution: Execution,
): TestTutorialsShOutputs {
    const ret: TestTutorialsShOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * test_tutorials.sh
 *
 * A script to run various tutorial commands, with options for skipping GUI components and focusing on specific tutorials.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TestTutorialsShOutputs`).
 */
function test_tutorials_sh_execute(
    params: TestTutorialsShParameters,
    runner: Runner | null = null,
): TestTutorialsShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TEST_TUTORIALS_SH_METADATA);
    params = execution.params(params)
    const cargs = test_tutorials_sh_cargs(params, execution)
    const ret = test_tutorials_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * test_tutorials.sh
 *
 * A script to run various tutorial commands, with options for skipping GUI components and focusing on specific tutorials.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param all_tutorials Run all tutorials
 * @param quick_test Perform a quick subset of commands
 * @param auto_quit_freeview Automatically closes freeview after opening
 * @param skip_all_guis Skips all commands that open a GUI
 * @param skip_tk_guis Skips commands that open a tk GUI (tkmedit, tksurfer, etc)
 * @param skip_qdec_guis Skips commands that open qdec
 * @param individual_subject Do Interaction with Individual Subject Data tutorial
 * @param troubleshooting Do Troubleshooting tutorial
 * @param group_analysis Do Group Analysis tutorial
 * @param qdec Do QDEC tutorial
 * @param longitudinal Do Longitudinal tutorial
 * @param roi_analysis Do ROI Analysis tutorial
 * @param diffusion Do Diffusion tutorial
 * @param tracula Do TRACULA tutorial
 * @param fsfast Do FSFASt tutorial
 * @param multimodal Do Mulimodal tutorial
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TestTutorialsShOutputs`).
 */
function test_tutorials_sh(
    all_tutorials: boolean = false,
    quick_test: boolean = false,
    auto_quit_freeview: boolean = false,
    skip_all_guis: boolean = false,
    skip_tk_guis: boolean = false,
    skip_qdec_guis: boolean = false,
    individual_subject: boolean = false,
    troubleshooting: boolean = false,
    group_analysis: boolean = false,
    qdec: boolean = false,
    longitudinal: boolean = false,
    roi_analysis: boolean = false,
    diffusion: boolean = false,
    tracula: boolean = false,
    fsfast: boolean = false,
    multimodal: boolean = false,
    runner: Runner | null = null,
): TestTutorialsShOutputs {
    const params = test_tutorials_sh_params(all_tutorials, quick_test, auto_quit_freeview, skip_all_guis, skip_tk_guis, skip_qdec_guis, individual_subject, troubleshooting, group_analysis, qdec, longitudinal, roi_analysis, diffusion, tracula, fsfast, multimodal)
    return test_tutorials_sh_execute(params, runner);
}


export {
      TEST_TUTORIALS_SH_METADATA,
      TestTutorialsShOutputs,
      TestTutorialsShParameters,
      test_tutorials_sh,
      test_tutorials_sh_execute,
      test_tutorials_sh_params,
};
