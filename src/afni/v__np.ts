// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__NP_METADATA: Metadata = {
    id: "e1601c4ceba24e5c7de18ff906554e637f17df03.boutiques",
    name: "@np",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VNpParameters {
    "@type"?: "afni/@np";
    "prefix": string;
}
type VNpParametersTagged = Required<Pick<VNpParameters, '@type'>> & VNpParameters;


/**
 * Output object returned when calling `VNpParameters(...)`.
 *
 * @interface
 */
interface VNpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file with the appropriate new prefix.
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix The prefix to be checked.
 *
 * @returns Parameter dictionary
 */
function v__np_params(
    prefix: string,
): VNpParametersTagged {
    const params = {
        "@type": "afni/@np" as const,
        "prefix": prefix,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__np_cargs(
    params: VNpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@np");
    cargs.push((params["prefix"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__np_outputs(
    params: VNpParameters,
    execution: Execution,
): VNpOutputs {
    const ret: VNpOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile(["appropriate_prefix.txt"].join('')),
    };
    return ret;
}


/**
 * @np
 *
 * Finds an appropriate new prefix to use, given the files you already have in your directory. It automatically creates a valid prefix when you are repeatedly running similar commands but do not want to delete previous output.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VNpOutputs`).
 */
function v__np_execute(
    params: VNpParameters,
    runner: Runner | null = null,
): VNpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__NP_METADATA);
    params = execution.params(params)
    const cargs = v__np_cargs(params, execution)
    const ret = v__np_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @np
 *
 * Finds an appropriate new prefix to use, given the files you already have in your directory. It automatically creates a valid prefix when you are repeatedly running similar commands but do not want to delete previous output.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix The prefix to be checked.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VNpOutputs`).
 */
function v__np(
    prefix: string,
    runner: Runner | null = null,
): VNpOutputs {
    const params = v__np_params(prefix)
    return v__np_execute(params, runner);
}


export {
      VNpOutputs,
      V__NP_METADATA,
      v__np,
      v__np_execute,
      v__np_params,
};
