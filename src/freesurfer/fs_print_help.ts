// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FS_PRINT_HELP_METADATA: Metadata = {
    id: "364e80f34823fe82c3808e9f53e3fb55c227ffda.boutiques",
    name: "fsPrintHelp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsPrintHelpParameters {
    "@type"?: "freesurfer/fsPrintHelp";
    "arguments"?: string | null | undefined;
}
type FsPrintHelpParametersTagged = Required<Pick<FsPrintHelpParameters, '@type'>> & FsPrintHelpParameters;


/**
 * Output object returned when calling `FsPrintHelpParameters(...)`.
 *
 * @interface
 */
interface FsPrintHelpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param arguments_ Any arguments that fsPrintHelp accepts.
 *
 * @returns Parameter dictionary
 */
function fs_print_help_params(
    arguments_: string | null = null,
): FsPrintHelpParametersTagged {
    const params = {
        "@type": "freesurfer/fsPrintHelp" as const,
    };
    if (arguments_ !== null) {
        params["arguments"] = arguments_;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fs_print_help_cargs(
    params: FsPrintHelpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsPrintHelp");
    if ((params["arguments"] ?? null) !== null) {
        cargs.push((params["arguments"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fs_print_help_outputs(
    params: FsPrintHelpParameters,
    execution: Execution,
): FsPrintHelpOutputs {
    const ret: FsPrintHelpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * fsPrintHelp
 *
 * fsPrintHelp - A tool that attempts to provide help documentation for FreeSurfer commands.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsPrintHelpOutputs`).
 */
function fs_print_help_execute(
    params: FsPrintHelpParameters,
    runner: Runner | null = null,
): FsPrintHelpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FS_PRINT_HELP_METADATA);
    params = execution.params(params)
    const cargs = fs_print_help_cargs(params, execution)
    const ret = fs_print_help_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fsPrintHelp
 *
 * fsPrintHelp - A tool that attempts to provide help documentation for FreeSurfer commands.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param arguments_ Any arguments that fsPrintHelp accepts.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsPrintHelpOutputs`).
 */
function fs_print_help(
    arguments_: string | null = null,
    runner: Runner | null = null,
): FsPrintHelpOutputs {
    const params = fs_print_help_params(arguments_)
    return fs_print_help_execute(params, runner);
}


export {
      FS_PRINT_HELP_METADATA,
      FsPrintHelpOutputs,
      fs_print_help,
      fs_print_help_execute,
      fs_print_help_params,
};
