// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAP_ICOSAHEDRON_METADATA: Metadata = {
    id: "31da18a41b9bc68bbb0a25dfccfcb3c8f8fcc2a0.boutiques",
    name: "MapIcosahedron",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MapIcosahedronParameters {
    "@type": "afni.MapIcosahedron";
    "spec_file": InputPathType;
    "rec_depth"?: number | null | undefined;
    "lin_depth"?: number | null | undefined;
    "morph_surf"?: string | null | undefined;
    "num_it"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "nn_dset"?: string | null | undefined;
    "dset"?: string | null | undefined;
    "fix_cut_surfaces": boolean;
    "verbosity": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.MapIcosahedron": map_icosahedron_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `map_icosahedron(...)`.
 *
 * @interface
 */
interface MapIcosahedronOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param spec_file Spec file containing original-mesh surfaces.
 * @param rec_depth Recursive (binary) tessellation depth for icosahedron (default: 3).
 * @param lin_depth Number of edge divides for linear icosahedron tessellation.
 * @param morph_surf Specifies the morphSurf surface.
 * @param num_it Number of smoothing iterations.
 * @param prefix Prefix for output files (default: 'std.').
 * @param nn_dset Map DSET onto the new mesh using Nearest Neighbor interpolation.
 * @param dset Map DSET onto the new mesh using barycentric interpolation.
 * @param fix_cut_surfaces Check and fix standard-mesh surfaces with cuts for cross-cut connections.
 * @param verbosity Enable verbose output.
 * @param help Display the help text.
 *
 * @returns Parameter dictionary
 */
function map_icosahedron_params(
    spec_file: InputPathType,
    rec_depth: number | null = null,
    lin_depth: number | null = null,
    morph_surf: string | null = null,
    num_it: number | null = null,
    prefix: string | null = null,
    nn_dset: string | null = null,
    dset: string | null = null,
    fix_cut_surfaces: boolean = false,
    verbosity: boolean = false,
    help: boolean = false,
): MapIcosahedronParameters {
    const params = {
        "@type": "afni.MapIcosahedron" as const,
        "spec_file": spec_file,
        "fix_cut_surfaces": fix_cut_surfaces,
        "verbosity": verbosity,
        "help": help,
    };
    if (rec_depth !== null) {
        params["rec_depth"] = rec_depth;
    }
    if (lin_depth !== null) {
        params["lin_depth"] = lin_depth;
    }
    if (morph_surf !== null) {
        params["morph_surf"] = morph_surf;
    }
    if (num_it !== null) {
        params["num_it"] = num_it;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (nn_dset !== null) {
        params["nn_dset"] = nn_dset;
    }
    if (dset !== null) {
        params["dset"] = dset;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function map_icosahedron_cargs(
    params: MapIcosahedronParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("MapIcosahedron");
    cargs.push(execution.inputFile((params["spec_file"] ?? null)));
    if ((params["rec_depth"] ?? null) !== null) {
        cargs.push(
            "-rd",
            String((params["rec_depth"] ?? null))
        );
    }
    if ((params["lin_depth"] ?? null) !== null) {
        cargs.push(
            "-ld",
            String((params["lin_depth"] ?? null))
        );
    }
    if ((params["morph_surf"] ?? null) !== null) {
        cargs.push(
            "-morph",
            (params["morph_surf"] ?? null)
        );
    }
    if ((params["num_it"] ?? null) !== null) {
        cargs.push(
            "-it",
            String((params["num_it"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["nn_dset"] ?? null) !== null) {
        cargs.push(
            "-NN_dset_map",
            (params["nn_dset"] ?? null)
        );
    }
    if ((params["dset"] ?? null) !== null) {
        cargs.push(
            "-dset_map",
            (params["dset"] ?? null)
        );
    }
    if ((params["fix_cut_surfaces"] ?? null)) {
        cargs.push("-fix_cut_surfaces");
    }
    if ((params["verbosity"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function map_icosahedron_outputs(
    params: MapIcosahedronParameters,
    execution: Execution,
): MapIcosahedronOutputs {
    const ret: MapIcosahedronOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Creates new versions of original-mesh surfaces using the mesh of an icosahedron.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MapIcosahedronOutputs`).
 */
function map_icosahedron_execute(
    params: MapIcosahedronParameters,
    execution: Execution,
): MapIcosahedronOutputs {
    params = execution.params(params)
    const cargs = map_icosahedron_cargs(params, execution)
    const ret = map_icosahedron_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Creates new versions of original-mesh surfaces using the mesh of an icosahedron.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param spec_file Spec file containing original-mesh surfaces.
 * @param rec_depth Recursive (binary) tessellation depth for icosahedron (default: 3).
 * @param lin_depth Number of edge divides for linear icosahedron tessellation.
 * @param morph_surf Specifies the morphSurf surface.
 * @param num_it Number of smoothing iterations.
 * @param prefix Prefix for output files (default: 'std.').
 * @param nn_dset Map DSET onto the new mesh using Nearest Neighbor interpolation.
 * @param dset Map DSET onto the new mesh using barycentric interpolation.
 * @param fix_cut_surfaces Check and fix standard-mesh surfaces with cuts for cross-cut connections.
 * @param verbosity Enable verbose output.
 * @param help Display the help text.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MapIcosahedronOutputs`).
 */
function map_icosahedron(
    spec_file: InputPathType,
    rec_depth: number | null = null,
    lin_depth: number | null = null,
    morph_surf: string | null = null,
    num_it: number | null = null,
    prefix: string | null = null,
    nn_dset: string | null = null,
    dset: string | null = null,
    fix_cut_surfaces: boolean = false,
    verbosity: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): MapIcosahedronOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAP_ICOSAHEDRON_METADATA);
    const params = map_icosahedron_params(spec_file, rec_depth, lin_depth, morph_surf, num_it, prefix, nn_dset, dset, fix_cut_surfaces, verbosity, help)
    return map_icosahedron_execute(params, execution);
}


export {
      MAP_ICOSAHEDRON_METADATA,
      MapIcosahedronOutputs,
      MapIcosahedronParameters,
      map_icosahedron,
      map_icosahedron_cargs,
      map_icosahedron_execute,
      map_icosahedron_outputs,
      map_icosahedron_params,
};
