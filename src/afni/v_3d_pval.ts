// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_PVAL_METADATA: Metadata = {
    id: "9479f35d3dad112060e6205271ed4c0ae7fe30e3.boutiques",
    name: "3dPval",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dPvalParameters {
    "@type"?: "afni/3dPval";
    "input_dataset": InputPathType;
    "zscore": boolean;
    "log2": boolean;
    "log10": boolean;
    "qval": boolean;
    "prefix"?: string | null | undefined;
}
type V3dPvalParametersTagged = Required<Pick<V3dPvalParameters, '@type'>> & V3dPvalParameters;


/**
 * Output object returned when calling `V3dPvalParameters(...)`.
 *
 * @interface
 */
interface V3dPvalOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset with converted statistical values. Default output filename is 'Pval.nii.gz'.
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset (e.g., InputDataset.nii)
 * @param zscore Convert statistic to a z-score instead, an N(0,1) deviate that represents the same p-value.
 * @param log2 Convert statistic to -log2(p).
 * @param log10 Convert statistic to -log10(p).
 * @param qval Convert statistic to a q-value (FDR) instead. This option only works with datasets that have FDR curves inserted in their headers.
 * @param prefix Prefix name for output file (default name is 'Pval').
 *
 * @returns Parameter dictionary
 */
function v_3d_pval_params(
    input_dataset: InputPathType,
    zscore: boolean = false,
    log2: boolean = false,
    log10: boolean = false,
    qval: boolean = false,
    prefix: string | null = null,
): V3dPvalParametersTagged {
    const params = {
        "@type": "afni/3dPval" as const,
        "input_dataset": input_dataset,
        "zscore": zscore,
        "log2": log2,
        "log10": log10,
        "qval": qval,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_pval_cargs(
    params: V3dPvalParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dPval");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["zscore"] ?? false)) {
        cargs.push("-zscore");
    }
    if ((params["log2"] ?? false)) {
        cargs.push("-log2");
    }
    if ((params["log10"] ?? false)) {
        cargs.push("-log10");
    }
    if ((params["qval"] ?? false)) {
        cargs.push("-qval");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_pval_outputs(
    params: V3dPvalParameters,
    execution: Execution,
): V3dPvalOutputs {
    const ret: V3dPvalOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * 3dPval
 *
 * Convert a dataset's statistical sub-bricks to p-values or other statistical representations.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dPvalOutputs`).
 */
function v_3d_pval_execute(
    params: V3dPvalParameters,
    runner: Runner | null = null,
): V3dPvalOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_PVAL_METADATA);
    params = execution.params(params)
    const cargs = v_3d_pval_cargs(params, execution)
    const ret = v_3d_pval_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dPval
 *
 * Convert a dataset's statistical sub-bricks to p-values or other statistical representations.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset (e.g., InputDataset.nii)
 * @param zscore Convert statistic to a z-score instead, an N(0,1) deviate that represents the same p-value.
 * @param log2 Convert statistic to -log2(p).
 * @param log10 Convert statistic to -log10(p).
 * @param qval Convert statistic to a q-value (FDR) instead. This option only works with datasets that have FDR curves inserted in their headers.
 * @param prefix Prefix name for output file (default name is 'Pval').
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dPvalOutputs`).
 */
function v_3d_pval(
    input_dataset: InputPathType,
    zscore: boolean = false,
    log2: boolean = false,
    log10: boolean = false,
    qval: boolean = false,
    prefix: string | null = null,
    runner: Runner | null = null,
): V3dPvalOutputs {
    const params = v_3d_pval_params(input_dataset, zscore, log2, log10, qval, prefix)
    return v_3d_pval_execute(params, runner);
}


export {
      V3dPvalOutputs,
      V_3D_PVAL_METADATA,
      v_3d_pval,
      v_3d_pval_execute,
      v_3d_pval_params,
};
