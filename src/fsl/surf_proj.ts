// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_PROJ_METADATA: Metadata = {
    id: "917552291ffb4e155bdb8a6ed1730e16d5889393.boutiques",
    name: "surf_proj",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SurfProjParameters {
    "@type": "fsl.surf_proj";
    "data": InputPathType;
    "surface": InputPathType;
    "output_file": string;
    "surface_reference"?: InputPathType | null | undefined;
    "transform"?: InputPathType | null | undefined;
    "meshspace"?: string | null | undefined;
    "step_size"?: number | null | undefined;
    "direction"?: number | null | undefined;
    "operation"?: string | null | undefined;
    "surface_output"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.surf_proj": surf_proj_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.surf_proj": surf_proj_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_proj(...)`.
 *
 * @interface
 */
interface SurfProjOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of the projection
     */
    projected_output: OutputPathType;
    /**
     * Output surface file
     */
    output_surface: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param data Data to project onto surface
 * @param surface Surface file
 * @param output_file Output file
 * @param surface_reference Surface volume reference (default=same as data)
 * @param transform Data to surface transform (default=Identity)
 * @param meshspace Mesh space (default='caret')
 * @param step_size Average over step (mm - default=1)
 * @param direction If >0 goes towards brain (default=0 i.e. both directions)
 * @param operation What to do with values: 'mean' (default), 'max', 'median', 'last'
 * @param surface_output Output surface file, not ASCII matrix (valid only for scalars)
 *
 * @returns Parameter dictionary
 */
function surf_proj_params(
    data: InputPathType,
    surface: InputPathType,
    output_file: string,
    surface_reference: InputPathType | null = null,
    transform: InputPathType | null = null,
    meshspace: string | null = null,
    step_size: number | null = null,
    direction: number | null = null,
    operation: string | null = null,
    surface_output: string | null = null,
): SurfProjParameters {
    const params = {
        "@type": "fsl.surf_proj" as const,
        "data": data,
        "surface": surface,
        "output_file": output_file,
    };
    if (surface_reference !== null) {
        params["surface_reference"] = surface_reference;
    }
    if (transform !== null) {
        params["transform"] = transform;
    }
    if (meshspace !== null) {
        params["meshspace"] = meshspace;
    }
    if (step_size !== null) {
        params["step_size"] = step_size;
    }
    if (direction !== null) {
        params["direction"] = direction;
    }
    if (operation !== null) {
        params["operation"] = operation;
    }
    if (surface_output !== null) {
        params["surface_output"] = surface_output;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_proj_cargs(
    params: SurfProjParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("surf_proj");
    cargs.push(
        "-data",
        execution.inputFile((params["data"] ?? null))
    );
    cargs.push(
        "-surf",
        execution.inputFile((params["surface"] ?? null))
    );
    cargs.push(
        "-out",
        (params["output_file"] ?? null)
    );
    if ((params["surface_reference"] ?? null) !== null) {
        cargs.push(
            "--meshref",
            execution.inputFile((params["surface_reference"] ?? null))
        );
    }
    if ((params["transform"] ?? null) !== null) {
        cargs.push(
            "--xfm",
            execution.inputFile((params["transform"] ?? null))
        );
    }
    if ((params["meshspace"] ?? null) !== null) {
        cargs.push(
            "--meshspace",
            (params["meshspace"] ?? null)
        );
    }
    if ((params["step_size"] ?? null) !== null) {
        cargs.push(
            "--step",
            String((params["step_size"] ?? null))
        );
    }
    if ((params["direction"] ?? null) !== null) {
        cargs.push(
            "--direction",
            String((params["direction"] ?? null))
        );
    }
    if ((params["operation"] ?? null) !== null) {
        cargs.push(
            "--operation",
            (params["operation"] ?? null)
        );
    }
    if ((params["surface_output"] ?? null) !== null) {
        cargs.push(
            "--surfout",
            (params["surface_output"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_proj_outputs(
    params: SurfProjParameters,
    execution: Execution,
): SurfProjOutputs {
    const ret: SurfProjOutputs = {
        root: execution.outputFile("."),
        projected_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
        output_surface: ((params["surface_output"] ?? null) !== null) ? execution.outputFile([(params["surface_output"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * surf_proj
 *
 * Projects data onto a surface mesh using specified parameters.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfProjOutputs`).
 */
function surf_proj_execute(
    params: SurfProjParameters,
    runner: Runner | null = null,
): SurfProjOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_PROJ_METADATA);
    params = execution.params(params)
    const cargs = surf_proj_cargs(params, execution)
    const ret = surf_proj_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surf_proj
 *
 * Projects data onto a surface mesh using specified parameters.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param data Data to project onto surface
 * @param surface Surface file
 * @param output_file Output file
 * @param surface_reference Surface volume reference (default=same as data)
 * @param transform Data to surface transform (default=Identity)
 * @param meshspace Mesh space (default='caret')
 * @param step_size Average over step (mm - default=1)
 * @param direction If >0 goes towards brain (default=0 i.e. both directions)
 * @param operation What to do with values: 'mean' (default), 'max', 'median', 'last'
 * @param surface_output Output surface file, not ASCII matrix (valid only for scalars)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfProjOutputs`).
 */
function surf_proj(
    data: InputPathType,
    surface: InputPathType,
    output_file: string,
    surface_reference: InputPathType | null = null,
    transform: InputPathType | null = null,
    meshspace: string | null = null,
    step_size: number | null = null,
    direction: number | null = null,
    operation: string | null = null,
    surface_output: string | null = null,
    runner: Runner | null = null,
): SurfProjOutputs {
    const params = surf_proj_params(data, surface, output_file, surface_reference, transform, meshspace, step_size, direction, operation, surface_output)
    return surf_proj_execute(params, runner);
}


export {
      SURF_PROJ_METADATA,
      SurfProjOutputs,
      SurfProjParameters,
      surf_proj,
      surf_proj_execute,
      surf_proj_params,
};
