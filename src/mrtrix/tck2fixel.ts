// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCK2FIXEL_METADATA: Metadata = {
    id: "90f8734af004cf66512561b61fbe57f5bc2f690a.boutiques",
    name: "tck2fixel",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Tck2fixelConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type Tck2fixelConfigParametersTagged = Required<Pick<Tck2fixelConfigParameters, '@type'>> & Tck2fixelConfigParameters;


interface Tck2fixelParameters {
    "@type"?: "mrtrix/tck2fixel";
    "angle"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Tck2fixelConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "tracks": InputPathType;
    "fixel_folder_in": InputPathType;
    "fixel_folder_out": string;
    "fixel_data_out": string;
}
type Tck2fixelParametersTagged = Required<Pick<Tck2fixelParameters, '@type'>> & Tck2fixelParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function tck2fixel_config_params(
    key: string,
    value: string,
): Tck2fixelConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tck2fixel_config_cargs(
    params: Tck2fixelConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `Tck2fixelParameters(...)`.
 *
 * @interface
 */
interface Tck2fixelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param tracks the input tracks.
 * @param fixel_folder_in the input fixel folder. Used to define the fixels and their directions
 * @param fixel_folder_out the fixel folder to which the output will be written. This can be the same as the input folder if desired
 * @param fixel_data_out the name of the fixel data image.
 * @param angle the max angle threshold for assigning streamline tangents to fixels (Default: 45 degrees)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function tck2fixel_params(
    tracks: InputPathType,
    fixel_folder_in: InputPathType,
    fixel_folder_out: string,
    fixel_data_out: string,
    angle: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tck2fixelConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Tck2fixelParametersTagged {
    const params = {
        "@type": "mrtrix/tck2fixel" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "tracks": tracks,
        "fixel_folder_in": fixel_folder_in,
        "fixel_folder_out": fixel_folder_out,
        "fixel_data_out": fixel_data_out,
    };
    if (angle !== null) {
        params["angle"] = angle;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tck2fixel_cargs(
    params: Tck2fixelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tck2fixel");
    if ((params["angle"] ?? null) !== null) {
        cargs.push(
            "-angle",
            String((params["angle"] ?? null))
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => tck2fixel_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["tracks"] ?? null)));
    cargs.push(execution.inputFile((params["fixel_folder_in"] ?? null)));
    cargs.push((params["fixel_folder_out"] ?? null));
    cargs.push((params["fixel_data_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tck2fixel_outputs(
    params: Tck2fixelParameters,
    execution: Execution,
): Tck2fixelOutputs {
    const ret: Tck2fixelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * tck2fixel
 *
 * Compute a fixel TDI map from a tractogram.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tck2fixelOutputs`).
 */
function tck2fixel_execute(
    params: Tck2fixelParameters,
    runner: Runner | null = null,
): Tck2fixelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCK2FIXEL_METADATA);
    params = execution.params(params)
    const cargs = tck2fixel_cargs(params, execution)
    const ret = tck2fixel_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tck2fixel
 *
 * Compute a fixel TDI map from a tractogram.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param tracks the input tracks.
 * @param fixel_folder_in the input fixel folder. Used to define the fixels and their directions
 * @param fixel_folder_out the fixel folder to which the output will be written. This can be the same as the input folder if desired
 * @param fixel_data_out the name of the fixel data image.
 * @param angle the max angle threshold for assigning streamline tangents to fixels (Default: 45 degrees)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tck2fixelOutputs`).
 */
function tck2fixel(
    tracks: InputPathType,
    fixel_folder_in: InputPathType,
    fixel_folder_out: string,
    fixel_data_out: string,
    angle: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tck2fixelConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Tck2fixelOutputs {
    const params = tck2fixel_params(tracks, fixel_folder_in, fixel_folder_out, fixel_data_out, angle, info, quiet, debug, force, nthreads, config, help, version)
    return tck2fixel_execute(params, runner);
}


export {
      TCK2FIXEL_METADATA,
      Tck2fixelOutputs,
      tck2fixel,
      tck2fixel_config_params,
      tck2fixel_execute,
      tck2fixel_params,
};
