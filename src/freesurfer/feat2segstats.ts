// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FEAT2SEGSTATS_METADATA: Metadata = {
    id: "a6f479bd29c683d988da8503ff21408d0b0077e7.boutiques",
    name: "feat2segstats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Feat2segstatsParameters {
    "@type"?: "freesurfer/feat2segstats";
    "feat_dir": string;
    "featdirfile"?: InputPathType | null | undefined;
    "seg_vol"?: string | null | undefined;
    "aseg_flag": boolean;
    "aparc_aseg_flag": boolean;
    "ctab"?: InputPathType | null | undefined;
    "all_segs_flag": boolean;
    "copes_flag": boolean;
    "varcopes_flag": boolean;
    "zstats_flag": boolean;
    "pes_flag": boolean;
    "rvar"?: string | null | undefined;
    "example_func"?: string | null | undefined;
    "mask"?: string | null | undefined;
    "mean_func"?: string | null | undefined;
    "stat": string;
    "version_flag": boolean;
    "help_flag": boolean;
    "debug_flag": boolean;
    "nolog_flag": boolean;
}
type Feat2segstatsParametersTagged = Required<Pick<Feat2segstatsParameters, '@type'>> & Feat2segstatsParameters;


/**
 * Output object returned when calling `Feat2segstatsParameters(...)`.
 *
 * @interface
 */
interface Feat2segstatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output segmentation statistics file
     */
    segstats_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param feat_dir Feat output directory
 * @param stat Statistical output
 * @param featdirfile File with a list of feat directories
 * @param seg_vol Segmentation volume
 * @param aseg_flag Use aseg segmentation
 * @param aparc_aseg_flag Use aparc+aseg segmentation
 * @param ctab Color lookup table, default is FREESURFER_HOME/FreeSurferColorLUT.txt
 * @param all_segs_flag Report on all segments, even empty ones
 * @param copes_flag Do all copes
 * @param varcopes_flag Do all varcopes
 * @param zstats_flag Do all zstats
 * @param pes_flag Do all pes
 * @param rvar Sigma squared values
 * @param example_func Example function
 * @param mask Probably not too useful
 * @param mean_func Mean function
 * @param version_flag Print version and exit
 * @param help_flag Print help and exit
 * @param debug_flag Turn on debugging
 * @param nolog_flag Do not create a log file
 *
 * @returns Parameter dictionary
 */
function feat2segstats_params(
    feat_dir: string,
    stat: string,
    featdirfile: InputPathType | null = null,
    seg_vol: string | null = null,
    aseg_flag: boolean = false,
    aparc_aseg_flag: boolean = false,
    ctab: InputPathType | null = null,
    all_segs_flag: boolean = false,
    copes_flag: boolean = false,
    varcopes_flag: boolean = false,
    zstats_flag: boolean = false,
    pes_flag: boolean = false,
    rvar: string | null = null,
    example_func: string | null = null,
    mask: string | null = null,
    mean_func: string | null = null,
    version_flag: boolean = false,
    help_flag: boolean = false,
    debug_flag: boolean = false,
    nolog_flag: boolean = false,
): Feat2segstatsParametersTagged {
    const params = {
        "@type": "freesurfer/feat2segstats" as const,
        "feat_dir": feat_dir,
        "aseg_flag": aseg_flag,
        "aparc_aseg_flag": aparc_aseg_flag,
        "all_segs_flag": all_segs_flag,
        "copes_flag": copes_flag,
        "varcopes_flag": varcopes_flag,
        "zstats_flag": zstats_flag,
        "pes_flag": pes_flag,
        "stat": stat,
        "version_flag": version_flag,
        "help_flag": help_flag,
        "debug_flag": debug_flag,
        "nolog_flag": nolog_flag,
    };
    if (featdirfile !== null) {
        params["featdirfile"] = featdirfile;
    }
    if (seg_vol !== null) {
        params["seg_vol"] = seg_vol;
    }
    if (ctab !== null) {
        params["ctab"] = ctab;
    }
    if (rvar !== null) {
        params["rvar"] = rvar;
    }
    if (example_func !== null) {
        params["example_func"] = example_func;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (mean_func !== null) {
        params["mean_func"] = mean_func;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function feat2segstats_cargs(
    params: Feat2segstatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("feat2segstats");
    cargs.push(
        "--feat",
        (params["feat_dir"] ?? null)
    );
    if ((params["featdirfile"] ?? null) !== null) {
        cargs.push(
            "--featdirfile",
            execution.inputFile((params["featdirfile"] ?? null))
        );
    }
    if ((params["seg_vol"] ?? null) !== null) {
        cargs.push(
            "--seg",
            (params["seg_vol"] ?? null)
        );
    }
    if ((params["aseg_flag"] ?? false)) {
        cargs.push("--aseg");
    }
    if ((params["aparc_aseg_flag"] ?? false)) {
        cargs.push("--aparc+aseg");
    }
    if ((params["ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab"] ?? null))
        );
    }
    if ((params["all_segs_flag"] ?? false)) {
        cargs.push("--all-segs");
    }
    if ((params["copes_flag"] ?? false)) {
        cargs.push("--copes");
    }
    if ((params["varcopes_flag"] ?? false)) {
        cargs.push("--varcopes");
    }
    if ((params["zstats_flag"] ?? false)) {
        cargs.push("--zstats");
    }
    if ((params["pes_flag"] ?? false)) {
        cargs.push("--pes");
    }
    if ((params["rvar"] ?? null) !== null) {
        cargs.push(
            "--rvar",
            (params["rvar"] ?? null)
        );
    }
    if ((params["example_func"] ?? null) !== null) {
        cargs.push(
            "--exf",
            (params["example_func"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            (params["mask"] ?? null)
        );
    }
    if ((params["mean_func"] ?? null) !== null) {
        cargs.push(
            "--mean_func",
            (params["mean_func"] ?? null)
        );
    }
    cargs.push(
        "--stat",
        (params["stat"] ?? null)
    );
    if ((params["version_flag"] ?? false)) {
        cargs.push("--version");
    }
    if ((params["help_flag"] ?? false)) {
        cargs.push("--help");
    }
    if ((params["debug_flag"] ?? false)) {
        cargs.push("--debug");
    }
    if ((params["nolog_flag"] ?? false)) {
        cargs.push("--nolog");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function feat2segstats_outputs(
    params: Feat2segstatsParameters,
    execution: Execution,
): Feat2segstatsOutputs {
    const ret: Feat2segstatsOutputs = {
        root: execution.outputFile("."),
        segstats_output: ((params["seg_vol"] ?? null) !== null) ? execution.outputFile([(params["feat_dir"] ?? null), "/freesurfer/segstats/", (params["seg_vol"] ?? null), "/", (params["stat"] ?? null), ".dat"].join('')) : null,
    };
    return ret;
}


/**
 * feat2segstats
 *
 * Computes segmentation summaries and stores output in featdir/freesurfer/segstats/segvol/statname.dat.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Feat2segstatsOutputs`).
 */
function feat2segstats_execute(
    params: Feat2segstatsParameters,
    runner: Runner | null = null,
): Feat2segstatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FEAT2SEGSTATS_METADATA);
    params = execution.params(params)
    const cargs = feat2segstats_cargs(params, execution)
    const ret = feat2segstats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * feat2segstats
 *
 * Computes segmentation summaries and stores output in featdir/freesurfer/segstats/segvol/statname.dat.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param feat_dir Feat output directory
 * @param stat Statistical output
 * @param featdirfile File with a list of feat directories
 * @param seg_vol Segmentation volume
 * @param aseg_flag Use aseg segmentation
 * @param aparc_aseg_flag Use aparc+aseg segmentation
 * @param ctab Color lookup table, default is FREESURFER_HOME/FreeSurferColorLUT.txt
 * @param all_segs_flag Report on all segments, even empty ones
 * @param copes_flag Do all copes
 * @param varcopes_flag Do all varcopes
 * @param zstats_flag Do all zstats
 * @param pes_flag Do all pes
 * @param rvar Sigma squared values
 * @param example_func Example function
 * @param mask Probably not too useful
 * @param mean_func Mean function
 * @param version_flag Print version and exit
 * @param help_flag Print help and exit
 * @param debug_flag Turn on debugging
 * @param nolog_flag Do not create a log file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Feat2segstatsOutputs`).
 */
function feat2segstats(
    feat_dir: string,
    stat: string,
    featdirfile: InputPathType | null = null,
    seg_vol: string | null = null,
    aseg_flag: boolean = false,
    aparc_aseg_flag: boolean = false,
    ctab: InputPathType | null = null,
    all_segs_flag: boolean = false,
    copes_flag: boolean = false,
    varcopes_flag: boolean = false,
    zstats_flag: boolean = false,
    pes_flag: boolean = false,
    rvar: string | null = null,
    example_func: string | null = null,
    mask: string | null = null,
    mean_func: string | null = null,
    version_flag: boolean = false,
    help_flag: boolean = false,
    debug_flag: boolean = false,
    nolog_flag: boolean = false,
    runner: Runner | null = null,
): Feat2segstatsOutputs {
    const params = feat2segstats_params(feat_dir, stat, featdirfile, seg_vol, aseg_flag, aparc_aseg_flag, ctab, all_segs_flag, copes_flag, varcopes_flag, zstats_flag, pes_flag, rvar, example_func, mask, mean_func, version_flag, help_flag, debug_flag, nolog_flag)
    return feat2segstats_execute(params, runner);
}


export {
      FEAT2SEGSTATS_METADATA,
      Feat2segstatsOutputs,
      feat2segstats,
      feat2segstats_execute,
      feat2segstats_params,
};
