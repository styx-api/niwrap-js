// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BBREGISTER_METADATA: Metadata = {
    id: "06a9a3d42999005484cd3e30d110e491b2d7dca8.boutiques",
    name: "bbregister",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BbregisterParameters {
    "__STYXTYPE__": "bbregister";
    "subject": string;
    "moveable_volume": InputPathType;
    "reg_file": string;
    "contrast_type_t2": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "bbregister": bbregister_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "bbregister": bbregister_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `bbregister(...)`.
 *
 * @interface
 */
interface BbregisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registration file in dat or lta format.
     */
    reg_output: OutputPathType;
    /**
     * Resampled moveable volume.
     */
    out_volume: OutputPathType;
}


function bbregister_params(
    subject: string,
    moveable_volume: InputPathType,
    reg_file: string,
    contrast_type_t2: boolean = false,
): BbregisterParameters {
    /**
     * Build parameters.
    
     * @param subject FreeSurfer subject name as found in $SUBJECTS_DIR.
     * @param moveable_volume "Moveable" volume template for cross-modal volume. E.g., fMRI volume used for motion correction.
     * @param reg_file Output FreeSurfer registration file (tkregister-style or LTA format).
     * @param contrast_type_t2 Assume T2 contrast, Grey Matter brighter than White Matter. Same as --bold and --dti.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "bbregister" as const,
        "subject": subject,
        "moveable_volume": moveable_volume,
        "reg_file": reg_file,
        "contrast_type_t2": contrast_type_t2,
    };
    return params;
}


function bbregister_cargs(
    params: BbregisterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("bbregister");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--mov",
        execution.inputFile((params["moveable_volume"] ?? null))
    );
    cargs.push(
        "--reg",
        (params["reg_file"] ?? null)
    );
    if ((params["contrast_type_t2"] ?? null)) {
        cargs.push("--t2");
    }
    cargs.push("[OPTIONS]");
    return cargs;
}


function bbregister_outputs(
    params: BbregisterParameters,
    execution: Execution,
): BbregisterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BbregisterOutputs = {
        root: execution.outputFile("."),
        reg_output: execution.outputFile([(params["reg_file"] ?? null)].join('')),
        out_volume: execution.outputFile(["[O_OUTVOL]"].join('')),
    };
    return ret;
}


function bbregister_execute(
    params: BbregisterParameters,
    execution: Execution,
): BbregisterOutputs {
    /**
     * Performs within-subject, cross-modal registration using a boundary-based cost function.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BbregisterOutputs`).
     */
    params = execution.params(params)
    const cargs = bbregister_cargs(params, execution)
    const ret = bbregister_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function bbregister(
    subject: string,
    moveable_volume: InputPathType,
    reg_file: string,
    contrast_type_t2: boolean = false,
    runner: Runner | null = null,
): BbregisterOutputs {
    /**
     * Performs within-subject, cross-modal registration using a boundary-based cost function.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject FreeSurfer subject name as found in $SUBJECTS_DIR.
     * @param moveable_volume "Moveable" volume template for cross-modal volume. E.g., fMRI volume used for motion correction.
     * @param reg_file Output FreeSurfer registration file (tkregister-style or LTA format).
     * @param contrast_type_t2 Assume T2 contrast, Grey Matter brighter than White Matter. Same as --bold and --dti.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BbregisterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BBREGISTER_METADATA);
    const params = bbregister_params(subject, moveable_volume, reg_file, contrast_type_t2)
    return bbregister_execute(params, execution);
}


export {
      BBREGISTER_METADATA,
      BbregisterOutputs,
      BbregisterParameters,
      bbregister,
      bbregister_params,
};
