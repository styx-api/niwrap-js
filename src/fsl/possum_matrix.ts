// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POSSUM_MATRIX_METADATA: Metadata = {
    id: "c5fd7e103682a549e6b3c51979875218ba180913.boutiques",
    name: "possum_matrix",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PossumMatrixParameters {
    "@type": "fsl.possum_matrix";
    "pulse_sequence": string;
    "motion_matrix": string;
    "output_matrix": string;
    "verbose_flag": boolean;
    "help_flag": boolean;
    "old_version_flag": boolean;
    "segment_size"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.possum_matrix": possum_matrix_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.possum_matrix": possum_matrix_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `possum_matrix(...)`.
 *
 * @interface
 */
interface PossumMatrixOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main event matrix output file
     */
    output_main_matrix: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param pulse_sequence Pulse sequence - all additional files with extensions .posx, .posy, etc., expected to be in the same directory
 * @param motion_matrix Motion matrix [time(s) Tx(m) Ty(m) Tz(m) Rx(rad) Ry(rad) Rz(rad)]
 * @param output_matrix Main event matrix [t(s), rf_ang(rad), rf_freq_band(Hz), (4)=rf_cent_freq(Hz), read(1/0), Gx, Gy, Gz(T/m), Tx, Ty, Tz(m), angle_of_rot B(rad), rot_axis Bx, By, Bz(m), angle_of_rot A(rad), rot_axis Ax, Ay, Az(m)]
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display this help message
 * @param old_version_flag Allows for the old version of the sorter to run
 * @param segment_size Setting the size of the segment of the matrix that is read in one at a time
 *
 * @returns Parameter dictionary
 */
function possum_matrix_params(
    pulse_sequence: string,
    motion_matrix: string,
    output_matrix: string,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    old_version_flag: boolean = false,
    segment_size: number | null = null,
): PossumMatrixParameters {
    const params = {
        "@type": "fsl.possum_matrix" as const,
        "pulse_sequence": pulse_sequence,
        "motion_matrix": motion_matrix,
        "output_matrix": output_matrix,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
        "old_version_flag": old_version_flag,
    };
    if (segment_size !== null) {
        params["segment_size"] = segment_size;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function possum_matrix_cargs(
    params: PossumMatrixParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("possum_matrix");
    cargs.push(
        "-p",
        (params["pulse_sequence"] ?? null)
    );
    cargs.push(
        "-m",
        (params["motion_matrix"] ?? null)
    );
    cargs.push(
        "-o",
        (params["output_matrix"] ?? null)
    );
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["old_version_flag"] ?? null)) {
        cargs.push("--old");
    }
    if ((params["segment_size"] ?? null) !== null) {
        cargs.push(
            "--seg",
            String((params["segment_size"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function possum_matrix_outputs(
    params: PossumMatrixParameters,
    execution: Execution,
): PossumMatrixOutputs {
    const ret: PossumMatrixOutputs = {
        root: execution.outputFile("."),
        output_main_matrix: execution.outputFile([(params["output_matrix"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Event matrix generator for POSSUM simulation in FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `PossumMatrixOutputs`).
 */
function possum_matrix_execute(
    params: PossumMatrixParameters,
    execution: Execution,
): PossumMatrixOutputs {
    params = execution.params(params)
    const cargs = possum_matrix_cargs(params, execution)
    const ret = possum_matrix_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Event matrix generator for POSSUM simulation in FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param pulse_sequence Pulse sequence - all additional files with extensions .posx, .posy, etc., expected to be in the same directory
 * @param motion_matrix Motion matrix [time(s) Tx(m) Ty(m) Tz(m) Rx(rad) Ry(rad) Rz(rad)]
 * @param output_matrix Main event matrix [t(s), rf_ang(rad), rf_freq_band(Hz), (4)=rf_cent_freq(Hz), read(1/0), Gx, Gy, Gz(T/m), Tx, Ty, Tz(m), angle_of_rot B(rad), rot_axis Bx, By, Bz(m), angle_of_rot A(rad), rot_axis Ax, Ay, Az(m)]
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display this help message
 * @param old_version_flag Allows for the old version of the sorter to run
 * @param segment_size Setting the size of the segment of the matrix that is read in one at a time
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PossumMatrixOutputs`).
 */
function possum_matrix(
    pulse_sequence: string,
    motion_matrix: string,
    output_matrix: string,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    old_version_flag: boolean = false,
    segment_size: number | null = null,
    runner: Runner | null = null,
): PossumMatrixOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POSSUM_MATRIX_METADATA);
    const params = possum_matrix_params(pulse_sequence, motion_matrix, output_matrix, verbose_flag, help_flag, old_version_flag, segment_size)
    return possum_matrix_execute(params, execution);
}


export {
      POSSUM_MATRIX_METADATA,
      PossumMatrixOutputs,
      PossumMatrixParameters,
      possum_matrix,
      possum_matrix_cargs,
      possum_matrix_execute,
      possum_matrix_outputs,
      possum_matrix_params,
};
