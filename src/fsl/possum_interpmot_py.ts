// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POSSUM_INTERPMOT_PY_METADATA: Metadata = {
    id: "5b0453b36626d1d748f6c169ba2d9e57289dd2bd.boutiques",
    name: "possum_interpmot.py",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PossumInterpmotPyParameters {
    "@type": "fsl.possum_interpmot.py";
    "motion_type": number;
    "tr": number;
    "tr_slice": number;
    "nslices": number;
    "nvols": number;
    "custom_motion_file": InputPathType;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.possum_interpmot.py": possum_interpmot_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.possum_interpmot.py": possum_interpmot_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `possum_interpmot_py(...)`.
 *
 * @interface
 */
interface PossumInterpmotPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Interpolated motion output file
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param motion_type Type of motion: 0 for continuous, 1 for between slices, 2 for between volumes
 * @param tr Repetition time in seconds
 * @param tr_slice Slice repetition time in seconds
 * @param nslices Number of slices
 * @param nvols Number of volumes
 * @param custom_motion_file Custom motion file
 * @param output_file Output file
 *
 * @returns Parameter dictionary
 */
function possum_interpmot_py_params(
    motion_type: number,
    tr: number,
    tr_slice: number,
    nslices: number,
    nvols: number,
    custom_motion_file: InputPathType,
    output_file: string,
): PossumInterpmotPyParameters {
    const params = {
        "@type": "fsl.possum_interpmot.py" as const,
        "motion_type": motion_type,
        "tr": tr,
        "tr_slice": tr_slice,
        "nslices": nslices,
        "nvols": nvols,
        "custom_motion_file": custom_motion_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function possum_interpmot_py_cargs(
    params: PossumInterpmotPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("possum_interpmot.py");
    cargs.push(String((params["motion_type"] ?? null)));
    cargs.push(String((params["tr"] ?? null)));
    cargs.push(String((params["tr_slice"] ?? null)));
    cargs.push(String((params["nslices"] ?? null)));
    cargs.push(String((params["nvols"] ?? null)));
    cargs.push(execution.inputFile((params["custom_motion_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function possum_interpmot_py_outputs(
    params: PossumInterpmotPyParameters,
    execution: Execution,
): PossumInterpmotPyOutputs {
    const ret: PossumInterpmotPyOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * possum_interpmot.py
 *
 * Position Interpolation for Movers and Shakers.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PossumInterpmotPyOutputs`).
 */
function possum_interpmot_py_execute(
    params: PossumInterpmotPyParameters,
    runner: Runner | null = null,
): PossumInterpmotPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POSSUM_INTERPMOT_PY_METADATA);
    params = execution.params(params)
    const cargs = possum_interpmot_py_cargs(params, execution)
    const ret = possum_interpmot_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * possum_interpmot.py
 *
 * Position Interpolation for Movers and Shakers.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param motion_type Type of motion: 0 for continuous, 1 for between slices, 2 for between volumes
 * @param tr Repetition time in seconds
 * @param tr_slice Slice repetition time in seconds
 * @param nslices Number of slices
 * @param nvols Number of volumes
 * @param custom_motion_file Custom motion file
 * @param output_file Output file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PossumInterpmotPyOutputs`).
 */
function possum_interpmot_py(
    motion_type: number,
    tr: number,
    tr_slice: number,
    nslices: number,
    nvols: number,
    custom_motion_file: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): PossumInterpmotPyOutputs {
    const params = possum_interpmot_py_params(motion_type, tr, tr_slice, nslices, nvols, custom_motion_file, output_file)
    return possum_interpmot_py_execute(params, runner);
}


export {
      POSSUM_INTERPMOT_PY_METADATA,
      PossumInterpmotPyOutputs,
      PossumInterpmotPyParameters,
      possum_interpmot_py,
      possum_interpmot_py_execute,
      possum_interpmot_py_params,
};
