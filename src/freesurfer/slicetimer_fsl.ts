// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICETIMER_FSL_METADATA: Metadata = {
    id: "27673c86089b795cd88a005218734e798ec23211.boutiques",
    name: "slicetimer.fsl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SlicetimerFslParameters {
    "__STYXTYPE__": "slicetimer.fsl";
    "infile": InputPathType;
    "outfile"?: string | null | undefined;
    "tr"?: number | null | undefined;
    "direction"?: "x" | "y" | "z" | null | undefined;
    "interleaved": boolean;
    "reverse": boolean;
    "custom_timings"?: InputPathType | null | undefined;
    "global_shift"?: number | null | undefined;
    "custom_interleave_order"?: InputPathType | null | undefined;
    "verbose": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "slicetimer.fsl": slicetimer_fsl_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "slicetimer.fsl": slicetimer_fsl_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `slicetimer_fsl(...)`.
 *
 * @interface
 */
interface SlicetimerFslOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected output timeseries
     */
    corrected_timeseries: OutputPathType | null;
}


function slicetimer_fsl_params(
    infile: InputPathType,
    outfile: string | null = null,
    tr: number | null = null,
    direction: "x" | "y" | "z" | null = null,
    interleaved: boolean = false,
    reverse: boolean = false,
    custom_timings: InputPathType | null = null,
    global_shift: number | null = null,
    custom_interleave_order: InputPathType | null = null,
    verbose: boolean = false,
): SlicetimerFslParameters {
    /**
     * Build parameters.
    
     * @param infile Filename of input timeseries
     * @param outfile Filename of output corrected timeseries
     * @param tr Specify TR of data, default is 3s
     * @param direction Direction of slice acquisition (x=1, y=2, z=3); default is z
     * @param interleaved Use interleaved acquisition
     * @param reverse Reverse slice indexing (default is slices were acquired bottom-up)
     * @param custom_timings Filename of single-column slice timings in fractions of TR, positive values shift slices forwards in time
     * @param global_shift Global shift in fraction of TR, default is 0
     * @param custom_interleave_order Filename of single-column custom interleave order file (first slice is referred to as 1 not 0)
     * @param verbose Switch on diagnostic messages
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "slicetimer.fsl" as const,
        "infile": infile,
        "interleaved": interleaved,
        "reverse": reverse,
        "verbose": verbose,
    };
    if (outfile !== null) {
        params["outfile"] = outfile;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (direction !== null) {
        params["direction"] = direction;
    }
    if (custom_timings !== null) {
        params["custom_timings"] = custom_timings;
    }
    if (global_shift !== null) {
        params["global_shift"] = global_shift;
    }
    if (custom_interleave_order !== null) {
        params["custom_interleave_order"] = custom_interleave_order;
    }
    return params;
}


function slicetimer_fsl_cargs(
    params: SlicetimerFslParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("slicetimer");
    cargs.push("--in");
    cargs.push(
        "-i",
        execution.inputFile((params["infile"] ?? null))
    );
    if ((params["outfile"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["outfile"] ?? null)
        );
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["tr"] ?? null))
        );
    }
    if ((params["direction"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["direction"] ?? null)
        );
    }
    if ((params["interleaved"] ?? null)) {
        cargs.push("--odd");
    }
    if ((params["reverse"] ?? null)) {
        cargs.push("--down");
    }
    if ((params["custom_timings"] ?? null) !== null) {
        cargs.push(
            "--tcustom",
            execution.inputFile((params["custom_timings"] ?? null))
        );
    }
    if ((params["global_shift"] ?? null) !== null) {
        cargs.push(
            "--tglobal",
            String((params["global_shift"] ?? null))
        );
    }
    if ((params["custom_interleave_order"] ?? null) !== null) {
        cargs.push(
            "--ocustom",
            execution.inputFile((params["custom_interleave_order"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


function slicetimer_fsl_outputs(
    params: SlicetimerFslParameters,
    execution: Execution,
): SlicetimerFslOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SlicetimerFslOutputs = {
        root: execution.outputFile("."),
        corrected_timeseries: ((params["outfile"] ?? null) !== null) ? execution.outputFile([(params["outfile"] ?? null)].join('')) : null,
    };
    return ret;
}


function slicetimer_fsl_execute(
    params: SlicetimerFslParameters,
    execution: Execution,
): SlicetimerFslOutputs {
    /**
     * FMRIB's Interpolation for Slice Timing correction in FMRI data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SlicetimerFslOutputs`).
     */
    params = execution.params(params)
    const cargs = slicetimer_fsl_cargs(params, execution)
    const ret = slicetimer_fsl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function slicetimer_fsl(
    infile: InputPathType,
    outfile: string | null = null,
    tr: number | null = null,
    direction: "x" | "y" | "z" | null = null,
    interleaved: boolean = false,
    reverse: boolean = false,
    custom_timings: InputPathType | null = null,
    global_shift: number | null = null,
    custom_interleave_order: InputPathType | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): SlicetimerFslOutputs {
    /**
     * FMRIB's Interpolation for Slice Timing correction in FMRI data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param infile Filename of input timeseries
     * @param outfile Filename of output corrected timeseries
     * @param tr Specify TR of data, default is 3s
     * @param direction Direction of slice acquisition (x=1, y=2, z=3); default is z
     * @param interleaved Use interleaved acquisition
     * @param reverse Reverse slice indexing (default is slices were acquired bottom-up)
     * @param custom_timings Filename of single-column slice timings in fractions of TR, positive values shift slices forwards in time
     * @param global_shift Global shift in fraction of TR, default is 0
     * @param custom_interleave_order Filename of single-column custom interleave order file (first slice is referred to as 1 not 0)
     * @param verbose Switch on diagnostic messages
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SlicetimerFslOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICETIMER_FSL_METADATA);
    const params = slicetimer_fsl_params(infile, outfile, tr, direction, interleaved, reverse, custom_timings, global_shift, custom_interleave_order, verbose)
    return slicetimer_fsl_execute(params, execution);
}


export {
      SLICETIMER_FSL_METADATA,
      SlicetimerFslOutputs,
      SlicetimerFslParameters,
      slicetimer_fsl,
      slicetimer_fsl_params,
};
