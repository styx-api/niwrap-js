// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLASCII2IMG_METADATA: Metadata = {
    id: "7d9563406793caa4f2d7330380671357bb8fb341.boutiques",
    name: "fslascii2img",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Fslascii2imgParameters {
    "@type": "fsl.fslascii2img";
    "infile": InputPathType;
    "xsize": number;
    "ysize": number;
    "zsize": number;
    "tsize": number;
    "xdim": number;
    "ydim": number;
    "zdim": number;
    "tr": number;
    "outfile": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslascii2img": fslascii2img_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslascii2img": fslascii2img_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslascii2img(...)`.
 *
 * @interface
 */
interface Fslascii2imgOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted NIfTI file from ASCII input
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input ASCII file
 * @param xsize Size in the x dimension (in voxels)
 * @param ysize Size in the y dimension (in voxels)
 * @param zsize Size in the z dimension (in voxels)
 * @param tsize Size in the t dimension (in voxels)
 * @param xdim Dimension size in the x dimension (in mm)
 * @param ydim Dimension size in the y dimension (in mm)
 * @param zdim Dimension size in the z dimension (in mm)
 * @param tr Repetition time (TR) in seconds
 * @param outfile Output NIfTI file
 *
 * @returns Parameter dictionary
 */
function fslascii2img_params(
    infile: InputPathType,
    xsize: number,
    ysize: number,
    zsize: number,
    tsize: number,
    xdim: number,
    ydim: number,
    zdim: number,
    tr: number,
    outfile: string = "output",
): Fslascii2imgParameters {
    const params = {
        "@type": "fsl.fslascii2img" as const,
        "infile": infile,
        "xsize": xsize,
        "ysize": ysize,
        "zsize": zsize,
        "tsize": tsize,
        "xdim": xdim,
        "ydim": ydim,
        "zdim": zdim,
        "tr": tr,
        "outfile": outfile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslascii2img_cargs(
    params: Fslascii2imgParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslascii2img");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push(String((params["xsize"] ?? null)));
    cargs.push(String((params["ysize"] ?? null)));
    cargs.push(String((params["zsize"] ?? null)));
    cargs.push(String((params["tsize"] ?? null)));
    cargs.push(String((params["xdim"] ?? null)));
    cargs.push(String((params["ydim"] ?? null)));
    cargs.push(String((params["zdim"] ?? null)));
    cargs.push(String((params["tr"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslascii2img_outputs(
    params: Fslascii2imgParameters,
    execution: Execution,
): Fslascii2imgOutputs {
    const ret: Fslascii2imgOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Convert data from ASCII format to NIfTI format.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Fslascii2imgOutputs`).
 */
function fslascii2img_execute(
    params: Fslascii2imgParameters,
    execution: Execution,
): Fslascii2imgOutputs {
    params = execution.params(params)
    const cargs = fslascii2img_cargs(params, execution)
    const ret = fslascii2img_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert data from ASCII format to NIfTI format.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param infile Input ASCII file
 * @param xsize Size in the x dimension (in voxels)
 * @param ysize Size in the y dimension (in voxels)
 * @param zsize Size in the z dimension (in voxels)
 * @param tsize Size in the t dimension (in voxels)
 * @param xdim Dimension size in the x dimension (in mm)
 * @param ydim Dimension size in the y dimension (in mm)
 * @param zdim Dimension size in the z dimension (in mm)
 * @param tr Repetition time (TR) in seconds
 * @param outfile Output NIfTI file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fslascii2imgOutputs`).
 */
function fslascii2img(
    infile: InputPathType,
    xsize: number,
    ysize: number,
    zsize: number,
    tsize: number,
    xdim: number,
    ydim: number,
    zdim: number,
    tr: number,
    outfile: string = "output",
    runner: Runner | null = null,
): Fslascii2imgOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLASCII2IMG_METADATA);
    const params = fslascii2img_params(infile, xsize, ysize, zsize, tsize, xdim, ydim, zdim, tr, outfile)
    return fslascii2img_execute(params, execution);
}


export {
      FSLASCII2IMG_METADATA,
      Fslascii2imgOutputs,
      Fslascii2imgParameters,
      fslascii2img,
      fslascii2img_cargs,
      fslascii2img_execute,
      fslascii2img_outputs,
      fslascii2img_params,
};
