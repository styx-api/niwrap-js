// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APPLYTOPUP_METADATA: Metadata = {
    id: "28ab631a68595bc2447ad41e586fe5e30606d0a6.boutiques",
    name: "applytopup",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ApplytopupParameters {
    "__STYXTYPE__": "applytopup";
    "imain": Array<InputPathType>;
    "datain": InputPathType;
    "inindex": Array<string>;
    "topup": InputPathType;
    "out": string;
    "method"?: "jac" | "lsr" | null | undefined;
    "interp"?: "trilinear" | "spline" | null | undefined;
    "datatype"?: "char" | "short" | "int" | "float" | "double" | null | undefined;
    "verbose": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "applytopup": applytopup_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "applytopup": applytopup_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `applytopup(...)`.
 *
 * @interface
 */
interface ApplytopupOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output warped image.
     */
    output_file: OutputPathType;
}


function applytopup_params(
    imain: Array<InputPathType>,
    datain: InputPathType,
    inindex: Array<string>,
    topup: InputPathType,
    out: string,
    method: "jac" | "lsr" | null = null,
    interp: "trilinear" | "spline" | null = null,
    datatype: "char" | "short" | "int" | "float" | "double" | null = null,
    verbose: boolean = false,
): ApplytopupParameters {
    /**
     * Build parameters.
    
     * @param imain Comma separated list of names of input image (to be corrected)
     * @param datain Name of text file with PE directions/times
     * @param inindex Comma separated list of indices into --datain of the input image (to be corrected)
     * @param topup Name of field/movements (from topup)
     * @param out Basename for output (warped) image
     * @param method Use jacobian modulation (jac) or least-squares resampling (lsr), default=lsr.
     * @param interp Interpolation method {trilinear, spline}, default=spline
     * @param datatype Force output data type [char short int float double]
     * @param verbose Switch on diagnostic messages
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "applytopup" as const,
        "imain": imain,
        "datain": datain,
        "inindex": inindex,
        "topup": topup,
        "out": out,
        "verbose": verbose,
    };
    if (method !== null) {
        params["method"] = method;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    return params;
}


function applytopup_cargs(
    params: ApplytopupParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("applytopup");
    cargs.push(["--imain=", (params["imain"] ?? null).map(f => execution.inputFile(f)).join(",")].join(''));
    cargs.push(["--datain=", execution.inputFile((params["datain"] ?? null))].join(''));
    cargs.push(["--inindex=", (params["inindex"] ?? null).join(",")].join(''));
    cargs.push(["--topup=", execution.inputFile((params["topup"] ?? null), { resolveParent: true })].join(''));
    cargs.push(["--out=", (params["out"] ?? null)].join(''));
    if ((params["method"] ?? null) !== null) {
        cargs.push(["--method=", (params["method"] ?? null)].join(''));
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(["--interp=", (params["interp"] ?? null)].join(''));
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(["--datatype=", (params["datatype"] ?? null)].join(''));
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("--verbose");
    }
    return cargs;
}


function applytopup_outputs(
    params: ApplytopupParameters,
    execution: Execution,
): ApplytopupOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ApplytopupOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["out"] ?? null)].join('')),
    };
    return ret;
}


function applytopup_execute(
    params: ApplytopupParameters,
    execution: Execution,
): ApplytopupOutputs {
    /**
     * applytopup applies corrections to images using the field estimates produced by topup.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ApplytopupOutputs`).
     */
    params = execution.params(params)
    const cargs = applytopup_cargs(params, execution)
    const ret = applytopup_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function applytopup(
    imain: Array<InputPathType>,
    datain: InputPathType,
    inindex: Array<string>,
    topup: InputPathType,
    out: string,
    method: "jac" | "lsr" | null = null,
    interp: "trilinear" | "spline" | null = null,
    datatype: "char" | "short" | "int" | "float" | "double" | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): ApplytopupOutputs {
    /**
     * applytopup applies corrections to images using the field estimates produced by topup.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param imain Comma separated list of names of input image (to be corrected)
     * @param datain Name of text file with PE directions/times
     * @param inindex Comma separated list of indices into --datain of the input image (to be corrected)
     * @param topup Name of field/movements (from topup)
     * @param out Basename for output (warped) image
     * @param method Use jacobian modulation (jac) or least-squares resampling (lsr), default=lsr.
     * @param interp Interpolation method {trilinear, spline}, default=spline
     * @param datatype Force output data type [char short int float double]
     * @param verbose Switch on diagnostic messages
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ApplytopupOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APPLYTOPUP_METADATA);
    const params = applytopup_params(imain, datain, inindex, topup, out, method, interp, datatype, verbose)
    return applytopup_execute(params, execution);
}


export {
      APPLYTOPUP_METADATA,
      ApplytopupOutputs,
      ApplytopupParameters,
      applytopup,
      applytopup_params,
};
