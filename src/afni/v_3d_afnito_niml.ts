// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_AFNITO_NIML_METADATA: Metadata = {
    id: "98f63f2e946d67b9373a37700e5abbc719dca8ea.boutiques",
    name: "3dAFNItoNIML",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAfnitoNimlParameters {
    "__STYXTYPE__": "3dAFNItoNIML";
    "dset": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dAFNItoNIML": v_3d_afnito_niml_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_afnito_niml(...)`.
 *
 * @interface
 */
interface V3dAfnitoNimlOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v_3d_afnito_niml_params(
    dset: InputPathType,
): V3dAfnitoNimlParameters {
    /**
     * Build parameters.
    
     * @param dset AFNI dataset
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dAFNItoNIML" as const,
        "dset": dset,
    };
    return params;
}


function v_3d_afnito_niml_cargs(
    params: V3dAfnitoNimlParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dAFNItoNIML");
    cargs.push("[OPTIONS]");
    cargs.push(execution.inputFile((params["dset"] ?? null)));
    return cargs;
}


function v_3d_afnito_niml_outputs(
    params: V3dAfnitoNimlParameters,
    execution: Execution,
): V3dAfnitoNimlOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dAfnitoNimlOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v_3d_afnito_niml_execute(
    params: V3dAfnitoNimlParameters,
    execution: Execution,
): V3dAfnitoNimlOutputs {
    /**
     * Dumps AFNI dataset header information to stdout in NIML format. Mostly for debugging and testing purposes!.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dAfnitoNimlOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_afnito_niml_cargs(params, execution)
    const ret = v_3d_afnito_niml_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_afnito_niml(
    dset: InputPathType,
    runner: Runner | null = null,
): V3dAfnitoNimlOutputs {
    /**
     * Dumps AFNI dataset header information to stdout in NIML format. Mostly for debugging and testing purposes!.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dset AFNI dataset
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dAfnitoNimlOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_AFNITO_NIML_METADATA);
    const params = v_3d_afnito_niml_params(dset)
    return v_3d_afnito_niml_execute(params, execution);
}


export {
      V3dAfnitoNimlOutputs,
      V3dAfnitoNimlParameters,
      V_3D_AFNITO_NIML_METADATA,
      v_3d_afnito_niml,
      v_3d_afnito_niml_params,
};
