// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACK_MNC_TCL_METADATA: Metadata = {
    id: "54eec142d994829a43977ef77cc7f837f8d06635.boutiques",
    name: "unpack_mnc.tcl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UnpackMncTclParameters {
    "__STYXTYPE__": "unpack_mnc.tcl";
    "verbose": boolean;
    "output_dir"?: string | null | undefined;
    "input_file"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "unpack_mnc.tcl": unpack_mnc_tcl_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "unpack_mnc.tcl": unpack_mnc_tcl_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `unpack_mnc_tcl(...)`.
 *
 * @interface
 */
interface UnpackMncTclOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Unpacked output MINC file
     */
    unpacked_file: OutputPathType | null;
}


function unpack_mnc_tcl_params(
    verbose: boolean = false,
    output_dir: string | null = null,
    input_file: InputPathType | null = null,
): UnpackMncTclParameters {
    /**
     * Build parameters.
    
     * @param verbose Verbose output messages
     * @param output_dir Output directory for unpacked files
     * @param input_file Specify a custom input file for unpacking
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "unpack_mnc.tcl" as const,
        "verbose": verbose,
    };
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (input_file !== null) {
        params["input_file"] = input_file;
    }
    return params;
}


function unpack_mnc_tcl_cargs(
    params: UnpackMncTclParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("unpack_mnc.tcl");
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["input_file"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["input_file"] ?? null))
        );
    }
    return cargs;
}


function unpack_mnc_tcl_outputs(
    params: UnpackMncTclParameters,
    execution: Execution,
): UnpackMncTclOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: UnpackMncTclOutputs = {
        root: execution.outputFile("."),
        unpacked_file: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/unpacked_data.mnc"].join('')) : null,
    };
    return ret;
}


function unpack_mnc_tcl_execute(
    params: UnpackMncTclParameters,
    execution: Execution,
): UnpackMncTclOutputs {
    /**
     * A tool for unpacking MINC format images.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `UnpackMncTclOutputs`).
     */
    params = execution.params(params)
    const cargs = unpack_mnc_tcl_cargs(params, execution)
    const ret = unpack_mnc_tcl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function unpack_mnc_tcl(
    verbose: boolean = false,
    output_dir: string | null = null,
    input_file: InputPathType | null = null,
    runner: Runner | null = null,
): UnpackMncTclOutputs {
    /**
     * A tool for unpacking MINC format images.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param verbose Verbose output messages
     * @param output_dir Output directory for unpacked files
     * @param input_file Specify a custom input file for unpacking
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `UnpackMncTclOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACK_MNC_TCL_METADATA);
    const params = unpack_mnc_tcl_params(verbose, output_dir, input_file)
    return unpack_mnc_tcl_execute(params, execution);
}


export {
      UNPACK_MNC_TCL_METADATA,
      UnpackMncTclOutputs,
      UnpackMncTclParameters,
      unpack_mnc_tcl,
      unpack_mnc_tcl_params,
};
