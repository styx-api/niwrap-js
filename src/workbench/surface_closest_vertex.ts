// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_CLOSEST_VERTEX_METADATA: Metadata = {
    id: "b247f4f20d018925392cfcdef99f6eaa3f24d896.boutiques",
    name: "surface-closest-vertex",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceClosestVertexParameters {
    "@type": "workbench.surface-closest-vertex";
    "surface": InputPathType;
    "coord_list_file": string;
    "vertex_list_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-closest-vertex": surface_closest_vertex_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_closest_vertex(...)`.
 *
 * @interface
 */
interface SurfaceClosestVertexOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to use
 * @param coord_list_file text file with coordinates
 * @param vertex_list_out output - the output text file with vertex numbers
 *
 * @returns Parameter dictionary
 */
function surface_closest_vertex_params(
    surface: InputPathType,
    coord_list_file: string,
    vertex_list_out: string,
): SurfaceClosestVertexParameters {
    const params = {
        "@type": "workbench.surface-closest-vertex" as const,
        "surface": surface,
        "coord_list_file": coord_list_file,
        "vertex_list_out": vertex_list_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_closest_vertex_cargs(
    params: SurfaceClosestVertexParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-closest-vertex");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["coord_list_file"] ?? null));
    cargs.push((params["vertex_list_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_closest_vertex_outputs(
    params: SurfaceClosestVertexParameters,
    execution: Execution,
): SurfaceClosestVertexOutputs {
    const ret: SurfaceClosestVertexOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Find closest surface vertex to coordinates.
 *
 * For each coordinate XYZ triple, find the closest vertex in the surface, and output its vertex number into a text file.  The input file should only use whitespace to separate coordinates (spaces, newlines, tabs), for instance:
 *
 * 20 30 25
 * 30 -20 10.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `SurfaceClosestVertexOutputs`).
 */
function surface_closest_vertex_execute(
    params: SurfaceClosestVertexParameters,
    execution: Execution,
): SurfaceClosestVertexOutputs {
    params = execution.params(params)
    const cargs = surface_closest_vertex_cargs(params, execution)
    const ret = surface_closest_vertex_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Find closest surface vertex to coordinates.
 *
 * For each coordinate XYZ triple, find the closest vertex in the surface, and output its vertex number into a text file.  The input file should only use whitespace to separate coordinates (spaces, newlines, tabs), for instance:
 *
 * 20 30 25
 * 30 -20 10.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to use
 * @param coord_list_file text file with coordinates
 * @param vertex_list_out output - the output text file with vertex numbers
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceClosestVertexOutputs`).
 */
function surface_closest_vertex(
    surface: InputPathType,
    coord_list_file: string,
    vertex_list_out: string,
    runner: Runner | null = null,
): SurfaceClosestVertexOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_CLOSEST_VERTEX_METADATA);
    const params = surface_closest_vertex_params(surface, coord_list_file, vertex_list_out)
    return surface_closest_vertex_execute(params, execution);
}


export {
      SURFACE_CLOSEST_VERTEX_METADATA,
      SurfaceClosestVertexOutputs,
      SurfaceClosestVertexParameters,
      surface_closest_vertex,
      surface_closest_vertex_cargs,
      surface_closest_vertex_execute,
      surface_closest_vertex_outputs,
      surface_closest_vertex_params,
};
