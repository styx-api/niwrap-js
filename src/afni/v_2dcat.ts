// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_2DCAT_METADATA: Metadata = {
    id: "1ff7d0dc60f4bf318c5c16752466d2ad9856a898.boutiques",
    name: "2dcat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V2dcatParameters {
    "__STYXTYPE__": "2dcat";
    "filenames": Array<InputPathType>;
    "scale_image"?: InputPathType | null | undefined;
    "scale_pixels"?: InputPathType | null | undefined;
    "scale_intensity": boolean;
    "gscale"?: number | null | undefined;
    "rgb_out": boolean;
    "res_in"?: Array<number> | null | undefined;
    "respad_in"?: Array<number> | null | undefined;
    "pad_val"?: number | null | undefined;
    "crop"?: Array<number> | null | undefined;
    "autocrop_ctol"?: number | null | undefined;
    "autocrop_atol"?: number | null | undefined;
    "autocrop": boolean;
    "zero_wrap": boolean;
    "white_wrap": boolean;
    "gray_wrap"?: number | null | undefined;
    "image_wrap": boolean;
    "rand_wrap": boolean;
    "prefix"?: string | null | undefined;
    "matrix"?: Array<number> | null | undefined;
    "nx"?: number | null | undefined;
    "ny"?: number | null | undefined;
    "matrix_from_scale": boolean;
    "gap"?: number | null | undefined;
    "gap_col"?: Array<number> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "2dcat": v_2dcat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "2dcat": v_2dcat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_2dcat(...)`.
 *
 * @interface
 */
interface V2dcatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The main output image matrix file.
     */
    output_image: OutputPathType | null;
    /**
     * A 1D file containing the average of RGB values, if the prefix ends with .1D.
     */
    output_1_d: OutputPathType | null;
}


function v_2dcat_params(
    filenames: Array<InputPathType>,
    scale_image: InputPathType | null = null,
    scale_pixels: InputPathType | null = null,
    scale_intensity: boolean = false,
    gscale: number | null = null,
    rgb_out: boolean = false,
    res_in: Array<number> | null = null,
    respad_in: Array<number> | null = null,
    pad_val: number | null = null,
    crop: Array<number> | null = null,
    autocrop_ctol: number | null = null,
    autocrop_atol: number | null = null,
    autocrop: boolean = false,
    zero_wrap: boolean = false,
    white_wrap: boolean = false,
    gray_wrap: number | null = null,
    image_wrap: boolean = false,
    rand_wrap: boolean = false,
    prefix: string | null = null,
    matrix: Array<number> | null = null,
    nx: number | null = null,
    ny: number | null = null,
    matrix_from_scale: boolean = false,
    gap: number | null = null,
    gap_col: Array<number> | null = null,
): V2dcatParameters {
    /**
     * Build parameters.
    
     * @param filenames List of input image files.
     * @param scale_image Multiply each image in the output image matrix by the color or intensity of the pixel in the scale image.
     * @param scale_pixels Multiply each pixel in the output image by the color or intensity of the pixel in the scale image. The scale image is resized to the output image's resolution.
     * @param scale_intensity Use the intensity (average color) of the pixel instead of its color.
     * @param gscale Apply additional scaling factor.
     * @param rgb_out Force output to be in RGB, even if input is bytes.
     * @param res_in Set resolution of all input images.
     * @param respad_in Resample to max while respecting the aspect ratio, then pad to desired pixel count.
     * @param pad_val Set the padding value when using -respad_in. Should be in the range [0, 255], default is 0.
     * @param crop Crop images by specified number of pixels from the left, right, top, and bottom.
     * @param autocrop_ctol Automatically crop lines where RGB values differ by less than the specified percentage from the corner pixel values.
     * @param autocrop_atol Automatically crop lines where RGB values differ by less than the specified percentage from the line average.
     * @param autocrop Automatically crop lines with default tolerances using both autocrop_atol and autocrop_ctol set to 20.
     * @param zero_wrap Use solid black images if not enough images are provided to fill the matrix.
     * @param white_wrap Use solid white images if not enough images are provided to fill the matrix.
     * @param gray_wrap Use solid gray images if not enough images are provided to fill the matrix. The gray value must be between 0 and 1.0.
     * @param image_wrap Reuse images to fill the matrix. This is the default behavior.
     * @param rand_wrap Randomize the order of images when reusing to fill the matrix.
     * @param prefix Prefix the output file names with the specified string.
     * @param matrix Specify the number of images in each row (NX) and column (NY) of the image matrix.
     * @param nx Specify the number of images in each row.
     * @param ny Specify the number of images in each column.
     * @param matrix_from_scale Set matrix dimensions NX and NY to be the same as the SCALE_IMG's dimensions. Requires the -scale_image option.
     * @param gap Put a gap of specified pixels between images.
     * @param gap_col Set color of the gap line to specified R, G, B values. Values range from 0 to 255.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "2dcat" as const,
        "filenames": filenames,
        "scale_intensity": scale_intensity,
        "rgb_out": rgb_out,
        "autocrop": autocrop,
        "zero_wrap": zero_wrap,
        "white_wrap": white_wrap,
        "image_wrap": image_wrap,
        "rand_wrap": rand_wrap,
        "matrix_from_scale": matrix_from_scale,
    };
    if (scale_image !== null) {
        params["scale_image"] = scale_image;
    }
    if (scale_pixels !== null) {
        params["scale_pixels"] = scale_pixels;
    }
    if (gscale !== null) {
        params["gscale"] = gscale;
    }
    if (res_in !== null) {
        params["res_in"] = res_in;
    }
    if (respad_in !== null) {
        params["respad_in"] = respad_in;
    }
    if (pad_val !== null) {
        params["pad_val"] = pad_val;
    }
    if (crop !== null) {
        params["crop"] = crop;
    }
    if (autocrop_ctol !== null) {
        params["autocrop_ctol"] = autocrop_ctol;
    }
    if (autocrop_atol !== null) {
        params["autocrop_atol"] = autocrop_atol;
    }
    if (gray_wrap !== null) {
        params["gray_wrap"] = gray_wrap;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (matrix !== null) {
        params["matrix"] = matrix;
    }
    if (nx !== null) {
        params["nx"] = nx;
    }
    if (ny !== null) {
        params["ny"] = ny;
    }
    if (gap !== null) {
        params["gap"] = gap;
    }
    if (gap_col !== null) {
        params["gap_col"] = gap_col;
    }
    return params;
}


function v_2dcat_cargs(
    params: V2dcatParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("2dcat");
    cargs.push(...(params["filenames"] ?? null).map(f => execution.inputFile(f)));
    if ((params["scale_image"] ?? null) !== null) {
        cargs.push(
            "-scale_image",
            execution.inputFile((params["scale_image"] ?? null))
        );
    }
    if ((params["scale_pixels"] ?? null) !== null) {
        cargs.push(
            "-scale_pixels",
            execution.inputFile((params["scale_pixels"] ?? null))
        );
    }
    if ((params["scale_intensity"] ?? null)) {
        cargs.push("-scale_intensity");
    }
    if ((params["gscale"] ?? null) !== null) {
        cargs.push(
            "-gscale",
            String((params["gscale"] ?? null))
        );
    }
    if ((params["rgb_out"] ?? null)) {
        cargs.push("-rgb_out");
    }
    if ((params["res_in"] ?? null) !== null) {
        cargs.push(
            "-res_in",
            ...(params["res_in"] ?? null).map(String)
        );
    }
    if ((params["respad_in"] ?? null) !== null) {
        cargs.push(
            "-respad_in",
            ...(params["respad_in"] ?? null).map(String)
        );
    }
    if ((params["pad_val"] ?? null) !== null) {
        cargs.push(
            "-pad_val",
            String((params["pad_val"] ?? null))
        );
    }
    if ((params["crop"] ?? null) !== null) {
        cargs.push(
            "-crop",
            ...(params["crop"] ?? null).map(String)
        );
    }
    if ((params["autocrop_ctol"] ?? null) !== null) {
        cargs.push(
            "-autocrop_ctol",
            String((params["autocrop_ctol"] ?? null))
        );
    }
    if ((params["autocrop_atol"] ?? null) !== null) {
        cargs.push(
            "-autocrop_atol",
            String((params["autocrop_atol"] ?? null))
        );
    }
    if ((params["autocrop"] ?? null)) {
        cargs.push("-autocrop");
    }
    if ((params["zero_wrap"] ?? null)) {
        cargs.push("-zero_wrap");
    }
    if ((params["white_wrap"] ?? null)) {
        cargs.push("-white_wrap");
    }
    if ((params["gray_wrap"] ?? null) !== null) {
        cargs.push(
            "-gray_wrap",
            String((params["gray_wrap"] ?? null))
        );
    }
    if ((params["image_wrap"] ?? null)) {
        cargs.push("-image_wrap");
    }
    if ((params["rand_wrap"] ?? null)) {
        cargs.push("-rand_wrap");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["matrix"] ?? null) !== null) {
        cargs.push(
            "-matrix",
            ...(params["matrix"] ?? null).map(String)
        );
    }
    if ((params["nx"] ?? null) !== null) {
        cargs.push(
            "-nx",
            String((params["nx"] ?? null))
        );
    }
    if ((params["ny"] ?? null) !== null) {
        cargs.push(
            "-ny",
            String((params["ny"] ?? null))
        );
    }
    if ((params["matrix_from_scale"] ?? null)) {
        cargs.push("-matrix_from_scale");
    }
    if ((params["gap"] ?? null) !== null) {
        cargs.push(
            "-gap",
            String((params["gap"] ?? null))
        );
    }
    if ((params["gap_col"] ?? null) !== null) {
        cargs.push(
            "-gap_col",
            ...(params["gap_col"] ?? null).map(String)
        );
    }
    return cargs;
}


function v_2dcat_outputs(
    params: V2dcatParameters,
    execution: Execution,
): V2dcatOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V2dcatOutputs = {
        root: execution.outputFile("."),
        output_image: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".ppm"].join('')) : null,
        output_1_d: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


function v_2dcat_execute(
    params: V2dcatParameters,
    execution: Execution,
): V2dcatOutputs {
    /**
     * Puts a set of images into an image matrix montage of NX by NY images.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V2dcatOutputs`).
     */
    params = execution.params(params)
    const cargs = v_2dcat_cargs(params, execution)
    const ret = v_2dcat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_2dcat(
    filenames: Array<InputPathType>,
    scale_image: InputPathType | null = null,
    scale_pixels: InputPathType | null = null,
    scale_intensity: boolean = false,
    gscale: number | null = null,
    rgb_out: boolean = false,
    res_in: Array<number> | null = null,
    respad_in: Array<number> | null = null,
    pad_val: number | null = null,
    crop: Array<number> | null = null,
    autocrop_ctol: number | null = null,
    autocrop_atol: number | null = null,
    autocrop: boolean = false,
    zero_wrap: boolean = false,
    white_wrap: boolean = false,
    gray_wrap: number | null = null,
    image_wrap: boolean = false,
    rand_wrap: boolean = false,
    prefix: string | null = null,
    matrix: Array<number> | null = null,
    nx: number | null = null,
    ny: number | null = null,
    matrix_from_scale: boolean = false,
    gap: number | null = null,
    gap_col: Array<number> | null = null,
    runner: Runner | null = null,
): V2dcatOutputs {
    /**
     * Puts a set of images into an image matrix montage of NX by NY images.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param filenames List of input image files.
     * @param scale_image Multiply each image in the output image matrix by the color or intensity of the pixel in the scale image.
     * @param scale_pixels Multiply each pixel in the output image by the color or intensity of the pixel in the scale image. The scale image is resized to the output image's resolution.
     * @param scale_intensity Use the intensity (average color) of the pixel instead of its color.
     * @param gscale Apply additional scaling factor.
     * @param rgb_out Force output to be in RGB, even if input is bytes.
     * @param res_in Set resolution of all input images.
     * @param respad_in Resample to max while respecting the aspect ratio, then pad to desired pixel count.
     * @param pad_val Set the padding value when using -respad_in. Should be in the range [0, 255], default is 0.
     * @param crop Crop images by specified number of pixels from the left, right, top, and bottom.
     * @param autocrop_ctol Automatically crop lines where RGB values differ by less than the specified percentage from the corner pixel values.
     * @param autocrop_atol Automatically crop lines where RGB values differ by less than the specified percentage from the line average.
     * @param autocrop Automatically crop lines with default tolerances using both autocrop_atol and autocrop_ctol set to 20.
     * @param zero_wrap Use solid black images if not enough images are provided to fill the matrix.
     * @param white_wrap Use solid white images if not enough images are provided to fill the matrix.
     * @param gray_wrap Use solid gray images if not enough images are provided to fill the matrix. The gray value must be between 0 and 1.0.
     * @param image_wrap Reuse images to fill the matrix. This is the default behavior.
     * @param rand_wrap Randomize the order of images when reusing to fill the matrix.
     * @param prefix Prefix the output file names with the specified string.
     * @param matrix Specify the number of images in each row (NX) and column (NY) of the image matrix.
     * @param nx Specify the number of images in each row.
     * @param ny Specify the number of images in each column.
     * @param matrix_from_scale Set matrix dimensions NX and NY to be the same as the SCALE_IMG's dimensions. Requires the -scale_image option.
     * @param gap Put a gap of specified pixels between images.
     * @param gap_col Set color of the gap line to specified R, G, B values. Values range from 0 to 255.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V2dcatOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_2DCAT_METADATA);
    const params = v_2dcat_params(filenames, scale_image, scale_pixels, scale_intensity, gscale, rgb_out, res_in, respad_in, pad_val, crop, autocrop_ctol, autocrop_atol, autocrop, zero_wrap, white_wrap, gray_wrap, image_wrap, rand_wrap, prefix, matrix, nx, ny, matrix_from_scale, gap, gap_col)
    return v_2dcat_execute(params, execution);
}


export {
      V2dcatOutputs,
      V2dcatParameters,
      V_2DCAT_METADATA,
      v_2dcat,
      v_2dcat_params,
};
