// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GTMSEG_METADATA: Metadata = {
    id: "34bcd199df253fe6cc5514cfec9099e8eb5257ca.boutiques",
    name: "gtmseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GtmsegParameters {
    "@type": "freesurfer.gtmseg";
    "subject": string;
    "outvol"?: string | null | undefined;
    "usf"?: number | null | undefined;
    "subsegwm": boolean;
    "keep_hypo": boolean;
    "keep_cc": boolean;
    "dmax"?: number | null | undefined;
    "ctx_annot"?: string | null | undefined;
    "wm_annot"?: string | null | undefined;
    "output_usf"?: number | null | undefined;
    "head"?: string | null | undefined;
    "subseg_cbwm": boolean;
    "no_pons": boolean;
    "no_vermis": boolean;
    "ctab"?: InputPathType | null | undefined;
    "no_seg_stats": boolean;
    "xcerseg": boolean;
    "debug": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.gtmseg": gtmseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.gtmseg": gtmseg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gtmseg(...)`.
 *
 * @interface
 */
interface GtmsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output segmentation volume
     */
    output_volume: OutputPathType | null;
    /**
     * Generated color table for the output segmentation
     */
    output_ctab: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject to analyze
 * @param outvol Output volume relative to subject/mri
 * @param usf Upsampling factor for segmentation resolution
 * @param subsegwm Subsegment white matter into lobes
 * @param keep_hypo Do not relabel hypointensities as white matter when subsegmenting WM
 * @param keep_cc Do not relabel corpus callosum as white matter
 * @param dmax Distance threshold for subsegmenting WM
 * @param ctx_annot Annotation for cortical segmentation
 * @param wm_annot Annotation for WM segmentation with --subsegwm
 * @param output_usf Set output upsampling factor different from input USF for debugging
 * @param head Use alternative head segmentation file
 * @param subseg_cbwm Subsegment cerebellum WM into core and gyri
 * @param no_pons Do not add pons segmentation when running xcerebralseg
 * @param no_vermis Do not add vermis segmentation when running xcerebralseg
 * @param ctab Color table for custom segmentation
 * @param no_seg_stats Do not compute segmentation statistics
 * @param xcerseg Run xcerebralseg to create apas+head.mgz
 * @param debug Enable debugging mode
 *
 * @returns Parameter dictionary
 */
function gtmseg_params(
    subject: string,
    outvol: string | null = null,
    usf: number | null = null,
    subsegwm: boolean = false,
    keep_hypo: boolean = false,
    keep_cc: boolean = false,
    dmax: number | null = null,
    ctx_annot: string | null = null,
    wm_annot: string | null = null,
    output_usf: number | null = null,
    head: string | null = null,
    subseg_cbwm: boolean = false,
    no_pons: boolean = false,
    no_vermis: boolean = false,
    ctab: InputPathType | null = null,
    no_seg_stats: boolean = false,
    xcerseg: boolean = false,
    debug: boolean = false,
): GtmsegParameters {
    const params = {
        "@type": "freesurfer.gtmseg" as const,
        "subject": subject,
        "subsegwm": subsegwm,
        "keep_hypo": keep_hypo,
        "keep_cc": keep_cc,
        "subseg_cbwm": subseg_cbwm,
        "no_pons": no_pons,
        "no_vermis": no_vermis,
        "no_seg_stats": no_seg_stats,
        "xcerseg": xcerseg,
        "debug": debug,
    };
    if (outvol !== null) {
        params["outvol"] = outvol;
    }
    if (usf !== null) {
        params["usf"] = usf;
    }
    if (dmax !== null) {
        params["dmax"] = dmax;
    }
    if (ctx_annot !== null) {
        params["ctx_annot"] = ctx_annot;
    }
    if (wm_annot !== null) {
        params["wm_annot"] = wm_annot;
    }
    if (output_usf !== null) {
        params["output_usf"] = output_usf;
    }
    if (head !== null) {
        params["head"] = head;
    }
    if (ctab !== null) {
        params["ctab"] = ctab;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gtmseg_cargs(
    params: GtmsegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gtmseg");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["outvol"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["outvol"] ?? null)
        );
    }
    if ((params["usf"] ?? null) !== null) {
        cargs.push(
            "--usf",
            String((params["usf"] ?? null))
        );
    }
    if ((params["subsegwm"] ?? null)) {
        cargs.push("--subsegwm");
    }
    if ((params["keep_hypo"] ?? null)) {
        cargs.push("--keep-hypo");
    }
    if ((params["keep_cc"] ?? null)) {
        cargs.push("--keep-cc");
    }
    if ((params["dmax"] ?? null) !== null) {
        cargs.push(
            "--dmax",
            String((params["dmax"] ?? null))
        );
    }
    if ((params["ctx_annot"] ?? null) !== null) {
        cargs.push(
            "--ctx-annot",
            (params["ctx_annot"] ?? null)
        );
    }
    if ((params["wm_annot"] ?? null) !== null) {
        cargs.push(
            "--wm-annot",
            (params["wm_annot"] ?? null)
        );
    }
    if ((params["output_usf"] ?? null) !== null) {
        cargs.push(
            "--output-usf",
            String((params["output_usf"] ?? null))
        );
    }
    if ((params["head"] ?? null) !== null) {
        cargs.push(
            "--head",
            (params["head"] ?? null)
        );
    }
    if ((params["subseg_cbwm"] ?? null)) {
        cargs.push("--subseg-cblum-wm");
    }
    if ((params["no_pons"] ?? null)) {
        cargs.push("--no-pons");
    }
    if ((params["no_vermis"] ?? null)) {
        cargs.push("--no-vermis");
    }
    if ((params["ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab"] ?? null))
        );
    }
    if ((params["no_seg_stats"] ?? null)) {
        cargs.push("--no-seg-stats");
    }
    if ((params["xcerseg"] ?? null)) {
        cargs.push("--xcerseg");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gtmseg_outputs(
    params: GtmsegParameters,
    execution: Execution,
): GtmsegOutputs {
    const ret: GtmsegOutputs = {
        root: execution.outputFile("."),
        output_volume: ((params["outvol"] ?? null) !== null) ? execution.outputFile(["$SUBJECTS_DIR/", (params["subject"] ?? null), "/mri/", (params["outvol"] ?? null)].join('')) : null,
        output_ctab: execution.outputFile(["$SUBJECTS_DIR/", (params["subject"] ?? null), "/mri/gtmseg+myseg.ctab"].join('')),
    };
    return ret;
}


/**
 * gtmseg
 *
 * Creates an anatomical segmentation for the geometric transfer matrix (GTM) used in PET partial volume correction.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GtmsegOutputs`).
 */
function gtmseg_execute(
    params: GtmsegParameters,
    runner: Runner | null = null,
): GtmsegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GTMSEG_METADATA);
    params = execution.params(params)
    const cargs = gtmseg_cargs(params, execution)
    const ret = gtmseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * gtmseg
 *
 * Creates an anatomical segmentation for the geometric transfer matrix (GTM) used in PET partial volume correction.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject to analyze
 * @param outvol Output volume relative to subject/mri
 * @param usf Upsampling factor for segmentation resolution
 * @param subsegwm Subsegment white matter into lobes
 * @param keep_hypo Do not relabel hypointensities as white matter when subsegmenting WM
 * @param keep_cc Do not relabel corpus callosum as white matter
 * @param dmax Distance threshold for subsegmenting WM
 * @param ctx_annot Annotation for cortical segmentation
 * @param wm_annot Annotation for WM segmentation with --subsegwm
 * @param output_usf Set output upsampling factor different from input USF for debugging
 * @param head Use alternative head segmentation file
 * @param subseg_cbwm Subsegment cerebellum WM into core and gyri
 * @param no_pons Do not add pons segmentation when running xcerebralseg
 * @param no_vermis Do not add vermis segmentation when running xcerebralseg
 * @param ctab Color table for custom segmentation
 * @param no_seg_stats Do not compute segmentation statistics
 * @param xcerseg Run xcerebralseg to create apas+head.mgz
 * @param debug Enable debugging mode
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GtmsegOutputs`).
 */
function gtmseg(
    subject: string,
    outvol: string | null = null,
    usf: number | null = null,
    subsegwm: boolean = false,
    keep_hypo: boolean = false,
    keep_cc: boolean = false,
    dmax: number | null = null,
    ctx_annot: string | null = null,
    wm_annot: string | null = null,
    output_usf: number | null = null,
    head: string | null = null,
    subseg_cbwm: boolean = false,
    no_pons: boolean = false,
    no_vermis: boolean = false,
    ctab: InputPathType | null = null,
    no_seg_stats: boolean = false,
    xcerseg: boolean = false,
    debug: boolean = false,
    runner: Runner | null = null,
): GtmsegOutputs {
    const params = gtmseg_params(subject, outvol, usf, subsegwm, keep_hypo, keep_cc, dmax, ctx_annot, wm_annot, output_usf, head, subseg_cbwm, no_pons, no_vermis, ctab, no_seg_stats, xcerseg, debug)
    return gtmseg_execute(params, runner);
}


export {
      GTMSEG_METADATA,
      GtmsegOutputs,
      GtmsegParameters,
      gtmseg,
      gtmseg_execute,
      gtmseg_params,
};
