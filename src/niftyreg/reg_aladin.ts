// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REG_ALADIN_METADATA: Metadata = {
    id: "1445fb7b186f71977196e8923782e87642993b67.boutiques",
    name: "reg_aladin",
    package: "niftyreg",
    container_image_tag: "vnmd/niftyreg_1.4.0:20220819",
};


interface RegAladinParameters {
    "@type"?: "niftyreg/reg_aladin";
    "reference_image": InputPathType;
    "floating_image": InputPathType;
    "symmetric": boolean;
    "output_affine"?: string | null | undefined;
    "rigid_only": boolean;
    "direct_affine": boolean;
    "smooth_ref"?: number | null | undefined;
    "smooth_float"?: number | null | undefined;
    "num_levels"?: number | null | undefined;
    "first_levels"?: number | null | undefined;
    "use_nifti_origin": boolean;
    "percent_block"?: number | null | undefined;
    "percent_inlier"?: number | null | undefined;
}
type RegAladinParametersTagged = Required<Pick<RegAladinParameters, '@type'>> & RegAladinParameters;


/**
 * Output object returned when calling `RegAladinParameters(...)`.
 *
 * @interface
 */
interface RegAladinOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the output affine transformation
     */
    output_affine_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param reference_image Filename of the reference (target) image
 * @param floating_image Filename of the floating (source) image
 * @param symmetric Uses symmetric version of the algorithm
 * @param output_affine Filename which contains the output affine transformation
 * @param rigid_only To perform a rigid registration only
 * @param direct_affine Directly optimize 12 DoF affine
 * @param smooth_ref Smooth the reference image using the specified sigma (mm)
 * @param smooth_float Smooth the floating image using the specified sigma (mm)
 * @param num_levels Number of levels to perform
 * @param first_levels Only perform the first levels
 * @param use_nifti_origin Use the NIFTI header origins to initialize the translation
 * @param percent_block Percentage of block to use
 * @param percent_inlier Percentage of inlier for the LTS
 *
 * @returns Parameter dictionary
 */
function reg_aladin_params(
    reference_image: InputPathType,
    floating_image: InputPathType,
    symmetric: boolean = false,
    output_affine: string | null = null,
    rigid_only: boolean = false,
    direct_affine: boolean = false,
    smooth_ref: number | null = null,
    smooth_float: number | null = null,
    num_levels: number | null = null,
    first_levels: number | null = null,
    use_nifti_origin: boolean = false,
    percent_block: number | null = null,
    percent_inlier: number | null = null,
): RegAladinParametersTagged {
    const params = {
        "@type": "niftyreg/reg_aladin" as const,
        "reference_image": reference_image,
        "floating_image": floating_image,
        "symmetric": symmetric,
        "rigid_only": rigid_only,
        "direct_affine": direct_affine,
        "use_nifti_origin": use_nifti_origin,
    };
    if (output_affine !== null) {
        params["output_affine"] = output_affine;
    }
    if (smooth_ref !== null) {
        params["smooth_ref"] = smooth_ref;
    }
    if (smooth_float !== null) {
        params["smooth_float"] = smooth_float;
    }
    if (num_levels !== null) {
        params["num_levels"] = num_levels;
    }
    if (first_levels !== null) {
        params["first_levels"] = first_levels;
    }
    if (percent_block !== null) {
        params["percent_block"] = percent_block;
    }
    if (percent_inlier !== null) {
        params["percent_inlier"] = percent_inlier;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function reg_aladin_cargs(
    params: RegAladinParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("reg_aladin");
    cargs.push(
        "-ref",
        execution.inputFile((params["reference_image"] ?? null))
    );
    cargs.push(
        "-flo",
        execution.inputFile((params["floating_image"] ?? null))
    );
    if ((params["symmetric"] ?? false)) {
        cargs.push("-sym");
    }
    if ((params["output_affine"] ?? null) !== null) {
        cargs.push(
            "-aff",
            (params["output_affine"] ?? null)
        );
    }
    if ((params["rigid_only"] ?? false)) {
        cargs.push("-rigOnly");
    }
    if ((params["direct_affine"] ?? false)) {
        cargs.push("-affDirect");
    }
    if ((params["smooth_ref"] ?? null) !== null) {
        cargs.push(
            "-smooR",
            String((params["smooth_ref"] ?? null))
        );
    }
    if ((params["smooth_float"] ?? null) !== null) {
        cargs.push(
            "-smooF",
            String((params["smooth_float"] ?? null))
        );
    }
    if ((params["num_levels"] ?? null) !== null) {
        cargs.push(
            "-ln",
            String((params["num_levels"] ?? null))
        );
    }
    if ((params["first_levels"] ?? null) !== null) {
        cargs.push(
            "-lp",
            String((params["first_levels"] ?? null))
        );
    }
    if ((params["use_nifti_origin"] ?? false)) {
        cargs.push("-nac");
    }
    if ((params["percent_block"] ?? null) !== null) {
        cargs.push(
            "-%v",
            String((params["percent_block"] ?? null))
        );
    }
    if ((params["percent_inlier"] ?? null) !== null) {
        cargs.push(
            "-%i",
            String((params["percent_inlier"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function reg_aladin_outputs(
    params: RegAladinParameters,
    execution: Execution,
): RegAladinOutputs {
    const ret: RegAladinOutputs = {
        root: execution.outputFile("."),
        output_affine_file: execution.outputFile(["outputAffine.txt"].join('')),
    };
    return ret;
}


/**
 * reg_aladin
 *
 * Block Matching algorithm for global registration based on "Reconstructing a 3D structure from serial histological sections", Image and Vision Computing, 2001.
 *
 * Author: NiftyReg Developers
 *
 * URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegAladinOutputs`).
 */
function reg_aladin_execute(
    params: RegAladinParameters,
    runner: Runner | null = null,
): RegAladinOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REG_ALADIN_METADATA);
    params = execution.params(params)
    const cargs = reg_aladin_cargs(params, execution)
    const ret = reg_aladin_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * reg_aladin
 *
 * Block Matching algorithm for global registration based on "Reconstructing a 3D structure from serial histological sections", Image and Vision Computing, 2001.
 *
 * Author: NiftyReg Developers
 *
 * URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
 *
 * @param reference_image Filename of the reference (target) image
 * @param floating_image Filename of the floating (source) image
 * @param symmetric Uses symmetric version of the algorithm
 * @param output_affine Filename which contains the output affine transformation
 * @param rigid_only To perform a rigid registration only
 * @param direct_affine Directly optimize 12 DoF affine
 * @param smooth_ref Smooth the reference image using the specified sigma (mm)
 * @param smooth_float Smooth the floating image using the specified sigma (mm)
 * @param num_levels Number of levels to perform
 * @param first_levels Only perform the first levels
 * @param use_nifti_origin Use the NIFTI header origins to initialize the translation
 * @param percent_block Percentage of block to use
 * @param percent_inlier Percentage of inlier for the LTS
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegAladinOutputs`).
 */
function reg_aladin(
    reference_image: InputPathType,
    floating_image: InputPathType,
    symmetric: boolean = false,
    output_affine: string | null = null,
    rigid_only: boolean = false,
    direct_affine: boolean = false,
    smooth_ref: number | null = null,
    smooth_float: number | null = null,
    num_levels: number | null = null,
    first_levels: number | null = null,
    use_nifti_origin: boolean = false,
    percent_block: number | null = null,
    percent_inlier: number | null = null,
    runner: Runner | null = null,
): RegAladinOutputs {
    const params = reg_aladin_params(reference_image, floating_image, symmetric, output_affine, rigid_only, direct_affine, smooth_ref, smooth_float, num_levels, first_levels, use_nifti_origin, percent_block, percent_inlier)
    return reg_aladin_execute(params, runner);
}


export {
      REG_ALADIN_METADATA,
      RegAladinOutputs,
      reg_aladin,
      reg_aladin_execute,
      reg_aladin_params,
};
