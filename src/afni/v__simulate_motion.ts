// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SIMULATE_MOTION_METADATA: Metadata = {
    id: "5fc17ce508dbb62923e813f5cff61e70e1accb2d.boutiques",
    name: "@simulate_motion",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VSimulateMotionParameters {
    "__STYXTYPE__": "@simulate_motion";
    "epi": InputPathType;
    "motion_file": InputPathType;
    "epi_timing"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "save_workdir": boolean;
    "test": boolean;
    "verb_level"?: number | null | undefined;
    "vr_base"?: number | null | undefined;
    "warp_method"?: string | null | undefined;
    "warp_1D"?: InputPathType | null | undefined;
    "warp_master"?: InputPathType | null | undefined;
    "wsinc5": boolean;
    "help": boolean;
    "hist": boolean;
    "todo": boolean;
    "ver": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@simulate_motion": v__simulate_motion_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@simulate_motion": v__simulate_motion_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__simulate_motion(...)`.
 *
 * @interface
 */
interface VSimulateMotionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Motion simulated EPI time series
     */
    simulated_motion_output: OutputPathType | null;
}


function v__simulate_motion_params(
    epi: InputPathType,
    motion_file: InputPathType,
    epi_timing: InputPathType | null = null,
    prefix: string | null = null,
    save_workdir: boolean = false,
    test: boolean = false,
    verb_level: number | null = null,
    vr_base: number | null = null,
    warp_method: string | null = null,
    warp_1_d: InputPathType | null = null,
    warp_master: InputPathType | null = null,
    wsinc5: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    todo: boolean = false,
    ver: boolean = false,
): VSimulateMotionParameters {
    /**
     * Build parameters.
    
     * @param epi Input EPI volume or time series (only a volreg base is needed, though more is okay).
     * @param motion_file Motion parameter file (as output by 3dvolreg).
     * @param epi_timing Provide EPI dataset with slice timing.
     * @param prefix Prefix for data results (default = motion_sim.NUM_TRS).
     * @param save_workdir Do not remove the 'work' directory.
     * @param test Only test running the program, do not create a simulated motion dataset.
     * @param verb_level Specify a verbose level (default = 1).
     * @param vr_base 0-based index of volreg base in EPI dataset.
     * @param warp_method Specify a method for forward alignment/transform.
     * @param warp_1_d Specify a 12 parameter affine transformation.
     * @param warp_master Specify a grid master dataset for the -warp_1D transform.
     * @param wsinc5 Use wsinc5 interpolation in 3dAllineate.
     * @param help Show help message.
     * @param hist Show program modification history.
     * @param todo Show current todo list.
     * @param ver Show program version.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@simulate_motion" as const,
        "epi": epi,
        "motion_file": motion_file,
        "save_workdir": save_workdir,
        "test": test,
        "wsinc5": wsinc5,
        "help": help,
        "hist": hist,
        "todo": todo,
        "ver": ver,
    };
    if (epi_timing !== null) {
        params["epi_timing"] = epi_timing;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (verb_level !== null) {
        params["verb_level"] = verb_level;
    }
    if (vr_base !== null) {
        params["vr_base"] = vr_base;
    }
    if (warp_method !== null) {
        params["warp_method"] = warp_method;
    }
    if (warp_1_d !== null) {
        params["warp_1D"] = warp_1_d;
    }
    if (warp_master !== null) {
        params["warp_master"] = warp_master;
    }
    return params;
}


function v__simulate_motion_cargs(
    params: VSimulateMotionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@simulate_motion");
    cargs.push(
        "-epi",
        execution.inputFile((params["epi"] ?? null))
    );
    cargs.push(
        "-motion_file",
        execution.inputFile((params["motion_file"] ?? null))
    );
    if ((params["epi_timing"] ?? null) !== null) {
        cargs.push(
            "-epi_timing",
            execution.inputFile((params["epi_timing"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["save_workdir"] ?? null)) {
        cargs.push("-save_workdir");
    }
    if ((params["test"] ?? null)) {
        cargs.push("-test");
    }
    if ((params["verb_level"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb_level"] ?? null))
        );
    }
    if ((params["vr_base"] ?? null) !== null) {
        cargs.push(
            "-vr_base",
            String((params["vr_base"] ?? null))
        );
    }
    if ((params["warp_method"] ?? null) !== null) {
        cargs.push(
            "-warp_method",
            (params["warp_method"] ?? null)
        );
    }
    if ((params["warp_1D"] ?? null) !== null) {
        cargs.push(
            "-warp_1D",
            execution.inputFile((params["warp_1D"] ?? null))
        );
    }
    if ((params["warp_master"] ?? null) !== null) {
        cargs.push(
            "-warp_master",
            execution.inputFile((params["warp_master"] ?? null))
        );
    }
    if ((params["wsinc5"] ?? null)) {
        cargs.push("-wsinc5");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["hist"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["todo"] ?? null)) {
        cargs.push("-todo");
    }
    if ((params["ver"] ?? null)) {
        cargs.push("-ver");
    }
    return cargs;
}


function v__simulate_motion_outputs(
    params: VSimulateMotionParameters,
    execution: Execution,
): VSimulateMotionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VSimulateMotionOutputs = {
        root: execution.outputFile("."),
        simulated_motion_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_simulated_motion.nii.gz"].join('')) : null,
    };
    return ret;
}


function v__simulate_motion_execute(
    params: VSimulateMotionParameters,
    execution: Execution,
): VSimulateMotionOutputs {
    /**
     * Create simulated motion time series in an EPI dataset based on the provided motion parameters and an input volume.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VSimulateMotionOutputs`).
     */
    params = execution.params(params)
    const cargs = v__simulate_motion_cargs(params, execution)
    const ret = v__simulate_motion_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__simulate_motion(
    epi: InputPathType,
    motion_file: InputPathType,
    epi_timing: InputPathType | null = null,
    prefix: string | null = null,
    save_workdir: boolean = false,
    test: boolean = false,
    verb_level: number | null = null,
    vr_base: number | null = null,
    warp_method: string | null = null,
    warp_1_d: InputPathType | null = null,
    warp_master: InputPathType | null = null,
    wsinc5: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    todo: boolean = false,
    ver: boolean = false,
    runner: Runner | null = null,
): VSimulateMotionOutputs {
    /**
     * Create simulated motion time series in an EPI dataset based on the provided motion parameters and an input volume.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param epi Input EPI volume or time series (only a volreg base is needed, though more is okay).
     * @param motion_file Motion parameter file (as output by 3dvolreg).
     * @param epi_timing Provide EPI dataset with slice timing.
     * @param prefix Prefix for data results (default = motion_sim.NUM_TRS).
     * @param save_workdir Do not remove the 'work' directory.
     * @param test Only test running the program, do not create a simulated motion dataset.
     * @param verb_level Specify a verbose level (default = 1).
     * @param vr_base 0-based index of volreg base in EPI dataset.
     * @param warp_method Specify a method for forward alignment/transform.
     * @param warp_1_d Specify a 12 parameter affine transformation.
     * @param warp_master Specify a grid master dataset for the -warp_1D transform.
     * @param wsinc5 Use wsinc5 interpolation in 3dAllineate.
     * @param help Show help message.
     * @param hist Show program modification history.
     * @param todo Show current todo list.
     * @param ver Show program version.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VSimulateMotionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SIMULATE_MOTION_METADATA);
    const params = v__simulate_motion_params(epi, motion_file, epi_timing, prefix, save_workdir, test, verb_level, vr_base, warp_method, warp_1_d, warp_master, wsinc5, help, hist, todo, ver)
    return v__simulate_motion_execute(params, execution);
}


export {
      VSimulateMotionOutputs,
      VSimulateMotionParameters,
      V__SIMULATE_MOTION_METADATA,
      v__simulate_motion,
      v__simulate_motion_params,
};
