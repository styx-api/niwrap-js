// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BORDER_TO_VERTICES_METADATA: Metadata = {
    id: "da3e39f9997664c91376607d199e377db4a87475.boutiques",
    name: "border-to-vertices",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface BorderToVerticesParameters {
    "@type": "workbench.border-to-vertices";
    "surface": InputPathType;
    "border_file": InputPathType;
    "metric_out": string;
    "opt_border_name"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.border-to-vertices": border_to_vertices_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.border-to-vertices": border_to_vertices_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `border_to_vertices(...)`.
 *
 * @interface
 */
interface BorderToVerticesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric file
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface the borders are drawn on
 * @param border_file the border file
 * @param metric_out the output metric file
 * @param opt_border_name create ROI for only one border: the name of the border
 *
 * @returns Parameter dictionary
 */
function border_to_vertices_params(
    surface: InputPathType,
    border_file: InputPathType,
    metric_out: string,
    opt_border_name: string | null = null,
): BorderToVerticesParameters {
    const params = {
        "@type": "workbench.border-to-vertices" as const,
        "surface": surface,
        "border_file": border_file,
        "metric_out": metric_out,
    };
    if (opt_border_name !== null) {
        params["opt_border_name"] = opt_border_name;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function border_to_vertices_cargs(
    params: BorderToVerticesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-border-to-vertices");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["border_file"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_border_name"] ?? null) !== null) {
        cargs.push(
            "-border",
            (params["opt_border_name"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function border_to_vertices_outputs(
    params: BorderToVerticesParameters,
    execution: Execution,
): BorderToVerticesOutputs {
    const ret: BorderToVerticesOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * border-to-vertices
 *
 * Draw borders as vertices in a metric file.
 *
 * Outputs a metric with 1s on vertices that follow a border, and 0s elsewhere.  By default, a separate metric column is created for each border.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderToVerticesOutputs`).
 */
function border_to_vertices_execute(
    params: BorderToVerticesParameters,
    runner: Runner | null = null,
): BorderToVerticesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BORDER_TO_VERTICES_METADATA);
    params = execution.params(params)
    const cargs = border_to_vertices_cargs(params, execution)
    const ret = border_to_vertices_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * border-to-vertices
 *
 * Draw borders as vertices in a metric file.
 *
 * Outputs a metric with 1s on vertices that follow a border, and 0s elsewhere.  By default, a separate metric column is created for each border.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface the borders are drawn on
 * @param border_file the border file
 * @param metric_out the output metric file
 * @param opt_border_name create ROI for only one border: the name of the border
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderToVerticesOutputs`).
 */
function border_to_vertices(
    surface: InputPathType,
    border_file: InputPathType,
    metric_out: string,
    opt_border_name: string | null = null,
    runner: Runner | null = null,
): BorderToVerticesOutputs {
    const params = border_to_vertices_params(surface, border_file, metric_out, opt_border_name)
    return border_to_vertices_execute(params, runner);
}


export {
      BORDER_TO_VERTICES_METADATA,
      BorderToVerticesOutputs,
      BorderToVerticesParameters,
      border_to_vertices,
      border_to_vertices_execute,
      border_to_vertices_params,
};
