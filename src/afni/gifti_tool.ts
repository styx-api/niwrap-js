// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GIFTI_TOOL_METADATA: Metadata = {
    id: "e21384bfaf8b8bcf833d65f05be55ac0e9f035a6.boutiques",
    name: "gifti_tool",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface GiftiToolParameters {
    "@type": "afni.gifti_tool";
    "infile": InputPathType;
    "new_numda"?: number | null | undefined;
    "new_dtype"?: string | null | undefined;
    "new_intent"?: string | null | undefined;
    "new_ndim"?: number | null | undefined;
    "new_dims"?: Array<number> | null | undefined;
    "write_gifti": string;
    "set_extern_filelist"?: Array<string> | null | undefined;
    "mod_add_data": boolean;
    "verb"?: number | null | undefined;
    "show_gifti": boolean;
    "read_das"?: Array<number> | null | undefined;
    "mod_gim_atr"?: Array<string> | null | undefined;
    "mod_gim_meta"?: Array<string> | null | undefined;
    "mod_da_atr"?: Array<string> | null | undefined;
    "mod_da_meta"?: Array<string> | null | undefined;
    "mod_das"?: Array<number> | null | undefined;
    "new_dset": boolean;
    "compare_gifti": boolean;
    "compare_data": boolean;
    "compare_verb"?: number | null | undefined;
    "approx_gifti": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.gifti_tool": gifti_tool_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.gifti_tool": gifti_tool_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gifti_tool(...)`.
 *
 * @interface
 */
interface GiftiToolOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output GIFTI file
     */
    output_gifti: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Specify one or more GIFTI datasets as input
 * @param write_gifti Write out dataset as gifti image
 * @param new_numda New dataset will have NUMDA DataArray elements
 * @param new_dtype Set data type to TYPE
 * @param new_intent DA elements will have intent INTENT
 * @param new_ndim Set Dimensionality to NUMDIMS
 * @param new_dims Set dims[] to these 6 values
 * @param set_extern_filelist Store data in external files
 * @param mod_add_data Add data to empty DataArray elements
 * @param verb Set verbose level
 * @param show_gifti Show final gifti image
 * @param read_das Read DataArray list indices
 * @param mod_gim_atr Set the GIFTI NAME=VALUE attribute pair at GIFTI level
 * @param mod_gim_meta Add this pair to the GIFTI MetaData
 * @param mod_da_atr Set the DataArray NAME=VALUE attribute pair
 * @param mod_da_meta Set the DataArray NAME=VALUE pair in DA's MetaData
 * @param mod_das Specify the set of DataArrays to modify
 * @param new_dset Create a new GIFTI dataset
 * @param compare_gifti Compare two GIFTI datasets
 * @param compare_data Flag to request comparison of the data
 * @param compare_verb Set the verbose level of comparisons
 * @param approx_gifti Approximate comparison of GIFTI datasets
 *
 * @returns Parameter dictionary
 */
function gifti_tool_params(
    infile: InputPathType,
    write_gifti: string,
    new_numda: number | null = null,
    new_dtype: string | null = null,
    new_intent: string | null = null,
    new_ndim: number | null = null,
    new_dims: Array<number> | null = null,
    set_extern_filelist: Array<string> | null = null,
    mod_add_data: boolean = false,
    verb: number | null = null,
    show_gifti: boolean = false,
    read_das: Array<number> | null = null,
    mod_gim_atr: Array<string> | null = null,
    mod_gim_meta: Array<string> | null = null,
    mod_da_atr: Array<string> | null = null,
    mod_da_meta: Array<string> | null = null,
    mod_das: Array<number> | null = null,
    new_dset: boolean = false,
    compare_gifti: boolean = false,
    compare_data: boolean = false,
    compare_verb: number | null = null,
    approx_gifti: boolean = false,
): GiftiToolParameters {
    const params = {
        "@type": "afni.gifti_tool" as const,
        "infile": infile,
        "write_gifti": write_gifti,
        "mod_add_data": mod_add_data,
        "show_gifti": show_gifti,
        "new_dset": new_dset,
        "compare_gifti": compare_gifti,
        "compare_data": compare_data,
        "approx_gifti": approx_gifti,
    };
    if (new_numda !== null) {
        params["new_numda"] = new_numda;
    }
    if (new_dtype !== null) {
        params["new_dtype"] = new_dtype;
    }
    if (new_intent !== null) {
        params["new_intent"] = new_intent;
    }
    if (new_ndim !== null) {
        params["new_ndim"] = new_ndim;
    }
    if (new_dims !== null) {
        params["new_dims"] = new_dims;
    }
    if (set_extern_filelist !== null) {
        params["set_extern_filelist"] = set_extern_filelist;
    }
    if (verb !== null) {
        params["verb"] = verb;
    }
    if (read_das !== null) {
        params["read_das"] = read_das;
    }
    if (mod_gim_atr !== null) {
        params["mod_gim_atr"] = mod_gim_atr;
    }
    if (mod_gim_meta !== null) {
        params["mod_gim_meta"] = mod_gim_meta;
    }
    if (mod_da_atr !== null) {
        params["mod_da_atr"] = mod_da_atr;
    }
    if (mod_da_meta !== null) {
        params["mod_da_meta"] = mod_da_meta;
    }
    if (mod_das !== null) {
        params["mod_das"] = mod_das;
    }
    if (compare_verb !== null) {
        params["compare_verb"] = compare_verb;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gifti_tool_cargs(
    params: GiftiToolParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gifti_tool");
    cargs.push(
        "-infile",
        execution.inputFile((params["infile"] ?? null))
    );
    if ((params["new_numda"] ?? null) !== null) {
        cargs.push(
            "-new_numDA",
            String((params["new_numda"] ?? null))
        );
    }
    if ((params["new_dtype"] ?? null) !== null) {
        cargs.push(
            "-new_dtype",
            (params["new_dtype"] ?? null)
        );
    }
    if ((params["new_intent"] ?? null) !== null) {
        cargs.push(
            "-new_intent",
            (params["new_intent"] ?? null)
        );
    }
    if ((params["new_ndim"] ?? null) !== null) {
        cargs.push(
            "-new_ndim",
            String((params["new_ndim"] ?? null))
        );
    }
    if ((params["new_dims"] ?? null) !== null) {
        cargs.push(
            "-new_dims",
            ...(params["new_dims"] ?? null).map(String)
        );
    }
    cargs.push(
        "-write_gifti",
        (params["write_gifti"] ?? null)
    );
    if ((params["set_extern_filelist"] ?? null) !== null) {
        cargs.push(
            "-set_extern_filelist",
            ...(params["set_extern_filelist"] ?? null)
        );
    }
    if ((params["mod_add_data"] ?? null)) {
        cargs.push("-mod_add_data");
    }
    if ((params["verb"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb"] ?? null))
        );
    }
    if ((params["show_gifti"] ?? null)) {
        cargs.push("-show_gifti");
    }
    if ((params["read_das"] ?? null) !== null) {
        cargs.push(
            "-read_DAs",
            ...(params["read_das"] ?? null).map(String)
        );
    }
    if ((params["mod_gim_atr"] ?? null) !== null) {
        cargs.push(
            "-mod_gim_atr",
            ...(params["mod_gim_atr"] ?? null)
        );
    }
    if ((params["mod_gim_meta"] ?? null) !== null) {
        cargs.push(
            "-mod_gim_meta",
            ...(params["mod_gim_meta"] ?? null)
        );
    }
    if ((params["mod_da_atr"] ?? null) !== null) {
        cargs.push(
            "-mod_DA_atr",
            ...(params["mod_da_atr"] ?? null)
        );
    }
    if ((params["mod_da_meta"] ?? null) !== null) {
        cargs.push(
            "-mod_DA_meta",
            ...(params["mod_da_meta"] ?? null)
        );
    }
    if ((params["mod_das"] ?? null) !== null) {
        cargs.push(
            "-mod_DAs",
            ...(params["mod_das"] ?? null).map(String)
        );
    }
    if ((params["new_dset"] ?? null)) {
        cargs.push("-new_dset");
    }
    if ((params["compare_gifti"] ?? null)) {
        cargs.push("-compare_gifti");
    }
    if ((params["compare_data"] ?? null)) {
        cargs.push("-compare_data");
    }
    if ((params["compare_verb"] ?? null) !== null) {
        cargs.push(
            "-compare_verb",
            String((params["compare_verb"] ?? null))
        );
    }
    if ((params["approx_gifti"] ?? null)) {
        cargs.push("-approx_gifti");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gifti_tool_outputs(
    params: GiftiToolParameters,
    execution: Execution,
): GiftiToolOutputs {
    const ret: GiftiToolOutputs = {
        root: execution.outputFile("."),
        output_gifti: execution.outputFile([(params["write_gifti"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Tool for creating, displaying, modifying, or comparing GIFTI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `GiftiToolOutputs`).
 */
function gifti_tool_execute(
    params: GiftiToolParameters,
    execution: Execution,
): GiftiToolOutputs {
    params = execution.params(params)
    const cargs = gifti_tool_cargs(params, execution)
    const ret = gifti_tool_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for creating, displaying, modifying, or comparing GIFTI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Specify one or more GIFTI datasets as input
 * @param write_gifti Write out dataset as gifti image
 * @param new_numda New dataset will have NUMDA DataArray elements
 * @param new_dtype Set data type to TYPE
 * @param new_intent DA elements will have intent INTENT
 * @param new_ndim Set Dimensionality to NUMDIMS
 * @param new_dims Set dims[] to these 6 values
 * @param set_extern_filelist Store data in external files
 * @param mod_add_data Add data to empty DataArray elements
 * @param verb Set verbose level
 * @param show_gifti Show final gifti image
 * @param read_das Read DataArray list indices
 * @param mod_gim_atr Set the GIFTI NAME=VALUE attribute pair at GIFTI level
 * @param mod_gim_meta Add this pair to the GIFTI MetaData
 * @param mod_da_atr Set the DataArray NAME=VALUE attribute pair
 * @param mod_da_meta Set the DataArray NAME=VALUE pair in DA's MetaData
 * @param mod_das Specify the set of DataArrays to modify
 * @param new_dset Create a new GIFTI dataset
 * @param compare_gifti Compare two GIFTI datasets
 * @param compare_data Flag to request comparison of the data
 * @param compare_verb Set the verbose level of comparisons
 * @param approx_gifti Approximate comparison of GIFTI datasets
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GiftiToolOutputs`).
 */
function gifti_tool(
    infile: InputPathType,
    write_gifti: string,
    new_numda: number | null = null,
    new_dtype: string | null = null,
    new_intent: string | null = null,
    new_ndim: number | null = null,
    new_dims: Array<number> | null = null,
    set_extern_filelist: Array<string> | null = null,
    mod_add_data: boolean = false,
    verb: number | null = null,
    show_gifti: boolean = false,
    read_das: Array<number> | null = null,
    mod_gim_atr: Array<string> | null = null,
    mod_gim_meta: Array<string> | null = null,
    mod_da_atr: Array<string> | null = null,
    mod_da_meta: Array<string> | null = null,
    mod_das: Array<number> | null = null,
    new_dset: boolean = false,
    compare_gifti: boolean = false,
    compare_data: boolean = false,
    compare_verb: number | null = null,
    approx_gifti: boolean = false,
    runner: Runner | null = null,
): GiftiToolOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GIFTI_TOOL_METADATA);
    const params = gifti_tool_params(infile, write_gifti, new_numda, new_dtype, new_intent, new_ndim, new_dims, set_extern_filelist, mod_add_data, verb, show_gifti, read_das, mod_gim_atr, mod_gim_meta, mod_da_atr, mod_da_meta, mod_das, new_dset, compare_gifti, compare_data, compare_verb, approx_gifti)
    return gifti_tool_execute(params, execution);
}


export {
      GIFTI_TOOL_METADATA,
      GiftiToolOutputs,
      GiftiToolParameters,
      gifti_tool,
      gifti_tool_cargs,
      gifti_tool_execute,
      gifti_tool_outputs,
      gifti_tool_params,
};
