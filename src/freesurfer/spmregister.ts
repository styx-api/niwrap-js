// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPMREGISTER_METADATA: Metadata = {
    id: "f037d545faca30a5ba9e5094c01f167e854b4f1f.boutiques",
    name: "spmregister",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SpmregisterParameters {
    "@type": "freesurfer.spmregister";
    "subjid": string;
    "mov": string;
    "reg": string;
    "frame"?: number | null | undefined;
    "mid_frame": boolean;
    "template_out"?: string | null | undefined;
    "fsvol"?: string | null | undefined;
    "force_ras": boolean;
    "outvol"?: string | null | undefined;
    "tmpdir"?: string | null | undefined;
    "nocleanup": boolean;
    "version": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.spmregister": spmregister_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.spmregister": spmregister_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `spmregister(...)`.
 *
 * @interface
 */
interface SpmregisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registration file.
     */
    registration_file: OutputPathType;
    /**
     * Resampled mov volume.
     */
    resampled_mov: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subjid Id of the subject as found in SUBJECTS_DIR. This is converted to analyze using mri_convert.
 * @param mov Volume identifier of the movable volume. Must be specified in a way suitable for mri_convert.
 * @param reg Output registration file. Maps RAS in the reference to RAS in the movable.
 * @param frame Use something other than the first frame. Specify the frame number you want.
 * @param mid_frame Use the middle frame of the mov volume as the template.
 * @param template_out Save the mov template when template is something other than the first frame.
 * @param fsvol Use FreeSurfer volid (default brainmask).
 * @param force_ras Force input geometry to be RAS.
 * @param outvol Resample mov and save as outvol.
 * @param tmpdir Temporary directory (implies --nocleanup).
 * @param nocleanup Do not delete temporary files.
 * @param version Print version and exit.
 * @param help Print help and exit.
 *
 * @returns Parameter dictionary
 */
function spmregister_params(
    subjid: string,
    mov: string,
    reg: string,
    frame: number | null = null,
    mid_frame: boolean = false,
    template_out: string | null = null,
    fsvol: string | null = null,
    force_ras: boolean = false,
    outvol: string | null = null,
    tmpdir: string | null = null,
    nocleanup: boolean = false,
    version: boolean = false,
    help: boolean = false,
): SpmregisterParameters {
    const params = {
        "@type": "freesurfer.spmregister" as const,
        "subjid": subjid,
        "mov": mov,
        "reg": reg,
        "mid_frame": mid_frame,
        "force_ras": force_ras,
        "nocleanup": nocleanup,
        "version": version,
        "help": help,
    };
    if (frame !== null) {
        params["frame"] = frame;
    }
    if (template_out !== null) {
        params["template_out"] = template_out;
    }
    if (fsvol !== null) {
        params["fsvol"] = fsvol;
    }
    if (outvol !== null) {
        params["outvol"] = outvol;
    }
    if (tmpdir !== null) {
        params["tmpdir"] = tmpdir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function spmregister_cargs(
    params: SpmregisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("spmregister");
    cargs.push(
        "--s",
        (params["subjid"] ?? null)
    );
    cargs.push(
        "--mov",
        (params["mov"] ?? null)
    );
    cargs.push(
        "--reg",
        (params["reg"] ?? null)
    );
    if ((params["frame"] ?? null) !== null) {
        cargs.push(
            "--frame",
            String((params["frame"] ?? null))
        );
    }
    if ((params["mid_frame"] ?? null)) {
        cargs.push("--mid-frame");
    }
    if ((params["template_out"] ?? null) !== null) {
        cargs.push(
            "--template-out",
            (params["template_out"] ?? null)
        );
    }
    if ((params["fsvol"] ?? null) !== null) {
        cargs.push(
            "--fsvol",
            (params["fsvol"] ?? null)
        );
    }
    if ((params["force_ras"] ?? null)) {
        cargs.push("--force-ras");
    }
    if ((params["outvol"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["outvol"] ?? null)
        );
    }
    if ((params["tmpdir"] ?? null) !== null) {
        cargs.push(
            "--tmp",
            (params["tmpdir"] ?? null)
        );
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("--nocleanup");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function spmregister_outputs(
    params: SpmregisterParameters,
    execution: Execution,
): SpmregisterOutputs {
    const ret: SpmregisterOutputs = {
        root: execution.outputFile("."),
        registration_file: execution.outputFile(["register.dat"].join('')),
        resampled_mov: ((params["outvol"] ?? null) !== null) ? execution.outputFile([(params["outvol"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * spmregister
 *
 * Registers a volume to its FreeSurfer anatomical using SPM's spm_coreg.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpmregisterOutputs`).
 */
function spmregister_execute(
    params: SpmregisterParameters,
    runner: Runner | null = null,
): SpmregisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPMREGISTER_METADATA);
    params = execution.params(params)
    const cargs = spmregister_cargs(params, execution)
    const ret = spmregister_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * spmregister
 *
 * Registers a volume to its FreeSurfer anatomical using SPM's spm_coreg.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjid Id of the subject as found in SUBJECTS_DIR. This is converted to analyze using mri_convert.
 * @param mov Volume identifier of the movable volume. Must be specified in a way suitable for mri_convert.
 * @param reg Output registration file. Maps RAS in the reference to RAS in the movable.
 * @param frame Use something other than the first frame. Specify the frame number you want.
 * @param mid_frame Use the middle frame of the mov volume as the template.
 * @param template_out Save the mov template when template is something other than the first frame.
 * @param fsvol Use FreeSurfer volid (default brainmask).
 * @param force_ras Force input geometry to be RAS.
 * @param outvol Resample mov and save as outvol.
 * @param tmpdir Temporary directory (implies --nocleanup).
 * @param nocleanup Do not delete temporary files.
 * @param version Print version and exit.
 * @param help Print help and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpmregisterOutputs`).
 */
function spmregister(
    subjid: string,
    mov: string,
    reg: string,
    frame: number | null = null,
    mid_frame: boolean = false,
    template_out: string | null = null,
    fsvol: string | null = null,
    force_ras: boolean = false,
    outvol: string | null = null,
    tmpdir: string | null = null,
    nocleanup: boolean = false,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): SpmregisterOutputs {
    const params = spmregister_params(subjid, mov, reg, frame, mid_frame, template_out, fsvol, force_ras, outvol, tmpdir, nocleanup, version, help)
    return spmregister_execute(params, runner);
}


export {
      SPMREGISTER_METADATA,
      SpmregisterOutputs,
      SpmregisterParameters,
      spmregister,
      spmregister_execute,
      spmregister_params,
};
