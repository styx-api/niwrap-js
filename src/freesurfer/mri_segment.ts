// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SEGMENT_METADATA: Metadata = {
    id: "f41de059f458818385b45292668ea1082f58a5a6.boutiques",
    name: "mri_segment",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSegmentParameters {
    "@type": "freesurfer.mri_segment";
    "in_vol": InputPathType;
    "out_vol": string;
    "no1d_remove"?: number | null | undefined;
    "slope"?: number | null | undefined;
    "pslope"?: number | null | undefined;
    "nslope"?: number | null | undefined;
    "debug_voxel"?: Array<number> | null | undefined;
    "auto": boolean;
    "noauto": boolean;
    "log": boolean;
    "keep": boolean;
    "gray_hi"?: number | null | undefined;
    "wm_low"?: number | null | undefined;
    "wm_low_factor"?: number | null | undefined;
    "wm_hi"?: number | null | undefined;
    "nseg"?: number | null | undefined;
    "thicken": boolean;
    "fillbg": boolean;
    "fillv": boolean;
    "blur_sigma"?: number | null | undefined;
    "iterations"?: number | null | undefined;
    "thin_strand_limit"?: number | null | undefined;
    "verbose": boolean;
    "threshold"?: number | null | undefined;
    "extract_options"?: InputPathType | null | undefined;
    "wsize"?: number | null | undefined;
    "wsizemm"?: number | null | undefined;
    "polvw_size"?: number | null | undefined;
    "polv_len"?: number | null | undefined;
    "datfile"?: InputPathType | null | undefined;
    "segmentation"?: string | null | undefined;
    "diagno"?: number | null | undefined;
    "diag_write": boolean;
    "diag_verbose": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_segment": mri_segment_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_segment": mri_segment_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_segment(...)`.
 *
 * @interface
 */
interface MriSegmentOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmented white matter output volume
     */
    output_volume: OutputPathType;
    /**
     * Log file from segmentation process
     */
    log_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_vol Input volume to be segmented
 * @param out_vol Output volume after segmentation
 * @param no1d_remove Don't run code that removes 1D strands from segmentation
 * @param slope Set the curvature slope (both n and p)
 * @param pslope Set the curvature pslope (default=1.0)
 * @param nslope Set the curvature nslope (default=1.0)
 * @param debug_voxel Set voxel for debugging
 * @param auto Automatically detect class statistics (default)
 * @param noauto Don't automatically detect class statistics
 * @param log Log to ./segment.dat
 * @param keep Keep wm edits, maintains all values of 1 and 255
 * @param gray_hi Set the gray matter high limit (default=100.000)
 * @param wm_low Set the white matter low limit (default=80.000)
 * @param wm_low_factor wm_low = f*gray_mean + (1-f)*white_mean;
 * @param wm_hi Set the white matter high limit (default=125.000)
 * @param nseg Thicken the n largest thin strands (default=20)
 * @param thicken Toggle thickening step (default=ON)
 * @param fillbg Toggle filling of the basal ganglia (default=OFF)
 * @param fillv Toggle filling of the ventricles (default=OFF)
 * @param blur_sigma Set blur sigma (default=0.25)
 * @param iterations Set # iterations of border classification (default=1)
 * @param thin_strand_limit Set limit to thin strands in mm (default=4)
 * @param verbose Verbose
 * @param threshold Set % threshold (default=0.80)
 * @param extract_options Extract options from filename
 * @param wsize Set wsize (default=11 voxels)
 * @param wsizemm Set wsize based on mm instead of voxels
 * @param polvw_size Set wsize for plane of least variance (default=5)
 * @param polv_len Set length for plane of least variance (default=3)
 * @param datfile Set datfile (default is segment.dat)
 * @param segmentation Use segmentation to set thresholds
 * @param diagno Set diagnostic number
 * @param diag_write Set diagnostic write
 * @param diag_verbose Set diagnostic verbose
 *
 * @returns Parameter dictionary
 */
function mri_segment_params(
    in_vol: InputPathType,
    out_vol: string,
    no1d_remove: number | null = null,
    slope: number | null = null,
    pslope: number | null = null,
    nslope: number | null = null,
    debug_voxel: Array<number> | null = null,
    auto: boolean = false,
    noauto: boolean = false,
    log: boolean = false,
    keep: boolean = false,
    gray_hi: number | null = null,
    wm_low: number | null = null,
    wm_low_factor: number | null = null,
    wm_hi: number | null = null,
    nseg: number | null = null,
    thicken: boolean = false,
    fillbg: boolean = false,
    fillv: boolean = false,
    blur_sigma: number | null = null,
    iterations: number | null = null,
    thin_strand_limit: number | null = null,
    verbose: boolean = false,
    threshold: number | null = null,
    extract_options: InputPathType | null = null,
    wsize: number | null = null,
    wsizemm: number | null = null,
    polvw_size: number | null = null,
    polv_len: number | null = null,
    datfile: InputPathType | null = null,
    segmentation: string | null = null,
    diagno: number | null = null,
    diag_write: boolean = false,
    diag_verbose: boolean = false,
): MriSegmentParameters {
    const params = {
        "@type": "freesurfer.mri_segment" as const,
        "in_vol": in_vol,
        "out_vol": out_vol,
        "auto": auto,
        "noauto": noauto,
        "log": log,
        "keep": keep,
        "thicken": thicken,
        "fillbg": fillbg,
        "fillv": fillv,
        "verbose": verbose,
        "diag_write": diag_write,
        "diag_verbose": diag_verbose,
    };
    if (no1d_remove !== null) {
        params["no1d_remove"] = no1d_remove;
    }
    if (slope !== null) {
        params["slope"] = slope;
    }
    if (pslope !== null) {
        params["pslope"] = pslope;
    }
    if (nslope !== null) {
        params["nslope"] = nslope;
    }
    if (debug_voxel !== null) {
        params["debug_voxel"] = debug_voxel;
    }
    if (gray_hi !== null) {
        params["gray_hi"] = gray_hi;
    }
    if (wm_low !== null) {
        params["wm_low"] = wm_low;
    }
    if (wm_low_factor !== null) {
        params["wm_low_factor"] = wm_low_factor;
    }
    if (wm_hi !== null) {
        params["wm_hi"] = wm_hi;
    }
    if (nseg !== null) {
        params["nseg"] = nseg;
    }
    if (blur_sigma !== null) {
        params["blur_sigma"] = blur_sigma;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (thin_strand_limit !== null) {
        params["thin_strand_limit"] = thin_strand_limit;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (extract_options !== null) {
        params["extract_options"] = extract_options;
    }
    if (wsize !== null) {
        params["wsize"] = wsize;
    }
    if (wsizemm !== null) {
        params["wsizemm"] = wsizemm;
    }
    if (polvw_size !== null) {
        params["polvw_size"] = polvw_size;
    }
    if (polv_len !== null) {
        params["polv_len"] = polv_len;
    }
    if (datfile !== null) {
        params["datfile"] = datfile;
    }
    if (segmentation !== null) {
        params["segmentation"] = segmentation;
    }
    if (diagno !== null) {
        params["diagno"] = diagno;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_segment_cargs(
    params: MriSegmentParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_segment");
    cargs.push(execution.inputFile((params["in_vol"] ?? null)));
    cargs.push((params["out_vol"] ?? null));
    if ((params["no1d_remove"] ?? null) !== null) {
        cargs.push(
            "-no1d_remove",
            String((params["no1d_remove"] ?? null))
        );
    }
    if ((params["slope"] ?? null) !== null) {
        cargs.push(
            "-slope",
            String((params["slope"] ?? null))
        );
    }
    if ((params["pslope"] ?? null) !== null) {
        cargs.push(
            "-pslope",
            String((params["pslope"] ?? null))
        );
    }
    if ((params["nslope"] ?? null) !== null) {
        cargs.push(
            "-nslope",
            String((params["nslope"] ?? null))
        );
    }
    if ((params["debug_voxel"] ?? null) !== null) {
        cargs.push(
            "-debug_voxel",
            ...(params["debug_voxel"] ?? null).map(String)
        );
    }
    if ((params["auto"] ?? null)) {
        cargs.push("-auto");
    }
    if ((params["noauto"] ?? null)) {
        cargs.push("-noauto");
    }
    if ((params["log"] ?? null)) {
        cargs.push("-log");
    }
    if ((params["keep"] ?? null)) {
        cargs.push("-keep");
    }
    if ((params["gray_hi"] ?? null) !== null) {
        cargs.push(
            "-ghi",
            String((params["gray_hi"] ?? null))
        );
    }
    if ((params["wm_low"] ?? null) !== null) {
        cargs.push(
            "-wlo",
            String((params["wm_low"] ?? null))
        );
    }
    if ((params["wm_low_factor"] ?? null) !== null) {
        cargs.push(
            "-wm_low_factor",
            String((params["wm_low_factor"] ?? null))
        );
    }
    if ((params["wm_hi"] ?? null) !== null) {
        cargs.push(
            "-whi",
            String((params["wm_hi"] ?? null))
        );
    }
    if ((params["nseg"] ?? null) !== null) {
        cargs.push(
            "-nseg",
            String((params["nseg"] ?? null))
        );
    }
    if ((params["thicken"] ?? null)) {
        cargs.push("-thicken");
    }
    if ((params["fillbg"] ?? null)) {
        cargs.push("-fillbg");
    }
    if ((params["fillv"] ?? null)) {
        cargs.push("-fillv");
    }
    if ((params["blur_sigma"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["blur_sigma"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["thin_strand_limit"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["thin_strand_limit"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["extract_options"] ?? null) !== null) {
        cargs.push(
            "-x",
            execution.inputFile((params["extract_options"] ?? null))
        );
    }
    if ((params["wsize"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["wsize"] ?? null))
        );
    }
    if ((params["wsizemm"] ?? null) !== null) {
        cargs.push(
            "-wsizemm",
            String((params["wsizemm"] ?? null))
        );
    }
    if ((params["polvw_size"] ?? null) !== null) {
        cargs.push(
            "-polvwsize",
            String((params["polvw_size"] ?? null))
        );
    }
    if ((params["polv_len"] ?? null) !== null) {
        cargs.push(
            "-polvlen",
            String((params["polv_len"] ?? null))
        );
    }
    if ((params["datfile"] ?? null) !== null) {
        cargs.push(
            "-dat",
            execution.inputFile((params["datfile"] ?? null))
        );
    }
    if ((params["segmentation"] ?? null) !== null) {
        cargs.push(
            "-seg",
            (params["segmentation"] ?? null)
        );
    }
    if ((params["diagno"] ?? null) !== null) {
        cargs.push(
            "-diagno",
            String((params["diagno"] ?? null))
        );
    }
    if ((params["diag_write"] ?? null)) {
        cargs.push("-diag-write");
    }
    if ((params["diag_verbose"] ?? null)) {
        cargs.push("-diag-verbose");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_segment_outputs(
    params: MriSegmentParameters,
    execution: Execution,
): MriSegmentOutputs {
    const ret: MriSegmentOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile([(params["out_vol"] ?? null)].join('')),
        log_file: execution.outputFile(["./segment.dat"].join('')),
    };
    return ret;
}


/**
 * mri_segment
 *
 * Segments white matter from the input volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegmentOutputs`).
 */
function mri_segment_execute(
    params: MriSegmentParameters,
    runner: Runner | null = null,
): MriSegmentOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SEGMENT_METADATA);
    params = execution.params(params)
    const cargs = mri_segment_cargs(params, execution)
    const ret = mri_segment_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_segment
 *
 * Segments white matter from the input volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param in_vol Input volume to be segmented
 * @param out_vol Output volume after segmentation
 * @param no1d_remove Don't run code that removes 1D strands from segmentation
 * @param slope Set the curvature slope (both n and p)
 * @param pslope Set the curvature pslope (default=1.0)
 * @param nslope Set the curvature nslope (default=1.0)
 * @param debug_voxel Set voxel for debugging
 * @param auto Automatically detect class statistics (default)
 * @param noauto Don't automatically detect class statistics
 * @param log Log to ./segment.dat
 * @param keep Keep wm edits, maintains all values of 1 and 255
 * @param gray_hi Set the gray matter high limit (default=100.000)
 * @param wm_low Set the white matter low limit (default=80.000)
 * @param wm_low_factor wm_low = f*gray_mean + (1-f)*white_mean;
 * @param wm_hi Set the white matter high limit (default=125.000)
 * @param nseg Thicken the n largest thin strands (default=20)
 * @param thicken Toggle thickening step (default=ON)
 * @param fillbg Toggle filling of the basal ganglia (default=OFF)
 * @param fillv Toggle filling of the ventricles (default=OFF)
 * @param blur_sigma Set blur sigma (default=0.25)
 * @param iterations Set # iterations of border classification (default=1)
 * @param thin_strand_limit Set limit to thin strands in mm (default=4)
 * @param verbose Verbose
 * @param threshold Set % threshold (default=0.80)
 * @param extract_options Extract options from filename
 * @param wsize Set wsize (default=11 voxels)
 * @param wsizemm Set wsize based on mm instead of voxels
 * @param polvw_size Set wsize for plane of least variance (default=5)
 * @param polv_len Set length for plane of least variance (default=3)
 * @param datfile Set datfile (default is segment.dat)
 * @param segmentation Use segmentation to set thresholds
 * @param diagno Set diagnostic number
 * @param diag_write Set diagnostic write
 * @param diag_verbose Set diagnostic verbose
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegmentOutputs`).
 */
function mri_segment(
    in_vol: InputPathType,
    out_vol: string,
    no1d_remove: number | null = null,
    slope: number | null = null,
    pslope: number | null = null,
    nslope: number | null = null,
    debug_voxel: Array<number> | null = null,
    auto: boolean = false,
    noauto: boolean = false,
    log: boolean = false,
    keep: boolean = false,
    gray_hi: number | null = null,
    wm_low: number | null = null,
    wm_low_factor: number | null = null,
    wm_hi: number | null = null,
    nseg: number | null = null,
    thicken: boolean = false,
    fillbg: boolean = false,
    fillv: boolean = false,
    blur_sigma: number | null = null,
    iterations: number | null = null,
    thin_strand_limit: number | null = null,
    verbose: boolean = false,
    threshold: number | null = null,
    extract_options: InputPathType | null = null,
    wsize: number | null = null,
    wsizemm: number | null = null,
    polvw_size: number | null = null,
    polv_len: number | null = null,
    datfile: InputPathType | null = null,
    segmentation: string | null = null,
    diagno: number | null = null,
    diag_write: boolean = false,
    diag_verbose: boolean = false,
    runner: Runner | null = null,
): MriSegmentOutputs {
    const params = mri_segment_params(in_vol, out_vol, no1d_remove, slope, pslope, nslope, debug_voxel, auto, noauto, log, keep, gray_hi, wm_low, wm_low_factor, wm_hi, nseg, thicken, fillbg, fillv, blur_sigma, iterations, thin_strand_limit, verbose, threshold, extract_options, wsize, wsizemm, polvw_size, polv_len, datfile, segmentation, diagno, diag_write, diag_verbose)
    return mri_segment_execute(params, runner);
}


export {
      MRI_SEGMENT_METADATA,
      MriSegmentOutputs,
      MriSegmentParameters,
      mri_segment,
      mri_segment_execute,
      mri_segment_params,
};
