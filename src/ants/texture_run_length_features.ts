// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TEXTURE_RUN_LENGTH_FEATURES_METADATA: Metadata = {
    id: "bea2e1f273411c3a732dce2d0c932046b8f8f464.boutiques",
    name: "TextureRunLengthFeatures",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface TextureRunLengthFeaturesParameters {
    "@type": "ants.TextureRunLengthFeatures";
    "image_dimension": number;
    "input_image": InputPathType;
    "number_of_bins_per_axis"?: number | null | undefined;
    "mask_image"?: InputPathType | null | undefined;
    "mask_label"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.TextureRunLengthFeatures": texture_run_length_features_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.TextureRunLengthFeatures": texture_run_length_features_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `texture_run_length_features(...)`.
 *
 * @interface
 */
interface TextureRunLengthFeaturesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output feature: Short Run Emphasis.
     */
    short_run_emphasis: OutputPathType;
    /**
     * Output feature: Long Run Emphasis.
     */
    long_run_emphasis: OutputPathType;
    /**
     * Output feature: Grey Level Nonuniformity.
     */
    grey_level_nonuniformity: OutputPathType;
    /**
     * Output feature: Run Length Nonuniformity.
     */
    run_length_nonuniformity: OutputPathType;
    /**
     * Output feature: Low Grey Level Run Emphasis.
     */
    low_grey_level_run_emphasis: OutputPathType;
    /**
     * Output feature: High Grey Level Run Emphasis.
     */
    high_grey_level_run_emphasis: OutputPathType;
    /**
     * Output feature: Short Run Low Grey Level Emphasis.
     */
    short_run_low_grey_level_emphasis: OutputPathType;
    /**
     * Output feature: Short Run High Grey Level Emphasis.
     */
    short_run_high_grey_level_emphasis: OutputPathType;
    /**
     * Output feature: Long Run Low Grey Level Emphasis.
     */
    long_run_low_grey_level_emphasis: OutputPathType;
    /**
     * Output feature: Long Run High Grey Level Emphasis.
     */
    long_run_high_grey_level_emphasis: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimensionality of the input image.
 * @param input_image The path to the input image file.
 * @param number_of_bins_per_axis The number of bins per axis for the histogram.
 * @param mask_image The path to the mask image file.
 * @param mask_label The label value in the mask image to be used.
 *
 * @returns Parameter dictionary
 */
function texture_run_length_features_params(
    image_dimension: number,
    input_image: InputPathType,
    number_of_bins_per_axis: number | null = null,
    mask_image: InputPathType | null = null,
    mask_label: number | null = null,
): TextureRunLengthFeaturesParameters {
    const params = {
        "@type": "ants.TextureRunLengthFeatures" as const,
        "image_dimension": image_dimension,
        "input_image": input_image,
    };
    if (number_of_bins_per_axis !== null) {
        params["number_of_bins_per_axis"] = number_of_bins_per_axis;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    if (mask_label !== null) {
        params["mask_label"] = mask_label;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function texture_run_length_features_cargs(
    params: TextureRunLengthFeaturesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("TextureRunLengthFeatures");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    if ((params["number_of_bins_per_axis"] ?? null) !== null) {
        cargs.push(String((params["number_of_bins_per_axis"] ?? null)));
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask_image"] ?? null)));
    }
    if ((params["mask_label"] ?? null) !== null) {
        cargs.push(String((params["mask_label"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function texture_run_length_features_outputs(
    params: TextureRunLengthFeaturesParameters,
    execution: Execution,
): TextureRunLengthFeaturesOutputs {
    const ret: TextureRunLengthFeaturesOutputs = {
        root: execution.outputFile("."),
        short_run_emphasis: execution.outputFile(["short_run_emphasis.csv"].join('')),
        long_run_emphasis: execution.outputFile(["long_run_emphasis.csv"].join('')),
        grey_level_nonuniformity: execution.outputFile(["grey_level_nonuniformity.csv"].join('')),
        run_length_nonuniformity: execution.outputFile(["run_length_nonuniformity.csv"].join('')),
        low_grey_level_run_emphasis: execution.outputFile(["low_grey_level_run_emphasis.csv"].join('')),
        high_grey_level_run_emphasis: execution.outputFile(["high_grey_level_run_emphasis.csv"].join('')),
        short_run_low_grey_level_emphasis: execution.outputFile(["short_run_low_grey_level_emphasis.csv"].join('')),
        short_run_high_grey_level_emphasis: execution.outputFile(["short_run_high_grey_level_emphasis.csv"].join('')),
        long_run_low_grey_level_emphasis: execution.outputFile(["long_run_low_grey_level_emphasis.csv"].join('')),
        long_run_high_grey_level_emphasis: execution.outputFile(["long_run_high_grey_level_emphasis.csv"].join('')),
    };
    return ret;
}


/**
 * TextureRunLengthFeatures
 *
 * A tool to calculate texture run length features on an input image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TextureRunLengthFeaturesOutputs`).
 */
function texture_run_length_features_execute(
    params: TextureRunLengthFeaturesParameters,
    runner: Runner | null = null,
): TextureRunLengthFeaturesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TEXTURE_RUN_LENGTH_FEATURES_METADATA);
    params = execution.params(params)
    const cargs = texture_run_length_features_cargs(params, execution)
    const ret = texture_run_length_features_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * TextureRunLengthFeatures
 *
 * A tool to calculate texture run length features on an input image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimensionality of the input image.
 * @param input_image The path to the input image file.
 * @param number_of_bins_per_axis The number of bins per axis for the histogram.
 * @param mask_image The path to the mask image file.
 * @param mask_label The label value in the mask image to be used.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TextureRunLengthFeaturesOutputs`).
 */
function texture_run_length_features(
    image_dimension: number,
    input_image: InputPathType,
    number_of_bins_per_axis: number | null = null,
    mask_image: InputPathType | null = null,
    mask_label: number | null = null,
    runner: Runner | null = null,
): TextureRunLengthFeaturesOutputs {
    const params = texture_run_length_features_params(image_dimension, input_image, number_of_bins_per_axis, mask_image, mask_label)
    return texture_run_length_features_execute(params, runner);
}


export {
      TEXTURE_RUN_LENGTH_FEATURES_METADATA,
      TextureRunLengthFeaturesOutputs,
      TextureRunLengthFeaturesParameters,
      texture_run_length_features,
      texture_run_length_features_execute,
      texture_run_length_features_params,
};
