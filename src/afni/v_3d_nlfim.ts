// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NLFIM_METADATA: Metadata = {
    id: "b2553c2bf57346747079630757e1d16620ea8119.boutiques",
    name: "3dNLfim",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNlfimParameters {
    "__STYXTYPE__": "3dNLfim";
    "input_file": InputPathType;
    "signal_model": string;
    "noise_model": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dNLfim": v_3d_nlfim_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dNLfim": v_3d_nlfim_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_nlfim(...)`.
 *
 * @interface
 */
interface V3dNlfimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * F-test for significance of the regression
     */
    freg_outfile: OutputPathType;
    /**
     * R^2 calculation for regression
     */
    frsqr_outfile: OutputPathType;
    /**
     * Signed maximum signal estimate
     */
    fsmax_outfile: OutputPathType;
    /**
     * Time of signed maximum estimate
     */
    ftmax_outfile: OutputPathType;
    /**
     * Maximum percentage change estimate
     */
    fpsmax_outfile: OutputPathType;
    /**
     * Area between signal and baseline
     */
    farea_outfile: OutputPathType;
    /**
     * Percentage area of signal estimate
     */
    fparea_outfile: OutputPathType;
    /**
     * Signal parameter estimate
     */
    fscoef_outfile: OutputPathType;
    /**
     * Noise parameter estimate
     */
    fncoef_outfile: OutputPathType;
    /**
     * T-test for significance of signal parameter
     */
    tscoef_outfile: OutputPathType;
    /**
     * T-test for significance of noise parameter
     */
    tncoef_outfile: OutputPathType;
    /**
     * AFNI 'bucket' dataset
     */
    bucket_outfile: OutputPathType;
    /**
     * Output 3d+time signal model fit
     */
    sfit_outfile: OutputPathType;
    /**
     * Output 3d+time signal+noise fit
     */
    snfit_outfile: OutputPathType;
}


function v_3d_nlfim_params(
    input_file: InputPathType,
    signal_model: string,
    noise_model: string,
): V3dNlfimParameters {
    /**
     * Build parameters.
    
     * @param input_file Filename of 3d+time data file for input
     * @param signal_model Name of the nonlinear signal model
     * @param noise_model Name of the linear noise model
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dNLfim" as const,
        "input_file": input_file,
        "signal_model": signal_model,
        "noise_model": noise_model,
    };
    return params;
}


function v_3d_nlfim_cargs(
    params: V3dNlfimParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dNLfim");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-signal",
        (params["signal_model"] ?? null)
    );
    cargs.push(
        "-noise",
        (params["noise_model"] ?? null)
    );
    cargs.push("[ADDITIONAL_OPTIONS]");
    return cargs;
}


function v_3d_nlfim_outputs(
    params: V3dNlfimParameters,
    execution: Execution,
): V3dNlfimOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dNlfimOutputs = {
        root: execution.outputFile("."),
        freg_outfile: execution.outputFile(["[FREG].fift"].join('')),
        frsqr_outfile: execution.outputFile(["[FRSQR].fift"].join('')),
        fsmax_outfile: execution.outputFile(["[FSMAX].fift"].join('')),
        ftmax_outfile: execution.outputFile(["[FTMAX].fift"].join('')),
        fpsmax_outfile: execution.outputFile(["[FPSMAX].fift"].join('')),
        farea_outfile: execution.outputFile(["[FAREA].fift"].join('')),
        fparea_outfile: execution.outputFile(["[FPAREA].fift"].join('')),
        fscoef_outfile: execution.outputFile(["[FSCOEF].fift"].join('')),
        fncoef_outfile: execution.outputFile(["[FNCOEF].fift"].join('')),
        tscoef_outfile: execution.outputFile(["[TSCOEF].fitt"].join('')),
        tncoef_outfile: execution.outputFile(["[TNCOEF].fitt"].join('')),
        bucket_outfile: execution.outputFile(["[BUCKET].bucket"].join('')),
        sfit_outfile: execution.outputFile(["[SFIT].sfit"].join('')),
        snfit_outfile: execution.outputFile(["[SNFIT].snfit"].join('')),
    };
    return ret;
}


function v_3d_nlfim_execute(
    params: V3dNlfimParameters,
    execution: Execution,
): V3dNlfimOutputs {
    /**
     * Nonlinear regression for each voxel of the input AFNI 3d+time data set.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dNlfimOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_nlfim_cargs(params, execution)
    const ret = v_3d_nlfim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_nlfim(
    input_file: InputPathType,
    signal_model: string,
    noise_model: string,
    runner: Runner | null = null,
): V3dNlfimOutputs {
    /**
     * Nonlinear regression for each voxel of the input AFNI 3d+time data set.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Filename of 3d+time data file for input
     * @param signal_model Name of the nonlinear signal model
     * @param noise_model Name of the linear noise model
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dNlfimOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NLFIM_METADATA);
    const params = v_3d_nlfim_params(input_file, signal_model, noise_model)
    return v_3d_nlfim_execute(params, execution);
}


export {
      V3dNlfimOutputs,
      V3dNlfimParameters,
      V_3D_NLFIM_METADATA,
      v_3d_nlfim,
      v_3d_nlfim_params,
};
