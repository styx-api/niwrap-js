// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_MOTION_METADATA: Metadata = {
    id: "cab0386753362d60558aa9f8bff96a94f4b5b4f2.boutiques",
    name: "dmri_motion",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriMotionParameters {
    "@type": "freesurfer.dmri_motion";
    "outfile": InputPathType;
    "outf"?: InputPathType | null | undefined;
    "mat"?: InputPathType | null | undefined;
    "dwi"?: Array<InputPathType> | null | undefined;
    "bval"?: Array<InputPathType> | null | undefined;
    "threshold"?: number | null | undefined;
    "diffusivity"?: number | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_motion": dmri_motion_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.dmri_motion": dmri_motion_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_motion(...)`.
 *
 * @interface
 */
interface DmriMotionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file of motion measures
     */
    motion_measures_out: OutputPathType;
    /**
     * Output frame-by-frame motion measures file
     */
    frame_by_frame_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param outfile Output text file of motion measures
 * @param outf Output text file of frame-by-frame motion measures
 * @param mat Input text file of volume-to-baseline affine transformations
 * @param dwi Input DWI scan(s), unprocessed
 * @param bval Input b-value table(s), one per scan
 * @param threshold Low-b image intensity threshold
 * @param diffusivity Nominal diffusivity
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 *
 * @returns Parameter dictionary
 */
function dmri_motion_params(
    outfile: InputPathType,
    outf: InputPathType | null = null,
    mat: InputPathType | null = null,
    dwi: Array<InputPathType> | null = null,
    bval: Array<InputPathType> | null = null,
    threshold: number | null = 100,
    diffusivity: number | null = 0.001,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
): DmriMotionParameters {
    const params = {
        "@type": "freesurfer.dmri_motion" as const,
        "outfile": outfile,
        "debug": debug,
        "checkopts": checkopts,
        "help": help,
        "version": version,
    };
    if (outf !== null) {
        params["outf"] = outf;
    }
    if (mat !== null) {
        params["mat"] = mat;
    }
    if (dwi !== null) {
        params["dwi"] = dwi;
    }
    if (bval !== null) {
        params["bval"] = bval;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (diffusivity !== null) {
        params["diffusivity"] = diffusivity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_motion_cargs(
    params: DmriMotionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_motion");
    cargs.push(
        "--out",
        execution.inputFile((params["outfile"] ?? null))
    );
    if ((params["outf"] ?? null) !== null) {
        cargs.push(
            "--outf",
            execution.inputFile((params["outf"] ?? null))
        );
    }
    if ((params["mat"] ?? null) !== null) {
        cargs.push(
            "--mat",
            execution.inputFile((params["mat"] ?? null))
        );
    }
    if ((params["dwi"] ?? null) !== null) {
        cargs.push(
            "--dwi",
            ...(params["dwi"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["bval"] ?? null) !== null) {
        cargs.push(
            "--bval",
            ...(params["bval"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--T",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["diffusivity"] ?? null) !== null) {
        cargs.push(
            "--D",
            String((params["diffusivity"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_motion_outputs(
    params: DmriMotionParameters,
    execution: Execution,
): DmriMotionOutputs {
    const ret: DmriMotionOutputs = {
        root: execution.outputFile("."),
        motion_measures_out: execution.outputFile([path.basename((params["outfile"] ?? null))].join('')),
        frame_by_frame_out: ((params["outf"] ?? null) !== null) ? execution.outputFile([path.basename((params["outf"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * A tool for calculating motion measures from DWI scans.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriMotionOutputs`).
 */
function dmri_motion_execute(
    params: DmriMotionParameters,
    runner: Runner | null = null,
): DmriMotionOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_MOTION_METADATA);
    params = execution.params(params)
    const cargs = dmri_motion_cargs(params, execution)
    const ret = dmri_motion_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for calculating motion measures from DWI scans.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param outfile Output text file of motion measures
 * @param outf Output text file of frame-by-frame motion measures
 * @param mat Input text file of volume-to-baseline affine transformations
 * @param dwi Input DWI scan(s), unprocessed
 * @param bval Input b-value table(s), one per scan
 * @param threshold Low-b image intensity threshold
 * @param diffusivity Nominal diffusivity
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriMotionOutputs`).
 */
function dmri_motion(
    outfile: InputPathType,
    outf: InputPathType | null = null,
    mat: InputPathType | null = null,
    dwi: Array<InputPathType> | null = null,
    bval: Array<InputPathType> | null = null,
    threshold: number | null = 100,
    diffusivity: number | null = 0.001,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DmriMotionOutputs {
    const params = dmri_motion_params(outfile, outf, mat, dwi, bval, threshold, diffusivity, debug, checkopts, help, version)
    return dmri_motion_execute(params, runner);
}


export {
      DMRI_MOTION_METADATA,
      DmriMotionOutputs,
      DmriMotionParameters,
      dmri_motion,
      dmri_motion_execute,
      dmri_motion_params,
};
