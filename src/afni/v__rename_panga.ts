// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__RENAME_PANGA_METADATA: Metadata = {
    id: "667fb48aeb92a9756a0ac4f7c1ba77ceb5554bab.boutiques",
    name: "@RenamePanga",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VRenamePangaParameters {
    "@type": "afni.@RenamePanga";
    "dir_number": string;
    "first_image_number": string;
    "num_slices": number;
    "num_reps": number;
    "output_root": string;
    "keep_prefix": boolean;
    "interactive": boolean;
    "outliers_check": boolean;
    "slice_pattern"?: string | null | undefined;
    "output_directory"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@RenamePanga": v__rename_panga_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@RenamePanga": v__rename_panga_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__rename_panga(...)`.
 *
 * @interface
 */
interface VRenamePangaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output file (HEAD)
     */
    head_file: OutputPathType | null;
    /**
     * Main output file (BRIK)
     */
    brik_file: OutputPathType | null;
    /**
     * Log file created in the current directory
     */
    log_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dir_number The directory number where the first image of the series is stored
 * @param first_image_number The number of the first image in the series
 * @param num_slices The number of slices making up the imaged volume
 * @param num_reps The number of samples in your time series
 * @param output_root The prefix for the output brick
 * @param keep_prefix Forces @RenamePanga to use the prefix you designate without modification
 * @param interactive Launches to3d in interactive mode. This allows you to double check the automated settings.
 * @param outliers_check Performs outliers check and writes the outliers to a .1D file placed in the output directory
 * @param slice_pattern Sets the slice acquisition pattern. The default option is alt+z.
 * @param output_directory Directory where the output (bricks and 1D files) will be stored. The default directory is ./afni
 *
 * @returns Parameter dictionary
 */
function v__rename_panga_params(
    dir_number: string,
    first_image_number: string,
    num_slices: number,
    num_reps: number,
    output_root: string,
    keep_prefix: boolean = false,
    interactive: boolean = false,
    outliers_check: boolean = false,
    slice_pattern: string | null = null,
    output_directory: string | null = null,
): VRenamePangaParameters {
    const params = {
        "@type": "afni.@RenamePanga" as const,
        "dir_number": dir_number,
        "first_image_number": first_image_number,
        "num_slices": num_slices,
        "num_reps": num_reps,
        "output_root": output_root,
        "keep_prefix": keep_prefix,
        "interactive": interactive,
        "outliers_check": outliers_check,
    };
    if (slice_pattern !== null) {
        params["slice_pattern"] = slice_pattern;
    }
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__rename_panga_cargs(
    params: VRenamePangaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@RenamePanga");
    cargs.push((params["dir_number"] ?? null));
    cargs.push((params["first_image_number"] ?? null));
    cargs.push(String((params["num_slices"] ?? null)));
    cargs.push(String((params["num_reps"] ?? null)));
    cargs.push((params["output_root"] ?? null));
    if ((params["keep_prefix"] ?? null)) {
        cargs.push("-kp");
    }
    if ((params["interactive"] ?? null)) {
        cargs.push("-i");
    }
    if ((params["outliers_check"] ?? null)) {
        cargs.push("-oc");
    }
    if ((params["slice_pattern"] ?? null) !== null) {
        cargs.push(
            "-sp",
            (params["slice_pattern"] ?? null)
        );
    }
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "-od",
            (params["output_directory"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__rename_panga_outputs(
    params: VRenamePangaParameters,
    execution: Execution,
): VRenamePangaOutputs {
    const ret: VRenamePangaOutputs = {
        root: execution.outputFile("."),
        head_file: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/", (params["output_root"] ?? null), "_r#.HEAD"].join('')) : null,
        brik_file: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/", (params["output_root"] ?? null), "_r#.BRIK"].join('')) : null,
        log_file: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/MAPLOG_Panga"].join('')) : null,
    };
    return ret;
}


/**
 * @RenamePanga
 *
 * Creates AFNI bricks from RealTime GE EPI series.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRenamePangaOutputs`).
 */
function v__rename_panga_execute(
    params: VRenamePangaParameters,
    runner: Runner | null = null,
): VRenamePangaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__RENAME_PANGA_METADATA);
    params = execution.params(params)
    const cargs = v__rename_panga_cargs(params, execution)
    const ret = v__rename_panga_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @RenamePanga
 *
 * Creates AFNI bricks from RealTime GE EPI series.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dir_number The directory number where the first image of the series is stored
 * @param first_image_number The number of the first image in the series
 * @param num_slices The number of slices making up the imaged volume
 * @param num_reps The number of samples in your time series
 * @param output_root The prefix for the output brick
 * @param keep_prefix Forces @RenamePanga to use the prefix you designate without modification
 * @param interactive Launches to3d in interactive mode. This allows you to double check the automated settings.
 * @param outliers_check Performs outliers check and writes the outliers to a .1D file placed in the output directory
 * @param slice_pattern Sets the slice acquisition pattern. The default option is alt+z.
 * @param output_directory Directory where the output (bricks and 1D files) will be stored. The default directory is ./afni
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRenamePangaOutputs`).
 */
function v__rename_panga(
    dir_number: string,
    first_image_number: string,
    num_slices: number,
    num_reps: number,
    output_root: string,
    keep_prefix: boolean = false,
    interactive: boolean = false,
    outliers_check: boolean = false,
    slice_pattern: string | null = null,
    output_directory: string | null = null,
    runner: Runner | null = null,
): VRenamePangaOutputs {
    const params = v__rename_panga_params(dir_number, first_image_number, num_slices, num_reps, output_root, keep_prefix, interactive, outliers_check, slice_pattern, output_directory)
    return v__rename_panga_execute(params, runner);
}


export {
      VRenamePangaOutputs,
      VRenamePangaParameters,
      V__RENAME_PANGA_METADATA,
      v__rename_panga,
      v__rename_panga_execute,
      v__rename_panga_params,
};
