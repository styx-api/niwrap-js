// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RUN_MESH_UTILS_METADATA: Metadata = {
    id: "e410da5885f083fe5314cfb519c1b58a6d2784bc.boutiques",
    name: "run_mesh_utils",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface RunMeshUtilsParameters {
    "@type": "fsl.run_mesh_utils";
    "base_mesh": InputPathType;
    "output_image": string;
    "input_image"?: InputPathType | null | undefined;
    "second_input_image"?: InputPathType | null | undefined;
    "weighting_image_force"?: InputPathType | null | undefined;
    "do_uncentre_model": boolean;
    "do_subtract_constant_from_scalars": boolean;
    "do_vertex_scalars_to_image_volume": boolean;
    "base_mesh2"?: InputPathType | null | undefined;
    "use_sc2": boolean;
    "flirt_matrix"?: InputPathType | null | undefined;
    "do_mesh_reg": boolean;
    "threshold"?: number | null | undefined;
    "degrees_of_freedom"?: number | null | undefined;
    "inverse": boolean;
    "verbose": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.run_mesh_utils": run_mesh_utils_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.run_mesh_utils": run_mesh_utils_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `run_mesh_utils(...)`.
 *
 * @interface
 */
interface RunMeshUtilsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file
     */
    output_image_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param base_mesh Filename of base mesh
 * @param output_image Filename of output image
 * @param input_image Filename of input image
 * @param second_input_image Filename of second input image
 * @param weighting_image_force Weighting image force
 * @param do_uncentre_model Do UnCentre Model
 * @param do_subtract_constant_from_scalars Do Subtract Constant From Scalars
 * @param do_vertex_scalars_to_image_volume Do Vertex Scalars To Image Volume
 * @param base_mesh2 Filename of base mesh2
 * @param use_sc2 Use SC2
 * @param flirt_matrix Filename of flirt matrix
 * @param do_mesh_reg Do Mesh Registration
 * @param threshold Threshold
 * @param degrees_of_freedom Degrees of freedom
 * @param inverse Inverse Operation
 * @param verbose Switch on diagnostic messages
 * @param help Display help message
 *
 * @returns Parameter dictionary
 */
function run_mesh_utils_params(
    base_mesh: InputPathType,
    output_image: string,
    input_image: InputPathType | null = null,
    second_input_image: InputPathType | null = null,
    weighting_image_force: InputPathType | null = null,
    do_uncentre_model: boolean = false,
    do_subtract_constant_from_scalars: boolean = false,
    do_vertex_scalars_to_image_volume: boolean = false,
    base_mesh2: InputPathType | null = null,
    use_sc2: boolean = false,
    flirt_matrix: InputPathType | null = null,
    do_mesh_reg: boolean = false,
    threshold: number | null = null,
    degrees_of_freedom: number | null = null,
    inverse: boolean = false,
    verbose: boolean = false,
    help: boolean = false,
): RunMeshUtilsParameters {
    const params = {
        "@type": "fsl.run_mesh_utils" as const,
        "base_mesh": base_mesh,
        "output_image": output_image,
        "do_uncentre_model": do_uncentre_model,
        "do_subtract_constant_from_scalars": do_subtract_constant_from_scalars,
        "do_vertex_scalars_to_image_volume": do_vertex_scalars_to_image_volume,
        "use_sc2": use_sc2,
        "do_mesh_reg": do_mesh_reg,
        "inverse": inverse,
        "verbose": verbose,
        "help": help,
    };
    if (input_image !== null) {
        params["input_image"] = input_image;
    }
    if (second_input_image !== null) {
        params["second_input_image"] = second_input_image;
    }
    if (weighting_image_force !== null) {
        params["weighting_image_force"] = weighting_image_force;
    }
    if (base_mesh2 !== null) {
        params["base_mesh2"] = base_mesh2;
    }
    if (flirt_matrix !== null) {
        params["flirt_matrix"] = flirt_matrix;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (degrees_of_freedom !== null) {
        params["degrees_of_freedom"] = degrees_of_freedom;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function run_mesh_utils_cargs(
    params: RunMeshUtilsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("run_mesh_utils");
    cargs.push(execution.inputFile((params["base_mesh"] ?? null)));
    cargs.push(
        "-o",
        (params["output_image"] ?? null)
    );
    if ((params["input_image"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["input_image"] ?? null))
        );
    }
    if ((params["second_input_image"] ?? null) !== null) {
        cargs.push(
            "-j",
            execution.inputFile((params["second_input_image"] ?? null))
        );
    }
    if ((params["weighting_image_force"] ?? null) !== null) {
        cargs.push(
            "-p",
            execution.inputFile((params["weighting_image_force"] ?? null))
        );
    }
    if ((params["do_uncentre_model"] ?? null)) {
        cargs.push("--doUnCentreModel");
    }
    if ((params["do_subtract_constant_from_scalars"] ?? null)) {
        cargs.push("--doSubtractConstantFromScalars");
    }
    if ((params["do_vertex_scalars_to_image_volume"] ?? null)) {
        cargs.push("--doVertexScalarsToImageVolume");
    }
    if ((params["base_mesh2"] ?? null) !== null) {
        cargs.push(
            "-n",
            execution.inputFile((params["base_mesh2"] ?? null))
        );
    }
    if ((params["use_sc2"] ?? null)) {
        cargs.push("--useSc2");
    }
    if ((params["flirt_matrix"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["flirt_matrix"] ?? null))
        );
    }
    if ((params["do_mesh_reg"] ?? null)) {
        cargs.push("--doMeshReg");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["degrees_of_freedom"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["degrees_of_freedom"] ?? null))
        );
    }
    if ((params["inverse"] ?? null)) {
        cargs.push("--inverse");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function run_mesh_utils_outputs(
    params: RunMeshUtilsParameters,
    execution: Execution,
): RunMeshUtilsOutputs {
    const ret: RunMeshUtilsOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * run_mesh_utils
 *
 * A tool for various mesh operations as part of FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RunMeshUtilsOutputs`).
 */
function run_mesh_utils_execute(
    params: RunMeshUtilsParameters,
    runner: Runner | null = null,
): RunMeshUtilsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RUN_MESH_UTILS_METADATA);
    params = execution.params(params)
    const cargs = run_mesh_utils_cargs(params, execution)
    const ret = run_mesh_utils_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * run_mesh_utils
 *
 * A tool for various mesh operations as part of FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param base_mesh Filename of base mesh
 * @param output_image Filename of output image
 * @param input_image Filename of input image
 * @param second_input_image Filename of second input image
 * @param weighting_image_force Weighting image force
 * @param do_uncentre_model Do UnCentre Model
 * @param do_subtract_constant_from_scalars Do Subtract Constant From Scalars
 * @param do_vertex_scalars_to_image_volume Do Vertex Scalars To Image Volume
 * @param base_mesh2 Filename of base mesh2
 * @param use_sc2 Use SC2
 * @param flirt_matrix Filename of flirt matrix
 * @param do_mesh_reg Do Mesh Registration
 * @param threshold Threshold
 * @param degrees_of_freedom Degrees of freedom
 * @param inverse Inverse Operation
 * @param verbose Switch on diagnostic messages
 * @param help Display help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RunMeshUtilsOutputs`).
 */
function run_mesh_utils(
    base_mesh: InputPathType,
    output_image: string,
    input_image: InputPathType | null = null,
    second_input_image: InputPathType | null = null,
    weighting_image_force: InputPathType | null = null,
    do_uncentre_model: boolean = false,
    do_subtract_constant_from_scalars: boolean = false,
    do_vertex_scalars_to_image_volume: boolean = false,
    base_mesh2: InputPathType | null = null,
    use_sc2: boolean = false,
    flirt_matrix: InputPathType | null = null,
    do_mesh_reg: boolean = false,
    threshold: number | null = null,
    degrees_of_freedom: number | null = null,
    inverse: boolean = false,
    verbose: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): RunMeshUtilsOutputs {
    const params = run_mesh_utils_params(base_mesh, output_image, input_image, second_input_image, weighting_image_force, do_uncentre_model, do_subtract_constant_from_scalars, do_vertex_scalars_to_image_volume, base_mesh2, use_sc2, flirt_matrix, do_mesh_reg, threshold, degrees_of_freedom, inverse, verbose, help)
    return run_mesh_utils_execute(params, runner);
}


export {
      RUN_MESH_UTILS_METADATA,
      RunMeshUtilsOutputs,
      RunMeshUtilsParameters,
      run_mesh_utils,
      run_mesh_utils_execute,
      run_mesh_utils_params,
};
