// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_CALC_MONT_DIMS_PY_METADATA: Metadata = {
    id: "f169ebd9ae5d43ca57f751be0233358342e513d6.boutiques",
    name: "adjunct_calc_mont_dims.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctCalcMontDimsPyParameters {
    "__STYXTYPE__": "adjunct_calc_mont_dims.py";
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "adjunct_calc_mont_dims.py": adjunct_calc_mont_dims_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_calc_mont_dims_py(...)`.
 *
 * @interface
 */
interface AdjunctCalcMontDimsPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function adjunct_calc_mont_dims_py_params(
    help: boolean = false,
): AdjunctCalcMontDimsPyParameters {
    /**
     * Build parameters.
    
     * @param help Display help information
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "adjunct_calc_mont_dims.py" as const,
        "help": help,
    };
    return params;
}


function adjunct_calc_mont_dims_py_cargs(
    params: AdjunctCalcMontDimsPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("adjunct_calc_mont_dims.py");
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function adjunct_calc_mont_dims_py_outputs(
    params: AdjunctCalcMontDimsPyParameters,
    execution: Execution,
): AdjunctCalcMontDimsPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AdjunctCalcMontDimsPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function adjunct_calc_mont_dims_py_execute(
    params: AdjunctCalcMontDimsPyParameters,
    execution: Execution,
): AdjunctCalcMontDimsPyOutputs {
    /**
     * A helper function for the fat_proc* scripts.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AdjunctCalcMontDimsPyOutputs`).
     */
    params = execution.params(params)
    const cargs = adjunct_calc_mont_dims_py_cargs(params, execution)
    const ret = adjunct_calc_mont_dims_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function adjunct_calc_mont_dims_py(
    help: boolean = false,
    runner: Runner | null = null,
): AdjunctCalcMontDimsPyOutputs {
    /**
     * A helper function for the fat_proc* scripts.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param help Display help information
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AdjunctCalcMontDimsPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_CALC_MONT_DIMS_PY_METADATA);
    const params = adjunct_calc_mont_dims_py_params(help)
    return adjunct_calc_mont_dims_py_execute(params, execution);
}


export {
      ADJUNCT_CALC_MONT_DIMS_PY_METADATA,
      AdjunctCalcMontDimsPyOutputs,
      AdjunctCalcMontDimsPyParameters,
      adjunct_calc_mont_dims_py,
      adjunct_calc_mont_dims_py_params,
};
