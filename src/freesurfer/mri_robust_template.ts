// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_ROBUST_TEMPLATE_METADATA: Metadata = {
    id: "e6d86749b113688755af2fc89adaf79f55c6735f.boutiques",
    name: "mri_robust_template",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRobustTemplateParameters {
    "__STYXTYPE__": "mri_robust_template";
    "mov_files": Array<InputPathType>;
    "template_file": string;
    "sat_value"?: number | null | undefined;
    "satit_flag": boolean;
    "lta_files"?: Array<string> | null | undefined;
    "mapmov_files"?: Array<string> | null | undefined;
    "mapmovhdr_files"?: Array<string> | null | undefined;
    "weights_files"?: Array<string> | null | undefined;
    "oneminusw_flag": boolean;
    "average_type"?: number | null | undefined;
    "inittp"?: number | null | undefined;
    "fixtp_flag": boolean;
    "iscale_flag": boolean;
    "iscaleonly_flag": boolean;
    "iscalein_files"?: Array<string> | null | undefined;
    "iscaleout_files"?: Array<string> | null | undefined;
    "transonly_flag": boolean;
    "affine_flag": boolean;
    "ixforms_files"?: Array<string> | null | undefined;
    "masks_files"?: Array<string> | null | undefined;
    "vox2vox_flag": boolean;
    "leastsquares_flag": boolean;
    "noit_flag": boolean;
    "maxit"?: number | null | undefined;
    "highit"?: number | null | undefined;
    "epsit"?: number | null | undefined;
    "pairmaxit"?: number | null | undefined;
    "pairepsit"?: number | null | undefined;
    "subsample"?: number | null | undefined;
    "nomulti_flag": boolean;
    "floattype_flag": boolean;
    "finalnearest_flag": boolean;
    "doubleprec_flag": boolean;
    "cras_flag": boolean;
    "res_thresh"?: number | null | undefined;
    "frobnorm_thresh"?: number | null | undefined;
    "debug_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_robust_template": mri_robust_template_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_robust_template": mri_robust_template_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_robust_template(...)`.
 *
 * @interface
 */
interface MriRobustTemplateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output template volume (final mean/median image).
     */
    output_template: OutputPathType;
    /**
     * Output transform file.
     */
    output_lta_transform: OutputPathType;
    /**
     * Output mapped and resampled image.
     */
    output_mapped_image: OutputPathType;
    /**
     * Output weights map (outliers).
     */
    output_weights_map: OutputPathType;
}


function mri_robust_template_params(
    mov_files: Array<InputPathType>,
    template_file: string,
    sat_value: number | null = null,
    satit_flag: boolean = false,
    lta_files: Array<string> | null = null,
    mapmov_files: Array<string> | null = null,
    mapmovhdr_files: Array<string> | null = null,
    weights_files: Array<string> | null = null,
    oneminusw_flag: boolean = false,
    average_type: number | null = null,
    inittp: number | null = null,
    fixtp_flag: boolean = false,
    iscale_flag: boolean = false,
    iscaleonly_flag: boolean = false,
    iscalein_files: Array<string> | null = null,
    iscaleout_files: Array<string> | null = null,
    transonly_flag: boolean = false,
    affine_flag: boolean = false,
    ixforms_files: Array<string> | null = null,
    masks_files: Array<string> | null = null,
    vox2vox_flag: boolean = false,
    leastsquares_flag: boolean = false,
    noit_flag: boolean = false,
    maxit: number | null = null,
    highit: number | null = null,
    epsit: number | null = null,
    pairmaxit: number | null = null,
    pairepsit: number | null = null,
    subsample: number | null = null,
    nomulti_flag: boolean = false,
    floattype_flag: boolean = false,
    finalnearest_flag: boolean = false,
    doubleprec_flag: boolean = false,
    cras_flag: boolean = false,
    res_thresh: number | null = null,
    frobnorm_thresh: number | null = null,
    debug_flag: boolean = false,
): MriRobustTemplateParameters {
    /**
     * Build parameters.
    
     * @param mov_files Input movable volumes to be aligned to common mean/median template.
     * @param template_file Output template volume (final mean/median image).
     * @param sat_value Set outlier sensitivity manually. Higher values mean less sensitivity.
     * @param satit_flag Auto-detect good sensitivity (recommended for head or full brain scans).
     * @param lta_files Output transforms to template (for each input).
     * @param mapmov_files Output images: map and resample each input to template.
     * @param mapmovhdr_files Output images: header-adjusted movables (no resampling).
     * @param weights_files Output weights (outliers) in target space.
     * @param oneminusw_flag Weights (outlier) map will be inverted (0=outlier), as in earlier versions.
     * @param average_type Construct template from: 0 Mean, 1 Median (default).
     * @param inittp Use TP# for spatial init (default random), 0: no init.
     * @param fixtp_flag Map everything to init TP# (init TP is not resampled).
     * @param iscale_flag Allow also intensity scaling (default off).
     * @param iscaleonly_flag Only perform iscale (no transformation, default off).
     * @param iscalein_files Use initial intensity scales.
     * @param iscaleout_files Output final intensity scales (will activate --iscale).
     * @param transonly_flag Find 3 parameter translation only.
     * @param affine_flag Find 12 parameter affine transform.
     * @param ixforms_files Use initial transforms (lta) on source ('id'=identity).
     * @param masks_files Input masks applied to movables.
     * @param vox2vox_flag Output VOX2VOX lta file (default is RAS2RAS).
     * @param leastsquares_flag Use least squares instead of robust M-estimator (for testing only).
     * @param noit_flag Do not iterate, just create first template.
     * @param maxit Iterate max # times (if #tp>2 default 6, else 5 for 2tp reg.).
     * @param highit Iterate max # times on highest resolution (default 5).
     * @param epsit Stop iterations when all transform updates fall below the specified value.
     * @param pairmaxit Iterate max # times (default 5) for individual pairwise registrations.
     * @param pairepsit Stop individual pairwise registration iterations when transform updates fall below the specified value.
     * @param subsample Subsample if dimension > specified value on all axes (default no subsampling).
     * @param nomulti_flag Do not use multi-resolution (only highest resolution).
     * @param floattype_flag Convert images to float internally (default: keep input type).
     * @param finalnearest_flag Use nearest neighbor in final interpolation when creating average.
     * @param doubleprec_flag Use double precision instead of float internally (large memory usage).
     * @param cras_flag Center template at average CRAS, instead of average barycenter.
     * @param res_thresh Volume resolution threshold (default is 0.01 mm).
     * @param frobnorm_thresh Matrix frobenius norm threshold (default is 0.0001).
     * @param debug_flag Show debug output (default no debug output).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_robust_template" as const,
        "mov_files": mov_files,
        "template_file": template_file,
        "satit_flag": satit_flag,
        "oneminusw_flag": oneminusw_flag,
        "fixtp_flag": fixtp_flag,
        "iscale_flag": iscale_flag,
        "iscaleonly_flag": iscaleonly_flag,
        "transonly_flag": transonly_flag,
        "affine_flag": affine_flag,
        "vox2vox_flag": vox2vox_flag,
        "leastsquares_flag": leastsquares_flag,
        "noit_flag": noit_flag,
        "nomulti_flag": nomulti_flag,
        "floattype_flag": floattype_flag,
        "finalnearest_flag": finalnearest_flag,
        "doubleprec_flag": doubleprec_flag,
        "cras_flag": cras_flag,
        "debug_flag": debug_flag,
    };
    if (sat_value !== null) {
        params["sat_value"] = sat_value;
    }
    if (lta_files !== null) {
        params["lta_files"] = lta_files;
    }
    if (mapmov_files !== null) {
        params["mapmov_files"] = mapmov_files;
    }
    if (mapmovhdr_files !== null) {
        params["mapmovhdr_files"] = mapmovhdr_files;
    }
    if (weights_files !== null) {
        params["weights_files"] = weights_files;
    }
    if (average_type !== null) {
        params["average_type"] = average_type;
    }
    if (inittp !== null) {
        params["inittp"] = inittp;
    }
    if (iscalein_files !== null) {
        params["iscalein_files"] = iscalein_files;
    }
    if (iscaleout_files !== null) {
        params["iscaleout_files"] = iscaleout_files;
    }
    if (ixforms_files !== null) {
        params["ixforms_files"] = ixforms_files;
    }
    if (masks_files !== null) {
        params["masks_files"] = masks_files;
    }
    if (maxit !== null) {
        params["maxit"] = maxit;
    }
    if (highit !== null) {
        params["highit"] = highit;
    }
    if (epsit !== null) {
        params["epsit"] = epsit;
    }
    if (pairmaxit !== null) {
        params["pairmaxit"] = pairmaxit;
    }
    if (pairepsit !== null) {
        params["pairepsit"] = pairepsit;
    }
    if (subsample !== null) {
        params["subsample"] = subsample;
    }
    if (res_thresh !== null) {
        params["res_thresh"] = res_thresh;
    }
    if (frobnorm_thresh !== null) {
        params["frobnorm_thresh"] = frobnorm_thresh;
    }
    return params;
}


function mri_robust_template_cargs(
    params: MriRobustTemplateParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_robust_template");
    cargs.push(
        "-mov",
        ...(params["mov_files"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-template",
        (params["template_file"] ?? null)
    );
    if ((params["sat_value"] ?? null) !== null) {
        cargs.push(
            "--sat",
            String((params["sat_value"] ?? null))
        );
    }
    if ((params["satit_flag"] ?? null)) {
        cargs.push("--satit");
    }
    if ((params["lta_files"] ?? null) !== null) {
        cargs.push(
            "--lta",
            ...(params["lta_files"] ?? null)
        );
    }
    if ((params["mapmov_files"] ?? null) !== null) {
        cargs.push(
            "--mapmov",
            ...(params["mapmov_files"] ?? null)
        );
    }
    if ((params["mapmovhdr_files"] ?? null) !== null) {
        cargs.push(
            "--mapmovhdr",
            ...(params["mapmovhdr_files"] ?? null)
        );
    }
    if ((params["weights_files"] ?? null) !== null) {
        cargs.push(
            "--weights",
            ...(params["weights_files"] ?? null)
        );
    }
    if ((params["oneminusw_flag"] ?? null)) {
        cargs.push("--oneminusw");
    }
    if ((params["average_type"] ?? null) !== null) {
        cargs.push(
            "--average",
            String((params["average_type"] ?? null))
        );
    }
    if ((params["inittp"] ?? null) !== null) {
        cargs.push(
            "--inittp",
            String((params["inittp"] ?? null))
        );
    }
    if ((params["fixtp_flag"] ?? null)) {
        cargs.push("--fixtp");
    }
    if ((params["iscale_flag"] ?? null)) {
        cargs.push("--iscale");
    }
    if ((params["iscaleonly_flag"] ?? null)) {
        cargs.push("--iscaleonly");
    }
    if ((params["iscalein_files"] ?? null) !== null) {
        cargs.push(
            "--iscalein",
            ...(params["iscalein_files"] ?? null)
        );
    }
    if ((params["iscaleout_files"] ?? null) !== null) {
        cargs.push(
            "--iscaleout",
            ...(params["iscaleout_files"] ?? null)
        );
    }
    if ((params["transonly_flag"] ?? null)) {
        cargs.push("--transonly");
    }
    if ((params["affine_flag"] ?? null)) {
        cargs.push("--affine");
    }
    if ((params["ixforms_files"] ?? null) !== null) {
        cargs.push(
            "--ixforms",
            ...(params["ixforms_files"] ?? null)
        );
    }
    if ((params["masks_files"] ?? null) !== null) {
        cargs.push(
            "--masks",
            ...(params["masks_files"] ?? null)
        );
    }
    if ((params["vox2vox_flag"] ?? null)) {
        cargs.push("--vox2vox");
    }
    if ((params["leastsquares_flag"] ?? null)) {
        cargs.push("--leastsquares");
    }
    if ((params["noit_flag"] ?? null)) {
        cargs.push("--noit");
    }
    if ((params["maxit"] ?? null) !== null) {
        cargs.push(
            "--maxit",
            String((params["maxit"] ?? null))
        );
    }
    if ((params["highit"] ?? null) !== null) {
        cargs.push(
            "--highit",
            String((params["highit"] ?? null))
        );
    }
    if ((params["epsit"] ?? null) !== null) {
        cargs.push(
            "--epsit",
            String((params["epsit"] ?? null))
        );
    }
    if ((params["pairmaxit"] ?? null) !== null) {
        cargs.push(
            "--pairmaxit",
            String((params["pairmaxit"] ?? null))
        );
    }
    if ((params["pairepsit"] ?? null) !== null) {
        cargs.push(
            "--pairepsit",
            String((params["pairepsit"] ?? null))
        );
    }
    if ((params["subsample"] ?? null) !== null) {
        cargs.push(
            "--subsample",
            String((params["subsample"] ?? null))
        );
    }
    if ((params["nomulti_flag"] ?? null)) {
        cargs.push("--nomulti");
    }
    if ((params["floattype_flag"] ?? null)) {
        cargs.push("--floattype");
    }
    if ((params["finalnearest_flag"] ?? null)) {
        cargs.push("--finalnearest");
    }
    if ((params["doubleprec_flag"] ?? null)) {
        cargs.push("--doubleprec");
    }
    if ((params["cras_flag"] ?? null)) {
        cargs.push("--cras");
    }
    if ((params["res_thresh"] ?? null) !== null) {
        cargs.push(
            "--res-thresh",
            String((params["res_thresh"] ?? null))
        );
    }
    if ((params["frobnorm_thresh"] ?? null) !== null) {
        cargs.push(
            "--frobnorm-thresh",
            String((params["frobnorm_thresh"] ?? null))
        );
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


function mri_robust_template_outputs(
    params: MriRobustTemplateParameters,
    execution: Execution,
): MriRobustTemplateOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriRobustTemplateOutputs = {
        root: execution.outputFile("."),
        output_template: execution.outputFile([(params["template_file"] ?? null)].join('')),
        output_lta_transform: execution.outputFile(["[TMP_NAME].lta"].join('')),
        output_mapped_image: execution.outputFile(["[TMP_NAME]_to_template.mgz"].join('')),
        output_weights_map: execution.outputFile(["[TMP_NAME]_weights.mgz"].join('')),
    };
    return ret;
}


function mri_robust_template_execute(
    params: MriRobustTemplateParameters,
    execution: Execution,
): MriRobustTemplateOutputs {
    /**
     * Constructs an unbiased robust template for longitudinal volumes using an iterative method.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriRobustTemplateOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_robust_template_cargs(params, execution)
    const ret = mri_robust_template_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_robust_template(
    mov_files: Array<InputPathType>,
    template_file: string,
    sat_value: number | null = null,
    satit_flag: boolean = false,
    lta_files: Array<string> | null = null,
    mapmov_files: Array<string> | null = null,
    mapmovhdr_files: Array<string> | null = null,
    weights_files: Array<string> | null = null,
    oneminusw_flag: boolean = false,
    average_type: number | null = null,
    inittp: number | null = null,
    fixtp_flag: boolean = false,
    iscale_flag: boolean = false,
    iscaleonly_flag: boolean = false,
    iscalein_files: Array<string> | null = null,
    iscaleout_files: Array<string> | null = null,
    transonly_flag: boolean = false,
    affine_flag: boolean = false,
    ixforms_files: Array<string> | null = null,
    masks_files: Array<string> | null = null,
    vox2vox_flag: boolean = false,
    leastsquares_flag: boolean = false,
    noit_flag: boolean = false,
    maxit: number | null = null,
    highit: number | null = null,
    epsit: number | null = null,
    pairmaxit: number | null = null,
    pairepsit: number | null = null,
    subsample: number | null = null,
    nomulti_flag: boolean = false,
    floattype_flag: boolean = false,
    finalnearest_flag: boolean = false,
    doubleprec_flag: boolean = false,
    cras_flag: boolean = false,
    res_thresh: number | null = null,
    frobnorm_thresh: number | null = null,
    debug_flag: boolean = false,
    runner: Runner | null = null,
): MriRobustTemplateOutputs {
    /**
     * Constructs an unbiased robust template for longitudinal volumes using an iterative method.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param mov_files Input movable volumes to be aligned to common mean/median template.
     * @param template_file Output template volume (final mean/median image).
     * @param sat_value Set outlier sensitivity manually. Higher values mean less sensitivity.
     * @param satit_flag Auto-detect good sensitivity (recommended for head or full brain scans).
     * @param lta_files Output transforms to template (for each input).
     * @param mapmov_files Output images: map and resample each input to template.
     * @param mapmovhdr_files Output images: header-adjusted movables (no resampling).
     * @param weights_files Output weights (outliers) in target space.
     * @param oneminusw_flag Weights (outlier) map will be inverted (0=outlier), as in earlier versions.
     * @param average_type Construct template from: 0 Mean, 1 Median (default).
     * @param inittp Use TP# for spatial init (default random), 0: no init.
     * @param fixtp_flag Map everything to init TP# (init TP is not resampled).
     * @param iscale_flag Allow also intensity scaling (default off).
     * @param iscaleonly_flag Only perform iscale (no transformation, default off).
     * @param iscalein_files Use initial intensity scales.
     * @param iscaleout_files Output final intensity scales (will activate --iscale).
     * @param transonly_flag Find 3 parameter translation only.
     * @param affine_flag Find 12 parameter affine transform.
     * @param ixforms_files Use initial transforms (lta) on source ('id'=identity).
     * @param masks_files Input masks applied to movables.
     * @param vox2vox_flag Output VOX2VOX lta file (default is RAS2RAS).
     * @param leastsquares_flag Use least squares instead of robust M-estimator (for testing only).
     * @param noit_flag Do not iterate, just create first template.
     * @param maxit Iterate max # times (if #tp>2 default 6, else 5 for 2tp reg.).
     * @param highit Iterate max # times on highest resolution (default 5).
     * @param epsit Stop iterations when all transform updates fall below the specified value.
     * @param pairmaxit Iterate max # times (default 5) for individual pairwise registrations.
     * @param pairepsit Stop individual pairwise registration iterations when transform updates fall below the specified value.
     * @param subsample Subsample if dimension > specified value on all axes (default no subsampling).
     * @param nomulti_flag Do not use multi-resolution (only highest resolution).
     * @param floattype_flag Convert images to float internally (default: keep input type).
     * @param finalnearest_flag Use nearest neighbor in final interpolation when creating average.
     * @param doubleprec_flag Use double precision instead of float internally (large memory usage).
     * @param cras_flag Center template at average CRAS, instead of average barycenter.
     * @param res_thresh Volume resolution threshold (default is 0.01 mm).
     * @param frobnorm_thresh Matrix frobenius norm threshold (default is 0.0001).
     * @param debug_flag Show debug output (default no debug output).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriRobustTemplateOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_ROBUST_TEMPLATE_METADATA);
    const params = mri_robust_template_params(mov_files, template_file, sat_value, satit_flag, lta_files, mapmov_files, mapmovhdr_files, weights_files, oneminusw_flag, average_type, inittp, fixtp_flag, iscale_flag, iscaleonly_flag, iscalein_files, iscaleout_files, transonly_flag, affine_flag, ixforms_files, masks_files, vox2vox_flag, leastsquares_flag, noit_flag, maxit, highit, epsit, pairmaxit, pairepsit, subsample, nomulti_flag, floattype_flag, finalnearest_flag, doubleprec_flag, cras_flag, res_thresh, frobnorm_thresh, debug_flag)
    return mri_robust_template_execute(params, execution);
}


export {
      MRI_ROBUST_TEMPLATE_METADATA,
      MriRobustTemplateOutputs,
      MriRobustTemplateParameters,
      mri_robust_template,
      mri_robust_template_params,
};
