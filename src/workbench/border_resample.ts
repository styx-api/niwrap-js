// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BORDER_RESAMPLE_METADATA: Metadata = {
    id: "9be294dad7cdf118a17d5ba9c35d2223b1ababca.boutiques",
    name: "border-resample",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface BorderResampleParameters {
    "@type": "workbench.border-resample";
    "border_in": InputPathType;
    "current_sphere": InputPathType;
    "new_sphere": InputPathType;
    "border_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.border-resample": border_resample_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.border-resample": border_resample_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `border_resample(...)`.
 *
 * @interface
 */
interface BorderResampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output border file
     */
    border_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param border_in the border file to resample
 * @param current_sphere a sphere surface with the mesh that the metric is currently on
 * @param new_sphere a sphere surface that is in register with <current-sphere> and has the desired output mesh
 * @param border_out the output border file
 *
 * @returns Parameter dictionary
 */
function border_resample_params(
    border_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    border_out: string,
): BorderResampleParameters {
    const params = {
        "@type": "workbench.border-resample" as const,
        "border_in": border_in,
        "current_sphere": current_sphere,
        "new_sphere": new_sphere,
        "border_out": border_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function border_resample_cargs(
    params: BorderResampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-border-resample");
    cargs.push(execution.inputFile((params["border_in"] ?? null)));
    cargs.push(execution.inputFile((params["current_sphere"] ?? null)));
    cargs.push(execution.inputFile((params["new_sphere"] ?? null)));
    cargs.push((params["border_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function border_resample_outputs(
    params: BorderResampleParameters,
    execution: Execution,
): BorderResampleOutputs {
    const ret: BorderResampleOutputs = {
        root: execution.outputFile("."),
        border_out: execution.outputFile([(params["border_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * border-resample
 *
 * Resample a border file to a different mesh.
 *
 * Resamples a border file, given two spherical surfaces that are in register.  Only borders that have the same structure as current-sphere will be resampled.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderResampleOutputs`).
 */
function border_resample_execute(
    params: BorderResampleParameters,
    runner: Runner | null = null,
): BorderResampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BORDER_RESAMPLE_METADATA);
    params = execution.params(params)
    const cargs = border_resample_cargs(params, execution)
    const ret = border_resample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * border-resample
 *
 * Resample a border file to a different mesh.
 *
 * Resamples a border file, given two spherical surfaces that are in register.  Only borders that have the same structure as current-sphere will be resampled.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param border_in the border file to resample
 * @param current_sphere a sphere surface with the mesh that the metric is currently on
 * @param new_sphere a sphere surface that is in register with <current-sphere> and has the desired output mesh
 * @param border_out the output border file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderResampleOutputs`).
 */
function border_resample(
    border_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    border_out: string,
    runner: Runner | null = null,
): BorderResampleOutputs {
    const params = border_resample_params(border_in, current_sphere, new_sphere, border_out)
    return border_resample_execute(params, runner);
}


export {
      BORDER_RESAMPLE_METADATA,
      BorderResampleOutputs,
      BorderResampleParameters,
      border_resample,
      border_resample_execute,
      border_resample_params,
};
