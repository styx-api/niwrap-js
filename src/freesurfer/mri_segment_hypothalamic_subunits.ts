// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SEGMENT_HYPOTHALAMIC_SUBUNITS_METADATA: Metadata = {
    id: "878feea7a463699a212b44d12feeaaa1164f7182.boutiques",
    name: "mri_segment_hypothalamic_subunits",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSegmentHypothalamicSubunitsParameters {
    "@type": "freesurfer.mri_segment_hypothalamic_subunits";
    "subjects"?: Array<string> | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "write_posteriors": boolean;
    "image_input"?: string | null | undefined;
    "output"?: string | null | undefined;
    "posteriors"?: string | null | undefined;
    "resample"?: string | null | undefined;
    "volume_output"?: string | null | undefined;
    "crop_size"?: Array<number> | null | undefined;
    "threads"?: number | null | undefined;
    "cpu": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_segment_hypothalamic_subunits": mri_segment_hypothalamic_subunits_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_segment_hypothalamic_subunits": mri_segment_hypothalamic_subunits_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_segment_hypothalamic_subunits(...)`.
 *
 * @interface
 */
interface MriSegmentHypothalamicSubunitsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmentation output(s) in T1 mode.
     */
    segmentation_output_files: OutputPathType | null;
    /**
     * Posteriors output(s).
     */
    posteriors_output: OutputPathType | null;
    /**
     * Resampled image(s) output.
     */
    resampled_output: OutputPathType | null;
    /**
     * CSV file with volumes for all structures and subjects.
     */
    volume_output_csv: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subjects (required in FS mode) Name of one or several subjects in $SUBJECTS_DIR on which to run the module, assuming recon-all has been run on the specified subjects.
 * @param subjects_dir (FS mode, optional) Override current $SUBJECTS_DIR.
 * @param write_posteriors (FS mode, optional) Save posteriors; default is False.
 * @param image_input (required in T1 mode) Image(s) to segment. Can be a path to a single image or to a folder.
 * @param output (required in T1 mode) Segmentation output(s). Must be a folder if --i designates a folder.
 * @param posteriors (T1 mode, optional) Posteriors output(s). Must be a folder if --i designates a folder.
 * @param resample (T1 mode, optional) Resampled image(s). Must be a folder if --i designates a folder.
 * @param volume_output (T1 mode, optional) Output CSV file with volumes for all structures and subjects.
 * @param crop_size (both modes, optional) Size of the central patch to analyse (must be divisible by 8). The whole image is analysed by default.
 * @param threads (both modes, optional) Number of cores to be used. Default uses 1 core.
 * @param cpu (both modes, optional) Enforce running with CPU rather than GPU.
 *
 * @returns Parameter dictionary
 */
function mri_segment_hypothalamic_subunits_params(
    subjects: Array<string> | null = null,
    subjects_dir: string | null = null,
    write_posteriors: boolean = false,
    image_input: string | null = null,
    output: string | null = null,
    posteriors: string | null = null,
    resample: string | null = null,
    volume_output: string | null = null,
    crop_size: Array<number> | null = null,
    threads: number | null = null,
    cpu: boolean = false,
): MriSegmentHypothalamicSubunitsParameters {
    const params = {
        "@type": "freesurfer.mri_segment_hypothalamic_subunits" as const,
        "write_posteriors": write_posteriors,
        "cpu": cpu,
    };
    if (subjects !== null) {
        params["subjects"] = subjects;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (image_input !== null) {
        params["image_input"] = image_input;
    }
    if (output !== null) {
        params["output"] = output;
    }
    if (posteriors !== null) {
        params["posteriors"] = posteriors;
    }
    if (resample !== null) {
        params["resample"] = resample;
    }
    if (volume_output !== null) {
        params["volume_output"] = volume_output;
    }
    if (crop_size !== null) {
        params["crop_size"] = crop_size;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_segment_hypothalamic_subunits_cargs(
    params: MriSegmentHypothalamicSubunitsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_segment_hypothalamic_subunits");
    if ((params["subjects"] ?? null) !== null) {
        cargs.push(
            "--s",
            ...(params["subjects"] ?? null)
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["write_posteriors"] ?? null)) {
        cargs.push("--write_posteriors");
    }
    if ((params["image_input"] ?? null) !== null) {
        cargs.push(
            "--i",
            (params["image_input"] ?? null)
        );
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output"] ?? null)
        );
    }
    if ((params["posteriors"] ?? null) !== null) {
        cargs.push(
            "--post",
            (params["posteriors"] ?? null)
        );
    }
    if ((params["resample"] ?? null) !== null) {
        cargs.push(
            "--resample",
            (params["resample"] ?? null)
        );
    }
    if ((params["volume_output"] ?? null) !== null) {
        cargs.push(
            "--vol",
            (params["volume_output"] ?? null)
        );
    }
    if ((params["crop_size"] ?? null) !== null) {
        cargs.push(
            "--crop",
            ...(params["crop_size"] ?? null).map(String)
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["cpu"] ?? null)) {
        cargs.push("--cpu");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_segment_hypothalamic_subunits_outputs(
    params: MriSegmentHypothalamicSubunitsParameters,
    execution: Execution,
): MriSegmentHypothalamicSubunitsOutputs {
    const ret: MriSegmentHypothalamicSubunitsOutputs = {
        root: execution.outputFile("."),
        segmentation_output_files: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null)].join('')) : null,
        posteriors_output: ((params["posteriors"] ?? null) !== null) ? execution.outputFile([(params["posteriors"] ?? null)].join('')) : null,
        resampled_output: ((params["resample"] ?? null) !== null) ? execution.outputFile([(params["resample"] ?? null)].join('')) : null,
        volume_output_csv: ((params["volume_output"] ?? null) !== null) ? execution.outputFile([(params["volume_output"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * mri_segment_hypothalamic_subunits
 *
 * This module segments hypothalamic subunits and can be run in two modes: on FreeSurfer subjects or on any T1-weighted scan(s) of approximately 1mm resolution.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegmentHypothalamicSubunitsOutputs`).
 */
function mri_segment_hypothalamic_subunits_execute(
    params: MriSegmentHypothalamicSubunitsParameters,
    runner: Runner | null = null,
): MriSegmentHypothalamicSubunitsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SEGMENT_HYPOTHALAMIC_SUBUNITS_METADATA);
    params = execution.params(params)
    const cargs = mri_segment_hypothalamic_subunits_cargs(params, execution)
    const ret = mri_segment_hypothalamic_subunits_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_segment_hypothalamic_subunits
 *
 * This module segments hypothalamic subunits and can be run in two modes: on FreeSurfer subjects or on any T1-weighted scan(s) of approximately 1mm resolution.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects (required in FS mode) Name of one or several subjects in $SUBJECTS_DIR on which to run the module, assuming recon-all has been run on the specified subjects.
 * @param subjects_dir (FS mode, optional) Override current $SUBJECTS_DIR.
 * @param write_posteriors (FS mode, optional) Save posteriors; default is False.
 * @param image_input (required in T1 mode) Image(s) to segment. Can be a path to a single image or to a folder.
 * @param output (required in T1 mode) Segmentation output(s). Must be a folder if --i designates a folder.
 * @param posteriors (T1 mode, optional) Posteriors output(s). Must be a folder if --i designates a folder.
 * @param resample (T1 mode, optional) Resampled image(s). Must be a folder if --i designates a folder.
 * @param volume_output (T1 mode, optional) Output CSV file with volumes for all structures and subjects.
 * @param crop_size (both modes, optional) Size of the central patch to analyse (must be divisible by 8). The whole image is analysed by default.
 * @param threads (both modes, optional) Number of cores to be used. Default uses 1 core.
 * @param cpu (both modes, optional) Enforce running with CPU rather than GPU.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegmentHypothalamicSubunitsOutputs`).
 */
function mri_segment_hypothalamic_subunits(
    subjects: Array<string> | null = null,
    subjects_dir: string | null = null,
    write_posteriors: boolean = false,
    image_input: string | null = null,
    output: string | null = null,
    posteriors: string | null = null,
    resample: string | null = null,
    volume_output: string | null = null,
    crop_size: Array<number> | null = null,
    threads: number | null = null,
    cpu: boolean = false,
    runner: Runner | null = null,
): MriSegmentHypothalamicSubunitsOutputs {
    const params = mri_segment_hypothalamic_subunits_params(subjects, subjects_dir, write_posteriors, image_input, output, posteriors, resample, volume_output, crop_size, threads, cpu)
    return mri_segment_hypothalamic_subunits_execute(params, runner);
}


export {
      MRI_SEGMENT_HYPOTHALAMIC_SUBUNITS_METADATA,
      MriSegmentHypothalamicSubunitsOutputs,
      MriSegmentHypothalamicSubunitsParameters,
      mri_segment_hypothalamic_subunits,
      mri_segment_hypothalamic_subunits_execute,
      mri_segment_hypothalamic_subunits_params,
};
