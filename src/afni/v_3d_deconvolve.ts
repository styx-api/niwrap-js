// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DECONVOLVE_METADATA: Metadata = {
    id: "225d407793b7fcf83484f3e230794ff1d08c27df.boutiques",
    name: "3dDeconvolve",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDeconvolveParameters {
    "@type": "afni.3dDeconvolve";
    "input_dataset": InputPathType;
    "mask_dataset"?: InputPathType | null | undefined;
    "num_stimts"?: number | null | undefined;
    "stim_file"?: string | null | undefined;
    "stim_label"?: string | null | undefined;
    "stim_base": boolean;
    "stim_times"?: string | null | undefined;
    "iresp"?: string | null | undefined;
    "fitts"?: string | null | undefined;
    "fout": boolean;
    "tout": boolean;
    "bucket"?: string | null | undefined;
    "cbucket"?: string | null | undefined;
    "x1D"?: string | null | undefined;
    "jobs"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dDeconvolve": v_3d_deconvolve_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dDeconvolve": v_3d_deconvolve_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_deconvolve(...)`.
 *
 * @interface
 */
interface V3dDeconvolveOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output bucket dataset in AFNI format.
     */
    bucket_output: OutputPathType | null;
    /**
     * Regression coefficients stored in a dataset.
     */
    cbucket_output: OutputPathType | null;
    /**
     * Estimated Impulse Response dataset.
     */
    iresp_output: OutputPathType | null;
    /**
     * Fitted Time Series dataset in AFNI format.
     */
    fitts_output: OutputPathType | null;
    /**
     * X-matrix output file in .1D format.
     */
    x1d_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Filename of 3D+time input dataset.
 * @param mask_dataset Filename of 3D mask dataset.
 * @param num_stimts Number of input stimulus time series.
 * @param stim_file Filename of kth time series input stimulus.
 * @param stim_label Label for kth input stimulus.
 * @param stim_base Kth input stimulus is part of the baseline model.
 * @param stim_times Deconvolution response model for kth stimulus.
 * @param iresp Prefix for 3D+time output dataset which will contain the kth estimated impulse response.
 * @param fitts Prefix for 3D+time output dataset which will contain the (full model) time series fit to the input data.
 * @param fout Flag to output the F-statistics for each stimulus.
 * @param tout Flag to output the t-statistics.
 * @param bucket Create one AFNI 'bucket' dataset containing various parameters of interest.
 * @param cbucket Save the regression coefficients (no statistics) into a dataset.
 * @param x1_d Save X matrix to a .xmat.1D (ASCII) file.
 * @param jobs Run the program with multiple jobs (sub-processes).
 *
 * @returns Parameter dictionary
 */
function v_3d_deconvolve_params(
    input_dataset: InputPathType,
    mask_dataset: InputPathType | null = null,
    num_stimts: number | null = null,
    stim_file: string | null = null,
    stim_label: string | null = null,
    stim_base: boolean = false,
    stim_times: string | null = null,
    iresp: string | null = null,
    fitts: string | null = null,
    fout: boolean = false,
    tout: boolean = false,
    bucket: string | null = null,
    cbucket: string | null = null,
    x1_d: string | null = null,
    jobs: number | null = null,
): V3dDeconvolveParameters {
    const params = {
        "@type": "afni.3dDeconvolve" as const,
        "input_dataset": input_dataset,
        "stim_base": stim_base,
        "fout": fout,
        "tout": tout,
    };
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    if (num_stimts !== null) {
        params["num_stimts"] = num_stimts;
    }
    if (stim_file !== null) {
        params["stim_file"] = stim_file;
    }
    if (stim_label !== null) {
        params["stim_label"] = stim_label;
    }
    if (stim_times !== null) {
        params["stim_times"] = stim_times;
    }
    if (iresp !== null) {
        params["iresp"] = iresp;
    }
    if (fitts !== null) {
        params["fitts"] = fitts;
    }
    if (bucket !== null) {
        params["bucket"] = bucket;
    }
    if (cbucket !== null) {
        params["cbucket"] = cbucket;
    }
    if (x1_d !== null) {
        params["x1D"] = x1_d;
    }
    if (jobs !== null) {
        params["jobs"] = jobs;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_deconvolve_cargs(
    params: V3dDeconvolveParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dDeconvolve");
    cargs.push(
        "-input",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    if ((params["num_stimts"] ?? null) !== null) {
        cargs.push(
            "-num_stimts",
            String((params["num_stimts"] ?? null))
        );
    }
    if ((params["stim_file"] ?? null) !== null) {
        cargs.push(
            "-stim_file",
            (params["stim_file"] ?? null)
        );
    }
    if ((params["stim_label"] ?? null) !== null) {
        cargs.push(
            "-stim_label",
            (params["stim_label"] ?? null)
        );
    }
    if ((params["stim_base"] ?? null)) {
        cargs.push("-stim_base");
    }
    if ((params["stim_times"] ?? null) !== null) {
        cargs.push(
            "-stim_times",
            (params["stim_times"] ?? null)
        );
    }
    if ((params["iresp"] ?? null) !== null) {
        cargs.push(
            "-iresp",
            (params["iresp"] ?? null)
        );
    }
    if ((params["fitts"] ?? null) !== null) {
        cargs.push(
            "-fitts",
            (params["fitts"] ?? null)
        );
    }
    if ((params["fout"] ?? null)) {
        cargs.push("-fout");
    }
    if ((params["tout"] ?? null)) {
        cargs.push("-tout");
    }
    if ((params["bucket"] ?? null) !== null) {
        cargs.push(
            "-bucket",
            (params["bucket"] ?? null)
        );
    }
    if ((params["cbucket"] ?? null) !== null) {
        cargs.push(
            "-cbucket",
            (params["cbucket"] ?? null)
        );
    }
    if ((params["x1D"] ?? null) !== null) {
        cargs.push(
            "-x1D",
            (params["x1D"] ?? null)
        );
    }
    if ((params["jobs"] ?? null) !== null) {
        cargs.push(
            "-jobs",
            String((params["jobs"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_deconvolve_outputs(
    params: V3dDeconvolveParameters,
    execution: Execution,
): V3dDeconvolveOutputs {
    const ret: V3dDeconvolveOutputs = {
        root: execution.outputFile("."),
        bucket_output: ((params["bucket"] ?? null) !== null) ? execution.outputFile([(params["bucket"] ?? null), ".HEAD"].join('')) : null,
        cbucket_output: ((params["cbucket"] ?? null) !== null) ? execution.outputFile([(params["cbucket"] ?? null), ".HEAD"].join('')) : null,
        iresp_output: ((params["iresp"] ?? null) !== null) ? execution.outputFile([(params["iresp"] ?? null), ".HEAD"].join('')) : null,
        fitts_output: ((params["fitts"] ?? null) !== null) ? execution.outputFile([(params["fitts"] ?? null), ".HEAD"].join('')) : null,
        x1d_file: ((params["x1D"] ?? null) !== null) ? execution.outputFile([(params["x1D"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


/**
 * Program to calculate the deconvolution of a measurement 3D+time dataset with a specified input stimulus time series.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dDeconvolveOutputs`).
 */
function v_3d_deconvolve_execute(
    params: V3dDeconvolveParameters,
    execution: Execution,
): V3dDeconvolveOutputs {
    params = execution.params(params)
    const cargs = v_3d_deconvolve_cargs(params, execution)
    const ret = v_3d_deconvolve_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Program to calculate the deconvolution of a measurement 3D+time dataset with a specified input stimulus time series.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Filename of 3D+time input dataset.
 * @param mask_dataset Filename of 3D mask dataset.
 * @param num_stimts Number of input stimulus time series.
 * @param stim_file Filename of kth time series input stimulus.
 * @param stim_label Label for kth input stimulus.
 * @param stim_base Kth input stimulus is part of the baseline model.
 * @param stim_times Deconvolution response model for kth stimulus.
 * @param iresp Prefix for 3D+time output dataset which will contain the kth estimated impulse response.
 * @param fitts Prefix for 3D+time output dataset which will contain the (full model) time series fit to the input data.
 * @param fout Flag to output the F-statistics for each stimulus.
 * @param tout Flag to output the t-statistics.
 * @param bucket Create one AFNI 'bucket' dataset containing various parameters of interest.
 * @param cbucket Save the regression coefficients (no statistics) into a dataset.
 * @param x1_d Save X matrix to a .xmat.1D (ASCII) file.
 * @param jobs Run the program with multiple jobs (sub-processes).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDeconvolveOutputs`).
 */
function v_3d_deconvolve(
    input_dataset: InputPathType,
    mask_dataset: InputPathType | null = null,
    num_stimts: number | null = null,
    stim_file: string | null = null,
    stim_label: string | null = null,
    stim_base: boolean = false,
    stim_times: string | null = null,
    iresp: string | null = null,
    fitts: string | null = null,
    fout: boolean = false,
    tout: boolean = false,
    bucket: string | null = null,
    cbucket: string | null = null,
    x1_d: string | null = null,
    jobs: number | null = null,
    runner: Runner | null = null,
): V3dDeconvolveOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DECONVOLVE_METADATA);
    const params = v_3d_deconvolve_params(input_dataset, mask_dataset, num_stimts, stim_file, stim_label, stim_base, stim_times, iresp, fitts, fout, tout, bucket, cbucket, x1_d, jobs)
    return v_3d_deconvolve_execute(params, execution);
}


export {
      V3dDeconvolveOutputs,
      V3dDeconvolveParameters,
      V_3D_DECONVOLVE_METADATA,
      v_3d_deconvolve,
      v_3d_deconvolve_cargs,
      v_3d_deconvolve_execute,
      v_3d_deconvolve_outputs,
      v_3d_deconvolve_params,
};
