// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_PFM_METADATA: Metadata = {
    id: "c5e5e30b454a1a81f02535de2e794be7d716492a.boutiques",
    name: "3dPFM",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dPfmParameters {
    "__STYXTYPE__": "3dPFM";
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dPFM": v_3d_pfm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dPFM": v_3d_pfm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_pfm(...)`.
 *
 * @interface
 */
interface V3dPfmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Prefix for the neuronal-related (i.e. deconvolved) time series.
     */
    beta: OutputPathType;
    /**
     * Prefix of the convolved neuronal-related time series.
     */
    betafitts: OutputPathType;
    /**
     * Prefix for the fitted time series.
     */
    fitts: OutputPathType;
    /**
     * Prefix for the residuals of the fit to the data.
     */
    resid: OutputPathType;
    /**
     * Prefix for the intercept of the model.
     */
    mean: OutputPathType;
    /**
     * Prefix for the estimates of the LHS parameters.
     */
    lhsest: OutputPathType;
    /**
     * Prefix for the fitted time series of the LHS parameters.
     */
    lhsfitts: OutputPathType;
    /**
     * Prefix for output volume with the regularization parameter of the deconvolution of each voxel.
     */
    lambda: OutputPathType;
    /**
     * Prefix for output volume of the cost function used to select the regularization parameter according to the selected criteria.
     */
    costs: OutputPathType;
    /**
     * Prefix for the T-statistics of beta at each time point.
     */
    tstats_beta: OutputPathType;
    /**
     * Prefix for degrees of freedom of the T-statistics of beta.
     */
    tdf_beta: OutputPathType;
    /**
     * Prefix for (normalized) z-scores of the T-statistics of beta.
     */
    z_tstats_beta: OutputPathType;
    /**
     * Prefix for the F-statistics of the deconvolved component.
     */
    fstats_beta: OutputPathType;
    /**
     * Prefix for degrees of freedom of Fstats_beta.
     */
    fdf_beta: OutputPathType;
    /**
     * Prefix for (normalized) z-scores of the Fstats_beta.
     */
    z_fstats_beta: OutputPathType;
    /**
     * Prefix for T-statistics of LHS regressors at each time point.
     */
    tstats_lhs: OutputPathType;
    /**
     * Prefix for degrees of freedom of the Tstats_LHS.
     */
    tdf_lhs: OutputPathType;
    /**
     * Prefix for (normalized) z-scores of the Tstats_LHS.
     */
    z_tstats_lhs: OutputPathType;
    /**
     * Prefix for the F-statistics of the LHS regressors.
     */
    fstats_lhs: OutputPathType;
    /**
     * Prefix for degrees of freedom of Fstats_LHS.
     */
    fdf_lhs: OutputPathType;
    /**
     * Prefix for (normalized) z-scores of Fstats_LHS.
     */
    z_fstats_lhs: OutputPathType;
    /**
     * Prefix for the F-statistics of the full model.
     */
    fstats_full: OutputPathType;
    /**
     * Prefix for degrees of freedom of Fstats_full.
     */
    fdf_full: OutputPathType;
    /**
     * Prefix for (normalized) z-scores of Fstats_full.
     */
    z_fstats_full: OutputPathType;
    /**
     * Prefix for R² (coefficient of determination) of the full model.
     */
    r2_full: OutputPathType;
    /**
     * Prefix for Adjusted R² coefficient for the full model.
     */
    r2adj_full: OutputPathType;
}


function v_3d_pfm_params(
): V3dPfmParameters {
    /**
     * Build parameters.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dPFM" as const,
    };
    return params;
}


function v_3d_pfm_cargs(
    params: V3dPfmParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dPFM");
    cargs.push("[PARAMETERS]");
    return cargs;
}


function v_3d_pfm_outputs(
    params: V3dPfmParameters,
    execution: Execution,
): V3dPfmOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dPfmOutputs = {
        root: execution.outputFile("."),
        beta: execution.outputFile(["[BETA]"].join('')),
        betafitts: execution.outputFile(["[BETAFITTS]"].join('')),
        fitts: execution.outputFile(["[FITTS]"].join('')),
        resid: execution.outputFile(["[RESID]"].join('')),
        mean: execution.outputFile(["[MEAN]"].join('')),
        lhsest: execution.outputFile(["[LHSEST]"].join('')),
        lhsfitts: execution.outputFile(["[LHSFITTS]"].join('')),
        lambda: execution.outputFile(["[LAMBDA]"].join('')),
        costs: execution.outputFile(["[COSTS]"].join('')),
        tstats_beta: execution.outputFile(["[TSTATS_BETA]"].join('')),
        tdf_beta: execution.outputFile(["[TDF_BETA]"].join('')),
        z_tstats_beta: execution.outputFile(["[Z_TSTATS_BETA]"].join('')),
        fstats_beta: execution.outputFile(["[FSTATS_BETA]"].join('')),
        fdf_beta: execution.outputFile(["[FDF_BETA]"].join('')),
        z_fstats_beta: execution.outputFile(["[Z_FSTATS_BETA]"].join('')),
        tstats_lhs: execution.outputFile(["[TSTATS_LHS]"].join('')),
        tdf_lhs: execution.outputFile(["[TDF_LHS]"].join('')),
        z_tstats_lhs: execution.outputFile(["[Z_TSTATS_LHS]"].join('')),
        fstats_lhs: execution.outputFile(["[FSTATS_LHS]"].join('')),
        fdf_lhs: execution.outputFile(["[FDF_LHS]"].join('')),
        z_fstats_lhs: execution.outputFile(["[Z_FSTATS_LHS]"].join('')),
        fstats_full: execution.outputFile(["[FSTATS_FULL]"].join('')),
        fdf_full: execution.outputFile(["[FDF_FULL]"].join('')),
        z_fstats_full: execution.outputFile(["[Z_FSTATS_FULL]"].join('')),
        r2_full: execution.outputFile(["[R2_FULL]"].join('')),
        r2adj_full: execution.outputFile(["[R2ADJ_FULL]"].join('')),
    };
    return ret;
}


function v_3d_pfm_execute(
    params: V3dPfmParameters,
    execution: Execution,
): V3dPfmOutputs {
    /**
     * Program for identifying brief BOLD events in fMRI time series using Paradigm Free Mapping.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dPfmOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_pfm_cargs(params, execution)
    const ret = v_3d_pfm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_pfm(
    runner: Runner | null = null,
): V3dPfmOutputs {
    /**
     * Program for identifying brief BOLD events in fMRI time series using Paradigm Free Mapping.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dPfmOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_PFM_METADATA);
    const params = v_3d_pfm_params()
    return v_3d_pfm_execute(params, execution);
}


export {
      V3dPfmOutputs,
      V3dPfmParameters,
      V_3D_PFM_METADATA,
      v_3d_pfm,
      v_3d_pfm_params,
};
