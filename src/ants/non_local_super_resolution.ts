// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NON_LOCAL_SUPER_RESOLUTION_METADATA: Metadata = {
    id: "51aada9b4dbce0b9d25369841901cb709639d1e3.boutiques",
    name: "NonLocalSuperResolution",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface NonLocalSuperResolutionParameters {
    "@type": "ants.NonLocalSuperResolution";
    "image_dimensionality"?: 2 | 3 | 4 | null | undefined;
    "input_image": InputPathType;
    "interpolated_image"?: InputPathType | null | undefined;
    "reference_image"?: InputPathType | null | undefined;
    "patch_radius"?: "1" | "1x1x1" | null | undefined;
    "search_radius"?: "3" | "3x3x3" | null | undefined;
    "intensity_difference_sigma"?: number | null | undefined;
    "patch_similarity_sigma"?: number | null | undefined;
    "scale_levels"?: string | null | undefined;
    "interpolation"?: "Linear" | "NearestNeighbor" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | null | undefined;
    "output": string;
    "verbose"?: 0 | 1 | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.NonLocalSuperResolution": non_local_super_resolution_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.NonLocalSuperResolution": non_local_super_resolution_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `non_local_super_resolution(...)`.
 *
 * @interface
 */
interface NonLocalSuperResolutionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The superresoluted output image.
     */
    superresoluted_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image A low-resolution input image to be superresoluted.
 * @param output The output consists of the noise corrected version of the input image. Optionally, one can also output the estimated noise image.
 * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param interpolated_image An interpolated version of the low-resolution image (such as B-spline). Specify either this option or a high-resolution multi-modal counterpart (cf the -k option).
 * @param reference_image A high-resolution reference multi-modal image. Assumed to be in the same space as the low-resolution input image. Specify either this option or an interpolated version (cf the -j option).
 * @param patch_radius Patch radius. Default = 1x1x1.
 * @param search_radius Search radius. Default = 3x3x3.
 * @param intensity_difference_sigma Intensity difference sigma. Default = 1.0.
 * @param patch_similarity_sigma Patch similarity sigma. Default = 1.0.
 * @param scale_levels Scale levels. Default = 32x16x8x2x1.
 * @param interpolation Several interpolation options are available in ITK.
 * @param verbose Verbose output.
 *
 * @returns Parameter dictionary
 */
function non_local_super_resolution_params(
    input_image: InputPathType,
    output: string,
    image_dimensionality: 2 | 3 | 4 | null = null,
    interpolated_image: InputPathType | null = null,
    reference_image: InputPathType | null = null,
    patch_radius: "1" | "1x1x1" | null = null,
    search_radius: "3" | "3x3x3" | null = null,
    intensity_difference_sigma: number | null = 1.0,
    patch_similarity_sigma: number | null = 1.0,
    scale_levels: string | null = "32x16x8x2x1",
    interpolation: "Linear" | "NearestNeighbor" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | null = null,
    verbose: 0 | 1 | null = null,
): NonLocalSuperResolutionParameters {
    const params = {
        "@type": "ants.NonLocalSuperResolution" as const,
        "input_image": input_image,
        "output": output,
    };
    if (image_dimensionality !== null) {
        params["image_dimensionality"] = image_dimensionality;
    }
    if (interpolated_image !== null) {
        params["interpolated_image"] = interpolated_image;
    }
    if (reference_image !== null) {
        params["reference_image"] = reference_image;
    }
    if (patch_radius !== null) {
        params["patch_radius"] = patch_radius;
    }
    if (search_radius !== null) {
        params["search_radius"] = search_radius;
    }
    if (intensity_difference_sigma !== null) {
        params["intensity_difference_sigma"] = intensity_difference_sigma;
    }
    if (patch_similarity_sigma !== null) {
        params["patch_similarity_sigma"] = patch_similarity_sigma;
    }
    if (scale_levels !== null) {
        params["scale_levels"] = scale_levels;
    }
    if (interpolation !== null) {
        params["interpolation"] = interpolation;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function non_local_super_resolution_cargs(
    params: NonLocalSuperResolutionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("NonLocalSuperResolution");
    if ((params["image_dimensionality"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["image_dimensionality"] ?? null))
        );
    }
    cargs.push(
        "-i",
        execution.inputFile((params["input_image"] ?? null))
    );
    if ((params["interpolated_image"] ?? null) !== null) {
        cargs.push(
            "-j",
            execution.inputFile((params["interpolated_image"] ?? null))
        );
    }
    if ((params["reference_image"] ?? null) !== null) {
        cargs.push(
            "-k",
            execution.inputFile((params["reference_image"] ?? null))
        );
    }
    if ((params["patch_radius"] ?? null) !== null) {
        cargs.push(
            "-p",
            (params["patch_radius"] ?? null)
        );
    }
    if ((params["search_radius"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["search_radius"] ?? null)
        );
    }
    if ((params["intensity_difference_sigma"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["intensity_difference_sigma"] ?? null))
        );
    }
    if ((params["patch_similarity_sigma"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["patch_similarity_sigma"] ?? null))
        );
    }
    if ((params["scale_levels"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["scale_levels"] ?? null)
        );
    }
    if ((params["interpolation"] ?? null) !== null) {
        cargs.push(
            "-n",
            (params["interpolation"] ?? null)
        );
    }
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function non_local_super_resolution_outputs(
    params: NonLocalSuperResolutionParameters,
    execution: Execution,
): NonLocalSuperResolutionOutputs {
    const ret: NonLocalSuperResolutionOutputs = {
        root: execution.outputFile("."),
        superresoluted_output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * NonLocalSuperResolution
 *
 * Non-local super resolution described in the papers by JV Manjon et al., focusing on MRI superresolution using self-similarity and image priors.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NonLocalSuperResolutionOutputs`).
 */
function non_local_super_resolution_execute(
    params: NonLocalSuperResolutionParameters,
    runner: Runner | null = null,
): NonLocalSuperResolutionOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NON_LOCAL_SUPER_RESOLUTION_METADATA);
    params = execution.params(params)
    const cargs = non_local_super_resolution_cargs(params, execution)
    const ret = non_local_super_resolution_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * NonLocalSuperResolution
 *
 * Non-local super resolution described in the papers by JV Manjon et al., focusing on MRI superresolution using self-similarity and image priors.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param input_image A low-resolution input image to be superresoluted.
 * @param output The output consists of the noise corrected version of the input image. Optionally, one can also output the estimated noise image.
 * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param interpolated_image An interpolated version of the low-resolution image (such as B-spline). Specify either this option or a high-resolution multi-modal counterpart (cf the -k option).
 * @param reference_image A high-resolution reference multi-modal image. Assumed to be in the same space as the low-resolution input image. Specify either this option or an interpolated version (cf the -j option).
 * @param patch_radius Patch radius. Default = 1x1x1.
 * @param search_radius Search radius. Default = 3x3x3.
 * @param intensity_difference_sigma Intensity difference sigma. Default = 1.0.
 * @param patch_similarity_sigma Patch similarity sigma. Default = 1.0.
 * @param scale_levels Scale levels. Default = 32x16x8x2x1.
 * @param interpolation Several interpolation options are available in ITK.
 * @param verbose Verbose output.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NonLocalSuperResolutionOutputs`).
 */
function non_local_super_resolution(
    input_image: InputPathType,
    output: string,
    image_dimensionality: 2 | 3 | 4 | null = null,
    interpolated_image: InputPathType | null = null,
    reference_image: InputPathType | null = null,
    patch_radius: "1" | "1x1x1" | null = null,
    search_radius: "3" | "3x3x3" | null = null,
    intensity_difference_sigma: number | null = 1.0,
    patch_similarity_sigma: number | null = 1.0,
    scale_levels: string | null = "32x16x8x2x1",
    interpolation: "Linear" | "NearestNeighbor" | "Gaussian" | "BSpline" | "CosineWindowedSinc" | "WelchWindowedSinc" | "HammingWindowedSinc" | "LanczosWindowedSinc" | null = null,
    verbose: 0 | 1 | null = null,
    runner: Runner | null = null,
): NonLocalSuperResolutionOutputs {
    const params = non_local_super_resolution_params(input_image, output, image_dimensionality, interpolated_image, reference_image, patch_radius, search_radius, intensity_difference_sigma, patch_similarity_sigma, scale_levels, interpolation, verbose)
    return non_local_super_resolution_execute(params, runner);
}


export {
      NON_LOCAL_SUPER_RESOLUTION_METADATA,
      NonLocalSuperResolutionOutputs,
      NonLocalSuperResolutionParameters,
      non_local_super_resolution,
      non_local_super_resolution_execute,
      non_local_super_resolution_params,
};
