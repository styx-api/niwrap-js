// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_REGISTER_TO_VOLUME_METADATA: Metadata = {
    id: "60c56ada6b1c4db76b113b110ab2c2c2aa2119c5.boutiques",
    name: "mris_register_to_volume",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRegisterToVolumeParameters {
    "@type": "freesurfer.mris_register_to_volume";
    "surface": string;
    "pial": string;
    "pial_only"?: string | null | undefined;
    "reg": string;
    "noglobal": boolean;
    "median": boolean;
    "mri_reg": string;
    "tx_mmd"?: Array<number> | null | undefined;
    "ty_mmd"?: Array<number> | null | undefined;
    "tz_mmd"?: Array<number> | null | undefined;
    "ax_mmd"?: Array<number> | null | undefined;
    "ay_mmd"?: Array<number> | null | undefined;
    "az_mmd"?: Array<number> | null | undefined;
    "cost"?: string | null | undefined;
    "interp"?: string | null | undefined;
    "noise"?: number | null | undefined;
    "seed"?: number | null | undefined;
    "skip"?: Array<number> | null | undefined;
    "sigma"?: Array<number> | null | undefined;
    "cnr": boolean;
    "max_rot"?: number | null | undefined;
    "max_trans"?: number | null | undefined;
    "border"?: number | null | undefined;
    "subject"?: string | null | undefined;
    "dilate"?: number | null | undefined;
    "patch"?: string | null | undefined;
    "label"?: string | null | undefined;
    "out_reg"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_register_to_volume": mris_register_to_volume_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_register_to_volume(...)`.
 *
 * @interface
 */
interface MrisRegisterToVolumeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface The main surface file.
 * @param pial Pial surface name.
 * @param reg Registration file.
 * @param mri_reg MRI volume registration file.
 * @param pial_only Pial surface name (only).
 * @param noglobal Do not use global optimization.
 * @param median Use median filtering.
 * @param tx_mmd Translation in x (min, max, delta).
 * @param ty_mmd Translation in y (min, max, delta).
 * @param tz_mmd Translation in z (min, max, delta).
 * @param ax_mmd Rotation about x (min, max, delta).
 * @param ay_mmd Rotation about y (min, max, delta).
 * @param az_mmd Rotation about z (min, max, delta).
 * @param cost Cost file.
 * @param interp Interpolation type: trilinear or nearest.
 * @param noise Add noise with stddev for testing sensitivity.
 * @param seed Random seed for use with noise.
 * @param skip Number of vertices to skip.
 * @param sigma Size of blurring kernels to use.
 * @param cnr Use CNR-based similarity function.
 * @param max_rot Max angle (degrees) to search over.
 * @param max_trans Max translation (mm) to search over.
 * @param border Size of the border region to ignore.
 * @param subject Specify name of subject (for register.dat file).
 * @param dilate Dilate ripflags ndil times.
 * @param patch Load patch and limit calculations.
 * @param label Load label and limit calculations.
 * @param out_reg Output registration at lowest cost.
 *
 * @returns Parameter dictionary
 */
function mris_register_to_volume_params(
    surface: string,
    pial: string,
    reg: string,
    mri_reg: string,
    pial_only: string | null = null,
    noglobal: boolean = false,
    median: boolean = false,
    tx_mmd: Array<number> | null = null,
    ty_mmd: Array<number> | null = null,
    tz_mmd: Array<number> | null = null,
    ax_mmd: Array<number> | null = null,
    ay_mmd: Array<number> | null = null,
    az_mmd: Array<number> | null = null,
    cost: string | null = null,
    interp: string | null = null,
    noise: number | null = null,
    seed: number | null = null,
    skip: Array<number> | null = null,
    sigma: Array<number> | null = null,
    cnr: boolean = false,
    max_rot: number | null = null,
    max_trans: number | null = null,
    border: number | null = null,
    subject: string | null = null,
    dilate: number | null = null,
    patch: string | null = null,
    label: string | null = null,
    out_reg: string | null = null,
): MrisRegisterToVolumeParameters {
    const params = {
        "@type": "freesurfer.mris_register_to_volume" as const,
        "surface": surface,
        "pial": pial,
        "reg": reg,
        "noglobal": noglobal,
        "median": median,
        "mri_reg": mri_reg,
        "cnr": cnr,
    };
    if (pial_only !== null) {
        params["pial_only"] = pial_only;
    }
    if (tx_mmd !== null) {
        params["tx_mmd"] = tx_mmd;
    }
    if (ty_mmd !== null) {
        params["ty_mmd"] = ty_mmd;
    }
    if (tz_mmd !== null) {
        params["tz_mmd"] = tz_mmd;
    }
    if (ax_mmd !== null) {
        params["ax_mmd"] = ax_mmd;
    }
    if (ay_mmd !== null) {
        params["ay_mmd"] = ay_mmd;
    }
    if (az_mmd !== null) {
        params["az_mmd"] = az_mmd;
    }
    if (cost !== null) {
        params["cost"] = cost;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (noise !== null) {
        params["noise"] = noise;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (skip !== null) {
        params["skip"] = skip;
    }
    if (sigma !== null) {
        params["sigma"] = sigma;
    }
    if (max_rot !== null) {
        params["max_rot"] = max_rot;
    }
    if (max_trans !== null) {
        params["max_trans"] = max_trans;
    }
    if (border !== null) {
        params["border"] = border;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (patch !== null) {
        params["patch"] = patch;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (out_reg !== null) {
        params["out_reg"] = out_reg;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_register_to_volume_cargs(
    params: MrisRegisterToVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_register_to_volume");
    cargs.push(
        "--surf",
        (params["surface"] ?? null)
    );
    cargs.push(
        "--pial",
        (params["pial"] ?? null)
    );
    if ((params["pial_only"] ?? null) !== null) {
        cargs.push(
            "--pial_only",
            (params["pial_only"] ?? null)
        );
    }
    cargs.push(
        "--reg",
        (params["reg"] ?? null)
    );
    if ((params["noglobal"] ?? null)) {
        cargs.push("--noglobal");
    }
    if ((params["median"] ?? null)) {
        cargs.push("--median");
    }
    cargs.push(
        "--mri_reg",
        (params["mri_reg"] ?? null)
    );
    if ((params["tx_mmd"] ?? null) !== null) {
        cargs.push(
            "--tx-mmd",
            ...(params["tx_mmd"] ?? null).map(String)
        );
    }
    if ((params["ty_mmd"] ?? null) !== null) {
        cargs.push(
            "--ty-mmd",
            ...(params["ty_mmd"] ?? null).map(String)
        );
    }
    if ((params["tz_mmd"] ?? null) !== null) {
        cargs.push(
            "--tz-mmd",
            ...(params["tz_mmd"] ?? null).map(String)
        );
    }
    if ((params["ax_mmd"] ?? null) !== null) {
        cargs.push(
            "--ax-mmd",
            ...(params["ax_mmd"] ?? null).map(String)
        );
    }
    if ((params["ay_mmd"] ?? null) !== null) {
        cargs.push(
            "--ay-mmd",
            ...(params["ay_mmd"] ?? null).map(String)
        );
    }
    if ((params["az_mmd"] ?? null) !== null) {
        cargs.push(
            "--az-mmd",
            ...(params["az_mmd"] ?? null).map(String)
        );
    }
    if ((params["cost"] ?? null) !== null) {
        cargs.push(
            "--cost",
            (params["cost"] ?? null)
        );
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "--interp",
            (params["interp"] ?? null)
        );
    }
    if ((params["noise"] ?? null) !== null) {
        cargs.push(
            "--noise",
            String((params["noise"] ?? null))
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["skip"] ?? null) !== null) {
        cargs.push(
            "--skip",
            ...(params["skip"] ?? null).map(String)
        );
    }
    if ((params["sigma"] ?? null) !== null) {
        cargs.push(
            "--sigma",
            ...(params["sigma"] ?? null).map(String)
        );
    }
    if ((params["cnr"] ?? null)) {
        cargs.push("--CNR");
    }
    if ((params["max_rot"] ?? null) !== null) {
        cargs.push(
            "--max_rot",
            String((params["max_rot"] ?? null))
        );
    }
    if ((params["max_trans"] ?? null) !== null) {
        cargs.push(
            "--max_trans",
            String((params["max_trans"] ?? null))
        );
    }
    if ((params["border"] ?? null) !== null) {
        cargs.push(
            "--border",
            String((params["border"] ?? null))
        );
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "--dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["patch"] ?? null) !== null) {
        cargs.push(
            "--patch",
            (params["patch"] ?? null)
        );
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "--label",
            (params["label"] ?? null)
        );
    }
    if ((params["out_reg"] ?? null) !== null) {
        cargs.push(
            "--out-reg",
            (params["out_reg"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_register_to_volume_outputs(
    params: MrisRegisterToVolumeParameters,
    execution: Execution,
): MrisRegisterToVolumeOutputs {
    const ret: MrisRegisterToVolumeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_register_to_volume
 *
 * Aligns cortical surfaces to a volumetric template.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRegisterToVolumeOutputs`).
 */
function mris_register_to_volume_execute(
    params: MrisRegisterToVolumeParameters,
    runner: Runner | null = null,
): MrisRegisterToVolumeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_REGISTER_TO_VOLUME_METADATA);
    params = execution.params(params)
    const cargs = mris_register_to_volume_cargs(params, execution)
    const ret = mris_register_to_volume_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_register_to_volume
 *
 * Aligns cortical surfaces to a volumetric template.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param surface The main surface file.
 * @param pial Pial surface name.
 * @param reg Registration file.
 * @param mri_reg MRI volume registration file.
 * @param pial_only Pial surface name (only).
 * @param noglobal Do not use global optimization.
 * @param median Use median filtering.
 * @param tx_mmd Translation in x (min, max, delta).
 * @param ty_mmd Translation in y (min, max, delta).
 * @param tz_mmd Translation in z (min, max, delta).
 * @param ax_mmd Rotation about x (min, max, delta).
 * @param ay_mmd Rotation about y (min, max, delta).
 * @param az_mmd Rotation about z (min, max, delta).
 * @param cost Cost file.
 * @param interp Interpolation type: trilinear or nearest.
 * @param noise Add noise with stddev for testing sensitivity.
 * @param seed Random seed for use with noise.
 * @param skip Number of vertices to skip.
 * @param sigma Size of blurring kernels to use.
 * @param cnr Use CNR-based similarity function.
 * @param max_rot Max angle (degrees) to search over.
 * @param max_trans Max translation (mm) to search over.
 * @param border Size of the border region to ignore.
 * @param subject Specify name of subject (for register.dat file).
 * @param dilate Dilate ripflags ndil times.
 * @param patch Load patch and limit calculations.
 * @param label Load label and limit calculations.
 * @param out_reg Output registration at lowest cost.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRegisterToVolumeOutputs`).
 */
function mris_register_to_volume(
    surface: string,
    pial: string,
    reg: string,
    mri_reg: string,
    pial_only: string | null = null,
    noglobal: boolean = false,
    median: boolean = false,
    tx_mmd: Array<number> | null = null,
    ty_mmd: Array<number> | null = null,
    tz_mmd: Array<number> | null = null,
    ax_mmd: Array<number> | null = null,
    ay_mmd: Array<number> | null = null,
    az_mmd: Array<number> | null = null,
    cost: string | null = null,
    interp: string | null = null,
    noise: number | null = null,
    seed: number | null = null,
    skip: Array<number> | null = null,
    sigma: Array<number> | null = null,
    cnr: boolean = false,
    max_rot: number | null = null,
    max_trans: number | null = null,
    border: number | null = null,
    subject: string | null = null,
    dilate: number | null = null,
    patch: string | null = null,
    label: string | null = null,
    out_reg: string | null = null,
    runner: Runner | null = null,
): MrisRegisterToVolumeOutputs {
    const params = mris_register_to_volume_params(surface, pial, reg, mri_reg, pial_only, noglobal, median, tx_mmd, ty_mmd, tz_mmd, ax_mmd, ay_mmd, az_mmd, cost, interp, noise, seed, skip, sigma, cnr, max_rot, max_trans, border, subject, dilate, patch, label, out_reg)
    return mris_register_to_volume_execute(params, runner);
}


export {
      MRIS_REGISTER_TO_VOLUME_METADATA,
      MrisRegisterToVolumeOutputs,
      MrisRegisterToVolumeParameters,
      mris_register_to_volume,
      mris_register_to_volume_execute,
      mris_register_to_volume_params,
};
