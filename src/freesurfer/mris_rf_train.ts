// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_RF_TRAIN_METADATA: Metadata = {
    id: "bf5f4317681a309ec278b22f75586f1d97e41b50.boutiques",
    name: "mris_rf_train",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRfTrainParameters {
    "@type"?: "freesurfer/mris_rf_train";
    "subjects": Array<string>;
    "output_name": string;
    "hemi"?: string | null | undefined;
    "surf"?: string | null | undefined;
}
type MrisRfTrainParametersTagged = Required<Pick<MrisRfTrainParameters, '@type'>> & MrisRfTrainParameters;


/**
 * Output object returned when calling `MrisRfTrainParameters(...)`.
 *
 * @interface
 */
interface MrisRfTrainOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjects List of subjects to process
 * @param output_name Output name for the trained model
 * @param hemi Process specified hemisphere instead of the default 'lh'.
 * @param surf Change the default surface name from 'white' to the specified surface.
 *
 * @returns Parameter dictionary
 */
function mris_rf_train_params(
    subjects: Array<string>,
    output_name: string,
    hemi: string | null = null,
    surf: string | null = null,
): MrisRfTrainParametersTagged {
    const params = {
        "@type": "freesurfer/mris_rf_train" as const,
        "subjects": subjects,
        "output_name": output_name,
    };
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_rf_train_cargs(
    params: MrisRfTrainParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_rf_train");
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_name"] ?? null));
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_rf_train_outputs(
    params: MrisRfTrainParameters,
    execution: Execution,
): MrisRfTrainOutputs {
    const ret: MrisRfTrainOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_rf_train
 *
 * Tool for training a random forest classifier using MRIS surface data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRfTrainOutputs`).
 */
function mris_rf_train_execute(
    params: MrisRfTrainParameters,
    runner: Runner | null = null,
): MrisRfTrainOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_RF_TRAIN_METADATA);
    params = execution.params(params)
    const cargs = mris_rf_train_cargs(params, execution)
    const ret = mris_rf_train_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_rf_train
 *
 * Tool for training a random forest classifier using MRIS surface data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects List of subjects to process
 * @param output_name Output name for the trained model
 * @param hemi Process specified hemisphere instead of the default 'lh'.
 * @param surf Change the default surface name from 'white' to the specified surface.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRfTrainOutputs`).
 */
function mris_rf_train(
    subjects: Array<string>,
    output_name: string,
    hemi: string | null = null,
    surf: string | null = null,
    runner: Runner | null = null,
): MrisRfTrainOutputs {
    const params = mris_rf_train_params(subjects, output_name, hemi, surf)
    return mris_rf_train_execute(params, runner);
}


export {
      MRIS_RF_TRAIN_METADATA,
      MrisRfTrainOutputs,
      mris_rf_train,
      mris_rf_train_execute,
      mris_rf_train_params,
};
