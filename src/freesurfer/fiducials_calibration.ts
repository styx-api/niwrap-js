// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIDUCIALS_CALIBRATION_METADATA: Metadata = {
    id: "b87cb0a61e77503c416b5bd15c7cec1c1ef97456.boutiques",
    name: "fiducials_calibration",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FiducialsCalibrationParameters {
    "@type": "freesurfer.fiducials_calibration";
    "qt_plugin_installation"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fiducials_calibration": fiducials_calibration_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fiducials_calibration(...)`.
 *
 * @interface
 */
interface FiducialsCalibrationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param qt_plugin_installation This application requires a functional Qt installation. If it fails to start, reinstalling the application might fix the problem.
 *
 * @returns Parameter dictionary
 */
function fiducials_calibration_params(
    qt_plugin_installation: string | null = "Check Qt installation and platform plugin availability",
): FiducialsCalibrationParameters {
    const params = {
        "@type": "freesurfer.fiducials_calibration" as const,
    };
    if (qt_plugin_installation !== null) {
        params["qt_plugin_installation"] = qt_plugin_installation;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fiducials_calibration_cargs(
    params: FiducialsCalibrationParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fiducials_calibration");
    if ((params["qt_plugin_installation"] ?? null) !== null) {
        cargs.push((params["qt_plugin_installation"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fiducials_calibration_outputs(
    params: FiducialsCalibrationParameters,
    execution: Execution,
): FiducialsCalibrationOutputs {
    const ret: FiducialsCalibrationOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool used for calibrating fiducials.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FiducialsCalibrationOutputs`).
 */
function fiducials_calibration_execute(
    params: FiducialsCalibrationParameters,
    runner: Runner | null = null,
): FiducialsCalibrationOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIDUCIALS_CALIBRATION_METADATA);
    params = execution.params(params)
    const cargs = fiducials_calibration_cargs(params, execution)
    const ret = fiducials_calibration_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool used for calibrating fiducials.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param qt_plugin_installation This application requires a functional Qt installation. If it fails to start, reinstalling the application might fix the problem.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FiducialsCalibrationOutputs`).
 */
function fiducials_calibration(
    qt_plugin_installation: string | null = "Check Qt installation and platform plugin availability",
    runner: Runner | null = null,
): FiducialsCalibrationOutputs {
    const params = fiducials_calibration_params(qt_plugin_installation)
    return fiducials_calibration_execute(params, runner);
}


export {
      FIDUCIALS_CALIBRATION_METADATA,
      FiducialsCalibrationOutputs,
      FiducialsCalibrationParameters,
      fiducials_calibration,
      fiducials_calibration_execute,
      fiducials_calibration_params,
};
