// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_STOPMASK_METADATA: Metadata = {
    id: "38e7fa2abd35271883a0f65f5dbaff1fc083659f.boutiques",
    name: "mri_stopmask",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriStopmaskParameters {
    "@type": "freesurfer.mri_stopmask";
    "output_mask": string;
    "filled": Array<InputPathType>;
    "aseg_presurf": InputPathType;
    "lateral_ventricles": boolean;
    "wmsa"?: number | null | undefined;
    "wm_voxels"?: InputPathType | null | undefined;
    "brain_final_surfs"?: InputPathType | null | undefined;
    "no_filled": boolean;
    "no_lv": boolean;
    "no_wmsa": boolean;
    "no_wm": boolean;
    "no_bfs": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_stopmask": mri_stopmask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_stopmask": mri_stopmask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_stopmask(...)`.
 *
 * @interface
 */
interface MriStopmaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The generated stop mask output file
     */
    generated_mask: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_mask Output stop mask in volume format
 * @param filled Include voxels edited fill voxels that are set in the filled.mgz
 * @param aseg_presurf Used with --lv and/or --wmsa; Note: must be aseg.presurf.mgz, not aseg.mgz
 * @param lateral_ventricles Add lateral ventricles and choroid plexus to the mask (needs --aseg)
 * @param wmsa Add WM hypointensities to the mask (needs --aseg); erode by given distance away from any adjacent cortex
 * @param wm_voxels Include voxels that =255 from wm.mgz
 * @param brain_final_surfs Include voxels that =255 from brain.finalsurfs.mgz
 * @param no_filled Turns off --filled option
 * @param no_lv Turns off --lv option
 * @param no_wmsa Turns off --wmsa option
 * @param no_wm Turns off --wm option
 * @param no_bfs Turns off --bfs option
 *
 * @returns Parameter dictionary
 */
function mri_stopmask_params(
    output_mask: string,
    filled: Array<InputPathType>,
    aseg_presurf: InputPathType,
    lateral_ventricles: boolean = false,
    wmsa: number | null = null,
    wm_voxels: InputPathType | null = null,
    brain_final_surfs: InputPathType | null = null,
    no_filled: boolean = false,
    no_lv: boolean = false,
    no_wmsa: boolean = false,
    no_wm: boolean = false,
    no_bfs: boolean = false,
): MriStopmaskParameters {
    const params = {
        "@type": "freesurfer.mri_stopmask" as const,
        "output_mask": output_mask,
        "filled": filled,
        "aseg_presurf": aseg_presurf,
        "lateral_ventricles": lateral_ventricles,
        "no_filled": no_filled,
        "no_lv": no_lv,
        "no_wmsa": no_wmsa,
        "no_wm": no_wm,
        "no_bfs": no_bfs,
    };
    if (wmsa !== null) {
        params["wmsa"] = wmsa;
    }
    if (wm_voxels !== null) {
        params["wm_voxels"] = wm_voxels;
    }
    if (brain_final_surfs !== null) {
        params["brain_final_surfs"] = brain_final_surfs;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_stopmask_cargs(
    params: MriStopmaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_stopmask");
    cargs.push(
        "--o",
        (params["output_mask"] ?? null)
    );
    cargs.push(
        "--filled",
        ...(params["filled"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "--aseg",
        execution.inputFile((params["aseg_presurf"] ?? null))
    );
    if ((params["lateral_ventricles"] ?? null)) {
        cargs.push("--lv");
    }
    if ((params["wmsa"] ?? null) !== null) {
        cargs.push(
            "--wmsa",
            String((params["wmsa"] ?? null))
        );
    }
    if ((params["wm_voxels"] ?? null) !== null) {
        cargs.push(
            "--wm",
            execution.inputFile((params["wm_voxels"] ?? null))
        );
    }
    if ((params["brain_final_surfs"] ?? null) !== null) {
        cargs.push(
            "--bfs",
            execution.inputFile((params["brain_final_surfs"] ?? null))
        );
    }
    if ((params["no_filled"] ?? null)) {
        cargs.push("--no-filled");
    }
    if ((params["no_lv"] ?? null)) {
        cargs.push("--no-lv");
    }
    if ((params["no_wmsa"] ?? null)) {
        cargs.push("--no-wmsa");
    }
    if ((params["no_wm"] ?? null)) {
        cargs.push("--no-wm");
    }
    if ((params["no_bfs"] ?? null)) {
        cargs.push("--no-bfs");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_stopmask_outputs(
    params: MriStopmaskParameters,
    execution: Execution,
): MriStopmaskOutputs {
    const ret: MriStopmaskOutputs = {
        root: execution.outputFile("."),
        generated_mask: execution.outputFile([(params["output_mask"] ?? null)].join('')),
    };
    return ret;
}


/**
 * This program creates a mask used to stop the search for the maximum gradient in mris_place_surface, preventing the surface from wandering into areas it should not.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriStopmaskOutputs`).
 */
function mri_stopmask_execute(
    params: MriStopmaskParameters,
    runner: Runner | null = null,
): MriStopmaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_STOPMASK_METADATA);
    params = execution.params(params)
    const cargs = mri_stopmask_cargs(params, execution)
    const ret = mri_stopmask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program creates a mask used to stop the search for the maximum gradient in mris_place_surface, preventing the surface from wandering into areas it should not.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param output_mask Output stop mask in volume format
 * @param filled Include voxels edited fill voxels that are set in the filled.mgz
 * @param aseg_presurf Used with --lv and/or --wmsa; Note: must be aseg.presurf.mgz, not aseg.mgz
 * @param lateral_ventricles Add lateral ventricles and choroid plexus to the mask (needs --aseg)
 * @param wmsa Add WM hypointensities to the mask (needs --aseg); erode by given distance away from any adjacent cortex
 * @param wm_voxels Include voxels that =255 from wm.mgz
 * @param brain_final_surfs Include voxels that =255 from brain.finalsurfs.mgz
 * @param no_filled Turns off --filled option
 * @param no_lv Turns off --lv option
 * @param no_wmsa Turns off --wmsa option
 * @param no_wm Turns off --wm option
 * @param no_bfs Turns off --bfs option
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriStopmaskOutputs`).
 */
function mri_stopmask(
    output_mask: string,
    filled: Array<InputPathType>,
    aseg_presurf: InputPathType,
    lateral_ventricles: boolean = false,
    wmsa: number | null = null,
    wm_voxels: InputPathType | null = null,
    brain_final_surfs: InputPathType | null = null,
    no_filled: boolean = false,
    no_lv: boolean = false,
    no_wmsa: boolean = false,
    no_wm: boolean = false,
    no_bfs: boolean = false,
    runner: Runner | null = null,
): MriStopmaskOutputs {
    const params = mri_stopmask_params(output_mask, filled, aseg_presurf, lateral_ventricles, wmsa, wm_voxels, brain_final_surfs, no_filled, no_lv, no_wmsa, no_wm, no_bfs)
    return mri_stopmask_execute(params, runner);
}


export {
      MRI_STOPMASK_METADATA,
      MriStopmaskOutputs,
      MriStopmaskParameters,
      mri_stopmask,
      mri_stopmask_execute,
      mri_stopmask_params,
};
