// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CA_LABEL_METADATA: Metadata = {
    id: "035eecaadad51f1937fb29e024f977f0c081a952.boutiques",
    name: "mri_ca_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCaLabelParameters {
    "__STYXTYPE__": "mri_ca_label";
    "input_volumes": Array<InputPathType>;
    "transform_file": InputPathType;
    "gca_file": InputPathType;
    "output_volume": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_ca_label": mri_ca_label_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_ca_label": mri_ca_label_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_ca_label(...)`.
 *
 * @interface
 */
interface MriCaLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output labeled volume.
     */
    output_vol: OutputPathType;
}


function mri_ca_label_params(
    input_volumes: Array<InputPathType>,
    transform_file: InputPathType,
    gca_file: InputPathType,
    output_volume: string,
): MriCaLabelParameters {
    /**
     * Build parameters.
    
     * @param input_volumes Input MRI volumes.
     * @param transform_file Transform file for the registration.
     * @param gca_file GCA file for the atlas.
     * @param output_volume Output labeled volume.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_ca_label" as const,
        "input_volumes": input_volumes,
        "transform_file": transform_file,
        "gca_file": gca_file,
        "output_volume": output_volume,
    };
    return params;
}


function mri_ca_label_cargs(
    params: MriCaLabelParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_ca_label");
    cargs.push(...(params["input_volumes"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(execution.inputFile((params["transform_file"] ?? null)));
    cargs.push(execution.inputFile((params["gca_file"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    cargs.push("[OPTIONS]");
    return cargs;
}


function mri_ca_label_outputs(
    params: MriCaLabelParameters,
    execution: Execution,
): MriCaLabelOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriCaLabelOutputs = {
        root: execution.outputFile("."),
        output_vol: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


function mri_ca_label_execute(
    params: MriCaLabelParameters,
    execution: Execution,
): MriCaLabelOutputs {
    /**
     * MRI cortical annotation labeler using atlas prior (GCA).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriCaLabelOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_ca_label_cargs(params, execution)
    const ret = mri_ca_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_ca_label(
    input_volumes: Array<InputPathType>,
    transform_file: InputPathType,
    gca_file: InputPathType,
    output_volume: string,
    runner: Runner | null = null,
): MriCaLabelOutputs {
    /**
     * MRI cortical annotation labeler using atlas prior (GCA).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_volumes Input MRI volumes.
     * @param transform_file Transform file for the registration.
     * @param gca_file GCA file for the atlas.
     * @param output_volume Output labeled volume.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriCaLabelOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CA_LABEL_METADATA);
    const params = mri_ca_label_params(input_volumes, transform_file, gca_file, output_volume)
    return mri_ca_label_execute(params, execution);
}


export {
      MRI_CA_LABEL_METADATA,
      MriCaLabelOutputs,
      MriCaLabelParameters,
      mri_ca_label,
      mri_ca_label_params,
};
