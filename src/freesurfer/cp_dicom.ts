// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CP_DICOM_METADATA: Metadata = {
    id: "e87057efacb16ed69de0523e99719b16d1c3fb64.boutiques",
    name: "cp-dicom",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface CpDicomParameters {
    "__STYXTYPE__": "cp-dicom";
    "dicom_dir": string;
    "output_dir": string;
    "debug": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cp-dicom": cp_dicom_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cp_dicom(...)`.
 *
 * @interface
 */
interface CpDicomOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function cp_dicom_params(
    dicom_dir: string,
    output_dir: string,
    debug: boolean = false,
): CpDicomParameters {
    /**
     * Build parameters.
    
     * @param dicom_dir Directory containing DICOM files
     * @param output_dir Output directory where sorted DICOM files will be stored
     * @param debug Print additional debug information
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cp-dicom" as const,
        "dicom_dir": dicom_dir,
        "output_dir": output_dir,
        "debug": debug,
    };
    return params;
}


function cp_dicom_cargs(
    params: CpDicomParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("cp-dicom");
    cargs.push(
        "-d",
        (params["dicom_dir"] ?? null)
    );
    cargs.push(
        "-o",
        (params["output_dir"] ?? null)
    );
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    return cargs;
}


function cp_dicom_outputs(
    params: CpDicomParameters,
    execution: Execution,
): CpDicomOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CpDicomOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function cp_dicom_execute(
    params: CpDicomParameters,
    execution: Execution,
): CpDicomOutputs {
    /**
     * Copies DICOM files into separate directories for each series based on DICOM headers.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CpDicomOutputs`).
     */
    params = execution.params(params)
    const cargs = cp_dicom_cargs(params, execution)
    const ret = cp_dicom_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cp_dicom(
    dicom_dir: string,
    output_dir: string,
    debug: boolean = false,
    runner: Runner | null = null,
): CpDicomOutputs {
    /**
     * Copies DICOM files into separate directories for each series based on DICOM headers.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param dicom_dir Directory containing DICOM files
     * @param output_dir Output directory where sorted DICOM files will be stored
     * @param debug Print additional debug information
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CpDicomOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CP_DICOM_METADATA);
    const params = cp_dicom_params(dicom_dir, output_dir, debug)
    return cp_dicom_execute(params, execution);
}


export {
      CP_DICOM_METADATA,
      CpDicomOutputs,
      CpDicomParameters,
      cp_dicom,
      cp_dicom_params,
};
