// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TBSS_NON_FA_METADATA: Metadata = {
    id: "dbc57ea5a0d8fe174e4eccf2e1d1fdfb3af35aed.boutiques",
    name: "tbss_non_FA",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface TbssNonFaParameters {
    "@type"?: "fsl/tbss_non_FA";
    "concat_auto": boolean;
    "output_file": string;
    "input_files": Array<InputPathType>;
    "concat_x": boolean;
    "concat_y": boolean;
    "concat_z": boolean;
    "concat_t": boolean;
    "concat_tr"?: number | null | undefined;
    "volume_number"?: number | null | undefined;
}
type TbssNonFaParametersTagged = Required<Pick<TbssNonFaParameters, '@type'>> & TbssNonFaParameters;


/**
 * Output object returned when calling `TbssNonFaParameters(...)`.
 *
 * @interface
 */
interface TbssNonFaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Merged output file
     */
    merged_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_file Output file for merged images.
 * @param input_files Images to concatenate.
 * @param concat_auto Auto-choose: single slices -> volume, volumes -> 4D (time series).
 * @param concat_x Concatenate images in the x direction.
 * @param concat_y Concatenate images in the y direction.
 * @param concat_z Concatenate images in the z direction.
 * @param concat_t Concatenate images in time.
 * @param concat_tr Concatenate images in time and set the output image TR (repetition time) to the final option value.
 * @param volume_number Only use volume <N> from each input file (first volume is 0 not 1).
 *
 * @returns Parameter dictionary
 */
function tbss_non_fa_params(
    output_file: string,
    input_files: Array<InputPathType>,
    concat_auto: boolean = false,
    concat_x: boolean = false,
    concat_y: boolean = false,
    concat_z: boolean = false,
    concat_t: boolean = false,
    concat_tr: number | null = null,
    volume_number: number | null = null,
): TbssNonFaParametersTagged {
    const params = {
        "@type": "fsl/tbss_non_FA" as const,
        "concat_auto": concat_auto,
        "output_file": output_file,
        "input_files": input_files,
        "concat_x": concat_x,
        "concat_y": concat_y,
        "concat_z": concat_z,
        "concat_t": concat_t,
    };
    if (concat_tr !== null) {
        params["concat_tr"] = concat_tr;
    }
    if (volume_number !== null) {
        params["volume_number"] = volume_number;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tbss_non_fa_cargs(
    params: TbssNonFaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tbss_non_FA");
    if ((params["concat_auto"] ?? false)) {
        cargs.push("-a");
    }
    cargs.push((params["output_file"] ?? null));
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["concat_x"] ?? false)) {
        cargs.push("-x");
    }
    if ((params["concat_y"] ?? false)) {
        cargs.push("-y");
    }
    if ((params["concat_z"] ?? false)) {
        cargs.push("-z");
    }
    if ((params["concat_t"] ?? false)) {
        cargs.push("-t");
    }
    if ((params["concat_tr"] ?? null) !== null) {
        cargs.push(
            "-tr",
            String((params["concat_tr"] ?? null))
        );
    }
    if ((params["volume_number"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["volume_number"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tbss_non_fa_outputs(
    params: TbssNonFaParameters,
    execution: Execution,
): TbssNonFaOutputs {
    const ret: TbssNonFaOutputs = {
        root: execution.outputFile("."),
        merged_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * tbss_non_FA
 *
 * TBSS processing for non-FA images.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TbssNonFaOutputs`).
 */
function tbss_non_fa_execute(
    params: TbssNonFaParameters,
    runner: Runner | null = null,
): TbssNonFaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TBSS_NON_FA_METADATA);
    params = execution.params(params)
    const cargs = tbss_non_fa_cargs(params, execution)
    const ret = tbss_non_fa_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tbss_non_FA
 *
 * TBSS processing for non-FA images.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param output_file Output file for merged images.
 * @param input_files Images to concatenate.
 * @param concat_auto Auto-choose: single slices -> volume, volumes -> 4D (time series).
 * @param concat_x Concatenate images in the x direction.
 * @param concat_y Concatenate images in the y direction.
 * @param concat_z Concatenate images in the z direction.
 * @param concat_t Concatenate images in time.
 * @param concat_tr Concatenate images in time and set the output image TR (repetition time) to the final option value.
 * @param volume_number Only use volume <N> from each input file (first volume is 0 not 1).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TbssNonFaOutputs`).
 */
function tbss_non_fa(
    output_file: string,
    input_files: Array<InputPathType>,
    concat_auto: boolean = false,
    concat_x: boolean = false,
    concat_y: boolean = false,
    concat_z: boolean = false,
    concat_t: boolean = false,
    concat_tr: number | null = null,
    volume_number: number | null = null,
    runner: Runner | null = null,
): TbssNonFaOutputs {
    const params = tbss_non_fa_params(output_file, input_files, concat_auto, concat_x, concat_y, concat_z, concat_t, concat_tr, volume_number)
    return tbss_non_fa_execute(params, runner);
}


export {
      TBSS_NON_FA_METADATA,
      TbssNonFaOutputs,
      tbss_non_fa,
      tbss_non_fa_execute,
      tbss_non_fa_params,
};
