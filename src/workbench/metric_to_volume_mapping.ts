// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_TO_VOLUME_MAPPING_METADATA: Metadata = {
    id: "50b010826c816a4be693bed1b82570665f9ffd49.boutiques",
    name: "metric-to-volume-mapping",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricToVolumeMappingRibbonConstrainedParameters {
    "__STYXTYPE__": "ribbon_constrained";
    "inner_surf": InputPathType;
    "outer_surf": InputPathType;
    "opt_voxel_subdiv_subdiv_num"?: number | null | undefined;
    "opt_greedy": boolean;
    "opt_thick_columns": boolean;
}


interface MetricToVolumeMappingParameters {
    "__STYXTYPE__": "metric-to-volume-mapping";
    "metric": InputPathType;
    "surface": InputPathType;
    "volume_space": InputPathType;
    "volume_out": string;
    "opt_nearest_vertex_distance"?: number | null | undefined;
    "ribbon_constrained"?: MetricToVolumeMappingRibbonConstrainedParameters | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "metric-to-volume-mapping": metric_to_volume_mapping_cargs,
        "ribbon_constrained": metric_to_volume_mapping_ribbon_constrained_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "metric-to-volume-mapping": metric_to_volume_mapping_outputs,
    };
    return outputsFuncs[t];
}


function metric_to_volume_mapping_ribbon_constrained_params(
    inner_surf: InputPathType,
    outer_surf: InputPathType,
    opt_voxel_subdiv_subdiv_num: number | null = null,
    opt_greedy: boolean = false,
    opt_thick_columns: boolean = false,
): MetricToVolumeMappingRibbonConstrainedParameters {
    /**
     * Build parameters.
    
     * @param inner_surf the inner surface of the ribbon
     * @param outer_surf the outer surface of the ribbon
     * @param opt_voxel_subdiv_subdiv_num voxel divisions while estimating voxel weights: number of subdivisions, default 3
     * @param opt_greedy instead of antialiasing partial-volumed voxels, put full metric values (legacy behavior)
     * @param opt_thick_columns use overlapping columns (legacy method)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ribbon_constrained" as const,
        "inner_surf": inner_surf,
        "outer_surf": outer_surf,
        "opt_greedy": opt_greedy,
        "opt_thick_columns": opt_thick_columns,
    };
    if (opt_voxel_subdiv_subdiv_num !== null) {
        params["opt_voxel_subdiv_subdiv_num"] = opt_voxel_subdiv_subdiv_num;
    }
    return params;
}


function metric_to_volume_mapping_ribbon_constrained_cargs(
    params: MetricToVolumeMappingRibbonConstrainedParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-ribbon-constrained");
    cargs.push(execution.inputFile((params["inner_surf"] ?? null)));
    cargs.push(execution.inputFile((params["outer_surf"] ?? null)));
    if ((params["opt_voxel_subdiv_subdiv_num"] ?? null) !== null) {
        cargs.push(
            "-voxel-subdiv",
            String((params["opt_voxel_subdiv_subdiv_num"] ?? null))
        );
    }
    if ((params["opt_greedy"] ?? null)) {
        cargs.push("-greedy");
    }
    if ((params["opt_thick_columns"] ?? null)) {
        cargs.push("-thick-columns");
    }
    return cargs;
}


/**
 * Output object returned when calling `metric_to_volume_mapping(...)`.
 *
 * @interface
 */
interface MetricToVolumeMappingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume file
     */
    volume_out: OutputPathType;
}


function metric_to_volume_mapping_params(
    metric: InputPathType,
    surface: InputPathType,
    volume_space: InputPathType,
    volume_out: string,
    opt_nearest_vertex_distance: number | null = null,
    ribbon_constrained: MetricToVolumeMappingRibbonConstrainedParameters | null = null,
): MetricToVolumeMappingParameters {
    /**
     * Build parameters.
    
     * @param metric the input metric file
     * @param surface the surface to use coordinates from
     * @param volume_space a volume file in the desired output volume space
     * @param volume_out the output volume file
     * @param opt_nearest_vertex_distance use the value from the vertex closest to the voxel center: how far from the surface to map values to voxels, in mm
     * @param ribbon_constrained use ribbon constrained mapping algorithm
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric-to-volume-mapping" as const,
        "metric": metric,
        "surface": surface,
        "volume_space": volume_space,
        "volume_out": volume_out,
    };
    if (opt_nearest_vertex_distance !== null) {
        params["opt_nearest_vertex_distance"] = opt_nearest_vertex_distance;
    }
    if (ribbon_constrained !== null) {
        params["ribbon_constrained"] = ribbon_constrained;
    }
    return params;
}


function metric_to_volume_mapping_cargs(
    params: MetricToVolumeMappingParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-to-volume-mapping");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["volume_space"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_nearest_vertex_distance"] ?? null) !== null) {
        cargs.push(
            "-nearest-vertex",
            String((params["opt_nearest_vertex_distance"] ?? null))
        );
    }
    if ((params["ribbon_constrained"] ?? null) !== null) {
        cargs.push(...dynCargs((params["ribbon_constrained"] ?? null).__STYXTYPE__)((params["ribbon_constrained"] ?? null), execution));
    }
    return cargs;
}


function metric_to_volume_mapping_outputs(
    params: MetricToVolumeMappingParameters,
    execution: Execution,
): MetricToVolumeMappingOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MetricToVolumeMappingOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function metric_to_volume_mapping_execute(
    params: MetricToVolumeMappingParameters,
    execution: Execution,
): MetricToVolumeMappingOutputs {
    /**
     * Map metric file to volume.
     * 
     * Maps values from a metric file into a volume file.  You must specify exactly one mapping method option.  The -nearest-vertex method uses the value from the vertex closest to the voxel center (useful for integer values).  The -ribbon-constrained method uses the same method as in -volume-to-surface-mapping, then uses the weights in reverse.  Mapping to lower resolutions than the mesh may require a larger -voxel-subdiv value in order to have all of the surface data participate.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MetricToVolumeMappingOutputs`).
     */
    params = execution.params(params)
    const cargs = metric_to_volume_mapping_cargs(params, execution)
    const ret = metric_to_volume_mapping_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function metric_to_volume_mapping(
    metric: InputPathType,
    surface: InputPathType,
    volume_space: InputPathType,
    volume_out: string,
    opt_nearest_vertex_distance: number | null = null,
    ribbon_constrained: MetricToVolumeMappingRibbonConstrainedParameters | null = null,
    runner: Runner | null = null,
): MetricToVolumeMappingOutputs {
    /**
     * Map metric file to volume.
     * 
     * Maps values from a metric file into a volume file.  You must specify exactly one mapping method option.  The -nearest-vertex method uses the value from the vertex closest to the voxel center (useful for integer values).  The -ribbon-constrained method uses the same method as in -volume-to-surface-mapping, then uses the weights in reverse.  Mapping to lower resolutions than the mesh may require a larger -voxel-subdiv value in order to have all of the surface data participate.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param metric the input metric file
     * @param surface the surface to use coordinates from
     * @param volume_space a volume file in the desired output volume space
     * @param volume_out the output volume file
     * @param opt_nearest_vertex_distance use the value from the vertex closest to the voxel center: how far from the surface to map values to voxels, in mm
     * @param ribbon_constrained use ribbon constrained mapping algorithm
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MetricToVolumeMappingOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_TO_VOLUME_MAPPING_METADATA);
    const params = metric_to_volume_mapping_params(metric, surface, volume_space, volume_out, opt_nearest_vertex_distance, ribbon_constrained)
    return metric_to_volume_mapping_execute(params, execution);
}


export {
      METRIC_TO_VOLUME_MAPPING_METADATA,
      MetricToVolumeMappingOutputs,
      MetricToVolumeMappingParameters,
      MetricToVolumeMappingRibbonConstrainedParameters,
      metric_to_volume_mapping,
      metric_to_volume_mapping_params,
      metric_to_volume_mapping_ribbon_constrained_params,
};
