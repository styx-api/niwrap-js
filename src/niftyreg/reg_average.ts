// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REG_AVERAGE_METADATA: Metadata = {
    id: "1d5e61e347f021aec87b7bdad49904096693401e.boutiques",
    name: "reg_average",
    package: "niftyreg",
    container_image_tag: "vnmd/niftyreg_1.4.0:20220819",
};


interface RegAverageParameters {
    "@type": "niftyreg.reg_average";
    "output_file": string;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "niftyreg.reg_average": reg_average_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "niftyreg.reg_average": reg_average_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `reg_average(...)`.
 *
 * @interface
 */
interface RegAverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The averaged output file (image or affine transformation)
     */
    output_file_location: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_file Filename of the output image or affine transformation
 * @param input_files Input file names (images or affine matrices) to be averaged
 *
 * @returns Parameter dictionary
 */
function reg_average_params(
    output_file: string,
    input_files: Array<InputPathType>,
): RegAverageParameters {
    const params = {
        "@type": "niftyreg.reg_average" as const,
        "output_file": output_file,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function reg_average_cargs(
    params: RegAverageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("reg_average");
    cargs.push((params["output_file"] ?? null));
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function reg_average_outputs(
    params: RegAverageParameters,
    execution: Execution,
): RegAverageOutputs {
    const ret: RegAverageOutputs = {
        root: execution.outputFile("."),
        output_file_location: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * reg_average
 *
 * Command line program to average either images or affine transformations.
 *
 * Author: NiftyReg Developers
 *
 * URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegAverageOutputs`).
 */
function reg_average_execute(
    params: RegAverageParameters,
    runner: Runner | null = null,
): RegAverageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REG_AVERAGE_METADATA);
    params = execution.params(params)
    const cargs = reg_average_cargs(params, execution)
    const ret = reg_average_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * reg_average
 *
 * Command line program to average either images or affine transformations.
 *
 * Author: NiftyReg Developers
 *
 * URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
 *
 * @param output_file Filename of the output image or affine transformation
 * @param input_files Input file names (images or affine matrices) to be averaged
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegAverageOutputs`).
 */
function reg_average(
    output_file: string,
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): RegAverageOutputs {
    const params = reg_average_params(output_file, input_files)
    return reg_average_execute(params, runner);
}


export {
      REG_AVERAGE_METADATA,
      RegAverageOutputs,
      RegAverageParameters,
      reg_average,
      reg_average_execute,
      reg_average_params,
};
