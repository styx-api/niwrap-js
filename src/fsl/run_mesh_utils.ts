// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RUN_MESH_UTILS_METADATA: Metadata = {
    id: "f37cf2d8f5013ba6fbfc7ef807691e24ce397261.boutiques",
    name: "run_mesh_utils",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface RunMeshUtilsParameters {
    "__STYXTYPE__": "run_mesh_utils";
    "base_mesh": InputPathType;
    "output_image": string;
    "input_image"?: InputPathType | null | undefined;
    "second_input_image"?: InputPathType | null | undefined;
    "weighting_image_force"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "run_mesh_utils": run_mesh_utils_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "run_mesh_utils": run_mesh_utils_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `run_mesh_utils(...)`.
 *
 * @interface
 */
interface RunMeshUtilsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file
     */
    output_image_file: OutputPathType;
}


function run_mesh_utils_params(
    base_mesh: InputPathType,
    output_image: string,
    input_image: InputPathType | null = null,
    second_input_image: InputPathType | null = null,
    weighting_image_force: InputPathType | null = null,
): RunMeshUtilsParameters {
    /**
     * Build parameters.
    
     * @param base_mesh Filename of base mesh
     * @param output_image Filename of output image
     * @param input_image Filename of input image
     * @param second_input_image Filename of second input image
     * @param weighting_image_force Weighting image force
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "run_mesh_utils" as const,
        "base_mesh": base_mesh,
        "output_image": output_image,
    };
    if (input_image !== null) {
        params["input_image"] = input_image;
    }
    if (second_input_image !== null) {
        params["second_input_image"] = second_input_image;
    }
    if (weighting_image_force !== null) {
        params["weighting_image_force"] = weighting_image_force;
    }
    return params;
}


function run_mesh_utils_cargs(
    params: RunMeshUtilsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("run_mesh_utils");
    cargs.push(execution.inputFile((params["base_mesh"] ?? null)));
    cargs.push(
        "-o",
        (params["output_image"] ?? null)
    );
    if ((params["input_image"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["input_image"] ?? null))
        );
    }
    if ((params["second_input_image"] ?? null) !== null) {
        cargs.push(
            "-j",
            execution.inputFile((params["second_input_image"] ?? null))
        );
    }
    if ((params["weighting_image_force"] ?? null) !== null) {
        cargs.push(
            "-p",
            execution.inputFile((params["weighting_image_force"] ?? null))
        );
    }
    cargs.push("[OPTIONAL_PARAMS...]");
    return cargs;
}


function run_mesh_utils_outputs(
    params: RunMeshUtilsParameters,
    execution: Execution,
): RunMeshUtilsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RunMeshUtilsOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


function run_mesh_utils_execute(
    params: RunMeshUtilsParameters,
    execution: Execution,
): RunMeshUtilsOutputs {
    /**
     * A tool for various mesh operations as part of FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RunMeshUtilsOutputs`).
     */
    params = execution.params(params)
    const cargs = run_mesh_utils_cargs(params, execution)
    const ret = run_mesh_utils_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function run_mesh_utils(
    base_mesh: InputPathType,
    output_image: string,
    input_image: InputPathType | null = null,
    second_input_image: InputPathType | null = null,
    weighting_image_force: InputPathType | null = null,
    runner: Runner | null = null,
): RunMeshUtilsOutputs {
    /**
     * A tool for various mesh operations as part of FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param base_mesh Filename of base mesh
     * @param output_image Filename of output image
     * @param input_image Filename of input image
     * @param second_input_image Filename of second input image
     * @param weighting_image_force Weighting image force
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RunMeshUtilsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RUN_MESH_UTILS_METADATA);
    const params = run_mesh_utils_params(base_mesh, output_image, input_image, second_input_image, weighting_image_force)
    return run_mesh_utils_execute(params, execution);
}


export {
      RUN_MESH_UTILS_METADATA,
      RunMeshUtilsOutputs,
      RunMeshUtilsParameters,
      run_mesh_utils,
      run_mesh_utils_params,
};
