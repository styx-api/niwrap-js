// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PROMPT_POPUP_METADATA: Metadata = {
    id: "c24519073e7efb98045929a1a4d42a4a25f3e8ef.boutiques",
    name: "prompt_popup",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface PromptPopupParameters {
    "@type": "afni.prompt_popup";
    "message": string;
    "message_pause"?: string | null | undefined;
    "buttons"?: Array<string> | null | undefined;
    "buttons_b"?: Array<string> | null | undefined;
    "timeout"?: number | null | undefined;
    "timeout_to"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.prompt_popup": prompt_popup_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `prompt_popup(...)`.
 *
 * @interface
 */
interface PromptPopupOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param message Pops a window prompting the user with MESSAGE. If MESSAGE is '-', it is read from stdin.
 * @param message_pause Same as -message to match the old prompt_user.
 * @param buttons What do you want the buttons to say? You can give up to three -button for three buttons. Returns integer 1, 2, or 3. If there is no -button, there will be one button 'Ok'.
 * @param buttons_b Same as -button.
 * @param timeout Timeout in seconds of prompt message. Default answer is returned if TT seconds elapse without user input.
 * @param timeout_to Same as -timeout TT.
 *
 * @returns Parameter dictionary
 */
function prompt_popup_params(
    message: string,
    message_pause: string | null = null,
    buttons: Array<string> | null = null,
    buttons_b: Array<string> | null = null,
    timeout: number | null = null,
    timeout_to: number | null = null,
): PromptPopupParameters {
    const params = {
        "@type": "afni.prompt_popup" as const,
        "message": message,
    };
    if (message_pause !== null) {
        params["message_pause"] = message_pause;
    }
    if (buttons !== null) {
        params["buttons"] = buttons;
    }
    if (buttons_b !== null) {
        params["buttons_b"] = buttons_b;
    }
    if (timeout !== null) {
        params["timeout"] = timeout;
    }
    if (timeout_to !== null) {
        params["timeout_to"] = timeout_to;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function prompt_popup_cargs(
    params: PromptPopupParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("prompt_popup");
    cargs.push(
        "-message",
        (params["message"] ?? null)
    );
    if ((params["message_pause"] ?? null) !== null) {
        cargs.push(
            "-pause",
            (params["message_pause"] ?? null)
        );
    }
    if ((params["buttons"] ?? null) !== null) {
        cargs.push(
            "-button",
            ...(params["buttons"] ?? null)
        );
    }
    if ((params["buttons_b"] ?? null) !== null) {
        cargs.push(
            "-b",
            ...(params["buttons_b"] ?? null)
        );
    }
    if ((params["timeout"] ?? null) !== null) {
        cargs.push(
            "-timeout",
            String((params["timeout"] ?? null))
        );
    }
    if ((params["timeout_to"] ?? null) !== null) {
        cargs.push(
            "-to",
            String((params["timeout_to"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function prompt_popup_outputs(
    params: PromptPopupParameters,
    execution: Execution,
): PromptPopupOutputs {
    const ret: PromptPopupOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A command-line tool that pops up a window prompting user interaction with a message and buttons.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `PromptPopupOutputs`).
 */
function prompt_popup_execute(
    params: PromptPopupParameters,
    execution: Execution,
): PromptPopupOutputs {
    params = execution.params(params)
    const cargs = prompt_popup_cargs(params, execution)
    const ret = prompt_popup_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A command-line tool that pops up a window prompting user interaction with a message and buttons.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param message Pops a window prompting the user with MESSAGE. If MESSAGE is '-', it is read from stdin.
 * @param message_pause Same as -message to match the old prompt_user.
 * @param buttons What do you want the buttons to say? You can give up to three -button for three buttons. Returns integer 1, 2, or 3. If there is no -button, there will be one button 'Ok'.
 * @param buttons_b Same as -button.
 * @param timeout Timeout in seconds of prompt message. Default answer is returned if TT seconds elapse without user input.
 * @param timeout_to Same as -timeout TT.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PromptPopupOutputs`).
 */
function prompt_popup(
    message: string,
    message_pause: string | null = null,
    buttons: Array<string> | null = null,
    buttons_b: Array<string> | null = null,
    timeout: number | null = null,
    timeout_to: number | null = null,
    runner: Runner | null = null,
): PromptPopupOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PROMPT_POPUP_METADATA);
    const params = prompt_popup_params(message, message_pause, buttons, buttons_b, timeout, timeout_to)
    return prompt_popup_execute(params, execution);
}


export {
      PROMPT_POPUP_METADATA,
      PromptPopupOutputs,
      PromptPopupParameters,
      prompt_popup,
      prompt_popup_cargs,
      prompt_popup_execute,
      prompt_popup_outputs,
      prompt_popup_params,
};
