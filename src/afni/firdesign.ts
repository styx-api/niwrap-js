// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIRDESIGN_METADATA: Metadata = {
    id: "a74504adf0b49ec5a0615bc609bf67d8b73823f0.boutiques",
    name: "FIRdesign",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FirdesignParameters {
    "__STYXTYPE__": "FIRdesign";
    "fbot": number;
    "ftop": number;
    "ntap": number;
    "tr"?: number | null | undefined;
    "alternative_band"?: Array<number> | null | undefined;
    "alternative_ntap"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "FIRdesign": firdesign_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `firdesign(...)`.
 *
 * @interface
 */
interface FirdesignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function firdesign_params(
    fbot: number,
    ftop: number,
    ntap: number,
    tr: number | null = null,
    alternative_band: Array<number> | null = null,
    alternative_ntap: number | null = null,
): FirdesignParameters {
    /**
     * Build parameters.
    
     * @param fbot Lowest frequency in the pass band.
     * @param ftop Highest frequency in the pass band, must be higher than fbot and <= 0.5/TR.
     * @param ntap Number of filter weights (AKA 'taps') to use, must be in the range 8..2000 (inclusive).
     * @param tr Set time grid spacing to 'dd' [default is 1.0]
     * @param alternative_band Alternative way to specify the passband
     * @param alternative_ntap Alternative way to specify the number of taps
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "FIRdesign" as const,
        "fbot": fbot,
        "ftop": ftop,
        "ntap": ntap,
    };
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (alternative_band !== null) {
        params["alternative_band"] = alternative_band;
    }
    if (alternative_ntap !== null) {
        params["alternative_ntap"] = alternative_ntap;
    }
    return params;
}


function firdesign_cargs(
    params: FirdesignParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("FIRdesign");
    cargs.push(String((params["fbot"] ?? null)));
    cargs.push(String((params["ftop"] ?? null)));
    cargs.push(String((params["ntap"] ?? null)));
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-TR",
            String((params["tr"] ?? null))
        );
    }
    if ((params["alternative_band"] ?? null) !== null) {
        cargs.push(
            "-band",
            ...(params["alternative_band"] ?? null).map(String)
        );
    }
    if ((params["alternative_ntap"] ?? null) !== null) {
        cargs.push(
            "-ntap",
            String((params["alternative_ntap"] ?? null))
        );
    }
    return cargs;
}


function firdesign_outputs(
    params: FirdesignParameters,
    execution: Execution,
): FirdesignOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FirdesignOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function firdesign_execute(
    params: FirdesignParameters,
    execution: Execution,
): FirdesignOutputs {
    /**
     * Uses the Remez algorithm to calculate the FIR filter weights for a bandpass filter; results are written to stdout in an unadorned (no header) column of numbers.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FirdesignOutputs`).
     */
    params = execution.params(params)
    const cargs = firdesign_cargs(params, execution)
    const ret = firdesign_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function firdesign(
    fbot: number,
    ftop: number,
    ntap: number,
    tr: number | null = null,
    alternative_band: Array<number> | null = null,
    alternative_ntap: number | null = null,
    runner: Runner | null = null,
): FirdesignOutputs {
    /**
     * Uses the Remez algorithm to calculate the FIR filter weights for a bandpass filter; results are written to stdout in an unadorned (no header) column of numbers.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param fbot Lowest frequency in the pass band.
     * @param ftop Highest frequency in the pass band, must be higher than fbot and <= 0.5/TR.
     * @param ntap Number of filter weights (AKA 'taps') to use, must be in the range 8..2000 (inclusive).
     * @param tr Set time grid spacing to 'dd' [default is 1.0]
     * @param alternative_band Alternative way to specify the passband
     * @param alternative_ntap Alternative way to specify the number of taps
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FirdesignOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIRDESIGN_METADATA);
    const params = firdesign_params(fbot, ftop, ntap, tr, alternative_band, alternative_ntap)
    return firdesign_execute(params, execution);
}


export {
      FIRDESIGN_METADATA,
      FirdesignOutputs,
      FirdesignParameters,
      firdesign,
      firdesign_params,
};
