// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_DIST_SURF_LABEL_METADATA: Metadata = {
    id: "72b4cdbb35a27d1559099cff0310255f2417fec4.boutiques",
    name: "mri_dist_surf_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriDistSurfLabelParameters {
    "__STYXTYPE__": "mri_dist_surf_label";
    "surface": InputPathType;
    "label_file": InputPathType;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_dist_surf_label": mri_dist_surf_label_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_dist_surf_label": mri_dist_surf_label_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_dist_surf_label(...)`.
 *
 * @interface
 */
interface MriDistSurfLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing computed distances.
     */
    output: OutputPathType;
}


function mri_dist_surf_label_params(
    surface: InputPathType,
    label_file: InputPathType,
    output: string,
): MriDistSurfLabelParameters {
    /**
     * Build parameters.
    
     * @param surface Input surface file.
     * @param label_file Input label file.
     * @param output Output file for distances.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_dist_surf_label" as const,
        "surface": surface,
        "label_file": label_file,
        "output": output,
    };
    return params;
}


function mri_dist_surf_label_cargs(
    params: MriDistSurfLabelParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_dist_surf_label");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["label_file"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


function mri_dist_surf_label_outputs(
    params: MriDistSurfLabelParameters,
    execution: Execution,
): MriDistSurfLabelOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriDistSurfLabelOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function mri_dist_surf_label_execute(
    params: MriDistSurfLabelParameters,
    execution: Execution,
): MriDistSurfLabelOutputs {
    /**
     * Computes distances from input surface to label points or waypoints.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriDistSurfLabelOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_dist_surf_label_cargs(params, execution)
    const ret = mri_dist_surf_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_dist_surf_label(
    surface: InputPathType,
    label_file: InputPathType,
    output: string,
    runner: Runner | null = null,
): MriDistSurfLabelOutputs {
    /**
     * Computes distances from input surface to label points or waypoints.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surface Input surface file.
     * @param label_file Input label file.
     * @param output Output file for distances.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriDistSurfLabelOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_DIST_SURF_LABEL_METADATA);
    const params = mri_dist_surf_label_params(surface, label_file, output)
    return mri_dist_surf_label_execute(params, execution);
}


export {
      MRI_DIST_SURF_LABEL_METADATA,
      MriDistSurfLabelOutputs,
      MriDistSurfLabelParameters,
      mri_dist_surf_label,
      mri_dist_surf_label_params,
};
