// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const B0CALC_METADATA: Metadata = {
    id: "c3e4959eaa17886d5bba8085fe05cc394e597296.boutiques",
    name: "b0calc",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface B0calcParameters {
    "__STYXTYPE__": "b0calc";
    "input_file": InputPathType;
    "output_file": string;
    "zero_order_x"?: number | null | undefined;
    "zero_order_y"?: number | null | undefined;
    "zero_order_z"?: number | null | undefined;
    "b0_x"?: number | null | undefined;
    "b0_y"?: number | null | undefined;
    "b0_z"?: number | null | undefined;
    "delta"?: number | null | undefined;
    "chi0"?: number | null | undefined;
    "xyz_flag": boolean;
    "extend_boundary"?: number | null | undefined;
    "direct_conv": boolean;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "b0calc": b0calc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "b0calc": b0calc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `b0calc(...)`.
 *
 * @interface
 */
interface B0calcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * B0 output volume
     */
    b0_output: OutputPathType;
    /**
     * B0 x-component output volume (if --xyz is specified)
     */
    b0_output_x: OutputPathType;
    /**
     * B0 y-component output volume (if --xyz is specified)
     */
    b0_output_y: OutputPathType;
    /**
     * B0 z-component output volume (if --xyz is specified)
     */
    b0_output_z: OutputPathType;
}


function b0calc_params(
    input_file: InputPathType,
    output_file: string,
    zero_order_x: number | null = null,
    zero_order_y: number | null = null,
    zero_order_z: number | null = null,
    b0_x: number | null = null,
    b0_y: number | null = null,
    b0_z: number | null = null,
    delta: number | null = null,
    chi0: number | null = null,
    xyz_flag: boolean = false,
    extend_boundary: number | null = null,
    direct_conv: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): B0calcParameters {
    /**
     * Build parameters.
    
     * @param input_file Filename of input image (usually a tissue/air segmentation)
     * @param output_file Filename of B0 output volume
     * @param zero_order_x Value for zeroth-order x-gradient field (per mm); default=0
     * @param zero_order_y Value for zeroth-order y-gradient field (per mm); default=0
     * @param zero_order_z Value for zeroth-order z-gradient field (per mm); default=0
     * @param b0_x Value for zeroth-order B0 field (x-component); default=0
     * @param b0_y Value for zeroth-order B0 field (y-component); default=0
     * @param b0_z Value for zeroth-order B0 field (z-component); default=1
     * @param delta Delta value (chi_tissue - chi_air); default=-9.45e-6
     * @param chi0 Value for susceptibility of air; default=+4e-7
     * @param xyz_flag Calculate and save all 3 field components (i.e. x,y,z)
     * @param extend_boundary Relative proportion to extend voxels at boundary; default=1
     * @param direct_conv Use direct (image space) convolution, not FFT
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display help message
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "b0calc" as const,
        "input_file": input_file,
        "output_file": output_file,
        "xyz_flag": xyz_flag,
        "direct_conv": direct_conv,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (zero_order_x !== null) {
        params["zero_order_x"] = zero_order_x;
    }
    if (zero_order_y !== null) {
        params["zero_order_y"] = zero_order_y;
    }
    if (zero_order_z !== null) {
        params["zero_order_z"] = zero_order_z;
    }
    if (b0_x !== null) {
        params["b0_x"] = b0_x;
    }
    if (b0_y !== null) {
        params["b0_y"] = b0_y;
    }
    if (b0_z !== null) {
        params["b0_z"] = b0_z;
    }
    if (delta !== null) {
        params["delta"] = delta;
    }
    if (chi0 !== null) {
        params["chi0"] = chi0;
    }
    if (extend_boundary !== null) {
        params["extend_boundary"] = extend_boundary;
    }
    return params;
}


function b0calc_cargs(
    params: B0calcParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("b0calc");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    if ((params["zero_order_x"] ?? null) !== null) {
        cargs.push(
            "--gx",
            String((params["zero_order_x"] ?? null))
        );
    }
    if ((params["zero_order_y"] ?? null) !== null) {
        cargs.push(
            "--gy",
            String((params["zero_order_y"] ?? null))
        );
    }
    if ((params["zero_order_z"] ?? null) !== null) {
        cargs.push(
            "--gz",
            String((params["zero_order_z"] ?? null))
        );
    }
    if ((params["b0_x"] ?? null) !== null) {
        cargs.push(
            "--b0x",
            String((params["b0_x"] ?? null))
        );
    }
    if ((params["b0_y"] ?? null) !== null) {
        cargs.push(
            "--b0y",
            String((params["b0_y"] ?? null))
        );
    }
    if ((params["b0_z"] ?? null) !== null) {
        cargs.push(
            "--b0",
            String((params["b0_z"] ?? null))
        );
    }
    if ((params["delta"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["delta"] ?? null))
        );
    }
    if ((params["chi0"] ?? null) !== null) {
        cargs.push(
            "--chi0",
            String((params["chi0"] ?? null))
        );
    }
    if ((params["xyz_flag"] ?? null)) {
        cargs.push("--xyz");
    }
    if ((params["extend_boundary"] ?? null) !== null) {
        cargs.push(
            "--extendboundary",
            String((params["extend_boundary"] ?? null))
        );
    }
    if ((params["direct_conv"] ?? null)) {
        cargs.push("--directconv");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


function b0calc_outputs(
    params: B0calcParameters,
    execution: Execution,
): B0calcOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: B0calcOutputs = {
        root: execution.outputFile("."),
        b0_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
        b0_output_x: execution.outputFile([(params["output_file"] ?? null), "_x"].join('')),
        b0_output_y: execution.outputFile([(params["output_file"] ?? null), "_y"].join('')),
        b0_output_z: execution.outputFile([(params["output_file"] ?? null), "_z"].join('')),
    };
    return ret;
}


function b0calc_execute(
    params: B0calcParameters,
    execution: Execution,
): B0calcOutputs {
    /**
     * B0 field calculation program.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `B0calcOutputs`).
     */
    params = execution.params(params)
    const cargs = b0calc_cargs(params, execution)
    const ret = b0calc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function b0calc(
    input_file: InputPathType,
    output_file: string,
    zero_order_x: number | null = null,
    zero_order_y: number | null = null,
    zero_order_z: number | null = null,
    b0_x: number | null = null,
    b0_y: number | null = null,
    b0_z: number | null = null,
    delta: number | null = null,
    chi0: number | null = null,
    xyz_flag: boolean = false,
    extend_boundary: number | null = null,
    direct_conv: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): B0calcOutputs {
    /**
     * B0 field calculation program.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file Filename of input image (usually a tissue/air segmentation)
     * @param output_file Filename of B0 output volume
     * @param zero_order_x Value for zeroth-order x-gradient field (per mm); default=0
     * @param zero_order_y Value for zeroth-order y-gradient field (per mm); default=0
     * @param zero_order_z Value for zeroth-order z-gradient field (per mm); default=0
     * @param b0_x Value for zeroth-order B0 field (x-component); default=0
     * @param b0_y Value for zeroth-order B0 field (y-component); default=0
     * @param b0_z Value for zeroth-order B0 field (z-component); default=1
     * @param delta Delta value (chi_tissue - chi_air); default=-9.45e-6
     * @param chi0 Value for susceptibility of air; default=+4e-7
     * @param xyz_flag Calculate and save all 3 field components (i.e. x,y,z)
     * @param extend_boundary Relative proportion to extend voxels at boundary; default=1
     * @param direct_conv Use direct (image space) convolution, not FFT
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display help message
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `B0calcOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(B0CALC_METADATA);
    const params = b0calc_params(input_file, output_file, zero_order_x, zero_order_y, zero_order_z, b0_x, b0_y, b0_z, delta, chi0, xyz_flag, extend_boundary, direct_conv, verbose_flag, help_flag)
    return b0calc_execute(params, execution);
}


export {
      B0CALC_METADATA,
      B0calcOutputs,
      B0calcParameters,
      b0calc,
      b0calc_params,
};
