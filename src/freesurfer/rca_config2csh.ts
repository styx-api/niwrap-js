// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RCA_CONFIG2CSH_METADATA: Metadata = {
    id: "a6974f7a84f9b447ffa3652155f3daff457ba308.boutiques",
    name: "rca-config2csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RcaConfig2cshParameters {
    "__STYXTYPE__": "rca-config2csh";
    "configfile": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "rca-config2csh": rca_config2csh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rca_config2csh(...)`.
 *
 * @interface
 */
interface RcaConfig2cshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function rca_config2csh_params(
    configfile: InputPathType,
): RcaConfig2cshParameters {
    /**
     * Build parameters.
    
     * @param configfile Configuration file to be converted
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "rca-config2csh" as const,
        "configfile": configfile,
    };
    return params;
}


function rca_config2csh_cargs(
    params: RcaConfig2cshParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(
        "-config2csh",
        ["rca", execution.inputFile((params["configfile"] ?? null))].join('')
    );
    return cargs;
}


function rca_config2csh_outputs(
    params: RcaConfig2cshParameters,
    execution: Execution,
): RcaConfig2cshOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RcaConfig2cshOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function rca_config2csh_execute(
    params: RcaConfig2cshParameters,
    execution: Execution,
): RcaConfig2cshOutputs {
    /**
     * rca-config2csh is a utility to convert configuration files into C-shell syntax.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RcaConfig2cshOutputs`).
     */
    params = execution.params(params)
    const cargs = rca_config2csh_cargs(params, execution)
    const ret = rca_config2csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function rca_config2csh(
    configfile: InputPathType,
    runner: Runner | null = null,
): RcaConfig2cshOutputs {
    /**
     * rca-config2csh is a utility to convert configuration files into C-shell syntax.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param configfile Configuration file to be converted
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RcaConfig2cshOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RCA_CONFIG2CSH_METADATA);
    const params = rca_config2csh_params(configfile)
    return rca_config2csh_execute(params, execution);
}


export {
      RCA_CONFIG2CSH_METADATA,
      RcaConfig2cshOutputs,
      RcaConfig2cshParameters,
      rca_config2csh,
      rca_config2csh_params,
};
