// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ATTRIBUTE_METADATA: Metadata = {
    id: "d1172ce42bca626c6612506d8a90643475b32da8.boutiques",
    name: "3dAttribute",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAttributeParameters {
    "@type": "afni.3dAttribute";
    "all": boolean;
    "name": boolean;
    "center": boolean;
    "ssep"?: string | null | undefined;
    "sprep"?: string | null | undefined;
    "quote": boolean;
    "aname": string;
    "dset": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dAttribute": v_3d_attribute_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dAttribute": v_3d_attribute_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_attribute(...)`.
 *
 * @interface
 */
interface V3dAttributeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of the attribute value
     */
    stdout: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param aname Attribute name to be printed from the dataset
 * @param dset Dataset from which the attribute value will be printed
 * @param all Print all attributes from the dataset
 * @param name Include attribute name in the output
 * @param center Print the center of volume in RAI coordinates
 * @param ssep Use string SSEP as a separator between strings for multiple sub-bricks
 * @param sprep Use string SPREP to replace blank space in string attributes
 * @param quote Use single quote around each string
 *
 * @returns Parameter dictionary
 */
function v_3d_attribute_params(
    aname: string,
    dset: InputPathType,
    all: boolean = false,
    name: boolean = false,
    center: boolean = false,
    ssep: string | null = null,
    sprep: string | null = null,
    quote: boolean = false,
): V3dAttributeParameters {
    const params = {
        "@type": "afni.3dAttribute" as const,
        "all": all,
        "name": name,
        "center": center,
        "quote": quote,
        "aname": aname,
        "dset": dset,
    };
    if (ssep !== null) {
        params["ssep"] = ssep;
    }
    if (sprep !== null) {
        params["sprep"] = sprep;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_attribute_cargs(
    params: V3dAttributeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dAttribute");
    if ((params["all"] ?? null)) {
        cargs.push("-all");
    }
    if ((params["name"] ?? null)) {
        cargs.push("-name");
    }
    if ((params["center"] ?? null)) {
        cargs.push("-center");
    }
    if ((params["ssep"] ?? null) !== null) {
        cargs.push(
            "-ssep",
            (params["ssep"] ?? null)
        );
    }
    if ((params["sprep"] ?? null) !== null) {
        cargs.push(
            "-sprep",
            (params["sprep"] ?? null)
        );
    }
    if ((params["quote"] ?? null)) {
        cargs.push("-quote");
    }
    cargs.push((params["aname"] ?? null));
    cargs.push(execution.inputFile((params["dset"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_attribute_outputs(
    params: V3dAttributeParameters,
    execution: Execution,
): V3dAttributeOutputs {
    const ret: V3dAttributeOutputs = {
        root: execution.outputFile("."),
        stdout: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * Prints the value of the attribute 'aname' from the header of the dataset 'dset'.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dAttributeOutputs`).
 */
function v_3d_attribute_execute(
    params: V3dAttributeParameters,
    execution: Execution,
): V3dAttributeOutputs {
    params = execution.params(params)
    const cargs = v_3d_attribute_cargs(params, execution)
    const ret = v_3d_attribute_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Prints the value of the attribute 'aname' from the header of the dataset 'dset'.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param aname Attribute name to be printed from the dataset
 * @param dset Dataset from which the attribute value will be printed
 * @param all Print all attributes from the dataset
 * @param name Include attribute name in the output
 * @param center Print the center of volume in RAI coordinates
 * @param ssep Use string SSEP as a separator between strings for multiple sub-bricks
 * @param sprep Use string SPREP to replace blank space in string attributes
 * @param quote Use single quote around each string
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAttributeOutputs`).
 */
function v_3d_attribute(
    aname: string,
    dset: InputPathType,
    all: boolean = false,
    name: boolean = false,
    center: boolean = false,
    ssep: string | null = null,
    sprep: string | null = null,
    quote: boolean = false,
    runner: Runner | null = null,
): V3dAttributeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ATTRIBUTE_METADATA);
    const params = v_3d_attribute_params(aname, dset, all, name, center, ssep, sprep, quote)
    return v_3d_attribute_execute(params, execution);
}


export {
      V3dAttributeOutputs,
      V3dAttributeParameters,
      V_3D_ATTRIBUTE_METADATA,
      v_3d_attribute,
      v_3d_attribute_cargs,
      v_3d_attribute_execute,
      v_3d_attribute_outputs,
      v_3d_attribute_params,
};
