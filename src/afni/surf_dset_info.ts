// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_DSET_INFO_METADATA: Metadata = {
    id: "0eea0d47be8d446fa32a71638d9796998abd8047.boutiques",
    name: "SurfDsetInfo",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfDsetInfoParameters {
    "__STYXTYPE__": "SurfDsetInfo";
    "input_dsets": Array<InputPathType>;
    "debug_level"?: number | null | undefined;
    "novolreg": boolean;
    "noxform": boolean;
    "setenv"?: string | null | undefined;
    "trace": boolean;
    "extreme_trace": boolean;
    "nomall": boolean;
    "yesmall": boolean;
    "mini_help": boolean;
    "help": boolean;
    "extreme_help": boolean;
    "help_view": boolean;
    "help_web": boolean;
    "help_find"?: string | null | undefined;
    "help_raw": boolean;
    "help_spx": boolean;
    "help_aspx": boolean;
    "all_opts": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "SurfDsetInfo": surf_dset_info_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_dset_info(...)`.
 *
 * @interface
 */
interface SurfDsetInfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function surf_dset_info_params(
    input_dsets: Array<InputPathType>,
    debug_level: number | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    nomall: boolean = false,
    yesmall: boolean = false,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    help_view: boolean = false,
    help_web: boolean = false,
    help_find: string | null = null,
    help_raw: boolean = false,
    help_spx: boolean = false,
    help_aspx: boolean = false,
    all_opts: boolean = false,
): SurfDsetInfoParameters {
    /**
     * Build parameters.
    
     * @param input_dsets Input dataset
     * @param debug_level Debug level. If DBG = 2, show full dataset information in NIML form.
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations
     * @param noxform Same as -novolreg
     * @param setenv Set environment variable
     * @param trace Turns on In/Out debug and Memory tracing
     * @param extreme_trace Turns on extreme tracing
     * @param nomall Turn off memory tracing
     * @param yesmall Turn on memory tracing (default)
     * @param mini_help Mini help
     * @param help Show entire help output
     * @param extreme_help Show extreme help
     * @param help_view Open help in text editor
     * @param help_web Open help in web browser
     * @param help_find Look for lines in help output that match the specified word
     * @param help_raw Show unedited help string
     * @param help_spx Show help string in sphinx format, but do not autoformat
     * @param help_aspx Show help string in sphinx with autoformatting
     * @param all_opts Attempt to identify all options for the program from the help output
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "SurfDsetInfo" as const,
        "input_dsets": input_dsets,
        "novolreg": novolreg,
        "noxform": noxform,
        "trace": trace,
        "extreme_trace": extreme_trace,
        "nomall": nomall,
        "yesmall": yesmall,
        "mini_help": mini_help,
        "help": help,
        "extreme_help": extreme_help,
        "help_view": help_view,
        "help_web": help_web,
        "help_raw": help_raw,
        "help_spx": help_spx,
        "help_aspx": help_aspx,
        "all_opts": all_opts,
    };
    if (debug_level !== null) {
        params["debug_level"] = debug_level;
    }
    if (setenv !== null) {
        params["setenv"] = setenv;
    }
    if (help_find !== null) {
        params["help_find"] = help_find;
    }
    return params;
}


function surf_dset_info_cargs(
    params: SurfDsetInfoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("SurfDsetInfo");
    cargs.push(
        "-input",
        ...(params["input_dsets"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["debug_level"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug_level"] ?? null))
        );
    }
    if ((params["novolreg"] ?? null)) {
        cargs.push("-novolreg");
    }
    if ((params["noxform"] ?? null)) {
        cargs.push("-noxform");
    }
    if ((params["setenv"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["setenv"] ?? null)
        );
    }
    if ((params["trace"] ?? null)) {
        cargs.push("-trace");
    }
    if ((params["extreme_trace"] ?? null)) {
        cargs.push("-TRACE");
    }
    if ((params["nomall"] ?? null)) {
        cargs.push("-nomall");
    }
    if ((params["yesmall"] ?? null)) {
        cargs.push("-yesmall");
    }
    if ((params["mini_help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["extreme_help"] ?? null)) {
        cargs.push("-HELP");
    }
    if ((params["help_view"] ?? null)) {
        cargs.push("-h_view");
    }
    if ((params["help_web"] ?? null)) {
        cargs.push("-h_web");
    }
    if ((params["help_find"] ?? null) !== null) {
        cargs.push(
            "-h_find",
            (params["help_find"] ?? null)
        );
    }
    if ((params["help_raw"] ?? null)) {
        cargs.push("-h_raw");
    }
    if ((params["help_spx"] ?? null)) {
        cargs.push("-h_spx");
    }
    if ((params["help_aspx"] ?? null)) {
        cargs.push("-h_aspx");
    }
    if ((params["all_opts"] ?? null)) {
        cargs.push("-all_opts");
    }
    return cargs;
}


function surf_dset_info_outputs(
    params: SurfDsetInfoParameters,
    execution: Execution,
): SurfDsetInfoOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfDsetInfoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function surf_dset_info_execute(
    params: SurfDsetInfoParameters,
    execution: Execution,
): SurfDsetInfoOutputs {
    /**
     * Provides information about surface datasets (DSET).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfDsetInfoOutputs`).
     */
    params = execution.params(params)
    const cargs = surf_dset_info_cargs(params, execution)
    const ret = surf_dset_info_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surf_dset_info(
    input_dsets: Array<InputPathType>,
    debug_level: number | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    nomall: boolean = false,
    yesmall: boolean = false,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    help_view: boolean = false,
    help_web: boolean = false,
    help_find: string | null = null,
    help_raw: boolean = false,
    help_spx: boolean = false,
    help_aspx: boolean = false,
    all_opts: boolean = false,
    runner: Runner | null = null,
): SurfDsetInfoOutputs {
    /**
     * Provides information about surface datasets (DSET).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dsets Input dataset
     * @param debug_level Debug level. If DBG = 2, show full dataset information in NIML form.
     * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations
     * @param noxform Same as -novolreg
     * @param setenv Set environment variable
     * @param trace Turns on In/Out debug and Memory tracing
     * @param extreme_trace Turns on extreme tracing
     * @param nomall Turn off memory tracing
     * @param yesmall Turn on memory tracing (default)
     * @param mini_help Mini help
     * @param help Show entire help output
     * @param extreme_help Show extreme help
     * @param help_view Open help in text editor
     * @param help_web Open help in web browser
     * @param help_find Look for lines in help output that match the specified word
     * @param help_raw Show unedited help string
     * @param help_spx Show help string in sphinx format, but do not autoformat
     * @param help_aspx Show help string in sphinx with autoformatting
     * @param all_opts Attempt to identify all options for the program from the help output
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfDsetInfoOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_DSET_INFO_METADATA);
    const params = surf_dset_info_params(input_dsets, debug_level, novolreg, noxform, setenv, trace, extreme_trace, nomall, yesmall, mini_help, help, extreme_help, help_view, help_web, help_find, help_raw, help_spx, help_aspx, all_opts)
    return surf_dset_info_execute(params, execution);
}


export {
      SURF_DSET_INFO_METADATA,
      SurfDsetInfoOutputs,
      SurfDsetInfoParameters,
      surf_dset_info,
      surf_dset_info_params,
};
