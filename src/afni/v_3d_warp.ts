// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_WARP_METADATA: Metadata = {
    id: "9fc0895546044d51ae3bc018933a57cbeae8baeb.boutiques",
    name: "3dWarp",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dWarpParameters {
    "__STYXTYPE__": "3dWarp";
    "dataset": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dWarp": v_3d_warp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_warp(...)`.
 *
 * @interface
 */
interface V3dWarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v_3d_warp_params(
    dataset: string,
): V3dWarpParameters {
    /**
     * Build parameters.
    
     * @param dataset Input dataset to be warped
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dWarp" as const,
        "dataset": dataset,
    };
    return params;
}


function v_3d_warp_cargs(
    params: V3dWarpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dWarp");
    cargs.push("[OPTIONS]");
    cargs.push((params["dataset"] ?? null));
    return cargs;
}


function v_3d_warp_outputs(
    params: V3dWarpParameters,
    execution: Execution,
): V3dWarpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dWarpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v_3d_warp_execute(
    params: V3dWarpParameters,
    execution: Execution,
): V3dWarpOutputs {
    /**
     * Warp (spatially transform) one 3D dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dWarpOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_warp_cargs(params, execution)
    const ret = v_3d_warp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_warp(
    dataset: string,
    runner: Runner | null = null,
): V3dWarpOutputs {
    /**
     * Warp (spatially transform) one 3D dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dataset Input dataset to be warped
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dWarpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_WARP_METADATA);
    const params = v_3d_warp_params(dataset)
    return v_3d_warp_execute(params, execution);
}


export {
      V3dWarpOutputs,
      V3dWarpParameters,
      V_3D_WARP_METADATA,
      v_3d_warp,
      v_3d_warp_params,
};
