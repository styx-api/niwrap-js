// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_BANDPASS_METADATA: Metadata = {
    id: "104ecd08be741b5ae61424022bc0666d569805e3.boutiques",
    name: "1dBandpass",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dBandpassParameters {
    "__STYXTYPE__": "1dBandpass";
    "fbot": number;
    "ftop": number;
    "infile": InputPathType;
    "timestep"?: number | null | undefined;
    "ortfile"?: InputPathType | null | undefined;
    "nodetrend": boolean;
    "norm": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dBandpass": v_1d_bandpass_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1d_bandpass(...)`.
 *
 * @interface
 */
interface V1dBandpassOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v_1d_bandpass_params(
    fbot: number,
    ftop: number,
    infile: InputPathType,
    timestep: number | null = null,
    ortfile: InputPathType | null = null,
    nodetrend: boolean = false,
    norm: boolean = false,
): V1dBandpassParameters {
    /**
     * Build parameters.
    
     * @param fbot Lowest frequency in the passband, in Hz (must be greater than or equal to 0)
     * @param ftop Highest frequency in the passband, in Hz (must be greater than FBOT)
     * @param infile Input AFNI *.1D file; each column is processed
     * @param timestep Set time step to 'dd' sec (default is 1.0)
     * @param ortfile Also orthogonalize input to columns in specified *.1D file (only one '-ort' option is allowed)
     * @param nodetrend Skip the quadratic detrending of the input
     * @param norm Make output time series have L2 norm = 1
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dBandpass" as const,
        "fbot": fbot,
        "ftop": ftop,
        "infile": infile,
        "nodetrend": nodetrend,
        "norm": norm,
    };
    if (timestep !== null) {
        params["timestep"] = timestep;
    }
    if (ortfile !== null) {
        params["ortfile"] = ortfile;
    }
    return params;
}


function v_1d_bandpass_cargs(
    params: V1dBandpassParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dBandpass");
    cargs.push(String((params["fbot"] ?? null)));
    cargs.push(String((params["ftop"] ?? null)));
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    if ((params["timestep"] ?? null) !== null) {
        cargs.push(
            "-dt",
            String((params["timestep"] ?? null))
        );
    }
    if ((params["ortfile"] ?? null) !== null) {
        cargs.push(
            "-ort",
            execution.inputFile((params["ortfile"] ?? null))
        );
    }
    if ((params["nodetrend"] ?? null)) {
        cargs.push("-nodetrend");
    }
    if ((params["norm"] ?? null)) {
        cargs.push("-norm");
    }
    return cargs;
}


function v_1d_bandpass_outputs(
    params: V1dBandpassParameters,
    execution: Execution,
): V1dBandpassOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dBandpassOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v_1d_bandpass_execute(
    params: V1dBandpassParameters,
    execution: Execution,
): V1dBandpassOutputs {
    /**
     * Bandpass filtering of time series data in AFNI *.1D files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dBandpassOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1d_bandpass_cargs(params, execution)
    const ret = v_1d_bandpass_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1d_bandpass(
    fbot: number,
    ftop: number,
    infile: InputPathType,
    timestep: number | null = null,
    ortfile: InputPathType | null = null,
    nodetrend: boolean = false,
    norm: boolean = false,
    runner: Runner | null = null,
): V1dBandpassOutputs {
    /**
     * Bandpass filtering of time series data in AFNI *.1D files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param fbot Lowest frequency in the passband, in Hz (must be greater than or equal to 0)
     * @param ftop Highest frequency in the passband, in Hz (must be greater than FBOT)
     * @param infile Input AFNI *.1D file; each column is processed
     * @param timestep Set time step to 'dd' sec (default is 1.0)
     * @param ortfile Also orthogonalize input to columns in specified *.1D file (only one '-ort' option is allowed)
     * @param nodetrend Skip the quadratic detrending of the input
     * @param norm Make output time series have L2 norm = 1
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dBandpassOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_BANDPASS_METADATA);
    const params = v_1d_bandpass_params(fbot, ftop, infile, timestep, ortfile, nodetrend, norm)
    return v_1d_bandpass_execute(params, execution);
}


export {
      V1dBandpassOutputs,
      V1dBandpassParameters,
      V_1D_BANDPASS_METADATA,
      v_1d_bandpass,
      v_1d_bandpass_params,
};
