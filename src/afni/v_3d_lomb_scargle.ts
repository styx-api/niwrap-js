// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LOMB_SCARGLE_METADATA: Metadata = {
    id: "9e597a7312ee6b69d649017dd3754eea9c3d47b9.boutiques",
    name: "3dLombScargle",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLombScargleParameters {
    "@type": "afni.3dLombScargle";
    "prefix": string;
    "inset": InputPathType;
    "censor_1d"?: InputPathType | null | undefined;
    "censor_string"?: string | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "out_pow_spec": boolean;
    "nyquist_multiplier"?: number | null | undefined;
    "nifti": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dLombScargle": v_3d_lomb_scargle_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dLombScargle": v_3d_lomb_scargle_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_lomb_scargle(...)`.
 *
 * @interface
 */
interface V3dLombScargleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * 1D file of the sampled time points (in units of seconds) of the analyzed data set
     */
    time_points: OutputPathType;
    /**
     * 1D file of the frequency sample points (in units of 1/seconds) of the output periodogram/spectrum data set
     */
    frequency_points: OutputPathType;
    /**
     * Volumetric data set containing a LS-derived amplitude spectrum
     */
    amplitude_spectrum: OutputPathType;
    /**
     * Volumetric data set containing a LS-derived power spectrum
     */
    power_spectrum: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Output prefix name for data volume, time point 1D file, and frequency 1D file
 * @param inset Time series of volumes, a 4D volumetric data set
 * @param censor_1d Single row or column of 1s (keep) and 0s (censored) describing which volumes of FILE are kept in the sampling and which are censored out, respectively. The length of the list of numbers must be of the same length as the number of volumes in FILE. If not entered, then the program will look for subbricks of all-zeros and assume those are censored out.
 * @param censor_string AFNI-style selector string of volumes to *keep* in the analysis. Such as: '[0..4,7,10..$]'.
 * @param mask_file Optional, mask of volume to analyze; additionally, any voxel with uniformly zero values across time will produce a zero-spectrum
 * @param out_pow_spec Switch to output the amplitude spectrum of the freqs instead of the periodogram. In the formulation used here, for a time series of length N, the power spectral value S is related to the amplitude value X as: S = (X)**2. (Without this opt, default output is amplitude spectrum.)
 * @param nyquist_multiplier L-S periodograms can include frequencies above what would typically be considered Nyquist. By default, the maximum frequency will be what f_N *would* have been if no censoring of points had occurred. Acceptable values are >0. (This sets the 'hifac' parameter).
 * @param nifti Switch to output *.nii.gz volume file (default format is BRIK/HEAD).
 *
 * @returns Parameter dictionary
 */
function v_3d_lomb_scargle_params(
    prefix: string,
    inset: InputPathType,
    censor_1d: InputPathType | null = null,
    censor_string: string | null = null,
    mask_file: InputPathType | null = null,
    out_pow_spec: boolean = false,
    nyquist_multiplier: number | null = null,
    nifti: boolean = false,
): V3dLombScargleParameters {
    const params = {
        "@type": "afni.3dLombScargle" as const,
        "prefix": prefix,
        "inset": inset,
        "out_pow_spec": out_pow_spec,
        "nifti": nifti,
    };
    if (censor_1d !== null) {
        params["censor_1d"] = censor_1d;
    }
    if (censor_string !== null) {
        params["censor_string"] = censor_string;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (nyquist_multiplier !== null) {
        params["nyquist_multiplier"] = nyquist_multiplier;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_lomb_scargle_cargs(
    params: V3dLombScargleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dLombScargle");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-inset",
        execution.inputFile((params["inset"] ?? null))
    );
    if ((params["censor_1d"] ?? null) !== null) {
        cargs.push(
            "-censor_1D",
            execution.inputFile((params["censor_1d"] ?? null))
        );
    }
    if ((params["censor_string"] ?? null) !== null) {
        cargs.push(
            "-censor_str",
            (params["censor_string"] ?? null)
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["out_pow_spec"] ?? null)) {
        cargs.push("-out_pow_spec");
    }
    if ((params["nyquist_multiplier"] ?? null) !== null) {
        cargs.push(
            "-nyq_mult",
            String((params["nyquist_multiplier"] ?? null))
        );
    }
    if ((params["nifti"] ?? null)) {
        cargs.push("-nifti");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_lomb_scargle_outputs(
    params: V3dLombScargleParameters,
    execution: Execution,
): V3dLombScargleOutputs {
    const ret: V3dLombScargleOutputs = {
        root: execution.outputFile("."),
        time_points: execution.outputFile([(params["prefix"] ?? null), "_time.1D"].join('')),
        frequency_points: execution.outputFile([(params["prefix"] ?? null), "_freq.1D"].join('')),
        amplitude_spectrum: execution.outputFile([(params["prefix"] ?? null), "_amp+orig"].join('')),
        power_spectrum: execution.outputFile([(params["prefix"] ?? null), "_pow+orig"].join('')),
    };
    return ret;
}


/**
 * 3dLombScargle
 *
 * Make a periodogram or amplitude-spectrum of a time series that has a non-constant sampling rate.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLombScargleOutputs`).
 */
function v_3d_lomb_scargle_execute(
    params: V3dLombScargleParameters,
    runner: Runner | null = null,
): V3dLombScargleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LOMB_SCARGLE_METADATA);
    params = execution.params(params)
    const cargs = v_3d_lomb_scargle_cargs(params, execution)
    const ret = v_3d_lomb_scargle_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dLombScargle
 *
 * Make a periodogram or amplitude-spectrum of a time series that has a non-constant sampling rate.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Output prefix name for data volume, time point 1D file, and frequency 1D file
 * @param inset Time series of volumes, a 4D volumetric data set
 * @param censor_1d Single row or column of 1s (keep) and 0s (censored) describing which volumes of FILE are kept in the sampling and which are censored out, respectively. The length of the list of numbers must be of the same length as the number of volumes in FILE. If not entered, then the program will look for subbricks of all-zeros and assume those are censored out.
 * @param censor_string AFNI-style selector string of volumes to *keep* in the analysis. Such as: '[0..4,7,10..$]'.
 * @param mask_file Optional, mask of volume to analyze; additionally, any voxel with uniformly zero values across time will produce a zero-spectrum
 * @param out_pow_spec Switch to output the amplitude spectrum of the freqs instead of the periodogram. In the formulation used here, for a time series of length N, the power spectral value S is related to the amplitude value X as: S = (X)**2. (Without this opt, default output is amplitude spectrum.)
 * @param nyquist_multiplier L-S periodograms can include frequencies above what would typically be considered Nyquist. By default, the maximum frequency will be what f_N *would* have been if no censoring of points had occurred. Acceptable values are >0. (This sets the 'hifac' parameter).
 * @param nifti Switch to output *.nii.gz volume file (default format is BRIK/HEAD).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLombScargleOutputs`).
 */
function v_3d_lomb_scargle(
    prefix: string,
    inset: InputPathType,
    censor_1d: InputPathType | null = null,
    censor_string: string | null = null,
    mask_file: InputPathType | null = null,
    out_pow_spec: boolean = false,
    nyquist_multiplier: number | null = null,
    nifti: boolean = false,
    runner: Runner | null = null,
): V3dLombScargleOutputs {
    const params = v_3d_lomb_scargle_params(prefix, inset, censor_1d, censor_string, mask_file, out_pow_spec, nyquist_multiplier, nifti)
    return v_3d_lomb_scargle_execute(params, runner);
}


export {
      V3dLombScargleOutputs,
      V3dLombScargleParameters,
      V_3D_LOMB_SCARGLE_METADATA,
      v_3d_lomb_scargle,
      v_3d_lomb_scargle_execute,
      v_3d_lomb_scargle_params,
};
