// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLFFT_METADATA: Metadata = {
    id: "c090c1a90b26f9d75fc6fa7a9d2f89afcea81448.boutiques",
    name: "fslfft",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslfftParameters {
    "@type": "fsl.fslfft";
    "input_volume": InputPathType;
    "output_volume": string;
    "inverse_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslfft": fslfft_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslfft": fslfft_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslfft(...)`.
 *
 * @interface
 */
interface FslfftOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume result of the Fourier transform
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume file (e.g. invol.nii.gz)
 * @param output_volume Output volume file (e.g. outvol.nii.gz)
 * @param inverse_flag Flag to perform the inverse Fourier transform
 *
 * @returns Parameter dictionary
 */
function fslfft_params(
    input_volume: InputPathType,
    output_volume: string,
    inverse_flag: boolean = false,
): FslfftParameters {
    const params = {
        "@type": "fsl.fslfft" as const,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "inverse_flag": inverse_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslfft_cargs(
    params: FslfftParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslfft");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["inverse_flag"] ?? null)) {
        cargs.push("-inv");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslfft_outputs(
    params: FslfftParameters,
    execution: Execution,
): FslfftOutputs {
    const ret: FslfftOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


/**
 * A tool to compute the Fourier transform of an input volume and save the result in an output volume.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FslfftOutputs`).
 */
function fslfft_execute(
    params: FslfftParameters,
    execution: Execution,
): FslfftOutputs {
    params = execution.params(params)
    const cargs = fslfft_cargs(params, execution)
    const ret = fslfft_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to compute the Fourier transform of an input volume and save the result in an output volume.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_volume Input volume file (e.g. invol.nii.gz)
 * @param output_volume Output volume file (e.g. outvol.nii.gz)
 * @param inverse_flag Flag to perform the inverse Fourier transform
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslfftOutputs`).
 */
function fslfft(
    input_volume: InputPathType,
    output_volume: string,
    inverse_flag: boolean = false,
    runner: Runner | null = null,
): FslfftOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLFFT_METADATA);
    const params = fslfft_params(input_volume, output_volume, inverse_flag)
    return fslfft_execute(params, execution);
}


export {
      FSLFFT_METADATA,
      FslfftOutputs,
      FslfftParameters,
      fslfft,
      fslfft_cargs,
      fslfft_execute,
      fslfft_outputs,
      fslfft_params,
};
