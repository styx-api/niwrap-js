// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIENAX_METADATA: Metadata = {
    id: "9430c4304498bb779b2e0636dc95a5c133545c00.boutiques",
    name: "sienax",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SienaxParameters {
    "@type": "fsl.sienax";
    "infile": InputPathType;
    "output_dir"?: string | null | undefined;
    "debug_flag": boolean;
    "bet_options"?: string | null | undefined;
    "twoclass_segment_flag": boolean;
    "t2_flag": boolean;
    "top_threshold"?: number | null | undefined;
    "bottom_threshold"?: number | null | undefined;
    "regional_flag": boolean;
    "lesion_mask"?: InputPathType | null | undefined;
    "fast_options"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.sienax": sienax_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.sienax": sienax_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sienax(...)`.
 *
 * @interface
 */
interface SienaxOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmentation output file
     */
    segmentation_output: OutputPathType | null;
    /**
     * Summary report file
     */
    report_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infile Input image (e.g. img.nii.gz)
 * @param output_dir Output directory (default output is <input>_sienax)
 * @param debug_flag Debug (don't delete intermediate files)
 * @param bet_options Options to pass to BET brain extraction (inside double-quotes), e.g. -B "-f 0.3"
 * @param twoclass_segment_flag Two-class segmentation (don't segment grey and white matter separately)
 * @param t2_flag Input image is T2-weighted (default is T1-weighted)
 * @param top_threshold Ignore from t (mm) upwards in MNI152/Talairach space
 * @param bottom_threshold Ignore from b (mm) downwards in MNI152/Talairach space (b should probably be negative)
 * @param regional_flag Regional - use standard-space masks to give peripheral cortex GM volume (3-class segmentation only) and ventricular CSF volume
 * @param lesion_mask Use lesion (or lesion+CSF) mask to remove incorrectly labelled 'grey matter' voxels
 * @param fast_options Options to pass to FAST segmentation (inside double-quotes), e.g. -S "I 20"
 *
 * @returns Parameter dictionary
 */
function sienax_params(
    infile: InputPathType,
    output_dir: string | null = null,
    debug_flag: boolean = false,
    bet_options: string | null = null,
    twoclass_segment_flag: boolean = false,
    t2_flag: boolean = false,
    top_threshold: number | null = null,
    bottom_threshold: number | null = null,
    regional_flag: boolean = false,
    lesion_mask: InputPathType | null = null,
    fast_options: string | null = null,
): SienaxParameters {
    const params = {
        "@type": "fsl.sienax" as const,
        "infile": infile,
        "debug_flag": debug_flag,
        "twoclass_segment_flag": twoclass_segment_flag,
        "t2_flag": t2_flag,
        "regional_flag": regional_flag,
    };
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (bet_options !== null) {
        params["bet_options"] = bet_options;
    }
    if (top_threshold !== null) {
        params["top_threshold"] = top_threshold;
    }
    if (bottom_threshold !== null) {
        params["bottom_threshold"] = bottom_threshold;
    }
    if (lesion_mask !== null) {
        params["lesion_mask"] = lesion_mask;
    }
    if (fast_options !== null) {
        params["fast_options"] = fast_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sienax_cargs(
    params: SienaxParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("sienax");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("-d");
    }
    if ((params["bet_options"] ?? null) !== null) {
        cargs.push(
            "-B",
            (params["bet_options"] ?? null)
        );
    }
    if ((params["twoclass_segment_flag"] ?? null)) {
        cargs.push("-2");
    }
    if ((params["t2_flag"] ?? null)) {
        cargs.push("-t2");
    }
    if ((params["top_threshold"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["top_threshold"] ?? null))
        );
    }
    if ((params["bottom_threshold"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["bottom_threshold"] ?? null))
        );
    }
    if ((params["regional_flag"] ?? null)) {
        cargs.push("-r");
    }
    if ((params["lesion_mask"] ?? null) !== null) {
        cargs.push(
            "-lm",
            execution.inputFile((params["lesion_mask"] ?? null))
        );
    }
    if ((params["fast_options"] ?? null) !== null) {
        cargs.push(
            "-S",
            (params["fast_options"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function sienax_outputs(
    params: SienaxParameters,
    execution: Execution,
): SienaxOutputs {
    const ret: SienaxOutputs = {
        root: execution.outputFile("."),
        segmentation_output: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/segmentation.nii.gz"].join('')) : null,
        report_output: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/report.txt"].join('')) : null,
    };
    return ret;
}


/**
 * A tool to estimate brain tissue volume from a single MR image and to compare it to an external standard.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaxOutputs`).
 */
function sienax_execute(
    params: SienaxParameters,
    runner: Runner | null = null,
): SienaxOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIENAX_METADATA);
    params = execution.params(params)
    const cargs = sienax_cargs(params, execution)
    const ret = sienax_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to estimate brain tissue volume from a single MR image and to compare it to an external standard.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param infile Input image (e.g. img.nii.gz)
 * @param output_dir Output directory (default output is <input>_sienax)
 * @param debug_flag Debug (don't delete intermediate files)
 * @param bet_options Options to pass to BET brain extraction (inside double-quotes), e.g. -B "-f 0.3"
 * @param twoclass_segment_flag Two-class segmentation (don't segment grey and white matter separately)
 * @param t2_flag Input image is T2-weighted (default is T1-weighted)
 * @param top_threshold Ignore from t (mm) upwards in MNI152/Talairach space
 * @param bottom_threshold Ignore from b (mm) downwards in MNI152/Talairach space (b should probably be negative)
 * @param regional_flag Regional - use standard-space masks to give peripheral cortex GM volume (3-class segmentation only) and ventricular CSF volume
 * @param lesion_mask Use lesion (or lesion+CSF) mask to remove incorrectly labelled 'grey matter' voxels
 * @param fast_options Options to pass to FAST segmentation (inside double-quotes), e.g. -S "I 20"
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaxOutputs`).
 */
function sienax(
    infile: InputPathType,
    output_dir: string | null = null,
    debug_flag: boolean = false,
    bet_options: string | null = null,
    twoclass_segment_flag: boolean = false,
    t2_flag: boolean = false,
    top_threshold: number | null = null,
    bottom_threshold: number | null = null,
    regional_flag: boolean = false,
    lesion_mask: InputPathType | null = null,
    fast_options: string | null = null,
    runner: Runner | null = null,
): SienaxOutputs {
    const params = sienax_params(infile, output_dir, debug_flag, bet_options, twoclass_segment_flag, t2_flag, top_threshold, bottom_threshold, regional_flag, lesion_mask, fast_options)
    return sienax_execute(params, runner);
}


export {
      SIENAX_METADATA,
      SienaxOutputs,
      SienaxParameters,
      sienax,
      sienax_execute,
      sienax_params,
};
