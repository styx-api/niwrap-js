// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EXTRACT_LABEL_METADATA: Metadata = {
    id: "ec009de70ff2bd413e2325fc17f72a2ba0554c5c.boutiques",
    name: "mri_extract_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriExtractLabelParameters {
    "@type": "freesurfer.mri_extract_label";
    "input_volume": InputPathType;
    "labels": Array<string>;
    "output_name": string;
    "gaussian_smoothing"?: number | null | undefined;
    "transform_file"?: InputPathType | null | undefined;
    "exit_none_found": boolean;
    "dilate"?: number | null | undefined;
    "erode"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_extract_label": mri_extract_label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_extract_label": mri_extract_label_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_extract_label(...)`.
 *
 * @interface
 */
interface MriExtractLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Extracted labeled voxels output volume.
     */
    output_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume from which to extract labels.
 * @param labels Labels to extract. Can include one or more labels.
 * @param output_name Name of the output file.
 * @param gaussian_smoothing Apply a Gaussian smoothing kernel with sigma.
 * @param transform_file Apply the transform in xform file to the extracted volume.
 * @param exit_none_found Exit with error if none of the specified labels are found.
 * @param dilate Dilate the output volume n times.
 * @param erode Erode the output volume n times.
 *
 * @returns Parameter dictionary
 */
function mri_extract_label_params(
    input_volume: InputPathType,
    labels: Array<string>,
    output_name: string,
    gaussian_smoothing: number | null = null,
    transform_file: InputPathType | null = null,
    exit_none_found: boolean = false,
    dilate: number | null = null,
    erode: number | null = null,
): MriExtractLabelParameters {
    const params = {
        "@type": "freesurfer.mri_extract_label" as const,
        "input_volume": input_volume,
        "labels": labels,
        "output_name": output_name,
        "exit_none_found": exit_none_found,
    };
    if (gaussian_smoothing !== null) {
        params["gaussian_smoothing"] = gaussian_smoothing;
    }
    if (transform_file !== null) {
        params["transform_file"] = transform_file;
    }
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (erode !== null) {
        params["erode"] = erode;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_extract_label_cargs(
    params: MriExtractLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_extract_label");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(...(params["labels"] ?? null));
    cargs.push((params["output_name"] ?? null));
    if ((params["gaussian_smoothing"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["gaussian_smoothing"] ?? null))
        );
    }
    if ((params["transform_file"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["transform_file"] ?? null))
        );
    }
    if ((params["exit_none_found"] ?? null)) {
        cargs.push("-exit_none_found");
    }
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "-dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "-erode",
            String((params["erode"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_extract_label_outputs(
    params: MriExtractLabelParameters,
    execution: Execution,
): MriExtractLabelOutputs {
    const ret: MriExtractLabelOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile([(params["output_name"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_extract_label
 *
 * Extracts a set of labeled voxels from an image.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriExtractLabelOutputs`).
 */
function mri_extract_label_execute(
    params: MriExtractLabelParameters,
    runner: Runner | null = null,
): MriExtractLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EXTRACT_LABEL_METADATA);
    params = execution.params(params)
    const cargs = mri_extract_label_cargs(params, execution)
    const ret = mri_extract_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_extract_label
 *
 * Extracts a set of labeled voxels from an image.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume from which to extract labels.
 * @param labels Labels to extract. Can include one or more labels.
 * @param output_name Name of the output file.
 * @param gaussian_smoothing Apply a Gaussian smoothing kernel with sigma.
 * @param transform_file Apply the transform in xform file to the extracted volume.
 * @param exit_none_found Exit with error if none of the specified labels are found.
 * @param dilate Dilate the output volume n times.
 * @param erode Erode the output volume n times.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriExtractLabelOutputs`).
 */
function mri_extract_label(
    input_volume: InputPathType,
    labels: Array<string>,
    output_name: string,
    gaussian_smoothing: number | null = null,
    transform_file: InputPathType | null = null,
    exit_none_found: boolean = false,
    dilate: number | null = null,
    erode: number | null = null,
    runner: Runner | null = null,
): MriExtractLabelOutputs {
    const params = mri_extract_label_params(input_volume, labels, output_name, gaussian_smoothing, transform_file, exit_none_found, dilate, erode)
    return mri_extract_label_execute(params, runner);
}


export {
      MRI_EXTRACT_LABEL_METADATA,
      MriExtractLabelOutputs,
      MriExtractLabelParameters,
      mri_extract_label,
      mri_extract_label_execute,
      mri_extract_label_params,
};
