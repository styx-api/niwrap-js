// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__QUIET_TALKERS_METADATA: Metadata = {
    id: "00c6dc29db0aef0f99749f24573a4ed8e3adfda3.boutiques",
    name: "@Quiet_Talkers",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VQuietTalkersParameters {
    "@type"?: "afni/@Quiet_Talkers";
    "sudo": boolean;
    "prog"?: Array<string> | null | undefined;
    "npb_val"?: Array<number> | null | undefined;
    "npb_range"?: Array<number> | null | undefined;
    "pif_key"?: string | null | undefined;
    "no_npb": boolean;
    "list": boolean;
    "quiet": boolean;
}
type VQuietTalkersParametersTagged = Required<Pick<VQuietTalkersParameters, '@type'>> & VQuietTalkersParameters;


/**
 * Output object returned when calling `VQuietTalkersParameters(...)`.
 *
 * @interface
 */
interface VQuietTalkersOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param sudo Invoke higher powers to kill processes that you do not own
 * @param prog Instead of the default program list, only kill the specified program. You can use multiple -prog options
 * @param npb_val Kill those programs using NIML port block NV
 * @param npb_range Kill those using NIML port blocks between NV0 and NV1
 * @param pif_key Kill those programs that have a string matching KEY_STRING in their commandline
 * @param no_npb Kill any program in the list regardless of -npb options or -pif
 * @param list Just list process numbers, don't run kill command
 * @param quiet Do it quietly
 *
 * @returns Parameter dictionary
 */
function v__quiet_talkers_params(
    sudo: boolean = false,
    prog: Array<string> | null = null,
    npb_val: Array<number> | null = null,
    npb_range: Array<number> | null = null,
    pif_key: string | null = null,
    no_npb: boolean = false,
    list: boolean = false,
    quiet: boolean = false,
): VQuietTalkersParametersTagged {
    const params = {
        "@type": "afni/@Quiet_Talkers" as const,
        "sudo": sudo,
        "no_npb": no_npb,
        "list": list,
        "quiet": quiet,
    };
    if (prog !== null) {
        params["prog"] = prog;
    }
    if (npb_val !== null) {
        params["npb_val"] = npb_val;
    }
    if (npb_range !== null) {
        params["npb_range"] = npb_range;
    }
    if (pif_key !== null) {
        params["pif_key"] = pif_key;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__quiet_talkers_cargs(
    params: VQuietTalkersParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@Quiet_Talkers");
    if ((params["sudo"] ?? false)) {
        cargs.push("-sudo");
    }
    if ((params["prog"] ?? null) !== null) {
        cargs.push(
            "-prog",
            ...(params["prog"] ?? null)
        );
    }
    if ((params["npb_val"] ?? null) !== null) {
        cargs.push(
            "-npb_val",
            ...(params["npb_val"] ?? null).map(String)
        );
    }
    if ((params["npb_range"] ?? null) !== null) {
        cargs.push(
            "-npb_range",
            ...(params["npb_range"] ?? null).map(String)
        );
    }
    if ((params["pif_key"] ?? null) !== null) {
        cargs.push(
            "-pif",
            (params["pif_key"] ?? null)
        );
    }
    if ((params["no_npb"] ?? false)) {
        cargs.push("-no_npb");
    }
    if ((params["list"] ?? false)) {
        cargs.push("-list");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__quiet_talkers_outputs(
    params: VQuietTalkersParameters,
    execution: Execution,
): VQuietTalkersOutputs {
    const ret: VQuietTalkersOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * @Quiet_Talkers
 *
 * A script to find and kill AFNI processes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VQuietTalkersOutputs`).
 */
function v__quiet_talkers_execute(
    params: VQuietTalkersParameters,
    runner: Runner | null = null,
): VQuietTalkersOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__QUIET_TALKERS_METADATA);
    params = execution.params(params)
    const cargs = v__quiet_talkers_cargs(params, execution)
    const ret = v__quiet_talkers_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @Quiet_Talkers
 *
 * A script to find and kill AFNI processes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param sudo Invoke higher powers to kill processes that you do not own
 * @param prog Instead of the default program list, only kill the specified program. You can use multiple -prog options
 * @param npb_val Kill those programs using NIML port block NV
 * @param npb_range Kill those using NIML port blocks between NV0 and NV1
 * @param pif_key Kill those programs that have a string matching KEY_STRING in their commandline
 * @param no_npb Kill any program in the list regardless of -npb options or -pif
 * @param list Just list process numbers, don't run kill command
 * @param quiet Do it quietly
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VQuietTalkersOutputs`).
 */
function v__quiet_talkers(
    sudo: boolean = false,
    prog: Array<string> | null = null,
    npb_val: Array<number> | null = null,
    npb_range: Array<number> | null = null,
    pif_key: string | null = null,
    no_npb: boolean = false,
    list: boolean = false,
    quiet: boolean = false,
    runner: Runner | null = null,
): VQuietTalkersOutputs {
    const params = v__quiet_talkers_params(sudo, prog, npb_val, npb_range, pif_key, no_npb, list, quiet)
    return v__quiet_talkers_execute(params, runner);
}


export {
      VQuietTalkersOutputs,
      V__QUIET_TALKERS_METADATA,
      v__quiet_talkers,
      v__quiet_talkers_execute,
      v__quiet_talkers_params,
};
