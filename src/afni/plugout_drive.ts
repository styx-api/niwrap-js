// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PLUGOUT_DRIVE_METADATA: Metadata = {
    id: "030951e27ca51c3ea8b0ca5f6744d3031e2d37ee.boutiques",
    name: "plugout_drive",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface PlugoutDriveParameters {
    "@type": "afni.plugout_drive";
    "host"?: string | null | undefined;
    "shm": boolean;
    "verbose": boolean;
    "port"?: number | null | undefined;
    "maxwait"?: number | null | undefined;
    "name"?: string | null | undefined;
    "command"?: Array<string> | null | undefined;
    "quit": boolean;
    "np"?: number | null | undefined;
    "npq"?: number | null | undefined;
    "npb"?: number | null | undefined;
    "max_port_bloc": boolean;
    "max_port_bloc_quiet": boolean;
    "num_assigned_ports": boolean;
    "num_assigned_ports_quiet": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.plugout_drive": plugout_drive_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `plugout_drive(...)`.
 *
 * @interface
 */
interface PlugoutDriveOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param host Connect to AFNI running on the specified host using TCP/IP. Default is 'localhost'.
 * @param shm Connect to the current host using shared memory for large data transfers.
 * @param verbose Verbose mode.
 * @param port Use TCP/IP port number. Default is 8099.
 * @param maxwait Maximum wait time in seconds for AFNI to connect. Default is 9 seconds.
 * @param name Name that AFNI assigns to this plugout. Default is a pre-defined name.
 * @param command Command to be executed on AFNI. Example: '-com "SET_FUNCTION SomeFunction"'.
 * @param quit Quit after executing all -com commands. Default is to wait for more commands.
 * @param np Provide a port offset to allow multiple instances of AFNI <--> SUMA, etc., on the same machine.
 * @param npq Like -np but quieter in the face of adversity.
 * @param npb Similar to -np, but using a block for easier usage.
 * @param max_port_bloc Print the current value of MAX_BLOC and exit.
 * @param max_port_bloc_quiet Print MAX_BLOC value and exit quietly.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI and exit.
 * @param num_assigned_ports_quiet Print the number of assigned ports used by AFNI and exit quietly.
 *
 * @returns Parameter dictionary
 */
function plugout_drive_params(
    host: string | null = null,
    shm: boolean = false,
    verbose: boolean = false,
    port: number | null = null,
    maxwait: number | null = null,
    name: string | null = null,
    command: Array<string> | null = null,
    quit: boolean = false,
    np: number | null = null,
    npq: number | null = null,
    npb: number | null = null,
    max_port_bloc: boolean = false,
    max_port_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
): PlugoutDriveParameters {
    const params = {
        "@type": "afni.plugout_drive" as const,
        "shm": shm,
        "verbose": verbose,
        "quit": quit,
        "max_port_bloc": max_port_bloc,
        "max_port_bloc_quiet": max_port_bloc_quiet,
        "num_assigned_ports": num_assigned_ports,
        "num_assigned_ports_quiet": num_assigned_ports_quiet,
    };
    if (host !== null) {
        params["host"] = host;
    }
    if (port !== null) {
        params["port"] = port;
    }
    if (maxwait !== null) {
        params["maxwait"] = maxwait;
    }
    if (name !== null) {
        params["name"] = name;
    }
    if (command !== null) {
        params["command"] = command;
    }
    if (np !== null) {
        params["np"] = np;
    }
    if (npq !== null) {
        params["npq"] = npq;
    }
    if (npb !== null) {
        params["npb"] = npb;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function plugout_drive_cargs(
    params: PlugoutDriveParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("plugout_drive");
    if ((params["host"] ?? null) !== null) {
        cargs.push(
            "-host",
            (params["host"] ?? null)
        );
    }
    if ((params["shm"] ?? null)) {
        cargs.push("-shm");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["port"] ?? null) !== null) {
        cargs.push(
            "-port",
            String((params["port"] ?? null))
        );
    }
    if ((params["maxwait"] ?? null) !== null) {
        cargs.push(
            "-maxwait",
            String((params["maxwait"] ?? null))
        );
    }
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["name"] ?? null)
        );
    }
    if ((params["command"] ?? null) !== null) {
        cargs.push(
            "-com",
            ...(params["command"] ?? null)
        );
    }
    if ((params["quit"] ?? null)) {
        cargs.push("-quit");
    }
    if ((params["np"] ?? null) !== null) {
        cargs.push(
            "-np",
            String((params["np"] ?? null))
        );
    }
    if ((params["npq"] ?? null) !== null) {
        cargs.push(
            "-npq",
            String((params["npq"] ?? null))
        );
    }
    if ((params["npb"] ?? null) !== null) {
        cargs.push(
            "-npb",
            String((params["npb"] ?? null))
        );
    }
    if ((params["max_port_bloc"] ?? null)) {
        cargs.push("-max_port_bloc");
    }
    if ((params["max_port_bloc_quiet"] ?? null)) {
        cargs.push("-max_port_bloc_quiet");
    }
    if ((params["num_assigned_ports"] ?? null)) {
        cargs.push("-num_assigned_ports");
    }
    if ((params["num_assigned_ports_quiet"] ?? null)) {
        cargs.push("-num_assigned_ports_quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function plugout_drive_outputs(
    params: PlugoutDriveParameters,
    execution: Execution,
): PlugoutDriveOutputs {
    const ret: PlugoutDriveOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * plugout_drive
 *
 * This program connects to AFNI and sends commands that the user specifies interactively or on command line over to AFNI to be executed.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutDriveOutputs`).
 */
function plugout_drive_execute(
    params: PlugoutDriveParameters,
    runner: Runner | null = null,
): PlugoutDriveOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PLUGOUT_DRIVE_METADATA);
    params = execution.params(params)
    const cargs = plugout_drive_cargs(params, execution)
    const ret = plugout_drive_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * plugout_drive
 *
 * This program connects to AFNI and sends commands that the user specifies interactively or on command line over to AFNI to be executed.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param host Connect to AFNI running on the specified host using TCP/IP. Default is 'localhost'.
 * @param shm Connect to the current host using shared memory for large data transfers.
 * @param verbose Verbose mode.
 * @param port Use TCP/IP port number. Default is 8099.
 * @param maxwait Maximum wait time in seconds for AFNI to connect. Default is 9 seconds.
 * @param name Name that AFNI assigns to this plugout. Default is a pre-defined name.
 * @param command Command to be executed on AFNI. Example: '-com "SET_FUNCTION SomeFunction"'.
 * @param quit Quit after executing all -com commands. Default is to wait for more commands.
 * @param np Provide a port offset to allow multiple instances of AFNI <--> SUMA, etc., on the same machine.
 * @param npq Like -np but quieter in the face of adversity.
 * @param npb Similar to -np, but using a block for easier usage.
 * @param max_port_bloc Print the current value of MAX_BLOC and exit.
 * @param max_port_bloc_quiet Print MAX_BLOC value and exit quietly.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI and exit.
 * @param num_assigned_ports_quiet Print the number of assigned ports used by AFNI and exit quietly.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutDriveOutputs`).
 */
function plugout_drive(
    host: string | null = null,
    shm: boolean = false,
    verbose: boolean = false,
    port: number | null = null,
    maxwait: number | null = null,
    name: string | null = null,
    command: Array<string> | null = null,
    quit: boolean = false,
    np: number | null = null,
    npq: number | null = null,
    npb: number | null = null,
    max_port_bloc: boolean = false,
    max_port_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
    runner: Runner | null = null,
): PlugoutDriveOutputs {
    const params = plugout_drive_params(host, shm, verbose, port, maxwait, name, command, quit, np, npq, npb, max_port_bloc, max_port_bloc_quiet, num_assigned_ports, num_assigned_ports_quiet)
    return plugout_drive_execute(params, runner);
}


export {
      PLUGOUT_DRIVE_METADATA,
      PlugoutDriveOutputs,
      PlugoutDriveParameters,
      plugout_drive,
      plugout_drive_execute,
      plugout_drive_params,
};
