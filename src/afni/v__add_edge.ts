// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ADD_EDGE_METADATA: Metadata = {
    id: "06a72814ee44ef3e2b9ca6f055c466f63cd08827.boutiques",
    name: "@AddEdge",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAddEdgeParameters {
    "@type": "afni.@AddEdge";
    "input_files": Array<InputPathType>;
    "examine_list"?: string | null | undefined;
    "ax_mont"?: string | null | undefined;
    "ax_geom"?: string | null | undefined;
    "sag_geom"?: string | null | undefined;
    "layout_file"?: string | null | undefined;
    "no_layout": boolean;
    "edge_percentile"?: number | null | undefined;
    "single_edge": boolean;
    "opacity"?: number | null | undefined;
    "keep_temp": boolean;
    "no_deoblique": boolean;
    "auto_record": boolean;
    "auto": boolean;
    "no_auto": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@AddEdge": v__add_edge_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@AddEdge": v__add_edge_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__add_edge(...)`.
 *
 * @interface
 */
interface VAddEdgeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Edge composite image of dataset with its own edges
     */
    dset_nn_ec: OutputPathType;
    /**
     * Edge composite image of base dataset together with the edges of the input dset_nn dataset
     */
    base_dset_dset_nn_ec: OutputPathType;
    /**
     * Edge-only datasets - used in single edge display option
     */
    base_dset_e3: OutputPathType;
    /**
     * Edge-only input datasets - used in single edge display option
     */
    dset_nn_e3: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input datasets
 * @param examine_list Use list of paired datasets from file
 * @param ax_mont Axial montage string (default='2x2:24')
 * @param ax_geom Axial image window geometry (default='777x702+433+334')
 * @param sag_geom Sagittal image window geometry (default='540x360+4+436')
 * @param layout_file Use AFNI layout file for display
 * @param no_layout Do not use layout. Use AFNI as it is open.
 * @param edge_percentile Specify edge threshold value (default=30%)
 * @param single_edge Show only a single edge in composite image
 * @param opacity Set opacity of overlay (default=9 opaque)
 * @param keep_temp Do not remove temporary files
 * @param no_deoblique Do not deoblique any data to show overlap
 * @param auto_record Save JPEG files of current slices without prompting
 * @param auto Closes old AFNI sessions and relaunches a new one ready to listen to @AddEdge in review mode.
 * @param no_auto Opposite of -auto
 *
 * @returns Parameter dictionary
 */
function v__add_edge_params(
    input_files: Array<InputPathType>,
    examine_list: string | null = null,
    ax_mont: string | null = null,
    ax_geom: string | null = null,
    sag_geom: string | null = null,
    layout_file: string | null = null,
    no_layout: boolean = false,
    edge_percentile: number | null = null,
    single_edge: boolean = false,
    opacity: number | null = null,
    keep_temp: boolean = false,
    no_deoblique: boolean = false,
    auto_record: boolean = false,
    auto: boolean = false,
    no_auto: boolean = false,
): VAddEdgeParameters {
    const params = {
        "@type": "afni.@AddEdge" as const,
        "input_files": input_files,
        "no_layout": no_layout,
        "single_edge": single_edge,
        "keep_temp": keep_temp,
        "no_deoblique": no_deoblique,
        "auto_record": auto_record,
        "auto": auto,
        "no_auto": no_auto,
    };
    if (examine_list !== null) {
        params["examine_list"] = examine_list;
    }
    if (ax_mont !== null) {
        params["ax_mont"] = ax_mont;
    }
    if (ax_geom !== null) {
        params["ax_geom"] = ax_geom;
    }
    if (sag_geom !== null) {
        params["sag_geom"] = sag_geom;
    }
    if (layout_file !== null) {
        params["layout_file"] = layout_file;
    }
    if (edge_percentile !== null) {
        params["edge_percentile"] = edge_percentile;
    }
    if (opacity !== null) {
        params["opacity"] = opacity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__add_edge_cargs(
    params: VAddEdgeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@AddEdge");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["examine_list"] ?? null) !== null) {
        cargs.push(
            "-examinelist",
            (params["examine_list"] ?? null)
        );
    }
    if ((params["ax_mont"] ?? null) !== null) {
        cargs.push(
            "-ax_mont",
            (params["ax_mont"] ?? null)
        );
    }
    if ((params["ax_geom"] ?? null) !== null) {
        cargs.push(
            "-ax_geom",
            (params["ax_geom"] ?? null)
        );
    }
    if ((params["sag_geom"] ?? null) !== null) {
        cargs.push(
            "-sag_geom",
            (params["sag_geom"] ?? null)
        );
    }
    if ((params["layout_file"] ?? null) !== null) {
        cargs.push(
            "-layout",
            (params["layout_file"] ?? null)
        );
    }
    if ((params["no_layout"] ?? null)) {
        cargs.push("-no_layout");
    }
    if ((params["edge_percentile"] ?? null) !== null) {
        cargs.push(
            "-edge_percentile",
            String((params["edge_percentile"] ?? null))
        );
    }
    if ((params["single_edge"] ?? null)) {
        cargs.push("-single_edge");
    }
    if ((params["opacity"] ?? null) !== null) {
        cargs.push(
            "-opa",
            String((params["opacity"] ?? null))
        );
    }
    if ((params["keep_temp"] ?? null)) {
        cargs.push("-keep_temp");
    }
    if ((params["no_deoblique"] ?? null)) {
        cargs.push("-no_deoblique");
    }
    if ((params["auto_record"] ?? null)) {
        cargs.push("-auto_record");
    }
    if ((params["auto"] ?? null)) {
        cargs.push("-auto");
    }
    if ((params["no_auto"] ?? null)) {
        cargs.push("-no_auto");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__add_edge_outputs(
    params: VAddEdgeParameters,
    execution: Execution,
): VAddEdgeOutputs {
    const ret: VAddEdgeOutputs = {
        root: execution.outputFile("."),
        dset_nn_ec: execution.outputFile(["dset_nn_ec"].join('')),
        base_dset_dset_nn_ec: execution.outputFile(["base_dset_dset_nn_ec"].join('')),
        base_dset_e3: execution.outputFile(["base_dset_e3"].join('')),
        dset_nn_e3: execution.outputFile(["dset_nn_e3"].join('')),
    };
    return ret;
}


/**
 * A script to create composite edge-enhanced datasets and drive the AFNI interface to display the results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VAddEdgeOutputs`).
 */
function v__add_edge_execute(
    params: VAddEdgeParameters,
    execution: Execution,
): VAddEdgeOutputs {
    params = execution.params(params)
    const cargs = v__add_edge_cargs(params, execution)
    const ret = v__add_edge_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A script to create composite edge-enhanced datasets and drive the AFNI interface to display the results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input datasets
 * @param examine_list Use list of paired datasets from file
 * @param ax_mont Axial montage string (default='2x2:24')
 * @param ax_geom Axial image window geometry (default='777x702+433+334')
 * @param sag_geom Sagittal image window geometry (default='540x360+4+436')
 * @param layout_file Use AFNI layout file for display
 * @param no_layout Do not use layout. Use AFNI as it is open.
 * @param edge_percentile Specify edge threshold value (default=30%)
 * @param single_edge Show only a single edge in composite image
 * @param opacity Set opacity of overlay (default=9 opaque)
 * @param keep_temp Do not remove temporary files
 * @param no_deoblique Do not deoblique any data to show overlap
 * @param auto_record Save JPEG files of current slices without prompting
 * @param auto Closes old AFNI sessions and relaunches a new one ready to listen to @AddEdge in review mode.
 * @param no_auto Opposite of -auto
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAddEdgeOutputs`).
 */
function v__add_edge(
    input_files: Array<InputPathType>,
    examine_list: string | null = null,
    ax_mont: string | null = null,
    ax_geom: string | null = null,
    sag_geom: string | null = null,
    layout_file: string | null = null,
    no_layout: boolean = false,
    edge_percentile: number | null = null,
    single_edge: boolean = false,
    opacity: number | null = null,
    keep_temp: boolean = false,
    no_deoblique: boolean = false,
    auto_record: boolean = false,
    auto: boolean = false,
    no_auto: boolean = false,
    runner: Runner | null = null,
): VAddEdgeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ADD_EDGE_METADATA);
    const params = v__add_edge_params(input_files, examine_list, ax_mont, ax_geom, sag_geom, layout_file, no_layout, edge_percentile, single_edge, opacity, keep_temp, no_deoblique, auto_record, auto, no_auto)
    return v__add_edge_execute(params, execution);
}


export {
      VAddEdgeOutputs,
      VAddEdgeParameters,
      V__ADD_EDGE_METADATA,
      v__add_edge,
      v__add_edge_cargs,
      v__add_edge_execute,
      v__add_edge_outputs,
      v__add_edge_params,
};
