// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLORIENT_METADATA: Metadata = {
    id: "2f96cd4443c7478d807bd64e326ff5639910ab53.boutiques",
    name: "fslorient",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslorientParameters {
    "__STYXTYPE__": "fslorient";
    "swap_orient": boolean;
    "filename": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslorient": fslorient_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslorient(...)`.
 *
 * @interface
 */
interface FslorientOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fslorient_params(
    filename: InputPathType,
    swap_orient: boolean = false,
): FslorientParameters {
    /**
     * Build parameters.
    
     * @param filename Filename of the image to operate on (e.g. img.nii.gz)
     * @param swap_orient Swaps FSL radiological and FSL neurological
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslorient" as const,
        "swap_orient": swap_orient,
        "filename": filename,
    };
    return params;
}


function fslorient_cargs(
    params: FslorientParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslorient");
    if ((params["swap_orient"] ?? null)) {
        cargs.push("-swaporient");
    }
    cargs.push(execution.inputFile((params["filename"] ?? null)));
    return cargs;
}


function fslorient_outputs(
    params: FslorientParameters,
    execution: Execution,
): FslorientOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslorientOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fslorient_execute(
    params: FslorientParameters,
    execution: Execution,
): FslorientOutputs {
    /**
     * FSL tool to manipulate NIfTI header orientation information.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslorientOutputs`).
     */
    params = execution.params(params)
    const cargs = fslorient_cargs(params, execution)
    const ret = fslorient_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslorient(
    filename: InputPathType,
    swap_orient: boolean = false,
    runner: Runner | null = null,
): FslorientOutputs {
    /**
     * FSL tool to manipulate NIfTI header orientation information.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param filename Filename of the image to operate on (e.g. img.nii.gz)
     * @param swap_orient Swaps FSL radiological and FSL neurological
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslorientOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLORIENT_METADATA);
    const params = fslorient_params(filename, swap_orient)
    return fslorient_execute(params, execution);
}


export {
      FSLORIENT_METADATA,
      FslorientOutputs,
      FslorientParameters,
      fslorient,
      fslorient_params,
};
