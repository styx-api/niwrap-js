// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NWARP_XYZ_METADATA: Metadata = {
    id: "1ad64cabce09853e006ac8e3b63d94912f629b5c.boutiques",
    name: "3dNwarpXYZ",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNwarpXyzParameters {
    "__STYXTYPE__": "3dNwarpXYZ";
    "xyzfile": InputPathType;
    "warp_spec": string;
    "iwarp": boolean;
    "output_file": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dNwarpXYZ": v_3d_nwarp_xyz_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dNwarpXYZ": v_3d_nwarp_xyz_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_nwarp_xyz(...)`.
 *
 * @interface
 */
interface V3dNwarpXyzOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Warped XYZ coordinates output file
     */
    output_file: OutputPathType;
}


function v_3d_nwarp_xyz_params(
    xyzfile: InputPathType,
    warp_spec: string,
    output_file: string,
    iwarp: boolean = false,
): V3dNwarpXyzParameters {
    /**
     * Build parameters.
    
     * @param xyzfile XYZ coordinate file containing 3 columns
     * @param warp_spec Warp specification as in 3dNwarpApply
     * @param output_file Warped XYZ coordinates output file
     * @param iwarp Compute the inverse warp for each input (x,y,z) triple
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dNwarpXYZ" as const,
        "xyzfile": xyzfile,
        "warp_spec": warp_spec,
        "iwarp": iwarp,
        "output_file": output_file,
    };
    return params;
}


function v_3d_nwarp_xyz_cargs(
    params: V3dNwarpXyzParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dNwarpXYZ");
    cargs.push(execution.inputFile((params["xyzfile"] ?? null)));
    cargs.push(
        "-nwarp",
        (params["warp_spec"] ?? null)
    );
    if ((params["iwarp"] ?? null)) {
        cargs.push("-iwarp");
    }
    cargs.push(["> ", (params["output_file"] ?? null)].join(''));
    return cargs;
}


function v_3d_nwarp_xyz_outputs(
    params: V3dNwarpXyzParameters,
    execution: Execution,
): V3dNwarpXyzOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dNwarpXyzOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function v_3d_nwarp_xyz_execute(
    params: V3dNwarpXyzParameters,
    execution: Execution,
): V3dNwarpXyzOutputs {
    /**
     * Transforms the DICOM xyz coordinates in the input XYZfile.1D based on specified warp.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dNwarpXyzOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_nwarp_xyz_cargs(params, execution)
    const ret = v_3d_nwarp_xyz_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_nwarp_xyz(
    xyzfile: InputPathType,
    warp_spec: string,
    output_file: string,
    iwarp: boolean = false,
    runner: Runner | null = null,
): V3dNwarpXyzOutputs {
    /**
     * Transforms the DICOM xyz coordinates in the input XYZfile.1D based on specified warp.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param xyzfile XYZ coordinate file containing 3 columns
     * @param warp_spec Warp specification as in 3dNwarpApply
     * @param output_file Warped XYZ coordinates output file
     * @param iwarp Compute the inverse warp for each input (x,y,z) triple
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dNwarpXyzOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NWARP_XYZ_METADATA);
    const params = v_3d_nwarp_xyz_params(xyzfile, warp_spec, output_file, iwarp)
    return v_3d_nwarp_xyz_execute(params, execution);
}


export {
      V3dNwarpXyzOutputs,
      V3dNwarpXyzParameters,
      V_3D_NWARP_XYZ_METADATA,
      v_3d_nwarp_xyz,
      v_3d_nwarp_xyz_params,
};
