// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RUN_FIRST_METADATA: Metadata = {
    id: "308f5a66b89ea5d07a41a21667b3fcb42e050317.boutiques",
    name: "run_first",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface RunFirstParameters {
    "__STYXTYPE__": "run_first";
    "input_image": InputPathType;
    "transformation_matrix": InputPathType;
    "n_modes": number;
    "output_basename": string;
    "model_name": InputPathType;
    "verbose_flag": boolean;
    "intref_model_name"?: string | null | undefined;
    "load_bvars"?: InputPathType | null | undefined;
    "multiple_images_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "run_first": run_first_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "run_first": run_first_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `run_first(...)`.
 *
 * @interface
 */
interface RunFirstOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output files generated by FIRST
     */
    output_files: OutputPathType;
}


function run_first_params(
    input_image: InputPathType,
    transformation_matrix: InputPathType,
    n_modes: number,
    output_basename: string,
    model_name: InputPathType,
    verbose_flag: boolean = false,
    intref_model_name: string | null = null,
    load_bvars: InputPathType | null = null,
    multiple_images_flag: boolean = false,
): RunFirstParameters {
    /**
     * Build parameters.
    
     * @param input_image Input image file (e.g. img.nii.gz)
     * @param transformation_matrix Input transformation matrix file (e.g. input_to_mni.mat)
     * @param n_modes Number of modes
     * @param output_basename Output basename
     * @param model_name Model name
     * @param verbose_flag Verbose mode
     * @param intref_model_name Reference structure for the local intensity normalization
     * @param load_bvars Initializes FIRST with a previous estimate of the structure
     * @param multiple_images_flag Run FIRST on multiple images; provide a list of images, transformation matrices, and output names
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "run_first" as const,
        "input_image": input_image,
        "transformation_matrix": transformation_matrix,
        "n_modes": n_modes,
        "output_basename": output_basename,
        "model_name": model_name,
        "verbose_flag": verbose_flag,
        "multiple_images_flag": multiple_images_flag,
    };
    if (intref_model_name !== null) {
        params["intref_model_name"] = intref_model_name;
    }
    if (load_bvars !== null) {
        params["load_bvars"] = load_bvars;
    }
    return params;
}


function run_first_cargs(
    params: RunFirstParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("run_first");
    cargs.push(
        "-i",
        execution.inputFile((params["input_image"] ?? null))
    );
    cargs.push(
        "-t",
        execution.inputFile((params["transformation_matrix"] ?? null))
    );
    cargs.push(
        "-n",
        String((params["n_modes"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_basename"] ?? null)
    );
    cargs.push(
        "-m",
        execution.inputFile((params["model_name"] ?? null))
    );
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["intref_model_name"] ?? null) !== null) {
        cargs.push(
            "-intref",
            (params["intref_model_name"] ?? null)
        );
    }
    if ((params["load_bvars"] ?? null) !== null) {
        cargs.push(
            "-loadBvars",
            execution.inputFile((params["load_bvars"] ?? null))
        );
    }
    if ((params["multiple_images_flag"] ?? null)) {
        cargs.push("-multipleImages");
    }
    return cargs;
}


function run_first_outputs(
    params: RunFirstParameters,
    execution: Execution,
): RunFirstOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RunFirstOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile([(params["output_basename"] ?? null), "*"].join('')),
    };
    return ret;
}


function run_first_execute(
    params: RunFirstParameters,
    execution: Execution,
): RunFirstOutputs {
    /**
     * A tool to run FSL's FIRST for subcortical segmentation.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RunFirstOutputs`).
     */
    params = execution.params(params)
    const cargs = run_first_cargs(params, execution)
    const ret = run_first_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function run_first(
    input_image: InputPathType,
    transformation_matrix: InputPathType,
    n_modes: number,
    output_basename: string,
    model_name: InputPathType,
    verbose_flag: boolean = false,
    intref_model_name: string | null = null,
    load_bvars: InputPathType | null = null,
    multiple_images_flag: boolean = false,
    runner: Runner | null = null,
): RunFirstOutputs {
    /**
     * A tool to run FSL's FIRST for subcortical segmentation.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_image Input image file (e.g. img.nii.gz)
     * @param transformation_matrix Input transformation matrix file (e.g. input_to_mni.mat)
     * @param n_modes Number of modes
     * @param output_basename Output basename
     * @param model_name Model name
     * @param verbose_flag Verbose mode
     * @param intref_model_name Reference structure for the local intensity normalization
     * @param load_bvars Initializes FIRST with a previous estimate of the structure
     * @param multiple_images_flag Run FIRST on multiple images; provide a list of images, transformation matrices, and output names
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RunFirstOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RUN_FIRST_METADATA);
    const params = run_first_params(input_image, transformation_matrix, n_modes, output_basename, model_name, verbose_flag, intref_model_name, load_bvars, multiple_images_flag)
    return run_first_execute(params, execution);
}


export {
      RUN_FIRST_METADATA,
      RunFirstOutputs,
      RunFirstParameters,
      run_first,
      run_first_params,
};
