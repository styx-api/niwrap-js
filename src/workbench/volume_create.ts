// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_CREATE_METADATA: Metadata = {
    id: "4f88aa095b5dfcbd90372ec9ac43f92934dd4cba.boutiques",
    name: "volume-create",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeCreatePlumbParameters {
    "@type": "workbench.volume-create.plumb";
    "axis_order": string;
    "x_spacing": number;
    "y_spacing": number;
    "z_spacing": number;
    "x_offset": number;
    "y_offset": number;
    "z_offset": number;
}


interface VolumeCreateSformParameters {
    "@type": "workbench.volume-create.sform";
    "xi_spacing": number;
    "xj_spacing": number;
    "xk_spacing": number;
    "x_offset": number;
    "yi_spacing": number;
    "yj_spacing": number;
    "yk_spacing": number;
    "y_offset": number;
    "zi_spacing": number;
    "zj_spacing": number;
    "zk_spacing": number;
    "z_offset": number;
}


interface VolumeCreateParameters {
    "@type": "workbench.volume-create";
    "i_dim": number;
    "j_dim": number;
    "k_dim": number;
    "volume_out": string;
    "plumb"?: VolumeCreatePlumbParameters | null | undefined;
    "sform"?: VolumeCreateSformParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-create": volume_create_cargs,
        "workbench.volume-create.plumb": volume_create_plumb_cargs,
        "workbench.volume-create.sform": volume_create_sform_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-create": volume_create_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param axis_order a string like 'XYZ' that specifies which index is along which spatial dimension
 * @param x_spacing change in x-coordinate from incrementing the relevant index
 * @param y_spacing change in y-coordinate from incrementing the relevant index
 * @param z_spacing change in z-coordinate from incrementing the relevant index
 * @param x_offset the x-coordinate of the center of the first voxel
 * @param y_offset the y-coordinate of the center of the first voxel
 * @param z_offset the z-coordinate of the center of the first voxel
 *
 * @returns Parameter dictionary
 */
function volume_create_plumb_params(
    axis_order: string,
    x_spacing: number,
    y_spacing: number,
    z_spacing: number,
    x_offset: number,
    y_offset: number,
    z_offset: number,
): VolumeCreatePlumbParameters {
    const params = {
        "@type": "workbench.volume-create.plumb" as const,
        "axis_order": axis_order,
        "x_spacing": x_spacing,
        "y_spacing": y_spacing,
        "z_spacing": z_spacing,
        "x_offset": x_offset,
        "y_offset": y_offset,
        "z_offset": z_offset,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_create_plumb_cargs(
    params: VolumeCreatePlumbParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-plumb");
    cargs.push((params["axis_order"] ?? null));
    cargs.push(String((params["x_spacing"] ?? null)));
    cargs.push(String((params["y_spacing"] ?? null)));
    cargs.push(String((params["z_spacing"] ?? null)));
    cargs.push(String((params["x_offset"] ?? null)));
    cargs.push(String((params["y_offset"] ?? null)));
    cargs.push(String((params["z_offset"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param xi_spacing increase in x coordinate from incrementing the i index
 * @param xj_spacing increase in x coordinate from incrementing the j index
 * @param xk_spacing increase in x coordinate from incrementing the k index
 * @param x_offset x coordinate of first voxel
 * @param yi_spacing increase in y coordinate from incrementing the i index
 * @param yj_spacing increase in y coordinate from incrementing the j index
 * @param yk_spacing increase in y coordinate from incrementing the k index
 * @param y_offset y coordinate of first voxel
 * @param zi_spacing increase in z coordinate from incrementing the i index
 * @param zj_spacing increase in z coordinate from incrementing the j index
 * @param zk_spacing increase in z coordinate from incrementing the k index
 * @param z_offset z coordinate of first voxel
 *
 * @returns Parameter dictionary
 */
function volume_create_sform_params(
    xi_spacing: number,
    xj_spacing: number,
    xk_spacing: number,
    x_offset: number,
    yi_spacing: number,
    yj_spacing: number,
    yk_spacing: number,
    y_offset: number,
    zi_spacing: number,
    zj_spacing: number,
    zk_spacing: number,
    z_offset: number,
): VolumeCreateSformParameters {
    const params = {
        "@type": "workbench.volume-create.sform" as const,
        "xi_spacing": xi_spacing,
        "xj_spacing": xj_spacing,
        "xk_spacing": xk_spacing,
        "x_offset": x_offset,
        "yi_spacing": yi_spacing,
        "yj_spacing": yj_spacing,
        "yk_spacing": yk_spacing,
        "y_offset": y_offset,
        "zi_spacing": zi_spacing,
        "zj_spacing": zj_spacing,
        "zk_spacing": zk_spacing,
        "z_offset": z_offset,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_create_sform_cargs(
    params: VolumeCreateSformParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-sform");
    cargs.push(String((params["xi_spacing"] ?? null)));
    cargs.push(String((params["xj_spacing"] ?? null)));
    cargs.push(String((params["xk_spacing"] ?? null)));
    cargs.push(String((params["x_offset"] ?? null)));
    cargs.push(String((params["yi_spacing"] ?? null)));
    cargs.push(String((params["yj_spacing"] ?? null)));
    cargs.push(String((params["yk_spacing"] ?? null)));
    cargs.push(String((params["y_offset"] ?? null)));
    cargs.push(String((params["zi_spacing"] ?? null)));
    cargs.push(String((params["zj_spacing"] ?? null)));
    cargs.push(String((params["zk_spacing"] ?? null)));
    cargs.push(String((params["z_offset"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `volume_create(...)`.
 *
 * @interface
 */
interface VolumeCreateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param i_dim length of first dimension
 * @param j_dim length of second dimension
 * @param k_dim length of third dimension
 * @param volume_out the output volume
 * @param plumb set via axis order and spacing/offset
 * @param sform set via a nifti sform
 *
 * @returns Parameter dictionary
 */
function volume_create_params(
    i_dim: number,
    j_dim: number,
    k_dim: number,
    volume_out: string,
    plumb: VolumeCreatePlumbParameters | null = null,
    sform: VolumeCreateSformParameters | null = null,
): VolumeCreateParameters {
    const params = {
        "@type": "workbench.volume-create" as const,
        "i_dim": i_dim,
        "j_dim": j_dim,
        "k_dim": k_dim,
        "volume_out": volume_out,
    };
    if (plumb !== null) {
        params["plumb"] = plumb;
    }
    if (sform !== null) {
        params["sform"] = sform;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_create_cargs(
    params: VolumeCreateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-create");
    cargs.push(String((params["i_dim"] ?? null)));
    cargs.push(String((params["j_dim"] ?? null)));
    cargs.push(String((params["k_dim"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["plumb"] ?? null) !== null) {
        cargs.push(...dynCargs((params["plumb"] ?? null)["@type"])((params["plumb"] ?? null), execution));
    }
    if ((params["sform"] ?? null) !== null) {
        cargs.push(...dynCargs((params["sform"] ?? null)["@type"])((params["sform"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_create_outputs(
    params: VolumeCreateParameters,
    execution: Execution,
): VolumeCreateOutputs {
    const ret: VolumeCreateOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * volume-create
 *
 * Create a blank volume file.
 *
 * Creates a volume file full of zeros.  Exactly one of -plumb or -sform must be specified.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeCreateOutputs`).
 */
function volume_create_execute(
    params: VolumeCreateParameters,
    runner: Runner | null = null,
): VolumeCreateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_CREATE_METADATA);
    params = execution.params(params)
    const cargs = volume_create_cargs(params, execution)
    const ret = volume_create_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * volume-create
 *
 * Create a blank volume file.
 *
 * Creates a volume file full of zeros.  Exactly one of -plumb or -sform must be specified.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param i_dim length of first dimension
 * @param j_dim length of second dimension
 * @param k_dim length of third dimension
 * @param volume_out the output volume
 * @param plumb set via axis order and spacing/offset
 * @param sform set via a nifti sform
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeCreateOutputs`).
 */
function volume_create(
    i_dim: number,
    j_dim: number,
    k_dim: number,
    volume_out: string,
    plumb: VolumeCreatePlumbParameters | null = null,
    sform: VolumeCreateSformParameters | null = null,
    runner: Runner | null = null,
): VolumeCreateOutputs {
    const params = volume_create_params(i_dim, j_dim, k_dim, volume_out, plumb, sform)
    return volume_create_execute(params, runner);
}


export {
      VOLUME_CREATE_METADATA,
      VolumeCreateOutputs,
      VolumeCreateParameters,
      VolumeCreatePlumbParameters,
      VolumeCreateSformParameters,
      volume_create,
      volume_create_execute,
      volume_create_params,
      volume_create_plumb_params,
      volume_create_sform_params,
};
