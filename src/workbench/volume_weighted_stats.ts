// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_WEIGHTED_STATS_METADATA: Metadata = {
    id: "66bc4ec89f256e7bb03b0225dc3e9b7668e61837.boutiques",
    name: "volume-weighted-stats",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeWeightedStatsWeightVolumeParameters {
    "@type": "workbench.volume-weighted-stats.weight_volume";
    "weight_volume": InputPathType;
    "opt_match_maps": boolean;
}


interface VolumeWeightedStatsRoiParameters {
    "@type": "workbench.volume-weighted-stats.roi";
    "roi_volume": InputPathType;
    "opt_match_maps": boolean;
}


interface VolumeWeightedStatsStdevParameters {
    "@type": "workbench.volume-weighted-stats.stdev";
    "opt_sample": boolean;
}


interface VolumeWeightedStatsParameters {
    "@type": "workbench.volume-weighted-stats";
    "volume_in": InputPathType;
    "weight_volume"?: VolumeWeightedStatsWeightVolumeParameters | null | undefined;
    "opt_subvolume_subvolume"?: string | null | undefined;
    "roi"?: VolumeWeightedStatsRoiParameters | null | undefined;
    "opt_mean": boolean;
    "stdev"?: VolumeWeightedStatsStdevParameters | null | undefined;
    "opt_percentile_percent"?: number | null | undefined;
    "opt_sum": boolean;
    "opt_show_map_name": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-weighted-stats": volume_weighted_stats_cargs,
        "workbench.volume-weighted-stats.weight_volume": volume_weighted_stats_weight_volume_cargs,
        "workbench.volume-weighted-stats.roi": volume_weighted_stats_roi_cargs,
        "workbench.volume-weighted-stats.stdev": volume_weighted_stats_stdev_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param weight_volume volume file containing the weights
 * @param opt_match_maps each subvolume of input uses the corresponding subvolume from the weights file
 *
 * @returns Parameter dictionary
 */
function volume_weighted_stats_weight_volume_params(
    weight_volume: InputPathType,
    opt_match_maps: boolean = false,
): VolumeWeightedStatsWeightVolumeParameters {
    const params = {
        "@type": "workbench.volume-weighted-stats.weight_volume" as const,
        "weight_volume": weight_volume,
        "opt_match_maps": opt_match_maps,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_weighted_stats_weight_volume_cargs(
    params: VolumeWeightedStatsWeightVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-weight-volume");
    cargs.push(execution.inputFile((params["weight_volume"] ?? null)));
    if ((params["opt_match_maps"] ?? null)) {
        cargs.push("-match-maps");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param roi_volume the roi, as a volume file
 * @param opt_match_maps each subvolume of input uses the corresponding subvolume from the roi file
 *
 * @returns Parameter dictionary
 */
function volume_weighted_stats_roi_params(
    roi_volume: InputPathType,
    opt_match_maps: boolean = false,
): VolumeWeightedStatsRoiParameters {
    const params = {
        "@type": "workbench.volume-weighted-stats.roi" as const,
        "roi_volume": roi_volume,
        "opt_match_maps": opt_match_maps,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_weighted_stats_roi_cargs(
    params: VolumeWeightedStatsRoiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-roi");
    cargs.push(execution.inputFile((params["roi_volume"] ?? null)));
    if ((params["opt_match_maps"] ?? null)) {
        cargs.push("-match-maps");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param opt_sample estimate population stdev from the sample
 *
 * @returns Parameter dictionary
 */
function volume_weighted_stats_stdev_params(
    opt_sample: boolean = false,
): VolumeWeightedStatsStdevParameters {
    const params = {
        "@type": "workbench.volume-weighted-stats.stdev" as const,
        "opt_sample": opt_sample,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_weighted_stats_stdev_cargs(
    params: VolumeWeightedStatsStdevParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-stdev");
    if ((params["opt_sample"] ?? null)) {
        cargs.push("-sample");
    }
    return cargs;
}


/**
 * Output object returned when calling `volume_weighted_stats(...)`.
 *
 * @interface
 */
interface VolumeWeightedStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_in the input volume
 * @param weight_volume use weights from a volume file
 * @param opt_subvolume_subvolume only display output for one subvolume: the subvolume number or name
 * @param roi only consider data inside an roi
 * @param opt_mean compute weighted mean
 * @param stdev compute weighted standard deviation
 * @param opt_percentile_percent compute weighted percentile: the percentile to find, must be between 0 and 100
 * @param opt_sum compute weighted sum
 * @param opt_show_map_name print map index and name before each output
 *
 * @returns Parameter dictionary
 */
function volume_weighted_stats_params(
    volume_in: InputPathType,
    weight_volume: VolumeWeightedStatsWeightVolumeParameters | null = null,
    opt_subvolume_subvolume: string | null = null,
    roi: VolumeWeightedStatsRoiParameters | null = null,
    opt_mean: boolean = false,
    stdev: VolumeWeightedStatsStdevParameters | null = null,
    opt_percentile_percent: number | null = null,
    opt_sum: boolean = false,
    opt_show_map_name: boolean = false,
): VolumeWeightedStatsParameters {
    const params = {
        "@type": "workbench.volume-weighted-stats" as const,
        "volume_in": volume_in,
        "opt_mean": opt_mean,
        "opt_sum": opt_sum,
        "opt_show_map_name": opt_show_map_name,
    };
    if (weight_volume !== null) {
        params["weight_volume"] = weight_volume;
    }
    if (opt_subvolume_subvolume !== null) {
        params["opt_subvolume_subvolume"] = opt_subvolume_subvolume;
    }
    if (roi !== null) {
        params["roi"] = roi;
    }
    if (stdev !== null) {
        params["stdev"] = stdev;
    }
    if (opt_percentile_percent !== null) {
        params["opt_percentile_percent"] = opt_percentile_percent;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_weighted_stats_cargs(
    params: VolumeWeightedStatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-weighted-stats");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    if ((params["weight_volume"] ?? null) !== null) {
        cargs.push(...dynCargs((params["weight_volume"] ?? null)["@type"])((params["weight_volume"] ?? null), execution));
    }
    if ((params["opt_subvolume_subvolume"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvolume"] ?? null)
        );
    }
    if ((params["roi"] ?? null) !== null) {
        cargs.push(...dynCargs((params["roi"] ?? null)["@type"])((params["roi"] ?? null), execution));
    }
    if ((params["opt_mean"] ?? null)) {
        cargs.push("-mean");
    }
    if ((params["stdev"] ?? null) !== null) {
        cargs.push(...dynCargs((params["stdev"] ?? null)["@type"])((params["stdev"] ?? null), execution));
    }
    if ((params["opt_percentile_percent"] ?? null) !== null) {
        cargs.push(
            "-percentile",
            String((params["opt_percentile_percent"] ?? null))
        );
    }
    if ((params["opt_sum"] ?? null)) {
        cargs.push("-sum");
    }
    if ((params["opt_show_map_name"] ?? null)) {
        cargs.push("-show-map-name");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_weighted_stats_outputs(
    params: VolumeWeightedStatsParameters,
    execution: Execution,
): VolumeWeightedStatsOutputs {
    const ret: VolumeWeightedStatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * volume-weighted-stats
 *
 * Weighted spatial statistics on a volume file.
 *
 * For each subvolume of the input, a line of text is printed, resulting from the specified operation.  If -weight-volume is not specified, each voxel's volume is used.  Use -subvolume to only give output for a single subvolume.  If the -roi option is used without -match-maps, then each line will contain as many numbers as there are maps in the ROI file, separated by tab characters.  Exactly one of -mean, -stdev, -percentile or -sum must be specified.
 *
 * Using -sum without -weight-volume is equivalent to integrating with respect to volume.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeWeightedStatsOutputs`).
 */
function volume_weighted_stats_execute(
    params: VolumeWeightedStatsParameters,
    runner: Runner | null = null,
): VolumeWeightedStatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_WEIGHTED_STATS_METADATA);
    params = execution.params(params)
    const cargs = volume_weighted_stats_cargs(params, execution)
    const ret = volume_weighted_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * volume-weighted-stats
 *
 * Weighted spatial statistics on a volume file.
 *
 * For each subvolume of the input, a line of text is printed, resulting from the specified operation.  If -weight-volume is not specified, each voxel's volume is used.  Use -subvolume to only give output for a single subvolume.  If the -roi option is used without -match-maps, then each line will contain as many numbers as there are maps in the ROI file, separated by tab characters.  Exactly one of -mean, -stdev, -percentile or -sum must be specified.
 *
 * Using -sum without -weight-volume is equivalent to integrating with respect to volume.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_in the input volume
 * @param weight_volume use weights from a volume file
 * @param opt_subvolume_subvolume only display output for one subvolume: the subvolume number or name
 * @param roi only consider data inside an roi
 * @param opt_mean compute weighted mean
 * @param stdev compute weighted standard deviation
 * @param opt_percentile_percent compute weighted percentile: the percentile to find, must be between 0 and 100
 * @param opt_sum compute weighted sum
 * @param opt_show_map_name print map index and name before each output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeWeightedStatsOutputs`).
 */
function volume_weighted_stats(
    volume_in: InputPathType,
    weight_volume: VolumeWeightedStatsWeightVolumeParameters | null = null,
    opt_subvolume_subvolume: string | null = null,
    roi: VolumeWeightedStatsRoiParameters | null = null,
    opt_mean: boolean = false,
    stdev: VolumeWeightedStatsStdevParameters | null = null,
    opt_percentile_percent: number | null = null,
    opt_sum: boolean = false,
    opt_show_map_name: boolean = false,
    runner: Runner | null = null,
): VolumeWeightedStatsOutputs {
    const params = volume_weighted_stats_params(volume_in, weight_volume, opt_subvolume_subvolume, roi, opt_mean, stdev, opt_percentile_percent, opt_sum, opt_show_map_name)
    return volume_weighted_stats_execute(params, runner);
}


export {
      VOLUME_WEIGHTED_STATS_METADATA,
      VolumeWeightedStatsOutputs,
      VolumeWeightedStatsParameters,
      VolumeWeightedStatsRoiParameters,
      VolumeWeightedStatsStdevParameters,
      VolumeWeightedStatsWeightVolumeParameters,
      volume_weighted_stats,
      volume_weighted_stats_execute,
      volume_weighted_stats_params,
      volume_weighted_stats_roi_params,
      volume_weighted_stats_stdev_params,
      volume_weighted_stats_weight_volume_params,
};
