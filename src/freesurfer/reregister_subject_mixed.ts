// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REREGISTER_SUBJECT_MIXED_METADATA: Metadata = {
    id: "53bd102622c7195f920f7e8d8406505e8cf5d933.boutiques",
    name: "reregister_subject_mixed",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ReregisterSubjectMixedParameters {
    "@type"?: "freesurfer/reregister_subject_mixed";
    "input_volume": InputPathType;
    "output_directory": string;
    "threads"?: number | null | undefined;
}
type ReregisterSubjectMixedParametersTagged = Required<Pick<ReregisterSubjectMixedParameters, '@type'>> & ReregisterSubjectMixedParameters;


/**
 * Output object returned when calling `ReregisterSubjectMixedParameters(...)`.
 *
 * @interface
 */
interface ReregisterSubjectMixedOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Transformed control points
     */
    control_points: OutputPathType;
    /**
     * Intensity normalized output
     */
    intensity_normalized: OutputPathType;
    /**
     * Log file for talairach processing
     */
    log_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume file path
 * @param output_directory Output directory for transformed control points and intensity normalized files
 * @param threads Number of threads available to mri_em_register for OpenMP
 *
 * @returns Parameter dictionary
 */
function reregister_subject_mixed_params(
    input_volume: InputPathType,
    output_directory: string,
    threads: number | null = null,
): ReregisterSubjectMixedParametersTagged {
    const params = {
        "@type": "freesurfer/reregister_subject_mixed" as const,
        "input_volume": input_volume,
        "output_directory": output_directory,
    };
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function reregister_subject_mixed_cargs(
    params: ReregisterSubjectMixedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("reregister_subject_mixed");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_directory"] ?? null));
    if ((params["threads"] ?? null) !== null) {
        cargs.push(String((params["threads"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function reregister_subject_mixed_outputs(
    params: ReregisterSubjectMixedParameters,
    execution: Execution,
): ReregisterSubjectMixedOutputs {
    const ret: ReregisterSubjectMixedOutputs = {
        root: execution.outputFile("."),
        control_points: execution.outputFile([(params["output_directory"] ?? null), "/mri/fsamples"].join('')),
        intensity_normalized: execution.outputFile([(params["output_directory"] ?? null), "/mri/norm"].join('')),
        log_file: execution.outputFile(["talairach.log"].join('')),
    };
    return ret;
}


/**
 * reregister_subject_mixed
 *
 * Tool for re-registering a subject's MRI volumes using Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ReregisterSubjectMixedOutputs`).
 */
function reregister_subject_mixed_execute(
    params: ReregisterSubjectMixedParameters,
    runner: Runner | null = null,
): ReregisterSubjectMixedOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REREGISTER_SUBJECT_MIXED_METADATA);
    params = execution.params(params)
    const cargs = reregister_subject_mixed_cargs(params, execution)
    const ret = reregister_subject_mixed_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * reregister_subject_mixed
 *
 * Tool for re-registering a subject's MRI volumes using Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume file path
 * @param output_directory Output directory for transformed control points and intensity normalized files
 * @param threads Number of threads available to mri_em_register for OpenMP
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ReregisterSubjectMixedOutputs`).
 */
function reregister_subject_mixed(
    input_volume: InputPathType,
    output_directory: string,
    threads: number | null = null,
    runner: Runner | null = null,
): ReregisterSubjectMixedOutputs {
    const params = reregister_subject_mixed_params(input_volume, output_directory, threads)
    return reregister_subject_mixed_execute(params, runner);
}


export {
      REREGISTER_SUBJECT_MIXED_METADATA,
      ReregisterSubjectMixedOutputs,
      reregister_subject_mixed,
      reregister_subject_mixed_execute,
      reregister_subject_mixed_params,
};
