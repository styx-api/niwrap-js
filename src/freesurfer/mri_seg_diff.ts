// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SEG_DIFF_METADATA: Metadata = {
    id: "78f61554c72a9c79a5a960acc4e0438704b93d91.boutiques",
    name: "mri_seg_diff",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSegDiffParameters {
    "@type": "freesurfer.mri_seg_diff";
    "seg1"?: InputPathType | null | undefined;
    "seg2"?: InputPathType | null | undefined;
    "seg"?: InputPathType | null | undefined;
    "diff": string;
    "diff_in"?: InputPathType | null | undefined;
    "merged"?: string | null | undefined;
    "diff_force": boolean;
    "debug": boolean;
    "checkopts": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_seg_diff": mri_seg_diff_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_seg_diff": mri_seg_diff_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_seg_diff(...)`.
 *
 * @interface
 */
interface MriSegDiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output diff segmentation file.
     */
    diff_output: OutputPathType;
    /**
     * Output merged segmentation file.
     */
    merged_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param diff Output diff segmentation volume.
 * @param seg1 First segmentation file (e.g., unedited).
 * @param seg2 Second segmentation file (e.g., edited).
 * @param seg Source segmentation file (e.g., unedited).
 * @param diff_in Input diff segmentation volume.
 * @param merged Merged output, combining unedited with diff.
 * @param diff_force Force creation of a diff even if no diff is detected.
 * @param debug Turn on debugging.
 * @param checkopts Check options and exit without running.
 * @param version Print out version and exit.
 *
 * @returns Parameter dictionary
 */
function mri_seg_diff_params(
    diff: string,
    seg1: InputPathType | null = null,
    seg2: InputPathType | null = null,
    seg: InputPathType | null = null,
    diff_in: InputPathType | null = null,
    merged: string | null = null,
    diff_force: boolean = false,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
): MriSegDiffParameters {
    const params = {
        "@type": "freesurfer.mri_seg_diff" as const,
        "diff": diff,
        "diff_force": diff_force,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    };
    if (seg1 !== null) {
        params["seg1"] = seg1;
    }
    if (seg2 !== null) {
        params["seg2"] = seg2;
    }
    if (seg !== null) {
        params["seg"] = seg;
    }
    if (diff_in !== null) {
        params["diff_in"] = diff_in;
    }
    if (merged !== null) {
        params["merged"] = merged;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_seg_diff_cargs(
    params: MriSegDiffParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_seg_diff");
    if ((params["seg1"] ?? null) !== null) {
        cargs.push(
            "--seg1",
            execution.inputFile((params["seg1"] ?? null))
        );
    }
    if ((params["seg2"] ?? null) !== null) {
        cargs.push(
            "--seg2",
            execution.inputFile((params["seg2"] ?? null))
        );
    }
    if ((params["seg"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["seg"] ?? null))
        );
    }
    cargs.push(
        "--diff",
        (params["diff"] ?? null)
    );
    if ((params["diff_in"] ?? null) !== null) {
        cargs.push(
            "--diff-in",
            execution.inputFile((params["diff_in"] ?? null))
        );
    }
    if ((params["merged"] ?? null) !== null) {
        cargs.push(
            "--merged",
            (params["merged"] ?? null)
        );
    }
    if ((params["diff_force"] ?? null)) {
        cargs.push("--diff-force");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_seg_diff_outputs(
    params: MriSegDiffParameters,
    execution: Execution,
): MriSegDiffOutputs {
    const ret: MriSegDiffOutputs = {
        root: execution.outputFile("."),
        diff_output: execution.outputFile([(params["diff"] ?? null)].join('')),
        merged_output: ((params["merged"] ?? null) !== null) ? execution.outputFile([(params["merged"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * This program computes and merges differences in segmentation volumes, primarily for managing manual edits in FreeSurfer's aseg.mgz.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegDiffOutputs`).
 */
function mri_seg_diff_execute(
    params: MriSegDiffParameters,
    runner: Runner | null = null,
): MriSegDiffOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SEG_DIFF_METADATA);
    params = execution.params(params)
    const cargs = mri_seg_diff_cargs(params, execution)
    const ret = mri_seg_diff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program computes and merges differences in segmentation volumes, primarily for managing manual edits in FreeSurfer's aseg.mgz.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param diff Output diff segmentation volume.
 * @param seg1 First segmentation file (e.g., unedited).
 * @param seg2 Second segmentation file (e.g., edited).
 * @param seg Source segmentation file (e.g., unedited).
 * @param diff_in Input diff segmentation volume.
 * @param merged Merged output, combining unedited with diff.
 * @param diff_force Force creation of a diff even if no diff is detected.
 * @param debug Turn on debugging.
 * @param checkopts Check options and exit without running.
 * @param version Print out version and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegDiffOutputs`).
 */
function mri_seg_diff(
    diff: string,
    seg1: InputPathType | null = null,
    seg2: InputPathType | null = null,
    seg: InputPathType | null = null,
    diff_in: InputPathType | null = null,
    merged: string | null = null,
    diff_force: boolean = false,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriSegDiffOutputs {
    const params = mri_seg_diff_params(diff, seg1, seg2, seg, diff_in, merged, diff_force, debug, checkopts, version)
    return mri_seg_diff_execute(params, runner);
}


export {
      MRI_SEG_DIFF_METADATA,
      MriSegDiffOutputs,
      MriSegDiffParameters,
      mri_seg_diff,
      mri_seg_diff_execute,
      mri_seg_diff_params,
};
