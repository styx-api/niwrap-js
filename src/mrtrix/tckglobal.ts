// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCKGLOBAL_METADATA: Metadata = {
    id: "cae2ccc88f0085f525ed9602a03dca47884d2293.boutiques",
    name: "tckglobal",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface TckglobalRisoParameters {
    "__STYXTYPE__": "riso";
    "response": InputPathType;
}


interface TckglobalConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface TckglobalParameters {
    "__STYXTYPE__": "tckglobal";
    "grad"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "riso"?: Array<TckglobalRisoParameters> | null | undefined;
    "lmax"?: number | null | undefined;
    "length"?: number | null | undefined;
    "weight"?: number | null | undefined;
    "ppot"?: number | null | undefined;
    "cpot"?: number | null | undefined;
    "t0"?: number | null | undefined;
    "t1"?: number | null | undefined;
    "niter"?: number | null | undefined;
    "fod"?: string | null | undefined;
    "noapo": boolean;
    "fiso"?: string | null | undefined;
    "eext"?: string | null | undefined;
    "etrend"?: string | null | undefined;
    "balance"?: number | null | undefined;
    "density"?: number | null | undefined;
    "prob"?: Array<number> | null | undefined;
    "beta"?: number | null | undefined;
    "lambda"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<TckglobalConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "source": InputPathType;
    "response": InputPathType;
    "tracks": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tckglobal": tckglobal_cargs,
        "riso": tckglobal_riso_cargs,
        "config": tckglobal_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "tckglobal": tckglobal_outputs,
    };
    return outputsFuncs[t];
}


function tckglobal_riso_params(
    response: InputPathType,
): TckglobalRisoParameters {
    /**
     * Build parameters.
    
     * @param response set one or more isotropic response functions. (multiple allowed)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "riso" as const,
        "response": response,
    };
    return params;
}


function tckglobal_riso_cargs(
    params: TckglobalRisoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-riso");
    cargs.push(execution.inputFile((params["response"] ?? null)));
    return cargs;
}


function tckglobal_config_params(
    key: string,
    value: string,
): TckglobalConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function tckglobal_config_cargs(
    params: TckglobalConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `tckglobal(...)`.
 *
 * @interface
 */
interface TckglobalOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output file containing the tracks generated.
     */
    tracks: OutputPathType;
    /**
     * Predicted fibre orientation distribution function (fODF).
This fODF is estimated as part of the global track optimization, and therefore incorporates the spatial regularization that it imposes. Internally, the fODF is represented as a discrete sum of apodized point spread functions (aPSF) oriented along the directions of all particles in the voxel, used to predict the DWI signal from the particle configuration. 
     */
    fod: OutputPathType | null;
    /**
     * Predicted isotropic fractions of the tissues for which response functions were provided with -riso. Typically, these are CSF and GM. 
     */
    fiso: OutputPathType | null;
    /**
     * Residual external energy in every voxel. 
     */
    eext: OutputPathType | null;
    /**
     * internal and external energy trend and cooling statistics. 
     */
    etrend: OutputPathType | null;
}


function tckglobal_params(
    source: InputPathType,
    response: InputPathType,
    tracks: string,
    grad: InputPathType | null = null,
    mask: InputPathType | null = null,
    riso: Array<TckglobalRisoParameters> | null = null,
    lmax: number | null = null,
    length: number | null = null,
    weight: number | null = null,
    ppot: number | null = null,
    cpot: number | null = null,
    t0: number | null = null,
    t1: number | null = null,
    niter: number | null = null,
    fod: string | null = null,
    noapo: boolean = false,
    fiso: string | null = null,
    eext: string | null = null,
    etrend: string | null = null,
    balance: number | null = null,
    density: number | null = null,
    prob: Array<number> | null = null,
    beta: number | null = null,
    lambda: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckglobalConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): TckglobalParameters {
    /**
     * Build parameters.
    
     * @param source the image containing the raw DWI data.
     * @param response the response of a track segment on the DWI signal.
     * @param tracks the output file containing the tracks generated.
     * @param grad specify the diffusion encoding scheme (required if not supplied in the header).
     * @param mask only reconstruct the tractogram within the specified brain mask image.
     * @param riso set one or more isotropic response functions. (multiple allowed)
     * @param lmax set the maximum harmonic order for the output series. (default = 8)
     * @param length set the length of the particles (fibre segments). (default = 1mm)
     * @param weight set the weight by which particles contribute to the model. (default = 0.1)
     * @param ppot set the particle potential, i.e., the cost of adding one segment, relative to the particle weight. (default = 0.05)
     * @param cpot set the connection potential, i.e., the energy term that drives two segments together. (default = 0.5)
     * @param t0 set the initial temperature of the metropolis hastings optimizer. (default = 0.1)
     * @param t1 set the final temperature of the metropolis hastings optimizer. (default = 0.001)
     * @param niter set the number of iterations of the metropolis hastings optimizer. (default = 10M)
     * @param fod Predicted fibre orientation distribution function (fODF).
This fODF is estimated as part of the global track optimization, and therefore incorporates the spatial regularization that it imposes. Internally, the fODF is represented as a discrete sum of apodized point spread functions (aPSF) oriented along the directions of all particles in the voxel, used to predict the DWI signal from the particle configuration.
     * @param noapo disable spherical convolution of fODF with apodized PSF, to output a sum of delta functions rather than a sum of aPSFs.
     * @param fiso Predicted isotropic fractions of the tissues for which response functions were provided with -riso. Typically, these are CSF and GM.
     * @param eext Residual external energy in every voxel.
     * @param etrend internal and external energy trend and cooling statistics.
     * @param balance balance internal and external energy. (default = 0)
Negative values give more weight to the internal energy, positive to the external energy.
     * @param density set the desired density of the free Poisson process. (default = 1)
     * @param prob set the probabilities of generating birth, death, randshift, optshift and connect proposals respectively. (default = 0.25,0.05,0.25,0.1,0.35)
     * @param beta set the width of the Hanning interpolation window. (in [0, 1], default = 0)
If used, a mask is required, and this mask must keep at least one voxel distance to the image bounding box.
     * @param lambda set the weight of the internal energy directly. (default = 1)
If provided, any value of -balance will be ignored.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tckglobal" as const,
        "noapo": noapo,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "source": source,
        "response": response,
        "tracks": tracks,
    };
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (riso !== null) {
        params["riso"] = riso;
    }
    if (lmax !== null) {
        params["lmax"] = lmax;
    }
    if (length !== null) {
        params["length"] = length;
    }
    if (weight !== null) {
        params["weight"] = weight;
    }
    if (ppot !== null) {
        params["ppot"] = ppot;
    }
    if (cpot !== null) {
        params["cpot"] = cpot;
    }
    if (t0 !== null) {
        params["t0"] = t0;
    }
    if (t1 !== null) {
        params["t1"] = t1;
    }
    if (niter !== null) {
        params["niter"] = niter;
    }
    if (fod !== null) {
        params["fod"] = fod;
    }
    if (fiso !== null) {
        params["fiso"] = fiso;
    }
    if (eext !== null) {
        params["eext"] = eext;
    }
    if (etrend !== null) {
        params["etrend"] = etrend;
    }
    if (balance !== null) {
        params["balance"] = balance;
    }
    if (density !== null) {
        params["density"] = density;
    }
    if (prob !== null) {
        params["prob"] = prob;
    }
    if (beta !== null) {
        params["beta"] = beta;
    }
    if (lambda !== null) {
        params["lambda"] = lambda;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function tckglobal_cargs(
    params: TckglobalParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tckglobal");
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["riso"] ?? null) !== null) {
        cargs.push(...(params["riso"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["lmax"] ?? null) !== null) {
        cargs.push(
            "-lmax",
            String((params["lmax"] ?? null))
        );
    }
    if ((params["length"] ?? null) !== null) {
        cargs.push(
            "-length",
            String((params["length"] ?? null))
        );
    }
    if ((params["weight"] ?? null) !== null) {
        cargs.push(
            "-weight",
            String((params["weight"] ?? null))
        );
    }
    if ((params["ppot"] ?? null) !== null) {
        cargs.push(
            "-ppot",
            String((params["ppot"] ?? null))
        );
    }
    if ((params["cpot"] ?? null) !== null) {
        cargs.push(
            "-cpot",
            String((params["cpot"] ?? null))
        );
    }
    if ((params["t0"] ?? null) !== null) {
        cargs.push(
            "-t0",
            String((params["t0"] ?? null))
        );
    }
    if ((params["t1"] ?? null) !== null) {
        cargs.push(
            "-t1",
            String((params["t1"] ?? null))
        );
    }
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["niter"] ?? null))
        );
    }
    if ((params["fod"] ?? null) !== null) {
        cargs.push(
            "-fod",
            (params["fod"] ?? null)
        );
    }
    if ((params["noapo"] ?? null)) {
        cargs.push("-noapo");
    }
    if ((params["fiso"] ?? null) !== null) {
        cargs.push(
            "-fiso",
            (params["fiso"] ?? null)
        );
    }
    if ((params["eext"] ?? null) !== null) {
        cargs.push(
            "-eext",
            (params["eext"] ?? null)
        );
    }
    if ((params["etrend"] ?? null) !== null) {
        cargs.push(
            "-etrend",
            (params["etrend"] ?? null)
        );
    }
    if ((params["balance"] ?? null) !== null) {
        cargs.push(
            "-balance",
            String((params["balance"] ?? null))
        );
    }
    if ((params["density"] ?? null) !== null) {
        cargs.push(
            "-density",
            String((params["density"] ?? null))
        );
    }
    if ((params["prob"] ?? null) !== null) {
        cargs.push(
            "-prob",
            ...(params["prob"] ?? null).map(String)
        );
    }
    if ((params["beta"] ?? null) !== null) {
        cargs.push(
            "-beta",
            String((params["beta"] ?? null))
        );
    }
    if ((params["lambda"] ?? null) !== null) {
        cargs.push(
            "-lambda",
            String((params["lambda"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["source"] ?? null)));
    cargs.push(execution.inputFile((params["response"] ?? null)));
    cargs.push((params["tracks"] ?? null));
    return cargs;
}


function tckglobal_outputs(
    params: TckglobalParameters,
    execution: Execution,
): TckglobalOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TckglobalOutputs = {
        root: execution.outputFile("."),
        tracks: execution.outputFile([(params["tracks"] ?? null)].join('')),
        fod: ((params["fod"] ?? null) !== null) ? execution.outputFile([(params["fod"] ?? null)].join('')) : null,
        fiso: ((params["fiso"] ?? null) !== null) ? execution.outputFile([(params["fiso"] ?? null)].join('')) : null,
        eext: ((params["eext"] ?? null) !== null) ? execution.outputFile([(params["eext"] ?? null)].join('')) : null,
        etrend: ((params["etrend"] ?? null) !== null) ? execution.outputFile([(params["etrend"] ?? null)].join('')) : null,
    };
    return ret;
}


function tckglobal_execute(
    params: TckglobalParameters,
    execution: Execution,
): TckglobalOutputs {
    /**
     * Multi-Shell Multi-Tissue Global Tractography.
     * 
     * This command will reconstruct the global white matter fibre tractogram that best explains the input DWI data, using a multi-tissue spherical convolution model.
     * 
     * Example use: 
     * 
     *  $ tckglobal dwi.mif wmr.txt -riso csfr.txt -riso gmr.txt -mask mask.mif 
     *    -niter 1e9 -fod fod.mif -fiso fiso.mif tracks.tck 
     * 
     * in which dwi.mif is the input image, wmr.txt is an anisotropic, multi-shell response function for WM, and csfr.txt and gmr.txt are isotropic response functions for CSF and GM. The output tractogram is saved to tracks.tck. Optional output images fod.mif and fiso.mif contain the predicted WM fODF and isotropic tissue fractions of CSF and GM respectively, estimated as part of the global optimization and thus affected by spatial regularization.
     * 
     * References:
     * 
     * Christiaens, D.; Reisert, M.; Dhollander, T.; Sunaert, S.; Suetens, P. & Maes, F. Global tractography of multi-shell diffusion-weighted imaging data using a multi-tissue model. NeuroImage, 2015, 123, 89-101.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TckglobalOutputs`).
     */
    params = execution.params(params)
    const cargs = tckglobal_cargs(params, execution)
    const ret = tckglobal_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tckglobal(
    source: InputPathType,
    response: InputPathType,
    tracks: string,
    grad: InputPathType | null = null,
    mask: InputPathType | null = null,
    riso: Array<TckglobalRisoParameters> | null = null,
    lmax: number | null = null,
    length: number | null = null,
    weight: number | null = null,
    ppot: number | null = null,
    cpot: number | null = null,
    t0: number | null = null,
    t1: number | null = null,
    niter: number | null = null,
    fod: string | null = null,
    noapo: boolean = false,
    fiso: string | null = null,
    eext: string | null = null,
    etrend: string | null = null,
    balance: number | null = null,
    density: number | null = null,
    prob: Array<number> | null = null,
    beta: number | null = null,
    lambda: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckglobalConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): TckglobalOutputs {
    /**
     * Multi-Shell Multi-Tissue Global Tractography.
     * 
     * This command will reconstruct the global white matter fibre tractogram that best explains the input DWI data, using a multi-tissue spherical convolution model.
     * 
     * Example use: 
     * 
     *  $ tckglobal dwi.mif wmr.txt -riso csfr.txt -riso gmr.txt -mask mask.mif 
     *    -niter 1e9 -fod fod.mif -fiso fiso.mif tracks.tck 
     * 
     * in which dwi.mif is the input image, wmr.txt is an anisotropic, multi-shell response function for WM, and csfr.txt and gmr.txt are isotropic response functions for CSF and GM. The output tractogram is saved to tracks.tck. Optional output images fod.mif and fiso.mif contain the predicted WM fODF and isotropic tissue fractions of CSF and GM respectively, estimated as part of the global optimization and thus affected by spatial regularization.
     * 
     * References:
     * 
     * Christiaens, D.; Reisert, M.; Dhollander, T.; Sunaert, S.; Suetens, P. & Maes, F. Global tractography of multi-shell diffusion-weighted imaging data using a multi-tissue model. NeuroImage, 2015, 123, 89-101.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param source the image containing the raw DWI data.
     * @param response the response of a track segment on the DWI signal.
     * @param tracks the output file containing the tracks generated.
     * @param grad specify the diffusion encoding scheme (required if not supplied in the header).
     * @param mask only reconstruct the tractogram within the specified brain mask image.
     * @param riso set one or more isotropic response functions. (multiple allowed)
     * @param lmax set the maximum harmonic order for the output series. (default = 8)
     * @param length set the length of the particles (fibre segments). (default = 1mm)
     * @param weight set the weight by which particles contribute to the model. (default = 0.1)
     * @param ppot set the particle potential, i.e., the cost of adding one segment, relative to the particle weight. (default = 0.05)
     * @param cpot set the connection potential, i.e., the energy term that drives two segments together. (default = 0.5)
     * @param t0 set the initial temperature of the metropolis hastings optimizer. (default = 0.1)
     * @param t1 set the final temperature of the metropolis hastings optimizer. (default = 0.001)
     * @param niter set the number of iterations of the metropolis hastings optimizer. (default = 10M)
     * @param fod Predicted fibre orientation distribution function (fODF).
This fODF is estimated as part of the global track optimization, and therefore incorporates the spatial regularization that it imposes. Internally, the fODF is represented as a discrete sum of apodized point spread functions (aPSF) oriented along the directions of all particles in the voxel, used to predict the DWI signal from the particle configuration.
     * @param noapo disable spherical convolution of fODF with apodized PSF, to output a sum of delta functions rather than a sum of aPSFs.
     * @param fiso Predicted isotropic fractions of the tissues for which response functions were provided with -riso. Typically, these are CSF and GM.
     * @param eext Residual external energy in every voxel.
     * @param etrend internal and external energy trend and cooling statistics.
     * @param balance balance internal and external energy. (default = 0)
Negative values give more weight to the internal energy, positive to the external energy.
     * @param density set the desired density of the free Poisson process. (default = 1)
     * @param prob set the probabilities of generating birth, death, randshift, optshift and connect proposals respectively. (default = 0.25,0.05,0.25,0.1,0.35)
     * @param beta set the width of the Hanning interpolation window. (in [0, 1], default = 0)
If used, a mask is required, and this mask must keep at least one voxel distance to the image bounding box.
     * @param lambda set the weight of the internal energy directly. (default = 1)
If provided, any value of -balance will be ignored.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TckglobalOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCKGLOBAL_METADATA);
    const params = tckglobal_params(source, response, tracks, grad, mask, riso, lmax, length, weight, ppot, cpot, t0, t1, niter, fod, noapo, fiso, eext, etrend, balance, density, prob, beta, lambda, info, quiet, debug, force, nthreads, config, help, version)
    return tckglobal_execute(params, execution);
}


export {
      TCKGLOBAL_METADATA,
      TckglobalConfigParameters,
      TckglobalOutputs,
      TckglobalParameters,
      TckglobalRisoParameters,
      tckglobal,
      tckglobal_config_params,
      tckglobal_params,
      tckglobal_riso_params,
};
