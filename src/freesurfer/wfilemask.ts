// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WFILEMASK_METADATA: Metadata = {
    id: "d9499795a211ad7cff6445d0424d21c8e2190d0f.boutiques",
    name: "wfilemask",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface WfilemaskParameters {
    "__STYXTYPE__": "wfilemask";
    "w_file": InputPathType;
    "label_file": InputPathType;
    "output_file": string;
    "permission_mask"?: string | null | undefined;
    "help_flag": boolean;
    "version_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "wfilemask": wfilemask_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "wfilemask": wfilemask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `wfilemask(...)`.
 *
 * @interface
 */
interface WfilemaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with specified label regions zeroed out
     */
    output_w_file: OutputPathType;
}


function wfilemask_params(
    w_file: InputPathType,
    label_file: InputPathType,
    output_file: string,
    permission_mask: string | null = null,
    help_flag: boolean = false,
    version_flag: boolean = false,
): WfilemaskParameters {
    /**
     * Build parameters.
    
     * @param w_file Input w file
     * @param label_file Label file to use as a mask
     * @param output_file Output w file
     * @param permission_mask Set Unix file permission mask
     * @param help_flag Display help message and exit
     * @param version_flag Print version and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "wfilemask" as const,
        "w_file": w_file,
        "label_file": label_file,
        "output_file": output_file,
        "help_flag": help_flag,
        "version_flag": version_flag,
    };
    if (permission_mask !== null) {
        params["permission_mask"] = permission_mask;
    }
    return params;
}


function wfilemask_cargs(
    params: WfilemaskParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wfilemask");
    cargs.push(
        "-w",
        execution.inputFile((params["w_file"] ?? null))
    );
    cargs.push(
        "-l",
        execution.inputFile((params["label_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    if ((params["permission_mask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["permission_mask"] ?? null)
        );
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("-version");
    }
    return cargs;
}


function wfilemask_outputs(
    params: WfilemaskParameters,
    execution: Execution,
): WfilemaskOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: WfilemaskOutputs = {
        root: execution.outputFile("."),
        output_w_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function wfilemask_execute(
    params: WfilemaskParameters,
    execution: Execution,
): WfilemaskOutputs {
    /**
     * Zero-out regions of a surface value file (.w file) using a label.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `WfilemaskOutputs`).
     */
    params = execution.params(params)
    const cargs = wfilemask_cargs(params, execution)
    const ret = wfilemask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function wfilemask(
    w_file: InputPathType,
    label_file: InputPathType,
    output_file: string,
    permission_mask: string | null = null,
    help_flag: boolean = false,
    version_flag: boolean = false,
    runner: Runner | null = null,
): WfilemaskOutputs {
    /**
     * Zero-out regions of a surface value file (.w file) using a label.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param w_file Input w file
     * @param label_file Label file to use as a mask
     * @param output_file Output w file
     * @param permission_mask Set Unix file permission mask
     * @param help_flag Display help message and exit
     * @param version_flag Print version and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `WfilemaskOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WFILEMASK_METADATA);
    const params = wfilemask_params(w_file, label_file, output_file, permission_mask, help_flag, version_flag)
    return wfilemask_execute(params, execution);
}


export {
      WFILEMASK_METADATA,
      WfilemaskOutputs,
      WfilemaskParameters,
      wfilemask,
      wfilemask_params,
};
