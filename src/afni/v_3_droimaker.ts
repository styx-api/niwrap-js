// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3_DROIMAKER_METADATA: Metadata = {
    id: "52994e672a5f137f27dbb8bbd59f66cee7093ffe.boutiques",
    name: "3DROIMaker",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3DroimakerParameters {
    "__STYXTYPE__": "3DROIMaker";
    "inset": InputPathType;
    "thresh": number;
    "prefix": string;
    "refset"?: InputPathType | null | undefined;
    "volthr"?: number | null | undefined;
    "only_conn_top"?: number | null | undefined;
    "inflate"?: number | null | undefined;
    "trim_off_wm": boolean;
    "wm_skel"?: InputPathType | null | undefined;
    "skel_thr"?: number | null | undefined;
    "skel_stop": boolean;
    "skel_stop_strict": boolean;
    "csf_skel"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "neigh_upto_vert": boolean;
    "nifti": boolean;
    "preinfl_inset"?: InputPathType | null | undefined;
    "preinfl_inflate"?: number | null | undefined;
    "dump_no_labtab": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3DROIMaker": v_3_droimaker_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3DROIMaker": v_3_droimaker_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3_droimaker(...)`.
 *
 * @interface
 */
interface V3DroimakerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * GM map of ROIs based on value- and volume-thresholding, corresponding to gray matter regions of activation.
     */
    gm_map: OutputPathType;
    /**
     * Map of inflated GM ROIs based on GM map, with ROIs inflated either by user-design or WM skeleton.
     */
    gmi_map: OutputPathType;
}


function v_3_droimaker_params(
    inset: InputPathType,
    thresh: number,
    prefix: string,
    refset: InputPathType | null = null,
    volthr: number | null = null,
    only_conn_top: number | null = null,
    inflate: number | null = null,
    trim_off_wm: boolean = false,
    wm_skel: InputPathType | null = null,
    skel_thr: number | null = null,
    skel_stop: boolean = false,
    skel_stop_strict: boolean = false,
    csf_skel: InputPathType | null = null,
    mask: InputPathType | null = null,
    neigh_upto_vert: boolean = false,
    nifti: boolean = false,
    preinfl_inset: InputPathType | null = null,
    preinfl_inflate: number | null = null,
    dump_no_labtab: boolean = false,
): V3DroimakerParameters {
    /**
     * Build parameters.
    
     * @param inset 3D volume(s) of values, especially functionally-derived quantities like correlation values or ICA Z-scores.
     * @param thresh Threshold for values in INSET, used to create ROI islands from the 3D volume's sea of values.
     * @param prefix Prefix of output name, with output files being: PREFIX_GM* and PREFIX_GMI*
     * @param refset 3D (or multi-subbrick) volume containing integer values with which to label specific GM ROIs after thresholding.
     * @param volthr Minimum size a cluster of voxels must have in order to remain a GM ROI after thresholding. Can reduce 'noisy' clusters.
     * @param only_conn_top Select N max contiguous voxels in a region starting from peak voxel and expanding.
     * @param inflate Number of voxels to pad each found ROI in order to turn GM ROIs into inflated (GMI) ROIs.
     * @param trim_off_wm Trim the INSET to exclude voxels in WM by excluding those which overlap an input WM skeleton.
     * @param wm_skel 3D volume containing info of WM, as might be defined from an FA map or anatomical segmentation.
     * @param skel_thr Threshold value for WM skeleton if it is not a mask.
     * @param skel_stop Stop inflation at locations which are already on WM skeleton.
     * @param skel_stop_strict Do not allow any inflation into the skel-region.
     * @param csf_skel 3D volume containing info of CSF. Info must be a binary mask already.
     * @param mask Mask within which to apply threshold. Useful if the MINTHR is a negative value.
     * @param neigh_upto_vert Define neighbors loosely so that voxels can be grouped into the same ROI if they share at least one vertex.
     * @param nifti Switch to output *.nii.gz GM and GMI files
     * @param preinfl_inset Start with a WM ROI, inflate it to find the nearest GM, then expand that GM and subtract away the WM+CSF parts.
     * @param preinfl_inflate Number of voxels for initial inflation of PSET.
     * @param dump_no_labtab Switch for turning off labeltable attachment to the output GM and GMI files.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3DROIMaker" as const,
        "inset": inset,
        "thresh": thresh,
        "prefix": prefix,
        "trim_off_wm": trim_off_wm,
        "skel_stop": skel_stop,
        "skel_stop_strict": skel_stop_strict,
        "neigh_upto_vert": neigh_upto_vert,
        "nifti": nifti,
        "dump_no_labtab": dump_no_labtab,
    };
    if (refset !== null) {
        params["refset"] = refset;
    }
    if (volthr !== null) {
        params["volthr"] = volthr;
    }
    if (only_conn_top !== null) {
        params["only_conn_top"] = only_conn_top;
    }
    if (inflate !== null) {
        params["inflate"] = inflate;
    }
    if (wm_skel !== null) {
        params["wm_skel"] = wm_skel;
    }
    if (skel_thr !== null) {
        params["skel_thr"] = skel_thr;
    }
    if (csf_skel !== null) {
        params["csf_skel"] = csf_skel;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (preinfl_inset !== null) {
        params["preinfl_inset"] = preinfl_inset;
    }
    if (preinfl_inflate !== null) {
        params["preinfl_inflate"] = preinfl_inflate;
    }
    return params;
}


function v_3_droimaker_cargs(
    params: V3DroimakerParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dROIMaker");
    cargs.push(execution.inputFile((params["inset"] ?? null)));
    cargs.push(
        "-thresh",
        String((params["thresh"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["refset"] ?? null) !== null) {
        cargs.push(
            "-refset",
            execution.inputFile((params["refset"] ?? null))
        );
    }
    if ((params["volthr"] ?? null) !== null) {
        cargs.push(
            "-volthr",
            String((params["volthr"] ?? null))
        );
    }
    if ((params["only_conn_top"] ?? null) !== null) {
        cargs.push(
            "-only_conn_top",
            String((params["only_conn_top"] ?? null))
        );
    }
    if ((params["inflate"] ?? null) !== null) {
        cargs.push(
            "-inflate",
            String((params["inflate"] ?? null))
        );
    }
    if ((params["trim_off_wm"] ?? null)) {
        cargs.push("-trim_off_wm");
    }
    if ((params["wm_skel"] ?? null) !== null) {
        cargs.push(
            "-wm_skel",
            execution.inputFile((params["wm_skel"] ?? null))
        );
    }
    if ((params["skel_thr"] ?? null) !== null) {
        cargs.push(
            "-skel_thr",
            String((params["skel_thr"] ?? null))
        );
    }
    if ((params["skel_stop"] ?? null)) {
        cargs.push("-skel_stop");
    }
    if ((params["skel_stop_strict"] ?? null)) {
        cargs.push("-skel_stop_strict");
    }
    if ((params["csf_skel"] ?? null) !== null) {
        cargs.push(
            "-csf_skel",
            execution.inputFile((params["csf_skel"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["neigh_upto_vert"] ?? null)) {
        cargs.push("-neigh_upto_vert");
    }
    if ((params["nifti"] ?? null)) {
        cargs.push("-nifti");
    }
    if ((params["preinfl_inset"] ?? null) !== null) {
        cargs.push(
            "-preinfl_inset",
            execution.inputFile((params["preinfl_inset"] ?? null))
        );
    }
    if ((params["preinfl_inflate"] ?? null) !== null) {
        cargs.push(
            "-preinfl_inflate",
            String((params["preinfl_inflate"] ?? null))
        );
    }
    if ((params["dump_no_labtab"] ?? null)) {
        cargs.push("-dump_no_labtab");
    }
    return cargs;
}


function v_3_droimaker_outputs(
    params: V3DroimakerParameters,
    execution: Execution,
): V3DroimakerOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3DroimakerOutputs = {
        root: execution.outputFile("."),
        gm_map: execution.outputFile([(params["prefix"] ?? null), "_GM+orig.*.HEAD"].join('')),
        gmi_map: execution.outputFile([(params["prefix"] ?? null), "_GMI+orig.*.HEAD"].join('')),
    };
    return ret;
}


function v_3_droimaker_execute(
    params: V3DroimakerParameters,
    execution: Execution,
): V3DroimakerOutputs {
    /**
     * Create a labelled set of ROIs from input data, useful in combining functional and tractographic/structural data.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3DroimakerOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3_droimaker_cargs(params, execution)
    const ret = v_3_droimaker_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3_droimaker(
    inset: InputPathType,
    thresh: number,
    prefix: string,
    refset: InputPathType | null = null,
    volthr: number | null = null,
    only_conn_top: number | null = null,
    inflate: number | null = null,
    trim_off_wm: boolean = false,
    wm_skel: InputPathType | null = null,
    skel_thr: number | null = null,
    skel_stop: boolean = false,
    skel_stop_strict: boolean = false,
    csf_skel: InputPathType | null = null,
    mask: InputPathType | null = null,
    neigh_upto_vert: boolean = false,
    nifti: boolean = false,
    preinfl_inset: InputPathType | null = null,
    preinfl_inflate: number | null = null,
    dump_no_labtab: boolean = false,
    runner: Runner | null = null,
): V3DroimakerOutputs {
    /**
     * Create a labelled set of ROIs from input data, useful in combining functional and tractographic/structural data.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param inset 3D volume(s) of values, especially functionally-derived quantities like correlation values or ICA Z-scores.
     * @param thresh Threshold for values in INSET, used to create ROI islands from the 3D volume's sea of values.
     * @param prefix Prefix of output name, with output files being: PREFIX_GM* and PREFIX_GMI*
     * @param refset 3D (or multi-subbrick) volume containing integer values with which to label specific GM ROIs after thresholding.
     * @param volthr Minimum size a cluster of voxels must have in order to remain a GM ROI after thresholding. Can reduce 'noisy' clusters.
     * @param only_conn_top Select N max contiguous voxels in a region starting from peak voxel and expanding.
     * @param inflate Number of voxels to pad each found ROI in order to turn GM ROIs into inflated (GMI) ROIs.
     * @param trim_off_wm Trim the INSET to exclude voxels in WM by excluding those which overlap an input WM skeleton.
     * @param wm_skel 3D volume containing info of WM, as might be defined from an FA map or anatomical segmentation.
     * @param skel_thr Threshold value for WM skeleton if it is not a mask.
     * @param skel_stop Stop inflation at locations which are already on WM skeleton.
     * @param skel_stop_strict Do not allow any inflation into the skel-region.
     * @param csf_skel 3D volume containing info of CSF. Info must be a binary mask already.
     * @param mask Mask within which to apply threshold. Useful if the MINTHR is a negative value.
     * @param neigh_upto_vert Define neighbors loosely so that voxels can be grouped into the same ROI if they share at least one vertex.
     * @param nifti Switch to output *.nii.gz GM and GMI files
     * @param preinfl_inset Start with a WM ROI, inflate it to find the nearest GM, then expand that GM and subtract away the WM+CSF parts.
     * @param preinfl_inflate Number of voxels for initial inflation of PSET.
     * @param dump_no_labtab Switch for turning off labeltable attachment to the output GM and GMI files.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3DroimakerOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3_DROIMAKER_METADATA);
    const params = v_3_droimaker_params(inset, thresh, prefix, refset, volthr, only_conn_top, inflate, trim_off_wm, wm_skel, skel_thr, skel_stop, skel_stop_strict, csf_skel, mask, neigh_upto_vert, nifti, preinfl_inset, preinfl_inflate, dump_no_labtab)
    return v_3_droimaker_execute(params, execution);
}


export {
      V3DroimakerOutputs,
      V3DroimakerParameters,
      V_3_DROIMAKER_METADATA,
      v_3_droimaker,
      v_3_droimaker_params,
};
