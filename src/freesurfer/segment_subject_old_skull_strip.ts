// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEGMENT_SUBJECT_OLD_SKULL_STRIP_METADATA: Metadata = {
    id: "cc92dcb2f7e4bb046baab00eb1150ee3c6a1adae.boutiques",
    name: "segment_subject_old_skull_strip",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SegmentSubjectOldSkullStripParameters {
    "@type": "freesurfer.segment_subject_old_skull_strip";
    "input_volume": InputPathType;
    "output_xfm": string;
    "log_file"?: string | null | undefined;
    "help_flag": boolean;
    "debug_flag": boolean;
    "version_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.segment_subject_old_skull_strip": segment_subject_old_skull_strip_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.segment_subject_old_skull_strip": segment_subject_old_skull_strip_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `segment_subject_old_skull_strip(...)`.
 *
 * @interface
 */
interface SegmentSubjectOldSkullStripOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting output xfm file
     */
    output_xfm_file: OutputPathType;
    /**
     * Generated log file
     */
    log_output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume file
 * @param output_xfm Output xfm file
 * @param log_file Log file. Default is outdir/talarach.log
 * @param help_flag Print help and exit
 * @param debug_flag Turn on debugging
 * @param version_flag Print version and exit
 *
 * @returns Parameter dictionary
 */
function segment_subject_old_skull_strip_params(
    input_volume: InputPathType,
    output_xfm: string,
    log_file: string | null = null,
    help_flag: boolean = false,
    debug_flag: boolean = false,
    version_flag: boolean = false,
): SegmentSubjectOldSkullStripParameters {
    const params = {
        "@type": "freesurfer.segment_subject_old_skull_strip" as const,
        "input_volume": input_volume,
        "output_xfm": output_xfm,
        "help_flag": help_flag,
        "debug_flag": debug_flag,
        "version_flag": version_flag,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function segment_subject_old_skull_strip_cargs(
    params: SegmentSubjectOldSkullStripParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("segment_subject_old_skull_strip");
    cargs.push(
        "-i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "-xfm",
        (params["output_xfm"] ?? null)
    );
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function segment_subject_old_skull_strip_outputs(
    params: SegmentSubjectOldSkullStripParameters,
    execution: Execution,
): SegmentSubjectOldSkullStripOutputs {
    const ret: SegmentSubjectOldSkullStripOutputs = {
        root: execution.outputFile("."),
        output_xfm_file: execution.outputFile([(params["output_xfm"] ?? null)].join('')),
        log_output_file: ((params["log_file"] ?? null) !== null) ? execution.outputFile([(params["log_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Front-end for MINCs mritotal for computing the talairach transform that maps the input volume to the MNI305.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubjectOldSkullStripOutputs`).
 */
function segment_subject_old_skull_strip_execute(
    params: SegmentSubjectOldSkullStripParameters,
    runner: Runner | null = null,
): SegmentSubjectOldSkullStripOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEGMENT_SUBJECT_OLD_SKULL_STRIP_METADATA);
    params = execution.params(params)
    const cargs = segment_subject_old_skull_strip_cargs(params, execution)
    const ret = segment_subject_old_skull_strip_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Front-end for MINCs mritotal for computing the talairach transform that maps the input volume to the MNI305.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume file
 * @param output_xfm Output xfm file
 * @param log_file Log file. Default is outdir/talarach.log
 * @param help_flag Print help and exit
 * @param debug_flag Turn on debugging
 * @param version_flag Print version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubjectOldSkullStripOutputs`).
 */
function segment_subject_old_skull_strip(
    input_volume: InputPathType,
    output_xfm: string,
    log_file: string | null = null,
    help_flag: boolean = false,
    debug_flag: boolean = false,
    version_flag: boolean = false,
    runner: Runner | null = null,
): SegmentSubjectOldSkullStripOutputs {
    const params = segment_subject_old_skull_strip_params(input_volume, output_xfm, log_file, help_flag, debug_flag, version_flag)
    return segment_subject_old_skull_strip_execute(params, runner);
}


export {
      SEGMENT_SUBJECT_OLD_SKULL_STRIP_METADATA,
      SegmentSubjectOldSkullStripOutputs,
      SegmentSubjectOldSkullStripParameters,
      segment_subject_old_skull_strip,
      segment_subject_old_skull_strip_execute,
      segment_subject_old_skull_strip_params,
};
