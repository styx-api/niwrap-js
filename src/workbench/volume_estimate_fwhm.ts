// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_ESTIMATE_FWHM_METADATA: Metadata = {
    id: "5fcfc75e7e632e5ba205f400361a1c93167286ec.boutiques",
    name: "volume-estimate-fwhm",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeEstimateFwhmWholeFileParameters {
    "__STYXTYPE__": "whole_file";
    "opt_demean": boolean;
}


interface VolumeEstimateFwhmParameters {
    "__STYXTYPE__": "volume-estimate-fwhm";
    "volume": InputPathType;
    "opt_roi_roivol"?: InputPathType | null | undefined;
    "opt_subvolume_subvol"?: string | null | undefined;
    "whole_file"?: VolumeEstimateFwhmWholeFileParameters | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-estimate-fwhm": volume_estimate_fwhm_cargs,
        "whole_file": volume_estimate_fwhm_whole_file_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


function volume_estimate_fwhm_whole_file_params(
    opt_demean: boolean = false,
): VolumeEstimateFwhmWholeFileParameters {
    /**
     * Build parameters.
    
     * @param opt_demean subtract the mean image before estimating smoothness
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "whole_file" as const,
        "opt_demean": opt_demean,
    };
    return params;
}


function volume_estimate_fwhm_whole_file_cargs(
    params: VolumeEstimateFwhmWholeFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-whole-file");
    if ((params["opt_demean"] ?? null)) {
        cargs.push("-demean");
    }
    return cargs;
}


/**
 * Output object returned when calling `volume_estimate_fwhm(...)`.
 *
 * @interface
 */
interface VolumeEstimateFwhmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function volume_estimate_fwhm_params(
    volume: InputPathType,
    opt_roi_roivol: InputPathType | null = null,
    opt_subvolume_subvol: string | null = null,
    whole_file: VolumeEstimateFwhmWholeFileParameters | null = null,
): VolumeEstimateFwhmParameters {
    /**
     * Build parameters.
    
     * @param volume the input volume
     * @param opt_roi_roivol use only data within an ROI: the volume to use as an ROI
     * @param opt_subvolume_subvol select a single subvolume to estimate smoothness of: the subvolume number or name
     * @param whole_file estimate for the whole file at once, not each subvolume separately
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-estimate-fwhm" as const,
        "volume": volume,
    };
    if (opt_roi_roivol !== null) {
        params["opt_roi_roivol"] = opt_roi_roivol;
    }
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    if (whole_file !== null) {
        params["whole_file"] = whole_file;
    }
    return params;
}


function volume_estimate_fwhm_cargs(
    params: VolumeEstimateFwhmParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-estimate-fwhm");
    cargs.push(execution.inputFile((params["volume"] ?? null)));
    if ((params["opt_roi_roivol"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roivol"] ?? null))
        );
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    if ((params["whole_file"] ?? null) !== null) {
        cargs.push(...dynCargs((params["whole_file"] ?? null).__STYXTYPE__)((params["whole_file"] ?? null), execution));
    }
    return cargs;
}


function volume_estimate_fwhm_outputs(
    params: VolumeEstimateFwhmParameters,
    execution: Execution,
): VolumeEstimateFwhmOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeEstimateFwhmOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function volume_estimate_fwhm_execute(
    params: VolumeEstimateFwhmParameters,
    execution: Execution,
): VolumeEstimateFwhmOutputs {
    /**
     * Estimate fwhm smoothness of a volume.
     * 
     * Estimates the smoothness of the input volume in X, Y, and Z directions separately, printing the estimates to standard output, in mm as FWHM.  If -subvolume or -whole-file are not specified, each subvolume is estimated and displayed separately.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeEstimateFwhmOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_estimate_fwhm_cargs(params, execution)
    const ret = volume_estimate_fwhm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_estimate_fwhm(
    volume: InputPathType,
    opt_roi_roivol: InputPathType | null = null,
    opt_subvolume_subvol: string | null = null,
    whole_file: VolumeEstimateFwhmWholeFileParameters | null = null,
    runner: Runner | null = null,
): VolumeEstimateFwhmOutputs {
    /**
     * Estimate fwhm smoothness of a volume.
     * 
     * Estimates the smoothness of the input volume in X, Y, and Z directions separately, printing the estimates to standard output, in mm as FWHM.  If -subvolume or -whole-file are not specified, each subvolume is estimated and displayed separately.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume the input volume
     * @param opt_roi_roivol use only data within an ROI: the volume to use as an ROI
     * @param opt_subvolume_subvol select a single subvolume to estimate smoothness of: the subvolume number or name
     * @param whole_file estimate for the whole file at once, not each subvolume separately
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeEstimateFwhmOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_ESTIMATE_FWHM_METADATA);
    const params = volume_estimate_fwhm_params(volume, opt_roi_roivol, opt_subvolume_subvol, whole_file)
    return volume_estimate_fwhm_execute(params, execution);
}


export {
      VOLUME_ESTIMATE_FWHM_METADATA,
      VolumeEstimateFwhmOutputs,
      VolumeEstimateFwhmParameters,
      VolumeEstimateFwhmWholeFileParameters,
      volume_estimate_fwhm,
      volume_estimate_fwhm_params,
      volume_estimate_fwhm_whole_file_params,
};
