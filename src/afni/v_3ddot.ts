// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DDOT_METADATA: Metadata = {
    id: "4a668d35fe20645df0c5d29ea0e2920f566ca390.boutiques",
    name: "3ddot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3ddotParameters {
    "@type": "afni.3ddot";
    "input_datasets": Array<InputPathType>;
    "mask"?: InputPathType | null | undefined;
    "mrange"?: Array<number> | null | undefined;
    "demean": boolean;
    "docor": boolean;
    "dodot": boolean;
    "docoef": boolean;
    "dosums": boolean;
    "doeta2": boolean;
    "dodice": boolean;
    "show_labels": boolean;
    "upper": boolean;
    "full": boolean;
    "1D": boolean;
    "NIML": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3ddot": v_3ddot_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3ddot": v_3ddot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3ddot(...)`.
 *
 * @interface
 */
interface V3ddotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting coefficient or statistical values printed to stdout
     */
    result: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_datasets List of input datasets to be used (e.g. img1+orig, img2+orig)
 * @param mask Dataset to be used as a mask; only voxels with nonzero values will be averaged
 * @param mrange Restrict mask values to those between a and b (inclusive) for masking purposes
 * @param demean Remove the mean from each volume prior to computing the correlation
 * @param docor Return the correlation coefficient (default)
 * @param dodot Return the dot product (unscaled)
 * @param docoef Return the least square fit coefficients {a,b}
 * @param dosums Return xbar, ybar, variance, covariance, and correlation coefficient
 * @param doeta2 Return eta-squared (Cohen, NeuroImage 2008)
 * @param dodice Return the Dice coefficient (the Sorensen-Dice index)
 * @param show_labels Print sub-brick labels to help identify what is being correlated
 * @param upper Compute upper triangular matrix
 * @param full Compute the whole matrix
 * @param v_1_d Add comment headings for the 1D format
 * @param niml Write output in NIML 1D format
 *
 * @returns Parameter dictionary
 */
function v_3ddot_params(
    input_datasets: Array<InputPathType>,
    mask: InputPathType | null = null,
    mrange: Array<number> | null = null,
    demean: boolean = false,
    docor: boolean = false,
    dodot: boolean = false,
    docoef: boolean = false,
    dosums: boolean = false,
    doeta2: boolean = false,
    dodice: boolean = false,
    show_labels: boolean = false,
    upper: boolean = false,
    full: boolean = false,
    v_1_d: boolean = false,
    niml: boolean = false,
): V3ddotParameters {
    const params = {
        "@type": "afni.3ddot" as const,
        "input_datasets": input_datasets,
        "demean": demean,
        "docor": docor,
        "dodot": dodot,
        "docoef": docoef,
        "dosums": dosums,
        "doeta2": doeta2,
        "dodice": dodice,
        "show_labels": show_labels,
        "upper": upper,
        "full": full,
        "1D": v_1_d,
        "NIML": niml,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (mrange !== null) {
        params["mrange"] = mrange;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3ddot_cargs(
    params: V3ddotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3ddot");
    cargs.push(...(params["input_datasets"] ?? null).map(f => execution.inputFile(f)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["mrange"] ?? null) !== null) {
        cargs.push(
            "-mrange",
            ...(params["mrange"] ?? null).map(String)
        );
    }
    if ((params["demean"] ?? null)) {
        cargs.push("-demean");
    }
    if ((params["docor"] ?? null)) {
        cargs.push("-docor");
    }
    if ((params["dodot"] ?? null)) {
        cargs.push("-dodot");
    }
    if ((params["docoef"] ?? null)) {
        cargs.push("-docoef");
    }
    if ((params["dosums"] ?? null)) {
        cargs.push("-dosums");
    }
    if ((params["doeta2"] ?? null)) {
        cargs.push("-doeta2");
    }
    if ((params["dodice"] ?? null)) {
        cargs.push("-dodice");
    }
    if ((params["show_labels"] ?? null)) {
        cargs.push("-show_labels");
    }
    if ((params["upper"] ?? null)) {
        cargs.push("-upper");
    }
    if ((params["full"] ?? null)) {
        cargs.push("-full");
    }
    if ((params["1D"] ?? null)) {
        cargs.push("-1D");
    }
    if ((params["NIML"] ?? null)) {
        cargs.push("-NIML");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3ddot_outputs(
    params: V3ddotParameters,
    execution: Execution,
): V3ddotOutputs {
    const ret: V3ddotOutputs = {
        root: execution.outputFile("."),
        result: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * Computes correlation coefficients between sub-brick pairs.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3ddotOutputs`).
 */
function v_3ddot_execute(
    params: V3ddotParameters,
    runner: Runner | null = null,
): V3ddotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DDOT_METADATA);
    params = execution.params(params)
    const cargs = v_3ddot_cargs(params, execution)
    const ret = v_3ddot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes correlation coefficients between sub-brick pairs.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_datasets List of input datasets to be used (e.g. img1+orig, img2+orig)
 * @param mask Dataset to be used as a mask; only voxels with nonzero values will be averaged
 * @param mrange Restrict mask values to those between a and b (inclusive) for masking purposes
 * @param demean Remove the mean from each volume prior to computing the correlation
 * @param docor Return the correlation coefficient (default)
 * @param dodot Return the dot product (unscaled)
 * @param docoef Return the least square fit coefficients {a,b}
 * @param dosums Return xbar, ybar, variance, covariance, and correlation coefficient
 * @param doeta2 Return eta-squared (Cohen, NeuroImage 2008)
 * @param dodice Return the Dice coefficient (the Sorensen-Dice index)
 * @param show_labels Print sub-brick labels to help identify what is being correlated
 * @param upper Compute upper triangular matrix
 * @param full Compute the whole matrix
 * @param v_1_d Add comment headings for the 1D format
 * @param niml Write output in NIML 1D format
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3ddotOutputs`).
 */
function v_3ddot(
    input_datasets: Array<InputPathType>,
    mask: InputPathType | null = null,
    mrange: Array<number> | null = null,
    demean: boolean = false,
    docor: boolean = false,
    dodot: boolean = false,
    docoef: boolean = false,
    dosums: boolean = false,
    doeta2: boolean = false,
    dodice: boolean = false,
    show_labels: boolean = false,
    upper: boolean = false,
    full: boolean = false,
    v_1_d: boolean = false,
    niml: boolean = false,
    runner: Runner | null = null,
): V3ddotOutputs {
    const params = v_3ddot_params(input_datasets, mask, mrange, demean, docor, dodot, docoef, dosums, doeta2, dodice, show_labels, upper, full, v_1_d, niml)
    return v_3ddot_execute(params, runner);
}


export {
      V3ddotOutputs,
      V3ddotParameters,
      V_3DDOT_METADATA,
      v_3ddot,
      v_3ddot_execute,
      v_3ddot_params,
};
