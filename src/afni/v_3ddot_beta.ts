// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DDOT_BETA_METADATA: Metadata = {
    id: "713d46495fc511b0c705f51aedcff3425be6c314.boutiques",
    name: "3ddot_beta",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3ddotBetaParameters {
    "@type": "afni.3ddot_beta";
    "input_file": InputPathType;
    "prefix": string;
    "doeta2": boolean;
    "mask"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3ddot_beta": v_3ddot_beta_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3ddot_beta": v_3ddot_beta_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3ddot_beta(...)`.
 *
 * @interface
 */
interface V3ddotBetaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file containing the correlation-like matrix
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input file with N bricks
 * @param prefix Output prefix for the result file
 * @param doeta2 Required flag for performing eta2 tests
 * @param mask Optional mask file within which to take values
 *
 * @returns Parameter dictionary
 */
function v_3ddot_beta_params(
    input_file: InputPathType,
    prefix: string,
    doeta2: boolean = false,
    mask: InputPathType | null = null,
): V3ddotBetaParameters {
    const params = {
        "@type": "afni.3ddot_beta" as const,
        "input_file": input_file,
        "prefix": prefix,
        "doeta2": doeta2,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3ddot_beta_cargs(
    params: V3ddotBetaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3ddot_beta");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["doeta2"] ?? null)) {
        cargs.push("-doeta2");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3ddot_beta_outputs(
    params: V3ddotBetaParameters,
    execution: Execution,
): V3ddotBetaOutputs {
    const ret: V3ddotBetaOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null), "_eta2.dat"].join('')),
    };
    return ret;
}


/**
 * Beta version of updating 3ddot, currently only performing eta2 tests and outputting a full matrix to a text file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3ddotBetaOutputs`).
 */
function v_3ddot_beta_execute(
    params: V3ddotBetaParameters,
    runner: Runner | null = null,
): V3ddotBetaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DDOT_BETA_METADATA);
    params = execution.params(params)
    const cargs = v_3ddot_beta_cargs(params, execution)
    const ret = v_3ddot_beta_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Beta version of updating 3ddot, currently only performing eta2 tests and outputting a full matrix to a text file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Input file with N bricks
 * @param prefix Output prefix for the result file
 * @param doeta2 Required flag for performing eta2 tests
 * @param mask Optional mask file within which to take values
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3ddotBetaOutputs`).
 */
function v_3ddot_beta(
    input_file: InputPathType,
    prefix: string,
    doeta2: boolean = false,
    mask: InputPathType | null = null,
    runner: Runner | null = null,
): V3ddotBetaOutputs {
    const params = v_3ddot_beta_params(input_file, prefix, doeta2, mask)
    return v_3ddot_beta_execute(params, runner);
}


export {
      V3ddotBetaOutputs,
      V3ddotBetaParameters,
      V_3DDOT_BETA_METADATA,
      v_3ddot_beta,
      v_3ddot_beta_execute,
      v_3ddot_beta_params,
};
