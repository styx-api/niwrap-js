// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RBOX_METADATA: Metadata = {
    id: "4f43f8ba19b6a24114997ab42bf7e5c5e5484c74.boutiques",
    name: "rbox",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface RboxParameters {
    "__STYXTYPE__": "rbox";
    "number_points": string;
    "dimension"?: string | null | undefined;
    "integer_coordinates": boolean;
    "bounding_box"?: number | null | undefined;
    "offset"?: number | null | undefined;
    "user_seed"?: number | null | undefined;
    "mesh_lattice"?: Array<string> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "rbox": rbox_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rbox(...)`.
 *
 * @interface
 */
interface RboxOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function rbox_params(
    number_points: string,
    dimension: string | null = null,
    integer_coordinates: boolean = false,
    bounding_box: number | null = null,
    offset: number | null = null,
    user_seed: number | null = null,
    mesh_lattice: Array<string> | null = null,
): RboxParameters {
    /**
     * Build parameters.
    
     * @param number_points Number of random points in cube, lens, spiral, sphere or grid
     * @param dimension Dimension (e.g., D3 for 3-d)
     * @param integer_coordinates Print integer coordinates, default 'Bn' is 1e+06
     * @param bounding_box Bounding box coordinates, default 0.5
     * @param offset Offset coordinates by n
     * @param user_seed Use n as the random number seed
     * @param mesh_lattice Lattice (Mesh) rotated by [n,-m,0], [m,n,0], [0,0,r], ...
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "rbox" as const,
        "number_points": number_points,
        "integer_coordinates": integer_coordinates,
    };
    if (dimension !== null) {
        params["dimension"] = dimension;
    }
    if (bounding_box !== null) {
        params["bounding_box"] = bounding_box;
    }
    if (offset !== null) {
        params["offset"] = offset;
    }
    if (user_seed !== null) {
        params["user_seed"] = user_seed;
    }
    if (mesh_lattice !== null) {
        params["mesh_lattice"] = mesh_lattice;
    }
    return params;
}


function rbox_cargs(
    params: RboxParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("rbox");
    cargs.push((params["number_points"] ?? null));
    if ((params["dimension"] ?? null) !== null) {
        cargs.push((params["dimension"] ?? null));
    }
    if ((params["integer_coordinates"] ?? null)) {
        cargs.push("z");
    }
    if ((params["bounding_box"] ?? null) !== null) {
        cargs.push(
            "B",
            String((params["bounding_box"] ?? null))
        );
    }
    if ((params["offset"] ?? null) !== null) {
        cargs.push(
            "O",
            String((params["offset"] ?? null))
        );
    }
    if ((params["user_seed"] ?? null) !== null) {
        cargs.push(
            "t",
            String((params["user_seed"] ?? null))
        );
    }
    if ((params["mesh_lattice"] ?? null) !== null) {
        cargs.push(
            "M",
            ...(params["mesh_lattice"] ?? null)
        );
    }
    return cargs;
}


function rbox_outputs(
    params: RboxParameters,
    execution: Execution,
): RboxOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RboxOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function rbox_execute(
    params: RboxParameters,
    execution: Execution,
): RboxOutputs {
    /**
     * Generate various point distributions. Default is random in cube.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RboxOutputs`).
     */
    params = execution.params(params)
    const cargs = rbox_cargs(params, execution)
    const ret = rbox_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function rbox(
    number_points: string,
    dimension: string | null = null,
    integer_coordinates: boolean = false,
    bounding_box: number | null = null,
    offset: number | null = null,
    user_seed: number | null = null,
    mesh_lattice: Array<string> | null = null,
    runner: Runner | null = null,
): RboxOutputs {
    /**
     * Generate various point distributions. Default is random in cube.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param number_points Number of random points in cube, lens, spiral, sphere or grid
     * @param dimension Dimension (e.g., D3 for 3-d)
     * @param integer_coordinates Print integer coordinates, default 'Bn' is 1e+06
     * @param bounding_box Bounding box coordinates, default 0.5
     * @param offset Offset coordinates by n
     * @param user_seed Use n as the random number seed
     * @param mesh_lattice Lattice (Mesh) rotated by [n,-m,0], [m,n,0], [0,0,r], ...
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RboxOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RBOX_METADATA);
    const params = rbox_params(number_points, dimension, integer_coordinates, bounding_box, offset, user_seed, mesh_lattice)
    return rbox_execute(params, execution);
}


export {
      RBOX_METADATA,
      RboxOutputs,
      RboxParameters,
      rbox,
      rbox_params,
};
