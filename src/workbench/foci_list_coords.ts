// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FOCI_LIST_COORDS_METADATA: Metadata = {
    id: "22d2987788299a371745940b65548a5143218377.boutiques",
    name: "foci-list-coords",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface FociListCoordsParameters {
    "@type": "workbench.foci-list-coords";
    "foci_file": InputPathType;
    "coord_file_out": string;
    "opt_names_out_names_file_out"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.foci-list-coords": foci_list_coords_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `foci_list_coords(...)`.
 *
 * @interface
 */
interface FociListCoordsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param foci_file input foci file
 * @param coord_file_out output - the output coordinate text file
 * @param opt_names_out_names_file_out output the foci names: output - text file to put foci names in
 *
 * @returns Parameter dictionary
 */
function foci_list_coords_params(
    foci_file: InputPathType,
    coord_file_out: string,
    opt_names_out_names_file_out: string | null = null,
): FociListCoordsParameters {
    const params = {
        "@type": "workbench.foci-list-coords" as const,
        "foci_file": foci_file,
        "coord_file_out": coord_file_out,
    };
    if (opt_names_out_names_file_out !== null) {
        params["opt_names_out_names_file_out"] = opt_names_out_names_file_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function foci_list_coords_cargs(
    params: FociListCoordsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-foci-list-coords");
    cargs.push(execution.inputFile((params["foci_file"] ?? null)));
    cargs.push((params["coord_file_out"] ?? null));
    if ((params["opt_names_out_names_file_out"] ?? null) !== null) {
        cargs.push(
            "-names-out",
            (params["opt_names_out_names_file_out"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function foci_list_coords_outputs(
    params: FociListCoordsParameters,
    execution: Execution,
): FociListCoordsOutputs {
    const ret: FociListCoordsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Output foci coordinates in a text file.
 *
 * Output the coordinates for every focus in the foci file, and optionally the focus names in a second text file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FociListCoordsOutputs`).
 */
function foci_list_coords_execute(
    params: FociListCoordsParameters,
    execution: Execution,
): FociListCoordsOutputs {
    params = execution.params(params)
    const cargs = foci_list_coords_cargs(params, execution)
    const ret = foci_list_coords_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Output foci coordinates in a text file.
 *
 * Output the coordinates for every focus in the foci file, and optionally the focus names in a second text file.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param foci_file input foci file
 * @param coord_file_out output - the output coordinate text file
 * @param opt_names_out_names_file_out output the foci names: output - text file to put foci names in
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FociListCoordsOutputs`).
 */
function foci_list_coords(
    foci_file: InputPathType,
    coord_file_out: string,
    opt_names_out_names_file_out: string | null = null,
    runner: Runner | null = null,
): FociListCoordsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FOCI_LIST_COORDS_METADATA);
    const params = foci_list_coords_params(foci_file, coord_file_out, opt_names_out_names_file_out)
    return foci_list_coords_execute(params, execution);
}


export {
      FOCI_LIST_COORDS_METADATA,
      FociListCoordsOutputs,
      FociListCoordsParameters,
      foci_list_coords,
      foci_list_coords_cargs,
      foci_list_coords_execute,
      foci_list_coords_outputs,
      foci_list_coords_params,
};
