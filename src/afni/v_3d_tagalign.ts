// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TAGALIGN_METADATA: Metadata = {
    id: "9b9bddb3a6de929defedf353ef13f73e77d162d8.boutiques",
    name: "3dTagalign",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTagalignParameters {
    "@type"?: "afni/3dTagalign";
    "input_dataset": InputPathType;
    "master_dataset": InputPathType;
    "tagset_file"?: InputPathType | null | undefined;
    "no_keep_tags": boolean;
    "matvec_file"?: string | null | undefined;
    "rotate": boolean;
    "affine": boolean;
    "rotscl": boolean;
    "prefix"?: string | null | undefined;
    "verbose": boolean;
    "dummy": boolean;
    "linear_interpolation": boolean;
    "cubic_interpolation": boolean;
    "nearest_neighbor_interpolation": boolean;
    "quintic_interpolation": boolean;
}
type V3dTagalignParametersTagged = Required<Pick<V3dTagalignParameters, '@type'>> & V3dTagalignParameters;


/**
 * Output object returned when calling `V3dTagalignParameters(...)`.
 *
 * @interface
 */
interface V3dTagalignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset in AFNI format (.HEAD)
     */
    output_dataset_head: OutputPathType | null;
    /**
     * Output dataset in AFNI format (.BRIK)
     */
    output_dataset_brick: OutputPathType | null;
    /**
     * Output transformation matrix and vector file
     */
    output_matvec_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input dataset to align
 * @param master_dataset Use dataset 'mset' as the master dataset. This option is mandatory.
 * @param tagset_file Use the tagset in the .tag file instead of dset.
 * @param no_keep_tags Don't put transformed locations of dset's tags into the output dataset [default = keep tags].
 * @param matvec_file Write the matrix+vector transformation to file 'mfile'. This can be used with 3dWarp's '-matvec_in2out' option to align other datasets in the same way (e.g., functional datasets).
 * @param rotate Compute the transformation as a rotation + shift (default).
 * @param affine Compute the transformation as a general affine map, where the matrix is a general 3x3 matrix.
 * @param rotscl Compute transformation as a rotation times an isotropic scaling; where matrix is an orthogonal matrix times a scalar.
 * @param prefix Specify the prefix for the output dataset.
 * @param verbose Print progress reports.
 * @param dummy Don't actually rotate the dataset, just compute the transformation matrix and vector. If '-matvec' is used, the mfile will be written.
 * @param linear_interpolation Use linear interpolation method.
 * @param cubic_interpolation Use cubic interpolation method (default).
 * @param nearest_neighbor_interpolation Use nearest neighbour interpolation method.
 * @param quintic_interpolation Use quintic interpolation method.
 *
 * @returns Parameter dictionary
 */
function v_3d_tagalign_params(
    input_dataset: InputPathType,
    master_dataset: InputPathType,
    tagset_file: InputPathType | null = null,
    no_keep_tags: boolean = false,
    matvec_file: string | null = null,
    rotate: boolean = false,
    affine: boolean = false,
    rotscl: boolean = false,
    prefix: string | null = null,
    verbose: boolean = false,
    dummy: boolean = false,
    linear_interpolation: boolean = false,
    cubic_interpolation: boolean = false,
    nearest_neighbor_interpolation: boolean = false,
    quintic_interpolation: boolean = false,
): V3dTagalignParametersTagged {
    const params = {
        "@type": "afni/3dTagalign" as const,
        "input_dataset": input_dataset,
        "master_dataset": master_dataset,
        "no_keep_tags": no_keep_tags,
        "rotate": rotate,
        "affine": affine,
        "rotscl": rotscl,
        "verbose": verbose,
        "dummy": dummy,
        "linear_interpolation": linear_interpolation,
        "cubic_interpolation": cubic_interpolation,
        "nearest_neighbor_interpolation": nearest_neighbor_interpolation,
        "quintic_interpolation": quintic_interpolation,
    };
    if (tagset_file !== null) {
        params["tagset_file"] = tagset_file;
    }
    if (matvec_file !== null) {
        params["matvec_file"] = matvec_file;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_tagalign_cargs(
    params: V3dTagalignParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dTagalign");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    cargs.push(
        "-master",
        execution.inputFile((params["master_dataset"] ?? null))
    );
    if ((params["tagset_file"] ?? null) !== null) {
        cargs.push(
            "-tagset",
            execution.inputFile((params["tagset_file"] ?? null))
        );
    }
    if ((params["no_keep_tags"] ?? false)) {
        cargs.push("-nokeeptags");
    }
    if ((params["matvec_file"] ?? null) !== null) {
        cargs.push(
            "-matvec",
            (params["matvec_file"] ?? null)
        );
    }
    if ((params["rotate"] ?? false)) {
        cargs.push("-rotate");
    }
    if ((params["affine"] ?? false)) {
        cargs.push("-affine");
    }
    if ((params["rotscl"] ?? false)) {
        cargs.push("-rotscl");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verbose"] ?? false)) {
        cargs.push("-verb");
    }
    if ((params["dummy"] ?? false)) {
        cargs.push("-dummy");
    }
    if ((params["linear_interpolation"] ?? false)) {
        cargs.push("-linear");
    }
    if ((params["cubic_interpolation"] ?? false)) {
        cargs.push("-cubic");
    }
    if ((params["nearest_neighbor_interpolation"] ?? false)) {
        cargs.push("-NN");
    }
    if ((params["quintic_interpolation"] ?? false)) {
        cargs.push("-quintic");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_tagalign_outputs(
    params: V3dTagalignParameters,
    execution: Execution,
): V3dTagalignOutputs {
    const ret: V3dTagalignOutputs = {
        root: execution.outputFile("."),
        output_dataset_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        output_dataset_brick: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
        output_matvec_file: ((params["matvec_file"] ?? null) !== null) ? execution.outputFile([(params["matvec_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dTagalign
 *
 * Rotates/translates dataset 'dset' to be aligned with the master using the tagsets embedded in their .HEAD files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTagalignOutputs`).
 */
function v_3d_tagalign_execute(
    params: V3dTagalignParameters,
    runner: Runner | null = null,
): V3dTagalignOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TAGALIGN_METADATA);
    params = execution.params(params)
    const cargs = v_3d_tagalign_cargs(params, execution)
    const ret = v_3d_tagalign_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dTagalign
 *
 * Rotates/translates dataset 'dset' to be aligned with the master using the tagsets embedded in their .HEAD files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input dataset to align
 * @param master_dataset Use dataset 'mset' as the master dataset. This option is mandatory.
 * @param tagset_file Use the tagset in the .tag file instead of dset.
 * @param no_keep_tags Don't put transformed locations of dset's tags into the output dataset [default = keep tags].
 * @param matvec_file Write the matrix+vector transformation to file 'mfile'. This can be used with 3dWarp's '-matvec_in2out' option to align other datasets in the same way (e.g., functional datasets).
 * @param rotate Compute the transformation as a rotation + shift (default).
 * @param affine Compute the transformation as a general affine map, where the matrix is a general 3x3 matrix.
 * @param rotscl Compute transformation as a rotation times an isotropic scaling; where matrix is an orthogonal matrix times a scalar.
 * @param prefix Specify the prefix for the output dataset.
 * @param verbose Print progress reports.
 * @param dummy Don't actually rotate the dataset, just compute the transformation matrix and vector. If '-matvec' is used, the mfile will be written.
 * @param linear_interpolation Use linear interpolation method.
 * @param cubic_interpolation Use cubic interpolation method (default).
 * @param nearest_neighbor_interpolation Use nearest neighbour interpolation method.
 * @param quintic_interpolation Use quintic interpolation method.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTagalignOutputs`).
 */
function v_3d_tagalign(
    input_dataset: InputPathType,
    master_dataset: InputPathType,
    tagset_file: InputPathType | null = null,
    no_keep_tags: boolean = false,
    matvec_file: string | null = null,
    rotate: boolean = false,
    affine: boolean = false,
    rotscl: boolean = false,
    prefix: string | null = null,
    verbose: boolean = false,
    dummy: boolean = false,
    linear_interpolation: boolean = false,
    cubic_interpolation: boolean = false,
    nearest_neighbor_interpolation: boolean = false,
    quintic_interpolation: boolean = false,
    runner: Runner | null = null,
): V3dTagalignOutputs {
    const params = v_3d_tagalign_params(input_dataset, master_dataset, tagset_file, no_keep_tags, matvec_file, rotate, affine, rotscl, prefix, verbose, dummy, linear_interpolation, cubic_interpolation, nearest_neighbor_interpolation, quintic_interpolation)
    return v_3d_tagalign_execute(params, runner);
}


export {
      V3dTagalignOutputs,
      V_3D_TAGALIGN_METADATA,
      v_3d_tagalign,
      v_3d_tagalign_execute,
      v_3d_tagalign_params,
};
