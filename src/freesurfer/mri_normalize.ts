// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_NORMALIZE_METADATA: Metadata = {
    id: "f56b43eac4e79a9494c46feaac6f223c543d3741.boutiques",
    name: "mri_normalize",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriNormalizeParameters {
    "@type": "freesurfer.mri_normalize";
    "input_vol": InputPathType;
    "output_vol": string;
    "norm_iters"?: number | null | undefined;
    "disable_1d": boolean;
    "nonmax_suppress"?: number | null | undefined;
    "conform": boolean;
    "nonconform": boolean;
    "gentle": boolean;
    "control_points"?: InputPathType | null | undefined;
    "fonly_control_points"?: InputPathType | null | undefined;
    "lonly_labels"?: InputPathType | null | undefined;
    "labels"?: InputPathType | null | undefined;
    "write_volumes"?: string | null | undefined;
    "intensity_above"?: number | null | undefined;
    "intensity_below"?: number | null | undefined;
    "intensity_gradient"?: number | null | undefined;
    "prune": boolean;
    "no_gentle_cp": boolean;
    "mask_file"?: InputPathType | null | undefined;
    "atlas_transform"?: string | null | undefined;
    "noskull": boolean;
    "monkey": boolean;
    "nosnr": boolean;
    "sigma_smooth"?: number | null | undefined;
    "aseg_file"?: InputPathType | null | undefined;
    "debug_v"?: string | null | undefined;
    "debug_d"?: string | null | undefined;
    "renorm_vol"?: InputPathType | null | undefined;
    "checknorm_vol"?: string | null | undefined;
    "load_read_cp"?: string | null | undefined;
    "cp_output_vol"?: InputPathType | null | undefined;
    "surface_transform"?: string | null | undefined;
    "seed_value"?: number | null | undefined;
    "print_help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_normalize": mri_normalize_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_normalize": mri_normalize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_normalize(...)`.
 *
 * @interface
 */
interface MriNormalizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Normalized output volume
     */
    output_volume: OutputPathType;
    /**
     * Output final control points as a volume, applicable only with -aseg
     */
    controlpoints_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_vol Input MRI volume file
 * @param output_vol Output MRI volume file
 * @param norm_iters Use n 3D normalization iterations (default=2)
 * @param disable_1d Disable 1D normalization
 * @param nonmax_suppress Turn non-maximum suppression on (1) or off (0) when using interior of surfaces
 * @param conform Interpolate and embed volume to be 256^3
 * @param nonconform Do not conform the volume
 * @param gentle Perform kinder gentler normalization
 * @param control_points Use control points file (usually control.dat)
 * @param fonly_control_points Use only control points file
 * @param lonly_labels Use only control points in label file
 * @param labels Use control points in label file
 * @param write_volumes Write control point (c) and bias field (b) volumes
 * @param intensity_above Use control point with intensity above target (default=25.0)
 * @param intensity_below Use control point with intensity below target (default=10.0)
 * @param intensity_gradient Use max intensity/mm gradient (default=1.000)
 * @param prune Turn pruning of control points on/off (default=off)
 * @param no_gentle_cp Do not use gentle normalization with control points file
 * @param mask_file Mask file to use
 * @param atlas_transform Use atlas to exclude control points from being in non-brain regions
 * @param noskull Do not consider skull regions
 * @param monkey Turns off 1D, sets num_3d_iter=1
 * @param nosnr Disable SNR normalization
 * @param sigma_smooth Smooth bias field with given sigma
 * @param aseg_file Aseg file for processing
 * @param debug_v For debugging
 * @param debug_d For debugging
 * @param renorm_vol Load volume and use all points in it that are exactly 110 as control points
 * @param checknorm_vol Load volume and remove all control points that aren't in [min max]
 * @param load_read_cp For reading control points and bias field
 * @param cp_output_vol Output final control points as a volume (only with -aseg)
 * @param surface_transform Normalize based on the skeleton of the interior of the transformed surface
 * @param seed_value Set random number generator to seed N
 * @param print_help Print usage
 *
 * @returns Parameter dictionary
 */
function mri_normalize_params(
    input_vol: InputPathType,
    output_vol: string,
    norm_iters: number | null = null,
    disable_1d: boolean = false,
    nonmax_suppress: number | null = null,
    conform: boolean = false,
    nonconform: boolean = false,
    gentle: boolean = false,
    control_points: InputPathType | null = null,
    fonly_control_points: InputPathType | null = null,
    lonly_labels: InputPathType | null = null,
    labels: InputPathType | null = null,
    write_volumes: string | null = null,
    intensity_above: number | null = null,
    intensity_below: number | null = null,
    intensity_gradient: number | null = null,
    prune: boolean = false,
    no_gentle_cp: boolean = false,
    mask_file: InputPathType | null = null,
    atlas_transform: string | null = null,
    noskull: boolean = false,
    monkey: boolean = false,
    nosnr: boolean = false,
    sigma_smooth: number | null = null,
    aseg_file: InputPathType | null = null,
    debug_v: string | null = null,
    debug_d: string | null = null,
    renorm_vol: InputPathType | null = null,
    checknorm_vol: string | null = null,
    load_read_cp: string | null = null,
    cp_output_vol: InputPathType | null = null,
    surface_transform: string | null = null,
    seed_value: number | null = null,
    print_help: boolean = false,
): MriNormalizeParameters {
    const params = {
        "@type": "freesurfer.mri_normalize" as const,
        "input_vol": input_vol,
        "output_vol": output_vol,
        "disable_1d": disable_1d,
        "conform": conform,
        "nonconform": nonconform,
        "gentle": gentle,
        "prune": prune,
        "no_gentle_cp": no_gentle_cp,
        "noskull": noskull,
        "monkey": monkey,
        "nosnr": nosnr,
        "print_help": print_help,
    };
    if (norm_iters !== null) {
        params["norm_iters"] = norm_iters;
    }
    if (nonmax_suppress !== null) {
        params["nonmax_suppress"] = nonmax_suppress;
    }
    if (control_points !== null) {
        params["control_points"] = control_points;
    }
    if (fonly_control_points !== null) {
        params["fonly_control_points"] = fonly_control_points;
    }
    if (lonly_labels !== null) {
        params["lonly_labels"] = lonly_labels;
    }
    if (labels !== null) {
        params["labels"] = labels;
    }
    if (write_volumes !== null) {
        params["write_volumes"] = write_volumes;
    }
    if (intensity_above !== null) {
        params["intensity_above"] = intensity_above;
    }
    if (intensity_below !== null) {
        params["intensity_below"] = intensity_below;
    }
    if (intensity_gradient !== null) {
        params["intensity_gradient"] = intensity_gradient;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (atlas_transform !== null) {
        params["atlas_transform"] = atlas_transform;
    }
    if (sigma_smooth !== null) {
        params["sigma_smooth"] = sigma_smooth;
    }
    if (aseg_file !== null) {
        params["aseg_file"] = aseg_file;
    }
    if (debug_v !== null) {
        params["debug_v"] = debug_v;
    }
    if (debug_d !== null) {
        params["debug_d"] = debug_d;
    }
    if (renorm_vol !== null) {
        params["renorm_vol"] = renorm_vol;
    }
    if (checknorm_vol !== null) {
        params["checknorm_vol"] = checknorm_vol;
    }
    if (load_read_cp !== null) {
        params["load_read_cp"] = load_read_cp;
    }
    if (cp_output_vol !== null) {
        params["cp_output_vol"] = cp_output_vol;
    }
    if (surface_transform !== null) {
        params["surface_transform"] = surface_transform;
    }
    if (seed_value !== null) {
        params["seed_value"] = seed_value;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_normalize_cargs(
    params: MriNormalizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_normalize");
    cargs.push(execution.inputFile((params["input_vol"] ?? null)));
    cargs.push((params["output_vol"] ?? null));
    if ((params["norm_iters"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["norm_iters"] ?? null))
        );
    }
    if ((params["disable_1d"] ?? null)) {
        cargs.push("-no1d");
    }
    if ((params["nonmax_suppress"] ?? null) !== null) {
        cargs.push(
            "-nonmax_suppress",
            String((params["nonmax_suppress"] ?? null))
        );
    }
    if ((params["conform"] ?? null)) {
        cargs.push("-conform");
    }
    if ((params["nonconform"] ?? null)) {
        cargs.push("-noconform");
    }
    if ((params["gentle"] ?? null)) {
        cargs.push("-gentle");
    }
    if ((params["control_points"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["control_points"] ?? null))
        );
    }
    if ((params["fonly_control_points"] ?? null) !== null) {
        cargs.push(
            "-fonly",
            execution.inputFile((params["fonly_control_points"] ?? null))
        );
    }
    if ((params["lonly_labels"] ?? null) !== null) {
        cargs.push(
            "-lonly",
            execution.inputFile((params["lonly_labels"] ?? null))
        );
    }
    if ((params["labels"] ?? null) !== null) {
        cargs.push(
            "-label",
            execution.inputFile((params["labels"] ?? null))
        );
    }
    if ((params["write_volumes"] ?? null) !== null) {
        cargs.push(
            "-w",
            (params["write_volumes"] ?? null)
        );
    }
    if ((params["intensity_above"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["intensity_above"] ?? null))
        );
    }
    if ((params["intensity_below"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["intensity_below"] ?? null))
        );
    }
    if ((params["intensity_gradient"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["intensity_gradient"] ?? null))
        );
    }
    if ((params["prune"] ?? null)) {
        cargs.push("-prune");
    }
    if ((params["no_gentle_cp"] ?? null)) {
        cargs.push("-no-gentle-cp");
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-MASK",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["atlas_transform"] ?? null) !== null) {
        cargs.push(
            "-atlas",
            (params["atlas_transform"] ?? null)
        );
    }
    if ((params["noskull"] ?? null)) {
        cargs.push("-noskull");
    }
    if ((params["monkey"] ?? null)) {
        cargs.push("-monkey");
    }
    if ((params["nosnr"] ?? null)) {
        cargs.push("-nosnr");
    }
    if ((params["sigma_smooth"] ?? null) !== null) {
        cargs.push(
            "-sigma",
            String((params["sigma_smooth"] ?? null))
        );
    }
    if ((params["aseg_file"] ?? null) !== null) {
        cargs.push(
            "-aseg",
            execution.inputFile((params["aseg_file"] ?? null))
        );
    }
    if ((params["debug_v"] ?? null) !== null) {
        cargs.push(
            "-v",
            (params["debug_v"] ?? null)
        );
    }
    if ((params["debug_d"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["debug_d"] ?? null)
        );
    }
    if ((params["renorm_vol"] ?? null) !== null) {
        cargs.push(
            "-renorm",
            execution.inputFile((params["renorm_vol"] ?? null))
        );
    }
    if ((params["checknorm_vol"] ?? null) !== null) {
        cargs.push(
            "-checknorm",
            (params["checknorm_vol"] ?? null)
        );
    }
    if ((params["load_read_cp"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["load_read_cp"] ?? null)
        );
    }
    if ((params["cp_output_vol"] ?? null) !== null) {
        cargs.push(
            "-c",
            execution.inputFile((params["cp_output_vol"] ?? null))
        );
    }
    if ((params["surface_transform"] ?? null) !== null) {
        cargs.push(
            "-surface",
            (params["surface_transform"] ?? null)
        );
    }
    if ((params["seed_value"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["seed_value"] ?? null))
        );
    }
    if ((params["print_help"] ?? null)) {
        cargs.push("-u");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_normalize_outputs(
    params: MriNormalizeParameters,
    execution: Execution,
): MriNormalizeOutputs {
    const ret: MriNormalizeOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile([(params["output_vol"] ?? null)].join('')),
        controlpoints_output: execution.outputFile(["controlpoints_volume.nii.gz"].join('')),
    };
    return ret;
}


/**
 * mri_normalize
 *
 * Normalize the white-matter, optionally based on control points. The input volume is converted into a new volume where white matter image values all range around 110.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNormalizeOutputs`).
 */
function mri_normalize_execute(
    params: MriNormalizeParameters,
    runner: Runner | null = null,
): MriNormalizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_NORMALIZE_METADATA);
    params = execution.params(params)
    const cargs = mri_normalize_cargs(params, execution)
    const ret = mri_normalize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_normalize
 *
 * Normalize the white-matter, optionally based on control points. The input volume is converted into a new volume where white matter image values all range around 110.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_vol Input MRI volume file
 * @param output_vol Output MRI volume file
 * @param norm_iters Use n 3D normalization iterations (default=2)
 * @param disable_1d Disable 1D normalization
 * @param nonmax_suppress Turn non-maximum suppression on (1) or off (0) when using interior of surfaces
 * @param conform Interpolate and embed volume to be 256^3
 * @param nonconform Do not conform the volume
 * @param gentle Perform kinder gentler normalization
 * @param control_points Use control points file (usually control.dat)
 * @param fonly_control_points Use only control points file
 * @param lonly_labels Use only control points in label file
 * @param labels Use control points in label file
 * @param write_volumes Write control point (c) and bias field (b) volumes
 * @param intensity_above Use control point with intensity above target (default=25.0)
 * @param intensity_below Use control point with intensity below target (default=10.0)
 * @param intensity_gradient Use max intensity/mm gradient (default=1.000)
 * @param prune Turn pruning of control points on/off (default=off)
 * @param no_gentle_cp Do not use gentle normalization with control points file
 * @param mask_file Mask file to use
 * @param atlas_transform Use atlas to exclude control points from being in non-brain regions
 * @param noskull Do not consider skull regions
 * @param monkey Turns off 1D, sets num_3d_iter=1
 * @param nosnr Disable SNR normalization
 * @param sigma_smooth Smooth bias field with given sigma
 * @param aseg_file Aseg file for processing
 * @param debug_v For debugging
 * @param debug_d For debugging
 * @param renorm_vol Load volume and use all points in it that are exactly 110 as control points
 * @param checknorm_vol Load volume and remove all control points that aren't in [min max]
 * @param load_read_cp For reading control points and bias field
 * @param cp_output_vol Output final control points as a volume (only with -aseg)
 * @param surface_transform Normalize based on the skeleton of the interior of the transformed surface
 * @param seed_value Set random number generator to seed N
 * @param print_help Print usage
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNormalizeOutputs`).
 */
function mri_normalize(
    input_vol: InputPathType,
    output_vol: string,
    norm_iters: number | null = null,
    disable_1d: boolean = false,
    nonmax_suppress: number | null = null,
    conform: boolean = false,
    nonconform: boolean = false,
    gentle: boolean = false,
    control_points: InputPathType | null = null,
    fonly_control_points: InputPathType | null = null,
    lonly_labels: InputPathType | null = null,
    labels: InputPathType | null = null,
    write_volumes: string | null = null,
    intensity_above: number | null = null,
    intensity_below: number | null = null,
    intensity_gradient: number | null = null,
    prune: boolean = false,
    no_gentle_cp: boolean = false,
    mask_file: InputPathType | null = null,
    atlas_transform: string | null = null,
    noskull: boolean = false,
    monkey: boolean = false,
    nosnr: boolean = false,
    sigma_smooth: number | null = null,
    aseg_file: InputPathType | null = null,
    debug_v: string | null = null,
    debug_d: string | null = null,
    renorm_vol: InputPathType | null = null,
    checknorm_vol: string | null = null,
    load_read_cp: string | null = null,
    cp_output_vol: InputPathType | null = null,
    surface_transform: string | null = null,
    seed_value: number | null = null,
    print_help: boolean = false,
    runner: Runner | null = null,
): MriNormalizeOutputs {
    const params = mri_normalize_params(input_vol, output_vol, norm_iters, disable_1d, nonmax_suppress, conform, nonconform, gentle, control_points, fonly_control_points, lonly_labels, labels, write_volumes, intensity_above, intensity_below, intensity_gradient, prune, no_gentle_cp, mask_file, atlas_transform, noskull, monkey, nosnr, sigma_smooth, aseg_file, debug_v, debug_d, renorm_vol, checknorm_vol, load_read_cp, cp_output_vol, surface_transform, seed_value, print_help)
    return mri_normalize_execute(params, runner);
}


export {
      MRI_NORMALIZE_METADATA,
      MriNormalizeOutputs,
      MriNormalizeParameters,
      mri_normalize,
      mri_normalize_execute,
      mri_normalize_params,
};
