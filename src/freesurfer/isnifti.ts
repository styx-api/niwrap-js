// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ISNIFTI_METADATA: Metadata = {
    id: "0ec07279947545d1155748f4d9a448ee304204a0.boutiques",
    name: "isnifti",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface IsniftiParameters {
    "__STYXTYPE__": "isnifti";
    "infile": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "isnifti": isnifti_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `isnifti(...)`.
 *
 * @interface
 */
interface IsniftiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function isnifti_params(
    infile: InputPathType,
): IsniftiParameters {
    /**
     * Build parameters.
    
     * @param infile Input file to be checked if it is a NIfTI image
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "isnifti" as const,
        "infile": infile,
    };
    return params;
}


function isnifti_cargs(
    params: IsniftiParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("isnifti");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    return cargs;
}


function isnifti_outputs(
    params: IsniftiParameters,
    execution: Execution,
): IsniftiOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: IsniftiOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function isnifti_execute(
    params: IsniftiParameters,
    execution: Execution,
): IsniftiOutputs {
    /**
     * A simple tool to check if a file is a NIfTI image.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `IsniftiOutputs`).
     */
    params = execution.params(params)
    const cargs = isnifti_cargs(params, execution)
    const ret = isnifti_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function isnifti(
    infile: InputPathType,
    runner: Runner | null = null,
): IsniftiOutputs {
    /**
     * A simple tool to check if a file is a NIfTI image.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param infile Input file to be checked if it is a NIfTI image
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `IsniftiOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ISNIFTI_METADATA);
    const params = isnifti_params(infile)
    return isnifti_execute(params, execution);
}


export {
      ISNIFTI_METADATA,
      IsniftiOutputs,
      IsniftiParameters,
      isnifti,
      isnifti_params,
};
