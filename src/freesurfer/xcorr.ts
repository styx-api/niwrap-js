// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XCORR_METADATA: Metadata = {
    id: "f8b9dd638b9f5e8810aaa75fbf39dd6dbf704d0c.boutiques",
    name: "xcorr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface XcorrParameters {
    "@type": "freesurfer.xcorr";
    "input1": InputPathType;
    "input2": InputPathType;
    "output": string;
    "log_file"?: string | null | undefined;
    "tmp_dir"?: string | null | undefined;
    "no_cleanup": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.xcorr": xcorr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.xcorr": xcorr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `xcorr(...)`.
 *
 * @interface
 */
interface XcorrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output xcorr file
     */
    out_xcorrfile: OutputPathType;
    /**
     * Log of xcorr execution
     */
    log_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input1 First input volume file
 * @param input2 Second input volume file
 * @param output Output xcorr file
 * @param log_file Log file
 * @param tmp_dir Temporary directory
 * @param no_cleanup Prevent cleanup of temporary files
 *
 * @returns Parameter dictionary
 */
function xcorr_params(
    input1: InputPathType,
    input2: InputPathType,
    output: string,
    log_file: string | null = null,
    tmp_dir: string | null = null,
    no_cleanup: boolean = false,
): XcorrParameters {
    const params = {
        "@type": "freesurfer.xcorr" as const,
        "input1": input1,
        "input2": input2,
        "output": output,
        "no_cleanup": no_cleanup,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (tmp_dir !== null) {
        params["tmp_dir"] = tmp_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function xcorr_cargs(
    params: XcorrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("xcorr");
    cargs.push(
        "--i1",
        execution.inputFile((params["input1"] ?? null))
    );
    cargs.push(
        "--i2",
        execution.inputFile((params["input2"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output"] ?? null)
    );
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["tmp_dir"] ?? null) !== null) {
        cargs.push(
            "--tmp",
            (params["tmp_dir"] ?? null)
        );
    }
    if ((params["no_cleanup"] ?? null)) {
        cargs.push("--no-cleanup");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function xcorr_outputs(
    params: XcorrParameters,
    execution: Execution,
): XcorrOutputs {
    const ret: XcorrOutputs = {
        root: execution.outputFile("."),
        out_xcorrfile: execution.outputFile([(params["output"] ?? null)].join('')),
        log_output: ((params["log_file"] ?? null) !== null) ? execution.outputFile([(params["log_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * xcorr
 *
 * Computes the voxel-for-voxel correlation coefficient between two volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XcorrOutputs`).
 */
function xcorr_execute(
    params: XcorrParameters,
    runner: Runner | null = null,
): XcorrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XCORR_METADATA);
    params = execution.params(params)
    const cargs = xcorr_cargs(params, execution)
    const ret = xcorr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * xcorr
 *
 * Computes the voxel-for-voxel correlation coefficient between two volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input1 First input volume file
 * @param input2 Second input volume file
 * @param output Output xcorr file
 * @param log_file Log file
 * @param tmp_dir Temporary directory
 * @param no_cleanup Prevent cleanup of temporary files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XcorrOutputs`).
 */
function xcorr(
    input1: InputPathType,
    input2: InputPathType,
    output: string,
    log_file: string | null = null,
    tmp_dir: string | null = null,
    no_cleanup: boolean = false,
    runner: Runner | null = null,
): XcorrOutputs {
    const params = xcorr_params(input1, input2, output, log_file, tmp_dir, no_cleanup)
    return xcorr_execute(params, runner);
}


export {
      XCORR_METADATA,
      XcorrOutputs,
      XcorrParameters,
      xcorr,
      xcorr_execute,
      xcorr_params,
};
