// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_PARCEL_RESAMPLING_GENERIC_METADATA: Metadata = {
    id: "25d1588a4397ef6ff64836b75e5e3c888ccf227b.boutiques",
    name: "volume-parcel-resampling-generic",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeParcelResamplingGenericParameters {
    "__STYXTYPE__": "volume-parcel-resampling-generic";
    "volume_in": InputPathType;
    "cur_parcels": InputPathType;
    "new_parcels": InputPathType;
    "kernel": number;
    "volume_out": string;
    "opt_fwhm": boolean;
    "opt_fix_zeros": boolean;
    "opt_subvolume_subvol"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-parcel-resampling-generic": volume_parcel_resampling_generic_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-parcel-resampling-generic": volume_parcel_resampling_generic_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_parcel_resampling_generic(...)`.
 *
 * @interface
 */
interface VolumeParcelResamplingGenericOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output volume
     */
    volume_out: OutputPathType;
}


function volume_parcel_resampling_generic_params(
    volume_in: InputPathType,
    cur_parcels: InputPathType,
    new_parcels: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fwhm: boolean = false,
    opt_fix_zeros: boolean = false,
    opt_subvolume_subvol: string | null = null,
): VolumeParcelResamplingGenericParameters {
    /**
     * Build parameters.
    
     * @param volume_in the input data volume
     * @param cur_parcels label volume of where the parcels currently are
     * @param new_parcels label volume of where the parcels should be
     * @param kernel gaussian kernel size in mm to smooth by during resampling, as sigma by default
     * @param volume_out output volume
     * @param opt_fwhm smoothing kernel size is FWHM, not sigma
     * @param opt_fix_zeros treat zero values as not being data
     * @param opt_subvolume_subvol select a single subvolume as input: the subvolume number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-parcel-resampling-generic" as const,
        "volume_in": volume_in,
        "cur_parcels": cur_parcels,
        "new_parcels": new_parcels,
        "kernel": kernel,
        "volume_out": volume_out,
        "opt_fwhm": opt_fwhm,
        "opt_fix_zeros": opt_fix_zeros,
    };
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    return params;
}


function volume_parcel_resampling_generic_cargs(
    params: VolumeParcelResamplingGenericParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-parcel-resampling-generic");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push(execution.inputFile((params["cur_parcels"] ?? null)));
    cargs.push(execution.inputFile((params["new_parcels"] ?? null)));
    cargs.push(String((params["kernel"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_fwhm"] ?? null)) {
        cargs.push("-fwhm");
    }
    if ((params["opt_fix_zeros"] ?? null)) {
        cargs.push("-fix-zeros");
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    return cargs;
}


function volume_parcel_resampling_generic_outputs(
    params: VolumeParcelResamplingGenericParameters,
    execution: Execution,
): VolumeParcelResamplingGenericOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeParcelResamplingGenericOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_parcel_resampling_generic_execute(
    params: VolumeParcelResamplingGenericParameters,
    execution: Execution,
): VolumeParcelResamplingGenericOutputs {
    /**
     * Smooth and resample volume parcels from different volume space.
     * 
     * Smooths and resamples the region inside each label in cur-parcels to the region of the same label name in new-parcels.  Any voxels in the output label region but outside the input label region will be extrapolated from nearby data.  The -fix-zeros option causes the smoothing to not use an input value if it is zero, but still write a smoothed value to the voxel, and after smoothing is complete, it will check for any remaining values of zero, and fill them in with extrapolated values.  The output volume will use the volume space of new-parcels, which does not need to be in the same volume space as the input.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeParcelResamplingGenericOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_parcel_resampling_generic_cargs(params, execution)
    const ret = volume_parcel_resampling_generic_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_parcel_resampling_generic(
    volume_in: InputPathType,
    cur_parcels: InputPathType,
    new_parcels: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fwhm: boolean = false,
    opt_fix_zeros: boolean = false,
    opt_subvolume_subvol: string | null = null,
    runner: Runner | null = null,
): VolumeParcelResamplingGenericOutputs {
    /**
     * Smooth and resample volume parcels from different volume space.
     * 
     * Smooths and resamples the region inside each label in cur-parcels to the region of the same label name in new-parcels.  Any voxels in the output label region but outside the input label region will be extrapolated from nearby data.  The -fix-zeros option causes the smoothing to not use an input value if it is zero, but still write a smoothed value to the voxel, and after smoothing is complete, it will check for any remaining values of zero, and fill them in with extrapolated values.  The output volume will use the volume space of new-parcels, which does not need to be in the same volume space as the input.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume_in the input data volume
     * @param cur_parcels label volume of where the parcels currently are
     * @param new_parcels label volume of where the parcels should be
     * @param kernel gaussian kernel size in mm to smooth by during resampling, as sigma by default
     * @param volume_out output volume
     * @param opt_fwhm smoothing kernel size is FWHM, not sigma
     * @param opt_fix_zeros treat zero values as not being data
     * @param opt_subvolume_subvol select a single subvolume as input: the subvolume number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeParcelResamplingGenericOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_PARCEL_RESAMPLING_GENERIC_METADATA);
    const params = volume_parcel_resampling_generic_params(volume_in, cur_parcels, new_parcels, kernel, volume_out, opt_fwhm, opt_fix_zeros, opt_subvolume_subvol)
    return volume_parcel_resampling_generic_execute(params, execution);
}


export {
      VOLUME_PARCEL_RESAMPLING_GENERIC_METADATA,
      VolumeParcelResamplingGenericOutputs,
      VolumeParcelResamplingGenericParameters,
      volume_parcel_resampling_generic,
      volume_parcel_resampling_generic_params,
};
