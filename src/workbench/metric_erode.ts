// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_ERODE_METADATA: Metadata = {
    id: "a492ce6bed6371b601abe48af82f65a25d3c76e6.boutiques",
    name: "metric-erode",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricErodeParameters {
    "@type": "workbench.metric-erode";
    "metric": InputPathType;
    "surface": InputPathType;
    "distance": number;
    "metric_out": string;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_column_column"?: string | null | undefined;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metric-erode": metric_erode_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.metric-erode": metric_erode_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metric_erode(...)`.
 *
 * @interface
 */
interface MetricErodeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param metric the metric file to erode
 * @param surface the surface to compute on
 * @param distance distance in mm to erode
 * @param metric_out the output metric
 * @param opt_roi_roi_metric assume values outside this roi are nonzero: metric file, positive values denote vertices that have data
 * @param opt_column_column select a single column to erode: the column number or name
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function metric_erode_params(
    metric: InputPathType,
    surface: InputPathType,
    distance: number,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
): MetricErodeParameters {
    const params = {
        "@type": "workbench.metric-erode" as const,
        "metric": metric,
        "surface": surface,
        "distance": distance,
        "metric_out": metric_out,
    };
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_erode_cargs(
    params: MetricErodeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-erode");
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(String((params["distance"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_erode_outputs(
    params: MetricErodeParameters,
    execution: Execution,
): MetricErodeOutputs {
    const ret: MetricErodeOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Erode a metric file.
 *
 * Around each vertex with a value of zero, set surrounding vertices to zero.  The surrounding vertices are all immediate neighbors and all vertices within the specified distance.
 *
 * Note that the -corrected-areas option uses an approximate correction for distance along the surface.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricErodeOutputs`).
 */
function metric_erode_execute(
    params: MetricErodeParameters,
    runner: Runner | null = null,
): MetricErodeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_ERODE_METADATA);
    params = execution.params(params)
    const cargs = metric_erode_cargs(params, execution)
    const ret = metric_erode_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Erode a metric file.
 *
 * Around each vertex with a value of zero, set surrounding vertices to zero.  The surrounding vertices are all immediate neighbors and all vertices within the specified distance.
 *
 * Note that the -corrected-areas option uses an approximate correction for distance along the surface.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param metric the metric file to erode
 * @param surface the surface to compute on
 * @param distance distance in mm to erode
 * @param metric_out the output metric
 * @param opt_roi_roi_metric assume values outside this roi are nonzero: metric file, positive values denote vertices that have data
 * @param opt_column_column select a single column to erode: the column number or name
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricErodeOutputs`).
 */
function metric_erode(
    metric: InputPathType,
    surface: InputPathType,
    distance: number,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    runner: Runner | null = null,
): MetricErodeOutputs {
    const params = metric_erode_params(metric, surface, distance, metric_out, opt_roi_roi_metric, opt_column_column, opt_corrected_areas_area_metric)
    return metric_erode_execute(params, runner);
}


export {
      METRIC_ERODE_METADATA,
      MetricErodeOutputs,
      MetricErodeParameters,
      metric_erode,
      metric_erode_execute,
      metric_erode_params,
};
