// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ISC_METADATA: Metadata = {
    id: "d937806e40a345507430d710b195292450cd9998.boutiques",
    name: "3dISC",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dIscParameters {
    "__STYXTYPE__": "3dISC";
    "outfile_prefix": string;
    "num_jobs"?: number | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "model_structure": string;
    "qvar_centers"?: string | null | undefined;
    "quantitative_vars"?: string | null | undefined;
    "fisher_transform": boolean;
    "io_functions"?: "AFNI" | "R" | null | undefined;
    "data_table": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dISC": v_3d_isc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dISC": v_3d_isc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_isc(...)`.
 *
 * @interface
 */
interface V3dIscOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output ISC file
     */
    isc_output: OutputPathType;
    /**
     * T-statistic of ISC
     */
    tstat_output: OutputPathType;
}


function v_3d_isc_params(
    outfile_prefix: string,
    model_structure: string,
    data_table: string,
    num_jobs: number | null = null,
    mask_file: InputPathType | null = null,
    qvar_centers: string | null = null,
    quantitative_vars: string | null = null,
    fisher_transform: boolean = false,
    io_functions: "AFNI" | "R" | null = null,
): V3dIscParameters {
    /**
     * Build parameters.
    
     * @param outfile_prefix Output file name. For AFNI format, provide prefix only, with no view+suffix needed.
     * @param model_structure Specify the model structure for all the variables. The expression FORMULA with more than one variable has to be surrounded within quotes.
     * @param data_table List the data structure with a header as the first line. Has to occur last in the script.
     * @param num_jobs Specify the number of jobs to run concurrently. Choose 1 for a single-processor computer.
     * @param mask_file Process voxels inside this mask only. Default is no masking.
     * @param qvar_centers Specify centering values for quantitative variables identified under -qVars. Multiple centers are separated by commas without spaces and should be within quotes.
     * @param quantitative_vars Identify quantitative variables (or covariates). The list should be comma-separated and within quotes.
     * @param fisher_transform Perform Fisher transformation on the response variable (input files) if it is a correlation value.
     * @param io_functions Use AFNI's C io functions (default) or R's io functions.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dISC" as const,
        "outfile_prefix": outfile_prefix,
        "model_structure": model_structure,
        "fisher_transform": fisher_transform,
        "data_table": data_table,
    };
    if (num_jobs !== null) {
        params["num_jobs"] = num_jobs;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (qvar_centers !== null) {
        params["qvar_centers"] = qvar_centers;
    }
    if (quantitative_vars !== null) {
        params["quantitative_vars"] = quantitative_vars;
    }
    if (io_functions !== null) {
        params["io_functions"] = io_functions;
    }
    return params;
}


function v_3d_isc_cargs(
    params: V3dIscParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dISC");
    cargs.push(
        "-prefix",
        (params["outfile_prefix"] ?? null)
    );
    if ((params["num_jobs"] ?? null) !== null) {
        cargs.push(
            "-jobs",
            String((params["num_jobs"] ?? null))
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    cargs.push(
        "-model",
        (params["model_structure"] ?? null)
    );
    if ((params["qvar_centers"] ?? null) !== null) {
        cargs.push(
            "-qVarCenters",
            (params["qvar_centers"] ?? null)
        );
    }
    if ((params["quantitative_vars"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["quantitative_vars"] ?? null)
        );
    }
    if ((params["fisher_transform"] ?? null)) {
        cargs.push("-r2z");
    }
    if ((params["io_functions"] ?? null) !== null) {
        cargs.push(
            "-cio",
            (params["io_functions"] ?? null)
        );
    }
    cargs.push(
        "-dataTable",
        (params["data_table"] ?? null)
    );
    return cargs;
}


function v_3d_isc_outputs(
    params: V3dIscParameters,
    execution: Execution,
): V3dIscOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dIscOutputs = {
        root: execution.outputFile("."),
        isc_output: execution.outputFile([(params["outfile_prefix"] ?? null), "_ISC.nii"].join('')),
        tstat_output: execution.outputFile([(params["outfile_prefix"] ?? null), "_tstat.nii"].join('')),
    };
    return ret;
}


function v_3d_isc_execute(
    params: V3dIscParameters,
    execution: Execution,
): V3dIscOutputs {
    /**
     * Program for Voxelwise Inter-Subject Correlation (ISC) Analysis using linear mixed-effects modeling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dIscOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_isc_cargs(params, execution)
    const ret = v_3d_isc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_isc(
    outfile_prefix: string,
    model_structure: string,
    data_table: string,
    num_jobs: number | null = null,
    mask_file: InputPathType | null = null,
    qvar_centers: string | null = null,
    quantitative_vars: string | null = null,
    fisher_transform: boolean = false,
    io_functions: "AFNI" | "R" | null = null,
    runner: Runner | null = null,
): V3dIscOutputs {
    /**
     * Program for Voxelwise Inter-Subject Correlation (ISC) Analysis using linear mixed-effects modeling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param outfile_prefix Output file name. For AFNI format, provide prefix only, with no view+suffix needed.
     * @param model_structure Specify the model structure for all the variables. The expression FORMULA with more than one variable has to be surrounded within quotes.
     * @param data_table List the data structure with a header as the first line. Has to occur last in the script.
     * @param num_jobs Specify the number of jobs to run concurrently. Choose 1 for a single-processor computer.
     * @param mask_file Process voxels inside this mask only. Default is no masking.
     * @param qvar_centers Specify centering values for quantitative variables identified under -qVars. Multiple centers are separated by commas without spaces and should be within quotes.
     * @param quantitative_vars Identify quantitative variables (or covariates). The list should be comma-separated and within quotes.
     * @param fisher_transform Perform Fisher transformation on the response variable (input files) if it is a correlation value.
     * @param io_functions Use AFNI's C io functions (default) or R's io functions.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dIscOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ISC_METADATA);
    const params = v_3d_isc_params(outfile_prefix, model_structure, data_table, num_jobs, mask_file, qvar_centers, quantitative_vars, fisher_transform, io_functions)
    return v_3d_isc_execute(params, execution);
}


export {
      V3dIscOutputs,
      V3dIscParameters,
      V_3D_ISC_METADATA,
      v_3d_isc,
      v_3d_isc_params,
};
