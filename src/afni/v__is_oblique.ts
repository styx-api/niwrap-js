// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__IS_OBLIQUE_METADATA: Metadata = {
    id: "1db61c294d0093711594ad61dae63fc37edee3bb.boutiques",
    name: "@isOblique",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VIsObliqueParameters {
    "@type": "afni.@isOblique";
    "infile": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@isOblique": v__is_oblique_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@isOblique": v__is_oblique_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__is_oblique(...)`.
 *
 * @interface
 */
interface VIsObliqueOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output result indicating if the file is oblique or plumb
     */
    result: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input file (e.g., Hello+orig.HEAD)
 *
 * @returns Parameter dictionary
 */
function v__is_oblique_params(
    infile: InputPathType,
): VIsObliqueParameters {
    const params = {
        "@type": "afni.@isOblique" as const,
        "infile": infile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__is_oblique_cargs(
    params: VIsObliqueParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@isOblique");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__is_oblique_outputs(
    params: VIsObliqueParameters,
    execution: Execution,
): VIsObliqueOutputs {
    const ret: VIsObliqueOutputs = {
        root: execution.outputFile("."),
        result: execution.outputFile(["oblique_check_result.txt"].join('')),
    };
    return ret;
}


/**
 * @isOblique
 *
 * Determine if a file is oblique or plumb.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VIsObliqueOutputs`).
 */
function v__is_oblique_execute(
    params: VIsObliqueParameters,
    runner: Runner | null = null,
): VIsObliqueOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__IS_OBLIQUE_METADATA);
    params = execution.params(params)
    const cargs = v__is_oblique_cargs(params, execution)
    const ret = v__is_oblique_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @isOblique
 *
 * Determine if a file is oblique or plumb.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input file (e.g., Hello+orig.HEAD)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VIsObliqueOutputs`).
 */
function v__is_oblique(
    infile: InputPathType,
    runner: Runner | null = null,
): VIsObliqueOutputs {
    const params = v__is_oblique_params(infile)
    return v__is_oblique_execute(params, runner);
}


export {
      VIsObliqueOutputs,
      VIsObliqueParameters,
      V__IS_OBLIQUE_METADATA,
      v__is_oblique,
      v__is_oblique_execute,
      v__is_oblique_params,
};
