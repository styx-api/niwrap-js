// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIRST_FLIRT_METADATA: Metadata = {
    id: "aa27e1205f40cb09e6b1124ecfd3919bc59a15c1.boutiques",
    name: "first_flirt",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FirstFlirtParameters {
    "@type"?: "fsl/first_flirt";
    "input_image": InputPathType;
    "output_basename": string;
    "already_brain_extracted_flag": boolean;
    "debug_flag": boolean;
    "inweight_flag": boolean;
    "strucweight_mask"?: InputPathType | null | undefined;
    "cort_flag": boolean;
    "cost_function"?: string | null | undefined;
}
type FirstFlirtParametersTagged = Required<Pick<FirstFlirtParameters, '@type'>> & FirstFlirtParameters;


/**
 * Output object returned when calling `FirstFlirtParameters(...)`.
 *
 * @interface
 */
interface FirstFlirtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image registered to standard space
     */
    registered_output_image: OutputPathType;
    /**
     * Log file containing details of the registration process
     */
    log_file: OutputPathType;
    /**
     * Transformation matrix file
     */
    transformation_matrix: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input image (e.g. subject10rawT1.nii.gz)
 * @param output_basename Output basename for the results (e.g. subject10rawT1_to_std_sub)
 * @param already_brain_extracted_flag Input is already brain extracted
 * @param debug_flag Debug mode: don't delete intermediate files
 * @param inweight_flag Use a weighting mask on the first registration
 * @param strucweight_mask Use a specific structure weighting mask (in standard space) for an optional third-stage registration step (e.g. maskimage.nii.gz)
 * @param cort_flag Use a weighting mask of the whole brain on the first registration for specific models
 * @param cost_function Specify the cost function to be used by all FLIRT calls
 *
 * @returns Parameter dictionary
 */
function first_flirt_params(
    input_image: InputPathType,
    output_basename: string,
    already_brain_extracted_flag: boolean = false,
    debug_flag: boolean = false,
    inweight_flag: boolean = false,
    strucweight_mask: InputPathType | null = null,
    cort_flag: boolean = false,
    cost_function: string | null = null,
): FirstFlirtParametersTagged {
    const params = {
        "@type": "fsl/first_flirt" as const,
        "input_image": input_image,
        "output_basename": output_basename,
        "already_brain_extracted_flag": already_brain_extracted_flag,
        "debug_flag": debug_flag,
        "inweight_flag": inweight_flag,
        "cort_flag": cort_flag,
    };
    if (strucweight_mask !== null) {
        params["strucweight_mask"] = strucweight_mask;
    }
    if (cost_function !== null) {
        params["cost_function"] = cost_function;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function first_flirt_cargs(
    params: FirstFlirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("first_flirt");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_basename"] ?? null));
    if ((params["already_brain_extracted_flag"] ?? false)) {
        cargs.push("-b");
    }
    if ((params["debug_flag"] ?? false)) {
        cargs.push("-d");
    }
    if ((params["inweight_flag"] ?? false)) {
        cargs.push("-inweight");
    }
    if ((params["strucweight_mask"] ?? null) !== null) {
        cargs.push(
            "-strucweight",
            execution.inputFile((params["strucweight_mask"] ?? null))
        );
    }
    if ((params["cort_flag"] ?? false)) {
        cargs.push("-cort");
    }
    if ((params["cost_function"] ?? null) !== null) {
        cargs.push(
            "-cost",
            (params["cost_function"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function first_flirt_outputs(
    params: FirstFlirtParameters,
    execution: Execution,
): FirstFlirtOutputs {
    const ret: FirstFlirtOutputs = {
        root: execution.outputFile("."),
        registered_output_image: execution.outputFile([(params["output_basename"] ?? null), "_result.nii.gz"].join('')),
        log_file: execution.outputFile([(params["output_basename"] ?? null), "_log.txt"].join('')),
        transformation_matrix: execution.outputFile([(params["output_basename"] ?? null), "_matrix.mat"].join('')),
    };
    return ret;
}


/**
 * first_flirt
 *
 * FLIRT-based image registration tool with additional options for brain extraction and weighting masks.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FirstFlirtOutputs`).
 */
function first_flirt_execute(
    params: FirstFlirtParameters,
    runner: Runner | null = null,
): FirstFlirtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIRST_FLIRT_METADATA);
    params = execution.params(params)
    const cargs = first_flirt_cargs(params, execution)
    const ret = first_flirt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * first_flirt
 *
 * FLIRT-based image registration tool with additional options for brain extraction and weighting masks.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_image Input image (e.g. subject10rawT1.nii.gz)
 * @param output_basename Output basename for the results (e.g. subject10rawT1_to_std_sub)
 * @param already_brain_extracted_flag Input is already brain extracted
 * @param debug_flag Debug mode: don't delete intermediate files
 * @param inweight_flag Use a weighting mask on the first registration
 * @param strucweight_mask Use a specific structure weighting mask (in standard space) for an optional third-stage registration step (e.g. maskimage.nii.gz)
 * @param cort_flag Use a weighting mask of the whole brain on the first registration for specific models
 * @param cost_function Specify the cost function to be used by all FLIRT calls
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FirstFlirtOutputs`).
 */
function first_flirt(
    input_image: InputPathType,
    output_basename: string,
    already_brain_extracted_flag: boolean = false,
    debug_flag: boolean = false,
    inweight_flag: boolean = false,
    strucweight_mask: InputPathType | null = null,
    cort_flag: boolean = false,
    cost_function: string | null = null,
    runner: Runner | null = null,
): FirstFlirtOutputs {
    const params = first_flirt_params(input_image, output_basename, already_brain_extracted_flag, debug_flag, inweight_flag, strucweight_mask, cort_flag, cost_function)
    return first_flirt_execute(params, runner);
}


export {
      FIRST_FLIRT_METADATA,
      FirstFlirtOutputs,
      first_flirt,
      first_flirt_execute,
      first_flirt_params,
};
