// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIND_VARIANCE_LINES_TCSH_METADATA: Metadata = {
    id: "9fa94416b9a9d640828d9ed8f46da535853bee78.boutiques",
    name: "find_variance_lines.tcsh",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FindVarianceLinesTcshParameters {
    "@type": "afni.find_variance_lines.tcsh";
    "input_files": Array<InputPathType>;
    "mask"?: string | null | undefined;
    "min_cvox"?: number | null | undefined;
    "min_nt"?: number | null | undefined;
    "nerode"?: number | null | undefined;
    "nfirst"?: number | null | undefined;
    "percentile"?: number | null | undefined;
    "polort"?: string | null | undefined;
    "output_dir"?: string | null | undefined;
    "do_clean"?: number | null | undefined;
    "do_img"?: number | null | undefined;
    "echo": boolean;
    "help": boolean;
    "hist": boolean;
    "ver": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.find_variance_lines.tcsh": find_variance_lines_tcsh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.find_variance_lines.tcsh": find_variance_lines_tcsh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `find_variance_lines_tcsh(...)`.
 *
 * @interface
 */
interface FindVarianceLinesTcshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Variance maps per run
     */
    variance_maps: OutputPathType | null;
    /**
     * Scaled variance maps per run
     */
    scaled_variance_maps: OutputPathType | null;
    /**
     * Cluster reports
     */
    cluster_reports: OutputPathType | null;
    /**
     * JPEG images showing locations of high variance
     */
    jpeg_images: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_files Input EPI datasets
 * @param mask Mask for computations (default=AUTO)
 * @param min_cvox Minimum voxels for valid mask column (default=5)
 * @param min_nt Minimum number of time points required (default=10)
 * @param nerode How much to erode input or auto-mask (default=0)
 * @param nfirst Discard the first VAL time points (default=0)
 * @param percentile Percentile of variance values to scale to (default=90)
 * @param polort Polynomial detrending degree (default=A)
 * @param output_dir Name of the output directory (default=vlines.result)
 * @param do_clean Do we clean up a little? (default=1)
 * @param do_img Make vline images? (default=1)
 * @param echo Run script with shell 'echo' set (default=no)
 * @param help Show this help
 * @param hist Show the version history
 * @param ver Show the current version
 *
 * @returns Parameter dictionary
 */
function find_variance_lines_tcsh_params(
    input_files: Array<InputPathType>,
    mask: string | null = null,
    min_cvox: number | null = null,
    min_nt: number | null = null,
    nerode: number | null = null,
    nfirst: number | null = null,
    percentile: number | null = null,
    polort: string | null = null,
    output_dir: string | null = null,
    do_clean: number | null = null,
    do_img: number | null = null,
    echo: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    ver: boolean = false,
): FindVarianceLinesTcshParameters {
    const params = {
        "@type": "afni.find_variance_lines.tcsh" as const,
        "input_files": input_files,
        "echo": echo,
        "help": help,
        "hist": hist,
        "ver": ver,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (min_cvox !== null) {
        params["min_cvox"] = min_cvox;
    }
    if (min_nt !== null) {
        params["min_nt"] = min_nt;
    }
    if (nerode !== null) {
        params["nerode"] = nerode;
    }
    if (nfirst !== null) {
        params["nfirst"] = nfirst;
    }
    if (percentile !== null) {
        params["percentile"] = percentile;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (do_clean !== null) {
        params["do_clean"] = do_clean;
    }
    if (do_img !== null) {
        params["do_img"] = do_img;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function find_variance_lines_tcsh_cargs(
    params: FindVarianceLinesTcshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("find_variance_lines.tcsh");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask"] ?? null)
        );
    }
    if ((params["min_cvox"] ?? null) !== null) {
        cargs.push(
            "-min_cvox",
            String((params["min_cvox"] ?? null))
        );
    }
    if ((params["min_nt"] ?? null) !== null) {
        cargs.push(
            "-min_nt",
            String((params["min_nt"] ?? null))
        );
    }
    if ((params["nerode"] ?? null) !== null) {
        cargs.push(
            "-nerode",
            String((params["nerode"] ?? null))
        );
    }
    if ((params["nfirst"] ?? null) !== null) {
        cargs.push(
            "-nfirst",
            String((params["nfirst"] ?? null))
        );
    }
    if ((params["percentile"] ?? null) !== null) {
        cargs.push(
            "-perc",
            String((params["percentile"] ?? null))
        );
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            (params["polort"] ?? null)
        );
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-rdir",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["do_clean"] ?? null) !== null) {
        cargs.push(
            "-do_clean",
            String((params["do_clean"] ?? null))
        );
    }
    if ((params["do_img"] ?? null) !== null) {
        cargs.push(
            "-do_img",
            String((params["do_img"] ?? null))
        );
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["hist"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["ver"] ?? null)) {
        cargs.push("-ver");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function find_variance_lines_tcsh_outputs(
    params: FindVarianceLinesTcshParameters,
    execution: Execution,
): FindVarianceLinesTcshOutputs {
    const ret: FindVarianceLinesTcshOutputs = {
        root: execution.outputFile("."),
        variance_maps: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/variance_map_run*.nii.gz"].join('')) : null,
        scaled_variance_maps: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/scaled_variance_map_run*.nii.gz"].join('')) : null,
        cluster_reports: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/cluster_report_run*.txt"].join('')) : null,
        jpeg_images: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/*.jpg"].join('')) : null,
    };
    return ret;
}


/**
 * find_variance_lines.tcsh
 *
 * Look for bars of high variance that might suggest scanner interference in EPI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FindVarianceLinesTcshOutputs`).
 */
function find_variance_lines_tcsh_execute(
    params: FindVarianceLinesTcshParameters,
    runner: Runner | null = null,
): FindVarianceLinesTcshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIND_VARIANCE_LINES_TCSH_METADATA);
    params = execution.params(params)
    const cargs = find_variance_lines_tcsh_cargs(params, execution)
    const ret = find_variance_lines_tcsh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * find_variance_lines.tcsh
 *
 * Look for bars of high variance that might suggest scanner interference in EPI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input EPI datasets
 * @param mask Mask for computations (default=AUTO)
 * @param min_cvox Minimum voxels for valid mask column (default=5)
 * @param min_nt Minimum number of time points required (default=10)
 * @param nerode How much to erode input or auto-mask (default=0)
 * @param nfirst Discard the first VAL time points (default=0)
 * @param percentile Percentile of variance values to scale to (default=90)
 * @param polort Polynomial detrending degree (default=A)
 * @param output_dir Name of the output directory (default=vlines.result)
 * @param do_clean Do we clean up a little? (default=1)
 * @param do_img Make vline images? (default=1)
 * @param echo Run script with shell 'echo' set (default=no)
 * @param help Show this help
 * @param hist Show the version history
 * @param ver Show the current version
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FindVarianceLinesTcshOutputs`).
 */
function find_variance_lines_tcsh(
    input_files: Array<InputPathType>,
    mask: string | null = null,
    min_cvox: number | null = null,
    min_nt: number | null = null,
    nerode: number | null = null,
    nfirst: number | null = null,
    percentile: number | null = null,
    polort: string | null = null,
    output_dir: string | null = null,
    do_clean: number | null = null,
    do_img: number | null = null,
    echo: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    ver: boolean = false,
    runner: Runner | null = null,
): FindVarianceLinesTcshOutputs {
    const params = find_variance_lines_tcsh_params(input_files, mask, min_cvox, min_nt, nerode, nfirst, percentile, polort, output_dir, do_clean, do_img, echo, help, hist, ver)
    return find_variance_lines_tcsh_execute(params, runner);
}


export {
      FIND_VARIANCE_LINES_TCSH_METADATA,
      FindVarianceLinesTcshOutputs,
      FindVarianceLinesTcshParameters,
      find_variance_lines_tcsh,
      find_variance_lines_tcsh_execute,
      find_variance_lines_tcsh_params,
};
