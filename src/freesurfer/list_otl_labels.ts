// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LIST_OTL_LABELS_METADATA: Metadata = {
    id: "859a8dfc62a45a6e9d9a78823fda063b71532ae7.boutiques",
    name: "list_otl_labels",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ListOtlLabelsParameters {
    "@type": "freesurfer.list_otl_labels";
    "input_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.list_otl_labels": list_otl_labels_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `list_otl_labels(...)`.
 *
 * @interface
 */
interface ListOtlLabelsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input volume filename
 *
 * @returns Parameter dictionary
 */
function list_otl_labels_params(
    input_file: InputPathType,
): ListOtlLabelsParameters {
    const params = {
        "@type": "freesurfer.list_otl_labels" as const,
        "input_file": input_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function list_otl_labels_cargs(
    params: ListOtlLabelsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("list_otl_labels");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function list_otl_labels_outputs(
    params: ListOtlLabelsParameters,
    execution: Execution,
): ListOtlLabelsOutputs {
    const ret: ListOtlLabelsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * list_otl_labels
 *
 * Tool for listing labels in an imaging file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ListOtlLabelsOutputs`).
 */
function list_otl_labels_execute(
    params: ListOtlLabelsParameters,
    runner: Runner | null = null,
): ListOtlLabelsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LIST_OTL_LABELS_METADATA);
    params = execution.params(params)
    const cargs = list_otl_labels_cargs(params, execution)
    const ret = list_otl_labels_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * list_otl_labels
 *
 * Tool for listing labels in an imaging file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input volume filename
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ListOtlLabelsOutputs`).
 */
function list_otl_labels(
    input_file: InputPathType,
    runner: Runner | null = null,
): ListOtlLabelsOutputs {
    const params = list_otl_labels_params(input_file)
    return list_otl_labels_execute(params, runner);
}


export {
      LIST_OTL_LABELS_METADATA,
      ListOtlLabelsOutputs,
      ListOtlLabelsParameters,
      list_otl_labels,
      list_otl_labels_execute,
      list_otl_labels_params,
};
