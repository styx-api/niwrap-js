// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_FLAG_MOTION_METADATA: Metadata = {
    id: "3cccb4c8c9ef53bdcbc8db52f5600d6320db213e.boutiques",
    name: "1dFlagMotion",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dFlagMotionParameters {
    "__STYXTYPE__": "1dFlagMotion";
    "input_motion_file": InputPathType;
    "max_translation"?: number | null | undefined;
    "max_rotation"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dFlagMotion": v_1d_flag_motion_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dFlagMotion": v_1d_flag_motion_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1d_flag_motion(...)`.
 *
 * @interface
 */
interface V1dFlagMotionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * List of points exceeding the motion bounds in 1D format
     */
    output_points: OutputPathType;
}


function v_1d_flag_motion_params(
    input_motion_file: InputPathType,
    max_translation: number | null = null,
    max_rotation: number | null = null,
): V1dFlagMotionParameters {
    /**
     * Build parameters.
    
     * @param input_motion_file Input file with EXACTLY 6 columns: roll pitch yaw delta-SI delta-LR delta-AP (angles in degrees followed by translations in mm)
     * @param max_translation Maximum translation allowed in any direction (defaults to 1.5mm)
     * @param max_rotation Maximum rotation allowed in any direction (defaults to 1.25 degrees)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dFlagMotion" as const,
        "input_motion_file": input_motion_file,
    };
    if (max_translation !== null) {
        params["max_translation"] = max_translation;
    }
    if (max_rotation !== null) {
        params["max_rotation"] = max_rotation;
    }
    return params;
}


function v_1d_flag_motion_cargs(
    params: V1dFlagMotionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dFlagMotion");
    cargs.push(execution.inputFile((params["input_motion_file"] ?? null)));
    if ((params["max_translation"] ?? null) !== null) {
        cargs.push(
            "-MaxTrans",
            String((params["max_translation"] ?? null))
        );
    }
    if ((params["max_rotation"] ?? null) !== null) {
        cargs.push(
            "-MaxRot",
            String((params["max_rotation"] ?? null))
        );
    }
    return cargs;
}


function v_1d_flag_motion_outputs(
    params: V1dFlagMotionParameters,
    execution: Execution,
): V1dFlagMotionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dFlagMotionOutputs = {
        root: execution.outputFile("."),
        output_points: execution.outputFile(["output_motion_points.1D"].join('')),
    };
    return ret;
}


function v_1d_flag_motion_execute(
    params: V1dFlagMotionParameters,
    execution: Execution,
): V1dFlagMotionOutputs {
    /**
     * Produces a list of time points with excessive motion relative to the previous time point.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dFlagMotionOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1d_flag_motion_cargs(params, execution)
    const ret = v_1d_flag_motion_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1d_flag_motion(
    input_motion_file: InputPathType,
    max_translation: number | null = null,
    max_rotation: number | null = null,
    runner: Runner | null = null,
): V1dFlagMotionOutputs {
    /**
     * Produces a list of time points with excessive motion relative to the previous time point.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_motion_file Input file with EXACTLY 6 columns: roll pitch yaw delta-SI delta-LR delta-AP (angles in degrees followed by translations in mm)
     * @param max_translation Maximum translation allowed in any direction (defaults to 1.5mm)
     * @param max_rotation Maximum rotation allowed in any direction (defaults to 1.25 degrees)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dFlagMotionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_FLAG_MOTION_METADATA);
    const params = v_1d_flag_motion_params(input_motion_file, max_translation, max_rotation)
    return v_1d_flag_motion_execute(params, execution);
}


export {
      V1dFlagMotionOutputs,
      V1dFlagMotionParameters,
      V_1D_FLAG_MOTION_METADATA,
      v_1d_flag_motion,
      v_1d_flag_motion_params,
};
