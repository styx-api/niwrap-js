// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SAMSEGMESH2SURF_METADATA: Metadata = {
    id: "d3e9c8289d2b6f776a0193c487cb8308e01486dc.boutiques",
    name: "samsegmesh2surf",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Samsegmesh2surfParameters {
    "@type": "freesurfer.samsegmesh2surf";
    "atlas_mesh": InputPathType;
    "template"?: InputPathType | null | undefined;
    "lta_transform"?: InputPathType | null | undefined;
    "output_surface"?: string | null | undefined;
    "output_priors"?: string | null | undefined;
    "invert_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.samsegmesh2surf": samsegmesh2surf_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.samsegmesh2surf": samsegmesh2surf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `samsegmesh2surf(...)`.
 *
 * @interface
 */
interface Samsegmesh2surfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * FreeSurfer surface file generated from SAMSEG atlas mesh
     */
    output_surface_file: OutputPathType | null;
    /**
     * Priors MRI volume at each vertex
     */
    output_priors_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param atlas_mesh Input SAMSEG atlas mesh collection file
 * @param template Input atlas template volume
 * @param lta_transform Input LTA transform to be applied to surface
 * @param output_surface Output FreeSurfer surface file
 * @param output_priors Output priors as MRI volume
 * @param invert_flag Invert LTA transform
 *
 * @returns Parameter dictionary
 */
function samsegmesh2surf_params(
    atlas_mesh: InputPathType,
    template: InputPathType | null = null,
    lta_transform: InputPathType | null = null,
    output_surface: string | null = null,
    output_priors: string | null = null,
    invert_flag: boolean = false,
): Samsegmesh2surfParameters {
    const params = {
        "@type": "freesurfer.samsegmesh2surf" as const,
        "atlas_mesh": atlas_mesh,
        "invert_flag": invert_flag,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (lta_transform !== null) {
        params["lta_transform"] = lta_transform;
    }
    if (output_surface !== null) {
        params["output_surface"] = output_surface;
    }
    if (output_priors !== null) {
        params["output_priors"] = output_priors;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function samsegmesh2surf_cargs(
    params: Samsegmesh2surfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("samsegmesh2surf");
    cargs.push(
        "--atlasmesh",
        execution.inputFile((params["atlas_mesh"] ?? null))
    );
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "--template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["lta_transform"] ?? null) !== null) {
        cargs.push(
            "--lta",
            execution.inputFile((params["lta_transform"] ?? null))
        );
    }
    if ((params["output_surface"] ?? null) !== null) {
        cargs.push(
            "--osurf",
            (params["output_surface"] ?? null)
        );
    }
    if ((params["output_priors"] ?? null) !== null) {
        cargs.push(
            "--opriors",
            (params["output_priors"] ?? null)
        );
    }
    if ((params["invert_flag"] ?? null)) {
        cargs.push("--invert");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function samsegmesh2surf_outputs(
    params: Samsegmesh2surfParameters,
    execution: Execution,
): Samsegmesh2surfOutputs {
    const ret: Samsegmesh2surfOutputs = {
        root: execution.outputFile("."),
        output_surface_file: ((params["output_surface"] ?? null) !== null) ? execution.outputFile([(params["output_surface"] ?? null)].join('')) : null,
        output_priors_file: ((params["output_priors"] ?? null) !== null) ? execution.outputFile([(params["output_priors"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * samsegmesh2surf
 *
 * Generate Freesurfer surface from a SAMSEG atlas mesh file and generate priors at each vertex as overlay MRI volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Samsegmesh2surfOutputs`).
 */
function samsegmesh2surf_execute(
    params: Samsegmesh2surfParameters,
    runner: Runner | null = null,
): Samsegmesh2surfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SAMSEGMESH2SURF_METADATA);
    params = execution.params(params)
    const cargs = samsegmesh2surf_cargs(params, execution)
    const ret = samsegmesh2surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * samsegmesh2surf
 *
 * Generate Freesurfer surface from a SAMSEG atlas mesh file and generate priors at each vertex as overlay MRI volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param atlas_mesh Input SAMSEG atlas mesh collection file
 * @param template Input atlas template volume
 * @param lta_transform Input LTA transform to be applied to surface
 * @param output_surface Output FreeSurfer surface file
 * @param output_priors Output priors as MRI volume
 * @param invert_flag Invert LTA transform
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Samsegmesh2surfOutputs`).
 */
function samsegmesh2surf(
    atlas_mesh: InputPathType,
    template: InputPathType | null = null,
    lta_transform: InputPathType | null = null,
    output_surface: string | null = null,
    output_priors: string | null = null,
    invert_flag: boolean = false,
    runner: Runner | null = null,
): Samsegmesh2surfOutputs {
    const params = samsegmesh2surf_params(atlas_mesh, template, lta_transform, output_surface, output_priors, invert_flag)
    return samsegmesh2surf_execute(params, runner);
}


export {
      SAMSEGMESH2SURF_METADATA,
      Samsegmesh2surfOutputs,
      Samsegmesh2surfParameters,
      samsegmesh2surf,
      samsegmesh2surf_execute,
      samsegmesh2surf_params,
};
