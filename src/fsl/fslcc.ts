// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLCC_METADATA: Metadata = {
    id: "cfb1bd3500e1b7d85d8f4ea2cecbe94864d3f628.boutiques",
    name: "fslcc",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslccParameters {
    "@type": "fsl.fslcc";
    "first_input": InputPathType;
    "second_input": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "noabs_flag": boolean;
    "nodemean_flag": boolean;
    "threshold"?: number | null | undefined;
    "decimal_places"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslcc": fslcc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslcc(...)`.
 *
 * @interface
 */
interface FslccOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param first_input First input time-series
 * @param second_input Second input time-series
 * @param mask Mask file name
 * @param noabs_flag Don't return absolute values (keep sign)
 * @param nodemean_flag Don't demean the input files
 * @param threshold Threshold (default 0.1)
 * @param decimal_places Number of decimal places to display in output (default 2)
 *
 * @returns Parameter dictionary
 */
function fslcc_params(
    first_input: InputPathType,
    second_input: InputPathType,
    mask: InputPathType | null = null,
    noabs_flag: boolean = false,
    nodemean_flag: boolean = false,
    threshold: number | null = 0.1,
    decimal_places: number | null = 2,
): FslccParameters {
    const params = {
        "@type": "fsl.fslcc" as const,
        "first_input": first_input,
        "second_input": second_input,
        "noabs_flag": noabs_flag,
        "nodemean_flag": nodemean_flag,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (decimal_places !== null) {
        params["decimal_places"] = decimal_places;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslcc_cargs(
    params: FslccParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslcc");
    cargs.push(execution.inputFile((params["first_input"] ?? null)));
    cargs.push(execution.inputFile((params["second_input"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["noabs_flag"] ?? null)) {
        cargs.push("--noabs");
    }
    if ((params["nodemean_flag"] ?? null)) {
        cargs.push("--nodemean");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["decimal_places"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["decimal_places"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslcc_outputs(
    params: FslccParameters,
    execution: Execution,
): FslccOutputs {
    const ret: FslccOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Cross-correlate two time-series, timepoint by timepoint.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FslccOutputs`).
 */
function fslcc_execute(
    params: FslccParameters,
    execution: Execution,
): FslccOutputs {
    params = execution.params(params)
    const cargs = fslcc_cargs(params, execution)
    const ret = fslcc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Cross-correlate two time-series, timepoint by timepoint.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param first_input First input time-series
 * @param second_input Second input time-series
 * @param mask Mask file name
 * @param noabs_flag Don't return absolute values (keep sign)
 * @param nodemean_flag Don't demean the input files
 * @param threshold Threshold (default 0.1)
 * @param decimal_places Number of decimal places to display in output (default 2)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslccOutputs`).
 */
function fslcc(
    first_input: InputPathType,
    second_input: InputPathType,
    mask: InputPathType | null = null,
    noabs_flag: boolean = false,
    nodemean_flag: boolean = false,
    threshold: number | null = 0.1,
    decimal_places: number | null = 2,
    runner: Runner | null = null,
): FslccOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLCC_METADATA);
    const params = fslcc_params(first_input, second_input, mask, noabs_flag, nodemean_flag, threshold, decimal_places)
    return fslcc_execute(params, execution);
}


export {
      FSLCC_METADATA,
      FslccOutputs,
      FslccParameters,
      fslcc,
      fslcc_cargs,
      fslcc_execute,
      fslcc_outputs,
      fslcc_params,
};
