// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LRFLIP_METADATA: Metadata = {
    id: "958d124c668f02051ee45f4c019b87646e6b14ab.boutiques",
    name: "3dLRflip",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLrflipParameters {
    "@type": "afni.3dLRflip";
    "flip_lr": boolean;
    "flip_ap": boolean;
    "flip_is": boolean;
    "flip_x": boolean;
    "flip_y": boolean;
    "flip_z": boolean;
    "output_prefix"?: string | null | undefined;
    "datasets": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dLRflip": v_3d_lrflip_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_lrflip(...)`.
 *
 * @interface
 */
interface V3dLrflipOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param datasets Datasets to flip
 * @param flip_lr Flip about Left-Right axis
 * @param flip_ap Flip about Anterior-Posterior axis
 * @param flip_is Flip about Inferior-Superior axis
 * @param flip_x Flip about the 1st direction
 * @param flip_y Flip about the 2nd direction
 * @param flip_z Flip about the 3rd direction
 * @param output_prefix Prefix to use for output. If multiple datasets are input, the program will choose a prefix for each output.
 *
 * @returns Parameter dictionary
 */
function v_3d_lrflip_params(
    datasets: Array<InputPathType>,
    flip_lr: boolean = false,
    flip_ap: boolean = false,
    flip_is: boolean = false,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    output_prefix: string | null = null,
): V3dLrflipParameters {
    const params = {
        "@type": "afni.3dLRflip" as const,
        "flip_lr": flip_lr,
        "flip_ap": flip_ap,
        "flip_is": flip_is,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
        "datasets": datasets,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_lrflip_cargs(
    params: V3dLrflipParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dLRflip");
    if ((params["flip_lr"] ?? null)) {
        cargs.push("-LR");
    }
    if ((params["flip_ap"] ?? null)) {
        cargs.push("-AP");
    }
    if ((params["flip_is"] ?? null)) {
        cargs.push("-IS");
    }
    if ((params["flip_x"] ?? null)) {
        cargs.push("-X");
    }
    if ((params["flip_y"] ?? null)) {
        cargs.push("-Y");
    }
    if ((params["flip_z"] ?? null)) {
        cargs.push("-Z");
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_lrflip_outputs(
    params: V3dLrflipParameters,
    execution: Execution,
): V3dLrflipOutputs {
    const ret: V3dLrflipOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 3dLRflip
 *
 * Flips the rows of a dataset along one of the three axes to correct dataset direction labeling errors.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLrflipOutputs`).
 */
function v_3d_lrflip_execute(
    params: V3dLrflipParameters,
    runner: Runner | null = null,
): V3dLrflipOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LRFLIP_METADATA);
    params = execution.params(params)
    const cargs = v_3d_lrflip_cargs(params, execution)
    const ret = v_3d_lrflip_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dLRflip
 *
 * Flips the rows of a dataset along one of the three axes to correct dataset direction labeling errors.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param datasets Datasets to flip
 * @param flip_lr Flip about Left-Right axis
 * @param flip_ap Flip about Anterior-Posterior axis
 * @param flip_is Flip about Inferior-Superior axis
 * @param flip_x Flip about the 1st direction
 * @param flip_y Flip about the 2nd direction
 * @param flip_z Flip about the 3rd direction
 * @param output_prefix Prefix to use for output. If multiple datasets are input, the program will choose a prefix for each output.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLrflipOutputs`).
 */
function v_3d_lrflip(
    datasets: Array<InputPathType>,
    flip_lr: boolean = false,
    flip_ap: boolean = false,
    flip_is: boolean = false,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): V3dLrflipOutputs {
    const params = v_3d_lrflip_params(datasets, flip_lr, flip_ap, flip_is, flip_x, flip_y, flip_z, output_prefix)
    return v_3d_lrflip_execute(params, runner);
}


export {
      V3dLrflipOutputs,
      V3dLrflipParameters,
      V_3D_LRFLIP_METADATA,
      v_3d_lrflip,
      v_3d_lrflip_execute,
      v_3d_lrflip_params,
};
