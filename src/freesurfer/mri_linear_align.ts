// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LINEAR_ALIGN_METADATA: Metadata = {
    id: "c2787a45600aa69474da7d62372760a22ffd70d0.boutiques",
    name: "mri_linear_align",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLinearAlignParameters {
    "@type"?: "freesurfer/mri_linear_align";
    "source": InputPathType;
    "target": InputPathType;
    "output_xform": string;
}
type MriLinearAlignParametersTagged = Required<Pick<MriLinearAlignParameters, '@type'>> & MriLinearAlignParameters;


/**
 * Output object returned when calling `MriLinearAlignParameters(...)`.
 *
 * @interface
 */
interface MriLinearAlignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source Source image file for alignment
 * @param target Target image file for alignment
 * @param output_xform Output transformation file
 *
 * @returns Parameter dictionary
 */
function mri_linear_align_params(
    source: InputPathType,
    target: InputPathType,
    output_xform: string,
): MriLinearAlignParametersTagged {
    const params = {
        "@type": "freesurfer/mri_linear_align" as const,
        "source": source,
        "target": target,
        "output_xform": output_xform,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_linear_align_cargs(
    params: MriLinearAlignParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_linear_align");
    cargs.push(execution.inputFile((params["source"] ?? null)));
    cargs.push(execution.inputFile((params["target"] ?? null)));
    cargs.push((params["output_xform"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_linear_align_outputs(
    params: MriLinearAlignParameters,
    execution: Execution,
): MriLinearAlignOutputs {
    const ret: MriLinearAlignOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_linear_align
 *
 * MRI Linear Alignment Tool for Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLinearAlignOutputs`).
 */
function mri_linear_align_execute(
    params: MriLinearAlignParameters,
    runner: Runner | null = null,
): MriLinearAlignOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LINEAR_ALIGN_METADATA);
    params = execution.params(params)
    const cargs = mri_linear_align_cargs(params, execution)
    const ret = mri_linear_align_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_linear_align
 *
 * MRI Linear Alignment Tool for Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source Source image file for alignment
 * @param target Target image file for alignment
 * @param output_xform Output transformation file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLinearAlignOutputs`).
 */
function mri_linear_align(
    source: InputPathType,
    target: InputPathType,
    output_xform: string,
    runner: Runner | null = null,
): MriLinearAlignOutputs {
    const params = mri_linear_align_params(source, target, output_xform)
    return mri_linear_align_execute(params, runner);
}


export {
      MRI_LINEAR_ALIGN_METADATA,
      MriLinearAlignOutputs,
      mri_linear_align,
      mri_linear_align_execute,
      mri_linear_align_params,
};
