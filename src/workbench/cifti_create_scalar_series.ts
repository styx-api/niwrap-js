// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CREATE_SCALAR_SERIES_METADATA: Metadata = {
    id: "baeec4f19b77cff9ac7b9fbc51ea7e84c97983f3.boutiques",
    name: "cifti-create-scalar-series",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiCreateScalarSeriesSeriesParameters {
    "__STYXTYPE__": "series";
    "unit": string;
    "start": number;
    "step": number;
}


interface CiftiCreateScalarSeriesParameters {
    "__STYXTYPE__": "cifti-create-scalar-series";
    "input": string;
    "cifti_out": string;
    "opt_transpose": boolean;
    "opt_name_file_file"?: string | null | undefined;
    "series"?: CiftiCreateScalarSeriesSeriesParameters | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cifti-create-scalar-series": cifti_create_scalar_series_cargs,
        "series": cifti_create_scalar_series_series_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "cifti-create-scalar-series": cifti_create_scalar_series_outputs,
    };
    return outputsFuncs[t];
}


function cifti_create_scalar_series_series_params(
    unit: string,
    start: number,
    step: number,
): CiftiCreateScalarSeriesSeriesParameters {
    /**
     * Build parameters.
    
     * @param unit the unit to use
     * @param start the value at the first series point
     * @param step the interval between series points
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "series" as const,
        "unit": unit,
        "start": start,
        "step": step,
    };
    return params;
}


function cifti_create_scalar_series_series_cargs(
    params: CiftiCreateScalarSeriesSeriesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-series");
    cargs.push((params["unit"] ?? null));
    cargs.push(String((params["start"] ?? null)));
    cargs.push(String((params["step"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `cifti_create_scalar_series(...)`.
 *
 * @interface
 */
interface CiftiCreateScalarSeriesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti file
     */
    cifti_out: OutputPathType;
}


function cifti_create_scalar_series_params(
    input: string,
    cifti_out: string,
    opt_transpose: boolean = false,
    opt_name_file_file: string | null = null,
    series: CiftiCreateScalarSeriesSeriesParameters | null = null,
): CiftiCreateScalarSeriesParameters {
    /**
     * Build parameters.
    
     * @param input input file
     * @param cifti_out output cifti file
     * @param opt_transpose use if the rows of the text file are along the scalar dimension
     * @param opt_name_file_file use a text file to set names on scalar dimension: text file containing names, one per line
     * @param series set the units and values of the series
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti-create-scalar-series" as const,
        "input": input,
        "cifti_out": cifti_out,
        "opt_transpose": opt_transpose,
    };
    if (opt_name_file_file !== null) {
        params["opt_name_file_file"] = opt_name_file_file;
    }
    if (series !== null) {
        params["series"] = series;
    }
    return params;
}


function cifti_create_scalar_series_cargs(
    params: CiftiCreateScalarSeriesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-create-scalar-series");
    cargs.push((params["input"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_transpose"] ?? null)) {
        cargs.push("-transpose");
    }
    if ((params["opt_name_file_file"] ?? null) !== null) {
        cargs.push(
            "-name-file",
            (params["opt_name_file_file"] ?? null)
        );
    }
    if ((params["series"] ?? null) !== null) {
        cargs.push(...dynCargs((params["series"] ?? null).__STYXTYPE__)((params["series"] ?? null), execution));
    }
    return cargs;
}


function cifti_create_scalar_series_outputs(
    params: CiftiCreateScalarSeriesParameters,
    execution: Execution,
): CiftiCreateScalarSeriesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CiftiCreateScalarSeriesOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


function cifti_create_scalar_series_execute(
    params: CiftiCreateScalarSeriesParameters,
    execution: Execution,
): CiftiCreateScalarSeriesOutputs {
    /**
     * Import series data into cifti.
     * 
     * Convert a text file containing series of equal length into a cifti file.  The text file should have lines made up of numbers separated by whitespace, with no extra newlines between lines.
     * 
     * The <unit> argument must be one of the following:
     * 
     * SECOND
     * HERTZ
     * METER
     * RADIAN.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CiftiCreateScalarSeriesOutputs`).
     */
    params = execution.params(params)
    const cargs = cifti_create_scalar_series_cargs(params, execution)
    const ret = cifti_create_scalar_series_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cifti_create_scalar_series(
    input: string,
    cifti_out: string,
    opt_transpose: boolean = false,
    opt_name_file_file: string | null = null,
    series: CiftiCreateScalarSeriesSeriesParameters | null = null,
    runner: Runner | null = null,
): CiftiCreateScalarSeriesOutputs {
    /**
     * Import series data into cifti.
     * 
     * Convert a text file containing series of equal length into a cifti file.  The text file should have lines made up of numbers separated by whitespace, with no extra newlines between lines.
     * 
     * The <unit> argument must be one of the following:
     * 
     * SECOND
     * HERTZ
     * METER
     * RADIAN.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param input input file
     * @param cifti_out output cifti file
     * @param opt_transpose use if the rows of the text file are along the scalar dimension
     * @param opt_name_file_file use a text file to set names on scalar dimension: text file containing names, one per line
     * @param series set the units and values of the series
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CiftiCreateScalarSeriesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CREATE_SCALAR_SERIES_METADATA);
    const params = cifti_create_scalar_series_params(input, cifti_out, opt_transpose, opt_name_file_file, series)
    return cifti_create_scalar_series_execute(params, execution);
}


export {
      CIFTI_CREATE_SCALAR_SERIES_METADATA,
      CiftiCreateScalarSeriesOutputs,
      CiftiCreateScalarSeriesParameters,
      CiftiCreateScalarSeriesSeriesParameters,
      cifti_create_scalar_series,
      cifti_create_scalar_series_params,
      cifti_create_scalar_series_series_params,
};
