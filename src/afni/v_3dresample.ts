// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DRESAMPLE_METADATA: Metadata = {
    id: "c0aa0fa9560446a135dad492fcfd16c35e59d09a.boutiques",
    name: "3dresample",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dresampleParameters {
    "@type": "afni.3dresample";
    "in_file": InputPathType;
    "master"?: InputPathType | null | undefined;
    "orientation"?: "AIL" | "AIR" | "ASL" | "ASR" | "PIL" | "PIR" | "PSL" | "PSR" | "ALI" | "ALS" | "ARI" | "ARS" | "PLI" | "PLS" | "PRI" | "PRS" | "IAL" | "IAR" | "IPL" | "IPR" | "SAL" | "SAR" | "SPL" | "SPR" | "ILA" | "ILP" | "IRA" | "IRP" | "SLA" | "SLP" | "SRA" | "SRP" | "LAI" | "LAS" | "LPI" | "LPS" | "RAI" | "RAS" | "RPI" | "RPS" | "LIA" | "LIP" | "LSA" | "LSP" | "RIA" | "RIP" | "RSA" | "RSP" | null | undefined;
    "prefix": string;
    "outputtype"?: "NIFTI" | "AFNI" | "NIFTI_GZ" | null | undefined;
    "resample_mode"?: "NN" | "Li" | "Cu" | "Bk" | null | undefined;
    "voxel_size"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dresample": v_3dresample_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dresample": v_3dresample_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dresample(...)`.
 *
 * @interface
 */
interface V3dresampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file name.
     */
    out_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_file Input file to 3dresample.
 * @param prefix required prefix for output dataset
 * @param master Align dataset grid to a reference file.
 * @param orientation New orientation code.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 * @param resample_mode 'nn' or 'li' or 'cu' or 'bk'. Resampling method from set {"nn", "li", "cu", "bk"}. these are for "nearest neighbor", "linear", "cubic" and "blocky"interpolation, respectively. default is nn.
 * @param voxel_size (a float, a float, a float). Resample to new dx, dy and dz.
 *
 * @returns Parameter dictionary
 */
function v_3dresample_params(
    in_file: InputPathType,
    prefix: string,
    master: InputPathType | null = null,
    orientation: "AIL" | "AIR" | "ASL" | "ASR" | "PIL" | "PIR" | "PSL" | "PSR" | "ALI" | "ALS" | "ARI" | "ARS" | "PLI" | "PLS" | "PRI" | "PRS" | "IAL" | "IAR" | "IPL" | "IPR" | "SAL" | "SAR" | "SPL" | "SPR" | "ILA" | "ILP" | "IRA" | "IRP" | "SLA" | "SLP" | "SRA" | "SRP" | "LAI" | "LAS" | "LPI" | "LPS" | "RAI" | "RAS" | "RPI" | "RPS" | "LIA" | "LIP" | "LSA" | "LSP" | "RIA" | "RIP" | "RSA" | "RSP" | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    resample_mode: "NN" | "Li" | "Cu" | "Bk" | null = null,
    voxel_size: Array<number> | null = null,
): V3dresampleParameters {
    const params = {
        "@type": "afni.3dresample" as const,
        "in_file": in_file,
        "prefix": prefix,
    };
    if (master !== null) {
        params["master"] = master;
    }
    if (orientation !== null) {
        params["orientation"] = orientation;
    }
    if (outputtype !== null) {
        params["outputtype"] = outputtype;
    }
    if (resample_mode !== null) {
        params["resample_mode"] = resample_mode;
    }
    if (voxel_size !== null) {
        params["voxel_size"] = voxel_size;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dresample_cargs(
    params: V3dresampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dresample");
    cargs.push(
        "-inset",
        execution.inputFile((params["in_file"] ?? null))
    );
    if ((params["master"] ?? null) !== null) {
        cargs.push(
            "-master",
            execution.inputFile((params["master"] ?? null))
        );
    }
    if ((params["orientation"] ?? null) !== null) {
        cargs.push(
            "-orient",
            (params["orientation"] ?? null)
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["outputtype"] ?? null) !== null) {
        cargs.push((params["outputtype"] ?? null));
    }
    if ((params["resample_mode"] ?? null) !== null) {
        cargs.push(
            "-rmode",
            (params["resample_mode"] ?? null)
        );
    }
    if ((params["voxel_size"] ?? null) !== null) {
        cargs.push(
            "-dxyz",
            ...(params["voxel_size"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dresample_outputs(
    params: V3dresampleParameters,
    execution: Execution,
): V3dresampleOutputs {
    const ret: V3dresampleOutputs = {
        root: execution.outputFile("."),
        out_file: execution.outputFile([(params["prefix"] ?? null)].join('')),
    };
    return ret;
}


/**
 * 3dresample
 *
 * Resample or reorient an image using AFNI 3dresample command.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dresampleOutputs`).
 */
function v_3dresample_execute(
    params: V3dresampleParameters,
    runner: Runner | null = null,
): V3dresampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DRESAMPLE_METADATA);
    params = execution.params(params)
    const cargs = v_3dresample_cargs(params, execution)
    const ret = v_3dresample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dresample
 *
 * Resample or reorient an image using AFNI 3dresample command.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_file Input file to 3dresample.
 * @param prefix required prefix for output dataset
 * @param master Align dataset grid to a reference file.
 * @param orientation New orientation code.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 * @param resample_mode 'nn' or 'li' or 'cu' or 'bk'. Resampling method from set {"nn", "li", "cu", "bk"}. these are for "nearest neighbor", "linear", "cubic" and "blocky"interpolation, respectively. default is nn.
 * @param voxel_size (a float, a float, a float). Resample to new dx, dy and dz.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dresampleOutputs`).
 */
function v_3dresample(
    in_file: InputPathType,
    prefix: string,
    master: InputPathType | null = null,
    orientation: "AIL" | "AIR" | "ASL" | "ASR" | "PIL" | "PIR" | "PSL" | "PSR" | "ALI" | "ALS" | "ARI" | "ARS" | "PLI" | "PLS" | "PRI" | "PRS" | "IAL" | "IAR" | "IPL" | "IPR" | "SAL" | "SAR" | "SPL" | "SPR" | "ILA" | "ILP" | "IRA" | "IRP" | "SLA" | "SLP" | "SRA" | "SRP" | "LAI" | "LAS" | "LPI" | "LPS" | "RAI" | "RAS" | "RPI" | "RPS" | "LIA" | "LIP" | "LSA" | "LSP" | "RIA" | "RIP" | "RSA" | "RSP" | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    resample_mode: "NN" | "Li" | "Cu" | "Bk" | null = null,
    voxel_size: Array<number> | null = null,
    runner: Runner | null = null,
): V3dresampleOutputs {
    const params = v_3dresample_params(in_file, prefix, master, orientation, outputtype, resample_mode, voxel_size)
    return v_3dresample_execute(params, runner);
}


export {
      V3dresampleOutputs,
      V3dresampleParameters,
      V_3DRESAMPLE_METADATA,
      v_3dresample,
      v_3dresample_execute,
      v_3dresample_params,
};
