// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_BSET_METADATA: Metadata = {
    id: "9a9d1299f82ba59a9a11b741685458eb6f480882.boutiques",
    name: "dmri_bset",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriBsetParameters {
    "__STYXTYPE__": "dmri_bset";
    "input_dwi": InputPathType;
    "output_dwi": string;
    "b_values"?: Array<number> | null | undefined;
    "btol"?: number | null | undefined;
    "bsort": boolean;
    "bmax"?: number | null | undefined;
    "input_b_table"?: InputPathType | null | undefined;
    "input_g_table"?: InputPathType | null | undefined;
    "output_b_table"?: string | null | undefined;
    "output_g_table"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dmri_bset": dmri_bset_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "dmri_bset": dmri_bset_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_bset(...)`.
 *
 * @interface
 */
interface DmriBsetOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output DWI series
     */
    output_dwi_file: OutputPathType;
    /**
     * Output b-value table
     */
    output_b_table_file: OutputPathType | null;
    /**
     * Output gradient table
     */
    output_g_table_file: OutputPathType | null;
}


function dmri_bset_params(
    input_dwi: InputPathType,
    output_dwi: string,
    b_values: Array<number> | null = null,
    btol: number | null = 0.05,
    bsort: boolean = false,
    bmax: number | null = null,
    input_b_table: InputPathType | null = null,
    input_g_table: InputPathType | null = null,
    output_b_table: string | null = null,
    output_g_table: string | null = null,
): DmriBsetParameters {
    /**
     * Build parameters.
    
     * @param input_dwi Input DWI series
     * @param output_dwi Output DWI series
     * @param b_values Extract one or more b-values
     * @param btol Tolerance around each single b-value (default: 0.05)
     * @param bsort Reorder output data by b-shell (default: maintain original order)
     * @param bmax Extract all b-values less than or equal to a maximum
     * @param input_b_table Input b-value table (default: input DWI base, .bvals extension)
     * @param input_g_table Input gradient table (default: input DWI base, .bvecs extension)
     * @param output_b_table Output b-value table (default: output DWI base, .bvals extension)
     * @param output_g_table Output gradient table (default: output DWI base, .bvecs extension)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dmri_bset" as const,
        "input_dwi": input_dwi,
        "output_dwi": output_dwi,
        "bsort": bsort,
    };
    if (b_values !== null) {
        params["b_values"] = b_values;
    }
    if (btol !== null) {
        params["btol"] = btol;
    }
    if (bmax !== null) {
        params["bmax"] = bmax;
    }
    if (input_b_table !== null) {
        params["input_b_table"] = input_b_table;
    }
    if (input_g_table !== null) {
        params["input_g_table"] = input_g_table;
    }
    if (output_b_table !== null) {
        params["output_b_table"] = output_b_table;
    }
    if (output_g_table !== null) {
        params["output_g_table"] = output_g_table;
    }
    return params;
}


function dmri_bset_cargs(
    params: DmriBsetParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dmri_bset");
    cargs.push(execution.inputFile((params["input_dwi"] ?? null)));
    cargs.push((params["output_dwi"] ?? null));
    if ((params["b_values"] ?? null) !== null) {
        cargs.push(
            "--b",
            ...(params["b_values"] ?? null).map(String)
        );
    }
    if ((params["btol"] ?? null) !== null) {
        cargs.push(
            "--btol",
            String((params["btol"] ?? null))
        );
    }
    if ((params["bsort"] ?? null)) {
        cargs.push("--bsort");
    }
    if ((params["bmax"] ?? null) !== null) {
        cargs.push(
            "--bmax",
            String((params["bmax"] ?? null))
        );
    }
    if ((params["input_b_table"] ?? null) !== null) {
        cargs.push(
            "--inb",
            execution.inputFile((params["input_b_table"] ?? null))
        );
    }
    if ((params["input_g_table"] ?? null) !== null) {
        cargs.push(
            "--ing",
            execution.inputFile((params["input_g_table"] ?? null))
        );
    }
    if ((params["output_b_table"] ?? null) !== null) {
        cargs.push(
            "--outb",
            (params["output_b_table"] ?? null)
        );
    }
    if ((params["output_g_table"] ?? null) !== null) {
        cargs.push(
            "--outg",
            (params["output_g_table"] ?? null)
        );
    }
    return cargs;
}


function dmri_bset_outputs(
    params: DmriBsetParameters,
    execution: Execution,
): DmriBsetOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DmriBsetOutputs = {
        root: execution.outputFile("."),
        output_dwi_file: execution.outputFile([(params["output_dwi"] ?? null)].join('')),
        output_b_table_file: ((params["output_b_table"] ?? null) !== null) ? execution.outputFile([(params["output_b_table"] ?? null)].join('')) : null,
        output_g_table_file: ((params["output_g_table"] ?? null) !== null) ? execution.outputFile([(params["output_g_table"] ?? null)].join('')) : null,
    };
    return ret;
}


function dmri_bset_execute(
    params: DmriBsetParameters,
    execution: Execution,
): DmriBsetOutputs {
    /**
     * This tool extracts a subset of volumes, b-values, and gradient directions from a diffusion MRI data set.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DmriBsetOutputs`).
     */
    params = execution.params(params)
    const cargs = dmri_bset_cargs(params, execution)
    const ret = dmri_bset_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dmri_bset(
    input_dwi: InputPathType,
    output_dwi: string,
    b_values: Array<number> | null = null,
    btol: number | null = 0.05,
    bsort: boolean = false,
    bmax: number | null = null,
    input_b_table: InputPathType | null = null,
    input_g_table: InputPathType | null = null,
    output_b_table: string | null = null,
    output_g_table: string | null = null,
    runner: Runner | null = null,
): DmriBsetOutputs {
    /**
     * This tool extracts a subset of volumes, b-values, and gradient directions from a diffusion MRI data set.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_dwi Input DWI series
     * @param output_dwi Output DWI series
     * @param b_values Extract one or more b-values
     * @param btol Tolerance around each single b-value (default: 0.05)
     * @param bsort Reorder output data by b-shell (default: maintain original order)
     * @param bmax Extract all b-values less than or equal to a maximum
     * @param input_b_table Input b-value table (default: input DWI base, .bvals extension)
     * @param input_g_table Input gradient table (default: input DWI base, .bvecs extension)
     * @param output_b_table Output b-value table (default: output DWI base, .bvals extension)
     * @param output_g_table Output gradient table (default: output DWI base, .bvecs extension)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DmriBsetOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_BSET_METADATA);
    const params = dmri_bset_params(input_dwi, output_dwi, b_values, btol, bsort, bmax, input_b_table, input_g_table, output_b_table, output_g_table)
    return dmri_bset_execute(params, execution);
}


export {
      DMRI_BSET_METADATA,
      DmriBsetOutputs,
      DmriBsetParameters,
      dmri_bset,
      dmri_bset_params,
};
