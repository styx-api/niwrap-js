// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__RETINO_PROC_METADATA: Metadata = {
    id: "bd77350246b7022b7742239292c89e845e034c79.boutiques",
    name: "@RetinoProc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VRetinoProcParameters {
    "@type": "afni.@RetinoProc";
    "ccw"?: Array<InputPathType> | null | undefined;
    "clw"?: Array<InputPathType> | null | undefined;
    "exp"?: Array<InputPathType> | null | undefined;
    "con"?: Array<InputPathType> | null | undefined;
    "epi_ref"?: InputPathType | null | undefined;
    "epi_anat_ref"?: InputPathType | null | undefined;
    "anat_vol"?: InputPathType | null | undefined;
    "anat_vol_epi"?: InputPathType | null | undefined;
    "surf_vol"?: InputPathType | null | undefined;
    "surf_vol_epi"?: InputPathType | null | undefined;
    "phase": boolean;
    "delay": boolean;
    "tr": number;
    "period_ecc": number;
    "period_pol": number;
    "pre_ecc"?: number | null | undefined;
    "pre_pol"?: number | null | undefined;
    "on_ecc"?: string | null | undefined;
    "on_pol"?: string | null | undefined;
    "var_on_ecc"?: string | null | undefined;
    "var_on_pol"?: string | null | undefined;
    "nwedges"?: number | null | undefined;
    "nrings"?: number | null | undefined;
    "fwhm_pol"?: number | null | undefined;
    "fwhm_ecc"?: number | null | undefined;
    "ignore"?: number | null | undefined;
    "no_tshift": boolean;
    "spec_left"?: InputPathType | null | undefined;
    "spec_right"?: InputPathType | null | undefined;
    "dorts"?: InputPathType | null | undefined;
    "ccw_orts"?: Array<InputPathType> | null | undefined;
    "clw_orts"?: Array<InputPathType> | null | undefined;
    "exp_orts"?: Array<InputPathType> | null | undefined;
    "con_orts"?: Array<InputPathType> | null | undefined;
    "sid"?: string | null | undefined;
    "out_dir"?: string | null | undefined;
    "echo": boolean;
    "echo_edu": boolean;
    "a2e_opts"?: string | null | undefined;
    "aea_opts"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@RetinoProc": v__retino_proc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__retino_proc(...)`.
 *
 * @interface
 */
interface VRetinoProcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param tr TR, in seconds, of retinotopic scans
 * @param period_ecc Period, in seconds, of eccentricity stimuli
 * @param period_pol Period, in seconds, of polar angle stimuli
 * @param ccw Input time series dataset for counterclockwise stimulus
 * @param clw Input time series dataset for clockwise stimulus
 * @param exp Input time series dataset for expanding stimulus
 * @param con Input time series dataset for contracting stimulus
 * @param epi_ref Specify a volume from the EPI time series to which all EPI volumes are aligned
 * @param epi_anat_ref Specify a volume from the EPI time series that is better suited for aligning the T1 to it than EpiRef might be
 * @param anat_vol T1 volume acquired during the same session as the retinotopic scans
 * @param anat_vol_epi Anatomical volume aligned to EPI reference
 * @param surf_vol Surface Volume for the cortical surfaces
 * @param surf_vol_epi Surface volume aligned to experiment's EPI data
 * @param phase Use phase of fundamental frequency to estimate latency
 * @param delay Use delay relative to reference time series to estimate latency
 * @param pre_ecc Duration, in seconds, before eccentricity stimulus
 * @param pre_pol Duration, in seconds, before polar angle stimulus
 * @param on_ecc Number of stimulation blocks and duration of stimulation for eccentricity stimulus
 * @param on_pol Number of stimulation blocks and duration of stimulation for polar angle stimulus
 * @param var_on_ecc Multiple on durations for eccentricity stimulus
 * @param var_on_pol Multiple on durations for polar angle stimulus
 * @param nwedges Number of wedges in polar stimulus
 * @param nrings Number of rings in eccentricity stimulus
 * @param fwhm_pol Target smoothness for polar stimulus
 * @param fwhm_ecc Target smoothness for eccentricity stimulus
 * @param ignore Ignore volumes from the beginning of each time series
 * @param no_tshift Do not correct for slice timing
 * @param spec_left Spec file for left hemisphere
 * @param spec_right Spec file for right hemisphere
 * @param dorts Detrend time series using columns in ORT1D file
 * @param ccw_orts Detrend time series for counterclockwise stimulus
 * @param clw_orts Detrend time series for clockwise stimulus
 * @param exp_orts Detrend time series for expanding stimulus
 * @param con_orts Detrend time series for contracting stimulus
 * @param sid SID is a flag identifying the subject
 * @param out_dir Directory where processing results are to be stored
 * @param echo Turn on the command echoing to help with debugging script failure
 * @param echo_edu Turn on command echoing for certain programs only
 * @param a2e_opts Pass options to @SUMA_AlignToExperiment script
 * @param aea_opts Pass options to align_epi_anat.py
 *
 * @returns Parameter dictionary
 */
function v__retino_proc_params(
    tr: number,
    period_ecc: number,
    period_pol: number,
    ccw: Array<InputPathType> | null = null,
    clw: Array<InputPathType> | null = null,
    exp: Array<InputPathType> | null = null,
    con: Array<InputPathType> | null = null,
    epi_ref: InputPathType | null = null,
    epi_anat_ref: InputPathType | null = null,
    anat_vol: InputPathType | null = null,
    anat_vol_epi: InputPathType | null = null,
    surf_vol: InputPathType | null = null,
    surf_vol_epi: InputPathType | null = null,
    phase: boolean = false,
    delay: boolean = false,
    pre_ecc: number | null = null,
    pre_pol: number | null = null,
    on_ecc: string | null = null,
    on_pol: string | null = null,
    var_on_ecc: string | null = null,
    var_on_pol: string | null = null,
    nwedges: number | null = null,
    nrings: number | null = null,
    fwhm_pol: number | null = null,
    fwhm_ecc: number | null = null,
    ignore: number | null = null,
    no_tshift: boolean = false,
    spec_left: InputPathType | null = null,
    spec_right: InputPathType | null = null,
    dorts: InputPathType | null = null,
    ccw_orts: Array<InputPathType> | null = null,
    clw_orts: Array<InputPathType> | null = null,
    exp_orts: Array<InputPathType> | null = null,
    con_orts: Array<InputPathType> | null = null,
    sid: string | null = null,
    out_dir: string | null = null,
    echo: boolean = false,
    echo_edu: boolean = false,
    a2e_opts: string | null = null,
    aea_opts: string | null = null,
): VRetinoProcParameters {
    const params = {
        "@type": "afni.@RetinoProc" as const,
        "phase": phase,
        "delay": delay,
        "tr": tr,
        "period_ecc": period_ecc,
        "period_pol": period_pol,
        "no_tshift": no_tshift,
        "echo": echo,
        "echo_edu": echo_edu,
    };
    if (ccw !== null) {
        params["ccw"] = ccw;
    }
    if (clw !== null) {
        params["clw"] = clw;
    }
    if (exp !== null) {
        params["exp"] = exp;
    }
    if (con !== null) {
        params["con"] = con;
    }
    if (epi_ref !== null) {
        params["epi_ref"] = epi_ref;
    }
    if (epi_anat_ref !== null) {
        params["epi_anat_ref"] = epi_anat_ref;
    }
    if (anat_vol !== null) {
        params["anat_vol"] = anat_vol;
    }
    if (anat_vol_epi !== null) {
        params["anat_vol_epi"] = anat_vol_epi;
    }
    if (surf_vol !== null) {
        params["surf_vol"] = surf_vol;
    }
    if (surf_vol_epi !== null) {
        params["surf_vol_epi"] = surf_vol_epi;
    }
    if (pre_ecc !== null) {
        params["pre_ecc"] = pre_ecc;
    }
    if (pre_pol !== null) {
        params["pre_pol"] = pre_pol;
    }
    if (on_ecc !== null) {
        params["on_ecc"] = on_ecc;
    }
    if (on_pol !== null) {
        params["on_pol"] = on_pol;
    }
    if (var_on_ecc !== null) {
        params["var_on_ecc"] = var_on_ecc;
    }
    if (var_on_pol !== null) {
        params["var_on_pol"] = var_on_pol;
    }
    if (nwedges !== null) {
        params["nwedges"] = nwedges;
    }
    if (nrings !== null) {
        params["nrings"] = nrings;
    }
    if (fwhm_pol !== null) {
        params["fwhm_pol"] = fwhm_pol;
    }
    if (fwhm_ecc !== null) {
        params["fwhm_ecc"] = fwhm_ecc;
    }
    if (ignore !== null) {
        params["ignore"] = ignore;
    }
    if (spec_left !== null) {
        params["spec_left"] = spec_left;
    }
    if (spec_right !== null) {
        params["spec_right"] = spec_right;
    }
    if (dorts !== null) {
        params["dorts"] = dorts;
    }
    if (ccw_orts !== null) {
        params["ccw_orts"] = ccw_orts;
    }
    if (clw_orts !== null) {
        params["clw_orts"] = clw_orts;
    }
    if (exp_orts !== null) {
        params["exp_orts"] = exp_orts;
    }
    if (con_orts !== null) {
        params["con_orts"] = con_orts;
    }
    if (sid !== null) {
        params["sid"] = sid;
    }
    if (out_dir !== null) {
        params["out_dir"] = out_dir;
    }
    if (a2e_opts !== null) {
        params["a2e_opts"] = a2e_opts;
    }
    if (aea_opts !== null) {
        params["aea_opts"] = aea_opts;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__retino_proc_cargs(
    params: VRetinoProcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@RetinoProc");
    if ((params["ccw"] ?? null) !== null) {
        cargs.push(
            "-ccw",
            ...(params["ccw"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["clw"] ?? null) !== null) {
        cargs.push(
            "-clw",
            ...(params["clw"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["exp"] ?? null) !== null) {
        cargs.push(
            "-exp",
            ...(params["exp"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["con"] ?? null) !== null) {
        cargs.push(
            "-con",
            ...(params["con"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["epi_ref"] ?? null) !== null) {
        cargs.push(
            "-epi_ref",
            execution.inputFile((params["epi_ref"] ?? null))
        );
    }
    if ((params["epi_anat_ref"] ?? null) !== null) {
        cargs.push(
            "-epi_anat_ref",
            execution.inputFile((params["epi_anat_ref"] ?? null))
        );
    }
    if ((params["anat_vol"] ?? null) !== null) {
        cargs.push(
            "-anat_vol",
            execution.inputFile((params["anat_vol"] ?? null))
        );
    }
    if ((params["anat_vol_epi"] ?? null) !== null) {
        cargs.push(
            "-anat_vol@epi",
            execution.inputFile((params["anat_vol_epi"] ?? null))
        );
    }
    if ((params["surf_vol"] ?? null) !== null) {
        cargs.push(
            "-surf_vol",
            execution.inputFile((params["surf_vol"] ?? null))
        );
    }
    if ((params["surf_vol_epi"] ?? null) !== null) {
        cargs.push(
            "-surf_vol@epi",
            execution.inputFile((params["surf_vol_epi"] ?? null))
        );
    }
    if ((params["phase"] ?? null)) {
        cargs.push("-phase");
    }
    if ((params["delay"] ?? null)) {
        cargs.push("-delay");
    }
    cargs.push(
        "-TR",
        String((params["tr"] ?? null))
    );
    cargs.push(
        "-period_ecc",
        String((params["period_ecc"] ?? null))
    );
    cargs.push(
        "-period_pol",
        String((params["period_pol"] ?? null))
    );
    if ((params["pre_ecc"] ?? null) !== null) {
        cargs.push(
            "-pre_ecc",
            String((params["pre_ecc"] ?? null))
        );
    }
    if ((params["pre_pol"] ?? null) !== null) {
        cargs.push(
            "-pre_pol",
            String((params["pre_pol"] ?? null))
        );
    }
    if ((params["on_ecc"] ?? null) !== null) {
        cargs.push(
            "-on_ecc",
            (params["on_ecc"] ?? null)
        );
    }
    if ((params["on_pol"] ?? null) !== null) {
        cargs.push(
            "-on_pol",
            (params["on_pol"] ?? null)
        );
    }
    if ((params["var_on_ecc"] ?? null) !== null) {
        cargs.push(
            "-var_on_ecc",
            (params["var_on_ecc"] ?? null)
        );
    }
    if ((params["var_on_pol"] ?? null) !== null) {
        cargs.push(
            "-var_on_pol",
            (params["var_on_pol"] ?? null)
        );
    }
    if ((params["nwedges"] ?? null) !== null) {
        cargs.push(
            "-nwedges",
            String((params["nwedges"] ?? null))
        );
    }
    if ((params["nrings"] ?? null) !== null) {
        cargs.push(
            "-nrings",
            String((params["nrings"] ?? null))
        );
    }
    if ((params["fwhm_pol"] ?? null) !== null) {
        cargs.push(
            "-fwhm_pol",
            String((params["fwhm_pol"] ?? null))
        );
    }
    if ((params["fwhm_ecc"] ?? null) !== null) {
        cargs.push(
            "-fwhm_ecc",
            String((params["fwhm_ecc"] ?? null))
        );
    }
    if ((params["ignore"] ?? null) !== null) {
        cargs.push(
            "-ignore",
            String((params["ignore"] ?? null))
        );
    }
    if ((params["no_tshift"] ?? null)) {
        cargs.push("-no_tshift");
    }
    if ((params["spec_left"] ?? null) !== null) {
        cargs.push(
            "-spec_left",
            execution.inputFile((params["spec_left"] ?? null))
        );
    }
    if ((params["spec_right"] ?? null) !== null) {
        cargs.push(
            "-spec_right",
            execution.inputFile((params["spec_right"] ?? null))
        );
    }
    if ((params["dorts"] ?? null) !== null) {
        cargs.push(
            "-dorts",
            execution.inputFile((params["dorts"] ?? null))
        );
    }
    if ((params["ccw_orts"] ?? null) !== null) {
        cargs.push(
            "-ccw_orts",
            ...(params["ccw_orts"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["clw_orts"] ?? null) !== null) {
        cargs.push(
            "-clw_orts",
            ...(params["clw_orts"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["exp_orts"] ?? null) !== null) {
        cargs.push(
            "-exp_orts",
            ...(params["exp_orts"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["con_orts"] ?? null) !== null) {
        cargs.push(
            "-con_orts",
            ...(params["con_orts"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["sid"] ?? null) !== null) {
        cargs.push(
            "-sid",
            (params["sid"] ?? null)
        );
    }
    if ((params["out_dir"] ?? null) !== null) {
        cargs.push(
            "-out_dir",
            (params["out_dir"] ?? null)
        );
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    if ((params["echo_edu"] ?? null)) {
        cargs.push("-echo_edu");
    }
    if ((params["a2e_opts"] ?? null) !== null) {
        cargs.push(
            "-A2E_opts",
            (params["a2e_opts"] ?? null)
        );
    }
    if ((params["aea_opts"] ?? null) !== null) {
        cargs.push(
            "-AEA_opts",
            (params["aea_opts"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__retino_proc_outputs(
    params: VRetinoProcParameters,
    execution: Execution,
): VRetinoProcOutputs {
    const ret: VRetinoProcOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * @RetinoProc
 *
 * A script to process retinotopic FMRI data, using AFNI's 3dRetinoPhase and SurfRetinMap.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRetinoProcOutputs`).
 */
function v__retino_proc_execute(
    params: VRetinoProcParameters,
    runner: Runner | null = null,
): VRetinoProcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__RETINO_PROC_METADATA);
    params = execution.params(params)
    const cargs = v__retino_proc_cargs(params, execution)
    const ret = v__retino_proc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @RetinoProc
 *
 * A script to process retinotopic FMRI data, using AFNI's 3dRetinoPhase and SurfRetinMap.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param tr TR, in seconds, of retinotopic scans
 * @param period_ecc Period, in seconds, of eccentricity stimuli
 * @param period_pol Period, in seconds, of polar angle stimuli
 * @param ccw Input time series dataset for counterclockwise stimulus
 * @param clw Input time series dataset for clockwise stimulus
 * @param exp Input time series dataset for expanding stimulus
 * @param con Input time series dataset for contracting stimulus
 * @param epi_ref Specify a volume from the EPI time series to which all EPI volumes are aligned
 * @param epi_anat_ref Specify a volume from the EPI time series that is better suited for aligning the T1 to it than EpiRef might be
 * @param anat_vol T1 volume acquired during the same session as the retinotopic scans
 * @param anat_vol_epi Anatomical volume aligned to EPI reference
 * @param surf_vol Surface Volume for the cortical surfaces
 * @param surf_vol_epi Surface volume aligned to experiment's EPI data
 * @param phase Use phase of fundamental frequency to estimate latency
 * @param delay Use delay relative to reference time series to estimate latency
 * @param pre_ecc Duration, in seconds, before eccentricity stimulus
 * @param pre_pol Duration, in seconds, before polar angle stimulus
 * @param on_ecc Number of stimulation blocks and duration of stimulation for eccentricity stimulus
 * @param on_pol Number of stimulation blocks and duration of stimulation for polar angle stimulus
 * @param var_on_ecc Multiple on durations for eccentricity stimulus
 * @param var_on_pol Multiple on durations for polar angle stimulus
 * @param nwedges Number of wedges in polar stimulus
 * @param nrings Number of rings in eccentricity stimulus
 * @param fwhm_pol Target smoothness for polar stimulus
 * @param fwhm_ecc Target smoothness for eccentricity stimulus
 * @param ignore Ignore volumes from the beginning of each time series
 * @param no_tshift Do not correct for slice timing
 * @param spec_left Spec file for left hemisphere
 * @param spec_right Spec file for right hemisphere
 * @param dorts Detrend time series using columns in ORT1D file
 * @param ccw_orts Detrend time series for counterclockwise stimulus
 * @param clw_orts Detrend time series for clockwise stimulus
 * @param exp_orts Detrend time series for expanding stimulus
 * @param con_orts Detrend time series for contracting stimulus
 * @param sid SID is a flag identifying the subject
 * @param out_dir Directory where processing results are to be stored
 * @param echo Turn on the command echoing to help with debugging script failure
 * @param echo_edu Turn on command echoing for certain programs only
 * @param a2e_opts Pass options to @SUMA_AlignToExperiment script
 * @param aea_opts Pass options to align_epi_anat.py
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRetinoProcOutputs`).
 */
function v__retino_proc(
    tr: number,
    period_ecc: number,
    period_pol: number,
    ccw: Array<InputPathType> | null = null,
    clw: Array<InputPathType> | null = null,
    exp: Array<InputPathType> | null = null,
    con: Array<InputPathType> | null = null,
    epi_ref: InputPathType | null = null,
    epi_anat_ref: InputPathType | null = null,
    anat_vol: InputPathType | null = null,
    anat_vol_epi: InputPathType | null = null,
    surf_vol: InputPathType | null = null,
    surf_vol_epi: InputPathType | null = null,
    phase: boolean = false,
    delay: boolean = false,
    pre_ecc: number | null = null,
    pre_pol: number | null = null,
    on_ecc: string | null = null,
    on_pol: string | null = null,
    var_on_ecc: string | null = null,
    var_on_pol: string | null = null,
    nwedges: number | null = null,
    nrings: number | null = null,
    fwhm_pol: number | null = null,
    fwhm_ecc: number | null = null,
    ignore: number | null = null,
    no_tshift: boolean = false,
    spec_left: InputPathType | null = null,
    spec_right: InputPathType | null = null,
    dorts: InputPathType | null = null,
    ccw_orts: Array<InputPathType> | null = null,
    clw_orts: Array<InputPathType> | null = null,
    exp_orts: Array<InputPathType> | null = null,
    con_orts: Array<InputPathType> | null = null,
    sid: string | null = null,
    out_dir: string | null = null,
    echo: boolean = false,
    echo_edu: boolean = false,
    a2e_opts: string | null = null,
    aea_opts: string | null = null,
    runner: Runner | null = null,
): VRetinoProcOutputs {
    const params = v__retino_proc_params(tr, period_ecc, period_pol, ccw, clw, exp, con, epi_ref, epi_anat_ref, anat_vol, anat_vol_epi, surf_vol, surf_vol_epi, phase, delay, pre_ecc, pre_pol, on_ecc, on_pol, var_on_ecc, var_on_pol, nwedges, nrings, fwhm_pol, fwhm_ecc, ignore, no_tshift, spec_left, spec_right, dorts, ccw_orts, clw_orts, exp_orts, con_orts, sid, out_dir, echo, echo_edu, a2e_opts, aea_opts)
    return v__retino_proc_execute(params, runner);
}


export {
      VRetinoProcOutputs,
      VRetinoProcParameters,
      V__RETINO_PROC_METADATA,
      v__retino_proc,
      v__retino_proc_execute,
      v__retino_proc_params,
};
