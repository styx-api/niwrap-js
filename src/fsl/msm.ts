// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MSM_METADATA: Metadata = {
    id: "06b10ed321d54cdf239e6e9d06cf30d7594d3a49.boutiques",
    name: "msm",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MsmParameters {
    "@type": "fsl.msm";
    "inmesh": InputPathType;
    "out": string;
    "refmesh"?: InputPathType | null | undefined;
    "indata"?: InputPathType | null | undefined;
    "refdata"?: InputPathType | null | undefined;
    "trans"?: InputPathType | null | undefined;
    "in_register"?: InputPathType | null | undefined;
    "inweight"?: InputPathType | null | undefined;
    "refweight"?: InputPathType | null | undefined;
    "format"?: string | null | undefined;
    "conf"?: InputPathType | null | undefined;
    "levels"?: number | null | undefined;
    "smoothout"?: number | null | undefined;
    "help": boolean;
    "verbose": boolean;
    "printoptions": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.msm": msm_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.msm": msm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `msm(...)`.
 *
 * @interface
 */
interface MsmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file from MSM
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param inmesh Input mesh (available formats: VTK, ASCII, GIFTI). Needs to be a sphere
 * @param out Output basename
 * @param refmesh Reference mesh (available formats: VTK, ASCII, GIFTI). Needs to be a sphere. If not included algorithm assumes reference mesh is equivalent input
 * @param indata Scalar or multivariate data for input - can be ASCII (.asc,.dpv,.txt) or GIFTI (.func.gii or .shape.gii)
 * @param refdata Scalar or multivariate data for reference - can be ASCII (.asc,.dpv,.txt) or GIFTI (.func.gii or .shape.gii)
 * @param trans Transformed source mesh (output of a previous registration). Use this to initialise the current registration.
 * @param in_register Input mesh at data resolution. Used to resample data onto input mesh if data is supplied at a different resolution. Note this mesh HAS to be in alignment with either the input_mesh of (if supplied) the transformed source mesh. Use with supreme caution.
 * @param inweight Cost function weighting for input - weights data in these vertices when calculating similarity (ASCII or GIFTI). Can be multivariate provided dimension equals that of data
 * @param refweight Cost function weighting for reference - weights data in these vertices when calculating similarity (ASCII or GIFTI). Can be multivariate provided dimension equals that of data
 * @param format Format of output files, can be: GIFTI, VTK, ASCII or ASCII_MAT (for full details of output file formats see MSM wiki)
 * @param conf Configuration file
 * @param levels Number of resolution levels (default = number of resolution levels specified by --opt in config file)
 * @param smoothout Smooth transformed output with this sigma (default=0)
 * @param help Display help message
 * @param verbose Switch on diagnostic messages
 * @param printoptions Print configuration file options
 *
 * @returns Parameter dictionary
 */
function msm_params(
    inmesh: InputPathType,
    out: string,
    refmesh: InputPathType | null = null,
    indata: InputPathType | null = null,
    refdata: InputPathType | null = null,
    trans: InputPathType | null = null,
    in_register: InputPathType | null = null,
    inweight: InputPathType | null = null,
    refweight: InputPathType | null = null,
    format: string | null = null,
    conf: InputPathType | null = null,
    levels: number | null = null,
    smoothout: number | null = null,
    help: boolean = false,
    verbose: boolean = false,
    printoptions: boolean = false,
): MsmParameters {
    const params = {
        "@type": "fsl.msm" as const,
        "inmesh": inmesh,
        "out": out,
        "help": help,
        "verbose": verbose,
        "printoptions": printoptions,
    };
    if (refmesh !== null) {
        params["refmesh"] = refmesh;
    }
    if (indata !== null) {
        params["indata"] = indata;
    }
    if (refdata !== null) {
        params["refdata"] = refdata;
    }
    if (trans !== null) {
        params["trans"] = trans;
    }
    if (in_register !== null) {
        params["in_register"] = in_register;
    }
    if (inweight !== null) {
        params["inweight"] = inweight;
    }
    if (refweight !== null) {
        params["refweight"] = refweight;
    }
    if (format !== null) {
        params["format"] = format;
    }
    if (conf !== null) {
        params["conf"] = conf;
    }
    if (levels !== null) {
        params["levels"] = levels;
    }
    if (smoothout !== null) {
        params["smoothout"] = smoothout;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function msm_cargs(
    params: MsmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("msm");
    cargs.push(execution.inputFile((params["inmesh"] ?? null)));
    cargs.push(["-out ", (params["out"] ?? null)].join(''));
    if ((params["refmesh"] ?? null) !== null) {
        cargs.push(
            "--refmesh",
            execution.inputFile((params["refmesh"] ?? null))
        );
    }
    if ((params["indata"] ?? null) !== null) {
        cargs.push(
            "--indata",
            execution.inputFile((params["indata"] ?? null))
        );
    }
    if ((params["refdata"] ?? null) !== null) {
        cargs.push(
            "--refdata",
            execution.inputFile((params["refdata"] ?? null))
        );
    }
    if ((params["trans"] ?? null) !== null) {
        cargs.push(
            "--trans",
            execution.inputFile((params["trans"] ?? null))
        );
    }
    if ((params["in_register"] ?? null) !== null) {
        cargs.push(
            "--in_register",
            execution.inputFile((params["in_register"] ?? null))
        );
    }
    if ((params["inweight"] ?? null) !== null) {
        cargs.push(
            "--inweight",
            execution.inputFile((params["inweight"] ?? null))
        );
    }
    if ((params["refweight"] ?? null) !== null) {
        cargs.push(
            "--refweight",
            execution.inputFile((params["refweight"] ?? null))
        );
    }
    if ((params["format"] ?? null) !== null) {
        cargs.push(
            "-f",
            (params["format"] ?? null)
        );
    }
    if ((params["conf"] ?? null) !== null) {
        cargs.push(
            "--conf",
            execution.inputFile((params["conf"] ?? null))
        );
    }
    if ((params["levels"] ?? null) !== null) {
        cargs.push(
            "--levels",
            String((params["levels"] ?? null))
        );
    }
    if ((params["smoothout"] ?? null) !== null) {
        cargs.push(
            "--smoothout",
            String((params["smoothout"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["printoptions"] ?? null)) {
        cargs.push("-p");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function msm_outputs(
    params: MsmParameters,
    execution: Execution,
): MsmOutputs {
    const ret: MsmOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["out"] ?? null), "_output.ext"].join('')),
    };
    return ret;
}


/**
 * MSM (Multimodal Surface Matching) is a tool for aligning brain surface scans based on their cortical folding patterns or functional/structural data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MsmOutputs`).
 */
function msm_execute(
    params: MsmParameters,
    runner: Runner | null = null,
): MsmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MSM_METADATA);
    params = execution.params(params)
    const cargs = msm_cargs(params, execution)
    const ret = msm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * MSM (Multimodal Surface Matching) is a tool for aligning brain surface scans based on their cortical folding patterns or functional/structural data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param inmesh Input mesh (available formats: VTK, ASCII, GIFTI). Needs to be a sphere
 * @param out Output basename
 * @param refmesh Reference mesh (available formats: VTK, ASCII, GIFTI). Needs to be a sphere. If not included algorithm assumes reference mesh is equivalent input
 * @param indata Scalar or multivariate data for input - can be ASCII (.asc,.dpv,.txt) or GIFTI (.func.gii or .shape.gii)
 * @param refdata Scalar or multivariate data for reference - can be ASCII (.asc,.dpv,.txt) or GIFTI (.func.gii or .shape.gii)
 * @param trans Transformed source mesh (output of a previous registration). Use this to initialise the current registration.
 * @param in_register Input mesh at data resolution. Used to resample data onto input mesh if data is supplied at a different resolution. Note this mesh HAS to be in alignment with either the input_mesh of (if supplied) the transformed source mesh. Use with supreme caution.
 * @param inweight Cost function weighting for input - weights data in these vertices when calculating similarity (ASCII or GIFTI). Can be multivariate provided dimension equals that of data
 * @param refweight Cost function weighting for reference - weights data in these vertices when calculating similarity (ASCII or GIFTI). Can be multivariate provided dimension equals that of data
 * @param format Format of output files, can be: GIFTI, VTK, ASCII or ASCII_MAT (for full details of output file formats see MSM wiki)
 * @param conf Configuration file
 * @param levels Number of resolution levels (default = number of resolution levels specified by --opt in config file)
 * @param smoothout Smooth transformed output with this sigma (default=0)
 * @param help Display help message
 * @param verbose Switch on diagnostic messages
 * @param printoptions Print configuration file options
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MsmOutputs`).
 */
function msm(
    inmesh: InputPathType,
    out: string,
    refmesh: InputPathType | null = null,
    indata: InputPathType | null = null,
    refdata: InputPathType | null = null,
    trans: InputPathType | null = null,
    in_register: InputPathType | null = null,
    inweight: InputPathType | null = null,
    refweight: InputPathType | null = null,
    format: string | null = null,
    conf: InputPathType | null = null,
    levels: number | null = null,
    smoothout: number | null = null,
    help: boolean = false,
    verbose: boolean = false,
    printoptions: boolean = false,
    runner: Runner | null = null,
): MsmOutputs {
    const params = msm_params(inmesh, out, refmesh, indata, refdata, trans, in_register, inweight, refweight, format, conf, levels, smoothout, help, verbose, printoptions)
    return msm_execute(params, runner);
}


export {
      MSM_METADATA,
      MsmOutputs,
      MsmParameters,
      msm,
      msm_execute,
      msm_params,
};
