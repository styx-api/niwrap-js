// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_CUT_RESAMPLE_METADATA: Metadata = {
    id: "3a00cf3f1b235001cfda81c5ab6186879f56a56c.boutiques",
    name: "surface-cut-resample",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceCutResampleParameters {
    "@type"?: "workbench/surface-cut-resample";
    "surface_in": InputPathType;
    "current_sphere": InputPathType;
    "new_sphere": InputPathType;
    "surface_out": string;
}
type SurfaceCutResampleParametersTagged = Required<Pick<SurfaceCutResampleParameters, '@type'>> & SurfaceCutResampleParameters;


/**
 * Output object returned when calling `SurfaceCutResampleParameters(...)`.
 *
 * @interface
 */
interface SurfaceCutResampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output surface file
     */
    surface_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface_in the surface file to resample
 * @param current_sphere a sphere surface with the mesh that the input surface is currently on
 * @param new_sphere a sphere surface that is in register with <current-sphere> and has the desired output mesh
 * @param surface_out the output surface file
 *
 * @returns Parameter dictionary
 */
function surface_cut_resample_params(
    surface_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    surface_out: string,
): SurfaceCutResampleParametersTagged {
    const params = {
        "@type": "workbench/surface-cut-resample" as const,
        "surface_in": surface_in,
        "current_sphere": current_sphere,
        "new_sphere": new_sphere,
        "surface_out": surface_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_cut_resample_cargs(
    params: SurfaceCutResampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-cut-resample");
    cargs.push(execution.inputFile((params["surface_in"] ?? null)));
    cargs.push(execution.inputFile((params["current_sphere"] ?? null)));
    cargs.push(execution.inputFile((params["new_sphere"] ?? null)));
    cargs.push((params["surface_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_cut_resample_outputs(
    params: SurfaceCutResampleParameters,
    execution: Execution,
): SurfaceCutResampleOutputs {
    const ret: SurfaceCutResampleOutputs = {
        root: execution.outputFile("."),
        surface_out: execution.outputFile([(params["surface_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-cut-resample
 *
 * Resample a cut surface.
 *
 * Resamples a surface file, given two spherical surfaces that are in register.  Barycentric resampling is used, because it is usually better for resampling surfaces, and because it is needed to figure out the new topology anyway.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceCutResampleOutputs`).
 */
function surface_cut_resample_execute(
    params: SurfaceCutResampleParameters,
    runner: Runner | null = null,
): SurfaceCutResampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_CUT_RESAMPLE_METADATA);
    params = execution.params(params)
    const cargs = surface_cut_resample_cargs(params, execution)
    const ret = surface_cut_resample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-cut-resample
 *
 * Resample a cut surface.
 *
 * Resamples a surface file, given two spherical surfaces that are in register.  Barycentric resampling is used, because it is usually better for resampling surfaces, and because it is needed to figure out the new topology anyway.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface_in the surface file to resample
 * @param current_sphere a sphere surface with the mesh that the input surface is currently on
 * @param new_sphere a sphere surface that is in register with <current-sphere> and has the desired output mesh
 * @param surface_out the output surface file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceCutResampleOutputs`).
 */
function surface_cut_resample(
    surface_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    surface_out: string,
    runner: Runner | null = null,
): SurfaceCutResampleOutputs {
    const params = surface_cut_resample_params(surface_in, current_sphere, new_sphere, surface_out)
    return surface_cut_resample_execute(params, runner);
}


export {
      SURFACE_CUT_RESAMPLE_METADATA,
      SurfaceCutResampleOutputs,
      surface_cut_resample,
      surface_cut_resample_execute,
      surface_cut_resample_params,
};
