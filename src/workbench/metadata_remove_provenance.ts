// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METADATA_REMOVE_PROVENANCE_METADATA: Metadata = {
    id: "4800e85a5fdc741153c992271baa48d72065973e.boutiques",
    name: "metadata-remove-provenance",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetadataRemoveProvenanceParameters {
    "@type"?: "workbench/metadata-remove-provenance";
    "input_file": string;
    "output_file": string;
}
type MetadataRemoveProvenanceParametersTagged = Required<Pick<MetadataRemoveProvenanceParameters, '@type'>> & MetadataRemoveProvenanceParameters;


/**
 * Output object returned when calling `MetadataRemoveProvenanceParameters(...)`.
 *
 * @interface
 */
interface MetadataRemoveProvenanceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file the file to remove provenance information from
 * @param output_file output - the name to save the modified file as
 *
 * @returns Parameter dictionary
 */
function metadata_remove_provenance_params(
    input_file: string,
    output_file: string,
): MetadataRemoveProvenanceParametersTagged {
    const params = {
        "@type": "workbench/metadata-remove-provenance" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metadata_remove_provenance_cargs(
    params: MetadataRemoveProvenanceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metadata-remove-provenance");
    cargs.push((params["input_file"] ?? null));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metadata_remove_provenance_outputs(
    params: MetadataRemoveProvenanceParameters,
    execution: Execution,
): MetadataRemoveProvenanceOutputs {
    const ret: MetadataRemoveProvenanceOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * metadata-remove-provenance
 *
 * Remove provenance information from file metadata.
 *
 * Removes the provenance metadata fields added by workbench during processing.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetadataRemoveProvenanceOutputs`).
 */
function metadata_remove_provenance_execute(
    params: MetadataRemoveProvenanceParameters,
    runner: Runner | null = null,
): MetadataRemoveProvenanceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METADATA_REMOVE_PROVENANCE_METADATA);
    params = execution.params(params)
    const cargs = metadata_remove_provenance_cargs(params, execution)
    const ret = metadata_remove_provenance_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * metadata-remove-provenance
 *
 * Remove provenance information from file metadata.
 *
 * Removes the provenance metadata fields added by workbench during processing.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param input_file the file to remove provenance information from
 * @param output_file output - the name to save the modified file as
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetadataRemoveProvenanceOutputs`).
 */
function metadata_remove_provenance(
    input_file: string,
    output_file: string,
    runner: Runner | null = null,
): MetadataRemoveProvenanceOutputs {
    const params = metadata_remove_provenance_params(input_file, output_file)
    return metadata_remove_provenance_execute(params, runner);
}


export {
      METADATA_REMOVE_PROVENANCE_METADATA,
      MetadataRemoveProvenanceOutputs,
      metadata_remove_provenance,
      metadata_remove_provenance_execute,
      metadata_remove_provenance_params,
};
