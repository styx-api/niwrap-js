// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_GEN_FEATURE_DIST_METADATA: Metadata = {
    id: "a93f01b8f1e3bff0ef89e500133816c34255aec1.boutiques",
    name: "3dGenFeatureDist",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dGenFeatureDistParameters {
    "@type": "afni.3dGenFeatureDist";
    "features_string": string;
    "class_string": string;
    "prefix"?: string | null | undefined;
    "overwrite": boolean;
    "debug_level"?: number | null | undefined;
    "other": boolean;
    "no_other": boolean;
    "samp"?: Array<string> | null | undefined;
    "sig"?: Array<string> | null | undefined;
    "hspec"?: Array<string> | null | undefined;
    "labeltable"?: InputPathType | null | undefined;
    "show_histograms"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dGenFeatureDist": v_3d_gen_feature_dist_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dGenFeatureDist": v_3d_gen_feature_dist_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_gen_feature_dist(...)`.
 *
 * @interface
 */
interface V3dGenFeatureDistOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Histogram volume output
     */
    output_hive: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param features_string FEATURES_STRING is a semicolon delimited string of features.
 * @param class_string CLASS_STRING is a semicolon delimited string of class labels.
 * @param prefix PREF is the prefix for all output volumes that are not debugging related.
 * @param overwrite Automatically overwrite existing output.
 * @param debug_level Debugging level.
 * @param other Add histograms for an 'OTHER' class that has a uniform pdf.
 * @param no_other Opposite of -OTHER.
 * @param samp Specify which voxels belong to each class of interest.
 * @param sig Specify volumes that define the features.
 * @param hspec Set histogram parameters for a specific feature.
 * @param labeltable Specify the label table.
 * @param show_histograms Show specified histograms and quit.
 *
 * @returns Parameter dictionary
 */
function v_3d_gen_feature_dist_params(
    features_string: string,
    class_string: string,
    prefix: string | null = null,
    overwrite: boolean = false,
    debug_level: number | null = null,
    other: boolean = false,
    no_other: boolean = false,
    samp: Array<string> | null = null,
    sig: Array<string> | null = null,
    hspec: Array<string> | null = null,
    labeltable: InputPathType | null = null,
    show_histograms: string | null = null,
): V3dGenFeatureDistParameters {
    const params = {
        "@type": "afni.3dGenFeatureDist" as const,
        "features_string": features_string,
        "class_string": class_string,
        "overwrite": overwrite,
        "other": other,
        "no_other": no_other,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (debug_level !== null) {
        params["debug_level"] = debug_level;
    }
    if (samp !== null) {
        params["samp"] = samp;
    }
    if (sig !== null) {
        params["sig"] = sig;
    }
    if (hspec !== null) {
        params["hspec"] = hspec;
    }
    if (labeltable !== null) {
        params["labeltable"] = labeltable;
    }
    if (show_histograms !== null) {
        params["show_histograms"] = show_histograms;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_gen_feature_dist_cargs(
    params: V3dGenFeatureDistParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dGenFeatureDist");
    cargs.push(
        "-features",
        (params["features_string"] ?? null)
    );
    cargs.push(
        "-classes",
        (params["class_string"] ?? null)
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    if ((params["debug_level"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug_level"] ?? null))
        );
    }
    if ((params["other"] ?? null)) {
        cargs.push("-OTHER");
    }
    if ((params["no_other"] ?? null)) {
        cargs.push("-no_OTHER");
    }
    if ((params["samp"] ?? null) !== null) {
        cargs.push(
            "-samp",
            ...(params["samp"] ?? null)
        );
    }
    if ((params["sig"] ?? null) !== null) {
        cargs.push(
            "-sig",
            ...(params["sig"] ?? null)
        );
    }
    if ((params["hspec"] ?? null) !== null) {
        cargs.push(
            "-hspec",
            ...(params["hspec"] ?? null)
        );
    }
    if ((params["labeltable"] ?? null) !== null) {
        cargs.push(
            "-labeltable",
            execution.inputFile((params["labeltable"] ?? null))
        );
    }
    if ((params["show_histograms"] ?? null) !== null) {
        cargs.push(
            "-ShowTheseHists",
            (params["show_histograms"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_gen_feature_dist_outputs(
    params: V3dGenFeatureDistParameters,
    execution: Execution,
): V3dGenFeatureDistOutputs {
    const ret: V3dGenFeatureDistOutputs = {
        root: execution.outputFile("."),
        output_hive: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_hive.nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * 3dGenFeatureDist
 *
 * 3dGenFeatureDist produces histogram volume (hives) from input data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dGenFeatureDistOutputs`).
 */
function v_3d_gen_feature_dist_execute(
    params: V3dGenFeatureDistParameters,
    runner: Runner | null = null,
): V3dGenFeatureDistOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_GEN_FEATURE_DIST_METADATA);
    params = execution.params(params)
    const cargs = v_3d_gen_feature_dist_cargs(params, execution)
    const ret = v_3d_gen_feature_dist_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dGenFeatureDist
 *
 * 3dGenFeatureDist produces histogram volume (hives) from input data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param features_string FEATURES_STRING is a semicolon delimited string of features.
 * @param class_string CLASS_STRING is a semicolon delimited string of class labels.
 * @param prefix PREF is the prefix for all output volumes that are not debugging related.
 * @param overwrite Automatically overwrite existing output.
 * @param debug_level Debugging level.
 * @param other Add histograms for an 'OTHER' class that has a uniform pdf.
 * @param no_other Opposite of -OTHER.
 * @param samp Specify which voxels belong to each class of interest.
 * @param sig Specify volumes that define the features.
 * @param hspec Set histogram parameters for a specific feature.
 * @param labeltable Specify the label table.
 * @param show_histograms Show specified histograms and quit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dGenFeatureDistOutputs`).
 */
function v_3d_gen_feature_dist(
    features_string: string,
    class_string: string,
    prefix: string | null = null,
    overwrite: boolean = false,
    debug_level: number | null = null,
    other: boolean = false,
    no_other: boolean = false,
    samp: Array<string> | null = null,
    sig: Array<string> | null = null,
    hspec: Array<string> | null = null,
    labeltable: InputPathType | null = null,
    show_histograms: string | null = null,
    runner: Runner | null = null,
): V3dGenFeatureDistOutputs {
    const params = v_3d_gen_feature_dist_params(features_string, class_string, prefix, overwrite, debug_level, other, no_other, samp, sig, hspec, labeltable, show_histograms)
    return v_3d_gen_feature_dist_execute(params, runner);
}


export {
      V3dGenFeatureDistOutputs,
      V3dGenFeatureDistParameters,
      V_3D_GEN_FEATURE_DIST_METADATA,
      v_3d_gen_feature_dist,
      v_3d_gen_feature_dist_execute,
      v_3d_gen_feature_dist_params,
};
