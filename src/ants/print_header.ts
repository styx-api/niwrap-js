// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PRINT_HEADER_METADATA: Metadata = {
    id: "514e4dbae6f3b5a425925fca62d2ade89ff0b0c2.boutiques",
    name: "PrintHeader",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface PrintHeaderParameters {
    "__STYXTYPE__": "PrintHeader";
    "image": InputPathType;
    "what_information"?: 0 | 1 | 2 | 3 | 4 | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "PrintHeader": print_header_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "PrintHeader": print_header_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `print_header(...)`.
 *
 * @interface
 */
interface PrintHeaderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The printed header information from the specified image.
     */
    output: OutputPathType;
}


function print_header_params(
    image: InputPathType,
    what_information: 0 | 1 | 2 | 3 | 4 | null = null,
): PrintHeaderParameters {
    /**
     * Build parameters.
    
     * @param image The image file to extract header information from. Supported extension: .ext.
     * @param what_information Specify the type of information to print: 0 for origin, 1 for spacing, 2 for size, 3 for index, 4 for direction.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "PrintHeader" as const,
        "image": image,
    };
    if (what_information !== null) {
        params["what_information"] = what_information;
    }
    return params;
}


function print_header_cargs(
    params: PrintHeaderParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("PrintHeader");
    cargs.push(execution.inputFile((params["image"] ?? null)));
    if ((params["what_information"] ?? null) !== null) {
        cargs.push(String((params["what_information"] ?? null)));
    }
    return cargs;
}


function print_header_outputs(
    params: PrintHeaderParameters,
    execution: Execution,
): PrintHeaderOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: PrintHeaderOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile(["header_info.txt"].join('')),
    };
    return ret;
}


function print_header_execute(
    params: PrintHeaderParameters,
    execution: Execution,
): PrintHeaderOutputs {
    /**
     * A utility to print header information from an image file.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `PrintHeaderOutputs`).
     */
    params = execution.params(params)
    const cargs = print_header_cargs(params, execution)
    const ret = print_header_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function print_header(
    image: InputPathType,
    what_information: 0 | 1 | 2 | 3 | 4 | null = null,
    runner: Runner | null = null,
): PrintHeaderOutputs {
    /**
     * A utility to print header information from an image file.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param image The image file to extract header information from. Supported extension: .ext.
     * @param what_information Specify the type of information to print: 0 for origin, 1 for spacing, 2 for size, 3 for index, 4 for direction.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `PrintHeaderOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PRINT_HEADER_METADATA);
    const params = print_header_params(image, what_information)
    return print_header_execute(params, execution);
}


export {
      PRINT_HEADER_METADATA,
      PrintHeaderOutputs,
      PrintHeaderParameters,
      print_header,
      print_header_params,
};
