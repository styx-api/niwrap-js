// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SAMP_BIAS_METADATA: Metadata = {
    id: "e1325d010e905394733e9c7b189375c71f01d74b.boutiques",
    name: "SampBias",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SampBiasParameters {
    "__STYXTYPE__": "SampBias";
    "specfile": InputPathType;
    "surfname": string;
    "plimit"?: number | null | undefined;
    "dlimit"?: number | null | undefined;
    "outfile": string;
    "prefix"?: string | null | undefined;
    "segdo"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "SampBias": samp_bias_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "SampBias": samp_bias_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `samp_bias(...)`.
 *
 * @interface
 */
interface SampBiasOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output results in .1D format
     */
    out_1_d: OutputPathType;
    /**
     * Output results in a proper surface-based dataset.
     */
    out_prefix: OutputPathType | null;
}


function samp_bias_params(
    specfile: InputPathType,
    surfname: string,
    outfile: string,
    plimit: number | null = null,
    dlimit: number | null = null,
    prefix: string | null = null,
    segdo: string | null = null,
): SampBiasParameters {
    /**
     * Build parameters.
    
     * @param specfile Spec file containing input surfaces.
     * @param surfname Name of input surface.
     * @param outfile Output results in .1D format.
     * @param plimit Maximum length of path along surface in mm. Default is 50 mm.
     * @param dlimit Maximum length of euclidean distance in mm. Default is 1000 mm.
     * @param prefix Output results into a proper surface-based dataset.
     * @param segdo Output a displayable object file that contains segments between paired nodes.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "SampBias" as const,
        "specfile": specfile,
        "surfname": surfname,
        "outfile": outfile,
    };
    if (plimit !== null) {
        params["plimit"] = plimit;
    }
    if (dlimit !== null) {
        params["dlimit"] = dlimit;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (segdo !== null) {
        params["segdo"] = segdo;
    }
    return params;
}


function samp_bias_cargs(
    params: SampBiasParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("SampBias");
    cargs.push(
        "-spec",
        execution.inputFile((params["specfile"] ?? null))
    );
    cargs.push(
        "-surf",
        (params["surfname"] ?? null)
    );
    if ((params["plimit"] ?? null) !== null) {
        cargs.push(
            "-plimit",
            String((params["plimit"] ?? null))
        );
    }
    if ((params["dlimit"] ?? null) !== null) {
        cargs.push(
            "-dlimit",
            String((params["dlimit"] ?? null))
        );
    }
    cargs.push(
        "-out",
        (params["outfile"] ?? null)
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["segdo"] ?? null) !== null) {
        cargs.push(
            "-segdo",
            (params["segdo"] ?? null)
        );
    }
    return cargs;
}


function samp_bias_outputs(
    params: SampBiasParameters,
    execution: Execution,
): SampBiasOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SampBiasOutputs = {
        root: execution.outputFile("."),
        out_1_d: execution.outputFile([(params["outfile"] ?? null), ".1D"].join('')),
        out_prefix: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
    };
    return ret;
}


function samp_bias_execute(
    params: SampBiasParameters,
    execution: Execution,
): SampBiasOutputs {
    /**
     * SampBias is a tool for sampling bias resultant segments between paired nodes on anatomical surfaces.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SampBiasOutputs`).
     */
    params = execution.params(params)
    const cargs = samp_bias_cargs(params, execution)
    const ret = samp_bias_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function samp_bias(
    specfile: InputPathType,
    surfname: string,
    outfile: string,
    plimit: number | null = null,
    dlimit: number | null = null,
    prefix: string | null = null,
    segdo: string | null = null,
    runner: Runner | null = null,
): SampBiasOutputs {
    /**
     * SampBias is a tool for sampling bias resultant segments between paired nodes on anatomical surfaces.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param specfile Spec file containing input surfaces.
     * @param surfname Name of input surface.
     * @param outfile Output results in .1D format.
     * @param plimit Maximum length of path along surface in mm. Default is 50 mm.
     * @param dlimit Maximum length of euclidean distance in mm. Default is 1000 mm.
     * @param prefix Output results into a proper surface-based dataset.
     * @param segdo Output a displayable object file that contains segments between paired nodes.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SampBiasOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SAMP_BIAS_METADATA);
    const params = samp_bias_params(specfile, surfname, outfile, plimit, dlimit, prefix, segdo)
    return samp_bias_execute(params, execution);
}


export {
      SAMP_BIAS_METADATA,
      SampBiasOutputs,
      SampBiasParameters,
      samp_bias,
      samp_bias_params,
};
