// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_CONVERT_DCM_DWIS_METADATA: Metadata = {
    id: "012a1abbcf7ef5f5ce0b2e253bfc3807310bf236.boutiques",
    name: "fat_proc_convert_dcm_dwis",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcConvertDcmDwisParameters {
    "@type": "afni.fat_proc_convert_dcm_dwis";
    "dicom_dir": string;
    "output_prefix": string;
    "nifti_files"?: Array<InputPathType> | null | undefined;
    "bvec_files"?: Array<InputPathType> | null | undefined;
    "bval_files"?: Array<InputPathType> | null | undefined;
    "work_dir"?: string | null | undefined;
    "orientation"?: string | null | undefined;
    "origin_xyz"?: Array<number> | null | undefined;
    "flip_x": boolean;
    "flip_y": boolean;
    "flip_z": boolean;
    "no_flip": boolean;
    "qc_prefix"?: string | null | undefined;
    "reorient_off": boolean;
    "no_clean": boolean;
    "no_cmd_out": boolean;
    "no_qc_view": boolean;
    "do_movie"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fat_proc_convert_dcm_dwis": fat_proc_convert_dcm_dwis_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fat_proc_convert_dcm_dwis": fat_proc_convert_dcm_dwis_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_proc_convert_dcm_dwis(...)`.
 *
 * @interface
 */
interface FatProcConvertDcmDwisOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * A NIFTI file with N volumes.
     */
    output_nifti: OutputPathType;
    /**
     * A row-wise (3xN) bvec file of the (unit-magnitude) gradient orientations.
     */
    output_rvec: OutputPathType;
    /**
     * A row-wise (1xN) bval file of the gradient magnitudes.
     */
    output_bval: OutputPathType;
    /**
     * A column-wise (Nx6) AFNI-style matrix file of the (scaled) b-matrix values.
     */
    output_mat_a: OutputPathType;
    /**
     * A column-wise (Nx6) TORTOISE-style matrix file of the (scaled) b-matrix values.
     */
    output_mat_t: OutputPathType;
    /**
     * A column-wise (Nx3) bvec file of the (b-magn scaled) gradient orientations.
     */
    output_cvec: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dicom_dir Directory of DICOM files of the DWI data with 'AP' phase encoding. Can contain a wildcard expression for several directories.
 * @param output_prefix Prefix (and path) for output data (e.g., *.nii.gz, *.bvec, *.bval files). Required.
 * @param nifti_files One or more NIFTI files of DWIs.
 * @param bvec_files One or more row-wise, gradient (unit-magnitude) files (e.g., *.bvec).
 * @param bval_files One or more bvalue files (e.g., *.bval).
 * @param work_dir Optional working directory for intermediate files.
 * @param orientation Optional chance to reset orientation of the volume files (default is currently 'RAI').
 * @param origin_xyz Explicit origin coordinates (X, Y, Z).
 * @param flip_x Flip gradients along the X-axis.
 * @param flip_y Flip gradients along the Y-axis.
 * @param flip_z Flip gradients along the Z-axis.
 * @param no_flip Prevent flipping of gradients (default).
 * @param qc_prefix Set the prefix for QC image files separately (default is '').
 * @param reorient_off Turn off reorigin calculation and reorientation.
 * @param no_clean Do not remove the working directory of intermediate files (default is to delete it).
 * @param no_cmd_out Do not save the command line call and location where it was run.
 * @param no_qc_view Do not generate QC image files.
 * @param do_movie Generate a movie of the newly created dataset (AGIF or MPEG).
 *
 * @returns Parameter dictionary
 */
function fat_proc_convert_dcm_dwis_params(
    dicom_dir: string,
    output_prefix: string,
    nifti_files: Array<InputPathType> | null = null,
    bvec_files: Array<InputPathType> | null = null,
    bval_files: Array<InputPathType> | null = null,
    work_dir: string | null = null,
    orientation: string | null = null,
    origin_xyz: Array<number> | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    no_flip: boolean = false,
    qc_prefix: string | null = null,
    reorient_off: boolean = false,
    no_clean: boolean = false,
    no_cmd_out: boolean = false,
    no_qc_view: boolean = false,
    do_movie: string | null = null,
): FatProcConvertDcmDwisParameters {
    const params = {
        "@type": "afni.fat_proc_convert_dcm_dwis" as const,
        "dicom_dir": dicom_dir,
        "output_prefix": output_prefix,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
        "no_flip": no_flip,
        "reorient_off": reorient_off,
        "no_clean": no_clean,
        "no_cmd_out": no_cmd_out,
        "no_qc_view": no_qc_view,
    };
    if (nifti_files !== null) {
        params["nifti_files"] = nifti_files;
    }
    if (bvec_files !== null) {
        params["bvec_files"] = bvec_files;
    }
    if (bval_files !== null) {
        params["bval_files"] = bval_files;
    }
    if (work_dir !== null) {
        params["work_dir"] = work_dir;
    }
    if (orientation !== null) {
        params["orientation"] = orientation;
    }
    if (origin_xyz !== null) {
        params["origin_xyz"] = origin_xyz;
    }
    if (qc_prefix !== null) {
        params["qc_prefix"] = qc_prefix;
    }
    if (do_movie !== null) {
        params["do_movie"] = do_movie;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_proc_convert_dcm_dwis_cargs(
    params: FatProcConvertDcmDwisParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_proc_convert_dcm_dwis");
    cargs.push((params["dicom_dir"] ?? null));
    cargs.push((params["output_prefix"] ?? null));
    if ((params["nifti_files"] ?? null) !== null) {
        cargs.push(...(params["nifti_files"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["bvec_files"] ?? null) !== null) {
        cargs.push(...(params["bvec_files"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["bval_files"] ?? null) !== null) {
        cargs.push(...(params["bval_files"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["work_dir"] ?? null) !== null) {
        cargs.push((params["work_dir"] ?? null));
    }
    if ((params["orientation"] ?? null) !== null) {
        cargs.push((params["orientation"] ?? null));
    }
    if ((params["origin_xyz"] ?? null) !== null) {
        cargs.push(...(params["origin_xyz"] ?? null).map(String));
    }
    if ((params["flip_x"] ?? null)) {
        cargs.push("-flip_x");
    }
    if ((params["flip_y"] ?? null)) {
        cargs.push("-flip_y");
    }
    if ((params["flip_z"] ?? null)) {
        cargs.push("-flip_z");
    }
    if ((params["no_flip"] ?? null)) {
        cargs.push("-no_flip");
    }
    if ((params["qc_prefix"] ?? null) !== null) {
        cargs.push((params["qc_prefix"] ?? null));
    }
    if ((params["reorient_off"] ?? null)) {
        cargs.push("-reorig_reorient_off");
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    if ((params["no_cmd_out"] ?? null)) {
        cargs.push("-no_cmd_out");
    }
    if ((params["no_qc_view"] ?? null)) {
        cargs.push("-no_qc_view");
    }
    if ((params["do_movie"] ?? null) !== null) {
        cargs.push(
            "-do_movie",
            (params["do_movie"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_proc_convert_dcm_dwis_outputs(
    params: FatProcConvertDcmDwisParameters,
    execution: Execution,
): FatProcConvertDcmDwisOutputs {
    const ret: FatProcConvertDcmDwisOutputs = {
        root: execution.outputFile("."),
        output_nifti: execution.outputFile([(params["output_prefix"] ?? null), ".nii.gz"].join('')),
        output_rvec: execution.outputFile([(params["output_prefix"] ?? null), ".rvec"].join('')),
        output_bval: execution.outputFile([(params["output_prefix"] ?? null), ".bval"].join('')),
        output_mat_a: execution.outputFile([(params["output_prefix"] ?? null), "_matA.dat"].join('')),
        output_mat_t: execution.outputFile([(params["output_prefix"] ?? null), "_matT.dat"].join('')),
        output_cvec: execution.outputFile([(params["output_prefix"] ?? null), "_cvec.dat"].join('')),
    };
    return ret;
}


/**
 * Convert sets of DWIs in DICOM format into 'nicer' volume+grad format, reorient volumetric data, and glue together multiple sessions/directories of data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FatProcConvertDcmDwisOutputs`).
 */
function fat_proc_convert_dcm_dwis_execute(
    params: FatProcConvertDcmDwisParameters,
    execution: Execution,
): FatProcConvertDcmDwisOutputs {
    params = execution.params(params)
    const cargs = fat_proc_convert_dcm_dwis_cargs(params, execution)
    const ret = fat_proc_convert_dcm_dwis_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert sets of DWIs in DICOM format into 'nicer' volume+grad format, reorient volumetric data, and glue together multiple sessions/directories of data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dicom_dir Directory of DICOM files of the DWI data with 'AP' phase encoding. Can contain a wildcard expression for several directories.
 * @param output_prefix Prefix (and path) for output data (e.g., *.nii.gz, *.bvec, *.bval files). Required.
 * @param nifti_files One or more NIFTI files of DWIs.
 * @param bvec_files One or more row-wise, gradient (unit-magnitude) files (e.g., *.bvec).
 * @param bval_files One or more bvalue files (e.g., *.bval).
 * @param work_dir Optional working directory for intermediate files.
 * @param orientation Optional chance to reset orientation of the volume files (default is currently 'RAI').
 * @param origin_xyz Explicit origin coordinates (X, Y, Z).
 * @param flip_x Flip gradients along the X-axis.
 * @param flip_y Flip gradients along the Y-axis.
 * @param flip_z Flip gradients along the Z-axis.
 * @param no_flip Prevent flipping of gradients (default).
 * @param qc_prefix Set the prefix for QC image files separately (default is '').
 * @param reorient_off Turn off reorigin calculation and reorientation.
 * @param no_clean Do not remove the working directory of intermediate files (default is to delete it).
 * @param no_cmd_out Do not save the command line call and location where it was run.
 * @param no_qc_view Do not generate QC image files.
 * @param do_movie Generate a movie of the newly created dataset (AGIF or MPEG).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcConvertDcmDwisOutputs`).
 */
function fat_proc_convert_dcm_dwis(
    dicom_dir: string,
    output_prefix: string,
    nifti_files: Array<InputPathType> | null = null,
    bvec_files: Array<InputPathType> | null = null,
    bval_files: Array<InputPathType> | null = null,
    work_dir: string | null = null,
    orientation: string | null = null,
    origin_xyz: Array<number> | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    no_flip: boolean = false,
    qc_prefix: string | null = null,
    reorient_off: boolean = false,
    no_clean: boolean = false,
    no_cmd_out: boolean = false,
    no_qc_view: boolean = false,
    do_movie: string | null = null,
    runner: Runner | null = null,
): FatProcConvertDcmDwisOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_CONVERT_DCM_DWIS_METADATA);
    const params = fat_proc_convert_dcm_dwis_params(dicom_dir, output_prefix, nifti_files, bvec_files, bval_files, work_dir, orientation, origin_xyz, flip_x, flip_y, flip_z, no_flip, qc_prefix, reorient_off, no_clean, no_cmd_out, no_qc_view, do_movie)
    return fat_proc_convert_dcm_dwis_execute(params, execution);
}


export {
      FAT_PROC_CONVERT_DCM_DWIS_METADATA,
      FatProcConvertDcmDwisOutputs,
      FatProcConvertDcmDwisParameters,
      fat_proc_convert_dcm_dwis,
      fat_proc_convert_dcm_dwis_cargs,
      fat_proc_convert_dcm_dwis_execute,
      fat_proc_convert_dcm_dwis_outputs,
      fat_proc_convert_dcm_dwis_params,
};
