// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DWUNCERT_METADATA: Metadata = {
    id: "cbde019605b90635102379e325a6defdacd645f6.boutiques",
    name: "3dDWUncert",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDwuncertParameters {
    "@type"?: "afni/3dDWUncert";
    "input_file": InputPathType;
    "input_prefix": string;
    "output_prefix": string;
    "grad_file"?: InputPathType | null | undefined;
    "bmatrix_file"?: InputPathType | null | undefined;
    "num_iters"?: number | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "calc_thr_fa"?: number | null | undefined;
    "csf_fa"?: number | null | undefined;
}
type V3dDwuncertParametersTagged = Required<Pick<V3dDwuncertParameters, '@type'>> & V3dDwuncertParameters;


/**
 * Output object returned when calling `V3dDwuncertParameters(...)`.
 *
 * @interface
 */
interface V3dDwuncertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * AFNI-format file with 6 subbricks, containing uncertainty information.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input file with b0 and DWI subbricks.
 * @param input_prefix Basename of DTI volumes.
 * @param output_prefix Output file name prefix.
 * @param grad_file File with 3 columns for x-, y-, and z-comps of DW-gradients.
 * @param bmatrix_file File with gradient info in b-matrix format.
 * @param num_iters Number of jackknife resample iterations.
 * @param mask_file Mask file within which to calculate uncertainty.
 * @param calc_thr_fa Threshold for the minimum FA value above which to calculate uncertainty.
 * @param csf_fa Number marking FA value of 'bad' voxels.
 *
 * @returns Parameter dictionary
 */
function v_3d_dwuncert_params(
    input_file: InputPathType,
    input_prefix: string,
    output_prefix: string,
    grad_file: InputPathType | null = null,
    bmatrix_file: InputPathType | null = null,
    num_iters: number | null = null,
    mask_file: InputPathType | null = null,
    calc_thr_fa: number | null = null,
    csf_fa: number | null = null,
): V3dDwuncertParametersTagged {
    const params = {
        "@type": "afni/3dDWUncert" as const,
        "input_file": input_file,
        "input_prefix": input_prefix,
        "output_prefix": output_prefix,
    };
    if (grad_file !== null) {
        params["grad_file"] = grad_file;
    }
    if (bmatrix_file !== null) {
        params["bmatrix_file"] = bmatrix_file;
    }
    if (num_iters !== null) {
        params["num_iters"] = num_iters;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (calc_thr_fa !== null) {
        params["calc_thr_fa"] = calc_thr_fa;
    }
    if (csf_fa !== null) {
        params["csf_fa"] = csf_fa;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_dwuncert_cargs(
    params: V3dDwuncertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dDWUncert");
    cargs.push(
        "-inset",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-input",
        (params["input_prefix"] ?? null)
    );
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["grad_file"] ?? null) !== null) {
        cargs.push(
            "-grads",
            execution.inputFile((params["grad_file"] ?? null))
        );
    }
    if ((params["bmatrix_file"] ?? null) !== null) {
        cargs.push(
            "-bmatrix_FULL",
            execution.inputFile((params["bmatrix_file"] ?? null))
        );
    }
    if ((params["num_iters"] ?? null) !== null) {
        cargs.push(
            "-iters",
            String((params["num_iters"] ?? null))
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["calc_thr_fa"] ?? null) !== null) {
        cargs.push(
            "-calc_thr_FA",
            String((params["calc_thr_fa"] ?? null))
        );
    }
    if ((params["csf_fa"] ?? null) !== null) {
        cargs.push(
            "-csf_fa",
            String((params["csf_fa"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_dwuncert_outputs(
    params: V3dDwuncertParameters,
    execution: Execution,
): V3dDwuncertOutputs {
    const ret: V3dDwuncertOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_prefix"] ?? null), "+.HEAD/", (params["output_prefix"] ?? null), "+.BRIK"].join('')),
    };
    return ret;
}


/**
 * 3dDWUncert
 *
 * Use jackknifing to estimate uncertainty of DTI parameters, important for probabilistic tractography.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDwuncertOutputs`).
 */
function v_3d_dwuncert_execute(
    params: V3dDwuncertParameters,
    runner: Runner | null = null,
): V3dDwuncertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DWUNCERT_METADATA);
    params = execution.params(params)
    const cargs = v_3d_dwuncert_cargs(params, execution)
    const ret = v_3d_dwuncert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dDWUncert
 *
 * Use jackknifing to estimate uncertainty of DTI parameters, important for probabilistic tractography.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Input file with b0 and DWI subbricks.
 * @param input_prefix Basename of DTI volumes.
 * @param output_prefix Output file name prefix.
 * @param grad_file File with 3 columns for x-, y-, and z-comps of DW-gradients.
 * @param bmatrix_file File with gradient info in b-matrix format.
 * @param num_iters Number of jackknife resample iterations.
 * @param mask_file Mask file within which to calculate uncertainty.
 * @param calc_thr_fa Threshold for the minimum FA value above which to calculate uncertainty.
 * @param csf_fa Number marking FA value of 'bad' voxels.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDwuncertOutputs`).
 */
function v_3d_dwuncert(
    input_file: InputPathType,
    input_prefix: string,
    output_prefix: string,
    grad_file: InputPathType | null = null,
    bmatrix_file: InputPathType | null = null,
    num_iters: number | null = null,
    mask_file: InputPathType | null = null,
    calc_thr_fa: number | null = null,
    csf_fa: number | null = null,
    runner: Runner | null = null,
): V3dDwuncertOutputs {
    const params = v_3d_dwuncert_params(input_file, input_prefix, output_prefix, grad_file, bmatrix_file, num_iters, mask_file, calc_thr_fa, csf_fa)
    return v_3d_dwuncert_execute(params, runner);
}


export {
      V3dDwuncertOutputs,
      V_3D_DWUNCERT_METADATA,
      v_3d_dwuncert,
      v_3d_dwuncert_execute,
      v_3d_dwuncert_params,
};
