// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__TO_MNI_AWARP_METADATA: Metadata = {
    id: "b6d7b0fa8121b6538d215cd65437e4218af3eeba.boutiques",
    name: "@toMNI_Awarp",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VToMniAwarpParameters {
    "@type": "afni.@toMNI_Awarp";
    "directory": string;
    "datasets": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@toMNI_Awarp": v__to_mni_awarp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__to_mni_awarp(...)`.
 *
 * @interface
 */
interface VToMniAwarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param directory Name of the directory to be created where results will be stored.
 * @param datasets List of datasets to be transformed.
 *
 * @returns Parameter dictionary
 */
function v__to_mni_awarp_params(
    directory: string,
    datasets: Array<InputPathType>,
): VToMniAwarpParameters {
    const params = {
        "@type": "afni.@toMNI_Awarp" as const,
        "directory": directory,
        "datasets": datasets,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__to_mni_awarp_cargs(
    params: VToMniAwarpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@toMNI_Awarp");
    cargs.push((params["directory"] ?? null));
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__to_mni_awarp_outputs(
    params: VToMniAwarpParameters,
    execution: Execution,
): VToMniAwarpOutputs {
    const ret: VToMniAwarpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * @toMNI_Awarp
 *
 * Transforms skull-stripped datasets to 1x1x1 mm MNI space using an affine transformation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VToMniAwarpOutputs`).
 */
function v__to_mni_awarp_execute(
    params: VToMniAwarpParameters,
    runner: Runner | null = null,
): VToMniAwarpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__TO_MNI_AWARP_METADATA);
    params = execution.params(params)
    const cargs = v__to_mni_awarp_cargs(params, execution)
    const ret = v__to_mni_awarp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @toMNI_Awarp
 *
 * Transforms skull-stripped datasets to 1x1x1 mm MNI space using an affine transformation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param directory Name of the directory to be created where results will be stored.
 * @param datasets List of datasets to be transformed.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VToMniAwarpOutputs`).
 */
function v__to_mni_awarp(
    directory: string,
    datasets: Array<InputPathType>,
    runner: Runner | null = null,
): VToMniAwarpOutputs {
    const params = v__to_mni_awarp_params(directory, datasets)
    return v__to_mni_awarp_execute(params, runner);
}


export {
      VToMniAwarpOutputs,
      VToMniAwarpParameters,
      V__TO_MNI_AWARP_METADATA,
      v__to_mni_awarp,
      v__to_mni_awarp_execute,
      v__to_mni_awarp_params,
};
