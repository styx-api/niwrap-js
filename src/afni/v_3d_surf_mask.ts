// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SURF_MASK_METADATA: Metadata = {
    id: "0c8c0c85cb938597bc328e04d5ab913c255457c7.boutiques",
    name: "3dSurfMask",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSurfMaskParameters {
    "@type"?: "afni/3dSurfMask";
    "surface_type": string;
    "surface_file": InputPathType;
    "prefix": string;
    "grid_parent": InputPathType;
    "fill_method"?: string | null | undefined;
    "surface_volume"?: InputPathType | null | undefined;
    "mask_only": boolean;
    "flip_orientation": boolean;
    "no_distance": boolean;
}
type V3dSurfMaskParametersTagged = Required<Pick<V3dSurfMaskParameters, '@type'>> & V3dSurfMaskParameters;


/**
 * Output object returned when calling `V3dSurfMaskParameters(...)`.
 *
 * @interface
 */
interface V3dSurfMaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output mask dataset.
     */
    output_mask: OutputPathType;
    /**
     * Dataset reflecting voxel shortest distances to the surface.
     */
    distance_dataset: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface_type Specify input surface.
 * @param surface_file Specify input surface filename.
 * @param prefix Prefix of output dataset.
 * @param grid_parent Specifies the grid for the output volume.
 * @param fill_method Fill method: SLOW or FAST (default: FAST).
 * @param surface_volume Specify the surface volume.
 * @param mask_only Produce an output dataset where voxels are 1 inside the surface and 0 outside.
 * @param flip_orientation Flip triangle winding of surface mesh.
 * @param no_distance Do not compute the distances, just the mask from the first step.
 *
 * @returns Parameter dictionary
 */
function v_3d_surf_mask_params(
    surface_type: string,
    surface_file: InputPathType,
    prefix: string,
    grid_parent: InputPathType,
    fill_method: string | null = null,
    surface_volume: InputPathType | null = null,
    mask_only: boolean = false,
    flip_orientation: boolean = false,
    no_distance: boolean = false,
): V3dSurfMaskParametersTagged {
    const params = {
        "@type": "afni/3dSurfMask" as const,
        "surface_type": surface_type,
        "surface_file": surface_file,
        "prefix": prefix,
        "grid_parent": grid_parent,
        "mask_only": mask_only,
        "flip_orientation": flip_orientation,
        "no_distance": no_distance,
    };
    if (fill_method !== null) {
        params["fill_method"] = fill_method;
    }
    if (surface_volume !== null) {
        params["surface_volume"] = surface_volume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_surf_mask_cargs(
    params: V3dSurfMaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dSurfMask");
    cargs.push((params["surface_type"] ?? null));
    cargs.push(execution.inputFile((params["surface_file"] ?? null)));
    cargs.push((params["prefix"] ?? null));
    cargs.push(execution.inputFile((params["grid_parent"] ?? null)));
    if ((params["fill_method"] ?? null) !== null) {
        cargs.push(
            "-fill_method",
            (params["fill_method"] ?? null)
        );
    }
    if ((params["surface_volume"] ?? null) !== null) {
        cargs.push(
            "-sv",
            execution.inputFile((params["surface_volume"] ?? null))
        );
    }
    if ((params["mask_only"] ?? false)) {
        cargs.push("-mask_only");
    }
    if ((params["flip_orientation"] ?? false)) {
        cargs.push("-flip_orientation");
    }
    if ((params["no_distance"] ?? false)) {
        cargs.push("-no_dist");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_surf_mask_outputs(
    params: V3dSurfMaskParameters,
    execution: Execution,
): V3dSurfMaskOutputs {
    const ret: V3dSurfMaskOutputs = {
        root: execution.outputFile("."),
        output_mask: execution.outputFile([(params["prefix"] ?? null), ".m+orig.BRIK"].join('')),
        distance_dataset: execution.outputFile([(params["prefix"] ?? null), ".d+orig.BRIK"].join('')),
    };
    return ret;
}


/**
 * 3dSurfMask
 *
 * Creates volumetric datasets marking voxels based on their location relative to a surface.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSurfMaskOutputs`).
 */
function v_3d_surf_mask_execute(
    params: V3dSurfMaskParameters,
    runner: Runner | null = null,
): V3dSurfMaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SURF_MASK_METADATA);
    params = execution.params(params)
    const cargs = v_3d_surf_mask_cargs(params, execution)
    const ret = v_3d_surf_mask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dSurfMask
 *
 * Creates volumetric datasets marking voxels based on their location relative to a surface.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param surface_type Specify input surface.
 * @param surface_file Specify input surface filename.
 * @param prefix Prefix of output dataset.
 * @param grid_parent Specifies the grid for the output volume.
 * @param fill_method Fill method: SLOW or FAST (default: FAST).
 * @param surface_volume Specify the surface volume.
 * @param mask_only Produce an output dataset where voxels are 1 inside the surface and 0 outside.
 * @param flip_orientation Flip triangle winding of surface mesh.
 * @param no_distance Do not compute the distances, just the mask from the first step.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSurfMaskOutputs`).
 */
function v_3d_surf_mask(
    surface_type: string,
    surface_file: InputPathType,
    prefix: string,
    grid_parent: InputPathType,
    fill_method: string | null = null,
    surface_volume: InputPathType | null = null,
    mask_only: boolean = false,
    flip_orientation: boolean = false,
    no_distance: boolean = false,
    runner: Runner | null = null,
): V3dSurfMaskOutputs {
    const params = v_3d_surf_mask_params(surface_type, surface_file, prefix, grid_parent, fill_method, surface_volume, mask_only, flip_orientation, no_distance)
    return v_3d_surf_mask_execute(params, runner);
}


export {
      V3dSurfMaskOutputs,
      V_3D_SURF_MASK_METADATA,
      v_3d_surf_mask,
      v_3d_surf_mask_execute,
      v_3d_surf_mask_params,
};
