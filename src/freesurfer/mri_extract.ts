// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EXTRACT_METADATA: Metadata = {
    id: "e000b6af5ec93608d4809e5e4ae8dad354b9be33.boutiques",
    name: "mri_extract",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriExtractParameters {
    "@type": "freesurfer.mri_extract";
    "like_template"?: InputPathType | null | undefined;
    "src_volume": InputPathType;
    "dst_volume": InputPathType;
    "coordinates"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_extract": mri_extract_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_extract": mri_extract_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_extract(...)`.
 *
 * @interface
 */
interface MriExtractOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with extracted MRI data.
     */
    output_extracted_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param src_volume Source MRI volume file from which data will be extracted.
 * @param dst_volume The destination file where the extracted data will be saved.
 * @param like_template Extract region like the given template volume.
 * @param coordinates Coordinates and size of the extraction box: x0 y0 z0 dx dy dz.
 *
 * @returns Parameter dictionary
 */
function mri_extract_params(
    src_volume: InputPathType,
    dst_volume: InputPathType,
    like_template: InputPathType | null = null,
    coordinates: Array<number> | null = null,
): MriExtractParameters {
    const params = {
        "@type": "freesurfer.mri_extract" as const,
        "src_volume": src_volume,
        "dst_volume": dst_volume,
    };
    if (like_template !== null) {
        params["like_template"] = like_template;
    }
    if (coordinates !== null) {
        params["coordinates"] = coordinates;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_extract_cargs(
    params: MriExtractParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_extract");
    if ((params["like_template"] ?? null) !== null) {
        cargs.push(
            "-like",
            execution.inputFile((params["like_template"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["src_volume"] ?? null)));
    cargs.push(execution.inputFile((params["dst_volume"] ?? null)));
    if ((params["coordinates"] ?? null) !== null) {
        cargs.push(...(params["coordinates"] ?? null).map(String));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_extract_outputs(
    params: MriExtractParameters,
    execution: Execution,
): MriExtractOutputs {
    const ret: MriExtractOutputs = {
        root: execution.outputFile("."),
        output_extracted_volume: execution.outputFile([path.basename((params["dst_volume"] ?? null))].join('')),
    };
    return ret;
}


/**
 * mri_extract
 *
 * MRI data extraction tool for FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriExtractOutputs`).
 */
function mri_extract_execute(
    params: MriExtractParameters,
    runner: Runner | null = null,
): MriExtractOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EXTRACT_METADATA);
    params = execution.params(params)
    const cargs = mri_extract_cargs(params, execution)
    const ret = mri_extract_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_extract
 *
 * MRI data extraction tool for FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param src_volume Source MRI volume file from which data will be extracted.
 * @param dst_volume The destination file where the extracted data will be saved.
 * @param like_template Extract region like the given template volume.
 * @param coordinates Coordinates and size of the extraction box: x0 y0 z0 dx dy dz.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriExtractOutputs`).
 */
function mri_extract(
    src_volume: InputPathType,
    dst_volume: InputPathType,
    like_template: InputPathType | null = null,
    coordinates: Array<number> | null = null,
    runner: Runner | null = null,
): MriExtractOutputs {
    const params = mri_extract_params(src_volume, dst_volume, like_template, coordinates)
    return mri_extract_execute(params, runner);
}


export {
      MRI_EXTRACT_METADATA,
      MriExtractOutputs,
      MriExtractParameters,
      mri_extract,
      mri_extract_execute,
      mri_extract_params,
};
