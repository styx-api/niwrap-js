// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_ERODE_METADATA: Metadata = {
    id: "7906584e69081c776c13880cdd7ac9a11eb1e602.boutiques",
    name: "label-erode",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface LabelErodeParameters {
    "@type": "workbench.label-erode";
    "label": InputPathType;
    "surface": InputPathType;
    "erode_dist": number;
    "label_out": string;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_column_column"?: string | null | undefined;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.label-erode": label_erode_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.label-erode": label_erode_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `label_erode(...)`.
 *
 * @interface
 */
interface LabelErodeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output label file
     */
    label_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label the input label
 * @param surface the surface to erode on
 * @param erode_dist distance in mm to erode the labels
 * @param label_out the output label file
 * @param opt_roi_roi_metric assume values outside this roi are labeled: metric file, positive values denote vertices that have data
 * @param opt_column_column select a single column to erode: the column number or name
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function label_erode_params(
    label: InputPathType,
    surface: InputPathType,
    erode_dist: number,
    label_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
): LabelErodeParameters {
    const params = {
        "@type": "workbench.label-erode" as const,
        "label": label,
        "surface": surface,
        "erode_dist": erode_dist,
        "label_out": label_out,
    };
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label_erode_cargs(
    params: LabelErodeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-label-erode");
    cargs.push(execution.inputFile((params["label"] ?? null)));
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(String((params["erode_dist"] ?? null)));
    cargs.push((params["label_out"] ?? null));
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label_erode_outputs(
    params: LabelErodeParameters,
    execution: Execution,
): LabelErodeOutputs {
    const ret: LabelErodeOutputs = {
        root: execution.outputFile("."),
        label_out: execution.outputFile([(params["label_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Erode a label file.
 *
 * Around each vertex that is unlabeled, set surrounding vertices to unlabeled.  The surrounding vertices are all immediate neighbors and all vertices within the specified distance.
 *
 * Note that the -corrected-areas option uses an approximate correction for distance along the surface.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `LabelErodeOutputs`).
 */
function label_erode_execute(
    params: LabelErodeParameters,
    execution: Execution,
): LabelErodeOutputs {
    params = execution.params(params)
    const cargs = label_erode_cargs(params, execution)
    const ret = label_erode_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Erode a label file.
 *
 * Around each vertex that is unlabeled, set surrounding vertices to unlabeled.  The surrounding vertices are all immediate neighbors and all vertices within the specified distance.
 *
 * Note that the -corrected-areas option uses an approximate correction for distance along the surface.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param label the input label
 * @param surface the surface to erode on
 * @param erode_dist distance in mm to erode the labels
 * @param label_out the output label file
 * @param opt_roi_roi_metric assume values outside this roi are labeled: metric file, positive values denote vertices that have data
 * @param opt_column_column select a single column to erode: the column number or name
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelErodeOutputs`).
 */
function label_erode(
    label: InputPathType,
    surface: InputPathType,
    erode_dist: number,
    label_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    runner: Runner | null = null,
): LabelErodeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_ERODE_METADATA);
    const params = label_erode_params(label, surface, erode_dist, label_out, opt_roi_roi_metric, opt_column_column, opt_corrected_areas_area_metric)
    return label_erode_execute(params, execution);
}


export {
      LABEL_ERODE_METADATA,
      LabelErodeOutputs,
      LabelErodeParameters,
      label_erode,
      label_erode_cargs,
      label_erode_execute,
      label_erode_outputs,
      label_erode_params,
};
