// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DINFO_METADATA: Metadata = {
    id: "c0b7ae1e6ddb0557936952320119fb7853d0bfcd.boutiques",
    name: "3dinfo",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dinfoParameters {
    "__STYXTYPE__": "3dinfo";
    "orient": boolean;
    "Lextent": boolean;
    "Rextent": boolean;
    "Aextent": boolean;
    "Pextent": boolean;
    "Iextent": boolean;
    "Sextent": boolean;
    "all_names": boolean;
    "verb": boolean;
    "very_verbose": boolean;
    "short": boolean;
    "no_hist": boolean;
    "h": boolean;
    "help": boolean;
    "extreme_help": boolean;
    "h_view": boolean;
    "h_web": boolean;
    "h_find"?: string | null | undefined;
    "h_raw": boolean;
    "h_spx": boolean;
    "h_aspx": boolean;
    "all_opts": boolean;
    "label2index"?: string | null | undefined;
    "niml_hdr": boolean;
    "subbrick_info": boolean;
    "exists": boolean;
    "id": boolean;
    "is_atlas": boolean;
    "is_atlas_or_labeltable": boolean;
    "is_nifti": boolean;
    "dset_extension": boolean;
    "storage_mode": boolean;
    "space": boolean;
    "gen_space": boolean;
    "av_space": boolean;
    "nifti_code": boolean;
    "is_oblique": boolean;
    "handedness": boolean;
    "obliquity": boolean;
    "prefix": boolean;
    "prefix_noext": boolean;
    "ni": boolean;
    "nj": boolean;
    "nk": boolean;
    "nijk": boolean;
    "nv": boolean;
    "nt": boolean;
    "n4": boolean;
    "nvi": boolean;
    "nti": boolean;
    "ntimes": boolean;
    "max_node": boolean;
    "di": boolean;
    "dj": boolean;
    "dk": boolean;
    "d3": boolean;
    "adi": boolean;
    "adj": boolean;
    "adk": boolean;
    "ad3": boolean;
    "voxvol": boolean;
    "oi": boolean;
    "oj": boolean;
    "ok": boolean;
    "o3": boolean;
    "dcx": boolean;
    "dcy": boolean;
    "dcz": boolean;
    "dc3": boolean;
    "tr": boolean;
    "dmin": boolean;
    "dmax": boolean;
    "dminus": boolean;
    "dmaxus": boolean;
    "smode": boolean;
    "header_name": boolean;
    "brick_name": boolean;
    "iname": boolean;
    "extent": boolean;
    "fac": boolean;
    "label": boolean;
    "datum": boolean;
    "min": boolean;
    "max": boolean;
    "minus": boolean;
    "maxus": boolean;
    "labeltable": boolean;
    "labeltable_as_atlas_points": boolean;
    "atlas_points": boolean;
    "history": boolean;
    "slice_timing": boolean;
    "header_line": boolean;
    "hdr": boolean;
    "sb_delim"?: string | null | undefined;
    "NA_flag"?: string | null | undefined;
    "atr_delim"?: string | null | undefined;
    "aform_real": boolean;
    "aform_real_oneline": boolean;
    "aform_real_refit_ori": boolean;
    "is_aform_real_orth": boolean;
    "aform_orth": boolean;
    "perm_to_orient"?: string | null | undefined;
    "same_grid": boolean;
    "same_dim": boolean;
    "same_delta": boolean;
    "same_orient": boolean;
    "same_center": boolean;
    "same_obl": boolean;
    "same_all_grid": boolean;
    "val_diff": boolean;
    "sval_diff": boolean;
    "monog_pairs": boolean;
    "dataset": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dinfo": v_3dinfo_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dinfo(...)`.
 *
 * @interface
 */
interface V3dinfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Sort-of-useful information from a 3D dataset's header
     */
    info: string[];
}


function v_3dinfo_params(
    dataset: Array<InputPathType>,
    orient: boolean = false,
    lextent: boolean = false,
    rextent: boolean = false,
    aextent: boolean = false,
    pextent: boolean = false,
    iextent: boolean = false,
    sextent: boolean = false,
    all_names: boolean = false,
    verb: boolean = false,
    very_verbose: boolean = false,
    short: boolean = false,
    no_hist: boolean = false,
    h: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    h_view: boolean = false,
    h_web: boolean = false,
    h_find: string | null = null,
    h_raw: boolean = false,
    h_spx: boolean = false,
    h_aspx: boolean = false,
    all_opts: boolean = false,
    label2index: string | null = null,
    niml_hdr: boolean = false,
    subbrick_info: boolean = false,
    exists: boolean = false,
    id: boolean = false,
    is_atlas: boolean = false,
    is_atlas_or_labeltable: boolean = false,
    is_nifti: boolean = false,
    dset_extension: boolean = false,
    storage_mode: boolean = false,
    space: boolean = false,
    gen_space: boolean = false,
    av_space: boolean = false,
    nifti_code: boolean = false,
    is_oblique: boolean = false,
    handedness: boolean = false,
    obliquity: boolean = false,
    prefix: boolean = false,
    prefix_noext: boolean = false,
    ni: boolean = false,
    nj: boolean = false,
    nk: boolean = false,
    nijk: boolean = false,
    nv: boolean = false,
    nt: boolean = false,
    n4: boolean = false,
    nvi: boolean = false,
    nti: boolean = false,
    ntimes: boolean = false,
    max_node: boolean = false,
    di: boolean = false,
    dj: boolean = false,
    dk: boolean = false,
    d3: boolean = false,
    adi: boolean = false,
    adj: boolean = false,
    adk: boolean = false,
    ad3: boolean = false,
    voxvol: boolean = false,
    oi: boolean = false,
    oj: boolean = false,
    ok: boolean = false,
    o3: boolean = false,
    dcx: boolean = false,
    dcy: boolean = false,
    dcz: boolean = false,
    dc3: boolean = false,
    tr: boolean = false,
    dmin: boolean = false,
    dmax: boolean = false,
    dminus: boolean = false,
    dmaxus: boolean = false,
    smode: boolean = false,
    header_name: boolean = false,
    brick_name: boolean = false,
    iname: boolean = false,
    extent: boolean = false,
    fac: boolean = false,
    label: boolean = false,
    datum: boolean = false,
    min: boolean = false,
    max: boolean = false,
    minus: boolean = false,
    maxus: boolean = false,
    labeltable: boolean = false,
    labeltable_as_atlas_points: boolean = false,
    atlas_points: boolean = false,
    history: boolean = false,
    slice_timing: boolean = false,
    header_line: boolean = false,
    hdr: boolean = false,
    sb_delim: string | null = null,
    na_flag: string | null = null,
    atr_delim: string | null = null,
    aform_real: boolean = false,
    aform_real_oneline: boolean = false,
    aform_real_refit_ori: boolean = false,
    is_aform_real_orth: boolean = false,
    aform_orth: boolean = false,
    perm_to_orient: string | null = null,
    same_grid: boolean = false,
    same_dim: boolean = false,
    same_delta: boolean = false,
    same_orient: boolean = false,
    same_center: boolean = false,
    same_obl: boolean = false,
    same_all_grid: boolean = false,
    val_diff: boolean = false,
    sval_diff: boolean = false,
    monog_pairs: boolean = false,
): V3dinfoParameters {
    /**
     * Build parameters.
    
     * @param dataset Datasets to retrieve information from
     * @param orient Value of orientation string. For example, LPI means: i direction grows from Left(negative) to Right(positive). j direction grows from Posterior (neg.) to Anterior (pos.) k direction grows from Inferior (neg.) to Superior (pos.)
     * @param lextent Extent along L
     * @param rextent Extent along R
     * @param aextent Extent along A
     * @param pextent Extent along P
     * @param iextent Extent along I
     * @param sextent Extent along S
     * @param all_names Value of various dset structures handling filenames
     * @param verb Print out lots of information
     * @param very_verbose Print out even more information including slice time offsets
     * @param short Print out less information (default)
     * @param no_hist Omit the HISTORY text
     * @param h Mini help
     * @param help Display entire help output
     * @param extreme_help Extreme help
     * @param h_view Open help in text editor
     * @param h_web Open help in web browser
     * @param h_find Look for lines in help output that match WORD
     * @param h_raw Display unedited help string
     * @param h_spx Help string in sphinx format without autoformatting options
     * @param h_aspx Help string in sphinx format with autoformatting options
     * @param all_opts Try to identify all options for the program from the help output
     * @param label2index Output index corresponding to label
     * @param niml_hdr Output entire NIML-formatted header
     * @param subbrick_info Output only sub-brick part of information
     * @param exists 1 if dset is loadable, 0 otherwise. This works on prefix also.
     * @param id Idcodestring of dset
     * @param is_atlas 1 if dset is an atlas.
     * @param is_atlas_or_labeltable 1 if dset has an atlas or labeltable.
     * @param is_nifti 1 if dset is NIFTI format, 0 otherwise
     * @param dset_extension Show filename extension for valid dataset (e.g. .nii.gz)
     * @param storage_mode Show internal storage mode of dataset (e.g. NIFTI)
     * @param space Dataset's space
     * @param gen_space Dataset's generic space
     * @param av_space AFNI format's view extension for the space
     * @param nifti_code What AFNI would use for an output NIFTI (q)sform_code
     * @param is_oblique 1 if dset is oblique
     * @param handedness L if orientation is Left handed, R if it is right handed
     * @param obliquity Angle from plumb direction. Angles of 0 (or close) are for cardinal orientations
     * @param prefix Return the prefix
     * @param prefix_noext Return the prefix without extensions
     * @param ni Return the number of voxels in i dimension
     * @param nj Return the number of voxels in j dimension
     * @param nk Return the number of voxels in k dimension
     * @param nijk Return ni*nj*nk
     * @param nv Return number of points in time or the number of sub-bricks
     * @param nt Same as -nv
     * @param n4 Same as -ni -nj -nk -nv
     * @param nvi The maximum sub-brick index (= nv -1 )
     * @param nti Same as -nvi
     * @param ntimes Return number of sub-bricks points in time. This is an option for debugging use, stay away from it.
     * @param max_node For a surface-based dset, return the maximum node index
     * @param di Signed displacement per voxel along i direction, aka dx
     * @param dj Signed displacement per voxel along j direction, aka dy
     * @param dk Signed displacement per voxel along k direction, aka dz
     * @param d3 Same as -di -dj -dk
     * @param adi Voxel size along i direction (abs(di))
     * @param adj Voxel size along j direction (abs(dj))
     * @param adk Voxel size along k direction (abs(dk))
     * @param ad3 Same as -adi -adj -adk
     * @param voxvol Voxel volume in cubic millimeters
     * @param oi Volume origin along the i direction
     * @param oj Volume origin along the j direction
     * @param ok Volume origin along the k direction
     * @param o3 Same as -oi -oj -ok
     * @param dcx Volumetric center in x direction (DICOM coordinates)
     * @param dcy Volumetric center in y direction (DICOM coordinates)
     * @param dcz Volumetric center in z direction (DICOM coordinates)
     * @param dc3 Same as -dcx -dcy -dcz
     * @param tr The TR value in seconds.
     * @param dmin The dataset's minimum value, scaled by fac
     * @param dmax The dataset's maximum value, scaled by fac
     * @param dminus The dataset's minimum value, unscaled.
     * @param dmaxus The dataset's maximum value, unscaled.
     * @param smode Dset storage mode string.
     * @param header_name Value of dset structure (sub)field 'header_name'
     * @param brick_name Value of dset structure (sub)field 'brick_name'
     * @param iname Name of dset as input on the command line
     * @param extent The spatial extent of the dataset along R, L, A, P, I and S
     * @param fac Return the float scaling factor
     * @param label The label of each sub-brick
     * @param datum The data storage type
     * @param min The minimum value, scaled by fac
     * @param max The maximum value, scaled by fac
     * @param minus The minimum value, unscaled
     * @param maxus The maximum value, unscaled
     * @param labeltable Show label table, if any
     * @param labeltable_as_atlas_points Show label table in atlas point format
     * @param atlas_points Show atlas points list, if any
     * @param history History note
     * @param slice_timing Show slice timing
     * @param header_line Output as the first line the names of attributes in each field (column)
     * @param hdr Same as -header_line
     * @param sb_delim Delimiter string between sub-brick values. Default SB_DELIM is '|'
     * @param na_flag String to use when a field is not found or not applicable. Default is 'NA'
     * @param atr_delim Delimiter string between attributes. Default ATR_DELIM is the tab character
     * @param aform_real Display full 3x4 'aform_real' matrix (AFNI's RAI equivalent of the sform matrix in NIFTI, may contain obliquity info), with comment line first
     * @param aform_real_oneline Display full 'aform_real' matrix (see '-aform_real') as 1 row of 12 numbers. No additional comment
     * @param aform_real_refit_ori Display full 3x4 'aform_real' matrix (see '-aform_real') *if* the dset were reoriented (via 3drefit) to new orient XXX. Includes comment line first
     * @param is_aform_real_orth If true, aform_real == aform_orth, which should be a very common occurrence
     * @param aform_orth Display full 3x4 'aform_orth' matrix (AFNI's RAI matrix equivalent of the NIFTI quaternion, which may contain obliquity info), with comment line first. This matrix is the orthogonalized form of aform_real, and very often AFNI-produced dsets, we will have: aform_orth == aform_real
     * @param perm_to_orient Display 3x3 permutation matrix to go from the dset's current orientation to the YYY orient
     * @param same_grid Output 1 if the grid is identical between two dsets, 0 otherwise. For -same_grid to be 1, all of -same_dim, -same_delta, -same_orient, -same_center, and -same_obl must return 1
     * @param same_dim 1 if dimensions (nx, ny, nz) are the same between dset pairs
     * @param same_delta 1 if voxel sizes are the same between dset pairs
     * @param same_orient 1 if orientation is the same between dset pairs
     * @param same_center 1 if geometric center is the same between dset pairs
     * @param same_obl 1 if obliquity is the same between dset pairs
     * @param same_all_grid Equivalent to listing all of -same_dim, -same_delta, -same_orient, -same_center, and -same_obl on the command line
     * @param val_diff Output the sum of absolute differences of all voxels in the dataset pair. A -1.0 value indicates a grid mismatch between volume pairs
     * @param sval_diff Same as -val_diff, but the sum is divided (scaled) by the total number of voxels that are not zero in at least one of the two datasets
     * @param monog_pairs Instead of pairing each dset with the first, pair each couple separately. This requires you to have an even number of dsets on the command line
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dinfo" as const,
        "orient": orient,
        "Lextent": lextent,
        "Rextent": rextent,
        "Aextent": aextent,
        "Pextent": pextent,
        "Iextent": iextent,
        "Sextent": sextent,
        "all_names": all_names,
        "verb": verb,
        "very_verbose": very_verbose,
        "short": short,
        "no_hist": no_hist,
        "h": h,
        "help": help,
        "extreme_help": extreme_help,
        "h_view": h_view,
        "h_web": h_web,
        "h_raw": h_raw,
        "h_spx": h_spx,
        "h_aspx": h_aspx,
        "all_opts": all_opts,
        "niml_hdr": niml_hdr,
        "subbrick_info": subbrick_info,
        "exists": exists,
        "id": id,
        "is_atlas": is_atlas,
        "is_atlas_or_labeltable": is_atlas_or_labeltable,
        "is_nifti": is_nifti,
        "dset_extension": dset_extension,
        "storage_mode": storage_mode,
        "space": space,
        "gen_space": gen_space,
        "av_space": av_space,
        "nifti_code": nifti_code,
        "is_oblique": is_oblique,
        "handedness": handedness,
        "obliquity": obliquity,
        "prefix": prefix,
        "prefix_noext": prefix_noext,
        "ni": ni,
        "nj": nj,
        "nk": nk,
        "nijk": nijk,
        "nv": nv,
        "nt": nt,
        "n4": n4,
        "nvi": nvi,
        "nti": nti,
        "ntimes": ntimes,
        "max_node": max_node,
        "di": di,
        "dj": dj,
        "dk": dk,
        "d3": d3,
        "adi": adi,
        "adj": adj,
        "adk": adk,
        "ad3": ad3,
        "voxvol": voxvol,
        "oi": oi,
        "oj": oj,
        "ok": ok,
        "o3": o3,
        "dcx": dcx,
        "dcy": dcy,
        "dcz": dcz,
        "dc3": dc3,
        "tr": tr,
        "dmin": dmin,
        "dmax": dmax,
        "dminus": dminus,
        "dmaxus": dmaxus,
        "smode": smode,
        "header_name": header_name,
        "brick_name": brick_name,
        "iname": iname,
        "extent": extent,
        "fac": fac,
        "label": label,
        "datum": datum,
        "min": min,
        "max": max,
        "minus": minus,
        "maxus": maxus,
        "labeltable": labeltable,
        "labeltable_as_atlas_points": labeltable_as_atlas_points,
        "atlas_points": atlas_points,
        "history": history,
        "slice_timing": slice_timing,
        "header_line": header_line,
        "hdr": hdr,
        "aform_real": aform_real,
        "aform_real_oneline": aform_real_oneline,
        "aform_real_refit_ori": aform_real_refit_ori,
        "is_aform_real_orth": is_aform_real_orth,
        "aform_orth": aform_orth,
        "same_grid": same_grid,
        "same_dim": same_dim,
        "same_delta": same_delta,
        "same_orient": same_orient,
        "same_center": same_center,
        "same_obl": same_obl,
        "same_all_grid": same_all_grid,
        "val_diff": val_diff,
        "sval_diff": sval_diff,
        "monog_pairs": monog_pairs,
        "dataset": dataset,
    };
    if (h_find !== null) {
        params["h_find"] = h_find;
    }
    if (label2index !== null) {
        params["label2index"] = label2index;
    }
    if (sb_delim !== null) {
        params["sb_delim"] = sb_delim;
    }
    if (na_flag !== null) {
        params["NA_flag"] = na_flag;
    }
    if (atr_delim !== null) {
        params["atr_delim"] = atr_delim;
    }
    if (perm_to_orient !== null) {
        params["perm_to_orient"] = perm_to_orient;
    }
    return params;
}


function v_3dinfo_cargs(
    params: V3dinfoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dinfo");
    if ((params["orient"] ?? null)) {
        cargs.push("-orient");
    }
    if ((params["Lextent"] ?? null)) {
        cargs.push("-Lextent");
    }
    if ((params["Rextent"] ?? null)) {
        cargs.push("-Rextent");
    }
    if ((params["Aextent"] ?? null)) {
        cargs.push("-Aextent");
    }
    if ((params["Pextent"] ?? null)) {
        cargs.push("-Pextent");
    }
    if ((params["Iextent"] ?? null)) {
        cargs.push("-Iextent");
    }
    if ((params["Sextent"] ?? null)) {
        cargs.push("-Sextent");
    }
    if ((params["all_names"] ?? null)) {
        cargs.push("-all_names");
    }
    if ((params["verb"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["very_verbose"] ?? null)) {
        cargs.push("-VERB");
    }
    if ((params["short"] ?? null)) {
        cargs.push("-short");
    }
    if ((params["no_hist"] ?? null)) {
        cargs.push("-no_hist");
    }
    if ((params["h"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["extreme_help"] ?? null)) {
        cargs.push("-HELP");
    }
    if ((params["h_view"] ?? null)) {
        cargs.push("-h_view");
    }
    if ((params["h_web"] ?? null)) {
        cargs.push("-h_web");
    }
    if ((params["h_find"] ?? null) !== null) {
        cargs.push(
            "-h_find",
            (params["h_find"] ?? null)
        );
    }
    if ((params["h_raw"] ?? null)) {
        cargs.push("-h_raw");
    }
    if ((params["h_spx"] ?? null)) {
        cargs.push("-h_spx");
    }
    if ((params["h_aspx"] ?? null)) {
        cargs.push("-h_aspx");
    }
    if ((params["all_opts"] ?? null)) {
        cargs.push("-all_opts");
    }
    if ((params["label2index"] ?? null) !== null) {
        cargs.push(
            "-label2index",
            (params["label2index"] ?? null)
        );
    }
    if ((params["niml_hdr"] ?? null)) {
        cargs.push("-niml_hdr");
    }
    if ((params["subbrick_info"] ?? null)) {
        cargs.push("-subbrick_info");
    }
    if ((params["exists"] ?? null)) {
        cargs.push("-exists");
    }
    if ((params["id"] ?? null)) {
        cargs.push("-id");
    }
    if ((params["is_atlas"] ?? null)) {
        cargs.push("-is_atlas");
    }
    if ((params["is_atlas_or_labeltable"] ?? null)) {
        cargs.push("-is_atlas_or_labeltable");
    }
    if ((params["is_nifti"] ?? null)) {
        cargs.push("-is_nifti");
    }
    if ((params["dset_extension"] ?? null)) {
        cargs.push("-dset_extension");
    }
    if ((params["storage_mode"] ?? null)) {
        cargs.push("-storage_mode");
    }
    if ((params["space"] ?? null)) {
        cargs.push("-space");
    }
    if ((params["gen_space"] ?? null)) {
        cargs.push("-gen_space");
    }
    if ((params["av_space"] ?? null)) {
        cargs.push("-av_space");
    }
    if ((params["nifti_code"] ?? null)) {
        cargs.push("-nifti_code");
    }
    if ((params["is_oblique"] ?? null)) {
        cargs.push("-is_oblique");
    }
    if ((params["handedness"] ?? null)) {
        cargs.push("-handedness");
    }
    if ((params["obliquity"] ?? null)) {
        cargs.push("-obliquity");
    }
    if ((params["prefix"] ?? null)) {
        cargs.push("-prefix");
    }
    if ((params["prefix_noext"] ?? null)) {
        cargs.push("-prefix_noext");
    }
    if ((params["ni"] ?? null)) {
        cargs.push("-ni");
    }
    if ((params["nj"] ?? null)) {
        cargs.push("-nj");
    }
    if ((params["nk"] ?? null)) {
        cargs.push("-nk");
    }
    if ((params["nijk"] ?? null)) {
        cargs.push("-nijk");
    }
    if ((params["nv"] ?? null)) {
        cargs.push("-nv");
    }
    if ((params["nt"] ?? null)) {
        cargs.push("-nt");
    }
    if ((params["n4"] ?? null)) {
        cargs.push("-n4");
    }
    if ((params["nvi"] ?? null)) {
        cargs.push("-nvi");
    }
    if ((params["nti"] ?? null)) {
        cargs.push("-nti");
    }
    if ((params["ntimes"] ?? null)) {
        cargs.push("-ntimes");
    }
    if ((params["max_node"] ?? null)) {
        cargs.push("-max_node");
    }
    if ((params["di"] ?? null)) {
        cargs.push("-di");
    }
    if ((params["dj"] ?? null)) {
        cargs.push("-dj");
    }
    if ((params["dk"] ?? null)) {
        cargs.push("-dk");
    }
    if ((params["d3"] ?? null)) {
        cargs.push("-d3");
    }
    if ((params["adi"] ?? null)) {
        cargs.push("-adi");
    }
    if ((params["adj"] ?? null)) {
        cargs.push("-adj");
    }
    if ((params["adk"] ?? null)) {
        cargs.push("-adk");
    }
    if ((params["ad3"] ?? null)) {
        cargs.push("-ad3");
    }
    if ((params["voxvol"] ?? null)) {
        cargs.push("-voxvol");
    }
    if ((params["oi"] ?? null)) {
        cargs.push("-oi");
    }
    if ((params["oj"] ?? null)) {
        cargs.push("-oj");
    }
    if ((params["ok"] ?? null)) {
        cargs.push("-ok");
    }
    if ((params["o3"] ?? null)) {
        cargs.push("-o3");
    }
    if ((params["dcx"] ?? null)) {
        cargs.push("-dcx");
    }
    if ((params["dcy"] ?? null)) {
        cargs.push("-dcy");
    }
    if ((params["dcz"] ?? null)) {
        cargs.push("-dcz");
    }
    if ((params["dc3"] ?? null)) {
        cargs.push("-dc3");
    }
    if ((params["tr"] ?? null)) {
        cargs.push("-tr");
    }
    if ((params["dmin"] ?? null)) {
        cargs.push("-dmin");
    }
    if ((params["dmax"] ?? null)) {
        cargs.push("-dmax");
    }
    if ((params["dminus"] ?? null)) {
        cargs.push("-dminus");
    }
    if ((params["dmaxus"] ?? null)) {
        cargs.push("-dmaxus");
    }
    if ((params["smode"] ?? null)) {
        cargs.push("-smode");
    }
    if ((params["header_name"] ?? null)) {
        cargs.push("-header_name");
    }
    if ((params["brick_name"] ?? null)) {
        cargs.push("-brick_name");
    }
    if ((params["iname"] ?? null)) {
        cargs.push("-iname");
    }
    if ((params["extent"] ?? null)) {
        cargs.push("-extent");
    }
    if ((params["fac"] ?? null)) {
        cargs.push("-fac");
    }
    if ((params["label"] ?? null)) {
        cargs.push("-label");
    }
    if ((params["datum"] ?? null)) {
        cargs.push("-datum");
    }
    if ((params["min"] ?? null)) {
        cargs.push("-min");
    }
    if ((params["max"] ?? null)) {
        cargs.push("-max");
    }
    if ((params["minus"] ?? null)) {
        cargs.push("-minus");
    }
    if ((params["maxus"] ?? null)) {
        cargs.push("-maxus");
    }
    if ((params["labeltable"] ?? null)) {
        cargs.push("-labeltable");
    }
    if ((params["labeltable_as_atlas_points"] ?? null)) {
        cargs.push("-labeltable_as_atlas_points");
    }
    if ((params["atlas_points"] ?? null)) {
        cargs.push("-atlas_points");
    }
    if ((params["history"] ?? null)) {
        cargs.push("-history");
    }
    if ((params["slice_timing"] ?? null)) {
        cargs.push("-slice_timing");
    }
    if ((params["header_line"] ?? null)) {
        cargs.push("-header_line");
    }
    if ((params["hdr"] ?? null)) {
        cargs.push("-hdr");
    }
    if ((params["sb_delim"] ?? null) !== null) {
        cargs.push(
            "-sb_delim",
            (params["sb_delim"] ?? null)
        );
    }
    if ((params["NA_flag"] ?? null) !== null) {
        cargs.push(
            "-NA_flag",
            (params["NA_flag"] ?? null)
        );
    }
    if ((params["atr_delim"] ?? null) !== null) {
        cargs.push(
            "-atr_delim",
            (params["atr_delim"] ?? null)
        );
    }
    if ((params["aform_real"] ?? null)) {
        cargs.push("-aform_real");
    }
    if ((params["aform_real_oneline"] ?? null)) {
        cargs.push("-aform_real_oneline");
    }
    if ((params["aform_real_refit_ori"] ?? null)) {
        cargs.push("-aform_real_refit_ori");
    }
    if ((params["is_aform_real_orth"] ?? null)) {
        cargs.push("-is_aform_real_orth");
    }
    if ((params["aform_orth"] ?? null)) {
        cargs.push("-aform_orth");
    }
    if ((params["perm_to_orient"] ?? null) !== null) {
        cargs.push(
            "-perm_to_orient",
            (params["perm_to_orient"] ?? null)
        );
    }
    if ((params["same_grid"] ?? null)) {
        cargs.push("-same_grid");
    }
    if ((params["same_dim"] ?? null)) {
        cargs.push("-same_dim");
    }
    if ((params["same_delta"] ?? null)) {
        cargs.push("-same_delta");
    }
    if ((params["same_orient"] ?? null)) {
        cargs.push("-same_orient");
    }
    if ((params["same_center"] ?? null)) {
        cargs.push("-same_center");
    }
    if ((params["same_obl"] ?? null)) {
        cargs.push("-same_obl");
    }
    if ((params["same_all_grid"] ?? null)) {
        cargs.push("-same_all_grid");
    }
    if ((params["val_diff"] ?? null)) {
        cargs.push("-val_diff");
    }
    if ((params["sval_diff"] ?? null)) {
        cargs.push("-sval_diff");
    }
    if ((params["monog_pairs"] ?? null)) {
        cargs.push("-monog_pairs");
    }
    cargs.push(...(params["dataset"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function v_3dinfo_outputs(
    params: V3dinfoParameters,
    execution: Execution,
): V3dinfoOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dinfoOutputs = {
        root: execution.outputFile("."),
        info: [],
    };
    return ret;
}


function v_3dinfo_execute(
    params: V3dinfoParameters,
    execution: Execution,
): V3dinfoOutputs {
    /**
     * Prints out sort-of-useful information from a 3D dataset's header.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dinfoOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dinfo_cargs(params, execution)
    const ret = v_3dinfo_outputs(params, execution)
    execution.run(cargs, s => ret.info.push(s));
    return ret;
}


function v_3dinfo(
    dataset: Array<InputPathType>,
    orient: boolean = false,
    lextent: boolean = false,
    rextent: boolean = false,
    aextent: boolean = false,
    pextent: boolean = false,
    iextent: boolean = false,
    sextent: boolean = false,
    all_names: boolean = false,
    verb: boolean = false,
    very_verbose: boolean = false,
    short: boolean = false,
    no_hist: boolean = false,
    h: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    h_view: boolean = false,
    h_web: boolean = false,
    h_find: string | null = null,
    h_raw: boolean = false,
    h_spx: boolean = false,
    h_aspx: boolean = false,
    all_opts: boolean = false,
    label2index: string | null = null,
    niml_hdr: boolean = false,
    subbrick_info: boolean = false,
    exists: boolean = false,
    id: boolean = false,
    is_atlas: boolean = false,
    is_atlas_or_labeltable: boolean = false,
    is_nifti: boolean = false,
    dset_extension: boolean = false,
    storage_mode: boolean = false,
    space: boolean = false,
    gen_space: boolean = false,
    av_space: boolean = false,
    nifti_code: boolean = false,
    is_oblique: boolean = false,
    handedness: boolean = false,
    obliquity: boolean = false,
    prefix: boolean = false,
    prefix_noext: boolean = false,
    ni: boolean = false,
    nj: boolean = false,
    nk: boolean = false,
    nijk: boolean = false,
    nv: boolean = false,
    nt: boolean = false,
    n4: boolean = false,
    nvi: boolean = false,
    nti: boolean = false,
    ntimes: boolean = false,
    max_node: boolean = false,
    di: boolean = false,
    dj: boolean = false,
    dk: boolean = false,
    d3: boolean = false,
    adi: boolean = false,
    adj: boolean = false,
    adk: boolean = false,
    ad3: boolean = false,
    voxvol: boolean = false,
    oi: boolean = false,
    oj: boolean = false,
    ok: boolean = false,
    o3: boolean = false,
    dcx: boolean = false,
    dcy: boolean = false,
    dcz: boolean = false,
    dc3: boolean = false,
    tr: boolean = false,
    dmin: boolean = false,
    dmax: boolean = false,
    dminus: boolean = false,
    dmaxus: boolean = false,
    smode: boolean = false,
    header_name: boolean = false,
    brick_name: boolean = false,
    iname: boolean = false,
    extent: boolean = false,
    fac: boolean = false,
    label: boolean = false,
    datum: boolean = false,
    min: boolean = false,
    max: boolean = false,
    minus: boolean = false,
    maxus: boolean = false,
    labeltable: boolean = false,
    labeltable_as_atlas_points: boolean = false,
    atlas_points: boolean = false,
    history: boolean = false,
    slice_timing: boolean = false,
    header_line: boolean = false,
    hdr: boolean = false,
    sb_delim: string | null = null,
    na_flag: string | null = null,
    atr_delim: string | null = null,
    aform_real: boolean = false,
    aform_real_oneline: boolean = false,
    aform_real_refit_ori: boolean = false,
    is_aform_real_orth: boolean = false,
    aform_orth: boolean = false,
    perm_to_orient: string | null = null,
    same_grid: boolean = false,
    same_dim: boolean = false,
    same_delta: boolean = false,
    same_orient: boolean = false,
    same_center: boolean = false,
    same_obl: boolean = false,
    same_all_grid: boolean = false,
    val_diff: boolean = false,
    sval_diff: boolean = false,
    monog_pairs: boolean = false,
    runner: Runner | null = null,
): V3dinfoOutputs {
    /**
     * Prints out sort-of-useful information from a 3D dataset's header.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dataset Datasets to retrieve information from
     * @param orient Value of orientation string. For example, LPI means: i direction grows from Left(negative) to Right(positive). j direction grows from Posterior (neg.) to Anterior (pos.) k direction grows from Inferior (neg.) to Superior (pos.)
     * @param lextent Extent along L
     * @param rextent Extent along R
     * @param aextent Extent along A
     * @param pextent Extent along P
     * @param iextent Extent along I
     * @param sextent Extent along S
     * @param all_names Value of various dset structures handling filenames
     * @param verb Print out lots of information
     * @param very_verbose Print out even more information including slice time offsets
     * @param short Print out less information (default)
     * @param no_hist Omit the HISTORY text
     * @param h Mini help
     * @param help Display entire help output
     * @param extreme_help Extreme help
     * @param h_view Open help in text editor
     * @param h_web Open help in web browser
     * @param h_find Look for lines in help output that match WORD
     * @param h_raw Display unedited help string
     * @param h_spx Help string in sphinx format without autoformatting options
     * @param h_aspx Help string in sphinx format with autoformatting options
     * @param all_opts Try to identify all options for the program from the help output
     * @param label2index Output index corresponding to label
     * @param niml_hdr Output entire NIML-formatted header
     * @param subbrick_info Output only sub-brick part of information
     * @param exists 1 if dset is loadable, 0 otherwise. This works on prefix also.
     * @param id Idcodestring of dset
     * @param is_atlas 1 if dset is an atlas.
     * @param is_atlas_or_labeltable 1 if dset has an atlas or labeltable.
     * @param is_nifti 1 if dset is NIFTI format, 0 otherwise
     * @param dset_extension Show filename extension for valid dataset (e.g. .nii.gz)
     * @param storage_mode Show internal storage mode of dataset (e.g. NIFTI)
     * @param space Dataset's space
     * @param gen_space Dataset's generic space
     * @param av_space AFNI format's view extension for the space
     * @param nifti_code What AFNI would use for an output NIFTI (q)sform_code
     * @param is_oblique 1 if dset is oblique
     * @param handedness L if orientation is Left handed, R if it is right handed
     * @param obliquity Angle from plumb direction. Angles of 0 (or close) are for cardinal orientations
     * @param prefix Return the prefix
     * @param prefix_noext Return the prefix without extensions
     * @param ni Return the number of voxels in i dimension
     * @param nj Return the number of voxels in j dimension
     * @param nk Return the number of voxels in k dimension
     * @param nijk Return ni*nj*nk
     * @param nv Return number of points in time or the number of sub-bricks
     * @param nt Same as -nv
     * @param n4 Same as -ni -nj -nk -nv
     * @param nvi The maximum sub-brick index (= nv -1 )
     * @param nti Same as -nvi
     * @param ntimes Return number of sub-bricks points in time. This is an option for debugging use, stay away from it.
     * @param max_node For a surface-based dset, return the maximum node index
     * @param di Signed displacement per voxel along i direction, aka dx
     * @param dj Signed displacement per voxel along j direction, aka dy
     * @param dk Signed displacement per voxel along k direction, aka dz
     * @param d3 Same as -di -dj -dk
     * @param adi Voxel size along i direction (abs(di))
     * @param adj Voxel size along j direction (abs(dj))
     * @param adk Voxel size along k direction (abs(dk))
     * @param ad3 Same as -adi -adj -adk
     * @param voxvol Voxel volume in cubic millimeters
     * @param oi Volume origin along the i direction
     * @param oj Volume origin along the j direction
     * @param ok Volume origin along the k direction
     * @param o3 Same as -oi -oj -ok
     * @param dcx Volumetric center in x direction (DICOM coordinates)
     * @param dcy Volumetric center in y direction (DICOM coordinates)
     * @param dcz Volumetric center in z direction (DICOM coordinates)
     * @param dc3 Same as -dcx -dcy -dcz
     * @param tr The TR value in seconds.
     * @param dmin The dataset's minimum value, scaled by fac
     * @param dmax The dataset's maximum value, scaled by fac
     * @param dminus The dataset's minimum value, unscaled.
     * @param dmaxus The dataset's maximum value, unscaled.
     * @param smode Dset storage mode string.
     * @param header_name Value of dset structure (sub)field 'header_name'
     * @param brick_name Value of dset structure (sub)field 'brick_name'
     * @param iname Name of dset as input on the command line
     * @param extent The spatial extent of the dataset along R, L, A, P, I and S
     * @param fac Return the float scaling factor
     * @param label The label of each sub-brick
     * @param datum The data storage type
     * @param min The minimum value, scaled by fac
     * @param max The maximum value, scaled by fac
     * @param minus The minimum value, unscaled
     * @param maxus The maximum value, unscaled
     * @param labeltable Show label table, if any
     * @param labeltable_as_atlas_points Show label table in atlas point format
     * @param atlas_points Show atlas points list, if any
     * @param history History note
     * @param slice_timing Show slice timing
     * @param header_line Output as the first line the names of attributes in each field (column)
     * @param hdr Same as -header_line
     * @param sb_delim Delimiter string between sub-brick values. Default SB_DELIM is '|'
     * @param na_flag String to use when a field is not found or not applicable. Default is 'NA'
     * @param atr_delim Delimiter string between attributes. Default ATR_DELIM is the tab character
     * @param aform_real Display full 3x4 'aform_real' matrix (AFNI's RAI equivalent of the sform matrix in NIFTI, may contain obliquity info), with comment line first
     * @param aform_real_oneline Display full 'aform_real' matrix (see '-aform_real') as 1 row of 12 numbers. No additional comment
     * @param aform_real_refit_ori Display full 3x4 'aform_real' matrix (see '-aform_real') *if* the dset were reoriented (via 3drefit) to new orient XXX. Includes comment line first
     * @param is_aform_real_orth If true, aform_real == aform_orth, which should be a very common occurrence
     * @param aform_orth Display full 3x4 'aform_orth' matrix (AFNI's RAI matrix equivalent of the NIFTI quaternion, which may contain obliquity info), with comment line first. This matrix is the orthogonalized form of aform_real, and very often AFNI-produced dsets, we will have: aform_orth == aform_real
     * @param perm_to_orient Display 3x3 permutation matrix to go from the dset's current orientation to the YYY orient
     * @param same_grid Output 1 if the grid is identical between two dsets, 0 otherwise. For -same_grid to be 1, all of -same_dim, -same_delta, -same_orient, -same_center, and -same_obl must return 1
     * @param same_dim 1 if dimensions (nx, ny, nz) are the same between dset pairs
     * @param same_delta 1 if voxel sizes are the same between dset pairs
     * @param same_orient 1 if orientation is the same between dset pairs
     * @param same_center 1 if geometric center is the same between dset pairs
     * @param same_obl 1 if obliquity is the same between dset pairs
     * @param same_all_grid Equivalent to listing all of -same_dim, -same_delta, -same_orient, -same_center, and -same_obl on the command line
     * @param val_diff Output the sum of absolute differences of all voxels in the dataset pair. A -1.0 value indicates a grid mismatch between volume pairs
     * @param sval_diff Same as -val_diff, but the sum is divided (scaled) by the total number of voxels that are not zero in at least one of the two datasets
     * @param monog_pairs Instead of pairing each dset with the first, pair each couple separately. This requires you to have an even number of dsets on the command line
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dinfoOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DINFO_METADATA);
    const params = v_3dinfo_params(dataset, orient, lextent, rextent, aextent, pextent, iextent, sextent, all_names, verb, very_verbose, short, no_hist, h, help, extreme_help, h_view, h_web, h_find, h_raw, h_spx, h_aspx, all_opts, label2index, niml_hdr, subbrick_info, exists, id, is_atlas, is_atlas_or_labeltable, is_nifti, dset_extension, storage_mode, space, gen_space, av_space, nifti_code, is_oblique, handedness, obliquity, prefix, prefix_noext, ni, nj, nk, nijk, nv, nt, n4, nvi, nti, ntimes, max_node, di, dj, dk, d3, adi, adj, adk, ad3, voxvol, oi, oj, ok, o3, dcx, dcy, dcz, dc3, tr, dmin, dmax, dminus, dmaxus, smode, header_name, brick_name, iname, extent, fac, label, datum, min, max, minus, maxus, labeltable, labeltable_as_atlas_points, atlas_points, history, slice_timing, header_line, hdr, sb_delim, na_flag, atr_delim, aform_real, aform_real_oneline, aform_real_refit_ori, is_aform_real_orth, aform_orth, perm_to_orient, same_grid, same_dim, same_delta, same_orient, same_center, same_obl, same_all_grid, val_diff, sval_diff, monog_pairs)
    return v_3dinfo_execute(params, execution);
}


export {
      V3dinfoOutputs,
      V3dinfoParameters,
      V_3DINFO_METADATA,
      v_3dinfo,
      v_3dinfo_params,
};
