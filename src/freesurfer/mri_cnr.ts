// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CNR_METADATA: Metadata = {
    id: "e426f06fe9ac260492b56203731c6940db9a022d.boutiques",
    name: "mri_cnr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCnrParameters {
    "__STYXTYPE__": "mri_cnr";
    "surf_dir": string;
    "volume_files": Array<InputPathType>;
    "slope"?: Array<string> | null | undefined;
    "logfile"?: string | null | undefined;
    "labels"?: Array<string> | null | undefined;
    "print_total_cnr": boolean;
    "version_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_cnr": mri_cnr_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_cnr(...)`.
 *
 * @interface
 */
interface MriCnrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mri_cnr_params(
    surf_dir: string,
    volume_files: Array<InputPathType>,
    slope: Array<string> | null = null,
    logfile: string | null = null,
    labels: Array<string> | null = null,
    print_total_cnr: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
): MriCnrParameters {
    /**
     * Build parameters.
    
     * @param surf_dir Directory containing surface data.
     * @param volume_files Volumes to process.
     * @param slope Compute slope and write to files labeled with slope_fname. Requires four additional values: dist_in, dist_out, step_in, and step_out.
     * @param logfile Log CNR to specified logfile. Will contain 8 values in a specific order: gray_white_cnr, gray_csf_cnr, white_mean, gray_mean, csf_mean, sqrt(white_var), sqrt(gray_var), sqrt(csf_var).
     * @param labels Read hemisphere labels from specified left and right hemisphere files.
     * @param print_total_cnr Print only the total CNR to stdout.
     * @param version_flag Print software version information and quit.
     * @param help_flag Print usage information and quit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_cnr" as const,
        "surf_dir": surf_dir,
        "volume_files": volume_files,
        "print_total_cnr": print_total_cnr,
        "version_flag": version_flag,
        "help_flag": help_flag,
    };
    if (slope !== null) {
        params["slope"] = slope;
    }
    if (logfile !== null) {
        params["logfile"] = logfile;
    }
    if (labels !== null) {
        params["labels"] = labels;
    }
    return params;
}


function mri_cnr_cargs(
    params: MriCnrParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_cnr");
    cargs.push((params["surf_dir"] ?? null));
    cargs.push(...(params["volume_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["slope"] ?? null) !== null) {
        cargs.push(
            "-s",
            ...(params["slope"] ?? null)
        );
    }
    if ((params["logfile"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["logfile"] ?? null)
        );
    }
    if ((params["labels"] ?? null) !== null) {
        cargs.push(
            "label",
            ...(params["labels"] ?? null)
        );
    }
    if ((params["print_total_cnr"] ?? null)) {
        cargs.push("-t");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function mri_cnr_outputs(
    params: MriCnrParameters,
    execution: Execution,
): MriCnrOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriCnrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mri_cnr_execute(
    params: MriCnrParameters,
    execution: Execution,
): MriCnrOutputs {
    /**
     * Compute the gray/white/csf contrast-to-noise ratio for volumes using FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriCnrOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_cnr_cargs(params, execution)
    const ret = mri_cnr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_cnr(
    surf_dir: string,
    volume_files: Array<InputPathType>,
    slope: Array<string> | null = null,
    logfile: string | null = null,
    labels: Array<string> | null = null,
    print_total_cnr: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MriCnrOutputs {
    /**
     * Compute the gray/white/csf contrast-to-noise ratio for volumes using FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surf_dir Directory containing surface data.
     * @param volume_files Volumes to process.
     * @param slope Compute slope and write to files labeled with slope_fname. Requires four additional values: dist_in, dist_out, step_in, and step_out.
     * @param logfile Log CNR to specified logfile. Will contain 8 values in a specific order: gray_white_cnr, gray_csf_cnr, white_mean, gray_mean, csf_mean, sqrt(white_var), sqrt(gray_var), sqrt(csf_var).
     * @param labels Read hemisphere labels from specified left and right hemisphere files.
     * @param print_total_cnr Print only the total CNR to stdout.
     * @param version_flag Print software version information and quit.
     * @param help_flag Print usage information and quit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriCnrOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CNR_METADATA);
    const params = mri_cnr_params(surf_dir, volume_files, slope, logfile, labels, print_total_cnr, version_flag, help_flag)
    return mri_cnr_execute(params, execution);
}


export {
      MRI_CNR_METADATA,
      MriCnrOutputs,
      MriCnrParameters,
      mri_cnr,
      mri_cnr_params,
};
