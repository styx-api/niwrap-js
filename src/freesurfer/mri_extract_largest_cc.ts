// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EXTRACT_LARGEST_CC_METADATA: Metadata = {
    id: "d482ce41fdae770a9397038906daba39eebb0541.boutiques",
    name: "mri_extract_largest_CC",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriExtractLargestCcParameters {
    "__STYXTYPE__": "mri_extract_largest_CC";
    "input_volume": InputPathType;
    "output_volume": string;
    "threshold"?: number | null | undefined;
    "hemisphere"?: "lh" | "rh" | null | undefined;
    "largest_cc_in_bg": boolean;
    "original_volume"?: InputPathType | null | undefined;
    "label_value"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_extract_largest_CC": mri_extract_largest_cc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_extract_largest_CC": mri_extract_largest_cc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_extract_largest_cc(...)`.
 *
 * @interface
 */
interface MriExtractLargestCcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output volume with the largest connected component extracted.
     */
    output_volume_file: OutputPathType;
}


function mri_extract_largest_cc_params(
    input_volume: InputPathType,
    output_volume: string,
    threshold: number | null = null,
    hemisphere: "lh" | "rh" | null = null,
    largest_cc_in_bg: boolean = false,
    original_volume: InputPathType | null = null,
    label_value: number | null = null,
): MriExtractLargestCcParameters {
    /**
     * Build parameters.
    
     * @param input_volume Input volume.
     * @param output_volume Output volume.
     * @param threshold Threshold for object.
     * @param hemisphere Set the target value corresponding to lh (255) or rh (127).
     * @param largest_cc_in_bg Find the largest CC in the background.
     * @param original_volume Clone values from original volume into output (used with -I).
     * @param label_value Perform connected components on voxels with specified label value.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_extract_largest_CC" as const,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "largest_cc_in_bg": largest_cc_in_bg,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (hemisphere !== null) {
        params["hemisphere"] = hemisphere;
    }
    if (original_volume !== null) {
        params["original_volume"] = original_volume;
    }
    if (label_value !== null) {
        params["label_value"] = label_value;
    }
    return params;
}


function mri_extract_largest_cc_cargs(
    params: MriExtractLargestCcParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_extract_largest_CC");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["hemisphere"] ?? null) !== null) {
        cargs.push(
            "-hemi",
            (params["hemisphere"] ?? null)
        );
    }
    if ((params["largest_cc_in_bg"] ?? null)) {
        cargs.push("-I");
    }
    if ((params["original_volume"] ?? null) !== null) {
        cargs.push(
            "-O",
            execution.inputFile((params["original_volume"] ?? null))
        );
    }
    if ((params["label_value"] ?? null) !== null) {
        cargs.push(
            "-L",
            String((params["label_value"] ?? null))
        );
    }
    return cargs;
}


function mri_extract_largest_cc_outputs(
    params: MriExtractLargestCcParameters,
    execution: Execution,
): MriExtractLargestCcOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriExtractLargestCcOutputs = {
        root: execution.outputFile("."),
        output_volume_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


function mri_extract_largest_cc_execute(
    params: MriExtractLargestCcParameters,
    execution: Execution,
): MriExtractLargestCcOutputs {
    /**
     * This program extracts the largest connected component of the input volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriExtractLargestCcOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_extract_largest_cc_cargs(params, execution)
    const ret = mri_extract_largest_cc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_extract_largest_cc(
    input_volume: InputPathType,
    output_volume: string,
    threshold: number | null = null,
    hemisphere: "lh" | "rh" | null = null,
    largest_cc_in_bg: boolean = false,
    original_volume: InputPathType | null = null,
    label_value: number | null = null,
    runner: Runner | null = null,
): MriExtractLargestCcOutputs {
    /**
     * This program extracts the largest connected component of the input volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_volume Input volume.
     * @param output_volume Output volume.
     * @param threshold Threshold for object.
     * @param hemisphere Set the target value corresponding to lh (255) or rh (127).
     * @param largest_cc_in_bg Find the largest CC in the background.
     * @param original_volume Clone values from original volume into output (used with -I).
     * @param label_value Perform connected components on voxels with specified label value.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriExtractLargestCcOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EXTRACT_LARGEST_CC_METADATA);
    const params = mri_extract_largest_cc_params(input_volume, output_volume, threshold, hemisphere, largest_cc_in_bg, original_volume, label_value)
    return mri_extract_largest_cc_execute(params, execution);
}


export {
      MRI_EXTRACT_LARGEST_CC_METADATA,
      MriExtractLargestCcOutputs,
      MriExtractLargestCcParameters,
      mri_extract_largest_cc,
      mri_extract_largest_cc_params,
};
