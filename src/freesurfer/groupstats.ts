// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GROUPSTATS_METADATA: Metadata = {
    id: "d0e0e6491ed9bbf234f3fd24a7e51569d8554db5.boutiques",
    name: "groupstats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GroupstatsParameters {
    "@type": "freesurfer.groupstats";
    "outdir": string;
    "group_fsgd"?: InputPathType | null | undefined;
    "subjectfile"?: InputPathType | null | undefined;
    "fwhm"?: Array<number> | null | undefined;
    "subject_dir"?: string | null | undefined;
    "mapname"?: string | null | undefined;
    "srcsurfreg"?: string | null | undefined;
    "no_maps": boolean;
    "lh_only": boolean;
    "rh_only": boolean;
    "no_aparcstats": boolean;
    "no_asegstats": boolean;
    "no_wparcstats": boolean;
    "no_stats": boolean;
    "new": boolean;
    "base": boolean;
    "keep53": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.groupstats": groupstats_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `groupstats(...)`.
 *
 * @interface
 */
interface GroupstatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param outdir Output folder
 * @param group_fsgd Specify the FSGD file for the group
 * @param subjectfile Subject list file
 * @param fwhm Specify smoothing level(s)
 * @param subject_dir Subject directory
 * @param mapname Use the given map name
 * @param srcsurfreg Source surface registration (default is sphere.reg)
 * @param no_maps Only analyze ROI data
 * @param lh_only Only analyze left hemisphere
 * @param rh_only Only analyze right hemisphere
 * @param no_aparcstats Do not compute aparcstats
 * @param no_asegstats Do not compute asegstats
 * @param no_wparcstats Do not compute wmparcstats
 * @param no_stats Do not perform any ROI stats
 * @param new_ Append .new.mris_make_surfaces to map names
 * @param base Sets measure thickness area volume curvature sulcus (excludes white-gray percentage)
 * @param keep53 Keep 5.3 aseg names (e.g., Thalamus-Proper)
 *
 * @returns Parameter dictionary
 */
function groupstats_params(
    outdir: string,
    group_fsgd: InputPathType | null = null,
    subjectfile: InputPathType | null = null,
    fwhm: Array<number> | null = null,
    subject_dir: string | null = null,
    mapname: string | null = null,
    srcsurfreg: string | null = null,
    no_maps: boolean = false,
    lh_only: boolean = false,
    rh_only: boolean = false,
    no_aparcstats: boolean = false,
    no_asegstats: boolean = false,
    no_wparcstats: boolean = false,
    no_stats: boolean = false,
    new_: boolean = false,
    base: boolean = false,
    keep53: boolean = false,
): GroupstatsParameters {
    const params = {
        "@type": "freesurfer.groupstats" as const,
        "outdir": outdir,
        "no_maps": no_maps,
        "lh_only": lh_only,
        "rh_only": rh_only,
        "no_aparcstats": no_aparcstats,
        "no_asegstats": no_asegstats,
        "no_wparcstats": no_wparcstats,
        "no_stats": no_stats,
        "new": new_,
        "base": base,
        "keep53": keep53,
    };
    if (group_fsgd !== null) {
        params["group_fsgd"] = group_fsgd;
    }
    if (subjectfile !== null) {
        params["subjectfile"] = subjectfile;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (subject_dir !== null) {
        params["subject_dir"] = subject_dir;
    }
    if (mapname !== null) {
        params["mapname"] = mapname;
    }
    if (srcsurfreg !== null) {
        params["srcsurfreg"] = srcsurfreg;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function groupstats_cargs(
    params: GroupstatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("groupstats");
    cargs.push(
        "--o",
        (params["outdir"] ?? null)
    );
    if ((params["group_fsgd"] ?? null) !== null) {
        cargs.push(
            "--fsgd",
            execution.inputFile((params["group_fsgd"] ?? null))
        );
    }
    if ((params["subjectfile"] ?? null) !== null) {
        cargs.push(
            "--f",
            execution.inputFile((params["subjectfile"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            ...(params["fwhm"] ?? null).map(String)
        );
    }
    if ((params["subject_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subject_dir"] ?? null)
        );
    }
    if ((params["mapname"] ?? null) !== null) {
        cargs.push(
            "--m",
            (params["mapname"] ?? null)
        );
    }
    if ((params["srcsurfreg"] ?? null) !== null) {
        cargs.push(
            "--srcsurfreg",
            (params["srcsurfreg"] ?? null)
        );
    }
    if ((params["no_maps"] ?? null)) {
        cargs.push("--no-maps");
    }
    if ((params["lh_only"] ?? null)) {
        cargs.push("--lh");
    }
    if ((params["rh_only"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["no_aparcstats"] ?? null)) {
        cargs.push("--no-aparcstats");
    }
    if ((params["no_asegstats"] ?? null)) {
        cargs.push("--no-asegstats");
    }
    if ((params["no_wparcstats"] ?? null)) {
        cargs.push("--no-wparcstats");
    }
    if ((params["no_stats"] ?? null)) {
        cargs.push("--no-stats");
    }
    if ((params["new"] ?? null)) {
        cargs.push("--new");
    }
    if ((params["base"] ?? null)) {
        cargs.push("--base");
    }
    if ((params["keep53"] ?? null)) {
        cargs.push("--keep53");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function groupstats_outputs(
    params: GroupstatsParameters,
    execution: Execution,
): GroupstatsOutputs {
    const ret: GroupstatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * groupstats
 *
 * A script for comprehensive group analysis on both maps and ROI results within FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GroupstatsOutputs`).
 */
function groupstats_execute(
    params: GroupstatsParameters,
    runner: Runner | null = null,
): GroupstatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GROUPSTATS_METADATA);
    params = execution.params(params)
    const cargs = groupstats_cargs(params, execution)
    const ret = groupstats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * groupstats
 *
 * A script for comprehensive group analysis on both maps and ROI results within FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param outdir Output folder
 * @param group_fsgd Specify the FSGD file for the group
 * @param subjectfile Subject list file
 * @param fwhm Specify smoothing level(s)
 * @param subject_dir Subject directory
 * @param mapname Use the given map name
 * @param srcsurfreg Source surface registration (default is sphere.reg)
 * @param no_maps Only analyze ROI data
 * @param lh_only Only analyze left hemisphere
 * @param rh_only Only analyze right hemisphere
 * @param no_aparcstats Do not compute aparcstats
 * @param no_asegstats Do not compute asegstats
 * @param no_wparcstats Do not compute wmparcstats
 * @param no_stats Do not perform any ROI stats
 * @param new_ Append .new.mris_make_surfaces to map names
 * @param base Sets measure thickness area volume curvature sulcus (excludes white-gray percentage)
 * @param keep53 Keep 5.3 aseg names (e.g., Thalamus-Proper)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GroupstatsOutputs`).
 */
function groupstats(
    outdir: string,
    group_fsgd: InputPathType | null = null,
    subjectfile: InputPathType | null = null,
    fwhm: Array<number> | null = null,
    subject_dir: string | null = null,
    mapname: string | null = null,
    srcsurfreg: string | null = null,
    no_maps: boolean = false,
    lh_only: boolean = false,
    rh_only: boolean = false,
    no_aparcstats: boolean = false,
    no_asegstats: boolean = false,
    no_wparcstats: boolean = false,
    no_stats: boolean = false,
    new_: boolean = false,
    base: boolean = false,
    keep53: boolean = false,
    runner: Runner | null = null,
): GroupstatsOutputs {
    const params = groupstats_params(outdir, group_fsgd, subjectfile, fwhm, subject_dir, mapname, srcsurfreg, no_maps, lh_only, rh_only, no_aparcstats, no_asegstats, no_wparcstats, no_stats, new_, base, keep53)
    return groupstats_execute(params, runner);
}


export {
      GROUPSTATS_METADATA,
      GroupstatsOutputs,
      GroupstatsParameters,
      groupstats,
      groupstats_execute,
      groupstats_params,
};
