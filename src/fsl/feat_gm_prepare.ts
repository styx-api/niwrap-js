// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FEAT_GM_PREPARE_METADATA: Metadata = {
    id: "0f3a100ea6a5dad8243d8f86fcdda9779bdb4c4f.boutiques",
    name: "feat_gm_prepare",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FeatGmPrepareParameters {
    "@type": "fsl.feat_gm_prepare";
    "gm_output": string;
    "feat_dirs_list": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.feat_gm_prepare": feat_gm_prepare_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `feat_gm_prepare(...)`.
 *
 * @interface
 */
interface FeatGmPrepareOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param gm_output 4D grey matter output file
 * @param feat_dirs_list List of first-level FEAT output directories
 *
 * @returns Parameter dictionary
 */
function feat_gm_prepare_params(
    gm_output: string,
    feat_dirs_list: Array<InputPathType>,
): FeatGmPrepareParameters {
    const params = {
        "@type": "fsl.feat_gm_prepare" as const,
        "gm_output": gm_output,
        "feat_dirs_list": feat_dirs_list,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function feat_gm_prepare_cargs(
    params: FeatGmPrepareParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("feat_gm_prepare");
    cargs.push((params["gm_output"] ?? null));
    cargs.push(...(params["feat_dirs_list"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function feat_gm_prepare_outputs(
    params: FeatGmPrepareParameters,
    execution: Execution,
): FeatGmPrepareOutputs {
    const ret: FeatGmPrepareOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Prepare 4D grey matter files for higher-level analysis in FEAT.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FeatGmPrepareOutputs`).
 */
function feat_gm_prepare_execute(
    params: FeatGmPrepareParameters,
    execution: Execution,
): FeatGmPrepareOutputs {
    params = execution.params(params)
    const cargs = feat_gm_prepare_cargs(params, execution)
    const ret = feat_gm_prepare_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Prepare 4D grey matter files for higher-level analysis in FEAT.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param gm_output 4D grey matter output file
 * @param feat_dirs_list List of first-level FEAT output directories
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FeatGmPrepareOutputs`).
 */
function feat_gm_prepare(
    gm_output: string,
    feat_dirs_list: Array<InputPathType>,
    runner: Runner | null = null,
): FeatGmPrepareOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FEAT_GM_PREPARE_METADATA);
    const params = feat_gm_prepare_params(gm_output, feat_dirs_list)
    return feat_gm_prepare_execute(params, execution);
}


export {
      FEAT_GM_PREPARE_METADATA,
      FeatGmPrepareOutputs,
      FeatGmPrepareParameters,
      feat_gm_prepare,
      feat_gm_prepare_cargs,
      feat_gm_prepare_execute,
      feat_gm_prepare_outputs,
      feat_gm_prepare_params,
};
