// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ALIGN_PARTIAL_OBLIQUE_METADATA: Metadata = {
    id: "d0ac6388c730c43ce7683b59b4069417404eff3d.boutiques",
    name: "@align_partial_oblique",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAlignPartialObliqueParameters {
    "@type": "afni.@align_partial_oblique";
    "base": InputPathType;
    "input": InputPathType;
    "suffix"?: string | null | undefined;
    "keep_tmp": boolean;
    "clean": boolean;
    "dxyz"?: number | null | undefined;
    "dx"?: number | null | undefined;
    "dy"?: number | null | undefined;
    "dz"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@align_partial_oblique": v__align_partial_oblique_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@align_partial_oblique": v__align_partial_oblique_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__align_partial_oblique(...)`.
 *
 * @interface
 */
interface VAlignPartialObliqueOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Aligned partial coverage T1 weighted dataset
     */
    aligned_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param base Reference anatomical full coverage volume.
 * @param input Partial coverage T1 weighted non-oblique dataset.
 * @param suffix Output dataset name is formed by adding SUF to the prefix of the base dataset. The default suffix is _alnd_PartialCoverageObliqueT1
 * @param keep_tmp Keep temporary files.
 * @param clean Clean all temp files, likely left from -keep_tmp option then exit.
 * @param dxyz Cubic voxel size of output dataset in TLRC space Default MM is 1.
 * @param dx Size of voxel in the x direction (Right-Left). Default is 1mm.
 * @param dy Size of voxel in the y direction (Anterior-Posterior). Default is 1mm.
 * @param dz Size of voxel in the z direction (Inferior-Superior). Default is 1mm.
 *
 * @returns Parameter dictionary
 */
function v__align_partial_oblique_params(
    base: InputPathType,
    input: InputPathType,
    suffix: string | null = null,
    keep_tmp: boolean = false,
    clean: boolean = false,
    dxyz: number | null = null,
    dx: number | null = null,
    dy: number | null = null,
    dz: number | null = null,
): VAlignPartialObliqueParameters {
    const params = {
        "@type": "afni.@align_partial_oblique" as const,
        "base": base,
        "input": input,
        "keep_tmp": keep_tmp,
        "clean": clean,
    };
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    if (dxyz !== null) {
        params["dxyz"] = dxyz;
    }
    if (dx !== null) {
        params["dx"] = dx;
    }
    if (dy !== null) {
        params["dy"] = dy;
    }
    if (dz !== null) {
        params["dz"] = dz;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__align_partial_oblique_cargs(
    params: VAlignPartialObliqueParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@align_partial_oblique");
    cargs.push(
        "-base",
        execution.inputFile((params["base"] ?? null))
    );
    cargs.push(
        "-input",
        execution.inputFile((params["input"] ?? null))
    );
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-suffix",
            (params["suffix"] ?? null)
        );
    }
    if ((params["keep_tmp"] ?? null)) {
        cargs.push("-keep_tmp");
    }
    if ((params["clean"] ?? null)) {
        cargs.push("-clean");
    }
    if ((params["dxyz"] ?? null) !== null) {
        cargs.push(
            "-dxyz",
            String((params["dxyz"] ?? null))
        );
    }
    if ((params["dx"] ?? null) !== null) {
        cargs.push(
            "-dx",
            String((params["dx"] ?? null))
        );
    }
    if ((params["dy"] ?? null) !== null) {
        cargs.push(
            "-dy",
            String((params["dy"] ?? null))
        );
    }
    if ((params["dz"] ?? null) !== null) {
        cargs.push(
            "-dz",
            String((params["dz"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__align_partial_oblique_outputs(
    params: VAlignPartialObliqueParameters,
    execution: Execution,
): VAlignPartialObliqueOutputs {
    const ret: VAlignPartialObliqueOutputs = {
        root: execution.outputFile("."),
        aligned_output: execution.outputFile([path.basename((params["base"] ?? null)), "_alnd_", path.basename((params["input"] ?? null)), ".nii.gz"].join('')),
    };
    return ret;
}


/**
 * A script to align a full coverage T1 weighted non-oblique dataset to match a partial coverage T1 weighted non-oblique dataset. Alignment is done with a rotation and shift (6 parameters) transform only.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAlignPartialObliqueOutputs`).
 */
function v__align_partial_oblique_execute(
    params: VAlignPartialObliqueParameters,
    runner: Runner | null = null,
): VAlignPartialObliqueOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ALIGN_PARTIAL_OBLIQUE_METADATA);
    params = execution.params(params)
    const cargs = v__align_partial_oblique_cargs(params, execution)
    const ret = v__align_partial_oblique_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A script to align a full coverage T1 weighted non-oblique dataset to match a partial coverage T1 weighted non-oblique dataset. Alignment is done with a rotation and shift (6 parameters) transform only.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param base Reference anatomical full coverage volume.
 * @param input Partial coverage T1 weighted non-oblique dataset.
 * @param suffix Output dataset name is formed by adding SUF to the prefix of the base dataset. The default suffix is _alnd_PartialCoverageObliqueT1
 * @param keep_tmp Keep temporary files.
 * @param clean Clean all temp files, likely left from -keep_tmp option then exit.
 * @param dxyz Cubic voxel size of output dataset in TLRC space Default MM is 1.
 * @param dx Size of voxel in the x direction (Right-Left). Default is 1mm.
 * @param dy Size of voxel in the y direction (Anterior-Posterior). Default is 1mm.
 * @param dz Size of voxel in the z direction (Inferior-Superior). Default is 1mm.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAlignPartialObliqueOutputs`).
 */
function v__align_partial_oblique(
    base: InputPathType,
    input: InputPathType,
    suffix: string | null = null,
    keep_tmp: boolean = false,
    clean: boolean = false,
    dxyz: number | null = null,
    dx: number | null = null,
    dy: number | null = null,
    dz: number | null = null,
    runner: Runner | null = null,
): VAlignPartialObliqueOutputs {
    const params = v__align_partial_oblique_params(base, input, suffix, keep_tmp, clean, dxyz, dx, dy, dz)
    return v__align_partial_oblique_execute(params, runner);
}


export {
      VAlignPartialObliqueOutputs,
      VAlignPartialObliqueParameters,
      V__ALIGN_PARTIAL_OBLIQUE_METADATA,
      v__align_partial_oblique,
      v__align_partial_oblique_execute,
      v__align_partial_oblique_params,
};
