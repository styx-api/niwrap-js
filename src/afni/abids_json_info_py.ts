// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ABIDS_JSON_INFO_PY_METADATA: Metadata = {
    id: "dbe784da9ea0070ea74b0200f0a71ea570de859e.boutiques",
    name: "abids_json_info.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AbidsJsonInfoPyParameters {
    "@type": "afni.abids_json_info.py";
    "json_files": Array<InputPathType>;
    "tr_flag": boolean;
    "te_flag": boolean;
    "te_sec_flag": boolean;
    "match_nii_flag": boolean;
    "field_list"?: Array<string> | null | undefined;
    "list_fields_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.abids_json_info.py": abids_json_info_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `abids_json_info_py(...)`.
 *
 * @interface
 */
interface AbidsJsonInfoPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param json_files Specify .json file(s).
 * @param tr_flag Print the TR from the json file in seconds, from the 'RepetitionTime' field.
 * @param te_flag Print out the 'EchoTime' field in milliseconds (the json file stores it in seconds).
 * @param te_sec_flag Print the 'EchoTime' field in seconds.
 * @param match_nii_flag Check if there is a .nii or .nii.gz file that matches the .json file (1 if the dataset is loadable).
 * @param field_list Print any field or list of fields from the json file.
 * @param list_fields_flag Print a list of the available fields from the .json file. This must be the only argument specified.
 * @param help_flag Show this help message and exit.
 *
 * @returns Parameter dictionary
 */
function abids_json_info_py_params(
    json_files: Array<InputPathType>,
    tr_flag: boolean = false,
    te_flag: boolean = false,
    te_sec_flag: boolean = false,
    match_nii_flag: boolean = false,
    field_list: Array<string> | null = null,
    list_fields_flag: boolean = false,
    help_flag: boolean = false,
): AbidsJsonInfoPyParameters {
    const params = {
        "@type": "afni.abids_json_info.py" as const,
        "json_files": json_files,
        "tr_flag": tr_flag,
        "te_flag": te_flag,
        "te_sec_flag": te_sec_flag,
        "match_nii_flag": match_nii_flag,
        "list_fields_flag": list_fields_flag,
        "help_flag": help_flag,
    };
    if (field_list !== null) {
        params["field_list"] = field_list;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function abids_json_info_py_cargs(
    params: AbidsJsonInfoPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("abids_json_info.py");
    cargs.push(...(params["json_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["tr_flag"] ?? null)) {
        cargs.push("-TR");
    }
    if ((params["te_flag"] ?? null)) {
        cargs.push("-TE");
    }
    if ((params["te_sec_flag"] ?? null)) {
        cargs.push("-TE_sec");
    }
    if ((params["match_nii_flag"] ?? null)) {
        cargs.push("-match_nii");
    }
    if ((params["field_list"] ?? null) !== null) {
        cargs.push(
            "-field",
            ...(params["field_list"] ?? null)
        );
    }
    if ((params["list_fields_flag"] ?? null)) {
        cargs.push("-list_fields");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function abids_json_info_py_outputs(
    params: AbidsJsonInfoPyParameters,
    execution: Execution,
): AbidsJsonInfoPyOutputs {
    const ret: AbidsJsonInfoPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool to extract information from BIDS formatted json files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AbidsJsonInfoPyOutputs`).
 */
function abids_json_info_py_execute(
    params: AbidsJsonInfoPyParameters,
    runner: Runner | null = null,
): AbidsJsonInfoPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ABIDS_JSON_INFO_PY_METADATA);
    params = execution.params(params)
    const cargs = abids_json_info_py_cargs(params, execution)
    const ret = abids_json_info_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to extract information from BIDS formatted json files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param json_files Specify .json file(s).
 * @param tr_flag Print the TR from the json file in seconds, from the 'RepetitionTime' field.
 * @param te_flag Print out the 'EchoTime' field in milliseconds (the json file stores it in seconds).
 * @param te_sec_flag Print the 'EchoTime' field in seconds.
 * @param match_nii_flag Check if there is a .nii or .nii.gz file that matches the .json file (1 if the dataset is loadable).
 * @param field_list Print any field or list of fields from the json file.
 * @param list_fields_flag Print a list of the available fields from the .json file. This must be the only argument specified.
 * @param help_flag Show this help message and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AbidsJsonInfoPyOutputs`).
 */
function abids_json_info_py(
    json_files: Array<InputPathType>,
    tr_flag: boolean = false,
    te_flag: boolean = false,
    te_sec_flag: boolean = false,
    match_nii_flag: boolean = false,
    field_list: Array<string> | null = null,
    list_fields_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): AbidsJsonInfoPyOutputs {
    const params = abids_json_info_py_params(json_files, tr_flag, te_flag, te_sec_flag, match_nii_flag, field_list, list_fields_flag, help_flag)
    return abids_json_info_py_execute(params, runner);
}


export {
      ABIDS_JSON_INFO_PY_METADATA,
      AbidsJsonInfoPyOutputs,
      AbidsJsonInfoPyParameters,
      abids_json_info_py,
      abids_json_info_py_execute,
      abids_json_info_py_params,
};
