// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IS_SURFACE_METADATA: Metadata = {
    id: "86c411bc39041a8b3eae45962259ad09e76de3b1.boutiques",
    name: "is-surface",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface IsSurfaceParameters {
    "__STYXTYPE__": "is-surface";
    "infile": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "is-surface": is_surface_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `is_surface(...)`.
 *
 * @interface
 */
interface IsSurfaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function is_surface_params(
    infile: InputPathType,
): IsSurfaceParameters {
    /**
     * Build parameters.
    
     * @param infile Input file to check if it's a surface
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "is-surface" as const,
        "infile": infile,
    };
    return params;
}


function is_surface_cargs(
    params: IsSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("is-surface");
    cargs.push(
        "-surface",
        execution.inputFile((params["infile"] ?? null))
    );
    return cargs;
}


function is_surface_outputs(
    params: IsSurfaceParameters,
    execution: Execution,
): IsSurfaceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: IsSurfaceOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function is_surface_execute(
    params: IsSurfaceParameters,
    execution: Execution,
): IsSurfaceOutputs {
    /**
     * Determines whether a file is a volume-encoded surface file by examining its dimensions.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `IsSurfaceOutputs`).
     */
    params = execution.params(params)
    const cargs = is_surface_cargs(params, execution)
    const ret = is_surface_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function is_surface(
    infile: InputPathType,
    runner: Runner | null = null,
): IsSurfaceOutputs {
    /**
     * Determines whether a file is a volume-encoded surface file by examining its dimensions.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param infile Input file to check if it's a surface
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `IsSurfaceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IS_SURFACE_METADATA);
    const params = is_surface_params(infile)
    return is_surface_execute(params, execution);
}


export {
      IS_SURFACE_METADATA,
      IsSurfaceOutputs,
      IsSurfaceParameters,
      is_surface,
      is_surface_params,
};
