// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCK2CONNECTOME_METADATA: Metadata = {
    id: "d7266b72589a1c26b9abb6847aa3a2ba49db356b.boutiques",
    name: "tck2connectome",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Tck2connectomeConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface Tck2connectomeParameters {
    "__STYXTYPE__": "tck2connectome";
    "assignment_end_voxels": boolean;
    "assignment_radial_search"?: number | null | undefined;
    "assignment_reverse_search"?: number | null | undefined;
    "assignment_forward_search"?: number | null | undefined;
    "assignment_all_voxels": boolean;
    "scale_length": boolean;
    "scale_invlength": boolean;
    "scale_invnodevol": boolean;
    "scale_file"?: InputPathType | null | undefined;
    "symmetric": boolean;
    "zero_diagonal": boolean;
    "stat_edge"?: string | null | undefined;
    "tck_weights_in"?: InputPathType | null | undefined;
    "keep_unassigned": boolean;
    "out_assignments"?: string | null | undefined;
    "vector": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Tck2connectomeConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "tracks_in": InputPathType;
    "nodes_in": InputPathType;
    "connectome_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tck2connectome": tck2connectome_cargs,
        "config": tck2connectome_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "tck2connectome": tck2connectome_outputs,
    };
    return outputsFuncs[t];
}


function tck2connectome_config_params(
    key: string,
    value: string,
): Tck2connectomeConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function tck2connectome_config_cargs(
    params: Tck2connectomeConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `tck2connectome(...)`.
 *
 * @interface
 */
interface Tck2connectomeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output .csv file containing edge weights
     */
    connectome_out: OutputPathType;
    /**
     * output the node assignments of each streamline to a file; this can be used subsequently e.g. by the command connectome2tck 
     */
    out_assignments: OutputPathType | null;
}


function tck2connectome_params(
    tracks_in: InputPathType,
    nodes_in: InputPathType,
    connectome_out: string,
    assignment_end_voxels: boolean = false,
    assignment_radial_search: number | null = null,
    assignment_reverse_search: number | null = null,
    assignment_forward_search: number | null = null,
    assignment_all_voxels: boolean = false,
    scale_length: boolean = false,
    scale_invlength: boolean = false,
    scale_invnodevol: boolean = false,
    scale_file: InputPathType | null = null,
    symmetric: boolean = false,
    zero_diagonal: boolean = false,
    stat_edge: string | null = null,
    tck_weights_in: InputPathType | null = null,
    keep_unassigned: boolean = false,
    out_assignments: string | null = null,
    vector: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tck2connectomeConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Tck2connectomeParameters {
    /**
     * Build parameters.
    
     * @param tracks_in the input track file
     * @param nodes_in the input node parcellation image
     * @param connectome_out the output .csv file containing edge weights
     * @param assignment_end_voxels use a simple voxel lookup value at each streamline endpoint
     * @param assignment_radial_search perform a radial search from each streamline endpoint to locate the nearest node. Argument is the maximum radius in mm; if no node is found within this radius, the streamline endpoint is not assigned to any node. Default search distance is 4mm.
     * @param assignment_reverse_search traverse from each streamline endpoint inwards along the streamline, in search of the last node traversed by the streamline. Argument is the maximum traversal length in mm (set to 0 to allow search to continue to the streamline midpoint).
     * @param assignment_forward_search project the streamline forwards from the endpoint in search of a parcellation node voxel. Argument is the maximum traversal length in mm.
     * @param assignment_all_voxels assign the streamline to all nodes it intersects along its length (note that this means a streamline may be assigned to more than two nodes, or indeed none at all)
     * @param scale_length scale each contribution to the connectome edge by the length of the streamline
     * @param scale_invlength scale each contribution to the connectome edge by the inverse of the streamline length
     * @param scale_invnodevol scale each contribution to the connectome edge by the inverse of the two node volumes
     * @param scale_file scale each contribution to the connectome edge according to the values in a vector file
     * @param symmetric Make matrices symmetric on output
     * @param zero_diagonal Set matrix diagonal to zero on output
     * @param stat_edge statistic for combining the values from all streamlines in an edge into a single scale value for that edge (options are: sum,mean,min,max; default=sum)
     * @param tck_weights_in specify a text scalar file containing the streamline weights
     * @param keep_unassigned By default, the program discards the information regarding those streamlines that are not successfully assigned to a node pair. Set this option to keep these values (will be the first row/column in the output matrix)
     * @param out_assignments output the node assignments of each streamline to a file; this can be used subsequently e.g. by the command connectome2tck
     * @param vector output a vector representing connectivities from a given seed point to target nodes, rather than a matrix of node-node connectivities
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tck2connectome" as const,
        "assignment_end_voxels": assignment_end_voxels,
        "assignment_all_voxels": assignment_all_voxels,
        "scale_length": scale_length,
        "scale_invlength": scale_invlength,
        "scale_invnodevol": scale_invnodevol,
        "symmetric": symmetric,
        "zero_diagonal": zero_diagonal,
        "keep_unassigned": keep_unassigned,
        "vector": vector,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "tracks_in": tracks_in,
        "nodes_in": nodes_in,
        "connectome_out": connectome_out,
    };
    if (assignment_radial_search !== null) {
        params["assignment_radial_search"] = assignment_radial_search;
    }
    if (assignment_reverse_search !== null) {
        params["assignment_reverse_search"] = assignment_reverse_search;
    }
    if (assignment_forward_search !== null) {
        params["assignment_forward_search"] = assignment_forward_search;
    }
    if (scale_file !== null) {
        params["scale_file"] = scale_file;
    }
    if (stat_edge !== null) {
        params["stat_edge"] = stat_edge;
    }
    if (tck_weights_in !== null) {
        params["tck_weights_in"] = tck_weights_in;
    }
    if (out_assignments !== null) {
        params["out_assignments"] = out_assignments;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function tck2connectome_cargs(
    params: Tck2connectomeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tck2connectome");
    if ((params["assignment_end_voxels"] ?? null)) {
        cargs.push("-assignment_end_voxels");
    }
    if ((params["assignment_radial_search"] ?? null) !== null) {
        cargs.push(
            "-assignment_radial_search",
            String((params["assignment_radial_search"] ?? null))
        );
    }
    if ((params["assignment_reverse_search"] ?? null) !== null) {
        cargs.push(
            "-assignment_reverse_search",
            String((params["assignment_reverse_search"] ?? null))
        );
    }
    if ((params["assignment_forward_search"] ?? null) !== null) {
        cargs.push(
            "-assignment_forward_search",
            String((params["assignment_forward_search"] ?? null))
        );
    }
    if ((params["assignment_all_voxels"] ?? null)) {
        cargs.push("-assignment_all_voxels");
    }
    if ((params["scale_length"] ?? null)) {
        cargs.push("-scale_length");
    }
    if ((params["scale_invlength"] ?? null)) {
        cargs.push("-scale_invlength");
    }
    if ((params["scale_invnodevol"] ?? null)) {
        cargs.push("-scale_invnodevol");
    }
    if ((params["scale_file"] ?? null) !== null) {
        cargs.push(
            "-scale_file",
            execution.inputFile((params["scale_file"] ?? null))
        );
    }
    if ((params["symmetric"] ?? null)) {
        cargs.push("-symmetric");
    }
    if ((params["zero_diagonal"] ?? null)) {
        cargs.push("-zero_diagonal");
    }
    if ((params["stat_edge"] ?? null) !== null) {
        cargs.push(
            "-stat_edge",
            (params["stat_edge"] ?? null)
        );
    }
    if ((params["tck_weights_in"] ?? null) !== null) {
        cargs.push(
            "-tck_weights_in",
            execution.inputFile((params["tck_weights_in"] ?? null))
        );
    }
    if ((params["keep_unassigned"] ?? null)) {
        cargs.push("-keep_unassigned");
    }
    if ((params["out_assignments"] ?? null) !== null) {
        cargs.push(
            "-out_assignments",
            (params["out_assignments"] ?? null)
        );
    }
    if ((params["vector"] ?? null)) {
        cargs.push("-vector");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["tracks_in"] ?? null)));
    cargs.push(execution.inputFile((params["nodes_in"] ?? null)));
    cargs.push((params["connectome_out"] ?? null));
    return cargs;
}


function tck2connectome_outputs(
    params: Tck2connectomeParameters,
    execution: Execution,
): Tck2connectomeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Tck2connectomeOutputs = {
        root: execution.outputFile("."),
        connectome_out: execution.outputFile([(params["connectome_out"] ?? null)].join('')),
        out_assignments: ((params["out_assignments"] ?? null) !== null) ? execution.outputFile([(params["out_assignments"] ?? null)].join('')) : null,
    };
    return ret;
}


function tck2connectome_execute(
    params: Tck2connectomeParameters,
    execution: Execution,
): Tck2connectomeOutputs {
    /**
     * Generate a connectome matrix from a streamlines file and a node parcellation image.
     * 
     * 
     * 
     * References:
     * 
     * If using the default streamline-parcel assignment mechanism (or -assignment_radial_search option): Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. The effects of SIFT on the reproducibility and biological accuracy of the structural connectome. NeuroImage, 2015, 104, 253-265
     * 
     * If using -scale_invlength or -scale_invnodevol options: Hagmann, P.; Cammoun, L.; Gigandet, X.; Meuli, R.; Honey, C.; Wedeen, V. & Sporns, O. Mapping the Structural Core of Human Cerebral Cortex. PLoS Biology 6(7), e159.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Tck2connectomeOutputs`).
     */
    params = execution.params(params)
    const cargs = tck2connectome_cargs(params, execution)
    const ret = tck2connectome_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tck2connectome(
    tracks_in: InputPathType,
    nodes_in: InputPathType,
    connectome_out: string,
    assignment_end_voxels: boolean = false,
    assignment_radial_search: number | null = null,
    assignment_reverse_search: number | null = null,
    assignment_forward_search: number | null = null,
    assignment_all_voxels: boolean = false,
    scale_length: boolean = false,
    scale_invlength: boolean = false,
    scale_invnodevol: boolean = false,
    scale_file: InputPathType | null = null,
    symmetric: boolean = false,
    zero_diagonal: boolean = false,
    stat_edge: string | null = null,
    tck_weights_in: InputPathType | null = null,
    keep_unassigned: boolean = false,
    out_assignments: string | null = null,
    vector: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tck2connectomeConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Tck2connectomeOutputs {
    /**
     * Generate a connectome matrix from a streamlines file and a node parcellation image.
     * 
     * 
     * 
     * References:
     * 
     * If using the default streamline-parcel assignment mechanism (or -assignment_radial_search option): Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. The effects of SIFT on the reproducibility and biological accuracy of the structural connectome. NeuroImage, 2015, 104, 253-265
     * 
     * If using -scale_invlength or -scale_invnodevol options: Hagmann, P.; Cammoun, L.; Gigandet, X.; Meuli, R.; Honey, C.; Wedeen, V. & Sporns, O. Mapping the Structural Core of Human Cerebral Cortex. PLoS Biology 6(7), e159.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param tracks_in the input track file
     * @param nodes_in the input node parcellation image
     * @param connectome_out the output .csv file containing edge weights
     * @param assignment_end_voxels use a simple voxel lookup value at each streamline endpoint
     * @param assignment_radial_search perform a radial search from each streamline endpoint to locate the nearest node. Argument is the maximum radius in mm; if no node is found within this radius, the streamline endpoint is not assigned to any node. Default search distance is 4mm.
     * @param assignment_reverse_search traverse from each streamline endpoint inwards along the streamline, in search of the last node traversed by the streamline. Argument is the maximum traversal length in mm (set to 0 to allow search to continue to the streamline midpoint).
     * @param assignment_forward_search project the streamline forwards from the endpoint in search of a parcellation node voxel. Argument is the maximum traversal length in mm.
     * @param assignment_all_voxels assign the streamline to all nodes it intersects along its length (note that this means a streamline may be assigned to more than two nodes, or indeed none at all)
     * @param scale_length scale each contribution to the connectome edge by the length of the streamline
     * @param scale_invlength scale each contribution to the connectome edge by the inverse of the streamline length
     * @param scale_invnodevol scale each contribution to the connectome edge by the inverse of the two node volumes
     * @param scale_file scale each contribution to the connectome edge according to the values in a vector file
     * @param symmetric Make matrices symmetric on output
     * @param zero_diagonal Set matrix diagonal to zero on output
     * @param stat_edge statistic for combining the values from all streamlines in an edge into a single scale value for that edge (options are: sum,mean,min,max; default=sum)
     * @param tck_weights_in specify a text scalar file containing the streamline weights
     * @param keep_unassigned By default, the program discards the information regarding those streamlines that are not successfully assigned to a node pair. Set this option to keep these values (will be the first row/column in the output matrix)
     * @param out_assignments output the node assignments of each streamline to a file; this can be used subsequently e.g. by the command connectome2tck
     * @param vector output a vector representing connectivities from a given seed point to target nodes, rather than a matrix of node-node connectivities
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Tck2connectomeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCK2CONNECTOME_METADATA);
    const params = tck2connectome_params(tracks_in, nodes_in, connectome_out, assignment_end_voxels, assignment_radial_search, assignment_reverse_search, assignment_forward_search, assignment_all_voxels, scale_length, scale_invlength, scale_invnodevol, scale_file, symmetric, zero_diagonal, stat_edge, tck_weights_in, keep_unassigned, out_assignments, vector, info, quiet, debug, force, nthreads, config, help, version)
    return tck2connectome_execute(params, execution);
}


export {
      TCK2CONNECTOME_METADATA,
      Tck2connectomeConfigParameters,
      Tck2connectomeOutputs,
      Tck2connectomeParameters,
      tck2connectome,
      tck2connectome_config_params,
      tck2connectome_params,
};
