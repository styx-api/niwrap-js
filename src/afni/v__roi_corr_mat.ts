// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ROI_CORR_MAT_METADATA: Metadata = {
    id: "90c954ebd0a6700b3e766d38ae5a6aae20dbbd89.boutiques",
    name: "@ROI_Corr_Mat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VRoiCorrMatParameters {
    "@type"?: "afni/@ROI_Corr_Mat";
    "ts_vol": InputPathType;
    "roi_vol": InputPathType;
    "prefix": string;
    "roisel"?: InputPathType | null | undefined;
    "zval": boolean;
    "mat_opt"?: string | null | undefined;
    "dirty": boolean;
    "keep_tmp": boolean;
    "echo": boolean;
    "verb": boolean;
}
type VRoiCorrMatParametersTagged = Required<Pick<VRoiCorrMatParameters, '@type'>> & VRoiCorrMatParameters;


/**
 * Output object returned when calling `VRoiCorrMatParameters(...)`.
 *
 * @interface
 */
interface VRoiCorrMatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Correlation matrix in .1D format
     */
    matrix_1d: OutputPathType;
    /**
     * Correlation matrix in .BRIK format
     */
    matrix_brick: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param ts_vol Time series volume
 * @param roi_vol ROI volume
 * @param prefix Use output for a prefix
 * @param roisel Force processing of ROI label (integers) listed in ROISEL 1D file
 * @param zval Output a zscore version of the correlation matrix
 * @param mat_opt Output matrix in different manners
 * @param dirty Keep temporary files
 * @param keep_tmp Keep temporary files
 * @param echo Set echo (echo all commands to screen)
 * @param verb Verbose flag
 *
 * @returns Parameter dictionary
 */
function v__roi_corr_mat_params(
    ts_vol: InputPathType,
    roi_vol: InputPathType,
    prefix: string,
    roisel: InputPathType | null = null,
    zval: boolean = false,
    mat_opt: string | null = null,
    dirty: boolean = false,
    keep_tmp: boolean = false,
    echo: boolean = false,
    verb: boolean = false,
): VRoiCorrMatParametersTagged {
    const params = {
        "@type": "afni/@ROI_Corr_Mat" as const,
        "ts_vol": ts_vol,
        "roi_vol": roi_vol,
        "prefix": prefix,
        "zval": zval,
        "dirty": dirty,
        "keep_tmp": keep_tmp,
        "echo": echo,
        "verb": verb,
    };
    if (roisel !== null) {
        params["roisel"] = roisel;
    }
    if (mat_opt !== null) {
        params["mat_opt"] = mat_opt;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__roi_corr_mat_cargs(
    params: VRoiCorrMatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@ROI_Corr_Mat");
    cargs.push(
        "-ts",
        execution.inputFile((params["ts_vol"] ?? null))
    );
    cargs.push(
        "-roi",
        execution.inputFile((params["roi_vol"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["roisel"] ?? null) !== null) {
        cargs.push(
            "-roisel",
            execution.inputFile((params["roisel"] ?? null))
        );
    }
    if ((params["zval"] ?? false)) {
        cargs.push("-zval");
    }
    if ((params["mat_opt"] ?? null) !== null) {
        cargs.push(
            "-mat",
            (params["mat_opt"] ?? null)
        );
    }
    if ((params["dirty"] ?? false)) {
        cargs.push("-dirty");
    }
    if ((params["keep_tmp"] ?? false)) {
        cargs.push("-keep_tmp");
    }
    if ((params["echo"] ?? false)) {
        cargs.push("-echo");
    }
    if ((params["verb"] ?? false)) {
        cargs.push("-verb");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__roi_corr_mat_outputs(
    params: VRoiCorrMatParameters,
    execution: Execution,
): VRoiCorrMatOutputs {
    const ret: VRoiCorrMatOutputs = {
        root: execution.outputFile("."),
        matrix_1d: execution.outputFile([(params["prefix"] ?? null), "_matrix.1D"].join('')),
        matrix_brick: execution.outputFile([(params["prefix"] ?? null), "_matrix.BRIK"].join('')),
    };
    return ret;
}


/**
 * @ROI_Corr_Mat
 *
 * Script to produce an NxN ROI correlation matrix of N ROIs.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRoiCorrMatOutputs`).
 */
function v__roi_corr_mat_execute(
    params: VRoiCorrMatParameters,
    runner: Runner | null = null,
): VRoiCorrMatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ROI_CORR_MAT_METADATA);
    params = execution.params(params)
    const cargs = v__roi_corr_mat_cargs(params, execution)
    const ret = v__roi_corr_mat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @ROI_Corr_Mat
 *
 * Script to produce an NxN ROI correlation matrix of N ROIs.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param ts_vol Time series volume
 * @param roi_vol ROI volume
 * @param prefix Use output for a prefix
 * @param roisel Force processing of ROI label (integers) listed in ROISEL 1D file
 * @param zval Output a zscore version of the correlation matrix
 * @param mat_opt Output matrix in different manners
 * @param dirty Keep temporary files
 * @param keep_tmp Keep temporary files
 * @param echo Set echo (echo all commands to screen)
 * @param verb Verbose flag
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRoiCorrMatOutputs`).
 */
function v__roi_corr_mat(
    ts_vol: InputPathType,
    roi_vol: InputPathType,
    prefix: string,
    roisel: InputPathType | null = null,
    zval: boolean = false,
    mat_opt: string | null = null,
    dirty: boolean = false,
    keep_tmp: boolean = false,
    echo: boolean = false,
    verb: boolean = false,
    runner: Runner | null = null,
): VRoiCorrMatOutputs {
    const params = v__roi_corr_mat_params(ts_vol, roi_vol, prefix, roisel, zval, mat_opt, dirty, keep_tmp, echo, verb)
    return v__roi_corr_mat_execute(params, runner);
}


export {
      VRoiCorrMatOutputs,
      V__ROI_CORR_MAT_METADATA,
      v__roi_corr_mat,
      v__roi_corr_mat_execute,
      v__roi_corr_mat_params,
};
