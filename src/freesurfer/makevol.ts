// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKEVOL_METADATA: Metadata = {
    id: "b095c7a5e6e89f542d67def46cd9241f840756fe.boutiques",
    name: "makevol",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MakevolParameters {
    "__STYXTYPE__": "makevol";
    "filename"?: string | null | undefined;
    "width"?: number | null | undefined;
    "height"?: number | null | undefined;
    "depth"?: number | null | undefined;
    "sizex"?: number | null | undefined;
    "sizey"?: number | null | undefined;
    "sizez"?: number | null | undefined;
    "set_method"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "makevol": makevol_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "makevol": makevol_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `makevol(...)`.
 *
 * @interface
 */
interface MakevolOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The created volume file.
     */
    output_file: OutputPathType | null;
}


function makevol_params(
    filename: string | null = "new_volume.mgz",
    width: number | null = 256,
    height: number | null = 256,
    depth: number | null = 256,
    sizex: number | null = 1.0,
    sizey: number | null = 1.0,
    sizez: number | null = 1.0,
    set_method: string | null = "xyz",
): MakevolParameters {
    /**
     * Build parameters.
    
     * @param filename Write volume to the given file name, implying type.
     * @param width Use integer WIDTH as the x dimension.
     * @param height Use integer HEIGHT as the y dimension.
     * @param depth Use integer DEPTH as the z dimension.
     * @param sizex Use float SIZEX as the x resolution.
     * @param sizey Use float SIZEY as the y resolution.
     * @param sizez Use float SIZEZ as the z resolution.
     * @param set_method Use METHOD to fill the values. Methods: xyz, random, constant.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "makevol" as const,
    };
    if (filename !== null) {
        params["filename"] = filename;
    }
    if (width !== null) {
        params["width"] = width;
    }
    if (height !== null) {
        params["height"] = height;
    }
    if (depth !== null) {
        params["depth"] = depth;
    }
    if (sizex !== null) {
        params["sizex"] = sizex;
    }
    if (sizey !== null) {
        params["sizey"] = sizey;
    }
    if (sizez !== null) {
        params["sizez"] = sizez;
    }
    if (set_method !== null) {
        params["set_method"] = set_method;
    }
    return params;
}


function makevol_cargs(
    params: MakevolParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("makevol");
    if ((params["filename"] ?? null) !== null) {
        cargs.push(
            "-f",
            (params["filename"] ?? null)
        );
    }
    if ((params["width"] ?? null) !== null) {
        cargs.push(
            "-x",
            String((params["width"] ?? null))
        );
    }
    if ((params["height"] ?? null) !== null) {
        cargs.push(
            "-y",
            String((params["height"] ?? null))
        );
    }
    if ((params["depth"] ?? null) !== null) {
        cargs.push(
            "-z",
            String((params["depth"] ?? null))
        );
    }
    if ((params["sizex"] ?? null) !== null) {
        cargs.push(
            "--sizex",
            String((params["sizex"] ?? null))
        );
    }
    if ((params["sizey"] ?? null) !== null) {
        cargs.push(
            "--sizey",
            String((params["sizey"] ?? null))
        );
    }
    if ((params["sizez"] ?? null) !== null) {
        cargs.push(
            "--sizez",
            String((params["sizez"] ?? null))
        );
    }
    if ((params["set_method"] ?? null) !== null) {
        cargs.push(
            "--set-method",
            (params["set_method"] ?? null)
        );
    }
    return cargs;
}


function makevol_outputs(
    params: MakevolParameters,
    execution: Execution,
): MakevolOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MakevolOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["filename"] ?? null) !== null) ? execution.outputFile([(params["filename"] ?? null)].join('')) : null,
    };
    return ret;
}


function makevol_execute(
    params: MakevolParameters,
    execution: Execution,
): MakevolOutputs {
    /**
     * A tool to create a volume with given parameters.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MakevolOutputs`).
     */
    params = execution.params(params)
    const cargs = makevol_cargs(params, execution)
    const ret = makevol_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function makevol(
    filename: string | null = "new_volume.mgz",
    width: number | null = 256,
    height: number | null = 256,
    depth: number | null = 256,
    sizex: number | null = 1.0,
    sizey: number | null = 1.0,
    sizez: number | null = 1.0,
    set_method: string | null = "xyz",
    runner: Runner | null = null,
): MakevolOutputs {
    /**
     * A tool to create a volume with given parameters.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param filename Write volume to the given file name, implying type.
     * @param width Use integer WIDTH as the x dimension.
     * @param height Use integer HEIGHT as the y dimension.
     * @param depth Use integer DEPTH as the z dimension.
     * @param sizex Use float SIZEX as the x resolution.
     * @param sizey Use float SIZEY as the y resolution.
     * @param sizez Use float SIZEZ as the z resolution.
     * @param set_method Use METHOD to fill the values. Methods: xyz, random, constant.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MakevolOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKEVOL_METADATA);
    const params = makevol_params(filename, width, height, depth, sizex, sizey, sizez, set_method)
    return makevol_execute(params, execution);
}


export {
      MAKEVOL_METADATA,
      MakevolOutputs,
      MakevolParameters,
      makevol,
      makevol_params,
};
