// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WMEDITS2SURF_METADATA: Metadata = {
    id: "0c7cb381e9d90786951e70e4d39e8ecbb9e43b31.boutiques",
    name: "wmedits2surf",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Wmedits2surfParameters {
    "@type": "freesurfer.wmedits2surf";
    "subject": string;
    "self": boolean;
    "overwrite": boolean;
    "tmp_dir"?: string | null | undefined;
    "cleanup": boolean;
    "no_cleanup": boolean;
    "debug": boolean;
    "lh": boolean;
    "rh": boolean;
    "no_surfs": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.wmedits2surf": wmedits2surf_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.wmedits2surf": wmedits2surf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `wmedits2surf(...)`.
 *
 * @interface
 */
interface Wmedits2surfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Left hemisphere white matter erase surface file.
     */
    lh_wmerase: OutputPathType;
    /**
     * Right hemisphere white matter erase surface file.
     */
    rh_wmerase: OutputPathType;
    /**
     * Left hemisphere white matter fill surface file.
     */
    lh_wmfill: OutputPathType;
    /**
     * Right hemisphere white matter fill surface file.
     */
    rh_wmfill: OutputPathType;
    /**
     * Statistics on the number of voxels erased.
     */
    wm_erase_stats: OutputPathType;
    /**
     * Statistics on the number of voxels filled.
     */
    wm_fill_stats: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier.
 * @param overwrite Force overwriting of existing results.
 * @param tmp_dir Temporary directory.
 * @param cleanup Cleanup temporary files after execution.
 * @param no_cleanup Do not cleanup temporary files after execution.
 * @param debug Debug mode.
 * @param lh Only do left hemisphere.
 * @param rh Only do right hemisphere.
 * @param no_surfs Do not compute surfaces, only count stats.
 *
 * @returns Parameter dictionary
 */
function wmedits2surf_params(
    subject: string,
    self: boolean = false,
    overwrite: boolean = false,
    tmp_dir: string | null = null,
    cleanup: boolean = false,
    no_cleanup: boolean = false,
    debug: boolean = false,
    lh: boolean = false,
    rh: boolean = false,
    no_surfs: boolean = false,
): Wmedits2surfParameters {
    const params = {
        "@type": "freesurfer.wmedits2surf" as const,
        "subject": subject,
        "self": self,
        "overwrite": overwrite,
        "cleanup": cleanup,
        "no_cleanup": no_cleanup,
        "debug": debug,
        "lh": lh,
        "rh": rh,
        "no_surfs": no_surfs,
    };
    if (tmp_dir !== null) {
        params["tmp_dir"] = tmp_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function wmedits2surf_cargs(
    params: Wmedits2surfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wmedits2surf");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["self"] ?? null)) {
        cargs.push("--self");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("--overwrite");
    }
    if ((params["tmp_dir"] ?? null) !== null) {
        cargs.push(
            "--tmp",
            (params["tmp_dir"] ?? null)
        );
    }
    if ((params["cleanup"] ?? null)) {
        cargs.push("--cleanup");
    }
    if ((params["no_cleanup"] ?? null)) {
        cargs.push("--no-cleanup");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["lh"] ?? null)) {
        cargs.push("--lh");
    }
    if ((params["rh"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["no_surfs"] ?? null)) {
        cargs.push("--no-surfs");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function wmedits2surf_outputs(
    params: Wmedits2surfParameters,
    execution: Execution,
): Wmedits2surfOutputs {
    const ret: Wmedits2surfOutputs = {
        root: execution.outputFile("."),
        lh_wmerase: execution.outputFile(["subject/surf/lh.wmerase.fsa.mgh"].join('')),
        rh_wmerase: execution.outputFile(["subject/surf/rh.wmerase.fsa.mgh"].join('')),
        lh_wmfill: execution.outputFile(["subject/surf/lh.wmfill.fsa.mgh"].join('')),
        rh_wmfill: execution.outputFile(["subject/surf/rh.wmfill.fsa.mgh"].join('')),
        wm_erase_stats: execution.outputFile(["subject/stats/wm.erase.dat"].join('')),
        wm_fill_stats: execution.outputFile(["subject/stats/wm.fill.dat"].join('')),
    };
    return ret;
}


/**
 * wmedits2surf
 *
 * Computes binary maps of surface locations where the wm.mgz has been edited. Creates files for each hemisphere for each type of edit.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Wmedits2surfOutputs`).
 */
function wmedits2surf_execute(
    params: Wmedits2surfParameters,
    runner: Runner | null = null,
): Wmedits2surfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WMEDITS2SURF_METADATA);
    params = execution.params(params)
    const cargs = wmedits2surf_cargs(params, execution)
    const ret = wmedits2surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * wmedits2surf
 *
 * Computes binary maps of surface locations where the wm.mgz has been edited. Creates files for each hemisphere for each type of edit.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier.
 * @param overwrite Force overwriting of existing results.
 * @param tmp_dir Temporary directory.
 * @param cleanup Cleanup temporary files after execution.
 * @param no_cleanup Do not cleanup temporary files after execution.
 * @param debug Debug mode.
 * @param lh Only do left hemisphere.
 * @param rh Only do right hemisphere.
 * @param no_surfs Do not compute surfaces, only count stats.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Wmedits2surfOutputs`).
 */
function wmedits2surf(
    subject: string,
    self: boolean = false,
    overwrite: boolean = false,
    tmp_dir: string | null = null,
    cleanup: boolean = false,
    no_cleanup: boolean = false,
    debug: boolean = false,
    lh: boolean = false,
    rh: boolean = false,
    no_surfs: boolean = false,
    runner: Runner | null = null,
): Wmedits2surfOutputs {
    const params = wmedits2surf_params(subject, self, overwrite, tmp_dir, cleanup, no_cleanup, debug, lh, rh, no_surfs)
    return wmedits2surf_execute(params, runner);
}


export {
      WMEDITS2SURF_METADATA,
      Wmedits2surfOutputs,
      Wmedits2surfParameters,
      wmedits2surf,
      wmedits2surf_execute,
      wmedits2surf_params,
};
