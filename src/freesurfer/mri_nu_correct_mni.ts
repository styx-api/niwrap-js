// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_NU_CORRECT_MNI_METADATA: Metadata = {
    id: "e97bbbb4bc37047d82235aa8b33fd61f71d4a9a0.boutiques",
    name: "mri_nu_correct.mni",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriNuCorrectMniParameters {
    "@type"?: "freesurfer/mri_nu_correct.mni";
    "input_volume": InputPathType;
    "output_volume": string;
    "iterations": number;
    "proto_iterations"?: number | null | undefined;
    "mask_volume"?: InputPathType | null | undefined;
    "stop_threshold"?: number | null | undefined;
    "uchar_transform"?: InputPathType | null | undefined;
    "ants_n3": boolean;
    "ants_n4": boolean;
    "no_uchar": boolean;
    "ants_n4_replace_zeros": boolean;
    "cm_flag": boolean;
    "debug_flag": boolean;
}
type MriNuCorrectMniParametersTagged = Required<Pick<MriNuCorrectMniParameters, '@type'>> & MriNuCorrectMniParameters;


/**
 * Output object returned when calling `MriNuCorrectMniParameters(...)`.
 *
 * @interface
 */
interface MriNuCorrectMniOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected output volume.
     */
    corrected_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume. Can be any format accepted by mri_convert.
 * @param output_volume Output volume. Can be any format accepted by mri_convert.
 * @param iterations Number of iterations to run nu_correct. Default is 4.
 * @param proto_iterations Passes as argument of the -iterations flag of nu_correct.
 * @param mask_volume Brainmask volume. Can be any format accepted by mri_convert.
 * @param stop_threshold Threshold for stopping iteration. Suggest values between 0.01 to 0.0001.
 * @param uchar_transform Use mri_make_uchar instead of conforming.
 * @param ants_n3 Run N3 using ANTS N3BiasFieldCorrection.
 * @param ants_n4 Run N4 using ANTS N4BiasFieldCorrection.
 * @param no_uchar Do not use mri_make_uchar (default).
 * @param ants_n4_replace_zeros Replace 0s with small random numbers then remove after nu correction.
 * @param cm_flag For use with data that is higher than 1mm resolution.
 * @param debug_flag Turn on debugging.
 *
 * @returns Parameter dictionary
 */
function mri_nu_correct_mni_params(
    input_volume: InputPathType,
    output_volume: string,
    iterations: number,
    proto_iterations: number | null = null,
    mask_volume: InputPathType | null = null,
    stop_threshold: number | null = null,
    uchar_transform: InputPathType | null = null,
    ants_n3: boolean = false,
    ants_n4: boolean = false,
    no_uchar: boolean = false,
    ants_n4_replace_zeros: boolean = false,
    cm_flag: boolean = false,
    debug_flag: boolean = false,
): MriNuCorrectMniParametersTagged {
    const params = {
        "@type": "freesurfer/mri_nu_correct.mni" as const,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "iterations": iterations,
        "ants_n3": ants_n3,
        "ants_n4": ants_n4,
        "no_uchar": no_uchar,
        "ants_n4_replace_zeros": ants_n4_replace_zeros,
        "cm_flag": cm_flag,
        "debug_flag": debug_flag,
    };
    if (proto_iterations !== null) {
        params["proto_iterations"] = proto_iterations;
    }
    if (mask_volume !== null) {
        params["mask_volume"] = mask_volume;
    }
    if (stop_threshold !== null) {
        params["stop_threshold"] = stop_threshold;
    }
    if (uchar_transform !== null) {
        params["uchar_transform"] = uchar_transform;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_nu_correct_mni_cargs(
    params: MriNuCorrectMniParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_nu_correct.mni");
    cargs.push(
        "--i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output_volume"] ?? null)
    );
    cargs.push(
        "--n",
        String((params["iterations"] ?? null))
    );
    if ((params["proto_iterations"] ?? null) !== null) {
        cargs.push(
            "--proto-iters",
            String((params["proto_iterations"] ?? null))
        );
    }
    if ((params["mask_volume"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_volume"] ?? null))
        );
    }
    if ((params["stop_threshold"] ?? null) !== null) {
        cargs.push(
            "--stop",
            String((params["stop_threshold"] ?? null))
        );
    }
    if ((params["uchar_transform"] ?? null) !== null) {
        cargs.push(
            "--uchar",
            execution.inputFile((params["uchar_transform"] ?? null))
        );
    }
    if ((params["ants_n3"] ?? false)) {
        cargs.push("--ants-n3");
    }
    if ((params["ants_n4"] ?? false)) {
        cargs.push("--ants-n4");
    }
    if ((params["no_uchar"] ?? false)) {
        cargs.push("--no-uchar");
    }
    if ((params["ants_n4_replace_zeros"] ?? false)) {
        cargs.push("--ants-n4-replace-zeros");
    }
    if ((params["cm_flag"] ?? false)) {
        cargs.push("--cm");
    }
    if ((params["debug_flag"] ?? false)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_nu_correct_mni_outputs(
    params: MriNuCorrectMniParameters,
    execution: Execution,
): MriNuCorrectMniOutputs {
    const ret: MriNuCorrectMniOutputs = {
        root: execution.outputFile("."),
        corrected_output: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_nu_correct.mni
 *
 * Wrapper for nu_correct, used for correcting intensity non-uniformity (bias fields).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNuCorrectMniOutputs`).
 */
function mri_nu_correct_mni_execute(
    params: MriNuCorrectMniParameters,
    runner: Runner | null = null,
): MriNuCorrectMniOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_NU_CORRECT_MNI_METADATA);
    params = execution.params(params)
    const cargs = mri_nu_correct_mni_cargs(params, execution)
    const ret = mri_nu_correct_mni_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_nu_correct.mni
 *
 * Wrapper for nu_correct, used for correcting intensity non-uniformity (bias fields).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume. Can be any format accepted by mri_convert.
 * @param output_volume Output volume. Can be any format accepted by mri_convert.
 * @param iterations Number of iterations to run nu_correct. Default is 4.
 * @param proto_iterations Passes as argument of the -iterations flag of nu_correct.
 * @param mask_volume Brainmask volume. Can be any format accepted by mri_convert.
 * @param stop_threshold Threshold for stopping iteration. Suggest values between 0.01 to 0.0001.
 * @param uchar_transform Use mri_make_uchar instead of conforming.
 * @param ants_n3 Run N3 using ANTS N3BiasFieldCorrection.
 * @param ants_n4 Run N4 using ANTS N4BiasFieldCorrection.
 * @param no_uchar Do not use mri_make_uchar (default).
 * @param ants_n4_replace_zeros Replace 0s with small random numbers then remove after nu correction.
 * @param cm_flag For use with data that is higher than 1mm resolution.
 * @param debug_flag Turn on debugging.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNuCorrectMniOutputs`).
 */
function mri_nu_correct_mni(
    input_volume: InputPathType,
    output_volume: string,
    iterations: number,
    proto_iterations: number | null = null,
    mask_volume: InputPathType | null = null,
    stop_threshold: number | null = null,
    uchar_transform: InputPathType | null = null,
    ants_n3: boolean = false,
    ants_n4: boolean = false,
    no_uchar: boolean = false,
    ants_n4_replace_zeros: boolean = false,
    cm_flag: boolean = false,
    debug_flag: boolean = false,
    runner: Runner | null = null,
): MriNuCorrectMniOutputs {
    const params = mri_nu_correct_mni_params(input_volume, output_volume, iterations, proto_iterations, mask_volume, stop_threshold, uchar_transform, ants_n3, ants_n4, no_uchar, ants_n4_replace_zeros, cm_flag, debug_flag)
    return mri_nu_correct_mni_execute(params, runner);
}


export {
      MRI_NU_CORRECT_MNI_METADATA,
      MriNuCorrectMniOutputs,
      mri_nu_correct_mni,
      mri_nu_correct_mni_execute,
      mri_nu_correct_mni_params,
};
