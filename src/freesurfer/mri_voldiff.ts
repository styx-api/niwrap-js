// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_VOLDIFF_METADATA: Metadata = {
    id: "5e429d73c117af7455959c3d9b5dd01c1cc12dae.boutiques",
    name: "mri_voldiff",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriVoldiffParameters {
    "@type": "freesurfer.mri_voldiff";
    "volume1": InputPathType;
    "volume2": InputPathType;
    "vox2ras_thresh"?: number | null | undefined;
    "pix_thresh"?: number | null | undefined;
    "allow_precision": boolean;
    "allow_resolution": boolean;
    "allow_vox2ras": boolean;
    "debug": boolean;
    "checkopts": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_voldiff": mri_voldiff_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_voldiff(...)`.
 *
 * @interface
 */
interface MriVoldiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume1 First input volume
 * @param volume2 Second input volume
 * @param vox2ras_thresh Vox2RAS threshold value
 * @param pix_thresh Pixel threshold value
 * @param allow_precision Allow differences in precision
 * @param allow_resolution Allow differences in resolution
 * @param allow_vox2ras Allow differences in Vox2RAS
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 *
 * @returns Parameter dictionary
 */
function mri_voldiff_params(
    volume1: InputPathType,
    volume2: InputPathType,
    vox2ras_thresh: number | null = null,
    pix_thresh: number | null = null,
    allow_precision: boolean = false,
    allow_resolution: boolean = false,
    allow_vox2ras: boolean = false,
    debug: boolean = false,
    checkopts: boolean = false,
): MriVoldiffParameters {
    const params = {
        "@type": "freesurfer.mri_voldiff" as const,
        "volume1": volume1,
        "volume2": volume2,
        "allow_precision": allow_precision,
        "allow_resolution": allow_resolution,
        "allow_vox2ras": allow_vox2ras,
        "debug": debug,
        "checkopts": checkopts,
    };
    if (vox2ras_thresh !== null) {
        params["vox2ras_thresh"] = vox2ras_thresh;
    }
    if (pix_thresh !== null) {
        params["pix_thresh"] = pix_thresh;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_voldiff_cargs(
    params: MriVoldiffParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_voldiff");
    cargs.push(
        "-v1",
        execution.inputFile((params["volume1"] ?? null))
    );
    cargs.push(
        "-v2",
        execution.inputFile((params["volume2"] ?? null))
    );
    if ((params["vox2ras_thresh"] ?? null) !== null) {
        cargs.push(
            "--vox2ras",
            String((params["vox2ras_thresh"] ?? null))
        );
    }
    if ((params["pix_thresh"] ?? null) !== null) {
        cargs.push(
            "--pix",
            String((params["pix_thresh"] ?? null))
        );
    }
    if ((params["allow_precision"] ?? null)) {
        cargs.push("--allow-prec");
    }
    if ((params["allow_resolution"] ?? null)) {
        cargs.push("--allow-res");
    }
    if ((params["allow_vox2ras"] ?? null)) {
        cargs.push("--allow-vox2ras");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_voldiff_outputs(
    params: MriVoldiffParameters,
    execution: Execution,
): MriVoldiffOutputs {
    const ret: MriVoldiffOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Determines whether two volumes are different in terms of pixel data, dimension, precision, resolution, or geometry.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriVoldiffOutputs`).
 */
function mri_voldiff_execute(
    params: MriVoldiffParameters,
    execution: Execution,
): MriVoldiffOutputs {
    params = execution.params(params)
    const cargs = mri_voldiff_cargs(params, execution)
    const ret = mri_voldiff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Determines whether two volumes are different in terms of pixel data, dimension, precision, resolution, or geometry.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param volume1 First input volume
 * @param volume2 Second input volume
 * @param vox2ras_thresh Vox2RAS threshold value
 * @param pix_thresh Pixel threshold value
 * @param allow_precision Allow differences in precision
 * @param allow_resolution Allow differences in resolution
 * @param allow_vox2ras Allow differences in Vox2RAS
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriVoldiffOutputs`).
 */
function mri_voldiff(
    volume1: InputPathType,
    volume2: InputPathType,
    vox2ras_thresh: number | null = null,
    pix_thresh: number | null = null,
    allow_precision: boolean = false,
    allow_resolution: boolean = false,
    allow_vox2ras: boolean = false,
    debug: boolean = false,
    checkopts: boolean = false,
    runner: Runner | null = null,
): MriVoldiffOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_VOLDIFF_METADATA);
    const params = mri_voldiff_params(volume1, volume2, vox2ras_thresh, pix_thresh, allow_precision, allow_resolution, allow_vox2ras, debug, checkopts)
    return mri_voldiff_execute(params, execution);
}


export {
      MRI_VOLDIFF_METADATA,
      MriVoldiffOutputs,
      MriVoldiffParameters,
      mri_voldiff,
      mri_voldiff_cargs,
      mri_voldiff_execute,
      mri_voldiff_outputs,
      mri_voldiff_params,
};
