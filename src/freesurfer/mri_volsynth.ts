// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_VOLSYNTH_METADATA: Metadata = {
    id: "ac2fbdf3f2279fbed0fc7c55ea50f3f4eb111eb3.boutiques",
    name: "mri_volsynth",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriVolsynthParameters {
    "__STYXTYPE__": "mri_volsynth";
    "output_volid": string;
    "template"?: string | null | undefined;
    "nframes"?: number | null | undefined;
    "offset_flag": boolean;
    "offset_mid_flag": boolean;
    "curv"?: string | null | undefined;
    "dim"?: Array<number> | null | undefined;
    "res"?: Array<number> | null | undefined;
    "vox_size"?: Array<number> | null | undefined;
    "tr"?: number | null | undefined;
    "cdircos"?: Array<number> | null | undefined;
    "rdircos"?: Array<number> | null | undefined;
    "sdircos"?: Array<number> | null | undefined;
    "c_ras"?: Array<number> | null | undefined;
    "p0"?: Array<number> | null | undefined;
    "precision"?: string | null | undefined;
    "seed"?: number | null | undefined;
    "seedfile"?: InputPathType | null | undefined;
    "pdf"?: string | null | undefined;
    "bb"?: Array<number> | null | undefined;
    "gmean"?: number | null | undefined;
    "gstd"?: number | null | undefined;
    "delta_crsf"?: Array<number> | null | undefined;
    "delta_val"?: number | null | undefined;
    "delta_val_off"?: number | null | undefined;
    "grid"?: Array<number> | null | undefined;
    "dof"?: number | null | undefined;
    "dof_num"?: number | null | undefined;
    "dof_den"?: number | null | undefined;
    "rescale_flag": boolean;
    "val_a"?: number | null | undefined;
    "val_b"?: number | null | undefined;
    "vox_radius"?: number | null | undefined;
    "mm_radius"?: number | null | undefined;
    "sphere_center"?: Array<number> | null | undefined;
    "hsc"?: Array<number> | null | undefined;
    "abs_flag": boolean;
    "cp"?: InputPathType | null | undefined;
    "spike"?: number | null | undefined;
    "fwhm"?: number | null | undefined;
    "sum2"?: InputPathType | null | undefined;
    "dim_surf_flag": boolean;
    "ctab"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_volsynth": mri_volsynth_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_volsynth(...)`.
 *
 * @interface
 */
interface MriVolsynthOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mri_volsynth_params(
    output_volid: string,
    template: string | null = null,
    nframes: number | null = null,
    offset_flag: boolean = false,
    offset_mid_flag: boolean = false,
    curv: string | null = null,
    dim: Array<number> | null = null,
    res: Array<number> | null = null,
    vox_size: Array<number> | null = null,
    tr: number | null = null,
    cdircos: Array<number> | null = null,
    rdircos: Array<number> | null = null,
    sdircos: Array<number> | null = null,
    c_ras: Array<number> | null = null,
    p0: Array<number> | null = null,
    precision: string | null = null,
    seed: number | null = null,
    seedfile: InputPathType | null = null,
    pdf: string | null = null,
    bb: Array<number> | null = null,
    gmean: number | null = null,
    gstd: number | null = null,
    delta_crsf: Array<number> | null = null,
    delta_val: number | null = null,
    delta_val_off: number | null = null,
    grid: Array<number> | null = null,
    dof: number | null = null,
    dof_num: number | null = null,
    dof_den: number | null = null,
    rescale_flag: boolean = false,
    val_a: number | null = null,
    val_b: number | null = null,
    vox_radius: number | null = null,
    mm_radius: number | null = null,
    sphere_center: Array<number> | null = null,
    hsc: Array<number> | null = null,
    abs_flag: boolean = false,
    cp: InputPathType | null = null,
    spike: number | null = null,
    fwhm: number | null = null,
    sum2: InputPathType | null = null,
    dim_surf_flag: boolean = false,
    ctab: InputPathType | null = null,
): MriVolsynthParameters {
    /**
     * Build parameters.
    
     * @param output_volid Output volume path id and format
     * @param template Template volume id
     * @param nframes Override template number of frames
     * @param offset_flag Use template as intensity offset
     * @param offset_mid_flag Use middle frame of template as intensity offset
     * @param curv Save output as curvature, uses lh.thickness as template. Requires subject and hemisphere.
     * @param dim Specify dimensionality nc nr ns nf
     * @param res Voxel resolution dc dr ds df (df is TR, in msec)
     * @param vox_size Change template voxel resolution and dimension dc dr ds
     * @param tr Time between frames in msec
     * @param cdircos Column cosine direction x, y, z
     * @param rdircos Row cosine direction x, y, z
     * @param sdircos Slice cosine direction x, y, z
     * @param c_ras RAS coordinates of 'center' voxel c_r c_a c_s
     * @param p0 First voxel coordinates p0r p0a p0s
     * @param precision Precision of the output (e.g., float)
     * @param seed Seed for the random number generator
     * @param seedfile Write seed value to this file
     * @param pdf Probability distribution function (e.g., gaussian, uniform, const)
     * @param bb Bounding box c r s dc dr ds (In=ValA, Out=ValB)
     * @param gmean Mean for the gaussian distribution
     * @param gstd Standard deviation for the gaussian distribution
     * @param delta_crsf Delta's col, row, slice, and frame coordinates
     * @param delta_val Delta value
     * @param delta_val_off Delta background value
     * @param grid Grid dimensions dcol, drow, dslice
     * @param dof Degrees of freedom for t and chi2 distributions
     * @param dof_num Numerator degrees of freedom for F distribution
     * @param dof_den Denominator degrees of freedom for F distribution
     * @param rescale_flag Rescale z, t, F, or chi2 after smoothing
     * @param val_a Set ValA
     * @param val_b Set ValB
     * @param vox_radius Radius in voxels for sphere
     * @param mm_radius Radius in mm for sphere
     * @param sphere_center Sphere center coordinates column, row, slice
     * @param hsc Multiply each frame by a random number between min and max
     * @param abs_flag Compute absolute value
     * @param cp Set control point voxels to 1
     * @param spike Set all values at a given time point to 1e9
     * @param fwhm Smooth by Full Width at Half Maximum (FWHM) in mm
     * @param sum2 Save sum of volume squared into specified file
     * @param dim_surf_flag Set dimension to nvertices x 1 x 1
     * @param ctab Embed color table
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_volsynth" as const,
        "output_volid": output_volid,
        "offset_flag": offset_flag,
        "offset_mid_flag": offset_mid_flag,
        "rescale_flag": rescale_flag,
        "abs_flag": abs_flag,
        "dim_surf_flag": dim_surf_flag,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (nframes !== null) {
        params["nframes"] = nframes;
    }
    if (curv !== null) {
        params["curv"] = curv;
    }
    if (dim !== null) {
        params["dim"] = dim;
    }
    if (res !== null) {
        params["res"] = res;
    }
    if (vox_size !== null) {
        params["vox_size"] = vox_size;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (cdircos !== null) {
        params["cdircos"] = cdircos;
    }
    if (rdircos !== null) {
        params["rdircos"] = rdircos;
    }
    if (sdircos !== null) {
        params["sdircos"] = sdircos;
    }
    if (c_ras !== null) {
        params["c_ras"] = c_ras;
    }
    if (p0 !== null) {
        params["p0"] = p0;
    }
    if (precision !== null) {
        params["precision"] = precision;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (seedfile !== null) {
        params["seedfile"] = seedfile;
    }
    if (pdf !== null) {
        params["pdf"] = pdf;
    }
    if (bb !== null) {
        params["bb"] = bb;
    }
    if (gmean !== null) {
        params["gmean"] = gmean;
    }
    if (gstd !== null) {
        params["gstd"] = gstd;
    }
    if (delta_crsf !== null) {
        params["delta_crsf"] = delta_crsf;
    }
    if (delta_val !== null) {
        params["delta_val"] = delta_val;
    }
    if (delta_val_off !== null) {
        params["delta_val_off"] = delta_val_off;
    }
    if (grid !== null) {
        params["grid"] = grid;
    }
    if (dof !== null) {
        params["dof"] = dof;
    }
    if (dof_num !== null) {
        params["dof_num"] = dof_num;
    }
    if (dof_den !== null) {
        params["dof_den"] = dof_den;
    }
    if (val_a !== null) {
        params["val_a"] = val_a;
    }
    if (val_b !== null) {
        params["val_b"] = val_b;
    }
    if (vox_radius !== null) {
        params["vox_radius"] = vox_radius;
    }
    if (mm_radius !== null) {
        params["mm_radius"] = mm_radius;
    }
    if (sphere_center !== null) {
        params["sphere_center"] = sphere_center;
    }
    if (hsc !== null) {
        params["hsc"] = hsc;
    }
    if (cp !== null) {
        params["cp"] = cp;
    }
    if (spike !== null) {
        params["spike"] = spike;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (sum2 !== null) {
        params["sum2"] = sum2;
    }
    if (ctab !== null) {
        params["ctab"] = ctab;
    }
    return params;
}


function mri_volsynth_cargs(
    params: MriVolsynthParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_volsynth");
    cargs.push(
        "--o",
        (params["output_volid"] ?? null)
    );
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "--template",
            (params["template"] ?? null)
        );
    }
    if ((params["nframes"] ?? null) !== null) {
        cargs.push(
            "--nframes",
            String((params["nframes"] ?? null))
        );
    }
    if ((params["offset_flag"] ?? null)) {
        cargs.push("--offset");
    }
    if ((params["offset_mid_flag"] ?? null)) {
        cargs.push("--offset-mid");
    }
    if ((params["curv"] ?? null) !== null) {
        cargs.push(
            "--curv",
            (params["curv"] ?? null)
        );
    }
    if ((params["dim"] ?? null) !== null) {
        cargs.push(
            "--dim",
            ...(params["dim"] ?? null).map(String)
        );
    }
    if ((params["res"] ?? null) !== null) {
        cargs.push(
            "--res",
            ...(params["res"] ?? null).map(String)
        );
    }
    if ((params["vox_size"] ?? null) !== null) {
        cargs.push(
            "--vox-size",
            ...(params["vox_size"] ?? null).map(String)
        );
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "--tr",
            String((params["tr"] ?? null))
        );
    }
    if ((params["cdircos"] ?? null) !== null) {
        cargs.push(
            "--cdircos",
            ...(params["cdircos"] ?? null).map(String)
        );
    }
    if ((params["rdircos"] ?? null) !== null) {
        cargs.push(
            "--rdircos",
            ...(params["rdircos"] ?? null).map(String)
        );
    }
    if ((params["sdircos"] ?? null) !== null) {
        cargs.push(
            "--sdircos",
            ...(params["sdircos"] ?? null).map(String)
        );
    }
    if ((params["c_ras"] ?? null) !== null) {
        cargs.push(
            "--c_ras",
            ...(params["c_ras"] ?? null).map(String)
        );
    }
    if ((params["p0"] ?? null) !== null) {
        cargs.push(
            "--p0",
            ...(params["p0"] ?? null).map(String)
        );
    }
    if ((params["precision"] ?? null) !== null) {
        cargs.push(
            "--precision",
            (params["precision"] ?? null)
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["seedfile"] ?? null) !== null) {
        cargs.push(
            "--seedfile",
            execution.inputFile((params["seedfile"] ?? null))
        );
    }
    if ((params["pdf"] ?? null) !== null) {
        cargs.push(
            "--pdf",
            (params["pdf"] ?? null)
        );
    }
    if ((params["bb"] ?? null) !== null) {
        cargs.push(
            "--bb",
            ...(params["bb"] ?? null).map(String)
        );
    }
    if ((params["gmean"] ?? null) !== null) {
        cargs.push(
            "--gmean",
            String((params["gmean"] ?? null))
        );
    }
    if ((params["gstd"] ?? null) !== null) {
        cargs.push(
            "--gstd",
            String((params["gstd"] ?? null))
        );
    }
    if ((params["delta_crsf"] ?? null) !== null) {
        cargs.push(
            "--delta-crsf",
            ...(params["delta_crsf"] ?? null).map(String)
        );
    }
    if ((params["delta_val"] ?? null) !== null) {
        cargs.push(
            "--delta-val",
            String((params["delta_val"] ?? null))
        );
    }
    if ((params["delta_val_off"] ?? null) !== null) {
        cargs.push(
            "--delta-val-off",
            String((params["delta_val_off"] ?? null))
        );
    }
    if ((params["grid"] ?? null) !== null) {
        cargs.push(
            "--grid",
            ...(params["grid"] ?? null).map(String)
        );
    }
    if ((params["dof"] ?? null) !== null) {
        cargs.push(
            "--dof",
            String((params["dof"] ?? null))
        );
    }
    if ((params["dof_num"] ?? null) !== null) {
        cargs.push(
            "--dof-num",
            String((params["dof_num"] ?? null))
        );
    }
    if ((params["dof_den"] ?? null) !== null) {
        cargs.push(
            "--dof-den",
            String((params["dof_den"] ?? null))
        );
    }
    if ((params["rescale_flag"] ?? null)) {
        cargs.push("--rescale");
    }
    if ((params["val_a"] ?? null) !== null) {
        cargs.push(
            "--val-a",
            String((params["val_a"] ?? null))
        );
    }
    if ((params["val_b"] ?? null) !== null) {
        cargs.push(
            "--val-b",
            String((params["val_b"] ?? null))
        );
    }
    if ((params["vox_radius"] ?? null) !== null) {
        cargs.push(
            "--vox-radius",
            String((params["vox_radius"] ?? null))
        );
    }
    if ((params["mm_radius"] ?? null) !== null) {
        cargs.push(
            "--mm-radius",
            String((params["mm_radius"] ?? null))
        );
    }
    if ((params["sphere_center"] ?? null) !== null) {
        cargs.push(
            "--sphere-center",
            ...(params["sphere_center"] ?? null).map(String)
        );
    }
    if ((params["hsc"] ?? null) !== null) {
        cargs.push(
            "--hsc",
            ...(params["hsc"] ?? null).map(String)
        );
    }
    if ((params["abs_flag"] ?? null)) {
        cargs.push("--abs");
    }
    if ((params["cp"] ?? null) !== null) {
        cargs.push(
            "--cp",
            execution.inputFile((params["cp"] ?? null))
        );
    }
    if ((params["spike"] ?? null) !== null) {
        cargs.push(
            "--spike",
            String((params["spike"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["sum2"] ?? null) !== null) {
        cargs.push(
            "--sum2",
            execution.inputFile((params["sum2"] ?? null))
        );
    }
    if ((params["dim_surf_flag"] ?? null)) {
        cargs.push("--dim-surf");
    }
    if ((params["ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab"] ?? null))
        );
    }
    return cargs;
}


function mri_volsynth_outputs(
    params: MriVolsynthParameters,
    execution: Execution,
): MriVolsynthOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriVolsynthOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mri_volsynth_execute(
    params: MriVolsynthParameters,
    execution: Execution,
): MriVolsynthOutputs {
    /**
     * Synthesizes a volume with specified geometry and probability distribution function.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriVolsynthOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_volsynth_cargs(params, execution)
    const ret = mri_volsynth_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_volsynth(
    output_volid: string,
    template: string | null = null,
    nframes: number | null = null,
    offset_flag: boolean = false,
    offset_mid_flag: boolean = false,
    curv: string | null = null,
    dim: Array<number> | null = null,
    res: Array<number> | null = null,
    vox_size: Array<number> | null = null,
    tr: number | null = null,
    cdircos: Array<number> | null = null,
    rdircos: Array<number> | null = null,
    sdircos: Array<number> | null = null,
    c_ras: Array<number> | null = null,
    p0: Array<number> | null = null,
    precision: string | null = null,
    seed: number | null = null,
    seedfile: InputPathType | null = null,
    pdf: string | null = null,
    bb: Array<number> | null = null,
    gmean: number | null = null,
    gstd: number | null = null,
    delta_crsf: Array<number> | null = null,
    delta_val: number | null = null,
    delta_val_off: number | null = null,
    grid: Array<number> | null = null,
    dof: number | null = null,
    dof_num: number | null = null,
    dof_den: number | null = null,
    rescale_flag: boolean = false,
    val_a: number | null = null,
    val_b: number | null = null,
    vox_radius: number | null = null,
    mm_radius: number | null = null,
    sphere_center: Array<number> | null = null,
    hsc: Array<number> | null = null,
    abs_flag: boolean = false,
    cp: InputPathType | null = null,
    spike: number | null = null,
    fwhm: number | null = null,
    sum2: InputPathType | null = null,
    dim_surf_flag: boolean = false,
    ctab: InputPathType | null = null,
    runner: Runner | null = null,
): MriVolsynthOutputs {
    /**
     * Synthesizes a volume with specified geometry and probability distribution function.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param output_volid Output volume path id and format
     * @param template Template volume id
     * @param nframes Override template number of frames
     * @param offset_flag Use template as intensity offset
     * @param offset_mid_flag Use middle frame of template as intensity offset
     * @param curv Save output as curvature, uses lh.thickness as template. Requires subject and hemisphere.
     * @param dim Specify dimensionality nc nr ns nf
     * @param res Voxel resolution dc dr ds df (df is TR, in msec)
     * @param vox_size Change template voxel resolution and dimension dc dr ds
     * @param tr Time between frames in msec
     * @param cdircos Column cosine direction x, y, z
     * @param rdircos Row cosine direction x, y, z
     * @param sdircos Slice cosine direction x, y, z
     * @param c_ras RAS coordinates of 'center' voxel c_r c_a c_s
     * @param p0 First voxel coordinates p0r p0a p0s
     * @param precision Precision of the output (e.g., float)
     * @param seed Seed for the random number generator
     * @param seedfile Write seed value to this file
     * @param pdf Probability distribution function (e.g., gaussian, uniform, const)
     * @param bb Bounding box c r s dc dr ds (In=ValA, Out=ValB)
     * @param gmean Mean for the gaussian distribution
     * @param gstd Standard deviation for the gaussian distribution
     * @param delta_crsf Delta's col, row, slice, and frame coordinates
     * @param delta_val Delta value
     * @param delta_val_off Delta background value
     * @param grid Grid dimensions dcol, drow, dslice
     * @param dof Degrees of freedom for t and chi2 distributions
     * @param dof_num Numerator degrees of freedom for F distribution
     * @param dof_den Denominator degrees of freedom for F distribution
     * @param rescale_flag Rescale z, t, F, or chi2 after smoothing
     * @param val_a Set ValA
     * @param val_b Set ValB
     * @param vox_radius Radius in voxels for sphere
     * @param mm_radius Radius in mm for sphere
     * @param sphere_center Sphere center coordinates column, row, slice
     * @param hsc Multiply each frame by a random number between min and max
     * @param abs_flag Compute absolute value
     * @param cp Set control point voxels to 1
     * @param spike Set all values at a given time point to 1e9
     * @param fwhm Smooth by Full Width at Half Maximum (FWHM) in mm
     * @param sum2 Save sum of volume squared into specified file
     * @param dim_surf_flag Set dimension to nvertices x 1 x 1
     * @param ctab Embed color table
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriVolsynthOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_VOLSYNTH_METADATA);
    const params = mri_volsynth_params(output_volid, template, nframes, offset_flag, offset_mid_flag, curv, dim, res, vox_size, tr, cdircos, rdircos, sdircos, c_ras, p0, precision, seed, seedfile, pdf, bb, gmean, gstd, delta_crsf, delta_val, delta_val_off, grid, dof, dof_num, dof_den, rescale_flag, val_a, val_b, vox_radius, mm_radius, sphere_center, hsc, abs_flag, cp, spike, fwhm, sum2, dim_surf_flag, ctab)
    return mri_volsynth_execute(params, execution);
}


export {
      MRI_VOLSYNTH_METADATA,
      MriVolsynthOutputs,
      MriVolsynthParameters,
      mri_volsynth,
      mri_volsynth_params,
};
