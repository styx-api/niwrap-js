// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMREG_METADATA: Metadata = {
    id: "818a93bfe29ae4f138331b2556d371211371266b.boutiques",
    name: "imreg",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImregParameters {
    "@type": "afni.imreg";
    "base_image": string;
    "image_sequence": Array<InputPathType>;
    "nowrite": boolean;
    "prefix"?: string | null | undefined;
    "suffix"?: string | null | undefined;
    "start"?: number | null | undefined;
    "step"?: number | null | undefined;
    "flim": boolean;
    "keepsize": boolean;
    "quiet": boolean;
    "debug": boolean;
    "dprefix"?: string | null | undefined;
    "bilinear": boolean;
    "modes"?: string | null | undefined;
    "mlcf": boolean;
    "wtim"?: InputPathType | null | undefined;
    "dfspace": boolean;
    "cmass": boolean;
    "fine"?: Array<number> | null | undefined;
    "nofine": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.imreg": imreg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.imreg": imreg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imreg(...)`.
 *
 * @interface
 */
interface ImregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Registered images
     */
    registered_images: OutputPathType | null;
    /**
     * Time series dx file
     */
    dx_file: OutputPathType | null;
    /**
     * Time series dy file
     */
    dy_file: OutputPathType | null;
    /**
     * Time series phi file
     */
    phi_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param base_image Base image or method to determine base image ('+AVER' or '+count')
 * @param image_sequence Sequence of images to be registered
 * @param nowrite Don't write outputs, just print progress reports
 * @param prefix Prefix for output file names
 * @param suffix Suffix for output file names
 * @param start Start index for output file names
 * @param step Step size for output file indices
 * @param flim Write output in mrilib floating point format
 * @param keepsize Preserve the original image size on output
 * @param quiet Don't write progress report messages
 * @param debug Write lots of debugging output
 * @param dprefix Prefix for dx, dy, and phi files
 * @param bilinear Use bilinear interpolation
 * @param modes Interpolation modes during coarse, fine, and registration phases
 * @param mlcf Equivalent to '-modes bilinear bicubic Fourier'
 * @param wtim Weighting image file
 * @param dfspace Use difiterated differential spatial method
 * @param cmass Align centers of mass of the images
 * @param fine Fine fit parameters: blur, dxy, dphi
 * @param nofine Turn off the 'fine' fit algorithm
 *
 * @returns Parameter dictionary
 */
function imreg_params(
    base_image: string,
    image_sequence: Array<InputPathType>,
    nowrite: boolean = false,
    prefix: string | null = null,
    suffix: string | null = null,
    start: number | null = null,
    step: number | null = null,
    flim: boolean = false,
    keepsize: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    dprefix: string | null = null,
    bilinear: boolean = false,
    modes: string | null = null,
    mlcf: boolean = false,
    wtim: InputPathType | null = null,
    dfspace: boolean = false,
    cmass: boolean = false,
    fine: Array<number> | null = null,
    nofine: boolean = false,
): ImregParameters {
    const params = {
        "@type": "afni.imreg" as const,
        "base_image": base_image,
        "image_sequence": image_sequence,
        "nowrite": nowrite,
        "flim": flim,
        "keepsize": keepsize,
        "quiet": quiet,
        "debug": debug,
        "bilinear": bilinear,
        "mlcf": mlcf,
        "dfspace": dfspace,
        "cmass": cmass,
        "nofine": nofine,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    if (start !== null) {
        params["start"] = start;
    }
    if (step !== null) {
        params["step"] = step;
    }
    if (dprefix !== null) {
        params["dprefix"] = dprefix;
    }
    if (modes !== null) {
        params["modes"] = modes;
    }
    if (wtim !== null) {
        params["wtim"] = wtim;
    }
    if (fine !== null) {
        params["fine"] = fine;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imreg_cargs(
    params: ImregParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imreg");
    cargs.push((params["base_image"] ?? null));
    cargs.push(...(params["image_sequence"] ?? null).map(f => execution.inputFile(f)));
    if ((params["nowrite"] ?? null)) {
        cargs.push("-nowrite");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-suffix",
            (params["suffix"] ?? null)
        );
    }
    if ((params["start"] ?? null) !== null) {
        cargs.push(
            "-start",
            String((params["start"] ?? null))
        );
    }
    if ((params["step"] ?? null) !== null) {
        cargs.push(
            "-step",
            String((params["step"] ?? null))
        );
    }
    if ((params["flim"] ?? null)) {
        cargs.push("-flim");
    }
    if ((params["keepsize"] ?? null)) {
        cargs.push("-keepsize");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["dprefix"] ?? null) !== null) {
        cargs.push(
            "-dprefix",
            (params["dprefix"] ?? null)
        );
    }
    if ((params["bilinear"] ?? null)) {
        cargs.push("-bilinear");
    }
    if ((params["modes"] ?? null) !== null) {
        cargs.push(
            "-modes",
            (params["modes"] ?? null)
        );
    }
    if ((params["mlcf"] ?? null)) {
        cargs.push("-mlcF");
    }
    if ((params["wtim"] ?? null) !== null) {
        cargs.push(
            "-wtim",
            execution.inputFile((params["wtim"] ?? null))
        );
    }
    if ((params["dfspace"] ?? null)) {
        cargs.push("-dfspace");
    }
    if ((params["cmass"] ?? null)) {
        cargs.push("-cmass");
    }
    if ((params["fine"] ?? null) !== null) {
        cargs.push(
            "-fine",
            ...(params["fine"] ?? null).map(String)
        );
    }
    if ((params["nofine"] ?? null)) {
        cargs.push("-nofine");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imreg_outputs(
    params: ImregParameters,
    execution: Execution,
): ImregOutputs {
    const ret: ImregOutputs = {
        root: execution.outputFile("."),
        registered_images: ((params["prefix"] ?? null) !== null && (params["suffix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".[INDEX].", (params["suffix"] ?? null)].join('')) : null,
        dx_file: ((params["dprefix"] ?? null) !== null) ? execution.outputFile([(params["dprefix"] ?? null), ".dx"].join('')) : null,
        dy_file: ((params["dprefix"] ?? null) !== null) ? execution.outputFile([(params["dprefix"] ?? null), ".dy"].join('')) : null,
        phi_file: ((params["dprefix"] ?? null) !== null) ? execution.outputFile([(params["dprefix"] ?? null), ".phi"].join('')) : null,
    };
    return ret;
}


/**
 * imreg
 *
 * Registers each 2D image in 'image_sequence' to 'base_image'.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImregOutputs`).
 */
function imreg_execute(
    params: ImregParameters,
    runner: Runner | null = null,
): ImregOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMREG_METADATA);
    params = execution.params(params)
    const cargs = imreg_cargs(params, execution)
    const ret = imreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * imreg
 *
 * Registers each 2D image in 'image_sequence' to 'base_image'.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param base_image Base image or method to determine base image ('+AVER' or '+count')
 * @param image_sequence Sequence of images to be registered
 * @param nowrite Don't write outputs, just print progress reports
 * @param prefix Prefix for output file names
 * @param suffix Suffix for output file names
 * @param start Start index for output file names
 * @param step Step size for output file indices
 * @param flim Write output in mrilib floating point format
 * @param keepsize Preserve the original image size on output
 * @param quiet Don't write progress report messages
 * @param debug Write lots of debugging output
 * @param dprefix Prefix for dx, dy, and phi files
 * @param bilinear Use bilinear interpolation
 * @param modes Interpolation modes during coarse, fine, and registration phases
 * @param mlcf Equivalent to '-modes bilinear bicubic Fourier'
 * @param wtim Weighting image file
 * @param dfspace Use difiterated differential spatial method
 * @param cmass Align centers of mass of the images
 * @param fine Fine fit parameters: blur, dxy, dphi
 * @param nofine Turn off the 'fine' fit algorithm
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImregOutputs`).
 */
function imreg(
    base_image: string,
    image_sequence: Array<InputPathType>,
    nowrite: boolean = false,
    prefix: string | null = null,
    suffix: string | null = null,
    start: number | null = null,
    step: number | null = null,
    flim: boolean = false,
    keepsize: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    dprefix: string | null = null,
    bilinear: boolean = false,
    modes: string | null = null,
    mlcf: boolean = false,
    wtim: InputPathType | null = null,
    dfspace: boolean = false,
    cmass: boolean = false,
    fine: Array<number> | null = null,
    nofine: boolean = false,
    runner: Runner | null = null,
): ImregOutputs {
    const params = imreg_params(base_image, image_sequence, nowrite, prefix, suffix, start, step, flim, keepsize, quiet, debug, dprefix, bilinear, modes, mlcf, wtim, dfspace, cmass, fine, nofine)
    return imreg_execute(params, runner);
}


export {
      IMREG_METADATA,
      ImregOutputs,
      ImregParameters,
      imreg,
      imreg_execute,
      imreg_params,
};
