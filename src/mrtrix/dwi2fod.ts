// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DWI2FOD_METADATA: Metadata = {
    id: "f90ba900231375ab5ce1f13e4939fae9c3c04d95.boutiques",
    name: "dwi2fod",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Dwi2fodFslgradParameters {
    "__STYXTYPE__": "fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface Dwi2fodVariousStringParameters {
    "__STYXTYPE__": "VariousString";
    "obj": string;
}


interface Dwi2fodVariousFileParameters {
    "__STYXTYPE__": "VariousFile";
    "obj": InputPathType;
}


interface Dwi2fodConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface Dwi2fodResponseOdfParameters {
    "__STYXTYPE__": "response_odf";
    "response": InputPathType;
    "odf": string;
}


interface Dwi2fodParameters {
    "__STYXTYPE__": "dwi2fod";
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: Dwi2fodFslgradParameters | null | undefined;
    "shells"?: Array<number> | null | undefined;
    "directions"?: InputPathType | null | undefined;
    "lmax"?: Array<number> | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "filter"?: InputPathType | null | undefined;
    "neg_lambda"?: number | null | undefined;
    "norm_lambda"?: number | null | undefined;
    "threshold"?: number | null | undefined;
    "niter"?: number | null | undefined;
    "norm_lambda_1"?: number | null | undefined;
    "neg_lambda_1"?: number | null | undefined;
    "predicted_signal"?: string | null | undefined;
    "strides"?: Dwi2fodVariousStringParameters | Dwi2fodVariousFileParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Dwi2fodConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "algorithm": string;
    "dwi": InputPathType;
    "response_odf": Array<Dwi2fodResponseOdfParameters>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dwi2fod": dwi2fod_cargs,
        "fslgrad": dwi2fod_fslgrad_cargs,
        "VariousString": dwi2fod_various_string_cargs,
        "VariousFile": dwi2fod_various_file_cargs,
        "config": dwi2fod_config_cargs,
        "response_odf": dwi2fod_response_odf_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "dwi2fod": dwi2fod_outputs,
        "response_odf": dwi2fod_response_odf_outputs,
    };
    return outputsFuncs[t];
}


function dwi2fod_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): Dwi2fodFslgradParameters {
    /**
     * Build parameters.
    
     * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
     * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


function dwi2fod_fslgrad_cargs(
    params: Dwi2fodFslgradParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


function dwi2fod_various_string_params(
    obj: string,
): Dwi2fodVariousStringParameters {
    /**
     * Build parameters.
    
     * @param obj String object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


function dwi2fod_various_string_cargs(
    params: Dwi2fodVariousStringParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


function dwi2fod_various_file_params(
    obj: InputPathType,
): Dwi2fodVariousFileParameters {
    /**
     * Build parameters.
    
     * @param obj File object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


function dwi2fod_various_file_cargs(
    params: Dwi2fodVariousFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


function dwi2fod_config_params(
    key: string,
    value: string,
): Dwi2fodConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function dwi2fod_config_cargs(
    params: Dwi2fodConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `Array<Dwi2fodResponseOdfParameters>(...)`.
 *
 * @interface
 */
interface Dwi2fodResponseOdfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output ODF image
     */
    odf: OutputPathType;
}


function dwi2fod_response_odf_params(
    response: InputPathType,
    odf: string,
): Dwi2fodResponseOdfParameters {
    /**
     * Build parameters.
    
     * @param response input tissue response
     * @param odf output ODF image
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "response_odf" as const,
        "response": response,
        "odf": odf,
    };
    return params;
}


function dwi2fod_response_odf_cargs(
    params: Dwi2fodResponseOdfParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["response"] ?? null)));
    cargs.push((params["odf"] ?? null));
    return cargs;
}


function dwi2fod_response_odf_outputs(
    params: Dwi2fodResponseOdfParameters,
    execution: Execution,
): Dwi2fodResponseOdfOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Dwi2fodResponseOdfOutputs = {
        root: execution.outputFile("."),
        odf: execution.outputFile([(params["odf"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `dwi2fod(...)`.
 *
 * @interface
 */
interface Dwi2fodOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output the predicted dwi image. 
     */
    predicted_signal: OutputPathType | null;
    /**
     * Outputs from `dwi2fod_response_odf_outputs`.This is a list of outputs with the same length and order as the inputs.
     */
    response_odf: Array<Dwi2fodResponseOdfOutputs>;
}


function dwi2fod_params(
    algorithm: string,
    dwi: InputPathType,
    response_odf: Array<Dwi2fodResponseOdfParameters>,
    grad: InputPathType | null = null,
    fslgrad: Dwi2fodFslgradParameters | null = null,
    shells: Array<number> | null = null,
    directions: InputPathType | null = null,
    lmax: Array<number> | null = null,
    mask: InputPathType | null = null,
    filter: InputPathType | null = null,
    neg_lambda: number | null = null,
    norm_lambda: number | null = null,
    threshold: number | null = null,
    niter: number | null = null,
    norm_lambda_1: number | null = null,
    neg_lambda_1: number | null = null,
    predicted_signal: string | null = null,
    strides: Dwi2fodVariousStringParameters | Dwi2fodVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2fodConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Dwi2fodParameters {
    /**
     * Build parameters.
    
     * @param algorithm the algorithm to use for FOD estimation. (options are: csd,msmt_csd)
     * @param dwi the input diffusion-weighted image
     * @param response_odf pairs of input tissue response and output ODF images
     * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
     * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
     * @param shells specify one or more b-values to use during processing, as a comma-separated list of the desired approximate b-values (b-values are clustered to allow for small deviations). Note that some commands are incompatible with multiple b-values, and will report an error if more than one b-value is provided. 
WARNING: note that, even though the b=0 volumes are never referred to as shells in the literature, they still have to be explicitly included in the list of b-values as provided to the -shell option! Several algorithms which include the b=0 volumes in their computations may otherwise return an undesired result.
     * @param directions specify the directions over which to apply the non-negativity constraint (by default, the built-in 300 direction set is used). These should be supplied as a text file containing [ az el ] pairs for the directions.
     * @param lmax the maximum spherical harmonic order for the output FOD(s).For algorithms with multiple outputs, this should be provided as a comma-separated list of integers, one for each output image; for single-output algorithms, only a single integer should be provided. If omitted, the command will use the lmax of the corresponding response function (i.e based on its number of coefficients), up to a maximum of 8.
     * @param mask only perform computation within the specified binary brain mask image.
     * @param filter the linear frequency filtering parameters used for the initial linear spherical deconvolution step (default = [ 1 1 1 0 0 ]). These should be  supplied as a text file containing the filtering coefficients for each even harmonic order.
     * @param neg_lambda the regularisation parameter lambda that controls the strength of the non-negativity constraint (default = 1).
     * @param norm_lambda the regularisation parameter lambda that controls the strength of the constraint on the norm of the solution (default = 1).
     * @param threshold the threshold below which the amplitude of the FOD is assumed to be zero, expressed as an absolute amplitude (default = 0).
     * @param niter the maximum number of iterations to perform for each voxel (default = 50). Use '-niter 0' for a linear unconstrained spherical deconvolution.
     * @param norm_lambda_1 the regularisation parameter lambda that controls the strength of the constraint on the norm of the solution (default = 1e-10).
     * @param neg_lambda_1 the regularisation parameter lambda that controls the strength of the non-negativity constraint (default = 1e-10).
     * @param predicted_signal output the predicted dwi image.
     * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dwi2fod" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "algorithm": algorithm,
        "dwi": dwi,
        "response_odf": response_odf,
    };
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (shells !== null) {
        params["shells"] = shells;
    }
    if (directions !== null) {
        params["directions"] = directions;
    }
    if (lmax !== null) {
        params["lmax"] = lmax;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (filter !== null) {
        params["filter"] = filter;
    }
    if (neg_lambda !== null) {
        params["neg_lambda"] = neg_lambda;
    }
    if (norm_lambda !== null) {
        params["norm_lambda"] = norm_lambda;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (niter !== null) {
        params["niter"] = niter;
    }
    if (norm_lambda_1 !== null) {
        params["norm_lambda_1"] = norm_lambda_1;
    }
    if (neg_lambda_1 !== null) {
        params["neg_lambda_1"] = neg_lambda_1;
    }
    if (predicted_signal !== null) {
        params["predicted_signal"] = predicted_signal;
    }
    if (strides !== null) {
        params["strides"] = strides;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function dwi2fod_cargs(
    params: Dwi2fodParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dwi2fod");
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null).__STYXTYPE__)((params["fslgrad"] ?? null), execution));
    }
    if ((params["shells"] ?? null) !== null) {
        cargs.push(
            "-shells",
            (params["shells"] ?? null).map(String).join(",")
        );
    }
    if ((params["directions"] ?? null) !== null) {
        cargs.push(
            "-directions",
            execution.inputFile((params["directions"] ?? null))
        );
    }
    if ((params["lmax"] ?? null) !== null) {
        cargs.push(
            "-lmax",
            (params["lmax"] ?? null).map(String).join(",")
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["filter"] ?? null) !== null) {
        cargs.push(
            "-filter",
            execution.inputFile((params["filter"] ?? null))
        );
    }
    if ((params["neg_lambda"] ?? null) !== null) {
        cargs.push(
            "-neg_lambda",
            String((params["neg_lambda"] ?? null))
        );
    }
    if ((params["norm_lambda"] ?? null) !== null) {
        cargs.push(
            "-norm_lambda",
            String((params["norm_lambda"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["niter"] ?? null))
        );
    }
    if ((params["norm_lambda_1"] ?? null) !== null) {
        cargs.push(
            "-norm_lambda",
            String((params["norm_lambda_1"] ?? null))
        );
    }
    if ((params["neg_lambda_1"] ?? null) !== null) {
        cargs.push(
            "-neg_lambda",
            String((params["neg_lambda_1"] ?? null))
        );
    }
    if ((params["predicted_signal"] ?? null) !== null) {
        cargs.push(
            "-predicted_signal",
            (params["predicted_signal"] ?? null)
        );
    }
    if ((params["strides"] ?? null) !== null) {
        cargs.push(
            "-strides",
            ...dynCargs((params["strides"] ?? null).__STYXTYPE__)((params["strides"] ?? null), execution)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push((params["algorithm"] ?? null));
    cargs.push(execution.inputFile((params["dwi"] ?? null)));
    cargs.push(...(params["response_odf"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    return cargs;
}


function dwi2fod_outputs(
    params: Dwi2fodParameters,
    execution: Execution,
): Dwi2fodOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Dwi2fodOutputs = {
        root: execution.outputFile("."),
        predicted_signal: ((params["predicted_signal"] ?? null) !== null) ? execution.outputFile([(params["predicted_signal"] ?? null)].join('')) : null,
        response_odf: (params["response_odf"] ?? null).map(i => dynOutputs(i.__STYXTYPE__)?.(i, execution) ?? null),
    };
    return ret;
}


function dwi2fod_execute(
    params: Dwi2fodParameters,
    execution: Execution,
): Dwi2fodOutputs {
    /**
     * Estimate fibre orientation distributions from diffusion data using spherical deconvolution.
     * 
     * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
     * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
     * 
     * References:
     * 
     * * If using csd algorithm:
     * Tournier, J.-D.; Calamante, F. & Connelly, A. Robust determination of the fibre orientation distribution in diffusion MRI: Non-negativity constrained super-resolved spherical deconvolution. NeuroImage, 2007, 35, 1459-1472
     * 
     * * If using msmt_csd algorithm:
     * Jeurissen, B; Tournier, J-D; Dhollander, T; Connelly, A & Sijbers, J. Multi-tissue constrained spherical deconvolution for improved analysis of multi-shell diffusion MRI data. NeuroImage, 2014, 103, 411-426
     * 
     * Tournier, J.-D.; Calamante, F., Gadian, D.G. & Connelly, A. Direct estimation of the fiber orientation density function from diffusion-weighted MRI data using spherical deconvolution. NeuroImage, 2004, 23, 1176-1185.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Dwi2fodOutputs`).
     */
    params = execution.params(params)
    const cargs = dwi2fod_cargs(params, execution)
    const ret = dwi2fod_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dwi2fod(
    algorithm: string,
    dwi: InputPathType,
    response_odf: Array<Dwi2fodResponseOdfParameters>,
    grad: InputPathType | null = null,
    fslgrad: Dwi2fodFslgradParameters | null = null,
    shells: Array<number> | null = null,
    directions: InputPathType | null = null,
    lmax: Array<number> | null = null,
    mask: InputPathType | null = null,
    filter: InputPathType | null = null,
    neg_lambda: number | null = null,
    norm_lambda: number | null = null,
    threshold: number | null = null,
    niter: number | null = null,
    norm_lambda_1: number | null = null,
    neg_lambda_1: number | null = null,
    predicted_signal: string | null = null,
    strides: Dwi2fodVariousStringParameters | Dwi2fodVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2fodConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Dwi2fodOutputs {
    /**
     * Estimate fibre orientation distributions from diffusion data using spherical deconvolution.
     * 
     * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
     * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
     * 
     * References:
     * 
     * * If using csd algorithm:
     * Tournier, J.-D.; Calamante, F. & Connelly, A. Robust determination of the fibre orientation distribution in diffusion MRI: Non-negativity constrained super-resolved spherical deconvolution. NeuroImage, 2007, 35, 1459-1472
     * 
     * * If using msmt_csd algorithm:
     * Jeurissen, B; Tournier, J-D; Dhollander, T; Connelly, A & Sijbers, J. Multi-tissue constrained spherical deconvolution for improved analysis of multi-shell diffusion MRI data. NeuroImage, 2014, 103, 411-426
     * 
     * Tournier, J.-D.; Calamante, F., Gadian, D.G. & Connelly, A. Direct estimation of the fiber orientation density function from diffusion-weighted MRI data using spherical deconvolution. NeuroImage, 2004, 23, 1176-1185.
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param algorithm the algorithm to use for FOD estimation. (options are: csd,msmt_csd)
     * @param dwi the input diffusion-weighted image
     * @param response_odf pairs of input tissue response and output ODF images
     * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
     * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
     * @param shells specify one or more b-values to use during processing, as a comma-separated list of the desired approximate b-values (b-values are clustered to allow for small deviations). Note that some commands are incompatible with multiple b-values, and will report an error if more than one b-value is provided. 
WARNING: note that, even though the b=0 volumes are never referred to as shells in the literature, they still have to be explicitly included in the list of b-values as provided to the -shell option! Several algorithms which include the b=0 volumes in their computations may otherwise return an undesired result.
     * @param directions specify the directions over which to apply the non-negativity constraint (by default, the built-in 300 direction set is used). These should be supplied as a text file containing [ az el ] pairs for the directions.
     * @param lmax the maximum spherical harmonic order for the output FOD(s).For algorithms with multiple outputs, this should be provided as a comma-separated list of integers, one for each output image; for single-output algorithms, only a single integer should be provided. If omitted, the command will use the lmax of the corresponding response function (i.e based on its number of coefficients), up to a maximum of 8.
     * @param mask only perform computation within the specified binary brain mask image.
     * @param filter the linear frequency filtering parameters used for the initial linear spherical deconvolution step (default = [ 1 1 1 0 0 ]). These should be  supplied as a text file containing the filtering coefficients for each even harmonic order.
     * @param neg_lambda the regularisation parameter lambda that controls the strength of the non-negativity constraint (default = 1).
     * @param norm_lambda the regularisation parameter lambda that controls the strength of the constraint on the norm of the solution (default = 1).
     * @param threshold the threshold below which the amplitude of the FOD is assumed to be zero, expressed as an absolute amplitude (default = 0).
     * @param niter the maximum number of iterations to perform for each voxel (default = 50). Use '-niter 0' for a linear unconstrained spherical deconvolution.
     * @param norm_lambda_1 the regularisation parameter lambda that controls the strength of the constraint on the norm of the solution (default = 1e-10).
     * @param neg_lambda_1 the regularisation parameter lambda that controls the strength of the non-negativity constraint (default = 1e-10).
     * @param predicted_signal output the predicted dwi image.
     * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Dwi2fodOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DWI2FOD_METADATA);
    const params = dwi2fod_params(algorithm, dwi, response_odf, grad, fslgrad, shells, directions, lmax, mask, filter, neg_lambda, norm_lambda, threshold, niter, norm_lambda_1, neg_lambda_1, predicted_signal, strides, info, quiet, debug, force, nthreads, config, help, version)
    return dwi2fod_execute(params, execution);
}


export {
      DWI2FOD_METADATA,
      Dwi2fodConfigParameters,
      Dwi2fodFslgradParameters,
      Dwi2fodOutputs,
      Dwi2fodParameters,
      Dwi2fodResponseOdfOutputs,
      Dwi2fodResponseOdfParameters,
      Dwi2fodVariousFileParameters,
      Dwi2fodVariousStringParameters,
      dwi2fod,
      dwi2fod_config_params,
      dwi2fod_fslgrad_params,
      dwi2fod_params,
      dwi2fod_response_odf_params,
      dwi2fod_various_file_params,
      dwi2fod_various_string_params,
};
