// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_5TTCHECK_METADATA: Metadata = {
    id: "173240c50f533553ebf03ac04f99f00671f6b2e7.boutiques",
    name: "5ttcheck",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface V5ttcheckConfigParameters {
    "@type": "mrtrix.5ttcheck.config";
    "key": string;
    "value": string;
}


interface V5ttcheckParameters {
    "@type": "mrtrix.5ttcheck";
    "voxels"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<V5ttcheckConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.5ttcheck": v_5ttcheck_cargs,
        "mrtrix.5ttcheck.config": v_5ttcheck_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function v_5ttcheck_config_params(
    key: string,
    value: string,
): V5ttcheckConfigParameters {
    const params = {
        "@type": "mrtrix.5ttcheck.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttcheck_config_cargs(
    params: V5ttcheckConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `v_5ttcheck(...)`.
 *
 * @interface
 */
interface V5ttcheckOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the 5TT image(s) to be tested
 * @param voxels output mask images highlighting voxels where the input does not conform to 5TT requirements
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function v_5ttcheck_params(
    input: Array<InputPathType>,
    voxels: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5ttcheckConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): V5ttcheckParameters {
    const params = {
        "@type": "mrtrix.5ttcheck" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
    };
    if (voxels !== null) {
        params["voxels"] = voxels;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_5ttcheck_cargs(
    params: V5ttcheckParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("5ttcheck");
    if ((params["voxels"] ?? null) !== null) {
        cargs.push(
            "-voxels",
            (params["voxels"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...(params["input"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_5ttcheck_outputs(
    params: V5ttcheckParameters,
    execution: Execution,
): V5ttcheckOutputs {
    const ret: V5ttcheckOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Thoroughly check that one or more images conform to the expected ACT five-tissue-type (5TT) format.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V5ttcheckOutputs`).
 */
function v_5ttcheck_execute(
    params: V5ttcheckParameters,
    execution: Execution,
): V5ttcheckOutputs {
    params = execution.params(params)
    const cargs = v_5ttcheck_cargs(params, execution)
    const ret = v_5ttcheck_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Thoroughly check that one or more images conform to the expected ACT five-tissue-type (5TT) format.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the 5TT image(s) to be tested
 * @param voxels output mask images highlighting voxels where the input does not conform to 5TT requirements
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V5ttcheckOutputs`).
 */
function v_5ttcheck(
    input: Array<InputPathType>,
    voxels: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<V5ttcheckConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): V5ttcheckOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_5TTCHECK_METADATA);
    const params = v_5ttcheck_params(input, voxels, info, quiet, debug, force, nthreads, config, help, version)
    return v_5ttcheck_execute(params, execution);
}


export {
      V5ttcheckConfigParameters,
      V5ttcheckOutputs,
      V5ttcheckParameters,
      V_5TTCHECK_METADATA,
      v_5ttcheck,
      v_5ttcheck_cargs,
      v_5ttcheck_config_cargs,
      v_5ttcheck_config_params,
      v_5ttcheck_execute,
      v_5ttcheck_outputs,
      v_5ttcheck_params,
};
