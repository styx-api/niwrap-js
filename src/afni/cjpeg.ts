// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CJPEG_METADATA: Metadata = {
    id: "2c8dea63ef6018ee1b6008e2b8bd11dd5b58bb30.boutiques",
    name: "cjpeg",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface CjpegParameters {
    "@type": "afni.cjpeg";
    "quality"?: number | null | undefined;
    "grayscale": boolean;
    "optimize": boolean;
    "baseline": boolean;
    "progressive": boolean;
    "outfile": string;
    "infile": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.cjpeg": cjpeg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.cjpeg": cjpeg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cjpeg(...)`.
 *
 * @interface
 */
interface CjpegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output JPEG file
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param outfile Output JPEG file
 * @param infile Input image file
 * @param quality Quality of JPEG image (0-100)
 * @param grayscale Create a grayscale JPEG file
 * @param optimize Optimize Huffman table
 * @param baseline Create a baseline JPEG file
 * @param progressive Create a progressive JPEG file
 *
 * @returns Parameter dictionary
 */
function cjpeg_params(
    outfile: string,
    infile: InputPathType,
    quality: number | null = null,
    grayscale: boolean = false,
    optimize: boolean = false,
    baseline: boolean = false,
    progressive: boolean = false,
): CjpegParameters {
    const params = {
        "@type": "afni.cjpeg" as const,
        "grayscale": grayscale,
        "optimize": optimize,
        "baseline": baseline,
        "progressive": progressive,
        "outfile": outfile,
        "infile": infile,
    };
    if (quality !== null) {
        params["quality"] = quality;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cjpeg_cargs(
    params: CjpegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("cjpeg");
    if ((params["quality"] ?? null) !== null) {
        cargs.push(
            "-quality",
            String((params["quality"] ?? null))
        );
    }
    if ((params["grayscale"] ?? null)) {
        cargs.push("-grayscale");
    }
    if ((params["optimize"] ?? null)) {
        cargs.push("-optimize");
    }
    if ((params["baseline"] ?? null)) {
        cargs.push("-baseline");
    }
    if ((params["progressive"] ?? null)) {
        cargs.push("-progressive");
    }
    cargs.push((params["outfile"] ?? null));
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cjpeg_outputs(
    params: CjpegParameters,
    execution: Execution,
): CjpegOutputs {
    const ret: CjpegOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Compresses an image file to a JPEG file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CjpegOutputs`).
 */
function cjpeg_execute(
    params: CjpegParameters,
    execution: Execution,
): CjpegOutputs {
    params = execution.params(params)
    const cargs = cjpeg_cargs(params, execution)
    const ret = cjpeg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compresses an image file to a JPEG file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param outfile Output JPEG file
 * @param infile Input image file
 * @param quality Quality of JPEG image (0-100)
 * @param grayscale Create a grayscale JPEG file
 * @param optimize Optimize Huffman table
 * @param baseline Create a baseline JPEG file
 * @param progressive Create a progressive JPEG file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CjpegOutputs`).
 */
function cjpeg(
    outfile: string,
    infile: InputPathType,
    quality: number | null = null,
    grayscale: boolean = false,
    optimize: boolean = false,
    baseline: boolean = false,
    progressive: boolean = false,
    runner: Runner | null = null,
): CjpegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CJPEG_METADATA);
    const params = cjpeg_params(outfile, infile, quality, grayscale, optimize, baseline, progressive)
    return cjpeg_execute(params, execution);
}


export {
      CJPEG_METADATA,
      CjpegOutputs,
      CjpegParameters,
      cjpeg,
      cjpeg_cargs,
      cjpeg_execute,
      cjpeg_outputs,
      cjpeg_params,
};
