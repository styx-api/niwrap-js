// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_TALAIRACH_METADATA: Metadata = {
    id: "2a27ec50232d56f8e8e079035c459f747d644292.boutiques",
    name: "mris_talairach",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisTalairachParameters {
    "__STYXTYPE__": "mris_talairach";
    "input_image": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_talairach": mris_talairach_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_talairach(...)`.
 *
 * @interface
 */
interface MrisTalairachOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_talairach_params(
    input_image: InputPathType,
): MrisTalairachParameters {
    /**
     * Build parameters.
    
     * @param input_image Input image file to be transformed into Talairach space
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_talairach" as const,
        "input_image": input_image,
    };
    return params;
}


function mris_talairach_cargs(
    params: MrisTalairachParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_talairach");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    return cargs;
}


function mris_talairach_outputs(
    params: MrisTalairachParameters,
    execution: Execution,
): MrisTalairachOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisTalairachOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_talairach_execute(
    params: MrisTalairachParameters,
    execution: Execution,
): MrisTalairachOutputs {
    /**
     * Transforms an MRI surface into Talairach space.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisTalairachOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_talairach_cargs(params, execution)
    const ret = mris_talairach_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_talairach(
    input_image: InputPathType,
    runner: Runner | null = null,
): MrisTalairachOutputs {
    /**
     * Transforms an MRI surface into Talairach space.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_image Input image file to be transformed into Talairach space
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisTalairachOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_TALAIRACH_METADATA);
    const params = mris_talairach_params(input_image)
    return mris_talairach_execute(params, execution);
}


export {
      MRIS_TALAIRACH_METADATA,
      MrisTalairachOutputs,
      MrisTalairachParameters,
      mris_talairach,
      mris_talairach_params,
};
