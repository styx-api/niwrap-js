// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RECONBATCHJOBS_METADATA: Metadata = {
    id: "3b88343e632e9bbafdf43ea3df14e2cf0c3f34d1.boutiques",
    name: "reconbatchjobs",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ReconbatchjobsParameters {
    "__STYXTYPE__": "reconbatchjobs";
    "logfile": string;
    "cmdfiles": Array<string>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "reconbatchjobs": reconbatchjobs_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `reconbatchjobs(...)`.
 *
 * @interface
 */
interface ReconbatchjobsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function reconbatchjobs_params(
    logfile: string,
    cmdfiles: Array<string>,
): ReconbatchjobsParameters {
    /**
     * Build parameters.
    
     * @param logfile Log file to capture output of batch jobs
     * @param cmdfiles Command files for batch processing
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "reconbatchjobs" as const,
        "logfile": logfile,
        "cmdfiles": cmdfiles,
    };
    return params;
}


function reconbatchjobs_cargs(
    params: ReconbatchjobsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("reconbatchjobs");
    cargs.push((params["logfile"] ?? null));
    cargs.push(...(params["cmdfiles"] ?? null));
    return cargs;
}


function reconbatchjobs_outputs(
    params: ReconbatchjobsParameters,
    execution: Execution,
): ReconbatchjobsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ReconbatchjobsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function reconbatchjobs_execute(
    params: ReconbatchjobsParameters,
    execution: Execution,
): ReconbatchjobsOutputs {
    /**
     * Batch job processor for reconstruction scripts.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ReconbatchjobsOutputs`).
     */
    params = execution.params(params)
    const cargs = reconbatchjobs_cargs(params, execution)
    const ret = reconbatchjobs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function reconbatchjobs(
    logfile: string,
    cmdfiles: Array<string>,
    runner: Runner | null = null,
): ReconbatchjobsOutputs {
    /**
     * Batch job processor for reconstruction scripts.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param logfile Log file to capture output of batch jobs
     * @param cmdfiles Command files for batch processing
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ReconbatchjobsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RECONBATCHJOBS_METADATA);
    const params = reconbatchjobs_params(logfile, cmdfiles)
    return reconbatchjobs_execute(params, execution);
}


export {
      RECONBATCHJOBS_METADATA,
      ReconbatchjobsOutputs,
      ReconbatchjobsParameters,
      reconbatchjobs,
      reconbatchjobs_params,
};
