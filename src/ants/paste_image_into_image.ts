// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PASTE_IMAGE_INTO_IMAGE_METADATA: Metadata = {
    id: "84fede77ce1571671d2df31a0ca7da2716107704.boutiques",
    name: "PasteImageIntoImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface PasteImageIntoImageParameters {
    "__STYXTYPE__": "PasteImageIntoImage";
    "image_dimension": number;
    "input_canvas_image": InputPathType;
    "input_image": InputPathType;
    "output_image": string;
    "start_index": string;
    "background_label"?: number | null | undefined;
    "paint_over_non_background_voxels"?: 0 | 1 | 2 | null | undefined;
    "conflict_label"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "PasteImageIntoImage": paste_image_into_image_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "PasteImageIntoImage": paste_image_into_image_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `paste_image_into_image(...)`.
 *
 * @interface
 */
interface PasteImageIntoImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The final output image with the input image pasted onto the canvas.
     */
    output_image_file: OutputPathType;
}


function paste_image_into_image_params(
    image_dimension: number,
    input_canvas_image: InputPathType,
    input_image: InputPathType,
    output_image: string,
    start_index: string,
    background_label: number | null = 0,
    paint_over_non_background_voxels: 0 | 1 | 2 | null = 0,
    conflict_label: number | null = -1,
): PasteImageIntoImageParameters {
    /**
     * Build parameters.
    
     * @param image_dimension Specify the dimension of the images.
     * @param input_canvas_image The canvas image on which the input image will be pasted.
     * @param input_image The image to be pasted onto the canvas.
     * @param output_image The resulting image after pasting.
     * @param start_index The starting index where the input image will be pasted on the canvas.
     * @param background_label The label value considered as background.
     * @param paint_over_non_background_voxels Defines behavior when the input image voxel is non-background and the corresponding canvas voxel is background: 0 - leave as is, 1 - replace with input voxel value, 2 - replace with conflict label.
     * @param conflict_label The label value used for conflicting non-background voxels if 'paintOverNonBackgroundVoxels' is set to 2.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "PasteImageIntoImage" as const,
        "image_dimension": image_dimension,
        "input_canvas_image": input_canvas_image,
        "input_image": input_image,
        "output_image": output_image,
        "start_index": start_index,
    };
    if (background_label !== null) {
        params["background_label"] = background_label;
    }
    if (paint_over_non_background_voxels !== null) {
        params["paint_over_non_background_voxels"] = paint_over_non_background_voxels;
    }
    if (conflict_label !== null) {
        params["conflict_label"] = conflict_label;
    }
    return params;
}


function paste_image_into_image_cargs(
    params: PasteImageIntoImageParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("PasteImageIntoImage");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["input_canvas_image"] ?? null)));
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    cargs.push((params["start_index"] ?? null));
    if ((params["background_label"] ?? null) !== null) {
        cargs.push(String((params["background_label"] ?? null)));
    }
    if ((params["paint_over_non_background_voxels"] ?? null) !== null) {
        cargs.push(String((params["paint_over_non_background_voxels"] ?? null)));
    }
    if ((params["conflict_label"] ?? null) !== null) {
        cargs.push(String((params["conflict_label"] ?? null)));
    }
    return cargs;
}


function paste_image_into_image_outputs(
    params: PasteImageIntoImageParameters,
    execution: Execution,
): PasteImageIntoImageOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: PasteImageIntoImageOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


function paste_image_into_image_execute(
    params: PasteImageIntoImageParameters,
    execution: Execution,
): PasteImageIntoImageOutputs {
    /**
     * Paste the input image into the input canvas image. Depending on parameters, it can replace or merge existing voxel values.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `PasteImageIntoImageOutputs`).
     */
    params = execution.params(params)
    const cargs = paste_image_into_image_cargs(params, execution)
    const ret = paste_image_into_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function paste_image_into_image(
    image_dimension: number,
    input_canvas_image: InputPathType,
    input_image: InputPathType,
    output_image: string,
    start_index: string,
    background_label: number | null = 0,
    paint_over_non_background_voxels: 0 | 1 | 2 | null = 0,
    conflict_label: number | null = -1,
    runner: Runner | null = null,
): PasteImageIntoImageOutputs {
    /**
     * Paste the input image into the input canvas image. Depending on parameters, it can replace or merge existing voxel values.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param image_dimension Specify the dimension of the images.
     * @param input_canvas_image The canvas image on which the input image will be pasted.
     * @param input_image The image to be pasted onto the canvas.
     * @param output_image The resulting image after pasting.
     * @param start_index The starting index where the input image will be pasted on the canvas.
     * @param background_label The label value considered as background.
     * @param paint_over_non_background_voxels Defines behavior when the input image voxel is non-background and the corresponding canvas voxel is background: 0 - leave as is, 1 - replace with input voxel value, 2 - replace with conflict label.
     * @param conflict_label The label value used for conflicting non-background voxels if 'paintOverNonBackgroundVoxels' is set to 2.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `PasteImageIntoImageOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PASTE_IMAGE_INTO_IMAGE_METADATA);
    const params = paste_image_into_image_params(image_dimension, input_canvas_image, input_image, output_image, start_index, background_label, paint_over_non_background_voxels, conflict_label)
    return paste_image_into_image_execute(params, execution);
}


export {
      PASTE_IMAGE_INTO_IMAGE_METADATA,
      PasteImageIntoImageOutputs,
      PasteImageIntoImageParameters,
      paste_image_into_image,
      paste_image_into_image_params,
};
