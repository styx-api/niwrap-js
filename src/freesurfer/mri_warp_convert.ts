// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_WARP_CONVERT_METADATA: Metadata = {
    id: "3533ec1320189a9f8557b0a301115068a3b5f02e.boutiques",
    name: "mri_warp_convert",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriWarpConvertParameters {
    "@type": "freesurfer.mri_warp_convert";
    "inm3z"?: InputPathType | null | undefined;
    "infsl"?: InputPathType | null | undefined;
    "inlps"?: InputPathType | null | undefined;
    "initk"?: InputPathType | null | undefined;
    "inras"?: InputPathType | null | undefined;
    "invox"?: InputPathType | null | undefined;
    "outm3z"?: string | null | undefined;
    "outfsl"?: string | null | undefined;
    "outlps"?: string | null | undefined;
    "outitk"?: string | null | undefined;
    "outras"?: string | null | undefined;
    "outvox"?: string | null | undefined;
    "insrcgeom"?: InputPathType | null | undefined;
    "downsample": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_warp_convert": mri_warp_convert_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_warp_convert": mri_warp_convert_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_warp_convert(...)`.
 *
 * @interface
 */
interface MriWarpConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted output warp file
     */
    outwarp: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param inm3z Input M3Z warp
 * @param infsl Input FSL warp
 * @param inlps Input LPS-to-LPS displacement field (e.g. ITK, ANTs)
 * @param initk Input ITK LPS-to-LPS displacement field
 * @param inras Input RAS-to-RAS displacement field (e.g. NiftyReg)
 * @param invox Input file with displacements in source-voxel space
 * @param outm3z Output warp (M3Z Freesurfer format)
 * @param outfsl Output warp (FSL format)
 * @param outlps Output LPS-to-LPS displacement field (e.g. ITK, ANTs)
 * @param outitk Output ITK LPS-to-LPS displacement field
 * @param outras Output RAS-to-RAS displacement field (e.g. NiftyReg)
 * @param outvox Output file with displacements in source-voxel space
 * @param insrcgeom Specify source image geometry (moving volume)
 * @param downsample Downsample output M3Z to spacing of 2.
 *
 * @returns Parameter dictionary
 */
function mri_warp_convert_params(
    inm3z: InputPathType | null = null,
    infsl: InputPathType | null = null,
    inlps: InputPathType | null = null,
    initk: InputPathType | null = null,
    inras: InputPathType | null = null,
    invox: InputPathType | null = null,
    outm3z: string | null = null,
    outfsl: string | null = null,
    outlps: string | null = null,
    outitk: string | null = null,
    outras: string | null = null,
    outvox: string | null = null,
    insrcgeom: InputPathType | null = null,
    downsample: boolean = false,
): MriWarpConvertParameters {
    const params = {
        "@type": "freesurfer.mri_warp_convert" as const,
        "downsample": downsample,
    };
    if (inm3z !== null) {
        params["inm3z"] = inm3z;
    }
    if (infsl !== null) {
        params["infsl"] = infsl;
    }
    if (inlps !== null) {
        params["inlps"] = inlps;
    }
    if (initk !== null) {
        params["initk"] = initk;
    }
    if (inras !== null) {
        params["inras"] = inras;
    }
    if (invox !== null) {
        params["invox"] = invox;
    }
    if (outm3z !== null) {
        params["outm3z"] = outm3z;
    }
    if (outfsl !== null) {
        params["outfsl"] = outfsl;
    }
    if (outlps !== null) {
        params["outlps"] = outlps;
    }
    if (outitk !== null) {
        params["outitk"] = outitk;
    }
    if (outras !== null) {
        params["outras"] = outras;
    }
    if (outvox !== null) {
        params["outvox"] = outvox;
    }
    if (insrcgeom !== null) {
        params["insrcgeom"] = insrcgeom;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_warp_convert_cargs(
    params: MriWarpConvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_warp_convert");
    if ((params["inm3z"] ?? null) !== null) {
        cargs.push(
            "--inm3z",
            execution.inputFile((params["inm3z"] ?? null))
        );
    }
    if ((params["infsl"] ?? null) !== null) {
        cargs.push(
            "--infsl",
            execution.inputFile((params["infsl"] ?? null))
        );
    }
    if ((params["inlps"] ?? null) !== null) {
        cargs.push(
            "--inlps",
            execution.inputFile((params["inlps"] ?? null))
        );
    }
    if ((params["initk"] ?? null) !== null) {
        cargs.push(
            "--initk",
            execution.inputFile((params["initk"] ?? null))
        );
    }
    if ((params["inras"] ?? null) !== null) {
        cargs.push(
            "--inras",
            execution.inputFile((params["inras"] ?? null))
        );
    }
    if ((params["invox"] ?? null) !== null) {
        cargs.push(
            "--invox",
            execution.inputFile((params["invox"] ?? null))
        );
    }
    if ((params["outm3z"] ?? null) !== null) {
        cargs.push(
            "--outm3z",
            (params["outm3z"] ?? null)
        );
    }
    if ((params["outfsl"] ?? null) !== null) {
        cargs.push(
            "--outfsl",
            (params["outfsl"] ?? null)
        );
    }
    if ((params["outlps"] ?? null) !== null) {
        cargs.push(
            "--outlps",
            (params["outlps"] ?? null)
        );
    }
    if ((params["outitk"] ?? null) !== null) {
        cargs.push(
            "--outitk",
            (params["outitk"] ?? null)
        );
    }
    if ((params["outras"] ?? null) !== null) {
        cargs.push(
            "--outras",
            (params["outras"] ?? null)
        );
    }
    if ((params["outvox"] ?? null) !== null) {
        cargs.push(
            "--outvox",
            (params["outvox"] ?? null)
        );
    }
    if ((params["insrcgeom"] ?? null) !== null) {
        cargs.push(
            "--insrcgeom",
            execution.inputFile((params["insrcgeom"] ?? null))
        );
    }
    if ((params["downsample"] ?? null)) {
        cargs.push("--downsample");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_warp_convert_outputs(
    params: MriWarpConvertParameters,
    execution: Execution,
): MriWarpConvertOutputs {
    const ret: MriWarpConvertOutputs = {
        root: execution.outputFile("."),
        outwarp: ((params["outvox"] ?? null) !== null) ? execution.outputFile([(params["outvox"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * mri_warp_convert
 *
 * This program converts non-linear deformation field warp file formats.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriWarpConvertOutputs`).
 */
function mri_warp_convert_execute(
    params: MriWarpConvertParameters,
    runner: Runner | null = null,
): MriWarpConvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_WARP_CONVERT_METADATA);
    params = execution.params(params)
    const cargs = mri_warp_convert_cargs(params, execution)
    const ret = mri_warp_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_warp_convert
 *
 * This program converts non-linear deformation field warp file formats.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param inm3z Input M3Z warp
 * @param infsl Input FSL warp
 * @param inlps Input LPS-to-LPS displacement field (e.g. ITK, ANTs)
 * @param initk Input ITK LPS-to-LPS displacement field
 * @param inras Input RAS-to-RAS displacement field (e.g. NiftyReg)
 * @param invox Input file with displacements in source-voxel space
 * @param outm3z Output warp (M3Z Freesurfer format)
 * @param outfsl Output warp (FSL format)
 * @param outlps Output LPS-to-LPS displacement field (e.g. ITK, ANTs)
 * @param outitk Output ITK LPS-to-LPS displacement field
 * @param outras Output RAS-to-RAS displacement field (e.g. NiftyReg)
 * @param outvox Output file with displacements in source-voxel space
 * @param insrcgeom Specify source image geometry (moving volume)
 * @param downsample Downsample output M3Z to spacing of 2.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriWarpConvertOutputs`).
 */
function mri_warp_convert(
    inm3z: InputPathType | null = null,
    infsl: InputPathType | null = null,
    inlps: InputPathType | null = null,
    initk: InputPathType | null = null,
    inras: InputPathType | null = null,
    invox: InputPathType | null = null,
    outm3z: string | null = null,
    outfsl: string | null = null,
    outlps: string | null = null,
    outitk: string | null = null,
    outras: string | null = null,
    outvox: string | null = null,
    insrcgeom: InputPathType | null = null,
    downsample: boolean = false,
    runner: Runner | null = null,
): MriWarpConvertOutputs {
    const params = mri_warp_convert_params(inm3z, infsl, inlps, initk, inras, invox, outm3z, outfsl, outlps, outitk, outras, outvox, insrcgeom, downsample)
    return mri_warp_convert_execute(params, runner);
}


export {
      MRI_WARP_CONVERT_METADATA,
      MriWarpConvertOutputs,
      MriWarpConvertParameters,
      mri_warp_convert,
      mri_warp_convert_execute,
      mri_warp_convert_params,
};
