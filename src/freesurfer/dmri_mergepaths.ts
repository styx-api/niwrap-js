// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_MERGEPATHS_METADATA: Metadata = {
    id: "a806a559aa7a4e196c0f4f692e84bf6c75a34049.boutiques",
    name: "dmri_mergepaths",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriMergepathsParameters {
    "@type": "freesurfer.dmri_mergepaths";
    "input_volumes": Array<InputPathType>;
    "input_directory"?: string | null | undefined;
    "output_volume": string;
    "color_table": InputPathType;
    "threshold": number;
    "debug": boolean;
    "check_opts": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_mergepaths": dmri_mergepaths_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_mergepaths(...)`.
 *
 * @interface
 */
interface DmriMergepathsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volumes Input volume(s)
 * @param output_volume Output volume
 * @param color_table Color table file
 * @param threshold Lower threshold for display (0<=num<=1, as fraction of max)
 * @param input_directory Input directory (optional). If specified, names of input files are relative to this
 * @param debug Turn on debugging
 * @param check_opts Don't run anything, just check options and exit
 *
 * @returns Parameter dictionary
 */
function dmri_mergepaths_params(
    input_volumes: Array<InputPathType>,
    output_volume: string,
    color_table: InputPathType,
    threshold: number,
    input_directory: string | null = null,
    debug: boolean = false,
    check_opts: boolean = false,
): DmriMergepathsParameters {
    const params = {
        "@type": "freesurfer.dmri_mergepaths" as const,
        "input_volumes": input_volumes,
        "output_volume": output_volume,
        "color_table": color_table,
        "threshold": threshold,
        "debug": debug,
        "check_opts": check_opts,
    };
    if (input_directory !== null) {
        params["input_directory"] = input_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_mergepaths_cargs(
    params: DmriMergepathsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_mergepaths");
    cargs.push(...(params["input_volumes"] ?? null).map(f => execution.inputFile(f)));
    if ((params["input_directory"] ?? null) !== null) {
        cargs.push(
            "--indir",
            (params["input_directory"] ?? null)
        );
    }
    cargs.push(
        "--out",
        (params["output_volume"] ?? null)
    );
    cargs.push(
        "--ctab",
        execution.inputFile((params["color_table"] ?? null))
    );
    cargs.push(
        "--thresh",
        String((params["threshold"] ?? null))
    );
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_opts"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_mergepaths_outputs(
    params: DmriMergepathsParameters,
    execution: Execution,
): DmriMergepathsOutputs {
    const ret: DmriMergepathsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool for merging diffusion MRI path data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `DmriMergepathsOutputs`).
 */
function dmri_mergepaths_execute(
    params: DmriMergepathsParameters,
    execution: Execution,
): DmriMergepathsOutputs {
    params = execution.params(params)
    const cargs = dmri_mergepaths_cargs(params, execution)
    const ret = dmri_mergepaths_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for merging diffusion MRI path data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volumes Input volume(s)
 * @param output_volume Output volume
 * @param color_table Color table file
 * @param threshold Lower threshold for display (0<=num<=1, as fraction of max)
 * @param input_directory Input directory (optional). If specified, names of input files are relative to this
 * @param debug Turn on debugging
 * @param check_opts Don't run anything, just check options and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriMergepathsOutputs`).
 */
function dmri_mergepaths(
    input_volumes: Array<InputPathType>,
    output_volume: string,
    color_table: InputPathType,
    threshold: number,
    input_directory: string | null = null,
    debug: boolean = false,
    check_opts: boolean = false,
    runner: Runner | null = null,
): DmriMergepathsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_MERGEPATHS_METADATA);
    const params = dmri_mergepaths_params(input_volumes, output_volume, color_table, threshold, input_directory, debug, check_opts)
    return dmri_mergepaths_execute(params, execution);
}


export {
      DMRI_MERGEPATHS_METADATA,
      DmriMergepathsOutputs,
      DmriMergepathsParameters,
      dmri_mergepaths,
      dmri_mergepaths_cargs,
      dmri_mergepaths_execute,
      dmri_mergepaths_outputs,
      dmri_mergepaths_params,
};
