// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WBSPARSE_MERGE_DENSE_METADATA: Metadata = {
    id: "af1749f9ad1bdf4a9e5257d7439ccb891c9cff12.boutiques",
    name: "wbsparse-merge-dense",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface WbsparseMergeDenseWbsparseParameters {
    "__STYXTYPE__": "wbsparse";
    "wbsparse_in": string;
}


interface WbsparseMergeDenseParameters {
    "__STYXTYPE__": "wbsparse-merge-dense";
    "direction": string;
    "wbsparse_out": string;
    "wbsparse"?: Array<WbsparseMergeDenseWbsparseParameters> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "wbsparse-merge-dense": wbsparse_merge_dense_cargs,
        "wbsparse": wbsparse_merge_dense_wbsparse_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


function wbsparse_merge_dense_wbsparse_params(
    wbsparse_in: string,
): WbsparseMergeDenseWbsparseParameters {
    /**
     * Build parameters.
    
     * @param wbsparse_in a wbsparse file to merge
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "wbsparse" as const,
        "wbsparse_in": wbsparse_in,
    };
    return params;
}


function wbsparse_merge_dense_wbsparse_cargs(
    params: WbsparseMergeDenseWbsparseParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-wbsparse");
    cargs.push((params["wbsparse_in"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `wbsparse_merge_dense(...)`.
 *
 * @interface
 */
interface WbsparseMergeDenseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function wbsparse_merge_dense_params(
    direction: string,
    wbsparse_out: string,
    wbsparse: Array<WbsparseMergeDenseWbsparseParameters> | null = null,
): WbsparseMergeDenseParameters {
    /**
     * Build parameters.
    
     * @param direction which dimension to merge along, ROW or COLUMN
     * @param wbsparse_out output - the output wbsparse file
     * @param wbsparse specify an input wbsparse file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "wbsparse-merge-dense" as const,
        "direction": direction,
        "wbsparse_out": wbsparse_out,
    };
    if (wbsparse !== null) {
        params["wbsparse"] = wbsparse;
    }
    return params;
}


function wbsparse_merge_dense_cargs(
    params: WbsparseMergeDenseParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-wbsparse-merge-dense");
    cargs.push((params["direction"] ?? null));
    cargs.push((params["wbsparse_out"] ?? null));
    if ((params["wbsparse"] ?? null) !== null) {
        cargs.push(...(params["wbsparse"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    return cargs;
}


function wbsparse_merge_dense_outputs(
    params: WbsparseMergeDenseParameters,
    execution: Execution,
): WbsparseMergeDenseOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: WbsparseMergeDenseOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function wbsparse_merge_dense_execute(
    params: WbsparseMergeDenseParameters,
    execution: Execution,
): WbsparseMergeDenseOutputs {
    /**
     * Merge wbsparse files along dense dimension.
     * 
     * The input wbsparse files must have matching mappings along the direction not specified, and the mapping along the specified direction must be brain models.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `WbsparseMergeDenseOutputs`).
     */
    params = execution.params(params)
    const cargs = wbsparse_merge_dense_cargs(params, execution)
    const ret = wbsparse_merge_dense_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function wbsparse_merge_dense(
    direction: string,
    wbsparse_out: string,
    wbsparse: Array<WbsparseMergeDenseWbsparseParameters> | null = null,
    runner: Runner | null = null,
): WbsparseMergeDenseOutputs {
    /**
     * Merge wbsparse files along dense dimension.
     * 
     * The input wbsparse files must have matching mappings along the direction not specified, and the mapping along the specified direction must be brain models.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param direction which dimension to merge along, ROW or COLUMN
     * @param wbsparse_out output - the output wbsparse file
     * @param wbsparse specify an input wbsparse file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `WbsparseMergeDenseOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WBSPARSE_MERGE_DENSE_METADATA);
    const params = wbsparse_merge_dense_params(direction, wbsparse_out, wbsparse)
    return wbsparse_merge_dense_execute(params, execution);
}


export {
      WBSPARSE_MERGE_DENSE_METADATA,
      WbsparseMergeDenseOutputs,
      WbsparseMergeDenseParameters,
      WbsparseMergeDenseWbsparseParameters,
      wbsparse_merge_dense,
      wbsparse_merge_dense_params,
      wbsparse_merge_dense_wbsparse_params,
};
