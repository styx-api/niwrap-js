// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DSVM_LINPREDICT_METADATA: Metadata = {
    id: "75accbcc401ca78691df247e44440c27677dbbec.boutiques",
    name: "3dsvm_linpredict",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dsvmLinpredictParameters {
    "__STYXTYPE__": "3dsvm_linpredict";
    "mask_dataset"?: InputPathType | null | undefined;
    "weight_vector": InputPathType;
    "input_dataset": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dsvm_linpredict": v_3dsvm_linpredict_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dsvm_linpredict": v_3dsvm_linpredict_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dsvm_linpredict(...)`.
 *
 * @interface
 */
interface V3dsvmLinpredictOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The result is a number printed to stdout
     */
    stdout_output: OutputPathType;
}


function v_3dsvm_linpredict_params(
    weight_vector: InputPathType,
    input_dataset: string,
    mask_dataset: InputPathType | null = null,
): V3dsvmLinpredictParameters {
    /**
     * Build parameters.
    
     * @param weight_vector Weight vector dataset
     * @param input_dataset Input dataset, potentially with sub-brick and/or sub-range selectors
     * @param mask_dataset Dataset to be used as a mask. Only voxels with nonzero values in 'mset' will be averaged from 'dataset'. The mask dataset and the input dataset must have the same number of voxels.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dsvm_linpredict" as const,
        "weight_vector": weight_vector,
        "input_dataset": input_dataset,
    };
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    return params;
}


function v_3dsvm_linpredict_cargs(
    params: V3dsvmLinpredictParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dsvm_linpredict");
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["weight_vector"] ?? null)));
    cargs.push((params["input_dataset"] ?? null));
    return cargs;
}


function v_3dsvm_linpredict_outputs(
    params: V3dsvmLinpredictParameters,
    execution: Execution,
): V3dsvmLinpredictOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dsvmLinpredictOutputs = {
        root: execution.outputFile("."),
        stdout_output: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


function v_3dsvm_linpredict_execute(
    params: V3dsvmLinpredictParameters,
    execution: Execution,
): V3dsvmLinpredictOutputs {
    /**
     * Linear prediction for weights from 3dsvm.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dsvmLinpredictOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dsvm_linpredict_cargs(params, execution)
    const ret = v_3dsvm_linpredict_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3dsvm_linpredict(
    weight_vector: InputPathType,
    input_dataset: string,
    mask_dataset: InputPathType | null = null,
    runner: Runner | null = null,
): V3dsvmLinpredictOutputs {
    /**
     * Linear prediction for weights from 3dsvm.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param weight_vector Weight vector dataset
     * @param input_dataset Input dataset, potentially with sub-brick and/or sub-range selectors
     * @param mask_dataset Dataset to be used as a mask. Only voxels with nonzero values in 'mset' will be averaged from 'dataset'. The mask dataset and the input dataset must have the same number of voxels.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dsvmLinpredictOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DSVM_LINPREDICT_METADATA);
    const params = v_3dsvm_linpredict_params(weight_vector, input_dataset, mask_dataset)
    return v_3dsvm_linpredict_execute(params, execution);
}


export {
      V3dsvmLinpredictOutputs,
      V3dsvmLinpredictParameters,
      V_3DSVM_LINPREDICT_METADATA,
      v_3dsvm_linpredict,
      v_3dsvm_linpredict_params,
};
