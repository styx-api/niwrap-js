// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GAUSS_4DFP_METADATA: Metadata = {
    id: "33be7b3b1fc943cdc73ad39caf02b12c7b7d7be5.boutiques",
    name: "gauss_4dfp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Gauss4dfpParameters {
    "__STYXTYPE__": "gauss_4dfp";
    "input_file": string;
    "f_half": number;
    "output_root"?: string | null | undefined;
    "endian_flag"?: string | null | undefined;
    "wrap_flag": boolean;
    "differentiate_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "gauss_4dfp": gauss_4dfp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "gauss_4dfp": gauss_4dfp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gauss_4dfp(...)`.
 *
 * @interface
 */
interface Gauss4dfpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file in 4dfp format.
     */
    output_file: OutputPathType | null;
}


function gauss_4dfp_params(
    input_file: string,
    f_half: number,
    output_root: string | null = null,
    endian_flag: string | null = null,
    wrap_flag: boolean = false,
    differentiate_flag: boolean = false,
): Gauss4dfpParameters {
    /**
     * Build parameters.
    
     * @param input_file Input 4dfp or conc file to be processed.
     * @param f_half Half frequency in 1/cm for the Gaussian filter application (f_half is the half frequency in 1/cm).
     * @param output_root Root name for the output file. Default is <inroot>_g<10*f_half>.
     * @param endian_flag Specify output endian; 'b' for big or 'l' for little endian. Default is input endian.
     * @param wrap_flag Suppress x and y padding (wrap-around).
     * @param differentiate_flag Apply differentiation.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "gauss_4dfp" as const,
        "input_file": input_file,
        "f_half": f_half,
        "wrap_flag": wrap_flag,
        "differentiate_flag": differentiate_flag,
    };
    if (output_root !== null) {
        params["output_root"] = output_root;
    }
    if (endian_flag !== null) {
        params["endian_flag"] = endian_flag;
    }
    return params;
}


function gauss_4dfp_cargs(
    params: Gauss4dfpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("gauss_4dfp");
    cargs.push((params["input_file"] ?? null));
    cargs.push(String((params["f_half"] ?? null)));
    if ((params["output_root"] ?? null) !== null) {
        cargs.push((params["output_root"] ?? null));
    }
    if ((params["endian_flag"] ?? null) !== null) {
        cargs.push(
            "-@",
            (params["endian_flag"] ?? null)
        );
    }
    if ((params["wrap_flag"] ?? null)) {
        cargs.push("-w");
    }
    if ((params["differentiate_flag"] ?? null)) {
        cargs.push("-d");
    }
    return cargs;
}


function gauss_4dfp_outputs(
    params: Gauss4dfpParameters,
    execution: Execution,
): Gauss4dfpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Gauss4dfpOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output_root"] ?? null) !== null) ? execution.outputFile([(params["output_root"] ?? null), ".4dfp.ifh"].join('')) : null,
    };
    return ret;
}


function gauss_4dfp_execute(
    params: Gauss4dfpParameters,
    execution: Execution,
): Gauss4dfpOutputs {
    /**
     * Applies a Gaussian filter to 4dfp or conc input files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Gauss4dfpOutputs`).
     */
    params = execution.params(params)
    const cargs = gauss_4dfp_cargs(params, execution)
    const ret = gauss_4dfp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function gauss_4dfp(
    input_file: string,
    f_half: number,
    output_root: string | null = null,
    endian_flag: string | null = null,
    wrap_flag: boolean = false,
    differentiate_flag: boolean = false,
    runner: Runner | null = null,
): Gauss4dfpOutputs {
    /**
     * Applies a Gaussian filter to 4dfp or conc input files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Input 4dfp or conc file to be processed.
     * @param f_half Half frequency in 1/cm for the Gaussian filter application (f_half is the half frequency in 1/cm).
     * @param output_root Root name for the output file. Default is <inroot>_g<10*f_half>.
     * @param endian_flag Specify output endian; 'b' for big or 'l' for little endian. Default is input endian.
     * @param wrap_flag Suppress x and y padding (wrap-around).
     * @param differentiate_flag Apply differentiation.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Gauss4dfpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GAUSS_4DFP_METADATA);
    const params = gauss_4dfp_params(input_file, f_half, output_root, endian_flag, wrap_flag, differentiate_flag)
    return gauss_4dfp_execute(params, execution);
}


export {
      GAUSS_4DFP_METADATA,
      Gauss4dfpOutputs,
      Gauss4dfpParameters,
      gauss_4dfp,
      gauss_4dfp_params,
};
