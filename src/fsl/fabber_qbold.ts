// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FABBER_QBOLD_METADATA: Metadata = {
    id: "e3d0351ff53be803c27a9d69aea92f45b113f540.boutiques",
    name: "fabber_qbold",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FabberQboldParameters {
    "@type": "fsl.fabber_qbold";
    "output_dir": string;
    "method": string;
    "model": string;
    "data": InputPathType;
    "data_n"?: InputPathType | null | undefined;
    "data_order"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "mt_n"?: number | null | undefined;
    "suppdata"?: InputPathType | null | undefined;
    "listmethods": boolean;
    "listmodels": boolean;
    "listparams": boolean;
    "descparams": boolean;
    "listoutputs": boolean;
    "evaluate"?: string | null | undefined;
    "evaluate_params"?: string | null | undefined;
    "evaluate_nt"?: number | null | undefined;
    "simple_output": boolean;
    "overwrite": boolean;
    "link_latest": boolean;
    "loadmodels"?: InputPathType | null | undefined;
    "dump_param_names": boolean;
    "save_model_fit": boolean;
    "save_residuals": boolean;
    "save_model_extras": boolean;
    "save_mvn": boolean;
    "save_mean": boolean;
    "save_std": boolean;
    "save_var": boolean;
    "save_zstat": boolean;
    "save_noise_mean": boolean;
    "save_noise_std": boolean;
    "save_free_energy": boolean;
    "optfile"?: InputPathType | null | undefined;
    "debug": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fabber_qbold": fabber_qbold_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fabber_qbold": fabber_qbold_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fabber_qbold(...)`.
 *
 * @interface
 */
interface FabberQboldOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the names of the model parameters
     */
    paramnames_file: OutputPathType;
    /**
     * 4D volume of the model prediction
     */
    model_fit_file: OutputPathType;
    /**
     * 4D volume of the residuals
     */
    residuals_file: OutputPathType;
    /**
     * Additional model-specific timeseries data
     */
    model_extras_file: OutputPathType;
    /**
     * File containing the final MVN distributions
     */
    mvn_file: OutputPathType;
    /**
     * File containing the parameter means
     */
    mean_file: OutputPathType;
    /**
     * File containing the parameter standard deviations
     */
    std_file: OutputPathType;
    /**
     * File containing the parameter variances
     */
    var_file: OutputPathType;
    /**
     * File containing the parameter Zstats
     */
    zstat_file: OutputPathType;
    /**
     * File containing the noise means
     */
    noise_mean_file: OutputPathType;
    /**
     * File containing the noise standard deviations
     */
    noise_std_file: OutputPathType;
    /**
     * File containing the free energy, if calculated
     */
    free_energy_file: OutputPathType;
    /**
     * Logfile of the execution
     */
    logfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_dir Directory for output files (including logfile)
 * @param method Use this inference method
 * @param model Use this forward model
 * @param data Specify a single input data file
 * @param data_n Specify multiple data files for n=1, 2, 3...
 * @param data_order If multiple data files are specified, how they will be handled: concatenate = one after the other,  interleave = first record from each file, then  second, etc.
 * @param mask Mask file. Inference will only be performed where mask value > 0
 * @param mt_n List of masked time points, indexed from 1. These will be ignored in the parameter updates
 * @param suppdata 'Supplemental' timeseries data, required for some models
 * @param listmethods List all known inference methods
 * @param listmodels List all known forward models
 * @param listparams List model parameters (requires model configuration options to be given)
 * @param descparams Descript model parameters (name, description, units) - requires model configuration options to be given. Note that not all models provide parameter descriptions
 * @param listoutputs List additional model outputs (requires model configuration options to be given)
 * @param evaluate Evaluate model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
 * @param evaluate_params List of parameter values for evaluation
 * @param evaluate_nt Number of time points for evaluation - must be consistent with model options where appropriate
 * @param simple_output Instead of usual standard output, simply output series of lines each giving progress as percentage
 * @param overwrite If set will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
 * @param link_latest Try to create a link to the most recent output directory with the prefix _latest
 * @param loadmodels Load models dynamically from the specified filename, which should be a DLL/shared library
 * @param dump_param_names Write the file paramnames.txt containing the names of the model parameters
 * @param save_model_fit Output the model prediction as a 4d volume
 * @param save_residuals Output the residuals (difference between the data and the model prediction)
 * @param save_model_extras Output any additional model-specific timeseries data
 * @param save_mvn Output the final MVN distributions.
 * @param save_mean Output the parameter means.
 * @param save_std Output the parameter standard deviations.
 * @param save_var Output the parameter variances.
 * @param save_zstat Output the parameter Zstats.
 * @param save_noise_mean Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source
 * @param save_noise_std Output the noise standard deviations.
 * @param save_free_energy Output the free energy, if calculated.
 * @param optfile File containing additional options, one per line, in the same form as specified on the command line
 * @param debug Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
 *
 * @returns Parameter dictionary
 */
function fabber_qbold_params(
    output_dir: string,
    method: string,
    model: string,
    data: InputPathType,
    data_n: InputPathType | null = null,
    data_order: string | null = null,
    mask: InputPathType | null = null,
    mt_n: number | null = null,
    suppdata: InputPathType | null = null,
    listmethods: boolean = false,
    listmodels: boolean = false,
    listparams: boolean = false,
    descparams: boolean = false,
    listoutputs: boolean = false,
    evaluate: string | null = null,
    evaluate_params: string | null = null,
    evaluate_nt: number | null = null,
    simple_output: boolean = false,
    overwrite: boolean = false,
    link_latest: boolean = false,
    loadmodels: InputPathType | null = null,
    dump_param_names: boolean = false,
    save_model_fit: boolean = false,
    save_residuals: boolean = false,
    save_model_extras: boolean = false,
    save_mvn: boolean = false,
    save_mean: boolean = false,
    save_std: boolean = false,
    save_var: boolean = false,
    save_zstat: boolean = false,
    save_noise_mean: boolean = false,
    save_noise_std: boolean = false,
    save_free_energy: boolean = false,
    optfile: InputPathType | null = null,
    debug: boolean = false,
): FabberQboldParameters {
    const params = {
        "@type": "fsl.fabber_qbold" as const,
        "output_dir": output_dir,
        "method": method,
        "model": model,
        "data": data,
        "listmethods": listmethods,
        "listmodels": listmodels,
        "listparams": listparams,
        "descparams": descparams,
        "listoutputs": listoutputs,
        "simple_output": simple_output,
        "overwrite": overwrite,
        "link_latest": link_latest,
        "dump_param_names": dump_param_names,
        "save_model_fit": save_model_fit,
        "save_residuals": save_residuals,
        "save_model_extras": save_model_extras,
        "save_mvn": save_mvn,
        "save_mean": save_mean,
        "save_std": save_std,
        "save_var": save_var,
        "save_zstat": save_zstat,
        "save_noise_mean": save_noise_mean,
        "save_noise_std": save_noise_std,
        "save_free_energy": save_free_energy,
        "debug": debug,
    };
    if (data_n !== null) {
        params["data_n"] = data_n;
    }
    if (data_order !== null) {
        params["data_order"] = data_order;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (mt_n !== null) {
        params["mt_n"] = mt_n;
    }
    if (suppdata !== null) {
        params["suppdata"] = suppdata;
    }
    if (evaluate !== null) {
        params["evaluate"] = evaluate;
    }
    if (evaluate_params !== null) {
        params["evaluate_params"] = evaluate_params;
    }
    if (evaluate_nt !== null) {
        params["evaluate_nt"] = evaluate_nt;
    }
    if (loadmodels !== null) {
        params["loadmodels"] = loadmodels;
    }
    if (optfile !== null) {
        params["optfile"] = optfile;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fabber_qbold_cargs(
    params: FabberQboldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fabber_qbold");
    cargs.push(
        "--output",
        (params["output_dir"] ?? null)
    );
    cargs.push(
        "--method",
        (params["method"] ?? null)
    );
    cargs.push(
        "--model",
        (params["model"] ?? null)
    );
    cargs.push(
        "--data",
        execution.inputFile((params["data"] ?? null))
    );
    if ((params["data_n"] ?? null) !== null) {
        cargs.push(
            "--data<n>",
            execution.inputFile((params["data_n"] ?? null))
        );
    }
    if ((params["data_order"] ?? null) !== null) {
        cargs.push(
            "--data-order",
            (params["data_order"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["mt_n"] ?? null) !== null) {
        cargs.push(
            "--mt<n>",
            String((params["mt_n"] ?? null))
        );
    }
    if ((params["suppdata"] ?? null) !== null) {
        cargs.push(
            "--suppdata",
            execution.inputFile((params["suppdata"] ?? null))
        );
    }
    if ((params["listmethods"] ?? null)) {
        cargs.push("--listmethods");
    }
    if ((params["listmodels"] ?? null)) {
        cargs.push("--listmodels");
    }
    if ((params["listparams"] ?? null)) {
        cargs.push("--listparams");
    }
    if ((params["descparams"] ?? null)) {
        cargs.push("--descparams");
    }
    if ((params["listoutputs"] ?? null)) {
        cargs.push("--listoutputs");
    }
    if ((params["evaluate"] ?? null) !== null) {
        cargs.push(
            "--evaluate",
            (params["evaluate"] ?? null)
        );
    }
    if ((params["evaluate_params"] ?? null) !== null) {
        cargs.push(
            "--evaluate-params",
            (params["evaluate_params"] ?? null)
        );
    }
    if ((params["evaluate_nt"] ?? null) !== null) {
        cargs.push(
            "--evaluate-nt",
            String((params["evaluate_nt"] ?? null))
        );
    }
    if ((params["simple_output"] ?? null)) {
        cargs.push("--simple-output");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("--overwrite");
    }
    if ((params["link_latest"] ?? null)) {
        cargs.push("--link-to-latest");
    }
    if ((params["loadmodels"] ?? null) !== null) {
        cargs.push(
            "--loadmodels",
            execution.inputFile((params["loadmodels"] ?? null))
        );
    }
    if ((params["dump_param_names"] ?? null)) {
        cargs.push("--dump-param-names");
    }
    if ((params["save_model_fit"] ?? null)) {
        cargs.push("--save-model-fit");
    }
    if ((params["save_residuals"] ?? null)) {
        cargs.push("--save-residuals");
    }
    if ((params["save_model_extras"] ?? null)) {
        cargs.push("--save-model-extras");
    }
    if ((params["save_mvn"] ?? null)) {
        cargs.push("--save-mvn");
    }
    if ((params["save_mean"] ?? null)) {
        cargs.push("--save-mean");
    }
    if ((params["save_std"] ?? null)) {
        cargs.push("--save-std");
    }
    if ((params["save_var"] ?? null)) {
        cargs.push("--save-var");
    }
    if ((params["save_zstat"] ?? null)) {
        cargs.push("--save-zstat");
    }
    if ((params["save_noise_mean"] ?? null)) {
        cargs.push("--save-noise-mean");
    }
    if ((params["save_noise_std"] ?? null)) {
        cargs.push("--save-noise-std");
    }
    if ((params["save_free_energy"] ?? null)) {
        cargs.push("--save-free-energy");
    }
    if ((params["optfile"] ?? null) !== null) {
        cargs.push(
            "--optfile",
            execution.inputFile((params["optfile"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fabber_qbold_outputs(
    params: FabberQboldParameters,
    execution: Execution,
): FabberQboldOutputs {
    const ret: FabberQboldOutputs = {
        root: execution.outputFile("."),
        paramnames_file: execution.outputFile([(params["output_dir"] ?? null), "/paramnames.txt"].join('')),
        model_fit_file: execution.outputFile([(params["output_dir"] ?? null), "/model_fit.nii.gz"].join('')),
        residuals_file: execution.outputFile([(params["output_dir"] ?? null), "/residuals.nii.gz"].join('')),
        model_extras_file: execution.outputFile([(params["output_dir"] ?? null), "/model_extras.nii.gz"].join('')),
        mvn_file: execution.outputFile([(params["output_dir"] ?? null), "/mvn.nii.gz"].join('')),
        mean_file: execution.outputFile([(params["output_dir"] ?? null), "/mean.nii.gz"].join('')),
        std_file: execution.outputFile([(params["output_dir"] ?? null), "/std.nii.gz"].join('')),
        var_file: execution.outputFile([(params["output_dir"] ?? null), "/var.nii.gz"].join('')),
        zstat_file: execution.outputFile([(params["output_dir"] ?? null), "/zstat.nii.gz"].join('')),
        noise_mean_file: execution.outputFile([(params["output_dir"] ?? null), "/noise_mean.nii.gz"].join('')),
        noise_std_file: execution.outputFile([(params["output_dir"] ?? null), "/noise_std.nii.gz"].join('')),
        free_energy_file: execution.outputFile([(params["output_dir"] ?? null), "/free_energy.nii.gz"].join('')),
        logfile: execution.outputFile([(params["output_dir"] ?? null), "/logfile.txt"].join('')),
    };
    return ret;
}


/**
 * fabber_qbold
 *
 * Fabber - a flexible BaYesian modeling framework for FMRI and MRI analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FabberQboldOutputs`).
 */
function fabber_qbold_execute(
    params: FabberQboldParameters,
    runner: Runner | null = null,
): FabberQboldOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FABBER_QBOLD_METADATA);
    params = execution.params(params)
    const cargs = fabber_qbold_cargs(params, execution)
    const ret = fabber_qbold_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fabber_qbold
 *
 * Fabber - a flexible BaYesian modeling framework for FMRI and MRI analysis.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param output_dir Directory for output files (including logfile)
 * @param method Use this inference method
 * @param model Use this forward model
 * @param data Specify a single input data file
 * @param data_n Specify multiple data files for n=1, 2, 3...
 * @param data_order If multiple data files are specified, how they will be handled: concatenate = one after the other,  interleave = first record from each file, then  second, etc.
 * @param mask Mask file. Inference will only be performed where mask value > 0
 * @param mt_n List of masked time points, indexed from 1. These will be ignored in the parameter updates
 * @param suppdata 'Supplemental' timeseries data, required for some models
 * @param listmethods List all known inference methods
 * @param listmodels List all known forward models
 * @param listparams List model parameters (requires model configuration options to be given)
 * @param descparams Descript model parameters (name, description, units) - requires model configuration options to be given. Note that not all models provide parameter descriptions
 * @param listoutputs List additional model outputs (requires model configuration options to be given)
 * @param evaluate Evaluate model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
 * @param evaluate_params List of parameter values for evaluation
 * @param evaluate_nt Number of time points for evaluation - must be consistent with model options where appropriate
 * @param simple_output Instead of usual standard output, simply output series of lines each giving progress as percentage
 * @param overwrite If set will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
 * @param link_latest Try to create a link to the most recent output directory with the prefix _latest
 * @param loadmodels Load models dynamically from the specified filename, which should be a DLL/shared library
 * @param dump_param_names Write the file paramnames.txt containing the names of the model parameters
 * @param save_model_fit Output the model prediction as a 4d volume
 * @param save_residuals Output the residuals (difference between the data and the model prediction)
 * @param save_model_extras Output any additional model-specific timeseries data
 * @param save_mvn Output the final MVN distributions.
 * @param save_mean Output the parameter means.
 * @param save_std Output the parameter standard deviations.
 * @param save_var Output the parameter variances.
 * @param save_zstat Output the parameter Zstats.
 * @param save_noise_mean Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source
 * @param save_noise_std Output the noise standard deviations.
 * @param save_free_energy Output the free energy, if calculated.
 * @param optfile File containing additional options, one per line, in the same form as specified on the command line
 * @param debug Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FabberQboldOutputs`).
 */
function fabber_qbold(
    output_dir: string,
    method: string,
    model: string,
    data: InputPathType,
    data_n: InputPathType | null = null,
    data_order: string | null = null,
    mask: InputPathType | null = null,
    mt_n: number | null = null,
    suppdata: InputPathType | null = null,
    listmethods: boolean = false,
    listmodels: boolean = false,
    listparams: boolean = false,
    descparams: boolean = false,
    listoutputs: boolean = false,
    evaluate: string | null = null,
    evaluate_params: string | null = null,
    evaluate_nt: number | null = null,
    simple_output: boolean = false,
    overwrite: boolean = false,
    link_latest: boolean = false,
    loadmodels: InputPathType | null = null,
    dump_param_names: boolean = false,
    save_model_fit: boolean = false,
    save_residuals: boolean = false,
    save_model_extras: boolean = false,
    save_mvn: boolean = false,
    save_mean: boolean = false,
    save_std: boolean = false,
    save_var: boolean = false,
    save_zstat: boolean = false,
    save_noise_mean: boolean = false,
    save_noise_std: boolean = false,
    save_free_energy: boolean = false,
    optfile: InputPathType | null = null,
    debug: boolean = false,
    runner: Runner | null = null,
): FabberQboldOutputs {
    const params = fabber_qbold_params(output_dir, method, model, data, data_n, data_order, mask, mt_n, suppdata, listmethods, listmodels, listparams, descparams, listoutputs, evaluate, evaluate_params, evaluate_nt, simple_output, overwrite, link_latest, loadmodels, dump_param_names, save_model_fit, save_residuals, save_model_extras, save_mvn, save_mean, save_std, save_var, save_zstat, save_noise_mean, save_noise_std, save_free_energy, optfile, debug)
    return fabber_qbold_execute(params, runner);
}


export {
      FABBER_QBOLD_METADATA,
      FabberQboldOutputs,
      FabberQboldParameters,
      fabber_qbold,
      fabber_qbold_execute,
      fabber_qbold_params,
};
