// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GEMS_COMPUTE_ATLAS_PROBS_METADATA: Metadata = {
    id: "e4708282a3cd6c2187910866f5c82a92aef1d963.boutiques",
    name: "gems_compute_atlas_probs",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GemsComputeAtlasProbsParameters {
    "__STYXTYPE__": "gems_compute_atlas_probs";
    "subjects_dir": string;
    "mesh_collections": Array<string>;
    "out_dir": string;
    "segmentations_dir"?: string | null | undefined;
    "gt_from_fs": boolean;
    "segmentation_name"?: string | null | undefined;
    "multi_structure": boolean;
    "labels"?: Array<string> | null | undefined;
    "from_samseg": boolean;
    "em_iterations"?: number | null | undefined;
    "show_figs": boolean;
    "save_figs": boolean;
    "save_average_figs": boolean;
    "subjects_file"?: string | null | undefined;
    "labels_file"?: string | null | undefined;
    "samseg_subdir"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "gems_compute_atlas_probs": gems_compute_atlas_probs_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gems_compute_atlas_probs(...)`.
 *
 * @interface
 */
interface GemsComputeAtlasProbsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function gems_compute_atlas_probs_params(
    subjects_dir: string,
    mesh_collections: Array<string>,
    out_dir: string,
    segmentations_dir: string | null = null,
    gt_from_fs: boolean = false,
    segmentation_name: string | null = null,
    multi_structure: boolean = false,
    labels: Array<string> | null = null,
    from_samseg: boolean = false,
    em_iterations: number | null = null,
    show_figs: boolean = false,
    save_figs: boolean = false,
    save_average_figs: boolean = false,
    subjects_file: string | null = null,
    labels_file: string | null = null,
    samseg_subdir: string | null = null,
): GemsComputeAtlasProbsParameters {
    /**
     * Build parameters.
    
     * @param subjects_dir Directory with saved SAMSEG runs with --history flag.
     * @param mesh_collections Mesh collection file(s).
     * @param out_dir Output directory.
     * @param segmentations_dir Directory with GT segmentations.
     * @param gt_from_fs GT from FreeSurfer segmentations.
     * @param segmentation_name Filename of the segmentations, assumed to be the same for each subject.
     * @param multi_structure Estimate alphas from more than 1 structure.
     * @param labels Label numbers for multi-structure estimation.
     * @param from_samseg SAMSEG runs obtained from command samseg instead of run_samseg.
     * @param em_iterations Number of EM iterations.
     * @param show_figs Show figures during the run.
     * @param save_figs Save rasterized prior of each subject.
     * @param save_average_figs Save average rasterized prior.
     * @param subjects_file Text file with list of subjects.
     * @param labels_file Text file with list of labels (instead of --labels).
     * @param samseg_subdir Name of samseg subdir in subject/mri folder.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "gems_compute_atlas_probs" as const,
        "subjects_dir": subjects_dir,
        "mesh_collections": mesh_collections,
        "out_dir": out_dir,
        "gt_from_fs": gt_from_fs,
        "multi_structure": multi_structure,
        "from_samseg": from_samseg,
        "show_figs": show_figs,
        "save_figs": save_figs,
        "save_average_figs": save_average_figs,
    };
    if (segmentations_dir !== null) {
        params["segmentations_dir"] = segmentations_dir;
    }
    if (segmentation_name !== null) {
        params["segmentation_name"] = segmentation_name;
    }
    if (labels !== null) {
        params["labels"] = labels;
    }
    if (em_iterations !== null) {
        params["em_iterations"] = em_iterations;
    }
    if (subjects_file !== null) {
        params["subjects_file"] = subjects_file;
    }
    if (labels_file !== null) {
        params["labels_file"] = labels_file;
    }
    if (samseg_subdir !== null) {
        params["samseg_subdir"] = samseg_subdir;
    }
    return params;
}


function gems_compute_atlas_probs_cargs(
    params: GemsComputeAtlasProbsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("gems_compute_atlas_probs");
    cargs.push(
        "--subjects-dir",
        (params["subjects_dir"] ?? null)
    );
    cargs.push(
        "--mesh-collections",
        ...(params["mesh_collections"] ?? null)
    );
    cargs.push(
        "--out-dir",
        (params["out_dir"] ?? null)
    );
    if ((params["segmentations_dir"] ?? null) !== null) {
        cargs.push(
            "--segmentations-dir",
            (params["segmentations_dir"] ?? null)
        );
    }
    if ((params["gt_from_fs"] ?? null)) {
        cargs.push("--gt-from-FS");
    }
    if ((params["segmentation_name"] ?? null) !== null) {
        cargs.push(
            "--segmentation-name",
            (params["segmentation_name"] ?? null)
        );
    }
    if ((params["multi_structure"] ?? null)) {
        cargs.push("--multi-structure");
    }
    if ((params["labels"] ?? null) !== null) {
        cargs.push(
            "--labels",
            ...(params["labels"] ?? null)
        );
    }
    if ((params["from_samseg"] ?? null)) {
        cargs.push("--from-samseg");
    }
    if ((params["em_iterations"] ?? null) !== null) {
        cargs.push(
            "--EM-iterations",
            String((params["em_iterations"] ?? null))
        );
    }
    if ((params["show_figs"] ?? null)) {
        cargs.push("--show-figs");
    }
    if ((params["save_figs"] ?? null)) {
        cargs.push("--save-figs");
    }
    if ((params["save_average_figs"] ?? null)) {
        cargs.push("--save-average-figs");
    }
    if ((params["subjects_file"] ?? null) !== null) {
        cargs.push(
            "--subjects_file",
            (params["subjects_file"] ?? null)
        );
    }
    if ((params["labels_file"] ?? null) !== null) {
        cargs.push(
            "--labels_file",
            (params["labels_file"] ?? null)
        );
    }
    if ((params["samseg_subdir"] ?? null) !== null) {
        cargs.push(
            "--samseg-subdir",
            (params["samseg_subdir"] ?? null)
        );
    }
    return cargs;
}


function gems_compute_atlas_probs_outputs(
    params: GemsComputeAtlasProbsParameters,
    execution: Execution,
): GemsComputeAtlasProbsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: GemsComputeAtlasProbsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function gems_compute_atlas_probs_execute(
    params: GemsComputeAtlasProbsParameters,
    execution: Execution,
): GemsComputeAtlasProbsOutputs {
    /**
     * Tool to compute atlas probabilities using SAMSEG results.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `GemsComputeAtlasProbsOutputs`).
     */
    params = execution.params(params)
    const cargs = gems_compute_atlas_probs_cargs(params, execution)
    const ret = gems_compute_atlas_probs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function gems_compute_atlas_probs(
    subjects_dir: string,
    mesh_collections: Array<string>,
    out_dir: string,
    segmentations_dir: string | null = null,
    gt_from_fs: boolean = false,
    segmentation_name: string | null = null,
    multi_structure: boolean = false,
    labels: Array<string> | null = null,
    from_samseg: boolean = false,
    em_iterations: number | null = null,
    show_figs: boolean = false,
    save_figs: boolean = false,
    save_average_figs: boolean = false,
    subjects_file: string | null = null,
    labels_file: string | null = null,
    samseg_subdir: string | null = null,
    runner: Runner | null = null,
): GemsComputeAtlasProbsOutputs {
    /**
     * Tool to compute atlas probabilities using SAMSEG results.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subjects_dir Directory with saved SAMSEG runs with --history flag.
     * @param mesh_collections Mesh collection file(s).
     * @param out_dir Output directory.
     * @param segmentations_dir Directory with GT segmentations.
     * @param gt_from_fs GT from FreeSurfer segmentations.
     * @param segmentation_name Filename of the segmentations, assumed to be the same for each subject.
     * @param multi_structure Estimate alphas from more than 1 structure.
     * @param labels Label numbers for multi-structure estimation.
     * @param from_samseg SAMSEG runs obtained from command samseg instead of run_samseg.
     * @param em_iterations Number of EM iterations.
     * @param show_figs Show figures during the run.
     * @param save_figs Save rasterized prior of each subject.
     * @param save_average_figs Save average rasterized prior.
     * @param subjects_file Text file with list of subjects.
     * @param labels_file Text file with list of labels (instead of --labels).
     * @param samseg_subdir Name of samseg subdir in subject/mri folder.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `GemsComputeAtlasProbsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GEMS_COMPUTE_ATLAS_PROBS_METADATA);
    const params = gems_compute_atlas_probs_params(subjects_dir, mesh_collections, out_dir, segmentations_dir, gt_from_fs, segmentation_name, multi_structure, labels, from_samseg, em_iterations, show_figs, save_figs, save_average_figs, subjects_file, labels_file, samseg_subdir)
    return gems_compute_atlas_probs_execute(params, execution);
}


export {
      GEMS_COMPUTE_ATLAS_PROBS_METADATA,
      GemsComputeAtlasProbsOutputs,
      GemsComputeAtlasProbsParameters,
      gems_compute_atlas_probs,
      gems_compute_atlas_probs_params,
};
