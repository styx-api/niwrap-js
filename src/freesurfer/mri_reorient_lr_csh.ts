// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_REORIENT_LR_CSH_METADATA: Metadata = {
    id: "44b9d6ba4983462289bb74a35e46ca2bc4fb3a6c.boutiques",
    name: "mri_reorient_LR.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriReorientLrCshParameters {
    "__STYXTYPE__": "mri_reorient_LR.csh";
    "input_vol": InputPathType;
    "output_vol": string;
    "display_result": boolean;
    "clean_files": boolean;
    "output_registration": boolean;
    "version": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_reorient_LR.csh": mri_reorient_lr_csh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_reorient_LR.csh": mri_reorient_lr_csh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_reorient_lr_csh(...)`.
 *
 * @interface
 */
interface MriReorientLrCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Reoriented volume
     */
    reoriented_vol: OutputPathType;
}


function mri_reorient_lr_csh_params(
    input_vol: InputPathType,
    output_vol: string,
    display_result: boolean = false,
    clean_files: boolean = false,
    output_registration: boolean = false,
    version: boolean = false,
    help: boolean = false,
): MriReorientLrCshParameters {
    /**
     * Build parameters.
    
     * @param input_vol Input file to be reoriented
     * @param output_vol Reoriented input file
     * @param display_result Display registration result using FreeView
     * @param clean_files Delete all auxiliary and registration files
     * @param output_registration Write out the registration file that is applied to the reoriented input file (fslmat or lta)
     * @param version Print version and exit
     * @param help Print help and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_reorient_LR.csh" as const,
        "input_vol": input_vol,
        "output_vol": output_vol,
        "display_result": display_result,
        "clean_files": clean_files,
        "output_registration": output_registration,
        "version": version,
        "help": help,
    };
    return params;
}


function mri_reorient_lr_csh_cargs(
    params: MriReorientLrCshParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_reorient_LR");
    cargs.push(
        "--i",
        execution.inputFile((params["input_vol"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output_vol"] ?? null)
    );
    if ((params["display_result"] ?? null)) {
        cargs.push("--disp");
    }
    if ((params["clean_files"] ?? null)) {
        cargs.push("--clean");
    }
    if ((params["output_registration"] ?? null)) {
        cargs.push("--outreg");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


function mri_reorient_lr_csh_outputs(
    params: MriReorientLrCshParameters,
    execution: Execution,
): MriReorientLrCshOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriReorientLrCshOutputs = {
        root: execution.outputFile("."),
        reoriented_vol: execution.outputFile([(params["output_vol"] ?? null)].join('')),
    };
    return ret;
}


function mri_reorient_lr_csh_execute(
    params: MriReorientLrCshParameters,
    execution: Execution,
): MriReorientLrCshOutputs {
    /**
     * A script to reorient MRI volumes from left-right orientation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriReorientLrCshOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_reorient_lr_csh_cargs(params, execution)
    const ret = mri_reorient_lr_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_reorient_lr_csh(
    input_vol: InputPathType,
    output_vol: string,
    display_result: boolean = false,
    clean_files: boolean = false,
    output_registration: boolean = false,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): MriReorientLrCshOutputs {
    /**
     * A script to reorient MRI volumes from left-right orientation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_vol Input file to be reoriented
     * @param output_vol Reoriented input file
     * @param display_result Display registration result using FreeView
     * @param clean_files Delete all auxiliary and registration files
     * @param output_registration Write out the registration file that is applied to the reoriented input file (fslmat or lta)
     * @param version Print version and exit
     * @param help Print help and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriReorientLrCshOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_REORIENT_LR_CSH_METADATA);
    const params = mri_reorient_lr_csh_params(input_vol, output_vol, display_result, clean_files, output_registration, version, help)
    return mri_reorient_lr_csh_execute(params, execution);
}


export {
      MRI_REORIENT_LR_CSH_METADATA,
      MriReorientLrCshOutputs,
      MriReorientLrCshParameters,
      mri_reorient_lr_csh,
      mri_reorient_lr_csh_params,
};
