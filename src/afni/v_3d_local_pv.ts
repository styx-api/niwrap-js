// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LOCAL_PV_METADATA: Metadata = {
    id: "d8fdcea80bb2e245dc9877549e950e2a4c50d742.boutiques",
    name: "3dLocalPV",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLocalPvParameters {
    "@type": "afni.3dLocalPV";
    "input_dataset": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "automask": boolean;
    "prefix"?: string | null | undefined;
    "prefix2"?: string | null | undefined;
    "evprefix"?: string | null | undefined;
    "neighborhood"?: string | null | undefined;
    "despike": boolean;
    "polort"?: number | null | undefined;
    "vnorm": boolean;
    "vproj"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dLocalPV": v_3d_local_pv_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dLocalPV": v_3d_local_pv_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_local_pv(...)`.
 *
 * @interface
 */
interface V3dLocalPvOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * SVD vector result dataset
     */
    svd_vector_result: OutputPathType | null;
    /**
     * Second principal vector dataset
     */
    second_principal_vector: OutputPathType | null;
    /**
     * Singular value at each voxel dataset
     */
    singular_value: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input time series dataset
 * @param mask Restrict operations to this mask
 * @param automask Create a mask from the time series dataset
 * @param prefix Save SVD vector result into this new dataset [default = 'LocalPV']
 * @param prefix2 Save second principal vector into this new dataset [default = don't save it]
 * @param evprefix Save singular value at each voxel into this dataset [default = don't save]
 * @param neighborhood Neighborhood definition (e.g., 'SPHERE(5)', 'TOHD(7)', etc.)
 * @param despike Remove time series spikes from input dataset
 * @param polort Detrending
 * @param vnorm Normalize data vectors [strongly recommended]
 * @param vproj Project central data time series onto local SVD vector; if followed by '2', then the central data time series will be projected on the 2-dimensional subspace spanned by the first 2 principal SVD vectors. [default: just output principal singular vector]
 *
 * @returns Parameter dictionary
 */
function v_3d_local_pv_params(
    input_dataset: InputPathType,
    mask: InputPathType | null = null,
    automask: boolean = false,
    prefix: string | null = null,
    prefix2: string | null = null,
    evprefix: string | null = null,
    neighborhood: string | null = null,
    despike: boolean = false,
    polort: number | null = null,
    vnorm: boolean = false,
    vproj: string | null = null,
): V3dLocalPvParameters {
    const params = {
        "@type": "afni.3dLocalPV" as const,
        "input_dataset": input_dataset,
        "automask": automask,
        "despike": despike,
        "vnorm": vnorm,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (prefix2 !== null) {
        params["prefix2"] = prefix2;
    }
    if (evprefix !== null) {
        params["evprefix"] = evprefix;
    }
    if (neighborhood !== null) {
        params["neighborhood"] = neighborhood;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (vproj !== null) {
        params["vproj"] = vproj;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_local_pv_cargs(
    params: V3dLocalPvParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dLocalPV");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["prefix2"] ?? null) !== null) {
        cargs.push(
            "-prefix2",
            (params["prefix2"] ?? null)
        );
    }
    if ((params["evprefix"] ?? null) !== null) {
        cargs.push(
            "-evprefix",
            (params["evprefix"] ?? null)
        );
    }
    if ((params["neighborhood"] ?? null) !== null) {
        cargs.push(
            "-nbhd",
            (params["neighborhood"] ?? null)
        );
    }
    if ((params["despike"] ?? null)) {
        cargs.push("-despike");
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["vnorm"] ?? null)) {
        cargs.push("-vnorm");
    }
    if ((params["vproj"] ?? null) !== null) {
        cargs.push(
            "-vproj",
            (params["vproj"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_local_pv_outputs(
    params: V3dLocalPvParameters,
    execution: Execution,
): V3dLocalPvOutputs {
    const ret: V3dLocalPvOutputs = {
        root: execution.outputFile("."),
        svd_vector_result: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
        second_principal_vector: ((params["prefix2"] ?? null) !== null) ? execution.outputFile([(params["prefix2"] ?? null), ".nii.gz"].join('')) : null,
        singular_value: ((params["evprefix"] ?? null) !== null) ? execution.outputFile([(params["evprefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * 3dLocalPV
 *
 * Computes the Singular Value Decomposition (SVD) of the time series from a neighborhood of each voxel in a 3D+time dataset, which serves as a smoothing method for the dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLocalPvOutputs`).
 */
function v_3d_local_pv_execute(
    params: V3dLocalPvParameters,
    runner: Runner | null = null,
): V3dLocalPvOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LOCAL_PV_METADATA);
    params = execution.params(params)
    const cargs = v_3d_local_pv_cargs(params, execution)
    const ret = v_3d_local_pv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dLocalPV
 *
 * Computes the Singular Value Decomposition (SVD) of the time series from a neighborhood of each voxel in a 3D+time dataset, which serves as a smoothing method for the dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input time series dataset
 * @param mask Restrict operations to this mask
 * @param automask Create a mask from the time series dataset
 * @param prefix Save SVD vector result into this new dataset [default = 'LocalPV']
 * @param prefix2 Save second principal vector into this new dataset [default = don't save it]
 * @param evprefix Save singular value at each voxel into this dataset [default = don't save]
 * @param neighborhood Neighborhood definition (e.g., 'SPHERE(5)', 'TOHD(7)', etc.)
 * @param despike Remove time series spikes from input dataset
 * @param polort Detrending
 * @param vnorm Normalize data vectors [strongly recommended]
 * @param vproj Project central data time series onto local SVD vector; if followed by '2', then the central data time series will be projected on the 2-dimensional subspace spanned by the first 2 principal SVD vectors. [default: just output principal singular vector]
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLocalPvOutputs`).
 */
function v_3d_local_pv(
    input_dataset: InputPathType,
    mask: InputPathType | null = null,
    automask: boolean = false,
    prefix: string | null = null,
    prefix2: string | null = null,
    evprefix: string | null = null,
    neighborhood: string | null = null,
    despike: boolean = false,
    polort: number | null = null,
    vnorm: boolean = false,
    vproj: string | null = null,
    runner: Runner | null = null,
): V3dLocalPvOutputs {
    const params = v_3d_local_pv_params(input_dataset, mask, automask, prefix, prefix2, evprefix, neighborhood, despike, polort, vnorm, vproj)
    return v_3d_local_pv_execute(params, runner);
}


export {
      V3dLocalPvOutputs,
      V3dLocalPvParameters,
      V_3D_LOCAL_PV_METADATA,
      v_3d_local_pv,
      v_3d_local_pv_execute,
      v_3d_local_pv_params,
};
