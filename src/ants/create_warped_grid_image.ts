// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CREATE_WARPED_GRID_IMAGE_METADATA: Metadata = {
    id: "e77b860defec17e64141d0e139550e9625747193.boutiques",
    name: "CreateWarpedGridImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface CreateWarpedGridImageParameters {
    "@type": "ants.CreateWarpedGridImage";
    "image_dimension": number;
    "deformation_field": InputPathType;
    "output_image": string;
    "directions"?: string | null | undefined;
    "grid_spacing"?: string | null | undefined;
    "grid_sigma"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.CreateWarpedGridImage": create_warped_grid_image_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.CreateWarpedGridImage": create_warped_grid_image_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `create_warped_grid_image(...)`.
 *
 * @interface
 */
interface CreateWarpedGridImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resultant warped grid image.
     */
    warped_grid_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimensionality of the input image.
 * @param deformation_field File containing the deformation field to be applied.
 * @param output_image The filename of the output warped grid image.
 * @param directions Directions for the grid warping, e.g., '1x0x0'.
 * @param grid_spacing Spacing of the grid, e.g., '10x10x10'.
 * @param grid_sigma Sigma value for the grid smoothing, e.g., '1x1x1'.
 *
 * @returns Parameter dictionary
 */
function create_warped_grid_image_params(
    image_dimension: number,
    deformation_field: InputPathType,
    output_image: string,
    directions: string | null = null,
    grid_spacing: string | null = null,
    grid_sigma: string | null = null,
): CreateWarpedGridImageParameters {
    const params = {
        "@type": "ants.CreateWarpedGridImage" as const,
        "image_dimension": image_dimension,
        "deformation_field": deformation_field,
        "output_image": output_image,
    };
    if (directions !== null) {
        params["directions"] = directions;
    }
    if (grid_spacing !== null) {
        params["grid_spacing"] = grid_spacing;
    }
    if (grid_sigma !== null) {
        params["grid_sigma"] = grid_sigma;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function create_warped_grid_image_cargs(
    params: CreateWarpedGridImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("CreateWarpedGridImage");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["deformation_field"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    if ((params["directions"] ?? null) !== null) {
        cargs.push((params["directions"] ?? null));
    }
    if ((params["grid_spacing"] ?? null) !== null) {
        cargs.push((params["grid_spacing"] ?? null));
    }
    if ((params["grid_sigma"] ?? null) !== null) {
        cargs.push((params["grid_sigma"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function create_warped_grid_image_outputs(
    params: CreateWarpedGridImageParameters,
    execution: Execution,
): CreateWarpedGridImageOutputs {
    const ret: CreateWarpedGridImageOutputs = {
        root: execution.outputFile("."),
        warped_grid_image: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * CreateWarpedGridImage
 *
 * Create a warped grid image based on the specified deformation field.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CreateWarpedGridImageOutputs`).
 */
function create_warped_grid_image_execute(
    params: CreateWarpedGridImageParameters,
    runner: Runner | null = null,
): CreateWarpedGridImageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CREATE_WARPED_GRID_IMAGE_METADATA);
    params = execution.params(params)
    const cargs = create_warped_grid_image_cargs(params, execution)
    const ret = create_warped_grid_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * CreateWarpedGridImage
 *
 * Create a warped grid image based on the specified deformation field.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimensionality of the input image.
 * @param deformation_field File containing the deformation field to be applied.
 * @param output_image The filename of the output warped grid image.
 * @param directions Directions for the grid warping, e.g., '1x0x0'.
 * @param grid_spacing Spacing of the grid, e.g., '10x10x10'.
 * @param grid_sigma Sigma value for the grid smoothing, e.g., '1x1x1'.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CreateWarpedGridImageOutputs`).
 */
function create_warped_grid_image(
    image_dimension: number,
    deformation_field: InputPathType,
    output_image: string,
    directions: string | null = null,
    grid_spacing: string | null = null,
    grid_sigma: string | null = null,
    runner: Runner | null = null,
): CreateWarpedGridImageOutputs {
    const params = create_warped_grid_image_params(image_dimension, deformation_field, output_image, directions, grid_spacing, grid_sigma)
    return create_warped_grid_image_execute(params, runner);
}


export {
      CREATE_WARPED_GRID_IMAGE_METADATA,
      CreateWarpedGridImageOutputs,
      CreateWarpedGridImageParameters,
      create_warped_grid_image,
      create_warped_grid_image_execute,
      create_warped_grid_image_params,
};
