// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NWARP_FUNCS_METADATA: Metadata = {
    id: "1eff17eabae05eb35c5c1d7331dcbdcf39fb85a8.boutiques",
    name: "3dNwarpFuncs",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNwarpFuncsParameters {
    "@type": "afni.3dNwarpFuncs";
    "input_warp": InputPathType;
    "output_prefix": string;
    "bulk_flag": boolean;
    "shear_flag": boolean;
    "vorticity_flag": boolean;
    "all_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dNwarpFuncs": v_3d_nwarp_funcs_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dNwarpFuncs": v_3d_nwarp_funcs_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_nwarp_funcs(...)`.
 *
 * @interface
 */
interface V3dNwarpFuncsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output dataset with the computed functions.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_warp 'www' is the name of the 3D warp dataset (mandatory option).
 * @param output_prefix 'ppp' is the name of the new output dataset.
 * @param bulk_flag Compute the (fractional) bulk volume change (Jacobian determinant minus 1).
 * @param shear_flag Compute the shear energy.
 * @param vorticity_flag Compute the vorticity energy.
 * @param all_flag Compute all 3 functions: bulk, shear, and vorticity.
 *
 * @returns Parameter dictionary
 */
function v_3d_nwarp_funcs_params(
    input_warp: InputPathType,
    output_prefix: string,
    bulk_flag: boolean = false,
    shear_flag: boolean = false,
    vorticity_flag: boolean = false,
    all_flag: boolean = false,
): V3dNwarpFuncsParameters {
    const params = {
        "@type": "afni.3dNwarpFuncs" as const,
        "input_warp": input_warp,
        "output_prefix": output_prefix,
        "bulk_flag": bulk_flag,
        "shear_flag": shear_flag,
        "vorticity_flag": vorticity_flag,
        "all_flag": all_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_nwarp_funcs_cargs(
    params: V3dNwarpFuncsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dNwarpFuncs");
    cargs.push(
        "-nwarp",
        execution.inputFile((params["input_warp"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["bulk_flag"] ?? null)) {
        cargs.push("-bulk");
    }
    if ((params["shear_flag"] ?? null)) {
        cargs.push("-shear");
    }
    if ((params["vorticity_flag"] ?? null)) {
        cargs.push("-vorticity");
    }
    if ((params["all_flag"] ?? null)) {
        cargs.push("-all");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_nwarp_funcs_outputs(
    params: V3dNwarpFuncsParameters,
    execution: Execution,
): V3dNwarpFuncsOutputs {
    const ret: V3dNwarpFuncsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_prefix"] ?? null), "_output.nii.gz"].join('')),
    };
    return ret;
}


/**
 * Compute functions of 3D warp displacements, such as bulk volume change, shear energy, and vorticity energy.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpFuncsOutputs`).
 */
function v_3d_nwarp_funcs_execute(
    params: V3dNwarpFuncsParameters,
    execution: Execution,
): V3dNwarpFuncsOutputs {
    params = execution.params(params)
    const cargs = v_3d_nwarp_funcs_cargs(params, execution)
    const ret = v_3d_nwarp_funcs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute functions of 3D warp displacements, such as bulk volume change, shear energy, and vorticity energy.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_warp 'www' is the name of the 3D warp dataset (mandatory option).
 * @param output_prefix 'ppp' is the name of the new output dataset.
 * @param bulk_flag Compute the (fractional) bulk volume change (Jacobian determinant minus 1).
 * @param shear_flag Compute the shear energy.
 * @param vorticity_flag Compute the vorticity energy.
 * @param all_flag Compute all 3 functions: bulk, shear, and vorticity.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpFuncsOutputs`).
 */
function v_3d_nwarp_funcs(
    input_warp: InputPathType,
    output_prefix: string,
    bulk_flag: boolean = false,
    shear_flag: boolean = false,
    vorticity_flag: boolean = false,
    all_flag: boolean = false,
    runner: Runner | null = null,
): V3dNwarpFuncsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NWARP_FUNCS_METADATA);
    const params = v_3d_nwarp_funcs_params(input_warp, output_prefix, bulk_flag, shear_flag, vorticity_flag, all_flag)
    return v_3d_nwarp_funcs_execute(params, execution);
}


export {
      V3dNwarpFuncsOutputs,
      V3dNwarpFuncsParameters,
      V_3D_NWARP_FUNCS_METADATA,
      v_3d_nwarp_funcs,
      v_3d_nwarp_funcs_cargs,
      v_3d_nwarp_funcs_execute,
      v_3d_nwarp_funcs_outputs,
      v_3d_nwarp_funcs_params,
};
