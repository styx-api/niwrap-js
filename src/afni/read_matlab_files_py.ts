// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const READ_MATLAB_FILES_PY_METADATA: Metadata = {
    id: "228461aad9e4f1abdf8c4f6cdf4dda42da06fc96.boutiques",
    name: "read_matlab_files.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ReadMatlabFilesPyParameters {
    "__STYXTYPE__": "read_matlab_files.py";
    "infiles": Array<string>;
    "prefix"?: string | null | undefined;
    "overwrite": boolean;
    "help": boolean;
    "history": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "read_matlab_files.py": read_matlab_files_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "read_matlab_files.py": read_matlab_files_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `read_matlab_files_py(...)`.
 *
 * @interface
 */
interface ReadMatlabFilesPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted 1D format file
     */
    converted_1d_file: OutputPathType | null;
}


function read_matlab_files_py_params(
    infiles: Array<string>,
    prefix: string | null = null,
    overwrite: boolean = false,
    help: boolean = false,
    history: boolean = false,
    version: boolean = false,
): ReadMatlabFilesPyParameters {
    /**
     * Build parameters.
    
     * @param infiles Input MATLAB files to be processed
     * @param prefix Prefix for output file names
     * @param overwrite Overwrite any existing output files
     * @param help Show help message
     * @param history Show revision history
     * @param version Show version number
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "read_matlab_files.py" as const,
        "infiles": infiles,
        "overwrite": overwrite,
        "help": help,
        "history": history,
        "version": version,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function read_matlab_files_py_cargs(
    params: ReadMatlabFilesPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("read_matlab_files.py");
    cargs.push(...(params["infiles"] ?? null));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["history"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    return cargs;
}


function read_matlab_files_py_outputs(
    params: ReadMatlabFilesPyParameters,
    execution: Execution,
): ReadMatlabFilesPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ReadMatlabFilesPyOutputs = {
        root: execution.outputFile("."),
        converted_1d_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".[INDEX].[KEY].1D"].join('')) : null,
    };
    return ret;
}


function read_matlab_files_py_execute(
    params: ReadMatlabFilesPyParameters,
    execution: Execution,
): ReadMatlabFilesPyOutputs {
    /**
     * Describe or convert MATLAB files (.mat) to 1D format.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ReadMatlabFilesPyOutputs`).
     */
    params = execution.params(params)
    const cargs = read_matlab_files_py_cargs(params, execution)
    const ret = read_matlab_files_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function read_matlab_files_py(
    infiles: Array<string>,
    prefix: string | null = null,
    overwrite: boolean = false,
    help: boolean = false,
    history: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): ReadMatlabFilesPyOutputs {
    /**
     * Describe or convert MATLAB files (.mat) to 1D format.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param infiles Input MATLAB files to be processed
     * @param prefix Prefix for output file names
     * @param overwrite Overwrite any existing output files
     * @param help Show help message
     * @param history Show revision history
     * @param version Show version number
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ReadMatlabFilesPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(READ_MATLAB_FILES_PY_METADATA);
    const params = read_matlab_files_py_params(infiles, prefix, overwrite, help, history, version)
    return read_matlab_files_py_execute(params, execution);
}


export {
      READ_MATLAB_FILES_PY_METADATA,
      ReadMatlabFilesPyOutputs,
      ReadMatlabFilesPyParameters,
      read_matlab_files_py,
      read_matlab_files_py_params,
};
