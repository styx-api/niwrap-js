// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF2VOL_METADATA: Metadata = {
    id: "cb9d30b60e852e42d3af84e07bf8e781d39d6242.boutiques",
    name: "surf2vol",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Surf2volParameters {
    "@type": "freesurfer.surf2vol";
    "fixed_surface": InputPathType;
    "moving_surface": InputPathType;
    "fixed_mri": InputPathType;
    "moving_mri": InputPathType;
    "output_file"?: string | null | undefined;
    "output_field"?: string | null | undefined;
    "output_affine"?: string | null | undefined;
    "output_surf"?: string | null | undefined;
    "output_surf_affine"?: string | null | undefined;
    "output_mesh"?: string | null | undefined;
    "spacing_x"?: number | null | undefined;
    "spacing_y"?: number | null | undefined;
    "spacing_z"?: number | null | undefined;
    "poisson_ratio"?: number | null | undefined;
    "dirty_factor"?: number | null | undefined;
    "debug_output": boolean;
    "cache_transform"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.surf2vol": surf2vol_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.surf2vol": surf2vol_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf2vol(...)`.
 *
 * @interface
 */
interface Surf2volOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Default output of the deformation process.
     */
    output_file: OutputPathType | null;
    /**
     * Field output of the deformation process.
     */
    output_field: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param fixed_surface File path for the main fixed surface.
 * @param moving_surface File path for the main moving surface.
 * @param fixed_mri Fixed volume file.
 * @param moving_mri Moving volume file.
 * @param output_file Output file for the result, default is out.mgz.
 * @param output_field Output field file, default is out_field.mgz.
 * @param output_affine Path for the output affine file.
 * @param output_surf Root file name for output surfaces which will have indices appended for each surface.
 * @param output_surf_affine Root file name for output surfaces with affine transformations.
 * @param output_mesh File path for the output mesh.
 * @param spacing_x Specifies the x spacing for the deformation grid.
 * @param spacing_y Specifies the y spacing for the deformation grid.
 * @param spacing_z Specifies the z spacing for the deformation grid.
 * @param poisson_ratio Poisson ratio for material properties, default is 0.3.
 * @param dirty_factor Factor for dirty regions, between 0 and 1.
 * @param debug_output Enable debug output, writing a morph file at each iteration.
 * @param cache_transform Path to save transformation cache for reusing in subsequent runs.
 *
 * @returns Parameter dictionary
 */
function surf2vol_params(
    fixed_surface: InputPathType,
    moving_surface: InputPathType,
    fixed_mri: InputPathType,
    moving_mri: InputPathType,
    output_file: string | null = "out.mgz",
    output_field: string | null = "out_field.mgz",
    output_affine: string | null = null,
    output_surf: string | null = null,
    output_surf_affine: string | null = null,
    output_mesh: string | null = null,
    spacing_x: number | null = null,
    spacing_y: number | null = null,
    spacing_z: number | null = null,
    poisson_ratio: number | null = null,
    dirty_factor: number | null = null,
    debug_output: boolean = false,
    cache_transform: string | null = null,
): Surf2volParameters {
    const params = {
        "@type": "freesurfer.surf2vol" as const,
        "fixed_surface": fixed_surface,
        "moving_surface": moving_surface,
        "fixed_mri": fixed_mri,
        "moving_mri": moving_mri,
        "debug_output": debug_output,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    if (output_field !== null) {
        params["output_field"] = output_field;
    }
    if (output_affine !== null) {
        params["output_affine"] = output_affine;
    }
    if (output_surf !== null) {
        params["output_surf"] = output_surf;
    }
    if (output_surf_affine !== null) {
        params["output_surf_affine"] = output_surf_affine;
    }
    if (output_mesh !== null) {
        params["output_mesh"] = output_mesh;
    }
    if (spacing_x !== null) {
        params["spacing_x"] = spacing_x;
    }
    if (spacing_y !== null) {
        params["spacing_y"] = spacing_y;
    }
    if (spacing_z !== null) {
        params["spacing_z"] = spacing_z;
    }
    if (poisson_ratio !== null) {
        params["poisson_ratio"] = poisson_ratio;
    }
    if (dirty_factor !== null) {
        params["dirty_factor"] = dirty_factor;
    }
    if (cache_transform !== null) {
        params["cache_transform"] = cache_transform;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf2vol_cargs(
    params: Surf2volParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("surf2vol");
    cargs.push(
        "-fixed_surf",
        execution.inputFile((params["fixed_surface"] ?? null))
    );
    cargs.push(
        "-moving_surf",
        execution.inputFile((params["moving_surface"] ?? null))
    );
    cargs.push(
        "-fixed_mri",
        execution.inputFile((params["fixed_mri"] ?? null))
    );
    cargs.push(
        "-moving_mri",
        execution.inputFile((params["moving_mri"] ?? null))
    );
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "-out",
            (params["output_file"] ?? null)
        );
    }
    if ((params["output_field"] ?? null) !== null) {
        cargs.push(
            "-out_field",
            (params["output_field"] ?? null)
        );
    }
    if ((params["output_affine"] ?? null) !== null) {
        cargs.push(
            "-out_affine",
            (params["output_affine"] ?? null)
        );
    }
    if ((params["output_surf"] ?? null) !== null) {
        cargs.push(
            "-out_surf",
            (params["output_surf"] ?? null)
        );
    }
    if ((params["output_surf_affine"] ?? null) !== null) {
        cargs.push(
            "-out_surf_affine",
            (params["output_surf_affine"] ?? null)
        );
    }
    if ((params["output_mesh"] ?? null) !== null) {
        cargs.push(
            "-out_mesh",
            (params["output_mesh"] ?? null)
        );
    }
    if ((params["spacing_x"] ?? null) !== null) {
        cargs.push(
            "-spacing_x",
            String((params["spacing_x"] ?? null))
        );
    }
    if ((params["spacing_y"] ?? null) !== null) {
        cargs.push(
            "-spacing_y",
            String((params["spacing_y"] ?? null))
        );
    }
    if ((params["spacing_z"] ?? null) !== null) {
        cargs.push(
            "-spacing_z",
            String((params["spacing_z"] ?? null))
        );
    }
    if ((params["poisson_ratio"] ?? null) !== null) {
        cargs.push(
            "-poisson",
            String((params["poisson_ratio"] ?? null))
        );
    }
    if ((params["dirty_factor"] ?? null) !== null) {
        cargs.push(
            "-dirty",
            String((params["dirty_factor"] ?? null))
        );
    }
    if ((params["debug_output"] ?? null)) {
        cargs.push("-dbg_output");
    }
    if ((params["cache_transform"] ?? null) !== null) {
        cargs.push(
            "-cache_transform",
            (params["cache_transform"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf2vol_outputs(
    params: Surf2volParameters,
    execution: Execution,
): Surf2volOutputs {
    const ret: Surf2volOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
        output_field: ((params["output_field"] ?? null) !== null) ? execution.outputFile([(params["output_field"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Diffuse surface deformation to volumes using surface and MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Surf2volOutputs`).
 */
function surf2vol_execute(
    params: Surf2volParameters,
    runner: Runner | null = null,
): Surf2volOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF2VOL_METADATA);
    params = execution.params(params)
    const cargs = surf2vol_cargs(params, execution)
    const ret = surf2vol_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Diffuse surface deformation to volumes using surface and MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param fixed_surface File path for the main fixed surface.
 * @param moving_surface File path for the main moving surface.
 * @param fixed_mri Fixed volume file.
 * @param moving_mri Moving volume file.
 * @param output_file Output file for the result, default is out.mgz.
 * @param output_field Output field file, default is out_field.mgz.
 * @param output_affine Path for the output affine file.
 * @param output_surf Root file name for output surfaces which will have indices appended for each surface.
 * @param output_surf_affine Root file name for output surfaces with affine transformations.
 * @param output_mesh File path for the output mesh.
 * @param spacing_x Specifies the x spacing for the deformation grid.
 * @param spacing_y Specifies the y spacing for the deformation grid.
 * @param spacing_z Specifies the z spacing for the deformation grid.
 * @param poisson_ratio Poisson ratio for material properties, default is 0.3.
 * @param dirty_factor Factor for dirty regions, between 0 and 1.
 * @param debug_output Enable debug output, writing a morph file at each iteration.
 * @param cache_transform Path to save transformation cache for reusing in subsequent runs.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Surf2volOutputs`).
 */
function surf2vol(
    fixed_surface: InputPathType,
    moving_surface: InputPathType,
    fixed_mri: InputPathType,
    moving_mri: InputPathType,
    output_file: string | null = "out.mgz",
    output_field: string | null = "out_field.mgz",
    output_affine: string | null = null,
    output_surf: string | null = null,
    output_surf_affine: string | null = null,
    output_mesh: string | null = null,
    spacing_x: number | null = null,
    spacing_y: number | null = null,
    spacing_z: number | null = null,
    poisson_ratio: number | null = null,
    dirty_factor: number | null = null,
    debug_output: boolean = false,
    cache_transform: string | null = null,
    runner: Runner | null = null,
): Surf2volOutputs {
    const params = surf2vol_params(fixed_surface, moving_surface, fixed_mri, moving_mri, output_file, output_field, output_affine, output_surf, output_surf_affine, output_mesh, spacing_x, spacing_y, spacing_z, poisson_ratio, dirty_factor, debug_output, cache_transform)
    return surf2vol_execute(params, runner);
}


export {
      SURF2VOL_METADATA,
      Surf2volOutputs,
      Surf2volParameters,
      surf2vol,
      surf2vol_execute,
      surf2vol_params,
};
