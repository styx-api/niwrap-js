// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_INTRACRANIAL_METADATA: Metadata = {
    id: "684ca9fab6f781de1e41403ff411216ba16a42b4.boutiques",
    name: "3dIntracranial",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dIntracranialParameters {
    "__STYXTYPE__": "3dIntracranial";
    "infile": InputPathType;
    "prefix": string;
    "min_val"?: number | null | undefined;
    "max_val"?: number | null | undefined;
    "min_conn"?: number | null | undefined;
    "max_conn"?: number | null | undefined;
    "no_smooth": boolean;
    "mask": boolean;
    "quiet": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dIntracranial": v_3d_intracranial_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dIntracranial": v_3d_intracranial_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_intracranial(...)`.
 *
 * @interface
 */
interface V3dIntracranialOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing segmented image
     */
    segmented_image: OutputPathType;
}


function v_3d_intracranial_params(
    infile: InputPathType,
    prefix: string,
    min_val: number | null = null,
    max_val: number | null = null,
    min_conn: number | null = null,
    max_conn: number | null = null,
    no_smooth: boolean = false,
    mask: boolean = false,
    quiet: boolean = false,
): V3dIntracranialParameters {
    /**
     * Build parameters.
    
     * @param infile Filename of anat dataset to be segmented
     * @param prefix Prefix name for file to contain segmented image
     * @param min_val Minimum voxel intensity limit. Default is internal PDF estimate for lower bound
     * @param max_val Maximum voxel intensity limit. Default is internal PDF estimate for upper bound
     * @param min_conn Minimum voxel connectivity to enter. Default is 4
     * @param max_conn Maximum voxel connectivity to leave. Default is 2
     * @param no_smooth Suppress spatial smoothing of segmentation mask
     * @param mask Generate functional image mask (complement). Default is to generate anatomical image
     * @param quiet Suppress output to screen
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dIntracranial" as const,
        "infile": infile,
        "prefix": prefix,
        "no_smooth": no_smooth,
        "mask": mask,
        "quiet": quiet,
    };
    if (min_val !== null) {
        params["min_val"] = min_val;
    }
    if (max_val !== null) {
        params["max_val"] = max_val;
    }
    if (min_conn !== null) {
        params["min_conn"] = min_conn;
    }
    if (max_conn !== null) {
        params["max_conn"] = max_conn;
    }
    return params;
}


function v_3d_intracranial_cargs(
    params: V3dIntracranialParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dIntracranial");
    cargs.push(
        "-anat",
        execution.inputFile((params["infile"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["min_val"] ?? null) !== null) {
        cargs.push(
            "-min_val",
            String((params["min_val"] ?? null))
        );
    }
    if ((params["max_val"] ?? null) !== null) {
        cargs.push(
            "-max_val",
            String((params["max_val"] ?? null))
        );
    }
    if ((params["min_conn"] ?? null) !== null) {
        cargs.push(
            "-min_conn",
            String((params["min_conn"] ?? null))
        );
    }
    if ((params["max_conn"] ?? null) !== null) {
        cargs.push(
            "-max_conn",
            String((params["max_conn"] ?? null))
        );
    }
    if ((params["no_smooth"] ?? null)) {
        cargs.push("-nosmooth");
    }
    if ((params["mask"] ?? null)) {
        cargs.push("-mask");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    return cargs;
}


function v_3d_intracranial_outputs(
    params: V3dIntracranialParameters,
    execution: Execution,
): V3dIntracranialOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dIntracranialOutputs = {
        root: execution.outputFile("."),
        segmented_image: execution.outputFile([(params["prefix"] ?? null), "+orig"].join('')),
    };
    return ret;
}


function v_3d_intracranial_execute(
    params: V3dIntracranialParameters,
    execution: Execution,
): V3dIntracranialOutputs {
    /**
     * Performs automatic segmentation of intracranial region.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dIntracranialOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_intracranial_cargs(params, execution)
    const ret = v_3d_intracranial_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_intracranial(
    infile: InputPathType,
    prefix: string,
    min_val: number | null = null,
    max_val: number | null = null,
    min_conn: number | null = null,
    max_conn: number | null = null,
    no_smooth: boolean = false,
    mask: boolean = false,
    quiet: boolean = false,
    runner: Runner | null = null,
): V3dIntracranialOutputs {
    /**
     * Performs automatic segmentation of intracranial region.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param infile Filename of anat dataset to be segmented
     * @param prefix Prefix name for file to contain segmented image
     * @param min_val Minimum voxel intensity limit. Default is internal PDF estimate for lower bound
     * @param max_val Maximum voxel intensity limit. Default is internal PDF estimate for upper bound
     * @param min_conn Minimum voxel connectivity to enter. Default is 4
     * @param max_conn Maximum voxel connectivity to leave. Default is 2
     * @param no_smooth Suppress spatial smoothing of segmentation mask
     * @param mask Generate functional image mask (complement). Default is to generate anatomical image
     * @param quiet Suppress output to screen
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dIntracranialOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_INTRACRANIAL_METADATA);
    const params = v_3d_intracranial_params(infile, prefix, min_val, max_val, min_conn, max_conn, no_smooth, mask, quiet)
    return v_3d_intracranial_execute(params, execution);
}


export {
      V3dIntracranialOutputs,
      V3dIntracranialParameters,
      V_3D_INTRACRANIAL_METADATA,
      v_3d_intracranial,
      v_3d_intracranial_params,
};
