// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIENA_DIFF_METADATA: Metadata = {
    id: "c30101d818658516e79238b0361dd5d4dcebb935.boutiques",
    name: "siena_diff",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SienaDiffParameters {
    "@type": "fsl.siena_diff";
    "input1_basename": string;
    "input2_basename": string;
    "debug_flag": boolean;
    "no_seg_flag": boolean;
    "self_corr_factor"?: number | null | undefined;
    "ignore_z_flow_flag": boolean;
    "apply_std_mask_flag": boolean;
    "segment_options"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.siena_diff": siena_diff_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `siena_diff(...)`.
 *
 * @interface
 */
interface SienaDiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input1_basename Input image 1 basename
 * @param input2_basename Input image 2 basename
 * @param debug_flag Debug - generate edge images and don't remove temporary images
 * @param no_seg_flag Don't segment grey+white separately (because there is poor grey-white contrast)
 * @param self_corr_factor Apply self-calibrating correction factor
 * @param ignore_z_flow_flag Ignore flow in z (may be beneficial if top of brain is missing)
 * @param apply_std_mask_flag Apply <input1_basename>_stdmask to brain edge points
 * @param segment_options Options to be passed to segmentation (type 'fast' to get these)
 *
 * @returns Parameter dictionary
 */
function siena_diff_params(
    input1_basename: string,
    input2_basename: string,
    debug_flag: boolean = false,
    no_seg_flag: boolean = false,
    self_corr_factor: number | null = null,
    ignore_z_flow_flag: boolean = false,
    apply_std_mask_flag: boolean = false,
    segment_options: string | null = null,
): SienaDiffParameters {
    const params = {
        "@type": "fsl.siena_diff" as const,
        "input1_basename": input1_basename,
        "input2_basename": input2_basename,
        "debug_flag": debug_flag,
        "no_seg_flag": no_seg_flag,
        "ignore_z_flow_flag": ignore_z_flow_flag,
        "apply_std_mask_flag": apply_std_mask_flag,
    };
    if (self_corr_factor !== null) {
        params["self_corr_factor"] = self_corr_factor;
    }
    if (segment_options !== null) {
        params["segment_options"] = segment_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function siena_diff_cargs(
    params: SienaDiffParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("siena_diff");
    cargs.push((params["input1_basename"] ?? null));
    cargs.push((params["input2_basename"] ?? null));
    if ((params["debug_flag"] ?? null)) {
        cargs.push("-d");
    }
    if ((params["no_seg_flag"] ?? null)) {
        cargs.push("-2");
    }
    if ((params["self_corr_factor"] ?? null) !== null) {
        cargs.push(
            "-c",
            String((params["self_corr_factor"] ?? null))
        );
    }
    if ((params["ignore_z_flow_flag"] ?? null)) {
        cargs.push("-i");
    }
    if ((params["apply_std_mask_flag"] ?? null)) {
        cargs.push("-m");
    }
    if ((params["segment_options"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["segment_options"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function siena_diff_outputs(
    params: SienaDiffParameters,
    execution: Execution,
): SienaDiffOutputs {
    const ret: SienaDiffOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * siena_diff
 *
 * SIENA_diff: Analysis of longitudinal brain image differences.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaDiffOutputs`).
 */
function siena_diff_execute(
    params: SienaDiffParameters,
    runner: Runner | null = null,
): SienaDiffOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIENA_DIFF_METADATA);
    params = execution.params(params)
    const cargs = siena_diff_cargs(params, execution)
    const ret = siena_diff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * siena_diff
 *
 * SIENA_diff: Analysis of longitudinal brain image differences.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input1_basename Input image 1 basename
 * @param input2_basename Input image 2 basename
 * @param debug_flag Debug - generate edge images and don't remove temporary images
 * @param no_seg_flag Don't segment grey+white separately (because there is poor grey-white contrast)
 * @param self_corr_factor Apply self-calibrating correction factor
 * @param ignore_z_flow_flag Ignore flow in z (may be beneficial if top of brain is missing)
 * @param apply_std_mask_flag Apply <input1_basename>_stdmask to brain edge points
 * @param segment_options Options to be passed to segmentation (type 'fast' to get these)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaDiffOutputs`).
 */
function siena_diff(
    input1_basename: string,
    input2_basename: string,
    debug_flag: boolean = false,
    no_seg_flag: boolean = false,
    self_corr_factor: number | null = null,
    ignore_z_flow_flag: boolean = false,
    apply_std_mask_flag: boolean = false,
    segment_options: string | null = null,
    runner: Runner | null = null,
): SienaDiffOutputs {
    const params = siena_diff_params(input1_basename, input2_basename, debug_flag, no_seg_flag, self_corr_factor, ignore_z_flow_flag, apply_std_mask_flag, segment_options)
    return siena_diff_execute(params, runner);
}


export {
      SIENA_DIFF_METADATA,
      SienaDiffOutputs,
      SienaDiffParameters,
      siena_diff,
      siena_diff_execute,
      siena_diff_params,
};
