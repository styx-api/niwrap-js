// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_ADD_XFORM_TO_HEADER_METADATA: Metadata = {
    id: "122da7d2edb5739b2f91a1edcbbad33a9e6828bc.boutiques",
    name: "mri_add_xform_to_header",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriAddXformToHeaderParameters {
    "@type"?: "freesurfer/mri_add_xform_to_header";
    "xfm_file": InputPathType;
    "input_volume": InputPathType;
    "output_volume": string;
    "verbose": boolean;
    "copy_name": boolean;
}
type MriAddXformToHeaderParametersTagged = Required<Pick<MriAddXformToHeaderParameters, '@type'>> & MriAddXformToHeaderParameters;


/**
 * Output object returned when calling `MriAddXformToHeaderParameters(...)`.
 *
 * @interface
 */
interface MriAddXformToHeaderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Volume output with added transformation.
     */
    output_volume_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param xfm_file Transformation file to be added to the volume header.
 * @param input_volume Input volume to which the transformation is added.
 * @param output_volume Output volume with the transformation included.
 * @param verbose Enable verbose output for more detailed logging.
 * @param copy_name Copy the name of the xfm file without loading it.
 *
 * @returns Parameter dictionary
 */
function mri_add_xform_to_header_params(
    xfm_file: InputPathType,
    input_volume: InputPathType,
    output_volume: string,
    verbose: boolean = false,
    copy_name: boolean = false,
): MriAddXformToHeaderParametersTagged {
    const params = {
        "@type": "freesurfer/mri_add_xform_to_header" as const,
        "xfm_file": xfm_file,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "verbose": verbose,
        "copy_name": copy_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_add_xform_to_header_cargs(
    params: MriAddXformToHeaderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_add_xform_to_header");
    cargs.push(execution.inputFile((params["xfm_file"] ?? null)));
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["verbose"] ?? false)) {
        cargs.push("-v");
    }
    if ((params["copy_name"] ?? false)) {
        cargs.push("-c");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_add_xform_to_header_outputs(
    params: MriAddXformToHeaderParameters,
    execution: Execution,
): MriAddXformToHeaderOutputs {
    const ret: MriAddXformToHeaderOutputs = {
        root: execution.outputFile("."),
        output_volume_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_add_xform_to_header
 *
 * Program to add specified transformation to the volume header.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAddXformToHeaderOutputs`).
 */
function mri_add_xform_to_header_execute(
    params: MriAddXformToHeaderParameters,
    runner: Runner | null = null,
): MriAddXformToHeaderOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_ADD_XFORM_TO_HEADER_METADATA);
    params = execution.params(params)
    const cargs = mri_add_xform_to_header_cargs(params, execution)
    const ret = mri_add_xform_to_header_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_add_xform_to_header
 *
 * Program to add specified transformation to the volume header.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param xfm_file Transformation file to be added to the volume header.
 * @param input_volume Input volume to which the transformation is added.
 * @param output_volume Output volume with the transformation included.
 * @param verbose Enable verbose output for more detailed logging.
 * @param copy_name Copy the name of the xfm file without loading it.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAddXformToHeaderOutputs`).
 */
function mri_add_xform_to_header(
    xfm_file: InputPathType,
    input_volume: InputPathType,
    output_volume: string,
    verbose: boolean = false,
    copy_name: boolean = false,
    runner: Runner | null = null,
): MriAddXformToHeaderOutputs {
    const params = mri_add_xform_to_header_params(xfm_file, input_volume, output_volume, verbose, copy_name)
    return mri_add_xform_to_header_execute(params, runner);
}


export {
      MRI_ADD_XFORM_TO_HEADER_METADATA,
      MriAddXformToHeaderOutputs,
      mri_add_xform_to_header,
      mri_add_xform_to_header_execute,
      mri_add_xform_to_header_params,
};
