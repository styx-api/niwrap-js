// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TRIDEC_METADATA: Metadata = {
    id: "17d2ba140c1142170644182d8abc8ce2ba86d70e.boutiques",
    name: "tridec",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TridecParameters {
    "@type": "freesurfer.tridec";
    "subject_name": string;
    "fine_file": InputPathType;
    "ico_file": InputPathType;
    "out_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.tridec": tridec_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.tridec": tridec_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tridec(...)`.
 *
 * @interface
 */
interface TridecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file from tridec processing.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name Name of the subject being processed.
 * @param fine_file Fine file input for tridec.
 * @param ico_file ICO file input for tridec.
 * @param out_file Output file for tridec processing result.
 *
 * @returns Parameter dictionary
 */
function tridec_params(
    subject_name: string,
    fine_file: InputPathType,
    ico_file: InputPathType,
    out_file: string,
): TridecParameters {
    const params = {
        "@type": "freesurfer.tridec" as const,
        "subject_name": subject_name,
        "fine_file": fine_file,
        "ico_file": ico_file,
        "out_file": out_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tridec_cargs(
    params: TridecParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tridec");
    cargs.push((params["subject_name"] ?? null));
    cargs.push(execution.inputFile((params["fine_file"] ?? null)));
    cargs.push(execution.inputFile((params["ico_file"] ?? null)));
    cargs.push((params["out_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tridec_outputs(
    params: TridecParameters,
    execution: Execution,
): TridecOutputs {
    const ret: TridecOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["out_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * tridec
 *
 * Tridec tool for processing brain images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TridecOutputs`).
 */
function tridec_execute(
    params: TridecParameters,
    runner: Runner | null = null,
): TridecOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TRIDEC_METADATA);
    params = execution.params(params)
    const cargs = tridec_cargs(params, execution)
    const ret = tridec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tridec
 *
 * Tridec tool for processing brain images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name Name of the subject being processed.
 * @param fine_file Fine file input for tridec.
 * @param ico_file ICO file input for tridec.
 * @param out_file Output file for tridec processing result.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TridecOutputs`).
 */
function tridec(
    subject_name: string,
    fine_file: InputPathType,
    ico_file: InputPathType,
    out_file: string,
    runner: Runner | null = null,
): TridecOutputs {
    const params = tridec_params(subject_name, fine_file, ico_file, out_file)
    return tridec_execute(params, runner);
}


export {
      TRIDEC_METADATA,
      TridecOutputs,
      TridecParameters,
      tridec,
      tridec_execute,
      tridec_params,
};
