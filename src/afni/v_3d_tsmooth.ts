// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TSMOOTH_METADATA: Metadata = {
    id: "aa6dd3c1515c93b42935ecf05bfb0b6f2739b26b.boutiques",
    name: "3dTsmooth",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTsmoothParameters {
    "__STYXTYPE__": "3dTsmooth";
    "input_dataset": InputPathType;
    "prefix"?: string | null | undefined;
    "datum_type"?: string | null | undefined;
    "lin_filter": boolean;
    "med_filter": boolean;
    "osf_filter": boolean;
    "lin_filter_custom"?: number | null | undefined;
    "hamming"?: number | null | undefined;
    "blackman"?: number | null | undefined;
    "custom_filter"?: InputPathType | null | undefined;
    "extend": boolean;
    "zero": boolean;
    "trend": boolean;
    "adaptive"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dTsmooth": v_3d_tsmooth_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dTsmooth": v_3d_tsmooth_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tsmooth(...)`.
 *
 * @interface
 */
interface V3dTsmoothOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Smoothed 3D+time dataset
     */
    output_dataset: OutputPathType | null;
}


function v_3d_tsmooth_params(
    input_dataset: InputPathType,
    prefix: string | null = null,
    datum_type: string | null = null,
    lin_filter: boolean = false,
    med_filter: boolean = false,
    osf_filter: boolean = false,
    lin_filter_custom: number | null = null,
    hamming: number | null = null,
    blackman: number | null = null,
    custom_filter: InputPathType | null = null,
    extend: boolean = false,
    zero: boolean = false,
    trend: boolean = false,
    adaptive: number | null = null,
): V3dTsmoothParameters {
    /**
     * Build parameters.
    
     * @param input_dataset The input 3D+time dataset.
     * @param prefix Sets the prefix of the output dataset.
     * @param datum_type Coerce output dataset to be stored as the given type.
     * @param lin_filter 3 point linear filter: 0.15*a + 0.70*b + 0.15*c
     * @param med_filter 3 point median filter: median(a,b,c)
     * @param osf_filter 3 point order statistics filter: 0.15*min(a,b,c) + 0.70*median(a,b,c) + 0.15*max(a,b,c)
     * @param lin_filter_custom 3 point linear filter with custom weight: 0.5*(1-m)*a + m*b + 0.5*(1-m)*c
     * @param hamming Use N point Hamming window filter.
     * @param blackman Use N point Blackman window filter.
     * @param custom_filter Use custom filter with coefficients from a specified file.
     * @param extend BEFORE: use the first value; AFTER: use the last value.
     * @param zero BEFORE and AFTER: use zero.
     * @param trend Compute a linear trend, and extrapolate BEFORE and AFTER.
     * @param adaptive Use adaptive mean filtering of width N (N must be odd and bigger than 3).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dTsmooth" as const,
        "input_dataset": input_dataset,
        "lin_filter": lin_filter,
        "med_filter": med_filter,
        "osf_filter": osf_filter,
        "extend": extend,
        "zero": zero,
        "trend": trend,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum_type !== null) {
        params["datum_type"] = datum_type;
    }
    if (lin_filter_custom !== null) {
        params["lin_filter_custom"] = lin_filter_custom;
    }
    if (hamming !== null) {
        params["hamming"] = hamming;
    }
    if (blackman !== null) {
        params["blackman"] = blackman;
    }
    if (custom_filter !== null) {
        params["custom_filter"] = custom_filter;
    }
    if (adaptive !== null) {
        params["adaptive"] = adaptive;
    }
    return params;
}


function v_3d_tsmooth_cargs(
    params: V3dTsmoothParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dTsmooth");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["datum_type"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum_type"] ?? null)
        );
    }
    if ((params["lin_filter"] ?? null)) {
        cargs.push("-lin");
    }
    if ((params["med_filter"] ?? null)) {
        cargs.push("-med");
    }
    if ((params["osf_filter"] ?? null)) {
        cargs.push("-osf");
    }
    if ((params["lin_filter_custom"] ?? null) !== null) {
        cargs.push(
            "-3lin",
            String((params["lin_filter_custom"] ?? null))
        );
    }
    if ((params["hamming"] ?? null) !== null) {
        cargs.push(
            "-hamming",
            String((params["hamming"] ?? null))
        );
    }
    if ((params["blackman"] ?? null) !== null) {
        cargs.push(
            "-blackman",
            String((params["blackman"] ?? null))
        );
    }
    if ((params["custom_filter"] ?? null) !== null) {
        cargs.push(
            "-custom",
            execution.inputFile((params["custom_filter"] ?? null))
        );
    }
    if ((params["extend"] ?? null)) {
        cargs.push("-EXTEND");
    }
    if ((params["zero"] ?? null)) {
        cargs.push("-ZERO");
    }
    if ((params["trend"] ?? null)) {
        cargs.push("-TREND");
    }
    if ((params["adaptive"] ?? null) !== null) {
        cargs.push(
            "-adaptive",
            String((params["adaptive"] ?? null))
        );
    }
    return cargs;
}


function v_3d_tsmooth_outputs(
    params: V3dTsmoothParameters,
    execution: Execution,
): V3dTsmoothOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dTsmoothOutputs = {
        root: execution.outputFile("."),
        output_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function v_3d_tsmooth_execute(
    params: V3dTsmoothParameters,
    execution: Execution,
): V3dTsmoothOutputs {
    /**
     * Smooths each voxel time series in a 3D+time dataset and produces as output a new 3D+time dataset (e.g., lowpass filter in time).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dTsmoothOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_tsmooth_cargs(params, execution)
    const ret = v_3d_tsmooth_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_tsmooth(
    input_dataset: InputPathType,
    prefix: string | null = null,
    datum_type: string | null = null,
    lin_filter: boolean = false,
    med_filter: boolean = false,
    osf_filter: boolean = false,
    lin_filter_custom: number | null = null,
    hamming: number | null = null,
    blackman: number | null = null,
    custom_filter: InputPathType | null = null,
    extend: boolean = false,
    zero: boolean = false,
    trend: boolean = false,
    adaptive: number | null = null,
    runner: Runner | null = null,
): V3dTsmoothOutputs {
    /**
     * Smooths each voxel time series in a 3D+time dataset and produces as output a new 3D+time dataset (e.g., lowpass filter in time).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset The input 3D+time dataset.
     * @param prefix Sets the prefix of the output dataset.
     * @param datum_type Coerce output dataset to be stored as the given type.
     * @param lin_filter 3 point linear filter: 0.15*a + 0.70*b + 0.15*c
     * @param med_filter 3 point median filter: median(a,b,c)
     * @param osf_filter 3 point order statistics filter: 0.15*min(a,b,c) + 0.70*median(a,b,c) + 0.15*max(a,b,c)
     * @param lin_filter_custom 3 point linear filter with custom weight: 0.5*(1-m)*a + m*b + 0.5*(1-m)*c
     * @param hamming Use N point Hamming window filter.
     * @param blackman Use N point Blackman window filter.
     * @param custom_filter Use custom filter with coefficients from a specified file.
     * @param extend BEFORE: use the first value; AFTER: use the last value.
     * @param zero BEFORE and AFTER: use zero.
     * @param trend Compute a linear trend, and extrapolate BEFORE and AFTER.
     * @param adaptive Use adaptive mean filtering of width N (N must be odd and bigger than 3).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dTsmoothOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TSMOOTH_METADATA);
    const params = v_3d_tsmooth_params(input_dataset, prefix, datum_type, lin_filter, med_filter, osf_filter, lin_filter_custom, hamming, blackman, custom_filter, extend, zero, trend, adaptive)
    return v_3d_tsmooth_execute(params, execution);
}


export {
      V3dTsmoothOutputs,
      V3dTsmoothParameters,
      V_3D_TSMOOTH_METADATA,
      v_3d_tsmooth,
      v_3d_tsmooth_params,
};
