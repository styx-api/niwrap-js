// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_APPLY_WARPFIELD_METADATA: Metadata = {
    id: "6a441ba1d393e5ce7c0331880f44291c415f3d62.boutiques",
    name: "surface-apply-warpfield",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceApplyWarpfieldParameters {
    "@type": "workbench.surface-apply-warpfield";
    "in_surf": InputPathType;
    "warpfield": string;
    "out_surf": string;
    "opt_fnirt_forward_warp"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-apply-warpfield": surface_apply_warpfield_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-apply-warpfield": surface_apply_warpfield_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_apply_warpfield(...)`.
 *
 * @interface
 */
interface SurfaceApplyWarpfieldOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output transformed surface
     */
    out_surf: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_surf the surface to transform
 * @param warpfield the INVERSE warpfield
 * @param out_surf the output transformed surface
 * @param opt_fnirt_forward_warp MUST be used if using a fnirt warpfield: the forward warpfield
 *
 * @returns Parameter dictionary
 */
function surface_apply_warpfield_params(
    in_surf: InputPathType,
    warpfield: string,
    out_surf: string,
    opt_fnirt_forward_warp: string | null = null,
): SurfaceApplyWarpfieldParameters {
    const params = {
        "@type": "workbench.surface-apply-warpfield" as const,
        "in_surf": in_surf,
        "warpfield": warpfield,
        "out_surf": out_surf,
    };
    if (opt_fnirt_forward_warp !== null) {
        params["opt_fnirt_forward_warp"] = opt_fnirt_forward_warp;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_apply_warpfield_cargs(
    params: SurfaceApplyWarpfieldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-apply-warpfield");
    cargs.push(execution.inputFile((params["in_surf"] ?? null)));
    cargs.push((params["warpfield"] ?? null));
    cargs.push((params["out_surf"] ?? null));
    if ((params["opt_fnirt_forward_warp"] ?? null) !== null) {
        cargs.push(
            "-fnirt",
            (params["opt_fnirt_forward_warp"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_apply_warpfield_outputs(
    params: SurfaceApplyWarpfieldParameters,
    execution: Execution,
): SurfaceApplyWarpfieldOutputs {
    const ret: SurfaceApplyWarpfieldOutputs = {
        root: execution.outputFile("."),
        out_surf: execution.outputFile([(params["out_surf"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-apply-warpfield
 *
 * Apply warpfield to surface file.
 *
 * NOTE: warping a surface requires the INVERSE of the warpfield used to warp the volume it lines up with.  The header of the forward warp is needed by the -fnirt option in order to correctly interpret the displacements in the fnirt warpfield.
 *
 * If the -fnirt option is not present, the warpfield must be a nifti 'world' warpfield, which can be obtained with the -convert-warpfield command.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceApplyWarpfieldOutputs`).
 */
function surface_apply_warpfield_execute(
    params: SurfaceApplyWarpfieldParameters,
    runner: Runner | null = null,
): SurfaceApplyWarpfieldOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_APPLY_WARPFIELD_METADATA);
    params = execution.params(params)
    const cargs = surface_apply_warpfield_cargs(params, execution)
    const ret = surface_apply_warpfield_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-apply-warpfield
 *
 * Apply warpfield to surface file.
 *
 * NOTE: warping a surface requires the INVERSE of the warpfield used to warp the volume it lines up with.  The header of the forward warp is needed by the -fnirt option in order to correctly interpret the displacements in the fnirt warpfield.
 *
 * If the -fnirt option is not present, the warpfield must be a nifti 'world' warpfield, which can be obtained with the -convert-warpfield command.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param in_surf the surface to transform
 * @param warpfield the INVERSE warpfield
 * @param out_surf the output transformed surface
 * @param opt_fnirt_forward_warp MUST be used if using a fnirt warpfield: the forward warpfield
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceApplyWarpfieldOutputs`).
 */
function surface_apply_warpfield(
    in_surf: InputPathType,
    warpfield: string,
    out_surf: string,
    opt_fnirt_forward_warp: string | null = null,
    runner: Runner | null = null,
): SurfaceApplyWarpfieldOutputs {
    const params = surface_apply_warpfield_params(in_surf, warpfield, out_surf, opt_fnirt_forward_warp)
    return surface_apply_warpfield_execute(params, runner);
}


export {
      SURFACE_APPLY_WARPFIELD_METADATA,
      SurfaceApplyWarpfieldOutputs,
      SurfaceApplyWarpfieldParameters,
      surface_apply_warpfield,
      surface_apply_warpfield_execute,
      surface_apply_warpfield_params,
};
