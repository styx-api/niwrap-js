// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_INFO_METADATA: Metadata = {
    id: "fea16b2c0cef821a4d6928c8ea143c9f2909ad1b.boutiques",
    name: "mri_info",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriInfoParameters {
    "__STYXTYPE__": "mri_info";
    "input1": InputPathType;
    "input2"?: InputPathType | null | undefined;
    "conformed": boolean;
    "conformed_to_min": boolean;
    "is_1mm_iso": boolean;
    "type": boolean;
    "tr": boolean;
    "te": boolean;
    "ti": boolean;
    "fa": boolean;
    "pedir": boolean;
    "res": boolean;
    "cres": boolean;
    "rres": boolean;
    "sres": boolean;
    "voxvol": boolean;
    "voxvolsum": boolean;
    "ncols": boolean;
    "nrows": boolean;
    "nslices": boolean;
    "dim": boolean;
    "cdc": boolean;
    "rdc": boolean;
    "sdc": boolean;
    "vox2ras": boolean;
    "ras2vox": boolean;
    "vox2ras_tkr": boolean;
    "ras2vox_tkr": boolean;
    "vox2ras_fsl": boolean;
    "tkr2scanner": boolean;
    "scanner2tkr": boolean;
    "ras_good": boolean;
    "cras": boolean;
    "center": boolean;
    "zero_cras": boolean;
    "p0": boolean;
    "det": boolean;
    "dof": boolean;
    "nframes": boolean;
    "mid_frame": boolean;
    "format": boolean;
    "orientation": boolean;
    "slicedirection": boolean;
    "autoalign": boolean;
    "ctab": boolean;
    "cmds": boolean;
    "dump": boolean;
    "voxel_crs"?: Array<string> | null | undefined;
    "entropy": boolean;
    "output_file"?: InputPathType | null | undefined;
    "orig_ras2vox": boolean;
    "in_type"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_info": mri_info_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_info(...)`.
 *
 * @interface
 */
interface MriInfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mri_info_params(
    input1: InputPathType,
    input2: InputPathType | null = null,
    conformed: boolean = false,
    conformed_to_min: boolean = false,
    is_1mm_iso: boolean = false,
    type_: boolean = false,
    tr: boolean = false,
    te: boolean = false,
    ti: boolean = false,
    fa: boolean = false,
    pedir: boolean = false,
    res: boolean = false,
    cres: boolean = false,
    rres: boolean = false,
    sres: boolean = false,
    voxvol: boolean = false,
    voxvolsum: boolean = false,
    ncols: boolean = false,
    nrows: boolean = false,
    nslices: boolean = false,
    dim: boolean = false,
    cdc: boolean = false,
    rdc: boolean = false,
    sdc: boolean = false,
    vox2ras: boolean = false,
    ras2vox: boolean = false,
    vox2ras_tkr: boolean = false,
    ras2vox_tkr: boolean = false,
    vox2ras_fsl: boolean = false,
    tkr2scanner: boolean = false,
    scanner2tkr: boolean = false,
    ras_good: boolean = false,
    cras: boolean = false,
    center: boolean = false,
    zero_cras: boolean = false,
    p0: boolean = false,
    det: boolean = false,
    dof: boolean = false,
    nframes: boolean = false,
    mid_frame: boolean = false,
    format: boolean = false,
    orientation: boolean = false,
    slicedirection: boolean = false,
    autoalign: boolean = false,
    ctab: boolean = false,
    cmds: boolean = false,
    dump: boolean = false,
    voxel_crs: Array<string> | null = null,
    entropy: boolean = false,
    output_file: InputPathType | null = null,
    orig_ras2vox: boolean = false,
    in_type: string | null = null,
): MriInfoParameters {
    /**
     * Build parameters.
    
     * @param input1 Primary input file
     * @param input2 Secondary input file (optional)
     * @param conformed Print whether a volume is conformed
     * @param conformed_to_min Print whether a volume is conformed-to-min
     * @param is_1mm_iso Print whether the voxel size is 1mm isotropic
     * @param type_ Print the voxel type/precision
     * @param tr Print TR
     * @param te Print TE
     * @param ti Print TI
     * @param fa Print flip angle
     * @param pedir Print phase encode direction
     * @param res Print column, row, slice, and frame resolution
     * @param cres Print column voxel size
     * @param rres Print row voxel size
     * @param sres Print slice voxel size
     * @param voxvol Print voxel volume
     * @param voxvolsum Compute sum of all voxels times the voxel volume
     * @param ncols Print number of columns
     * @param nrows Print number of rows
     * @param nslices Print number of slices
     * @param dim Print number of columns, rows, slices, and frames
     * @param cdc Print column direction cosine (x_{r,a,s})
     * @param rdc Print row direction cosine (y_{r,a,s})
     * @param sdc Print slice direction cosine (z_{r,a,s})
     * @param vox2ras Print the native/qform vox2ras matrix
     * @param ras2vox Print the native/qform ras2vox matrix
     * @param vox2ras_tkr Print the tkregister vox2ras matrix
     * @param ras2vox_tkr Print the tkregister ras2vox matrix
     * @param vox2ras_fsl Print the FSL/FLIRT vox2ras matrix
     * @param tkr2scanner Print tkrRAS-to-scannerRAS matrix
     * @param scanner2tkr Print scannerRAS-to-tkrRAS matrix
     * @param ras_good Print the ras_good_flag
     * @param cras Print the RAS near the center of the volume
     * @param center Print the RAS at the actual center of the volume
     * @param zero_cras Zero the center ras
     * @param p0 Print the RAS at voxel (0,0,0)
     * @param det Print the determinant of the vox2ras matrix
     * @param dof Print the degrees of freedom stored in the header
     * @param nframes Print the number of frames
     * @param mid_frame Print the middle frame
     * @param format Print file format
     * @param orientation Print orientation string (e.g., LPS, RAS, RPI)
     * @param slicedirection Print primary slice direction (e.g., axial)
     * @param autoalign Print auto align matrix (if it exists)
     * @param ctab Print embedded color lookup table
     * @param cmds Print command-line provenance info
     * @param dump Print FA, TR, TE, TI, etc
     * @param voxel_crs Dump voxel value from column, row, slice (0-based, all frames)
     * @param entropy Compute and print entropy
     * @param output_file Print flagged results to file
     * @param orig_ras2vox Print orig Ras2Vox matrix if present
     * @param in_type Explicitly specify file type
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_info" as const,
        "input1": input1,
        "conformed": conformed,
        "conformed_to_min": conformed_to_min,
        "is_1mm_iso": is_1mm_iso,
        "type": type_,
        "tr": tr,
        "te": te,
        "ti": ti,
        "fa": fa,
        "pedir": pedir,
        "res": res,
        "cres": cres,
        "rres": rres,
        "sres": sres,
        "voxvol": voxvol,
        "voxvolsum": voxvolsum,
        "ncols": ncols,
        "nrows": nrows,
        "nslices": nslices,
        "dim": dim,
        "cdc": cdc,
        "rdc": rdc,
        "sdc": sdc,
        "vox2ras": vox2ras,
        "ras2vox": ras2vox,
        "vox2ras_tkr": vox2ras_tkr,
        "ras2vox_tkr": ras2vox_tkr,
        "vox2ras_fsl": vox2ras_fsl,
        "tkr2scanner": tkr2scanner,
        "scanner2tkr": scanner2tkr,
        "ras_good": ras_good,
        "cras": cras,
        "center": center,
        "zero_cras": zero_cras,
        "p0": p0,
        "det": det,
        "dof": dof,
        "nframes": nframes,
        "mid_frame": mid_frame,
        "format": format,
        "orientation": orientation,
        "slicedirection": slicedirection,
        "autoalign": autoalign,
        "ctab": ctab,
        "cmds": cmds,
        "dump": dump,
        "entropy": entropy,
        "orig_ras2vox": orig_ras2vox,
    };
    if (input2 !== null) {
        params["input2"] = input2;
    }
    if (voxel_crs !== null) {
        params["voxel_crs"] = voxel_crs;
    }
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    if (in_type !== null) {
        params["in_type"] = in_type;
    }
    return params;
}


function mri_info_cargs(
    params: MriInfoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_info");
    cargs.push(execution.inputFile((params["input1"] ?? null)));
    if ((params["input2"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["input2"] ?? null)));
    }
    if ((params["conformed"] ?? null)) {
        cargs.push("--conformed");
    }
    if ((params["conformed_to_min"] ?? null)) {
        cargs.push("--conformed-to-min");
    }
    if ((params["is_1mm_iso"] ?? null)) {
        cargs.push("--is-1mm-iso");
    }
    if ((params["type"] ?? null)) {
        cargs.push("--type");
    }
    if ((params["tr"] ?? null)) {
        cargs.push("--tr");
    }
    if ((params["te"] ?? null)) {
        cargs.push("--te");
    }
    if ((params["ti"] ?? null)) {
        cargs.push("--ti");
    }
    if ((params["fa"] ?? null)) {
        cargs.push("--fa");
    }
    if ((params["pedir"] ?? null)) {
        cargs.push("--pedir");
    }
    if ((params["res"] ?? null)) {
        cargs.push("--res");
    }
    if ((params["cres"] ?? null)) {
        cargs.push("--cres");
    }
    if ((params["rres"] ?? null)) {
        cargs.push("--rres");
    }
    if ((params["sres"] ?? null)) {
        cargs.push("--sres");
    }
    if ((params["voxvol"] ?? null)) {
        cargs.push("--voxvol");
    }
    if ((params["voxvolsum"] ?? null)) {
        cargs.push("--voxvolsum");
    }
    if ((params["ncols"] ?? null)) {
        cargs.push("--ncols");
    }
    if ((params["nrows"] ?? null)) {
        cargs.push("--nrows");
    }
    if ((params["nslices"] ?? null)) {
        cargs.push("--nslices");
    }
    if ((params["dim"] ?? null)) {
        cargs.push("--dim");
    }
    if ((params["cdc"] ?? null)) {
        cargs.push("--cdc");
    }
    if ((params["rdc"] ?? null)) {
        cargs.push("--rdc");
    }
    if ((params["sdc"] ?? null)) {
        cargs.push("--sdc");
    }
    if ((params["vox2ras"] ?? null)) {
        cargs.push("--vox2ras");
    }
    if ((params["ras2vox"] ?? null)) {
        cargs.push("--ras2vox");
    }
    if ((params["vox2ras_tkr"] ?? null)) {
        cargs.push("--vox2ras-tkr");
    }
    if ((params["ras2vox_tkr"] ?? null)) {
        cargs.push("--ras2vox-tkr");
    }
    if ((params["vox2ras_fsl"] ?? null)) {
        cargs.push("--vox2ras-fsl");
    }
    if ((params["tkr2scanner"] ?? null)) {
        cargs.push("--tkr2scanner");
    }
    if ((params["scanner2tkr"] ?? null)) {
        cargs.push("--scanner2tkr");
    }
    if ((params["ras_good"] ?? null)) {
        cargs.push("--ras_good");
    }
    if ((params["cras"] ?? null)) {
        cargs.push("--cras");
    }
    if ((params["center"] ?? null)) {
        cargs.push("--center");
    }
    if ((params["zero_cras"] ?? null)) {
        cargs.push("--zero-cras");
    }
    if ((params["p0"] ?? null)) {
        cargs.push("--p0");
    }
    if ((params["det"] ?? null)) {
        cargs.push("--det");
    }
    if ((params["dof"] ?? null)) {
        cargs.push("--dof");
    }
    if ((params["nframes"] ?? null)) {
        cargs.push("--nframes");
    }
    if ((params["mid_frame"] ?? null)) {
        cargs.push("--mid-frame");
    }
    if ((params["format"] ?? null)) {
        cargs.push("--format");
    }
    if ((params["orientation"] ?? null)) {
        cargs.push("--orientation");
    }
    if ((params["slicedirection"] ?? null)) {
        cargs.push("--slicedirection");
    }
    if ((params["autoalign"] ?? null)) {
        cargs.push("--autoalign");
    }
    if ((params["ctab"] ?? null)) {
        cargs.push("--ctab");
    }
    if ((params["cmds"] ?? null)) {
        cargs.push("--cmds");
    }
    if ((params["dump"] ?? null)) {
        cargs.push("--dump");
    }
    if ((params["voxel_crs"] ?? null) !== null) {
        cargs.push(
            "--voxel",
            ...(params["voxel_crs"] ?? null)
        );
    }
    if ((params["entropy"] ?? null)) {
        cargs.push("--entropy");
    }
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "--o",
            execution.inputFile((params["output_file"] ?? null))
        );
    }
    if ((params["orig_ras2vox"] ?? null)) {
        cargs.push("--orig_ras2vox");
    }
    if ((params["in_type"] ?? null) !== null) {
        cargs.push(
            "--in_type",
            (params["in_type"] ?? null)
        );
    }
    return cargs;
}


function mri_info_outputs(
    params: MriInfoParameters,
    execution: Execution,
): MriInfoOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriInfoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mri_info_execute(
    params: MriInfoParameters,
    execution: Execution,
): MriInfoOutputs {
    /**
     * Tool to extract metadata from MRI volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriInfoOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_info_cargs(params, execution)
    const ret = mri_info_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_info(
    input1: InputPathType,
    input2: InputPathType | null = null,
    conformed: boolean = false,
    conformed_to_min: boolean = false,
    is_1mm_iso: boolean = false,
    type_: boolean = false,
    tr: boolean = false,
    te: boolean = false,
    ti: boolean = false,
    fa: boolean = false,
    pedir: boolean = false,
    res: boolean = false,
    cres: boolean = false,
    rres: boolean = false,
    sres: boolean = false,
    voxvol: boolean = false,
    voxvolsum: boolean = false,
    ncols: boolean = false,
    nrows: boolean = false,
    nslices: boolean = false,
    dim: boolean = false,
    cdc: boolean = false,
    rdc: boolean = false,
    sdc: boolean = false,
    vox2ras: boolean = false,
    ras2vox: boolean = false,
    vox2ras_tkr: boolean = false,
    ras2vox_tkr: boolean = false,
    vox2ras_fsl: boolean = false,
    tkr2scanner: boolean = false,
    scanner2tkr: boolean = false,
    ras_good: boolean = false,
    cras: boolean = false,
    center: boolean = false,
    zero_cras: boolean = false,
    p0: boolean = false,
    det: boolean = false,
    dof: boolean = false,
    nframes: boolean = false,
    mid_frame: boolean = false,
    format: boolean = false,
    orientation: boolean = false,
    slicedirection: boolean = false,
    autoalign: boolean = false,
    ctab: boolean = false,
    cmds: boolean = false,
    dump: boolean = false,
    voxel_crs: Array<string> | null = null,
    entropy: boolean = false,
    output_file: InputPathType | null = null,
    orig_ras2vox: boolean = false,
    in_type: string | null = null,
    runner: Runner | null = null,
): MriInfoOutputs {
    /**
     * Tool to extract metadata from MRI volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input1 Primary input file
     * @param input2 Secondary input file (optional)
     * @param conformed Print whether a volume is conformed
     * @param conformed_to_min Print whether a volume is conformed-to-min
     * @param is_1mm_iso Print whether the voxel size is 1mm isotropic
     * @param type_ Print the voxel type/precision
     * @param tr Print TR
     * @param te Print TE
     * @param ti Print TI
     * @param fa Print flip angle
     * @param pedir Print phase encode direction
     * @param res Print column, row, slice, and frame resolution
     * @param cres Print column voxel size
     * @param rres Print row voxel size
     * @param sres Print slice voxel size
     * @param voxvol Print voxel volume
     * @param voxvolsum Compute sum of all voxels times the voxel volume
     * @param ncols Print number of columns
     * @param nrows Print number of rows
     * @param nslices Print number of slices
     * @param dim Print number of columns, rows, slices, and frames
     * @param cdc Print column direction cosine (x_{r,a,s})
     * @param rdc Print row direction cosine (y_{r,a,s})
     * @param sdc Print slice direction cosine (z_{r,a,s})
     * @param vox2ras Print the native/qform vox2ras matrix
     * @param ras2vox Print the native/qform ras2vox matrix
     * @param vox2ras_tkr Print the tkregister vox2ras matrix
     * @param ras2vox_tkr Print the tkregister ras2vox matrix
     * @param vox2ras_fsl Print the FSL/FLIRT vox2ras matrix
     * @param tkr2scanner Print tkrRAS-to-scannerRAS matrix
     * @param scanner2tkr Print scannerRAS-to-tkrRAS matrix
     * @param ras_good Print the ras_good_flag
     * @param cras Print the RAS near the center of the volume
     * @param center Print the RAS at the actual center of the volume
     * @param zero_cras Zero the center ras
     * @param p0 Print the RAS at voxel (0,0,0)
     * @param det Print the determinant of the vox2ras matrix
     * @param dof Print the degrees of freedom stored in the header
     * @param nframes Print the number of frames
     * @param mid_frame Print the middle frame
     * @param format Print file format
     * @param orientation Print orientation string (e.g., LPS, RAS, RPI)
     * @param slicedirection Print primary slice direction (e.g., axial)
     * @param autoalign Print auto align matrix (if it exists)
     * @param ctab Print embedded color lookup table
     * @param cmds Print command-line provenance info
     * @param dump Print FA, TR, TE, TI, etc
     * @param voxel_crs Dump voxel value from column, row, slice (0-based, all frames)
     * @param entropy Compute and print entropy
     * @param output_file Print flagged results to file
     * @param orig_ras2vox Print orig Ras2Vox matrix if present
     * @param in_type Explicitly specify file type
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriInfoOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_INFO_METADATA);
    const params = mri_info_params(input1, input2, conformed, conformed_to_min, is_1mm_iso, type_, tr, te, ti, fa, pedir, res, cres, rres, sres, voxvol, voxvolsum, ncols, nrows, nslices, dim, cdc, rdc, sdc, vox2ras, ras2vox, vox2ras_tkr, ras2vox_tkr, vox2ras_fsl, tkr2scanner, scanner2tkr, ras_good, cras, center, zero_cras, p0, det, dof, nframes, mid_frame, format, orientation, slicedirection, autoalign, ctab, cmds, dump, voxel_crs, entropy, output_file, orig_ras2vox, in_type)
    return mri_info_execute(params, execution);
}


export {
      MRI_INFO_METADATA,
      MriInfoOutputs,
      MriInfoParameters,
      mri_info,
      mri_info_params,
};
