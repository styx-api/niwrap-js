// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__COMMAND_GLOBB_METADATA: Metadata = {
    id: "19059f03ec1fbfb49f8e3392d02a5af22e17fec6.boutiques",
    name: "@CommandGlobb",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VCommandGlobbParameters {
    "@type": "afni.@CommandGlobb";
    "program_command": string;
    "output_dir": string;
    "extension"?: string | null | undefined;
    "brick_list": Array<string>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@CommandGlobb": v__command_globb_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__command_globb(...)`.
 *
 * @interface
 */
interface VCommandGlobbOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param program_command The entire command line for the program desired. The command is best put between single quotes, do not use the \ to break a long line within the quotes.
 * @param output_dir The output directory where the results will be saved.
 * @param brick_list A list of bricks (or anything) on which the program command will be executed.
 * @param extension If the program requires a -prefix option, then you can specify the extension which will get appended to the Brick names before +orig.
 *
 * @returns Parameter dictionary
 */
function v__command_globb_params(
    program_command: string,
    output_dir: string,
    brick_list: Array<string>,
    extension: string | null = null,
): VCommandGlobbParameters {
    const params = {
        "@type": "afni.@CommandGlobb" as const,
        "program_command": program_command,
        "output_dir": output_dir,
        "brick_list": brick_list,
    };
    if (extension !== null) {
        params["extension"] = extension;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__command_globb_cargs(
    params: VCommandGlobbParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@CommandGlobb");
    cargs.push(
        "-com",
        (params["program_command"] ?? null)
    );
    cargs.push(
        "-session",
        (params["output_dir"] ?? null)
    );
    if ((params["extension"] ?? null) !== null) {
        cargs.push(
            "-newext",
            (params["extension"] ?? null)
        );
    }
    cargs.push(
        "-list",
        ...(params["brick_list"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__command_globb_outputs(
    params: VCommandGlobbParameters,
    execution: Execution,
): VCommandGlobbOutputs {
    const ret: VCommandGlobbOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * @CommandGlobb
 *
 * A command-line tool to execute a specified program command line on a list of input bricks.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VCommandGlobbOutputs`).
 */
function v__command_globb_execute(
    params: VCommandGlobbParameters,
    runner: Runner | null = null,
): VCommandGlobbOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__COMMAND_GLOBB_METADATA);
    params = execution.params(params)
    const cargs = v__command_globb_cargs(params, execution)
    const ret = v__command_globb_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @CommandGlobb
 *
 * A command-line tool to execute a specified program command line on a list of input bricks.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param program_command The entire command line for the program desired. The command is best put between single quotes, do not use the \ to break a long line within the quotes.
 * @param output_dir The output directory where the results will be saved.
 * @param brick_list A list of bricks (or anything) on which the program command will be executed.
 * @param extension If the program requires a -prefix option, then you can specify the extension which will get appended to the Brick names before +orig.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VCommandGlobbOutputs`).
 */
function v__command_globb(
    program_command: string,
    output_dir: string,
    brick_list: Array<string>,
    extension: string | null = null,
    runner: Runner | null = null,
): VCommandGlobbOutputs {
    const params = v__command_globb_params(program_command, output_dir, brick_list, extension)
    return v__command_globb_execute(params, runner);
}


export {
      VCommandGlobbOutputs,
      VCommandGlobbParameters,
      V__COMMAND_GLOBB_METADATA,
      v__command_globb,
      v__command_globb_execute,
      v__command_globb_params,
};
