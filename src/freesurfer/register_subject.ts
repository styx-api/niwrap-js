// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REGISTER_SUBJECT_METADATA: Metadata = {
    id: "ee519dc7bfe305be35a0097fb38c1521d139695c.boutiques",
    name: "register_subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RegisterSubjectParameters {
    "@type"?: "freesurfer/register_subject";
    "input_volume"?: InputPathType | null | undefined;
    "mask_volume"?: InputPathType | null | undefined;
    "control_points"?: string | null | undefined;
    "output_directory"?: string | null | undefined;
    "log_file"?: InputPathType | null | undefined;
    "gca_file"?: InputPathType | null | undefined;
}
type RegisterSubjectParametersTagged = Required<Pick<RegisterSubjectParameters, '@type'>> & RegisterSubjectParameters;


/**
 * Output object returned when calling `RegisterSubjectParameters(...)`.
 *
 * @interface
 */
interface RegisterSubjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Intensity normalized output volume.
     */
    normalized_output: OutputPathType | null;
    /**
     * Transformed control points.
     */
    transformed_fsamples: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume for registration (e.g., brain.mgz)
 * @param mask_volume MR volume used to mask input volume.
 * @param control_points Control points used for registration.
 * @param output_directory Directory to write output files (e.g., transformed fsamples).
 * @param log_file Log file for recording registration results.
 * @param gca_file GCA file required for registration.
 *
 * @returns Parameter dictionary
 */
function register_subject_params(
    input_volume: InputPathType | null = null,
    mask_volume: InputPathType | null = null,
    control_points: string | null = null,
    output_directory: string | null = null,
    log_file: InputPathType | null = null,
    gca_file: InputPathType | null = null,
): RegisterSubjectParametersTagged {
    const params = {
        "@type": "freesurfer/register_subject" as const,
    };
    if (input_volume !== null) {
        params["input_volume"] = input_volume;
    }
    if (mask_volume !== null) {
        params["mask_volume"] = mask_volume;
    }
    if (control_points !== null) {
        params["control_points"] = control_points;
    }
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (gca_file !== null) {
        params["gca_file"] = gca_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function register_subject_cargs(
    params: RegisterSubjectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("register_subject");
    if ((params["input_volume"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    }
    if ((params["mask_volume"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask_volume"] ?? null)));
    }
    if ((params["control_points"] ?? null) !== null) {
        cargs.push((params["control_points"] ?? null));
    }
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push((params["output_directory"] ?? null));
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["log_file"] ?? null)));
    }
    if ((params["gca_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["gca_file"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function register_subject_outputs(
    params: RegisterSubjectParameters,
    execution: Execution,
): RegisterSubjectOutputs {
    const ret: RegisterSubjectOutputs = {
        root: execution.outputFile("."),
        normalized_output: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/norm.mgz"].join('')) : null,
        transformed_fsamples: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null), "/fsamples"].join('')) : null,
    };
    return ret;
}


/**
 * register_subject
 *
 * Tool for registering brain MR volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterSubjectOutputs`).
 */
function register_subject_execute(
    params: RegisterSubjectParameters,
    runner: Runner | null = null,
): RegisterSubjectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REGISTER_SUBJECT_METADATA);
    params = execution.params(params)
    const cargs = register_subject_cargs(params, execution)
    const ret = register_subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * register_subject
 *
 * Tool for registering brain MR volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume for registration (e.g., brain.mgz)
 * @param mask_volume MR volume used to mask input volume.
 * @param control_points Control points used for registration.
 * @param output_directory Directory to write output files (e.g., transformed fsamples).
 * @param log_file Log file for recording registration results.
 * @param gca_file GCA file required for registration.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterSubjectOutputs`).
 */
function register_subject(
    input_volume: InputPathType | null = null,
    mask_volume: InputPathType | null = null,
    control_points: string | null = null,
    output_directory: string | null = null,
    log_file: InputPathType | null = null,
    gca_file: InputPathType | null = null,
    runner: Runner | null = null,
): RegisterSubjectOutputs {
    const params = register_subject_params(input_volume, mask_volume, control_points, output_directory, log_file, gca_file)
    return register_subject_execute(params, runner);
}


export {
      REGISTER_SUBJECT_METADATA,
      RegisterSubjectOutputs,
      register_subject,
      register_subject_execute,
      register_subject_params,
};
