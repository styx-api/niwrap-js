// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DAXIALIZE_METADATA: Metadata = {
    id: "a6d7c2a7a9db46fb00a81d8e8f737c33f01dcc59.boutiques",
    name: "3daxialize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3daxializeParameters {
    "@type": "afni.3daxialize";
    "infile": InputPathType;
    "prefix"?: string | null | undefined;
    "verb": boolean;
    "sagittal": boolean;
    "coronal": boolean;
    "axial": boolean;
    "orient_code"?: string | null | undefined;
    "frugal": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3daxialize": v_3daxialize_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3daxialize": v_3daxialize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3daxialize(...)`.
 *
 * @interface
 */
interface V3daxializeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset with axial slices orientation
     */
    outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infile Dataset to be axially oriented
 * @param prefix Use specified prefix for the new dataset. Default is 'axialize'.
 * @param verb Print out a progress report.
 * @param sagittal Write dataset in sagittal slice order.
 * @param coronal Write dataset in coronal slice order.
 * @param axial Write dataset in axial slice order, the default orientation.
 * @param orient_code Orientation code for output. 3 letters: one from {R,L}, {A,P}, {I,S}.
 * @param frugal Write data as it is rotated, saving memory. Not available with NIFTI datasets.
 *
 * @returns Parameter dictionary
 */
function v_3daxialize_params(
    infile: InputPathType,
    prefix: string | null = null,
    verb: boolean = false,
    sagittal: boolean = false,
    coronal: boolean = false,
    axial: boolean = false,
    orient_code: string | null = null,
    frugal: boolean = false,
): V3daxializeParameters {
    const params = {
        "@type": "afni.3daxialize" as const,
        "infile": infile,
        "verb": verb,
        "sagittal": sagittal,
        "coronal": coronal,
        "axial": axial,
        "frugal": frugal,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (orient_code !== null) {
        params["orient_code"] = orient_code;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3daxialize_cargs(
    params: V3daxializeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3daxialize");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verb"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["sagittal"] ?? null)) {
        cargs.push("-sagittal");
    }
    if ((params["coronal"] ?? null)) {
        cargs.push("-coronal");
    }
    if ((params["axial"] ?? null)) {
        cargs.push("-axial");
    }
    if ((params["orient_code"] ?? null) !== null) {
        cargs.push(
            "-orient",
            (params["orient_code"] ?? null)
        );
    }
    if ((params["frugal"] ?? null)) {
        cargs.push("-frugal");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3daxialize_outputs(
    params: V3daxializeParameters,
    execution: Execution,
): V3daxializeOutputs {
    const ret: V3daxializeOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig"].join('')) : null,
    };
    return ret;
}


/**
 * 3daxialize
 *
 * Read and write dataset as new dataset with data brick oriented as axial slices.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3daxializeOutputs`).
 */
function v_3daxialize_execute(
    params: V3daxializeParameters,
    runner: Runner | null = null,
): V3daxializeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DAXIALIZE_METADATA);
    params = execution.params(params)
    const cargs = v_3daxialize_cargs(params, execution)
    const ret = v_3daxialize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3daxialize
 *
 * Read and write dataset as new dataset with data brick oriented as axial slices.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Dataset to be axially oriented
 * @param prefix Use specified prefix for the new dataset. Default is 'axialize'.
 * @param verb Print out a progress report.
 * @param sagittal Write dataset in sagittal slice order.
 * @param coronal Write dataset in coronal slice order.
 * @param axial Write dataset in axial slice order, the default orientation.
 * @param orient_code Orientation code for output. 3 letters: one from {R,L}, {A,P}, {I,S}.
 * @param frugal Write data as it is rotated, saving memory. Not available with NIFTI datasets.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3daxializeOutputs`).
 */
function v_3daxialize(
    infile: InputPathType,
    prefix: string | null = null,
    verb: boolean = false,
    sagittal: boolean = false,
    coronal: boolean = false,
    axial: boolean = false,
    orient_code: string | null = null,
    frugal: boolean = false,
    runner: Runner | null = null,
): V3daxializeOutputs {
    const params = v_3daxialize_params(infile, prefix, verb, sagittal, coronal, axial, orient_code, frugal)
    return v_3daxialize_execute(params, runner);
}


export {
      V3daxializeOutputs,
      V3daxializeParameters,
      V_3DAXIALIZE_METADATA,
      v_3daxialize,
      v_3daxialize_execute,
      v_3daxialize_params,
};
