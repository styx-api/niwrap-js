// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_HAUSDORFF_DIST_METADATA: Metadata = {
    id: "bdcef721bb6481f0dd0eb1df21b37c8534448bd6.boutiques",
    name: "mri_hausdorff_dist",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriHausdorffDistParameters {
    "@type": "freesurfer.mri_hausdorff_dist";
    "vol1": InputPathType;
    "vol2": InputPathType;
    "output_text_file": string;
    "threshold"?: number | null | undefined;
    "input_file_flag": boolean;
    "blur_sigma"?: number | null | undefined;
    "max_flag": boolean;
    "label_index"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_hausdorff_dist": mri_hausdorff_dist_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_hausdorff_dist": mri_hausdorff_dist_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_hausdorff_dist(...)`.
 *
 * @interface
 */
interface MriHausdorffDistOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file containing the results of Hausdorff distance calculation
     */
    output_text: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param vol1 First input volume
 * @param vol2 Second input volume
 * @param output_text_file Output text file
 * @param threshold Binarize input volumes with given threshold
 * @param input_file_flag Read volumes from an input file (first argument is the input filename)
 * @param blur_sigma Blur the input image with Gaussian of specified sigma
 * @param max_flag Compute the maximum of the minimum distances instead of the mean
 * @param label_index Use specified label index as the target label
 *
 * @returns Parameter dictionary
 */
function mri_hausdorff_dist_params(
    vol1: InputPathType,
    vol2: InputPathType,
    output_text_file: string,
    threshold: number | null = null,
    input_file_flag: boolean = false,
    blur_sigma: number | null = null,
    max_flag: boolean = false,
    label_index: number | null = null,
): MriHausdorffDistParameters {
    const params = {
        "@type": "freesurfer.mri_hausdorff_dist" as const,
        "vol1": vol1,
        "vol2": vol2,
        "output_text_file": output_text_file,
        "input_file_flag": input_file_flag,
        "max_flag": max_flag,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (blur_sigma !== null) {
        params["blur_sigma"] = blur_sigma;
    }
    if (label_index !== null) {
        params["label_index"] = label_index;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_hausdorff_dist_cargs(
    params: MriHausdorffDistParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_hausdorff_dist");
    cargs.push(execution.inputFile((params["vol1"] ?? null)));
    cargs.push(execution.inputFile((params["vol2"] ?? null)));
    cargs.push((params["output_text_file"] ?? null));
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["input_file_flag"] ?? null)) {
        cargs.push("-F");
    }
    if ((params["blur_sigma"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["blur_sigma"] ?? null))
        );
    }
    if ((params["max_flag"] ?? null)) {
        cargs.push("-max");
    }
    if ((params["label_index"] ?? null) !== null) {
        cargs.push(
            "-l",
            String((params["label_index"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_hausdorff_dist_outputs(
    params: MriHausdorffDistParameters,
    execution: Execution,
): MriHausdorffDistOutputs {
    const ret: MriHausdorffDistOutputs = {
        root: execution.outputFile("."),
        output_text: execution.outputFile([(params["output_text_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Tool for computing the mean or max of the minimum distances between point sets in 3D volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriHausdorffDistOutputs`).
 */
function mri_hausdorff_dist_execute(
    params: MriHausdorffDistParameters,
    execution: Execution,
): MriHausdorffDistOutputs {
    params = execution.params(params)
    const cargs = mri_hausdorff_dist_cargs(params, execution)
    const ret = mri_hausdorff_dist_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for computing the mean or max of the minimum distances between point sets in 3D volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param vol1 First input volume
 * @param vol2 Second input volume
 * @param output_text_file Output text file
 * @param threshold Binarize input volumes with given threshold
 * @param input_file_flag Read volumes from an input file (first argument is the input filename)
 * @param blur_sigma Blur the input image with Gaussian of specified sigma
 * @param max_flag Compute the maximum of the minimum distances instead of the mean
 * @param label_index Use specified label index as the target label
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriHausdorffDistOutputs`).
 */
function mri_hausdorff_dist(
    vol1: InputPathType,
    vol2: InputPathType,
    output_text_file: string,
    threshold: number | null = null,
    input_file_flag: boolean = false,
    blur_sigma: number | null = null,
    max_flag: boolean = false,
    label_index: number | null = null,
    runner: Runner | null = null,
): MriHausdorffDistOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_HAUSDORFF_DIST_METADATA);
    const params = mri_hausdorff_dist_params(vol1, vol2, output_text_file, threshold, input_file_flag, blur_sigma, max_flag, label_index)
    return mri_hausdorff_dist_execute(params, execution);
}


export {
      MRI_HAUSDORFF_DIST_METADATA,
      MriHausdorffDistOutputs,
      MriHausdorffDistParameters,
      mri_hausdorff_dist,
      mri_hausdorff_dist_cargs,
      mri_hausdorff_dist_execute,
      mri_hausdorff_dist_outputs,
      mri_hausdorff_dist_params,
};
