// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_PAINT_METADATA: Metadata = {
    id: "dec6a4dce4882cf1b15d956692f1b6e908fbc2be.boutiques",
    name: "mri_paint",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriPaintParameters {
    "@type": "freesurfer.mri_paint";
    "input_volume": InputPathType;
    "input_surface": InputPathType;
    "registration_file": InputPathType;
    "output_float_file": string;
    "image_offset"?: number | null | undefined;
    "paint_surf_coords": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_paint": mri_paint_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_paint": mri_paint_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_paint(...)`.
 *
 * @interface
 */
interface MriPaintOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output .float file resulting from the painting process
     */
    output_float: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume The input volume file
 * @param input_surface The input surface file
 * @param registration_file The registration file
 * @param output_float_file The output .float file
 * @param image_offset Set offset to use
 * @param paint_surf_coords Paint using surface coordinates
 *
 * @returns Parameter dictionary
 */
function mri_paint_params(
    input_volume: InputPathType,
    input_surface: InputPathType,
    registration_file: InputPathType,
    output_float_file: string,
    image_offset: number | null = null,
    paint_surf_coords: boolean = false,
): MriPaintParameters {
    const params = {
        "@type": "freesurfer.mri_paint" as const,
        "input_volume": input_volume,
        "input_surface": input_surface,
        "registration_file": registration_file,
        "output_float_file": output_float_file,
        "paint_surf_coords": paint_surf_coords,
    };
    if (image_offset !== null) {
        params["image_offset"] = image_offset;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_paint_cargs(
    params: MriPaintParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_paint");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["registration_file"] ?? null)));
    cargs.push((params["output_float_file"] ?? null));
    if ((params["image_offset"] ?? null) !== null) {
        cargs.push(
            "-imageoffset",
            String((params["image_offset"] ?? null))
        );
    }
    if ((params["paint_surf_coords"] ?? null)) {
        cargs.push("-S");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_paint_outputs(
    params: MriPaintParameters,
    execution: Execution,
): MriPaintOutputs {
    const ret: MriPaintOutputs = {
        root: execution.outputFile("."),
        output_float: execution.outputFile([(params["output_float_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_paint
 *
 * This program will paint average Talairach stats onto a surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPaintOutputs`).
 */
function mri_paint_execute(
    params: MriPaintParameters,
    runner: Runner | null = null,
): MriPaintOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_PAINT_METADATA);
    params = execution.params(params)
    const cargs = mri_paint_cargs(params, execution)
    const ret = mri_paint_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_paint
 *
 * This program will paint average Talairach stats onto a surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume The input volume file
 * @param input_surface The input surface file
 * @param registration_file The registration file
 * @param output_float_file The output .float file
 * @param image_offset Set offset to use
 * @param paint_surf_coords Paint using surface coordinates
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPaintOutputs`).
 */
function mri_paint(
    input_volume: InputPathType,
    input_surface: InputPathType,
    registration_file: InputPathType,
    output_float_file: string,
    image_offset: number | null = null,
    paint_surf_coords: boolean = false,
    runner: Runner | null = null,
): MriPaintOutputs {
    const params = mri_paint_params(input_volume, input_surface, registration_file, output_float_file, image_offset, paint_surf_coords)
    return mri_paint_execute(params, runner);
}


export {
      MRI_PAINT_METADATA,
      MriPaintOutputs,
      MriPaintParameters,
      mri_paint,
      mri_paint_execute,
      mri_paint_params,
};
