// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSL_TSPLOT_METADATA: Metadata = {
    id: "4faf84b9675a1e313f3f8cf1864b39e81af5cf94.boutiques",
    name: "fsl_tsplot",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslTsplotParameters {
    "@type": "fsl.fsl_tsplot";
    "input_files": string;
    "output_file": string;
    "title"?: string | null | undefined;
    "legend_file"?: string | null | undefined;
    "labels"?: string | null | undefined;
    "ymin"?: number | null | undefined;
    "ymax"?: number | null | undefined;
    "xlabel"?: string | null | undefined;
    "ylabel"?: string | null | undefined;
    "height"?: number | null | undefined;
    "width"?: number | null | undefined;
    "unit"?: number | null | undefined;
    "precision"?: number | null | undefined;
    "sci_flag": boolean;
    "start_col"?: number | null | undefined;
    "end_col"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fsl_tsplot": fsl_tsplot_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fsl_tsplot": fsl_tsplot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsl_tsplot(...)`.
 *
 * @interface
 */
interface FslTsplotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output PNG file
     */
    output_png: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Comma-separated list of input file names (ASCII text matrix, one column per timecourse)
 * @param output_file Output filename for the PNG file
 * @param title Plot title
 * @param legend_file File name of ASCII text file, one row per legend entry
 * @param labels Comma-separated list of labels
 * @param ymin Minimum y-value
 * @param ymax Maximum y-value
 * @param xlabel X-axis label
 * @param ylabel Y-axis label
 * @param height Plot height in pixels (default 150)
 * @param width Plot width in pixels (default 600)
 * @param unit Scaling units for x-axis (default 1...length of infile)
 * @param precision Precision of x-axis labels
 * @param sci_flag Switch on scientific notation
 * @param start_col Position of first column to plot
 * @param end_col Position of final column to plot
 *
 * @returns Parameter dictionary
 */
function fsl_tsplot_params(
    input_files: string,
    output_file: string,
    title: string | null = null,
    legend_file: string | null = null,
    labels: string | null = null,
    ymin: number | null = null,
    ymax: number | null = null,
    xlabel: string | null = null,
    ylabel: string | null = null,
    height: number | null = null,
    width: number | null = null,
    unit: number | null = null,
    precision: number | null = null,
    sci_flag: boolean = false,
    start_col: number | null = null,
    end_col: number | null = null,
): FslTsplotParameters {
    const params = {
        "@type": "fsl.fsl_tsplot" as const,
        "input_files": input_files,
        "output_file": output_file,
        "sci_flag": sci_flag,
    };
    if (title !== null) {
        params["title"] = title;
    }
    if (legend_file !== null) {
        params["legend_file"] = legend_file;
    }
    if (labels !== null) {
        params["labels"] = labels;
    }
    if (ymin !== null) {
        params["ymin"] = ymin;
    }
    if (ymax !== null) {
        params["ymax"] = ymax;
    }
    if (xlabel !== null) {
        params["xlabel"] = xlabel;
    }
    if (ylabel !== null) {
        params["ylabel"] = ylabel;
    }
    if (height !== null) {
        params["height"] = height;
    }
    if (width !== null) {
        params["width"] = width;
    }
    if (unit !== null) {
        params["unit"] = unit;
    }
    if (precision !== null) {
        params["precision"] = precision;
    }
    if (start_col !== null) {
        params["start_col"] = start_col;
    }
    if (end_col !== null) {
        params["end_col"] = end_col;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fsl_tsplot_cargs(
    params: FslTsplotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsl_tsplot");
    cargs.push(
        "-i",
        (params["input_files"] ?? null)
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    if ((params["title"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["title"] ?? null)
        );
    }
    if ((params["legend_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["legend_file"] ?? null)
        );
    }
    if ((params["labels"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["labels"] ?? null)
        );
    }
    if ((params["ymin"] ?? null) !== null) {
        cargs.push(
            "--ymin",
            String((params["ymin"] ?? null))
        );
    }
    if ((params["ymax"] ?? null) !== null) {
        cargs.push(
            "--ymax",
            String((params["ymax"] ?? null))
        );
    }
    if ((params["xlabel"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["xlabel"] ?? null)
        );
    }
    if ((params["ylabel"] ?? null) !== null) {
        cargs.push(
            "-y",
            (params["ylabel"] ?? null)
        );
    }
    if ((params["height"] ?? null) !== null) {
        cargs.push(
            "-h",
            String((params["height"] ?? null))
        );
    }
    if ((params["width"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["width"] ?? null))
        );
    }
    if ((params["unit"] ?? null) !== null) {
        cargs.push(
            "-u",
            String((params["unit"] ?? null))
        );
    }
    if ((params["precision"] ?? null) !== null) {
        cargs.push(
            "--precision",
            String((params["precision"] ?? null))
        );
    }
    if ((params["sci_flag"] ?? null)) {
        cargs.push("--sci");
    }
    if ((params["start_col"] ?? null) !== null) {
        cargs.push(
            "--start",
            String((params["start_col"] ?? null))
        );
    }
    if ((params["end_col"] ?? null) !== null) {
        cargs.push(
            "--finish",
            String((params["end_col"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fsl_tsplot_outputs(
    params: FslTsplotParameters,
    execution: Execution,
): FslTsplotOutputs {
    const ret: FslTsplotOutputs = {
        root: execution.outputFile("."),
        output_png: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Timeseries plotting tool from FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslTsplotOutputs`).
 */
function fsl_tsplot_execute(
    params: FslTsplotParameters,
    runner: Runner | null = null,
): FslTsplotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSL_TSPLOT_METADATA);
    params = execution.params(params)
    const cargs = fsl_tsplot_cargs(params, execution)
    const ret = fsl_tsplot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Timeseries plotting tool from FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_files Comma-separated list of input file names (ASCII text matrix, one column per timecourse)
 * @param output_file Output filename for the PNG file
 * @param title Plot title
 * @param legend_file File name of ASCII text file, one row per legend entry
 * @param labels Comma-separated list of labels
 * @param ymin Minimum y-value
 * @param ymax Maximum y-value
 * @param xlabel X-axis label
 * @param ylabel Y-axis label
 * @param height Plot height in pixels (default 150)
 * @param width Plot width in pixels (default 600)
 * @param unit Scaling units for x-axis (default 1...length of infile)
 * @param precision Precision of x-axis labels
 * @param sci_flag Switch on scientific notation
 * @param start_col Position of first column to plot
 * @param end_col Position of final column to plot
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslTsplotOutputs`).
 */
function fsl_tsplot(
    input_files: string,
    output_file: string,
    title: string | null = null,
    legend_file: string | null = null,
    labels: string | null = null,
    ymin: number | null = null,
    ymax: number | null = null,
    xlabel: string | null = null,
    ylabel: string | null = null,
    height: number | null = null,
    width: number | null = null,
    unit: number | null = null,
    precision: number | null = null,
    sci_flag: boolean = false,
    start_col: number | null = null,
    end_col: number | null = null,
    runner: Runner | null = null,
): FslTsplotOutputs {
    const params = fsl_tsplot_params(input_files, output_file, title, legend_file, labels, ymin, ymax, xlabel, ylabel, height, width, unit, precision, sci_flag, start_col, end_col)
    return fsl_tsplot_execute(params, runner);
}


export {
      FSL_TSPLOT_METADATA,
      FslTsplotOutputs,
      FslTsplotParameters,
      fsl_tsplot,
      fsl_tsplot_execute,
      fsl_tsplot_params,
};
