// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_SELECT_STR_PY_METADATA: Metadata = {
    id: "6cd5b7c3dc004b32564c974ad12a283bfedda12f.boutiques",
    name: "adjunct_select_str.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctSelectStrPyParameters {
    "@type"?: "afni/adjunct_select_str.py";
    "input_file": InputPathType;
    "num_bricks": number;
    "output_file": string;
}
type AdjunctSelectStrPyParametersTagged = Required<Pick<AdjunctSelectStrPyParameters, '@type'>> & AdjunctSelectStrPyParameters;


/**
 * Output object returned when calling `AdjunctSelectStrPyParameters(...)`.
 *
 * @interface
 */
interface AdjunctSelectStrPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file File containing a list of integers
 * @param num_bricks The number N of bricks in the dataset (so max index is N-1)
 * @param output_file Output file name
 *
 * @returns Parameter dictionary
 */
function adjunct_select_str_py_params(
    input_file: InputPathType,
    num_bricks: number,
    output_file: string,
): AdjunctSelectStrPyParametersTagged {
    const params = {
        "@type": "afni/adjunct_select_str.py" as const,
        "input_file": input_file,
        "num_bricks": num_bricks,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function adjunct_select_str_py_cargs(
    params: AdjunctSelectStrPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("adjunct_select_str.py");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push(String((params["num_bricks"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function adjunct_select_str_py_outputs(
    params: AdjunctSelectStrPyParameters,
    execution: Execution,
): AdjunctSelectStrPyOutputs {
    const ret: AdjunctSelectStrPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * adjunct_select_str.py
 *
 * A simple helper function for the fat_proc* scripts.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctSelectStrPyOutputs`).
 */
function adjunct_select_str_py_execute(
    params: AdjunctSelectStrPyParameters,
    runner: Runner | null = null,
): AdjunctSelectStrPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_SELECT_STR_PY_METADATA);
    params = execution.params(params)
    const cargs = adjunct_select_str_py_cargs(params, execution)
    const ret = adjunct_select_str_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * adjunct_select_str.py
 *
 * A simple helper function for the fat_proc* scripts.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file File containing a list of integers
 * @param num_bricks The number N of bricks in the dataset (so max index is N-1)
 * @param output_file Output file name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctSelectStrPyOutputs`).
 */
function adjunct_select_str_py(
    input_file: InputPathType,
    num_bricks: number,
    output_file: string,
    runner: Runner | null = null,
): AdjunctSelectStrPyOutputs {
    const params = adjunct_select_str_py_params(input_file, num_bricks, output_file)
    return adjunct_select_str_py_execute(params, runner);
}


export {
      ADJUNCT_SELECT_STR_PY_METADATA,
      AdjunctSelectStrPyOutputs,
      adjunct_select_str_py,
      adjunct_select_str_py_execute,
      adjunct_select_str_py_params,
};
