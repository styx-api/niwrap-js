// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MS_REFINE_METADATA: Metadata = {
    id: "145a15e944079df47fd807d74bc994f80265ca6e.boutiques",
    name: "mris_ms_refine",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMsRefineParameters {
    "@type": "freesurfer.mris_ms_refine";
    "subject_name": string;
    "hemisphere": string;
    "xform": InputPathType;
    "flash_files": Array<InputPathType>;
    "residuals": InputPathType;
    "omit_self_intersection": boolean;
    "create_curvature_files": boolean;
    "average_curvature"?: number | null | undefined;
    "white_only": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_ms_refine": mris_ms_refine_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_ms_refine": mris_ms_refine_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_ms_refine(...)`.
 *
 * @interface
 */
interface MrisMsRefineOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated white matter surface file
     */
    white_surface: OutputPathType;
    /**
     * Generated gray matter surface file
     */
    pial_surface: OutputPathType;
    /**
     * Curvature file for cortical thickness
     */
    curvature_file: OutputPathType;
    /**
     * Surface file approximating layer IV of the cortical sheet
     */
    layer_iv_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name The name of the subject
 * @param hemisphere The hemisphere to process ('lh' or 'rh')
 * @param xform The transform file
 * @param flash_files Flash images
 * @param residuals Residuals file
 * @param omit_self_intersection Omit self-intersection and only generate gray/white surface.
 * @param create_curvature_files Create curvature and area files from white matter surface.
 * @param average_curvature Average curvature values a specified number of times.
 * @param white_only Only generate white matter surface.
 *
 * @returns Parameter dictionary
 */
function mris_ms_refine_params(
    subject_name: string,
    hemisphere: string,
    xform: InputPathType,
    flash_files: Array<InputPathType>,
    residuals: InputPathType,
    omit_self_intersection: boolean = false,
    create_curvature_files: boolean = false,
    average_curvature: number | null = null,
    white_only: boolean = false,
): MrisMsRefineParameters {
    const params = {
        "@type": "freesurfer.mris_ms_refine" as const,
        "subject_name": subject_name,
        "hemisphere": hemisphere,
        "xform": xform,
        "flash_files": flash_files,
        "residuals": residuals,
        "omit_self_intersection": omit_self_intersection,
        "create_curvature_files": create_curvature_files,
        "white_only": white_only,
    };
    if (average_curvature !== null) {
        params["average_curvature"] = average_curvature;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_ms_refine_cargs(
    params: MrisMsRefineParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_ms_refine");
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    cargs.push(execution.inputFile((params["xform"] ?? null)));
    cargs.push(...(params["flash_files"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(execution.inputFile((params["residuals"] ?? null)));
    if ((params["omit_self_intersection"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["create_curvature_files"] ?? null)) {
        cargs.push("-c");
    }
    if ((params["average_curvature"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["average_curvature"] ?? null))
        );
    }
    if ((params["white_only"] ?? null)) {
        cargs.push("-whiteonly");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_ms_refine_outputs(
    params: MrisMsRefineParameters,
    execution: Execution,
): MrisMsRefineOutputs {
    const ret: MrisMsRefineOutputs = {
        root: execution.outputFile("."),
        white_surface: execution.outputFile([(params["subject_name"] ?? null), "/", (params["hemisphere"] ?? null), ".white"].join('')),
        pial_surface: execution.outputFile([(params["subject_name"] ?? null), "/", (params["hemisphere"] ?? null), ".pial"].join('')),
        curvature_file: execution.outputFile([(params["subject_name"] ?? null), "/", (params["hemisphere"] ?? null), ".curv"].join('')),
        layer_iv_surface: execution.outputFile([(params["subject_name"] ?? null), "/", (params["hemisphere"] ?? null), ".layerIV"].join('')),
    };
    return ret;
}


/**
 * mris_ms_refine
 *
 * This program positions the tessellation of the cortical surface at the white matter surface, then the gray matter surface. It generates surface files for these surfaces as well as a 'curvature' file for the cortical thickness, and a surface file which approximates layer IV of the cortical sheet.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMsRefineOutputs`).
 */
function mris_ms_refine_execute(
    params: MrisMsRefineParameters,
    runner: Runner | null = null,
): MrisMsRefineOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MS_REFINE_METADATA);
    params = execution.params(params)
    const cargs = mris_ms_refine_cargs(params, execution)
    const ret = mris_ms_refine_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_ms_refine
 *
 * This program positions the tessellation of the cortical surface at the white matter surface, then the gray matter surface. It generates surface files for these surfaces as well as a 'curvature' file for the cortical thickness, and a surface file which approximates layer IV of the cortical sheet.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name The name of the subject
 * @param hemisphere The hemisphere to process ('lh' or 'rh')
 * @param xform The transform file
 * @param flash_files Flash images
 * @param residuals Residuals file
 * @param omit_self_intersection Omit self-intersection and only generate gray/white surface.
 * @param create_curvature_files Create curvature and area files from white matter surface.
 * @param average_curvature Average curvature values a specified number of times.
 * @param white_only Only generate white matter surface.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMsRefineOutputs`).
 */
function mris_ms_refine(
    subject_name: string,
    hemisphere: string,
    xform: InputPathType,
    flash_files: Array<InputPathType>,
    residuals: InputPathType,
    omit_self_intersection: boolean = false,
    create_curvature_files: boolean = false,
    average_curvature: number | null = null,
    white_only: boolean = false,
    runner: Runner | null = null,
): MrisMsRefineOutputs {
    const params = mris_ms_refine_params(subject_name, hemisphere, xform, flash_files, residuals, omit_self_intersection, create_curvature_files, average_curvature, white_only)
    return mris_ms_refine_execute(params, runner);
}


export {
      MRIS_MS_REFINE_METADATA,
      MrisMsRefineOutputs,
      MrisMsRefineParameters,
      mris_ms_refine,
      mris_ms_refine_execute,
      mris_ms_refine_params,
};
