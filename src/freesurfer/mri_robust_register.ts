// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_ROBUST_REGISTER_METADATA: Metadata = {
    id: "57f971f65ac4d4a6f401c37b5b2f632496122d7c.boutiques",
    name: "mri_robust_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRobustRegisterParameters {
    "@type": "freesurfer.mri_robust_register";
    "movable_volume": InputPathType;
    "target_volume": InputPathType;
    "output_registration": string;
    "outlier_sensitivity"?: number | null | undefined;
    "satit": boolean;
    "mapped_movable"?: string | null | undefined;
    "mapped_movable_hdr"?: string | null | undefined;
    "weights"?: string | null | undefined;
    "oneminus_w": boolean;
    "iscale": boolean;
    "iscale_only": boolean;
    "iscale_out"?: string | null | undefined;
    "iscale_in"?: string | null | undefined;
    "trans_only": boolean;
    "affine": boolean;
    "ixform"?: string | null | undefined;
    "init_orient": boolean;
    "no_init": boolean;
    "vox2vox": boolean;
    "cost"?: string | null | undefined;
    "ent_radius"?: number | null | undefined;
    "ent_correction": boolean;
    "ent_ball": boolean;
    "ent_mov"?: string | null | undefined;
    "powell_tolerance"?: number | null | undefined;
    "sobel": boolean;
    "no_sym": boolean;
    "maximum_iterations"?: number | null | undefined;
    "ent_dst"?: string | null | undefined;
    "high_iter"?: number | null | undefined;
    "eps_iteration"?: number | null | undefined;
    "no_multiscale": boolean;
    "max_size"?: number | null | undefined;
    "min_size"?: number | null | undefined;
    "w_limit"?: number | null | undefined;
    "sub_sample"?: number | null | undefined;
    "float_type": boolean;
    "white_bg_mov": boolean;
    "white_bg_dst": boolean;
    "uchar": boolean;
    "mask_mov"?: InputPathType | null | undefined;
    "mask_dst"?: InputPathType | null | undefined;
    "half_mov"?: string | null | undefined;
    "half_dst"?: string | null | undefined;
    "half_weights"?: string | null | undefined;
    "half_mov_lta"?: string | null | undefined;
    "half_dst_lta"?: string | null | undefined;
    "debug": boolean;
    "verbose"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_robust_register": mri_robust_register_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_robust_register": mri_robust_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_robust_register(...)`.
 *
 * @interface
 */
interface MriRobustRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Registration output file containing the transformation from movable to destination.
     */
    reg_output: OutputPathType;
    /**
     * Movable volume mapped and resampled at destination.
     */
    mapped_output: OutputPathType | null;
    /**
     * Movable volume aligned to destination (header only).
     */
    mapped_hdr_output: OutputPathType | null;
    /**
     * Weights indicating outlier probabilities in destination space.
     */
    weights_output_file: OutputPathType | null;
    /**
     * Output text file containing the intensity scale value.
     */
    iscale_out_file: OutputPathType | null;
    /**
     * Half-way movable volume resampled.
     */
    half_mov_file: OutputPathType | null;
    /**
     * Half-way destination volume resampled.
     */
    half_dst_file: OutputPathType | null;
    /**
     * Half-way weights resampled in halfway space.
     */
    half_weights_file: OutputPathType | null;
    /**
     * Transform output from movable to half-way space.
     */
    half_mov_lta_file: OutputPathType | null;
    /**
     * Transform output from destination to half-way space.
     */
    half_dst_lta_file: OutputPathType | null;
    /**
     * Movable entropy image for ROBENT cost function.
     */
    ent_mov_file: OutputPathType | null;
    /**
     * Target entropy image for ROBENT cost function.
     */
    ent_dst_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param movable_volume Input movable volume to be aligned to target.
 * @param target_volume Input target volume.
 * @param output_registration Output registration (transform from mov to dst).
 * @param outlier_sensitivity Set outlier sensitivity manually for robust cost functions. Higher values mean less sensitivity.
 * @param satit Auto-detect good sensitivity for robust cost functions.
 * @param mapped_movable Output image: movable mapped and resampled at destination.
 * @param mapped_movable_hdr Output image: movable aligned to destination (no resampling, only adjusting header vox2ras).
 * @param weights Output weights (outlier probabilities) in destination space (0=regular,1=outlier).
 * @param oneminus_w Weights (outlier) map will be inverted (0=outlier), as in earlier versions.
 * @param iscale Estimate intensity scale factor.
 * @param iscale_only Only perform intensity scaling (no transformation).
 * @param iscale_out Output text file for iscale value.
 * @param iscale_in Initial input text file for iscale value.
 * @param trans_only Find 3 parameter translation only.
 * @param affine Find 12 parameter affine transform.
 * @param ixform Use initial transform LTA on source.
 * @param init_orient Use moments for orientation initialization.
 * @param no_init Skip automatic transform initialization.
 * @param vox2vox Output VOX2VOX LTA file.
 * @param cost Set cost function for registration.
 * @param ent_radius With ROBENT: specify box radius for entropy computation.
 * @param ent_correction With ROBENT: use better entropy computation that works on smaller boxes.
 * @param ent_ball With ROBENT: use ball around voxel instead of box.
 * @param ent_mov With ROBENT: write movable entropy image.
 * @param powell_tolerance With MI, NMI etc: set Powell tolerance.
 * @param sobel Register Sobel magnitude images.
 * @param no_sym Do not map to half way space.
 * @param maximum_iterations Maximum number of iterations on each resolution.
 * @param ent_dst With ROBENT: write target entropy image.
 * @param high_iter Maximum number of iterations on highest resolution.
 * @param eps_iteration Stop iterations when transform update falls below specified RMS distance.
 * @param no_multiscale Process highest resolution only (no multiscale).
 * @param max_size Specify largest voxel dimension for gaussian pyramid.
 * @param min_size Specify smallest voxel dimension for gaussian pyramid.
 * @param w_limit (Expert) sets maximal outlier limit for --satit.
 * @param sub_sample Subsample if dimension is greater than the specified value on all axes.
 * @param float_type Convert images to float internally.
 * @param white_bg_mov Assume white background in MOV for padding.
 * @param white_bg_dst Assume white background in DST for padding.
 * @param uchar Convert inputs to UCHAR with rescale and histogram cropping.
 * @param mask_mov Mask movable image with mask file.
 * @param mask_dst Mask destination image with mask file.
 * @param half_mov Outputs half-way movable (resampled in halfway space).
 * @param half_dst Outputs half-way destination (resampled in halfway space).
 * @param half_weights Outputs half-way weights (resampled in halfway space).
 * @param half_mov_lta Outputs transform from movable to half-way space.
 * @param half_dst_lta Outputs transform from destination to half-way space.
 * @param debug Show debug output.
 * @param verbose Verbosity level: 0 (quiet), 1 (normal), 2 (detail).
 *
 * @returns Parameter dictionary
 */
function mri_robust_register_params(
    movable_volume: InputPathType,
    target_volume: InputPathType,
    output_registration: string,
    outlier_sensitivity: number | null = null,
    satit: boolean = false,
    mapped_movable: string | null = null,
    mapped_movable_hdr: string | null = null,
    weights: string | null = null,
    oneminus_w: boolean = false,
    iscale: boolean = false,
    iscale_only: boolean = false,
    iscale_out: string | null = null,
    iscale_in: string | null = null,
    trans_only: boolean = false,
    affine: boolean = false,
    ixform: string | null = null,
    init_orient: boolean = false,
    no_init: boolean = false,
    vox2vox: boolean = false,
    cost: string | null = null,
    ent_radius: number | null = null,
    ent_correction: boolean = false,
    ent_ball: boolean = false,
    ent_mov: string | null = null,
    powell_tolerance: number | null = null,
    sobel: boolean = false,
    no_sym: boolean = false,
    maximum_iterations: number | null = null,
    ent_dst: string | null = null,
    high_iter: number | null = null,
    eps_iteration: number | null = null,
    no_multiscale: boolean = false,
    max_size: number | null = null,
    min_size: number | null = null,
    w_limit: number | null = null,
    sub_sample: number | null = null,
    float_type: boolean = false,
    white_bg_mov: boolean = false,
    white_bg_dst: boolean = false,
    uchar: boolean = false,
    mask_mov: InputPathType | null = null,
    mask_dst: InputPathType | null = null,
    half_mov: string | null = null,
    half_dst: string | null = null,
    half_weights: string | null = null,
    half_mov_lta: string | null = null,
    half_dst_lta: string | null = null,
    debug: boolean = false,
    verbose: number | null = null,
): MriRobustRegisterParameters {
    const params = {
        "@type": "freesurfer.mri_robust_register" as const,
        "movable_volume": movable_volume,
        "target_volume": target_volume,
        "output_registration": output_registration,
        "satit": satit,
        "oneminus_w": oneminus_w,
        "iscale": iscale,
        "iscale_only": iscale_only,
        "trans_only": trans_only,
        "affine": affine,
        "init_orient": init_orient,
        "no_init": no_init,
        "vox2vox": vox2vox,
        "ent_correction": ent_correction,
        "ent_ball": ent_ball,
        "sobel": sobel,
        "no_sym": no_sym,
        "no_multiscale": no_multiscale,
        "float_type": float_type,
        "white_bg_mov": white_bg_mov,
        "white_bg_dst": white_bg_dst,
        "uchar": uchar,
        "debug": debug,
    };
    if (outlier_sensitivity !== null) {
        params["outlier_sensitivity"] = outlier_sensitivity;
    }
    if (mapped_movable !== null) {
        params["mapped_movable"] = mapped_movable;
    }
    if (mapped_movable_hdr !== null) {
        params["mapped_movable_hdr"] = mapped_movable_hdr;
    }
    if (weights !== null) {
        params["weights"] = weights;
    }
    if (iscale_out !== null) {
        params["iscale_out"] = iscale_out;
    }
    if (iscale_in !== null) {
        params["iscale_in"] = iscale_in;
    }
    if (ixform !== null) {
        params["ixform"] = ixform;
    }
    if (cost !== null) {
        params["cost"] = cost;
    }
    if (ent_radius !== null) {
        params["ent_radius"] = ent_radius;
    }
    if (ent_mov !== null) {
        params["ent_mov"] = ent_mov;
    }
    if (powell_tolerance !== null) {
        params["powell_tolerance"] = powell_tolerance;
    }
    if (maximum_iterations !== null) {
        params["maximum_iterations"] = maximum_iterations;
    }
    if (ent_dst !== null) {
        params["ent_dst"] = ent_dst;
    }
    if (high_iter !== null) {
        params["high_iter"] = high_iter;
    }
    if (eps_iteration !== null) {
        params["eps_iteration"] = eps_iteration;
    }
    if (max_size !== null) {
        params["max_size"] = max_size;
    }
    if (min_size !== null) {
        params["min_size"] = min_size;
    }
    if (w_limit !== null) {
        params["w_limit"] = w_limit;
    }
    if (sub_sample !== null) {
        params["sub_sample"] = sub_sample;
    }
    if (mask_mov !== null) {
        params["mask_mov"] = mask_mov;
    }
    if (mask_dst !== null) {
        params["mask_dst"] = mask_dst;
    }
    if (half_mov !== null) {
        params["half_mov"] = half_mov;
    }
    if (half_dst !== null) {
        params["half_dst"] = half_dst;
    }
    if (half_weights !== null) {
        params["half_weights"] = half_weights;
    }
    if (half_mov_lta !== null) {
        params["half_mov_lta"] = half_mov_lta;
    }
    if (half_dst_lta !== null) {
        params["half_dst_lta"] = half_dst_lta;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_robust_register_cargs(
    params: MriRobustRegisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_robust_register");
    cargs.push(
        "-mov",
        execution.inputFile((params["movable_volume"] ?? null))
    );
    cargs.push(
        "-dst",
        execution.inputFile((params["target_volume"] ?? null))
    );
    cargs.push(
        "-lta",
        (params["output_registration"] ?? null)
    );
    if ((params["outlier_sensitivity"] ?? null) !== null) {
        cargs.push(
            "--sat",
            String((params["outlier_sensitivity"] ?? null))
        );
    }
    if ((params["satit"] ?? null)) {
        cargs.push("--satit");
    }
    if ((params["mapped_movable"] ?? null) !== null) {
        cargs.push(
            "--mapmov",
            (params["mapped_movable"] ?? null)
        );
    }
    if ((params["mapped_movable_hdr"] ?? null) !== null) {
        cargs.push(
            "--mapmovhdr",
            (params["mapped_movable_hdr"] ?? null)
        );
    }
    if ((params["weights"] ?? null) !== null) {
        cargs.push(
            "--weights",
            (params["weights"] ?? null)
        );
    }
    if ((params["oneminus_w"] ?? null)) {
        cargs.push("--oneminusw");
    }
    if ((params["iscale"] ?? null)) {
        cargs.push("--iscale");
    }
    if ((params["iscale_only"] ?? null)) {
        cargs.push("--iscaleonly");
    }
    if ((params["iscale_out"] ?? null) !== null) {
        cargs.push(
            "--iscaleout",
            (params["iscale_out"] ?? null)
        );
    }
    if ((params["iscale_in"] ?? null) !== null) {
        cargs.push(
            "--iscalein",
            (params["iscale_in"] ?? null)
        );
    }
    if ((params["trans_only"] ?? null)) {
        cargs.push("--transonly");
    }
    if ((params["affine"] ?? null)) {
        cargs.push("--affine");
    }
    if ((params["ixform"] ?? null) !== null) {
        cargs.push(
            "--ixform",
            (params["ixform"] ?? null)
        );
    }
    if ((params["init_orient"] ?? null)) {
        cargs.push("--initorient");
    }
    if ((params["no_init"] ?? null)) {
        cargs.push("--noinit");
    }
    if ((params["vox2vox"] ?? null)) {
        cargs.push("--vox2vox");
    }
    if ((params["cost"] ?? null) !== null) {
        cargs.push(
            "--cost",
            (params["cost"] ?? null)
        );
    }
    if ((params["ent_radius"] ?? null) !== null) {
        cargs.push(
            "--entradius",
            String((params["ent_radius"] ?? null))
        );
    }
    if ((params["ent_correction"] ?? null)) {
        cargs.push("--entcorrection");
    }
    if ((params["ent_ball"] ?? null)) {
        cargs.push("--entball");
    }
    if ((params["ent_mov"] ?? null) !== null) {
        cargs.push(
            "--entmov",
            (params["ent_mov"] ?? null)
        );
    }
    if ((params["powell_tolerance"] ?? null) !== null) {
        cargs.push(
            "--powelltol",
            String((params["powell_tolerance"] ?? null))
        );
    }
    if ((params["sobel"] ?? null)) {
        cargs.push("--sobel");
    }
    if ((params["no_sym"] ?? null)) {
        cargs.push("--nosym");
    }
    if ((params["maximum_iterations"] ?? null) !== null) {
        cargs.push(
            "--maxit",
            String((params["maximum_iterations"] ?? null))
        );
    }
    if ((params["ent_dst"] ?? null) !== null) {
        cargs.push(
            "--entdst",
            (params["ent_dst"] ?? null)
        );
    }
    if ((params["high_iter"] ?? null) !== null) {
        cargs.push(
            "--highit",
            String((params["high_iter"] ?? null))
        );
    }
    if ((params["eps_iteration"] ?? null) !== null) {
        cargs.push(
            "--epsit",
            String((params["eps_iteration"] ?? null))
        );
    }
    if ((params["no_multiscale"] ?? null)) {
        cargs.push("--nomulti");
    }
    if ((params["max_size"] ?? null) !== null) {
        cargs.push(
            "--maxsize",
            String((params["max_size"] ?? null))
        );
    }
    if ((params["min_size"] ?? null) !== null) {
        cargs.push(
            "--minsize",
            String((params["min_size"] ?? null))
        );
    }
    if ((params["w_limit"] ?? null) !== null) {
        cargs.push(
            "--wlimit",
            String((params["w_limit"] ?? null))
        );
    }
    if ((params["sub_sample"] ?? null) !== null) {
        cargs.push(
            "--subsample",
            String((params["sub_sample"] ?? null))
        );
    }
    if ((params["float_type"] ?? null)) {
        cargs.push("--floattype");
    }
    if ((params["white_bg_mov"] ?? null)) {
        cargs.push("--whitebgmov");
    }
    if ((params["white_bg_dst"] ?? null)) {
        cargs.push("--whitebgdst");
    }
    if ((params["uchar"] ?? null)) {
        cargs.push("--uchar");
    }
    if ((params["mask_mov"] ?? null) !== null) {
        cargs.push(
            "--maskmov",
            execution.inputFile((params["mask_mov"] ?? null))
        );
    }
    if ((params["mask_dst"] ?? null) !== null) {
        cargs.push(
            "--maskdst",
            execution.inputFile((params["mask_dst"] ?? null))
        );
    }
    if ((params["half_mov"] ?? null) !== null) {
        cargs.push(
            "--halfmov",
            (params["half_mov"] ?? null)
        );
    }
    if ((params["half_dst"] ?? null) !== null) {
        cargs.push(
            "--halfdst",
            (params["half_dst"] ?? null)
        );
    }
    if ((params["half_weights"] ?? null) !== null) {
        cargs.push(
            "--halfweights",
            (params["half_weights"] ?? null)
        );
    }
    if ((params["half_mov_lta"] ?? null) !== null) {
        cargs.push(
            "--halfmovlta",
            (params["half_mov_lta"] ?? null)
        );
    }
    if ((params["half_dst_lta"] ?? null) !== null) {
        cargs.push(
            "--halfdstlta",
            (params["half_dst_lta"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "--verbose",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_robust_register_outputs(
    params: MriRobustRegisterParameters,
    execution: Execution,
): MriRobustRegisterOutputs {
    const ret: MriRobustRegisterOutputs = {
        root: execution.outputFile("."),
        reg_output: execution.outputFile([(params["output_registration"] ?? null)].join('')),
        mapped_output: ((params["mapped_movable"] ?? null) !== null) ? execution.outputFile([(params["mapped_movable"] ?? null)].join('')) : null,
        mapped_hdr_output: ((params["mapped_movable_hdr"] ?? null) !== null) ? execution.outputFile([(params["mapped_movable_hdr"] ?? null)].join('')) : null,
        weights_output_file: ((params["weights"] ?? null) !== null) ? execution.outputFile([(params["weights"] ?? null)].join('')) : null,
        iscale_out_file: ((params["iscale_out"] ?? null) !== null) ? execution.outputFile([(params["iscale_out"] ?? null)].join('')) : null,
        half_mov_file: ((params["half_mov"] ?? null) !== null) ? execution.outputFile([(params["half_mov"] ?? null)].join('')) : null,
        half_dst_file: ((params["half_dst"] ?? null) !== null) ? execution.outputFile([(params["half_dst"] ?? null)].join('')) : null,
        half_weights_file: ((params["half_weights"] ?? null) !== null) ? execution.outputFile([(params["half_weights"] ?? null)].join('')) : null,
        half_mov_lta_file: ((params["half_mov_lta"] ?? null) !== null) ? execution.outputFile([(params["half_mov_lta"] ?? null)].join('')) : null,
        half_dst_lta_file: ((params["half_dst_lta"] ?? null) !== null) ? execution.outputFile([(params["half_dst_lta"] ?? null)].join('')) : null,
        ent_mov_file: ((params["ent_mov"] ?? null) !== null) ? execution.outputFile([(params["ent_mov"] ?? null)].join('')) : null,
        ent_dst_file: ((params["ent_dst"] ?? null) !== null) ? execution.outputFile([(params["ent_dst"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Inverse consistent registration of two volumes using robust and standard cost functions.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriRobustRegisterOutputs`).
 */
function mri_robust_register_execute(
    params: MriRobustRegisterParameters,
    execution: Execution,
): MriRobustRegisterOutputs {
    params = execution.params(params)
    const cargs = mri_robust_register_cargs(params, execution)
    const ret = mri_robust_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Inverse consistent registration of two volumes using robust and standard cost functions.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param movable_volume Input movable volume to be aligned to target.
 * @param target_volume Input target volume.
 * @param output_registration Output registration (transform from mov to dst).
 * @param outlier_sensitivity Set outlier sensitivity manually for robust cost functions. Higher values mean less sensitivity.
 * @param satit Auto-detect good sensitivity for robust cost functions.
 * @param mapped_movable Output image: movable mapped and resampled at destination.
 * @param mapped_movable_hdr Output image: movable aligned to destination (no resampling, only adjusting header vox2ras).
 * @param weights Output weights (outlier probabilities) in destination space (0=regular,1=outlier).
 * @param oneminus_w Weights (outlier) map will be inverted (0=outlier), as in earlier versions.
 * @param iscale Estimate intensity scale factor.
 * @param iscale_only Only perform intensity scaling (no transformation).
 * @param iscale_out Output text file for iscale value.
 * @param iscale_in Initial input text file for iscale value.
 * @param trans_only Find 3 parameter translation only.
 * @param affine Find 12 parameter affine transform.
 * @param ixform Use initial transform LTA on source.
 * @param init_orient Use moments for orientation initialization.
 * @param no_init Skip automatic transform initialization.
 * @param vox2vox Output VOX2VOX LTA file.
 * @param cost Set cost function for registration.
 * @param ent_radius With ROBENT: specify box radius for entropy computation.
 * @param ent_correction With ROBENT: use better entropy computation that works on smaller boxes.
 * @param ent_ball With ROBENT: use ball around voxel instead of box.
 * @param ent_mov With ROBENT: write movable entropy image.
 * @param powell_tolerance With MI, NMI etc: set Powell tolerance.
 * @param sobel Register Sobel magnitude images.
 * @param no_sym Do not map to half way space.
 * @param maximum_iterations Maximum number of iterations on each resolution.
 * @param ent_dst With ROBENT: write target entropy image.
 * @param high_iter Maximum number of iterations on highest resolution.
 * @param eps_iteration Stop iterations when transform update falls below specified RMS distance.
 * @param no_multiscale Process highest resolution only (no multiscale).
 * @param max_size Specify largest voxel dimension for gaussian pyramid.
 * @param min_size Specify smallest voxel dimension for gaussian pyramid.
 * @param w_limit (Expert) sets maximal outlier limit for --satit.
 * @param sub_sample Subsample if dimension is greater than the specified value on all axes.
 * @param float_type Convert images to float internally.
 * @param white_bg_mov Assume white background in MOV for padding.
 * @param white_bg_dst Assume white background in DST for padding.
 * @param uchar Convert inputs to UCHAR with rescale and histogram cropping.
 * @param mask_mov Mask movable image with mask file.
 * @param mask_dst Mask destination image with mask file.
 * @param half_mov Outputs half-way movable (resampled in halfway space).
 * @param half_dst Outputs half-way destination (resampled in halfway space).
 * @param half_weights Outputs half-way weights (resampled in halfway space).
 * @param half_mov_lta Outputs transform from movable to half-way space.
 * @param half_dst_lta Outputs transform from destination to half-way space.
 * @param debug Show debug output.
 * @param verbose Verbosity level: 0 (quiet), 1 (normal), 2 (detail).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRobustRegisterOutputs`).
 */
function mri_robust_register(
    movable_volume: InputPathType,
    target_volume: InputPathType,
    output_registration: string,
    outlier_sensitivity: number | null = null,
    satit: boolean = false,
    mapped_movable: string | null = null,
    mapped_movable_hdr: string | null = null,
    weights: string | null = null,
    oneminus_w: boolean = false,
    iscale: boolean = false,
    iscale_only: boolean = false,
    iscale_out: string | null = null,
    iscale_in: string | null = null,
    trans_only: boolean = false,
    affine: boolean = false,
    ixform: string | null = null,
    init_orient: boolean = false,
    no_init: boolean = false,
    vox2vox: boolean = false,
    cost: string | null = null,
    ent_radius: number | null = null,
    ent_correction: boolean = false,
    ent_ball: boolean = false,
    ent_mov: string | null = null,
    powell_tolerance: number | null = null,
    sobel: boolean = false,
    no_sym: boolean = false,
    maximum_iterations: number | null = null,
    ent_dst: string | null = null,
    high_iter: number | null = null,
    eps_iteration: number | null = null,
    no_multiscale: boolean = false,
    max_size: number | null = null,
    min_size: number | null = null,
    w_limit: number | null = null,
    sub_sample: number | null = null,
    float_type: boolean = false,
    white_bg_mov: boolean = false,
    white_bg_dst: boolean = false,
    uchar: boolean = false,
    mask_mov: InputPathType | null = null,
    mask_dst: InputPathType | null = null,
    half_mov: string | null = null,
    half_dst: string | null = null,
    half_weights: string | null = null,
    half_mov_lta: string | null = null,
    half_dst_lta: string | null = null,
    debug: boolean = false,
    verbose: number | null = null,
    runner: Runner | null = null,
): MriRobustRegisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_ROBUST_REGISTER_METADATA);
    const params = mri_robust_register_params(movable_volume, target_volume, output_registration, outlier_sensitivity, satit, mapped_movable, mapped_movable_hdr, weights, oneminus_w, iscale, iscale_only, iscale_out, iscale_in, trans_only, affine, ixform, init_orient, no_init, vox2vox, cost, ent_radius, ent_correction, ent_ball, ent_mov, powell_tolerance, sobel, no_sym, maximum_iterations, ent_dst, high_iter, eps_iteration, no_multiscale, max_size, min_size, w_limit, sub_sample, float_type, white_bg_mov, white_bg_dst, uchar, mask_mov, mask_dst, half_mov, half_dst, half_weights, half_mov_lta, half_dst_lta, debug, verbose)
    return mri_robust_register_execute(params, execution);
}


export {
      MRI_ROBUST_REGISTER_METADATA,
      MriRobustRegisterOutputs,
      MriRobustRegisterParameters,
      mri_robust_register,
      mri_robust_register_cargs,
      mri_robust_register_execute,
      mri_robust_register_outputs,
      mri_robust_register_params,
};
