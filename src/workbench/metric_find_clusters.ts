// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_FIND_CLUSTERS_METADATA: Metadata = {
    id: "bad1c1bcb6a58fa1b8a2f5e514a762cf71edc56a.boutiques",
    name: "metric-find-clusters",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricFindClustersParameters {
    "@type": "workbench.metric-find-clusters";
    "surface": InputPathType;
    "metric_in": InputPathType;
    "value_threshold": number;
    "minimum_area": number;
    "metric_out": string;
    "opt_less_than": boolean;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
    "opt_column_column"?: string | null | undefined;
    "opt_size_ratio_ratio"?: number | null | undefined;
    "opt_distance_distance"?: number | null | undefined;
    "opt_start_startval"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metric-find-clusters": metric_find_clusters_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.metric-find-clusters": metric_find_clusters_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metric_find_clusters(...)`.
 *
 * @interface
 */
interface MetricFindClustersOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to compute on
 * @param metric_in the input metric
 * @param value_threshold threshold for data values
 * @param minimum_area threshold for cluster area, in mm^2
 * @param metric_out the output metric
 * @param opt_less_than find values less than <value-threshold>, rather than greater
 * @param opt_roi_roi_metric select a region of interest: the roi, as a metric
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param opt_column_column select a single column: the column number or name
 * @param opt_size_ratio_ratio ignore clusters smaller than a given fraction of the largest cluster in map: fraction of the largest cluster's area
 * @param opt_distance_distance ignore clusters further than a given distance from the largest cluster: how far from the largest cluster a cluster can be, edge to edge, in mm
 * @param opt_start_startval start labeling clusters from a value other than 1: the value to give the first cluster found
 *
 * @returns Parameter dictionary
 */
function metric_find_clusters_params(
    surface: InputPathType,
    metric_in: InputPathType,
    value_threshold: number,
    minimum_area: number,
    metric_out: string,
    opt_less_than: boolean = false,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_size_ratio_ratio: number | null = null,
    opt_distance_distance: number | null = null,
    opt_start_startval: number | null = null,
): MetricFindClustersParameters {
    const params = {
        "@type": "workbench.metric-find-clusters" as const,
        "surface": surface,
        "metric_in": metric_in,
        "value_threshold": value_threshold,
        "minimum_area": minimum_area,
        "metric_out": metric_out,
        "opt_less_than": opt_less_than,
    };
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (opt_size_ratio_ratio !== null) {
        params["opt_size_ratio_ratio"] = opt_size_ratio_ratio;
    }
    if (opt_distance_distance !== null) {
        params["opt_distance_distance"] = opt_distance_distance;
    }
    if (opt_start_startval !== null) {
        params["opt_start_startval"] = opt_start_startval;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_find_clusters_cargs(
    params: MetricFindClustersParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-find-clusters");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["metric_in"] ?? null)));
    cargs.push(String((params["value_threshold"] ?? null)));
    cargs.push(String((params["minimum_area"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_less_than"] ?? null)) {
        cargs.push("-less-than");
    }
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    if ((params["opt_size_ratio_ratio"] ?? null) !== null) {
        cargs.push(
            "-size-ratio",
            String((params["opt_size_ratio_ratio"] ?? null))
        );
    }
    if ((params["opt_distance_distance"] ?? null) !== null) {
        cargs.push(
            "-distance",
            String((params["opt_distance_distance"] ?? null))
        );
    }
    if ((params["opt_start_startval"] ?? null) !== null) {
        cargs.push(
            "-start",
            String((params["opt_start_startval"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_find_clusters_outputs(
    params: MetricFindClustersParameters,
    execution: Execution,
): MetricFindClustersOutputs {
    const ret: MetricFindClustersOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * metric-find-clusters
 *
 * Filter clusters by surface area.
 *
 * Outputs a metric with nonzero integers for all vertices within a large enough cluster, and zeros elsewhere.  The integers denote cluster membership (by default, first cluster found will use value 1, second cluster 2, etc).  Cluster values are not reused across maps of the output, but instead keep counting up.  By default, values greater than <value-threshold> are considered to be in a cluster, use -less-than to test for values less than the threshold.  To apply this as a mask to the data, or to do more complicated thresholding, see -metric-math.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricFindClustersOutputs`).
 */
function metric_find_clusters_execute(
    params: MetricFindClustersParameters,
    runner: Runner | null = null,
): MetricFindClustersOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_FIND_CLUSTERS_METADATA);
    params = execution.params(params)
    const cargs = metric_find_clusters_cargs(params, execution)
    const ret = metric_find_clusters_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * metric-find-clusters
 *
 * Filter clusters by surface area.
 *
 * Outputs a metric with nonzero integers for all vertices within a large enough cluster, and zeros elsewhere.  The integers denote cluster membership (by default, first cluster found will use value 1, second cluster 2, etc).  Cluster values are not reused across maps of the output, but instead keep counting up.  By default, values greater than <value-threshold> are considered to be in a cluster, use -less-than to test for values less than the threshold.  To apply this as a mask to the data, or to do more complicated thresholding, see -metric-math.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to compute on
 * @param metric_in the input metric
 * @param value_threshold threshold for data values
 * @param minimum_area threshold for cluster area, in mm^2
 * @param metric_out the output metric
 * @param opt_less_than find values less than <value-threshold>, rather than greater
 * @param opt_roi_roi_metric select a region of interest: the roi, as a metric
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param opt_column_column select a single column: the column number or name
 * @param opt_size_ratio_ratio ignore clusters smaller than a given fraction of the largest cluster in map: fraction of the largest cluster's area
 * @param opt_distance_distance ignore clusters further than a given distance from the largest cluster: how far from the largest cluster a cluster can be, edge to edge, in mm
 * @param opt_start_startval start labeling clusters from a value other than 1: the value to give the first cluster found
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricFindClustersOutputs`).
 */
function metric_find_clusters(
    surface: InputPathType,
    metric_in: InputPathType,
    value_threshold: number,
    minimum_area: number,
    metric_out: string,
    opt_less_than: boolean = false,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_size_ratio_ratio: number | null = null,
    opt_distance_distance: number | null = null,
    opt_start_startval: number | null = null,
    runner: Runner | null = null,
): MetricFindClustersOutputs {
    const params = metric_find_clusters_params(surface, metric_in, value_threshold, minimum_area, metric_out, opt_less_than, opt_roi_roi_metric, opt_corrected_areas_area_metric, opt_column_column, opt_size_ratio_ratio, opt_distance_distance, opt_start_startval)
    return metric_find_clusters_execute(params, runner);
}


export {
      METRIC_FIND_CLUSTERS_METADATA,
      MetricFindClustersOutputs,
      MetricFindClustersParameters,
      metric_find_clusters,
      metric_find_clusters_execute,
      metric_find_clusters_params,
};
