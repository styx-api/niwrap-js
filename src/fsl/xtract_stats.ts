// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XTRACT_STATS_METADATA: Metadata = {
    id: "234e42d8af07ff93d021100c888dd2dc9efe5036.boutiques",
    name: "xtract_stats",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface XtractStatsParameters {
    "__STYXTYPE__": "xtract_stats";
    "folder_basename": string;
    "XTRACT_dir": string;
    "xtract2diff": string;
    "reference_image"?: InputPathType | null | undefined;
    "output_file"?: string | null | undefined;
    "structures_file"?: InputPathType | null | undefined;
    "threshold"?: number | null | undefined;
    "measurements"?: string | null | undefined;
    "keep_temp_files": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "xtract_stats": xtract_stats_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "xtract_stats": xtract_stats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `xtract_stats(...)`.
 *
 * @interface
 */
interface XtractStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * CSV file containing the statistics from XTRACT analysis.
     */
    csv_output: OutputPathType | null;
}


function xtract_stats_params(
    folder_basename: string,
    xtract_dir: string,
    xtract2diff: string,
    reference_image: InputPathType | null = null,
    output_file: string | null = null,
    structures_file: InputPathType | null = null,
    threshold: number | null = null,
    measurements: string | null = null,
    keep_temp_files: boolean = false,
): XtractStatsParameters {
    /**
     * Build parameters.
    
     * @param folder_basename Path to microstructure folder and basename of data (e.g. /home/DTI/dti_)
     * @param xtract_dir Path to XTRACT output folder
     * @param xtract2diff EITHER XTRACT results to diffusion space transform OR 'native' if tracts are already in diffusion space
     * @param reference_image If not 'native', provide reference image in diffusion space (e.g. /home/DTI/dti_FA)
     * @param output_file Output filepath (Default <XTRACT_dir>/stats.csv)
     * @param structures_file Structures file (as in XTRACT) (Default is all tracts under <XTRACT_dir>)
     * @param threshold Threshold applied to tract probability map (default = 0.001 = 0.1%)
     * @param measurements Comma separated list of features to extract (Default = vol,prob,length,FA,MD - assumes DTI folder has been provided). vol = tract volume, prob = tract probability, length = tract length. Additional metrics must follow file naming conventions. e.g. for dti_L1 use 'L1'
     * @param keep_temp_files Keep temporary files
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "xtract_stats" as const,
        "folder_basename": folder_basename,
        "XTRACT_dir": xtract_dir,
        "xtract2diff": xtract2diff,
        "keep_temp_files": keep_temp_files,
    };
    if (reference_image !== null) {
        params["reference_image"] = reference_image;
    }
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    if (structures_file !== null) {
        params["structures_file"] = structures_file;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (measurements !== null) {
        params["measurements"] = measurements;
    }
    return params;
}


function xtract_stats_cargs(
    params: XtractStatsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("xtract_stats");
    cargs.push(
        "-d",
        (params["folder_basename"] ?? null)
    );
    cargs.push(
        "-xtract",
        (params["XTRACT_dir"] ?? null)
    );
    cargs.push(
        "-w",
        (params["xtract2diff"] ?? null)
    );
    if ((params["reference_image"] ?? null) !== null) {
        cargs.push(
            "-r",
            execution.inputFile((params["reference_image"] ?? null))
        );
    }
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "-out",
            (params["output_file"] ?? null)
        );
    }
    if ((params["structures_file"] ?? null) !== null) {
        cargs.push(
            "-str",
            execution.inputFile((params["structures_file"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-thr",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["measurements"] ?? null) !== null) {
        cargs.push(
            "-meas",
            (params["measurements"] ?? null)
        );
    }
    if ((params["keep_temp_files"] ?? null)) {
        cargs.push("-keepfiles");
    }
    return cargs;
}


function xtract_stats_outputs(
    params: XtractStatsParameters,
    execution: Execution,
): XtractStatsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: XtractStatsOutputs = {
        root: execution.outputFile("."),
        csv_output: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function xtract_stats_execute(
    params: XtractStatsParameters,
    execution: Execution,
): XtractStatsOutputs {
    /**
     * Quantitative evaluation tool of XTRACT results in neuroimaging.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `XtractStatsOutputs`).
     */
    params = execution.params(params)
    const cargs = xtract_stats_cargs(params, execution)
    const ret = xtract_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function xtract_stats(
    folder_basename: string,
    xtract_dir: string,
    xtract2diff: string,
    reference_image: InputPathType | null = null,
    output_file: string | null = null,
    structures_file: InputPathType | null = null,
    threshold: number | null = null,
    measurements: string | null = null,
    keep_temp_files: boolean = false,
    runner: Runner | null = null,
): XtractStatsOutputs {
    /**
     * Quantitative evaluation tool of XTRACT results in neuroimaging.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param folder_basename Path to microstructure folder and basename of data (e.g. /home/DTI/dti_)
     * @param xtract_dir Path to XTRACT output folder
     * @param xtract2diff EITHER XTRACT results to diffusion space transform OR 'native' if tracts are already in diffusion space
     * @param reference_image If not 'native', provide reference image in diffusion space (e.g. /home/DTI/dti_FA)
     * @param output_file Output filepath (Default <XTRACT_dir>/stats.csv)
     * @param structures_file Structures file (as in XTRACT) (Default is all tracts under <XTRACT_dir>)
     * @param threshold Threshold applied to tract probability map (default = 0.001 = 0.1%)
     * @param measurements Comma separated list of features to extract (Default = vol,prob,length,FA,MD - assumes DTI folder has been provided). vol = tract volume, prob = tract probability, length = tract length. Additional metrics must follow file naming conventions. e.g. for dti_L1 use 'L1'
     * @param keep_temp_files Keep temporary files
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `XtractStatsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XTRACT_STATS_METADATA);
    const params = xtract_stats_params(folder_basename, xtract_dir, xtract2diff, reference_image, output_file, structures_file, threshold, measurements, keep_temp_files)
    return xtract_stats_execute(params, execution);
}


export {
      XTRACT_STATS_METADATA,
      XtractStatsOutputs,
      XtractStatsParameters,
      xtract_stats,
      xtract_stats_params,
};
