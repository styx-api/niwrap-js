// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NICCC_METADATA: Metadata = {
    id: "38ab5aeadd2358c30dcd70e6045a73c5e0e67cb5.boutiques",
    name: "niccc",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface NicccParameters {
    "@type": "afni.niccc";
    "streamspec": string;
    "duplicate": boolean;
    "nodata": boolean;
    "attribute"?: string | null | undefined;
    "match"?: string | null | undefined;
    "file": boolean;
    "string": boolean;
    "stdout": boolean;
    "hash": boolean;
    "quiet": boolean;
    "find_attr"?: Array<string> | null | undefined;
    "skip_attr"?: Array<string> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.niccc": niccc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.niccc": niccc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `niccc(...)`.
 *
 * @interface
 */
interface NicccOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Results output to stderr
     */
    stderr_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param streamspec A string defining a NIML stream
 * @param duplicate Duplicate the element before showing it. This is to test NI_duplicate function.
 * @param nodata Show header parts only in output
 * @param attribute Dump the value of attribute ATTR
 * @param match Match attribute: If MATCH is exact, then attribute name is matched exactly. If MATCH is partial, then a match of all the characters in ATTR is enough.
 * @param file Streamspec is a filename.
 * @param string_ Streamspec is an element string like: '<T font=9 coords="2.3 23 2"/>'
 * @param stdout Write elements to stdout, instead of stderr
 * @param hash Put the # at the beginning of lines with no data
 * @param quiet Quiet stderr messages, and don't echo attribute name with -attribute option
 * @param find_attr Only output elements that have an attribute ATTR of value ATTRVAL.
 * @param skip_attr Do not output elements that have an attribute ATTR of value ATTRVAL.
 *
 * @returns Parameter dictionary
 */
function niccc_params(
    streamspec: string,
    duplicate: boolean = false,
    nodata: boolean = false,
    attribute: string | null = null,
    match: string | null = null,
    file: boolean = false,
    string_: boolean = false,
    stdout: boolean = false,
    hash: boolean = false,
    quiet: boolean = false,
    find_attr: Array<string> | null = null,
    skip_attr: Array<string> | null = null,
): NicccParameters {
    const params = {
        "@type": "afni.niccc" as const,
        "streamspec": streamspec,
        "duplicate": duplicate,
        "nodata": nodata,
        "file": file,
        "string": string_,
        "stdout": stdout,
        "hash": hash,
        "quiet": quiet,
    };
    if (attribute !== null) {
        params["attribute"] = attribute;
    }
    if (match !== null) {
        params["match"] = match;
    }
    if (find_attr !== null) {
        params["find_attr"] = find_attr;
    }
    if (skip_attr !== null) {
        params["skip_attr"] = skip_attr;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function niccc_cargs(
    params: NicccParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("niccc");
    cargs.push((params["streamspec"] ?? null));
    if ((params["duplicate"] ?? null)) {
        cargs.push("-dup");
    }
    if ((params["nodata"] ?? null)) {
        cargs.push("-nodata");
    }
    if ((params["attribute"] ?? null) !== null) {
        cargs.push(
            "-attribute",
            (params["attribute"] ?? null)
        );
    }
    if ((params["match"] ?? null) !== null) {
        cargs.push(
            "-match",
            (params["match"] ?? null)
        );
    }
    if ((params["file"] ?? null)) {
        cargs.push("-f");
    }
    if ((params["string"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["stdout"] ?? null)) {
        cargs.push("-stdout");
    }
    if ((params["hash"] ?? null)) {
        cargs.push("-#");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["find_attr"] ?? null) !== null) {
        cargs.push(
            "-find_nel_with_attr",
            ...(params["find_attr"] ?? null)
        );
    }
    if ((params["skip_attr"] ?? null) !== null) {
        cargs.push(
            "-skip_nel_with_attr",
            ...(params["skip_attr"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function niccc_outputs(
    params: NicccParameters,
    execution: Execution,
): NicccOutputs {
    const ret: NicccOutputs = {
        root: execution.outputFile("."),
        stderr_output: execution.outputFile(["stderr"].join('')),
    };
    return ret;
}


/**
 * niccc
 *
 * A program for conducting certain NIML tests on input from streamspec and write the results to stderr.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NicccOutputs`).
 */
function niccc_execute(
    params: NicccParameters,
    runner: Runner | null = null,
): NicccOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NICCC_METADATA);
    params = execution.params(params)
    const cargs = niccc_cargs(params, execution)
    const ret = niccc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * niccc
 *
 * A program for conducting certain NIML tests on input from streamspec and write the results to stderr.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param streamspec A string defining a NIML stream
 * @param duplicate Duplicate the element before showing it. This is to test NI_duplicate function.
 * @param nodata Show header parts only in output
 * @param attribute Dump the value of attribute ATTR
 * @param match Match attribute: If MATCH is exact, then attribute name is matched exactly. If MATCH is partial, then a match of all the characters in ATTR is enough.
 * @param file Streamspec is a filename.
 * @param string_ Streamspec is an element string like: '<T font=9 coords="2.3 23 2"/>'
 * @param stdout Write elements to stdout, instead of stderr
 * @param hash Put the # at the beginning of lines with no data
 * @param quiet Quiet stderr messages, and don't echo attribute name with -attribute option
 * @param find_attr Only output elements that have an attribute ATTR of value ATTRVAL.
 * @param skip_attr Do not output elements that have an attribute ATTR of value ATTRVAL.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NicccOutputs`).
 */
function niccc(
    streamspec: string,
    duplicate: boolean = false,
    nodata: boolean = false,
    attribute: string | null = null,
    match: string | null = null,
    file: boolean = false,
    string_: boolean = false,
    stdout: boolean = false,
    hash: boolean = false,
    quiet: boolean = false,
    find_attr: Array<string> | null = null,
    skip_attr: Array<string> | null = null,
    runner: Runner | null = null,
): NicccOutputs {
    const params = niccc_params(streamspec, duplicate, nodata, attribute, match, file, string_, stdout, hash, quiet, find_attr, skip_attr)
    return niccc_execute(params, runner);
}


export {
      NICCC_METADATA,
      NicccOutputs,
      NicccParameters,
      niccc,
      niccc_execute,
      niccc_params,
};
