// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TBSS_1_PREPROC_METADATA: Metadata = {
    id: "4f04562a7b05be2549dde3df1b1c7f328fc44461.boutiques",
    name: "tbss_1_preproc",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Tbss1PreprocParameters {
    "__STYXTYPE__": "tbss_1_preproc";
    "images": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tbss_1_preproc": tbss_1_preproc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tbss_1_preproc(...)`.
 *
 * @interface
 */
interface Tbss1PreprocOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function tbss_1_preproc_params(
    images: Array<InputPathType>,
): Tbss1PreprocParameters {
    /**
     * Build parameters.
    
     * @param images List of input images (e.g. subj1_FA.nii.gz subj2_FA.nii.gz ...)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tbss_1_preproc" as const,
        "images": images,
    };
    return params;
}


function tbss_1_preproc_cargs(
    params: Tbss1PreprocParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tbss_1_preproc");
    cargs.push(...(params["images"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function tbss_1_preproc_outputs(
    params: Tbss1PreprocParameters,
    execution: Execution,
): Tbss1PreprocOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Tbss1PreprocOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function tbss_1_preproc_execute(
    params: Tbss1PreprocParameters,
    execution: Execution,
): Tbss1PreprocOutputs {
    /**
     * TBSS (Tract-Based Spatial Statistics) - Step 1: Preprocessing.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Tbss1PreprocOutputs`).
     */
    params = execution.params(params)
    const cargs = tbss_1_preproc_cargs(params, execution)
    const ret = tbss_1_preproc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tbss_1_preproc(
    images: Array<InputPathType>,
    runner: Runner | null = null,
): Tbss1PreprocOutputs {
    /**
     * TBSS (Tract-Based Spatial Statistics) - Step 1: Preprocessing.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param images List of input images (e.g. subj1_FA.nii.gz subj2_FA.nii.gz ...)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Tbss1PreprocOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TBSS_1_PREPROC_METADATA);
    const params = tbss_1_preproc_params(images)
    return tbss_1_preproc_execute(params, execution);
}


export {
      TBSS_1_PREPROC_METADATA,
      Tbss1PreprocOutputs,
      Tbss1PreprocParameters,
      tbss_1_preproc,
      tbss_1_preproc_params,
};
