// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_TARGET_POS_METADATA: Metadata = {
    id: "8a1f7e5c9eef8b24a14e229ba9fabf1762b4bc4f.boutiques",
    name: "mris_target_pos",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisTargetPosParameters {
    "__STYXTYPE__": "mris_target_pos";
    "input_volume": InputPathType;
    "input_surface": InputPathType;
    "output_surface": string;
    "adgws_file": string;
    "threshold_values"?: Array<number> | null | undefined;
    "label"?: string | null | undefined;
    "interpolation_method"?: string | null | undefined;
    "debug_vertex"?: number | null | undefined;
    "cbv_flag": boolean;
    "debug_flag": boolean;
    "check_options": boolean;
    "help_flag": boolean;
    "version_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_target_pos": mris_target_pos_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_target_pos(...)`.
 *
 * @interface
 */
interface MrisTargetPosOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_target_pos_params(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_surface: string,
    adgws_file: string,
    threshold_values: Array<number> | null = null,
    label: string | null = null,
    interpolation_method: string | null = null,
    debug_vertex: number | null = null,
    cbv_flag: boolean = false,
    debug_flag: boolean = false,
    check_options: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
): MrisTargetPosParameters {
    /**
     * Build parameters.
    
     * @param input_volume Input volume file
     * @param input_surface Input surface file
     * @param output_surface Output surface file
     * @param adgws_file ADGWS file
     * @param threshold_values Threshold values for inward and outward target positions
     * @param label Label for processing
     * @param interpolation_method Interpolation method name
     * @param debug_vertex Vertex number for debugging
     * @param cbv_flag CBV flag
     * @param debug_flag Turn on debugging
     * @param check_options Check options without running the program
     * @param help_flag Display help information
     * @param version_flag Display version information and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_target_pos" as const,
        "input_volume": input_volume,
        "input_surface": input_surface,
        "output_surface": output_surface,
        "adgws_file": adgws_file,
        "cbv_flag": cbv_flag,
        "debug_flag": debug_flag,
        "check_options": check_options,
        "help_flag": help_flag,
        "version_flag": version_flag,
    };
    if (threshold_values !== null) {
        params["threshold_values"] = threshold_values;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (interpolation_method !== null) {
        params["interpolation_method"] = interpolation_method;
    }
    if (debug_vertex !== null) {
        params["debug_vertex"] = debug_vertex;
    }
    return params;
}


function mris_target_pos_cargs(
    params: MrisTargetPosParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_target_pos");
    cargs.push(
        "--v",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "--i",
        execution.inputFile((params["input_surface"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output_surface"] ?? null)
    );
    cargs.push(
        "--adgws",
        (params["adgws_file"] ?? null)
    );
    if ((params["threshold_values"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            ...(params["threshold_values"] ?? null).map(String)
        );
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "--l",
            (params["label"] ?? null)
        );
    }
    if ((params["interpolation_method"] ?? null) !== null) {
        cargs.push(
            "--interp",
            (params["interpolation_method"] ?? null)
        );
    }
    if ((params["debug_vertex"] ?? null) !== null) {
        cargs.push(
            "--debug-vertex",
            String((params["debug_vertex"] ?? null))
        );
    }
    if ((params["cbv_flag"] ?? null)) {
        cargs.push("--cbv");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_options"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function mris_target_pos_outputs(
    params: MrisTargetPosParameters,
    execution: Execution,
): MrisTargetPosOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisTargetPosOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_target_pos_execute(
    params: MrisTargetPosParameters,
    execution: Execution,
): MrisTargetPosOutputs {
    /**
     * Tool for setting target positions of a surface using input imaging data and other parameters.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisTargetPosOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_target_pos_cargs(params, execution)
    const ret = mris_target_pos_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_target_pos(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_surface: string,
    adgws_file: string,
    threshold_values: Array<number> | null = null,
    label: string | null = null,
    interpolation_method: string | null = null,
    debug_vertex: number | null = null,
    cbv_flag: boolean = false,
    debug_flag: boolean = false,
    check_options: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
    runner: Runner | null = null,
): MrisTargetPosOutputs {
    /**
     * Tool for setting target positions of a surface using input imaging data and other parameters.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_volume Input volume file
     * @param input_surface Input surface file
     * @param output_surface Output surface file
     * @param adgws_file ADGWS file
     * @param threshold_values Threshold values for inward and outward target positions
     * @param label Label for processing
     * @param interpolation_method Interpolation method name
     * @param debug_vertex Vertex number for debugging
     * @param cbv_flag CBV flag
     * @param debug_flag Turn on debugging
     * @param check_options Check options without running the program
     * @param help_flag Display help information
     * @param version_flag Display version information and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisTargetPosOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_TARGET_POS_METADATA);
    const params = mris_target_pos_params(input_volume, input_surface, output_surface, adgws_file, threshold_values, label, interpolation_method, debug_vertex, cbv_flag, debug_flag, check_options, help_flag, version_flag)
    return mris_target_pos_execute(params, execution);
}


export {
      MRIS_TARGET_POS_METADATA,
      MrisTargetPosOutputs,
      MrisTargetPosParameters,
      mris_target_pos,
      mris_target_pos_params,
};
