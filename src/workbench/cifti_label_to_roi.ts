// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_LABEL_TO_ROI_METADATA: Metadata = {
    id: "f43e32f3613afb19c5aaf829734565b6d97fb5d7.boutiques",
    name: "cifti-label-to-roi",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiLabelToRoiParameters {
    "@type": "workbench.cifti-label-to-roi";
    "label_in": InputPathType;
    "scalar_out": string;
    "opt_name_label_name"?: string | null | undefined;
    "opt_key_label_key"?: number | null | undefined;
    "opt_map_map"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-label-to-roi": cifti_label_to_roi_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-label-to-roi": cifti_label_to_roi_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cifti_label_to_roi(...)`.
 *
 * @interface
 */
interface CiftiLabelToRoiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti scalar file
     */
    scalar_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label_in the input cifti label file
 * @param scalar_out the output cifti scalar file
 * @param opt_name_label_name select label by name: the label name that you want an roi of
 * @param opt_key_label_key select label by key: the label key that you want an roi of
 * @param opt_map_map select a single label map to use: the map number or name
 *
 * @returns Parameter dictionary
 */
function cifti_label_to_roi_params(
    label_in: InputPathType,
    scalar_out: string,
    opt_name_label_name: string | null = null,
    opt_key_label_key: number | null = null,
    opt_map_map: string | null = null,
): CiftiLabelToRoiParameters {
    const params = {
        "@type": "workbench.cifti-label-to-roi" as const,
        "label_in": label_in,
        "scalar_out": scalar_out,
    };
    if (opt_name_label_name !== null) {
        params["opt_name_label_name"] = opt_name_label_name;
    }
    if (opt_key_label_key !== null) {
        params["opt_key_label_key"] = opt_key_label_key;
    }
    if (opt_map_map !== null) {
        params["opt_map_map"] = opt_map_map;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_label_to_roi_cargs(
    params: CiftiLabelToRoiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-label-to-roi");
    cargs.push(execution.inputFile((params["label_in"] ?? null)));
    cargs.push((params["scalar_out"] ?? null));
    if ((params["opt_name_label_name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["opt_name_label_name"] ?? null)
        );
    }
    if ((params["opt_key_label_key"] ?? null) !== null) {
        cargs.push(
            "-key",
            String((params["opt_key_label_key"] ?? null))
        );
    }
    if ((params["opt_map_map"] ?? null) !== null) {
        cargs.push(
            "-map",
            (params["opt_map_map"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_label_to_roi_outputs(
    params: CiftiLabelToRoiParameters,
    execution: Execution,
): CiftiLabelToRoiOutputs {
    const ret: CiftiLabelToRoiOutputs = {
        root: execution.outputFile("."),
        scalar_out: execution.outputFile([(params["scalar_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-label-to-roi
 *
 * Make a cifti label into an roi.
 *
 * For each map in <label-in>, a map is created in <scalar-out> where all locations labeled with <label-name> or with a key of <label-key> are given a value of 1, and all other locations are given 0.  Exactly one of -name and -key must be specified.  Specify -map to use only one map from <label-in>.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelToRoiOutputs`).
 */
function cifti_label_to_roi_execute(
    params: CiftiLabelToRoiParameters,
    runner: Runner | null = null,
): CiftiLabelToRoiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_LABEL_TO_ROI_METADATA);
    params = execution.params(params)
    const cargs = cifti_label_to_roi_cargs(params, execution)
    const ret = cifti_label_to_roi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-label-to-roi
 *
 * Make a cifti label into an roi.
 *
 * For each map in <label-in>, a map is created in <scalar-out> where all locations labeled with <label-name> or with a key of <label-key> are given a value of 1, and all other locations are given 0.  Exactly one of -name and -key must be specified.  Specify -map to use only one map from <label-in>.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param label_in the input cifti label file
 * @param scalar_out the output cifti scalar file
 * @param opt_name_label_name select label by name: the label name that you want an roi of
 * @param opt_key_label_key select label by key: the label key that you want an roi of
 * @param opt_map_map select a single label map to use: the map number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelToRoiOutputs`).
 */
function cifti_label_to_roi(
    label_in: InputPathType,
    scalar_out: string,
    opt_name_label_name: string | null = null,
    opt_key_label_key: number | null = null,
    opt_map_map: string | null = null,
    runner: Runner | null = null,
): CiftiLabelToRoiOutputs {
    const params = cifti_label_to_roi_params(label_in, scalar_out, opt_name_label_name, opt_key_label_key, opt_map_map)
    return cifti_label_to_roi_execute(params, runner);
}


export {
      CIFTI_LABEL_TO_ROI_METADATA,
      CiftiLabelToRoiOutputs,
      CiftiLabelToRoiParameters,
      cifti_label_to_roi,
      cifti_label_to_roi_execute,
      cifti_label_to_roi_params,
};
