// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_REGISTRATION_SY_N_SH_METADATA: Metadata = {
    id: "029fb8014cb72b8e3e10e60f5b05a9adf14dc918.boutiques",
    name: "antsRegistrationSyN.sh",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsRegistrationSyNShParameters {
    "__STYXTYPE__": "antsRegistrationSyN.sh";
    "image_dimension": 2 | 3;
    "fixed_image": InputPathType;
    "moving_image": InputPathType;
    "output_prefix": string;
    "threads"?: number | null | undefined;
    "initial_transform"?: Array<string> | null | undefined;
    "transform_type"?: "t" | "r" | "a" | "s" | "sr" | "so" | "b" | "br" | "bo" | null | undefined;
    "radius"?: number | null | undefined;
    "spline_distance"?: number | null | undefined;
    "gradient_step"?: number | null | undefined;
    "masks"?: string | null | undefined;
    "precision_type"?: "f" | "d" | null | undefined;
    "use_histogram_matching"?: 0 | 1 | null | undefined;
    "use_repro_mode"?: 0 | 1 | null | undefined;
    "collapse_output_transforms"?: 0 | 1 | null | undefined;
    "random_seed"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "antsRegistrationSyN.sh": ants_registration_sy_n_sh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "antsRegistrationSyN.sh": ants_registration_sy_n_sh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_registration_sy_n_sh(...)`.
 *
 * @interface
 */
interface AntsRegistrationSyNShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Affine transformation matrix for registration
     */
    affine_transform: OutputPathType;
    /**
     * Inverse warp field for registration
     */
    inverse_warp: OutputPathType;
    /**
     * Forward warp field for registration
     */
    forward_warp: OutputPathType;
}


function ants_registration_sy_n_sh_params(
    image_dimension: 2 | 3,
    fixed_image: InputPathType,
    moving_image: InputPathType,
    output_prefix: string,
    threads: number | null = null,
    initial_transform: Array<string> | null = null,
    transform_type: "t" | "r" | "a" | "s" | "sr" | "so" | "b" | "br" | "bo" | null = null,
    radius: number | null = null,
    spline_distance: number | null = null,
    gradient_step: number | null = null,
    masks: string | null = null,
    precision_type: "f" | "d" | null = null,
    use_histogram_matching: 0 | 1 | null = null,
    use_repro_mode: 0 | 1 | null = null,
    collapse_output_transforms: 0 | 1 | null = null,
    random_seed: number | null = null,
): AntsRegistrationSyNShParameters {
    /**
     * Build parameters.
    
     * @param image_dimension Image dimension: 2 or 3 (for 2 or 3-dimensional registration of a single volume)
     * @param fixed_image Fixed image(s) or source image(s) or reference image(s)
     * @param moving_image Moving image(s) or target image(s)
     * @param output_prefix A prefix that is prepended to all output files
     * @param threads Number of threads (default = ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS if defined, otherwise 1)
     * @param initial_transform Initial transform(s) --- order specified on the command line matters
     * @param transform_type Transform type (default = 's'). Options:
 - t: translation (1 stage)
 - r: rigid (1 stage)
 - a: rigid + affine (2 stages)
 - s: rigid + affine + deformable syn (3 stages)
 - sr: rigid + deformable syn (2 stages)
 - so: deformable syn only (1 stage)
 - b: rigid + affine + deformable b-spline syn (3 stages)
 - br: rigid + deformable b-spline syn (2 stages)
 - bo: deformable b-spline syn only (1 stage)
     * @param radius Radius for cross correlation metric used during SyN stage (default = 4)
     * @param spline_distance Spline distance for deformable B-spline SyN transform (default = 26)
     * @param gradient_step Gradient step size for SyN and B-spline SyN (default = 0.1)
     * @param masks Mask(s) for the fixed image space, or for the fixed and moving image space in the format 'fixedMask,MovingMask'. Use -x once to specify mask(s) to be used for all stages or use -x for each 'stage' (cf -t option). If no mask is to be used for a particular stage, the keyword 'NULL' should be used in place of file names.
     * @param precision_type Precision type (default = 'd'). Options:
 - f: float
 - d: double
     * @param use_histogram_matching Use histogram matching (default = 0). Options:
 - 0: false
 - 1: true
     * @param use_repro_mode Use 'repro' mode for exact reproducibility of output. Uses GC metric for linear stages and a fixed random seed (default = 0). Options:
 - 0: false
 - 1: true
     * @param collapse_output_transforms Collapse output transforms (default = 1). Options:
 - 0: false
 - 1: true
     * @param random_seed Fix random seed to an int value
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "antsRegistrationSyN.sh" as const,
        "image_dimension": image_dimension,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "output_prefix": output_prefix,
    };
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (initial_transform !== null) {
        params["initial_transform"] = initial_transform;
    }
    if (transform_type !== null) {
        params["transform_type"] = transform_type;
    }
    if (radius !== null) {
        params["radius"] = radius;
    }
    if (spline_distance !== null) {
        params["spline_distance"] = spline_distance;
    }
    if (gradient_step !== null) {
        params["gradient_step"] = gradient_step;
    }
    if (masks !== null) {
        params["masks"] = masks;
    }
    if (precision_type !== null) {
        params["precision_type"] = precision_type;
    }
    if (use_histogram_matching !== null) {
        params["use_histogram_matching"] = use_histogram_matching;
    }
    if (use_repro_mode !== null) {
        params["use_repro_mode"] = use_repro_mode;
    }
    if (collapse_output_transforms !== null) {
        params["collapse_output_transforms"] = collapse_output_transforms;
    }
    if (random_seed !== null) {
        params["random_seed"] = random_seed;
    }
    return params;
}


function ants_registration_sy_n_sh_cargs(
    params: AntsRegistrationSyNShParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("antsRegistrationSyN.sh");
    cargs.push(
        "-d",
        String((params["image_dimension"] ?? null))
    );
    cargs.push(
        "-f",
        execution.inputFile((params["fixed_image"] ?? null))
    );
    cargs.push(
        "-m",
        execution.inputFile((params["moving_image"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_prefix"] ?? null)
    );
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["threads"] ?? null))
        );
    }
    if ((params["initial_transform"] ?? null) !== null) {
        cargs.push(
            "-i",
            ["[", (params["initial_transform"] ?? null).join(","), "]"].join('')
        );
    }
    if ((params["transform_type"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["transform_type"] ?? null)
        );
    }
    if ((params["radius"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["radius"] ?? null))
        );
    }
    if ((params["spline_distance"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["spline_distance"] ?? null))
        );
    }
    if ((params["gradient_step"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["gradient_step"] ?? null))
        );
    }
    if ((params["masks"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["masks"] ?? null)
        );
    }
    if ((params["precision_type"] ?? null) !== null) {
        cargs.push(
            "-p",
            (params["precision_type"] ?? null)
        );
    }
    if ((params["use_histogram_matching"] ?? null) !== null) {
        cargs.push(
            "-j",
            String((params["use_histogram_matching"] ?? null))
        );
    }
    if ((params["use_repro_mode"] ?? null) !== null) {
        cargs.push(
            "-y",
            String((params["use_repro_mode"] ?? null))
        );
    }
    if ((params["collapse_output_transforms"] ?? null) !== null) {
        cargs.push(
            "-z",
            String((params["collapse_output_transforms"] ?? null))
        );
    }
    if ((params["random_seed"] ?? null) !== null) {
        cargs.push(
            "-e",
            String((params["random_seed"] ?? null))
        );
    }
    return cargs;
}


function ants_registration_sy_n_sh_outputs(
    params: AntsRegistrationSyNShParameters,
    execution: Execution,
): AntsRegistrationSyNShOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AntsRegistrationSyNShOutputs = {
        root: execution.outputFile("."),
        affine_transform: execution.outputFile([(params["output_prefix"] ?? null), "0GenericAffine.mat"].join('')),
        inverse_warp: execution.outputFile([(params["output_prefix"] ?? null), "1InverseWarp.nii.gz"].join('')),
        forward_warp: execution.outputFile([(params["output_prefix"] ?? null), "1Warp.nii.gz"].join('')),
    };
    return ret;
}


function ants_registration_sy_n_sh_execute(
    params: AntsRegistrationSyNShParameters,
    execution: Execution,
): AntsRegistrationSyNShOutputs {
    /**
     * Script for simplified symmetric image registration using ANTs.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AntsRegistrationSyNShOutputs`).
     */
    params = execution.params(params)
    const cargs = ants_registration_sy_n_sh_cargs(params, execution)
    const ret = ants_registration_sy_n_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ants_registration_sy_n_sh(
    image_dimension: 2 | 3,
    fixed_image: InputPathType,
    moving_image: InputPathType,
    output_prefix: string,
    threads: number | null = null,
    initial_transform: Array<string> | null = null,
    transform_type: "t" | "r" | "a" | "s" | "sr" | "so" | "b" | "br" | "bo" | null = null,
    radius: number | null = null,
    spline_distance: number | null = null,
    gradient_step: number | null = null,
    masks: string | null = null,
    precision_type: "f" | "d" | null = null,
    use_histogram_matching: 0 | 1 | null = null,
    use_repro_mode: 0 | 1 | null = null,
    collapse_output_transforms: 0 | 1 | null = null,
    random_seed: number | null = null,
    runner: Runner | null = null,
): AntsRegistrationSyNShOutputs {
    /**
     * Script for simplified symmetric image registration using ANTs.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param image_dimension Image dimension: 2 or 3 (for 2 or 3-dimensional registration of a single volume)
     * @param fixed_image Fixed image(s) or source image(s) or reference image(s)
     * @param moving_image Moving image(s) or target image(s)
     * @param output_prefix A prefix that is prepended to all output files
     * @param threads Number of threads (default = ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS if defined, otherwise 1)
     * @param initial_transform Initial transform(s) --- order specified on the command line matters
     * @param transform_type Transform type (default = 's'). Options:
 - t: translation (1 stage)
 - r: rigid (1 stage)
 - a: rigid + affine (2 stages)
 - s: rigid + affine + deformable syn (3 stages)
 - sr: rigid + deformable syn (2 stages)
 - so: deformable syn only (1 stage)
 - b: rigid + affine + deformable b-spline syn (3 stages)
 - br: rigid + deformable b-spline syn (2 stages)
 - bo: deformable b-spline syn only (1 stage)
     * @param radius Radius for cross correlation metric used during SyN stage (default = 4)
     * @param spline_distance Spline distance for deformable B-spline SyN transform (default = 26)
     * @param gradient_step Gradient step size for SyN and B-spline SyN (default = 0.1)
     * @param masks Mask(s) for the fixed image space, or for the fixed and moving image space in the format 'fixedMask,MovingMask'. Use -x once to specify mask(s) to be used for all stages or use -x for each 'stage' (cf -t option). If no mask is to be used for a particular stage, the keyword 'NULL' should be used in place of file names.
     * @param precision_type Precision type (default = 'd'). Options:
 - f: float
 - d: double
     * @param use_histogram_matching Use histogram matching (default = 0). Options:
 - 0: false
 - 1: true
     * @param use_repro_mode Use 'repro' mode for exact reproducibility of output. Uses GC metric for linear stages and a fixed random seed (default = 0). Options:
 - 0: false
 - 1: true
     * @param collapse_output_transforms Collapse output transforms (default = 1). Options:
 - 0: false
 - 1: true
     * @param random_seed Fix random seed to an int value
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AntsRegistrationSyNShOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_REGISTRATION_SY_N_SH_METADATA);
    const params = ants_registration_sy_n_sh_params(image_dimension, fixed_image, moving_image, output_prefix, threads, initial_transform, transform_type, radius, spline_distance, gradient_step, masks, precision_type, use_histogram_matching, use_repro_mode, collapse_output_transforms, random_seed)
    return ants_registration_sy_n_sh_execute(params, execution);
}


export {
      ANTS_REGISTRATION_SY_N_SH_METADATA,
      AntsRegistrationSyNShOutputs,
      AntsRegistrationSyNShParameters,
      ants_registration_sy_n_sh,
      ants_registration_sy_n_sh_params,
};
