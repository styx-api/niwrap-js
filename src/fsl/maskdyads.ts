// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MASKDYADS_METADATA: Metadata = {
    id: "7202ebf9fac4f093011a592184e5ec67cfb619d5.boutiques",
    name: "maskdyads",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MaskdyadsParameters {
    "@type": "fsl.maskdyads";
    "dyads": InputPathType;
    "fsamples": InputPathType;
    "threshold"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.maskdyads": maskdyads_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `maskdyads(...)`.
 *
 * @interface
 */
interface MaskdyadsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dyads Input dyads file
 * @param fsamples Input fsamples file
 * @param threshold Threshold (default is 0.05)
 *
 * @returns Parameter dictionary
 */
function maskdyads_params(
    dyads: InputPathType,
    fsamples: InputPathType,
    threshold: number | null = 0.05,
): MaskdyadsParameters {
    const params = {
        "@type": "fsl.maskdyads" as const,
        "dyads": dyads,
        "fsamples": fsamples,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function maskdyads_cargs(
    params: MaskdyadsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("maskdyads");
    cargs.push(execution.inputFile((params["dyads"] ?? null)));
    cargs.push(execution.inputFile((params["fsamples"] ?? null)));
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "[THR]",
            String((params["threshold"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function maskdyads_outputs(
    params: MaskdyadsParameters,
    execution: Execution,
): MaskdyadsOutputs {
    const ret: MaskdyadsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Tool to mask dyads with threshold.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MaskdyadsOutputs`).
 */
function maskdyads_execute(
    params: MaskdyadsParameters,
    execution: Execution,
): MaskdyadsOutputs {
    params = execution.params(params)
    const cargs = maskdyads_cargs(params, execution)
    const ret = maskdyads_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool to mask dyads with threshold.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param dyads Input dyads file
 * @param fsamples Input fsamples file
 * @param threshold Threshold (default is 0.05)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MaskdyadsOutputs`).
 */
function maskdyads(
    dyads: InputPathType,
    fsamples: InputPathType,
    threshold: number | null = 0.05,
    runner: Runner | null = null,
): MaskdyadsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MASKDYADS_METADATA);
    const params = maskdyads_params(dyads, fsamples, threshold)
    return maskdyads_execute(params, execution);
}


export {
      MASKDYADS_METADATA,
      MaskdyadsOutputs,
      MaskdyadsParameters,
      maskdyads,
      maskdyads_cargs,
      maskdyads_execute,
      maskdyads_outputs,
      maskdyads_params,
};
