// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_ANATOMICAL_STATS_METADATA: Metadata = {
    id: "117a911cbb95d3ef62e62e40a756554d2c622c20.boutiques",
    name: "mris_anatomical_stats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisAnatomicalStatsParameters {
    "@type": "freesurfer.mris_anatomical_stats";
    "subjectname": string;
    "hemisphere": string;
    "surfacename"?: string | null | undefined;
    "thickness_range"?: Array<number> | null | undefined;
    "label_file"?: InputPathType | null | undefined;
    "thickness_file"?: InputPathType | null | undefined;
    "annotation_file"?: InputPathType | null | undefined;
    "tabular_output": boolean;
    "tablefile"?: string | null | undefined;
    "logfile"?: string | null | undefined;
    "nsmooth"?: number | null | undefined;
    "color_table"?: string | null | undefined;
    "noglobal": boolean;
    "th3_computation": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_anatomical_stats": mris_anatomical_stats_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_anatomical_stats": mris_anatomical_stats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_anatomical_stats(...)`.
 *
 * @interface
 */
interface MrisAnatomicalStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output log file of the statistics
     */
    output_log_file: OutputPathType | null;
    /**
     * Tabular output stored in a table file
     */
    output_table_file: OutputPathType | null;
    /**
     * Output annotation color table file
     */
    output_ctab_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subjectname Subject name
 * @param hemisphere Hemisphere
 * @param surfacename Surface name
 * @param thickness_range Only consider thicknesses in the specified range.
 * @param label_file Limit calculations to specified label
 * @param thickness_file Use specified file for computing thickness statistics
 * @param annotation_file Compute properties for each label in the annotation file separately
 * @param tabular_output Tabular output
 * @param tablefile Table output to tablefile. Must use -a or -l options to specify input.
 * @param logfile Write stats to file named log
 * @param nsmooth Smooth thickness map # of iterations before using it
 * @param color_table Output annotation file's color table to text file
 * @param noglobal Do not compute global brain stats
 * @param th3_computation Compute vertex-wise volume by dividing each obliquely truncated trilateral pyramid into three tetrahedra
 *
 * @returns Parameter dictionary
 */
function mris_anatomical_stats_params(
    subjectname: string,
    hemisphere: string,
    surfacename: string | null = null,
    thickness_range: Array<number> | null = null,
    label_file: InputPathType | null = null,
    thickness_file: InputPathType | null = null,
    annotation_file: InputPathType | null = null,
    tabular_output: boolean = false,
    tablefile: string | null = null,
    logfile: string | null = null,
    nsmooth: number | null = null,
    color_table: string | null = null,
    noglobal: boolean = false,
    th3_computation: boolean = false,
): MrisAnatomicalStatsParameters {
    const params = {
        "@type": "freesurfer.mris_anatomical_stats" as const,
        "subjectname": subjectname,
        "hemisphere": hemisphere,
        "tabular_output": tabular_output,
        "noglobal": noglobal,
        "th3_computation": th3_computation,
    };
    if (surfacename !== null) {
        params["surfacename"] = surfacename;
    }
    if (thickness_range !== null) {
        params["thickness_range"] = thickness_range;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (thickness_file !== null) {
        params["thickness_file"] = thickness_file;
    }
    if (annotation_file !== null) {
        params["annotation_file"] = annotation_file;
    }
    if (tablefile !== null) {
        params["tablefile"] = tablefile;
    }
    if (logfile !== null) {
        params["logfile"] = logfile;
    }
    if (nsmooth !== null) {
        params["nsmooth"] = nsmooth;
    }
    if (color_table !== null) {
        params["color_table"] = color_table;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_anatomical_stats_cargs(
    params: MrisAnatomicalStatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_anatomical_stats");
    cargs.push((params["subjectname"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    if ((params["surfacename"] ?? null) !== null) {
        cargs.push((params["surfacename"] ?? null));
    }
    if ((params["thickness_range"] ?? null) !== null) {
        cargs.push(
            "-i",
            ...(params["thickness_range"] ?? null).map(String)
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["thickness_file"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["thickness_file"] ?? null))
        );
    }
    if ((params["annotation_file"] ?? null) !== null) {
        cargs.push(
            "-a",
            execution.inputFile((params["annotation_file"] ?? null))
        );
    }
    if ((params["tabular_output"] ?? null)) {
        cargs.push("-b");
    }
    if ((params["tablefile"] ?? null) !== null) {
        cargs.push(
            "-f",
            (params["tablefile"] ?? null)
        );
    }
    if ((params["logfile"] ?? null) !== null) {
        cargs.push(
            "-log",
            (params["logfile"] ?? null)
        );
    }
    if ((params["nsmooth"] ?? null) !== null) {
        cargs.push(
            "-nsmooth",
            String((params["nsmooth"] ?? null))
        );
    }
    if ((params["color_table"] ?? null) !== null) {
        cargs.push(
            "-c",
            (params["color_table"] ?? null)
        );
    }
    if ((params["noglobal"] ?? null)) {
        cargs.push("-noglobal");
    }
    if ((params["th3_computation"] ?? null)) {
        cargs.push("-th3");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_anatomical_stats_outputs(
    params: MrisAnatomicalStatsParameters,
    execution: Execution,
): MrisAnatomicalStatsOutputs {
    const ret: MrisAnatomicalStatsOutputs = {
        root: execution.outputFile("."),
        output_log_file: ((params["logfile"] ?? null) !== null) ? execution.outputFile([(params["logfile"] ?? null), ".txt"].join('')) : null,
        output_table_file: ((params["tablefile"] ?? null) !== null) ? execution.outputFile([(params["tablefile"] ?? null), ".txt"].join('')) : null,
        output_ctab_file: ((params["color_table"] ?? null) !== null) ? execution.outputFile([(params["color_table"] ?? null), ".txt"].join('')) : null,
    };
    return ret;
}


/**
 * This program computes a number of anatomical properties.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisAnatomicalStatsOutputs`).
 */
function mris_anatomical_stats_execute(
    params: MrisAnatomicalStatsParameters,
    runner: Runner | null = null,
): MrisAnatomicalStatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_ANATOMICAL_STATS_METADATA);
    params = execution.params(params)
    const cargs = mris_anatomical_stats_cargs(params, execution)
    const ret = mris_anatomical_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program computes a number of anatomical properties.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjectname Subject name
 * @param hemisphere Hemisphere
 * @param surfacename Surface name
 * @param thickness_range Only consider thicknesses in the specified range.
 * @param label_file Limit calculations to specified label
 * @param thickness_file Use specified file for computing thickness statistics
 * @param annotation_file Compute properties for each label in the annotation file separately
 * @param tabular_output Tabular output
 * @param tablefile Table output to tablefile. Must use -a or -l options to specify input.
 * @param logfile Write stats to file named log
 * @param nsmooth Smooth thickness map # of iterations before using it
 * @param color_table Output annotation file's color table to text file
 * @param noglobal Do not compute global brain stats
 * @param th3_computation Compute vertex-wise volume by dividing each obliquely truncated trilateral pyramid into three tetrahedra
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisAnatomicalStatsOutputs`).
 */
function mris_anatomical_stats(
    subjectname: string,
    hemisphere: string,
    surfacename: string | null = null,
    thickness_range: Array<number> | null = null,
    label_file: InputPathType | null = null,
    thickness_file: InputPathType | null = null,
    annotation_file: InputPathType | null = null,
    tabular_output: boolean = false,
    tablefile: string | null = null,
    logfile: string | null = null,
    nsmooth: number | null = null,
    color_table: string | null = null,
    noglobal: boolean = false,
    th3_computation: boolean = false,
    runner: Runner | null = null,
): MrisAnatomicalStatsOutputs {
    const params = mris_anatomical_stats_params(subjectname, hemisphere, surfacename, thickness_range, label_file, thickness_file, annotation_file, tabular_output, tablefile, logfile, nsmooth, color_table, noglobal, th3_computation)
    return mris_anatomical_stats_execute(params, runner);
}


export {
      MRIS_ANATOMICAL_STATS_METADATA,
      MrisAnatomicalStatsOutputs,
      MrisAnatomicalStatsParameters,
      mris_anatomical_stats,
      mris_anatomical_stats_execute,
      mris_anatomical_stats_params,
};
