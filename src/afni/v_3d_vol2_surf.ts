// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_VOL2_SURF_METADATA: Metadata = {
    id: "22298e050bc0d8df23c0654204a19a2ced97ccfa.boutiques",
    name: "3dVol2Surf",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dVol2SurfParameters {
    "__STYXTYPE__": "3dVol2Surf";
    "spec_file": InputPathType;
    "sv": InputPathType;
    "grid_parent": InputPathType;
    "map_func": string;
    "surf_A": string;
    "surf_B"?: string | null | undefined;
    "out_1D"?: string | null | undefined;
    "out_niml"?: string | null | undefined;
    "use_norms": boolean;
    "norm_len"?: number | null | undefined;
    "first_node"?: number | null | undefined;
    "last_node"?: number | null | undefined;
    "debug_level"?: number | null | undefined;
    "dnode"?: number | null | undefined;
    "f_steps"?: number | null | undefined;
    "f_index"?: string | null | undefined;
    "f_p1_mm"?: number | null | undefined;
    "f_pn_mm"?: number | null | undefined;
    "f_p1_fr"?: number | null | undefined;
    "f_pn_fr"?: number | null | undefined;
    "skip_col_nodes": boolean;
    "skip_col_1dindex": boolean;
    "skip_col_i": boolean;
    "skip_col_j": boolean;
    "skip_col_k": boolean;
    "skip_col_vals": boolean;
    "no_headers": boolean;
    "save_seg_coords"?: string | null | undefined;
    "cmask"?: string | null | undefined;
    "gp_index"?: number | null | undefined;
    "oob_index"?: number | null | undefined;
    "oob_value"?: number | null | undefined;
    "oom_value"?: number | null | undefined;
    "outcols_afni_nsd": boolean;
    "outcols_1_result": boolean;
    "outcols_results": boolean;
    "outcols_nsd_format": boolean;
    "help": boolean;
    "hist": boolean;
    "version": boolean;
    "keep_norm_dir": boolean;
    "reverse_norm_dir": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dVol2Surf": v_3d_vol2_surf_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dVol2Surf": v_3d_vol2_surf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_vol2_surf(...)`.
 *
 * @interface
 */
interface V3dVol2SurfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * 1D output file
     */
    out_1d_file: OutputPathType | null;
    /**
     * NIML output file
     */
    out_niml_file: OutputPathType | null;
    /**
     * Segment coordinates output file
     */
    seg_coords_file: OutputPathType | null;
}


function v_3d_vol2_surf_params(
    spec_file: InputPathType,
    sv: InputPathType,
    grid_parent: InputPathType,
    map_func: string,
    surf_a: string,
    surf_b: string | null = null,
    out_1_d: string | null = null,
    out_niml: string | null = null,
    use_norms: boolean = false,
    norm_len: number | null = null,
    first_node: number | null = null,
    last_node: number | null = null,
    debug_level: number | null = null,
    dnode: number | null = null,
    f_steps: number | null = null,
    f_index: string | null = null,
    f_p1_mm: number | null = null,
    f_pn_mm: number | null = null,
    f_p1_fr: number | null = null,
    f_pn_fr: number | null = null,
    skip_col_nodes: boolean = false,
    skip_col_1dindex: boolean = false,
    skip_col_i: boolean = false,
    skip_col_j: boolean = false,
    skip_col_k: boolean = false,
    skip_col_vals: boolean = false,
    no_headers: boolean = false,
    save_seg_coords: string | null = null,
    cmask: string | null = null,
    gp_index: number | null = null,
    oob_index: number | null = null,
    oob_value: number | null = null,
    oom_value: number | null = null,
    outcols_afni_nsd: boolean = false,
    outcols_1_result: boolean = false,
    outcols_results: boolean = false,
    outcols_nsd_format: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    version: boolean = false,
    keep_norm_dir: boolean = false,
    reverse_norm_dir: boolean = false,
): V3dVol2SurfParameters {
    /**
     * Build parameters.
    
     * @param spec_file SUMA spec file
     * @param sv AFNI volume dataset mapped by the surface
     * @param grid_parent AFNI volume dataset used as a grid and orientation master for output
     * @param map_func Filter for values along the segment
     * @param surf_a Name of surface A from the spec file
     * @param surf_b Name of surface B from the spec file
     * @param out_1_d Specify a 1D file for the output
     * @param out_niml Specify a niml file for the output
     * @param use_norms Use normals for second surface
     * @param norm_len Length for node normals
     * @param first_node Skip all previous nodes
     * @param last_node Skip all following nodes
     * @param debug_level Verbose output level
     * @param dnode Node for debug
     * @param f_steps Number of steps along each segment (defines the number of evenly spaced points along each segment)
     * @param f_index Whether to use all segment point values or only those corresponding to unique volume voxels
     * @param f_p1_mm Distance in millimeters to add to the first point of each line segment
     * @param f_pn_mm Distance in millimeters to add to the second point of each line segment
     * @param f_p1_fr Fractional distance to add to the first point of each line segment
     * @param f_pn_fr Fractional distance to add to the second point of each line segment
     * @param skip_col_nodes Do not output node column
     * @param skip_col_1dindex Do not output 1dindex column
     * @param skip_col_i Do not output i column
     * @param skip_col_j Do not output j column
     * @param skip_col_k Do not output k column
     * @param skip_col_vals Do not output vals column
     * @param no_headers Do not output column headers
     * @param save_seg_coords Save segment coordinates to a file
     * @param cmask Command for dataset mask
     * @param gp_index Choose grid_parent sub-brick
     * @param oob_index Specify default index for out of bounds nodes
     * @param oob_value Specify default value for out of bounds nodes
     * @param oom_value Specify default value for out of mask nodes
     * @param outcols_afni_nsd Output nodes and one result column
     * @param outcols_1_result Output only one result column
     * @param outcols_results Output only all result columns
     * @param outcols_nsd_format Output nodes and all results (NI_SURF_DSET format)
     * @param help Show this help
     * @param hist Show revision history
     * @param version Show version information
     * @param keep_norm_dir Keep the direction of the normals
     * @param reverse_norm_dir Reverse the normal directions
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dVol2Surf" as const,
        "spec_file": spec_file,
        "sv": sv,
        "grid_parent": grid_parent,
        "map_func": map_func,
        "surf_A": surf_a,
        "use_norms": use_norms,
        "skip_col_nodes": skip_col_nodes,
        "skip_col_1dindex": skip_col_1dindex,
        "skip_col_i": skip_col_i,
        "skip_col_j": skip_col_j,
        "skip_col_k": skip_col_k,
        "skip_col_vals": skip_col_vals,
        "no_headers": no_headers,
        "outcols_afni_nsd": outcols_afni_nsd,
        "outcols_1_result": outcols_1_result,
        "outcols_results": outcols_results,
        "outcols_nsd_format": outcols_nsd_format,
        "help": help,
        "hist": hist,
        "version": version,
        "keep_norm_dir": keep_norm_dir,
        "reverse_norm_dir": reverse_norm_dir,
    };
    if (surf_b !== null) {
        params["surf_B"] = surf_b;
    }
    if (out_1_d !== null) {
        params["out_1D"] = out_1_d;
    }
    if (out_niml !== null) {
        params["out_niml"] = out_niml;
    }
    if (norm_len !== null) {
        params["norm_len"] = norm_len;
    }
    if (first_node !== null) {
        params["first_node"] = first_node;
    }
    if (last_node !== null) {
        params["last_node"] = last_node;
    }
    if (debug_level !== null) {
        params["debug_level"] = debug_level;
    }
    if (dnode !== null) {
        params["dnode"] = dnode;
    }
    if (f_steps !== null) {
        params["f_steps"] = f_steps;
    }
    if (f_index !== null) {
        params["f_index"] = f_index;
    }
    if (f_p1_mm !== null) {
        params["f_p1_mm"] = f_p1_mm;
    }
    if (f_pn_mm !== null) {
        params["f_pn_mm"] = f_pn_mm;
    }
    if (f_p1_fr !== null) {
        params["f_p1_fr"] = f_p1_fr;
    }
    if (f_pn_fr !== null) {
        params["f_pn_fr"] = f_pn_fr;
    }
    if (save_seg_coords !== null) {
        params["save_seg_coords"] = save_seg_coords;
    }
    if (cmask !== null) {
        params["cmask"] = cmask;
    }
    if (gp_index !== null) {
        params["gp_index"] = gp_index;
    }
    if (oob_index !== null) {
        params["oob_index"] = oob_index;
    }
    if (oob_value !== null) {
        params["oob_value"] = oob_value;
    }
    if (oom_value !== null) {
        params["oom_value"] = oom_value;
    }
    return params;
}


function v_3d_vol2_surf_cargs(
    params: V3dVol2SurfParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dVol2Surf");
    cargs.push(execution.inputFile((params["spec_file"] ?? null)));
    cargs.push(
        "-sv",
        execution.inputFile((params["sv"] ?? null))
    );
    cargs.push(
        "-grid_parent",
        execution.inputFile((params["grid_parent"] ?? null))
    );
    cargs.push(
        "-map_func",
        (params["map_func"] ?? null)
    );
    cargs.push(
        "-surf_A",
        (params["surf_A"] ?? null)
    );
    if ((params["surf_B"] ?? null) !== null) {
        cargs.push(
            "-surf_B",
            (params["surf_B"] ?? null)
        );
    }
    if ((params["out_1D"] ?? null) !== null) {
        cargs.push(
            "-out_1D",
            (params["out_1D"] ?? null)
        );
    }
    if ((params["out_niml"] ?? null) !== null) {
        cargs.push(
            "-out_niml",
            (params["out_niml"] ?? null)
        );
    }
    if ((params["use_norms"] ?? null)) {
        cargs.push("-use_norms");
    }
    if ((params["norm_len"] ?? null) !== null) {
        cargs.push(
            "-norm_len",
            String((params["norm_len"] ?? null))
        );
    }
    if ((params["first_node"] ?? null) !== null) {
        cargs.push(
            "-first_node",
            String((params["first_node"] ?? null))
        );
    }
    if ((params["last_node"] ?? null) !== null) {
        cargs.push(
            "-last_node",
            String((params["last_node"] ?? null))
        );
    }
    if ((params["debug_level"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug_level"] ?? null))
        );
    }
    if ((params["dnode"] ?? null) !== null) {
        cargs.push(
            "-dnode",
            String((params["dnode"] ?? null))
        );
    }
    if ((params["f_steps"] ?? null) !== null) {
        cargs.push(
            "-f_steps",
            String((params["f_steps"] ?? null))
        );
    }
    if ((params["f_index"] ?? null) !== null) {
        cargs.push(
            "-f_index",
            (params["f_index"] ?? null)
        );
    }
    if ((params["f_p1_mm"] ?? null) !== null) {
        cargs.push(
            "-f_p1_mm",
            String((params["f_p1_mm"] ?? null))
        );
    }
    if ((params["f_pn_mm"] ?? null) !== null) {
        cargs.push(
            "-f_pn_mm",
            String((params["f_pn_mm"] ?? null))
        );
    }
    if ((params["f_p1_fr"] ?? null) !== null) {
        cargs.push(
            "-f_p1_fr",
            String((params["f_p1_fr"] ?? null))
        );
    }
    if ((params["f_pn_fr"] ?? null) !== null) {
        cargs.push(
            "-f_pn_fr",
            String((params["f_pn_fr"] ?? null))
        );
    }
    if ((params["skip_col_nodes"] ?? null)) {
        cargs.push("-skip_col_nodes");
    }
    if ((params["skip_col_1dindex"] ?? null)) {
        cargs.push("-skip_col_1dindex");
    }
    if ((params["skip_col_i"] ?? null)) {
        cargs.push("-skip_col_i");
    }
    if ((params["skip_col_j"] ?? null)) {
        cargs.push("-skip_col_j");
    }
    if ((params["skip_col_k"] ?? null)) {
        cargs.push("-skip_col_k");
    }
    if ((params["skip_col_vals"] ?? null)) {
        cargs.push("-skip_col_vals");
    }
    if ((params["no_headers"] ?? null)) {
        cargs.push("-no_headers");
    }
    if ((params["save_seg_coords"] ?? null) !== null) {
        cargs.push(
            "-save_seg_coords",
            (params["save_seg_coords"] ?? null)
        );
    }
    if ((params["cmask"] ?? null) !== null) {
        cargs.push(
            "-cmask",
            (params["cmask"] ?? null)
        );
    }
    if ((params["gp_index"] ?? null) !== null) {
        cargs.push(
            "-gp_index",
            String((params["gp_index"] ?? null))
        );
    }
    if ((params["oob_index"] ?? null) !== null) {
        cargs.push(
            "-oob_index",
            String((params["oob_index"] ?? null))
        );
    }
    if ((params["oob_value"] ?? null) !== null) {
        cargs.push(
            "-oob_value",
            String((params["oob_value"] ?? null))
        );
    }
    if ((params["oom_value"] ?? null) !== null) {
        cargs.push(
            "-oom_value",
            String((params["oom_value"] ?? null))
        );
    }
    if ((params["outcols_afni_nsd"] ?? null)) {
        cargs.push("-outcols_afni_NSD");
    }
    if ((params["outcols_1_result"] ?? null)) {
        cargs.push("-outcols_1_result");
    }
    if ((params["outcols_results"] ?? null)) {
        cargs.push("-outcols_results");
    }
    if ((params["outcols_nsd_format"] ?? null)) {
        cargs.push("-outcols_NSD_format");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["hist"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["keep_norm_dir"] ?? null)) {
        cargs.push("-keep_norm_dir");
    }
    if ((params["reverse_norm_dir"] ?? null)) {
        cargs.push("-reverse_norm_dir");
    }
    return cargs;
}


function v_3d_vol2_surf_outputs(
    params: V3dVol2SurfParameters,
    execution: Execution,
): V3dVol2SurfOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dVol2SurfOutputs = {
        root: execution.outputFile("."),
        out_1d_file: ((params["out_1D"] ?? null) !== null) ? execution.outputFile([(params["out_1D"] ?? null)].join('')) : null,
        out_niml_file: ((params["out_niml"] ?? null) !== null) ? execution.outputFile([(params["out_niml"] ?? null)].join('')) : null,
        seg_coords_file: ((params["save_seg_coords"] ?? null) !== null) ? execution.outputFile([(params["save_seg_coords"] ?? null)].join('')) : null,
    };
    return ret;
}


function v_3d_vol2_surf_execute(
    params: V3dVol2SurfParameters,
    execution: Execution,
): V3dVol2SurfOutputs {
    /**
     * Map data from a volume domain to a surface domain.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dVol2SurfOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_vol2_surf_cargs(params, execution)
    const ret = v_3d_vol2_surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_vol2_surf(
    spec_file: InputPathType,
    sv: InputPathType,
    grid_parent: InputPathType,
    map_func: string,
    surf_a: string,
    surf_b: string | null = null,
    out_1_d: string | null = null,
    out_niml: string | null = null,
    use_norms: boolean = false,
    norm_len: number | null = null,
    first_node: number | null = null,
    last_node: number | null = null,
    debug_level: number | null = null,
    dnode: number | null = null,
    f_steps: number | null = null,
    f_index: string | null = null,
    f_p1_mm: number | null = null,
    f_pn_mm: number | null = null,
    f_p1_fr: number | null = null,
    f_pn_fr: number | null = null,
    skip_col_nodes: boolean = false,
    skip_col_1dindex: boolean = false,
    skip_col_i: boolean = false,
    skip_col_j: boolean = false,
    skip_col_k: boolean = false,
    skip_col_vals: boolean = false,
    no_headers: boolean = false,
    save_seg_coords: string | null = null,
    cmask: string | null = null,
    gp_index: number | null = null,
    oob_index: number | null = null,
    oob_value: number | null = null,
    oom_value: number | null = null,
    outcols_afni_nsd: boolean = false,
    outcols_1_result: boolean = false,
    outcols_results: boolean = false,
    outcols_nsd_format: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    version: boolean = false,
    keep_norm_dir: boolean = false,
    reverse_norm_dir: boolean = false,
    runner: Runner | null = null,
): V3dVol2SurfOutputs {
    /**
     * Map data from a volume domain to a surface domain.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param spec_file SUMA spec file
     * @param sv AFNI volume dataset mapped by the surface
     * @param grid_parent AFNI volume dataset used as a grid and orientation master for output
     * @param map_func Filter for values along the segment
     * @param surf_a Name of surface A from the spec file
     * @param surf_b Name of surface B from the spec file
     * @param out_1_d Specify a 1D file for the output
     * @param out_niml Specify a niml file for the output
     * @param use_norms Use normals for second surface
     * @param norm_len Length for node normals
     * @param first_node Skip all previous nodes
     * @param last_node Skip all following nodes
     * @param debug_level Verbose output level
     * @param dnode Node for debug
     * @param f_steps Number of steps along each segment (defines the number of evenly spaced points along each segment)
     * @param f_index Whether to use all segment point values or only those corresponding to unique volume voxels
     * @param f_p1_mm Distance in millimeters to add to the first point of each line segment
     * @param f_pn_mm Distance in millimeters to add to the second point of each line segment
     * @param f_p1_fr Fractional distance to add to the first point of each line segment
     * @param f_pn_fr Fractional distance to add to the second point of each line segment
     * @param skip_col_nodes Do not output node column
     * @param skip_col_1dindex Do not output 1dindex column
     * @param skip_col_i Do not output i column
     * @param skip_col_j Do not output j column
     * @param skip_col_k Do not output k column
     * @param skip_col_vals Do not output vals column
     * @param no_headers Do not output column headers
     * @param save_seg_coords Save segment coordinates to a file
     * @param cmask Command for dataset mask
     * @param gp_index Choose grid_parent sub-brick
     * @param oob_index Specify default index for out of bounds nodes
     * @param oob_value Specify default value for out of bounds nodes
     * @param oom_value Specify default value for out of mask nodes
     * @param outcols_afni_nsd Output nodes and one result column
     * @param outcols_1_result Output only one result column
     * @param outcols_results Output only all result columns
     * @param outcols_nsd_format Output nodes and all results (NI_SURF_DSET format)
     * @param help Show this help
     * @param hist Show revision history
     * @param version Show version information
     * @param keep_norm_dir Keep the direction of the normals
     * @param reverse_norm_dir Reverse the normal directions
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dVol2SurfOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_VOL2_SURF_METADATA);
    const params = v_3d_vol2_surf_params(spec_file, sv, grid_parent, map_func, surf_a, surf_b, out_1_d, out_niml, use_norms, norm_len, first_node, last_node, debug_level, dnode, f_steps, f_index, f_p1_mm, f_pn_mm, f_p1_fr, f_pn_fr, skip_col_nodes, skip_col_1dindex, skip_col_i, skip_col_j, skip_col_k, skip_col_vals, no_headers, save_seg_coords, cmask, gp_index, oob_index, oob_value, oom_value, outcols_afni_nsd, outcols_1_result, outcols_results, outcols_nsd_format, help, hist, version, keep_norm_dir, reverse_norm_dir)
    return v_3d_vol2_surf_execute(params, execution);
}


export {
      V3dVol2SurfOutputs,
      V3dVol2SurfParameters,
      V_3D_VOL2_SURF_METADATA,
      v_3d_vol2_surf,
      v_3d_vol2_surf_params,
};
