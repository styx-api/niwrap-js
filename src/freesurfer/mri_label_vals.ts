// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LABEL_VALS_METADATA: Metadata = {
    id: "470e3234390d2b43d7acd775c577640281aecf54.boutiques",
    name: "mri_label_vals",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLabelValsParameters {
    "@type": "freesurfer.mri_label_vals";
    "volume": InputPathType;
    "label_file": InputPathType;
    "cras_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_label_vals": mri_label_vals_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_label_vals(...)`.
 *
 * @interface
 */
interface MriLabelValsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume Input volume file
 * @param label_file Input label file
 * @param cras_flag Use this option if the label was created where c_(r,a,s) != 0
 * @param help_flag Print help
 *
 * @returns Parameter dictionary
 */
function mri_label_vals_params(
    volume: InputPathType,
    label_file: InputPathType,
    cras_flag: boolean = false,
    help_flag: boolean = false,
): MriLabelValsParameters {
    const params = {
        "@type": "freesurfer.mri_label_vals" as const,
        "volume": volume,
        "label_file": label_file,
        "cras_flag": cras_flag,
        "help_flag": help_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_label_vals_cargs(
    params: MriLabelValsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_label_vals");
    cargs.push(execution.inputFile((params["volume"] ?? null)));
    cargs.push(execution.inputFile((params["label_file"] ?? null)));
    if ((params["cras_flag"] ?? null)) {
        cargs.push("-cras");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-u");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_label_vals_outputs(
    params: MriLabelValsParameters,
    execution: Execution,
): MriLabelValsOutputs {
    const ret: MriLabelValsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Extract values at label coordinates from a volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriLabelValsOutputs`).
 */
function mri_label_vals_execute(
    params: MriLabelValsParameters,
    execution: Execution,
): MriLabelValsOutputs {
    params = execution.params(params)
    const cargs = mri_label_vals_cargs(params, execution)
    const ret = mri_label_vals_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Extract values at label coordinates from a volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param volume Input volume file
 * @param label_file Input label file
 * @param cras_flag Use this option if the label was created where c_(r,a,s) != 0
 * @param help_flag Print help
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLabelValsOutputs`).
 */
function mri_label_vals(
    volume: InputPathType,
    label_file: InputPathType,
    cras_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MriLabelValsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LABEL_VALS_METADATA);
    const params = mri_label_vals_params(volume, label_file, cras_flag, help_flag)
    return mri_label_vals_execute(params, execution);
}


export {
      MRI_LABEL_VALS_METADATA,
      MriLabelValsOutputs,
      MriLabelValsParameters,
      mri_label_vals,
      mri_label_vals_cargs,
      mri_label_vals_execute,
      mri_label_vals_outputs,
      mri_label_vals_params,
};
