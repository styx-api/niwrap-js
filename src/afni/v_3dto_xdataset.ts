// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DTO_XDATASET_METADATA: Metadata = {
    id: "9009e607061b1ff9ecff65e2bed0504b53b16aea.boutiques",
    name: "3dtoXdataset",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dtoXdatasetParameters {
    "@type": "afni.3dtoXdataset";
    "prefix": string;
    "mask": InputPathType;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dtoXdataset": v_3dto_xdataset_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dtoXdataset": v_3dto_xdataset_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dto_xdataset(...)`.
 *
 * @interface
 */
interface V3dtoXdatasetOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file in .sdat format
     */
    output_sdat: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Prefix for the output file.
 * @param mask Mask dataset file.
 * @param input_files Input datasets to be converted.
 *
 * @returns Parameter dictionary
 */
function v_3dto_xdataset_params(
    prefix: string,
    mask: InputPathType,
    input_files: Array<InputPathType>,
): V3dtoXdatasetParameters {
    const params = {
        "@type": "afni.3dtoXdataset" as const,
        "prefix": prefix,
        "mask": mask,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dto_xdataset_cargs(
    params: V3dtoXdatasetParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dtoXdataset");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dto_xdataset_outputs(
    params: V3dtoXdatasetParameters,
    execution: Execution,
): V3dtoXdatasetOutputs {
    const ret: V3dtoXdatasetOutputs = {
        root: execution.outputFile("."),
        output_sdat: execution.outputFile([(params["prefix"] ?? null), ".sdat"].join('')),
    };
    return ret;
}


/**
 * 3dtoXdataset
 *
 * Convert input datasets to the format needed for 3dClustSimX.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dtoXdatasetOutputs`).
 */
function v_3dto_xdataset_execute(
    params: V3dtoXdatasetParameters,
    runner: Runner | null = null,
): V3dtoXdatasetOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DTO_XDATASET_METADATA);
    params = execution.params(params)
    const cargs = v_3dto_xdataset_cargs(params, execution)
    const ret = v_3dto_xdataset_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dtoXdataset
 *
 * Convert input datasets to the format needed for 3dClustSimX.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Prefix for the output file.
 * @param mask Mask dataset file.
 * @param input_files Input datasets to be converted.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dtoXdatasetOutputs`).
 */
function v_3dto_xdataset(
    prefix: string,
    mask: InputPathType,
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): V3dtoXdatasetOutputs {
    const params = v_3dto_xdataset_params(prefix, mask, input_files)
    return v_3dto_xdataset_execute(params, runner);
}


export {
      V3dtoXdatasetOutputs,
      V3dtoXdatasetParameters,
      V_3DTO_XDATASET_METADATA,
      v_3dto_xdataset,
      v_3dto_xdataset_execute,
      v_3dto_xdataset_params,
};
