// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SPHERICAL_AVERAGE_METADATA: Metadata = {
    id: "49fbe3a280d7a2c1507533169db06a97eaf05a25.boutiques",
    name: "mris_spherical_average",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSphericalAverageParameters {
    "@type"?: "freesurfer/mris_spherical_average";
    "which": "coords" | "label" | "vals" | "curv" | "area";
    "fname": string;
    "hemi": "lh" | "rh";
    "spherical_surf": string;
    "subjects": Array<string>;
    "output": string;
    "segment": boolean;
    "normalize": boolean;
    "orig"?: string | null | undefined;
    "output_subject_name"?: string | null | undefined;
    "output_subject_dir"?: string | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "average_area": boolean;
    "summary_statistics"?: string | null | undefined;
}
type MrisSphericalAverageParametersTagged = Required<Pick<MrisSphericalAverageParameters, '@type'>> & MrisSphericalAverageParameters;


/**
 * Output object returned when calling `MrisSphericalAverageParameters(...)`.
 *
 * @interface
 */
interface MrisSphericalAverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param which Specifies the type, one of: coords, label, vals, curv, or area.
 * @param fname Input file name.
 * @param hemi Hemisphere: one of lh or rh.
 * @param spherical_surf The spherical surface file.
 * @param subjects List of subjects.
 * @param output Output file or directory.
 * @param segment Only use largest connected component of label.
 * @param normalize Normalize output so it can be interpreted as a probability.
 * @param orig Use <name> as original surface position; default=orig.
 * @param output_subject_name Use <output subject name> as the space to write the results in instead of the last subject given.
 * @param output_subject_dir Use <output subject dir> as the subjects dir for the output subject.
 * @param subjects_dir Set the subjects directory.
 * @param average_area Compute threshold for label that will give the average label approximately the average surface area.
 * @param summary_statistics Generate summary statistics and write them into sigavg<cond #>-<hemi>.w and sigvar<cond #>-<hemi>.w.
 *
 * @returns Parameter dictionary
 */
function mris_spherical_average_params(
    which: "coords" | "label" | "vals" | "curv" | "area",
    fname: string,
    hemi: "lh" | "rh",
    spherical_surf: string,
    subjects: Array<string>,
    output: string,
    segment: boolean = false,
    normalize: boolean = false,
    orig: string | null = null,
    output_subject_name: string | null = null,
    output_subject_dir: string | null = null,
    subjects_dir: string | null = null,
    average_area: boolean = false,
    summary_statistics: string | null = null,
): MrisSphericalAverageParametersTagged {
    const params = {
        "@type": "freesurfer/mris_spherical_average" as const,
        "which": which,
        "fname": fname,
        "hemi": hemi,
        "spherical_surf": spherical_surf,
        "subjects": subjects,
        "output": output,
        "segment": segment,
        "normalize": normalize,
        "average_area": average_area,
    };
    if (orig !== null) {
        params["orig"] = orig;
    }
    if (output_subject_name !== null) {
        params["output_subject_name"] = output_subject_name;
    }
    if (output_subject_dir !== null) {
        params["output_subject_dir"] = output_subject_dir;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (summary_statistics !== null) {
        params["summary_statistics"] = summary_statistics;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_spherical_average_cargs(
    params: MrisSphericalAverageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_spherical_average");
    cargs.push((params["which"] ?? null));
    cargs.push((params["fname"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["spherical_surf"] ?? null));
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output"] ?? null));
    if ((params["segment"] ?? false)) {
        cargs.push("-segment");
    }
    if ((params["normalize"] ?? false)) {
        cargs.push("-n");
    }
    if ((params["orig"] ?? null) !== null) {
        cargs.push(
            "-orig",
            (params["orig"] ?? null)
        );
    }
    if ((params["output_subject_name"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_subject_name"] ?? null)
        );
    }
    if ((params["output_subject_dir"] ?? null) !== null) {
        cargs.push(
            "-osdir",
            (params["output_subject_dir"] ?? null)
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "-sdir",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["average_area"] ?? false)) {
        cargs.push("-average_area");
    }
    if ((params["summary_statistics"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["summary_statistics"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_spherical_average_outputs(
    params: MrisSphericalAverageParameters,
    execution: Execution,
): MrisSphericalAverageOutputs {
    const ret: MrisSphericalAverageOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_spherical_average
 *
 * This tool adds a template into an average surface in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSphericalAverageOutputs`).
 */
function mris_spherical_average_execute(
    params: MrisSphericalAverageParameters,
    runner: Runner | null = null,
): MrisSphericalAverageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SPHERICAL_AVERAGE_METADATA);
    params = execution.params(params)
    const cargs = mris_spherical_average_cargs(params, execution)
    const ret = mris_spherical_average_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_spherical_average
 *
 * This tool adds a template into an average surface in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param which Specifies the type, one of: coords, label, vals, curv, or area.
 * @param fname Input file name.
 * @param hemi Hemisphere: one of lh or rh.
 * @param spherical_surf The spherical surface file.
 * @param subjects List of subjects.
 * @param output Output file or directory.
 * @param segment Only use largest connected component of label.
 * @param normalize Normalize output so it can be interpreted as a probability.
 * @param orig Use <name> as original surface position; default=orig.
 * @param output_subject_name Use <output subject name> as the space to write the results in instead of the last subject given.
 * @param output_subject_dir Use <output subject dir> as the subjects dir for the output subject.
 * @param subjects_dir Set the subjects directory.
 * @param average_area Compute threshold for label that will give the average label approximately the average surface area.
 * @param summary_statistics Generate summary statistics and write them into sigavg<cond #>-<hemi>.w and sigvar<cond #>-<hemi>.w.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSphericalAverageOutputs`).
 */
function mris_spherical_average(
    which: "coords" | "label" | "vals" | "curv" | "area",
    fname: string,
    hemi: "lh" | "rh",
    spherical_surf: string,
    subjects: Array<string>,
    output: string,
    segment: boolean = false,
    normalize: boolean = false,
    orig: string | null = null,
    output_subject_name: string | null = null,
    output_subject_dir: string | null = null,
    subjects_dir: string | null = null,
    average_area: boolean = false,
    summary_statistics: string | null = null,
    runner: Runner | null = null,
): MrisSphericalAverageOutputs {
    const params = mris_spherical_average_params(which, fname, hemi, spherical_surf, subjects, output, segment, normalize, orig, output_subject_name, output_subject_dir, subjects_dir, average_area, summary_statistics)
    return mris_spherical_average_execute(params, runner);
}


export {
      MRIS_SPHERICAL_AVERAGE_METADATA,
      MrisSphericalAverageOutputs,
      mris_spherical_average,
      mris_spherical_average_execute,
      mris_spherical_average_params,
};
