// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CREATE_LABEL_METADATA: Metadata = {
    id: "3a1aca58ce90234c63b19e3c0451b3cb7f90d16b.boutiques",
    name: "cifti-create-label",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiCreateLabelVolumeParameters {
    "@type": "workbench.cifti-create-label.volume";
    "label_volume": InputPathType;
    "structure_label_volume": InputPathType;
}


interface CiftiCreateLabelLeftLabelParameters {
    "@type": "workbench.cifti-create-label.left_label";
    "label": InputPathType;
    "opt_roi_left_roi_metric"?: InputPathType | null | undefined;
}


interface CiftiCreateLabelRightLabelParameters {
    "@type": "workbench.cifti-create-label.right_label";
    "label": InputPathType;
    "opt_roi_right_roi_metric"?: InputPathType | null | undefined;
}


interface CiftiCreateLabelCerebellumLabelParameters {
    "@type": "workbench.cifti-create-label.cerebellum_label";
    "label": InputPathType;
    "opt_roi_cerebellum_roi_metric"?: InputPathType | null | undefined;
}


interface CiftiCreateLabelParameters {
    "@type": "workbench.cifti-create-label";
    "cifti_out": string;
    "volume"?: CiftiCreateLabelVolumeParameters | null | undefined;
    "left_label"?: CiftiCreateLabelLeftLabelParameters | null | undefined;
    "right_label"?: CiftiCreateLabelRightLabelParameters | null | undefined;
    "cerebellum_label"?: CiftiCreateLabelCerebellumLabelParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-create-label": cifti_create_label_cargs,
        "workbench.cifti-create-label.volume": cifti_create_label_volume_cargs,
        "workbench.cifti-create-label.left_label": cifti_create_label_left_label_cargs,
        "workbench.cifti-create-label.right_label": cifti_create_label_right_label_cargs,
        "workbench.cifti-create-label.cerebellum_label": cifti_create_label_cerebellum_label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-create-label": cifti_create_label_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param label_volume label volume file containing the data to be copied
 * @param structure_label_volume label volume file that defines which voxels to use
 *
 * @returns Parameter dictionary
 */
function cifti_create_label_volume_params(
    label_volume: InputPathType,
    structure_label_volume: InputPathType,
): CiftiCreateLabelVolumeParameters {
    const params = {
        "@type": "workbench.cifti-create-label.volume" as const,
        "label_volume": label_volume,
        "structure_label_volume": structure_label_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_label_volume_cargs(
    params: CiftiCreateLabelVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume");
    cargs.push(execution.inputFile((params["label_volume"] ?? null)));
    cargs.push(execution.inputFile((params["structure_label_volume"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param label the label file
 * @param opt_roi_left_roi_metric roi of vertices to use from left surface: the ROI as a metric file
 *
 * @returns Parameter dictionary
 */
function cifti_create_label_left_label_params(
    label: InputPathType,
    opt_roi_left_roi_metric: InputPathType | null = null,
): CiftiCreateLabelLeftLabelParameters {
    const params = {
        "@type": "workbench.cifti-create-label.left_label" as const,
        "label": label,
    };
    if (opt_roi_left_roi_metric !== null) {
        params["opt_roi_left_roi_metric"] = opt_roi_left_roi_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_label_left_label_cargs(
    params: CiftiCreateLabelLeftLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-label");
    cargs.push(execution.inputFile((params["label"] ?? null)));
    if ((params["opt_roi_left_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi-left",
            execution.inputFile((params["opt_roi_left_roi_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param label the label file
 * @param opt_roi_right_roi_metric roi of vertices to use from right surface: the ROI as a metric file
 *
 * @returns Parameter dictionary
 */
function cifti_create_label_right_label_params(
    label: InputPathType,
    opt_roi_right_roi_metric: InputPathType | null = null,
): CiftiCreateLabelRightLabelParameters {
    const params = {
        "@type": "workbench.cifti-create-label.right_label" as const,
        "label": label,
    };
    if (opt_roi_right_roi_metric !== null) {
        params["opt_roi_right_roi_metric"] = opt_roi_right_roi_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_label_right_label_cargs(
    params: CiftiCreateLabelRightLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-label");
    cargs.push(execution.inputFile((params["label"] ?? null)));
    if ((params["opt_roi_right_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi-right",
            execution.inputFile((params["opt_roi_right_roi_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param label the label file
 * @param opt_roi_cerebellum_roi_metric roi of vertices to use from right surface: the ROI as a metric file
 *
 * @returns Parameter dictionary
 */
function cifti_create_label_cerebellum_label_params(
    label: InputPathType,
    opt_roi_cerebellum_roi_metric: InputPathType | null = null,
): CiftiCreateLabelCerebellumLabelParameters {
    const params = {
        "@type": "workbench.cifti-create-label.cerebellum_label" as const,
        "label": label,
    };
    if (opt_roi_cerebellum_roi_metric !== null) {
        params["opt_roi_cerebellum_roi_metric"] = opt_roi_cerebellum_roi_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_label_cerebellum_label_cargs(
    params: CiftiCreateLabelCerebellumLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-label");
    cargs.push(execution.inputFile((params["label"] ?? null)));
    if ((params["opt_roi_cerebellum_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi-cerebellum",
            execution.inputFile((params["opt_roi_cerebellum_roi_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `cifti_create_label(...)`.
 *
 * @interface
 */
interface CiftiCreateLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_out the output cifti file
 * @param volume volume component
 * @param left_label label file for left surface
 * @param right_label label for left surface
 * @param cerebellum_label label for the cerebellum
 *
 * @returns Parameter dictionary
 */
function cifti_create_label_params(
    cifti_out: string,
    volume: CiftiCreateLabelVolumeParameters | null = null,
    left_label: CiftiCreateLabelLeftLabelParameters | null = null,
    right_label: CiftiCreateLabelRightLabelParameters | null = null,
    cerebellum_label: CiftiCreateLabelCerebellumLabelParameters | null = null,
): CiftiCreateLabelParameters {
    const params = {
        "@type": "workbench.cifti-create-label" as const,
        "cifti_out": cifti_out,
    };
    if (volume !== null) {
        params["volume"] = volume;
    }
    if (left_label !== null) {
        params["left_label"] = left_label;
    }
    if (right_label !== null) {
        params["right_label"] = right_label;
    }
    if (cerebellum_label !== null) {
        params["cerebellum_label"] = cerebellum_label;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_create_label_cargs(
    params: CiftiCreateLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-create-label");
    cargs.push((params["cifti_out"] ?? null));
    if ((params["volume"] ?? null) !== null) {
        cargs.push(...dynCargs((params["volume"] ?? null)["@type"])((params["volume"] ?? null), execution));
    }
    if ((params["left_label"] ?? null) !== null) {
        cargs.push(...dynCargs((params["left_label"] ?? null)["@type"])((params["left_label"] ?? null), execution));
    }
    if ((params["right_label"] ?? null) !== null) {
        cargs.push(...dynCargs((params["right_label"] ?? null)["@type"])((params["right_label"] ?? null), execution));
    }
    if ((params["cerebellum_label"] ?? null) !== null) {
        cargs.push(...dynCargs((params["cerebellum_label"] ?? null)["@type"])((params["cerebellum_label"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_create_label_outputs(
    params: CiftiCreateLabelParameters,
    execution: Execution,
): CiftiCreateLabelOutputs {
    const ret: CiftiCreateLabelOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-create-label
 *
 * Create a cifti label file.
 *
 * All input files must have the same number of columns/subvolumes.  Only the specified components will be in the output cifti.  At least one component must be specified.
 *
 * The -volume option requires two volume arguments, the label-volume argument contains all labels you want to display (e.g. nuclei of the thalamus), whereas the structure-label-volume argument contains all CIFTI voxel-based structures you want to include data within (e.g. THALAMUS_LEFT, THALAMUS_RIGHT, etc).  See -volume-label-import and -volume-help for format details of label volume files.  If you just want the labels in voxels to be the structure names, you may use the same file for both arguments.  The structure-label-volume must use some of the label names from this list, all other label names in the structure-label-volume will be ignored:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiCreateLabelOutputs`).
 */
function cifti_create_label_execute(
    params: CiftiCreateLabelParameters,
    runner: Runner | null = null,
): CiftiCreateLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CREATE_LABEL_METADATA);
    params = execution.params(params)
    const cargs = cifti_create_label_cargs(params, execution)
    const ret = cifti_create_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-create-label
 *
 * Create a cifti label file.
 *
 * All input files must have the same number of columns/subvolumes.  Only the specified components will be in the output cifti.  At least one component must be specified.
 *
 * The -volume option requires two volume arguments, the label-volume argument contains all labels you want to display (e.g. nuclei of the thalamus), whereas the structure-label-volume argument contains all CIFTI voxel-based structures you want to include data within (e.g. THALAMUS_LEFT, THALAMUS_RIGHT, etc).  See -volume-label-import and -volume-help for format details of label volume files.  If you just want the labels in voxels to be the structure names, you may use the same file for both arguments.  The structure-label-volume must use some of the label names from this list, all other label names in the structure-label-volume will be ignored:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_out the output cifti file
 * @param volume volume component
 * @param left_label label file for left surface
 * @param right_label label for left surface
 * @param cerebellum_label label for the cerebellum
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiCreateLabelOutputs`).
 */
function cifti_create_label(
    cifti_out: string,
    volume: CiftiCreateLabelVolumeParameters | null = null,
    left_label: CiftiCreateLabelLeftLabelParameters | null = null,
    right_label: CiftiCreateLabelRightLabelParameters | null = null,
    cerebellum_label: CiftiCreateLabelCerebellumLabelParameters | null = null,
    runner: Runner | null = null,
): CiftiCreateLabelOutputs {
    const params = cifti_create_label_params(cifti_out, volume, left_label, right_label, cerebellum_label)
    return cifti_create_label_execute(params, runner);
}


export {
      CIFTI_CREATE_LABEL_METADATA,
      CiftiCreateLabelCerebellumLabelParameters,
      CiftiCreateLabelLeftLabelParameters,
      CiftiCreateLabelOutputs,
      CiftiCreateLabelParameters,
      CiftiCreateLabelRightLabelParameters,
      CiftiCreateLabelVolumeParameters,
      cifti_create_label,
      cifti_create_label_cerebellum_label_params,
      cifti_create_label_execute,
      cifti_create_label_left_label_params,
      cifti_create_label_params,
      cifti_create_label_right_label_params,
      cifti_create_label_volume_params,
};
