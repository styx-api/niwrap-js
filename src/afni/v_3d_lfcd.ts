// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LFCD_METADATA: Metadata = {
    id: "bf72e901409ebf787635076f27fc633055ebec14.boutiques",
    name: "3dLFCD",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLfcdParameters {
    "__STYXTYPE__": "3dLFCD";
    "in_file": InputPathType;
    "autoclip": boolean;
    "automask": boolean;
    "mask"?: InputPathType | null | undefined;
    "outputtype"?: "NIFTI" | "AFNI" | "NIFTI_GZ" | null | undefined;
    "polort"?: number | null | undefined;
    "thresh"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dLFCD": v_3d_lfcd_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dLFCD": v_3d_lfcd_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_lfcd(...)`.
 *
 * @interface
 */
interface V3dLfcdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file name.
     */
    out_file: OutputPathType;
    /**
     * Output file.
     */
    out_file_: OutputPathType;
}


function v_3d_lfcd_params(
    in_file: InputPathType,
    autoclip: boolean = false,
    automask: boolean = false,
    mask: InputPathType | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    polort: number | null = null,
    thresh: number | null = null,
): V3dLfcdParameters {
    /**
     * Build parameters.
    
     * @param in_file Input file to 3dlfcd.
     * @param autoclip Clip off low-intensity regions in the dataset.
     * @param automask Mask the dataset to target brain-only voxels.
     * @param mask Mask file to mask input data.
     * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
     * @param polort No description provided.
     * @param thresh Threshold to exclude connections where corr <= thresh.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dLFCD" as const,
        "in_file": in_file,
        "autoclip": autoclip,
        "automask": automask,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (outputtype !== null) {
        params["outputtype"] = outputtype;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (thresh !== null) {
        params["thresh"] = thresh;
    }
    return params;
}


function v_3d_lfcd_cargs(
    params: V3dLfcdParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dLFCD");
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    if ((params["autoclip"] ?? null)) {
        cargs.push("-autoclip");
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    cargs.push("[OUT_FILE]");
    if ((params["outputtype"] ?? null) !== null) {
        cargs.push((params["outputtype"] ?? null));
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["thresh"] ?? null) !== null) {
        cargs.push(
            "-thresh",
            String((params["thresh"] ?? null))
        );
    }
    return cargs;
}


function v_3d_lfcd_outputs(
    params: V3dLfcdParameters,
    execution: Execution,
): V3dLfcdOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dLfcdOutputs = {
        root: execution.outputFile("."),
        out_file: execution.outputFile([path.basename((params["in_file"] ?? null)), "_afni"].join('')),
        out_file_: execution.outputFile(["out_file"].join('')),
    };
    return ret;
}


function v_3d_lfcd_execute(
    params: V3dLfcdParameters,
    execution: Execution,
): V3dLfcdOutputs {
    /**
     * Performs degree centrality on a dataset using a given maskfile via the 3dLFCD command.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dLfcdOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_lfcd_cargs(params, execution)
    const ret = v_3d_lfcd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_lfcd(
    in_file: InputPathType,
    autoclip: boolean = false,
    automask: boolean = false,
    mask: InputPathType | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    polort: number | null = null,
    thresh: number | null = null,
    runner: Runner | null = null,
): V3dLfcdOutputs {
    /**
     * Performs degree centrality on a dataset using a given maskfile via the 3dLFCD command.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param in_file Input file to 3dlfcd.
     * @param autoclip Clip off low-intensity regions in the dataset.
     * @param automask Mask the dataset to target brain-only voxels.
     * @param mask Mask file to mask input data.
     * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
     * @param polort No description provided.
     * @param thresh Threshold to exclude connections where corr <= thresh.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dLfcdOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LFCD_METADATA);
    const params = v_3d_lfcd_params(in_file, autoclip, automask, mask, outputtype, polort, thresh)
    return v_3d_lfcd_execute(params, execution);
}


export {
      V3dLfcdOutputs,
      V3dLfcdParameters,
      V_3D_LFCD_METADATA,
      v_3d_lfcd,
      v_3d_lfcd_params,
};
