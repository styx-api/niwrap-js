// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DSUM_METADATA: Metadata = {
    id: "bc19d515e82be4f6b3c9c9f81c1a201e83b798ea.boutiques",
    name: "1dsum",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dsumParameters {
    "__STYXTYPE__": "1dsum";
    "input_files": Array<InputPathType>;
    "ignore_rows"?: number | null | undefined;
    "use_rows"?: number | null | undefined;
    "mean_flag": boolean;
    "nocomment_flag": boolean;
    "okempty_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dsum": v_1dsum_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dsum": v_1dsum_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dsum(...)`.
 *
 * @interface
 */
interface V1dsumOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Sum or average of columns in the input files
     */
    output_file: OutputPathType;
}


function v_1dsum_params(
    input_files: Array<InputPathType>,
    ignore_rows: number | null = null,
    use_rows: number | null = null,
    mean_flag: boolean = false,
    nocomment_flag: boolean = false,
    okempty_flag: boolean = false,
): V1dsumParameters {
    /**
     * Build parameters.
    
     * @param input_files Input ASCII files with numbers arranged in rows and columns.
     * @param ignore_rows Skip the first nn rows of each file
     * @param use_rows Use only mm rows from each file
     * @param mean_flag Compute the average instead of the sum
     * @param nocomment_flag Do not reproduce comments from the header of the first input file to the output.
     * @param okempty_flag If encountering an empty 1D file, print 0 and exit quietly instead of exiting with an error message.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dsum" as const,
        "input_files": input_files,
        "mean_flag": mean_flag,
        "nocomment_flag": nocomment_flag,
        "okempty_flag": okempty_flag,
    };
    if (ignore_rows !== null) {
        params["ignore_rows"] = ignore_rows;
    }
    if (use_rows !== null) {
        params["use_rows"] = use_rows;
    }
    return params;
}


function v_1dsum_cargs(
    params: V1dsumParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dsum");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["ignore_rows"] ?? null) !== null) {
        cargs.push(
            "-ignore",
            String((params["ignore_rows"] ?? null))
        );
    }
    if ((params["use_rows"] ?? null) !== null) {
        cargs.push(
            "-use",
            String((params["use_rows"] ?? null))
        );
    }
    if ((params["mean_flag"] ?? null)) {
        cargs.push("-mean");
    }
    if ((params["nocomment_flag"] ?? null)) {
        cargs.push("-nocomment");
    }
    if ((params["okempty_flag"] ?? null)) {
        cargs.push("-OKempty");
    }
    return cargs;
}


function v_1dsum_outputs(
    params: V1dsumParameters,
    execution: Execution,
): V1dsumOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dsumOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["output.txt"].join('')),
    };
    return ret;
}


function v_1dsum_execute(
    params: V1dsumParameters,
    execution: Execution,
): V1dsumOutputs {
    /**
     * Sum or average columns of ASCII files with numbers arranged in rows and columns.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dsumOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1dsum_cargs(params, execution)
    const ret = v_1dsum_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1dsum(
    input_files: Array<InputPathType>,
    ignore_rows: number | null = null,
    use_rows: number | null = null,
    mean_flag: boolean = false,
    nocomment_flag: boolean = false,
    okempty_flag: boolean = false,
    runner: Runner | null = null,
): V1dsumOutputs {
    /**
     * Sum or average columns of ASCII files with numbers arranged in rows and columns.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_files Input ASCII files with numbers arranged in rows and columns.
     * @param ignore_rows Skip the first nn rows of each file
     * @param use_rows Use only mm rows from each file
     * @param mean_flag Compute the average instead of the sum
     * @param nocomment_flag Do not reproduce comments from the header of the first input file to the output.
     * @param okempty_flag If encountering an empty 1D file, print 0 and exit quietly instead of exiting with an error message.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dsumOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DSUM_METADATA);
    const params = v_1dsum_params(input_files, ignore_rows, use_rows, mean_flag, nocomment_flag, okempty_flag)
    return v_1dsum_execute(params, execution);
}


export {
      V1dsumOutputs,
      V1dsumParameters,
      V_1DSUM_METADATA,
      v_1dsum,
      v_1dsum_params,
};
