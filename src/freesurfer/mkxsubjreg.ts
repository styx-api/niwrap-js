// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MKXSUBJREG_METADATA: Metadata = {
    id: "2a99c16d9dcf305f5f8757bb3fb394dc61f08290.boutiques",
    name: "mkxsubjreg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MkxsubjregParameters {
    "__STYXTYPE__": "mkxsubjreg";
    "srcreg": InputPathType;
    "targreg": InputPathType;
    "targsubj"?: string | null | undefined;
    "xfm"?: string | null | undefined;
    "sd"?: string | null | undefined;
    "fvol"?: InputPathType | null | undefined;
    "help": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mkxsubjreg": mkxsubjreg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mkxsubjreg(...)`.
 *
 * @interface
 */
interface MkxsubjregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mkxsubjreg_params(
    srcreg: InputPathType,
    targreg: InputPathType,
    targsubj: string | null = null,
    xfm: string | null = null,
    sd: string | null = null,
    fvol: InputPathType | null = null,
    help: boolean = false,
    version: boolean = false,
): MkxsubjregParameters {
    /**
     * Build parameters.
    
     * @param srcreg Path to the source registration file (srcreg.dat)
     * @param targreg Path to the target registration file (targreg.dat)
     * @param targsubj Target subject ID; default is talairach
     * @param xfm XFM file name relative to transforms
     * @param sd Directory containing subject data; default is env SUBJECTS_DIR
     * @param fvol Path to example functional volume
     * @param help Display help information
     * @param version Display version information
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mkxsubjreg" as const,
        "srcreg": srcreg,
        "targreg": targreg,
        "help": help,
        "version": version,
    };
    if (targsubj !== null) {
        params["targsubj"] = targsubj;
    }
    if (xfm !== null) {
        params["xfm"] = xfm;
    }
    if (sd !== null) {
        params["sd"] = sd;
    }
    if (fvol !== null) {
        params["fvol"] = fvol;
    }
    return params;
}


function mkxsubjreg_cargs(
    params: MkxsubjregParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mkxsubjreg");
    cargs.push(
        "--srcreg",
        execution.inputFile((params["srcreg"] ?? null))
    );
    cargs.push(
        "--targreg",
        execution.inputFile((params["targreg"] ?? null))
    );
    if ((params["targsubj"] ?? null) !== null) {
        cargs.push(
            "--targsubj",
            (params["targsubj"] ?? null)
        );
    }
    if ((params["xfm"] ?? null) !== null) {
        cargs.push(
            "--xfm",
            (params["xfm"] ?? null)
        );
    }
    if ((params["sd"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["sd"] ?? null)
        );
    }
    if ((params["fvol"] ?? null) !== null) {
        cargs.push(
            "--fvol",
            execution.inputFile((params["fvol"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function mkxsubjreg_outputs(
    params: MkxsubjregParameters,
    execution: Execution,
): MkxsubjregOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MkxsubjregOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mkxsubjreg_execute(
    params: MkxsubjregParameters,
    execution: Execution,
): MkxsubjregOutputs {
    /**
     * Creates a new registration matrix that maps from the functional volume of the source subject to the orig of the target subject through the talairach transform.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MkxsubjregOutputs`).
     */
    params = execution.params(params)
    const cargs = mkxsubjreg_cargs(params, execution)
    const ret = mkxsubjreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mkxsubjreg(
    srcreg: InputPathType,
    targreg: InputPathType,
    targsubj: string | null = null,
    xfm: string | null = null,
    sd: string | null = null,
    fvol: InputPathType | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MkxsubjregOutputs {
    /**
     * Creates a new registration matrix that maps from the functional volume of the source subject to the orig of the target subject through the talairach transform.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param srcreg Path to the source registration file (srcreg.dat)
     * @param targreg Path to the target registration file (targreg.dat)
     * @param targsubj Target subject ID; default is talairach
     * @param xfm XFM file name relative to transforms
     * @param sd Directory containing subject data; default is env SUBJECTS_DIR
     * @param fvol Path to example functional volume
     * @param help Display help information
     * @param version Display version information
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MkxsubjregOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MKXSUBJREG_METADATA);
    const params = mkxsubjreg_params(srcreg, targreg, targsubj, xfm, sd, fvol, help, version)
    return mkxsubjreg_execute(params, execution);
}


export {
      MKXSUBJREG_METADATA,
      MkxsubjregOutputs,
      MkxsubjregParameters,
      mkxsubjreg,
      mkxsubjreg_params,
};
