// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIRST_MULT_BCORR_METADATA: Metadata = {
    id: "a7d6c8e2e8974e5facac9a650b214397ba549860.boutiques",
    name: "first_mult_bcorr",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FirstMultBcorrParameters {
    "__STYXTYPE__": "first_mult_bcorr";
    "input_image": InputPathType;
    "corrected_4d_labels": InputPathType;
    "uncorrected_4d_labels": InputPathType;
    "output_image": string;
    "verbose_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "first_mult_bcorr": first_mult_bcorr_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "first_mult_bcorr": first_mult_bcorr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `first_mult_bcorr(...)`.
 *
 * @interface
 */
interface FirstMultBcorrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image name (3D label image)
     */
    output_file: OutputPathType;
}


function first_mult_bcorr_params(
    input_image: InputPathType,
    corrected_4d_labels: InputPathType,
    uncorrected_4d_labels: InputPathType,
    output_image: string,
    verbose_flag: boolean = false,
): FirstMultBcorrParameters {
    /**
     * Build parameters.
    
     * @param input_image Filename of original T1 input image
     * @param corrected_4d_labels Filename of 4D image of individually corrected labels
     * @param uncorrected_4d_labels Filename of 4D image of uncorrected labels (with boundaries)
     * @param output_image Output image name (3D label image)
     * @param verbose_flag Output F-stats to standard out
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "first_mult_bcorr" as const,
        "input_image": input_image,
        "corrected_4d_labels": corrected_4d_labels,
        "uncorrected_4d_labels": uncorrected_4d_labels,
        "output_image": output_image,
        "verbose_flag": verbose_flag,
    };
    return params;
}


function first_mult_bcorr_cargs(
    params: FirstMultBcorrParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("first_mult_bcorr");
    cargs.push(
        "-i",
        execution.inputFile((params["input_image"] ?? null))
    );
    cargs.push(
        "-c",
        execution.inputFile((params["corrected_4d_labels"] ?? null))
    );
    cargs.push(
        "-u",
        execution.inputFile((params["uncorrected_4d_labels"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_image"] ?? null)
    );
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


function first_mult_bcorr_outputs(
    params: FirstMultBcorrParameters,
    execution: Execution,
): FirstMultBcorrOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FirstMultBcorrOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


function first_mult_bcorr_execute(
    params: FirstMultBcorrParameters,
    execution: Execution,
): FirstMultBcorrOutputs {
    /**
     * Part of FSL (ID: 6.0.5:9e026117), first_mult_bcorr converts label images to an output image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FirstMultBcorrOutputs`).
     */
    params = execution.params(params)
    const cargs = first_mult_bcorr_cargs(params, execution)
    const ret = first_mult_bcorr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function first_mult_bcorr(
    input_image: InputPathType,
    corrected_4d_labels: InputPathType,
    uncorrected_4d_labels: InputPathType,
    output_image: string,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): FirstMultBcorrOutputs {
    /**
     * Part of FSL (ID: 6.0.5:9e026117), first_mult_bcorr converts label images to an output image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_image Filename of original T1 input image
     * @param corrected_4d_labels Filename of 4D image of individually corrected labels
     * @param uncorrected_4d_labels Filename of 4D image of uncorrected labels (with boundaries)
     * @param output_image Output image name (3D label image)
     * @param verbose_flag Output F-stats to standard out
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FirstMultBcorrOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIRST_MULT_BCORR_METADATA);
    const params = first_mult_bcorr_params(input_image, corrected_4d_labels, uncorrected_4d_labels, output_image, verbose_flag)
    return first_mult_bcorr_execute(params, execution);
}


export {
      FIRST_MULT_BCORR_METADATA,
      FirstMultBcorrOutputs,
      FirstMultBcorrParameters,
      first_mult_bcorr,
      first_mult_bcorr_params,
};
