// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICESDIR_METADATA: Metadata = {
    id: "515a057aa519c3af4559980e4a388cd4bf6a79fc.boutiques",
    name: "slicesdir",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SlicesdirParameters {
    "@type"?: "fsl/slicesdir";
    "flag_filelist": boolean;
    "outline_image"?: InputPathType | null | undefined;
    "edge_threshold"?: number | null | undefined;
    "slice_option": boolean;
    "filelist": Array<string>;
}
type SlicesdirParametersTagged = Required<Pick<SlicesdirParameters, '@type'>> & SlicesdirParameters;


/**
 * Output object returned when calling `SlicesdirParameters(...)`.
 *
 * @interface
 */
interface SlicesdirOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filelist List of image files to process
 * @param flag_filelist Filelist contains pairs of images (underlying and red-outline images)
 * @param outline_image Use the specified image as the red-outline image on top of all images in the file list
 * @param edge_threshold Use specified threshold for edges. If >0, use this proportion of max-min; if <0, use the absolute value
 * @param slice_option Output every second axial slice instead of 9 ortho slices
 *
 * @returns Parameter dictionary
 */
function slicesdir_params(
    filelist: Array<string>,
    flag_filelist: boolean = false,
    outline_image: InputPathType | null = null,
    edge_threshold: number | null = null,
    slice_option: boolean = false,
): SlicesdirParametersTagged {
    const params = {
        "@type": "fsl/slicesdir" as const,
        "flag_filelist": flag_filelist,
        "slice_option": slice_option,
        "filelist": filelist,
    };
    if (outline_image !== null) {
        params["outline_image"] = outline_image;
    }
    if (edge_threshold !== null) {
        params["edge_threshold"] = edge_threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function slicesdir_cargs(
    params: SlicesdirParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("slicesdir");
    if ((params["flag_filelist"] ?? false)) {
        cargs.push("-o");
    }
    if ((params["outline_image"] ?? null) !== null) {
        cargs.push(
            "-p",
            execution.inputFile((params["outline_image"] ?? null))
        );
    }
    if ((params["edge_threshold"] ?? null) !== null) {
        cargs.push(
            "-e",
            String((params["edge_threshold"] ?? null))
        );
    }
    if ((params["slice_option"] ?? false)) {
        cargs.push("-S");
    }
    cargs.push(...(params["filelist"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function slicesdir_outputs(
    params: SlicesdirParameters,
    execution: Execution,
): SlicesdirOutputs {
    const ret: SlicesdirOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * slicesdir
 *
 * slicesdir generates a directory containing orthogonal slices through a set of images.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlicesdirOutputs`).
 */
function slicesdir_execute(
    params: SlicesdirParameters,
    runner: Runner | null = null,
): SlicesdirOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICESDIR_METADATA);
    params = execution.params(params)
    const cargs = slicesdir_cargs(params, execution)
    const ret = slicesdir_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * slicesdir
 *
 * slicesdir generates a directory containing orthogonal slices through a set of images.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param filelist List of image files to process
 * @param flag_filelist Filelist contains pairs of images (underlying and red-outline images)
 * @param outline_image Use the specified image as the red-outline image on top of all images in the file list
 * @param edge_threshold Use specified threshold for edges. If >0, use this proportion of max-min; if <0, use the absolute value
 * @param slice_option Output every second axial slice instead of 9 ortho slices
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlicesdirOutputs`).
 */
function slicesdir(
    filelist: Array<string>,
    flag_filelist: boolean = false,
    outline_image: InputPathType | null = null,
    edge_threshold: number | null = null,
    slice_option: boolean = false,
    runner: Runner | null = null,
): SlicesdirOutputs {
    const params = slicesdir_params(filelist, flag_filelist, outline_image, edge_threshold, slice_option)
    return slicesdir_execute(params, runner);
}


export {
      SLICESDIR_METADATA,
      SlicesdirOutputs,
      slicesdir,
      slicesdir_execute,
      slicesdir_params,
};
