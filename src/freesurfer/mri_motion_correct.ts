// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MOTION_CORRECT_METADATA: Metadata = {
    id: "e3cdcc714574b07a3047dfa8b26f52021ec4b3c1.boutiques",
    name: "mri_motion_correct",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMotionCorrectParameters {
    "@type": "freesurfer.mri_motion_correct";
    "outfile": string;
    "infiles": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_motion_correct": mri_motion_correct_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_motion_correct": mri_motion_correct_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_motion_correct(...)`.
 *
 * @interface
 */
interface MriMotionCorrectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected MRI image output file.
     */
    corrected_outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param outfile Output file where the corrected MRI image(s) will be stored.
 * @param infiles Input MRI image files to be corrected.
 *
 * @returns Parameter dictionary
 */
function mri_motion_correct_params(
    outfile: string,
    infiles: Array<InputPathType>,
): MriMotionCorrectParameters {
    const params = {
        "@type": "freesurfer.mri_motion_correct" as const,
        "outfile": outfile,
        "infiles": infiles,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_motion_correct_cargs(
    params: MriMotionCorrectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_motion_correct");
    cargs.push((params["outfile"] ?? null));
    cargs.push(...(params["infiles"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_motion_correct_outputs(
    params: MriMotionCorrectParameters,
    execution: Execution,
): MriMotionCorrectOutputs {
    const ret: MriMotionCorrectOutputs = {
        root: execution.outputFile("."),
        corrected_outfile: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_motion_correct
 *
 * Tool for correcting motion in MRI scans.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMotionCorrectOutputs`).
 */
function mri_motion_correct_execute(
    params: MriMotionCorrectParameters,
    runner: Runner | null = null,
): MriMotionCorrectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MOTION_CORRECT_METADATA);
    params = execution.params(params)
    const cargs = mri_motion_correct_cargs(params, execution)
    const ret = mri_motion_correct_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_motion_correct
 *
 * Tool for correcting motion in MRI scans.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param outfile Output file where the corrected MRI image(s) will be stored.
 * @param infiles Input MRI image files to be corrected.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMotionCorrectOutputs`).
 */
function mri_motion_correct(
    outfile: string,
    infiles: Array<InputPathType>,
    runner: Runner | null = null,
): MriMotionCorrectOutputs {
    const params = mri_motion_correct_params(outfile, infiles)
    return mri_motion_correct_execute(params, runner);
}


export {
      MRI_MOTION_CORRECT_METADATA,
      MriMotionCorrectOutputs,
      MriMotionCorrectParameters,
      mri_motion_correct,
      mri_motion_correct_execute,
      mri_motion_correct_params,
};
