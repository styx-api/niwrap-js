// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SBBR_METADATA: Metadata = {
    id: "cad623faef9febdd01c74e1739a5076f9d8c234d.boutiques",
    name: "mri_sbbr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSbbrParameters {
    "@type": "freesurfer.mri_sbbr";
    "template_volume": InputPathType;
    "surface_file": InputPathType;
    "init_reg_file": InputPathType;
    "t1": boolean;
    "t2": boolean;
    "optimization_type"?: number | null | undefined;
    "distance_in"?: number | null | undefined;
    "distance_out"?: number | null | undefined;
    "slope"?: number | null | undefined;
    "ftol"?: number | null | undefined;
    "linmintol"?: number | null | undefined;
    "niters_max"?: number | null | undefined;
    "search"?: string | null | undefined;
    "search1d"?: string | null | undefined;
    "parameter_set"?: string | null | undefined;
    "increment"?: number | null | undefined;
    "slice_number"?: number | null | undefined;
    "threads"?: number | null | undefined;
    "output_registration"?: string | null | undefined;
    "inverted_output_registration"?: string | null | undefined;
    "output_surface"?: string | null | undefined;
    "debug": boolean;
    "diagnostic": boolean;
    "check_options": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_sbbr": mri_sbbr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_sbbr(...)`.
 *
 * @interface
 */
interface MriSbbrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param template_volume Template volume file.
 * @param surface_file Surface file.
 * @param init_reg_file Initial registration file.
 * @param t1 Use T1-weighted image.
 * @param t2 Use T2-weighted image.
 * @param optimization_type Optimization type; choose 1, 2, or 3 (default is 1, 6 dof).
 * @param distance_in Distance in mm into surface (default 1.0).
 * @param distance_out Distance in mm out of surface (default 2.0).
 * @param slope BBR slope (default 0.5).
 * @param ftol Tolerance for fitting (default 1.000000e-08).
 * @param linmintol Linear minimization tolerance (default 0.0).
 * @param niters_max Maximum number of iterations (default 10).
 * @param search Brute force search through parameter space.
 * @param search1d 1D search through parameter space.
 * @param parameter_set Set initial parameter.
 * @param increment Face number increment (default 1).
 * @param slice_number Slice number (defaults to 0).
 * @param threads Number of threads.
 * @param output_registration Output registration file.
 * @param inverted_output_registration Inverted output registration file.
 * @param output_surface Output surface in slice coordinates.
 * @param debug Turn on debugging.
 * @param diagnostic Turn on diagnostics.
 * @param check_options Don't run anything, just check options and exit.
 *
 * @returns Parameter dictionary
 */
function mri_sbbr_params(
    template_volume: InputPathType,
    surface_file: InputPathType,
    init_reg_file: InputPathType,
    t1: boolean = false,
    t2: boolean = false,
    optimization_type: number | null = null,
    distance_in: number | null = null,
    distance_out: number | null = null,
    slope: number | null = null,
    ftol: number | null = null,
    linmintol: number | null = null,
    niters_max: number | null = null,
    search: string | null = null,
    search1d: string | null = null,
    parameter_set: string | null = null,
    increment: number | null = null,
    slice_number: number | null = null,
    threads: number | null = null,
    output_registration: string | null = null,
    inverted_output_registration: string | null = null,
    output_surface: string | null = null,
    debug: boolean = false,
    diagnostic: boolean = false,
    check_options: boolean = false,
): MriSbbrParameters {
    const params = {
        "@type": "freesurfer.mri_sbbr" as const,
        "template_volume": template_volume,
        "surface_file": surface_file,
        "init_reg_file": init_reg_file,
        "t1": t1,
        "t2": t2,
        "debug": debug,
        "diagnostic": diagnostic,
        "check_options": check_options,
    };
    if (optimization_type !== null) {
        params["optimization_type"] = optimization_type;
    }
    if (distance_in !== null) {
        params["distance_in"] = distance_in;
    }
    if (distance_out !== null) {
        params["distance_out"] = distance_out;
    }
    if (slope !== null) {
        params["slope"] = slope;
    }
    if (ftol !== null) {
        params["ftol"] = ftol;
    }
    if (linmintol !== null) {
        params["linmintol"] = linmintol;
    }
    if (niters_max !== null) {
        params["niters_max"] = niters_max;
    }
    if (search !== null) {
        params["search"] = search;
    }
    if (search1d !== null) {
        params["search1d"] = search1d;
    }
    if (parameter_set !== null) {
        params["parameter_set"] = parameter_set;
    }
    if (increment !== null) {
        params["increment"] = increment;
    }
    if (slice_number !== null) {
        params["slice_number"] = slice_number;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (output_registration !== null) {
        params["output_registration"] = output_registration;
    }
    if (inverted_output_registration !== null) {
        params["inverted_output_registration"] = inverted_output_registration;
    }
    if (output_surface !== null) {
        params["output_surface"] = output_surface;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_sbbr_cargs(
    params: MriSbbrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_sbbr");
    cargs.push(
        "--mov",
        execution.inputFile((params["template_volume"] ?? null))
    );
    cargs.push(
        "--surf",
        execution.inputFile((params["surface_file"] ?? null))
    );
    cargs.push(
        "--init-reg",
        execution.inputFile((params["init_reg_file"] ?? null))
    );
    if ((params["t1"] ?? null)) {
        cargs.push("--t1");
    }
    if ((params["t2"] ?? null)) {
        cargs.push("--t2");
    }
    if ((params["optimization_type"] ?? null) !== null) {
        cargs.push(
            "--opt",
            String((params["optimization_type"] ?? null))
        );
    }
    if ((params["distance_in"] ?? null) !== null) {
        cargs.push(
            "--din",
            String((params["distance_in"] ?? null))
        );
    }
    if ((params["distance_out"] ?? null) !== null) {
        cargs.push(
            "--dout",
            String((params["distance_out"] ?? null))
        );
    }
    if ((params["slope"] ?? null) !== null) {
        cargs.push(
            "--slope",
            String((params["slope"] ?? null))
        );
    }
    if ((params["ftol"] ?? null) !== null) {
        cargs.push(
            "--ftol",
            String((params["ftol"] ?? null))
        );
    }
    if ((params["linmintol"] ?? null) !== null) {
        cargs.push(
            "--linmintol",
            String((params["linmintol"] ?? null))
        );
    }
    if ((params["niters_max"] ?? null) !== null) {
        cargs.push(
            "--niters-max",
            String((params["niters_max"] ?? null))
        );
    }
    if ((params["search"] ?? null) !== null) {
        cargs.push(
            "--search",
            (params["search"] ?? null)
        );
    }
    if ((params["search1d"] ?? null) !== null) {
        cargs.push(
            "--search1d",
            (params["search1d"] ?? null)
        );
    }
    if ((params["parameter_set"] ?? null) !== null) {
        cargs.push(
            "--p",
            (params["parameter_set"] ?? null)
        );
    }
    if ((params["increment"] ?? null) !== null) {
        cargs.push(
            "--inc",
            String((params["increment"] ?? null))
        );
    }
    if ((params["slice_number"] ?? null) !== null) {
        cargs.push(
            "--slice",
            String((params["slice_number"] ?? null))
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["output_registration"] ?? null) !== null) {
        cargs.push(
            "--reg",
            (params["output_registration"] ?? null)
        );
    }
    if ((params["inverted_output_registration"] ?? null) !== null) {
        cargs.push(
            "--reg-inv",
            (params["inverted_output_registration"] ?? null)
        );
    }
    if ((params["output_surface"] ?? null) !== null) {
        cargs.push(
            "--out-surf",
            (params["output_surface"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["diagnostic"] ?? null)) {
        cargs.push("--diag");
    }
    if ((params["check_options"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_sbbr_outputs(
    params: MriSbbrParameters,
    execution: Execution,
): MriSbbrOutputs {
    const ret: MriSbbrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Special implementation of boundary-based registration for a single slice.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriSbbrOutputs`).
 */
function mri_sbbr_execute(
    params: MriSbbrParameters,
    execution: Execution,
): MriSbbrOutputs {
    params = execution.params(params)
    const cargs = mri_sbbr_cargs(params, execution)
    const ret = mri_sbbr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Special implementation of boundary-based registration for a single slice.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param template_volume Template volume file.
 * @param surface_file Surface file.
 * @param init_reg_file Initial registration file.
 * @param t1 Use T1-weighted image.
 * @param t2 Use T2-weighted image.
 * @param optimization_type Optimization type; choose 1, 2, or 3 (default is 1, 6 dof).
 * @param distance_in Distance in mm into surface (default 1.0).
 * @param distance_out Distance in mm out of surface (default 2.0).
 * @param slope BBR slope (default 0.5).
 * @param ftol Tolerance for fitting (default 1.000000e-08).
 * @param linmintol Linear minimization tolerance (default 0.0).
 * @param niters_max Maximum number of iterations (default 10).
 * @param search Brute force search through parameter space.
 * @param search1d 1D search through parameter space.
 * @param parameter_set Set initial parameter.
 * @param increment Face number increment (default 1).
 * @param slice_number Slice number (defaults to 0).
 * @param threads Number of threads.
 * @param output_registration Output registration file.
 * @param inverted_output_registration Inverted output registration file.
 * @param output_surface Output surface in slice coordinates.
 * @param debug Turn on debugging.
 * @param diagnostic Turn on diagnostics.
 * @param check_options Don't run anything, just check options and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSbbrOutputs`).
 */
function mri_sbbr(
    template_volume: InputPathType,
    surface_file: InputPathType,
    init_reg_file: InputPathType,
    t1: boolean = false,
    t2: boolean = false,
    optimization_type: number | null = null,
    distance_in: number | null = null,
    distance_out: number | null = null,
    slope: number | null = null,
    ftol: number | null = null,
    linmintol: number | null = null,
    niters_max: number | null = null,
    search: string | null = null,
    search1d: string | null = null,
    parameter_set: string | null = null,
    increment: number | null = null,
    slice_number: number | null = null,
    threads: number | null = null,
    output_registration: string | null = null,
    inverted_output_registration: string | null = null,
    output_surface: string | null = null,
    debug: boolean = false,
    diagnostic: boolean = false,
    check_options: boolean = false,
    runner: Runner | null = null,
): MriSbbrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SBBR_METADATA);
    const params = mri_sbbr_params(template_volume, surface_file, init_reg_file, t1, t2, optimization_type, distance_in, distance_out, slope, ftol, linmintol, niters_max, search, search1d, parameter_set, increment, slice_number, threads, output_registration, inverted_output_registration, output_surface, debug, diagnostic, check_options)
    return mri_sbbr_execute(params, execution);
}


export {
      MRI_SBBR_METADATA,
      MriSbbrOutputs,
      MriSbbrParameters,
      mri_sbbr,
      mri_sbbr_cargs,
      mri_sbbr_execute,
      mri_sbbr_outputs,
      mri_sbbr_params,
};
