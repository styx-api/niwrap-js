// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NEURO_DECONVOLVE_PY_METADATA: Metadata = {
    id: "154583959fdfd006d275bd6d8f9c6a8e067b7747.boutiques",
    name: "neuro_deconvolve.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface NeuroDeconvolvePyParameters {
    "@type": "afni.neuro_deconvolve.py";
    "input_file": InputPathType;
    "prefix": string;
    "script": string;
    "kernel"?: string | null | undefined;
    "kernel_file"?: string | null | undefined;
    "mask_dset"?: InputPathType | null | undefined;
    "old_style": boolean;
    "tr"?: number | null | undefined;
    "tr_nup"?: number | null | undefined;
    "verbosity"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.neuro_deconvolve.py": neuro_deconvolve_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.neuro_deconvolve.py": neuro_deconvolve_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `neuro_deconvolve_py(...)`.
 *
 * @interface
 */
interface NeuroDeconvolvePyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main default output head file
     */
    output_head: OutputPathType;
    /**
     * Main default output BRIK file
     */
    output_brik: OutputPathType;
    /**
     * File storing the response kernel
     */
    kernel_file_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file Set the data to deconvolve
 * @param prefix Set the prefix for output filenames
 * @param script Specify the name of the output script
 * @param kernel Set the response kernel
 * @param kernel_file Set the filename to store the kernel in; should be at the upsampled TR
 * @param mask_dset Set a mask dataset for 3dTfitter to use
 * @param old_style Make old-style script (pre-2015.02.24) for 1D case
 * @param tr Set the scanner TR; needed for 1D formatted input files
 * @param tr_nup Upsample factor for TR; number of pieces each original TR is divided into
 * @param verbosity Set the verbose level
 *
 * @returns Parameter dictionary
 */
function neuro_deconvolve_py_params(
    input_file: InputPathType,
    prefix: string,
    script: string,
    kernel: string | null = null,
    kernel_file: string | null = null,
    mask_dset: InputPathType | null = null,
    old_style: boolean = false,
    tr: number | null = null,
    tr_nup: number | null = null,
    verbosity: number | null = null,
): NeuroDeconvolvePyParameters {
    const params = {
        "@type": "afni.neuro_deconvolve.py" as const,
        "input_file": input_file,
        "prefix": prefix,
        "script": script,
        "old_style": old_style,
    };
    if (kernel !== null) {
        params["kernel"] = kernel;
    }
    if (kernel_file !== null) {
        params["kernel_file"] = kernel_file;
    }
    if (mask_dset !== null) {
        params["mask_dset"] = mask_dset;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (tr_nup !== null) {
        params["tr_nup"] = tr_nup;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function neuro_deconvolve_py_cargs(
    params: NeuroDeconvolvePyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("neuro_deconvolve.py");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["prefix"] ?? null));
    cargs.push((params["script"] ?? null));
    if ((params["kernel"] ?? null) !== null) {
        cargs.push(
            "-kernel",
            (params["kernel"] ?? null)
        );
    }
    if ((params["kernel_file"] ?? null) !== null) {
        cargs.push(
            "-kernel_file",
            (params["kernel_file"] ?? null)
        );
    }
    if ((params["mask_dset"] ?? null) !== null) {
        cargs.push(
            "-mask_dset",
            execution.inputFile((params["mask_dset"] ?? null))
        );
    }
    if ((params["old_style"] ?? null)) {
        cargs.push("-old");
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-tr",
            String((params["tr"] ?? null))
        );
    }
    if ((params["tr_nup"] ?? null) !== null) {
        cargs.push(
            "-tr_nup",
            String((params["tr_nup"] ?? null))
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function neuro_deconvolve_py_outputs(
    params: NeuroDeconvolvePyParameters,
    execution: Execution,
): NeuroDeconvolvePyOutputs {
    const ret: NeuroDeconvolvePyOutputs = {
        root: execution.outputFile("."),
        output_head: execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')),
        output_brik: execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')),
        kernel_file_out: ((params["kernel_file"] ?? null) !== null) ? execution.outputFile([(params["kernel_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Generate a script to apply 3dTfitter to deconvolve an MRI signal (BOLD response curve) into a neuro response curve.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NeuroDeconvolvePyOutputs`).
 */
function neuro_deconvolve_py_execute(
    params: NeuroDeconvolvePyParameters,
    runner: Runner | null = null,
): NeuroDeconvolvePyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NEURO_DECONVOLVE_PY_METADATA);
    params = execution.params(params)
    const cargs = neuro_deconvolve_py_cargs(params, execution)
    const ret = neuro_deconvolve_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Generate a script to apply 3dTfitter to deconvolve an MRI signal (BOLD response curve) into a neuro response curve.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Set the data to deconvolve
 * @param prefix Set the prefix for output filenames
 * @param script Specify the name of the output script
 * @param kernel Set the response kernel
 * @param kernel_file Set the filename to store the kernel in; should be at the upsampled TR
 * @param mask_dset Set a mask dataset for 3dTfitter to use
 * @param old_style Make old-style script (pre-2015.02.24) for 1D case
 * @param tr Set the scanner TR; needed for 1D formatted input files
 * @param tr_nup Upsample factor for TR; number of pieces each original TR is divided into
 * @param verbosity Set the verbose level
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NeuroDeconvolvePyOutputs`).
 */
function neuro_deconvolve_py(
    input_file: InputPathType,
    prefix: string,
    script: string,
    kernel: string | null = null,
    kernel_file: string | null = null,
    mask_dset: InputPathType | null = null,
    old_style: boolean = false,
    tr: number | null = null,
    tr_nup: number | null = null,
    verbosity: number | null = null,
    runner: Runner | null = null,
): NeuroDeconvolvePyOutputs {
    const params = neuro_deconvolve_py_params(input_file, prefix, script, kernel, kernel_file, mask_dset, old_style, tr, tr_nup, verbosity)
    return neuro_deconvolve_py_execute(params, runner);
}


export {
      NEURO_DECONVOLVE_PY_METADATA,
      NeuroDeconvolvePyOutputs,
      NeuroDeconvolvePyParameters,
      neuro_deconvolve_py,
      neuro_deconvolve_py_execute,
      neuro_deconvolve_py_params,
};
