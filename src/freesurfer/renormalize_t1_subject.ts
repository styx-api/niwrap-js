// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RENORMALIZE_T1_SUBJECT_METADATA: Metadata = {
    id: "286fd25c6ee0546f2ffe25c3d4f9319f45adaa90.boutiques",
    name: "renormalize_T1_subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RenormalizeT1SubjectParameters {
    "@type"?: "freesurfer/renormalize_T1_subject";
    "subject_dir": string;
}
type RenormalizeT1SubjectParametersTagged = Required<Pick<RenormalizeT1SubjectParameters, '@type'>> & RenormalizeT1SubjectParameters;


/**
 * Output object returned when calling `RenormalizeT1SubjectParameters(...)`.
 *
 * @interface
 */
interface RenormalizeT1SubjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_dir Directory of the subject containing T1 images to renormalize
 *
 * @returns Parameter dictionary
 */
function renormalize_t1_subject_params(
    subject_dir: string,
): RenormalizeT1SubjectParametersTagged {
    const params = {
        "@type": "freesurfer/renormalize_T1_subject" as const,
        "subject_dir": subject_dir,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function renormalize_t1_subject_cargs(
    params: RenormalizeT1SubjectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("renormalize_T1_subject");
    cargs.push((params["subject_dir"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function renormalize_t1_subject_outputs(
    params: RenormalizeT1SubjectParameters,
    execution: Execution,
): RenormalizeT1SubjectOutputs {
    const ret: RenormalizeT1SubjectOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * renormalize_T1_subject
 *
 * Renormalize T1 subject images using FreeSurfer scripts.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RenormalizeT1SubjectOutputs`).
 */
function renormalize_t1_subject_execute(
    params: RenormalizeT1SubjectParameters,
    runner: Runner | null = null,
): RenormalizeT1SubjectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RENORMALIZE_T1_SUBJECT_METADATA);
    params = execution.params(params)
    const cargs = renormalize_t1_subject_cargs(params, execution)
    const ret = renormalize_t1_subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * renormalize_T1_subject
 *
 * Renormalize T1 subject images using FreeSurfer scripts.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_dir Directory of the subject containing T1 images to renormalize
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RenormalizeT1SubjectOutputs`).
 */
function renormalize_t1_subject(
    subject_dir: string,
    runner: Runner | null = null,
): RenormalizeT1SubjectOutputs {
    const params = renormalize_t1_subject_params(subject_dir)
    return renormalize_t1_subject_execute(params, runner);
}


export {
      RENORMALIZE_T1_SUBJECT_METADATA,
      RenormalizeT1SubjectOutputs,
      renormalize_t1_subject,
      renormalize_t1_subject_execute,
      renormalize_t1_subject_params,
};
