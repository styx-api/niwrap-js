// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_COMPUTE_BIAS_METADATA: Metadata = {
    id: "fd8e507da48077556003e985db0ee8f6c8bbbc9b.boutiques",
    name: "mri_compute_bias",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriComputeBiasParameters {
    "@type": "freesurfer.mri_compute_bias";
    "subjects": Array<string>;
    "output_volume": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_compute_bias": mri_compute_bias_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_compute_bias": mri_compute_bias_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_compute_bias(...)`.
 *
 * @interface
 */
interface MriComputeBiasOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output volume containing the bias correction result.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjects List of subjects for which bias correction is calculated.
 * @param output_volume Output volume where the result will be stored.
 *
 * @returns Parameter dictionary
 */
function mri_compute_bias_params(
    subjects: Array<string>,
    output_volume: string,
): MriComputeBiasParameters {
    const params = {
        "@type": "freesurfer.mri_compute_bias" as const,
        "subjects": subjects,
        "output_volume": output_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_compute_bias_cargs(
    params: MriComputeBiasParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_compute_bias");
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_compute_bias_outputs(
    params: MriComputeBiasParameters,
    execution: Execution,
): MriComputeBiasOutputs {
    const ret: MriComputeBiasOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_compute_bias
 *
 * Compute bias correction volumes for the given subjects and outputs the result to a specified volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriComputeBiasOutputs`).
 */
function mri_compute_bias_execute(
    params: MriComputeBiasParameters,
    runner: Runner | null = null,
): MriComputeBiasOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_COMPUTE_BIAS_METADATA);
    params = execution.params(params)
    const cargs = mri_compute_bias_cargs(params, execution)
    const ret = mri_compute_bias_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_compute_bias
 *
 * Compute bias correction volumes for the given subjects and outputs the result to a specified volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects List of subjects for which bias correction is calculated.
 * @param output_volume Output volume where the result will be stored.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriComputeBiasOutputs`).
 */
function mri_compute_bias(
    subjects: Array<string>,
    output_volume: string,
    runner: Runner | null = null,
): MriComputeBiasOutputs {
    const params = mri_compute_bias_params(subjects, output_volume)
    return mri_compute_bias_execute(params, runner);
}


export {
      MRI_COMPUTE_BIAS_METADATA,
      MriComputeBiasOutputs,
      MriComputeBiasParameters,
      mri_compute_bias,
      mri_compute_bias_execute,
      mri_compute_bias_params,
};
