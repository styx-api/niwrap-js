// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_COMBINE_STR_PY_METADATA: Metadata = {
    id: "000e1eed64bccb1d991895bd288ca5f9ee91719d.boutiques",
    name: "adjunct_combine_str.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctCombineStrPyParameters {
    "@type": "afni.adjunct_combine_str.py";
    "output_file": string;
    "upper_index": number;
    "string_selectors": Array<string>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.adjunct_combine_str.py": adjunct_combine_str_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.adjunct_combine_str.py": adjunct_combine_str_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_combine_str_py(...)`.
 *
 * @interface
 */
interface AdjunctCombineStrPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file containing the new string selector
     */
    output_selector_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_file An output file name
 * @param upper_index An int that is the upper index for the selector (-1 means to use the max number in the input strings)
 * @param string_selectors One or more string selector strings of *goods* to keep
 *
 * @returns Parameter dictionary
 */
function adjunct_combine_str_py_params(
    output_file: string,
    upper_index: number,
    string_selectors: Array<string>,
): AdjunctCombineStrPyParameters {
    const params = {
        "@type": "afni.adjunct_combine_str.py" as const,
        "output_file": output_file,
        "upper_index": upper_index,
        "string_selectors": string_selectors,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function adjunct_combine_str_py_cargs(
    params: AdjunctCombineStrPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("adjunct_combine_str.py");
    cargs.push((params["output_file"] ?? null));
    cargs.push(String((params["upper_index"] ?? null)));
    cargs.push(...(params["string_selectors"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function adjunct_combine_str_py_outputs(
    params: AdjunctCombineStrPyParameters,
    execution: Execution,
): AdjunctCombineStrPyOutputs {
    const ret: AdjunctCombineStrPyOutputs = {
        root: execution.outputFile("."),
        output_selector_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * A simple helper function for fat_proc* scripts that processes string selectors and outputs a new string selector.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctCombineStrPyOutputs`).
 */
function adjunct_combine_str_py_execute(
    params: AdjunctCombineStrPyParameters,
    runner: Runner | null = null,
): AdjunctCombineStrPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_COMBINE_STR_PY_METADATA);
    params = execution.params(params)
    const cargs = adjunct_combine_str_py_cargs(params, execution)
    const ret = adjunct_combine_str_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A simple helper function for fat_proc* scripts that processes string selectors and outputs a new string selector.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param output_file An output file name
 * @param upper_index An int that is the upper index for the selector (-1 means to use the max number in the input strings)
 * @param string_selectors One or more string selector strings of *goods* to keep
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctCombineStrPyOutputs`).
 */
function adjunct_combine_str_py(
    output_file: string,
    upper_index: number,
    string_selectors: Array<string>,
    runner: Runner | null = null,
): AdjunctCombineStrPyOutputs {
    const params = adjunct_combine_str_py_params(output_file, upper_index, string_selectors)
    return adjunct_combine_str_py_execute(params, runner);
}


export {
      ADJUNCT_COMBINE_STR_PY_METADATA,
      AdjunctCombineStrPyOutputs,
      AdjunctCombineStrPyParameters,
      adjunct_combine_str_py,
      adjunct_combine_str_py_execute,
      adjunct_combine_str_py_params,
};
