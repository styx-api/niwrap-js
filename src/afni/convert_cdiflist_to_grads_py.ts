// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERT_CDIFLIST_TO_GRADS_PY_METADATA: Metadata = {
    id: "64ab963d60d406f9d0685d461ee3fcdb60c15e0c.boutiques",
    name: "convert_cdiflist_to_grads.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ConvertCdiflistToGradsPyParameters {
    "@type"?: "afni/convert_cdiflist_to_grads.py";
    "cdiflist": InputPathType;
    "bval_max": number;
    "prefix": string;
    "ver": boolean;
    "date": boolean;
    "help": boolean;
    "hview": boolean;
}
type ConvertCdiflistToGradsPyParametersTagged = Required<Pick<ConvertCdiflistToGradsPyParameters, '@type'>> & ConvertCdiflistToGradsPyParameters;


/**
 * Output object returned when calling `ConvertCdiflistToGradsPyParameters(...)`.
 *
 * @interface
 */
interface ConvertCdiflistToGradsPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Row-format of gradients (unit magnitude).
     */
    output_rvec: OutputPathType;
    /**
     * Row-format of bvals.
     */
    output_bval: OutputPathType;
    /**
     * Col-format of gradients (scaled by b-values).
     */
    output_cvec: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cdiflist Name(s) of cdiflist text file output by GE scanners when acquiring DWIs.
 * @param bval_max Max bvalue used, which provides a reference value for scaling everything else.
 * @param prefix Output basename for the subsequent grad and bvalue files (suffix and extensions will be added).
 * @param ver Display current version.
 * @param date Display release/editing date of current version.
 * @param help Display help in terminal.
 * @param hview Display help in terminal.
 *
 * @returns Parameter dictionary
 */
function convert_cdiflist_to_grads_py_params(
    cdiflist: InputPathType,
    bval_max: number,
    prefix: string,
    ver: boolean = false,
    date: boolean = false,
    help: boolean = false,
    hview: boolean = false,
): ConvertCdiflistToGradsPyParametersTagged {
    const params = {
        "@type": "afni/convert_cdiflist_to_grads.py" as const,
        "cdiflist": cdiflist,
        "bval_max": bval_max,
        "prefix": prefix,
        "ver": ver,
        "date": date,
        "help": help,
        "hview": hview,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_cdiflist_to_grads_py_cargs(
    params: ConvertCdiflistToGradsPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("convert_cdiflist_to_grads.py");
    cargs.push(
        "-cdiflist",
        execution.inputFile((params["cdiflist"] ?? null))
    );
    cargs.push(
        "-bval_max",
        String((params["bval_max"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["ver"] ?? false)) {
        cargs.push("-ver");
    }
    if ((params["date"] ?? false)) {
        cargs.push("-date");
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["hview"] ?? false)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function convert_cdiflist_to_grads_py_outputs(
    params: ConvertCdiflistToGradsPyParameters,
    execution: Execution,
): ConvertCdiflistToGradsPyOutputs {
    const ret: ConvertCdiflistToGradsPyOutputs = {
        root: execution.outputFile("."),
        output_rvec: execution.outputFile([(params["prefix"] ?? null), "_rvec.dat"].join('')),
        output_bval: execution.outputFile([(params["prefix"] ?? null), "_bval.dat"].join('')),
        output_cvec: execution.outputFile([(params["prefix"] ?? null), "_cvec.dat"].join('')),
    };
    return ret;
}


/**
 * convert_cdiflist_to_grads.py
 *
 * This program reads in a GE cdiflist and outputs gradient file and file of bvalues for subsequent processing.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertCdiflistToGradsPyOutputs`).
 */
function convert_cdiflist_to_grads_py_execute(
    params: ConvertCdiflistToGradsPyParameters,
    runner: Runner | null = null,
): ConvertCdiflistToGradsPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERT_CDIFLIST_TO_GRADS_PY_METADATA);
    params = execution.params(params)
    const cargs = convert_cdiflist_to_grads_py_cargs(params, execution)
    const ret = convert_cdiflist_to_grads_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * convert_cdiflist_to_grads.py
 *
 * This program reads in a GE cdiflist and outputs gradient file and file of bvalues for subsequent processing.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param cdiflist Name(s) of cdiflist text file output by GE scanners when acquiring DWIs.
 * @param bval_max Max bvalue used, which provides a reference value for scaling everything else.
 * @param prefix Output basename for the subsequent grad and bvalue files (suffix and extensions will be added).
 * @param ver Display current version.
 * @param date Display release/editing date of current version.
 * @param help Display help in terminal.
 * @param hview Display help in terminal.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertCdiflistToGradsPyOutputs`).
 */
function convert_cdiflist_to_grads_py(
    cdiflist: InputPathType,
    bval_max: number,
    prefix: string,
    ver: boolean = false,
    date: boolean = false,
    help: boolean = false,
    hview: boolean = false,
    runner: Runner | null = null,
): ConvertCdiflistToGradsPyOutputs {
    const params = convert_cdiflist_to_grads_py_params(cdiflist, bval_max, prefix, ver, date, help, hview)
    return convert_cdiflist_to_grads_py_execute(params, runner);
}


export {
      CONVERT_CDIFLIST_TO_GRADS_PY_METADATA,
      ConvertCdiflistToGradsPyOutputs,
      convert_cdiflist_to_grads_py,
      convert_cdiflist_to_grads_py_execute,
      convert_cdiflist_to_grads_py_params,
};
