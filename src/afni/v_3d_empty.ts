// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_EMPTY_METADATA: Metadata = {
    id: "d95bc850048040b099fd6ef056090b564f3ff824.boutiques",
    name: "3dEmpty",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dEmptyParameters {
    "__STYXTYPE__": "3dEmpty";
    "prefix"?: string | null | undefined;
    "geometry"?: string | null | undefined;
    "nxyz"?: Array<number> | null | undefined;
    "nt"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dEmpty": v_3d_empty_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dEmpty": v_3d_empty_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_empty(...)`.
 *
 * @interface
 */
interface V3dEmptyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output empty dataset header file
     */
    outfile: OutputPathType | null;
}


function v_3d_empty_params(
    prefix: string | null = null,
    geometry: string | null = null,
    nxyz: Array<number> | null = null,
    nt: number | null = null,
): V3dEmptyParameters {
    /**
     * Build parameters.
    
     * @param prefix Prefix name for output file (default = 'Empty')
     * @param geometry Set the 3D geometry of the grid using a string of the form 'MATRIX(a11,a12,a13,a14,a21,a22,a23,a24,a31,a32,a33,a34):nx,ny,nz'
     * @param nxyz Set number of voxels to 'x', 'y', and 'z' along the 3 axes [defaults=64]
     * @param nt Number of time points [default=1]
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dEmpty" as const,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (geometry !== null) {
        params["geometry"] = geometry;
    }
    if (nxyz !== null) {
        params["nxyz"] = nxyz;
    }
    if (nt !== null) {
        params["nt"] = nt;
    }
    return params;
}


function v_3d_empty_cargs(
    params: V3dEmptyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dEmpty");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["geometry"] ?? null) !== null) {
        cargs.push(
            "-geometry",
            (params["geometry"] ?? null)
        );
    }
    if ((params["nxyz"] ?? null) !== null) {
        cargs.push(
            "-nxyz",
            ...(params["nxyz"] ?? null).map(String)
        );
    }
    if ((params["nt"] ?? null) !== null) {
        cargs.push(
            "-nt",
            String((params["nt"] ?? null))
        );
    }
    return cargs;
}


function v_3d_empty_outputs(
    params: V3dEmptyParameters,
    execution: Execution,
): V3dEmptyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dEmptyOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".HEAD"].join('')) : null,
    };
    return ret;
}


function v_3d_empty_execute(
    params: V3dEmptyParameters,
    execution: Execution,
): V3dEmptyOutputs {
    /**
     * Tool to create an 'empty' dataset .HEAD file.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dEmptyOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_empty_cargs(params, execution)
    const ret = v_3d_empty_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_empty(
    prefix: string | null = null,
    geometry: string | null = null,
    nxyz: Array<number> | null = null,
    nt: number | null = null,
    runner: Runner | null = null,
): V3dEmptyOutputs {
    /**
     * Tool to create an 'empty' dataset .HEAD file.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix Prefix name for output file (default = 'Empty')
     * @param geometry Set the 3D geometry of the grid using a string of the form 'MATRIX(a11,a12,a13,a14,a21,a22,a23,a24,a31,a32,a33,a34):nx,ny,nz'
     * @param nxyz Set number of voxels to 'x', 'y', and 'z' along the 3 axes [defaults=64]
     * @param nt Number of time points [default=1]
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dEmptyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_EMPTY_METADATA);
    const params = v_3d_empty_params(prefix, geometry, nxyz, nt)
    return v_3d_empty_execute(params, execution);
}


export {
      V3dEmptyOutputs,
      V3dEmptyParameters,
      V_3D_EMPTY_METADATA,
      v_3d_empty,
      v_3d_empty_params,
};
