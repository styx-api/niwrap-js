// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ROTCOM_METADATA: Metadata = {
    id: "65366e1283781ddcf84d07b0c61d20c1cdbf07ba.boutiques",
    name: "rotcom",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface RotcomParameters {
    "__STYXTYPE__": "rotcom";
    "rotate_ashift": string;
    "dataset"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "rotcom": rotcom_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "rotcom": rotcom_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rotcom(...)`.
 *
 * @interface
 */
interface RotcomOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The 4x3 transformation matrix+vector output
     */
    stdout: OutputPathType;
}


function rotcom_params(
    rotate_ashift: string,
    dataset: InputPathType | null = null,
): RotcomParameters {
    /**
     * Build parameters.
    
     * @param rotate_ashift Combination of rotate and ashift options in a single quoted string (e.g., '-rotate 10I 0R 0A -ashift 5S 0 0')
     * @param dataset Input dataset for determining coordinate order
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "rotcom" as const,
        "rotate_ashift": rotate_ashift,
    };
    if (dataset !== null) {
        params["dataset"] = dataset;
    }
    return params;
}


function rotcom_cargs(
    params: RotcomParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("rotcom");
    cargs.push((params["rotate_ashift"] ?? null));
    if ((params["dataset"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["dataset"] ?? null)));
    }
    return cargs;
}


function rotcom_outputs(
    params: RotcomParameters,
    execution: Execution,
): RotcomOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RotcomOutputs = {
        root: execution.outputFile("."),
        stdout: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


function rotcom_execute(
    params: RotcomParameters,
    execution: Execution,
): RotcomOutputs {
    /**
     * Prints to stdout the 4x3 transformation matrix+vector that would be applied by 3drotate to the given dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RotcomOutputs`).
     */
    params = execution.params(params)
    const cargs = rotcom_cargs(params, execution)
    const ret = rotcom_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function rotcom(
    rotate_ashift: string,
    dataset: InputPathType | null = null,
    runner: Runner | null = null,
): RotcomOutputs {
    /**
     * Prints to stdout the 4x3 transformation matrix+vector that would be applied by 3drotate to the given dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param rotate_ashift Combination of rotate and ashift options in a single quoted string (e.g., '-rotate 10I 0R 0A -ashift 5S 0 0')
     * @param dataset Input dataset for determining coordinate order
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RotcomOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ROTCOM_METADATA);
    const params = rotcom_params(rotate_ashift, dataset)
    return rotcom_execute(params, execution);
}


export {
      ROTCOM_METADATA,
      RotcomOutputs,
      RotcomParameters,
      rotcom,
      rotcom_params,
};
