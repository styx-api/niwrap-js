// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const INFLATE_SUBJECT_LH_METADATA: Metadata = {
    id: "941fff4146cba765ed908e2c762f2faabcdf05c1.boutiques",
    name: "inflate_subject-lh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface InflateSubjectLhParameters {
    "__STYXTYPE__": "inflate_subject-lh";
    "input_folder": string;
    "hostname_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "inflate_subject-lh": inflate_subject_lh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `inflate_subject_lh(...)`.
 *
 * @interface
 */
interface InflateSubjectLhOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function inflate_subject_lh_params(
    input_folder: string,
    hostname_flag: boolean = false,
): InflateSubjectLhParameters {
    /**
     * Build parameters.
    
     * @param input_folder Input folder containing subject data
     * @param hostname_flag Flag to check hostname
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "inflate_subject-lh" as const,
        "input_folder": input_folder,
        "hostname_flag": hostname_flag,
    };
    return params;
}


function inflate_subject_lh_cargs(
    params: InflateSubjectLhParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("inflate_subject-lh");
    cargs.push(
        "-lh",
        (params["input_folder"] ?? null)
    );
    if ((params["hostname_flag"] ?? null)) {
        cargs.push("hostname");
    }
    return cargs;
}


function inflate_subject_lh_outputs(
    params: InflateSubjectLhParameters,
    execution: Execution,
): InflateSubjectLhOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: InflateSubjectLhOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function inflate_subject_lh_execute(
    params: InflateSubjectLhParameters,
    execution: Execution,
): InflateSubjectLhOutputs {
    /**
     * A tool to process and inflate left hemisphere subject data in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `InflateSubjectLhOutputs`).
     */
    params = execution.params(params)
    const cargs = inflate_subject_lh_cargs(params, execution)
    const ret = inflate_subject_lh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function inflate_subject_lh(
    input_folder: string,
    hostname_flag: boolean = false,
    runner: Runner | null = null,
): InflateSubjectLhOutputs {
    /**
     * A tool to process and inflate left hemisphere subject data in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_folder Input folder containing subject data
     * @param hostname_flag Flag to check hostname
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `InflateSubjectLhOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(INFLATE_SUBJECT_LH_METADATA);
    const params = inflate_subject_lh_params(input_folder, hostname_flag)
    return inflate_subject_lh_execute(params, execution);
}


export {
      INFLATE_SUBJECT_LH_METADATA,
      InflateSubjectLhOutputs,
      InflateSubjectLhParameters,
      inflate_subject_lh,
      inflate_subject_lh_params,
};
