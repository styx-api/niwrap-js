// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BIANCA_OVERLAP_MEASURES_METADATA: Metadata = {
    id: "32cd33627beaf4ee18589d46e026924168633418.boutiques",
    name: "bianca_overlap_measures",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface BiancaOverlapMeasuresParameters {
    "@type": "fsl.bianca_overlap_measures";
    "lesion_mask": InputPathType;
    "manual_mask": InputPathType;
    "output_dir": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.bianca_overlap_measures": bianca_overlap_measures_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.bianca_overlap_measures": bianca_overlap_measures_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `bianca_overlap_measures(...)`.
 *
 * @interface
 */
interface BiancaOverlapMeasuresOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * True positive voxels in automatic mask
     */
    tp_auto: OutputPathType;
    /**
     * True positive voxels in manual mask
     */
    tp_manual: OutputPathType;
    /**
     * False positive voxels that overlap with true positives
     */
    fp_vox_tp_overlap: OutputPathType;
    /**
     * False negative voxels that overlap with true positives
     */
    fn_vox_tp_overlap: OutputPathType;
    /**
     * Indexed lesion mask
     */
    lesmask_idx: OutputPathType;
    /**
     * Indexed manual mask
     */
    manualmask_idx: OutputPathType;
    /**
     * True positive indexed lesion mask
     */
    lesmask_idx_tp: OutputPathType;
    /**
     * True positive indexed manual mask
     */
    manualmask_idx_tp: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param lesion_mask Lesion mask image file
 * @param manual_mask Manual mask image file
 * @param output_dir Output directory for generated files
 *
 * @returns Parameter dictionary
 */
function bianca_overlap_measures_params(
    lesion_mask: InputPathType,
    manual_mask: InputPathType,
    output_dir: string,
): BiancaOverlapMeasuresParameters {
    const params = {
        "@type": "fsl.bianca_overlap_measures" as const,
        "lesion_mask": lesion_mask,
        "manual_mask": manual_mask,
        "output_dir": output_dir,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function bianca_overlap_measures_cargs(
    params: BiancaOverlapMeasuresParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("bianca_overlap_measures");
    cargs.push(execution.inputFile((params["lesion_mask"] ?? null)));
    cargs.push(execution.inputFile((params["manual_mask"] ?? null)));
    cargs.push((params["output_dir"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function bianca_overlap_measures_outputs(
    params: BiancaOverlapMeasuresParameters,
    execution: Execution,
): BiancaOverlapMeasuresOutputs {
    const ret: BiancaOverlapMeasuresOutputs = {
        root: execution.outputFile("."),
        tp_auto: execution.outputFile(["{OUTPUT_DIR}/TPauto.nii.gz"].join('')),
        tp_manual: execution.outputFile(["{OUTPUT_DIR}/TPmanual.nii.gz"].join('')),
        fp_vox_tp_overlap: execution.outputFile(["{OUTPUT_DIR}/FPvox_TP_overlap.nii.gz"].join('')),
        fn_vox_tp_overlap: execution.outputFile(["{OUTPUT_DIR}/FNvox_TP_overlap.nii.gz"].join('')),
        lesmask_idx: execution.outputFile(["{OUTPUT_DIR}/lesmask_idx.nii.gz"].join('')),
        manualmask_idx: execution.outputFile(["{OUTPUT_DIR}/manualmask_idx.nii.gz"].join('')),
        lesmask_idx_tp: execution.outputFile(["{OUTPUT_DIR}/lesmask_idx_TP.nii.gz"].join('')),
        manualmask_idx_tp: execution.outputFile(["{OUTPUT_DIR}/manualmask_idx_TP.nii.gz"].join('')),
    };
    return ret;
}


/**
 * bianca_overlap_measures
 *
 * BIANCA overlap measures script for FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BiancaOverlapMeasuresOutputs`).
 */
function bianca_overlap_measures_execute(
    params: BiancaOverlapMeasuresParameters,
    runner: Runner | null = null,
): BiancaOverlapMeasuresOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BIANCA_OVERLAP_MEASURES_METADATA);
    params = execution.params(params)
    const cargs = bianca_overlap_measures_cargs(params, execution)
    const ret = bianca_overlap_measures_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * bianca_overlap_measures
 *
 * BIANCA overlap measures script for FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param lesion_mask Lesion mask image file
 * @param manual_mask Manual mask image file
 * @param output_dir Output directory for generated files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BiancaOverlapMeasuresOutputs`).
 */
function bianca_overlap_measures(
    lesion_mask: InputPathType,
    manual_mask: InputPathType,
    output_dir: string,
    runner: Runner | null = null,
): BiancaOverlapMeasuresOutputs {
    const params = bianca_overlap_measures_params(lesion_mask, manual_mask, output_dir)
    return bianca_overlap_measures_execute(params, runner);
}


export {
      BIANCA_OVERLAP_MEASURES_METADATA,
      BiancaOverlapMeasuresOutputs,
      BiancaOverlapMeasuresParameters,
      bianca_overlap_measures,
      bianca_overlap_measures_execute,
      bianca_overlap_measures_params,
};
