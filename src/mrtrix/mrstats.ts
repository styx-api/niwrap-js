// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRSTATS_METADATA: Metadata = {
    id: "a0e8ad6624129b47028cef6351f07fe776fbe211.boutiques",
    name: "mrstats",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrstatsOutputParameters {
    "@type": "mrtrix.mrstats.output";
    "field": string;
}


interface MrstatsConfigParameters {
    "@type": "mrtrix.mrstats.config";
    "key": string;
    "value": string;
}


interface MrstatsParameters {
    "@type": "mrtrix.mrstats";
    "output"?: Array<MrstatsOutputParameters> | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "ignorezero": boolean;
    "allvolumes": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrstatsConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "image": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.mrstats": mrstats_cargs,
        "mrtrix.mrstats.output": mrstats_output_cargs,
        "mrtrix.mrstats.config": mrstats_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param field output only the field specified. Multiple such options can be supplied if required. Choices are: mean, median, std, std_rv, min, max, count. Useful for use in scripts. Both std options refer to the unbiased (sample) standard deviation. For complex data, min, max and std are calculated separately for real and imaginary parts, std_rv is based on the real valued variance (equals sqrt of sum of variances of imaginary and real parts).
 *
 * @returns Parameter dictionary
 */
function mrstats_output_params(
    field: string,
): MrstatsOutputParameters {
    const params = {
        "@type": "mrtrix.mrstats.output" as const,
        "field": field,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrstats_output_cargs(
    params: MrstatsOutputParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-output");
    cargs.push((params["field"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrstats_config_params(
    key: string,
    value: string,
): MrstatsConfigParameters {
    const params = {
        "@type": "mrtrix.mrstats.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrstats_config_cargs(
    params: MrstatsConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mrstats(...)`.
 *
 * @interface
 */
interface MrstatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image the input image from which statistics will be computed.
 * @param output output only the field specified. Multiple such options can be supplied if required. Choices are: mean, median, std, std_rv, min, max, count. Useful for use in scripts. Both std options refer to the unbiased (sample) standard deviation. For complex data, min, max and std are calculated separately for real and imaginary parts, std_rv is based on the real valued variance (equals sqrt of sum of variances of imaginary and real parts).
 * @param mask only perform computation within the specified binary mask image.
 * @param ignorezero ignore zero values during statistics calculation
 * @param allvolumes generate statistics across all image volumes, rather than one set of statistics per image volume
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrstats_params(
    image: InputPathType,
    output: Array<MrstatsOutputParameters> | null = null,
    mask: InputPathType | null = null,
    ignorezero: boolean = false,
    allvolumes: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrstatsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrstatsParameters {
    const params = {
        "@type": "mrtrix.mrstats" as const,
        "ignorezero": ignorezero,
        "allvolumes": allvolumes,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "image": image,
    };
    if (output !== null) {
        params["output"] = output;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrstats_cargs(
    params: MrstatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrstats");
    if ((params["output"] ?? null) !== null) {
        cargs.push(...(params["output"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["ignorezero"] ?? null)) {
        cargs.push("-ignorezero");
    }
    if ((params["allvolumes"] ?? null)) {
        cargs.push("-allvolumes");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["image"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrstats_outputs(
    params: MrstatsParameters,
    execution: Execution,
): MrstatsOutputs {
    const ret: MrstatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Compute images statistics.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrstatsOutputs`).
 */
function mrstats_execute(
    params: MrstatsParameters,
    execution: Execution,
): MrstatsOutputs {
    params = execution.params(params)
    const cargs = mrstats_cargs(params, execution)
    const ret = mrstats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute images statistics.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param image the input image from which statistics will be computed.
 * @param output output only the field specified. Multiple such options can be supplied if required. Choices are: mean, median, std, std_rv, min, max, count. Useful for use in scripts. Both std options refer to the unbiased (sample) standard deviation. For complex data, min, max and std are calculated separately for real and imaginary parts, std_rv is based on the real valued variance (equals sqrt of sum of variances of imaginary and real parts).
 * @param mask only perform computation within the specified binary mask image.
 * @param ignorezero ignore zero values during statistics calculation
 * @param allvolumes generate statistics across all image volumes, rather than one set of statistics per image volume
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrstatsOutputs`).
 */
function mrstats(
    image: InputPathType,
    output: Array<MrstatsOutputParameters> | null = null,
    mask: InputPathType | null = null,
    ignorezero: boolean = false,
    allvolumes: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrstatsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrstatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRSTATS_METADATA);
    const params = mrstats_params(image, output, mask, ignorezero, allvolumes, info, quiet, debug, force, nthreads, config, help, version)
    return mrstats_execute(params, execution);
}


export {
      MRSTATS_METADATA,
      MrstatsConfigParameters,
      MrstatsOutputParameters,
      MrstatsOutputs,
      MrstatsParameters,
      mrstats,
      mrstats_cargs,
      mrstats_config_cargs,
      mrstats_config_params,
      mrstats_execute,
      mrstats_output_cargs,
      mrstats_output_params,
      mrstats_outputs,
      mrstats_params,
};
