// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DKMEANS_METADATA: Metadata = {
    id: "4659eac7c7853548ba4e9fb9cedfdec6b3bfd618.boutiques",
    name: "3dkmeans",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dkmeansParameters {
    "@type"?: "afni/3dkmeans";
    "version": boolean;
    "input": Array<InputPathType>;
    "mask"?: InputPathType | null | undefined;
    "mask_range"?: Array<number> | null | undefined;
    "cmask"?: string | null | undefined;
    "jobname"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "distance_measure"?: number | null | undefined;
    "num_clusters"?: number | null | undefined;
    "remap_method"?: string | null | undefined;
    "labeltable"?: InputPathType | null | undefined;
    "clabels"?: Array<string> | null | undefined;
    "clust_init"?: InputPathType | null | undefined;
    "num_repeats"?: number | null | undefined;
    "rsigs"?: InputPathType | null | undefined;
    "verbose": boolean;
    "write_dists": boolean;
    "voxdbg"?: Array<number> | null | undefined;
    "seed"?: number | null | undefined;
}
type V3dkmeansParametersTagged = Required<Pick<V3dkmeansParameters, '@type'>> & V3dkmeansParameters;


/**
 * Output object returned when calling `V3dkmeansParameters(...)`.
 *
 * @interface
 */
interface V3dkmeansOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume for the cluster membership.
     */
    cluster_membership: OutputPathType | null;
    /**
     * Output volume for the cluster distance measures.
     */
    cluster_distance: OutputPathType | null;
    /**
     * Output text file containing distances between clusters.
     */
    distances_text_file: OutputPathType;
    /**
     * Output text file containing cluster centroids.
     */
    centroids_text_file: OutputPathType;
    /**
     * Output text file containing within cluster sum of distances.
     */
    within_cluster_sum_text_file: OutputPathType;
    /**
     * Output text file containing maximum distance within each cluster.
     */
    max_distance_text_file: OutputPathType;
    /**
     * Output text file containing distance from voxel to its centroid.
     */
    voxel_distance_to_centroid: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input Input data to be clustered. You can specify multiple filenames in sequence and they will be concatenated internally.
 * @param mask Dataset to be used as a mask; only voxels with nonzero values in 'mset' will be used.
 * @param mask_range Restrict the voxels from 'mset' to only those mask values between 'a' and 'b' (inclusive).
 * @param cmask Execute the options enclosed in single quotes as a 3dcalc-like program to produce a mask from the resulting 3D brick.
 * @param jobname Specify a different name for the output files. Default is derived from the input file name.
 * @param prefix Specify a prefix for the output volumes. Default is the same as jobname.
 * @param distance_measure Specifies distance measure for clustering. Supported values: 0 (No clustering), 1 (Uncentered correlation distance), 2 (Pearson distance), 3 (Uncentered correlation distance, absolute value), 4 (Pearson distance, absolute value), 5 (Spearman's rank distance), 6 (Kendall's distance), 7 (Euclidean distance), 8 (City-block distance).
 * @param num_clusters Specify number of clusters.
 * @param remap_method Reassign clusters numbers based on METHOD: NONE (default), COUNT, iCOUNT, MAG, iMAG.
 * @param labeltable Attach labeltable to clustering output.
 * @param clabels Provide a label for each cluster. Labels cannot start with '-'.
 * @param clust_init Specify a dataset to initialize clustering. If provided, sets -r 0.
 * @param num_repeats Number of times the k-means clustering algorithm is run.
 * @param rsigs Calculate distances from each voxel's signature to the signatures in this multi-column file. No clustering done.
 * @param verbose Enable verbose mode.
 * @param write_dists Output text files containing various distance measures.
 * @param voxdbg Output debugging info for specified voxel (I J K).
 * @param seed Seed for the random number generator. Default is 1234567.
 *
 * @returns Parameter dictionary
 */
function v_3dkmeans_params(
    input: Array<InputPathType>,
    version: boolean = false,
    mask: InputPathType | null = null,
    mask_range: Array<number> | null = null,
    cmask: string | null = null,
    jobname: string | null = null,
    prefix: string | null = null,
    distance_measure: number | null = null,
    num_clusters: number | null = null,
    remap_method: string | null = null,
    labeltable: InputPathType | null = null,
    clabels: Array<string> | null = null,
    clust_init: InputPathType | null = null,
    num_repeats: number | null = null,
    rsigs: InputPathType | null = null,
    verbose: boolean = false,
    write_dists: boolean = false,
    voxdbg: Array<number> | null = null,
    seed: number | null = null,
): V3dkmeansParametersTagged {
    const params = {
        "@type": "afni/3dkmeans" as const,
        "version": version,
        "input": input,
        "verbose": verbose,
        "write_dists": write_dists,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (mask_range !== null) {
        params["mask_range"] = mask_range;
    }
    if (cmask !== null) {
        params["cmask"] = cmask;
    }
    if (jobname !== null) {
        params["jobname"] = jobname;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (distance_measure !== null) {
        params["distance_measure"] = distance_measure;
    }
    if (num_clusters !== null) {
        params["num_clusters"] = num_clusters;
    }
    if (remap_method !== null) {
        params["remap_method"] = remap_method;
    }
    if (labeltable !== null) {
        params["labeltable"] = labeltable;
    }
    if (clabels !== null) {
        params["clabels"] = clabels;
    }
    if (clust_init !== null) {
        params["clust_init"] = clust_init;
    }
    if (num_repeats !== null) {
        params["num_repeats"] = num_repeats;
    }
    if (rsigs !== null) {
        params["rsigs"] = rsigs;
    }
    if (voxdbg !== null) {
        params["voxdbg"] = voxdbg;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dkmeans_cargs(
    params: V3dkmeansParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dkmeans");
    if ((params["version"] ?? false)) {
        cargs.push("--version");
    }
    cargs.push(
        "-f",
        ...(params["input"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["mask_range"] ?? null) !== null) {
        cargs.push(
            "-mrange",
            ...(params["mask_range"] ?? null).map(String)
        );
    }
    if ((params["cmask"] ?? null) !== null) {
        cargs.push(
            "-cmask",
            (params["cmask"] ?? null)
        );
    }
    if ((params["jobname"] ?? null) !== null) {
        cargs.push(
            "-u",
            (params["jobname"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["distance_measure"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["distance_measure"] ?? null))
        );
    }
    if ((params["num_clusters"] ?? null) !== null) {
        cargs.push(
            "-k",
            String((params["num_clusters"] ?? null))
        );
    }
    if ((params["remap_method"] ?? null) !== null) {
        cargs.push(
            "-remap",
            (params["remap_method"] ?? null)
        );
    }
    if ((params["labeltable"] ?? null) !== null) {
        cargs.push(
            "-labeltable",
            execution.inputFile((params["labeltable"] ?? null))
        );
    }
    if ((params["clabels"] ?? null) !== null) {
        cargs.push(
            "-clabels",
            ...(params["clabels"] ?? null)
        );
    }
    if ((params["clust_init"] ?? null) !== null) {
        cargs.push(
            "-clust_init",
            execution.inputFile((params["clust_init"] ?? null))
        );
    }
    if ((params["num_repeats"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["num_repeats"] ?? null))
        );
    }
    if ((params["rsigs"] ?? null) !== null) {
        cargs.push(
            "-rsigs",
            execution.inputFile((params["rsigs"] ?? null))
        );
    }
    if ((params["verbose"] ?? false)) {
        cargs.push("-verb");
    }
    if ((params["write_dists"] ?? false)) {
        cargs.push("-write_dists");
    }
    if ((params["voxdbg"] ?? null) !== null) {
        cargs.push(
            "-voxdbg",
            ...(params["voxdbg"] ?? null).map(String)
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["seed"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dkmeans_outputs(
    params: V3dkmeansParameters,
    execution: Execution,
): V3dkmeansOutputs {
    const ret: V3dkmeansOutputs = {
        root: execution.outputFile("."),
        cluster_membership: ((params["jobname"] ?? null) !== null) ? execution.outputFile([(params["jobname"] ?? null), "_membership.nii.gz"].join('')) : null,
        cluster_distance: ((params["jobname"] ?? null) !== null) ? execution.outputFile([(params["jobname"] ?? null), "_distance.nii.gz"].join('')) : null,
        distances_text_file: execution.outputFile(["FILE.dis.1D"].join('')),
        centroids_text_file: execution.outputFile(["FILE.cen.1D"].join('')),
        within_cluster_sum_text_file: execution.outputFile(["FILE.info1.1D"].join('')),
        max_distance_text_file: execution.outputFile(["FILE.info2.1D"].join('')),
        voxel_distance_to_centroid: execution.outputFile(["FILE.vcd.1D"].join('')),
    };
    return ret;
}


/**
 * 3dkmeans
 *
 * 3d+t Clustering segmentation based on The C clustering library.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dkmeansOutputs`).
 */
function v_3dkmeans_execute(
    params: V3dkmeansParameters,
    runner: Runner | null = null,
): V3dkmeansOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DKMEANS_METADATA);
    params = execution.params(params)
    const cargs = v_3dkmeans_cargs(params, execution)
    const ret = v_3dkmeans_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dkmeans
 *
 * 3d+t Clustering segmentation based on The C clustering library.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input Input data to be clustered. You can specify multiple filenames in sequence and they will be concatenated internally.
 * @param mask Dataset to be used as a mask; only voxels with nonzero values in 'mset' will be used.
 * @param mask_range Restrict the voxels from 'mset' to only those mask values between 'a' and 'b' (inclusive).
 * @param cmask Execute the options enclosed in single quotes as a 3dcalc-like program to produce a mask from the resulting 3D brick.
 * @param jobname Specify a different name for the output files. Default is derived from the input file name.
 * @param prefix Specify a prefix for the output volumes. Default is the same as jobname.
 * @param distance_measure Specifies distance measure for clustering. Supported values: 0 (No clustering), 1 (Uncentered correlation distance), 2 (Pearson distance), 3 (Uncentered correlation distance, absolute value), 4 (Pearson distance, absolute value), 5 (Spearman's rank distance), 6 (Kendall's distance), 7 (Euclidean distance), 8 (City-block distance).
 * @param num_clusters Specify number of clusters.
 * @param remap_method Reassign clusters numbers based on METHOD: NONE (default), COUNT, iCOUNT, MAG, iMAG.
 * @param labeltable Attach labeltable to clustering output.
 * @param clabels Provide a label for each cluster. Labels cannot start with '-'.
 * @param clust_init Specify a dataset to initialize clustering. If provided, sets -r 0.
 * @param num_repeats Number of times the k-means clustering algorithm is run.
 * @param rsigs Calculate distances from each voxel's signature to the signatures in this multi-column file. No clustering done.
 * @param verbose Enable verbose mode.
 * @param write_dists Output text files containing various distance measures.
 * @param voxdbg Output debugging info for specified voxel (I J K).
 * @param seed Seed for the random number generator. Default is 1234567.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dkmeansOutputs`).
 */
function v_3dkmeans(
    input: Array<InputPathType>,
    version: boolean = false,
    mask: InputPathType | null = null,
    mask_range: Array<number> | null = null,
    cmask: string | null = null,
    jobname: string | null = null,
    prefix: string | null = null,
    distance_measure: number | null = null,
    num_clusters: number | null = null,
    remap_method: string | null = null,
    labeltable: InputPathType | null = null,
    clabels: Array<string> | null = null,
    clust_init: InputPathType | null = null,
    num_repeats: number | null = null,
    rsigs: InputPathType | null = null,
    verbose: boolean = false,
    write_dists: boolean = false,
    voxdbg: Array<number> | null = null,
    seed: number | null = null,
    runner: Runner | null = null,
): V3dkmeansOutputs {
    const params = v_3dkmeans_params(input, version, mask, mask_range, cmask, jobname, prefix, distance_measure, num_clusters, remap_method, labeltable, clabels, clust_init, num_repeats, rsigs, verbose, write_dists, voxdbg, seed)
    return v_3dkmeans_execute(params, runner);
}


export {
      V3dkmeansOutputs,
      V_3DKMEANS_METADATA,
      v_3dkmeans,
      v_3dkmeans_execute,
      v_3dkmeans_params,
};
