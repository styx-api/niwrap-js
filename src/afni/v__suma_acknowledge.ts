// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SUMA_ACKNOWLEDGE_METADATA: Metadata = {
    id: "3d8b17db995d67b601d4ce298b53b3fd6e31c716.boutiques",
    name: "@suma_acknowledge",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VSumaAcknowledgeParameters {
    "__STYXTYPE__": "@suma_acknowledge";
    "input_file": InputPathType;
    "surface_file": InputPathType;
    "output_prefix": string;
    "center_flag": boolean;
    "subsurface_file"?: string | null | undefined;
    "scale_factor"?: number | null | undefined;
    "reduce_factor"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@suma_acknowledge": v__suma_acknowledge_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@suma_acknowledge": v__suma_acknowledge_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__suma_acknowledge(...)`.
 *
 * @interface
 */
interface VSumaAcknowledgeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output graph dataset
     */
    output_file: OutputPathType;
}


function v__suma_acknowledge_params(
    input_file: InputPathType,
    surface_file: InputPathType,
    output_prefix: string,
    center_flag: boolean = false,
    subsurface_file: string | null = null,
    scale_factor: number | null = null,
    reduce_factor: number | null = null,
): VSumaAcknowledgeParameters {
    /**
     * Build parameters.
    
     * @param input_file Required input text file with format for each line: first last groupname.
     * @param surface_file Required surface to place nodes.
     * @param output_prefix Output prefix for graph dataset.
     * @param center_flag Put center coord at x,y,z=0,0,0. Otherwise, uses average xyz in surface.
     * @param subsurface_file Surface for surrounding members of group (use ld2, ld4, ld5, ld6, .... default is ld5).
     * @param scale_factor Scale xyz for group nodes (default is 1.0).
     * @param reduce_factor Scale xyz offsets for member nodes (xyz/r), default is 10.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@suma_acknowledge" as const,
        "input_file": input_file,
        "surface_file": surface_file,
        "output_prefix": output_prefix,
        "center_flag": center_flag,
    };
    if (subsurface_file !== null) {
        params["subsurface_file"] = subsurface_file;
    }
    if (scale_factor !== null) {
        params["scale_factor"] = scale_factor;
    }
    if (reduce_factor !== null) {
        params["reduce_factor"] = reduce_factor;
    }
    return params;
}


function v__suma_acknowledge_cargs(
    params: VSumaAcknowledgeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@suma_acknowledge");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-surf",
        execution.inputFile((params["surface_file"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["center_flag"] ?? null)) {
        cargs.push("-center");
    }
    if ((params["subsurface_file"] ?? null) !== null) {
        cargs.push(
            "-subsurf",
            (params["subsurface_file"] ?? null)
        );
    }
    if ((params["scale_factor"] ?? null) !== null) {
        cargs.push(
            "-scalefactor",
            String((params["scale_factor"] ?? null))
        );
    }
    if ((params["reduce_factor"] ?? null) !== null) {
        cargs.push(
            "-reducefactor",
            String((params["reduce_factor"] ?? null))
        );
    }
    return cargs;
}


function v__suma_acknowledge_outputs(
    params: VSumaAcknowledgeParameters,
    execution: Execution,
): VSumaAcknowledgeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VSumaAcknowledgeOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_prefix"] ?? null), "_graph_dataset"].join('')),
    };
    return ret;
}


function v__suma_acknowledge_execute(
    params: VSumaAcknowledgeParameters,
    execution: Execution,
): VSumaAcknowledgeOutputs {
    /**
     * Demo script to create a graph dataset to show names of individuals and groups, potentially useful for acknowledgements in a talk.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VSumaAcknowledgeOutputs`).
     */
    params = execution.params(params)
    const cargs = v__suma_acknowledge_cargs(params, execution)
    const ret = v__suma_acknowledge_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__suma_acknowledge(
    input_file: InputPathType,
    surface_file: InputPathType,
    output_prefix: string,
    center_flag: boolean = false,
    subsurface_file: string | null = null,
    scale_factor: number | null = null,
    reduce_factor: number | null = null,
    runner: Runner | null = null,
): VSumaAcknowledgeOutputs {
    /**
     * Demo script to create a graph dataset to show names of individuals and groups, potentially useful for acknowledgements in a talk.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Required input text file with format for each line: first last groupname.
     * @param surface_file Required surface to place nodes.
     * @param output_prefix Output prefix for graph dataset.
     * @param center_flag Put center coord at x,y,z=0,0,0. Otherwise, uses average xyz in surface.
     * @param subsurface_file Surface for surrounding members of group (use ld2, ld4, ld5, ld6, .... default is ld5).
     * @param scale_factor Scale xyz for group nodes (default is 1.0).
     * @param reduce_factor Scale xyz offsets for member nodes (xyz/r), default is 10.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VSumaAcknowledgeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SUMA_ACKNOWLEDGE_METADATA);
    const params = v__suma_acknowledge_params(input_file, surface_file, output_prefix, center_flag, subsurface_file, scale_factor, reduce_factor)
    return v__suma_acknowledge_execute(params, execution);
}


export {
      VSumaAcknowledgeOutputs,
      VSumaAcknowledgeParameters,
      V__SUMA_ACKNOWLEDGE_METADATA,
      v__suma_acknowledge,
      v__suma_acknowledge_params,
};
