// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_DILATE_METADATA: Metadata = {
    id: "f13d48e1ee86c178e477319da5d6697b9ee6436d.boutiques",
    name: "label-dilate",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface LabelDilateParameters {
    "@type": "workbench.label-dilate";
    "label": InputPathType;
    "surface": InputPathType;
    "dilate_dist": number;
    "label_out": string;
    "opt_bad_vertex_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_column_column"?: string | null | undefined;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.label-dilate": label_dilate_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.label-dilate": label_dilate_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `label_dilate(...)`.
 *
 * @interface
 */
interface LabelDilateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output label file
     */
    label_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label the input label
 * @param surface the surface to dilate on
 * @param dilate_dist distance in mm to dilate the labels
 * @param label_out the output label file
 * @param opt_bad_vertex_roi_roi_metric specify an roi of vertices to overwrite, rather than vertices with the unlabeled key: metric file, positive values denote vertices to have their values replaced
 * @param opt_column_column select a single column to dilate: the column number or name
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function label_dilate_params(
    label: InputPathType,
    surface: InputPathType,
    dilate_dist: number,
    label_out: string,
    opt_bad_vertex_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
): LabelDilateParameters {
    const params = {
        "@type": "workbench.label-dilate" as const,
        "label": label,
        "surface": surface,
        "dilate_dist": dilate_dist,
        "label_out": label_out,
    };
    if (opt_bad_vertex_roi_roi_metric !== null) {
        params["opt_bad_vertex_roi_roi_metric"] = opt_bad_vertex_roi_roi_metric;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label_dilate_cargs(
    params: LabelDilateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-label-dilate");
    cargs.push(execution.inputFile((params["label"] ?? null)));
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(String((params["dilate_dist"] ?? null)));
    cargs.push((params["label_out"] ?? null));
    if ((params["opt_bad_vertex_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-bad-vertex-roi",
            execution.inputFile((params["opt_bad_vertex_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label_dilate_outputs(
    params: LabelDilateParameters,
    execution: Execution,
): LabelDilateOutputs {
    const ret: LabelDilateOutputs = {
        root: execution.outputFile("."),
        label_out: execution.outputFile([(params["label_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Dilate a label file.
 *
 * Fills in label information for all vertices designated as bad, up to the specified distance away from other labels.  If -bad-vertex-roi is specified, all vertices, including those with the unlabeled key, are good, except for vertices with a positive value in the ROI.  If it is not specified, only vertices with the unlabeled key are bad.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelDilateOutputs`).
 */
function label_dilate_execute(
    params: LabelDilateParameters,
    runner: Runner | null = null,
): LabelDilateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_DILATE_METADATA);
    params = execution.params(params)
    const cargs = label_dilate_cargs(params, execution)
    const ret = label_dilate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Dilate a label file.
 *
 * Fills in label information for all vertices designated as bad, up to the specified distance away from other labels.  If -bad-vertex-roi is specified, all vertices, including those with the unlabeled key, are good, except for vertices with a positive value in the ROI.  If it is not specified, only vertices with the unlabeled key are bad.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param label the input label
 * @param surface the surface to dilate on
 * @param dilate_dist distance in mm to dilate the labels
 * @param label_out the output label file
 * @param opt_bad_vertex_roi_roi_metric specify an roi of vertices to overwrite, rather than vertices with the unlabeled key: metric file, positive values denote vertices to have their values replaced
 * @param opt_column_column select a single column to dilate: the column number or name
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelDilateOutputs`).
 */
function label_dilate(
    label: InputPathType,
    surface: InputPathType,
    dilate_dist: number,
    label_out: string,
    opt_bad_vertex_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    runner: Runner | null = null,
): LabelDilateOutputs {
    const params = label_dilate_params(label, surface, dilate_dist, label_out, opt_bad_vertex_roi_roi_metric, opt_column_column, opt_corrected_areas_area_metric)
    return label_dilate_execute(params, runner);
}


export {
      LABEL_DILATE_METADATA,
      LabelDilateOutputs,
      LabelDilateParameters,
      label_dilate,
      label_dilate_execute,
      label_dilate_params,
};
