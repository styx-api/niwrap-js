// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MAPS2CSD_METADATA: Metadata = {
    id: "d328ee0b019757e28944558a983176ab01acb919.boutiques",
    name: "mri_maps2csd",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMaps2csdParameters {
    "@type": "freesurfer.mri_maps2csd";
    "input_files": Array<string>;
    "csd_file"?: string | null | undefined;
    "pdf_file"?: string | null | undefined;
    "subject_hemi_surf"?: string | null | undefined;
    "thresh"?: number | null | undefined;
    "sign"?: string | null | undefined;
    "csd_apply_file"?: string | null | undefined;
    "apply_out"?: string | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_maps2csd": mri_maps2csd_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_maps2csd(...)`.
 *
 * @interface
 */
interface MriMaps2csdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input file(s) or specify them directly on the command line
 * @param csd_file Output CSD file
 * @param pdf_file PDF file created from CSD
 * @param subject_hemi_surf Subject name, hemisphere, and surface specification
 * @param thresh Threshold for cluster-forming (-log10 scale)
 * @param sign Sign adjustment for threshold (+1, -1 or 0)
 * @param csd_apply_file Apply a CSD file to inputs, return p-value of max cluster
 * @param subjects_dir Subjects directory
 * @param debug Turn on debugging
 * @param checkopts Don't run, just check options then exit
 *
 * @returns Parameter dictionary
 */
function mri_maps2csd_params(
    input_files: Array<string>,
    csd_file: string | null = null,
    pdf_file: string | null = null,
    subject_hemi_surf: string | null = null,
    thresh: number | null = null,
    sign: string | null = null,
    csd_apply_file: string | null = null,
    apply_out: string | null = null,
    subjects_dir: string | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
): MriMaps2csdParameters {
    const params = {
        "@type": "freesurfer.mri_maps2csd" as const,
        "input_files": input_files,
        "debug": debug,
        "checkopts": checkopts,
    };
    if (csd_file !== null) {
        params["csd_file"] = csd_file;
    }
    if (pdf_file !== null) {
        params["pdf_file"] = pdf_file;
    }
    if (subject_hemi_surf !== null) {
        params["subject_hemi_surf"] = subject_hemi_surf;
    }
    if (thresh !== null) {
        params["thresh"] = thresh;
    }
    if (sign !== null) {
        params["sign"] = sign;
    }
    if (csd_apply_file !== null) {
        params["csd_apply_file"] = csd_apply_file;
    }
    if (apply_out !== null) {
        params["apply_out"] = apply_out;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_maps2csd_cargs(
    params: MriMaps2csdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_maps2csd");
    cargs.push(
        "--i",
        ...(params["input_files"] ?? null)
    );
    if ((params["csd_file"] ?? null) !== null) {
        cargs.push(
            "--csd",
            (params["csd_file"] ?? null)
        );
    }
    if ((params["pdf_file"] ?? null) !== null) {
        cargs.push(
            "--pdf",
            (params["pdf_file"] ?? null)
        );
    }
    if ((params["subject_hemi_surf"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject_hemi_surf"] ?? null)
        );
    }
    if ((params["thresh"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["thresh"] ?? null))
        );
    }
    if ((params["sign"] ?? null) !== null) {
        cargs.push(
            "--sign",
            (params["sign"] ?? null)
        );
    }
    if ((params["csd_apply_file"] ?? null) !== null) {
        cargs.push(
            "--csd-apply",
            (params["csd_apply_file"] ?? null)
        );
    }
    if ((params["apply_out"] ?? null) !== null) {
        cargs.push((params["apply_out"] ?? null));
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_maps2csd_outputs(
    params: MriMaps2csdParameters,
    execution: Execution,
): MriMaps2csdOutputs {
    const ret: MriMaps2csdOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_maps2csd
 *
 * Tool to create CSD files and PDFs from input maps and apply them.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMaps2csdOutputs`).
 */
function mri_maps2csd_execute(
    params: MriMaps2csdParameters,
    runner: Runner | null = null,
): MriMaps2csdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MAPS2CSD_METADATA);
    params = execution.params(params)
    const cargs = mri_maps2csd_cargs(params, execution)
    const ret = mri_maps2csd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_maps2csd
 *
 * Tool to create CSD files and PDFs from input maps and apply them.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_files Input file(s) or specify them directly on the command line
 * @param csd_file Output CSD file
 * @param pdf_file PDF file created from CSD
 * @param subject_hemi_surf Subject name, hemisphere, and surface specification
 * @param thresh Threshold for cluster-forming (-log10 scale)
 * @param sign Sign adjustment for threshold (+1, -1 or 0)
 * @param csd_apply_file Apply a CSD file to inputs, return p-value of max cluster
 * @param subjects_dir Subjects directory
 * @param debug Turn on debugging
 * @param checkopts Don't run, just check options then exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMaps2csdOutputs`).
 */
function mri_maps2csd(
    input_files: Array<string>,
    csd_file: string | null = null,
    pdf_file: string | null = null,
    subject_hemi_surf: string | null = null,
    thresh: number | null = null,
    sign: string | null = null,
    csd_apply_file: string | null = null,
    apply_out: string | null = null,
    subjects_dir: string | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    runner: Runner | null = null,
): MriMaps2csdOutputs {
    const params = mri_maps2csd_params(input_files, csd_file, pdf_file, subject_hemi_surf, thresh, sign, csd_apply_file, apply_out, subjects_dir, debug, checkopts)
    return mri_maps2csd_execute(params, runner);
}


export {
      MRI_MAPS2CSD_METADATA,
      MriMaps2csdOutputs,
      MriMaps2csdParameters,
      mri_maps2csd,
      mri_maps2csd_execute,
      mri_maps2csd_params,
};
