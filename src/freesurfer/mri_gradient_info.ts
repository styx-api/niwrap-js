// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_GRADIENT_INFO_METADATA: Metadata = {
    id: "729f70a6ddbe9d46e53152c5c3d3044fd189da4b.boutiques",
    name: "mri_gradient_info",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriGradientInfoParameters {
    "@type": "freesurfer.mri_gradient_info";
    "input_image": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_gradient_info": mri_gradient_info_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_gradient_info": mri_gradient_info_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_gradient_info(...)`.
 *
 * @interface
 */
interface MriGradientInfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file containing the extracted gradient information.
     */
    gradient_info_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input MRI image file, typically in .mgz format
 *
 * @returns Parameter dictionary
 */
function mri_gradient_info_params(
    input_image: InputPathType,
): MriGradientInfoParameters {
    const params = {
        "@type": "freesurfer.mri_gradient_info" as const,
        "input_image": input_image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_gradient_info_cargs(
    params: MriGradientInfoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_gradient_info");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_gradient_info_outputs(
    params: MriGradientInfoParameters,
    execution: Execution,
): MriGradientInfoOutputs {
    const ret: MriGradientInfoOutputs = {
        root: execution.outputFile("."),
        gradient_info_output: execution.outputFile(["gradient_info_output.txt"].join('')),
    };
    return ret;
}


/**
 * mri_gradient_info
 *
 * A utility to obtain gradient information from MRI images using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGradientInfoOutputs`).
 */
function mri_gradient_info_execute(
    params: MriGradientInfoParameters,
    runner: Runner | null = null,
): MriGradientInfoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_GRADIENT_INFO_METADATA);
    params = execution.params(params)
    const cargs = mri_gradient_info_cargs(params, execution)
    const ret = mri_gradient_info_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_gradient_info
 *
 * A utility to obtain gradient information from MRI images using FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image Input MRI image file, typically in .mgz format
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGradientInfoOutputs`).
 */
function mri_gradient_info(
    input_image: InputPathType,
    runner: Runner | null = null,
): MriGradientInfoOutputs {
    const params = mri_gradient_info_params(input_image)
    return mri_gradient_info_execute(params, runner);
}


export {
      MRI_GRADIENT_INFO_METADATA,
      MriGradientInfoOutputs,
      MriGradientInfoParameters,
      mri_gradient_info,
      mri_gradient_info_execute,
      mri_gradient_info_params,
};
