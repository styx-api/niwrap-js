// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SURFACE_TO_VOL_DISTANCES_METADATA: Metadata = {
    id: "0803f1be3d6e6b156373a996f30cbdf91c784084.boutiques",
    name: "mris_surface_to_vol_distances",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSurfaceToVolDistancesParameters {
    "__STYXTYPE__": "mris_surface_to_vol_distances";
    "average_subject": string;
    "hemisphere": string;
    "subjects": Array<string>;
    "output_prefix": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_surface_to_vol_distances": mris_surface_to_vol_distances_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_surface_to_vol_distances": mris_surface_to_vol_distances_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_surface_to_vol_distances(...)`.
 *
 * @interface
 */
interface MrisSurfaceToVolDistancesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing surface-to-volume distances.
     */
    output_distances: OutputPathType;
}


function mris_surface_to_vol_distances_params(
    average_subject: string,
    hemisphere: string,
    subjects: Array<string>,
    output_prefix: string,
): MrisSurfaceToVolDistancesParameters {
    /**
     * Build parameters.
    
     * @param average_subject The average subject.
     * @param hemisphere Hemisphere identifier (e.g., lh or rh).
     * @param subjects List of subjects for distance calculation.
     * @param output_prefix Prefix for output files.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_surface_to_vol_distances" as const,
        "average_subject": average_subject,
        "hemisphere": hemisphere,
        "subjects": subjects,
        "output_prefix": output_prefix,
    };
    return params;
}


function mris_surface_to_vol_distances_cargs(
    params: MrisSurfaceToVolDistancesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_surface_to_vol_distances");
    cargs.push((params["average_subject"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_prefix"] ?? null));
    return cargs;
}


function mris_surface_to_vol_distances_outputs(
    params: MrisSurfaceToVolDistancesParameters,
    execution: Execution,
): MrisSurfaceToVolDistancesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisSurfaceToVolDistancesOutputs = {
        root: execution.outputFile("."),
        output_distances: execution.outputFile([(params["output_prefix"] ?? null), "_distances.txt"].join('')),
    };
    return ret;
}


function mris_surface_to_vol_distances_execute(
    params: MrisSurfaceToVolDistancesParameters,
    execution: Execution,
): MrisSurfaceToVolDistancesOutputs {
    /**
     * Tool from FreeSurfer to calculate surface-to-volume distances.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisSurfaceToVolDistancesOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_surface_to_vol_distances_cargs(params, execution)
    const ret = mris_surface_to_vol_distances_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_surface_to_vol_distances(
    average_subject: string,
    hemisphere: string,
    subjects: Array<string>,
    output_prefix: string,
    runner: Runner | null = null,
): MrisSurfaceToVolDistancesOutputs {
    /**
     * Tool from FreeSurfer to calculate surface-to-volume distances.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param average_subject The average subject.
     * @param hemisphere Hemisphere identifier (e.g., lh or rh).
     * @param subjects List of subjects for distance calculation.
     * @param output_prefix Prefix for output files.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisSurfaceToVolDistancesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SURFACE_TO_VOL_DISTANCES_METADATA);
    const params = mris_surface_to_vol_distances_params(average_subject, hemisphere, subjects, output_prefix)
    return mris_surface_to_vol_distances_execute(params, execution);
}


export {
      MRIS_SURFACE_TO_VOL_DISTANCES_METADATA,
      MrisSurfaceToVolDistancesOutputs,
      MrisSurfaceToVolDistancesParameters,
      mris_surface_to_vol_distances,
      mris_surface_to_vol_distances_params,
};
