// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BEDPOSTX_METADATA: Metadata = {
    id: "63953cadd31dba0e63cb83d39dff3c9e3f583e39.boutiques",
    name: "bedpostx",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface BedpostxParameters {
    "__STYXTYPE__": "bedpostx";
    "subject_dir": string;
    "num_fibres"?: number | null | undefined;
    "ard_weight"?: number | null | undefined;
    "burnin"?: number | null | undefined;
    "num_jumps"?: number | null | undefined;
    "sample_every"?: number | null | undefined;
    "model_type"?: number | null | undefined;
    "grad_nonlinear": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "bedpostx": bedpostx_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "bedpostx": bedpostx_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `bedpostx(...)`.
 *
 * @interface
 */
interface BedpostxOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transformations.
     */
    xfms_output: OutputPathType;
    /**
     * Output diffusion slices.
     */
    diff_slices_output: OutputPathType;
}


function bedpostx_params(
    subject_dir: string,
    num_fibres: number | null = 3,
    ard_weight: number | null = 1,
    burnin: number | null = 1000,
    num_jumps: number | null = 1250,
    sample_every: number | null = 25,
    model_type: number | null = 2,
    grad_nonlinear: boolean = false,
): BedpostxParameters {
    /**
     * Build parameters.
    
     * @param subject_dir Input subject directory which contains bvals, bvecs, data, and nodif_brain_mask files.
     * @param num_fibres Number of fibres per voxel (default 3).
     * @param ard_weight ARD weight, more weight means less secondary fibres per voxel (default 1).
     * @param burnin Burnin period (default 1000).
     * @param num_jumps Number of jumps (default 1250).
     * @param sample_every Sample every (default 25).
     * @param model_type Deconvolution model. 1: with sticks, 2: with sticks with a range of diffusivities (default), 3: with zeppelins.
     * @param grad_nonlinear Consider gradient nonlinearities, expects grad_dev in the subject directory.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "bedpostx" as const,
        "subject_dir": subject_dir,
        "grad_nonlinear": grad_nonlinear,
    };
    if (num_fibres !== null) {
        params["num_fibres"] = num_fibres;
    }
    if (ard_weight !== null) {
        params["ard_weight"] = ard_weight;
    }
    if (burnin !== null) {
        params["burnin"] = burnin;
    }
    if (num_jumps !== null) {
        params["num_jumps"] = num_jumps;
    }
    if (sample_every !== null) {
        params["sample_every"] = sample_every;
    }
    if (model_type !== null) {
        params["model_type"] = model_type;
    }
    return params;
}


function bedpostx_cargs(
    params: BedpostxParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("bedpostx");
    cargs.push((params["subject_dir"] ?? null));
    if ((params["num_fibres"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["num_fibres"] ?? null))
        );
    }
    if ((params["ard_weight"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["ard_weight"] ?? null))
        );
    }
    if ((params["burnin"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["burnin"] ?? null))
        );
    }
    if ((params["num_jumps"] ?? null) !== null) {
        cargs.push(
            "-j",
            String((params["num_jumps"] ?? null))
        );
    }
    if ((params["sample_every"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["sample_every"] ?? null))
        );
    }
    if ((params["model_type"] ?? null) !== null) {
        cargs.push(
            "-model",
            String((params["model_type"] ?? null))
        );
    }
    if ((params["grad_nonlinear"] ?? null)) {
        cargs.push("-g");
    }
    return cargs;
}


function bedpostx_outputs(
    params: BedpostxParameters,
    execution: Execution,
): BedpostxOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BedpostxOutputs = {
        root: execution.outputFile("."),
        xfms_output: execution.outputFile([(params["subject_dir"] ?? null), "_bedpostx/xfms/*"].join('')),
        diff_slices_output: execution.outputFile([(params["subject_dir"] ?? null), "_bedpostx/diff_slices/*"].join('')),
    };
    return ret;
}


function bedpostx_execute(
    params: BedpostxParameters,
    execution: Execution,
): BedpostxOutputs {
    /**
     * Bayesian Estimation of Diffusion Parameters Obtained using Sampling Techniques (BEDPOST) for modeling multiple fibers per voxel.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BedpostxOutputs`).
     */
    params = execution.params(params)
    const cargs = bedpostx_cargs(params, execution)
    const ret = bedpostx_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function bedpostx(
    subject_dir: string,
    num_fibres: number | null = 3,
    ard_weight: number | null = 1,
    burnin: number | null = 1000,
    num_jumps: number | null = 1250,
    sample_every: number | null = 25,
    model_type: number | null = 2,
    grad_nonlinear: boolean = false,
    runner: Runner | null = null,
): BedpostxOutputs {
    /**
     * Bayesian Estimation of Diffusion Parameters Obtained using Sampling Techniques (BEDPOST) for modeling multiple fibers per voxel.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param subject_dir Input subject directory which contains bvals, bvecs, data, and nodif_brain_mask files.
     * @param num_fibres Number of fibres per voxel (default 3).
     * @param ard_weight ARD weight, more weight means less secondary fibres per voxel (default 1).
     * @param burnin Burnin period (default 1000).
     * @param num_jumps Number of jumps (default 1250).
     * @param sample_every Sample every (default 25).
     * @param model_type Deconvolution model. 1: with sticks, 2: with sticks with a range of diffusivities (default), 3: with zeppelins.
     * @param grad_nonlinear Consider gradient nonlinearities, expects grad_dev in the subject directory.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BedpostxOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BEDPOSTX_METADATA);
    const params = bedpostx_params(subject_dir, num_fibres, ard_weight, burnin, num_jumps, sample_every, model_type, grad_nonlinear)
    return bedpostx_execute(params, execution);
}


export {
      BEDPOSTX_METADATA,
      BedpostxOutputs,
      BedpostxParameters,
      bedpostx,
      bedpostx_params,
};
