// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_RESAMPLE_METADATA: Metadata = {
    id: "a6f5b36fba078762807c4f82e3c0374ec2f78287.boutiques",
    name: "cifti-resample",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiResampleWeightedParameters {
    "@type"?: "weighted";
    "opt_exponent_exponent"?: number | null | undefined;
    "opt_legacy_cutoff": boolean;
}
type CiftiResampleWeightedParametersTagged = Required<Pick<CiftiResampleWeightedParameters, '@type'>> & CiftiResampleWeightedParameters;


interface CiftiResampleVolumePredilateParameters {
    "@type"?: "volume_predilate";
    "dilate_mm": number;
    "opt_nearest": boolean;
    "weighted"?: CiftiResampleWeightedParameters | null | undefined;
}
type CiftiResampleVolumePredilateParametersTagged = Required<Pick<CiftiResampleVolumePredilateParameters, '@type'>> & CiftiResampleVolumePredilateParameters;


interface CiftiResampleWeighted1Parameters {
    "@type"?: "weighted_1";
    "opt_exponent_exponent"?: number | null | undefined;
    "opt_legacy_cutoff": boolean;
}
type CiftiResampleWeighted1ParametersTagged = Required<Pick<CiftiResampleWeighted1Parameters, '@type'>> & CiftiResampleWeighted1Parameters;


interface CiftiResampleSurfacePostdilateParameters {
    "@type"?: "surface_postdilate";
    "dilate_mm": number;
    "opt_nearest": boolean;
    "opt_linear": boolean;
    "weighted"?: CiftiResampleWeighted1Parameters | null | undefined;
}
type CiftiResampleSurfacePostdilateParametersTagged = Required<Pick<CiftiResampleSurfacePostdilateParameters, '@type'>> & CiftiResampleSurfacePostdilateParameters;


interface CiftiResampleFlirtParameters {
    "@type"?: "flirt";
    "source_volume": string;
    "target_volume": string;
}
type CiftiResampleFlirtParametersTagged = Required<Pick<CiftiResampleFlirtParameters, '@type'>> & CiftiResampleFlirtParameters;


interface CiftiResampleAffineParameters {
    "@type"?: "affine";
    "affine_file": string;
    "flirt"?: CiftiResampleFlirtParameters | null | undefined;
}
type CiftiResampleAffineParametersTagged = Required<Pick<CiftiResampleAffineParameters, '@type'>> & CiftiResampleAffineParameters;


interface CiftiResampleWarpfieldParameters {
    "@type"?: "warpfield";
    "warpfield": string;
    "opt_fnirt_source_volume"?: string | null | undefined;
}
type CiftiResampleWarpfieldParametersTagged = Required<Pick<CiftiResampleWarpfieldParameters, '@type'>> & CiftiResampleWarpfieldParameters;


interface CiftiResampleLeftAreaSurfsParameters {
    "@type"?: "left_area_surfs";
    "current_area": InputPathType;
    "new_area": InputPathType;
}
type CiftiResampleLeftAreaSurfsParametersTagged = Required<Pick<CiftiResampleLeftAreaSurfsParameters, '@type'>> & CiftiResampleLeftAreaSurfsParameters;


interface CiftiResampleLeftAreaMetricsParameters {
    "@type"?: "left_area_metrics";
    "current_area": InputPathType;
    "new_area": InputPathType;
}
type CiftiResampleLeftAreaMetricsParametersTagged = Required<Pick<CiftiResampleLeftAreaMetricsParameters, '@type'>> & CiftiResampleLeftAreaMetricsParameters;


interface CiftiResampleLeftSpheresParameters {
    "@type"?: "left_spheres";
    "current_sphere": InputPathType;
    "new_sphere": InputPathType;
    "left_area_surfs"?: CiftiResampleLeftAreaSurfsParameters | null | undefined;
    "left_area_metrics"?: CiftiResampleLeftAreaMetricsParameters | null | undefined;
}
type CiftiResampleLeftSpheresParametersTagged = Required<Pick<CiftiResampleLeftSpheresParameters, '@type'>> & CiftiResampleLeftSpheresParameters;


interface CiftiResampleRightAreaSurfsParameters {
    "@type"?: "right_area_surfs";
    "current_area": InputPathType;
    "new_area": InputPathType;
}
type CiftiResampleRightAreaSurfsParametersTagged = Required<Pick<CiftiResampleRightAreaSurfsParameters, '@type'>> & CiftiResampleRightAreaSurfsParameters;


interface CiftiResampleRightAreaMetricsParameters {
    "@type"?: "right_area_metrics";
    "current_area": InputPathType;
    "new_area": InputPathType;
}
type CiftiResampleRightAreaMetricsParametersTagged = Required<Pick<CiftiResampleRightAreaMetricsParameters, '@type'>> & CiftiResampleRightAreaMetricsParameters;


interface CiftiResampleRightSpheresParameters {
    "@type"?: "right_spheres";
    "current_sphere": InputPathType;
    "new_sphere": InputPathType;
    "right_area_surfs"?: CiftiResampleRightAreaSurfsParameters | null | undefined;
    "right_area_metrics"?: CiftiResampleRightAreaMetricsParameters | null | undefined;
}
type CiftiResampleRightSpheresParametersTagged = Required<Pick<CiftiResampleRightSpheresParameters, '@type'>> & CiftiResampleRightSpheresParameters;


interface CiftiResampleCerebellumAreaSurfsParameters {
    "@type"?: "cerebellum_area_surfs";
    "current_area": InputPathType;
    "new_area": InputPathType;
}
type CiftiResampleCerebellumAreaSurfsParametersTagged = Required<Pick<CiftiResampleCerebellumAreaSurfsParameters, '@type'>> & CiftiResampleCerebellumAreaSurfsParameters;


interface CiftiResampleCerebellumAreaMetricsParameters {
    "@type"?: "cerebellum_area_metrics";
    "current_area": InputPathType;
    "new_area": InputPathType;
}
type CiftiResampleCerebellumAreaMetricsParametersTagged = Required<Pick<CiftiResampleCerebellumAreaMetricsParameters, '@type'>> & CiftiResampleCerebellumAreaMetricsParameters;


interface CiftiResampleCerebellumSpheresParameters {
    "@type"?: "cerebellum_spheres";
    "current_sphere": InputPathType;
    "new_sphere": InputPathType;
    "cerebellum_area_surfs"?: CiftiResampleCerebellumAreaSurfsParameters | null | undefined;
    "cerebellum_area_metrics"?: CiftiResampleCerebellumAreaMetricsParameters | null | undefined;
}
type CiftiResampleCerebellumSpheresParametersTagged = Required<Pick<CiftiResampleCerebellumSpheresParameters, '@type'>> & CiftiResampleCerebellumSpheresParameters;


interface CiftiResampleParameters {
    "@type"?: "workbench/cifti-resample";
    "cifti_in": InputPathType;
    "direction": string;
    "cifti_template": InputPathType;
    "template_direction": string;
    "surface_method": string;
    "volume_method": string;
    "cifti_out": string;
    "opt_surface_largest": boolean;
    "volume_predilate"?: CiftiResampleVolumePredilateParameters | null | undefined;
    "surface_postdilate"?: CiftiResampleSurfacePostdilateParameters | null | undefined;
    "affine"?: CiftiResampleAffineParameters | null | undefined;
    "warpfield"?: CiftiResampleWarpfieldParameters | null | undefined;
    "left_spheres"?: CiftiResampleLeftSpheresParameters | null | undefined;
    "right_spheres"?: CiftiResampleRightSpheresParameters | null | undefined;
    "cerebellum_spheres"?: CiftiResampleCerebellumSpheresParameters | null | undefined;
}
type CiftiResampleParametersTagged = Required<Pick<CiftiResampleParameters, '@type'>> & CiftiResampleParameters;


/**
 * Build parameters.
 *
 * @param opt_exponent_exponent specify exponent in weighting function: exponent 'n' to use in (1 / (distance ^ n)) as the weighting function (default 7)
 * @param opt_legacy_cutoff use v1.3.2 logic for the kernel cutoff
 *
 * @returns Parameter dictionary
 */
function cifti_resample_weighted_params(
    opt_exponent_exponent: number | null = null,
    opt_legacy_cutoff: boolean = false,
): CiftiResampleWeightedParametersTagged {
    const params = {
        "@type": "weighted" as const,
        "opt_legacy_cutoff": opt_legacy_cutoff,
    };
    if (opt_exponent_exponent !== null) {
        params["opt_exponent_exponent"] = opt_exponent_exponent;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_weighted_cargs(
    params: CiftiResampleWeightedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-weighted");
    if ((params["opt_exponent_exponent"] ?? null) !== null) {
        cargs.push(
            "-exponent",
            String((params["opt_exponent_exponent"] ?? null))
        );
    }
    if ((params["opt_legacy_cutoff"] ?? false)) {
        cargs.push("-legacy-cutoff");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param dilate_mm distance, in mm, to dilate
 * @param opt_nearest use nearest value dilation
 * @param weighted use weighted dilation (default)
 *
 * @returns Parameter dictionary
 */
function cifti_resample_volume_predilate_params(
    dilate_mm: number,
    opt_nearest: boolean = false,
    weighted: CiftiResampleWeightedParameters | null = null,
): CiftiResampleVolumePredilateParametersTagged {
    const params = {
        "@type": "volume_predilate" as const,
        "dilate_mm": dilate_mm,
        "opt_nearest": opt_nearest,
    };
    if (weighted !== null) {
        params["weighted"] = weighted;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_volume_predilate_cargs(
    params: CiftiResampleVolumePredilateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume-predilate");
    cargs.push(String((params["dilate_mm"] ?? null)));
    if ((params["opt_nearest"] ?? false)) {
        cargs.push("-nearest");
    }
    if ((params["weighted"] ?? null) !== null) {
        cargs.push(...cifti_resample_weighted_cargs((params["weighted"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param opt_exponent_exponent specify exponent in weighting function: exponent 'n' to use in (area / (distance ^ n)) as the weighting function (default 6)
 * @param opt_legacy_cutoff use v1.3.2 logic for the kernel cutoff
 *
 * @returns Parameter dictionary
 */
function cifti_resample_weighted_1_params(
    opt_exponent_exponent: number | null = null,
    opt_legacy_cutoff: boolean = false,
): CiftiResampleWeighted1ParametersTagged {
    const params = {
        "@type": "weighted_1" as const,
        "opt_legacy_cutoff": opt_legacy_cutoff,
    };
    if (opt_exponent_exponent !== null) {
        params["opt_exponent_exponent"] = opt_exponent_exponent;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_weighted_1_cargs(
    params: CiftiResampleWeighted1Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-weighted");
    if ((params["opt_exponent_exponent"] ?? null) !== null) {
        cargs.push(
            "-exponent",
            String((params["opt_exponent_exponent"] ?? null))
        );
    }
    if ((params["opt_legacy_cutoff"] ?? false)) {
        cargs.push("-legacy-cutoff");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param dilate_mm distance, in mm, to dilate
 * @param opt_nearest use nearest value dilation
 * @param opt_linear use linear dilation
 * @param weighted use weighted dilation (default for non-label data)
 *
 * @returns Parameter dictionary
 */
function cifti_resample_surface_postdilate_params(
    dilate_mm: number,
    opt_nearest: boolean = false,
    opt_linear: boolean = false,
    weighted: CiftiResampleWeighted1Parameters | null = null,
): CiftiResampleSurfacePostdilateParametersTagged {
    const params = {
        "@type": "surface_postdilate" as const,
        "dilate_mm": dilate_mm,
        "opt_nearest": opt_nearest,
        "opt_linear": opt_linear,
    };
    if (weighted !== null) {
        params["weighted"] = weighted;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_surface_postdilate_cargs(
    params: CiftiResampleSurfacePostdilateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-surface-postdilate");
    cargs.push(String((params["dilate_mm"] ?? null)));
    if ((params["opt_nearest"] ?? false)) {
        cargs.push("-nearest");
    }
    if ((params["opt_linear"] ?? false)) {
        cargs.push("-linear");
    }
    if ((params["weighted"] ?? null) !== null) {
        cargs.push(...cifti_resample_weighted_1_cargs((params["weighted"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param source_volume the source volume used when generating the affine
 * @param target_volume the target volume used when generating the affine
 *
 * @returns Parameter dictionary
 */
function cifti_resample_flirt_params(
    source_volume: string,
    target_volume: string,
): CiftiResampleFlirtParametersTagged {
    const params = {
        "@type": "flirt" as const,
        "source_volume": source_volume,
        "target_volume": target_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_flirt_cargs(
    params: CiftiResampleFlirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-flirt");
    cargs.push((params["source_volume"] ?? null));
    cargs.push((params["target_volume"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param affine_file the affine file to use
 * @param flirt MUST be used if affine is a flirt affine
 *
 * @returns Parameter dictionary
 */
function cifti_resample_affine_params(
    affine_file: string,
    flirt: CiftiResampleFlirtParameters | null = null,
): CiftiResampleAffineParametersTagged {
    const params = {
        "@type": "affine" as const,
        "affine_file": affine_file,
    };
    if (flirt !== null) {
        params["flirt"] = flirt;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_affine_cargs(
    params: CiftiResampleAffineParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-affine");
    cargs.push((params["affine_file"] ?? null));
    if ((params["flirt"] ?? null) !== null) {
        cargs.push(...cifti_resample_flirt_cargs((params["flirt"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param warpfield the warpfield to use
 * @param opt_fnirt_source_volume MUST be used if using a fnirt warpfield: the source volume used when generating the warpfield
 *
 * @returns Parameter dictionary
 */
function cifti_resample_warpfield_params(
    warpfield: string,
    opt_fnirt_source_volume: string | null = null,
): CiftiResampleWarpfieldParametersTagged {
    const params = {
        "@type": "warpfield" as const,
        "warpfield": warpfield,
    };
    if (opt_fnirt_source_volume !== null) {
        params["opt_fnirt_source_volume"] = opt_fnirt_source_volume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_warpfield_cargs(
    params: CiftiResampleWarpfieldParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-warpfield");
    cargs.push((params["warpfield"] ?? null));
    if ((params["opt_fnirt_source_volume"] ?? null) !== null) {
        cargs.push(
            "-fnirt",
            (params["opt_fnirt_source_volume"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_area a relevant left anatomical surface with current mesh
 * @param new_area a relevant left anatomical surface with new mesh
 *
 * @returns Parameter dictionary
 */
function cifti_resample_left_area_surfs_params(
    current_area: InputPathType,
    new_area: InputPathType,
): CiftiResampleLeftAreaSurfsParametersTagged {
    const params = {
        "@type": "left_area_surfs" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_left_area_surfs_cargs(
    params: CiftiResampleLeftAreaSurfsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-area-surfs");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_area a metric file with vertex areas for the current mesh
 * @param new_area a metric file with vertex areas for the new mesh
 *
 * @returns Parameter dictionary
 */
function cifti_resample_left_area_metrics_params(
    current_area: InputPathType,
    new_area: InputPathType,
): CiftiResampleLeftAreaMetricsParametersTagged {
    const params = {
        "@type": "left_area_metrics" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_left_area_metrics_cargs(
    params: CiftiResampleLeftAreaMetricsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-area-metrics");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_sphere a sphere with the same mesh as the current left surface
 * @param new_sphere a sphere with the new left mesh that is in register with the current sphere
 * @param left_area_surfs specify left surfaces to do vertex area correction based on
 * @param left_area_metrics specify left vertex area metrics to do area correction based on
 *
 * @returns Parameter dictionary
 */
function cifti_resample_left_spheres_params(
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    left_area_surfs: CiftiResampleLeftAreaSurfsParameters | null = null,
    left_area_metrics: CiftiResampleLeftAreaMetricsParameters | null = null,
): CiftiResampleLeftSpheresParametersTagged {
    const params = {
        "@type": "left_spheres" as const,
        "current_sphere": current_sphere,
        "new_sphere": new_sphere,
    };
    if (left_area_surfs !== null) {
        params["left_area_surfs"] = left_area_surfs;
    }
    if (left_area_metrics !== null) {
        params["left_area_metrics"] = left_area_metrics;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_left_spheres_cargs(
    params: CiftiResampleLeftSpheresParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-spheres");
    cargs.push(execution.inputFile((params["current_sphere"] ?? null)));
    cargs.push(execution.inputFile((params["new_sphere"] ?? null)));
    if ((params["left_area_surfs"] ?? null) !== null) {
        cargs.push(...cifti_resample_left_area_surfs_cargs((params["left_area_surfs"] ?? null), execution));
    }
    if ((params["left_area_metrics"] ?? null) !== null) {
        cargs.push(...cifti_resample_left_area_metrics_cargs((params["left_area_metrics"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_area a relevant right anatomical surface with current mesh
 * @param new_area a relevant right anatomical surface with new mesh
 *
 * @returns Parameter dictionary
 */
function cifti_resample_right_area_surfs_params(
    current_area: InputPathType,
    new_area: InputPathType,
): CiftiResampleRightAreaSurfsParametersTagged {
    const params = {
        "@type": "right_area_surfs" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_right_area_surfs_cargs(
    params: CiftiResampleRightAreaSurfsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-area-surfs");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_area a metric file with vertex areas for the current mesh
 * @param new_area a metric file with vertex areas for the new mesh
 *
 * @returns Parameter dictionary
 */
function cifti_resample_right_area_metrics_params(
    current_area: InputPathType,
    new_area: InputPathType,
): CiftiResampleRightAreaMetricsParametersTagged {
    const params = {
        "@type": "right_area_metrics" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_right_area_metrics_cargs(
    params: CiftiResampleRightAreaMetricsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-area-metrics");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_sphere a sphere with the same mesh as the current right surface
 * @param new_sphere a sphere with the new right mesh that is in register with the current sphere
 * @param right_area_surfs specify right surfaces to do vertex area correction based on
 * @param right_area_metrics specify right vertex area metrics to do area correction based on
 *
 * @returns Parameter dictionary
 */
function cifti_resample_right_spheres_params(
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    right_area_surfs: CiftiResampleRightAreaSurfsParameters | null = null,
    right_area_metrics: CiftiResampleRightAreaMetricsParameters | null = null,
): CiftiResampleRightSpheresParametersTagged {
    const params = {
        "@type": "right_spheres" as const,
        "current_sphere": current_sphere,
        "new_sphere": new_sphere,
    };
    if (right_area_surfs !== null) {
        params["right_area_surfs"] = right_area_surfs;
    }
    if (right_area_metrics !== null) {
        params["right_area_metrics"] = right_area_metrics;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_right_spheres_cargs(
    params: CiftiResampleRightSpheresParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-spheres");
    cargs.push(execution.inputFile((params["current_sphere"] ?? null)));
    cargs.push(execution.inputFile((params["new_sphere"] ?? null)));
    if ((params["right_area_surfs"] ?? null) !== null) {
        cargs.push(...cifti_resample_right_area_surfs_cargs((params["right_area_surfs"] ?? null), execution));
    }
    if ((params["right_area_metrics"] ?? null) !== null) {
        cargs.push(...cifti_resample_right_area_metrics_cargs((params["right_area_metrics"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_area a relevant cerebellum anatomical surface with current mesh
 * @param new_area a relevant cerebellum anatomical surface with new mesh
 *
 * @returns Parameter dictionary
 */
function cifti_resample_cerebellum_area_surfs_params(
    current_area: InputPathType,
    new_area: InputPathType,
): CiftiResampleCerebellumAreaSurfsParametersTagged {
    const params = {
        "@type": "cerebellum_area_surfs" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_cerebellum_area_surfs_cargs(
    params: CiftiResampleCerebellumAreaSurfsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-area-surfs");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_area a metric file with vertex areas for the current mesh
 * @param new_area a metric file with vertex areas for the new mesh
 *
 * @returns Parameter dictionary
 */
function cifti_resample_cerebellum_area_metrics_params(
    current_area: InputPathType,
    new_area: InputPathType,
): CiftiResampleCerebellumAreaMetricsParametersTagged {
    const params = {
        "@type": "cerebellum_area_metrics" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_cerebellum_area_metrics_cargs(
    params: CiftiResampleCerebellumAreaMetricsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-area-metrics");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_sphere a sphere with the same mesh as the current cerebellum surface
 * @param new_sphere a sphere with the new cerebellum mesh that is in register with the current sphere
 * @param cerebellum_area_surfs specify cerebellum surfaces to do vertex area correction based on
 * @param cerebellum_area_metrics specify cerebellum vertex area metrics to do area correction based on
 *
 * @returns Parameter dictionary
 */
function cifti_resample_cerebellum_spheres_params(
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    cerebellum_area_surfs: CiftiResampleCerebellumAreaSurfsParameters | null = null,
    cerebellum_area_metrics: CiftiResampleCerebellumAreaMetricsParameters | null = null,
): CiftiResampleCerebellumSpheresParametersTagged {
    const params = {
        "@type": "cerebellum_spheres" as const,
        "current_sphere": current_sphere,
        "new_sphere": new_sphere,
    };
    if (cerebellum_area_surfs !== null) {
        params["cerebellum_area_surfs"] = cerebellum_area_surfs;
    }
    if (cerebellum_area_metrics !== null) {
        params["cerebellum_area_metrics"] = cerebellum_area_metrics;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_cerebellum_spheres_cargs(
    params: CiftiResampleCerebellumSpheresParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-spheres");
    cargs.push(execution.inputFile((params["current_sphere"] ?? null)));
    cargs.push(execution.inputFile((params["new_sphere"] ?? null)));
    if ((params["cerebellum_area_surfs"] ?? null) !== null) {
        cargs.push(...cifti_resample_cerebellum_area_surfs_cargs((params["cerebellum_area_surfs"] ?? null), execution));
    }
    if ((params["cerebellum_area_metrics"] ?? null) !== null) {
        cargs.push(...cifti_resample_cerebellum_area_metrics_cargs((params["cerebellum_area_metrics"] ?? null), execution));
    }
    return cargs;
}


/**
 * Output object returned when calling `CiftiResampleParameters(...)`.
 *
 * @interface
 */
interface CiftiResampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in the cifti file to resample
 * @param direction the direction of the input that should be resampled, ROW or COLUMN
 * @param cifti_template a cifti file containing the cifti space to resample to
 * @param template_direction the direction of the template to use as the resampling space, ROW or COLUMN
 * @param surface_method specify a surface resampling method
 * @param volume_method specify a volume interpolation method
 * @param cifti_out the output cifti file
 * @param opt_surface_largest use largest weight instead of weighted average or popularity when doing surface resampling
 * @param volume_predilate dilate the volume components before resampling
 * @param surface_postdilate dilate the surface components after resampling
 * @param affine use an affine transformation on the volume components
 * @param warpfield use a warpfield on the volume components
 * @param left_spheres specify spheres for left surface resampling
 * @param right_spheres specify spheres for right surface resampling
 * @param cerebellum_spheres specify spheres for cerebellum surface resampling
 *
 * @returns Parameter dictionary
 */
function cifti_resample_params(
    cifti_in: InputPathType,
    direction: string,
    cifti_template: InputPathType,
    template_direction: string,
    surface_method: string,
    volume_method: string,
    cifti_out: string,
    opt_surface_largest: boolean = false,
    volume_predilate: CiftiResampleVolumePredilateParameters | null = null,
    surface_postdilate: CiftiResampleSurfacePostdilateParameters | null = null,
    affine: CiftiResampleAffineParameters | null = null,
    warpfield: CiftiResampleWarpfieldParameters | null = null,
    left_spheres: CiftiResampleLeftSpheresParameters | null = null,
    right_spheres: CiftiResampleRightSpheresParameters | null = null,
    cerebellum_spheres: CiftiResampleCerebellumSpheresParameters | null = null,
): CiftiResampleParametersTagged {
    const params = {
        "@type": "workbench/cifti-resample" as const,
        "cifti_in": cifti_in,
        "direction": direction,
        "cifti_template": cifti_template,
        "template_direction": template_direction,
        "surface_method": surface_method,
        "volume_method": volume_method,
        "cifti_out": cifti_out,
        "opt_surface_largest": opt_surface_largest,
    };
    if (volume_predilate !== null) {
        params["volume_predilate"] = volume_predilate;
    }
    if (surface_postdilate !== null) {
        params["surface_postdilate"] = surface_postdilate;
    }
    if (affine !== null) {
        params["affine"] = affine;
    }
    if (warpfield !== null) {
        params["warpfield"] = warpfield;
    }
    if (left_spheres !== null) {
        params["left_spheres"] = left_spheres;
    }
    if (right_spheres !== null) {
        params["right_spheres"] = right_spheres;
    }
    if (cerebellum_spheres !== null) {
        params["cerebellum_spheres"] = cerebellum_spheres;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_resample_cargs(
    params: CiftiResampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-resample");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push(execution.inputFile((params["cifti_template"] ?? null)));
    cargs.push((params["template_direction"] ?? null));
    cargs.push((params["surface_method"] ?? null));
    cargs.push((params["volume_method"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_surface_largest"] ?? false)) {
        cargs.push("-surface-largest");
    }
    if ((params["volume_predilate"] ?? null) !== null) {
        cargs.push(...cifti_resample_volume_predilate_cargs((params["volume_predilate"] ?? null), execution));
    }
    if ((params["surface_postdilate"] ?? null) !== null) {
        cargs.push(...cifti_resample_surface_postdilate_cargs((params["surface_postdilate"] ?? null), execution));
    }
    if ((params["affine"] ?? null) !== null) {
        cargs.push(...cifti_resample_affine_cargs((params["affine"] ?? null), execution));
    }
    if ((params["warpfield"] ?? null) !== null) {
        cargs.push(...cifti_resample_warpfield_cargs((params["warpfield"] ?? null), execution));
    }
    if ((params["left_spheres"] ?? null) !== null) {
        cargs.push(...cifti_resample_left_spheres_cargs((params["left_spheres"] ?? null), execution));
    }
    if ((params["right_spheres"] ?? null) !== null) {
        cargs.push(...cifti_resample_right_spheres_cargs((params["right_spheres"] ?? null), execution));
    }
    if ((params["cerebellum_spheres"] ?? null) !== null) {
        cargs.push(...cifti_resample_cerebellum_spheres_cargs((params["cerebellum_spheres"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_resample_outputs(
    params: CiftiResampleParameters,
    execution: Execution,
): CiftiResampleOutputs {
    const ret: CiftiResampleOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-resample
 *
 * Resample a cifti file to a new cifti space.
 *
 * Resample cifti data to a different brainordinate space.  Use COLUMN for the direction to resample dscalar, dlabel, or dtseries.  Resampling both dimensions of a dconn requires running this command twice, once with COLUMN and once with ROW.  If you are resampling a dconn and your machine has a large amount of memory, you might consider using -cifti-resample-dconn-memory to avoid writing and rereading an intermediate file.  The <template-direction> argument should usually be COLUMN, as dtseries, dscalar, and dlabel all have brainordinates on that direction.  If spheres are not specified for a surface structure which exists in the cifti files, its data is copied without resampling or dilation.  Dilation is done with the 'nearest' method, and is done on <new-sphere> for surface data.  Volume components are padded before dilation so that dilation doesn't run into the edge of the component bounding box.  If neither -affine nor -warpfield are specified, the identity transform is assumed for the volume data.
 *
 * The recommended resampling methods are ADAP_BARY_AREA and CUBIC (cubic spline), except for label data which should use ADAP_BARY_AREA and ENCLOSING_VOXEL.  Using ADAP_BARY_AREA requires specifying an area option to each used -*-spheres option.
 *
 * The <volume-method> argument must be one of the following:
 *
 * CUBIC
 * ENCLOSING_VOXEL
 * TRILINEAR
 *
 * The <surface-method> argument must be one of the following:
 *
 * ADAP_BARY_AREA
 * BARYCENTRIC
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiResampleOutputs`).
 */
function cifti_resample_execute(
    params: CiftiResampleParameters,
    runner: Runner | null = null,
): CiftiResampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_RESAMPLE_METADATA);
    params = execution.params(params)
    const cargs = cifti_resample_cargs(params, execution)
    const ret = cifti_resample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-resample
 *
 * Resample a cifti file to a new cifti space.
 *
 * Resample cifti data to a different brainordinate space.  Use COLUMN for the direction to resample dscalar, dlabel, or dtseries.  Resampling both dimensions of a dconn requires running this command twice, once with COLUMN and once with ROW.  If you are resampling a dconn and your machine has a large amount of memory, you might consider using -cifti-resample-dconn-memory to avoid writing and rereading an intermediate file.  The <template-direction> argument should usually be COLUMN, as dtseries, dscalar, and dlabel all have brainordinates on that direction.  If spheres are not specified for a surface structure which exists in the cifti files, its data is copied without resampling or dilation.  Dilation is done with the 'nearest' method, and is done on <new-sphere> for surface data.  Volume components are padded before dilation so that dilation doesn't run into the edge of the component bounding box.  If neither -affine nor -warpfield are specified, the identity transform is assumed for the volume data.
 *
 * The recommended resampling methods are ADAP_BARY_AREA and CUBIC (cubic spline), except for label data which should use ADAP_BARY_AREA and ENCLOSING_VOXEL.  Using ADAP_BARY_AREA requires specifying an area option to each used -*-spheres option.
 *
 * The <volume-method> argument must be one of the following:
 *
 * CUBIC
 * ENCLOSING_VOXEL
 * TRILINEAR
 *
 * The <surface-method> argument must be one of the following:
 *
 * ADAP_BARY_AREA
 * BARYCENTRIC
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the cifti file to resample
 * @param direction the direction of the input that should be resampled, ROW or COLUMN
 * @param cifti_template a cifti file containing the cifti space to resample to
 * @param template_direction the direction of the template to use as the resampling space, ROW or COLUMN
 * @param surface_method specify a surface resampling method
 * @param volume_method specify a volume interpolation method
 * @param cifti_out the output cifti file
 * @param opt_surface_largest use largest weight instead of weighted average or popularity when doing surface resampling
 * @param volume_predilate dilate the volume components before resampling
 * @param surface_postdilate dilate the surface components after resampling
 * @param affine use an affine transformation on the volume components
 * @param warpfield use a warpfield on the volume components
 * @param left_spheres specify spheres for left surface resampling
 * @param right_spheres specify spheres for right surface resampling
 * @param cerebellum_spheres specify spheres for cerebellum surface resampling
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiResampleOutputs`).
 */
function cifti_resample(
    cifti_in: InputPathType,
    direction: string,
    cifti_template: InputPathType,
    template_direction: string,
    surface_method: string,
    volume_method: string,
    cifti_out: string,
    opt_surface_largest: boolean = false,
    volume_predilate: CiftiResampleVolumePredilateParameters | null = null,
    surface_postdilate: CiftiResampleSurfacePostdilateParameters | null = null,
    affine: CiftiResampleAffineParameters | null = null,
    warpfield: CiftiResampleWarpfieldParameters | null = null,
    left_spheres: CiftiResampleLeftSpheresParameters | null = null,
    right_spheres: CiftiResampleRightSpheresParameters | null = null,
    cerebellum_spheres: CiftiResampleCerebellumSpheresParameters | null = null,
    runner: Runner | null = null,
): CiftiResampleOutputs {
    const params = cifti_resample_params(cifti_in, direction, cifti_template, template_direction, surface_method, volume_method, cifti_out, opt_surface_largest, volume_predilate, surface_postdilate, affine, warpfield, left_spheres, right_spheres, cerebellum_spheres)
    return cifti_resample_execute(params, runner);
}


export {
      CIFTI_RESAMPLE_METADATA,
      CiftiResampleOutputs,
      cifti_resample,
      cifti_resample_affine_params,
      cifti_resample_cerebellum_area_metrics_params,
      cifti_resample_cerebellum_area_surfs_params,
      cifti_resample_cerebellum_spheres_params,
      cifti_resample_execute,
      cifti_resample_flirt_params,
      cifti_resample_left_area_metrics_params,
      cifti_resample_left_area_surfs_params,
      cifti_resample_left_spheres_params,
      cifti_resample_params,
      cifti_resample_right_area_metrics_params,
      cifti_resample_right_area_surfs_params,
      cifti_resample_right_spheres_params,
      cifti_resample_surface_postdilate_params,
      cifti_resample_volume_predilate_params,
      cifti_resample_warpfield_params,
      cifti_resample_weighted_1_params,
      cifti_resample_weighted_params,
};
