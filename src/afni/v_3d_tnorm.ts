// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TNORM_METADATA: Metadata = {
    id: "2f017fb0846acaa4d9cf83666f160e4cc99d7998.boutiques",
    name: "3dTnorm",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTnormParameters {
    "__STYXTYPE__": "3dTnorm";
    "prefix"?: string | null | undefined;
    "norm2": boolean;
    "normR": boolean;
    "norm1": boolean;
    "normx": boolean;
    "polort"?: number | null | undefined;
    "L1fit": boolean;
    "input_dataset": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dTnorm": v_3d_tnorm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dTnorm": v_3d_tnorm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tnorm(...)`.
 *
 * @interface
 */
interface V3dTnormOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Normalized output dataset
     */
    output_dataset: OutputPathType | null;
}


function v_3d_tnorm_params(
    input_dataset: InputPathType,
    prefix: string | null = null,
    norm2: boolean = false,
    norm_r: boolean = false,
    norm1: boolean = false,
    normx: boolean = false,
    polort: number | null = null,
    l1fit: boolean = false,
): V3dTnormParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset (e.g. data.nii)
     * @param prefix Prefix for the output dataset
     * @param norm2 L2 normalize (sum of squares = 1)
     * @param norm_r Normalize so sum of squares = number of time points
     * @param norm1 L1 normalize (sum of absolute values = 1)
     * @param normx Scale so max absolute value = 1 (L_infinity norm)
     * @param polort Detrend with polynomials of order p before normalizing
     * @param l1fit Detrend with L1 regression (L2 is default)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dTnorm" as const,
        "norm2": norm2,
        "normR": norm_r,
        "norm1": norm1,
        "normx": normx,
        "L1fit": l1fit,
        "input_dataset": input_dataset,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    return params;
}


function v_3d_tnorm_cargs(
    params: V3dTnormParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dTnorm");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["norm2"] ?? null)) {
        cargs.push("-norm2");
    }
    if ((params["normR"] ?? null)) {
        cargs.push("-normR");
    }
    if ((params["norm1"] ?? null)) {
        cargs.push("-norm1");
    }
    if ((params["normx"] ?? null)) {
        cargs.push("-normx");
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["L1fit"] ?? null)) {
        cargs.push("-L1fit");
    }
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    return cargs;
}


function v_3d_tnorm_outputs(
    params: V3dTnormParameters,
    execution: Execution,
): V3dTnormOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dTnormOutputs = {
        root: execution.outputFile("."),
        output_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii"].join('')) : null,
    };
    return ret;
}


function v_3d_tnorm_execute(
    params: V3dTnormParameters,
    execution: Execution,
): V3dTnormOutputs {
    /**
     * Normalizes each voxel time series by multiplicative scaling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dTnormOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_tnorm_cargs(params, execution)
    const ret = v_3d_tnorm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_tnorm(
    input_dataset: InputPathType,
    prefix: string | null = null,
    norm2: boolean = false,
    norm_r: boolean = false,
    norm1: boolean = false,
    normx: boolean = false,
    polort: number | null = null,
    l1fit: boolean = false,
    runner: Runner | null = null,
): V3dTnormOutputs {
    /**
     * Normalizes each voxel time series by multiplicative scaling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset (e.g. data.nii)
     * @param prefix Prefix for the output dataset
     * @param norm2 L2 normalize (sum of squares = 1)
     * @param norm_r Normalize so sum of squares = number of time points
     * @param norm1 L1 normalize (sum of absolute values = 1)
     * @param normx Scale so max absolute value = 1 (L_infinity norm)
     * @param polort Detrend with polynomials of order p before normalizing
     * @param l1fit Detrend with L1 regression (L2 is default)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dTnormOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TNORM_METADATA);
    const params = v_3d_tnorm_params(input_dataset, prefix, norm2, norm_r, norm1, normx, polort, l1fit)
    return v_3d_tnorm_execute(params, execution);
}


export {
      V3dTnormOutputs,
      V3dTnormParameters,
      V_3D_TNORM_METADATA,
      v_3d_tnorm,
      v_3d_tnorm_params,
};
