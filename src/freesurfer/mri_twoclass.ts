// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_TWOCLASS_METADATA: Metadata = {
    id: "1f5933526ae351fb97dfc4ae02bbe3f2c10f5407.boutiques",
    name: "mri_twoclass",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriTwoclassParameters {
    "@type"?: "freesurfer/mri_twoclass";
    "segmentation_volume": InputPathType;
    "output_subject": string;
    "output_volume": string;
    "c1_subjects": Array<string>;
    "c2_subjects": Array<string>;
    "f_threshold"?: number | null | undefined;
    "bonferroni_correction": boolean;
}
type MriTwoclassParametersTagged = Required<Pick<MriTwoclassParameters, '@type'>> & MriTwoclassParameters;


/**
 * Output object returned when calling `MriTwoclassParameters(...)`.
 *
 * @interface
 */
interface MriTwoclassOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume storing the results
     */
    result_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param segmentation_volume Input segmentation volume
 * @param output_subject Output subject name
 * @param output_volume Output volume
 * @param c1_subjects List of subjects from class 1
 * @param c2_subjects List of subjects from class 2
 * @param f_threshold Specify F threshold
 * @param bonferroni_correction Perform Bonferroni correction
 *
 * @returns Parameter dictionary
 */
function mri_twoclass_params(
    segmentation_volume: InputPathType,
    output_subject: string,
    output_volume: string,
    c1_subjects: Array<string>,
    c2_subjects: Array<string>,
    f_threshold: number | null = null,
    bonferroni_correction: boolean = false,
): MriTwoclassParametersTagged {
    const params = {
        "@type": "freesurfer/mri_twoclass" as const,
        "segmentation_volume": segmentation_volume,
        "output_subject": output_subject,
        "output_volume": output_volume,
        "c1_subjects": c1_subjects,
        "c2_subjects": c2_subjects,
        "bonferroni_correction": bonferroni_correction,
    };
    if (f_threshold !== null) {
        params["f_threshold"] = f_threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_twoclass_cargs(
    params: MriTwoclassParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_twoclass");
    cargs.push(execution.inputFile((params["segmentation_volume"] ?? null)));
    cargs.push((params["output_subject"] ?? null));
    cargs.push((params["output_volume"] ?? null));
    cargs.push(...(params["c1_subjects"] ?? null));
    cargs.push(...(params["c2_subjects"] ?? null));
    if ((params["f_threshold"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["f_threshold"] ?? null))
        );
    }
    if ((params["bonferroni_correction"] ?? false)) {
        cargs.push("-b");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_twoclass_outputs(
    params: MriTwoclassParameters,
    execution: Execution,
): MriTwoclassOutputs {
    const ret: MriTwoclassOutputs = {
        root: execution.outputFile("."),
        result_volume: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_twoclass
 *
 * Compute cross-subject statistics of two sets of labels.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriTwoclassOutputs`).
 */
function mri_twoclass_execute(
    params: MriTwoclassParameters,
    runner: Runner | null = null,
): MriTwoclassOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_TWOCLASS_METADATA);
    params = execution.params(params)
    const cargs = mri_twoclass_cargs(params, execution)
    const ret = mri_twoclass_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_twoclass
 *
 * Compute cross-subject statistics of two sets of labels.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param segmentation_volume Input segmentation volume
 * @param output_subject Output subject name
 * @param output_volume Output volume
 * @param c1_subjects List of subjects from class 1
 * @param c2_subjects List of subjects from class 2
 * @param f_threshold Specify F threshold
 * @param bonferroni_correction Perform Bonferroni correction
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriTwoclassOutputs`).
 */
function mri_twoclass(
    segmentation_volume: InputPathType,
    output_subject: string,
    output_volume: string,
    c1_subjects: Array<string>,
    c2_subjects: Array<string>,
    f_threshold: number | null = null,
    bonferroni_correction: boolean = false,
    runner: Runner | null = null,
): MriTwoclassOutputs {
    const params = mri_twoclass_params(segmentation_volume, output_subject, output_volume, c1_subjects, c2_subjects, f_threshold, bonferroni_correction)
    return mri_twoclass_execute(params, runner);
}


export {
      MRI_TWOCLASS_METADATA,
      MriTwoclassOutputs,
      mri_twoclass,
      mri_twoclass_execute,
      mri_twoclass_params,
};
