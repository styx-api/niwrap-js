// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TTO1_D_METADATA: Metadata = {
    id: "ce8e76b7df50a297f638920b54ead13d47c43d94.boutiques",
    name: "3dTto1D",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTto1DParameters {
    "@type": "afni.3dTto1D";
    "input_dataset": InputPathType;
    "method": string;
    "automask": boolean;
    "mask"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "verbose"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dTto1D": v_3d_tto1_d_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dTto1D": v_3d_tto1_d_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tto1_d(...)`.
 *
 * @interface
 */
interface V3dTto1DOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output 1D time series file
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Specify input dataset. This should be a set of 3D time series. If the input is in 1D format, a transpose operator will typically be required.
 * @param method Specify 4D to 1D conversion method. Methods include: enorm, dvars, srms, shift_srms, mdiff, smdiff, 4095_count, 4095_frac, 4095_warn.
 * @param automask Restrict computation to automask
 * @param mask Restrict computation to given mask
 * @param prefix Specify output file. Default is stdout
 * @param verbose Specify verbose level. Default is 1
 *
 * @returns Parameter dictionary
 */
function v_3d_tto1_d_params(
    input_dataset: InputPathType,
    method: string,
    automask: boolean = false,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    verbose: number | null = null,
): V3dTto1DParameters {
    const params = {
        "@type": "afni.3dTto1D" as const,
        "input_dataset": input_dataset,
        "method": method,
        "automask": automask,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_tto1_d_cargs(
    params: V3dTto1DParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dTto1D");
    cargs.push(
        "-input",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    cargs.push(
        "-method",
        (params["method"] ?? null)
    );
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_tto1_d_outputs(
    params: V3dTto1DParameters,
    execution: Execution,
): V3dTto1DOutputs {
    const ret: V3dTto1DOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dTto1D
 *
 * Collapse a 4D time series to a 1D time series.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTto1DOutputs`).
 */
function v_3d_tto1_d_execute(
    params: V3dTto1DParameters,
    runner: Runner | null = null,
): V3dTto1DOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TTO1_D_METADATA);
    params = execution.params(params)
    const cargs = v_3d_tto1_d_cargs(params, execution)
    const ret = v_3d_tto1_d_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dTto1D
 *
 * Collapse a 4D time series to a 1D time series.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Specify input dataset. This should be a set of 3D time series. If the input is in 1D format, a transpose operator will typically be required.
 * @param method Specify 4D to 1D conversion method. Methods include: enorm, dvars, srms, shift_srms, mdiff, smdiff, 4095_count, 4095_frac, 4095_warn.
 * @param automask Restrict computation to automask
 * @param mask Restrict computation to given mask
 * @param prefix Specify output file. Default is stdout
 * @param verbose Specify verbose level. Default is 1
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTto1DOutputs`).
 */
function v_3d_tto1_d(
    input_dataset: InputPathType,
    method: string,
    automask: boolean = false,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    verbose: number | null = null,
    runner: Runner | null = null,
): V3dTto1DOutputs {
    const params = v_3d_tto1_d_params(input_dataset, method, automask, mask, prefix, verbose)
    return v_3d_tto1_d_execute(params, runner);
}


export {
      V3dTto1DOutputs,
      V3dTto1DParameters,
      V_3D_TTO1_D_METADATA,
      v_3d_tto1_d,
      v_3d_tto1_d_execute,
      v_3d_tto1_d_params,
};
