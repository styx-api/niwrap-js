// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VNO_MATCH_CHECK_METADATA: Metadata = {
    id: "9a3a5462fe2518cc3bd6acf304f950d94e93ceac.boutiques",
    name: "vno_match_check",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface VnoMatchCheckParameters {
    "@type"?: "freesurfer/vno_match_check";
    "subjid": string;
    "debug": boolean;
    "right_hemi": boolean;
    "left_hemi": boolean;
}
type VnoMatchCheckParametersTagged = Required<Pick<VnoMatchCheckParameters, '@type'>> & VnoMatchCheckParameters;


/**
 * Output object returned when calling `VnoMatchCheckParameters(...)`.
 *
 * @interface
 */
interface VnoMatchCheckOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjid Subject ID for which the vertex number check is performed
 * @param debug Prints progress text
 * @param right_hemi Checks only the right hemisphere
 * @param left_hemi Checks only the left hemisphere
 *
 * @returns Parameter dictionary
 */
function vno_match_check_params(
    subjid: string,
    debug: boolean = false,
    right_hemi: boolean = false,
    left_hemi: boolean = false,
): VnoMatchCheckParametersTagged {
    const params = {
        "@type": "freesurfer/vno_match_check" as const,
        "subjid": subjid,
        "debug": debug,
        "right_hemi": right_hemi,
        "left_hemi": left_hemi,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function vno_match_check_cargs(
    params: VnoMatchCheckParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("vno_match_check");
    cargs.push((params["subjid"] ?? null));
    if ((params["debug"] ?? false)) {
        cargs.push("debug");
    }
    if ((params["right_hemi"] ?? false)) {
        cargs.push("rh");
    }
    if ((params["left_hemi"] ?? false)) {
        cargs.push("lh");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function vno_match_check_outputs(
    params: VnoMatchCheckParameters,
    execution: Execution,
): VnoMatchCheckOutputs {
    const ret: VnoMatchCheckOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * vno_match_check
 *
 * Checks that all surfaces and surface data files for a subject have the same number of vertices.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VnoMatchCheckOutputs`).
 */
function vno_match_check_execute(
    params: VnoMatchCheckParameters,
    runner: Runner | null = null,
): VnoMatchCheckOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VNO_MATCH_CHECK_METADATA);
    params = execution.params(params)
    const cargs = vno_match_check_cargs(params, execution)
    const ret = vno_match_check_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * vno_match_check
 *
 * Checks that all surfaces and surface data files for a subject have the same number of vertices.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjid Subject ID for which the vertex number check is performed
 * @param debug Prints progress text
 * @param right_hemi Checks only the right hemisphere
 * @param left_hemi Checks only the left hemisphere
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VnoMatchCheckOutputs`).
 */
function vno_match_check(
    subjid: string,
    debug: boolean = false,
    right_hemi: boolean = false,
    left_hemi: boolean = false,
    runner: Runner | null = null,
): VnoMatchCheckOutputs {
    const params = vno_match_check_params(subjid, debug, right_hemi, left_hemi)
    return vno_match_check_execute(params, runner);
}


export {
      VNO_MATCH_CHECK_METADATA,
      VnoMatchCheckOutputs,
      vno_match_check,
      vno_match_check_execute,
      vno_match_check_params,
};
