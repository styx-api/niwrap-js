// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__MEASURE_BB_THICK_METADATA: Metadata = {
    id: "261dd15d9b87b8820a89a7b2a53c5bb9a97c42a1.boutiques",
    name: "@measure_bb_thick",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VMeasureBbThickParameters {
    "__STYXTYPE__": "@measure_bb_thick";
    "maskset": InputPathType;
    "surfset": InputPathType;
    "outdir"?: string | null | undefined;
    "resample"?: string | null | undefined;
    "increment"?: number | null | undefined;
    "surfsmooth"?: number | null | undefined;
    "smoothmm"?: number | null | undefined;
    "maxthick"?: number | null | undefined;
    "depth_search"?: number | null | undefined;
    "keep_temp_files": boolean;
    "balls_only": boolean;
    "surfsmooth_method"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@measure_bb_thick": v__measure_bb_thick_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@measure_bb_thick": v__measure_bb_thick_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__measure_bb_thick(...)`.
 *
 * @interface
 */
interface VMeasureBbThickOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Thickness/depth dataset
     */
    maxfill: OutputPathType | null;
    /**
     * Volumetric thickness dataset
     */
    bb_thick: OutputPathType | null;
    /**
     * Smoothed volumetric thickness dataset
     */
    bb_thick_smooth: OutputPathType | null;
    /**
     * Unsmoothed thickness mapped to surface nodes
     */
    bb_thick_niml: OutputPathType | null;
    /**
     * Smoothed thickness mapped to surface nodes
     */
    bb_thick_smooth_niml: OutputPathType | null;
    /**
     * Mask dataset
     */
    maskset_output: OutputPathType | null;
    /**
     * Resampled mask dataset
     */
    maskset_resampled: OutputPathType | null;
    /**
     * Surface representation of mask volume
     */
    anat_surface: OutputPathType | null;
    /**
     * Simple specification file for surface to use with suma commands
     */
    quick_spec: OutputPathType | null;
}


function v__measure_bb_thick_params(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: string | null = null,
    resample: string | null = null,
    increment: number | null = null,
    surfsmooth: number | null = null,
    smoothmm: number | null = null,
    maxthick: number | null = null,
    depth_search: number | null = null,
    keep_temp_files: boolean = false,
    balls_only: boolean = false,
    surfsmooth_method: string | null = null,
): VMeasureBbThickParameters {
    /**
     * Build parameters.
    
     * @param maskset Mask dataset for input
     * @param surfset Surface dataset onto which to map thickness (e.g., pial/gray matter surface)
     * @param outdir Output directory
     * @param resample Resample input to mm in millimeters (e.g., half a voxel or 'auto'). No resampling is done by default.
     * @param increment Test thickness at increments of sub-voxel distance. Default is 1/4 voxel minimum distance (in-plane).
     * @param surfsmooth Smooth surface map of thickness by mm millimeters. Default is 6 mm.
     * @param smoothmm Smooth volume by mm FWHM in mask. Default is 2*voxelsize of mask or resampled mask.
     * @param maxthick Search for maximum thickness value of mm millimeters. Default is 6 mm.
     * @param depth_search Map to surface by looking for max along mm millimeter normal vectors. Default is 3 mm.
     * @param keep_temp_files Do not delete the intermediate files (for testing)
     * @param balls_only Calculate only with spheres and skip boxes
     * @param surfsmooth_method Heat method used for smoothing surfaces. Default is HEAT_07 but HEAT_05 is also useful for models.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@measure_bb_thick" as const,
        "maskset": maskset,
        "surfset": surfset,
        "keep_temp_files": keep_temp_files,
        "balls_only": balls_only,
    };
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (resample !== null) {
        params["resample"] = resample;
    }
    if (increment !== null) {
        params["increment"] = increment;
    }
    if (surfsmooth !== null) {
        params["surfsmooth"] = surfsmooth;
    }
    if (smoothmm !== null) {
        params["smoothmm"] = smoothmm;
    }
    if (maxthick !== null) {
        params["maxthick"] = maxthick;
    }
    if (depth_search !== null) {
        params["depth_search"] = depth_search;
    }
    if (surfsmooth_method !== null) {
        params["surfsmooth_method"] = surfsmooth_method;
    }
    return params;
}


function v__measure_bb_thick_cargs(
    params: VMeasureBbThickParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@measure_bb_thick");
    cargs.push(
        "-maskset",
        execution.inputFile((params["maskset"] ?? null))
    );
    cargs.push(
        "-surfset",
        execution.inputFile((params["surfset"] ?? null))
    );
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "-outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["resample"] ?? null) !== null) {
        cargs.push(
            "-resample",
            (params["resample"] ?? null)
        );
    }
    if ((params["increment"] ?? null) !== null) {
        cargs.push(
            "-increment",
            String((params["increment"] ?? null))
        );
    }
    if ((params["surfsmooth"] ?? null) !== null) {
        cargs.push(
            "-surfsmooth",
            String((params["surfsmooth"] ?? null))
        );
    }
    if ((params["smoothmm"] ?? null) !== null) {
        cargs.push(
            "-smoothmm",
            String((params["smoothmm"] ?? null))
        );
    }
    if ((params["maxthick"] ?? null) !== null) {
        cargs.push(
            "-maxthick",
            String((params["maxthick"] ?? null))
        );
    }
    if ((params["depth_search"] ?? null) !== null) {
        cargs.push(
            "-depthsearch",
            String((params["depth_search"] ?? null))
        );
    }
    if ((params["keep_temp_files"] ?? null)) {
        cargs.push("-keep_temp_files");
    }
    if ((params["balls_only"] ?? null)) {
        cargs.push("-balls_only");
    }
    if ((params["surfsmooth_method"] ?? null) !== null) {
        cargs.push(
            "-surfsmooth_method",
            (params["surfsmooth_method"] ?? null)
        );
    }
    return cargs;
}


function v__measure_bb_thick_outputs(
    params: VMeasureBbThickParameters,
    execution: Execution,
): VMeasureBbThickOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VMeasureBbThickOutputs = {
        root: execution.outputFile("."),
        maxfill: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/maxfill.nii.gz"].join('')) : null,
        bb_thick: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/bb_thick.nii.gz"].join('')) : null,
        bb_thick_smooth: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/bb_thick_smooth.nii.gz"].join('')) : null,
        bb_thick_niml: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/bb_thick.niml.dset"].join('')) : null,
        bb_thick_smooth_niml: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/bb_thick_smooth.niml.dset"].join('')) : null,
        maskset_output: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/maskset.nii.gz"].join('')) : null,
        maskset_resampled: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/maskset_rs.nii.gz"].join('')) : null,
        anat_surface: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/anat.gii"].join('')) : null,
        quick_spec: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/quick.spec"].join('')) : null,
    };
    return ret;
}


function v__measure_bb_thick_execute(
    params: VMeasureBbThickParameters,
    execution: Execution,
): VMeasureBbThickOutputs {
    /**
     * Compute thickness of mask using ball and box method.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VMeasureBbThickOutputs`).
     */
    params = execution.params(params)
    const cargs = v__measure_bb_thick_cargs(params, execution)
    const ret = v__measure_bb_thick_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__measure_bb_thick(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: string | null = null,
    resample: string | null = null,
    increment: number | null = null,
    surfsmooth: number | null = null,
    smoothmm: number | null = null,
    maxthick: number | null = null,
    depth_search: number | null = null,
    keep_temp_files: boolean = false,
    balls_only: boolean = false,
    surfsmooth_method: string | null = null,
    runner: Runner | null = null,
): VMeasureBbThickOutputs {
    /**
     * Compute thickness of mask using ball and box method.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param maskset Mask dataset for input
     * @param surfset Surface dataset onto which to map thickness (e.g., pial/gray matter surface)
     * @param outdir Output directory
     * @param resample Resample input to mm in millimeters (e.g., half a voxel or 'auto'). No resampling is done by default.
     * @param increment Test thickness at increments of sub-voxel distance. Default is 1/4 voxel minimum distance (in-plane).
     * @param surfsmooth Smooth surface map of thickness by mm millimeters. Default is 6 mm.
     * @param smoothmm Smooth volume by mm FWHM in mask. Default is 2*voxelsize of mask or resampled mask.
     * @param maxthick Search for maximum thickness value of mm millimeters. Default is 6 mm.
     * @param depth_search Map to surface by looking for max along mm millimeter normal vectors. Default is 3 mm.
     * @param keep_temp_files Do not delete the intermediate files (for testing)
     * @param balls_only Calculate only with spheres and skip boxes
     * @param surfsmooth_method Heat method used for smoothing surfaces. Default is HEAT_07 but HEAT_05 is also useful for models.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VMeasureBbThickOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__MEASURE_BB_THICK_METADATA);
    const params = v__measure_bb_thick_params(maskset, surfset, outdir, resample, increment, surfsmooth, smoothmm, maxthick, depth_search, keep_temp_files, balls_only, surfsmooth_method)
    return v__measure_bb_thick_execute(params, execution);
}


export {
      VMeasureBbThickOutputs,
      VMeasureBbThickParameters,
      V__MEASURE_BB_THICK_METADATA,
      v__measure_bb_thick,
      v__measure_bb_thick_params,
};
