// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_REDUCE_METADATA: Metadata = {
    id: "78310c60423f027c427d018c3550497fd5ab40cd.boutiques",
    name: "cifti-reduce",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiReduceExcludeOutliersParameters {
    "@type"?: "exclude_outliers";
    "sigma_below": number;
    "sigma_above": number;
}
type CiftiReduceExcludeOutliersParametersTagged = Required<Pick<CiftiReduceExcludeOutliersParameters, '@type'>> & CiftiReduceExcludeOutliersParameters;


interface CiftiReduceParameters {
    "@type"?: "workbench/cifti-reduce";
    "cifti_in": InputPathType;
    "operation": string;
    "cifti_out": string;
    "opt_direction_direction"?: string | null | undefined;
    "exclude_outliers"?: CiftiReduceExcludeOutliersParameters | null | undefined;
    "opt_only_numeric": boolean;
}
type CiftiReduceParametersTagged = Required<Pick<CiftiReduceParameters, '@type'>> & CiftiReduceParameters;


/**
 * Build parameters.
 *
 * @param sigma_below number of standard deviations below the mean to include
 * @param sigma_above number of standard deviations above the mean to include
 *
 * @returns Parameter dictionary
 */
function cifti_reduce_exclude_outliers_params(
    sigma_below: number,
    sigma_above: number,
): CiftiReduceExcludeOutliersParametersTagged {
    const params = {
        "@type": "exclude_outliers" as const,
        "sigma_below": sigma_below,
        "sigma_above": sigma_above,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_reduce_exclude_outliers_cargs(
    params: CiftiReduceExcludeOutliersParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-exclude-outliers");
    cargs.push(String((params["sigma_below"] ?? null)));
    cargs.push(String((params["sigma_above"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `CiftiReduceParameters(...)`.
 *
 * @interface
 */
interface CiftiReduceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in the cifti file to reduce
 * @param operation the reduction operator to use
 * @param cifti_out the output cifti file
 * @param opt_direction_direction specify what direction to reduce along: the direction (default ROW)
 * @param exclude_outliers exclude non-numeric values and outliers by standard deviation
 * @param opt_only_numeric exclude non-numeric values
 *
 * @returns Parameter dictionary
 */
function cifti_reduce_params(
    cifti_in: InputPathType,
    operation: string,
    cifti_out: string,
    opt_direction_direction: string | null = null,
    exclude_outliers: CiftiReduceExcludeOutliersParameters | null = null,
    opt_only_numeric: boolean = false,
): CiftiReduceParametersTagged {
    const params = {
        "@type": "workbench/cifti-reduce" as const,
        "cifti_in": cifti_in,
        "operation": operation,
        "cifti_out": cifti_out,
        "opt_only_numeric": opt_only_numeric,
    };
    if (opt_direction_direction !== null) {
        params["opt_direction_direction"] = opt_direction_direction;
    }
    if (exclude_outliers !== null) {
        params["exclude_outliers"] = exclude_outliers;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_reduce_cargs(
    params: CiftiReduceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-reduce");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["operation"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_direction_direction"] ?? null) !== null) {
        cargs.push(
            "-direction",
            (params["opt_direction_direction"] ?? null)
        );
    }
    if ((params["exclude_outliers"] ?? null) !== null) {
        cargs.push(...cifti_reduce_exclude_outliers_cargs((params["exclude_outliers"] ?? null), execution));
    }
    if ((params["opt_only_numeric"] ?? false)) {
        cargs.push("-only-numeric");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_reduce_outputs(
    params: CiftiReduceParameters,
    execution: Execution,
): CiftiReduceOutputs {
    const ret: CiftiReduceOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-reduce
 *
 * Perform reduction operation on a cifti file.
 *
 * For the specified direction (default ROW), perform a reduction operation along that direction.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.  The reduction operators are as follows:
 *
 * MAX: the maximum value
 * MIN: the minimum value
 * INDEXMAX: the 1-based index of the maximum value
 * INDEXMIN: the 1-based index of the minimum value
 * SUM: add all values
 * PRODUCT: multiply all values
 * MEAN: the mean of the data
 * STDEV: the standard deviation (N denominator)
 * SAMPSTDEV: the sample standard deviation (N-1 denominator)
 * VARIANCE: the variance of the data
 * TSNR: mean divided by sample standard deviation (N-1 denominator)
 * COV: sample standard deviation (N-1 denominator) divided by mean
 * L2NORM: square root of sum of squares
 * MEDIAN: the median of the data
 * MODE: the mode of the data
 * COUNT_NONZERO: the number of nonzero elements in the data
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiReduceOutputs`).
 */
function cifti_reduce_execute(
    params: CiftiReduceParameters,
    runner: Runner | null = null,
): CiftiReduceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_REDUCE_METADATA);
    params = execution.params(params)
    const cargs = cifti_reduce_cargs(params, execution)
    const ret = cifti_reduce_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-reduce
 *
 * Perform reduction operation on a cifti file.
 *
 * For the specified direction (default ROW), perform a reduction operation along that direction.  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.  The reduction operators are as follows:
 *
 * MAX: the maximum value
 * MIN: the minimum value
 * INDEXMAX: the 1-based index of the maximum value
 * INDEXMIN: the 1-based index of the minimum value
 * SUM: add all values
 * PRODUCT: multiply all values
 * MEAN: the mean of the data
 * STDEV: the standard deviation (N denominator)
 * SAMPSTDEV: the sample standard deviation (N-1 denominator)
 * VARIANCE: the variance of the data
 * TSNR: mean divided by sample standard deviation (N-1 denominator)
 * COV: sample standard deviation (N-1 denominator) divided by mean
 * L2NORM: square root of sum of squares
 * MEDIAN: the median of the data
 * MODE: the mode of the data
 * COUNT_NONZERO: the number of nonzero elements in the data
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the cifti file to reduce
 * @param operation the reduction operator to use
 * @param cifti_out the output cifti file
 * @param opt_direction_direction specify what direction to reduce along: the direction (default ROW)
 * @param exclude_outliers exclude non-numeric values and outliers by standard deviation
 * @param opt_only_numeric exclude non-numeric values
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiReduceOutputs`).
 */
function cifti_reduce(
    cifti_in: InputPathType,
    operation: string,
    cifti_out: string,
    opt_direction_direction: string | null = null,
    exclude_outliers: CiftiReduceExcludeOutliersParameters | null = null,
    opt_only_numeric: boolean = false,
    runner: Runner | null = null,
): CiftiReduceOutputs {
    const params = cifti_reduce_params(cifti_in, operation, cifti_out, opt_direction_direction, exclude_outliers, opt_only_numeric)
    return cifti_reduce_execute(params, runner);
}


export {
      CIFTI_REDUCE_METADATA,
      CiftiReduceOutputs,
      cifti_reduce,
      cifti_reduce_exclude_outliers_params,
      cifti_reduce_execute,
      cifti_reduce_params,
};
