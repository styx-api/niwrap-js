// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DMATMULT_METADATA: Metadata = {
    id: "4c01ec090b313da194a5a2b7eb8c0d0439e1e624.boutiques",
    name: "3dmatmult",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dmatmultParameters {
    "__STYXTYPE__": "3dmatmult";
    "inputA": InputPathType;
    "inputB": InputPathType;
    "prefix": string;
    "datum"?: string | null | undefined;
    "verb"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dmatmult": v_3dmatmult_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dmatmult": v_3dmatmult_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dmatmult(...)`.
 *
 * @interface
 */
interface V3dmatmultOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset from the matrix multiplication
     */
    output_file: OutputPathType;
}


function v_3dmatmult_params(
    input_a: InputPathType,
    input_b: InputPathType,
    prefix: string,
    datum: string | null = null,
    verb: number | null = null,
): V3dmatmultParameters {
    /**
     * Build parameters.
    
     * @param input_a Specify first (matrix) dataset
     * @param input_b Specify second (matrix) dataset
     * @param prefix Specify output dataset prefix
     * @param datum Specify output data type ('byte', 'short', 'float')
     * @param verb Specify verbosity level
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dmatmult" as const,
        "inputA": input_a,
        "inputB": input_b,
        "prefix": prefix,
    };
    if (datum !== null) {
        params["datum"] = datum;
    }
    if (verb !== null) {
        params["verb"] = verb;
    }
    return params;
}


function v_3dmatmult_cargs(
    params: V3dmatmultParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dmatmult");
    cargs.push(
        "-inputA",
        execution.inputFile((params["inputA"] ?? null))
    );
    cargs.push(
        "-inputB",
        execution.inputFile((params["inputB"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    if ((params["verb"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb"] ?? null))
        );
    }
    return cargs;
}


function v_3dmatmult_outputs(
    params: V3dmatmultParameters,
    execution: Execution,
): V3dmatmultOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dmatmultOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null)].join('')),
    };
    return ret;
}


function v_3dmatmult_execute(
    params: V3dmatmultParameters,
    execution: Execution,
): V3dmatmultOutputs {
    /**
     * Multiply AFNI datasets slice-by-slice as matrices.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dmatmultOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dmatmult_cargs(params, execution)
    const ret = v_3dmatmult_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3dmatmult(
    input_a: InputPathType,
    input_b: InputPathType,
    prefix: string,
    datum: string | null = null,
    verb: number | null = null,
    runner: Runner | null = null,
): V3dmatmultOutputs {
    /**
     * Multiply AFNI datasets slice-by-slice as matrices.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_a Specify first (matrix) dataset
     * @param input_b Specify second (matrix) dataset
     * @param prefix Specify output dataset prefix
     * @param datum Specify output data type ('byte', 'short', 'float')
     * @param verb Specify verbosity level
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dmatmultOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DMATMULT_METADATA);
    const params = v_3dmatmult_params(input_a, input_b, prefix, datum, verb)
    return v_3dmatmult_execute(params, execution);
}


export {
      V3dmatmultOutputs,
      V3dmatmultParameters,
      V_3DMATMULT_METADATA,
      v_3dmatmult,
      v_3dmatmult_params,
};
