// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DMASKDUMP_METADATA: Metadata = {
    id: "592e963676fc4ef445e35ff95c09c2b7fb061059.boutiques",
    name: "3dmaskdump",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dmaskdumpParameters {
    "@type"?: "afni/3dmaskdump";
    "input_files": Array<InputPathType>;
    "mask_dataset"?: InputPathType | null | undefined;
    "mask_range"?: Array<string> | null | undefined;
    "output_index": boolean;
    "output_noijk": boolean;
    "output_xyz": boolean;
    "output_filename"?: string | null | undefined;
    "calc_mask_opts"?: string | null | undefined;
    "xbox_coords"?: string | null | undefined;
    "dbox_coords"?: string | null | undefined;
    "nbox_coords"?: string | null | undefined;
    "ibox_coords"?: string | null | undefined;
    "xball_coords"?: string | null | undefined;
    "dball_coords"?: string | null | undefined;
    "nball_coords"?: string | null | undefined;
    "nozero_output": boolean;
    "random_voxels"?: number | null | undefined;
    "random_seed"?: number | null | undefined;
    "output_niml"?: string | null | undefined;
    "quiet_mode": boolean;
}
type V3dmaskdumpParametersTagged = Required<Pick<V3dmaskdumpParameters, '@type'>> & V3dmaskdumpParameters;


/**
 * Output object returned when calling `V3dmaskdumpParameters(...)`.
 *
 * @interface
 */
interface V3dmaskdumpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output ASCII file with voxel values
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_files Input datasets to dump voxel values
 * @param mask_dataset Use the dataset as a mask. Only voxels with nonzero values in the mask will be printed from the input dataset.
 * @param mask_range Further restrict the voxels from mask dataset to those mask values between 'a' and 'b' (inclusive).
 * @param output_index Write out the dataset index values.
 * @param output_noijk Do not write out the i,j,k values.
 * @param output_xyz Write the x,y,z coordinates from the first input dataset at the start of each output line.
 * @param output_filename Write output to specified file.
 * @param calc_mask_opts Execute options enclosed as a 3dcalc-like program to produce a mask from the resulting 3D brick.
 * @param xbox_coords Put a 'mask' at dataset coordinates 'x y z' mm.
 * @param dbox_coords Put a 'mask' at RAI/DICOM coordinates of 'x y z' mm.
 * @param nbox_coords Put a 'mask' at LPI/SPM coordinates of 'x y z' mm.
 * @param ibox_coords Put a 'mask' at voxel indexes 'i j k'.
 * @param xball_coords Put a ball (sphere) mask at dataset coordinates (x,y,z) with radius r.
 * @param dball_coords Put a ball (sphere) mask at RAI/DICOM coordinates (x,y,z) with radius r.
 * @param nball_coords Put a ball (sphere) mask at LPI/SPM coordinates (x,y,z) with radius r.
 * @param nozero_output Skip output of any voxel where all the data values are zero.
 * @param random_voxels Keep only N_RAND randomly selected voxels from what would have been the output.
 * @param random_seed Seed the random number generator with SEED.
 * @param output_niml Output data in the XML/NIML format compatible with input back to AFNI via the READ_NIML_FILE command.
 * @param quiet_mode Do not print progress messages to stderr.
 *
 * @returns Parameter dictionary
 */
function v_3dmaskdump_params(
    input_files: Array<InputPathType>,
    mask_dataset: InputPathType | null = null,
    mask_range: Array<string> | null = null,
    output_index: boolean = false,
    output_noijk: boolean = false,
    output_xyz: boolean = false,
    output_filename: string | null = null,
    calc_mask_opts: string | null = null,
    xbox_coords: string | null = null,
    dbox_coords: string | null = null,
    nbox_coords: string | null = null,
    ibox_coords: string | null = null,
    xball_coords: string | null = null,
    dball_coords: string | null = null,
    nball_coords: string | null = null,
    nozero_output: boolean = false,
    random_voxels: number | null = null,
    random_seed: number | null = null,
    output_niml: string | null = null,
    quiet_mode: boolean = false,
): V3dmaskdumpParametersTagged {
    const params = {
        "@type": "afni/3dmaskdump" as const,
        "input_files": input_files,
        "output_index": output_index,
        "output_noijk": output_noijk,
        "output_xyz": output_xyz,
        "nozero_output": nozero_output,
        "quiet_mode": quiet_mode,
    };
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    if (mask_range !== null) {
        params["mask_range"] = mask_range;
    }
    if (output_filename !== null) {
        params["output_filename"] = output_filename;
    }
    if (calc_mask_opts !== null) {
        params["calc_mask_opts"] = calc_mask_opts;
    }
    if (xbox_coords !== null) {
        params["xbox_coords"] = xbox_coords;
    }
    if (dbox_coords !== null) {
        params["dbox_coords"] = dbox_coords;
    }
    if (nbox_coords !== null) {
        params["nbox_coords"] = nbox_coords;
    }
    if (ibox_coords !== null) {
        params["ibox_coords"] = ibox_coords;
    }
    if (xball_coords !== null) {
        params["xball_coords"] = xball_coords;
    }
    if (dball_coords !== null) {
        params["dball_coords"] = dball_coords;
    }
    if (nball_coords !== null) {
        params["nball_coords"] = nball_coords;
    }
    if (random_voxels !== null) {
        params["random_voxels"] = random_voxels;
    }
    if (random_seed !== null) {
        params["random_seed"] = random_seed;
    }
    if (output_niml !== null) {
        params["output_niml"] = output_niml;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dmaskdump_cargs(
    params: V3dmaskdumpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dmaskdump");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    if ((params["mask_range"] ?? null) !== null) {
        cargs.push(
            "-mrange",
            ...(params["mask_range"] ?? null)
        );
    }
    if ((params["output_index"] ?? false)) {
        cargs.push("-index");
    }
    if ((params["output_noijk"] ?? false)) {
        cargs.push("-noijk");
    }
    if ((params["output_xyz"] ?? false)) {
        cargs.push("-xyz");
    }
    if ((params["output_filename"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_filename"] ?? null)
        );
    }
    if ((params["calc_mask_opts"] ?? null) !== null) {
        cargs.push(
            "-cmask",
            (params["calc_mask_opts"] ?? null)
        );
    }
    if ((params["xbox_coords"] ?? null) !== null) {
        cargs.push(
            "-xbox",
            (params["xbox_coords"] ?? null)
        );
    }
    if ((params["dbox_coords"] ?? null) !== null) {
        cargs.push(
            "-dbox",
            (params["dbox_coords"] ?? null)
        );
    }
    if ((params["nbox_coords"] ?? null) !== null) {
        cargs.push(
            "-nbox",
            (params["nbox_coords"] ?? null)
        );
    }
    if ((params["ibox_coords"] ?? null) !== null) {
        cargs.push(
            "-ibox",
            (params["ibox_coords"] ?? null)
        );
    }
    if ((params["xball_coords"] ?? null) !== null) {
        cargs.push(
            "-xball",
            (params["xball_coords"] ?? null)
        );
    }
    if ((params["dball_coords"] ?? null) !== null) {
        cargs.push(
            "-dball",
            (params["dball_coords"] ?? null)
        );
    }
    if ((params["nball_coords"] ?? null) !== null) {
        cargs.push(
            "-nball",
            (params["nball_coords"] ?? null)
        );
    }
    if ((params["nozero_output"] ?? false)) {
        cargs.push("-nozero");
    }
    if ((params["random_voxels"] ?? null) !== null) {
        cargs.push(
            "-n_rand",
            String((params["random_voxels"] ?? null))
        );
    }
    if ((params["random_seed"] ?? null) !== null) {
        cargs.push(
            "-n_randseed",
            String((params["random_seed"] ?? null))
        );
    }
    if ((params["output_niml"] ?? null) !== null) {
        cargs.push(
            "-niml",
            (params["output_niml"] ?? null)
        );
    }
    if ((params["quiet_mode"] ?? false)) {
        cargs.push("-quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dmaskdump_outputs(
    params: V3dmaskdumpParameters,
    execution: Execution,
): V3dmaskdumpOutputs {
    const ret: V3dmaskdumpOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output_filename"] ?? null) !== null) ? execution.outputFile([(params["output_filename"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dmaskdump
 *
 * Outputs voxel values from AFNI datasets satisfying mask criteria to an ASCII file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dmaskdumpOutputs`).
 */
function v_3dmaskdump_execute(
    params: V3dmaskdumpParameters,
    runner: Runner | null = null,
): V3dmaskdumpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DMASKDUMP_METADATA);
    params = execution.params(params)
    const cargs = v_3dmaskdump_cargs(params, execution)
    const ret = v_3dmaskdump_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dmaskdump
 *
 * Outputs voxel values from AFNI datasets satisfying mask criteria to an ASCII file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input datasets to dump voxel values
 * @param mask_dataset Use the dataset as a mask. Only voxels with nonzero values in the mask will be printed from the input dataset.
 * @param mask_range Further restrict the voxels from mask dataset to those mask values between 'a' and 'b' (inclusive).
 * @param output_index Write out the dataset index values.
 * @param output_noijk Do not write out the i,j,k values.
 * @param output_xyz Write the x,y,z coordinates from the first input dataset at the start of each output line.
 * @param output_filename Write output to specified file.
 * @param calc_mask_opts Execute options enclosed as a 3dcalc-like program to produce a mask from the resulting 3D brick.
 * @param xbox_coords Put a 'mask' at dataset coordinates 'x y z' mm.
 * @param dbox_coords Put a 'mask' at RAI/DICOM coordinates of 'x y z' mm.
 * @param nbox_coords Put a 'mask' at LPI/SPM coordinates of 'x y z' mm.
 * @param ibox_coords Put a 'mask' at voxel indexes 'i j k'.
 * @param xball_coords Put a ball (sphere) mask at dataset coordinates (x,y,z) with radius r.
 * @param dball_coords Put a ball (sphere) mask at RAI/DICOM coordinates (x,y,z) with radius r.
 * @param nball_coords Put a ball (sphere) mask at LPI/SPM coordinates (x,y,z) with radius r.
 * @param nozero_output Skip output of any voxel where all the data values are zero.
 * @param random_voxels Keep only N_RAND randomly selected voxels from what would have been the output.
 * @param random_seed Seed the random number generator with SEED.
 * @param output_niml Output data in the XML/NIML format compatible with input back to AFNI via the READ_NIML_FILE command.
 * @param quiet_mode Do not print progress messages to stderr.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dmaskdumpOutputs`).
 */
function v_3dmaskdump(
    input_files: Array<InputPathType>,
    mask_dataset: InputPathType | null = null,
    mask_range: Array<string> | null = null,
    output_index: boolean = false,
    output_noijk: boolean = false,
    output_xyz: boolean = false,
    output_filename: string | null = null,
    calc_mask_opts: string | null = null,
    xbox_coords: string | null = null,
    dbox_coords: string | null = null,
    nbox_coords: string | null = null,
    ibox_coords: string | null = null,
    xball_coords: string | null = null,
    dball_coords: string | null = null,
    nball_coords: string | null = null,
    nozero_output: boolean = false,
    random_voxels: number | null = null,
    random_seed: number | null = null,
    output_niml: string | null = null,
    quiet_mode: boolean = false,
    runner: Runner | null = null,
): V3dmaskdumpOutputs {
    const params = v_3dmaskdump_params(input_files, mask_dataset, mask_range, output_index, output_noijk, output_xyz, output_filename, calc_mask_opts, xbox_coords, dbox_coords, nbox_coords, ibox_coords, xball_coords, dball_coords, nball_coords, nozero_output, random_voxels, random_seed, output_niml, quiet_mode)
    return v_3dmaskdump_execute(params, runner);
}


export {
      V3dmaskdumpOutputs,
      V_3DMASKDUMP_METADATA,
      v_3dmaskdump,
      v_3dmaskdump_execute,
      v_3dmaskdump_params,
};
