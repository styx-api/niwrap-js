// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_REORDER_METADATA: Metadata = {
    id: "0ad5648e651c6301fc696a16b14ed6ef9efc41a4.boutiques",
    name: "cifti-reorder",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiReorderParameters {
    "@type": "workbench.cifti-reorder";
    "cifti_in": InputPathType;
    "direction": string;
    "reorder_list": string;
    "cifti_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-reorder": cifti_reorder_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-reorder": cifti_reorder_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cifti_reorder(...)`.
 *
 * @interface
 */
interface CiftiReorderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the reordered cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in input cifti file
 * @param direction which dimension to reorder along, ROW or COLUMN
 * @param reorder_list a text file containing the desired order transformation
 * @param cifti_out the reordered cifti file
 *
 * @returns Parameter dictionary
 */
function cifti_reorder_params(
    cifti_in: InputPathType,
    direction: string,
    reorder_list: string,
    cifti_out: string,
): CiftiReorderParameters {
    const params = {
        "@type": "workbench.cifti-reorder" as const,
        "cifti_in": cifti_in,
        "direction": direction,
        "reorder_list": reorder_list,
        "cifti_out": cifti_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_reorder_cargs(
    params: CiftiReorderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-reorder");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["reorder_list"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_reorder_outputs(
    params: CiftiReorderParameters,
    execution: Execution,
): CiftiReorderOutputs {
    const ret: CiftiReorderOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-reorder
 *
 * Reorder the parcels or scalar/label maps in a cifti file.
 *
 * The mapping along the specified direction must be parcels, scalars, or labels.  For pscalar or ptseries, use COLUMN to reorder the parcels.  For dlabel, use ROW.  The <reorder-list> file must contain 1-based indices separated by whitespace (spaces, newlines, tabs, etc), with as many indices as <cifti-in> has along the specified dimension.  These indices specify which current index should end up in that position, for instance, if the current order is 'A B C D', and the desired order is 'D A B C', the text file should contain '4 1 2 3'.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiReorderOutputs`).
 */
function cifti_reorder_execute(
    params: CiftiReorderParameters,
    runner: Runner | null = null,
): CiftiReorderOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_REORDER_METADATA);
    params = execution.params(params)
    const cargs = cifti_reorder_cargs(params, execution)
    const ret = cifti_reorder_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-reorder
 *
 * Reorder the parcels or scalar/label maps in a cifti file.
 *
 * The mapping along the specified direction must be parcels, scalars, or labels.  For pscalar or ptseries, use COLUMN to reorder the parcels.  For dlabel, use ROW.  The <reorder-list> file must contain 1-based indices separated by whitespace (spaces, newlines, tabs, etc), with as many indices as <cifti-in> has along the specified dimension.  These indices specify which current index should end up in that position, for instance, if the current order is 'A B C D', and the desired order is 'D A B C', the text file should contain '4 1 2 3'.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in input cifti file
 * @param direction which dimension to reorder along, ROW or COLUMN
 * @param reorder_list a text file containing the desired order transformation
 * @param cifti_out the reordered cifti file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiReorderOutputs`).
 */
function cifti_reorder(
    cifti_in: InputPathType,
    direction: string,
    reorder_list: string,
    cifti_out: string,
    runner: Runner | null = null,
): CiftiReorderOutputs {
    const params = cifti_reorder_params(cifti_in, direction, reorder_list, cifti_out)
    return cifti_reorder_execute(params, runner);
}


export {
      CIFTI_REORDER_METADATA,
      CiftiReorderOutputs,
      CiftiReorderParameters,
      cifti_reorder,
      cifti_reorder_execute,
      cifti_reorder_params,
};
