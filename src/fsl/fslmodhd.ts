// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLMODHD_METADATA: Metadata = {
    id: "4d79af63e716050570a42ab303ea6efb6b7d6d71.boutiques",
    name: "fslmodhd",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslmodhdParameters {
    "__STYXTYPE__": "fslmodhd";
    "image": InputPathType;
    "keyword": string;
    "value": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslmodhd": fslmodhd_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslmodhd(...)`.
 *
 * @interface
 */
interface FslmodhdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fslmodhd_params(
    image: InputPathType,
    keyword: string,
    value: string,
): FslmodhdParameters {
    /**
     * Build parameters.
    
     * @param image Input image file (e.g. image.nii.gz)
     * @param keyword Header keyword to modify (e.g. 'dim', 'pixdim')
     * @param value New value for the given header keyword
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslmodhd" as const,
        "image": image,
        "keyword": keyword,
        "value": value,
    };
    return params;
}


function fslmodhd_cargs(
    params: FslmodhdParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslmodhd");
    cargs.push(execution.inputFile((params["image"] ?? null)));
    cargs.push((params["keyword"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


function fslmodhd_outputs(
    params: FslmodhdParameters,
    execution: Execution,
): FslmodhdOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslmodhdOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fslmodhd_execute(
    params: FslmodhdParameters,
    execution: Execution,
): FslmodhdOutputs {
    /**
     * A tool for modifying header information of NIfTI images.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslmodhdOutputs`).
     */
    params = execution.params(params)
    const cargs = fslmodhd_cargs(params, execution)
    const ret = fslmodhd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslmodhd(
    image: InputPathType,
    keyword: string,
    value: string,
    runner: Runner | null = null,
): FslmodhdOutputs {
    /**
     * A tool for modifying header information of NIfTI images.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param image Input image file (e.g. image.nii.gz)
     * @param keyword Header keyword to modify (e.g. 'dim', 'pixdim')
     * @param value New value for the given header keyword
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslmodhdOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLMODHD_METADATA);
    const params = fslmodhd_params(image, keyword, value)
    return fslmodhd_execute(params, execution);
}


export {
      FSLMODHD_METADATA,
      FslmodhdOutputs,
      FslmodhdParameters,
      fslmodhd,
      fslmodhd_params,
};
