// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_THRESHOLD_METADATA: Metadata = {
    id: "18118adc25493a185a902418d2d12f7e965b7d74.boutiques",
    name: "mri_threshold",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriThresholdParameters {
    "__STYXTYPE__": "mri_threshold";
    "input_vol": InputPathType;
    "threshold": number;
    "output_vol": string;
    "binarize"?: number | null | undefined;
    "upper_threshold": boolean;
    "frame_number"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_threshold": mri_threshold_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_threshold": mri_threshold_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_threshold(...)`.
 *
 * @interface
 */
interface MriThresholdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Thresholded output volume
     */
    output_vol_file: OutputPathType;
}


function mri_threshold_params(
    input_vol: InputPathType,
    threshold: number,
    output_vol: string,
    binarize: number | null = null,
    upper_threshold: boolean = false,
    frame_number: number | null = null,
): MriThresholdParameters {
    /**
     * Build parameters.
    
     * @param input_vol Input volume file
     * @param threshold Threshold value for the volume
     * @param output_vol Output volume file
     * @param binarize Binarize the output volume with specified bval
     * @param upper_threshold Upper threshold the volume instead of lower thresholding
     * @param frame_number Apply thresholding to a specific frame indexed by fnum
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_threshold" as const,
        "input_vol": input_vol,
        "threshold": threshold,
        "output_vol": output_vol,
        "upper_threshold": upper_threshold,
    };
    if (binarize !== null) {
        params["binarize"] = binarize;
    }
    if (frame_number !== null) {
        params["frame_number"] = frame_number;
    }
    return params;
}


function mri_threshold_cargs(
    params: MriThresholdParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_threshold");
    cargs.push(execution.inputFile((params["input_vol"] ?? null)));
    cargs.push(String((params["threshold"] ?? null)));
    cargs.push((params["output_vol"] ?? null));
    if ((params["binarize"] ?? null) !== null) {
        cargs.push(
            "-B",
            String((params["binarize"] ?? null))
        );
    }
    if ((params["upper_threshold"] ?? null)) {
        cargs.push("-U");
    }
    if ((params["frame_number"] ?? null) !== null) {
        cargs.push(
            "-F",
            String((params["frame_number"] ?? null))
        );
    }
    return cargs;
}


function mri_threshold_outputs(
    params: MriThresholdParameters,
    execution: Execution,
): MriThresholdOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriThresholdOutputs = {
        root: execution.outputFile("."),
        output_vol_file: execution.outputFile([(params["output_vol"] ?? null)].join('')),
    };
    return ret;
}


function mri_threshold_execute(
    params: MriThresholdParameters,
    execution: Execution,
): MriThresholdOutputs {
    /**
     * This program will lower threshold an input volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriThresholdOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_threshold_cargs(params, execution)
    const ret = mri_threshold_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_threshold(
    input_vol: InputPathType,
    threshold: number,
    output_vol: string,
    binarize: number | null = null,
    upper_threshold: boolean = false,
    frame_number: number | null = null,
    runner: Runner | null = null,
): MriThresholdOutputs {
    /**
     * This program will lower threshold an input volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_vol Input volume file
     * @param threshold Threshold value for the volume
     * @param output_vol Output volume file
     * @param binarize Binarize the output volume with specified bval
     * @param upper_threshold Upper threshold the volume instead of lower thresholding
     * @param frame_number Apply thresholding to a specific frame indexed by fnum
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriThresholdOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_THRESHOLD_METADATA);
    const params = mri_threshold_params(input_vol, threshold, output_vol, binarize, upper_threshold, frame_number)
    return mri_threshold_execute(params, execution);
}


export {
      MRI_THRESHOLD_METADATA,
      MriThresholdOutputs,
      MriThresholdParameters,
      mri_threshold,
      mri_threshold_params,
};
