// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_SPLINE_METADATA: Metadata = {
    id: "db0c52714eecd19e49a44db58cd57c40602d443c.boutiques",
    name: "dmri_spline",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriSplineParameters {
    "@type": "freesurfer.dmri_spline";
    "control_points_file": InputPathType;
    "mask_volume": InputPathType;
    "output_volume"?: string | null | undefined;
    "show_points": boolean;
    "output_points"?: string | null | undefined;
    "output_vectors_base"?: string | null | undefined;
    "debug": boolean;
    "check_options": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_spline": dmri_spline_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.dmri_spline": dmri_spline_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_spline(...)`.
 *
 * @interface
 */
interface DmriSplineOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume of the interpolated spline
     */
    out_volume: OutputPathType | null;
    /**
     * Output text file with interpolated spline points
     */
    out_points_file: OutputPathType | null;
    /**
     * Output text file containing tangent vectors
     */
    out_tangent_vectors: OutputPathType | null;
    /**
     * Output text file containing normal vectors
     */
    out_normal_vectors: OutputPathType | null;
    /**
     * Output text file containing curvatures
     */
    out_curvature: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param control_points_file Input text file containing control points
 * @param mask_volume Input mask volume (spline is not allowed to stray off mask)
 * @param output_volume Output volume of the interpolated spline
 * @param show_points Highlight control points in output volume (default: no)
 * @param output_points Output text file containing all interpolated spline points
 * @param output_vectors_base Base name of output text files containing tangent vectors, normal vectors, and curvatures at every point along the spline
 * @param debug Turn on debugging
 * @param check_options Don't run anything, just check options and exit
 *
 * @returns Parameter dictionary
 */
function dmri_spline_params(
    control_points_file: InputPathType,
    mask_volume: InputPathType,
    output_volume: string | null = null,
    show_points: boolean = false,
    output_points: string | null = null,
    output_vectors_base: string | null = null,
    debug: boolean = false,
    check_options: boolean = false,
): DmriSplineParameters {
    const params = {
        "@type": "freesurfer.dmri_spline" as const,
        "control_points_file": control_points_file,
        "mask_volume": mask_volume,
        "show_points": show_points,
        "debug": debug,
        "check_options": check_options,
    };
    if (output_volume !== null) {
        params["output_volume"] = output_volume;
    }
    if (output_points !== null) {
        params["output_points"] = output_points;
    }
    if (output_vectors_base !== null) {
        params["output_vectors_base"] = output_vectors_base;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_spline_cargs(
    params: DmriSplineParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_spline");
    cargs.push(
        "--cpts",
        execution.inputFile((params["control_points_file"] ?? null))
    );
    cargs.push(
        "--mask",
        execution.inputFile((params["mask_volume"] ?? null))
    );
    if ((params["output_volume"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["output_volume"] ?? null)
        );
    }
    if ((params["show_points"] ?? null)) {
        cargs.push("--show");
    }
    if ((params["output_points"] ?? null) !== null) {
        cargs.push(
            "--outpts",
            (params["output_points"] ?? null)
        );
    }
    if ((params["output_vectors_base"] ?? null) !== null) {
        cargs.push(
            "--outvec",
            (params["output_vectors_base"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_options"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_spline_outputs(
    params: DmriSplineParameters,
    execution: Execution,
): DmriSplineOutputs {
    const ret: DmriSplineOutputs = {
        root: execution.outputFile("."),
        out_volume: ((params["output_volume"] ?? null) !== null) ? execution.outputFile([(params["output_volume"] ?? null)].join('')) : null,
        out_points_file: ((params["output_points"] ?? null) !== null) ? execution.outputFile([(params["output_points"] ?? null)].join('')) : null,
        out_tangent_vectors: ((params["output_vectors_base"] ?? null) !== null) ? execution.outputFile([(params["output_vectors_base"] ?? null), "_tangent.txt"].join('')) : null,
        out_normal_vectors: ((params["output_vectors_base"] ?? null) !== null) ? execution.outputFile([(params["output_vectors_base"] ?? null), "_normal.txt"].join('')) : null,
        out_curvature: ((params["output_vectors_base"] ?? null) !== null) ? execution.outputFile([(params["output_vectors_base"] ?? null), "_curvature.txt"].join('')) : null,
    };
    return ret;
}


/**
 * Tool for interpolating and analyzing splines within a defined mask.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `DmriSplineOutputs`).
 */
function dmri_spline_execute(
    params: DmriSplineParameters,
    execution: Execution,
): DmriSplineOutputs {
    params = execution.params(params)
    const cargs = dmri_spline_cargs(params, execution)
    const ret = dmri_spline_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for interpolating and analyzing splines within a defined mask.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param control_points_file Input text file containing control points
 * @param mask_volume Input mask volume (spline is not allowed to stray off mask)
 * @param output_volume Output volume of the interpolated spline
 * @param show_points Highlight control points in output volume (default: no)
 * @param output_points Output text file containing all interpolated spline points
 * @param output_vectors_base Base name of output text files containing tangent vectors, normal vectors, and curvatures at every point along the spline
 * @param debug Turn on debugging
 * @param check_options Don't run anything, just check options and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriSplineOutputs`).
 */
function dmri_spline(
    control_points_file: InputPathType,
    mask_volume: InputPathType,
    output_volume: string | null = null,
    show_points: boolean = false,
    output_points: string | null = null,
    output_vectors_base: string | null = null,
    debug: boolean = false,
    check_options: boolean = false,
    runner: Runner | null = null,
): DmriSplineOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_SPLINE_METADATA);
    const params = dmri_spline_params(control_points_file, mask_volume, output_volume, show_points, output_points, output_vectors_base, debug, check_options)
    return dmri_spline_execute(params, execution);
}


export {
      DMRI_SPLINE_METADATA,
      DmriSplineOutputs,
      DmriSplineParameters,
      dmri_spline,
      dmri_spline_cargs,
      dmri_spline_execute,
      dmri_spline_outputs,
      dmri_spline_params,
};
