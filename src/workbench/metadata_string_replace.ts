// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METADATA_STRING_REPLACE_METADATA: Metadata = {
    id: "0e9fbdcc6c931ca67414f0c599ced7cc2aca0006.boutiques",
    name: "metadata-string-replace",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetadataStringReplaceParameters {
    "@type": "workbench.metadata-string-replace";
    "input_file": string;
    "find_string": string;
    "replace_string": string;
    "output_file": string;
    "opt_case_insensitive": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metadata-string-replace": metadata_string_replace_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metadata_string_replace(...)`.
 *
 * @interface
 */
interface MetadataStringReplaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file the file to replace metadata in
 * @param find_string the string to find
 * @param replace_string the string to replace <find-string> with
 * @param output_file output - the name to save the modified file as
 * @param opt_case_insensitive match with case variation also
 *
 * @returns Parameter dictionary
 */
function metadata_string_replace_params(
    input_file: string,
    find_string: string,
    replace_string: string,
    output_file: string,
    opt_case_insensitive: boolean = false,
): MetadataStringReplaceParameters {
    const params = {
        "@type": "workbench.metadata-string-replace" as const,
        "input_file": input_file,
        "find_string": find_string,
        "replace_string": replace_string,
        "output_file": output_file,
        "opt_case_insensitive": opt_case_insensitive,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metadata_string_replace_cargs(
    params: MetadataStringReplaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metadata-string-replace");
    cargs.push((params["input_file"] ?? null));
    cargs.push((params["find_string"] ?? null));
    cargs.push((params["replace_string"] ?? null));
    cargs.push((params["output_file"] ?? null));
    if ((params["opt_case_insensitive"] ?? null)) {
        cargs.push("-case-insensitive");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metadata_string_replace_outputs(
    params: MetadataStringReplaceParameters,
    execution: Execution,
): MetadataStringReplaceOutputs {
    const ret: MetadataStringReplaceOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Replace a string in all metadata of a file.
 *
 * Replaces all occurrences of <find-string> in the metadata and map names of <input-file> with <replace-string>.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetadataStringReplaceOutputs`).
 */
function metadata_string_replace_execute(
    params: MetadataStringReplaceParameters,
    runner: Runner | null = null,
): MetadataStringReplaceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METADATA_STRING_REPLACE_METADATA);
    params = execution.params(params)
    const cargs = metadata_string_replace_cargs(params, execution)
    const ret = metadata_string_replace_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Replace a string in all metadata of a file.
 *
 * Replaces all occurrences of <find-string> in the metadata and map names of <input-file> with <replace-string>.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param input_file the file to replace metadata in
 * @param find_string the string to find
 * @param replace_string the string to replace <find-string> with
 * @param output_file output - the name to save the modified file as
 * @param opt_case_insensitive match with case variation also
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetadataStringReplaceOutputs`).
 */
function metadata_string_replace(
    input_file: string,
    find_string: string,
    replace_string: string,
    output_file: string,
    opt_case_insensitive: boolean = false,
    runner: Runner | null = null,
): MetadataStringReplaceOutputs {
    const params = metadata_string_replace_params(input_file, find_string, replace_string, output_file, opt_case_insensitive)
    return metadata_string_replace_execute(params, runner);
}


export {
      METADATA_STRING_REPLACE_METADATA,
      MetadataStringReplaceOutputs,
      MetadataStringReplaceParameters,
      metadata_string_replace,
      metadata_string_replace_execute,
      metadata_string_replace_params,
};
