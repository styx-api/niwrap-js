// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PARC_ATLAS_JACKKNIFE_TEST_METADATA: Metadata = {
    id: "73521a0dbbff55000eb66ba615a4c090cafe9838.boutiques",
    name: "parc_atlas_jackknife_test",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ParcAtlasJackknifeTestParameters {
    "@type": "freesurfer.parc_atlas_jackknife_test";
    "register": boolean;
    "reg_dist"?: string | null | undefined;
    "reg_append"?: string | null | undefined;
    "reg_copy"?: string | null | undefined;
    "train": boolean;
    "classify": boolean;
    "test": boolean;
    "all": boolean;
    "subjects_dir"?: string | null | undefined;
    "freesurfer_home"?: string | null | undefined;
    "binaries_path"?: string | null | undefined;
    "dontrun": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.parc_atlas_jackknife_test": parc_atlas_jackknife_test_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.parc_atlas_jackknife_test": parc_atlas_jackknife_test_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `parc_atlas_jackknife_test(...)`.
 *
 * @interface
 */
interface ParcAtlasJackknifeTestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output files written to the directory named 'jackknife'.
     */
    jackknife_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param register Run mris_register: creates .sphere.reg files
 * @param reg_dist Run mris_register with '-dist <arg>' flag
 * @param reg_append Append <string> to end of ?h.sphere.reg
 * @param reg_copy Copy ?h.sphere.reg<string> ?h.sphere.reg
 * @param train Run mris_ca_train: creates .gcs files
 * @param classify Run mris_ca_label: creates .annot files
 * @param test Run mris_compute_parc_overlap
 * @param all Run train, classify, and test
 * @param subjects_dir Override default subjects directory
 * @param freesurfer_home Source a new FREESURFER_HOME
 * @param binaries_path Specify override path to binaries
 * @param dontrun Don't execute the commands
 *
 * @returns Parameter dictionary
 */
function parc_atlas_jackknife_test_params(
    register: boolean = false,
    reg_dist: string | null = null,
    reg_append: string | null = null,
    reg_copy: string | null = null,
    train: boolean = false,
    classify: boolean = false,
    test: boolean = false,
    all: boolean = false,
    subjects_dir: string | null = null,
    freesurfer_home: string | null = null,
    binaries_path: string | null = null,
    dontrun: boolean = false,
): ParcAtlasJackknifeTestParameters {
    const params = {
        "@type": "freesurfer.parc_atlas_jackknife_test" as const,
        "register": register,
        "train": train,
        "classify": classify,
        "test": test,
        "all": all,
        "dontrun": dontrun,
    };
    if (reg_dist !== null) {
        params["reg_dist"] = reg_dist;
    }
    if (reg_append !== null) {
        params["reg_append"] = reg_append;
    }
    if (reg_copy !== null) {
        params["reg_copy"] = reg_copy;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (freesurfer_home !== null) {
        params["freesurfer_home"] = freesurfer_home;
    }
    if (binaries_path !== null) {
        params["binaries_path"] = binaries_path;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function parc_atlas_jackknife_test_cargs(
    params: ParcAtlasJackknifeTestParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("parc_atlas_jackknife_test");
    if ((params["register"] ?? null)) {
        cargs.push("-register");
    }
    if ((params["reg_dist"] ?? null) !== null) {
        cargs.push(
            "-reg_dist",
            (params["reg_dist"] ?? null)
        );
    }
    if ((params["reg_append"] ?? null) !== null) {
        cargs.push(
            "-reg_append",
            (params["reg_append"] ?? null)
        );
    }
    if ((params["reg_copy"] ?? null) !== null) {
        cargs.push(
            "-reg_copy",
            (params["reg_copy"] ?? null)
        );
    }
    if ((params["train"] ?? null)) {
        cargs.push("-train");
    }
    if ((params["classify"] ?? null)) {
        cargs.push("-classify");
    }
    if ((params["test"] ?? null)) {
        cargs.push("-test");
    }
    if ((params["all"] ?? null)) {
        cargs.push("-all");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "-sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["freesurfer_home"] ?? null) !== null) {
        cargs.push(
            "-fshome",
            (params["freesurfer_home"] ?? null)
        );
    }
    if ((params["binaries_path"] ?? null) !== null) {
        cargs.push(
            "-binhome",
            (params["binaries_path"] ?? null)
        );
    }
    if ((params["dontrun"] ?? null)) {
        cargs.push("-dontrun");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function parc_atlas_jackknife_test_outputs(
    params: ParcAtlasJackknifeTestParameters,
    execution: Execution,
): ParcAtlasJackknifeTestOutputs {
    const ret: ParcAtlasJackknifeTestOutputs = {
        root: execution.outputFile("."),
        jackknife_output: execution.outputFile(["jackknife/*"].join('')),
    };
    return ret;
}


/**
 * parc_atlas_jackknife_test
 *
 * Tool for conducting a jackknife accuracy test using FreeSurfer atlases.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ParcAtlasJackknifeTestOutputs`).
 */
function parc_atlas_jackknife_test_execute(
    params: ParcAtlasJackknifeTestParameters,
    runner: Runner | null = null,
): ParcAtlasJackknifeTestOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PARC_ATLAS_JACKKNIFE_TEST_METADATA);
    params = execution.params(params)
    const cargs = parc_atlas_jackknife_test_cargs(params, execution)
    const ret = parc_atlas_jackknife_test_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * parc_atlas_jackknife_test
 *
 * Tool for conducting a jackknife accuracy test using FreeSurfer atlases.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param register Run mris_register: creates .sphere.reg files
 * @param reg_dist Run mris_register with '-dist <arg>' flag
 * @param reg_append Append <string> to end of ?h.sphere.reg
 * @param reg_copy Copy ?h.sphere.reg<string> ?h.sphere.reg
 * @param train Run mris_ca_train: creates .gcs files
 * @param classify Run mris_ca_label: creates .annot files
 * @param test Run mris_compute_parc_overlap
 * @param all Run train, classify, and test
 * @param subjects_dir Override default subjects directory
 * @param freesurfer_home Source a new FREESURFER_HOME
 * @param binaries_path Specify override path to binaries
 * @param dontrun Don't execute the commands
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ParcAtlasJackknifeTestOutputs`).
 */
function parc_atlas_jackknife_test(
    register: boolean = false,
    reg_dist: string | null = null,
    reg_append: string | null = null,
    reg_copy: string | null = null,
    train: boolean = false,
    classify: boolean = false,
    test: boolean = false,
    all: boolean = false,
    subjects_dir: string | null = null,
    freesurfer_home: string | null = null,
    binaries_path: string | null = null,
    dontrun: boolean = false,
    runner: Runner | null = null,
): ParcAtlasJackknifeTestOutputs {
    const params = parc_atlas_jackknife_test_params(register, reg_dist, reg_append, reg_copy, train, classify, test, all, subjects_dir, freesurfer_home, binaries_path, dontrun)
    return parc_atlas_jackknife_test_execute(params, runner);
}


export {
      PARC_ATLAS_JACKKNIFE_TEST_METADATA,
      ParcAtlasJackknifeTestOutputs,
      ParcAtlasJackknifeTestParameters,
      parc_atlas_jackknife_test,
      parc_atlas_jackknife_test_execute,
      parc_atlas_jackknife_test_params,
};
