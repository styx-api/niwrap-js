// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__MEASURE_EROSION_THICK_METADATA: Metadata = {
    id: "0a17dd4546f4d28205dbdff108358d9b46fa5306.boutiques",
    name: "@measure_erosion_thick",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VMeasureErosionThickParameters {
    "@type": "afni.@measure_erosion_thick";
    "maskset": InputPathType;
    "surfset": InputPathType;
    "outdir"?: string | null | undefined;
    "resample"?: string | null | undefined;
    "surfsmooth"?: number | null | undefined;
    "smoothmm"?: number | null | undefined;
    "maxthick"?: number | null | undefined;
    "depthsearch"?: number | null | undefined;
    "keep_temp_files": boolean;
    "surfsmooth_method"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@measure_erosion_thick": v__measure_erosion_thick_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@measure_erosion_thick": v__measure_erosion_thick_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__measure_erosion_thick(...)`.
 *
 * @interface
 */
interface VMeasureErosionThickOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Depth dataset.
     */
    erosion_depth: OutputPathType;
    /**
     * Volumetric thickness dataset.
     */
    erosion_thick: OutputPathType;
    /**
     * Smoothed volumetric thickness dataset.
     */
    erosion_thick_smooth: OutputPathType;
    /**
     * Unsmoothed thickness mapped to surface nodes.
     */
    erosion_thick_niml: OutputPathType;
    /**
     * Smoothed thickness mapped to surface nodes.
     */
    erosion_thick_smooth_niml: OutputPathType;
    /**
     * Mask dataset.
     */
    maskset_output: OutputPathType;
    /**
     * Resampled mask dataset.
     */
    resampled_maskset: OutputPathType;
    /**
     * Surface representation of mask volume.
     */
    anat_gii: OutputPathType;
    /**
     * Simple specification file for surface to use with suma commands.
     */
    quick_spec: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param maskset Mask dataset for input.
 * @param surfset Surface dataset onto which to map thickness (probably a pial/gray matter surface).
 * @param outdir Output directory. If not specified, erosion_thickdir is used.
 * @param resample Resample input to mm in millimeters (put a number here). Recommended for most 1mm data.
 * @param surfsmooth Smooth surface map of thickness by mm millimeters. Default is 8 mm.
 * @param smoothmm Smooth volume by mm FWHM in mask. Default is 2*voxelsize of mask or resampled mask.
 * @param maxthick Search for maximum thickness value of mm millimeters. Default is 6 mm.
 * @param depthsearch Map to surface by looking for max along mm millimeter normal vectors. Default is 3 mm.
 * @param keep_temp_files Do not delete the intermediate files (for testing).
 * @param surfsmooth_method Heat method used for smoothing surfaces. Default is HEAT_07 but HEAT_05 is also useful for models.
 *
 * @returns Parameter dictionary
 */
function v__measure_erosion_thick_params(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: string | null = null,
    resample: string | null = null,
    surfsmooth: number | null = null,
    smoothmm: number | null = null,
    maxthick: number | null = null,
    depthsearch: number | null = null,
    keep_temp_files: boolean = false,
    surfsmooth_method: string | null = null,
): VMeasureErosionThickParameters {
    const params = {
        "@type": "afni.@measure_erosion_thick" as const,
        "maskset": maskset,
        "surfset": surfset,
        "keep_temp_files": keep_temp_files,
    };
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (resample !== null) {
        params["resample"] = resample;
    }
    if (surfsmooth !== null) {
        params["surfsmooth"] = surfsmooth;
    }
    if (smoothmm !== null) {
        params["smoothmm"] = smoothmm;
    }
    if (maxthick !== null) {
        params["maxthick"] = maxthick;
    }
    if (depthsearch !== null) {
        params["depthsearch"] = depthsearch;
    }
    if (surfsmooth_method !== null) {
        params["surfsmooth_method"] = surfsmooth_method;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__measure_erosion_thick_cargs(
    params: VMeasureErosionThickParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@measure_erosion_thick");
    cargs.push(
        "-maskset",
        execution.inputFile((params["maskset"] ?? null))
    );
    cargs.push(
        "-surfset",
        execution.inputFile((params["surfset"] ?? null))
    );
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "-outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["resample"] ?? null) !== null) {
        cargs.push(
            "-resample",
            (params["resample"] ?? null)
        );
    }
    if ((params["surfsmooth"] ?? null) !== null) {
        cargs.push(
            "-surfsmooth",
            String((params["surfsmooth"] ?? null))
        );
    }
    if ((params["smoothmm"] ?? null) !== null) {
        cargs.push(
            "-smoothmm",
            String((params["smoothmm"] ?? null))
        );
    }
    if ((params["maxthick"] ?? null) !== null) {
        cargs.push(
            "-maxthick",
            String((params["maxthick"] ?? null))
        );
    }
    if ((params["depthsearch"] ?? null) !== null) {
        cargs.push(
            "-depthsearch",
            String((params["depthsearch"] ?? null))
        );
    }
    if ((params["keep_temp_files"] ?? null)) {
        cargs.push("-keep_temp_files");
    }
    if ((params["surfsmooth_method"] ?? null) !== null) {
        cargs.push(
            "-surfsmooth_method",
            (params["surfsmooth_method"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__measure_erosion_thick_outputs(
    params: VMeasureErosionThickParameters,
    execution: Execution,
): VMeasureErosionThickOutputs {
    const ret: VMeasureErosionThickOutputs = {
        root: execution.outputFile("."),
        erosion_depth: execution.outputFile(["erosion_depth.nii.gz"].join('')),
        erosion_thick: execution.outputFile(["erosion_thick.nii.gz"].join('')),
        erosion_thick_smooth: execution.outputFile(["erosion_thick_smooth.nii.gz"].join('')),
        erosion_thick_niml: execution.outputFile(["erosion_thick.niml.dset"].join('')),
        erosion_thick_smooth_niml: execution.outputFile(["erosion_thick_smooth_nn_mm.niml.dset"].join('')),
        maskset_output: execution.outputFile(["maskset.nii.gz"].join('')),
        resampled_maskset: execution.outputFile(["maskset_rs.nii.gz"].join('')),
        anat_gii: execution.outputFile(["anat.gii"].join('')),
        quick_spec: execution.outputFile(["quick.spec"].join('')),
    };
    return ret;
}


/**
 * Compute thickness of mask using erosion method.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VMeasureErosionThickOutputs`).
 */
function v__measure_erosion_thick_execute(
    params: VMeasureErosionThickParameters,
    execution: Execution,
): VMeasureErosionThickOutputs {
    params = execution.params(params)
    const cargs = v__measure_erosion_thick_cargs(params, execution)
    const ret = v__measure_erosion_thick_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute thickness of mask using erosion method.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param maskset Mask dataset for input.
 * @param surfset Surface dataset onto which to map thickness (probably a pial/gray matter surface).
 * @param outdir Output directory. If not specified, erosion_thickdir is used.
 * @param resample Resample input to mm in millimeters (put a number here). Recommended for most 1mm data.
 * @param surfsmooth Smooth surface map of thickness by mm millimeters. Default is 8 mm.
 * @param smoothmm Smooth volume by mm FWHM in mask. Default is 2*voxelsize of mask or resampled mask.
 * @param maxthick Search for maximum thickness value of mm millimeters. Default is 6 mm.
 * @param depthsearch Map to surface by looking for max along mm millimeter normal vectors. Default is 3 mm.
 * @param keep_temp_files Do not delete the intermediate files (for testing).
 * @param surfsmooth_method Heat method used for smoothing surfaces. Default is HEAT_07 but HEAT_05 is also useful for models.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VMeasureErosionThickOutputs`).
 */
function v__measure_erosion_thick(
    maskset: InputPathType,
    surfset: InputPathType,
    outdir: string | null = null,
    resample: string | null = null,
    surfsmooth: number | null = null,
    smoothmm: number | null = null,
    maxthick: number | null = null,
    depthsearch: number | null = null,
    keep_temp_files: boolean = false,
    surfsmooth_method: string | null = null,
    runner: Runner | null = null,
): VMeasureErosionThickOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__MEASURE_EROSION_THICK_METADATA);
    const params = v__measure_erosion_thick_params(maskset, surfset, outdir, resample, surfsmooth, smoothmm, maxthick, depthsearch, keep_temp_files, surfsmooth_method)
    return v__measure_erosion_thick_execute(params, execution);
}


export {
      VMeasureErosionThickOutputs,
      VMeasureErosionThickParameters,
      V__MEASURE_EROSION_THICK_METADATA,
      v__measure_erosion_thick,
      v__measure_erosion_thick_cargs,
      v__measure_erosion_thick_execute,
      v__measure_erosion_thick_outputs,
      v__measure_erosion_thick_params,
};
