// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TRAC_ALL_METADATA: Metadata = {
    id: "73a5f89795c73c559ddd404cdcdd1e92ea957a5a.boutiques",
    name: "trac-all",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TracAllParameters {
    "__STYXTYPE__": "trac-all";
    "config_file"?: InputPathType | null | undefined;
    "subject_name"?: string | null | undefined;
    "dicom_file"?: InputPathType | null | undefined;
    "assemble_measures": boolean;
    "no_pathway_priors": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "trac-all": trac_all_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "trac-all": trac_all_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `trac_all(...)`.
 *
 * @interface
 */
interface TracAllOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Default log file
     */
    default_log: OutputPathType;
    /**
     * Default command file
     */
    default_cmd: OutputPathType;
}


function trac_all_params(
    config_file: InputPathType | null = null,
    subject_name: string | null = null,
    dicom_file: InputPathType | null = null,
    assemble_measures: boolean = false,
    no_pathway_priors: boolean = false,
    help: boolean = false,
): TracAllParameters {
    /**
     * Build parameters.
    
     * @param config_file Configuration file to set analysis options (dmrirc file)
     * @param subject_name Subject name (if not defined in dmrirc)
     * @param dicom_file Input DWI DICOM (if not defined in dmrirc)
     * @param assemble_measures Assemble pathway measures from multiple subjects (step 4)
     * @param no_pathway_priors Skip pathway priors (step 1.6)
     * @param help Print full contents of help
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "trac-all" as const,
        "assemble_measures": assemble_measures,
        "no_pathway_priors": no_pathway_priors,
        "help": help,
    };
    if (config_file !== null) {
        params["config_file"] = config_file;
    }
    if (subject_name !== null) {
        params["subject_name"] = subject_name;
    }
    if (dicom_file !== null) {
        params["dicom_file"] = dicom_file;
    }
    return params;
}


function trac_all_cargs(
    params: TracAllParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("trac-all");
    if ((params["config_file"] ?? null) !== null) {
        cargs.push(
            "-c",
            execution.inputFile((params["config_file"] ?? null))
        );
    }
    if ((params["subject_name"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["subject_name"] ?? null)
        );
    }
    if ((params["dicom_file"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["dicom_file"] ?? null))
        );
    }
    if ((params["assemble_measures"] ?? null)) {
        cargs.push("-stat");
    }
    if ((params["no_pathway_priors"] ?? null)) {
        cargs.push("-noprior");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function trac_all_outputs(
    params: TracAllParameters,
    execution: Execution,
): TracAllOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TracAllOutputs = {
        root: execution.outputFile("."),
        default_log: execution.outputFile(["scripts/trac-all.log"].join('')),
        default_cmd: execution.outputFile(["scripts/trac-all.cmd"].join('')),
    };
    return ret;
}


function trac_all_execute(
    params: TracAllParameters,
    execution: Execution,
): TracAllOutputs {
    /**
     * Reconstruct white-matter pathways using an atlas of the underlying anatomy.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TracAllOutputs`).
     */
    params = execution.params(params)
    const cargs = trac_all_cargs(params, execution)
    const ret = trac_all_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function trac_all(
    config_file: InputPathType | null = null,
    subject_name: string | null = null,
    dicom_file: InputPathType | null = null,
    assemble_measures: boolean = false,
    no_pathway_priors: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): TracAllOutputs {
    /**
     * Reconstruct white-matter pathways using an atlas of the underlying anatomy.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param config_file Configuration file to set analysis options (dmrirc file)
     * @param subject_name Subject name (if not defined in dmrirc)
     * @param dicom_file Input DWI DICOM (if not defined in dmrirc)
     * @param assemble_measures Assemble pathway measures from multiple subjects (step 4)
     * @param no_pathway_priors Skip pathway priors (step 1.6)
     * @param help Print full contents of help
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TracAllOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TRAC_ALL_METADATA);
    const params = trac_all_params(config_file, subject_name, dicom_file, assemble_measures, no_pathway_priors, help)
    return trac_all_execute(params, execution);
}


export {
      TRAC_ALL_METADATA,
      TracAllOutputs,
      TracAllParameters,
      trac_all,
      trac_all_params,
};
