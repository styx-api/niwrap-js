// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_PVMAP_METADATA: Metadata = {
    id: "b74a0e29a3cca7e68ec694345e79805eec69c8a4.boutiques",
    name: "3dPVmap",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dPvmapParameters {
    "@type": "afni.3dPVmap";
    "prefix"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "automask": boolean;
    "inputdataset": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dPVmap": v_3d_pvmap_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dPVmap": v_3d_pvmap_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_pvmap(...)`.
 *
 * @interface
 */
interface V3dPvmapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output PVmap file
     */
    outbrik: OutputPathType | null;
    /**
     * Output PVmap header file
     */
    outhead: OutputPathType | null;
    /**
     * Principal component time series vectors
     */
    pc_vectors: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param inputdataset Input dataset (e.g., fred.nii)
 * @param prefix Output prefix for generated files
 * @param mask Mask dataset (e.g., brainmask.nii)
 * @param automask Automatically generate a mask from the input dataset
 *
 * @returns Parameter dictionary
 */
function v_3d_pvmap_params(
    inputdataset: InputPathType,
    prefix: string | null = null,
    mask: InputPathType | null = null,
    automask: boolean = false,
): V3dPvmapParameters {
    const params = {
        "@type": "afni.3dPVmap" as const,
        "automask": automask,
        "inputdataset": inputdataset,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_pvmap_cargs(
    params: V3dPvmapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dPVmap");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    cargs.push(execution.inputFile((params["inputdataset"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_pvmap_outputs(
    params: V3dPvmapParameters,
    execution: Execution,
): V3dPvmapOutputs {
    const ret: V3dPvmapOutputs = {
        root: execution.outputFile("."),
        outbrik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
        outhead: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        pc_vectors: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


/**
 * 3dPVmap
 *
 * Computes the first two principal component vectors of a time series dataset, then outputs the R-squared coefficient of each voxel time series with these first two components.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dPvmapOutputs`).
 */
function v_3d_pvmap_execute(
    params: V3dPvmapParameters,
    runner: Runner | null = null,
): V3dPvmapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_PVMAP_METADATA);
    params = execution.params(params)
    const cargs = v_3d_pvmap_cargs(params, execution)
    const ret = v_3d_pvmap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dPVmap
 *
 * Computes the first two principal component vectors of a time series dataset, then outputs the R-squared coefficient of each voxel time series with these first two components.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param inputdataset Input dataset (e.g., fred.nii)
 * @param prefix Output prefix for generated files
 * @param mask Mask dataset (e.g., brainmask.nii)
 * @param automask Automatically generate a mask from the input dataset
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dPvmapOutputs`).
 */
function v_3d_pvmap(
    inputdataset: InputPathType,
    prefix: string | null = null,
    mask: InputPathType | null = null,
    automask: boolean = false,
    runner: Runner | null = null,
): V3dPvmapOutputs {
    const params = v_3d_pvmap_params(inputdataset, prefix, mask, automask)
    return v_3d_pvmap_execute(params, runner);
}


export {
      V3dPvmapOutputs,
      V3dPvmapParameters,
      V_3D_PVMAP_METADATA,
      v_3d_pvmap,
      v_3d_pvmap_execute,
      v_3d_pvmap_params,
};
