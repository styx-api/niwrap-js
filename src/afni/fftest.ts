// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FFTEST_METADATA: Metadata = {
    id: "1928ae0343683e1c41b9b191dc62899dbf26932f.boutiques",
    name: "fftest",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FftestParameters {
    "@type": "afni.fftest";
    "length": number;
    "num_tests": number;
    "vector_size": number;
    "quiet_mode": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fftest": fftest_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fftest(...)`.
 *
 * @interface
 */
interface FftestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param length Length of the test
 * @param num_tests Number of tests to run
 * @param vector_size Vector size for the test
 * @param quiet_mode Quiet mode
 *
 * @returns Parameter dictionary
 */
function fftest_params(
    length: number,
    num_tests: number,
    vector_size: number,
    quiet_mode: boolean = false,
): FftestParameters {
    const params = {
        "@type": "afni.fftest" as const,
        "length": length,
        "num_tests": num_tests,
        "vector_size": vector_size,
        "quiet_mode": quiet_mode,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fftest_cargs(
    params: FftestParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fftest");
    cargs.push(String((params["length"] ?? null)));
    cargs.push(String((params["num_tests"] ?? null)));
    cargs.push(String((params["vector_size"] ?? null)));
    if ((params["quiet_mode"] ?? null)) {
        cargs.push("-q");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fftest_outputs(
    params: FftestParameters,
    execution: Execution,
): FftestOutputs {
    const ret: FftestOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * fftest
 *
 * A command line tool for testing purposes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FftestOutputs`).
 */
function fftest_execute(
    params: FftestParameters,
    runner: Runner | null = null,
): FftestOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FFTEST_METADATA);
    params = execution.params(params)
    const cargs = fftest_cargs(params, execution)
    const ret = fftest_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fftest
 *
 * A command line tool for testing purposes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param length Length of the test
 * @param num_tests Number of tests to run
 * @param vector_size Vector size for the test
 * @param quiet_mode Quiet mode
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FftestOutputs`).
 */
function fftest(
    length: number,
    num_tests: number,
    vector_size: number,
    quiet_mode: boolean = false,
    runner: Runner | null = null,
): FftestOutputs {
    const params = fftest_params(length, num_tests, vector_size, quiet_mode)
    return fftest_execute(params, runner);
}


export {
      FFTEST_METADATA,
      FftestOutputs,
      FftestParameters,
      fftest,
      fftest_execute,
      fftest_params,
};
