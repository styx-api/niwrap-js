// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_INTERPOLATE_WARP_METADATA: Metadata = {
    id: "4c3b574c8d475695ef29da0c89214dc574282c1e.boutiques",
    name: "mris_interpolate_warp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisInterpolateWarpParameters {
    "__STYXTYPE__": "mris_interpolate_warp";
    "start_surface": InputPathType;
    "end_surface": InputPathType;
    "warp_field": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_interpolate_warp": mris_interpolate_warp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_interpolate_warp(...)`.
 *
 * @interface
 */
interface MrisInterpolateWarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_interpolate_warp_params(
    start_surface: InputPathType,
    end_surface: InputPathType,
    warp_field: InputPathType,
): MrisInterpolateWarpParameters {
    /**
     * Build parameters.
    
     * @param start_surface The starting surface file.
     * @param end_surface The ending surface file.
     * @param warp_field The warp field file with .m3z extension.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_interpolate_warp" as const,
        "start_surface": start_surface,
        "end_surface": end_surface,
        "warp_field": warp_field,
    };
    return params;
}


function mris_interpolate_warp_cargs(
    params: MrisInterpolateWarpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_interpolate_warp");
    cargs.push(execution.inputFile((params["start_surface"] ?? null)));
    cargs.push(execution.inputFile((params["end_surface"] ?? null)));
    cargs.push(execution.inputFile((params["warp_field"] ?? null)));
    return cargs;
}


function mris_interpolate_warp_outputs(
    params: MrisInterpolateWarpParameters,
    execution: Execution,
): MrisInterpolateWarpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisInterpolateWarpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_interpolate_warp_execute(
    params: MrisInterpolateWarpParameters,
    execution: Execution,
): MrisInterpolateWarpOutputs {
    /**
     * Interpolate warp on cortical surfaces.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisInterpolateWarpOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_interpolate_warp_cargs(params, execution)
    const ret = mris_interpolate_warp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_interpolate_warp(
    start_surface: InputPathType,
    end_surface: InputPathType,
    warp_field: InputPathType,
    runner: Runner | null = null,
): MrisInterpolateWarpOutputs {
    /**
     * Interpolate warp on cortical surfaces.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param start_surface The starting surface file.
     * @param end_surface The ending surface file.
     * @param warp_field The warp field file with .m3z extension.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisInterpolateWarpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_INTERPOLATE_WARP_METADATA);
    const params = mris_interpolate_warp_params(start_surface, end_surface, warp_field)
    return mris_interpolate_warp_execute(params, execution);
}


export {
      MRIS_INTERPOLATE_WARP_METADATA,
      MrisInterpolateWarpOutputs,
      MrisInterpolateWarpParameters,
      mris_interpolate_warp,
      mris_interpolate_warp_params,
};
