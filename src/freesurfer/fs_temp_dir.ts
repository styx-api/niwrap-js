// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FS_TEMP_DIR_METADATA: Metadata = {
    id: "527e55a39dc28f0c9acdbccf0047fb17ab363432.boutiques",
    name: "fs_temp_dir",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsTempDirParameters {
    "@type": "freesurfer.fs_temp_dir";
    "base_directory"?: string | null | undefined;
    "scratch": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fs_temp_dir": fs_temp_dir_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.fs_temp_dir": fs_temp_dir_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fs_temp_dir(...)`.
 *
 * @interface
 */
interface FsTempDirOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The created temporary directory path
     */
    output_directory: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param base_directory Manually specify base temporary directory.
 * @param scratch Use /scratch directory if available, but FS_TMPDIR takes priority.
 *
 * @returns Parameter dictionary
 */
function fs_temp_dir_params(
    base_directory: string | null = null,
    scratch: boolean = false,
): FsTempDirParameters {
    const params = {
        "@type": "freesurfer.fs_temp_dir" as const,
        "scratch": scratch,
    };
    if (base_directory !== null) {
        params["base_directory"] = base_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fs_temp_dir_cargs(
    params: FsTempDirParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fs_temp_dir");
    if ((params["base_directory"] ?? null) !== null) {
        cargs.push(
            "-b",
            (params["base_directory"] ?? null)
        );
    }
    if ((params["scratch"] ?? null)) {
        cargs.push("--scratch");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fs_temp_dir_outputs(
    params: FsTempDirParameters,
    execution: Execution,
): FsTempDirOutputs {
    const ret: FsTempDirOutputs = {
        root: execution.outputFile("."),
        output_directory: execution.outputFile(["/tmp/tmp.SF5J66"].join('')),
    };
    return ret;
}


/**
 * fs_temp_dir
 *
 * Generates and creates an empty temporary directory.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsTempDirOutputs`).
 */
function fs_temp_dir_execute(
    params: FsTempDirParameters,
    runner: Runner | null = null,
): FsTempDirOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FS_TEMP_DIR_METADATA);
    params = execution.params(params)
    const cargs = fs_temp_dir_cargs(params, execution)
    const ret = fs_temp_dir_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fs_temp_dir
 *
 * Generates and creates an empty temporary directory.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param base_directory Manually specify base temporary directory.
 * @param scratch Use /scratch directory if available, but FS_TMPDIR takes priority.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsTempDirOutputs`).
 */
function fs_temp_dir(
    base_directory: string | null = null,
    scratch: boolean = false,
    runner: Runner | null = null,
): FsTempDirOutputs {
    const params = fs_temp_dir_params(base_directory, scratch)
    return fs_temp_dir_execute(params, runner);
}


export {
      FS_TEMP_DIR_METADATA,
      FsTempDirOutputs,
      FsTempDirParameters,
      fs_temp_dir,
      fs_temp_dir_execute,
      fs_temp_dir_params,
};
