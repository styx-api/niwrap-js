// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_JOINT_LABEL_FUSION_SH_METADATA: Metadata = {
    id: "247a29d0e6dd59cbbad0a89af0ca5b7e052f7e73.boutiques",
    name: "antsJointLabelFusion.sh",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsJointLabelFusionShParameters {
    "@type": "ants.antsJointLabelFusion.sh";
    "dimensionality"?: 2 | 3 | null | undefined;
    "output"?: string | null | undefined;
    "atlas_image_mrf"?: string | null | undefined;
    "atlas_segmentation_mrf"?: string | null | undefined;
    "rigid_transform"?: string | null | undefined;
    "similarity_metric"?: string | null | undefined;
    "other_options"?: string | null | undefined;
    "verbose"?: 0 | 1 | null | undefined;
    "target_image": string;
    "mask_image": string;
    "rigid_transform_additional_options"?: string | null | undefined;
    "similarity_metric_additional_options"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.antsJointLabelFusion.sh": ants_joint_label_fusion_sh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.antsJointLabelFusion.sh": ants_joint_label_fusion_sh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_joint_label_fusion_sh(...)`.
 *
 * @interface
 */
interface AntsJointLabelFusionShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output segmented image.
     */
    segmentation_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param target_image Image to segment.
 * @param mask_image Mask image.
 * @param dimensionality Image dimensionality (2 or 3).
 * @param output Root directory for the output segmentation.
 * @param atlas_image_mrf Atlas image(s) to be used for MRF initialization.
 * @param atlas_segmentation_mrf Atlas segmentation(s) to be used for MRF initialization.
 * @param rigid_transform Rigid transform initialization.
 * @param similarity_metric Metric used for calculating similarity.
 * @param other_options Additional options for label fusion.
 * @param verbose Verbose output.
 * @param rigid_transform_additional_options Additional options for rigid transform.
 * @param similarity_metric_additional_options Additional options for similarity metric.
 *
 * @returns Parameter dictionary
 */
function ants_joint_label_fusion_sh_params(
    target_image: string,
    mask_image: string,
    dimensionality: 2 | 3 | null = null,
    output: string | null = null,
    atlas_image_mrf: string | null = null,
    atlas_segmentation_mrf: string | null = null,
    rigid_transform: string | null = null,
    similarity_metric: string | null = null,
    other_options: string | null = null,
    verbose: 0 | 1 | null = null,
    rigid_transform_additional_options: string | null = null,
    similarity_metric_additional_options: string | null = null,
): AntsJointLabelFusionShParameters {
    const params = {
        "@type": "ants.antsJointLabelFusion.sh" as const,
        "target_image": target_image,
        "mask_image": mask_image,
    };
    if (dimensionality !== null) {
        params["dimensionality"] = dimensionality;
    }
    if (output !== null) {
        params["output"] = output;
    }
    if (atlas_image_mrf !== null) {
        params["atlas_image_mrf"] = atlas_image_mrf;
    }
    if (atlas_segmentation_mrf !== null) {
        params["atlas_segmentation_mrf"] = atlas_segmentation_mrf;
    }
    if (rigid_transform !== null) {
        params["rigid_transform"] = rigid_transform;
    }
    if (similarity_metric !== null) {
        params["similarity_metric"] = similarity_metric;
    }
    if (other_options !== null) {
        params["other_options"] = other_options;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    if (rigid_transform_additional_options !== null) {
        params["rigid_transform_additional_options"] = rigid_transform_additional_options;
    }
    if (similarity_metric_additional_options !== null) {
        params["similarity_metric_additional_options"] = similarity_metric_additional_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_joint_label_fusion_sh_cargs(
    params: AntsJointLabelFusionShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsJointLabelFusion.sh");
    if ((params["dimensionality"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["dimensionality"] ?? null))
        );
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output"] ?? null)
        );
    }
    if ((params["atlas_image_mrf"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["atlas_image_mrf"] ?? null)
        );
    }
    if ((params["atlas_segmentation_mrf"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["atlas_segmentation_mrf"] ?? null)
        );
    }
    if ((params["rigid_transform"] ?? null) !== null) {
        cargs.push(
            "-g",
            (params["rigid_transform"] ?? null)
        );
    }
    if ((params["similarity_metric"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["similarity_metric"] ?? null)
        );
    }
    if ((params["other_options"] ?? null) !== null) {
        cargs.push(
            "-k",
            (params["other_options"] ?? null)
        );
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["verbose"] ?? null))
        );
    }
    cargs.push(
        "-i",
        (params["target_image"] ?? null)
    );
    cargs.push(
        "-m",
        (params["mask_image"] ?? null)
    );
    if ((params["rigid_transform_additional_options"] ?? null) !== null) {
        cargs.push(
            "-g",
            (params["rigid_transform_additional_options"] ?? null)
        );
    }
    if ((params["similarity_metric_additional_options"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["similarity_metric_additional_options"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_joint_label_fusion_sh_outputs(
    params: AntsJointLabelFusionShParameters,
    execution: Execution,
): AntsJointLabelFusionShOutputs {
    const ret: AntsJointLabelFusionShOutputs = {
        root: execution.outputFile("."),
        segmentation_output: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * antsJointLabelFusion.sh
 *
 * The antsJointLabelFusion script is used for performing label fusion using multiple atlases to improve segmentation accuracy.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsJointLabelFusionShOutputs`).
 */
function ants_joint_label_fusion_sh_execute(
    params: AntsJointLabelFusionShParameters,
    runner: Runner | null = null,
): AntsJointLabelFusionShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_JOINT_LABEL_FUSION_SH_METADATA);
    params = execution.params(params)
    const cargs = ants_joint_label_fusion_sh_cargs(params, execution)
    const ret = ants_joint_label_fusion_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * antsJointLabelFusion.sh
 *
 * The antsJointLabelFusion script is used for performing label fusion using multiple atlases to improve segmentation accuracy.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param target_image Image to segment.
 * @param mask_image Mask image.
 * @param dimensionality Image dimensionality (2 or 3).
 * @param output Root directory for the output segmentation.
 * @param atlas_image_mrf Atlas image(s) to be used for MRF initialization.
 * @param atlas_segmentation_mrf Atlas segmentation(s) to be used for MRF initialization.
 * @param rigid_transform Rigid transform initialization.
 * @param similarity_metric Metric used for calculating similarity.
 * @param other_options Additional options for label fusion.
 * @param verbose Verbose output.
 * @param rigid_transform_additional_options Additional options for rigid transform.
 * @param similarity_metric_additional_options Additional options for similarity metric.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsJointLabelFusionShOutputs`).
 */
function ants_joint_label_fusion_sh(
    target_image: string,
    mask_image: string,
    dimensionality: 2 | 3 | null = null,
    output: string | null = null,
    atlas_image_mrf: string | null = null,
    atlas_segmentation_mrf: string | null = null,
    rigid_transform: string | null = null,
    similarity_metric: string | null = null,
    other_options: string | null = null,
    verbose: 0 | 1 | null = null,
    rigid_transform_additional_options: string | null = null,
    similarity_metric_additional_options: string | null = null,
    runner: Runner | null = null,
): AntsJointLabelFusionShOutputs {
    const params = ants_joint_label_fusion_sh_params(target_image, mask_image, dimensionality, output, atlas_image_mrf, atlas_segmentation_mrf, rigid_transform, similarity_metric, other_options, verbose, rigid_transform_additional_options, similarity_metric_additional_options)
    return ants_joint_label_fusion_sh_execute(params, runner);
}


export {
      ANTS_JOINT_LABEL_FUSION_SH_METADATA,
      AntsJointLabelFusionShOutputs,
      AntsJointLabelFusionShParameters,
      ants_joint_label_fusion_sh,
      ants_joint_label_fusion_sh_execute,
      ants_joint_label_fusion_sh_params,
};
