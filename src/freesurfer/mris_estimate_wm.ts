// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_ESTIMATE_WM_METADATA: Metadata = {
    id: "a6424f146242a7603bdb2652648f72e0fc5f3a7d.boutiques",
    name: "mris_estimate_wm",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisEstimateWmParameters {
    "@type"?: "freesurfer/mris_estimate_wm";
    "subjs": Array<string>;
    "hemi": string;
    "sdir"?: string | null | undefined;
    "model"?: string | null | undefined;
    "suffix"?: string | null | undefined;
    "gpu": boolean;
    "rsi": boolean;
    "single_iter": boolean;
    "vol"?: string | null | undefined;
}
type MrisEstimateWmParametersTagged = Required<Pick<MrisEstimateWmParameters, '@type'>> & MrisEstimateWmParameters;


/**
 * Output object returned when calling `MrisEstimateWmParameters(...)`.
 *
 * @interface
 */
interface MrisEstimateWmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjs List of subjects to process.
 * @param hemi Hemisphere to reconstruct (lh or rh).
 * @param sdir Override SUBJECTS_DIR.
 * @param model Override default model.
 * @param suffix Suffix of output surface (default is 'topofit').
 * @param gpu Use the GPU.
 * @param rsi Remove self-intersecting faces during the deformation.
 * @param single_iter Prevent deformation steps from running more than once.
 * @param vol Subject volume to use as input.
 *
 * @returns Parameter dictionary
 */
function mris_estimate_wm_params(
    subjs: Array<string>,
    hemi: string,
    sdir: string | null = null,
    model: string | null = null,
    suffix: string | null = null,
    gpu: boolean = false,
    rsi: boolean = false,
    single_iter: boolean = false,
    vol: string | null = null,
): MrisEstimateWmParametersTagged {
    const params = {
        "@type": "freesurfer/mris_estimate_wm" as const,
        "subjs": subjs,
        "hemi": hemi,
        "gpu": gpu,
        "rsi": rsi,
        "single_iter": single_iter,
    };
    if (sdir !== null) {
        params["sdir"] = sdir;
    }
    if (model !== null) {
        params["model"] = model;
    }
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    if (vol !== null) {
        params["vol"] = vol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_estimate_wm_cargs(
    params: MrisEstimateWmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_estimate_wm");
    cargs.push(
        "-s",
        ...(params["subjs"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemi"] ?? null)
    );
    if ((params["sdir"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["sdir"] ?? null)
        );
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["model"] ?? null)
        );
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["suffix"] ?? null)
        );
    }
    if ((params["gpu"] ?? false)) {
        cargs.push("-g");
    }
    if ((params["rsi"] ?? false)) {
        cargs.push("--rsi");
    }
    if ((params["single_iter"] ?? false)) {
        cargs.push("--single-iter");
    }
    if ((params["vol"] ?? null) !== null) {
        cargs.push(
            "--vol",
            (params["vol"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_estimate_wm_outputs(
    params: MrisEstimateWmParameters,
    execution: Execution,
): MrisEstimateWmOutputs {
    const ret: MrisEstimateWmOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_estimate_wm
 *
 * Tool to estimate white matter surfaces using MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisEstimateWmOutputs`).
 */
function mris_estimate_wm_execute(
    params: MrisEstimateWmParameters,
    runner: Runner | null = null,
): MrisEstimateWmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_ESTIMATE_WM_METADATA);
    params = execution.params(params)
    const cargs = mris_estimate_wm_cargs(params, execution)
    const ret = mris_estimate_wm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_estimate_wm
 *
 * Tool to estimate white matter surfaces using MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjs List of subjects to process.
 * @param hemi Hemisphere to reconstruct (lh or rh).
 * @param sdir Override SUBJECTS_DIR.
 * @param model Override default model.
 * @param suffix Suffix of output surface (default is 'topofit').
 * @param gpu Use the GPU.
 * @param rsi Remove self-intersecting faces during the deformation.
 * @param single_iter Prevent deformation steps from running more than once.
 * @param vol Subject volume to use as input.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisEstimateWmOutputs`).
 */
function mris_estimate_wm(
    subjs: Array<string>,
    hemi: string,
    sdir: string | null = null,
    model: string | null = null,
    suffix: string | null = null,
    gpu: boolean = false,
    rsi: boolean = false,
    single_iter: boolean = false,
    vol: string | null = null,
    runner: Runner | null = null,
): MrisEstimateWmOutputs {
    const params = mris_estimate_wm_params(subjs, hemi, sdir, model, suffix, gpu, rsi, single_iter, vol)
    return mris_estimate_wm_execute(params, runner);
}


export {
      MRIS_ESTIMATE_WM_METADATA,
      MrisEstimateWmOutputs,
      mris_estimate_wm,
      mris_estimate_wm_execute,
      mris_estimate_wm_params,
};
