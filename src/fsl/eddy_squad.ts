// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EDDY_SQUAD_METADATA: Metadata = {
    id: "4f05bda157802874f7b91635ee4f20986d081e7f.boutiques",
    name: "eddy_squad",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface EddySquadParameters {
    "__STYXTYPE__": "eddy_squad";
    "grouping"?: string | null | undefined;
    "group_db"?: InputPathType | null | undefined;
    "update": boolean;
    "output_dir"?: string | null | undefined;
    "subject_list": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "eddy_squad": eddy_squad_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "eddy_squad": eddy_squad_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `eddy_squad(...)`.
 *
 * @interface
 */
interface EddySquadOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * QC results in JSON format
     */
    qc_results: OutputPathType | null;
}


function eddy_squad_params(
    subject_list: string,
    grouping: string | null = null,
    group_db: InputPathType | null = null,
    update: boolean = false,
    output_dir: string | null = null,
): EddySquadParameters {
    /**
     * Build parameters.
    
     * @param subject_list List of subject IDs for the QC.
     * @param grouping Specifies the grouping of studies.
     * @param group_db Path to the group database.
     * @param update Option to update the QC results.
     * @param output_dir Output directory for the QC results.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "eddy_squad" as const,
        "update": update,
        "subject_list": subject_list,
    };
    if (grouping !== null) {
        params["grouping"] = grouping;
    }
    if (group_db !== null) {
        params["group_db"] = group_db;
    }
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    return params;
}


function eddy_squad_cargs(
    params: EddySquadParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("eddy_squad");
    if ((params["grouping"] ?? null) !== null) {
        cargs.push(
            "-g",
            (params["grouping"] ?? null)
        );
    }
    if ((params["group_db"] ?? null) !== null) {
        cargs.push(
            "-gdb",
            execution.inputFile((params["group_db"] ?? null))
        );
    }
    if ((params["update"] ?? null)) {
        cargs.push("-u");
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_dir"] ?? null)
        );
    }
    cargs.push((params["subject_list"] ?? null));
    return cargs;
}


function eddy_squad_outputs(
    params: EddySquadParameters,
    execution: Execution,
): EddySquadOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: EddySquadOutputs = {
        root: execution.outputFile("."),
        qc_results: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/qc_results.json"].join('')) : null,
    };
    return ret;
}


function eddy_squad_execute(
    params: EddySquadParameters,
    execution: Execution,
): EddySquadOutputs {
    /**
     * Study-wise QC for dMRI data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `EddySquadOutputs`).
     */
    params = execution.params(params)
    const cargs = eddy_squad_cargs(params, execution)
    const ret = eddy_squad_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function eddy_squad(
    subject_list: string,
    grouping: string | null = null,
    group_db: InputPathType | null = null,
    update: boolean = false,
    output_dir: string | null = null,
    runner: Runner | null = null,
): EddySquadOutputs {
    /**
     * Study-wise QC for dMRI data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param subject_list List of subject IDs for the QC.
     * @param grouping Specifies the grouping of studies.
     * @param group_db Path to the group database.
     * @param update Option to update the QC results.
     * @param output_dir Output directory for the QC results.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `EddySquadOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EDDY_SQUAD_METADATA);
    const params = eddy_squad_params(subject_list, grouping, group_db, update, output_dir)
    return eddy_squad_execute(params, execution);
}


export {
      EDDY_SQUAD_METADATA,
      EddySquadOutputs,
      EddySquadParameters,
      eddy_squad,
      eddy_squad_params,
};
