// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_MAT_TABLEIZE_METADATA: Metadata = {
    id: "5ba44998c47e95e162b9d566a509d5fcbb197e51.boutiques",
    name: "fat_mat_tableize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatMatTableizeParameters {
    "__STYXTYPE__": "fat_mat_tableize";
    "input_matrices": Array<string>;
    "input_csv"?: InputPathType | null | undefined;
    "input_list"?: InputPathType | null | undefined;
    "output_prefix": string;
    "parameters"?: Array<string> | null | undefined;
    "version": boolean;
    "date": boolean;
    "help": boolean;
    "help_short": boolean;
    "help_view": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fat_mat_tableize": fat_mat_tableize_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fat_mat_tableize": fat_mat_tableize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_mat_tableize(...)`.
 *
 * @interface
 */
interface FatMatTableizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Table file usable in AFNI group analysis programs.
     */
    output_table: OutputPathType;
    /**
     * Log file reporting inputs, matching, and aspects of creating the table file.
     */
    output_log: OutputPathType;
}


function fat_mat_tableize_params(
    input_matrices: Array<string>,
    output_prefix: string,
    input_csv: InputPathType | null = null,
    input_list: InputPathType | null = null,
    parameters: Array<string> | null = null,
    version: boolean = false,
    date: boolean = false,
    help: boolean = false,
    help_short: boolean = false,
    help_view: boolean = false,
): FatMatTableizeParameters {
    /**
     * Build parameters.
    
     * @param input_matrices Names of *.netcc or *.grid files with matrices to be used to make table; can be provided using wildcard chars.
     * @param output_prefix Output basename for the table and log files. Suffix and file extensions will be added for the outputs.
     * @param input_csv Name of a CSV file to include in the table. The first column must have subject ID labels that match with the input matrix files.
     * @param input_list File containing paths to subject matrices and optionally CSV IDs for matching.
     * @param parameters List of matrices to be included in the table, identified by their parameter name.
     * @param version Display current version.
     * @param date Display release/editing date of current version.
     * @param help Display help in terminal.
     * @param help_short Display help in terminal (short flag).
     * @param help_view Display help in a separate text editor.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fat_mat_tableize" as const,
        "input_matrices": input_matrices,
        "output_prefix": output_prefix,
        "version": version,
        "date": date,
        "help": help,
        "help_short": help_short,
        "help_view": help_view,
    };
    if (input_csv !== null) {
        params["input_csv"] = input_csv;
    }
    if (input_list !== null) {
        params["input_list"] = input_list;
    }
    if (parameters !== null) {
        params["parameters"] = parameters;
    }
    return params;
}


function fat_mat_tableize_cargs(
    params: FatMatTableizeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fat_mat_tableize.py");
    cargs.push(
        "-in_mat",
        ...(params["input_matrices"] ?? null)
    );
    if ((params["input_csv"] ?? null) !== null) {
        cargs.push(
            "-in_csv",
            execution.inputFile((params["input_csv"] ?? null))
        );
    }
    if ((params["input_list"] ?? null) !== null) {
        cargs.push(
            "-in_listfile",
            execution.inputFile((params["input_list"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["parameters"] ?? null) !== null) {
        cargs.push(
            "-pars",
            ...(params["parameters"] ?? null)
        );
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    if ((params["date"] ?? null)) {
        cargs.push("-date");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["help_short"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["help_view"] ?? null)) {
        cargs.push("-hview");
    }
    return cargs;
}


function fat_mat_tableize_outputs(
    params: FatMatTableizeParameters,
    execution: Execution,
): FatMatTableizeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FatMatTableizeOutputs = {
        root: execution.outputFile("."),
        output_table: execution.outputFile([(params["output_prefix"] ?? null), "_tbl.txt"].join('')),
        output_log: execution.outputFile([(params["output_prefix"] ?? null), "_prep.log"].join('')),
    };
    return ret;
}


function fat_mat_tableize_execute(
    params: FatMatTableizeParameters,
    execution: Execution,
): FatMatTableizeOutputs {
    /**
     * Make tables for AFNI group analysis programs from 3dNetCorr (*.netcc) and 3dTrackID (*.grid) outputs, with optional additional subject information from CSV files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FatMatTableizeOutputs`).
     */
    params = execution.params(params)
    const cargs = fat_mat_tableize_cargs(params, execution)
    const ret = fat_mat_tableize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fat_mat_tableize(
    input_matrices: Array<string>,
    output_prefix: string,
    input_csv: InputPathType | null = null,
    input_list: InputPathType | null = null,
    parameters: Array<string> | null = null,
    version: boolean = false,
    date: boolean = false,
    help: boolean = false,
    help_short: boolean = false,
    help_view: boolean = false,
    runner: Runner | null = null,
): FatMatTableizeOutputs {
    /**
     * Make tables for AFNI group analysis programs from 3dNetCorr (*.netcc) and 3dTrackID (*.grid) outputs, with optional additional subject information from CSV files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_matrices Names of *.netcc or *.grid files with matrices to be used to make table; can be provided using wildcard chars.
     * @param output_prefix Output basename for the table and log files. Suffix and file extensions will be added for the outputs.
     * @param input_csv Name of a CSV file to include in the table. The first column must have subject ID labels that match with the input matrix files.
     * @param input_list File containing paths to subject matrices and optionally CSV IDs for matching.
     * @param parameters List of matrices to be included in the table, identified by their parameter name.
     * @param version Display current version.
     * @param date Display release/editing date of current version.
     * @param help Display help in terminal.
     * @param help_short Display help in terminal (short flag).
     * @param help_view Display help in a separate text editor.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FatMatTableizeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_MAT_TABLEIZE_METADATA);
    const params = fat_mat_tableize_params(input_matrices, output_prefix, input_csv, input_list, parameters, version, date, help, help_short, help_view)
    return fat_mat_tableize_execute(params, execution);
}


export {
      FAT_MAT_TABLEIZE_METADATA,
      FatMatTableizeOutputs,
      FatMatTableizeParameters,
      fat_mat_tableize,
      fat_mat_tableize_params,
};
