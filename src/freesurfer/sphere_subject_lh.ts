// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPHERE_SUBJECT_LH_METADATA: Metadata = {
    id: "ff268b28a43fc5b537953764154fa43ebab2c033.boutiques",
    name: "sphere_subject-lh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SphereSubjectLhParameters {
    "__STYXTYPE__": "sphere_subject-lh";
    "license_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sphere_subject-lh": sphere_subject_lh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sphere_subject_lh(...)`.
 *
 * @interface
 */
interface SphereSubjectLhOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function sphere_subject_lh_params(
    license_file: InputPathType,
): SphereSubjectLhParameters {
    /**
     * Build parameters.
    
     * @param license_file Path to the FreeSurfer license file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sphere_subject-lh" as const,
        "license_file": license_file,
    };
    return params;
}


function sphere_subject_lh_cargs(
    params: SphereSubjectLhParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sphere_subject-lh");
    cargs.push(
        "-lh",
        execution.inputFile((params["license_file"] ?? null))
    );
    return cargs;
}


function sphere_subject_lh_outputs(
    params: SphereSubjectLhParameters,
    execution: Execution,
): SphereSubjectLhOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SphereSubjectLhOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function sphere_subject_lh_execute(
    params: SphereSubjectLhParameters,
    execution: Execution,
): SphereSubjectLhOutputs {
    /**
     * Tool for processing spherical representations in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SphereSubjectLhOutputs`).
     */
    params = execution.params(params)
    const cargs = sphere_subject_lh_cargs(params, execution)
    const ret = sphere_subject_lh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sphere_subject_lh(
    license_file: InputPathType,
    runner: Runner | null = null,
): SphereSubjectLhOutputs {
    /**
     * Tool for processing spherical representations in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param license_file Path to the FreeSurfer license file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SphereSubjectLhOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPHERE_SUBJECT_LH_METADATA);
    const params = sphere_subject_lh_params(license_file)
    return sphere_subject_lh_execute(params, execution);
}


export {
      SPHERE_SUBJECT_LH_METADATA,
      SphereSubjectLhOutputs,
      SphereSubjectLhParameters,
      sphere_subject_lh,
      sphere_subject_lh_params,
};
