// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MOTION_CORRECT2_METADATA: Metadata = {
    id: "fe7d6aa6909c6c6427395fe290915359fd71bc6d.boutiques",
    name: "mri_motion_correct2",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMotionCorrect2Parameters {
    "__STYXTYPE__": "mri_motion_correct2";
    "output_spec": string;
    "input_files": Array<InputPathType>;
    "target"?: InputPathType | null | undefined;
    "wild": boolean;
    "tmp_dir"?: string | null | undefined;
    "nocleanup": boolean;
    "umask"?: string | null | undefined;
    "cm": boolean;
    "version": boolean;
    "debug": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_motion_correct2": mri_motion_correct2_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_motion_correct2": mri_motion_correct2_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_motion_correct2(...)`.
 *
 * @interface
 */
interface MriMotionCorrect2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The aligned and averaged output file or directory
     */
    output_file: OutputPathType;
}


function mri_motion_correct2_params(
    output_spec: string,
    input_files: Array<InputPathType>,
    target: InputPathType | null = null,
    wild: boolean = false,
    tmp_dir: string | null = null,
    nocleanup: boolean = false,
    umask: string | null = null,
    cm: boolean = false,
    version: boolean = false,
    debug: boolean = false,
): MriMotionCorrect2Parameters {
    /**
     * Build parameters.
    
     * @param output_spec Output file or directory (for COR format)
     * @param input_files Input volume files, specified multiple times for multiple files
     * @param target Use the specified target instead of the first input file
     * @param wild Assume unmatched arguments are input files
     * @param tmp_dir Directory for temporary files
     * @param nocleanup Do not delete temporary files
     * @param umask Set UNIX file permission mask
     * @param cm Make COR volumes conform to minimum voxel size
     * @param version Print version information and exit
     * @param debug Print detailed debug information to screen
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_motion_correct2" as const,
        "output_spec": output_spec,
        "input_files": input_files,
        "wild": wild,
        "nocleanup": nocleanup,
        "cm": cm,
        "version": version,
        "debug": debug,
    };
    if (target !== null) {
        params["target"] = target;
    }
    if (tmp_dir !== null) {
        params["tmp_dir"] = tmp_dir;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    return params;
}


function mri_motion_correct2_cargs(
    params: MriMotionCorrect2Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_motion_correct2");
    cargs.push(
        "-o",
        (params["output_spec"] ?? null)
    );
    cargs.push(
        "-i",
        ...(params["input_files"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["target"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["target"] ?? null))
        );
    }
    if ((params["wild"] ?? null)) {
        cargs.push("-wild");
    }
    if ((params["tmp_dir"] ?? null) !== null) {
        cargs.push(
            "-tmpdir",
            (params["tmp_dir"] ?? null)
        );
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("-nocleanup");
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    if ((params["cm"] ?? null)) {
        cargs.push("-cm");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    return cargs;
}


function mri_motion_correct2_outputs(
    params: MriMotionCorrect2Parameters,
    execution: Execution,
): MriMotionCorrect2Outputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriMotionCorrect2Outputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_spec"] ?? null)].join('')),
    };
    return ret;
}


function mri_motion_correct2_execute(
    params: MriMotionCorrect2Parameters,
    execution: Execution,
): MriMotionCorrect2Outputs {
    /**
     * Aligns and averages two or more volumes using minctracc for alignment and mincresample and mincaverage for resampling.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriMotionCorrect2Outputs`).
     */
    params = execution.params(params)
    const cargs = mri_motion_correct2_cargs(params, execution)
    const ret = mri_motion_correct2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_motion_correct2(
    output_spec: string,
    input_files: Array<InputPathType>,
    target: InputPathType | null = null,
    wild: boolean = false,
    tmp_dir: string | null = null,
    nocleanup: boolean = false,
    umask: string | null = null,
    cm: boolean = false,
    version: boolean = false,
    debug: boolean = false,
    runner: Runner | null = null,
): MriMotionCorrect2Outputs {
    /**
     * Aligns and averages two or more volumes using minctracc for alignment and mincresample and mincaverage for resampling.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param output_spec Output file or directory (for COR format)
     * @param input_files Input volume files, specified multiple times for multiple files
     * @param target Use the specified target instead of the first input file
     * @param wild Assume unmatched arguments are input files
     * @param tmp_dir Directory for temporary files
     * @param nocleanup Do not delete temporary files
     * @param umask Set UNIX file permission mask
     * @param cm Make COR volumes conform to minimum voxel size
     * @param version Print version information and exit
     * @param debug Print detailed debug information to screen
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriMotionCorrect2Outputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MOTION_CORRECT2_METADATA);
    const params = mri_motion_correct2_params(output_spec, input_files, target, wild, tmp_dir, nocleanup, umask, cm, version, debug)
    return mri_motion_correct2_execute(params, execution);
}


export {
      MRI_MOTION_CORRECT2_METADATA,
      MriMotionCorrect2Outputs,
      MriMotionCorrect2Parameters,
      mri_motion_correct2,
      mri_motion_correct2_params,
};
