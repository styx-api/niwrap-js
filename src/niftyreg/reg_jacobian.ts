// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REG_JACOBIAN_METADATA: Metadata = {
    id: "1c05af5eba8a7142fcbd9676a3674db015836fd8.boutiques",
    name: "reg_jacobian",
    package: "niftyreg",
    container_image_tag: "vnmd/niftyreg_1.4.0:20220819",
};


interface RegJacobianParameters {
    "__STYXTYPE__": "reg_jacobian";
    "reference_image": InputPathType;
    "deformation_field"?: InputPathType | null | undefined;
    "control_point_lattice"?: InputPathType | null | undefined;
    "output_jacobian"?: string | null | undefined;
    "output_jacobian_matrix"?: string | null | undefined;
    "output_log_jacobian"?: string | null | undefined;
    "affine_matrix"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "reg_jacobian": reg_jacobian_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "reg_jacobian": reg_jacobian_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `reg_jacobian(...)`.
 *
 * @interface
 */
interface RegJacobianOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the Jacobian determinant map
     */
    output_jacobian_file: OutputPathType | null;
    /**
     * File containing the Jacobian matrix map
     */
    output_jacobian_matrix_file: OutputPathType | null;
    /**
     * File containing the log of the Jacobian determinant map
     */
    output_log_jacobian_file: OutputPathType | null;
}


function reg_jacobian_params(
    reference_image: InputPathType,
    deformation_field: InputPathType | null = null,
    control_point_lattice: InputPathType | null = null,
    output_jacobian: string | null = null,
    output_jacobian_matrix: string | null = null,
    output_log_jacobian: string | null = null,
    affine_matrix: InputPathType | null = null,
): RegJacobianParameters {
    /**
     * Build parameters.
    
     * @param reference_image Filename of the reference image
     * @param deformation_field Filename of the deformation field (from reg_transform)
     * @param control_point_lattice Filename of the control point position lattice (from reg_f3d)
     * @param output_jacobian Filename of the Jacobian determinant map
     * @param output_jacobian_matrix Filename of the Jacobian matrix map (9 or 4 values stored as a 5D nifti)
     * @param output_log_jacobian Filename of the Log of the Jacobian determinant map
     * @param affine_matrix Filename of the affine matrix to modulate the Jacobian determinant map
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "reg_jacobian" as const,
        "reference_image": reference_image,
    };
    if (deformation_field !== null) {
        params["deformation_field"] = deformation_field;
    }
    if (control_point_lattice !== null) {
        params["control_point_lattice"] = control_point_lattice;
    }
    if (output_jacobian !== null) {
        params["output_jacobian"] = output_jacobian;
    }
    if (output_jacobian_matrix !== null) {
        params["output_jacobian_matrix"] = output_jacobian_matrix;
    }
    if (output_log_jacobian !== null) {
        params["output_log_jacobian"] = output_log_jacobian;
    }
    if (affine_matrix !== null) {
        params["affine_matrix"] = affine_matrix;
    }
    return params;
}


function reg_jacobian_cargs(
    params: RegJacobianParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("reg_jacobian");
    cargs.push(
        "-ref",
        execution.inputFile((params["reference_image"] ?? null))
    );
    if ((params["deformation_field"] ?? null) !== null) {
        cargs.push(
            "-def",
            execution.inputFile((params["deformation_field"] ?? null))
        );
    }
    if ((params["control_point_lattice"] ?? null) !== null) {
        cargs.push(
            "-cpp",
            execution.inputFile((params["control_point_lattice"] ?? null))
        );
    }
    if ((params["output_jacobian"] ?? null) !== null) {
        cargs.push(
            "-jac",
            (params["output_jacobian"] ?? null)
        );
    }
    if ((params["output_jacobian_matrix"] ?? null) !== null) {
        cargs.push(
            "-jacM",
            (params["output_jacobian_matrix"] ?? null)
        );
    }
    if ((params["output_log_jacobian"] ?? null) !== null) {
        cargs.push(
            "-jacL",
            (params["output_log_jacobian"] ?? null)
        );
    }
    if ((params["affine_matrix"] ?? null) !== null) {
        cargs.push(
            "-aff",
            execution.inputFile((params["affine_matrix"] ?? null))
        );
    }
    return cargs;
}


function reg_jacobian_outputs(
    params: RegJacobianParameters,
    execution: Execution,
): RegJacobianOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RegJacobianOutputs = {
        root: execution.outputFile("."),
        output_jacobian_file: ((params["output_jacobian"] ?? null) !== null) ? execution.outputFile([(params["output_jacobian"] ?? null)].join('')) : null,
        output_jacobian_matrix_file: ((params["output_jacobian_matrix"] ?? null) !== null) ? execution.outputFile([(params["output_jacobian_matrix"] ?? null)].join('')) : null,
        output_log_jacobian_file: ((params["output_log_jacobian"] ?? null) !== null) ? execution.outputFile([(params["output_log_jacobian"] ?? null)].join('')) : null,
    };
    return ret;
}


function reg_jacobian_execute(
    params: RegJacobianParameters,
    execution: Execution,
): RegJacobianOutputs {
    /**
     * Tool to compute the Jacobian determinant map from a deformation field or control point lattice.
     * 
     * Author: NiftyReg Developers
     * 
     * URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RegJacobianOutputs`).
     */
    params = execution.params(params)
    const cargs = reg_jacobian_cargs(params, execution)
    const ret = reg_jacobian_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function reg_jacobian(
    reference_image: InputPathType,
    deformation_field: InputPathType | null = null,
    control_point_lattice: InputPathType | null = null,
    output_jacobian: string | null = null,
    output_jacobian_matrix: string | null = null,
    output_log_jacobian: string | null = null,
    affine_matrix: InputPathType | null = null,
    runner: Runner | null = null,
): RegJacobianOutputs {
    /**
     * Tool to compute the Jacobian determinant map from a deformation field or control point lattice.
     * 
     * Author: NiftyReg Developers
     * 
     * URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
    
     * @param reference_image Filename of the reference image
     * @param deformation_field Filename of the deformation field (from reg_transform)
     * @param control_point_lattice Filename of the control point position lattice (from reg_f3d)
     * @param output_jacobian Filename of the Jacobian determinant map
     * @param output_jacobian_matrix Filename of the Jacobian matrix map (9 or 4 values stored as a 5D nifti)
     * @param output_log_jacobian Filename of the Log of the Jacobian determinant map
     * @param affine_matrix Filename of the affine matrix to modulate the Jacobian determinant map
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RegJacobianOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REG_JACOBIAN_METADATA);
    const params = reg_jacobian_params(reference_image, deformation_field, control_point_lattice, output_jacobian, output_jacobian_matrix, output_log_jacobian, affine_matrix)
    return reg_jacobian_execute(params, execution);
}


export {
      REG_JACOBIAN_METADATA,
      RegJacobianOutputs,
      RegJacobianParameters,
      reg_jacobian,
      reg_jacobian_params,
};
