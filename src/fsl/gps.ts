// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GPS_METADATA: Metadata = {
    id: "b6e9756556d50c5c524e3645c380d3d12a887881.boutiques",
    name: "gps",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface GpsParameters {
    "__STYXTYPE__": "gps";
    "ndir": number;
    "optws": boolean;
    "output"?: string | null | undefined;
    "ranseed"?: number | null | undefined;
    "init"?: InputPathType | null | undefined;
    "report": boolean;
    "verbose": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "gps": gps_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "gps": gps_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gps(...)`.
 *
 * @interface
 */
interface GpsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with generated directions
     */
    output_file: OutputPathType | null;
}


function gps_params(
    ndir: number,
    optws: boolean = false,
    output: string | null = "bvecs#.txt",
    ranseed: number | null = null,
    init: InputPathType | null = null,
    report: boolean = false,
    verbose: boolean = false,
    help: boolean = false,
): GpsParameters {
    /**
     * Build parameters.
    
     * @param ndir Number of directions
     * @param optws Perform additional optimisation on the whole sphere (needed for eddy)
     * @param output Name of output file (default: bvecs#.txt)
     * @param ranseed Seed random generator with supplied number
     * @param init File with bvecs to use as initialisation
     * @param report Report coulomb forces for initial configuration
     * @param verbose Switch on diagnostic messages
     * @param help Display help message
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "gps" as const,
        "ndir": ndir,
        "optws": optws,
        "report": report,
        "verbose": verbose,
        "help": help,
    };
    if (output !== null) {
        params["output"] = output;
    }
    if (ranseed !== null) {
        params["ranseed"] = ranseed;
    }
    if (init !== null) {
        params["init"] = init;
    }
    return params;
}


function gps_cargs(
    params: GpsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("gps");
    cargs.push(
        "--ndir",
        String((params["ndir"] ?? null))
    );
    if ((params["optws"] ?? null)) {
        cargs.push("--optws");
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["output"] ?? null)
        );
    }
    if ((params["ranseed"] ?? null) !== null) {
        cargs.push(
            "--ranseed",
            String((params["ranseed"] ?? null))
        );
    }
    if ((params["init"] ?? null) !== null) {
        cargs.push(
            "--init",
            execution.inputFile((params["init"] ?? null))
        );
    }
    if ((params["report"] ?? null)) {
        cargs.push("--report");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v,--verbose");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-h,--help");
    }
    return cargs;
}


function gps_outputs(
    params: GpsParameters,
    execution: Execution,
): GpsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: GpsOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null)].join('')) : null,
    };
    return ret;
}


function gps_execute(
    params: GpsParameters,
    execution: Execution,
): GpsOutputs {
    /**
     * Generate set of diffusion gradient directions.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `GpsOutputs`).
     */
    params = execution.params(params)
    const cargs = gps_cargs(params, execution)
    const ret = gps_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function gps(
    ndir: number,
    optws: boolean = false,
    output: string | null = "bvecs#.txt",
    ranseed: number | null = null,
    init: InputPathType | null = null,
    report: boolean = false,
    verbose: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): GpsOutputs {
    /**
     * Generate set of diffusion gradient directions.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param ndir Number of directions
     * @param optws Perform additional optimisation on the whole sphere (needed for eddy)
     * @param output Name of output file (default: bvecs#.txt)
     * @param ranseed Seed random generator with supplied number
     * @param init File with bvecs to use as initialisation
     * @param report Report coulomb forces for initial configuration
     * @param verbose Switch on diagnostic messages
     * @param help Display help message
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `GpsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GPS_METADATA);
    const params = gps_params(ndir, optws, output, ranseed, init, report, verbose, help)
    return gps_execute(params, execution);
}


export {
      GPS_METADATA,
      GpsOutputs,
      GpsParameters,
      gps,
      gps_params,
};
