// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRGRID_METADATA: Metadata = {
    id: "62aab6d384f12d5080514505c5f5b4c9d7d75bc0.boutiques",
    name: "mrgrid",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrgridAxisParameters {
    "@type"?: "axis";
    "index": number;
    "spec": string;
}
type MrgridAxisParametersTagged = Required<Pick<MrgridAxisParameters, '@type'>> & MrgridAxisParameters;


interface MrgridVariousStringParameters {
    "@type"?: "VariousString";
    "obj": string;
}
type MrgridVariousStringParametersTagged = Required<Pick<MrgridVariousStringParameters, '@type'>> & MrgridVariousStringParameters;


interface MrgridVariousFileParameters {
    "@type"?: "VariousFile";
    "obj": InputPathType;
}
type MrgridVariousFileParametersTagged = Required<Pick<MrgridVariousFileParameters, '@type'>> & MrgridVariousFileParameters;


interface MrgridConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type MrgridConfigParametersTagged = Required<Pick<MrgridConfigParameters, '@type'>> & MrgridConfigParameters;


interface MrgridParameters {
    "@type"?: "mrtrix/mrgrid";
    "template"?: InputPathType | null | undefined;
    "size"?: Array<number> | null | undefined;
    "voxel"?: Array<number> | null | undefined;
    "scale"?: Array<number> | null | undefined;
    "interp"?: string | null | undefined;
    "oversample"?: Array<number> | null | undefined;
    "as"?: InputPathType | null | undefined;
    "uniform"?: number | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "crop_unbound": boolean;
    "axis"?: Array<MrgridAxisParameters> | null | undefined;
    "all_axes": boolean;
    "fill"?: number | null | undefined;
    "strides"?: MrgridVariousStringParametersTagged | MrgridVariousFileParametersTagged | null | undefined;
    "datatype"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrgridConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "operation": string;
    "output": string;
}
type MrgridParametersTagged = Required<Pick<MrgridParameters, '@type'>> & MrgridParameters;


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function mrgrid_strides_cargs_dyn_fn(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "VariousString": mrgrid_various_string_cargs,
        "VariousFile": mrgrid_various_file_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function mrgrid_strides_outputs_dyn_fn(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param index pad or crop the input image along the provided axis (defined by index). The specifier argument defines the number of voxels added or removed on the lower or upper end of the axis (-axis index delta_lower,delta_upper) or acts as a voxel selection range (-axis index start:stop). In both modes, values are relative to the input image (overriding all other extent-specifying options). Negative delta specifier values trigger the inverse operation (pad instead of crop and vice versa) and negative range specifier trigger padding. Note that the deprecated commands 'mrcrop' and 'mrpad' used range-based and delta-based -axis indices, respectively.
 * @param spec pad or crop the input image along the provided axis (defined by index). The specifier argument defines the number of voxels added or removed on the lower or upper end of the axis (-axis index delta_lower,delta_upper) or acts as a voxel selection range (-axis index start:stop). In both modes, values are relative to the input image (overriding all other extent-specifying options). Negative delta specifier values trigger the inverse operation (pad instead of crop and vice versa) and negative range specifier trigger padding. Note that the deprecated commands 'mrcrop' and 'mrpad' used range-based and delta-based -axis indices, respectively.
 *
 * @returns Parameter dictionary
 */
function mrgrid_axis_params(
    index: number,
    spec: string,
): MrgridAxisParametersTagged {
    const params = {
        "@type": "axis" as const,
        "index": index,
        "spec": spec,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrgrid_axis_cargs(
    params: MrgridAxisParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-axis");
    cargs.push(String((params["index"] ?? null)));
    cargs.push((params["spec"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function mrgrid_various_string_params(
    obj: string,
): MrgridVariousStringParametersTagged {
    const params = {
        "@type": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrgrid_various_string_cargs(
    params: MrgridVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function mrgrid_various_file_params(
    obj: InputPathType,
): MrgridVariousFileParametersTagged {
    const params = {
        "@type": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrgrid_various_file_cargs(
    params: MrgridVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrgrid_config_params(
    key: string,
    value: string,
): MrgridConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrgrid_config_cargs(
    params: MrgridConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `MrgridParameters(...)`.
 *
 * @interface
 */
interface MrgridOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input input image to be regridded.
 * @param operation the operation to be performed, one of: regrid, crop, pad.
 * @param output the output image.
 * @param template match the input image grid (voxel spacing, image size, header transformation) to that of a reference image. The image resolution relative to the template image can be changed with one of -size, -voxel, -scale.
 * @param size define the size (number of voxels) in each spatial dimension for the output image. This should be specified as a comma-separated list.
 * @param voxel define the new voxel size for the output image. This can be specified either as a single value to be used for all spatial dimensions, or as a comma-separated list of the size for each voxel dimension.
 * @param scale scale the image resolution by the supplied factor. This can be specified either as a single value to be used for all dimensions, or as a comma-separated list of scale factors for each dimension.
 * @param interp set the interpolation method to use when reslicing (choices: nearest, linear, cubic, sinc. Default: cubic).
 * @param oversample set the amount of over-sampling (in the target space) to perform when regridding. This is particularly relevant when downsamping a high-resolution image to a low-resolution image, to avoid aliasing artefacts. This can consist of a single integer, or a comma-separated list of 3 integers if different oversampling factors are desired along the different axes. Default is determined from ratio of voxel dimensions (disabled for nearest-neighbour interpolation).
 * @param as pad or crop the input image on the upper bound to match the specified reference image grid. This operation ignores differences in image transformation between input and reference image.
 * @param uniform pad or crop the input image by a uniform number of voxels on all sides
 * @param mask crop the input image according to the spatial extent of a mask image. The mask must share a common voxel grid with the input image but differences in image transformations are ignored. Note that even though only 3 dimensions are cropped when using a mask, the bounds are computed by checking the extent for all dimensions. Note that by default a gap of 1 voxel is left at all edges of the image to allow valid trilinear interpolation. This gap can be modified with the -uniform option but by default it does not extend beyond the FOV unless -crop_unbound is used.
 * @param crop_unbound Allow padding beyond the original FOV when cropping.
 * @param axis pad or crop the input image along the provided axis (defined by index). The specifier argument defines the number of voxels added or removed on the lower or upper end of the axis (-axis index delta_lower,delta_upper) or acts as a voxel selection range (-axis index start:stop). In both modes, values are relative to the input image (overriding all other extent-specifying options). Negative delta specifier values trigger the inverse operation (pad instead of crop and vice versa) and negative range specifier trigger padding. Note that the deprecated commands 'mrcrop' and 'mrpad' used range-based and delta-based -axis indices, respectively.
 * @param all_axes Crop or pad all, not just spatial axes.
 * @param fill Use number as the out of bounds value. nan, inf and -inf are valid arguments. (Default: 0.0)
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrgrid_params(
    input: InputPathType,
    operation: string,
    output: string,
    template: InputPathType | null = null,
    size: Array<number> | null = null,
    voxel: Array<number> | null = null,
    scale: Array<number> | null = null,
    interp: string | null = null,
    oversample: Array<number> | null = null,
    as: InputPathType | null = null,
    uniform: number | null = null,
    mask: InputPathType | null = null,
    crop_unbound: boolean = false,
    axis: Array<MrgridAxisParameters> | null = null,
    all_axes: boolean = false,
    fill: number | null = null,
    strides: MrgridVariousStringParametersTagged | MrgridVariousFileParametersTagged | null = null,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrgridConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrgridParametersTagged {
    const params = {
        "@type": "mrtrix/mrgrid" as const,
        "crop_unbound": crop_unbound,
        "all_axes": all_axes,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "operation": operation,
        "output": output,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (size !== null) {
        params["size"] = size;
    }
    if (voxel !== null) {
        params["voxel"] = voxel;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (oversample !== null) {
        params["oversample"] = oversample;
    }
    if (as !== null) {
        params["as"] = as;
    }
    if (uniform !== null) {
        params["uniform"] = uniform;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (axis !== null) {
        params["axis"] = axis;
    }
    if (fill !== null) {
        params["fill"] = fill;
    }
    if (strides !== null) {
        params["strides"] = strides;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrgrid_cargs(
    params: MrgridParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrgrid");
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["size"] ?? null) !== null) {
        cargs.push(
            "-size",
            (params["size"] ?? null).map(String).join(",")
        );
    }
    if ((params["voxel"] ?? null) !== null) {
        cargs.push(
            "-voxel",
            (params["voxel"] ?? null).map(String).join(",")
        );
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-scale",
            (params["scale"] ?? null).map(String).join(",")
        );
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "-interp",
            (params["interp"] ?? null)
        );
    }
    if ((params["oversample"] ?? null) !== null) {
        cargs.push(
            "-oversample",
            (params["oversample"] ?? null).map(String).join(",")
        );
    }
    if ((params["as"] ?? null) !== null) {
        cargs.push(
            "-as",
            execution.inputFile((params["as"] ?? null))
        );
    }
    if ((params["uniform"] ?? null) !== null) {
        cargs.push(
            "-uniform",
            String((params["uniform"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["crop_unbound"] ?? false)) {
        cargs.push("-crop_unbound");
    }
    if ((params["axis"] ?? null) !== null) {
        cargs.push(...(params["axis"] ?? null).map(s => mrgrid_axis_cargs(s, execution)).flat());
    }
    if ((params["all_axes"] ?? false)) {
        cargs.push("-all_axes");
    }
    if ((params["fill"] ?? null) !== null) {
        cargs.push(
            "-fill",
            String((params["fill"] ?? null))
        );
    }
    if ((params["strides"] ?? null) !== null) {
        cargs.push(
            "-strides",
            ...mrgrid_strides_cargs_dyn_fn((params["strides"] ?? null)["@type"])((params["strides"] ?? null), execution)
        );
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datatype",
            (params["datatype"] ?? null)
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => mrgrid_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["operation"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrgrid_outputs(
    params: MrgridParameters,
    execution: Execution,
): MrgridOutputs {
    const ret: MrgridOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mrgrid
 *
 * Modify the grid of an image without interpolation (cropping or padding) or by regridding to an image grid with modified orientation, location and or resolution. The image content remains in place in real world coordinates..
 *
 * - regrid: This operation performs changes of the voxel grid that require interpolation of the image such as changing the resolution or location and orientation of the voxel grid. If the image is down-sampled, the appropriate smoothing is automatically applied using Gaussian smoothing unless nearest neighbour interpolation is selected or oversample is changed explicitly. The resolution can only be changed for spatial dimensions. 
 *
 * - crop: The image extent after cropping, can be specified either manually for each axis dimensions, or via a mask or reference image. The image can be cropped to the extent of a mask. This is useful for axially-acquired brain images, where the image size can be reduced by a factor of 2 by removing the empty space on either side of the brain. Note that cropping does not extend the image beyond the original FOV unless explicitly specified (via -crop_unbound or negative -axis extent).
 *
 * - pad: Analogously to cropping, padding increases the FOV of an image without image interpolation. Pad and crop can be performed simultaneously by specifying signed specifier argument values to the -axis option.
 *
 * This command encapsulates and extends the functionality of the superseded commands 'mrpad', 'mrcrop' and 'mrresize'. Note the difference in -axis convention used for 'mrcrop' and 'mrpad' (see -axis option description).
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrgridOutputs`).
 */
function mrgrid_execute(
    params: MrgridParameters,
    runner: Runner | null = null,
): MrgridOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRGRID_METADATA);
    params = execution.params(params)
    const cargs = mrgrid_cargs(params, execution)
    const ret = mrgrid_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mrgrid
 *
 * Modify the grid of an image without interpolation (cropping or padding) or by regridding to an image grid with modified orientation, location and or resolution. The image content remains in place in real world coordinates..
 *
 * - regrid: This operation performs changes of the voxel grid that require interpolation of the image such as changing the resolution or location and orientation of the voxel grid. If the image is down-sampled, the appropriate smoothing is automatically applied using Gaussian smoothing unless nearest neighbour interpolation is selected or oversample is changed explicitly. The resolution can only be changed for spatial dimensions. 
 *
 * - crop: The image extent after cropping, can be specified either manually for each axis dimensions, or via a mask or reference image. The image can be cropped to the extent of a mask. This is useful for axially-acquired brain images, where the image size can be reduced by a factor of 2 by removing the empty space on either side of the brain. Note that cropping does not extend the image beyond the original FOV unless explicitly specified (via -crop_unbound or negative -axis extent).
 *
 * - pad: Analogously to cropping, padding increases the FOV of an image without image interpolation. Pad and crop can be performed simultaneously by specifying signed specifier argument values to the -axis option.
 *
 * This command encapsulates and extends the functionality of the superseded commands 'mrpad', 'mrcrop' and 'mrresize'. Note the difference in -axis convention used for 'mrcrop' and 'mrpad' (see -axis option description).
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input input image to be regridded.
 * @param operation the operation to be performed, one of: regrid, crop, pad.
 * @param output the output image.
 * @param template match the input image grid (voxel spacing, image size, header transformation) to that of a reference image. The image resolution relative to the template image can be changed with one of -size, -voxel, -scale.
 * @param size define the size (number of voxels) in each spatial dimension for the output image. This should be specified as a comma-separated list.
 * @param voxel define the new voxel size for the output image. This can be specified either as a single value to be used for all spatial dimensions, or as a comma-separated list of the size for each voxel dimension.
 * @param scale scale the image resolution by the supplied factor. This can be specified either as a single value to be used for all dimensions, or as a comma-separated list of scale factors for each dimension.
 * @param interp set the interpolation method to use when reslicing (choices: nearest, linear, cubic, sinc. Default: cubic).
 * @param oversample set the amount of over-sampling (in the target space) to perform when regridding. This is particularly relevant when downsamping a high-resolution image to a low-resolution image, to avoid aliasing artefacts. This can consist of a single integer, or a comma-separated list of 3 integers if different oversampling factors are desired along the different axes. Default is determined from ratio of voxel dimensions (disabled for nearest-neighbour interpolation).
 * @param as pad or crop the input image on the upper bound to match the specified reference image grid. This operation ignores differences in image transformation between input and reference image.
 * @param uniform pad or crop the input image by a uniform number of voxels on all sides
 * @param mask crop the input image according to the spatial extent of a mask image. The mask must share a common voxel grid with the input image but differences in image transformations are ignored. Note that even though only 3 dimensions are cropped when using a mask, the bounds are computed by checking the extent for all dimensions. Note that by default a gap of 1 voxel is left at all edges of the image to allow valid trilinear interpolation. This gap can be modified with the -uniform option but by default it does not extend beyond the FOV unless -crop_unbound is used.
 * @param crop_unbound Allow padding beyond the original FOV when cropping.
 * @param axis pad or crop the input image along the provided axis (defined by index). The specifier argument defines the number of voxels added or removed on the lower or upper end of the axis (-axis index delta_lower,delta_upper) or acts as a voxel selection range (-axis index start:stop). In both modes, values are relative to the input image (overriding all other extent-specifying options). Negative delta specifier values trigger the inverse operation (pad instead of crop and vice versa) and negative range specifier trigger padding. Note that the deprecated commands 'mrcrop' and 'mrpad' used range-based and delta-based -axis indices, respectively.
 * @param all_axes Crop or pad all, not just spatial axes.
 * @param fill Use number as the out of bounds value. nan, inf and -inf are valid arguments. (Default: 0.0)
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrgridOutputs`).
 */
function mrgrid(
    input: InputPathType,
    operation: string,
    output: string,
    template: InputPathType | null = null,
    size: Array<number> | null = null,
    voxel: Array<number> | null = null,
    scale: Array<number> | null = null,
    interp: string | null = null,
    oversample: Array<number> | null = null,
    as: InputPathType | null = null,
    uniform: number | null = null,
    mask: InputPathType | null = null,
    crop_unbound: boolean = false,
    axis: Array<MrgridAxisParameters> | null = null,
    all_axes: boolean = false,
    fill: number | null = null,
    strides: MrgridVariousStringParametersTagged | MrgridVariousFileParametersTagged | null = null,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrgridConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrgridOutputs {
    const params = mrgrid_params(input, operation, output, template, size, voxel, scale, interp, oversample, as, uniform, mask, crop_unbound, axis, all_axes, fill, strides, datatype, info, quiet, debug, force, nthreads, config, help, version)
    return mrgrid_execute(params, runner);
}


export {
      MRGRID_METADATA,
      MrgridOutputs,
      mrgrid,
      mrgrid_axis_params,
      mrgrid_config_params,
      mrgrid_execute,
      mrgrid_params,
      mrgrid_various_file_params,
      mrgrid_various_string_params,
};
