// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_EXTRACT_PATCHES_METADATA: Metadata = {
    id: "4b1b272c0e5d898fdbf11dee43aa5f15d5fc44a4.boutiques",
    name: "mris_extract_patches",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisExtractPatchesParameters {
    "@type": "freesurfer.mris_extract_patches";
    "subject": string;
    "output_dir": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_extract_patches": mris_extract_patches_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_extract_patches(...)`.
 *
 * @interface
 */
interface MrisExtractPatchesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject from which patches are to be extracted
 * @param output_dir Output directory where patches will be saved
 *
 * @returns Parameter dictionary
 */
function mris_extract_patches_params(
    subject: string,
    output_dir: string,
): MrisExtractPatchesParameters {
    const params = {
        "@type": "freesurfer.mris_extract_patches" as const,
        "subject": subject,
        "output_dir": output_dir,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_extract_patches_cargs(
    params: MrisExtractPatchesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_extract_patches");
    cargs.push((params["subject"] ?? null));
    cargs.push((params["output_dir"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_extract_patches_outputs(
    params: MrisExtractPatchesParameters,
    execution: Execution,
): MrisExtractPatchesOutputs {
    const ret: MrisExtractPatchesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool for extracting patches from brain surfaces.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExtractPatchesOutputs`).
 */
function mris_extract_patches_execute(
    params: MrisExtractPatchesParameters,
    runner: Runner | null = null,
): MrisExtractPatchesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_EXTRACT_PATCHES_METADATA);
    params = execution.params(params)
    const cargs = mris_extract_patches_cargs(params, execution)
    const ret = mris_extract_patches_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for extracting patches from brain surfaces.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject from which patches are to be extracted
 * @param output_dir Output directory where patches will be saved
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExtractPatchesOutputs`).
 */
function mris_extract_patches(
    subject: string,
    output_dir: string,
    runner: Runner | null = null,
): MrisExtractPatchesOutputs {
    const params = mris_extract_patches_params(subject, output_dir)
    return mris_extract_patches_execute(params, runner);
}


export {
      MRIS_EXTRACT_PATCHES_METADATA,
      MrisExtractPatchesOutputs,
      MrisExtractPatchesParameters,
      mris_extract_patches,
      mris_extract_patches_execute,
      mris_extract_patches_params,
};
