// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_ENTOWM_SEG_METADATA: Metadata = {
    id: "ddf086c5e432c411bc2194c0bac1a7f6b35bb81f.boutiques",
    name: "mri_entowm_seg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriEntowmSegParameters {
    "@type": "freesurfer.mri_entowm_seg";
    "input_image"?: InputPathType | null | undefined;
    "output_segmentation"?: string | null | undefined;
    "recon_subjects"?: Array<string> | null | undefined;
    "subjects_directory"?: string | null | undefined;
    "conform": boolean;
    "etiv": boolean;
    "tal"?: string | null | undefined;
    "write_posteriors": boolean;
    "write_volumes": boolean;
    "write_qa_stats": boolean;
    "exclude_labels"?: Array<string> | null | undefined;
    "keep_ac": boolean;
    "vox_count_volumes": boolean;
    "model_weights"?: string | null | undefined;
    "color_table"?: string | null | undefined;
    "population_stats"?: string | null | undefined;
    "debug": boolean;
    "vmp": boolean;
    "threads"?: number | null | undefined;
    "seven_tesla": boolean;
    "percentile"?: number | null | undefined;
    "cuda_device"?: string | null | undefined;
    "output_base"?: string | null | undefined;
    "no_cite_sclimbic": boolean;
    "nchannels"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_entowm_seg": mri_entowm_seg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_entowm_seg": mri_entowm_seg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_entowm_seg(...)`.
 *
 * @interface
 */
interface MriEntowmSegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmentation output file
     */
    output_file: OutputPathType | null;
    /**
     * Label posterior probabilities
     */
    label_posteriors: OutputPathType | null;
    /**
     * Volume statistics
     */
    volume_stats: OutputPathType | null;
    /**
     * Quality assurance statistics
     */
    qa_stats: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_image T1-weighted image(s) to segment. Can be a path to a single image or a directory of images.
 * @param output_segmentation Segmentation output file or directory (required if --i is provided).
 * @param recon_subjects Process a series of FreeSurfer recon-all subjects, enables subject-mode.
 * @param subjects_directory Set the subjects directory, overrides the SUBJECTS_DIR env variable.
 * @param conform Resample input to 1mm-iso; results will be put back in native resolution.
 * @param etiv Include eTIV in volume stats (enabled by default in subject-mode and with --tal).
 * @param tal Alternative talairach xfm transform for estimating TIV, can be file or suffix (for multiple inputs).
 * @param write_posteriors Save the label posteriors.
 * @param write_volumes Save label volume stats (enabled by default in subject-mode).
 * @param write_qa_stats Save QA stats (z and confidence).
 * @param exclude_labels List of label IDs to exclude in any output stats files.
 * @param keep_ac Explicitly keep anterior commissure in the volume/QA files.
 * @param vox_count_volumes Use discrete voxel count for label volumes.
 * @param model_weights Alternative model weights to load.
 * @param color_table Alternative color lookup table to embed in segmentation. Must be minimal, including 0, and sorted.
 * @param population_stats Alternative population volume stats for QA output.
 * @param debug Enable debug logging.
 * @param vmp Enable printing of vmpeak at the end.
 * @param threads Number of threads to use. Default is 1.
 * @param seven_tesla Preprocess 7T images (just sets percentile to 99.9).
 * @param percentile Use intensity percentile threshold for normalization.
 * @param cuda_device CUDA device for GPU support.
 * @param output_base String to use in output file name; default is sclimbic.
 * @param no_cite_sclimbic Do not cite sclimbic paper at the end.
 * @param nchannels Number of channels.
 *
 * @returns Parameter dictionary
 */
function mri_entowm_seg_params(
    input_image: InputPathType | null = null,
    output_segmentation: string | null = null,
    recon_subjects: Array<string> | null = null,
    subjects_directory: string | null = null,
    conform: boolean = false,
    etiv: boolean = false,
    tal: string | null = null,
    write_posteriors: boolean = false,
    write_volumes: boolean = false,
    write_qa_stats: boolean = false,
    exclude_labels: Array<string> | null = null,
    keep_ac: boolean = false,
    vox_count_volumes: boolean = false,
    model_weights: string | null = null,
    color_table: string | null = null,
    population_stats: string | null = null,
    debug: boolean = false,
    vmp: boolean = false,
    threads: number | null = null,
    seven_tesla: boolean = false,
    percentile: number | null = null,
    cuda_device: string | null = null,
    output_base: string | null = null,
    no_cite_sclimbic: boolean = false,
    nchannels: number | null = null,
): MriEntowmSegParameters {
    const params = {
        "@type": "freesurfer.mri_entowm_seg" as const,
        "conform": conform,
        "etiv": etiv,
        "write_posteriors": write_posteriors,
        "write_volumes": write_volumes,
        "write_qa_stats": write_qa_stats,
        "keep_ac": keep_ac,
        "vox_count_volumes": vox_count_volumes,
        "debug": debug,
        "vmp": vmp,
        "seven_tesla": seven_tesla,
        "no_cite_sclimbic": no_cite_sclimbic,
    };
    if (input_image !== null) {
        params["input_image"] = input_image;
    }
    if (output_segmentation !== null) {
        params["output_segmentation"] = output_segmentation;
    }
    if (recon_subjects !== null) {
        params["recon_subjects"] = recon_subjects;
    }
    if (subjects_directory !== null) {
        params["subjects_directory"] = subjects_directory;
    }
    if (tal !== null) {
        params["tal"] = tal;
    }
    if (exclude_labels !== null) {
        params["exclude_labels"] = exclude_labels;
    }
    if (model_weights !== null) {
        params["model_weights"] = model_weights;
    }
    if (color_table !== null) {
        params["color_table"] = color_table;
    }
    if (population_stats !== null) {
        params["population_stats"] = population_stats;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (percentile !== null) {
        params["percentile"] = percentile;
    }
    if (cuda_device !== null) {
        params["cuda_device"] = cuda_device;
    }
    if (output_base !== null) {
        params["output_base"] = output_base;
    }
    if (nchannels !== null) {
        params["nchannels"] = nchannels;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_entowm_seg_cargs(
    params: MriEntowmSegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_entowm_seg");
    if ((params["input_image"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["input_image"] ?? null))
        );
    }
    if ((params["output_segmentation"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_segmentation"] ?? null)
        );
    }
    if ((params["recon_subjects"] ?? null) !== null) {
        cargs.push(
            "-s",
            ...(params["recon_subjects"] ?? null)
        );
    }
    if ((params["subjects_directory"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_directory"] ?? null)
        );
    }
    if ((params["conform"] ?? null)) {
        cargs.push("--conform");
    }
    if ((params["etiv"] ?? null)) {
        cargs.push("--etiv");
    }
    if ((params["tal"] ?? null) !== null) {
        cargs.push(
            "--tal",
            (params["tal"] ?? null)
        );
    }
    if ((params["write_posteriors"] ?? null)) {
        cargs.push("--write_posteriors");
    }
    if ((params["write_volumes"] ?? null)) {
        cargs.push("--write_volumes");
    }
    if ((params["write_qa_stats"] ?? null)) {
        cargs.push("--write_qa_stats");
    }
    if ((params["exclude_labels"] ?? null) !== null) {
        cargs.push(
            "--exclude",
            ...(params["exclude_labels"] ?? null)
        );
    }
    if ((params["keep_ac"] ?? null)) {
        cargs.push("--keep_ac");
    }
    if ((params["vox_count_volumes"] ?? null)) {
        cargs.push("--vox-count-volumes");
    }
    if ((params["model_weights"] ?? null) !== null) {
        cargs.push(
            "--model",
            (params["model_weights"] ?? null)
        );
    }
    if ((params["color_table"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            (params["color_table"] ?? null)
        );
    }
    if ((params["population_stats"] ?? null) !== null) {
        cargs.push(
            "--population-stats",
            (params["population_stats"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["vmp"] ?? null)) {
        cargs.push("--vmp");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["seven_tesla"] ?? null)) {
        cargs.push("--7T");
    }
    if ((params["percentile"] ?? null) !== null) {
        cargs.push(
            "--percentile",
            String((params["percentile"] ?? null))
        );
    }
    if ((params["cuda_device"] ?? null) !== null) {
        cargs.push(
            "--cuda-device",
            (params["cuda_device"] ?? null)
        );
    }
    if ((params["output_base"] ?? null) !== null) {
        cargs.push(
            "--output-base",
            (params["output_base"] ?? null)
        );
    }
    if ((params["no_cite_sclimbic"] ?? null)) {
        cargs.push("--no-cite-sclimbic");
    }
    if ((params["nchannels"] ?? null) !== null) {
        cargs.push(
            "--nchannels",
            String((params["nchannels"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_entowm_seg_outputs(
    params: MriEntowmSegParameters,
    execution: Execution,
): MriEntowmSegOutputs {
    const ret: MriEntowmSegOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output_segmentation"] ?? null) !== null) ? execution.outputFile([(params["output_segmentation"] ?? null)].join('')) : null,
        label_posteriors: ((params["output_base"] ?? null) !== null) ? execution.outputFile([(params["output_base"] ?? null), "_posterior.mgz"].join('')) : null,
        volume_stats: ((params["output_base"] ?? null) !== null) ? execution.outputFile([(params["output_base"] ?? null), "_volumes.txt"].join('')) : null,
        qa_stats: ((params["output_base"] ?? null) !== null) ? execution.outputFile([(params["output_base"] ?? null), "_qa_stats.txt"].join('')) : null,
    };
    return ret;
}


/**
 * Segment white matter near gyrus ambiens entorhinal cortex using a deep learning model.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriEntowmSegOutputs`).
 */
function mri_entowm_seg_execute(
    params: MriEntowmSegParameters,
    runner: Runner | null = null,
): MriEntowmSegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_ENTOWM_SEG_METADATA);
    params = execution.params(params)
    const cargs = mri_entowm_seg_cargs(params, execution)
    const ret = mri_entowm_seg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Segment white matter near gyrus ambiens entorhinal cortex using a deep learning model.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image T1-weighted image(s) to segment. Can be a path to a single image or a directory of images.
 * @param output_segmentation Segmentation output file or directory (required if --i is provided).
 * @param recon_subjects Process a series of FreeSurfer recon-all subjects, enables subject-mode.
 * @param subjects_directory Set the subjects directory, overrides the SUBJECTS_DIR env variable.
 * @param conform Resample input to 1mm-iso; results will be put back in native resolution.
 * @param etiv Include eTIV in volume stats (enabled by default in subject-mode and with --tal).
 * @param tal Alternative talairach xfm transform for estimating TIV, can be file or suffix (for multiple inputs).
 * @param write_posteriors Save the label posteriors.
 * @param write_volumes Save label volume stats (enabled by default in subject-mode).
 * @param write_qa_stats Save QA stats (z and confidence).
 * @param exclude_labels List of label IDs to exclude in any output stats files.
 * @param keep_ac Explicitly keep anterior commissure in the volume/QA files.
 * @param vox_count_volumes Use discrete voxel count for label volumes.
 * @param model_weights Alternative model weights to load.
 * @param color_table Alternative color lookup table to embed in segmentation. Must be minimal, including 0, and sorted.
 * @param population_stats Alternative population volume stats for QA output.
 * @param debug Enable debug logging.
 * @param vmp Enable printing of vmpeak at the end.
 * @param threads Number of threads to use. Default is 1.
 * @param seven_tesla Preprocess 7T images (just sets percentile to 99.9).
 * @param percentile Use intensity percentile threshold for normalization.
 * @param cuda_device CUDA device for GPU support.
 * @param output_base String to use in output file name; default is sclimbic.
 * @param no_cite_sclimbic Do not cite sclimbic paper at the end.
 * @param nchannels Number of channels.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriEntowmSegOutputs`).
 */
function mri_entowm_seg(
    input_image: InputPathType | null = null,
    output_segmentation: string | null = null,
    recon_subjects: Array<string> | null = null,
    subjects_directory: string | null = null,
    conform: boolean = false,
    etiv: boolean = false,
    tal: string | null = null,
    write_posteriors: boolean = false,
    write_volumes: boolean = false,
    write_qa_stats: boolean = false,
    exclude_labels: Array<string> | null = null,
    keep_ac: boolean = false,
    vox_count_volumes: boolean = false,
    model_weights: string | null = null,
    color_table: string | null = null,
    population_stats: string | null = null,
    debug: boolean = false,
    vmp: boolean = false,
    threads: number | null = null,
    seven_tesla: boolean = false,
    percentile: number | null = null,
    cuda_device: string | null = null,
    output_base: string | null = null,
    no_cite_sclimbic: boolean = false,
    nchannels: number | null = null,
    runner: Runner | null = null,
): MriEntowmSegOutputs {
    const params = mri_entowm_seg_params(input_image, output_segmentation, recon_subjects, subjects_directory, conform, etiv, tal, write_posteriors, write_volumes, write_qa_stats, exclude_labels, keep_ac, vox_count_volumes, model_weights, color_table, population_stats, debug, vmp, threads, seven_tesla, percentile, cuda_device, output_base, no_cite_sclimbic, nchannels)
    return mri_entowm_seg_execute(params, runner);
}


export {
      MRI_ENTOWM_SEG_METADATA,
      MriEntowmSegOutputs,
      MriEntowmSegParameters,
      mri_entowm_seg,
      mri_entowm_seg_execute,
      mri_entowm_seg_params,
};
