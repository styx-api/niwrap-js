// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIXEL2TSF_METADATA: Metadata = {
    id: "633221e2ad511634bae92b1740122dc5ec9d02cb.boutiques",
    name: "fixel2tsf",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Fixel2tsfConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type Fixel2tsfConfigParametersTagged = Required<Pick<Fixel2tsfConfigParameters, '@type'>> & Fixel2tsfConfigParameters;


interface Fixel2tsfParameters {
    "@type"?: "mrtrix/fixel2tsf";
    "angle"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Fixel2tsfConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "fixel_in": InputPathType;
    "tracks": InputPathType;
    "tsf": string;
}
type Fixel2tsfParametersTagged = Required<Pick<Fixel2tsfParameters, '@type'>> & Fixel2tsfParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function fixel2tsf_config_params(
    key: string,
    value: string,
): Fixel2tsfConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2tsf_config_cargs(
    params: Fixel2tsfConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `Fixel2tsfParameters(...)`.
 *
 * @interface
 */
interface Fixel2tsfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output track scalar file
     */
    tsf: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fixel_in the input fixel data file (within the fixel directory)
 * @param tracks the input track file 
 * @param tsf the output track scalar file
 * @param angle the max anglular threshold for computing correspondence between a fixel direction and track tangent (default = 45 degrees)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function fixel2tsf_params(
    fixel_in: InputPathType,
    tracks: InputPathType,
    tsf: string,
    angle: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fixel2tsfConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Fixel2tsfParametersTagged {
    const params = {
        "@type": "mrtrix/fixel2tsf" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "fixel_in": fixel_in,
        "tracks": tracks,
        "tsf": tsf,
    };
    if (angle !== null) {
        params["angle"] = angle;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2tsf_cargs(
    params: Fixel2tsfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fixel2tsf");
    if ((params["angle"] ?? null) !== null) {
        cargs.push(
            "-angle",
            String((params["angle"] ?? null))
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => fixel2tsf_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["fixel_in"] ?? null)));
    cargs.push(execution.inputFile((params["tracks"] ?? null)));
    cargs.push((params["tsf"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fixel2tsf_outputs(
    params: Fixel2tsfParameters,
    execution: Execution,
): Fixel2tsfOutputs {
    const ret: Fixel2tsfOutputs = {
        root: execution.outputFile("."),
        tsf: execution.outputFile([(params["tsf"] ?? null)].join('')),
    };
    return ret;
}


/**
 * fixel2tsf
 *
 * Map fixel values to a track scalar file based on an input tractogram.
 *
 * This command is useful for visualising all brain fixels (e.g. the output from fixelcfestats) in 3D.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fixel2tsfOutputs`).
 */
function fixel2tsf_execute(
    params: Fixel2tsfParameters,
    runner: Runner | null = null,
): Fixel2tsfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIXEL2TSF_METADATA);
    params = execution.params(params)
    const cargs = fixel2tsf_cargs(params, execution)
    const ret = fixel2tsf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fixel2tsf
 *
 * Map fixel values to a track scalar file based on an input tractogram.
 *
 * This command is useful for visualising all brain fixels (e.g. the output from fixelcfestats) in 3D.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param fixel_in the input fixel data file (within the fixel directory)
 * @param tracks the input track file 
 * @param tsf the output track scalar file
 * @param angle the max anglular threshold for computing correspondence between a fixel direction and track tangent (default = 45 degrees)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fixel2tsfOutputs`).
 */
function fixel2tsf(
    fixel_in: InputPathType,
    tracks: InputPathType,
    tsf: string,
    angle: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fixel2tsfConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Fixel2tsfOutputs {
    const params = fixel2tsf_params(fixel_in, tracks, tsf, angle, info, quiet, debug, force, nthreads, config, help, version)
    return fixel2tsf_execute(params, runner);
}


export {
      FIXEL2TSF_METADATA,
      Fixel2tsfOutputs,
      fixel2tsf,
      fixel2tsf_config_params,
      fixel2tsf_execute,
      fixel2tsf_params,
};
