// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NICAT_METADATA: Metadata = {
    id: "ca9eebfe58a16733378505aca09b8609d16496d5.boutiques",
    name: "nicat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface NicatParameters {
    "@type"?: "afni/nicat";
    "stream_spec": string;
    "reopen"?: string | null | undefined;
    "copy_stream": boolean;
    "read_only": boolean;
}
type NicatParametersTagged = Required<Pick<NicatParameters, '@type'>> & NicatParameters;


/**
 * Output object returned when calling `NicatParameters(...)`.
 *
 * @interface
 */
interface NicatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param stream_spec Stream specification (e.g., tcp:localhost:4444)
 * @param reopen Reopen the stream after connection to the stream specified by the given value.
 * @param copy_stream Copy the stream to stdout instead; the 'streamspec' will be opened for reading.
 * @param read_only Read the stream but don't copy to stdout.
 *
 * @returns Parameter dictionary
 */
function nicat_params(
    stream_spec: string,
    reopen: string | null = null,
    copy_stream: boolean = false,
    read_only: boolean = false,
): NicatParametersTagged {
    const params = {
        "@type": "afni/nicat" as const,
        "stream_spec": stream_spec,
        "copy_stream": copy_stream,
        "read_only": read_only,
    };
    if (reopen !== null) {
        params["reopen"] = reopen;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function nicat_cargs(
    params: NicatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("nicat");
    cargs.push((params["stream_spec"] ?? null));
    if ((params["reopen"] ?? null) !== null) {
        cargs.push(
            "-reopen",
            (params["reopen"] ?? null)
        );
    }
    if ((params["copy_stream"] ?? false)) {
        cargs.push("-r");
    }
    if ((params["read_only"] ?? false)) {
        cargs.push("-R");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function nicat_outputs(
    params: NicatParameters,
    execution: Execution,
): NicatOutputs {
    const ret: NicatOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * nicat
 *
 * Copies stdin to the NIML stream, which will be opened for writing.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NicatOutputs`).
 */
function nicat_execute(
    params: NicatParameters,
    runner: Runner | null = null,
): NicatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NICAT_METADATA);
    params = execution.params(params)
    const cargs = nicat_cargs(params, execution)
    const ret = nicat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * nicat
 *
 * Copies stdin to the NIML stream, which will be opened for writing.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param stream_spec Stream specification (e.g., tcp:localhost:4444)
 * @param reopen Reopen the stream after connection to the stream specified by the given value.
 * @param copy_stream Copy the stream to stdout instead; the 'streamspec' will be opened for reading.
 * @param read_only Read the stream but don't copy to stdout.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NicatOutputs`).
 */
function nicat(
    stream_spec: string,
    reopen: string | null = null,
    copy_stream: boolean = false,
    read_only: boolean = false,
    runner: Runner | null = null,
): NicatOutputs {
    const params = nicat_params(stream_spec, reopen, copy_stream, read_only)
    return nicat_execute(params, runner);
}


export {
      NICAT_METADATA,
      NicatOutputs,
      nicat,
      nicat_execute,
      nicat_params,
};
