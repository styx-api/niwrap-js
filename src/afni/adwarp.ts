// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADWARP_METADATA: Metadata = {
    id: "413bf38a029233ae4ba1804c69eaac899c1142cf.boutiques",
    name: "adwarp",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdwarpParameters {
    "@type": "afni.adwarp";
    "apar": InputPathType;
    "dpar": string;
    "prefix"?: string | null | undefined;
    "dxyz"?: number | null | undefined;
    "verbose": boolean;
    "force": boolean;
    "resam"?: string | null | undefined;
    "thr"?: string | null | undefined;
    "func"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.adwarp": adwarp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.adwarp": adwarp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adwarp(...)`.
 *
 * @interface
 */
interface AdwarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset header file
     */
    header_output: OutputPathType | null;
    /**
     * Output dataset brick file
     */
    brick_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param apar Set the anat parent dataset (nonoptional)
 * @param dpar Set the data parent dataset (nonoptional). dset may contain a sub-brick selector, e.g., -dpar 'dset+orig[2,5,7]'
 * @param prefix Set the prefix for the output dataset. Default is the prefix of 'dset'.
 * @param dxyz Set the grid spacing in the output dataset. Default is 1 mm.
 * @param verbose Print out progress reports.
 * @param force Write out result even if it means deleting an existing dataset. Default is not to overwrite.
 * @param resam Set resampling mode for all sub-bricks. Modes: NN (Nearest Neighbor), Li (Linear Interpolation), Cu (Cubic Interpolation), Bk (Blocky Interpolation). Default is Li for all sub-bricks.
 * @param thr Set resampling mode for threshold sub-bricks. Modes: NN (Nearest Neighbor), Li (Linear Interpolation), Cu (Cubic Interpolation), Bk (Blocky Interpolation).
 * @param func Set resampling mode for functional sub-bricks. Modes: NN (Nearest Neighbor), Li (Linear Interpolation), Cu (Cubic Interpolation), Bk (Blocky Interpolation).
 *
 * @returns Parameter dictionary
 */
function adwarp_params(
    apar: InputPathType,
    dpar: string,
    prefix: string | null = null,
    dxyz: number | null = null,
    verbose: boolean = false,
    force: boolean = false,
    resam: string | null = null,
    thr: string | null = null,
    func: string | null = null,
): AdwarpParameters {
    const params = {
        "@type": "afni.adwarp" as const,
        "apar": apar,
        "dpar": dpar,
        "verbose": verbose,
        "force": force,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (dxyz !== null) {
        params["dxyz"] = dxyz;
    }
    if (resam !== null) {
        params["resam"] = resam;
    }
    if (thr !== null) {
        params["thr"] = thr;
    }
    if (func !== null) {
        params["func"] = func;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function adwarp_cargs(
    params: AdwarpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("adwarp");
    cargs.push(
        "-apar",
        execution.inputFile((params["apar"] ?? null))
    );
    cargs.push(
        "-dpar",
        (params["dpar"] ?? null)
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["dxyz"] ?? null) !== null) {
        cargs.push(
            "-dxyz",
            String((params["dxyz"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verbose");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["resam"] ?? null) !== null) {
        cargs.push(
            "-resam",
            (params["resam"] ?? null)
        );
    }
    if ((params["thr"] ?? null) !== null) {
        cargs.push(
            "-thr",
            (params["thr"] ?? null)
        );
    }
    if ((params["func"] ?? null) !== null) {
        cargs.push(
            "-func",
            (params["func"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function adwarp_outputs(
    params: AdwarpParameters,
    execution: Execution,
): AdwarpOutputs {
    const ret: AdwarpOutputs = {
        root: execution.outputFile("."),
        header_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".HEAD"].join('')) : null,
        brick_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * adwarp
 *
 * Resamples a 'data parent' dataset to the grid defined by an 'anat parent' dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdwarpOutputs`).
 */
function adwarp_execute(
    params: AdwarpParameters,
    runner: Runner | null = null,
): AdwarpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADWARP_METADATA);
    params = execution.params(params)
    const cargs = adwarp_cargs(params, execution)
    const ret = adwarp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * adwarp
 *
 * Resamples a 'data parent' dataset to the grid defined by an 'anat parent' dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param apar Set the anat parent dataset (nonoptional)
 * @param dpar Set the data parent dataset (nonoptional). dset may contain a sub-brick selector, e.g., -dpar 'dset+orig[2,5,7]'
 * @param prefix Set the prefix for the output dataset. Default is the prefix of 'dset'.
 * @param dxyz Set the grid spacing in the output dataset. Default is 1 mm.
 * @param verbose Print out progress reports.
 * @param force Write out result even if it means deleting an existing dataset. Default is not to overwrite.
 * @param resam Set resampling mode for all sub-bricks. Modes: NN (Nearest Neighbor), Li (Linear Interpolation), Cu (Cubic Interpolation), Bk (Blocky Interpolation). Default is Li for all sub-bricks.
 * @param thr Set resampling mode for threshold sub-bricks. Modes: NN (Nearest Neighbor), Li (Linear Interpolation), Cu (Cubic Interpolation), Bk (Blocky Interpolation).
 * @param func Set resampling mode for functional sub-bricks. Modes: NN (Nearest Neighbor), Li (Linear Interpolation), Cu (Cubic Interpolation), Bk (Blocky Interpolation).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdwarpOutputs`).
 */
function adwarp(
    apar: InputPathType,
    dpar: string,
    prefix: string | null = null,
    dxyz: number | null = null,
    verbose: boolean = false,
    force: boolean = false,
    resam: string | null = null,
    thr: string | null = null,
    func: string | null = null,
    runner: Runner | null = null,
): AdwarpOutputs {
    const params = adwarp_params(apar, dpar, prefix, dxyz, verbose, force, resam, thr, func)
    return adwarp_execute(params, runner);
}


export {
      ADWARP_METADATA,
      AdwarpOutputs,
      AdwarpParameters,
      adwarp,
      adwarp_execute,
      adwarp_params,
};
