// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_MAT_SEL_PY_METADATA: Metadata = {
    id: "88fca2178c80442aa63260a3d75da0e0c0b65a59.boutiques",
    name: "fat_mat_sel.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatMatSelPyParameters {
    "__STYXTYPE__": "fat_mat_sel.py";
    "parameters": string;
    "matr_in"?: string | null | undefined;
    "list_match"?: InputPathType | null | undefined;
    "out_ind_matr": boolean;
    "out_ind_1ddset": boolean;
    "hold_image": boolean;
    "extern_labs_no": boolean;
    "type_file"?: string | null | undefined;
    "dpi_file"?: number | null | undefined;
    "xlen_file"?: number | null | undefined;
    "ylen_file"?: number | null | undefined;
    "tight_layout_on": boolean;
    "fig_off": boolean;
    "size_font"?: number | null | undefined;
    "lab_size_font"?: number | null | undefined;
    "a_plotmin"?: number | null | undefined;
    "b_plotmax"?: number | null | undefined;
    "cbar_off": boolean;
    "map_of_colors"?: string | null | undefined;
    "cbar_int_num"?: number | null | undefined;
    "width_cbar_perc"?: number | null | undefined;
    "specifier"?: string | null | undefined;
    "xtick_lab_off": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fat_mat_sel.py": fat_mat_sel_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fat_mat_sel.py": fat_mat_sel_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_mat_sel_py(...)`.
 *
 * @interface
 */
interface FatMatSelPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Individual images of matrix plots.
     */
    individual_images: OutputPathType;
    /**
     * Output matrix grid files.
     */
    matrix_grids: OutputPathType;
    /**
     * Output 1D dataset files.
     */
    v_1_d_dsets: OutputPathType;
}


function fat_mat_sel_py_params(
    parameters: string,
    matr_in: string | null = null,
    list_match: InputPathType | null = null,
    out_ind_matr: boolean = false,
    out_ind_1ddset: boolean = false,
    hold_image: boolean = false,
    extern_labs_no: boolean = false,
    type_file: string | null = null,
    dpi_file: number | null = null,
    xlen_file: number | null = null,
    ylen_file: number | null = null,
    tight_layout_on: boolean = false,
    fig_off: boolean = false,
    size_font: number | null = null,
    lab_size_font: number | null = null,
    a_plotmin: number | null = null,
    b_plotmax: number | null = null,
    cbar_off: boolean = false,
    map_of_colors: string | null = null,
    cbar_int_num: number | null = null,
    width_cbar_perc: number | null = null,
    specifier: string | null = null,
    xtick_lab_off: boolean = false,
): FatMatSelPyParameters {
    /**
     * Build parameters.
    
     * @param parameters Supply names of parameters, separated by whitespace, for selecting from a matrix file
     * @param matr_in Provide the set of matrix (*.grid or *.netcc) files by searchable path. This can be a globbable entry in quotes containing wildcard characters.
     * @param list_match Provide the matrix (*.grid or *.netcc) files by explicit path, matched per file with a CSV subject ID.
     * @param out_ind_matr Output individual matrix files of properties.
     * @param out_ind_1ddset Output as a 1D dset, more easily readable by other programs.
     * @param hold_image Switch to hold the Python-produced image on the output screen until a key has been hit.
     * @param extern_labs_no Switch to turn off the usage of user-defined labels in the *.grid/*.netcc files.
     * @param type_file Select image format type (e.g., jpg, png, pdf).
     * @param dpi_file Set resolution (dots per inch) of output image.
     * @param xlen_file Horizontal dimension of output saved image, in units of inches.
     * @param ylen_file Vertical dimension of output saved image, in units of inches.
     * @param tight_layout_on Use matplotlib's tight_layout() option to ensure no overlap of features in the image.
     * @param fig_off Switch if you don't want matrix figure output.
     * @param size_font Set font size for colorbar and title.
     * @param lab_size_font Set font size for x- and y-axis labels.
     * @param a_plotmin Minimum colorbar value.
     * @param b_plotmax Maximum colorbar value.
     * @param cbar_off Switch to not include a colorbar at the right side of the plot.
     * @param map_of_colors Change the colormap style used in the plot.
     * @param cbar_int_num Set the number of intervals on the colorbar.
     * @param width_cbar_perc Width of colorbar as percentage of width of the correlation matrix.
     * @param specifier Specify number formatting for the colorbar numbers (e.g., '%.4f' for four decimal places).
     * @param xtick_lab_off Switch to turn off labels along the x- (horizontal) axis but leave those along the y- (vertical) axis.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fat_mat_sel.py" as const,
        "parameters": parameters,
        "out_ind_matr": out_ind_matr,
        "out_ind_1ddset": out_ind_1ddset,
        "hold_image": hold_image,
        "extern_labs_no": extern_labs_no,
        "tight_layout_on": tight_layout_on,
        "fig_off": fig_off,
        "cbar_off": cbar_off,
        "xtick_lab_off": xtick_lab_off,
    };
    if (matr_in !== null) {
        params["matr_in"] = matr_in;
    }
    if (list_match !== null) {
        params["list_match"] = list_match;
    }
    if (type_file !== null) {
        params["type_file"] = type_file;
    }
    if (dpi_file !== null) {
        params["dpi_file"] = dpi_file;
    }
    if (xlen_file !== null) {
        params["xlen_file"] = xlen_file;
    }
    if (ylen_file !== null) {
        params["ylen_file"] = ylen_file;
    }
    if (size_font !== null) {
        params["size_font"] = size_font;
    }
    if (lab_size_font !== null) {
        params["lab_size_font"] = lab_size_font;
    }
    if (a_plotmin !== null) {
        params["a_plotmin"] = a_plotmin;
    }
    if (b_plotmax !== null) {
        params["b_plotmax"] = b_plotmax;
    }
    if (map_of_colors !== null) {
        params["map_of_colors"] = map_of_colors;
    }
    if (cbar_int_num !== null) {
        params["cbar_int_num"] = cbar_int_num;
    }
    if (width_cbar_perc !== null) {
        params["width_cbar_perc"] = width_cbar_perc;
    }
    if (specifier !== null) {
        params["specifier"] = specifier;
    }
    return params;
}


function fat_mat_sel_py_cargs(
    params: FatMatSelPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fat_mat_sel.py");
    cargs.push(
        "--Pars",
        (params["parameters"] ?? null)
    );
    if ((params["matr_in"] ?? null) !== null) {
        cargs.push(
            "--matr_in",
            (params["matr_in"] ?? null)
        );
    }
    if ((params["list_match"] ?? null) !== null) {
        cargs.push(
            "--list_match",
            execution.inputFile((params["list_match"] ?? null))
        );
    }
    if ((params["out_ind_matr"] ?? null)) {
        cargs.push("--out_ind_matr");
    }
    if ((params["out_ind_1ddset"] ?? null)) {
        cargs.push("--Out_ind_1ddset");
    }
    if ((params["hold_image"] ?? null)) {
        cargs.push("--Hold_image");
    }
    if ((params["extern_labs_no"] ?? null)) {
        cargs.push("--ExternLabsNo");
    }
    if ((params["type_file"] ?? null) !== null) {
        cargs.push(
            "--type_file",
            (params["type_file"] ?? null)
        );
    }
    if ((params["dpi_file"] ?? null) !== null) {
        cargs.push(
            "--dpi_file",
            String((params["dpi_file"] ?? null))
        );
    }
    if ((params["xlen_file"] ?? null) !== null) {
        cargs.push(
            "--xlen_file",
            String((params["xlen_file"] ?? null))
        );
    }
    if ((params["ylen_file"] ?? null) !== null) {
        cargs.push(
            "--ylen_file",
            String((params["ylen_file"] ?? null))
        );
    }
    if ((params["tight_layout_on"] ?? null)) {
        cargs.push("--Tight_layout_on");
    }
    if ((params["fig_off"] ?? null)) {
        cargs.push("--Fig_off");
    }
    if ((params["size_font"] ?? null) !== null) {
        cargs.push(
            "--Size_font",
            String((params["size_font"] ?? null))
        );
    }
    if ((params["lab_size_font"] ?? null) !== null) {
        cargs.push(
            "--Lab_size_font",
            String((params["lab_size_font"] ?? null))
        );
    }
    if ((params["a_plotmin"] ?? null) !== null) {
        cargs.push(
            "--A_plotmin",
            String((params["a_plotmin"] ?? null))
        );
    }
    if ((params["b_plotmax"] ?? null) !== null) {
        cargs.push(
            "--B_plotmax",
            String((params["b_plotmax"] ?? null))
        );
    }
    if ((params["cbar_off"] ?? null)) {
        cargs.push("--Cbar_off");
    }
    if ((params["map_of_colors"] ?? null) !== null) {
        cargs.push(
            "--Map_of_colors",
            (params["map_of_colors"] ?? null)
        );
    }
    if ((params["cbar_int_num"] ?? null) !== null) {
        cargs.push(
            "--cbar_int_num",
            String((params["cbar_int_num"] ?? null))
        );
    }
    if ((params["width_cbar_perc"] ?? null) !== null) {
        cargs.push(
            "--width_cbar_perc",
            String((params["width_cbar_perc"] ?? null))
        );
    }
    if ((params["specifier"] ?? null) !== null) {
        cargs.push(
            "--specifier",
            (params["specifier"] ?? null)
        );
    }
    if ((params["xtick_lab_off"] ?? null)) {
        cargs.push("--Xtick_lab_off");
    }
    return cargs;
}


function fat_mat_sel_py_outputs(
    params: FatMatSelPyParameters,
    execution: Execution,
): FatMatSelPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FatMatSelPyOutputs = {
        root: execution.outputFile("."),
        individual_images: execution.outputFile(["individual_images/*"].join('')),
        matrix_grids: execution.outputFile(["matrix_grids/*"].join('')),
        v_1_d_dsets: execution.outputFile(["1D_dsets/*"].join('')),
    };
    return ret;
}


function fat_mat_sel_py_execute(
    params: FatMatSelPyParameters,
    execution: Execution,
): FatMatSelPyOutputs {
    /**
     * Perform simple matrix plotting operations from outputs of FATCAT programs 3dNetCorr and 3dTrackID.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FatMatSelPyOutputs`).
     */
    params = execution.params(params)
    const cargs = fat_mat_sel_py_cargs(params, execution)
    const ret = fat_mat_sel_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fat_mat_sel_py(
    parameters: string,
    matr_in: string | null = null,
    list_match: InputPathType | null = null,
    out_ind_matr: boolean = false,
    out_ind_1ddset: boolean = false,
    hold_image: boolean = false,
    extern_labs_no: boolean = false,
    type_file: string | null = null,
    dpi_file: number | null = null,
    xlen_file: number | null = null,
    ylen_file: number | null = null,
    tight_layout_on: boolean = false,
    fig_off: boolean = false,
    size_font: number | null = null,
    lab_size_font: number | null = null,
    a_plotmin: number | null = null,
    b_plotmax: number | null = null,
    cbar_off: boolean = false,
    map_of_colors: string | null = null,
    cbar_int_num: number | null = null,
    width_cbar_perc: number | null = null,
    specifier: string | null = null,
    xtick_lab_off: boolean = false,
    runner: Runner | null = null,
): FatMatSelPyOutputs {
    /**
     * Perform simple matrix plotting operations from outputs of FATCAT programs 3dNetCorr and 3dTrackID.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param parameters Supply names of parameters, separated by whitespace, for selecting from a matrix file
     * @param matr_in Provide the set of matrix (*.grid or *.netcc) files by searchable path. This can be a globbable entry in quotes containing wildcard characters.
     * @param list_match Provide the matrix (*.grid or *.netcc) files by explicit path, matched per file with a CSV subject ID.
     * @param out_ind_matr Output individual matrix files of properties.
     * @param out_ind_1ddset Output as a 1D dset, more easily readable by other programs.
     * @param hold_image Switch to hold the Python-produced image on the output screen until a key has been hit.
     * @param extern_labs_no Switch to turn off the usage of user-defined labels in the *.grid/*.netcc files.
     * @param type_file Select image format type (e.g., jpg, png, pdf).
     * @param dpi_file Set resolution (dots per inch) of output image.
     * @param xlen_file Horizontal dimension of output saved image, in units of inches.
     * @param ylen_file Vertical dimension of output saved image, in units of inches.
     * @param tight_layout_on Use matplotlib's tight_layout() option to ensure no overlap of features in the image.
     * @param fig_off Switch if you don't want matrix figure output.
     * @param size_font Set font size for colorbar and title.
     * @param lab_size_font Set font size for x- and y-axis labels.
     * @param a_plotmin Minimum colorbar value.
     * @param b_plotmax Maximum colorbar value.
     * @param cbar_off Switch to not include a colorbar at the right side of the plot.
     * @param map_of_colors Change the colormap style used in the plot.
     * @param cbar_int_num Set the number of intervals on the colorbar.
     * @param width_cbar_perc Width of colorbar as percentage of width of the correlation matrix.
     * @param specifier Specify number formatting for the colorbar numbers (e.g., '%.4f' for four decimal places).
     * @param xtick_lab_off Switch to turn off labels along the x- (horizontal) axis but leave those along the y- (vertical) axis.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FatMatSelPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_MAT_SEL_PY_METADATA);
    const params = fat_mat_sel_py_params(parameters, matr_in, list_match, out_ind_matr, out_ind_1ddset, hold_image, extern_labs_no, type_file, dpi_file, xlen_file, ylen_file, tight_layout_on, fig_off, size_font, lab_size_font, a_plotmin, b_plotmax, cbar_off, map_of_colors, cbar_int_num, width_cbar_perc, specifier, xtick_lab_off)
    return fat_mat_sel_py_execute(params, execution);
}


export {
      FAT_MAT_SEL_PY_METADATA,
      FatMatSelPyOutputs,
      FatMatSelPyParameters,
      fat_mat_sel_py,
      fat_mat_sel_py_params,
};
