// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GCAPREPONE_METADATA: Metadata = {
    id: "940518fccb866cf95e928c8f745beb1878a0cb61.boutiques",
    name: "gcaprepone",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GcapreponeParameters {
    "@type": "freesurfer.gcaprepone";
    "gcadir": string;
    "subject": string;
    "init_subject": boolean;
    "source_subjects_dir": string;
    "done_file": string;
    "no_emreg": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.gcaprepone": gcaprepone_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gcaprepone(...)`.
 *
 * @interface
 */
interface GcapreponeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param gcadir Directory to be the new SUBJECTS_DIR
 * @param subject Subject for the process
 * @param source_subjects_dir SUBJECTS_DIR for source data
 * @param done_file File to indicate completion
 * @param init_subject Flag indicating the initial subject
 * @param no_emreg Flag to skip EM registration
 *
 * @returns Parameter dictionary
 */
function gcaprepone_params(
    gcadir: string,
    subject: string,
    source_subjects_dir: string,
    done_file: string,
    init_subject: boolean = false,
    no_emreg: boolean = false,
): GcapreponeParameters {
    const params = {
        "@type": "freesurfer.gcaprepone" as const,
        "gcadir": gcadir,
        "subject": subject,
        "init_subject": init_subject,
        "source_subjects_dir": source_subjects_dir,
        "done_file": done_file,
        "no_emreg": no_emreg,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gcaprepone_cargs(
    params: GcapreponeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gcaprepone");
    cargs.push(
        "--o",
        (params["gcadir"] ?? null)
    );
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["init_subject"] ?? null)) {
        cargs.push("--init-subject");
    }
    cargs.push(
        "--sd",
        (params["source_subjects_dir"] ?? null)
    );
    cargs.push(
        "--done",
        (params["done_file"] ?? null)
    );
    if ((params["no_emreg"] ?? null)) {
        cargs.push("--no-emreg");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gcaprepone_outputs(
    params: GcapreponeParameters,
    execution: Execution,
): GcapreponeOutputs {
    const ret: GcapreponeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * gcaprepone
 *
 * Tool for preparing FreeSurfer subjects for use with group-wise template generation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GcapreponeOutputs`).
 */
function gcaprepone_execute(
    params: GcapreponeParameters,
    runner: Runner | null = null,
): GcapreponeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GCAPREPONE_METADATA);
    params = execution.params(params)
    const cargs = gcaprepone_cargs(params, execution)
    const ret = gcaprepone_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * gcaprepone
 *
 * Tool for preparing FreeSurfer subjects for use with group-wise template generation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param gcadir Directory to be the new SUBJECTS_DIR
 * @param subject Subject for the process
 * @param source_subjects_dir SUBJECTS_DIR for source data
 * @param done_file File to indicate completion
 * @param init_subject Flag indicating the initial subject
 * @param no_emreg Flag to skip EM registration
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GcapreponeOutputs`).
 */
function gcaprepone(
    gcadir: string,
    subject: string,
    source_subjects_dir: string,
    done_file: string,
    init_subject: boolean = false,
    no_emreg: boolean = false,
    runner: Runner | null = null,
): GcapreponeOutputs {
    const params = gcaprepone_params(gcadir, subject, source_subjects_dir, done_file, init_subject, no_emreg)
    return gcaprepone_execute(params, runner);
}


export {
      GCAPREPONE_METADATA,
      GcapreponeOutputs,
      GcapreponeParameters,
      gcaprepone,
      gcaprepone_execute,
      gcaprepone_params,
};
