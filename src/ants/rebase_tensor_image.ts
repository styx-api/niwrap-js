// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REBASE_TENSOR_IMAGE_METADATA: Metadata = {
    id: "cb7dc4431e44610b96f7d5021a64651fd63ad535.boutiques",
    name: "RebaseTensorImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface RebaseTensorImageParameters {
    "__STYXTYPE__": "RebaseTensorImage";
    "dimension": number;
    "infile": InputPathType;
    "outfile": InputPathType;
    "method": "PHYSICAL" | "LOCAL";
    "reference"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "RebaseTensorImage": rebase_tensor_image_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "RebaseTensorImage": rebase_tensor_image_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rebase_tensor_image(...)`.
 *
 * @interface
 */
interface RebaseTensorImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The rebased tensor image.
     */
    rebased_image: OutputPathType;
}


function rebase_tensor_image_params(
    dimension: number,
    infile: InputPathType,
    outfile: InputPathType,
    method: "PHYSICAL" | "LOCAL",
    reference: InputPathType | null = null,
): RebaseTensorImageParameters {
    /**
     * Build parameters.
    
     * @param dimension The dimensionality of the input image.
     * @param infile The input image file.
     * @param outfile The output image file.
     * @param method Method of rebasing the tensor image.
     * @param reference Reference image file (required if PHYSICAL or LOCAL method is chosen).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "RebaseTensorImage" as const,
        "dimension": dimension,
        "infile": infile,
        "outfile": outfile,
        "method": method,
    };
    if (reference !== null) {
        params["reference"] = reference;
    }
    return params;
}


function rebase_tensor_image_cargs(
    params: RebaseTensorImageParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("RebaseTensorImage");
    cargs.push(String((params["dimension"] ?? null)));
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push(execution.inputFile((params["outfile"] ?? null)));
    cargs.push((params["method"] ?? null));
    if ((params["reference"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["reference"] ?? null)));
    }
    return cargs;
}


function rebase_tensor_image_outputs(
    params: RebaseTensorImageParameters,
    execution: Execution,
): RebaseTensorImageOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: RebaseTensorImageOutputs = {
        root: execution.outputFile("."),
        rebased_image: execution.outputFile([path.basename((params["outfile"] ?? null))].join('')),
    };
    return ret;
}


function rebase_tensor_image_execute(
    params: RebaseTensorImageParameters,
    execution: Execution,
): RebaseTensorImageOutputs {
    /**
     * Rebase Tensor Image using specified dimensionality and method.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `RebaseTensorImageOutputs`).
     */
    params = execution.params(params)
    const cargs = rebase_tensor_image_cargs(params, execution)
    const ret = rebase_tensor_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function rebase_tensor_image(
    dimension: number,
    infile: InputPathType,
    outfile: InputPathType,
    method: "PHYSICAL" | "LOCAL",
    reference: InputPathType | null = null,
    runner: Runner | null = null,
): RebaseTensorImageOutputs {
    /**
     * Rebase Tensor Image using specified dimensionality and method.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param dimension The dimensionality of the input image.
     * @param infile The input image file.
     * @param outfile The output image file.
     * @param method Method of rebasing the tensor image.
     * @param reference Reference image file (required if PHYSICAL or LOCAL method is chosen).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `RebaseTensorImageOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REBASE_TENSOR_IMAGE_METADATA);
    const params = rebase_tensor_image_params(dimension, infile, outfile, method, reference)
    return rebase_tensor_image_execute(params, execution);
}


export {
      REBASE_TENSOR_IMAGE_METADATA,
      RebaseTensorImageOutputs,
      RebaseTensorImageParameters,
      rebase_tensor_image,
      rebase_tensor_image_params,
};
