// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_BPORT_METADATA: Metadata = {
    id: "e86067e347d4697d20b355f11b8c7e19e25b7438.boutiques",
    name: "1dBport",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dBportParameters {
    "@type"?: "afni/1dBport";
    "band": Array<number>;
    "invert": boolean;
    "nozero": boolean;
    "noconst": boolean;
    "quad": boolean;
    "input_dataset"?: InputPathType | null | undefined;
    "input_1d_file"?: InputPathType | null | undefined;
    "nodata"?: Array<number> | null | undefined;
    "tr"?: number | null | undefined;
    "concat"?: InputPathType | null | undefined;
}
type V1dBportParametersTagged = Required<Pick<V1dBportParameters, '@type'>> & V1dBportParameters;


/**
 * Output object returned when calling `V1dBportParameters(...)`.
 *
 * @interface
 */
interface V1dBportOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Standard output file written by the tool
     */
    stdout: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param band Specify lowest and highest frequencies in the passband.
 * @param invert Invert the selection after computing which frequency indexes correspond to the input band(s).
 * @param nozero Do NOT generate the 0 frequency (constant) component when fbot = 0.
 * @param noconst Same as -nozero. Do NOT generate the 0 frequency (constant) component when fbot = 0.
 * @param quad Add regressors for linear and quadratic trends.
 * @param input_dataset Specify the dataset input.
 * @param input_1d_file Specify the 1D input file.
 * @param nodata Specify the number of time points and optionally TR value for the simulation.
 * @param tr Set the time step duration.
 * @param concat Specify the list of start indexes for concatenated runs.
 *
 * @returns Parameter dictionary
 */
function v_1d_bport_params(
    band: Array<number>,
    invert: boolean = false,
    nozero: boolean = false,
    noconst: boolean = false,
    quad: boolean = false,
    input_dataset: InputPathType | null = null,
    input_1d_file: InputPathType | null = null,
    nodata: Array<number> | null = null,
    tr: number | null = null,
    concat: InputPathType | null = null,
): V1dBportParametersTagged {
    const params = {
        "@type": "afni/1dBport" as const,
        "band": band,
        "invert": invert,
        "nozero": nozero,
        "noconst": noconst,
        "quad": quad,
    };
    if (input_dataset !== null) {
        params["input_dataset"] = input_dataset;
    }
    if (input_1d_file !== null) {
        params["input_1d_file"] = input_1d_file;
    }
    if (nodata !== null) {
        params["nodata"] = nodata;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (concat !== null) {
        params["concat"] = concat;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1d_bport_cargs(
    params: V1dBportParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dBport");
    cargs.push(
        "-band",
        ...(params["band"] ?? null).map(String)
    );
    if ((params["invert"] ?? false)) {
        cargs.push("-invert");
    }
    if ((params["nozero"] ?? false)) {
        cargs.push("-nozero");
    }
    if ((params["noconst"] ?? false)) {
        cargs.push("-noconst");
    }
    if ((params["quad"] ?? false)) {
        cargs.push("-quad");
    }
    if ((params["input_dataset"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["input_dataset"] ?? null))
        );
    }
    if ((params["input_1d_file"] ?? null) !== null) {
        cargs.push(
            "-input1D",
            execution.inputFile((params["input_1d_file"] ?? null))
        );
    }
    if ((params["nodata"] ?? null) !== null) {
        cargs.push(
            "-nodata",
            ...(params["nodata"] ?? null).map(String)
        );
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-TR",
            String((params["tr"] ?? null))
        );
    }
    if ((params["concat"] ?? null) !== null) {
        cargs.push(
            "-concat",
            execution.inputFile((params["concat"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1d_bport_outputs(
    params: V1dBportParameters,
    execution: Execution,
): V1dBportOutputs {
    const ret: V1dBportOutputs = {
        root: execution.outputFile("."),
        stdout: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * 1dBport
 *
 * Creates a set of columns of sines and cosines for bandpassing via regression.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dBportOutputs`).
 */
function v_1d_bport_execute(
    params: V1dBportParameters,
    runner: Runner | null = null,
): V1dBportOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_BPORT_METADATA);
    params = execution.params(params)
    const cargs = v_1d_bport_cargs(params, execution)
    const ret = v_1d_bport_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 1dBport
 *
 * Creates a set of columns of sines and cosines for bandpassing via regression.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param band Specify lowest and highest frequencies in the passband.
 * @param invert Invert the selection after computing which frequency indexes correspond to the input band(s).
 * @param nozero Do NOT generate the 0 frequency (constant) component when fbot = 0.
 * @param noconst Same as -nozero. Do NOT generate the 0 frequency (constant) component when fbot = 0.
 * @param quad Add regressors for linear and quadratic trends.
 * @param input_dataset Specify the dataset input.
 * @param input_1d_file Specify the 1D input file.
 * @param nodata Specify the number of time points and optionally TR value for the simulation.
 * @param tr Set the time step duration.
 * @param concat Specify the list of start indexes for concatenated runs.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dBportOutputs`).
 */
function v_1d_bport(
    band: Array<number>,
    invert: boolean = false,
    nozero: boolean = false,
    noconst: boolean = false,
    quad: boolean = false,
    input_dataset: InputPathType | null = null,
    input_1d_file: InputPathType | null = null,
    nodata: Array<number> | null = null,
    tr: number | null = null,
    concat: InputPathType | null = null,
    runner: Runner | null = null,
): V1dBportOutputs {
    const params = v_1d_bport_params(band, invert, nozero, noconst, quad, input_dataset, input_1d_file, nodata, tr, concat)
    return v_1d_bport_execute(params, runner);
}


export {
      V1dBportOutputs,
      V_1D_BPORT_METADATA,
      v_1d_bport,
      v_1d_bport_execute,
      v_1d_bport_params,
};
