// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_CLIP_LEVEL_METADATA: Metadata = {
    id: "fd4a8baf337596ea9a1bc436e3a61d90b89ee692.boutiques",
    name: "3dClipLevel",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dClipLevelParameters {
    "@type"?: "afni/3dClipLevel";
    "dataset": InputPathType;
    "mfrac"?: number | null | undefined;
    "doall": boolean;
    "grad"?: string | null | undefined;
}
type V3dClipLevelParametersTagged = Required<Pick<V3dClipLevelParameters, '@type'>> & V3dClipLevelParameters;


/**
 * Output object returned when calling `V3dClipLevelParameters(...)`.
 *
 * @interface
 */
interface V3dClipLevelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dataset Input dataset (e.g. dataset.nii.gz)
 * @param mfrac Use the number ff instead of 0.50 in the algorithm.
 * @param doall Apply the algorithm to each sub-brick separately.
 * @param grad Compute a 'gradual' clip level as a function of voxel position and output to a dataset with the given prefix.
 *
 * @returns Parameter dictionary
 */
function v_3d_clip_level_params(
    dataset: InputPathType,
    mfrac: number | null = null,
    doall: boolean = false,
    grad: string | null = null,
): V3dClipLevelParametersTagged {
    const params = {
        "@type": "afni/3dClipLevel" as const,
        "dataset": dataset,
        "doall": doall,
    };
    if (mfrac !== null) {
        params["mfrac"] = mfrac;
    }
    if (grad !== null) {
        params["grad"] = grad;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_clip_level_cargs(
    params: V3dClipLevelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dClipLevel");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    if ((params["mfrac"] ?? null) !== null) {
        cargs.push(
            "-mfrac",
            String((params["mfrac"] ?? null))
        );
    }
    if ((params["doall"] ?? false)) {
        cargs.push("-doall");
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            (params["grad"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_clip_level_outputs(
    params: V3dClipLevelParameters,
    execution: Execution,
): V3dClipLevelOutputs {
    const ret: V3dClipLevelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 3dClipLevel
 *
 * Estimates the value at which to clip the anatomical dataset so that background regions are set to zero.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dClipLevelOutputs`).
 */
function v_3d_clip_level_execute(
    params: V3dClipLevelParameters,
    runner: Runner | null = null,
): V3dClipLevelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_CLIP_LEVEL_METADATA);
    params = execution.params(params)
    const cargs = v_3d_clip_level_cargs(params, execution)
    const ret = v_3d_clip_level_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dClipLevel
 *
 * Estimates the value at which to clip the anatomical dataset so that background regions are set to zero.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input dataset (e.g. dataset.nii.gz)
 * @param mfrac Use the number ff instead of 0.50 in the algorithm.
 * @param doall Apply the algorithm to each sub-brick separately.
 * @param grad Compute a 'gradual' clip level as a function of voxel position and output to a dataset with the given prefix.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dClipLevelOutputs`).
 */
function v_3d_clip_level(
    dataset: InputPathType,
    mfrac: number | null = null,
    doall: boolean = false,
    grad: string | null = null,
    runner: Runner | null = null,
): V3dClipLevelOutputs {
    const params = v_3d_clip_level_params(dataset, mfrac, doall, grad)
    return v_3d_clip_level_execute(params, runner);
}


export {
      V3dClipLevelOutputs,
      V_3D_CLIP_LEVEL_METADATA,
      v_3d_clip_level,
      v_3d_clip_level_execute,
      v_3d_clip_level_params,
};
