// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_REG_ANA_METADATA: Metadata = {
    id: "d0f5f9773868694c40c8514ea58aae0c0f7243a6.boutiques",
    name: "3dRegAna",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dRegAnaParameters {
    "@type": "afni.3dRegAna";
    "rows": number;
    "cols": number;
    "xydata": Array<string>;
    "model": string;
    "diskspace": boolean;
    "workmem"?: number | null | undefined;
    "rmsmin"?: number | null | undefined;
    "fdisp"?: number | null | undefined;
    "flof"?: number | null | undefined;
    "fcoef"?: Array<string> | null | undefined;
    "rcoef"?: Array<string> | null | undefined;
    "tcoef"?: Array<string> | null | undefined;
    "bucket"?: string | null | undefined;
    "brick"?: Array<string> | null | undefined;
    "datum"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dRegAna": v_3d_reg_ana_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dRegAna": v_3d_reg_ana_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_reg_ana(...)`.
 *
 * @interface
 */
interface V3dRegAnaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output fift dataset
     */
    output_fift: OutputPathType;
    /**
     * Output fith dataset
     */
    output_fith: OutputPathType;
    /**
     * Output fitt dataset
     */
    output_fitt: OutputPathType;
    /**
     * Output bucket dataset
     */
    output_bucket: OutputPathType;
    /**
     * Output bucket BRIK file
     */
    output_bucket_brik: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param rows Number of input datasets
 * @param cols Number of X variables
 * @param xydata X variables and Y observations
 * @param model Definition of linear regression model: reduced model (Y = f(Xj1,...,Xjr)) and full model (Y = f(Xj1,...,Xjr,Xi1,...,Xiq))
 * @param diskspace Print out disk space required for program execution
 * @param workmem Number of megabytes of RAM to use for statistical workspace  (default = 750)
 * @param rmsmin Minimum rms error to reject constant model
 * @param fdisp Display results for voxels whose F-statistic is > fval
 * @param flof Minimum p value for F due to lack of fit
 * @param fcoef Estimate of kth regression coefficient along with F-test for the regression is written to AFNI `fift` dataset
 * @param rcoef Estimate of kth regression coefficient along with coef. of mult. deter. R^2 is written to AFNI `fith` dataset
 * @param tcoef Estimate of kth regression coefficient along with t-test for the coefficient is written to AFNI `fitt` dataset
 * @param bucket Create one AFNI 'bucket' dataset having n sub-bricks; n=0 creates default output
 * @param brick Specify the contents of the mth sub-brick in the bucket dataset
 * @param datum Write the output in DATUM format. Choose from short (default) or float
 *
 * @returns Parameter dictionary
 */
function v_3d_reg_ana_params(
    rows: number,
    cols: number,
    xydata: Array<string>,
    model: string,
    diskspace: boolean = false,
    workmem: number | null = null,
    rmsmin: number | null = null,
    fdisp: number | null = null,
    flof: number | null = null,
    fcoef: Array<string> | null = null,
    rcoef: Array<string> | null = null,
    tcoef: Array<string> | null = null,
    bucket: string | null = null,
    brick: Array<string> | null = null,
    datum: string | null = null,
): V3dRegAnaParameters {
    const params = {
        "@type": "afni.3dRegAna" as const,
        "rows": rows,
        "cols": cols,
        "xydata": xydata,
        "model": model,
        "diskspace": diskspace,
    };
    if (workmem !== null) {
        params["workmem"] = workmem;
    }
    if (rmsmin !== null) {
        params["rmsmin"] = rmsmin;
    }
    if (fdisp !== null) {
        params["fdisp"] = fdisp;
    }
    if (flof !== null) {
        params["flof"] = flof;
    }
    if (fcoef !== null) {
        params["fcoef"] = fcoef;
    }
    if (rcoef !== null) {
        params["rcoef"] = rcoef;
    }
    if (tcoef !== null) {
        params["tcoef"] = tcoef;
    }
    if (bucket !== null) {
        params["bucket"] = bucket;
    }
    if (brick !== null) {
        params["brick"] = brick;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_reg_ana_cargs(
    params: V3dRegAnaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dRegAna");
    cargs.push(
        "-rows",
        String((params["rows"] ?? null))
    );
    cargs.push(
        "-cols",
        String((params["cols"] ?? null))
    );
    cargs.push(
        "-xydata",
        ...(params["xydata"] ?? null)
    );
    cargs.push(
        "-model",
        (params["model"] ?? null)
    );
    if ((params["diskspace"] ?? null)) {
        cargs.push("-diskspace");
    }
    if ((params["workmem"] ?? null) !== null) {
        cargs.push(
            "-workmem",
            String((params["workmem"] ?? null))
        );
    }
    if ((params["rmsmin"] ?? null) !== null) {
        cargs.push(
            "-rmsmin",
            String((params["rmsmin"] ?? null))
        );
    }
    if ((params["fdisp"] ?? null) !== null) {
        cargs.push(
            "-fdisp",
            String((params["fdisp"] ?? null))
        );
    }
    if ((params["flof"] ?? null) !== null) {
        cargs.push(
            "-flof",
            String((params["flof"] ?? null))
        );
    }
    if ((params["fcoef"] ?? null) !== null) {
        cargs.push(
            "-fcoef",
            ...(params["fcoef"] ?? null)
        );
    }
    if ((params["rcoef"] ?? null) !== null) {
        cargs.push(
            "-rcoef",
            ...(params["rcoef"] ?? null)
        );
    }
    if ((params["tcoef"] ?? null) !== null) {
        cargs.push(
            "-tcoef",
            ...(params["tcoef"] ?? null)
        );
    }
    if ((params["bucket"] ?? null) !== null) {
        cargs.push(
            "-bucket",
            (params["bucket"] ?? null)
        );
    }
    if ((params["brick"] ?? null) !== null) {
        cargs.push(
            "-brick",
            ...(params["brick"] ?? null)
        );
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_reg_ana_outputs(
    params: V3dRegAnaParameters,
    execution: Execution,
): V3dRegAnaOutputs {
    const ret: V3dRegAnaOutputs = {
        root: execution.outputFile("."),
        output_fift: execution.outputFile(["[PREFIX].fift+orig.HEAD"].join('')),
        output_fith: execution.outputFile(["[PREFIX].fith+orig.HEAD"].join('')),
        output_fitt: execution.outputFile(["[PREFIX].fitt+orig.HEAD"].join('')),
        output_bucket: execution.outputFile(["[PREFIX].bucket+orig.HEAD"].join('')),
        output_bucket_brik: execution.outputFile(["[PREFIX].bucket+orig.BRIK"].join('')),
    };
    return ret;
}


/**
 * Multiple linear regression analysis for AFNI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dRegAnaOutputs`).
 */
function v_3d_reg_ana_execute(
    params: V3dRegAnaParameters,
    runner: Runner | null = null,
): V3dRegAnaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_REG_ANA_METADATA);
    params = execution.params(params)
    const cargs = v_3d_reg_ana_cargs(params, execution)
    const ret = v_3d_reg_ana_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Multiple linear regression analysis for AFNI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param rows Number of input datasets
 * @param cols Number of X variables
 * @param xydata X variables and Y observations
 * @param model Definition of linear regression model: reduced model (Y = f(Xj1,...,Xjr)) and full model (Y = f(Xj1,...,Xjr,Xi1,...,Xiq))
 * @param diskspace Print out disk space required for program execution
 * @param workmem Number of megabytes of RAM to use for statistical workspace  (default = 750)
 * @param rmsmin Minimum rms error to reject constant model
 * @param fdisp Display results for voxels whose F-statistic is > fval
 * @param flof Minimum p value for F due to lack of fit
 * @param fcoef Estimate of kth regression coefficient along with F-test for the regression is written to AFNI `fift` dataset
 * @param rcoef Estimate of kth regression coefficient along with coef. of mult. deter. R^2 is written to AFNI `fith` dataset
 * @param tcoef Estimate of kth regression coefficient along with t-test for the coefficient is written to AFNI `fitt` dataset
 * @param bucket Create one AFNI 'bucket' dataset having n sub-bricks; n=0 creates default output
 * @param brick Specify the contents of the mth sub-brick in the bucket dataset
 * @param datum Write the output in DATUM format. Choose from short (default) or float
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dRegAnaOutputs`).
 */
function v_3d_reg_ana(
    rows: number,
    cols: number,
    xydata: Array<string>,
    model: string,
    diskspace: boolean = false,
    workmem: number | null = null,
    rmsmin: number | null = null,
    fdisp: number | null = null,
    flof: number | null = null,
    fcoef: Array<string> | null = null,
    rcoef: Array<string> | null = null,
    tcoef: Array<string> | null = null,
    bucket: string | null = null,
    brick: Array<string> | null = null,
    datum: string | null = null,
    runner: Runner | null = null,
): V3dRegAnaOutputs {
    const params = v_3d_reg_ana_params(rows, cols, xydata, model, diskspace, workmem, rmsmin, fdisp, flof, fcoef, rcoef, tcoef, bucket, brick, datum)
    return v_3d_reg_ana_execute(params, runner);
}


export {
      V3dRegAnaOutputs,
      V3dRegAnaParameters,
      V_3D_REG_ANA_METADATA,
      v_3d_reg_ana,
      v_3d_reg_ana_execute,
      v_3d_reg_ana_params,
};
