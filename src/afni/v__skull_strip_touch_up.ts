// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SKULL_STRIP_TOUCH_UP_METADATA: Metadata = {
    id: "6c2944dd523c28bc9850a8eb4db4c81926ee4298.boutiques",
    name: "@SkullStrip_TouchUp",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VSkullStripTouchUpParameters {
    "@type": "afni.@SkullStrip_TouchUp";
    "prefix": string;
    "brain_dataset": InputPathType;
    "head_dataset": InputPathType;
    "mask_out": boolean;
    "orig_dim": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@SkullStrip_TouchUp": v__skull_strip_touch_up_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@SkullStrip_TouchUp": v__skull_strip_touch_up_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__skull_strip_touch_up(...)`.
 *
 * @interface
 */
interface VSkullStripTouchUpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output folder containing the touch-up results
     */
    output_folder: OutputPathType;
    /**
     * Output binary mask (if -mask_out flag is used)
     */
    output_mask: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Output file and folder name
 * @param brain_dataset Skull stripped data set to touch up
 * @param head_dataset Whole head anatomical data set
 * @param mask_out Output a binary mask in addition to actual data
 * @param orig_dim Edit in the original image dimensions
 * @param help Show this help message
 *
 * @returns Parameter dictionary
 */
function v__skull_strip_touch_up_params(
    prefix: string,
    brain_dataset: InputPathType,
    head_dataset: InputPathType,
    mask_out: boolean = false,
    orig_dim: boolean = false,
    help: boolean = false,
): VSkullStripTouchUpParameters {
    const params = {
        "@type": "afni.@SkullStrip_TouchUp" as const,
        "prefix": prefix,
        "brain_dataset": brain_dataset,
        "head_dataset": head_dataset,
        "mask_out": mask_out,
        "orig_dim": orig_dim,
        "help": help,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__skull_strip_touch_up_cargs(
    params: VSkullStripTouchUpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@SkullStrip_TouchUp");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-brain",
        execution.inputFile((params["brain_dataset"] ?? null))
    );
    cargs.push(
        "-head",
        execution.inputFile((params["head_dataset"] ?? null))
    );
    if ((params["mask_out"] ?? null)) {
        cargs.push("-mask_out");
    }
    if ((params["orig_dim"] ?? null)) {
        cargs.push("-orig_dim");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__skull_strip_touch_up_outputs(
    params: VSkullStripTouchUpParameters,
    execution: Execution,
): VSkullStripTouchUpOutputs {
    const ret: VSkullStripTouchUpOutputs = {
        root: execution.outputFile("."),
        output_folder: execution.outputFile([(params["prefix"] ?? null), "_SS_touch_up"].join('')),
        output_mask: execution.outputFile([(params["prefix"] ?? null), "_mask.nii.gz"].join('')),
    };
    return ret;
}


/**
 * @SkullStrip_TouchUp
 *
 * Helper program to touch up failed skull stripping by resampling data, allowing manual edits, and outputting corrected data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VSkullStripTouchUpOutputs`).
 */
function v__skull_strip_touch_up_execute(
    params: VSkullStripTouchUpParameters,
    runner: Runner | null = null,
): VSkullStripTouchUpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SKULL_STRIP_TOUCH_UP_METADATA);
    params = execution.params(params)
    const cargs = v__skull_strip_touch_up_cargs(params, execution)
    const ret = v__skull_strip_touch_up_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @SkullStrip_TouchUp
 *
 * Helper program to touch up failed skull stripping by resampling data, allowing manual edits, and outputting corrected data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Output file and folder name
 * @param brain_dataset Skull stripped data set to touch up
 * @param head_dataset Whole head anatomical data set
 * @param mask_out Output a binary mask in addition to actual data
 * @param orig_dim Edit in the original image dimensions
 * @param help Show this help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VSkullStripTouchUpOutputs`).
 */
function v__skull_strip_touch_up(
    prefix: string,
    brain_dataset: InputPathType,
    head_dataset: InputPathType,
    mask_out: boolean = false,
    orig_dim: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): VSkullStripTouchUpOutputs {
    const params = v__skull_strip_touch_up_params(prefix, brain_dataset, head_dataset, mask_out, orig_dim, help)
    return v__skull_strip_touch_up_execute(params, runner);
}


export {
      VSkullStripTouchUpOutputs,
      VSkullStripTouchUpParameters,
      V__SKULL_STRIP_TOUCH_UP_METADATA,
      v__skull_strip_touch_up,
      v__skull_strip_touch_up_execute,
      v__skull_strip_touch_up_params,
};
