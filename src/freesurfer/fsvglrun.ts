// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSVGLRUN_METADATA: Metadata = {
    id: "ad655adf03c2f7e801ecfdc1e82750b8a5a683b5.boutiques",
    name: "fsvglrun",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsvglrunParameters {
    "@type": "freesurfer.fsvglrun";
    "zeroth_arg_name"?: string | null | undefined;
    "empty_env": boolean;
    "dashed_arg": boolean;
    "command": string;
    "command_args"?: Array<string> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fsvglrun": fsvglrun_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsvglrun(...)`.
 *
 * @interface
 */
interface FsvglrunOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param command The command to be executed, replacing the shell with the specified program
 * @param zeroth_arg_name Pass NAME as the zeroth argument to COMMAND
 * @param empty_env Execute COMMAND with an empty environment
 * @param dashed_arg Place a dash in the zeroth argument to COMMAND
 * @param command_args Arguments for the command executed by fsvglrun
 *
 * @returns Parameter dictionary
 */
function fsvglrun_params(
    command: string,
    zeroth_arg_name: string | null = null,
    empty_env: boolean = false,
    dashed_arg: boolean = false,
    command_args: Array<string> | null = null,
): FsvglrunParameters {
    const params = {
        "@type": "freesurfer.fsvglrun" as const,
        "empty_env": empty_env,
        "dashed_arg": dashed_arg,
        "command": command,
    };
    if (zeroth_arg_name !== null) {
        params["zeroth_arg_name"] = zeroth_arg_name;
    }
    if (command_args !== null) {
        params["command_args"] = command_args;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fsvglrun_cargs(
    params: FsvglrunParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsvglrun");
    if ((params["zeroth_arg_name"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["zeroth_arg_name"] ?? null)
        );
    }
    if ((params["empty_env"] ?? null)) {
        cargs.push("-c");
    }
    if ((params["dashed_arg"] ?? null)) {
        cargs.push("-l");
    }
    cargs.push((params["command"] ?? null));
    if ((params["command_args"] ?? null) !== null) {
        cargs.push(...(params["command_args"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fsvglrun_outputs(
    params: FsvglrunParameters,
    execution: Execution,
): FsvglrunOutputs {
    const ret: FsvglrunOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool to execute a command, replacing the shell with the specified program, typically used within FreeSurfer environment.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsvglrunOutputs`).
 */
function fsvglrun_execute(
    params: FsvglrunParameters,
    runner: Runner | null = null,
): FsvglrunOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSVGLRUN_METADATA);
    params = execution.params(params)
    const cargs = fsvglrun_cargs(params, execution)
    const ret = fsvglrun_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to execute a command, replacing the shell with the specified program, typically used within FreeSurfer environment.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param command The command to be executed, replacing the shell with the specified program
 * @param zeroth_arg_name Pass NAME as the zeroth argument to COMMAND
 * @param empty_env Execute COMMAND with an empty environment
 * @param dashed_arg Place a dash in the zeroth argument to COMMAND
 * @param command_args Arguments for the command executed by fsvglrun
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsvglrunOutputs`).
 */
function fsvglrun(
    command: string,
    zeroth_arg_name: string | null = null,
    empty_env: boolean = false,
    dashed_arg: boolean = false,
    command_args: Array<string> | null = null,
    runner: Runner | null = null,
): FsvglrunOutputs {
    const params = fsvglrun_params(command, zeroth_arg_name, empty_env, dashed_arg, command_args)
    return fsvglrun_execute(params, runner);
}


export {
      FSVGLRUN_METADATA,
      FsvglrunOutputs,
      FsvglrunParameters,
      fsvglrun,
      fsvglrun_execute,
      fsvglrun_params,
};
