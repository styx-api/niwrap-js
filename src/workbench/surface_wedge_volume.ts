// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_WEDGE_VOLUME_METADATA: Metadata = {
    id: "8717436927797f17b9d73da5d0bf7d4b30311324.boutiques",
    name: "surface-wedge-volume",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceWedgeVolumeParameters {
    "@type": "workbench.surface-wedge-volume";
    "inner_surface": InputPathType;
    "outer_surface": InputPathType;
    "metric": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-wedge-volume": surface_wedge_volume_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-wedge-volume": surface_wedge_volume_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_wedge_volume(...)`.
 *
 * @interface
 */
interface SurfaceWedgeVolumeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param inner_surface the inner surface
 * @param outer_surface the outer surface
 * @param metric the output metric
 *
 * @returns Parameter dictionary
 */
function surface_wedge_volume_params(
    inner_surface: InputPathType,
    outer_surface: InputPathType,
    metric: string,
): SurfaceWedgeVolumeParameters {
    const params = {
        "@type": "workbench.surface-wedge-volume" as const,
        "inner_surface": inner_surface,
        "outer_surface": outer_surface,
        "metric": metric,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_wedge_volume_cargs(
    params: SurfaceWedgeVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-wedge-volume");
    cargs.push(execution.inputFile((params["inner_surface"] ?? null)));
    cargs.push(execution.inputFile((params["outer_surface"] ?? null)));
    cargs.push((params["metric"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_wedge_volume_outputs(
    params: SurfaceWedgeVolumeParameters,
    execution: Execution,
): SurfaceWedgeVolumeOutputs {
    const ret: SurfaceWedgeVolumeOutputs = {
        root: execution.outputFile("."),
        metric: execution.outputFile([(params["metric"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Measure per-vertex volume between surfaces.
 *
 * Compute the volume of each vertex's area from one surface to another.  The surfaces must have vertex correspondence, and have consistent triangle orientation.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceWedgeVolumeOutputs`).
 */
function surface_wedge_volume_execute(
    params: SurfaceWedgeVolumeParameters,
    runner: Runner | null = null,
): SurfaceWedgeVolumeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_WEDGE_VOLUME_METADATA);
    params = execution.params(params)
    const cargs = surface_wedge_volume_cargs(params, execution)
    const ret = surface_wedge_volume_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Measure per-vertex volume between surfaces.
 *
 * Compute the volume of each vertex's area from one surface to another.  The surfaces must have vertex correspondence, and have consistent triangle orientation.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param inner_surface the inner surface
 * @param outer_surface the outer surface
 * @param metric the output metric
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceWedgeVolumeOutputs`).
 */
function surface_wedge_volume(
    inner_surface: InputPathType,
    outer_surface: InputPathType,
    metric: string,
    runner: Runner | null = null,
): SurfaceWedgeVolumeOutputs {
    const params = surface_wedge_volume_params(inner_surface, outer_surface, metric)
    return surface_wedge_volume_execute(params, runner);
}


export {
      SURFACE_WEDGE_VOLUME_METADATA,
      SurfaceWedgeVolumeOutputs,
      SurfaceWedgeVolumeParameters,
      surface_wedge_volume,
      surface_wedge_volume_execute,
      surface_wedge_volume_params,
};
