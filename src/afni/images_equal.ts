// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMAGES_EQUAL_METADATA: Metadata = {
    id: "56cce9d5304404daa9e4fb664f00f690b28c9d64.boutiques",
    name: "images_equal",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImagesEqualParameters {
    "@type"?: "afni/images_equal";
    "file_a": InputPathType;
    "file_b": InputPathType;
    "all_flag": boolean;
}
type ImagesEqualParametersTagged = Required<Pick<ImagesEqualParameters, '@type'>> & ImagesEqualParameters;


/**
 * Output object returned when calling `ImagesEqualParameters(...)`.
 *
 * @interface
 */
interface ImagesEqualOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Result of the image comparison: 1 if equal, 0 if not.
     */
    comparison_result: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param file_a First image file to compare.
 * @param file_b Second image file to compare.
 * @param all_flag Compare all images in the files; all must be equal for exit status to be 1.
 *
 * @returns Parameter dictionary
 */
function images_equal_params(
    file_a: InputPathType,
    file_b: InputPathType,
    all_flag: boolean = false,
): ImagesEqualParametersTagged {
    const params = {
        "@type": "afni/images_equal" as const,
        "file_a": file_a,
        "file_b": file_b,
        "all_flag": all_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function images_equal_cargs(
    params: ImagesEqualParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("images_equal");
    cargs.push(execution.inputFile((params["file_a"] ?? null)));
    cargs.push(execution.inputFile((params["file_b"] ?? null)));
    if ((params["all_flag"] ?? false)) {
        cargs.push("-all");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function images_equal_outputs(
    params: ImagesEqualParameters,
    execution: Execution,
): ImagesEqualOutputs {
    const ret: ImagesEqualOutputs = {
        root: execution.outputFile("."),
        comparison_result: execution.outputFile(["comparison_result.txt"].join('')),
    };
    return ret;
}


/**
 * images_equal
 *
 * A simple program to test if two 2D images are identical.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImagesEqualOutputs`).
 */
function images_equal_execute(
    params: ImagesEqualParameters,
    runner: Runner | null = null,
): ImagesEqualOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMAGES_EQUAL_METADATA);
    params = execution.params(params)
    const cargs = images_equal_cargs(params, execution)
    const ret = images_equal_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * images_equal
 *
 * A simple program to test if two 2D images are identical.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param file_a First image file to compare.
 * @param file_b Second image file to compare.
 * @param all_flag Compare all images in the files; all must be equal for exit status to be 1.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImagesEqualOutputs`).
 */
function images_equal(
    file_a: InputPathType,
    file_b: InputPathType,
    all_flag: boolean = false,
    runner: Runner | null = null,
): ImagesEqualOutputs {
    const params = images_equal_params(file_a, file_b, all_flag)
    return images_equal_execute(params, runner);
}


export {
      IMAGES_EQUAL_METADATA,
      ImagesEqualOutputs,
      images_equal,
      images_equal_execute,
      images_equal_params,
};
