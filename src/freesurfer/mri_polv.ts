// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_POLV_METADATA: Metadata = {
    id: "ee8644189f031978bc3740be0222cfee554fee9b.boutiques",
    name: "mri_polv",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriPolvParameters {
    "@type": "freesurfer.mri_polv";
    "window_size"?: number | null | undefined;
    "input_image": InputPathType;
    "output_image": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_polv": mri_polv_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_polv(...)`.
 *
 * @interface
 */
interface MriPolvOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image The input image file for processing.
 * @param output_image The output image file specifying the plane of least variance.
 * @param window_size Specify the window size to be used in the calculation of the central plane of least variance (default=5).
 *
 * @returns Parameter dictionary
 */
function mri_polv_params(
    input_image: InputPathType,
    output_image: InputPathType,
    window_size: number | null = null,
): MriPolvParameters {
    const params = {
        "@type": "freesurfer.mri_polv" as const,
        "input_image": input_image,
        "output_image": output_image,
    };
    if (window_size !== null) {
        params["window_size"] = window_size;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_polv_cargs(
    params: MriPolvParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_polv");
    if ((params["window_size"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["window_size"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push(execution.inputFile((params["output_image"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_polv_outputs(
    params: MriPolvParameters,
    execution: Execution,
): MriPolvOutputs {
    const ret: MriPolvOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_polv
 *
 * Calculate an image specifying the plane of least variance at each point in the input image.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPolvOutputs`).
 */
function mri_polv_execute(
    params: MriPolvParameters,
    runner: Runner | null = null,
): MriPolvOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_POLV_METADATA);
    params = execution.params(params)
    const cargs = mri_polv_cargs(params, execution)
    const ret = mri_polv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_polv
 *
 * Calculate an image specifying the plane of least variance at each point in the input image.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image The input image file for processing.
 * @param output_image The output image file specifying the plane of least variance.
 * @param window_size Specify the window size to be used in the calculation of the central plane of least variance (default=5).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPolvOutputs`).
 */
function mri_polv(
    input_image: InputPathType,
    output_image: InputPathType,
    window_size: number | null = null,
    runner: Runner | null = null,
): MriPolvOutputs {
    const params = mri_polv_params(input_image, output_image, window_size)
    return mri_polv_execute(params, runner);
}


export {
      MRI_POLV_METADATA,
      MriPolvOutputs,
      MriPolvParameters,
      mri_polv,
      mri_polv_execute,
      mri_polv_params,
};
