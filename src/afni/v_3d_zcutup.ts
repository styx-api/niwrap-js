// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ZCUTUP_METADATA: Metadata = {
    id: "9f4c5ae0e2d25b35b3ce4085901c813b8cd03916.boutiques",
    name: "3dZcutup",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dZcutupParameters {
    "__STYXTYPE__": "3dZcutup";
    "keep_slices": string;
    "prefix"?: string | null | undefined;
    "dataset": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dZcutup": v_3d_zcutup_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dZcutup": v_3d_zcutup_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_zcutup(...)`.
 *
 * @interface
 */
interface V3dZcutupOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output dataset HEAD file
     */
    output_head: OutputPathType | null;
    /**
     * The output dataset BRIK file
     */
    output_brik: OutputPathType | null;
}


function v_3d_zcutup_params(
    keep_slices: string,
    dataset: InputPathType,
    prefix: string | null = null,
): V3dZcutupParameters {
    /**
     * Build parameters.
    
     * @param keep_slices Keep slices numbered 'b' through 't', inclusive. This is a mandatory option. Slice numbers start at 0.
     * @param dataset The input dataset (e.g., epi07+orig). You can use a sub-brick selector on the input dataset.
     * @param prefix Write result into dataset with the given prefix [default = 'zcutup']
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dZcutup" as const,
        "keep_slices": keep_slices,
        "dataset": dataset,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function v_3d_zcutup_cargs(
    params: V3dZcutupParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dZcutup");
    cargs.push(
        "-keep",
        (params["keep_slices"] ?? null)
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    return cargs;
}


function v_3d_zcutup_outputs(
    params: V3dZcutupParameters,
    execution: Execution,
): V3dZcutupOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dZcutupOutputs = {
        root: execution.outputFile("."),
        output_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        output_brik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
    };
    return ret;
}


function v_3d_zcutup_execute(
    params: V3dZcutupParameters,
    execution: Execution,
): V3dZcutupOutputs {
    /**
     * Cut slices off a dataset in its z-direction and write a new dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dZcutupOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_zcutup_cargs(params, execution)
    const ret = v_3d_zcutup_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_zcutup(
    keep_slices: string,
    dataset: InputPathType,
    prefix: string | null = null,
    runner: Runner | null = null,
): V3dZcutupOutputs {
    /**
     * Cut slices off a dataset in its z-direction and write a new dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param keep_slices Keep slices numbered 'b' through 't', inclusive. This is a mandatory option. Slice numbers start at 0.
     * @param dataset The input dataset (e.g., epi07+orig). You can use a sub-brick selector on the input dataset.
     * @param prefix Write result into dataset with the given prefix [default = 'zcutup']
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dZcutupOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ZCUTUP_METADATA);
    const params = v_3d_zcutup_params(keep_slices, dataset, prefix)
    return v_3d_zcutup_execute(params, execution);
}


export {
      V3dZcutupOutputs,
      V3dZcutupParameters,
      V_3D_ZCUTUP_METADATA,
      v_3d_zcutup,
      v_3d_zcutup_params,
};
