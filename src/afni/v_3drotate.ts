// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DROTATE_METADATA: Metadata = {
    id: "faff662007ce788fdeb0edbcc281fab85f7a83d9.boutiques",
    name: "3drotate",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3drotateParameters {
    "@type": "afni.3drotate";
    "dataset": InputPathType;
    "prefix"?: string | null | undefined;
    "verbose": boolean;
    "ashift"?: Array<number> | null | undefined;
    "bshift"?: Array<number> | null | undefined;
    "rotate"?: Array<string> | null | undefined;
    "rotparent"?: InputPathType | null | undefined;
    "gridparent"?: InputPathType | null | undefined;
    "matvec_dicom"?: InputPathType | null | undefined;
    "matvec_order"?: InputPathType | null | undefined;
    "matvec_dset"?: InputPathType | null | undefined;
    "dfile"?: InputPathType | null | undefined;
    "1Dfile"?: InputPathType | null | undefined;
    "points": boolean;
    "origin"?: Array<number> | null | undefined;
    "Fourier": boolean;
    "NN": boolean;
    "linear": boolean;
    "cubic": boolean;
    "quintic": boolean;
    "heptic": boolean;
    "Fourier_nopad": boolean;
    "clipit": boolean;
    "noclip": boolean;
    "zpad"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3drotate": v_3drotate_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3drotate": v_3drotate_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3drotate(...)`.
 *
 * @interface
 */
interface V3drotateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset header file
     */
    out_head: OutputPathType | null;
    /**
     * Output dataset brick file
     */
    out_brick: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dataset Input AFNI dataset, may contain a sub-brick selector list
 * @param prefix Sets the output dataset prefix name
 * @param verbose Prints out progress reports (to stderr)
 * @param ashift Shifts the dataset by specified distances (dx, dy, dz) in mm in x, y, z directions respectively, AFTER rotation
 * @param bshift Shifts the dataset by specified distances (dx, dy, dz) in mm in x, y, z directions respectively, BEFORE rotation
 * @param rotate Specifies the 3D rotation angles (th1, th2, th3) about certain axes
 * @param rotparent Rotation and translation should be taken from the first 3dvolreg transformation found in the header of dataset 'rset'.
 * @param gridparent Output dataset should be shifted to match the grid of dataset 'gset'. Can only be used with -rotparent.
 * @param matvec_dicom Rotation and translation should be read from DICOM file 'mfile'.
 * @param matvec_order Rotation and translation should be read from file 'mfile' with dataset coordinate order.
 * @param matvec_dset Rotation and translation should be read from the .HEAD file of dataset 'mset' created by 3dTagalign.
 * @param dfile Reads movement parameters for each sub-brick from an ASCII file 'dname'.
 * @param v_1_dfile Reads movement parameters for each sub-brick from a 1D ASCII file 'dname'.
 * @param points Specifies that (x,y,z) points are to be rotated instead of a dataset.
 * @param origin Specifies the rotation origin point (xo, yo, zo)
 * @param fourier Use Fourier interpolation method during transformation.
 * @param nn Use nearest neighbor interpolation method during transformation.
 * @param linear Use linear interpolation (1st order polynomial) during transformation.
 * @param cubic Use cubic interpolation (3rd order polynomial) during transformation.
 * @param quintic Use quintic interpolation (5th order Lagrange polynomial) during transformation.
 * @param heptic Use heptic interpolation (7th order Lagrange polynomial) during transformation.
 * @param fourier_nopad Use the Fourier method WITHOUT padding.
 * @param clipit Clip results to input brick range [default option].
 * @param noclip Do not clip results to input brick range.
 * @param zpad Zero pad around the edges by 'n' voxels during rotations.
 *
 * @returns Parameter dictionary
 */
function v_3drotate_params(
    dataset: InputPathType,
    prefix: string | null = null,
    verbose: boolean = false,
    ashift: Array<number> | null = null,
    bshift: Array<number> | null = null,
    rotate: Array<string> | null = null,
    rotparent: InputPathType | null = null,
    gridparent: InputPathType | null = null,
    matvec_dicom: InputPathType | null = null,
    matvec_order: InputPathType | null = null,
    matvec_dset: InputPathType | null = null,
    dfile: InputPathType | null = null,
    v_1_dfile: InputPathType | null = null,
    points: boolean = false,
    origin: Array<number> | null = null,
    fourier: boolean = false,
    nn: boolean = false,
    linear: boolean = false,
    cubic: boolean = false,
    quintic: boolean = false,
    heptic: boolean = false,
    fourier_nopad: boolean = false,
    clipit: boolean = false,
    noclip: boolean = false,
    zpad: number | null = null,
): V3drotateParameters {
    const params = {
        "@type": "afni.3drotate" as const,
        "dataset": dataset,
        "verbose": verbose,
        "points": points,
        "Fourier": fourier,
        "NN": nn,
        "linear": linear,
        "cubic": cubic,
        "quintic": quintic,
        "heptic": heptic,
        "Fourier_nopad": fourier_nopad,
        "clipit": clipit,
        "noclip": noclip,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (ashift !== null) {
        params["ashift"] = ashift;
    }
    if (bshift !== null) {
        params["bshift"] = bshift;
    }
    if (rotate !== null) {
        params["rotate"] = rotate;
    }
    if (rotparent !== null) {
        params["rotparent"] = rotparent;
    }
    if (gridparent !== null) {
        params["gridparent"] = gridparent;
    }
    if (matvec_dicom !== null) {
        params["matvec_dicom"] = matvec_dicom;
    }
    if (matvec_order !== null) {
        params["matvec_order"] = matvec_order;
    }
    if (matvec_dset !== null) {
        params["matvec_dset"] = matvec_dset;
    }
    if (dfile !== null) {
        params["dfile"] = dfile;
    }
    if (v_1_dfile !== null) {
        params["1Dfile"] = v_1_dfile;
    }
    if (origin !== null) {
        params["origin"] = origin;
    }
    if (zpad !== null) {
        params["zpad"] = zpad;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3drotate_cargs(
    params: V3drotateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3drotate");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verbose");
    }
    if ((params["ashift"] ?? null) !== null) {
        cargs.push(
            "-ashift",
            ...(params["ashift"] ?? null).map(String)
        );
    }
    if ((params["bshift"] ?? null) !== null) {
        cargs.push(
            "-bshift",
            ...(params["bshift"] ?? null).map(String)
        );
    }
    if ((params["rotate"] ?? null) !== null) {
        cargs.push(
            "-rotate",
            ...(params["rotate"] ?? null)
        );
    }
    if ((params["rotparent"] ?? null) !== null) {
        cargs.push(
            "-rotparent",
            execution.inputFile((params["rotparent"] ?? null))
        );
    }
    if ((params["gridparent"] ?? null) !== null) {
        cargs.push(
            "-gridparent",
            execution.inputFile((params["gridparent"] ?? null))
        );
    }
    if ((params["matvec_dicom"] ?? null) !== null) {
        cargs.push(
            "-matvec_dicom",
            execution.inputFile((params["matvec_dicom"] ?? null))
        );
    }
    if ((params["matvec_order"] ?? null) !== null) {
        cargs.push(
            "-matvec_order",
            execution.inputFile((params["matvec_order"] ?? null))
        );
    }
    if ((params["matvec_dset"] ?? null) !== null) {
        cargs.push(
            "-matvec_dset",
            execution.inputFile((params["matvec_dset"] ?? null))
        );
    }
    if ((params["dfile"] ?? null) !== null) {
        cargs.push(
            "-dfile",
            execution.inputFile((params["dfile"] ?? null))
        );
    }
    if ((params["1Dfile"] ?? null) !== null) {
        cargs.push(
            "-1Dfile",
            execution.inputFile((params["1Dfile"] ?? null))
        );
    }
    if ((params["points"] ?? null)) {
        cargs.push("-points");
    }
    if ((params["origin"] ?? null) !== null) {
        cargs.push(
            "-origin",
            ...(params["origin"] ?? null).map(String)
        );
    }
    if ((params["Fourier"] ?? null)) {
        cargs.push("-Fourier");
    }
    if ((params["NN"] ?? null)) {
        cargs.push("-NN");
    }
    if ((params["linear"] ?? null)) {
        cargs.push("-linear");
    }
    if ((params["cubic"] ?? null)) {
        cargs.push("-cubic");
    }
    if ((params["quintic"] ?? null)) {
        cargs.push("-quintic");
    }
    if ((params["heptic"] ?? null)) {
        cargs.push("-heptic");
    }
    if ((params["Fourier_nopad"] ?? null)) {
        cargs.push("-Fourier_nopad");
    }
    if ((params["clipit"] ?? null)) {
        cargs.push("-clipit");
    }
    if ((params["noclip"] ?? null)) {
        cargs.push("-noclip");
    }
    if ((params["zpad"] ?? null) !== null) {
        cargs.push(
            "-zpad",
            String((params["zpad"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3drotate_outputs(
    params: V3drotateParameters,
    execution: Execution,
): V3drotateOutputs {
    const ret: V3drotateOutputs = {
        root: execution.outputFile("."),
        out_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        out_brick: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * 3drotate
 *
 * Rotates and/or translates all bricks from an AFNI dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3drotateOutputs`).
 */
function v_3drotate_execute(
    params: V3drotateParameters,
    runner: Runner | null = null,
): V3drotateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DROTATE_METADATA);
    params = execution.params(params)
    const cargs = v_3drotate_cargs(params, execution)
    const ret = v_3drotate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3drotate
 *
 * Rotates and/or translates all bricks from an AFNI dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input AFNI dataset, may contain a sub-brick selector list
 * @param prefix Sets the output dataset prefix name
 * @param verbose Prints out progress reports (to stderr)
 * @param ashift Shifts the dataset by specified distances (dx, dy, dz) in mm in x, y, z directions respectively, AFTER rotation
 * @param bshift Shifts the dataset by specified distances (dx, dy, dz) in mm in x, y, z directions respectively, BEFORE rotation
 * @param rotate Specifies the 3D rotation angles (th1, th2, th3) about certain axes
 * @param rotparent Rotation and translation should be taken from the first 3dvolreg transformation found in the header of dataset 'rset'.
 * @param gridparent Output dataset should be shifted to match the grid of dataset 'gset'. Can only be used with -rotparent.
 * @param matvec_dicom Rotation and translation should be read from DICOM file 'mfile'.
 * @param matvec_order Rotation and translation should be read from file 'mfile' with dataset coordinate order.
 * @param matvec_dset Rotation and translation should be read from the .HEAD file of dataset 'mset' created by 3dTagalign.
 * @param dfile Reads movement parameters for each sub-brick from an ASCII file 'dname'.
 * @param v_1_dfile Reads movement parameters for each sub-brick from a 1D ASCII file 'dname'.
 * @param points Specifies that (x,y,z) points are to be rotated instead of a dataset.
 * @param origin Specifies the rotation origin point (xo, yo, zo)
 * @param fourier Use Fourier interpolation method during transformation.
 * @param nn Use nearest neighbor interpolation method during transformation.
 * @param linear Use linear interpolation (1st order polynomial) during transformation.
 * @param cubic Use cubic interpolation (3rd order polynomial) during transformation.
 * @param quintic Use quintic interpolation (5th order Lagrange polynomial) during transformation.
 * @param heptic Use heptic interpolation (7th order Lagrange polynomial) during transformation.
 * @param fourier_nopad Use the Fourier method WITHOUT padding.
 * @param clipit Clip results to input brick range [default option].
 * @param noclip Do not clip results to input brick range.
 * @param zpad Zero pad around the edges by 'n' voxels during rotations.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3drotateOutputs`).
 */
function v_3drotate(
    dataset: InputPathType,
    prefix: string | null = null,
    verbose: boolean = false,
    ashift: Array<number> | null = null,
    bshift: Array<number> | null = null,
    rotate: Array<string> | null = null,
    rotparent: InputPathType | null = null,
    gridparent: InputPathType | null = null,
    matvec_dicom: InputPathType | null = null,
    matvec_order: InputPathType | null = null,
    matvec_dset: InputPathType | null = null,
    dfile: InputPathType | null = null,
    v_1_dfile: InputPathType | null = null,
    points: boolean = false,
    origin: Array<number> | null = null,
    fourier: boolean = false,
    nn: boolean = false,
    linear: boolean = false,
    cubic: boolean = false,
    quintic: boolean = false,
    heptic: boolean = false,
    fourier_nopad: boolean = false,
    clipit: boolean = false,
    noclip: boolean = false,
    zpad: number | null = null,
    runner: Runner | null = null,
): V3drotateOutputs {
    const params = v_3drotate_params(dataset, prefix, verbose, ashift, bshift, rotate, rotparent, gridparent, matvec_dicom, matvec_order, matvec_dset, dfile, v_1_dfile, points, origin, fourier, nn, linear, cubic, quintic, heptic, fourier_nopad, clipit, noclip, zpad)
    return v_3drotate_execute(params, runner);
}


export {
      V3drotateOutputs,
      V3drotateParameters,
      V_3DROTATE_METADATA,
      v_3drotate,
      v_3drotate_execute,
      v_3drotate_params,
};
