// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MASK_METADATA: Metadata = {
    id: "bfd4609988cf9405815a95f6e9d94025535e22d1.boutiques",
    name: "mri_mask",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMaskParameters {
    "@type"?: "freesurfer/mri_mask";
    "input_volume": InputPathType;
    "mask_volume": InputPathType;
    "output_volume": string;
    "xform"?: string | null | undefined;
    "lta_src"?: string | null | undefined;
    "lta_dst"?: string | null | undefined;
    "threshold"?: number | null | undefined;
    "npad"?: number | null | undefined;
    "npad_vector"?: Array<number> | null | undefined;
    "npad_multi_vector"?: Array<number> | null | undefined;
    "abs": boolean;
    "invert": boolean;
    "no_invert": boolean;
    "rh_labels": boolean;
    "lh_labels": boolean;
    "dilate"?: number | null | undefined;
    "no_cerebellum": boolean;
    "oval_value"?: number | null | undefined;
    "transfer_value"?: number | null | undefined;
    "keep_mask_deletion_edits": boolean;
    "samseg": boolean;
}
type MriMaskParametersTagged = Required<Pick<MriMaskParameters, '@type'>> & MriMaskParameters;


/**
 * Output object returned when calling `MriMaskParameters(...)`.
 *
 * @interface
 */
interface MriMaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume file
 * @param mask_volume Mask volume file
 * @param output_volume Output volume file
 * @param xform Apply M3Z/LTA to transform mask to the space of input volume (identity.nofile possible, will invert if needed)
 * @param lta_src Source volume for -xform (if not available from the xform file)
 * @param lta_dst Destination volume for -xform (if not available from the xform file)
 * @param threshold Threshold mask volume at a given threshold (values <= threshold considered zero)
 * @param npad Create a bounding box around the mask expanded by npad voxels in each direction
 * @param npad_vector Create a bounding box around the mask expanded by npad1 npad2 npad3 voxels in each direction
 * @param npad_multi_vector Create a bounding box around the mask, expanded by npad1a npad1b npad2a npad2b npad3a npad3b in each direction
 * @param abs Take absolute value before applying threshold
 * @param invert Invert mask
 * @param no_invert Turn off inversion of mask
 * @param rh_labels Set mask in right hemisphere labels to 1 (assumes input mask is an aseg)
 * @param lh_labels Set mask in left hemisphere labels to 1 (assumes input mask is an aseg)
 * @param dilate Dilate mask N times before applying
 * @param no_cerebellum Remove cerebellum from aseg mask (assumes input mask is an aseg)
 * @param oval_value Use specified oval value as output instead of 0
 * @param transfer_value Transfer only the specified voxel value from mask to output
 * @param keep_mask_deletion_edits Transfer voxel-deletion edits (voxels=1) from mask to output volume
 * @param samseg Assume mask is a SAMSEG segmentation and mask all non-brain labels
 *
 * @returns Parameter dictionary
 */
function mri_mask_params(
    input_volume: InputPathType,
    mask_volume: InputPathType,
    output_volume: string,
    xform: string | null = null,
    lta_src: string | null = null,
    lta_dst: string | null = null,
    threshold: number | null = null,
    npad: number | null = null,
    npad_vector: Array<number> | null = null,
    npad_multi_vector: Array<number> | null = null,
    abs: boolean = false,
    invert: boolean = false,
    no_invert: boolean = false,
    rh_labels: boolean = false,
    lh_labels: boolean = false,
    dilate: number | null = null,
    no_cerebellum: boolean = false,
    oval_value: number | null = null,
    transfer_value: number | null = null,
    keep_mask_deletion_edits: boolean = false,
    samseg: boolean = false,
): MriMaskParametersTagged {
    const params = {
        "@type": "freesurfer/mri_mask" as const,
        "input_volume": input_volume,
        "mask_volume": mask_volume,
        "output_volume": output_volume,
        "abs": abs,
        "invert": invert,
        "no_invert": no_invert,
        "rh_labels": rh_labels,
        "lh_labels": lh_labels,
        "no_cerebellum": no_cerebellum,
        "keep_mask_deletion_edits": keep_mask_deletion_edits,
        "samseg": samseg,
    };
    if (xform !== null) {
        params["xform"] = xform;
    }
    if (lta_src !== null) {
        params["lta_src"] = lta_src;
    }
    if (lta_dst !== null) {
        params["lta_dst"] = lta_dst;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (npad !== null) {
        params["npad"] = npad;
    }
    if (npad_vector !== null) {
        params["npad_vector"] = npad_vector;
    }
    if (npad_multi_vector !== null) {
        params["npad_multi_vector"] = npad_multi_vector;
    }
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (oval_value !== null) {
        params["oval_value"] = oval_value;
    }
    if (transfer_value !== null) {
        params["transfer_value"] = transfer_value;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_mask_cargs(
    params: MriMaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_mask");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["mask_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["xform"] ?? null) !== null) {
        cargs.push(
            "-xform",
            (params["xform"] ?? null)
        );
    }
    if ((params["lta_src"] ?? null) !== null) {
        cargs.push(
            "-lta_src",
            (params["lta_src"] ?? null)
        );
    }
    if ((params["lta_dst"] ?? null) !== null) {
        cargs.push(
            "-lta_dst",
            (params["lta_dst"] ?? null)
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["npad"] ?? null) !== null) {
        cargs.push(
            "-bb",
            String((params["npad"] ?? null))
        );
    }
    if ((params["npad_vector"] ?? null) !== null) {
        cargs.push(
            "-bbm",
            ...(params["npad_vector"] ?? null).map(String)
        );
    }
    if ((params["npad_multi_vector"] ?? null) !== null) {
        cargs.push(
            "-bbmm",
            ...(params["npad_multi_vector"] ?? null).map(String)
        );
    }
    if ((params["abs"] ?? false)) {
        cargs.push("-abs");
    }
    if ((params["invert"] ?? false)) {
        cargs.push("-invert");
    }
    if ((params["no_invert"] ?? false)) {
        cargs.push("-no-invert");
    }
    if ((params["rh_labels"] ?? false)) {
        cargs.push("-rh");
    }
    if ((params["lh_labels"] ?? false)) {
        cargs.push("-lh");
    }
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "-dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["no_cerebellum"] ?? false)) {
        cargs.push("-no_cerebellum");
    }
    if ((params["oval_value"] ?? null) !== null) {
        cargs.push(
            "-oval",
            String((params["oval_value"] ?? null))
        );
    }
    if ((params["transfer_value"] ?? null) !== null) {
        cargs.push(
            "-transfer",
            String((params["transfer_value"] ?? null))
        );
    }
    if ((params["keep_mask_deletion_edits"] ?? false)) {
        cargs.push("-keep_mask_deletion_edits");
    }
    if ((params["samseg"] ?? false)) {
        cargs.push("-samseg");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_mask_outputs(
    params: MriMaskParameters,
    execution: Execution,
): MriMaskOutputs {
    const ret: MriMaskOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_mask
 *
 * Applies a mask volume (typically skull stripped).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMaskOutputs`).
 */
function mri_mask_execute(
    params: MriMaskParameters,
    runner: Runner | null = null,
): MriMaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MASK_METADATA);
    params = execution.params(params)
    const cargs = mri_mask_cargs(params, execution)
    const ret = mri_mask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_mask
 *
 * Applies a mask volume (typically skull stripped).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume file
 * @param mask_volume Mask volume file
 * @param output_volume Output volume file
 * @param xform Apply M3Z/LTA to transform mask to the space of input volume (identity.nofile possible, will invert if needed)
 * @param lta_src Source volume for -xform (if not available from the xform file)
 * @param lta_dst Destination volume for -xform (if not available from the xform file)
 * @param threshold Threshold mask volume at a given threshold (values <= threshold considered zero)
 * @param npad Create a bounding box around the mask expanded by npad voxels in each direction
 * @param npad_vector Create a bounding box around the mask expanded by npad1 npad2 npad3 voxels in each direction
 * @param npad_multi_vector Create a bounding box around the mask, expanded by npad1a npad1b npad2a npad2b npad3a npad3b in each direction
 * @param abs Take absolute value before applying threshold
 * @param invert Invert mask
 * @param no_invert Turn off inversion of mask
 * @param rh_labels Set mask in right hemisphere labels to 1 (assumes input mask is an aseg)
 * @param lh_labels Set mask in left hemisphere labels to 1 (assumes input mask is an aseg)
 * @param dilate Dilate mask N times before applying
 * @param no_cerebellum Remove cerebellum from aseg mask (assumes input mask is an aseg)
 * @param oval_value Use specified oval value as output instead of 0
 * @param transfer_value Transfer only the specified voxel value from mask to output
 * @param keep_mask_deletion_edits Transfer voxel-deletion edits (voxels=1) from mask to output volume
 * @param samseg Assume mask is a SAMSEG segmentation and mask all non-brain labels
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMaskOutputs`).
 */
function mri_mask(
    input_volume: InputPathType,
    mask_volume: InputPathType,
    output_volume: string,
    xform: string | null = null,
    lta_src: string | null = null,
    lta_dst: string | null = null,
    threshold: number | null = null,
    npad: number | null = null,
    npad_vector: Array<number> | null = null,
    npad_multi_vector: Array<number> | null = null,
    abs: boolean = false,
    invert: boolean = false,
    no_invert: boolean = false,
    rh_labels: boolean = false,
    lh_labels: boolean = false,
    dilate: number | null = null,
    no_cerebellum: boolean = false,
    oval_value: number | null = null,
    transfer_value: number | null = null,
    keep_mask_deletion_edits: boolean = false,
    samseg: boolean = false,
    runner: Runner | null = null,
): MriMaskOutputs {
    const params = mri_mask_params(input_volume, mask_volume, output_volume, xform, lta_src, lta_dst, threshold, npad, npad_vector, npad_multi_vector, abs, invert, no_invert, rh_labels, lh_labels, dilate, no_cerebellum, oval_value, transfer_value, keep_mask_deletion_edits, samseg)
    return mri_mask_execute(params, runner);
}


export {
      MRI_MASK_METADATA,
      MriMaskOutputs,
      mri_mask,
      mri_mask_execute,
      mri_mask_params,
};
