// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__EXTRACT_MEICA_ORTVEC_METADATA: Metadata = {
    id: "da5f1030bf9c84763550e9e84494bbc71d833fbd.boutiques",
    name: "@extract_meica_ortvec",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VExtractMeicaOrtvecParameters {
    "@type"?: "afni/@extract_meica_ortvec";
    "prefix": string;
    "meica_dir"?: string | null | undefined;
    "reject_ignored"?: number | null | undefined;
    "reject_midk"?: number | null | undefined;
    "work_dir"?: string | null | undefined;
    "verbosity"?: string | null | undefined;
}
type VExtractMeicaOrtvecParametersTagged = Required<Pick<VExtractMeicaOrtvecParameters, '@type'>> & VExtractMeicaOrtvecParameters;


/**
 * Output object returned when calling `VExtractMeicaOrtvecParameters(...)`.
 *
 * @interface
 */
interface VExtractMeicaOrtvecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output 1D ortvec file
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Name for output 1D ortvec file
 * @param meica_dir Directory for MEICA files
 * @param reject_ignored Do we reject ignored components (0=keep, 1=reject), default is 0
 * @param reject_midk Do we reject midk components (0=keep, 1=reject), default is 1
 * @param work_dir Sub-directory for work
 * @param verbosity Set verbosity level
 *
 * @returns Parameter dictionary
 */
function v__extract_meica_ortvec_params(
    prefix: string,
    meica_dir: string | null = null,
    reject_ignored: number | null = null,
    reject_midk: number | null = null,
    work_dir: string | null = null,
    verbosity: string | null = null,
): VExtractMeicaOrtvecParametersTagged {
    const params = {
        "@type": "afni/@extract_meica_ortvec" as const,
        "prefix": prefix,
    };
    if (meica_dir !== null) {
        params["meica_dir"] = meica_dir;
    }
    if (reject_ignored !== null) {
        params["reject_ignored"] = reject_ignored;
    }
    if (reject_midk !== null) {
        params["reject_midk"] = reject_midk;
    }
    if (work_dir !== null) {
        params["work_dir"] = work_dir;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__extract_meica_ortvec_cargs(
    params: VExtractMeicaOrtvecParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@extract_meica_ortvec");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["meica_dir"] ?? null) !== null) {
        cargs.push(
            "-meica_dir",
            (params["meica_dir"] ?? null)
        );
    }
    if ((params["reject_ignored"] ?? null) !== null) {
        cargs.push(
            "-reject_ignored",
            String((params["reject_ignored"] ?? null))
        );
    }
    if ((params["reject_midk"] ?? null) !== null) {
        cargs.push(
            "-reject_midk",
            String((params["reject_midk"] ?? null))
        );
    }
    if ((params["work_dir"] ?? null) !== null) {
        cargs.push(
            "-work_dir",
            (params["work_dir"] ?? null)
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            (params["verbosity"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__extract_meica_ortvec_outputs(
    params: VExtractMeicaOrtvecParameters,
    execution: Execution,
): VExtractMeicaOrtvecOutputs {
    const ret: VExtractMeicaOrtvecOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["prefix"] ?? null), ".1D"].join('')),
    };
    return ret;
}


/**
 * @extract_meica_ortvec
 *
 * Project good MEICA components out of bad ones.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VExtractMeicaOrtvecOutputs`).
 */
function v__extract_meica_ortvec_execute(
    params: VExtractMeicaOrtvecParameters,
    runner: Runner | null = null,
): VExtractMeicaOrtvecOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__EXTRACT_MEICA_ORTVEC_METADATA);
    params = execution.params(params)
    const cargs = v__extract_meica_ortvec_cargs(params, execution)
    const ret = v__extract_meica_ortvec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @extract_meica_ortvec
 *
 * Project good MEICA components out of bad ones.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Name for output 1D ortvec file
 * @param meica_dir Directory for MEICA files
 * @param reject_ignored Do we reject ignored components (0=keep, 1=reject), default is 0
 * @param reject_midk Do we reject midk components (0=keep, 1=reject), default is 1
 * @param work_dir Sub-directory for work
 * @param verbosity Set verbosity level
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VExtractMeicaOrtvecOutputs`).
 */
function v__extract_meica_ortvec(
    prefix: string,
    meica_dir: string | null = null,
    reject_ignored: number | null = null,
    reject_midk: number | null = null,
    work_dir: string | null = null,
    verbosity: string | null = null,
    runner: Runner | null = null,
): VExtractMeicaOrtvecOutputs {
    const params = v__extract_meica_ortvec_params(prefix, meica_dir, reject_ignored, reject_midk, work_dir, verbosity)
    return v__extract_meica_ortvec_execute(params, runner);
}


export {
      VExtractMeicaOrtvecOutputs,
      V__EXTRACT_MEICA_ORTVEC_METADATA,
      v__extract_meica_ortvec,
      v__extract_meica_ortvec_execute,
      v__extract_meica_ortvec_params,
};
