// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICESMASK_METADATA: Metadata = {
    id: "c12e83472678f19208ada5767d7c5b418c33dce1.boutiques",
    name: "slicesmask",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SlicesmaskParameters {
    "__STYXTYPE__": "slicesmask";
    "image": InputPathType;
    "mask": InputPathType;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "slicesmask": slicesmask_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "slicesmask": slicesmask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `slicesmask(...)`.
 *
 * @interface
 */
interface SlicesmaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file resulting from applying the mask
     */
    masked_output: OutputPathType;
}


function slicesmask_params(
    image: InputPathType,
    mask: InputPathType,
    output: string,
): SlicesmaskParameters {
    /**
     * Build parameters.
    
     * @param image Input image file
     * @param mask Mask file
     * @param output Output file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "slicesmask" as const,
        "image": image,
        "mask": mask,
        "output": output,
    };
    return params;
}


function slicesmask_cargs(
    params: SlicesmaskParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("slicesmask");
    cargs.push(execution.inputFile((params["image"] ?? null)));
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


function slicesmask_outputs(
    params: SlicesmaskParameters,
    execution: Execution,
): SlicesmaskOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SlicesmaskOutputs = {
        root: execution.outputFile("."),
        masked_output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function slicesmask_execute(
    params: SlicesmaskParameters,
    execution: Execution,
): SlicesmaskOutputs {
    /**
     * Tool for masking slices from an image using a mask.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SlicesmaskOutputs`).
     */
    params = execution.params(params)
    const cargs = slicesmask_cargs(params, execution)
    const ret = slicesmask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function slicesmask(
    image: InputPathType,
    mask: InputPathType,
    output: string,
    runner: Runner | null = null,
): SlicesmaskOutputs {
    /**
     * Tool for masking slices from an image using a mask.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param image Input image file
     * @param mask Mask file
     * @param output Output file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SlicesmaskOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICESMASK_METADATA);
    const params = slicesmask_params(image, mask, output)
    return slicesmask_execute(params, execution);
}


export {
      SLICESMASK_METADATA,
      SlicesmaskOutputs,
      SlicesmaskParameters,
      slicesmask,
      slicesmask_params,
};
