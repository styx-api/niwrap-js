// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_EXTREMA_METADATA: Metadata = {
    id: "a99e42a29322557d96803717af2d04aa40a35929.boutiques",
    name: "3dExtrema",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dExtremaParameters {
    "__STYXTYPE__": "3dExtrema";
    "input_dataset": InputPathType;
    "output_prefix"?: string | null | undefined;
    "output_session"?: string | null | undefined;
    "quiet": boolean;
    "mask_file"?: InputPathType | null | undefined;
    "mask_threshold"?: number | null | undefined;
    "data_threshold"?: number | null | undefined;
    "n_best"?: number | null | undefined;
    "separation_distance"?: number | null | undefined;
    "minima": boolean;
    "maxima": boolean;
    "strict": boolean;
    "partial": boolean;
    "interior": boolean;
    "closure": boolean;
    "slice": boolean;
    "volume": boolean;
    "remove": boolean;
    "average": boolean;
    "weight": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dExtrema": v_3d_extrema_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dExtrema": v_3d_extrema_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_extrema(...)`.
 *
 * @interface
 */
interface V3dExtremaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output HEAD file
     */
    output_head_file: OutputPathType | null;
    /**
     * Output BRIK file
     */
    output_brik_file: OutputPathType | null;
}


function v_3d_extrema_params(
    input_dataset: InputPathType,
    output_prefix: string | null = null,
    output_session: string | null = null,
    quiet: boolean = false,
    mask_file: InputPathType | null = null,
    mask_threshold: number | null = null,
    data_threshold: number | null = null,
    n_best: number | null = null,
    separation_distance: number | null = null,
    minima: boolean = false,
    maxima: boolean = false,
    strict: boolean = false,
    partial: boolean = false,
    interior: boolean = false,
    closure: boolean = false,
    slice: boolean = false,
    volume: boolean = false,
    remove: boolean = false,
    average: boolean = false,
    weight: boolean = false,
): V3dExtremaParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset (e.g. dataset+tlrc'[sub-brick]')
     * @param output_prefix Prefix for the output dataset name.
     * @param output_session Directory for the output dataset session.
     * @param quiet Suppress screen output.
     * @param mask_file Mask statistic from file.
     * @param mask_threshold Only voxels whose mask statistic is >= m in absolute value will be considered.
     * @param data_threshold Only voxels whose value (intensity) is greater than d in absolute value will be considered.
     * @param n_best Only print the first N extrema.
     * @param separation_distance Minimum separation distance (in mm) for distinct extrema.
     * @param minima Find local minima.
     * @param maxima Find local maxima (default).
     * @param strict Use strict inequality for extrema (default).
     * @param partial Use partial inequality for extrema.
     * @param interior Extrema must be interior points (default).
     * @param closure Extrema may be boundary points.
     * @param slice Consider each slice separately (default).
     * @param volume Consider the volume as a whole.
     * @param remove Remove all but strongest of neighboring extrema (default).
     * @param average Replace neighboring extrema by average.
     * @param weight Replace neighboring extrema by weighted average.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dExtrema" as const,
        "input_dataset": input_dataset,
        "quiet": quiet,
        "minima": minima,
        "maxima": maxima,
        "strict": strict,
        "partial": partial,
        "interior": interior,
        "closure": closure,
        "slice": slice,
        "volume": volume,
        "remove": remove,
        "average": average,
        "weight": weight,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (output_session !== null) {
        params["output_session"] = output_session;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (mask_threshold !== null) {
        params["mask_threshold"] = mask_threshold;
    }
    if (data_threshold !== null) {
        params["data_threshold"] = data_threshold;
    }
    if (n_best !== null) {
        params["n_best"] = n_best;
    }
    if (separation_distance !== null) {
        params["separation_distance"] = separation_distance;
    }
    return params;
}


function v_3d_extrema_cargs(
    params: V3dExtremaParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dExtrema");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["output_session"] ?? null) !== null) {
        cargs.push(
            "-session",
            (params["output_session"] ?? null)
        );
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-mask_file",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["mask_threshold"] ?? null) !== null) {
        cargs.push(
            "-mask_thr",
            String((params["mask_threshold"] ?? null))
        );
    }
    if ((params["data_threshold"] ?? null) !== null) {
        cargs.push(
            "-data_thr",
            String((params["data_threshold"] ?? null))
        );
    }
    if ((params["n_best"] ?? null) !== null) {
        cargs.push(
            "-nbest",
            String((params["n_best"] ?? null))
        );
    }
    if ((params["separation_distance"] ?? null) !== null) {
        cargs.push(
            "-sep_dist",
            String((params["separation_distance"] ?? null))
        );
    }
    if ((params["minima"] ?? null)) {
        cargs.push("-minima");
    }
    if ((params["maxima"] ?? null)) {
        cargs.push("-maxima");
    }
    if ((params["strict"] ?? null)) {
        cargs.push("-strict");
    }
    if ((params["partial"] ?? null)) {
        cargs.push("-partial");
    }
    if ((params["interior"] ?? null)) {
        cargs.push("-interior");
    }
    if ((params["closure"] ?? null)) {
        cargs.push("-closure");
    }
    if ((params["slice"] ?? null)) {
        cargs.push("-slice");
    }
    if ((params["volume"] ?? null)) {
        cargs.push("-volume");
    }
    if ((params["remove"] ?? null)) {
        cargs.push("-remove");
    }
    if ((params["average"] ?? null)) {
        cargs.push("-average");
    }
    if ((params["weight"] ?? null)) {
        cargs.push("-weight");
    }
    return cargs;
}


function v_3d_extrema_outputs(
    params: V3dExtremaParameters,
    execution: Execution,
): V3dExtremaOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dExtremaOutputs = {
        root: execution.outputFile("."),
        output_head_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".HEAD"].join('')) : null,
        output_brik_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".BRIK"].join('')) : null,
    };
    return ret;
}


function v_3d_extrema_execute(
    params: V3dExtremaParameters,
    execution: Execution,
): V3dExtremaOutputs {
    /**
     * Find local extrema (minima or maxima) in 3D datasets.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dExtremaOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_extrema_cargs(params, execution)
    const ret = v_3d_extrema_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_extrema(
    input_dataset: InputPathType,
    output_prefix: string | null = null,
    output_session: string | null = null,
    quiet: boolean = false,
    mask_file: InputPathType | null = null,
    mask_threshold: number | null = null,
    data_threshold: number | null = null,
    n_best: number | null = null,
    separation_distance: number | null = null,
    minima: boolean = false,
    maxima: boolean = false,
    strict: boolean = false,
    partial: boolean = false,
    interior: boolean = false,
    closure: boolean = false,
    slice: boolean = false,
    volume: boolean = false,
    remove: boolean = false,
    average: boolean = false,
    weight: boolean = false,
    runner: Runner | null = null,
): V3dExtremaOutputs {
    /**
     * Find local extrema (minima or maxima) in 3D datasets.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset (e.g. dataset+tlrc'[sub-brick]')
     * @param output_prefix Prefix for the output dataset name.
     * @param output_session Directory for the output dataset session.
     * @param quiet Suppress screen output.
     * @param mask_file Mask statistic from file.
     * @param mask_threshold Only voxels whose mask statistic is >= m in absolute value will be considered.
     * @param data_threshold Only voxels whose value (intensity) is greater than d in absolute value will be considered.
     * @param n_best Only print the first N extrema.
     * @param separation_distance Minimum separation distance (in mm) for distinct extrema.
     * @param minima Find local minima.
     * @param maxima Find local maxima (default).
     * @param strict Use strict inequality for extrema (default).
     * @param partial Use partial inequality for extrema.
     * @param interior Extrema must be interior points (default).
     * @param closure Extrema may be boundary points.
     * @param slice Consider each slice separately (default).
     * @param volume Consider the volume as a whole.
     * @param remove Remove all but strongest of neighboring extrema (default).
     * @param average Replace neighboring extrema by average.
     * @param weight Replace neighboring extrema by weighted average.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dExtremaOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_EXTREMA_METADATA);
    const params = v_3d_extrema_params(input_dataset, output_prefix, output_session, quiet, mask_file, mask_threshold, data_threshold, n_best, separation_distance, minima, maxima, strict, partial, interior, closure, slice, volume, remove, average, weight)
    return v_3d_extrema_execute(params, execution);
}


export {
      V3dExtremaOutputs,
      V3dExtremaParameters,
      V_3D_EXTREMA_METADATA,
      v_3d_extrema,
      v_3d_extrema_params,
};
