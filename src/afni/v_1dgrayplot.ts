// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DGRAYPLOT_METADATA: Metadata = {
    id: "1671e36eb3ebce31da681edce7afe7614f8969c2.boutiques",
    name: "1dgrayplot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dgrayplotParameters {
    "@type": "afni.1dgrayplot";
    "tsfile": InputPathType;
    "install": boolean;
    "ignore"?: number | null | undefined;
    "flip": boolean;
    "sep": boolean;
    "use"?: number | null | undefined;
    "ps": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.1dgrayplot": v_1dgrayplot_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dgrayplot(...)`.
 *
 * @interface
 */
interface V1dgrayplotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param tsfile Input time series file (*.1D format)
 * @param install Install a new X11 colormap (for X11 PseudoColor)
 * @param ignore Skip first 'nn' rows in the input file [default = 0]
 * @param flip Plot x and y axes interchanged [default: data columns plotted DOWN the screen]
 * @param sep Separate scales for each column
 * @param use Plot 'mm' points [default: all of them]
 * @param ps Don't draw plot in a window; write it to stdout in PostScript format.
 *
 * @returns Parameter dictionary
 */
function v_1dgrayplot_params(
    tsfile: InputPathType,
    install: boolean = false,
    ignore: number | null = null,
    flip: boolean = false,
    sep: boolean = false,
    use: number | null = null,
    ps: boolean = false,
): V1dgrayplotParameters {
    const params = {
        "@type": "afni.1dgrayplot" as const,
        "tsfile": tsfile,
        "install": install,
        "flip": flip,
        "sep": sep,
        "ps": ps,
    };
    if (ignore !== null) {
        params["ignore"] = ignore;
    }
    if (use !== null) {
        params["use"] = use;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1dgrayplot_cargs(
    params: V1dgrayplotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dgrayplot");
    cargs.push(execution.inputFile((params["tsfile"] ?? null)));
    if ((params["install"] ?? null)) {
        cargs.push("-install");
    }
    if ((params["ignore"] ?? null) !== null) {
        cargs.push(
            "-ignore",
            String((params["ignore"] ?? null))
        );
    }
    if ((params["flip"] ?? null)) {
        cargs.push("-flip");
    }
    if ((params["sep"] ?? null)) {
        cargs.push("-sep");
    }
    if ((params["use"] ?? null) !== null) {
        cargs.push(
            "-use",
            String((params["use"] ?? null))
        );
    }
    if ((params["ps"] ?? null)) {
        cargs.push("-ps");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1dgrayplot_outputs(
    params: V1dgrayplotParameters,
    execution: Execution,
): V1dgrayplotOutputs {
    const ret: V1dgrayplotOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 1dgrayplot
 *
 * Graphs the columns of a *.1D type time series file to the screen in grayscale.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dgrayplotOutputs`).
 */
function v_1dgrayplot_execute(
    params: V1dgrayplotParameters,
    runner: Runner | null = null,
): V1dgrayplotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DGRAYPLOT_METADATA);
    params = execution.params(params)
    const cargs = v_1dgrayplot_cargs(params, execution)
    const ret = v_1dgrayplot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 1dgrayplot
 *
 * Graphs the columns of a *.1D type time series file to the screen in grayscale.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param tsfile Input time series file (*.1D format)
 * @param install Install a new X11 colormap (for X11 PseudoColor)
 * @param ignore Skip first 'nn' rows in the input file [default = 0]
 * @param flip Plot x and y axes interchanged [default: data columns plotted DOWN the screen]
 * @param sep Separate scales for each column
 * @param use Plot 'mm' points [default: all of them]
 * @param ps Don't draw plot in a window; write it to stdout in PostScript format.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dgrayplotOutputs`).
 */
function v_1dgrayplot(
    tsfile: InputPathType,
    install: boolean = false,
    ignore: number | null = null,
    flip: boolean = false,
    sep: boolean = false,
    use: number | null = null,
    ps: boolean = false,
    runner: Runner | null = null,
): V1dgrayplotOutputs {
    const params = v_1dgrayplot_params(tsfile, install, ignore, flip, sep, use, ps)
    return v_1dgrayplot_execute(params, runner);
}


export {
      V1dgrayplotOutputs,
      V1dgrayplotParameters,
      V_1DGRAYPLOT_METADATA,
      v_1dgrayplot,
      v_1dgrayplot_execute,
      v_1dgrayplot_params,
};
