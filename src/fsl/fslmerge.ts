// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLMERGE_METADATA: Metadata = {
    id: "667989d948ac37add9e97b6184fe125e560a3f1a.boutiques",
    name: "fslmerge",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslmergeParameters {
    "__STYXTYPE__": "fslmerge";
    "merge_time": boolean;
    "merge_x": boolean;
    "merge_y": boolean;
    "merge_z": boolean;
    "auto_choose": boolean;
    "merge_set_tr": boolean;
    "output_file": string;
    "input_files": Array<InputPathType>;
    "volume_number"?: number | null | undefined;
    "tr_value"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslmerge": fslmerge_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslmerge": fslmerge_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslmerge(...)`.
 *
 * @interface
 */
interface FslmergeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output concatenated image file
     */
    out_file: OutputPathType;
}


function fslmerge_params(
    output_file: string,
    input_files: Array<InputPathType>,
    merge_time: boolean = false,
    merge_x: boolean = false,
    merge_y: boolean = false,
    merge_z: boolean = false,
    auto_choose: boolean = false,
    merge_set_tr: boolean = false,
    volume_number: number | null = null,
    tr_value: number | null = null,
): FslmergeParameters {
    /**
     * Build parameters.
    
     * @param output_file Output concatenated image file
     * @param input_files Input image files to concatenate
     * @param merge_time Concatenate images in time (4th dimension)
     * @param merge_x Concatenate images in the x direction
     * @param merge_y Concatenate images in the y direction
     * @param merge_z Concatenate images in the z direction
     * @param auto_choose Auto-choose: single slices -> volume, volumes -> 4D (time series)
     * @param merge_set_tr Concatenate images in time and set the output image tr to the provided value
     * @param volume_number Only use volume <N> from each input file (first volume is 0 not 1)
     * @param tr_value TR value in seconds, used with the -tr flag
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslmerge" as const,
        "merge_time": merge_time,
        "merge_x": merge_x,
        "merge_y": merge_y,
        "merge_z": merge_z,
        "auto_choose": auto_choose,
        "merge_set_tr": merge_set_tr,
        "output_file": output_file,
        "input_files": input_files,
    };
    if (volume_number !== null) {
        params["volume_number"] = volume_number;
    }
    if (tr_value !== null) {
        params["tr_value"] = tr_value;
    }
    return params;
}


function fslmerge_cargs(
    params: FslmergeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslmerge");
    if ((params["merge_time"] ?? null)) {
        cargs.push("-t");
    }
    if ((params["merge_x"] ?? null)) {
        cargs.push("-x");
    }
    if ((params["merge_y"] ?? null)) {
        cargs.push("-y");
    }
    if ((params["merge_z"] ?? null)) {
        cargs.push("-z");
    }
    if ((params["auto_choose"] ?? null)) {
        cargs.push("-a");
    }
    if ((params["merge_set_tr"] ?? null)) {
        cargs.push("-tr");
    }
    cargs.push((params["output_file"] ?? null));
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["volume_number"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["volume_number"] ?? null))
        );
    }
    if ((params["tr_value"] ?? null) !== null) {
        cargs.push(String((params["tr_value"] ?? null)));
    }
    return cargs;
}


function fslmerge_outputs(
    params: FslmergeParameters,
    execution: Execution,
): FslmergeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslmergeOutputs = {
        root: execution.outputFile("."),
        out_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function fslmerge_execute(
    params: FslmergeParameters,
    execution: Execution,
): FslmergeOutputs {
    /**
     * FSL tool to concatenate images in various dimensions.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslmergeOutputs`).
     */
    params = execution.params(params)
    const cargs = fslmerge_cargs(params, execution)
    const ret = fslmerge_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslmerge(
    output_file: string,
    input_files: Array<InputPathType>,
    merge_time: boolean = false,
    merge_x: boolean = false,
    merge_y: boolean = false,
    merge_z: boolean = false,
    auto_choose: boolean = false,
    merge_set_tr: boolean = false,
    volume_number: number | null = null,
    tr_value: number | null = null,
    runner: Runner | null = null,
): FslmergeOutputs {
    /**
     * FSL tool to concatenate images in various dimensions.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param output_file Output concatenated image file
     * @param input_files Input image files to concatenate
     * @param merge_time Concatenate images in time (4th dimension)
     * @param merge_x Concatenate images in the x direction
     * @param merge_y Concatenate images in the y direction
     * @param merge_z Concatenate images in the z direction
     * @param auto_choose Auto-choose: single slices -> volume, volumes -> 4D (time series)
     * @param merge_set_tr Concatenate images in time and set the output image tr to the provided value
     * @param volume_number Only use volume <N> from each input file (first volume is 0 not 1)
     * @param tr_value TR value in seconds, used with the -tr flag
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslmergeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLMERGE_METADATA);
    const params = fslmerge_params(output_file, input_files, merge_time, merge_x, merge_y, merge_z, auto_choose, merge_set_tr, volume_number, tr_value)
    return fslmerge_execute(params, execution);
}


export {
      FSLMERGE_METADATA,
      FslmergeOutputs,
      FslmergeParameters,
      fslmerge,
      fslmerge_params,
};
