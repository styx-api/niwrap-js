// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIXELCFESTATS_METADATA: Metadata = {
    id: "977582ec85abc36abca54062935b4e3d34f0c9f9.boutiques",
    name: "fixelcfestats",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface FixelcfestatsColumnParameters {
    "@type"?: "column";
    "path": InputPathType;
}
type FixelcfestatsColumnParametersTagged = Required<Pick<FixelcfestatsColumnParameters, '@type'>> & FixelcfestatsColumnParameters;


interface FixelcfestatsConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type FixelcfestatsConfigParametersTagged = Required<Pick<FixelcfestatsConfigParameters, '@type'>> & FixelcfestatsConfigParameters;


interface FixelcfestatsVariousStringParameters {
    "@type"?: "VariousString";
    "obj": string;
}
type FixelcfestatsVariousStringParametersTagged = Required<Pick<FixelcfestatsVariousStringParameters, '@type'>> & FixelcfestatsVariousStringParameters;


interface FixelcfestatsVariousFileParameters {
    "@type"?: "VariousFile";
    "obj": InputPathType;
}
type FixelcfestatsVariousFileParametersTagged = Required<Pick<FixelcfestatsVariousFileParameters, '@type'>> & FixelcfestatsVariousFileParameters;


interface FixelcfestatsParameters {
    "@type"?: "mrtrix/fixelcfestats";
    "mask"?: InputPathType | null | undefined;
    "notest": boolean;
    "errors"?: string | null | undefined;
    "exchange_within"?: InputPathType | null | undefined;
    "exchange_whole"?: InputPathType | null | undefined;
    "strong": boolean;
    "nshuffles"?: number | null | undefined;
    "permutations"?: InputPathType | null | undefined;
    "nonstationarity": boolean;
    "skew_nonstationarity"?: number | null | undefined;
    "nshuffles_nonstationarity"?: number | null | undefined;
    "permutations_nonstationarity"?: InputPathType | null | undefined;
    "cfe_dh"?: number | null | undefined;
    "cfe_e"?: number | null | undefined;
    "cfe_h"?: number | null | undefined;
    "cfe_c"?: number | null | undefined;
    "cfe_legacy": boolean;
    "variance"?: InputPathType | null | undefined;
    "ftests"?: InputPathType | null | undefined;
    "fonly": boolean;
    "column"?: Array<FixelcfestatsColumnParameters> | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<FixelcfestatsConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "in_fixel_directory": InputPathType;
    "subjects": InputPathType;
    "design": InputPathType;
    "contrast": InputPathType;
    "connectivity": FixelcfestatsVariousStringParametersTagged | FixelcfestatsVariousFileParametersTagged;
    "out_fixel_directory": string;
}
type FixelcfestatsParametersTagged = Required<Pick<FixelcfestatsParameters, '@type'>> & FixelcfestatsParameters;


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function fixelcfestats_connectivity_cargs_dyn_fn(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "VariousString": fixelcfestats_various_string_cargs,
        "VariousFile": fixelcfestats_various_file_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function fixelcfestats_connectivity_outputs_dyn_fn(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param path add a column to the design matrix corresponding to subject fixel-wise values (note that the contrast matrix must include an additional column for each use of this option); the text file provided via this option should contain a file name for each subject
 *
 * @returns Parameter dictionary
 */
function fixelcfestats_column_params(
    path: InputPathType,
): FixelcfestatsColumnParametersTagged {
    const params = {
        "@type": "column" as const,
        "path": path,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixelcfestats_column_cargs(
    params: FixelcfestatsColumnParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-column");
    cargs.push(execution.inputFile((params["path"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function fixelcfestats_config_params(
    key: string,
    value: string,
): FixelcfestatsConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixelcfestats_config_cargs(
    params: FixelcfestatsConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function fixelcfestats_various_string_params(
    obj: string,
): FixelcfestatsVariousStringParametersTagged {
    const params = {
        "@type": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixelcfestats_various_string_cargs(
    params: FixelcfestatsVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function fixelcfestats_various_file_params(
    obj: InputPathType,
): FixelcfestatsVariousFileParametersTagged {
    const params = {
        "@type": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixelcfestats_various_file_cargs(
    params: FixelcfestatsVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `FixelcfestatsParameters(...)`.
 *
 * @interface
 */
interface FixelcfestatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_fixel_directory the fixel directory containing the data files for each subject (after obtaining fixel correspondence
 * @param subjects a text file listing the subject identifiers (one per line). This should correspond with the filenames in the fixel directory (including the file extension), and be listed in the same order as the rows of the design matrix.
 * @param design the design matrix
 * @param contrast the contrast matrix, specified as rows of weights
 * @param connectivity the fixel-fixel connectivity matrix
 * @param out_fixel_directory the output directory where results will be saved. Will be created if it does not exist
 * @param mask provide a fixel data file containing a mask of those fixels to be used during processing
 * @param notest don't perform statistical inference; only output population statistics (effect size, stdev etc)
 * @param errors specify nature of errors for shuffling; options are: ee,ise,both (default: ee)
 * @param exchange_within specify blocks of observations within each of which data may undergo restricted exchange
 * @param exchange_whole specify blocks of observations that may be exchanged with one another (for independent and symmetric errors, sign-flipping will occur block-wise)
 * @param strong use strong familywise error control across multiple hypotheses
 * @param nshuffles the number of shuffles (default: 5000)
 * @param permutations manually define the permutations (relabelling). The input should be a text file defining a m x n matrix, where each relabelling is defined as a column vector of size m, and the number of columns, n, defines the number of permutations. Can be generated with the palm_quickperms function in PALM (http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/PALM). Overrides the -nshuffles option.
 * @param nonstationarity perform non-stationarity correction
 * @param skew_nonstationarity specify the skew parameter for empirical statistic calculation (default for this command is 1)
 * @param nshuffles_nonstationarity the number of shuffles to use when precomputing the empirical statistic image for non-stationarity correction (default: 5000)
 * @param permutations_nonstationarity manually define the permutations (relabelling) for computing the emprical statistics for non-stationarity correction. The input should be a text file defining a m x n matrix, where each relabelling is defined as a column vector of size m, and the number of columns, n, defines the number of permutations. Can be generated with the palm_quickperms function in PALM (http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/PALM) Overrides the -nshuffles_nonstationarity option.
 * @param cfe_dh the height increment used in the cfe integration (default: 0.1)
 * @param cfe_e cfe extent exponent (default: 2)
 * @param cfe_h cfe height exponent (default: 3)
 * @param cfe_c cfe connectivity exponent (default: 0.5)
 * @param cfe_legacy use the legacy (non-normalised) form of the cfe equation
 * @param variance define variance groups for the G-statistic; measurements for which the expected variance is equivalent should contain the same index
 * @param ftests perform F-tests; input text file should contain, for each F-test, a row containing ones and zeros, where ones indicate the rows of the contrast matrix to be included in the F-test.
 * @param fonly only assess F-tests; do not perform statistical inference on entries in the contrast matrix
 * @param column add a column to the design matrix corresponding to subject fixel-wise values (note that the contrast matrix must include an additional column for each use of this option); the text file provided via this option should contain a file name for each subject
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function fixelcfestats_params(
    in_fixel_directory: InputPathType,
    subjects: InputPathType,
    design: InputPathType,
    contrast: InputPathType,
    connectivity: FixelcfestatsVariousStringParametersTagged | FixelcfestatsVariousFileParametersTagged,
    out_fixel_directory: string,
    mask: InputPathType | null = null,
    notest: boolean = false,
    errors: string | null = null,
    exchange_within: InputPathType | null = null,
    exchange_whole: InputPathType | null = null,
    strong: boolean = false,
    nshuffles: number | null = null,
    permutations: InputPathType | null = null,
    nonstationarity: boolean = false,
    skew_nonstationarity: number | null = null,
    nshuffles_nonstationarity: number | null = null,
    permutations_nonstationarity: InputPathType | null = null,
    cfe_dh: number | null = null,
    cfe_e: number | null = null,
    cfe_h: number | null = null,
    cfe_c: number | null = null,
    cfe_legacy: boolean = false,
    variance: InputPathType | null = null,
    ftests: InputPathType | null = null,
    fonly: boolean = false,
    column: Array<FixelcfestatsColumnParameters> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelcfestatsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): FixelcfestatsParametersTagged {
    const params = {
        "@type": "mrtrix/fixelcfestats" as const,
        "notest": notest,
        "strong": strong,
        "nonstationarity": nonstationarity,
        "cfe_legacy": cfe_legacy,
        "fonly": fonly,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "in_fixel_directory": in_fixel_directory,
        "subjects": subjects,
        "design": design,
        "contrast": contrast,
        "connectivity": connectivity,
        "out_fixel_directory": out_fixel_directory,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (errors !== null) {
        params["errors"] = errors;
    }
    if (exchange_within !== null) {
        params["exchange_within"] = exchange_within;
    }
    if (exchange_whole !== null) {
        params["exchange_whole"] = exchange_whole;
    }
    if (nshuffles !== null) {
        params["nshuffles"] = nshuffles;
    }
    if (permutations !== null) {
        params["permutations"] = permutations;
    }
    if (skew_nonstationarity !== null) {
        params["skew_nonstationarity"] = skew_nonstationarity;
    }
    if (nshuffles_nonstationarity !== null) {
        params["nshuffles_nonstationarity"] = nshuffles_nonstationarity;
    }
    if (permutations_nonstationarity !== null) {
        params["permutations_nonstationarity"] = permutations_nonstationarity;
    }
    if (cfe_dh !== null) {
        params["cfe_dh"] = cfe_dh;
    }
    if (cfe_e !== null) {
        params["cfe_e"] = cfe_e;
    }
    if (cfe_h !== null) {
        params["cfe_h"] = cfe_h;
    }
    if (cfe_c !== null) {
        params["cfe_c"] = cfe_c;
    }
    if (variance !== null) {
        params["variance"] = variance;
    }
    if (ftests !== null) {
        params["ftests"] = ftests;
    }
    if (column !== null) {
        params["column"] = column;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixelcfestats_cargs(
    params: FixelcfestatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fixelcfestats");
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["notest"] ?? false)) {
        cargs.push("-notest");
    }
    if ((params["errors"] ?? null) !== null) {
        cargs.push(
            "-errors",
            (params["errors"] ?? null)
        );
    }
    if ((params["exchange_within"] ?? null) !== null) {
        cargs.push(
            "-exchange_within",
            execution.inputFile((params["exchange_within"] ?? null))
        );
    }
    if ((params["exchange_whole"] ?? null) !== null) {
        cargs.push(
            "-exchange_whole",
            execution.inputFile((params["exchange_whole"] ?? null))
        );
    }
    if ((params["strong"] ?? false)) {
        cargs.push("-strong");
    }
    if ((params["nshuffles"] ?? null) !== null) {
        cargs.push(
            "-nshuffles",
            String((params["nshuffles"] ?? null))
        );
    }
    if ((params["permutations"] ?? null) !== null) {
        cargs.push(
            "-permutations",
            execution.inputFile((params["permutations"] ?? null))
        );
    }
    if ((params["nonstationarity"] ?? false)) {
        cargs.push("-nonstationarity");
    }
    if ((params["skew_nonstationarity"] ?? null) !== null) {
        cargs.push(
            "-skew_nonstationarity",
            String((params["skew_nonstationarity"] ?? null))
        );
    }
    if ((params["nshuffles_nonstationarity"] ?? null) !== null) {
        cargs.push(
            "-nshuffles_nonstationarity",
            String((params["nshuffles_nonstationarity"] ?? null))
        );
    }
    if ((params["permutations_nonstationarity"] ?? null) !== null) {
        cargs.push(
            "-permutations_nonstationarity",
            execution.inputFile((params["permutations_nonstationarity"] ?? null))
        );
    }
    if ((params["cfe_dh"] ?? null) !== null) {
        cargs.push(
            "-cfe_dh",
            String((params["cfe_dh"] ?? null))
        );
    }
    if ((params["cfe_e"] ?? null) !== null) {
        cargs.push(
            "-cfe_e",
            String((params["cfe_e"] ?? null))
        );
    }
    if ((params["cfe_h"] ?? null) !== null) {
        cargs.push(
            "-cfe_h",
            String((params["cfe_h"] ?? null))
        );
    }
    if ((params["cfe_c"] ?? null) !== null) {
        cargs.push(
            "-cfe_c",
            String((params["cfe_c"] ?? null))
        );
    }
    if ((params["cfe_legacy"] ?? false)) {
        cargs.push("-cfe_legacy");
    }
    if ((params["variance"] ?? null) !== null) {
        cargs.push(
            "-variance",
            execution.inputFile((params["variance"] ?? null))
        );
    }
    if ((params["ftests"] ?? null) !== null) {
        cargs.push(
            "-ftests",
            execution.inputFile((params["ftests"] ?? null))
        );
    }
    if ((params["fonly"] ?? false)) {
        cargs.push("-fonly");
    }
    if ((params["column"] ?? null) !== null) {
        cargs.push(...(params["column"] ?? null).map(s => fixelcfestats_column_cargs(s, execution)).flat());
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => fixelcfestats_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["in_fixel_directory"] ?? null)));
    cargs.push(execution.inputFile((params["subjects"] ?? null)));
    cargs.push(execution.inputFile((params["design"] ?? null)));
    cargs.push(execution.inputFile((params["contrast"] ?? null)));
    cargs.push(...fixelcfestats_connectivity_cargs_dyn_fn((params["connectivity"] ?? null)["@type"])((params["connectivity"] ?? null), execution));
    cargs.push((params["out_fixel_directory"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fixelcfestats_outputs(
    params: FixelcfestatsParameters,
    execution: Execution,
): FixelcfestatsOutputs {
    const ret: FixelcfestatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * fixelcfestats
 *
 * Fixel-based analysis using connectivity-based fixel enhancement and non-parametric permutation testing.
 *
 * Unlike previous versions of this command, where a whole-brain tractogram file would be provided as input in order to generate the fixel-fixel connectivity matrix and smooth fixel data, this version expects to be provided with the directory path to a pre-calculated fixel-fixel connectivity matrix (likely generated using the MRtrix3 command fixelconnectivity), and for the input fixel data to have already been smoothed (likely using the MRtrix3 command fixelfilter).
 *
 * Note that if the -mask option is used, the output fixel directory will still contain the same set of fixels as that present in the input fixel template, in order to retain fixel correspondence. However a consequence of this is that all fixels in the template will be initialy visible when the output fixel directory is loaded in mrview. Those fixels outside the processing mask will immediately disappear from view as soon as any data-file-based fixel colouring or thresholding is applied.
 *
 * In some software packages, a column of ones is automatically added to the GLM design matrix; the purpose of this column is to estimate the "global intercept", which is the predicted value of the observed variable if all explanatory variables were to be zero. However there are rare situations where including such a column would not be appropriate for a particular experimental design. Hence, in MRtrix3 statistical inference commands, it is up to the user to determine whether or not this column of ones should be included in their design matrix, and add it explicitly if necessary. The contrast matrix must also reflect the presence of this additional column.
 *
 * References:
 *
 * Raffelt, D.; Smith, RE.; Ridgway, GR.; Tournier, JD.; Vaughan, DN.; Rose, S.; Henderson, R.; Connelly, A. Connectivity-based fixel enhancement: Whole-brain statistical analysis of diffusion MRI measures in the presence of crossing fibres.Neuroimage, 2015, 15(117):40-55
 *
 * * If not using the -cfe_legacy option: 
 * Smith, RE.; Dimond, D; Vaughan, D.; Parker, D.; Dhollander, T.; Jackson, G.; Connelly, A. Intrinsic non-stationarity correction for Fixel-Based Analysis. In Proc OHBM 2019 M789
 *
 * * If using the -nonstationary option: 
 * Salimi-Khorshidi, G. Smith, S.M. Nichols, T.E. Adjusting the effect of nonstationarity in cluster-based and TFCE inference. NeuroImage, 2011, 54(3), 2006-19.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FixelcfestatsOutputs`).
 */
function fixelcfestats_execute(
    params: FixelcfestatsParameters,
    runner: Runner | null = null,
): FixelcfestatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIXELCFESTATS_METADATA);
    params = execution.params(params)
    const cargs = fixelcfestats_cargs(params, execution)
    const ret = fixelcfestats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fixelcfestats
 *
 * Fixel-based analysis using connectivity-based fixel enhancement and non-parametric permutation testing.
 *
 * Unlike previous versions of this command, where a whole-brain tractogram file would be provided as input in order to generate the fixel-fixel connectivity matrix and smooth fixel data, this version expects to be provided with the directory path to a pre-calculated fixel-fixel connectivity matrix (likely generated using the MRtrix3 command fixelconnectivity), and for the input fixel data to have already been smoothed (likely using the MRtrix3 command fixelfilter).
 *
 * Note that if the -mask option is used, the output fixel directory will still contain the same set of fixels as that present in the input fixel template, in order to retain fixel correspondence. However a consequence of this is that all fixels in the template will be initialy visible when the output fixel directory is loaded in mrview. Those fixels outside the processing mask will immediately disappear from view as soon as any data-file-based fixel colouring or thresholding is applied.
 *
 * In some software packages, a column of ones is automatically added to the GLM design matrix; the purpose of this column is to estimate the "global intercept", which is the predicted value of the observed variable if all explanatory variables were to be zero. However there are rare situations where including such a column would not be appropriate for a particular experimental design. Hence, in MRtrix3 statistical inference commands, it is up to the user to determine whether or not this column of ones should be included in their design matrix, and add it explicitly if necessary. The contrast matrix must also reflect the presence of this additional column.
 *
 * References:
 *
 * Raffelt, D.; Smith, RE.; Ridgway, GR.; Tournier, JD.; Vaughan, DN.; Rose, S.; Henderson, R.; Connelly, A. Connectivity-based fixel enhancement: Whole-brain statistical analysis of diffusion MRI measures in the presence of crossing fibres.Neuroimage, 2015, 15(117):40-55
 *
 * * If not using the -cfe_legacy option: 
 * Smith, RE.; Dimond, D; Vaughan, D.; Parker, D.; Dhollander, T.; Jackson, G.; Connelly, A. Intrinsic non-stationarity correction for Fixel-Based Analysis. In Proc OHBM 2019 M789
 *
 * * If using the -nonstationary option: 
 * Salimi-Khorshidi, G. Smith, S.M. Nichols, T.E. Adjusting the effect of nonstationarity in cluster-based and TFCE inference. NeuroImage, 2011, 54(3), 2006-19.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param in_fixel_directory the fixel directory containing the data files for each subject (after obtaining fixel correspondence
 * @param subjects a text file listing the subject identifiers (one per line). This should correspond with the filenames in the fixel directory (including the file extension), and be listed in the same order as the rows of the design matrix.
 * @param design the design matrix
 * @param contrast the contrast matrix, specified as rows of weights
 * @param connectivity the fixel-fixel connectivity matrix
 * @param out_fixel_directory the output directory where results will be saved. Will be created if it does not exist
 * @param mask provide a fixel data file containing a mask of those fixels to be used during processing
 * @param notest don't perform statistical inference; only output population statistics (effect size, stdev etc)
 * @param errors specify nature of errors for shuffling; options are: ee,ise,both (default: ee)
 * @param exchange_within specify blocks of observations within each of which data may undergo restricted exchange
 * @param exchange_whole specify blocks of observations that may be exchanged with one another (for independent and symmetric errors, sign-flipping will occur block-wise)
 * @param strong use strong familywise error control across multiple hypotheses
 * @param nshuffles the number of shuffles (default: 5000)
 * @param permutations manually define the permutations (relabelling). The input should be a text file defining a m x n matrix, where each relabelling is defined as a column vector of size m, and the number of columns, n, defines the number of permutations. Can be generated with the palm_quickperms function in PALM (http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/PALM). Overrides the -nshuffles option.
 * @param nonstationarity perform non-stationarity correction
 * @param skew_nonstationarity specify the skew parameter for empirical statistic calculation (default for this command is 1)
 * @param nshuffles_nonstationarity the number of shuffles to use when precomputing the empirical statistic image for non-stationarity correction (default: 5000)
 * @param permutations_nonstationarity manually define the permutations (relabelling) for computing the emprical statistics for non-stationarity correction. The input should be a text file defining a m x n matrix, where each relabelling is defined as a column vector of size m, and the number of columns, n, defines the number of permutations. Can be generated with the palm_quickperms function in PALM (http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/PALM) Overrides the -nshuffles_nonstationarity option.
 * @param cfe_dh the height increment used in the cfe integration (default: 0.1)
 * @param cfe_e cfe extent exponent (default: 2)
 * @param cfe_h cfe height exponent (default: 3)
 * @param cfe_c cfe connectivity exponent (default: 0.5)
 * @param cfe_legacy use the legacy (non-normalised) form of the cfe equation
 * @param variance define variance groups for the G-statistic; measurements for which the expected variance is equivalent should contain the same index
 * @param ftests perform F-tests; input text file should contain, for each F-test, a row containing ones and zeros, where ones indicate the rows of the contrast matrix to be included in the F-test.
 * @param fonly only assess F-tests; do not perform statistical inference on entries in the contrast matrix
 * @param column add a column to the design matrix corresponding to subject fixel-wise values (note that the contrast matrix must include an additional column for each use of this option); the text file provided via this option should contain a file name for each subject
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FixelcfestatsOutputs`).
 */
function fixelcfestats(
    in_fixel_directory: InputPathType,
    subjects: InputPathType,
    design: InputPathType,
    contrast: InputPathType,
    connectivity: FixelcfestatsVariousStringParametersTagged | FixelcfestatsVariousFileParametersTagged,
    out_fixel_directory: string,
    mask: InputPathType | null = null,
    notest: boolean = false,
    errors: string | null = null,
    exchange_within: InputPathType | null = null,
    exchange_whole: InputPathType | null = null,
    strong: boolean = false,
    nshuffles: number | null = null,
    permutations: InputPathType | null = null,
    nonstationarity: boolean = false,
    skew_nonstationarity: number | null = null,
    nshuffles_nonstationarity: number | null = null,
    permutations_nonstationarity: InputPathType | null = null,
    cfe_dh: number | null = null,
    cfe_e: number | null = null,
    cfe_h: number | null = null,
    cfe_c: number | null = null,
    cfe_legacy: boolean = false,
    variance: InputPathType | null = null,
    ftests: InputPathType | null = null,
    fonly: boolean = false,
    column: Array<FixelcfestatsColumnParameters> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelcfestatsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): FixelcfestatsOutputs {
    const params = fixelcfestats_params(in_fixel_directory, subjects, design, contrast, connectivity, out_fixel_directory, mask, notest, errors, exchange_within, exchange_whole, strong, nshuffles, permutations, nonstationarity, skew_nonstationarity, nshuffles_nonstationarity, permutations_nonstationarity, cfe_dh, cfe_e, cfe_h, cfe_c, cfe_legacy, variance, ftests, fonly, column, info, quiet, debug, force, nthreads, config, help, version)
    return fixelcfestats_execute(params, runner);
}


export {
      FIXELCFESTATS_METADATA,
      FixelcfestatsOutputs,
      fixelcfestats,
      fixelcfestats_column_params,
      fixelcfestats_config_params,
      fixelcfestats_execute,
      fixelcfestats_params,
      fixelcfestats_various_file_params,
      fixelcfestats_various_string_params,
};
