// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_SUMA_FS_ROI_INFO_METADATA: Metadata = {
    id: "779dea93198c9c27ce2d88ef43623927b9130d07.boutiques",
    name: "adjunct_suma_fs_roi_info",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctSumaFsRoiInfoParameters {
    "__STYXTYPE__": "adjunct_suma_fs_roi_info";
    "subject_id": string;
    "suma_directory": string;
    "help": boolean;
    "hview": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "adjunct_suma_fs_roi_info": adjunct_suma_fs_roi_info_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "adjunct_suma_fs_roi_info": adjunct_suma_fs_roi_info_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_suma_fs_roi_info(...)`.
 *
 * @interface
 */
interface AdjunctSumaFsRoiInfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Info for the '2000' parcellation.
     */
    rois_2000_ft: OutputPathType;
    /**
     * Info for the '2009' parcellation.
     */
    rois_2009_ft: OutputPathType;
    /**
     * Info for the '2000' parcellation brain mask and tissue/segmentations.
     */
    segs_2000_ft: OutputPathType;
    /**
     * Info for the '2009' parcellation brain mask and tissue/segmentations.
     */
    segs_2009_ft: OutputPathType;
}


function adjunct_suma_fs_roi_info_params(
    subject_id: string,
    suma_directory: string,
    help: boolean = false,
    hview: boolean = false,
    version: boolean = false,
): AdjunctSumaFsRoiInfoParameters {
    /**
     * Build parameters.
    
     * @param subject_id Subject ID
     * @param suma_directory SUMA directory output by AFNI's @SUMA_Make_Spec_FS
     * @param help Show help
     * @param hview Show help in text editor
     * @param version Show version
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "adjunct_suma_fs_roi_info" as const,
        "subject_id": subject_id,
        "suma_directory": suma_directory,
        "help": help,
        "hview": hview,
        "version": version,
    };
    return params;
}


function adjunct_suma_fs_roi_info_cargs(
    params: AdjunctSumaFsRoiInfoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("adjunct_suma_fs_roi_info");
    cargs.push(
        "-sid",
        (params["subject_id"] ?? null)
    );
    cargs.push(
        "-suma_dir",
        (params["suma_directory"] ?? null)
    );
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["hview"] ?? null)) {
        cargs.push("-hview");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    return cargs;
}


function adjunct_suma_fs_roi_info_outputs(
    params: AdjunctSumaFsRoiInfoParameters,
    execution: Execution,
): AdjunctSumaFsRoiInfoOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AdjunctSumaFsRoiInfoOutputs = {
        root: execution.outputFile("."),
        rois_2000_ft: execution.outputFile(["stats_fs_rois_2000_FT.1D"].join('')),
        rois_2009_ft: execution.outputFile(["stats_fs_rois_2009_FT.1D"].join('')),
        segs_2000_ft: execution.outputFile(["stats_fs_segs_2000_FT.1D"].join('')),
        segs_2009_ft: execution.outputFile(["stats_fs_segs_2009_FT.1D"].join('')),
    };
    return ret;
}


function adjunct_suma_fs_roi_info_execute(
    params: AdjunctSumaFsRoiInfoParameters,
    execution: Execution,
): AdjunctSumaFsRoiInfoOutputs {
    /**
     * Script for making ROI stats for the SUMA/ directory created by @SUMA_Make_Spec_FS after running FreeSurfer's recon-all.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AdjunctSumaFsRoiInfoOutputs`).
     */
    params = execution.params(params)
    const cargs = adjunct_suma_fs_roi_info_cargs(params, execution)
    const ret = adjunct_suma_fs_roi_info_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function adjunct_suma_fs_roi_info(
    subject_id: string,
    suma_directory: string,
    help: boolean = false,
    hview: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): AdjunctSumaFsRoiInfoOutputs {
    /**
     * Script for making ROI stats for the SUMA/ directory created by @SUMA_Make_Spec_FS after running FreeSurfer's recon-all.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param subject_id Subject ID
     * @param suma_directory SUMA directory output by AFNI's @SUMA_Make_Spec_FS
     * @param help Show help
     * @param hview Show help in text editor
     * @param version Show version
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AdjunctSumaFsRoiInfoOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_SUMA_FS_ROI_INFO_METADATA);
    const params = adjunct_suma_fs_roi_info_params(subject_id, suma_directory, help, hview, version)
    return adjunct_suma_fs_roi_info_execute(params, execution);
}


export {
      ADJUNCT_SUMA_FS_ROI_INFO_METADATA,
      AdjunctSumaFsRoiInfoOutputs,
      AdjunctSumaFsRoiInfoParameters,
      adjunct_suma_fs_roi_info,
      adjunct_suma_fs_roi_info_params,
};
