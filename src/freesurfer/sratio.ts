// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SRATIO_METADATA: Metadata = {
    id: "5677bab1e316327b9e1c66c023ddc455c4daf9a6.boutiques",
    name: "sratio",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SratioParameters {
    "@type": "freesurfer.sratio";
    "value_a": number;
    "value_b": number;
    "abs_flag": boolean;
    "mask_threshold"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.sratio": sratio_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.sratio": sratio_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sratio(...)`.
 *
 * @interface
 */
interface SratioOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Result of the sratio operation
     */
    sratio_result: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param value_a First value for the sratio operation
 * @param value_b Second value for the sratio operation
 * @param abs_flag Compute absolute value of both A and B before sratio
 * @param mask_threshold Threshold based on max(abs(A),abs(B)) > thresh
 *
 * @returns Parameter dictionary
 */
function sratio_params(
    value_a: number,
    value_b: number,
    abs_flag: boolean = false,
    mask_threshold: number | null = null,
): SratioParameters {
    const params = {
        "@type": "freesurfer.sratio" as const,
        "value_a": value_a,
        "value_b": value_b,
        "abs_flag": abs_flag,
    };
    if (mask_threshold !== null) {
        params["mask_threshold"] = mask_threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sratio_cargs(
    params: SratioParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("sratio");
    cargs.push(String((params["value_a"] ?? null)));
    cargs.push(String((params["value_b"] ?? null)));
    if ((params["abs_flag"] ?? null)) {
        cargs.push("--abs");
    }
    if ((params["mask_threshold"] ?? null) !== null) {
        cargs.push(
            "--mask-thresh",
            String((params["mask_threshold"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function sratio_outputs(
    params: SratioParameters,
    execution: Execution,
): SratioOutputs {
    const ret: SratioOutputs = {
        root: execution.outputFile("."),
        sratio_result: execution.outputFile(["[SRATIO_RESULT]"].join('')),
    };
    return ret;
}


/**
 * sratio
 *
 * Tool to compute ratio A/B if A>B, -B/A if B>A, with options for absolute computation and threshold masking.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SratioOutputs`).
 */
function sratio_execute(
    params: SratioParameters,
    runner: Runner | null = null,
): SratioOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SRATIO_METADATA);
    params = execution.params(params)
    const cargs = sratio_cargs(params, execution)
    const ret = sratio_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * sratio
 *
 * Tool to compute ratio A/B if A>B, -B/A if B>A, with options for absolute computation and threshold masking.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param value_a First value for the sratio operation
 * @param value_b Second value for the sratio operation
 * @param abs_flag Compute absolute value of both A and B before sratio
 * @param mask_threshold Threshold based on max(abs(A),abs(B)) > thresh
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SratioOutputs`).
 */
function sratio(
    value_a: number,
    value_b: number,
    abs_flag: boolean = false,
    mask_threshold: number | null = null,
    runner: Runner | null = null,
): SratioOutputs {
    const params = sratio_params(value_a, value_b, abs_flag, mask_threshold)
    return sratio_execute(params, runner);
}


export {
      SRATIO_METADATA,
      SratioOutputs,
      SratioParameters,
      sratio,
      sratio_execute,
      sratio_params,
};
