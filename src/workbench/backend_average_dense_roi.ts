// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BACKEND_AVERAGE_DENSE_ROI_METADATA: Metadata = {
    id: "8daccd3e1d4e01fd363a65e41aec0093bc0081b4.boutiques",
    name: "backend-average-dense-roi",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface BackendAverageDenseRoiParameters {
    "@type": "workbench.backend-average-dense-roi";
    "index_list": string;
    "out_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.backend-average-dense-roi": backend_average_dense_roi_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `backend_average_dense_roi(...)`.
 *
 * @interface
 */
interface BackendAverageDenseRoiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param index_list comma separated list of cifti indexes to average
 * @param out_file file to write the average row to
 *
 * @returns Parameter dictionary
 */
function backend_average_dense_roi_params(
    index_list: string,
    out_file: string,
): BackendAverageDenseRoiParameters {
    const params = {
        "@type": "workbench.backend-average-dense-roi" as const,
        "index_list": index_list,
        "out_file": out_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function backend_average_dense_roi_cargs(
    params: BackendAverageDenseRoiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-backend-average-dense-roi");
    cargs.push((params["index_list"] ?? null));
    cargs.push((params["out_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function backend_average_dense_roi_outputs(
    params: BackendAverageDenseRoiParameters,
    execution: Execution,
): BackendAverageDenseRoiOutputs {
    const ret: BackendAverageDenseRoiOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Connectome db backend command for cifti average dense roi.
 *
 * This command is probably not the one you are looking for, try -cifti-average-dense-roi.  It takes the list of cifti files to average from standard input, and writes its output as little endian, 32-bit integer of row size followed by the row as 32-bit floats.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `BackendAverageDenseRoiOutputs`).
 */
function backend_average_dense_roi_execute(
    params: BackendAverageDenseRoiParameters,
    execution: Execution,
): BackendAverageDenseRoiOutputs {
    params = execution.params(params)
    const cargs = backend_average_dense_roi_cargs(params, execution)
    const ret = backend_average_dense_roi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Connectome db backend command for cifti average dense roi.
 *
 * This command is probably not the one you are looking for, try -cifti-average-dense-roi.  It takes the list of cifti files to average from standard input, and writes its output as little endian, 32-bit integer of row size followed by the row as 32-bit floats.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param index_list comma separated list of cifti indexes to average
 * @param out_file file to write the average row to
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BackendAverageDenseRoiOutputs`).
 */
function backend_average_dense_roi(
    index_list: string,
    out_file: string,
    runner: Runner | null = null,
): BackendAverageDenseRoiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BACKEND_AVERAGE_DENSE_ROI_METADATA);
    const params = backend_average_dense_roi_params(index_list, out_file)
    return backend_average_dense_roi_execute(params, execution);
}


export {
      BACKEND_AVERAGE_DENSE_ROI_METADATA,
      BackendAverageDenseRoiOutputs,
      BackendAverageDenseRoiParameters,
      backend_average_dense_roi,
      backend_average_dense_roi_cargs,
      backend_average_dense_roi_execute,
      backend_average_dense_roi_outputs,
      backend_average_dense_roi_params,
};
