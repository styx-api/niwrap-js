// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_AVERAGE_CURVATURE_METADATA: Metadata = {
    id: "7bf37b20bf1ca60685f16918f26ebdbff5c07b09.boutiques",
    name: "mris_average_curvature",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisAverageCurvatureParameters {
    "@type": "freesurfer.mris_average_curvature";
    "input_curvature_file": InputPathType;
    "hemi": string;
    "surface": string;
    "subjects": Array<string>;
    "output_curvature_file": string;
    "summary_stats_flag": boolean;
    "output_surface_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_average_curvature": mris_average_curvature_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_average_curvature(...)`.
 *
 * @interface
 */
interface MrisAverageCurvatureOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_curvature_file The input curvature file.
 * @param hemi Specifies the hemisphere (e.g., lh or rh).
 * @param surface Specifies the surface.
 * @param subjects The list of subjects. The output curvature file will be painted onto the last subject specified.
 * @param output_curvature_file The output curvature file.
 * @param summary_stats_flag Generate summary statistics and write them into specified directory.
 * @param output_surface_flag Override the last subject as the output surface.
 *
 * @returns Parameter dictionary
 */
function mris_average_curvature_params(
    input_curvature_file: InputPathType,
    hemi: string,
    surface: string,
    subjects: Array<string>,
    output_curvature_file: string,
    summary_stats_flag: boolean = false,
    output_surface_flag: boolean = false,
): MrisAverageCurvatureParameters {
    const params = {
        "@type": "freesurfer.mris_average_curvature" as const,
        "input_curvature_file": input_curvature_file,
        "hemi": hemi,
        "surface": surface,
        "subjects": subjects,
        "output_curvature_file": output_curvature_file,
        "summary_stats_flag": summary_stats_flag,
        "output_surface_flag": output_surface_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_average_curvature_cargs(
    params: MrisAverageCurvatureParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_average_curvature");
    cargs.push(execution.inputFile((params["input_curvature_file"] ?? null)));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["surface"] ?? null));
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_curvature_file"] ?? null));
    if ((params["summary_stats_flag"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["output_surface_flag"] ?? null)) {
        cargs.push("-o");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_average_curvature_outputs(
    params: MrisAverageCurvatureParameters,
    execution: Execution,
): MrisAverageCurvatureOutputs {
    const ret: MrisAverageCurvatureOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * This tool averages curvature data across multiple subjects and generates an output curvature file painted onto the last subject specified. It can also generate summary statistics if requested.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisAverageCurvatureOutputs`).
 */
function mris_average_curvature_execute(
    params: MrisAverageCurvatureParameters,
    runner: Runner | null = null,
): MrisAverageCurvatureOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_AVERAGE_CURVATURE_METADATA);
    params = execution.params(params)
    const cargs = mris_average_curvature_cargs(params, execution)
    const ret = mris_average_curvature_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This tool averages curvature data across multiple subjects and generates an output curvature file painted onto the last subject specified. It can also generate summary statistics if requested.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_curvature_file The input curvature file.
 * @param hemi Specifies the hemisphere (e.g., lh or rh).
 * @param surface Specifies the surface.
 * @param subjects The list of subjects. The output curvature file will be painted onto the last subject specified.
 * @param output_curvature_file The output curvature file.
 * @param summary_stats_flag Generate summary statistics and write them into specified directory.
 * @param output_surface_flag Override the last subject as the output surface.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisAverageCurvatureOutputs`).
 */
function mris_average_curvature(
    input_curvature_file: InputPathType,
    hemi: string,
    surface: string,
    subjects: Array<string>,
    output_curvature_file: string,
    summary_stats_flag: boolean = false,
    output_surface_flag: boolean = false,
    runner: Runner | null = null,
): MrisAverageCurvatureOutputs {
    const params = mris_average_curvature_params(input_curvature_file, hemi, surface, subjects, output_curvature_file, summary_stats_flag, output_surface_flag)
    return mris_average_curvature_execute(params, runner);
}


export {
      MRIS_AVERAGE_CURVATURE_METADATA,
      MrisAverageCurvatureOutputs,
      MrisAverageCurvatureParameters,
      mris_average_curvature,
      mris_average_curvature_execute,
      mris_average_curvature_params,
};
