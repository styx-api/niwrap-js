// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LTA_DIFF_METADATA: Metadata = {
    id: "a8aaf9dc5936d4d700e770a1244924798ec88c42.boutiques",
    name: "lta_diff",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LtaDiffParameters {
    "__STYXTYPE__": "lta_diff";
    "transform1": InputPathType;
    "transform2"?: InputPathType | null | undefined;
    "dist_type"?: number | null | undefined;
    "invert1": boolean;
    "invert2": boolean;
    "vox": boolean;
    "normdiv"?: number | null | undefined;
    "radius"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "lta_diff": lta_diff_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `lta_diff(...)`.
 *
 * @interface
 */
interface LtaDiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function lta_diff_params(
    transform1: InputPathType,
    transform2: InputPathType | null = null,
    dist_type: number | null = null,
    invert1: boolean = false,
    invert2: boolean = false,
    vox: boolean = false,
    normdiv: number | null = null,
    radius: number | null = null,
): LtaDiffParameters {
    /**
     * Build parameters.
    
     * @param transform1 First transform file
     * @param transform2 Second transform file
     * @param dist_type Distance type: 1 (Rigid Trans. Dist.), 2 (Affine Transform Distance), 3 (8-corners mean distance), 4 (Max Displacement), 5 (Determinant scaling), 6 (Interpolation Smoothing), 7 (Decomposition). Default is 2.
     * @param invert1 Invert first transform before computing difference matrix D
     * @param invert2 Invert second transform before computing difference matrix D
     * @param vox Compute distance in vox coordinates, after adjusting for voxel sizes. Default is RAS coordinates.
     * @param normdiv Divide final distance by this value for step adjustment.
     * @param radius Radius in mm, used for RMS distance. Default is 100 to include the head.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "lta_diff" as const,
        "transform1": transform1,
        "invert1": invert1,
        "invert2": invert2,
        "vox": vox,
    };
    if (transform2 !== null) {
        params["transform2"] = transform2;
    }
    if (dist_type !== null) {
        params["dist_type"] = dist_type;
    }
    if (normdiv !== null) {
        params["normdiv"] = normdiv;
    }
    if (radius !== null) {
        params["radius"] = radius;
    }
    return params;
}


function lta_diff_cargs(
    params: LtaDiffParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("lta_diff");
    cargs.push(execution.inputFile((params["transform1"] ?? null)));
    if ((params["transform2"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["transform2"] ?? null)));
    }
    if ((params["dist_type"] ?? null) !== null) {
        cargs.push(
            "--dist",
            String((params["dist_type"] ?? null))
        );
    }
    if ((params["invert1"] ?? null)) {
        cargs.push("--invert1");
    }
    if ((params["invert2"] ?? null)) {
        cargs.push("--invert2");
    }
    if ((params["vox"] ?? null)) {
        cargs.push("--vox");
    }
    if ((params["normdiv"] ?? null) !== null) {
        cargs.push(
            "--normdiv",
            String((params["normdiv"] ?? null))
        );
    }
    if ((params["radius"] ?? null) !== null) {
        cargs.push(
            "--radius",
            String((params["radius"] ?? null))
        );
    }
    return cargs;
}


function lta_diff_outputs(
    params: LtaDiffParameters,
    execution: Execution,
): LtaDiffOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: LtaDiffOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function lta_diff_execute(
    params: LtaDiffParameters,
    execution: Execution,
): LtaDiffOutputs {
    /**
     * A tool to compute different distance norms for a single transform or for the difference between two transforms.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `LtaDiffOutputs`).
     */
    params = execution.params(params)
    const cargs = lta_diff_cargs(params, execution)
    const ret = lta_diff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function lta_diff(
    transform1: InputPathType,
    transform2: InputPathType | null = null,
    dist_type: number | null = null,
    invert1: boolean = false,
    invert2: boolean = false,
    vox: boolean = false,
    normdiv: number | null = null,
    radius: number | null = null,
    runner: Runner | null = null,
): LtaDiffOutputs {
    /**
     * A tool to compute different distance norms for a single transform or for the difference between two transforms.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param transform1 First transform file
     * @param transform2 Second transform file
     * @param dist_type Distance type: 1 (Rigid Trans. Dist.), 2 (Affine Transform Distance), 3 (8-corners mean distance), 4 (Max Displacement), 5 (Determinant scaling), 6 (Interpolation Smoothing), 7 (Decomposition). Default is 2.
     * @param invert1 Invert first transform before computing difference matrix D
     * @param invert2 Invert second transform before computing difference matrix D
     * @param vox Compute distance in vox coordinates, after adjusting for voxel sizes. Default is RAS coordinates.
     * @param normdiv Divide final distance by this value for step adjustment.
     * @param radius Radius in mm, used for RMS distance. Default is 100 to include the head.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `LtaDiffOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LTA_DIFF_METADATA);
    const params = lta_diff_params(transform1, transform2, dist_type, invert1, invert2, vox, normdiv, radius)
    return lta_diff_execute(params, execution);
}


export {
      LTA_DIFF_METADATA,
      LtaDiffOutputs,
      LtaDiffParameters,
      lta_diff,
      lta_diff_params,
};
