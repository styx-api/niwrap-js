// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const INSPEC_METADATA: Metadata = {
    id: "89203ff038bd27aa4191bdef00850e222bfaf10c.boutiques",
    name: "inspec",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface InspecParameters {
    "__STYXTYPE__": "inspec";
    "specfile": InputPathType;
    "newspecname"?: string | null | undefined;
    "detail"?: number | null | undefined;
    "leftspec"?: InputPathType | null | undefined;
    "rightspec"?: InputPathType | null | undefined;
    "state_rm"?: string | null | undefined;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "inspec": inspec_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `inspec(...)`.
 *
 * @interface
 */
interface InspecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function inspec_params(
    specfile: InputPathType,
    newspecname: string | null = null,
    detail: number | null = null,
    leftspec: InputPathType | null = null,
    rightspec: InputPathType | null = null,
    state_rm: string | null = null,
    help: boolean = false,
): InspecParameters {
    /**
     * Build parameters.
    
     * @param specfile Spec file to be read
     * @param newspecname Rewrite spec file
     * @param detail Level of output detail. Default is 1 in general, 0 with -LRmerge. Available levels are 0, 1, 2, and 3.
     * @param leftspec Merge two spec files in a way that makes sense for viewing in SUMA
     * @param rightspec Merge two spec files in a way that makes sense for viewing in SUMA
     * @param state_rm Get rid of state STATE_RM from the specfile
     * @param help Display help message
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "inspec" as const,
        "specfile": specfile,
        "help": help,
    };
    if (newspecname !== null) {
        params["newspecname"] = newspecname;
    }
    if (detail !== null) {
        params["detail"] = detail;
    }
    if (leftspec !== null) {
        params["leftspec"] = leftspec;
    }
    if (rightspec !== null) {
        params["rightspec"] = rightspec;
    }
    if (state_rm !== null) {
        params["state_rm"] = state_rm;
    }
    return params;
}


function inspec_cargs(
    params: InspecParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("inspec");
    cargs.push(
        "-spec",
        execution.inputFile((params["specfile"] ?? null))
    );
    if ((params["newspecname"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["newspecname"] ?? null)
        );
    }
    if ((params["detail"] ?? null) !== null) {
        cargs.push(
            "-detail",
            String((params["detail"] ?? null))
        );
    }
    if ((params["leftspec"] ?? null) !== null) {
        cargs.push(
            "-LRmerge",
            execution.inputFile((params["leftspec"] ?? null))
        );
    }
    if ((params["rightspec"] ?? null) !== null) {
        cargs.push(
            "-LRmerge",
            execution.inputFile((params["rightspec"] ?? null))
        );
    }
    if ((params["state_rm"] ?? null) !== null) {
        cargs.push(
            "-remove_state",
            (params["state_rm"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


function inspec_outputs(
    params: InspecParameters,
    execution: Execution,
): InspecOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: InspecOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function inspec_execute(
    params: InspecParameters,
    execution: Execution,
): InspecOutputs {
    /**
     * Outputs information found from specfile.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `InspecOutputs`).
     */
    params = execution.params(params)
    const cargs = inspec_cargs(params, execution)
    const ret = inspec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function inspec(
    specfile: InputPathType,
    newspecname: string | null = null,
    detail: number | null = null,
    leftspec: InputPathType | null = null,
    rightspec: InputPathType | null = null,
    state_rm: string | null = null,
    help: boolean = false,
    runner: Runner | null = null,
): InspecOutputs {
    /**
     * Outputs information found from specfile.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param specfile Spec file to be read
     * @param newspecname Rewrite spec file
     * @param detail Level of output detail. Default is 1 in general, 0 with -LRmerge. Available levels are 0, 1, 2, and 3.
     * @param leftspec Merge two spec files in a way that makes sense for viewing in SUMA
     * @param rightspec Merge two spec files in a way that makes sense for viewing in SUMA
     * @param state_rm Get rid of state STATE_RM from the specfile
     * @param help Display help message
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `InspecOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(INSPEC_METADATA);
    const params = inspec_params(specfile, newspecname, detail, leftspec, rightspec, state_rm, help)
    return inspec_execute(params, execution);
}


export {
      INSPEC_METADATA,
      InspecOutputs,
      InspecParameters,
      inspec,
      inspec_params,
};
