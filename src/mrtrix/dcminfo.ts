// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DCMINFO_METADATA: Metadata = {
    id: "07f39463fe810bd85aa94c83f3e100efd9db5e83.boutiques",
    name: "dcminfo",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface DcminfoTagParameters {
    "__STYXTYPE__": "tag";
    "group": string;
    "element": string;
}


interface DcminfoConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface DcminfoParameters {
    "__STYXTYPE__": "dcminfo";
    "all": boolean;
    "csa": boolean;
    "phoenix": boolean;
    "tag"?: Array<DcminfoTagParameters> | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<DcminfoConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dcminfo": dcminfo_cargs,
        "tag": dcminfo_tag_cargs,
        "config": dcminfo_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


function dcminfo_tag_params(
    group: string,
    element: string,
): DcminfoTagParameters {
    /**
     * Build parameters.
    
     * @param group print field specified by the group & element tags supplied. Tags should be supplied as Hexadecimal (i.e. as they appear in the -all listing).
     * @param element print field specified by the group & element tags supplied. Tags should be supplied as Hexadecimal (i.e. as they appear in the -all listing).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tag" as const,
        "group": group,
        "element": element,
    };
    return params;
}


function dcminfo_tag_cargs(
    params: DcminfoTagParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-tag");
    cargs.push((params["group"] ?? null));
    cargs.push((params["element"] ?? null));
    return cargs;
}


function dcminfo_config_params(
    key: string,
    value: string,
): DcminfoConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function dcminfo_config_cargs(
    params: DcminfoConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `dcminfo(...)`.
 *
 * @interface
 */
interface DcminfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dcminfo_params(
    file: InputPathType,
    all: boolean = false,
    csa: boolean = false,
    phoenix: boolean = false,
    tag: Array<DcminfoTagParameters> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DcminfoConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): DcminfoParameters {
    /**
     * Build parameters.
    
     * @param file the DICOM file to be scanned.
     * @param all print all DICOM fields.
     * @param csa print all Siemens CSA fields (excluding Phoenix unless requested)
     * @param phoenix print Siemens Phoenix protocol information
     * @param tag print field specified by the group & element tags supplied. Tags should be supplied as Hexadecimal (i.e. as they appear in the -all listing).
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dcminfo" as const,
        "all": all,
        "csa": csa,
        "phoenix": phoenix,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "file": file,
    };
    if (tag !== null) {
        params["tag"] = tag;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function dcminfo_cargs(
    params: DcminfoParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dcminfo");
    if ((params["all"] ?? null)) {
        cargs.push("-all");
    }
    if ((params["csa"] ?? null)) {
        cargs.push("-csa");
    }
    if ((params["phoenix"] ?? null)) {
        cargs.push("-phoenix");
    }
    if ((params["tag"] ?? null) !== null) {
        cargs.push(...(params["tag"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["file"] ?? null)));
    return cargs;
}


function dcminfo_outputs(
    params: DcminfoParameters,
    execution: Execution,
): DcminfoOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DcminfoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dcminfo_execute(
    params: DcminfoParameters,
    execution: Execution,
): DcminfoOutputs {
    /**
     * Output DICOM fields in human-readable format.
     * 
     * 
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DcminfoOutputs`).
     */
    params = execution.params(params)
    const cargs = dcminfo_cargs(params, execution)
    const ret = dcminfo_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dcminfo(
    file: InputPathType,
    all: boolean = false,
    csa: boolean = false,
    phoenix: boolean = false,
    tag: Array<DcminfoTagParameters> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DcminfoConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DcminfoOutputs {
    /**
     * Output DICOM fields in human-readable format.
     * 
     * 
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param file the DICOM file to be scanned.
     * @param all print all DICOM fields.
     * @param csa print all Siemens CSA fields (excluding Phoenix unless requested)
     * @param phoenix print Siemens Phoenix protocol information
     * @param tag print field specified by the group & element tags supplied. Tags should be supplied as Hexadecimal (i.e. as they appear in the -all listing).
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DcminfoOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DCMINFO_METADATA);
    const params = dcminfo_params(file, all, csa, phoenix, tag, info, quiet, debug, force, nthreads, config, help, version)
    return dcminfo_execute(params, execution);
}


export {
      DCMINFO_METADATA,
      DcminfoConfigParameters,
      DcminfoOutputs,
      DcminfoParameters,
      DcminfoTagParameters,
      dcminfo,
      dcminfo_config_params,
      dcminfo_params,
      dcminfo_tag_params,
};
