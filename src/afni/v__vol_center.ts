// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__VOL_CENTER_METADATA: Metadata = {
    id: "4ce13662130110b3fd50b4a405a5d296faf47380.boutiques",
    name: "@VolCenter",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VVolCenterParameters {
    "@type": "afni.@VolCenter";
    "dset": InputPathType;
    "orient"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@VolCenter": v__vol_center_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__vol_center(...)`.
 *
 * @interface
 */
interface VVolCenterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dset Input volume dataset
 * @param orient Output coordinate system orientation (e.g., RAI)
 *
 * @returns Parameter dictionary
 */
function v__vol_center_params(
    dset: InputPathType,
    orient: string | null = null,
): VVolCenterParameters {
    const params = {
        "@type": "afni.@VolCenter" as const,
        "dset": dset,
    };
    if (orient !== null) {
        params["orient"] = orient;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__vol_center_cargs(
    params: VVolCenterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@VolCenter");
    cargs.push(
        "-dset",
        execution.inputFile((params["dset"] ?? null))
    );
    if ((params["orient"] ?? null) !== null) {
        cargs.push(
            "-or",
            (params["orient"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__vol_center_outputs(
    params: VVolCenterParameters,
    execution: Execution,
): VVolCenterOutputs {
    const ret: VVolCenterOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Tool to return the center of volume for a given dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VVolCenterOutputs`).
 */
function v__vol_center_execute(
    params: VVolCenterParameters,
    runner: Runner | null = null,
): VVolCenterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__VOL_CENTER_METADATA);
    params = execution.params(params)
    const cargs = v__vol_center_cargs(params, execution)
    const ret = v__vol_center_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool to return the center of volume for a given dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dset Input volume dataset
 * @param orient Output coordinate system orientation (e.g., RAI)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VVolCenterOutputs`).
 */
function v__vol_center(
    dset: InputPathType,
    orient: string | null = null,
    runner: Runner | null = null,
): VVolCenterOutputs {
    const params = v__vol_center_params(dset, orient)
    return v__vol_center_execute(params, runner);
}


export {
      VVolCenterOutputs,
      VVolCenterParameters,
      V__VOL_CENTER_METADATA,
      v__vol_center,
      v__vol_center_execute,
      v__vol_center_params,
};
