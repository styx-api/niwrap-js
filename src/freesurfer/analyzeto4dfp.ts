// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANALYZETO4DFP_METADATA: Metadata = {
    id: "991ffef88bef8e5d81444f5958c1c7d3e22644f0.boutiques",
    name: "analyzeto4dfp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Analyzeto4dfpParameters {
    "@type": "freesurfer.analyzeto4dfp";
    "analyze_image": InputPathType;
    "rois_scale": boolean;
    "flip_x": boolean;
    "flip_y": boolean;
    "flip_z": boolean;
    "endian"?: string | null | undefined;
    "orientation"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.analyzeto4dfp": analyzeto4dfp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `analyzeto4dfp(...)`.
 *
 * @interface
 */
interface Analyzeto4dfpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param analyze_image Input ANALYZE image file
 * @param rois_scale Apply ROIScaleFactor
 * @param flip_x Flip first axis
 * @param flip_y Flip second axis
 * @param flip_z Flip third axis
 * @param endian Output big or little endian (default CPU endian)
 * @param orientation Supply orientation code (in range [0-5])
 *
 * @returns Parameter dictionary
 */
function analyzeto4dfp_params(
    analyze_image: InputPathType,
    rois_scale: boolean = false,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    endian: string | null = null,
    orientation: number | null = null,
): Analyzeto4dfpParameters {
    const params = {
        "@type": "freesurfer.analyzeto4dfp" as const,
        "analyze_image": analyze_image,
        "rois_scale": rois_scale,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
    };
    if (endian !== null) {
        params["endian"] = endian;
    }
    if (orientation !== null) {
        params["orientation"] = orientation;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function analyzeto4dfp_cargs(
    params: Analyzeto4dfpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("analyzeto4dfp");
    cargs.push(execution.inputFile((params["analyze_image"] ?? null)));
    if ((params["rois_scale"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["flip_x"] ?? null)) {
        cargs.push("-x");
    }
    if ((params["flip_y"] ?? null)) {
        cargs.push("-y");
    }
    if ((params["flip_z"] ?? null)) {
        cargs.push("-z");
    }
    if ((params["endian"] ?? null) !== null) {
        cargs.push(
            "-@",
            (params["endian"] ?? null)
        );
    }
    if ((params["orientation"] ?? null) !== null) {
        cargs.push(
            "-O",
            String((params["orientation"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function analyzeto4dfp_outputs(
    params: Analyzeto4dfpParameters,
    execution: Execution,
): Analyzeto4dfpOutputs {
    const ret: Analyzeto4dfpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * analyzeto4dfp
 *
 * Convert ANALYZE image format to 4dfp format with various options.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Analyzeto4dfpOutputs`).
 */
function analyzeto4dfp_execute(
    params: Analyzeto4dfpParameters,
    runner: Runner | null = null,
): Analyzeto4dfpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANALYZETO4DFP_METADATA);
    params = execution.params(params)
    const cargs = analyzeto4dfp_cargs(params, execution)
    const ret = analyzeto4dfp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * analyzeto4dfp
 *
 * Convert ANALYZE image format to 4dfp format with various options.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param analyze_image Input ANALYZE image file
 * @param rois_scale Apply ROIScaleFactor
 * @param flip_x Flip first axis
 * @param flip_y Flip second axis
 * @param flip_z Flip third axis
 * @param endian Output big or little endian (default CPU endian)
 * @param orientation Supply orientation code (in range [0-5])
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Analyzeto4dfpOutputs`).
 */
function analyzeto4dfp(
    analyze_image: InputPathType,
    rois_scale: boolean = false,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    endian: string | null = null,
    orientation: number | null = null,
    runner: Runner | null = null,
): Analyzeto4dfpOutputs {
    const params = analyzeto4dfp_params(analyze_image, rois_scale, flip_x, flip_y, flip_z, endian, orientation)
    return analyzeto4dfp_execute(params, runner);
}


export {
      ANALYZETO4DFP_METADATA,
      Analyzeto4dfpOutputs,
      Analyzeto4dfpParameters,
      analyzeto4dfp,
      analyzeto4dfp_execute,
      analyzeto4dfp_params,
};
