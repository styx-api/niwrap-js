// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_LABEL_TO_BORDER_METADATA: Metadata = {
    id: "219fc4b38b48ad206c378cfe5c40df75c43bd2b7.boutiques",
    name: "cifti-label-to-border",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiLabelToBorderBorderParameters {
    "@type": "workbench.cifti-label-to-border.border";
    "surface": InputPathType;
    "border_out": string;
}


interface CiftiLabelToBorderParameters {
    "@type": "workbench.cifti-label-to-border";
    "cifti_in": InputPathType;
    "opt_placement_fraction"?: number | null | undefined;
    "opt_column_column"?: string | null | undefined;
    "border"?: Array<CiftiLabelToBorderBorderParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-label-to-border": cifti_label_to_border_cargs,
        "workbench.cifti-label-to-border.border": cifti_label_to_border_border_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-label-to-border": cifti_label_to_border_outputs,
        "workbench.cifti-label-to-border.border": cifti_label_to_border_border_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `Array<CiftiLabelToBorderBorderParameters> | null(...)`.
 *
 * @interface
 */
interface CiftiLabelToBorderBorderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output border file
     */
    border_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to use for neighbor and structure information
 * @param border_out the output border file
 *
 * @returns Parameter dictionary
 */
function cifti_label_to_border_border_params(
    surface: InputPathType,
    border_out: string,
): CiftiLabelToBorderBorderParameters {
    const params = {
        "@type": "workbench.cifti-label-to-border.border" as const,
        "surface": surface,
        "border_out": border_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_label_to_border_border_cargs(
    params: CiftiLabelToBorderBorderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-border");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["border_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_label_to_border_border_outputs(
    params: CiftiLabelToBorderBorderParameters,
    execution: Execution,
): CiftiLabelToBorderBorderOutputs {
    const ret: CiftiLabelToBorderBorderOutputs = {
        root: execution.outputFile("."),
        border_out: execution.outputFile([(params["border_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `cifti_label_to_border(...)`.
 *
 * @interface
 */
interface CiftiLabelToBorderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `cifti_label_to_border_border_outputs`.This is a list of outputs with the same length and order as the inputs.
     */
    border: Array<CiftiLabelToBorderBorderOutputs> | null;
}


/**
 * Build parameters.
 *
 * @param cifti_in the input cifti dlabel file
 * @param opt_placement_fraction set how far along the edge border points are drawn: fraction along edge from inside vertex (default 0.33)
 * @param opt_column_column select a single column: the column number or name
 * @param border specify output file for a surface structure
 *
 * @returns Parameter dictionary
 */
function cifti_label_to_border_params(
    cifti_in: InputPathType,
    opt_placement_fraction: number | null = null,
    opt_column_column: string | null = null,
    border: Array<CiftiLabelToBorderBorderParameters> | null = null,
): CiftiLabelToBorderParameters {
    const params = {
        "@type": "workbench.cifti-label-to-border" as const,
        "cifti_in": cifti_in,
    };
    if (opt_placement_fraction !== null) {
        params["opt_placement_fraction"] = opt_placement_fraction;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (border !== null) {
        params["border"] = border;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_label_to_border_cargs(
    params: CiftiLabelToBorderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-label-to-border");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    if ((params["opt_placement_fraction"] ?? null) !== null) {
        cargs.push(
            "-placement",
            String((params["opt_placement_fraction"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    if ((params["border"] ?? null) !== null) {
        cargs.push(...(params["border"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_label_to_border_outputs(
    params: CiftiLabelToBorderParameters,
    execution: Execution,
): CiftiLabelToBorderOutputs {
    const ret: CiftiLabelToBorderOutputs = {
        root: execution.outputFile("."),
        border: ((params["border"] ?? null).map(i => dynOutputs(i["@type"])?.(i, execution) ?? null) ?? null),
    };
    return ret;
}


/**
 * cifti-label-to-border
 *
 * Draw borders around cifti labels.
 *
 * For each surface, takes the labels on the matching structure and draws borders around the labels.  Use -column to only draw borders around one label map.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelToBorderOutputs`).
 */
function cifti_label_to_border_execute(
    params: CiftiLabelToBorderParameters,
    runner: Runner | null = null,
): CiftiLabelToBorderOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_LABEL_TO_BORDER_METADATA);
    params = execution.params(params)
    const cargs = cifti_label_to_border_cargs(params, execution)
    const ret = cifti_label_to_border_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-label-to-border
 *
 * Draw borders around cifti labels.
 *
 * For each surface, takes the labels on the matching structure and draws borders around the labels.  Use -column to only draw borders around one label map.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the input cifti dlabel file
 * @param opt_placement_fraction set how far along the edge border points are drawn: fraction along edge from inside vertex (default 0.33)
 * @param opt_column_column select a single column: the column number or name
 * @param border specify output file for a surface structure
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiLabelToBorderOutputs`).
 */
function cifti_label_to_border(
    cifti_in: InputPathType,
    opt_placement_fraction: number | null = null,
    opt_column_column: string | null = null,
    border: Array<CiftiLabelToBorderBorderParameters> | null = null,
    runner: Runner | null = null,
): CiftiLabelToBorderOutputs {
    const params = cifti_label_to_border_params(cifti_in, opt_placement_fraction, opt_column_column, border)
    return cifti_label_to_border_execute(params, runner);
}


export {
      CIFTI_LABEL_TO_BORDER_METADATA,
      CiftiLabelToBorderBorderOutputs,
      CiftiLabelToBorderBorderParameters,
      CiftiLabelToBorderOutputs,
      CiftiLabelToBorderParameters,
      cifti_label_to_border,
      cifti_label_to_border_border_params,
      cifti_label_to_border_execute,
      cifti_label_to_border_params,
};
