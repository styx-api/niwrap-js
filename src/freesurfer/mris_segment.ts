// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SEGMENT_METADATA: Metadata = {
    id: "b4b82ace2b5925b14cab9688a638c640dfa792a2.boutiques",
    name: "mris_segment",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSegmentParameters {
    "@type": "freesurfer.mris_segment";
    "subjects": Array<string>;
    "output_subject": string;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_segment": mris_segment_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_segment": mris_segment_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_segment(...)`.
 *
 * @interface
 */
interface MrisSegmentOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmented surfaces output file
     */
    segmented_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjects A list of input subjects
 * @param output_subject Output subject name
 * @param output_file Output file path
 *
 * @returns Parameter dictionary
 */
function mris_segment_params(
    subjects: Array<string>,
    output_subject: string,
    output_file: string,
): MrisSegmentParameters {
    const params = {
        "@type": "freesurfer.mris_segment" as const,
        "subjects": subjects,
        "output_subject": output_subject,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_segment_cargs(
    params: MrisSegmentParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_segment");
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_subject"] ?? null));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_segment_outputs(
    params: MrisSegmentParameters,
    execution: Execution,
): MrisSegmentOutputs {
    const ret: MrisSegmentOutputs = {
        root: execution.outputFile("."),
        segmented_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * A command-line tool for segmenting surfaces in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSegmentOutputs`).
 */
function mris_segment_execute(
    params: MrisSegmentParameters,
    runner: Runner | null = null,
): MrisSegmentOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SEGMENT_METADATA);
    params = execution.params(params)
    const cargs = mris_segment_cargs(params, execution)
    const ret = mris_segment_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A command-line tool for segmenting surfaces in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects A list of input subjects
 * @param output_subject Output subject name
 * @param output_file Output file path
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSegmentOutputs`).
 */
function mris_segment(
    subjects: Array<string>,
    output_subject: string,
    output_file: string,
    runner: Runner | null = null,
): MrisSegmentOutputs {
    const params = mris_segment_params(subjects, output_subject, output_file)
    return mris_segment_execute(params, runner);
}


export {
      MRIS_SEGMENT_METADATA,
      MrisSegmentOutputs,
      MrisSegmentParameters,
      mris_segment,
      mris_segment_execute,
      mris_segment_params,
};
