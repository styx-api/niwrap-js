// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_CLUST_COUNT_METADATA: Metadata = {
    id: "98fcc8c7fba23c3985c9517555b10b2b9741fa23.boutiques",
    name: "3dClustCount",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dClustCountParameters {
    "__STYXTYPE__": "3dClustCount";
    "datasets": Array<InputPathType>;
    "prefix"?: string | null | undefined;
    "final": boolean;
    "quiet": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dClustCount": v_3d_clust_count_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dClustCount": v_3d_clust_count_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_clust_count(...)`.
 *
 * @interface
 */
interface V3dClustCountOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Summed results file in NIML format.
     */
    clustcount_niml: OutputPathType | null;
    /**
     * Summed results file in 1D format (when '-final' is used).
     */
    clustcount_1_d: OutputPathType | null;
    /**
     * Summed results file in NIML format (when '-final' is used).
     */
    final_clustcount_niml: OutputPathType | null;
}


function v_3d_clust_count_params(
    datasets: Array<InputPathType>,
    prefix: string | null = null,
    final: boolean = false,
    quiet: boolean = false,
): V3dClustCountParameters {
    /**
     * Build parameters.
    
     * @param datasets Input datasets to be processed.
     * @param prefix Prefix of the filename into which results will be summed. Actual filename will be 'sss.clustcount.niml'. If this file already exists, results from the current run will be summed into the existing results and the file then re-written.
     * @param final Output results in a format similar to 3dClustSim -- as 1D and NIML formatted files with probabilities of various cluster sizes. This option can be used without any input datasets to create final output files from saved '.clustcount.niml' output file from earlier runs.
     * @param quiet Suppresses progress reports and other informational messages. Should be placed first in the command line to quiet most messages.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dClustCount" as const,
        "datasets": datasets,
        "final": final,
        "quiet": quiet,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function v_3d_clust_count_cargs(
    params: V3dClustCountParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dClustCount");
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["final"] ?? null)) {
        cargs.push("-final");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    return cargs;
}


function v_3d_clust_count_outputs(
    params: V3dClustCountParameters,
    execution: Execution,
): V3dClustCountOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dClustCountOutputs = {
        root: execution.outputFile("."),
        clustcount_niml: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".clustcount.niml"].join('')) : null,
        clustcount_1_d: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".1D"].join('')) : null,
        final_clustcount_niml: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".niml"].join('')) : null,
    };
    return ret;
}


function v_3d_clust_count_execute(
    params: V3dClustCountParameters,
    execution: Execution,
): V3dClustCountOutputs {
    /**
     * This program takes as input 1 or more datasets, thresholds them at various levels, and counts up the number of clusters of various sizes.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dClustCountOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_clust_count_cargs(params, execution)
    const ret = v_3d_clust_count_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_clust_count(
    datasets: Array<InputPathType>,
    prefix: string | null = null,
    final: boolean = false,
    quiet: boolean = false,
    runner: Runner | null = null,
): V3dClustCountOutputs {
    /**
     * This program takes as input 1 or more datasets, thresholds them at various levels, and counts up the number of clusters of various sizes.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param datasets Input datasets to be processed.
     * @param prefix Prefix of the filename into which results will be summed. Actual filename will be 'sss.clustcount.niml'. If this file already exists, results from the current run will be summed into the existing results and the file then re-written.
     * @param final Output results in a format similar to 3dClustSim -- as 1D and NIML formatted files with probabilities of various cluster sizes. This option can be used without any input datasets to create final output files from saved '.clustcount.niml' output file from earlier runs.
     * @param quiet Suppresses progress reports and other informational messages. Should be placed first in the command line to quiet most messages.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dClustCountOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_CLUST_COUNT_METADATA);
    const params = v_3d_clust_count_params(datasets, prefix, final, quiet)
    return v_3d_clust_count_execute(params, execution);
}


export {
      V3dClustCountOutputs,
      V3dClustCountParameters,
      V_3D_CLUST_COUNT_METADATA,
      v_3d_clust_count,
      v_3d_clust_count_params,
};
