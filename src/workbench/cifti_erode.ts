// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_ERODE_METADATA: Metadata = {
    id: "bc74c026585faa5731c32e77b9b8935b7ad2dc76.boutiques",
    name: "cifti-erode",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiErodeLeftSurfaceParameters {
    "__STYXTYPE__": "left_surface";
    "surface": InputPathType;
    "opt_left_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiErodeRightSurfaceParameters {
    "__STYXTYPE__": "right_surface";
    "surface": InputPathType;
    "opt_right_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiErodeCerebellumSurfaceParameters {
    "__STYXTYPE__": "cerebellum_surface";
    "surface": InputPathType;
    "opt_cerebellum_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiErodeParameters {
    "__STYXTYPE__": "cifti-erode";
    "cifti_in": InputPathType;
    "direction": string;
    "surface_distance": number;
    "volume_distance": number;
    "cifti_out": string;
    "left_surface"?: CiftiErodeLeftSurfaceParameters | null | undefined;
    "right_surface"?: CiftiErodeRightSurfaceParameters | null | undefined;
    "cerebellum_surface"?: CiftiErodeCerebellumSurfaceParameters | null | undefined;
    "opt_merged_volume": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cifti-erode": cifti_erode_cargs,
        "left_surface": cifti_erode_left_surface_cargs,
        "right_surface": cifti_erode_right_surface_cargs,
        "cerebellum_surface": cifti_erode_cerebellum_surface_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "cifti-erode": cifti_erode_outputs,
    };
    return outputsFuncs[t];
}


function cifti_erode_left_surface_params(
    surface: InputPathType,
    opt_left_corrected_areas_area_metric: InputPathType | null = null,
): CiftiErodeLeftSurfaceParameters {
    /**
     * Build parameters.
    
     * @param surface the left surface file
     * @param opt_left_corrected_areas_area_metric vertex areas to use instead of computing them from the left surface: the corrected vertex areas, as a metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "left_surface" as const,
        "surface": surface,
    };
    if (opt_left_corrected_areas_area_metric !== null) {
        params["opt_left_corrected_areas_area_metric"] = opt_left_corrected_areas_area_metric;
    }
    return params;
}


function cifti_erode_left_surface_cargs(
    params: CiftiErodeLeftSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-left-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_left_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-left-corrected-areas",
            execution.inputFile((params["opt_left_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


function cifti_erode_right_surface_params(
    surface: InputPathType,
    opt_right_corrected_areas_area_metric: InputPathType | null = null,
): CiftiErodeRightSurfaceParameters {
    /**
     * Build parameters.
    
     * @param surface the right surface file
     * @param opt_right_corrected_areas_area_metric vertex areas to use instead of computing them from the right surface: the corrected vertex areas, as a metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "right_surface" as const,
        "surface": surface,
    };
    if (opt_right_corrected_areas_area_metric !== null) {
        params["opt_right_corrected_areas_area_metric"] = opt_right_corrected_areas_area_metric;
    }
    return params;
}


function cifti_erode_right_surface_cargs(
    params: CiftiErodeRightSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-right-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_right_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-right-corrected-areas",
            execution.inputFile((params["opt_right_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


function cifti_erode_cerebellum_surface_params(
    surface: InputPathType,
    opt_cerebellum_corrected_areas_area_metric: InputPathType | null = null,
): CiftiErodeCerebellumSurfaceParameters {
    /**
     * Build parameters.
    
     * @param surface the cerebellum surface file
     * @param opt_cerebellum_corrected_areas_area_metric vertex areas to use instead of computing them from the cerebellum surface: the corrected vertex areas, as a metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cerebellum_surface" as const,
        "surface": surface,
    };
    if (opt_cerebellum_corrected_areas_area_metric !== null) {
        params["opt_cerebellum_corrected_areas_area_metric"] = opt_cerebellum_corrected_areas_area_metric;
    }
    return params;
}


function cifti_erode_cerebellum_surface_cargs(
    params: CiftiErodeCerebellumSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-cerebellum-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_cerebellum_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-corrected-areas",
            execution.inputFile((params["opt_cerebellum_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `cifti_erode(...)`.
 *
 * @interface
 */
interface CiftiErodeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


function cifti_erode_params(
    cifti_in: InputPathType,
    direction: string,
    surface_distance: number,
    volume_distance: number,
    cifti_out: string,
    left_surface: CiftiErodeLeftSurfaceParameters | null = null,
    right_surface: CiftiErodeRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiErodeCerebellumSurfaceParameters | null = null,
    opt_merged_volume: boolean = false,
): CiftiErodeParameters {
    /**
     * Build parameters.
    
     * @param cifti_in the input cifti file
     * @param direction which dimension to dilate along, ROW or COLUMN
     * @param surface_distance the distance to dilate on surfaces, in mm
     * @param volume_distance the distance to dilate in the volume, in mm
     * @param cifti_out the output cifti file
     * @param left_surface specify the left surface to use
     * @param right_surface specify the right surface to use
     * @param cerebellum_surface specify the cerebellum surface to use
     * @param opt_merged_volume treat volume components as if they were a single component
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti-erode" as const,
        "cifti_in": cifti_in,
        "direction": direction,
        "surface_distance": surface_distance,
        "volume_distance": volume_distance,
        "cifti_out": cifti_out,
        "opt_merged_volume": opt_merged_volume,
    };
    if (left_surface !== null) {
        params["left_surface"] = left_surface;
    }
    if (right_surface !== null) {
        params["right_surface"] = right_surface;
    }
    if (cerebellum_surface !== null) {
        params["cerebellum_surface"] = cerebellum_surface;
    }
    return params;
}


function cifti_erode_cargs(
    params: CiftiErodeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-erode");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push(String((params["surface_distance"] ?? null)));
    cargs.push(String((params["volume_distance"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["left_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["left_surface"] ?? null).__STYXTYPE__)((params["left_surface"] ?? null), execution));
    }
    if ((params["right_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["right_surface"] ?? null).__STYXTYPE__)((params["right_surface"] ?? null), execution));
    }
    if ((params["cerebellum_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["cerebellum_surface"] ?? null).__STYXTYPE__)((params["cerebellum_surface"] ?? null), execution));
    }
    if ((params["opt_merged_volume"] ?? null)) {
        cargs.push("-merged-volume");
    }
    return cargs;
}


function cifti_erode_outputs(
    params: CiftiErodeParameters,
    execution: Execution,
): CiftiErodeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CiftiErodeOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


function cifti_erode_execute(
    params: CiftiErodeParameters,
    execution: Execution,
): CiftiErodeOutputs {
    /**
     * Erode a cifti file.
     * 
     * For all data values that are empty (for label data, unlabeled, for other data, zero), set the surrounding values to empty.  The surrounding values are defined as the immediate neighbors and all values in the same structure within the specified distance (-merged-volume treats all voxels as one structure).
     * 
     * The -*-corrected-areas options are intended for eroding on group average surfaces, but it is only an approximate correction.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CiftiErodeOutputs`).
     */
    params = execution.params(params)
    const cargs = cifti_erode_cargs(params, execution)
    const ret = cifti_erode_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cifti_erode(
    cifti_in: InputPathType,
    direction: string,
    surface_distance: number,
    volume_distance: number,
    cifti_out: string,
    left_surface: CiftiErodeLeftSurfaceParameters | null = null,
    right_surface: CiftiErodeRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiErodeCerebellumSurfaceParameters | null = null,
    opt_merged_volume: boolean = false,
    runner: Runner | null = null,
): CiftiErodeOutputs {
    /**
     * Erode a cifti file.
     * 
     * For all data values that are empty (for label data, unlabeled, for other data, zero), set the surrounding values to empty.  The surrounding values are defined as the immediate neighbors and all values in the same structure within the specified distance (-merged-volume treats all voxels as one structure).
     * 
     * The -*-corrected-areas options are intended for eroding on group average surfaces, but it is only an approximate correction.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param cifti_in the input cifti file
     * @param direction which dimension to dilate along, ROW or COLUMN
     * @param surface_distance the distance to dilate on surfaces, in mm
     * @param volume_distance the distance to dilate in the volume, in mm
     * @param cifti_out the output cifti file
     * @param left_surface specify the left surface to use
     * @param right_surface specify the right surface to use
     * @param cerebellum_surface specify the cerebellum surface to use
     * @param opt_merged_volume treat volume components as if they were a single component
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CiftiErodeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_ERODE_METADATA);
    const params = cifti_erode_params(cifti_in, direction, surface_distance, volume_distance, cifti_out, left_surface, right_surface, cerebellum_surface, opt_merged_volume)
    return cifti_erode_execute(params, execution);
}


export {
      CIFTI_ERODE_METADATA,
      CiftiErodeCerebellumSurfaceParameters,
      CiftiErodeLeftSurfaceParameters,
      CiftiErodeOutputs,
      CiftiErodeParameters,
      CiftiErodeRightSurfaceParameters,
      cifti_erode,
      cifti_erode_cerebellum_surface_params,
      cifti_erode_left_surface_params,
      cifti_erode_params,
      cifti_erode_right_surface_params,
};
