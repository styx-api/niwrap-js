// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SYNTHESIZE_METADATA: Metadata = {
    id: "79cfbd97a99e59a5c391e1bda50527a214e73fad.boutiques",
    name: "3dSynthesize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSynthesizeParameters {
    "@type": "afni.3dSynthesize";
    "c_bucket": InputPathType;
    "matrix": InputPathType;
    "select": string;
    "prefix": string;
    "dry_flag": boolean;
    "tr"?: number | null | undefined;
    "cenfill"?: "zero" | "nbhr" | "none" | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dSynthesize": v_3d_synthesize_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_synthesize(...)`.
 *
 * @interface
 */
interface V3dSynthesizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param c_bucket Input dataset from 3dDeconvolve via the '-cbucket' option.
 * @param matrix Matrix file from 3dDeconvolve via the '-x1D' option.
 * @param select Select columns from the matrix and corresponding sub-bricks from the cbucket. Can use forms like 'baseline', 'polort', 'allfunc', 'allstim', 'all', 'something', or numbers/ranges.
 * @param prefix Output result into dataset with the specified name.
 * @param dry_flag Don't compute the output, just check the inputs.
 * @param tr Set TR in the output to the specified value.
 * @param cenfill How censored time points from 3dDeconvolve will be filled (options: 'zero', 'nbhr', 'none').
 *
 * @returns Parameter dictionary
 */
function v_3d_synthesize_params(
    c_bucket: InputPathType,
    matrix: InputPathType,
    select: string,
    prefix: string,
    dry_flag: boolean = false,
    tr: number | null = null,
    cenfill: "zero" | "nbhr" | "none" | null = null,
): V3dSynthesizeParameters {
    const params = {
        "@type": "afni.3dSynthesize" as const,
        "c_bucket": c_bucket,
        "matrix": matrix,
        "select": select,
        "prefix": prefix,
        "dry_flag": dry_flag,
    };
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (cenfill !== null) {
        params["cenfill"] = cenfill;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_synthesize_cargs(
    params: V3dSynthesizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dSynthesize");
    cargs.push(
        "-cbucket",
        execution.inputFile((params["c_bucket"] ?? null))
    );
    cargs.push(
        "-matrix",
        execution.inputFile((params["matrix"] ?? null))
    );
    cargs.push(
        "-select",
        (params["select"] ?? null)
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["dry_flag"] ?? null)) {
        cargs.push("-dry");
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-TR",
            String((params["tr"] ?? null))
        );
    }
    if ((params["cenfill"] ?? null) !== null) {
        cargs.push(
            "-cenfill",
            (params["cenfill"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_synthesize_outputs(
    params: V3dSynthesizeParameters,
    execution: Execution,
): V3dSynthesizeOutputs {
    const ret: V3dSynthesizeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 3dSynthesize
 *
 * Reads a '-cbucket' dataset and a '.xmat.1D' matrix from 3dDeconvolve, and synthesizes a fit dataset using selected sub-bricks and matrix columns.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSynthesizeOutputs`).
 */
function v_3d_synthesize_execute(
    params: V3dSynthesizeParameters,
    runner: Runner | null = null,
): V3dSynthesizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SYNTHESIZE_METADATA);
    params = execution.params(params)
    const cargs = v_3d_synthesize_cargs(params, execution)
    const ret = v_3d_synthesize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dSynthesize
 *
 * Reads a '-cbucket' dataset and a '.xmat.1D' matrix from 3dDeconvolve, and synthesizes a fit dataset using selected sub-bricks and matrix columns.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param c_bucket Input dataset from 3dDeconvolve via the '-cbucket' option.
 * @param matrix Matrix file from 3dDeconvolve via the '-x1D' option.
 * @param select Select columns from the matrix and corresponding sub-bricks from the cbucket. Can use forms like 'baseline', 'polort', 'allfunc', 'allstim', 'all', 'something', or numbers/ranges.
 * @param prefix Output result into dataset with the specified name.
 * @param dry_flag Don't compute the output, just check the inputs.
 * @param tr Set TR in the output to the specified value.
 * @param cenfill How censored time points from 3dDeconvolve will be filled (options: 'zero', 'nbhr', 'none').
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSynthesizeOutputs`).
 */
function v_3d_synthesize(
    c_bucket: InputPathType,
    matrix: InputPathType,
    select: string,
    prefix: string,
    dry_flag: boolean = false,
    tr: number | null = null,
    cenfill: "zero" | "nbhr" | "none" | null = null,
    runner: Runner | null = null,
): V3dSynthesizeOutputs {
    const params = v_3d_synthesize_params(c_bucket, matrix, select, prefix, dry_flag, tr, cenfill)
    return v_3d_synthesize_execute(params, runner);
}


export {
      V3dSynthesizeOutputs,
      V3dSynthesizeParameters,
      V_3D_SYNTHESIZE_METADATA,
      v_3d_synthesize,
      v_3d_synthesize_execute,
      v_3d_synthesize_params,
};
