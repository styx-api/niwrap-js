// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACKIMADIR_METADATA: Metadata = {
    id: "5bc48c2b10587aee2d4de8244a11789fed81bd8a.boutiques",
    name: "unpackimadir",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UnpackimadirParameters {
    "@type"?: "freesurfer/unpackimadir";
    "source_directory": string;
    "target_directory": string;
}
type UnpackimadirParametersTagged = Required<Pick<UnpackimadirParameters, '@type'>> & UnpackimadirParameters;


/**
 * Output object returned when calling `UnpackimadirParameters(...)`.
 *
 * @interface
 */
interface UnpackimadirOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source_directory Source directory containing the images to be unpacked
 * @param target_directory Target directory where the unpacked images will be stored
 *
 * @returns Parameter dictionary
 */
function unpackimadir_params(
    source_directory: string,
    target_directory: string,
): UnpackimadirParametersTagged {
    const params = {
        "@type": "freesurfer/unpackimadir" as const,
        "source_directory": source_directory,
        "target_directory": target_directory,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function unpackimadir_cargs(
    params: UnpackimadirParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("unpackimadir");
    cargs.push(
        "-src",
        (params["source_directory"] ?? null)
    );
    cargs.push(
        "-targ",
        (params["target_directory"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function unpackimadir_outputs(
    params: UnpackimadirParameters,
    execution: Execution,
): UnpackimadirOutputs {
    const ret: UnpackimadirOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * unpackimadir
 *
 * Unpack image directories.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpackimadirOutputs`).
 */
function unpackimadir_execute(
    params: UnpackimadirParameters,
    runner: Runner | null = null,
): UnpackimadirOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACKIMADIR_METADATA);
    params = execution.params(params)
    const cargs = unpackimadir_cargs(params, execution)
    const ret = unpackimadir_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * unpackimadir
 *
 * Unpack image directories.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source_directory Source directory containing the images to be unpacked
 * @param target_directory Target directory where the unpacked images will be stored
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpackimadirOutputs`).
 */
function unpackimadir(
    source_directory: string,
    target_directory: string,
    runner: Runner | null = null,
): UnpackimadirOutputs {
    const params = unpackimadir_params(source_directory, target_directory)
    return unpackimadir_execute(params, runner);
}


export {
      UNPACKIMADIR_METADATA,
      UnpackimadirOutputs,
      unpackimadir,
      unpackimadir_execute,
      unpackimadir_params,
};
