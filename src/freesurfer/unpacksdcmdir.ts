// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACKSDCMDIR_METADATA: Metadata = {
    id: "f2d2973173264580381ae83a48a3fe0e5aa0e05d.boutiques",
    name: "unpacksdcmdir",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UnpacksdcmdirParameters {
    "@type": "freesurfer.unpacksdcmdir";
    "input_directory": string;
    "output_directory": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.unpacksdcmdir": unpacksdcmdir_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.unpacksdcmdir": unpacksdcmdir_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `unpacksdcmdir(...)`.
 *
 * @interface
 */
interface UnpacksdcmdirOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The directory that will contain the unpacked data.
     */
    unpacked_data: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_directory The directory containing SD card data to be unpacked.
 * @param output_directory The output directory where unpacked data will be stored.
 *
 * @returns Parameter dictionary
 */
function unpacksdcmdir_params(
    input_directory: string,
    output_directory: string,
): UnpacksdcmdirParameters {
    const params = {
        "@type": "freesurfer.unpacksdcmdir" as const,
        "input_directory": input_directory,
        "output_directory": output_directory,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function unpacksdcmdir_cargs(
    params: UnpacksdcmdirParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("unpacksdcmdir");
    cargs.push((params["input_directory"] ?? null));
    cargs.push((params["output_directory"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function unpacksdcmdir_outputs(
    params: UnpacksdcmdirParameters,
    execution: Execution,
): UnpacksdcmdirOutputs {
    const ret: UnpacksdcmdirOutputs = {
        root: execution.outputFile("."),
        unpacked_data: execution.outputFile([(params["output_directory"] ?? null), "/unpacked_data"].join('')),
    };
    return ret;
}


/**
 * unpacksdcmdir
 *
 * A tool for unpacking SD card directories, typically used in neuroimaging workflows. It seems to have a dependency on Tcl, as indicated by the error messages.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpacksdcmdirOutputs`).
 */
function unpacksdcmdir_execute(
    params: UnpacksdcmdirParameters,
    runner: Runner | null = null,
): UnpacksdcmdirOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACKSDCMDIR_METADATA);
    params = execution.params(params)
    const cargs = unpacksdcmdir_cargs(params, execution)
    const ret = unpacksdcmdir_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * unpacksdcmdir
 *
 * A tool for unpacking SD card directories, typically used in neuroimaging workflows. It seems to have a dependency on Tcl, as indicated by the error messages.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_directory The directory containing SD card data to be unpacked.
 * @param output_directory The output directory where unpacked data will be stored.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpacksdcmdirOutputs`).
 */
function unpacksdcmdir(
    input_directory: string,
    output_directory: string,
    runner: Runner | null = null,
): UnpacksdcmdirOutputs {
    const params = unpacksdcmdir_params(input_directory, output_directory)
    return unpacksdcmdir_execute(params, runner);
}


export {
      UNPACKSDCMDIR_METADATA,
      UnpacksdcmdirOutputs,
      UnpacksdcmdirParameters,
      unpacksdcmdir,
      unpacksdcmdir_execute,
      unpacksdcmdir_params,
};
