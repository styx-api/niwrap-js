// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_NEUROIMAGING_BATTERY_METADATA: Metadata = {
    id: "3c073ef3644ad5eb7696969346c7947932d963ad.boutiques",
    name: "antsNeuroimagingBattery",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsNeuroimagingBatteryParameters {
    "@type"?: "ants/antsNeuroimagingBattery";
    "input_directory": string;
    "output_directory": string;
    "output_name": string;
    "anatomical_image": InputPathType;
    "anatomical_mask": InputPathType;
    "template"?: InputPathType | null | undefined;
    "template_transform_name"?: string | null | undefined;
    "template_labels"?: InputPathType | null | undefined;
    "dti_flag"?: string | null | undefined;
    "pcasl_flag"?: string | null | undefined;
    "pasl_flag"?: string | null | undefined;
    "pasl_m0_flag"?: string | null | undefined;
    "bold_flag"?: string | null | undefined;
    "rsbold_flag"?: string | null | undefined;
    "mt_flag"?: string | null | undefined;
    "no_mt_flag"?: string | null | undefined;
    "temp_directory"?: string | null | undefined;
    "help": boolean;
    "info_only": boolean;
}
type AntsNeuroimagingBatteryParametersTagged = Required<Pick<AntsNeuroimagingBatteryParameters, '@type'>> & AntsNeuroimagingBatteryParameters;


/**
 * Output object returned when calling `AntsNeuroimagingBatteryParameters(...)`.
 *
 * @interface
 */
interface AntsNeuroimagingBatteryOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Directory containing output transform files.
     */
    output_directory: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_directory Directory where to look for modality images.
 * @param output_directory Directory where output goes (where antsCorticalThickness output lives).
 * @param output_name File prefix for outputs.
 * @param anatomical_image Reference subject image (usually T1).
 * @param anatomical_mask Mask of anatomical image, should contain cerebrum, cerebellum, and brainstem.
 * @param template Template image.
 * @param template_transform_name Basename of transforms from anatomical to template space (must be in output base dir).
 * @param template_labels Labels in template space.
 * @param dti_flag DTI flag in DIRNAME/fileflag/outid format.
 * @param pcasl_flag pCASL flag in DIRNAME/fileflag/outid format.
 * @param pasl_flag PASL flag in DIRNAME/fileflag/outid format.
 * @param pasl_m0_flag PASL M0 flag in DIRNAME/fileflag/outid format.
 * @param bold_flag BOLD flag in DIRNAME/fileflag/outid format.
 * @param rsbold_flag RSBOLD flag in DIRNAME/fileflag/outid format.
 * @param mt_flag MT flag in DIRNAME/fileflag/outid format.
 * @param no_mt_flag No MT flag in DIRNAME/fileflag/outid format.
 * @param temp_directory Temporary directory.
 * @param help Display help information.
 * @param info_only Look for inputs, output what is there, but don't process any data.
 *
 * @returns Parameter dictionary
 */
function ants_neuroimaging_battery_params(
    input_directory: string,
    output_directory: string,
    output_name: string,
    anatomical_image: InputPathType,
    anatomical_mask: InputPathType,
    template: InputPathType | null = null,
    template_transform_name: string | null = null,
    template_labels: InputPathType | null = null,
    dti_flag: string | null = null,
    pcasl_flag: string | null = null,
    pasl_flag: string | null = null,
    pasl_m0_flag: string | null = null,
    bold_flag: string | null = null,
    rsbold_flag: string | null = null,
    mt_flag: string | null = null,
    no_mt_flag: string | null = null,
    temp_directory: string | null = null,
    help: boolean = false,
    info_only: boolean = false,
): AntsNeuroimagingBatteryParametersTagged {
    const params = {
        "@type": "ants/antsNeuroimagingBattery" as const,
        "input_directory": input_directory,
        "output_directory": output_directory,
        "output_name": output_name,
        "anatomical_image": anatomical_image,
        "anatomical_mask": anatomical_mask,
        "help": help,
        "info_only": info_only,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (template_transform_name !== null) {
        params["template_transform_name"] = template_transform_name;
    }
    if (template_labels !== null) {
        params["template_labels"] = template_labels;
    }
    if (dti_flag !== null) {
        params["dti_flag"] = dti_flag;
    }
    if (pcasl_flag !== null) {
        params["pcasl_flag"] = pcasl_flag;
    }
    if (pasl_flag !== null) {
        params["pasl_flag"] = pasl_flag;
    }
    if (pasl_m0_flag !== null) {
        params["pasl_m0_flag"] = pasl_m0_flag;
    }
    if (bold_flag !== null) {
        params["bold_flag"] = bold_flag;
    }
    if (rsbold_flag !== null) {
        params["rsbold_flag"] = rsbold_flag;
    }
    if (mt_flag !== null) {
        params["mt_flag"] = mt_flag;
    }
    if (no_mt_flag !== null) {
        params["no_mt_flag"] = no_mt_flag;
    }
    if (temp_directory !== null) {
        params["temp_directory"] = temp_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_neuroimaging_battery_cargs(
    params: AntsNeuroimagingBatteryParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsNeuroimagingBattery");
    cargs.push(
        "--input-directory",
        (params["input_directory"] ?? null)
    );
    cargs.push(
        "--output-directory",
        (params["output_directory"] ?? null)
    );
    cargs.push(
        "--output-name",
        (params["output_name"] ?? null)
    );
    cargs.push(
        "--anatomical",
        execution.inputFile((params["anatomical_image"] ?? null))
    );
    cargs.push(
        "--anatomical-mask",
        execution.inputFile((params["anatomical_mask"] ?? null))
    );
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "--template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["template_transform_name"] ?? null) !== null) {
        cargs.push(
            "--template-transform-name",
            (params["template_transform_name"] ?? null)
        );
    }
    if ((params["template_labels"] ?? null) !== null) {
        cargs.push(
            "--template-labels",
            execution.inputFile((params["template_labels"] ?? null))
        );
    }
    if ((params["dti_flag"] ?? null) !== null) {
        cargs.push(
            "--dti-flag",
            (params["dti_flag"] ?? null)
        );
    }
    if ((params["pcasl_flag"] ?? null) !== null) {
        cargs.push(
            "--pcasl-flag",
            (params["pcasl_flag"] ?? null)
        );
    }
    if ((params["pasl_flag"] ?? null) !== null) {
        cargs.push(
            "--pasl-flag",
            (params["pasl_flag"] ?? null)
        );
    }
    if ((params["pasl_m0_flag"] ?? null) !== null) {
        cargs.push(
            "--pasl-m0-flag",
            (params["pasl_m0_flag"] ?? null)
        );
    }
    if ((params["bold_flag"] ?? null) !== null) {
        cargs.push(
            "--bold-flag",
            (params["bold_flag"] ?? null)
        );
    }
    if ((params["rsbold_flag"] ?? null) !== null) {
        cargs.push(
            "--rsbold-flag",
            (params["rsbold_flag"] ?? null)
        );
    }
    if ((params["mt_flag"] ?? null) !== null) {
        cargs.push(
            "--mt-flag",
            (params["mt_flag"] ?? null)
        );
    }
    if ((params["no_mt_flag"] ?? null) !== null) {
        cargs.push(
            "--no-mt-flag",
            (params["no_mt_flag"] ?? null)
        );
    }
    if ((params["temp_directory"] ?? null) !== null) {
        cargs.push(
            "--temp-directory",
            (params["temp_directory"] ?? null)
        );
    }
    if ((params["help"] ?? false)) {
        cargs.push("--help");
    }
    if ((params["info_only"] ?? false)) {
        cargs.push("--info-only");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_neuroimaging_battery_outputs(
    params: AntsNeuroimagingBatteryParameters,
    execution: Execution,
): AntsNeuroimagingBatteryOutputs {
    const ret: AntsNeuroimagingBatteryOutputs = {
        root: execution.outputFile("."),
        output_directory: execution.outputFile([(params["output_directory"] ?? null)].join('')),
    };
    return ret;
}


/**
 * antsNeuroimagingBattery
 *
 * Align MR modalities to a common within-subject (and optional template) space.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsNeuroimagingBatteryOutputs`).
 */
function ants_neuroimaging_battery_execute(
    params: AntsNeuroimagingBatteryParameters,
    runner: Runner | null = null,
): AntsNeuroimagingBatteryOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_NEUROIMAGING_BATTERY_METADATA);
    params = execution.params(params)
    const cargs = ants_neuroimaging_battery_cargs(params, execution)
    const ret = ants_neuroimaging_battery_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * antsNeuroimagingBattery
 *
 * Align MR modalities to a common within-subject (and optional template) space.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param input_directory Directory where to look for modality images.
 * @param output_directory Directory where output goes (where antsCorticalThickness output lives).
 * @param output_name File prefix for outputs.
 * @param anatomical_image Reference subject image (usually T1).
 * @param anatomical_mask Mask of anatomical image, should contain cerebrum, cerebellum, and brainstem.
 * @param template Template image.
 * @param template_transform_name Basename of transforms from anatomical to template space (must be in output base dir).
 * @param template_labels Labels in template space.
 * @param dti_flag DTI flag in DIRNAME/fileflag/outid format.
 * @param pcasl_flag pCASL flag in DIRNAME/fileflag/outid format.
 * @param pasl_flag PASL flag in DIRNAME/fileflag/outid format.
 * @param pasl_m0_flag PASL M0 flag in DIRNAME/fileflag/outid format.
 * @param bold_flag BOLD flag in DIRNAME/fileflag/outid format.
 * @param rsbold_flag RSBOLD flag in DIRNAME/fileflag/outid format.
 * @param mt_flag MT flag in DIRNAME/fileflag/outid format.
 * @param no_mt_flag No MT flag in DIRNAME/fileflag/outid format.
 * @param temp_directory Temporary directory.
 * @param help Display help information.
 * @param info_only Look for inputs, output what is there, but don't process any data.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsNeuroimagingBatteryOutputs`).
 */
function ants_neuroimaging_battery(
    input_directory: string,
    output_directory: string,
    output_name: string,
    anatomical_image: InputPathType,
    anatomical_mask: InputPathType,
    template: InputPathType | null = null,
    template_transform_name: string | null = null,
    template_labels: InputPathType | null = null,
    dti_flag: string | null = null,
    pcasl_flag: string | null = null,
    pasl_flag: string | null = null,
    pasl_m0_flag: string | null = null,
    bold_flag: string | null = null,
    rsbold_flag: string | null = null,
    mt_flag: string | null = null,
    no_mt_flag: string | null = null,
    temp_directory: string | null = null,
    help: boolean = false,
    info_only: boolean = false,
    runner: Runner | null = null,
): AntsNeuroimagingBatteryOutputs {
    const params = ants_neuroimaging_battery_params(input_directory, output_directory, output_name, anatomical_image, anatomical_mask, template, template_transform_name, template_labels, dti_flag, pcasl_flag, pasl_flag, pasl_m0_flag, bold_flag, rsbold_flag, mt_flag, no_mt_flag, temp_directory, help, info_only)
    return ants_neuroimaging_battery_execute(params, runner);
}


export {
      ANTS_NEUROIMAGING_BATTERY_METADATA,
      AntsNeuroimagingBatteryOutputs,
      ants_neuroimaging_battery,
      ants_neuroimaging_battery_execute,
      ants_neuroimaging_battery_params,
};
