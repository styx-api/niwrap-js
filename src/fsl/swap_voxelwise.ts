// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SWAP_VOXELWISE_METADATA: Metadata = {
    id: "6827958c36fce8a19a4ec91e70b4ccc147045d14.boutiques",
    name: "swap_voxelwise",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SwapVoxelwiseParameters {
    "@type": "fsl.swap_voxelwise";
    "vectors_file_list": InputPathType;
    "scalars_file_list"?: InputPathType | null | undefined;
    "mask": InputPathType;
    "output_base_name"?: string | null | undefined;
    "reorder_mode"?: string | null | undefined;
    "init_mask"?: InputPathType | null | undefined;
    "crossing_thresh"?: number | null | undefined;
    "verbose_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.swap_voxelwise": swap_voxelwise_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.swap_voxelwise": swap_voxelwise_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `swap_voxelwise(...)`.
 *
 * @interface
 */
interface SwapVoxelwiseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with reordered vectors (default name 'reordered.nii.gz')
     */
    reordered_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param vectors_file_list Text file containing list of vectors
 * @param mask Filename of brain mask or skeleton
 * @param scalars_file_list Text file containing list of scalars
 * @param output_base_name Output base name
 * @param reorder_mode Reordering mode - choose between 'voxels' (default) or 'volumes'
 * @param init_mask Filename of initialization mask
 * @param crossing_thresh Threshold for considering a crossing fibre region - default=0.1
 * @param verbose_flag Switch on diagnostic messages
 *
 * @returns Parameter dictionary
 */
function swap_voxelwise_params(
    vectors_file_list: InputPathType,
    mask: InputPathType,
    scalars_file_list: InputPathType | null = null,
    output_base_name: string | null = "reordered",
    reorder_mode: string | null = "voxels",
    init_mask: InputPathType | null = null,
    crossing_thresh: number | null = 0.1,
    verbose_flag: boolean = false,
): SwapVoxelwiseParameters {
    const params = {
        "@type": "fsl.swap_voxelwise" as const,
        "vectors_file_list": vectors_file_list,
        "mask": mask,
        "verbose_flag": verbose_flag,
    };
    if (scalars_file_list !== null) {
        params["scalars_file_list"] = scalars_file_list;
    }
    if (output_base_name !== null) {
        params["output_base_name"] = output_base_name;
    }
    if (reorder_mode !== null) {
        params["reorder_mode"] = reorder_mode;
    }
    if (init_mask !== null) {
        params["init_mask"] = init_mask;
    }
    if (crossing_thresh !== null) {
        params["crossing_thresh"] = crossing_thresh;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function swap_voxelwise_cargs(
    params: SwapVoxelwiseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("swap_voxelwise");
    cargs.push(
        "-v",
        execution.inputFile((params["vectors_file_list"] ?? null))
    );
    if ((params["scalars_file_list"] ?? null) !== null) {
        cargs.push(
            "-s",
            execution.inputFile((params["scalars_file_list"] ?? null))
        );
    }
    cargs.push(
        "-m",
        execution.inputFile((params["mask"] ?? null))
    );
    if ((params["output_base_name"] ?? null) !== null) {
        cargs.push(
            "-b",
            (params["output_base_name"] ?? null)
        );
    }
    if ((params["reorder_mode"] ?? null) !== null) {
        cargs.push(
            "--mode",
            (params["reorder_mode"] ?? null)
        );
    }
    if ((params["init_mask"] ?? null) !== null) {
        cargs.push(
            "--initmask",
            execution.inputFile((params["init_mask"] ?? null))
        );
    }
    if ((params["crossing_thresh"] ?? null) !== null) {
        cargs.push(
            "--xthresh",
            String((params["crossing_thresh"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-V");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function swap_voxelwise_outputs(
    params: SwapVoxelwiseParameters,
    execution: Execution,
): SwapVoxelwiseOutputs {
    const ret: SwapVoxelwiseOutputs = {
        root: execution.outputFile("."),
        reordered_output: ((params["output_base_name"] ?? null) !== null) ? execution.outputFile([(params["output_base_name"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * Reordering of vectors with direction preservation.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SwapVoxelwiseOutputs`).
 */
function swap_voxelwise_execute(
    params: SwapVoxelwiseParameters,
    runner: Runner | null = null,
): SwapVoxelwiseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SWAP_VOXELWISE_METADATA);
    params = execution.params(params)
    const cargs = swap_voxelwise_cargs(params, execution)
    const ret = swap_voxelwise_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Reordering of vectors with direction preservation.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param vectors_file_list Text file containing list of vectors
 * @param mask Filename of brain mask or skeleton
 * @param scalars_file_list Text file containing list of scalars
 * @param output_base_name Output base name
 * @param reorder_mode Reordering mode - choose between 'voxels' (default) or 'volumes'
 * @param init_mask Filename of initialization mask
 * @param crossing_thresh Threshold for considering a crossing fibre region - default=0.1
 * @param verbose_flag Switch on diagnostic messages
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SwapVoxelwiseOutputs`).
 */
function swap_voxelwise(
    vectors_file_list: InputPathType,
    mask: InputPathType,
    scalars_file_list: InputPathType | null = null,
    output_base_name: string | null = "reordered",
    reorder_mode: string | null = "voxels",
    init_mask: InputPathType | null = null,
    crossing_thresh: number | null = 0.1,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): SwapVoxelwiseOutputs {
    const params = swap_voxelwise_params(vectors_file_list, mask, scalars_file_list, output_base_name, reorder_mode, init_mask, crossing_thresh, verbose_flag)
    return swap_voxelwise_execute(params, runner);
}


export {
      SWAP_VOXELWISE_METADATA,
      SwapVoxelwiseOutputs,
      SwapVoxelwiseParameters,
      swap_voxelwise,
      swap_voxelwise_execute,
      swap_voxelwise_params,
};
