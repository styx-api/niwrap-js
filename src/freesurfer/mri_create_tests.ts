// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CREATE_TESTS_METADATA: Metadata = {
    id: "ef9b53b27b38928103e6f01109a7bdb63e3a0cc8.boutiques",
    name: "mri_create_tests",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCreateTestsParameters {
    "@type": "freesurfer.mri_create_tests";
    "input_file": InputPathType;
    "out_src": string;
    "out_target": string;
    "input_target"?: InputPathType | null | undefined;
    "lta_in"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "noise"?: number | null | undefined;
    "outlier"?: number | null | undefined;
    "outlier_box"?: number | null | undefined;
    "translation_flag": boolean;
    "transdist"?: number | null | undefined;
    "rotation_flag": boolean;
    "maxdeg"?: number | null | undefined;
    "intensity_flag": boolean;
    "iscale"?: number | null | undefined;
    "lta_out"?: string | null | undefined;
    "lta_outs"?: string | null | undefined;
    "lta_outt"?: string | null | undefined;
    "iscale_out"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_create_tests": mri_create_tests_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_create_tests(...)`.
 *
 * @interface
 */
interface MriCreateTestsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input volume to be modified.
 * @param out_src Output source volume name.
 * @param out_target Output target volume name.
 * @param input_target Input target volume to be modified, must be in the same space as input volume. Default: use input volume to create output target.
 * @param lta_in Specify LTA for mapping input to output target. Cannot be used with --rotation or --translation.
 * @param mask Mask source MRI with mask file.
 * @param noise Add global Gaussian noise.
 * @param outlier Add random outlier voxels.
 * @param outlier_box Add box containing random voxels.
 * @param translation_flag Apply random translation.
 * @param transdist Set maximal translation distance in mm. Default is 11.
 * @param rotation_flag Apply random rotation.
 * @param maxdeg Maximal rotation in degrees. Default is 25.
 * @param intensity_flag Apply random intensity scaling.
 * @param iscale Use fixed intensity scaling parameter.
 * @param lta_out Write used random transform to LTA.
 * @param lta_outs Write halfway LTA for source.
 * @param lta_outt Write halfway LTA for target.
 * @param iscale_out Write used intensity scaling parameter.
 *
 * @returns Parameter dictionary
 */
function mri_create_tests_params(
    input_file: InputPathType,
    out_src: string,
    out_target: string,
    input_target: InputPathType | null = null,
    lta_in: string | null = null,
    mask: InputPathType | null = null,
    noise: number | null = null,
    outlier: number | null = null,
    outlier_box: number | null = null,
    translation_flag: boolean = false,
    transdist: number | null = null,
    rotation_flag: boolean = false,
    maxdeg: number | null = null,
    intensity_flag: boolean = false,
    iscale: number | null = null,
    lta_out: string | null = null,
    lta_outs: string | null = null,
    lta_outt: string | null = null,
    iscale_out: string | null = null,
): MriCreateTestsParameters {
    const params = {
        "@type": "freesurfer.mri_create_tests" as const,
        "input_file": input_file,
        "out_src": out_src,
        "out_target": out_target,
        "translation_flag": translation_flag,
        "rotation_flag": rotation_flag,
        "intensity_flag": intensity_flag,
    };
    if (input_target !== null) {
        params["input_target"] = input_target;
    }
    if (lta_in !== null) {
        params["lta_in"] = lta_in;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (noise !== null) {
        params["noise"] = noise;
    }
    if (outlier !== null) {
        params["outlier"] = outlier;
    }
    if (outlier_box !== null) {
        params["outlier_box"] = outlier_box;
    }
    if (transdist !== null) {
        params["transdist"] = transdist;
    }
    if (maxdeg !== null) {
        params["maxdeg"] = maxdeg;
    }
    if (iscale !== null) {
        params["iscale"] = iscale;
    }
    if (lta_out !== null) {
        params["lta_out"] = lta_out;
    }
    if (lta_outs !== null) {
        params["lta_outs"] = lta_outs;
    }
    if (lta_outt !== null) {
        params["lta_outt"] = lta_outt;
    }
    if (iscale_out !== null) {
        params["iscale_out"] = iscale_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_create_tests_cargs(
    params: MriCreateTestsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_create_tests");
    cargs.push(
        "--in",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "--outs",
        (params["out_src"] ?? null)
    );
    cargs.push(
        "--outt",
        (params["out_target"] ?? null)
    );
    if ((params["input_target"] ?? null) !== null) {
        cargs.push(
            "--int",
            execution.inputFile((params["input_target"] ?? null))
        );
    }
    if ((params["lta_in"] ?? null) !== null) {
        cargs.push(
            "--lta-in",
            (params["lta_in"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["noise"] ?? null) !== null) {
        cargs.push(
            "--noise",
            String((params["noise"] ?? null))
        );
    }
    if ((params["outlier"] ?? null) !== null) {
        cargs.push(
            "--outlier",
            String((params["outlier"] ?? null))
        );
    }
    if ((params["outlier_box"] ?? null) !== null) {
        cargs.push(
            "--outlier-box",
            String((params["outlier_box"] ?? null))
        );
    }
    if ((params["translation_flag"] ?? null)) {
        cargs.push("--translation");
    }
    if ((params["transdist"] ?? null) !== null) {
        cargs.push(
            "--transdist",
            String((params["transdist"] ?? null))
        );
    }
    if ((params["rotation_flag"] ?? null)) {
        cargs.push("--rotation");
    }
    if ((params["maxdeg"] ?? null) !== null) {
        cargs.push(
            "--maxdeg",
            String((params["maxdeg"] ?? null))
        );
    }
    if ((params["intensity_flag"] ?? null)) {
        cargs.push("--intensity");
    }
    if ((params["iscale"] ?? null) !== null) {
        cargs.push(
            "--iscale",
            String((params["iscale"] ?? null))
        );
    }
    if ((params["lta_out"] ?? null) !== null) {
        cargs.push(
            "--lta-out",
            (params["lta_out"] ?? null)
        );
    }
    if ((params["lta_outs"] ?? null) !== null) {
        cargs.push(
            "--lta-outs",
            (params["lta_outs"] ?? null)
        );
    }
    if ((params["lta_outt"] ?? null) !== null) {
        cargs.push(
            "--lta-outt",
            (params["lta_outt"] ?? null)
        );
    }
    if ((params["iscale_out"] ?? null) !== null) {
        cargs.push(
            "--iscale-out",
            (params["iscale_out"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_create_tests_outputs(
    params: MriCreateTestsParameters,
    execution: Execution,
): MriCreateTestsOutputs {
    const ret: MriCreateTestsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_create_tests
 *
 * Creates test cases for the registration by mapping the input to a source (half way backward) and to a target (half way forward).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCreateTestsOutputs`).
 */
function mri_create_tests_execute(
    params: MriCreateTestsParameters,
    runner: Runner | null = null,
): MriCreateTestsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CREATE_TESTS_METADATA);
    params = execution.params(params)
    const cargs = mri_create_tests_cargs(params, execution)
    const ret = mri_create_tests_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_create_tests
 *
 * Creates test cases for the registration by mapping the input to a source (half way backward) and to a target (half way forward).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input volume to be modified.
 * @param out_src Output source volume name.
 * @param out_target Output target volume name.
 * @param input_target Input target volume to be modified, must be in the same space as input volume. Default: use input volume to create output target.
 * @param lta_in Specify LTA for mapping input to output target. Cannot be used with --rotation or --translation.
 * @param mask Mask source MRI with mask file.
 * @param noise Add global Gaussian noise.
 * @param outlier Add random outlier voxels.
 * @param outlier_box Add box containing random voxels.
 * @param translation_flag Apply random translation.
 * @param transdist Set maximal translation distance in mm. Default is 11.
 * @param rotation_flag Apply random rotation.
 * @param maxdeg Maximal rotation in degrees. Default is 25.
 * @param intensity_flag Apply random intensity scaling.
 * @param iscale Use fixed intensity scaling parameter.
 * @param lta_out Write used random transform to LTA.
 * @param lta_outs Write halfway LTA for source.
 * @param lta_outt Write halfway LTA for target.
 * @param iscale_out Write used intensity scaling parameter.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCreateTestsOutputs`).
 */
function mri_create_tests(
    input_file: InputPathType,
    out_src: string,
    out_target: string,
    input_target: InputPathType | null = null,
    lta_in: string | null = null,
    mask: InputPathType | null = null,
    noise: number | null = null,
    outlier: number | null = null,
    outlier_box: number | null = null,
    translation_flag: boolean = false,
    transdist: number | null = null,
    rotation_flag: boolean = false,
    maxdeg: number | null = null,
    intensity_flag: boolean = false,
    iscale: number | null = null,
    lta_out: string | null = null,
    lta_outs: string | null = null,
    lta_outt: string | null = null,
    iscale_out: string | null = null,
    runner: Runner | null = null,
): MriCreateTestsOutputs {
    const params = mri_create_tests_params(input_file, out_src, out_target, input_target, lta_in, mask, noise, outlier, outlier_box, translation_flag, transdist, rotation_flag, maxdeg, intensity_flag, iscale, lta_out, lta_outs, lta_outt, iscale_out)
    return mri_create_tests_execute(params, runner);
}


export {
      MRI_CREATE_TESTS_METADATA,
      MriCreateTestsOutputs,
      MriCreateTestsParameters,
      mri_create_tests,
      mri_create_tests_execute,
      mri_create_tests_params,
};
