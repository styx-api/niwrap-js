// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FROM3D_METADATA: Metadata = {
    id: "d88853bc4909a884c5e078f5005fa8e795031713.boutiques",
    name: "from3d",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface From3dParameters {
    "__STYXTYPE__": "from3d";
    "verbose": boolean;
    "nsize": boolean;
    "raw": boolean;
    "float": boolean;
    "zfirst"?: number | null | undefined;
    "zlast"?: number | null | undefined;
    "tfirst"?: number | null | undefined;
    "tlast"?: number | null | undefined;
    "input": InputPathType;
    "prefix": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "from3d": from3d_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "from3d": from3d_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `from3d(...)`.
 *
 * @interface
 */
interface From3dOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Extracted 2D images from the 3D dataset
     */
    extracted_images: OutputPathType;
}


function from3d_params(
    input: InputPathType,
    prefix: string,
    verbose: boolean = false,
    nsize: boolean = false,
    raw: boolean = false,
    float: boolean = false,
    zfirst: number | null = null,
    zlast: number | null = null,
    tfirst: number | null = null,
    tlast: number | null = null,
): From3dParameters {
    /**
     * Build parameters.
    
     * @param input Read 3D dataset from file 'fname'
     * @param prefix Write 2D images using prefix 'rname'
     * @param verbose Print out verbose information during the run
     * @param nsize Adjust size of 2D data file to be NxN, by padding with zeros, where N is a power of 2.
     * @param raw Write images in 'raw' format (just the data bytes). There will be no header information saying what the image dimensions are.
     * @param float Write images as floats, no matter what they are in the dataset itself.
     * @param zfirst Set 'num' = number of first z slice to be extracted (default = 1).
     * @param zlast Set 'num' = number of last z slice to be extracted (default = largest).
     * @param tfirst Set 'num' = number of first time slice to be extracted (default = 1).
     * @param tlast Set 'num' = number of last time slice to be extracted (default = largest).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "from3d" as const,
        "verbose": verbose,
        "nsize": nsize,
        "raw": raw,
        "float": float,
        "input": input,
        "prefix": prefix,
    };
    if (zfirst !== null) {
        params["zfirst"] = zfirst;
    }
    if (zlast !== null) {
        params["zlast"] = zlast;
    }
    if (tfirst !== null) {
        params["tfirst"] = tfirst;
    }
    if (tlast !== null) {
        params["tlast"] = tlast;
    }
    return params;
}


function from3d_cargs(
    params: From3dParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("from3d");
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["nsize"] ?? null)) {
        cargs.push("-nsize");
    }
    if ((params["raw"] ?? null)) {
        cargs.push("-raw");
    }
    if ((params["float"] ?? null)) {
        cargs.push("-float");
    }
    if ((params["zfirst"] ?? null) !== null) {
        cargs.push(
            "-zfirst",
            String((params["zfirst"] ?? null))
        );
    }
    if ((params["zlast"] ?? null) !== null) {
        cargs.push(
            "-zlast",
            String((params["zlast"] ?? null))
        );
    }
    if ((params["tfirst"] ?? null) !== null) {
        cargs.push(
            "-tfirst",
            String((params["tfirst"] ?? null))
        );
    }
    if ((params["tlast"] ?? null) !== null) {
        cargs.push(
            "-tlast",
            String((params["tlast"] ?? null))
        );
    }
    cargs.push(
        "-input",
        execution.inputFile((params["input"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    return cargs;
}


function from3d_outputs(
    params: From3dParameters,
    execution: Execution,
): From3dOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: From3dOutputs = {
        root: execution.outputFile("."),
        extracted_images: execution.outputFile([(params["prefix"] ?? null), "*.img"].join('')),
    };
    return ret;
}


function from3d_execute(
    params: From3dParameters,
    execution: Execution,
): From3dOutputs {
    /**
     * Extract 2D image files from a 3D AFNI dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `From3dOutputs`).
     */
    params = execution.params(params)
    const cargs = from3d_cargs(params, execution)
    const ret = from3d_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function from3d(
    input: InputPathType,
    prefix: string,
    verbose: boolean = false,
    nsize: boolean = false,
    raw: boolean = false,
    float: boolean = false,
    zfirst: number | null = null,
    zlast: number | null = null,
    tfirst: number | null = null,
    tlast: number | null = null,
    runner: Runner | null = null,
): From3dOutputs {
    /**
     * Extract 2D image files from a 3D AFNI dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input Read 3D dataset from file 'fname'
     * @param prefix Write 2D images using prefix 'rname'
     * @param verbose Print out verbose information during the run
     * @param nsize Adjust size of 2D data file to be NxN, by padding with zeros, where N is a power of 2.
     * @param raw Write images in 'raw' format (just the data bytes). There will be no header information saying what the image dimensions are.
     * @param float Write images as floats, no matter what they are in the dataset itself.
     * @param zfirst Set 'num' = number of first z slice to be extracted (default = 1).
     * @param zlast Set 'num' = number of last z slice to be extracted (default = largest).
     * @param tfirst Set 'num' = number of first time slice to be extracted (default = 1).
     * @param tlast Set 'num' = number of last time slice to be extracted (default = largest).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `From3dOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FROM3D_METADATA);
    const params = from3d_params(input, prefix, verbose, nsize, raw, float, zfirst, zlast, tfirst, tlast)
    return from3d_execute(params, execution);
}


export {
      FROM3D_METADATA,
      From3dOutputs,
      From3dParameters,
      from3d,
      from3d_params,
};
