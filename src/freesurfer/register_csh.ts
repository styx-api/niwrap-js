// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REGISTER_CSH_METADATA: Metadata = {
    id: "c3131c4548a8e00ebba6f2236c154fc2be6f0cad.boutiques",
    name: "register.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RegisterCshParameters {
    "@type"?: "freesurfer/register.csh";
    "base_image": InputPathType;
    "new_image": InputPathType;
    "options"?: string | null | undefined;
}
type RegisterCshParametersTagged = Required<Pick<RegisterCshParameters, '@type'>> & RegisterCshParameters;


/**
 * Output object returned when calling `RegisterCshParameters(...)`.
 *
 * @interface
 */
interface RegisterCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output registered image
     */
    registered_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param base_image The base image for registration
 * @param new_image The new image to be registered to the base image
 * @param options Additional options for the register.csh command
 *
 * @returns Parameter dictionary
 */
function register_csh_params(
    base_image: InputPathType,
    new_image: InputPathType,
    options: string | null = null,
): RegisterCshParametersTagged {
    const params = {
        "@type": "freesurfer/register.csh" as const,
        "base_image": base_image,
        "new_image": new_image,
    };
    if (options !== null) {
        params["options"] = options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function register_csh_cargs(
    params: RegisterCshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("register.csh");
    cargs.push(execution.inputFile((params["base_image"] ?? null)));
    cargs.push(execution.inputFile((params["new_image"] ?? null)));
    if ((params["options"] ?? null) !== null) {
        cargs.push((params["options"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function register_csh_outputs(
    params: RegisterCshParameters,
    execution: Execution,
): RegisterCshOutputs {
    const ret: RegisterCshOutputs = {
        root: execution.outputFile("."),
        registered_image: execution.outputFile([path.basename((params["new_image"] ?? null)), "_registered"].join('')),
    };
    return ret;
}


/**
 * register.csh
 *
 * A script for registering MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterCshOutputs`).
 */
function register_csh_execute(
    params: RegisterCshParameters,
    runner: Runner | null = null,
): RegisterCshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REGISTER_CSH_METADATA);
    params = execution.params(params)
    const cargs = register_csh_cargs(params, execution)
    const ret = register_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * register.csh
 *
 * A script for registering MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param base_image The base image for registration
 * @param new_image The new image to be registered to the base image
 * @param options Additional options for the register.csh command
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterCshOutputs`).
 */
function register_csh(
    base_image: InputPathType,
    new_image: InputPathType,
    options: string | null = null,
    runner: Runner | null = null,
): RegisterCshOutputs {
    const params = register_csh_params(base_image, new_image, options)
    return register_csh_execute(params, runner);
}


export {
      REGISTER_CSH_METADATA,
      RegisterCshOutputs,
      register_csh,
      register_csh_execute,
      register_csh_params,
};
