// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DCMDIR_INFO_MGH_METADATA: Metadata = {
    id: "162f400a399c275cd7fef293d1d5ad1cd84402e4.boutiques",
    name: "dcmdir-info-mgh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DcmdirInfoMghParameters {
    "__STYXTYPE__": "dcmdir-info-mgh";
    "dicomdir": string;
    "unpackdir"?: string | null | undefined;
    "version": boolean;
    "help": boolean;
    "nopre": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dcmdir-info-mgh": dcmdir_info_mgh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "dcmdir-info-mgh": dcmdir_info_mgh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dcmdir_info_mgh(...)`.
 *
 * @interface
 */
interface DcmdirInfoMghOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Converted DICOM files to MGZ format with naming sequencename_runR.mgz, where R is the run number
     */
    converted_mgz_files: OutputPathType;
}


function dcmdir_info_mgh_params(
    dicomdir: string,
    unpackdir: string | null = null,
    version: boolean = false,
    help: boolean = false,
    nopre: boolean = false,
): DcmdirInfoMghParameters {
    /**
     * Build parameters.
    
     * @param dicomdir Input DICOM directory.
     * @param unpackdir Directory where the unpacked data will be stored (optional). If specified, DICOM files are converted to MGZ format.
     * @param version Print version and exit
     * @param help Print help and exit
     * @param nopre Do not assume filenames use the NNNNNN- prefix convention
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dcmdir-info-mgh" as const,
        "dicomdir": dicomdir,
        "version": version,
        "help": help,
        "nopre": nopre,
    };
    if (unpackdir !== null) {
        params["unpackdir"] = unpackdir;
    }
    return params;
}


function dcmdir_info_mgh_cargs(
    params: DcmdirInfoMghParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dcmdir-info-mgh");
    cargs.push(
        "-mgh",
        (params["dicomdir"] ?? null)
    );
    if ((params["unpackdir"] ?? null) !== null) {
        cargs.push((params["unpackdir"] ?? null));
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["nopre"] ?? null)) {
        cargs.push("--nopre");
    }
    return cargs;
}


function dcmdir_info_mgh_outputs(
    params: DcmdirInfoMghParameters,
    execution: Execution,
): DcmdirInfoMghOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DcmdirInfoMghOutputs = {
        root: execution.outputFile("."),
        converted_mgz_files: execution.outputFile(["sequencename_run*.mgz"].join('')),
    };
    return ret;
}


function dcmdir_info_mgh_execute(
    params: DcmdirInfoMghParameters,
    execution: Execution,
): DcmdirInfoMghOutputs {
    /**
     * Scans a DICOM directory and extracts information about each series.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DcmdirInfoMghOutputs`).
     */
    params = execution.params(params)
    const cargs = dcmdir_info_mgh_cargs(params, execution)
    const ret = dcmdir_info_mgh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dcmdir_info_mgh(
    dicomdir: string,
    unpackdir: string | null = null,
    version: boolean = false,
    help: boolean = false,
    nopre: boolean = false,
    runner: Runner | null = null,
): DcmdirInfoMghOutputs {
    /**
     * Scans a DICOM directory and extracts information about each series.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param dicomdir Input DICOM directory.
     * @param unpackdir Directory where the unpacked data will be stored (optional). If specified, DICOM files are converted to MGZ format.
     * @param version Print version and exit
     * @param help Print help and exit
     * @param nopre Do not assume filenames use the NNNNNN- prefix convention
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DcmdirInfoMghOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DCMDIR_INFO_MGH_METADATA);
    const params = dcmdir_info_mgh_params(dicomdir, unpackdir, version, help, nopre)
    return dcmdir_info_mgh_execute(params, execution);
}


export {
      DCMDIR_INFO_MGH_METADATA,
      DcmdirInfoMghOutputs,
      DcmdirInfoMghParameters,
      dcmdir_info_mgh,
      dcmdir_info_mgh_params,
};
