// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPEC_FILE_RELOCATE_METADATA: Metadata = {
    id: "749f2233af5a8f3e4bd24c29117982578dc8bf47.boutiques",
    name: "spec-file-relocate",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SpecFileRelocateParameters {
    "@type"?: "workbench/spec-file-relocate";
    "input_spec": string;
    "output_spec": string;
}
type SpecFileRelocateParametersTagged = Required<Pick<SpecFileRelocateParameters, '@type'>> & SpecFileRelocateParameters;


/**
 * Output object returned when calling `SpecFileRelocateParameters(...)`.
 *
 * @interface
 */
interface SpecFileRelocateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_spec the spec file to use
 * @param output_spec output - the new spec file to create
 *
 * @returns Parameter dictionary
 */
function spec_file_relocate_params(
    input_spec: string,
    output_spec: string,
): SpecFileRelocateParametersTagged {
    const params = {
        "@type": "workbench/spec-file-relocate" as const,
        "input_spec": input_spec,
        "output_spec": output_spec,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function spec_file_relocate_cargs(
    params: SpecFileRelocateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-spec-file-relocate");
    cargs.push((params["input_spec"] ?? null));
    cargs.push((params["output_spec"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function spec_file_relocate_outputs(
    params: SpecFileRelocateParameters,
    execution: Execution,
): SpecFileRelocateOutputs {
    const ret: SpecFileRelocateOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * spec-file-relocate
 *
 * Recreate spec file in new location.
 *
 * Spec files contain internal relative paths, such that moving or copying a spec file will cause it to lose track of the files it refers to.  This command makes a modified copy of the spec file, changing the relative paths to refer to the new relative locations of the files.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpecFileRelocateOutputs`).
 */
function spec_file_relocate_execute(
    params: SpecFileRelocateParameters,
    runner: Runner | null = null,
): SpecFileRelocateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPEC_FILE_RELOCATE_METADATA);
    params = execution.params(params)
    const cargs = spec_file_relocate_cargs(params, execution)
    const ret = spec_file_relocate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * spec-file-relocate
 *
 * Recreate spec file in new location.
 *
 * Spec files contain internal relative paths, such that moving or copying a spec file will cause it to lose track of the files it refers to.  This command makes a modified copy of the spec file, changing the relative paths to refer to the new relative locations of the files.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param input_spec the spec file to use
 * @param output_spec output - the new spec file to create
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SpecFileRelocateOutputs`).
 */
function spec_file_relocate(
    input_spec: string,
    output_spec: string,
    runner: Runner | null = null,
): SpecFileRelocateOutputs {
    const params = spec_file_relocate_params(input_spec, output_spec)
    return spec_file_relocate_execute(params, runner);
}


export {
      SPEC_FILE_RELOCATE_METADATA,
      SpecFileRelocateOutputs,
      spec_file_relocate,
      spec_file_relocate_execute,
      spec_file_relocate_params,
};
