// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TSFMULT_METADATA: Metadata = {
    id: "e103c6aff1dbf08096f6707a523cbafcb15a4c92.boutiques",
    name: "tsfmult",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface TsfmultConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type TsfmultConfigParametersTagged = Required<Pick<TsfmultConfigParameters, '@type'>> & TsfmultConfigParameters;


interface TsfmultParameters {
    "@type"?: "mrtrix/tsfmult";
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<TsfmultConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input1": InputPathType;
    "output": string;
}
type TsfmultParametersTagged = Required<Pick<TsfmultParameters, '@type'>> & TsfmultParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function tsfmult_config_params(
    key: string,
    value: string,
): TsfmultConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tsfmult_config_cargs(
    params: TsfmultConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `TsfmultParameters(...)`.
 *
 * @interface
 */
interface TsfmultOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output track scalar file
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input1 the second input track scalar file.
 * @param output the output track scalar file
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function tsfmult_params(
    input1: InputPathType,
    output: string,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TsfmultConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): TsfmultParametersTagged {
    const params = {
        "@type": "mrtrix/tsfmult" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input1": input1,
        "output": output,
    };
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tsfmult_cargs(
    params: TsfmultParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tsfmult");
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => tsfmult_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input1"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tsfmult_outputs(
    params: TsfmultParameters,
    execution: Execution,
): TsfmultOutputs {
    const ret: TsfmultOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * tsfmult
 *
 * Multiply corresponding values in track scalar files.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TsfmultOutputs`).
 */
function tsfmult_execute(
    params: TsfmultParameters,
    runner: Runner | null = null,
): TsfmultOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TSFMULT_METADATA);
    params = execution.params(params)
    const cargs = tsfmult_cargs(params, execution)
    const ret = tsfmult_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tsfmult
 *
 * Multiply corresponding values in track scalar files.
 *
 *
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input1 the second input track scalar file.
 * @param output the output track scalar file
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TsfmultOutputs`).
 */
function tsfmult(
    input1: InputPathType,
    output: string,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TsfmultConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): TsfmultOutputs {
    const params = tsfmult_params(input1, output, info, quiet, debug, force, nthreads, config, help, version)
    return tsfmult_execute(params, runner);
}


export {
      TSFMULT_METADATA,
      TsfmultOutputs,
      tsfmult,
      tsfmult_config_params,
      tsfmult_execute,
      tsfmult_params,
};
