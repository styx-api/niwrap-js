// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_MEPFM_METADATA: Metadata = {
    id: "32cebfe19ae42e608df27da2db7aceaf30da29c6.boutiques",
    name: "3dMEPFM",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dMepfmParameters {
    "__STYXTYPE__": "3dMEPFM";
    "input_files": Array<string>;
    "dbgArgs": boolean;
    "mask"?: InputPathType | null | undefined;
    "hrf_model"?: string | null | undefined;
    "verbosity"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dMEPFM": v_3d_mepfm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dMEPFM": v_3d_mepfm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_mepfm(...)`.
 *
 * @interface
 */
interface V3dMepfmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Changes in R2* parameter, assumed to represent neuronal-related signal changes
     */
    dr2_output: OutputPathType;
    /**
     * Convolution of DR2 with HRF, one volume per echo
     */
    dr2fit_output: OutputPathType;
    /**
     * Changes in net magnetization (S0) (if estimated)
     */
    ds0_output: OutputPathType;
    /**
     * Regularization parameter
     */
    lambda_output: OutputPathType;
    /**
     * Estimate of the noise standard deviation after wavelet decomposition for each input dataset
     */
    sigmas_mad_output: OutputPathType;
    /**
     * Cost function to select the regularization parameter (lambda) according to selection criterion
     */
    costs_output: OutputPathType;
}


function v_3d_mepfm_params(
    input_files: Array<string>,
    dbg_args: boolean = false,
    mask: InputPathType | null = null,
    hrf_model: string | null = null,
    verbosity: number | null = null,
): V3dMepfmParameters {
    /**
     * Build parameters.
    
     * @param input_files Dataset to analyze with Multiecho Paradigm Free Mapping, along with the echo time
     * @param dbg_args Enable R to save the parameters in .3dMEPFM.dbg.AFNI.args in the current directory
     * @param mask Process voxels inside this mask only. Default is no masking.
     * @param hrf_model Haemodynamic response function used for deconvolution
     * @param verbosity Verbosity level. 0 for quiet, 1 (default) or more: talkative.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dMEPFM" as const,
        "input_files": input_files,
        "dbgArgs": dbg_args,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (hrf_model !== null) {
        params["hrf_model"] = hrf_model;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


function v_3d_mepfm_cargs(
    params: V3dMepfmParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dMEPFM");
    cargs.push(
        "-input",
        ...(params["input_files"] ?? null)
    );
    if ((params["dbgArgs"] ?? null)) {
        cargs.push("-dbgArgs");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["hrf_model"] ?? null) !== null) {
        cargs.push(
            "-hrf",
            (params["hrf_model"] ?? null)
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    return cargs;
}


function v_3d_mepfm_outputs(
    params: V3dMepfmParameters,
    execution: Execution,
): V3dMepfmOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dMepfmOutputs = {
        root: execution.outputFile("."),
        dr2_output: execution.outputFile(["DR2_[PREFIX]_*.nii.gz"].join('')),
        dr2fit_output: execution.outputFile(["DR2fit_[PREFIX]_*.nii.gz"].join('')),
        ds0_output: execution.outputFile(["DS0_[PREFIX]_*.nii.gz"].join('')),
        lambda_output: execution.outputFile(["lambda_[PREFIX]_*.nii.gz"].join('')),
        sigmas_mad_output: execution.outputFile(["sigmas_MAD_[PREFIX]_*.nii.gz"].join('')),
        costs_output: execution.outputFile(["costs_[PREFIX]_*.nii.gz"].join('')),
    };
    return ret;
}


function v_3d_mepfm_execute(
    params: V3dMepfmParameters,
    execution: Execution,
): V3dMepfmOutputs {
    /**
     * Voxelwise deconvolution of Multiecho fMRI data to yield time-varying estimates of changes in transverse relaxation (DR2*) and optionally, net magnetization (DS0).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dMepfmOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_mepfm_cargs(params, execution)
    const ret = v_3d_mepfm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_mepfm(
    input_files: Array<string>,
    dbg_args: boolean = false,
    mask: InputPathType | null = null,
    hrf_model: string | null = null,
    verbosity: number | null = null,
    runner: Runner | null = null,
): V3dMepfmOutputs {
    /**
     * Voxelwise deconvolution of Multiecho fMRI data to yield time-varying estimates of changes in transverse relaxation (DR2*) and optionally, net magnetization (DS0).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_files Dataset to analyze with Multiecho Paradigm Free Mapping, along with the echo time
     * @param dbg_args Enable R to save the parameters in .3dMEPFM.dbg.AFNI.args in the current directory
     * @param mask Process voxels inside this mask only. Default is no masking.
     * @param hrf_model Haemodynamic response function used for deconvolution
     * @param verbosity Verbosity level. 0 for quiet, 1 (default) or more: talkative.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dMepfmOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_MEPFM_METADATA);
    const params = v_3d_mepfm_params(input_files, dbg_args, mask, hrf_model, verbosity)
    return v_3d_mepfm_execute(params, execution);
}


export {
      V3dMepfmOutputs,
      V3dMepfmParameters,
      V_3D_MEPFM_METADATA,
      v_3d_mepfm,
      v_3d_mepfm_params,
};
