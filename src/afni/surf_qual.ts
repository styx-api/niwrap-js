// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_QUAL_METADATA: Metadata = {
    id: "ca9fbbde93da6b6ba30bd230838b95dce4404bf8.boutiques",
    name: "SurfQual",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfQualParameters {
    "@type"?: "afni/SurfQual";
    "spec_file": InputPathType;
    "surface_a": Array<InputPathType>;
    "sphere_flag": boolean;
    "summary_flag": boolean;
    "self_intersect_flag": boolean;
    "output_prefix"?: string | null | undefined;
}
type SurfQualParametersTagged = Required<Pick<SurfQualParameters, '@type'>> & SurfQualParameters;


/**
 * Output object returned when calling `SurfQualParameters(...)`.
 *
 * @interface
 */
interface SurfQualOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing distances of nodes from the surface's center.
     */
    dist_output: OutputPathType | null;
    /**
     * Colorized file containing distances of nodes from the surface's center.
     */
    dist_color_output: OutputPathType | null;
    /**
     * File containing nodes with bad dot product values.
     */
    bad_nodes_output: OutputPathType | null;
    /**
     * Colorized file containing nodes with bad dot product values.
     */
    bad_nodes_color_output: OutputPathType | null;
    /**
     * File containing dot product values for all nodes.
     */
    dotprod_output: OutputPathType | null;
    /**
     * Colorized file containing dot product values for all nodes.
     */
    dotprod_color_output: OutputPathType | null;
    /**
     * File containing indices of nodes forming segments that intersect the surface.
     */
    intersect_nodes_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param spec_file Spec file containing input surfaces.
 * @param surface_a Name of input surface A.
 * @param sphere_flag Indicates that surfaces read are spherical.
 * @param summary_flag Provide summary of results to stdout.
 * @param self_intersect_flag Check if surface is self intersecting.
 * @param output_prefix Prefix of output files. Default is the surface's label.
 *
 * @returns Parameter dictionary
 */
function surf_qual_params(
    spec_file: InputPathType,
    surface_a: Array<InputPathType>,
    sphere_flag: boolean = false,
    summary_flag: boolean = false,
    self_intersect_flag: boolean = false,
    output_prefix: string | null = null,
): SurfQualParametersTagged {
    const params = {
        "@type": "afni/SurfQual" as const,
        "spec_file": spec_file,
        "surface_a": surface_a,
        "sphere_flag": sphere_flag,
        "summary_flag": summary_flag,
        "self_intersect_flag": self_intersect_flag,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_qual_cargs(
    params: SurfQualParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfQual");
    cargs.push(
        "-spec",
        execution.inputFile((params["spec_file"] ?? null))
    );
    cargs.push(
        "-surf_A",
        ...(params["surface_a"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["sphere_flag"] ?? false)) {
        cargs.push("-sphere");
    }
    if ((params["summary_flag"] ?? false)) {
        cargs.push("-summary");
    }
    if ((params["self_intersect_flag"] ?? false)) {
        cargs.push("-self_intersect");
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_qual_outputs(
    params: SurfQualParameters,
    execution: Execution,
): SurfQualOutputs {
    const ret: SurfQualOutputs = {
        root: execution.outputFile("."),
        dist_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_Dist.1D.dset"].join('')) : null,
        dist_color_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_Dist.1D.col"].join('')) : null,
        bad_nodes_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_BadNodes.1D.dset"].join('')) : null,
        bad_nodes_color_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_BadNodes.1D.col"].join('')) : null,
        dotprod_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_dotprod.1D.dset"].join('')) : null,
        dotprod_color_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_dotprod.1D.col"].join('')) : null,
        intersect_nodes_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "_IntersNodes.1D.dset"].join('')) : null,
    };
    return ret;
}


/**
 * SurfQual
 *
 * A program to check the quality of surfaces.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfQualOutputs`).
 */
function surf_qual_execute(
    params: SurfQualParameters,
    runner: Runner | null = null,
): SurfQualOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_QUAL_METADATA);
    params = execution.params(params)
    const cargs = surf_qual_cargs(params, execution)
    const ret = surf_qual_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SurfQual
 *
 * A program to check the quality of surfaces.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param spec_file Spec file containing input surfaces.
 * @param surface_a Name of input surface A.
 * @param sphere_flag Indicates that surfaces read are spherical.
 * @param summary_flag Provide summary of results to stdout.
 * @param self_intersect_flag Check if surface is self intersecting.
 * @param output_prefix Prefix of output files. Default is the surface's label.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfQualOutputs`).
 */
function surf_qual(
    spec_file: InputPathType,
    surface_a: Array<InputPathType>,
    sphere_flag: boolean = false,
    summary_flag: boolean = false,
    self_intersect_flag: boolean = false,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): SurfQualOutputs {
    const params = surf_qual_params(spec_file, surface_a, sphere_flag, summary_flag, self_intersect_flag, output_prefix)
    return surf_qual_execute(params, runner);
}


export {
      SURF_QUAL_METADATA,
      SurfQualOutputs,
      surf_qual,
      surf_qual_execute,
      surf_qual_params,
};
