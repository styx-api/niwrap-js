// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_FIND_CLUSTERS_METADATA: Metadata = {
    id: "26f30befb80051d4fc9523e2033e1f592cb9dd55.boutiques",
    name: "cifti-find-clusters",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiFindClustersLeftSurfaceParameters {
    "@type": "workbench.cifti-find-clusters.left_surface";
    "surface": InputPathType;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiFindClustersRightSurfaceParameters {
    "@type": "workbench.cifti-find-clusters.right_surface";
    "surface": InputPathType;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiFindClustersCerebellumSurfaceParameters {
    "@type": "workbench.cifti-find-clusters.cerebellum_surface";
    "surface": InputPathType;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiFindClustersSizeRatioParameters {
    "@type": "workbench.cifti-find-clusters.size_ratio";
    "surface_ratio": number;
    "volume_ratio": number;
}


interface CiftiFindClustersDistanceParameters {
    "@type": "workbench.cifti-find-clusters.distance";
    "surface_distance": number;
    "volume_distance": number;
}


interface CiftiFindClustersParameters {
    "@type": "workbench.cifti-find-clusters";
    "cifti": InputPathType;
    "surface_value_threshold": number;
    "surface_minimum_area": number;
    "volume_value_threshold": number;
    "volume_minimum_size": number;
    "direction": string;
    "cifti_out": string;
    "opt_less_than": boolean;
    "left_surface"?: CiftiFindClustersLeftSurfaceParameters | null | undefined;
    "right_surface"?: CiftiFindClustersRightSurfaceParameters | null | undefined;
    "cerebellum_surface"?: CiftiFindClustersCerebellumSurfaceParameters | null | undefined;
    "opt_cifti_roi_roi_cifti"?: InputPathType | null | undefined;
    "opt_merged_volume": boolean;
    "size_ratio"?: CiftiFindClustersSizeRatioParameters | null | undefined;
    "distance"?: CiftiFindClustersDistanceParameters | null | undefined;
    "opt_start_startval"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-find-clusters": cifti_find_clusters_cargs,
        "workbench.cifti-find-clusters.left_surface": cifti_find_clusters_left_surface_cargs,
        "workbench.cifti-find-clusters.right_surface": cifti_find_clusters_right_surface_cargs,
        "workbench.cifti-find-clusters.cerebellum_surface": cifti_find_clusters_cerebellum_surface_cargs,
        "workbench.cifti-find-clusters.size_ratio": cifti_find_clusters_size_ratio_cargs,
        "workbench.cifti-find-clusters.distance": cifti_find_clusters_distance_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-find-clusters": cifti_find_clusters_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param surface the left surface file
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function cifti_find_clusters_left_surface_params(
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | null = null,
): CiftiFindClustersLeftSurfaceParameters {
    const params = {
        "@type": "workbench.cifti-find-clusters.left_surface" as const,
        "surface": surface,
    };
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_find_clusters_left_surface_cargs(
    params: CiftiFindClustersLeftSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param surface the right surface file
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function cifti_find_clusters_right_surface_params(
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | null = null,
): CiftiFindClustersRightSurfaceParameters {
    const params = {
        "@type": "workbench.cifti-find-clusters.right_surface" as const,
        "surface": surface,
    };
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_find_clusters_right_surface_cargs(
    params: CiftiFindClustersRightSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param surface the cerebellum surface file
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function cifti_find_clusters_cerebellum_surface_params(
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | null = null,
): CiftiFindClustersCerebellumSurfaceParameters {
    const params = {
        "@type": "workbench.cifti-find-clusters.cerebellum_surface" as const,
        "surface": surface,
    };
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_find_clusters_cerebellum_surface_cargs(
    params: CiftiFindClustersCerebellumSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param surface_ratio fraction of the structure's largest cluster area
 * @param volume_ratio fraction of the structure's largest cluster volume
 *
 * @returns Parameter dictionary
 */
function cifti_find_clusters_size_ratio_params(
    surface_ratio: number,
    volume_ratio: number,
): CiftiFindClustersSizeRatioParameters {
    const params = {
        "@type": "workbench.cifti-find-clusters.size_ratio" as const,
        "surface_ratio": surface_ratio,
        "volume_ratio": volume_ratio,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_find_clusters_size_ratio_cargs(
    params: CiftiFindClustersSizeRatioParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-size-ratio");
    cargs.push(String((params["surface_ratio"] ?? null)));
    cargs.push(String((params["volume_ratio"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param surface_distance how far from the largest cluster a cluster can be, edge to edge, in mm
 * @param volume_distance how far from the largest cluster a cluster can be, edge to edge, in mm
 *
 * @returns Parameter dictionary
 */
function cifti_find_clusters_distance_params(
    surface_distance: number,
    volume_distance: number,
): CiftiFindClustersDistanceParameters {
    const params = {
        "@type": "workbench.cifti-find-clusters.distance" as const,
        "surface_distance": surface_distance,
        "volume_distance": volume_distance,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_find_clusters_distance_cargs(
    params: CiftiFindClustersDistanceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-distance");
    cargs.push(String((params["surface_distance"] ?? null)));
    cargs.push(String((params["volume_distance"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `cifti_find_clusters(...)`.
 *
 * @interface
 */
interface CiftiFindClustersOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti the input cifti
 * @param surface_value_threshold threshold for surface data values
 * @param surface_minimum_area threshold for surface cluster area, in mm^2
 * @param volume_value_threshold threshold for volume data values
 * @param volume_minimum_size threshold for volume cluster size, in mm^3
 * @param direction which dimension to use for spatial information, ROW or COLUMN
 * @param cifti_out the output cifti
 * @param opt_less_than find values less than <value-threshold>, rather than greater
 * @param left_surface specify the left surface to use
 * @param right_surface specify the right surface to use
 * @param cerebellum_surface specify the cerebellum surface to use
 * @param opt_cifti_roi_roi_cifti search only within regions of interest: the regions to search within, as a cifti file
 * @param opt_merged_volume treat volume components as if they were a single component
 * @param size_ratio ignore clusters smaller than a given fraction of the largest cluster in the structure
 * @param distance ignore clusters further than a given distance from the largest cluster in the structure
 * @param opt_start_startval start labeling clusters from a value other than 1: the value to give the first cluster found
 *
 * @returns Parameter dictionary
 */
function cifti_find_clusters_params(
    cifti: InputPathType,
    surface_value_threshold: number,
    surface_minimum_area: number,
    volume_value_threshold: number,
    volume_minimum_size: number,
    direction: string,
    cifti_out: string,
    opt_less_than: boolean = false,
    left_surface: CiftiFindClustersLeftSurfaceParameters | null = null,
    right_surface: CiftiFindClustersRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiFindClustersCerebellumSurfaceParameters | null = null,
    opt_cifti_roi_roi_cifti: InputPathType | null = null,
    opt_merged_volume: boolean = false,
    size_ratio: CiftiFindClustersSizeRatioParameters | null = null,
    distance: CiftiFindClustersDistanceParameters | null = null,
    opt_start_startval: number | null = null,
): CiftiFindClustersParameters {
    const params = {
        "@type": "workbench.cifti-find-clusters" as const,
        "cifti": cifti,
        "surface_value_threshold": surface_value_threshold,
        "surface_minimum_area": surface_minimum_area,
        "volume_value_threshold": volume_value_threshold,
        "volume_minimum_size": volume_minimum_size,
        "direction": direction,
        "cifti_out": cifti_out,
        "opt_less_than": opt_less_than,
        "opt_merged_volume": opt_merged_volume,
    };
    if (left_surface !== null) {
        params["left_surface"] = left_surface;
    }
    if (right_surface !== null) {
        params["right_surface"] = right_surface;
    }
    if (cerebellum_surface !== null) {
        params["cerebellum_surface"] = cerebellum_surface;
    }
    if (opt_cifti_roi_roi_cifti !== null) {
        params["opt_cifti_roi_roi_cifti"] = opt_cifti_roi_roi_cifti;
    }
    if (size_ratio !== null) {
        params["size_ratio"] = size_ratio;
    }
    if (distance !== null) {
        params["distance"] = distance;
    }
    if (opt_start_startval !== null) {
        params["opt_start_startval"] = opt_start_startval;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_find_clusters_cargs(
    params: CiftiFindClustersParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-find-clusters");
    cargs.push(execution.inputFile((params["cifti"] ?? null)));
    cargs.push(String((params["surface_value_threshold"] ?? null)));
    cargs.push(String((params["surface_minimum_area"] ?? null)));
    cargs.push(String((params["volume_value_threshold"] ?? null)));
    cargs.push(String((params["volume_minimum_size"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_less_than"] ?? null)) {
        cargs.push("-less-than");
    }
    if ((params["left_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["left_surface"] ?? null)["@type"])((params["left_surface"] ?? null), execution));
    }
    if ((params["right_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["right_surface"] ?? null)["@type"])((params["right_surface"] ?? null), execution));
    }
    if ((params["cerebellum_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["cerebellum_surface"] ?? null)["@type"])((params["cerebellum_surface"] ?? null), execution));
    }
    if ((params["opt_cifti_roi_roi_cifti"] ?? null) !== null) {
        cargs.push(
            "-cifti-roi",
            execution.inputFile((params["opt_cifti_roi_roi_cifti"] ?? null))
        );
    }
    if ((params["opt_merged_volume"] ?? null)) {
        cargs.push("-merged-volume");
    }
    if ((params["size_ratio"] ?? null) !== null) {
        cargs.push(...dynCargs((params["size_ratio"] ?? null)["@type"])((params["size_ratio"] ?? null), execution));
    }
    if ((params["distance"] ?? null) !== null) {
        cargs.push(...dynCargs((params["distance"] ?? null)["@type"])((params["distance"] ?? null), execution));
    }
    if ((params["opt_start_startval"] ?? null) !== null) {
        cargs.push(
            "-start",
            String((params["opt_start_startval"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_find_clusters_outputs(
    params: CiftiFindClustersParameters,
    execution: Execution,
): CiftiFindClustersOutputs {
    const ret: CiftiFindClustersOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Filter clusters by area/volume.
 *
 * Outputs a cifti file with nonzero integers for all brainordinates within a large enough cluster, and zeros elsewhere.  The integers denote cluster membership (by default, first cluster found will use value 1, second cluster 2, etc).  Cluster values are not reused across maps of the output, but instead keep counting up.  The input cifti file must have a brain models mapping on the chosen dimension, columns for .dtseries, and either for .dconn.  The ROI should have a brain models mapping along columns, exactly matching the mapping of the chosen direction in the input file.  Data outside the ROI is ignored.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiFindClustersOutputs`).
 */
function cifti_find_clusters_execute(
    params: CiftiFindClustersParameters,
    runner: Runner | null = null,
): CiftiFindClustersOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_FIND_CLUSTERS_METADATA);
    params = execution.params(params)
    const cargs = cifti_find_clusters_cargs(params, execution)
    const ret = cifti_find_clusters_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Filter clusters by area/volume.
 *
 * Outputs a cifti file with nonzero integers for all brainordinates within a large enough cluster, and zeros elsewhere.  The integers denote cluster membership (by default, first cluster found will use value 1, second cluster 2, etc).  Cluster values are not reused across maps of the output, but instead keep counting up.  The input cifti file must have a brain models mapping on the chosen dimension, columns for .dtseries, and either for .dconn.  The ROI should have a brain models mapping along columns, exactly matching the mapping of the chosen direction in the input file.  Data outside the ROI is ignored.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti the input cifti
 * @param surface_value_threshold threshold for surface data values
 * @param surface_minimum_area threshold for surface cluster area, in mm^2
 * @param volume_value_threshold threshold for volume data values
 * @param volume_minimum_size threshold for volume cluster size, in mm^3
 * @param direction which dimension to use for spatial information, ROW or COLUMN
 * @param cifti_out the output cifti
 * @param opt_less_than find values less than <value-threshold>, rather than greater
 * @param left_surface specify the left surface to use
 * @param right_surface specify the right surface to use
 * @param cerebellum_surface specify the cerebellum surface to use
 * @param opt_cifti_roi_roi_cifti search only within regions of interest: the regions to search within, as a cifti file
 * @param opt_merged_volume treat volume components as if they were a single component
 * @param size_ratio ignore clusters smaller than a given fraction of the largest cluster in the structure
 * @param distance ignore clusters further than a given distance from the largest cluster in the structure
 * @param opt_start_startval start labeling clusters from a value other than 1: the value to give the first cluster found
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiFindClustersOutputs`).
 */
function cifti_find_clusters(
    cifti: InputPathType,
    surface_value_threshold: number,
    surface_minimum_area: number,
    volume_value_threshold: number,
    volume_minimum_size: number,
    direction: string,
    cifti_out: string,
    opt_less_than: boolean = false,
    left_surface: CiftiFindClustersLeftSurfaceParameters | null = null,
    right_surface: CiftiFindClustersRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiFindClustersCerebellumSurfaceParameters | null = null,
    opt_cifti_roi_roi_cifti: InputPathType | null = null,
    opt_merged_volume: boolean = false,
    size_ratio: CiftiFindClustersSizeRatioParameters | null = null,
    distance: CiftiFindClustersDistanceParameters | null = null,
    opt_start_startval: number | null = null,
    runner: Runner | null = null,
): CiftiFindClustersOutputs {
    const params = cifti_find_clusters_params(cifti, surface_value_threshold, surface_minimum_area, volume_value_threshold, volume_minimum_size, direction, cifti_out, opt_less_than, left_surface, right_surface, cerebellum_surface, opt_cifti_roi_roi_cifti, opt_merged_volume, size_ratio, distance, opt_start_startval)
    return cifti_find_clusters_execute(params, runner);
}


export {
      CIFTI_FIND_CLUSTERS_METADATA,
      CiftiFindClustersCerebellumSurfaceParameters,
      CiftiFindClustersDistanceParameters,
      CiftiFindClustersLeftSurfaceParameters,
      CiftiFindClustersOutputs,
      CiftiFindClustersParameters,
      CiftiFindClustersRightSurfaceParameters,
      CiftiFindClustersSizeRatioParameters,
      cifti_find_clusters,
      cifti_find_clusters_cerebellum_surface_params,
      cifti_find_clusters_distance_params,
      cifti_find_clusters_execute,
      cifti_find_clusters_left_surface_params,
      cifti_find_clusters_params,
      cifti_find_clusters_right_surface_params,
      cifti_find_clusters_size_ratio_params,
};
