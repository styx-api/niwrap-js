// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMAGE_SET_STATISTICS_METADATA: Metadata = {
    id: "d02e2ac8fe2bc9079ce6267ba5d5982285e6b1bf.boutiques",
    name: "ImageSetStatistics",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface ImageSetStatisticsParameters {
    "@type": "ants.ImageSetStatistics";
    "image_dimension": number;
    "controls_list": InputPathType;
    "output_image": string;
    "which_stat": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    "roi"?: InputPathType | null | undefined;
    "imagelist2"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.ImageSetStatistics": image_set_statistics_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.ImageSetStatistics": image_set_statistics_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `image_set_statistics(...)`.
 *
 * @interface
 */
interface ImageSetStatisticsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output image containing the computed statistics.
     */
    computed_statistics_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimensionality of the images to be processed by ImageSetStatistics.
 * @param controls_list Text file containing the list of control images.
 * @param output_image The output image file where the computed statistics are stored.
 * @param which_stat Choice of statistic to compute: 0 for median, 1 for max probability appearance, 2 for weighted mean appearance, 3 for trimmed mean, 4 for max value, 5 for similarity-weighted (requires imagelist2), 6 for best local match label, 7 for max value from ROI.
 * @param roi Region of interest image file, optional depending on the whichstat option.
 * @param imagelist2 List of similarity images used for similarity-weighted statistics. Required if whichstat equals 5 or 6.
 *
 * @returns Parameter dictionary
 */
function image_set_statistics_params(
    image_dimension: number,
    controls_list: InputPathType,
    output_image: string,
    which_stat: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7,
    roi: InputPathType | null = null,
    imagelist2: InputPathType | null = null,
): ImageSetStatisticsParameters {
    const params = {
        "@type": "ants.ImageSetStatistics" as const,
        "image_dimension": image_dimension,
        "controls_list": controls_list,
        "output_image": output_image,
        "which_stat": which_stat,
    };
    if (roi !== null) {
        params["roi"] = roi;
    }
    if (imagelist2 !== null) {
        params["imagelist2"] = imagelist2;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function image_set_statistics_cargs(
    params: ImageSetStatisticsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ImageSetStatistics");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(
        "[CONTROLS_LIST]",
        execution.inputFile((params["controls_list"] ?? null))
    );
    cargs.push(
        "[OUTPUT_IMAGE]",
        (params["output_image"] ?? null)
    );
    cargs.push(
        "[WHICH_STAT]",
        String((params["which_stat"] ?? null))
    );
    if ((params["roi"] ?? null) !== null) {
        cargs.push(
            "[ROI]",
            execution.inputFile((params["roi"] ?? null))
        );
    }
    if ((params["imagelist2"] ?? null) !== null) {
        cargs.push(
            "[IMAGELIST2]",
            execution.inputFile((params["imagelist2"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function image_set_statistics_outputs(
    params: ImageSetStatisticsParameters,
    execution: Execution,
): ImageSetStatisticsOutputs {
    const ret: ImageSetStatisticsOutputs = {
        root: execution.outputFile("."),
        computed_statistics_image: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ImageSetStatistics
 *
 * ImageSetStatistics computes statistics from a set of images. The whichstat option defines the type of statistic to compute, ranging from median to similarity-weighted metrics.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImageSetStatisticsOutputs`).
 */
function image_set_statistics_execute(
    params: ImageSetStatisticsParameters,
    runner: Runner | null = null,
): ImageSetStatisticsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMAGE_SET_STATISTICS_METADATA);
    params = execution.params(params)
    const cargs = image_set_statistics_cargs(params, execution)
    const ret = image_set_statistics_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ImageSetStatistics
 *
 * ImageSetStatistics computes statistics from a set of images. The whichstat option defines the type of statistic to compute, ranging from median to similarity-weighted metrics.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimensionality of the images to be processed by ImageSetStatistics.
 * @param controls_list Text file containing the list of control images.
 * @param output_image The output image file where the computed statistics are stored.
 * @param which_stat Choice of statistic to compute: 0 for median, 1 for max probability appearance, 2 for weighted mean appearance, 3 for trimmed mean, 4 for max value, 5 for similarity-weighted (requires imagelist2), 6 for best local match label, 7 for max value from ROI.
 * @param roi Region of interest image file, optional depending on the whichstat option.
 * @param imagelist2 List of similarity images used for similarity-weighted statistics. Required if whichstat equals 5 or 6.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImageSetStatisticsOutputs`).
 */
function image_set_statistics(
    image_dimension: number,
    controls_list: InputPathType,
    output_image: string,
    which_stat: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7,
    roi: InputPathType | null = null,
    imagelist2: InputPathType | null = null,
    runner: Runner | null = null,
): ImageSetStatisticsOutputs {
    const params = image_set_statistics_params(image_dimension, controls_list, output_image, which_stat, roi, imagelist2)
    return image_set_statistics_execute(params, runner);
}


export {
      IMAGE_SET_STATISTICS_METADATA,
      ImageSetStatisticsOutputs,
      ImageSetStatisticsParameters,
      image_set_statistics,
      image_set_statistics_execute,
      image_set_statistics_params,
};
