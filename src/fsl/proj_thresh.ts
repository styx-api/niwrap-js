// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PROJ_THRESH_METADATA: Metadata = {
    id: "2118a504958e3891bd47708738d41c67d1537eb5.boutiques",
    name: "proj_thresh",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ProjThreshParameters {
    "@type": "fsl.proj_thresh";
    "input_paths": Array<InputPathType>;
    "threshold": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.proj_thresh": proj_thresh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `proj_thresh(...)`.
 *
 * @interface
 */
interface ProjThreshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_paths Paths to volume or surface files. Please use either volumes or surfaces but not both.
 * @param threshold Threshold value to be applied.
 *
 * @returns Parameter dictionary
 */
function proj_thresh_params(
    input_paths: Array<InputPathType>,
    threshold: number,
): ProjThreshParameters {
    const params = {
        "@type": "fsl.proj_thresh" as const,
        "input_paths": input_paths,
        "threshold": threshold,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function proj_thresh_cargs(
    params: ProjThreshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("proj_thresh");
    cargs.push(...(params["input_paths"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(String((params["threshold"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function proj_thresh_outputs(
    params: ProjThreshParameters,
    execution: Execution,
): ProjThreshOutputs {
    const ret: ProjThreshOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool to apply a threshold to either volumes or surfaces.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ProjThreshOutputs`).
 */
function proj_thresh_execute(
    params: ProjThreshParameters,
    runner: Runner | null = null,
): ProjThreshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PROJ_THRESH_METADATA);
    params = execution.params(params)
    const cargs = proj_thresh_cargs(params, execution)
    const ret = proj_thresh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to apply a threshold to either volumes or surfaces.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_paths Paths to volume or surface files. Please use either volumes or surfaces but not both.
 * @param threshold Threshold value to be applied.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ProjThreshOutputs`).
 */
function proj_thresh(
    input_paths: Array<InputPathType>,
    threshold: number,
    runner: Runner | null = null,
): ProjThreshOutputs {
    const params = proj_thresh_params(input_paths, threshold)
    return proj_thresh_execute(params, runner);
}


export {
      PROJ_THRESH_METADATA,
      ProjThreshOutputs,
      ProjThreshParameters,
      proj_thresh,
      proj_thresh_execute,
      proj_thresh_params,
};
