// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_ESTIMATE_FWHM_METADATA: Metadata = {
    id: "406da450dd413b66fe869bedf1e3287559817350.boutiques",
    name: "cifti-estimate-fwhm",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiEstimateFwhmWholeFileParameters {
    "@type": "workbench.cifti-estimate-fwhm.whole_file";
    "opt_demean": boolean;
}


interface CiftiEstimateFwhmSurfaceParameters {
    "@type": "workbench.cifti-estimate-fwhm.surface";
    "structure": string;
    "surface": InputPathType;
}


interface CiftiEstimateFwhmParameters {
    "@type": "workbench.cifti-estimate-fwhm";
    "cifti": InputPathType;
    "opt_merged_volume": boolean;
    "opt_column_column"?: number | null | undefined;
    "whole_file"?: CiftiEstimateFwhmWholeFileParameters | null | undefined;
    "surface"?: Array<CiftiEstimateFwhmSurfaceParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-estimate-fwhm": cifti_estimate_fwhm_cargs,
        "workbench.cifti-estimate-fwhm.whole_file": cifti_estimate_fwhm_whole_file_cargs,
        "workbench.cifti-estimate-fwhm.surface": cifti_estimate_fwhm_surface_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param opt_demean subtract the mean image before estimating smoothness
 *
 * @returns Parameter dictionary
 */
function cifti_estimate_fwhm_whole_file_params(
    opt_demean: boolean = false,
): CiftiEstimateFwhmWholeFileParameters {
    const params = {
        "@type": "workbench.cifti-estimate-fwhm.whole_file" as const,
        "opt_demean": opt_demean,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_estimate_fwhm_whole_file_cargs(
    params: CiftiEstimateFwhmWholeFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-whole-file");
    if ((params["opt_demean"] ?? null)) {
        cargs.push("-demean");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param structure what structure to use this surface for
 * @param surface the surface file
 *
 * @returns Parameter dictionary
 */
function cifti_estimate_fwhm_surface_params(
    structure: string,
    surface: InputPathType,
): CiftiEstimateFwhmSurfaceParameters {
    const params = {
        "@type": "workbench.cifti-estimate-fwhm.surface" as const,
        "structure": structure,
        "surface": surface,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_estimate_fwhm_surface_cargs(
    params: CiftiEstimateFwhmSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-surface");
    cargs.push((params["structure"] ?? null));
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `cifti_estimate_fwhm(...)`.
 *
 * @interface
 */
interface CiftiEstimateFwhmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti the input cifti file
 * @param opt_merged_volume treat volume components as if they were a single component
 * @param opt_column_column only output estimates for one column: the column number
 * @param whole_file estimate for the whole file at once, not each column separately
 * @param surface specify an input surface
 *
 * @returns Parameter dictionary
 */
function cifti_estimate_fwhm_params(
    cifti: InputPathType,
    opt_merged_volume: boolean = false,
    opt_column_column: number | null = null,
    whole_file: CiftiEstimateFwhmWholeFileParameters | null = null,
    surface: Array<CiftiEstimateFwhmSurfaceParameters> | null = null,
): CiftiEstimateFwhmParameters {
    const params = {
        "@type": "workbench.cifti-estimate-fwhm" as const,
        "cifti": cifti,
        "opt_merged_volume": opt_merged_volume,
    };
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (whole_file !== null) {
        params["whole_file"] = whole_file;
    }
    if (surface !== null) {
        params["surface"] = surface;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_estimate_fwhm_cargs(
    params: CiftiEstimateFwhmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-estimate-fwhm");
    cargs.push(execution.inputFile((params["cifti"] ?? null)));
    if ((params["opt_merged_volume"] ?? null)) {
        cargs.push("-merged-volume");
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            String((params["opt_column_column"] ?? null))
        );
    }
    if ((params["whole_file"] ?? null) !== null) {
        cargs.push(...dynCargs((params["whole_file"] ?? null)["@type"])((params["whole_file"] ?? null), execution));
    }
    if ((params["surface"] ?? null) !== null) {
        cargs.push(...(params["surface"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_estimate_fwhm_outputs(
    params: CiftiEstimateFwhmParameters,
    execution: Execution,
): CiftiEstimateFwhmOutputs {
    const ret: CiftiEstimateFwhmOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * cifti-estimate-fwhm
 *
 * Estimate fwhm smoothness of a cifti file.
 *
 * Estimate the smoothness of the components of the cifti file, printing the estimates to standard output.  If -merged-volume is used, all voxels are used as a single component, rather than separated by structure.
 *
 * <structure> must be one of the following:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiEstimateFwhmOutputs`).
 */
function cifti_estimate_fwhm_execute(
    params: CiftiEstimateFwhmParameters,
    runner: Runner | null = null,
): CiftiEstimateFwhmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_ESTIMATE_FWHM_METADATA);
    params = execution.params(params)
    const cargs = cifti_estimate_fwhm_cargs(params, execution)
    const ret = cifti_estimate_fwhm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-estimate-fwhm
 *
 * Estimate fwhm smoothness of a cifti file.
 *
 * Estimate the smoothness of the components of the cifti file, printing the estimates to standard output.  If -merged-volume is used, all voxels are used as a single component, rather than separated by structure.
 *
 * <structure> must be one of the following:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti the input cifti file
 * @param opt_merged_volume treat volume components as if they were a single component
 * @param opt_column_column only output estimates for one column: the column number
 * @param whole_file estimate for the whole file at once, not each column separately
 * @param surface specify an input surface
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiEstimateFwhmOutputs`).
 */
function cifti_estimate_fwhm(
    cifti: InputPathType,
    opt_merged_volume: boolean = false,
    opt_column_column: number | null = null,
    whole_file: CiftiEstimateFwhmWholeFileParameters | null = null,
    surface: Array<CiftiEstimateFwhmSurfaceParameters> | null = null,
    runner: Runner | null = null,
): CiftiEstimateFwhmOutputs {
    const params = cifti_estimate_fwhm_params(cifti, opt_merged_volume, opt_column_column, whole_file, surface)
    return cifti_estimate_fwhm_execute(params, runner);
}


export {
      CIFTI_ESTIMATE_FWHM_METADATA,
      CiftiEstimateFwhmOutputs,
      CiftiEstimateFwhmParameters,
      CiftiEstimateFwhmSurfaceParameters,
      CiftiEstimateFwhmWholeFileParameters,
      cifti_estimate_fwhm,
      cifti_estimate_fwhm_execute,
      cifti_estimate_fwhm_params,
      cifti_estimate_fwhm_surface_params,
      cifti_estimate_fwhm_whole_file_params,
};
