// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__GET_AFNI_RES_METADATA: Metadata = {
    id: "8e9d3bd1817738927cfd2699a3bf4ffe4e305e07.boutiques",
    name: "@GetAfniRes",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VGetAfniResParameters {
    "__STYXTYPE__": "@GetAfniRes";
    "output_type"?: "-min" | "-max" | "-mean" | null | undefined;
    "input_dataset": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@GetAfniRes": v__get_afni_res_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__get_afni_res(...)`.
 *
 * @interface
 */
interface VGetAfniResOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__get_afni_res_params(
    input_dataset: InputPathType,
    output_type: "-min" | "-max" | "-mean" | null = null,
): VGetAfniResParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset
     * @param output_type Output type specifying whether to return the minimum, maximum, or mean resolution
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@GetAfniRes" as const,
        "input_dataset": input_dataset,
    };
    if (output_type !== null) {
        params["output_type"] = output_type;
    }
    return params;
}


function v__get_afni_res_cargs(
    params: VGetAfniResParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    if ((params["output_type"] ?? null) !== null) {
        cargs.push(["@GetAfniRes", (params["output_type"] ?? null)].join(''));
    }
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    return cargs;
}


function v__get_afni_res_outputs(
    params: VGetAfniResParameters,
    execution: Execution,
): VGetAfniResOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VGetAfniResOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__get_afni_res_execute(
    params: VGetAfniResParameters,
    execution: Execution,
): VGetAfniResOutputs {
    /**
     * Tool to return the voxel resolution of a dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VGetAfniResOutputs`).
     */
    params = execution.params(params)
    const cargs = v__get_afni_res_cargs(params, execution)
    const ret = v__get_afni_res_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__get_afni_res(
    input_dataset: InputPathType,
    output_type: "-min" | "-max" | "-mean" | null = null,
    runner: Runner | null = null,
): VGetAfniResOutputs {
    /**
     * Tool to return the voxel resolution of a dataset.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset
     * @param output_type Output type specifying whether to return the minimum, maximum, or mean resolution
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VGetAfniResOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__GET_AFNI_RES_METADATA);
    const params = v__get_afni_res_params(input_dataset, output_type)
    return v__get_afni_res_execute(params, execution);
}


export {
      VGetAfniResOutputs,
      VGetAfniResParameters,
      V__GET_AFNI_RES_METADATA,
      v__get_afni_res,
      v__get_afni_res_params,
};
