// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_GROUP_BY_ENDPOINTS_METADATA: Metadata = {
    id: "87310592b138bba2f86c81c258d64cefe1c90e23.boutiques",
    name: "dmri_groupByEndpoints",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriGroupByEndpointsParameters {
    "__STYXTYPE__": "dmri_groupByEndpoints";
    "streamline_file": InputPathType;
    "image_file": InputPathType;
    "output_directory": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dmri_groupByEndpoints": dmri_group_by_endpoints_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_group_by_endpoints(...)`.
 *
 * @interface
 */
interface DmriGroupByEndpointsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dmri_group_by_endpoints_params(
    streamline_file: InputPathType,
    image_file: InputPathType,
    output_directory: string,
): DmriGroupByEndpointsParameters {
    /**
     * Build parameters.
    
     * @param streamline_file The file containing streamline data.
     * @param image_file The image file to be used in grouping.
     * @param output_directory The directory where output will be saved.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dmri_groupByEndpoints" as const,
        "streamline_file": streamline_file,
        "image_file": image_file,
        "output_directory": output_directory,
    };
    return params;
}


function dmri_group_by_endpoints_cargs(
    params: DmriGroupByEndpointsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dmri_groupByEndpoints");
    cargs.push(
        "-s",
        execution.inputFile((params["streamline_file"] ?? null))
    );
    cargs.push(
        "-i",
        execution.inputFile((params["image_file"] ?? null))
    );
    cargs.push(
        "-d",
        (params["output_directory"] ?? null)
    );
    return cargs;
}


function dmri_group_by_endpoints_outputs(
    params: DmriGroupByEndpointsParameters,
    execution: Execution,
): DmriGroupByEndpointsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DmriGroupByEndpointsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dmri_group_by_endpoints_execute(
    params: DmriGroupByEndpointsParameters,
    execution: Execution,
): DmriGroupByEndpointsOutputs {
    /**
     * A tool to group streamlines by their endpoints using diffusion MRI data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DmriGroupByEndpointsOutputs`).
     */
    params = execution.params(params)
    const cargs = dmri_group_by_endpoints_cargs(params, execution)
    const ret = dmri_group_by_endpoints_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dmri_group_by_endpoints(
    streamline_file: InputPathType,
    image_file: InputPathType,
    output_directory: string,
    runner: Runner | null = null,
): DmriGroupByEndpointsOutputs {
    /**
     * A tool to group streamlines by their endpoints using diffusion MRI data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param streamline_file The file containing streamline data.
     * @param image_file The image file to be used in grouping.
     * @param output_directory The directory where output will be saved.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DmriGroupByEndpointsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_GROUP_BY_ENDPOINTS_METADATA);
    const params = dmri_group_by_endpoints_params(streamline_file, image_file, output_directory)
    return dmri_group_by_endpoints_execute(params, execution);
}


export {
      DMRI_GROUP_BY_ENDPOINTS_METADATA,
      DmriGroupByEndpointsOutputs,
      DmriGroupByEndpointsParameters,
      dmri_group_by_endpoints,
      dmri_group_by_endpoints_params,
};
