// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BEDPOSTX_MGH_METADATA: Metadata = {
    id: "30878138f06e8d8b5b7cb02eea3673a7add660b9.boutiques",
    name: "bedpostx_mgh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BedpostxMghParameters {
    "@type"?: "freesurfer/bedpostx_mgh";
    "subject_directory": string;
    "fibres"?: number | null | undefined;
    "ard_weight"?: number | null | undefined;
    "burnin"?: number | null | undefined;
    "jumps"?: number | null | undefined;
    "sample_every"?: number | null | undefined;
    "deconv_model"?: number | null | undefined;
    "gradient_nonlin": boolean;
}
type BedpostxMghParametersTagged = Required<Pick<BedpostxMghParameters, '@type'>> & BedpostxMghParameters;


/**
 * Output object returned when calling `BedpostxMghParameters(...)`.
 *
 * @interface
 */
interface BedpostxMghOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_directory Subject directory containing necessary files such as bvals, bvecs, data, and nodif_brain_mask.
 * @param fibres Number of fibres per voxel, default is 3
 * @param ard_weight ARD weight, more weight means fewer secondary fibres per voxel, default is 1
 * @param burnin Burnin period, default is 1000
 * @param jumps Number of jumps, default is 1250
 * @param sample_every Sample every n steps, default is 25
 * @param deconv_model Deconvolution model selection. 1: with sticks, 2: with sticks with a range of diffusivities (default), 3: with zeppelins
 * @param gradient_nonlin Consider gradient nonlinearities, default is off
 *
 * @returns Parameter dictionary
 */
function bedpostx_mgh_params(
    subject_directory: string,
    fibres: number | null = null,
    ard_weight: number | null = null,
    burnin: number | null = null,
    jumps: number | null = null,
    sample_every: number | null = null,
    deconv_model: number | null = null,
    gradient_nonlin: boolean = false,
): BedpostxMghParametersTagged {
    const params = {
        "@type": "freesurfer/bedpostx_mgh" as const,
        "subject_directory": subject_directory,
        "gradient_nonlin": gradient_nonlin,
    };
    if (fibres !== null) {
        params["fibres"] = fibres;
    }
    if (ard_weight !== null) {
        params["ard_weight"] = ard_weight;
    }
    if (burnin !== null) {
        params["burnin"] = burnin;
    }
    if (jumps !== null) {
        params["jumps"] = jumps;
    }
    if (sample_every !== null) {
        params["sample_every"] = sample_every;
    }
    if (deconv_model !== null) {
        params["deconv_model"] = deconv_model;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function bedpostx_mgh_cargs(
    params: BedpostxMghParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("bedpostx_mgh");
    cargs.push((params["subject_directory"] ?? null));
    if ((params["fibres"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["fibres"] ?? null))
        );
    }
    if ((params["ard_weight"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["ard_weight"] ?? null))
        );
    }
    if ((params["burnin"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["burnin"] ?? null))
        );
    }
    if ((params["jumps"] ?? null) !== null) {
        cargs.push(
            "-j",
            String((params["jumps"] ?? null))
        );
    }
    if ((params["sample_every"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["sample_every"] ?? null))
        );
    }
    if ((params["deconv_model"] ?? null) !== null) {
        cargs.push(
            "-model",
            String((params["deconv_model"] ?? null))
        );
    }
    if ((params["gradient_nonlin"] ?? false)) {
        cargs.push("-g");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function bedpostx_mgh_outputs(
    params: BedpostxMghParameters,
    execution: Execution,
): BedpostxMghOutputs {
    const ret: BedpostxMghOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * bedpostx_mgh
 *
 * A modified version of FSL's bedpostx compatible with PBS queueing system for parallel computation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BedpostxMghOutputs`).
 */
function bedpostx_mgh_execute(
    params: BedpostxMghParameters,
    runner: Runner | null = null,
): BedpostxMghOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BEDPOSTX_MGH_METADATA);
    params = execution.params(params)
    const cargs = bedpostx_mgh_cargs(params, execution)
    const ret = bedpostx_mgh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * bedpostx_mgh
 *
 * A modified version of FSL's bedpostx compatible with PBS queueing system for parallel computation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_directory Subject directory containing necessary files such as bvals, bvecs, data, and nodif_brain_mask.
 * @param fibres Number of fibres per voxel, default is 3
 * @param ard_weight ARD weight, more weight means fewer secondary fibres per voxel, default is 1
 * @param burnin Burnin period, default is 1000
 * @param jumps Number of jumps, default is 1250
 * @param sample_every Sample every n steps, default is 25
 * @param deconv_model Deconvolution model selection. 1: with sticks, 2: with sticks with a range of diffusivities (default), 3: with zeppelins
 * @param gradient_nonlin Consider gradient nonlinearities, default is off
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BedpostxMghOutputs`).
 */
function bedpostx_mgh(
    subject_directory: string,
    fibres: number | null = null,
    ard_weight: number | null = null,
    burnin: number | null = null,
    jumps: number | null = null,
    sample_every: number | null = null,
    deconv_model: number | null = null,
    gradient_nonlin: boolean = false,
    runner: Runner | null = null,
): BedpostxMghOutputs {
    const params = bedpostx_mgh_params(subject_directory, fibres, ard_weight, burnin, jumps, sample_every, deconv_model, gradient_nonlin)
    return bedpostx_mgh_execute(params, runner);
}


export {
      BEDPOSTX_MGH_METADATA,
      BedpostxMghOutputs,
      bedpostx_mgh,
      bedpostx_mgh_execute,
      bedpostx_mgh_params,
};
