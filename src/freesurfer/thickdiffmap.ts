// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const THICKDIFFMAP_METADATA: Metadata = {
    id: "386d35dd120f181e0cd722b783b2ab7dab134ec4.boutiques",
    name: "thickdiffmap",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ThickdiffmapParameters {
    "@type": "freesurfer.thickdiffmap";
    "subjscan1": InputPathType;
    "subjscan2": InputPathType;
    "commonsubj": string;
    "hemi": string;
    "steps"?: Array<string> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.thickdiffmap": thickdiffmap_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `thickdiffmap(...)`.
 *
 * @interface
 */
interface ThickdiffmapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjscan1 First scan of a subject
 * @param subjscan2 Second (later) scan of the same subject
 * @param commonsubj Subject to use as the common template
 * @param hemi Hemisphere to process
 * @param steps Stages of processing
 *
 * @returns Parameter dictionary
 */
function thickdiffmap_params(
    subjscan1: InputPathType,
    subjscan2: InputPathType,
    commonsubj: string,
    hemi: string,
    steps: Array<string> | null = null,
): ThickdiffmapParameters {
    const params = {
        "@type": "freesurfer.thickdiffmap" as const,
        "subjscan1": subjscan1,
        "subjscan2": subjscan2,
        "commonsubj": commonsubj,
        "hemi": hemi,
    };
    if (steps !== null) {
        params["steps"] = steps;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function thickdiffmap_cargs(
    params: ThickdiffmapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("thickdiffmap");
    cargs.push(execution.inputFile((params["subjscan1"] ?? null)));
    cargs.push(execution.inputFile((params["subjscan2"] ?? null)));
    cargs.push((params["commonsubj"] ?? null));
    cargs.push((params["hemi"] ?? null));
    if ((params["steps"] ?? null) !== null) {
        cargs.push(...(params["steps"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function thickdiffmap_outputs(
    params: ThickdiffmapParameters,
    execution: Execution,
): ThickdiffmapOutputs {
    const ret: ThickdiffmapOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Compute and analyze cortical thickness difference maps.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `ThickdiffmapOutputs`).
 */
function thickdiffmap_execute(
    params: ThickdiffmapParameters,
    execution: Execution,
): ThickdiffmapOutputs {
    params = execution.params(params)
    const cargs = thickdiffmap_cargs(params, execution)
    const ret = thickdiffmap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute and analyze cortical thickness difference maps.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjscan1 First scan of a subject
 * @param subjscan2 Second (later) scan of the same subject
 * @param commonsubj Subject to use as the common template
 * @param hemi Hemisphere to process
 * @param steps Stages of processing
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ThickdiffmapOutputs`).
 */
function thickdiffmap(
    subjscan1: InputPathType,
    subjscan2: InputPathType,
    commonsubj: string,
    hemi: string,
    steps: Array<string> | null = null,
    runner: Runner | null = null,
): ThickdiffmapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(THICKDIFFMAP_METADATA);
    const params = thickdiffmap_params(subjscan1, subjscan2, commonsubj, hemi, steps)
    return thickdiffmap_execute(params, execution);
}


export {
      THICKDIFFMAP_METADATA,
      ThickdiffmapOutputs,
      ThickdiffmapParameters,
      thickdiffmap,
      thickdiffmap_cargs,
      thickdiffmap_execute,
      thickdiffmap_outputs,
      thickdiffmap_params,
};
