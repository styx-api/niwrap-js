// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIGNAL2IMAGE_METADATA: Metadata = {
    id: "49c8a2ca24a598e9e83ea9066e0f5bc5c7979e72.boutiques",
    name: "signal2image",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Signal2imageParameters {
    "@type": "fsl.signal2image";
    "pulse_sequence": InputPathType;
    "input_signal"?: InputPathType | null | undefined;
    "output_image"?: string | null | undefined;
    "kspace_coordinates"?: InputPathType | null | undefined;
    "output_kspace"?: string | null | undefined;
    "abs_flag": boolean;
    "homodyne_flag": boolean;
    "verbose_flag": boolean;
    "apodize_flag": boolean;
    "cutoff"?: number | null | undefined;
    "rolloff"?: number | null | undefined;
    "save_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.signal2image": signal2image_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.signal2image": signal2image_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `signal2image(...)`.
 *
 * @interface
 */
interface Signal2imageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resultant image file from the input signal and pulse sequence.
     */
    outfile: OutputPathType | null;
    /**
     * The resultant k-space file.
     */
    kspace_outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param pulse_sequence 8-column pulse_sequence matrix. Expects to find all other pulse sequence files in the same directory.
 * @param input_signal Input signal file.
 * @param output_image Output image file.
 * @param kspace_coordinates K-space coordinates file.
 * @param output_kspace Output k-space file.
 * @param abs_flag Save absolute magnitude and phase.
 * @param homodyne_flag Do the homodyne reconstruction.
 * @param verbose_flag Switch on diagnostic messages.
 * @param apodize_flag Do apodization.
 * @param cutoff Apodization with this cutoff; default 100.
 * @param rolloff Apodization with this rolloff; default 10.
 * @param save_flag Save window as ASCII matrix (DEBUG!)
 * @param help_flag Display help message
 *
 * @returns Parameter dictionary
 */
function signal2image_params(
    pulse_sequence: InputPathType,
    input_signal: InputPathType | null = null,
    output_image: string | null = null,
    kspace_coordinates: InputPathType | null = null,
    output_kspace: string | null = null,
    abs_flag: boolean = false,
    homodyne_flag: boolean = false,
    verbose_flag: boolean = false,
    apodize_flag: boolean = false,
    cutoff: number | null = 100,
    rolloff: number | null = 10,
    save_flag: boolean = false,
    help_flag: boolean = false,
): Signal2imageParameters {
    const params = {
        "@type": "fsl.signal2image" as const,
        "pulse_sequence": pulse_sequence,
        "abs_flag": abs_flag,
        "homodyne_flag": homodyne_flag,
        "verbose_flag": verbose_flag,
        "apodize_flag": apodize_flag,
        "save_flag": save_flag,
        "help_flag": help_flag,
    };
    if (input_signal !== null) {
        params["input_signal"] = input_signal;
    }
    if (output_image !== null) {
        params["output_image"] = output_image;
    }
    if (kspace_coordinates !== null) {
        params["kspace_coordinates"] = kspace_coordinates;
    }
    if (output_kspace !== null) {
        params["output_kspace"] = output_kspace;
    }
    if (cutoff !== null) {
        params["cutoff"] = cutoff;
    }
    if (rolloff !== null) {
        params["rolloff"] = rolloff;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function signal2image_cargs(
    params: Signal2imageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("signal2image");
    cargs.push(
        "-p",
        execution.inputFile((params["pulse_sequence"] ?? null))
    );
    if ((params["input_signal"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["input_signal"] ?? null))
        );
    }
    if ((params["output_image"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_image"] ?? null)
        );
    }
    if ((params["kspace_coordinates"] ?? null) !== null) {
        cargs.push(
            "-c",
            execution.inputFile((params["kspace_coordinates"] ?? null))
        );
    }
    if ((params["output_kspace"] ?? null) !== null) {
        cargs.push(
            "-k",
            (params["output_kspace"] ?? null)
        );
    }
    if ((params["abs_flag"] ?? null)) {
        cargs.push("-a");
    }
    if ((params["homodyne_flag"] ?? null)) {
        cargs.push("--homo");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["apodize_flag"] ?? null)) {
        cargs.push("-z");
    }
    if ((params["cutoff"] ?? null) !== null) {
        cargs.push(
            "-l",
            String((params["cutoff"] ?? null))
        );
    }
    if ((params["rolloff"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["rolloff"] ?? null))
        );
    }
    if ((params["save_flag"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function signal2image_outputs(
    params: Signal2imageParameters,
    execution: Execution,
): Signal2imageOutputs {
    const ret: Signal2imageOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["output_image"] ?? null) !== null) ? execution.outputFile([(params["output_image"] ?? null)].join('')) : null,
        kspace_outfile: ((params["output_kspace"] ?? null) !== null) ? execution.outputFile([(params["output_kspace"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * signal2image
 *
 * A tool for converting MR signal data to images using specified k-space coordinates and pulse sequences.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Signal2imageOutputs`).
 */
function signal2image_execute(
    params: Signal2imageParameters,
    runner: Runner | null = null,
): Signal2imageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIGNAL2IMAGE_METADATA);
    params = execution.params(params)
    const cargs = signal2image_cargs(params, execution)
    const ret = signal2image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * signal2image
 *
 * A tool for converting MR signal data to images using specified k-space coordinates and pulse sequences.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param pulse_sequence 8-column pulse_sequence matrix. Expects to find all other pulse sequence files in the same directory.
 * @param input_signal Input signal file.
 * @param output_image Output image file.
 * @param kspace_coordinates K-space coordinates file.
 * @param output_kspace Output k-space file.
 * @param abs_flag Save absolute magnitude and phase.
 * @param homodyne_flag Do the homodyne reconstruction.
 * @param verbose_flag Switch on diagnostic messages.
 * @param apodize_flag Do apodization.
 * @param cutoff Apodization with this cutoff; default 100.
 * @param rolloff Apodization with this rolloff; default 10.
 * @param save_flag Save window as ASCII matrix (DEBUG!)
 * @param help_flag Display help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Signal2imageOutputs`).
 */
function signal2image(
    pulse_sequence: InputPathType,
    input_signal: InputPathType | null = null,
    output_image: string | null = null,
    kspace_coordinates: InputPathType | null = null,
    output_kspace: string | null = null,
    abs_flag: boolean = false,
    homodyne_flag: boolean = false,
    verbose_flag: boolean = false,
    apodize_flag: boolean = false,
    cutoff: number | null = 100,
    rolloff: number | null = 10,
    save_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): Signal2imageOutputs {
    const params = signal2image_params(pulse_sequence, input_signal, output_image, kspace_coordinates, output_kspace, abs_flag, homodyne_flag, verbose_flag, apodize_flag, cutoff, rolloff, save_flag, help_flag)
    return signal2image_execute(params, runner);
}


export {
      SIGNAL2IMAGE_METADATA,
      Signal2imageOutputs,
      Signal2imageParameters,
      signal2image,
      signal2image_execute,
      signal2image_params,
};
