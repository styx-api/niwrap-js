// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__TO_RAI_METADATA: Metadata = {
    id: "ae5bb83cce00bf51d61da1e1b21d495548f69a92.boutiques",
    name: "@ToRAI",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VToRaiParameters {
    "__STYXTYPE__": "@ToRAI";
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@ToRAI": v__to_rai_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__to_rai(...)`.
 *
 * @interface
 */
interface VToRaiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__to_rai_params(
): VToRaiParameters {
    /**
     * Build parameters.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@ToRAI" as const,
    };
    return params;
}


function v__to_rai_cargs(
    params: VToRaiParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@ToRAI");
    cargs.push("<-xyz");
    cargs.push("X");
    cargs.push("Y");
    cargs.push("Z>");
    cargs.push("<-or");
    cargs.push("ORIENT>");
    return cargs;
}


function v__to_rai_outputs(
    params: VToRaiParameters,
    execution: Execution,
): VToRaiOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VToRaiOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__to_rai_execute(
    params: VToRaiParameters,
    execution: Execution,
): VToRaiOutputs {
    /**
     * Tool to change the ORIENT coordinates to RAI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VToRaiOutputs`).
     */
    params = execution.params(params)
    const cargs = v__to_rai_cargs(params, execution)
    const ret = v__to_rai_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__to_rai(
    runner: Runner | null = null,
): VToRaiOutputs {
    /**
     * Tool to change the ORIENT coordinates to RAI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VToRaiOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__TO_RAI_METADATA);
    const params = v__to_rai_params()
    return v__to_rai_execute(params, execution);
}


export {
      VToRaiOutputs,
      VToRaiParameters,
      V__TO_RAI_METADATA,
      v__to_rai,
      v__to_rai_params,
};
