// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_PQ_SCRIPT_PY_METADATA: Metadata = {
    id: "a615a94a90a33ebcd0b428159142b2d1a4947946.boutiques",
    name: "make_pq_script.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MakePqScriptPyParameters {
    "__STYXTYPE__": "make_pq_script.py";
    "dataset": InputPathType;
    "brick_index": number;
    "mask": InputPathType;
    "out_script": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "make_pq_script.py": make_pq_script_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "make_pq_script.py": make_pq_script_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `make_pq_script_py(...)`.
 *
 * @interface
 */
interface MakePqScriptPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated output script
     */
    script: OutputPathType;
}


function make_pq_script_py_params(
    dataset: InputPathType,
    brick_index: number,
    mask: InputPathType,
    out_script: string,
): MakePqScriptPyParameters {
    /**
     * Build parameters.
    
     * @param dataset Input dataset (no sub-brick selectors)
     * @param brick_index Volume sub-brick for specific t-stat
     * @param mask Mask volume dataset
     * @param out_script Name for output script to write
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "make_pq_script.py" as const,
        "dataset": dataset,
        "brick_index": brick_index,
        "mask": mask,
        "out_script": out_script,
    };
    return params;
}


function make_pq_script_py_cargs(
    params: MakePqScriptPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("make_pq_script.py");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    cargs.push(String((params["brick_index"] ?? null)));
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push((params["out_script"] ?? null));
    return cargs;
}


function make_pq_script_py_outputs(
    params: MakePqScriptPyParameters,
    execution: Execution,
): MakePqScriptPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MakePqScriptPyOutputs = {
        root: execution.outputFile("."),
        script: execution.outputFile([(params["out_script"] ?? null)].join('')),
    };
    return ret;
}


function make_pq_script_py_execute(
    params: MakePqScriptPyParameters,
    execution: Execution,
): MakePqScriptPyOutputs {
    /**
     * Creates a script to compute p-value and q-value curves.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MakePqScriptPyOutputs`).
     */
    params = execution.params(params)
    const cargs = make_pq_script_py_cargs(params, execution)
    const ret = make_pq_script_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function make_pq_script_py(
    dataset: InputPathType,
    brick_index: number,
    mask: InputPathType,
    out_script: string,
    runner: Runner | null = null,
): MakePqScriptPyOutputs {
    /**
     * Creates a script to compute p-value and q-value curves.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dataset Input dataset (no sub-brick selectors)
     * @param brick_index Volume sub-brick for specific t-stat
     * @param mask Mask volume dataset
     * @param out_script Name for output script to write
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MakePqScriptPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_PQ_SCRIPT_PY_METADATA);
    const params = make_pq_script_py_params(dataset, brick_index, mask, out_script)
    return make_pq_script_py_execute(params, execution);
}


export {
      MAKE_PQ_SCRIPT_PY_METADATA,
      MakePqScriptPyOutputs,
      MakePqScriptPyParameters,
      make_pq_script_py,
      make_pq_script_py_params,
};
