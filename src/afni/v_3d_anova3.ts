// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ANOVA3_METADATA: Metadata = {
    id: "fe7391c6cb7a9865c9618e3aa5f2eb36c7ee57f4.boutiques",
    name: "3dANOVA3",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAnova3Parameters {
    "__STYXTYPE__": "3dANOVA3";
    "type": number;
    "alevels": number;
    "blevels": number;
    "clevels": number;
    "dsets": Array<string>;
    "voxel_num"?: number | null | undefined;
    "diskspace": boolean;
    "mask"?: InputPathType | null | undefined;
    "anova_options"?: Array<string> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dANOVA3": v_3d_anova3_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dANOVA3": v_3d_anova3_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_anova3(...)`.
 *
 * @interface
 */
interface V3dAnova3Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file for the main ANOVA result.
     */
    outfile_fa: OutputPathType;
    /**
     * Output file for the main B ANOVA result.
     */
    outfile_fb: OutputPathType;
    /**
     * Output file for the main C ANOVA result.
     */
    outfile_fc: OutputPathType;
    /**
     * Output file for the interaction between A and B.
     */
    outfile_fab: OutputPathType;
    /**
     * Output file for the interaction between A and C.
     */
    outfile_fac: OutputPathType;
    /**
     * Output file for the interaction between B and C.
     */
    outfile_fbc: OutputPathType;
    /**
     * Output file for the interaction between A, B, and C.
     */
    outfile_fabc: OutputPathType;
    /**
     * Output file for the A mean results.
     */
    outfile_amean: OutputPathType;
    /**
     * Output file for the B mean results.
     */
    outfile_bmean: OutputPathType;
}


function v_3d_anova3_params(
    type_: number,
    alevels: number,
    blevels: number,
    clevels: number,
    dsets: Array<string>,
    voxel_num: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    anova_options: Array<string> | null = null,
): V3dAnova3Parameters {
    /**
     * Build parameters.
    
     * @param type_ Type of ANOVA model to be used. k = 1: A,B,C fixed; AxBxC, k = 2: A,B,C random; AxBxC, k = 3: A fixed; B,C random; AxBxC, k = 4: A,B fixed; C random; AxBxC, k = 5: A,B fixed; C random; AxB,BxC,C(A)
     * @param alevels Number of levels for factor A.
     * @param blevels Number of levels for factor B.
     * @param clevels Number of levels for factor C.
     * @param dsets Input data sets for specific levels of factors A, B, and C.
     * @param voxel_num Screen output for specified voxel number.
     * @param diskspace Print out disk space required for program execution.
     * @param mask Use sub-brick #0 of dataset to define which voxels to process.
     * @param anova_options Modified ANOVA computation options. See: https://afni.nimh.nih.gov/sscc/gangc/ANOVA_Mod.html
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dANOVA3" as const,
        "type": type_,
        "alevels": alevels,
        "blevels": blevels,
        "clevels": clevels,
        "dsets": dsets,
        "diskspace": diskspace,
    };
    if (voxel_num !== null) {
        params["voxel_num"] = voxel_num;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (anova_options !== null) {
        params["anova_options"] = anova_options;
    }
    return params;
}


function v_3d_anova3_cargs(
    params: V3dAnova3Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dANOVA3");
    cargs.push(
        "-type",
        String((params["type"] ?? null))
    );
    cargs.push(
        "-alevels",
        String((params["alevels"] ?? null))
    );
    cargs.push(
        "-blevels",
        String((params["blevels"] ?? null))
    );
    cargs.push(
        "-clevels",
        String((params["clevels"] ?? null))
    );
    cargs.push(
        "-dset",
        ...(params["dsets"] ?? null)
    );
    if ((params["voxel_num"] ?? null) !== null) {
        cargs.push(
            "-voxel",
            String((params["voxel_num"] ?? null))
        );
    }
    if ((params["diskspace"] ?? null)) {
        cargs.push("-diskspace");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    cargs.push("[OUTFILES]");
    if ((params["anova_options"] ?? null) !== null) {
        cargs.push(
            "-old_method -OK -assume_sph",
            ...(params["anova_options"] ?? null)
        );
    }
    return cargs;
}


function v_3d_anova3_outputs(
    params: V3dAnova3Parameters,
    execution: Execution,
): V3dAnova3Outputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dAnova3Outputs = {
        root: execution.outputFile("."),
        outfile_fa: execution.outputFile(["[OUTFILE_FA]"].join('')),
        outfile_fb: execution.outputFile(["[OUTFILE_FB]"].join('')),
        outfile_fc: execution.outputFile(["[OUTFILE_FC]"].join('')),
        outfile_fab: execution.outputFile(["[OUTFILE_FAB]"].join('')),
        outfile_fac: execution.outputFile(["[OUTFILE_FAC]"].join('')),
        outfile_fbc: execution.outputFile(["[OUTFILE_FBC]"].join('')),
        outfile_fabc: execution.outputFile(["[OUTFILE_FABC]"].join('')),
        outfile_amean: execution.outputFile(["[OUTFILE_AMEAN]"].join('')),
        outfile_bmean: execution.outputFile(["[OUTFILE_BMEAN]"].join('')),
    };
    return ret;
}


function v_3d_anova3_execute(
    params: V3dAnova3Parameters,
    execution: Execution,
): V3dAnova3Outputs {
    /**
     * Performs three-factor ANOVA on 3D data sets.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dAnova3Outputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_anova3_cargs(params, execution)
    const ret = v_3d_anova3_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_anova3(
    type_: number,
    alevels: number,
    blevels: number,
    clevels: number,
    dsets: Array<string>,
    voxel_num: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    anova_options: Array<string> | null = null,
    runner: Runner | null = null,
): V3dAnova3Outputs {
    /**
     * Performs three-factor ANOVA on 3D data sets.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param type_ Type of ANOVA model to be used. k = 1: A,B,C fixed; AxBxC, k = 2: A,B,C random; AxBxC, k = 3: A fixed; B,C random; AxBxC, k = 4: A,B fixed; C random; AxBxC, k = 5: A,B fixed; C random; AxB,BxC,C(A)
     * @param alevels Number of levels for factor A.
     * @param blevels Number of levels for factor B.
     * @param clevels Number of levels for factor C.
     * @param dsets Input data sets for specific levels of factors A, B, and C.
     * @param voxel_num Screen output for specified voxel number.
     * @param diskspace Print out disk space required for program execution.
     * @param mask Use sub-brick #0 of dataset to define which voxels to process.
     * @param anova_options Modified ANOVA computation options. See: https://afni.nimh.nih.gov/sscc/gangc/ANOVA_Mod.html
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dAnova3Outputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ANOVA3_METADATA);
    const params = v_3d_anova3_params(type_, alevels, blevels, clevels, dsets, voxel_num, diskspace, mask, anova_options)
    return v_3d_anova3_execute(params, execution);
}


export {
      V3dAnova3Outputs,
      V3dAnova3Parameters,
      V_3D_ANOVA3_METADATA,
      v_3d_anova3,
      v_3d_anova3_params,
};
