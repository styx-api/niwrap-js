// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_AFNITO_NIFTI_METADATA: Metadata = {
    id: "a7bea0118332764560ff63140180ab8a368e1655.boutiques",
    name: "3dAFNItoNIFTI",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAfnitoNiftiParameters {
    "@type"?: "afni/3dAFNItoNIFTI";
    "input_dataset": InputPathType;
    "prefix"?: string | null | undefined;
    "verbose": boolean;
    "force_float": boolean;
    "pure": boolean;
    "denote": boolean;
    "oldid": boolean;
    "newid": boolean;
}
type V3dAfnitoNiftiParametersTagged = Required<Pick<V3dAfnitoNiftiParameters, '@type'>> & V3dAfnitoNiftiParameters;


/**
 * Output object returned when calling `V3dAfnitoNiftiParameters(...)`.
 *
 * @interface
 */
interface V3dAfnitoNiftiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output NIfTI file.
     */
    output_nifti: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dataset Input AFNI dataset
 * @param prefix Output NIfTI file prefix
 * @param verbose Print progress messages (increases verbosity if repeated)
 * @param force_float Force the output dataset to be 32-bit floats
 * @param pure Do not write an AFNI extension field into the output file
 * @param denote Remove text notes from AFNI extension field that might contain identifying information
 * @param oldid Retain the input dataset's AFNI ID code
 * @param newid Assign a new AFNI ID code to the dataset (default action)
 *
 * @returns Parameter dictionary
 */
function v_3d_afnito_nifti_params(
    input_dataset: InputPathType,
    prefix: string | null = null,
    verbose: boolean = false,
    force_float: boolean = false,
    pure: boolean = false,
    denote: boolean = false,
    oldid: boolean = false,
    newid: boolean = false,
): V3dAfnitoNiftiParametersTagged {
    const params = {
        "@type": "afni/3dAFNItoNIFTI" as const,
        "input_dataset": input_dataset,
        "verbose": verbose,
        "force_float": force_float,
        "pure": pure,
        "denote": denote,
        "oldid": oldid,
        "newid": newid,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_afnito_nifti_cargs(
    params: V3dAfnitoNiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dAFNItoNIFTI");
    cargs.push(execution.inputFile((params["input_dataset"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verbose"] ?? false)) {
        cargs.push("-verb");
    }
    if ((params["force_float"] ?? false)) {
        cargs.push("-float");
    }
    if ((params["pure"] ?? false)) {
        cargs.push("-pure");
    }
    if ((params["denote"] ?? false)) {
        cargs.push("-denote");
    }
    if ((params["oldid"] ?? false)) {
        cargs.push("-oldid");
    }
    if ((params["newid"] ?? false)) {
        cargs.push("-newid");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_afnito_nifti_outputs(
    params: V3dAfnitoNiftiParameters,
    execution: Execution,
): V3dAfnitoNiftiOutputs {
    const ret: V3dAfnitoNiftiOutputs = {
        root: execution.outputFile("."),
        output_nifti: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii"].join('')) : null,
    };
    return ret;
}


/**
 * 3dAFNItoNIFTI
 *
 * Converts an AFNI dataset to a NIfTI-1.1 file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAfnitoNiftiOutputs`).
 */
function v_3d_afnito_nifti_execute(
    params: V3dAfnitoNiftiParameters,
    runner: Runner | null = null,
): V3dAfnitoNiftiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_AFNITO_NIFTI_METADATA);
    params = execution.params(params)
    const cargs = v_3d_afnito_nifti_cargs(params, execution)
    const ret = v_3d_afnito_nifti_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dAFNItoNIFTI
 *
 * Converts an AFNI dataset to a NIfTI-1.1 file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Input AFNI dataset
 * @param prefix Output NIfTI file prefix
 * @param verbose Print progress messages (increases verbosity if repeated)
 * @param force_float Force the output dataset to be 32-bit floats
 * @param pure Do not write an AFNI extension field into the output file
 * @param denote Remove text notes from AFNI extension field that might contain identifying information
 * @param oldid Retain the input dataset's AFNI ID code
 * @param newid Assign a new AFNI ID code to the dataset (default action)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAfnitoNiftiOutputs`).
 */
function v_3d_afnito_nifti(
    input_dataset: InputPathType,
    prefix: string | null = null,
    verbose: boolean = false,
    force_float: boolean = false,
    pure: boolean = false,
    denote: boolean = false,
    oldid: boolean = false,
    newid: boolean = false,
    runner: Runner | null = null,
): V3dAfnitoNiftiOutputs {
    const params = v_3d_afnito_nifti_params(input_dataset, prefix, verbose, force_float, pure, denote, oldid, newid)
    return v_3d_afnito_nifti_execute(params, runner);
}


export {
      V3dAfnitoNiftiOutputs,
      V_3D_AFNITO_NIFTI_METADATA,
      v_3d_afnito_nifti,
      v_3d_afnito_nifti_execute,
      v_3d_afnito_nifti_params,
};
