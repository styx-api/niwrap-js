// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BORDER_LENGTH_METADATA: Metadata = {
    id: "53685982ac0f6c80b96345649dc3d3bb8389bb5b.boutiques",
    name: "border-length",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface BorderLengthParameters {
    "@type"?: "workbench/border-length";
    "border": InputPathType;
    "surface": InputPathType;
    "opt_corrected_areas_area_metric"?: InputPathType | null | undefined;
    "opt_separate_pieces": boolean;
    "opt_hide_border_name": boolean;
}
type BorderLengthParametersTagged = Required<Pick<BorderLengthParameters, '@type'>> & BorderLengthParameters;


/**
 * Output object returned when calling `BorderLengthParameters(...)`.
 *
 * @interface
 */
interface BorderLengthOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param border the input border file
 * @param surface the surface to measure the borders on
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param opt_separate_pieces report lengths for multi-part borders as separate numbers
 * @param opt_hide_border_name don't print border name before each output
 *
 * @returns Parameter dictionary
 */
function border_length_params(
    border: InputPathType,
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    opt_separate_pieces: boolean = false,
    opt_hide_border_name: boolean = false,
): BorderLengthParametersTagged {
    const params = {
        "@type": "workbench/border-length" as const,
        "border": border,
        "surface": surface,
        "opt_separate_pieces": opt_separate_pieces,
        "opt_hide_border_name": opt_hide_border_name,
    };
    if (opt_corrected_areas_area_metric !== null) {
        params["opt_corrected_areas_area_metric"] = opt_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function border_length_cargs(
    params: BorderLengthParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-border-length");
    cargs.push(execution.inputFile((params["border"] ?? null)));
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-corrected-areas",
            execution.inputFile((params["opt_corrected_areas_area_metric"] ?? null))
        );
    }
    if ((params["opt_separate_pieces"] ?? false)) {
        cargs.push("-separate-pieces");
    }
    if ((params["opt_hide_border_name"] ?? false)) {
        cargs.push("-hide-border-name");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function border_length_outputs(
    params: BorderLengthParameters,
    execution: Execution,
): BorderLengthOutputs {
    const ret: BorderLengthOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * border-length
 *
 * Report length of borders.
 *
 * For each border, print its length along the surface, in mm.  If a border has multiple parts, their lengths are summed before printing, unless -separate-pieces is specified.
 *
 * The -corrected-areas option is intended for when the length is not meaningfully measurable on individual surfaces, it is only an approximate correction for the reduction in structure of a group average surface.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderLengthOutputs`).
 */
function border_length_execute(
    params: BorderLengthParameters,
    runner: Runner | null = null,
): BorderLengthOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BORDER_LENGTH_METADATA);
    params = execution.params(params)
    const cargs = border_length_cargs(params, execution)
    const ret = border_length_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * border-length
 *
 * Report length of borders.
 *
 * For each border, print its length along the surface, in mm.  If a border has multiple parts, their lengths are summed before printing, unless -separate-pieces is specified.
 *
 * The -corrected-areas option is intended for when the length is not meaningfully measurable on individual surfaces, it is only an approximate correction for the reduction in structure of a group average surface.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param border the input border file
 * @param surface the surface to measure the borders on
 * @param opt_corrected_areas_area_metric vertex areas to use instead of computing them from the surface: the corrected vertex areas, as a metric
 * @param opt_separate_pieces report lengths for multi-part borders as separate numbers
 * @param opt_hide_border_name don't print border name before each output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BorderLengthOutputs`).
 */
function border_length(
    border: InputPathType,
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | null = null,
    opt_separate_pieces: boolean = false,
    opt_hide_border_name: boolean = false,
    runner: Runner | null = null,
): BorderLengthOutputs {
    const params = border_length_params(border, surface, opt_corrected_areas_area_metric, opt_separate_pieces, opt_hide_border_name)
    return border_length_execute(params, runner);
}


export {
      BORDER_LENGTH_METADATA,
      BorderLengthOutputs,
      border_length,
      border_length_execute,
      border_length_params,
};
