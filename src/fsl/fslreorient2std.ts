// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLREORIENT2STD_METADATA: Metadata = {
    id: "33ec9acb9e62521ae8a4352dd428e1e8f068395c.boutiques",
    name: "fslreorient2std",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Fslreorient2stdParameters {
    "@type": "fsl.fslreorient2std";
    "input_image": InputPathType;
    "output_image"?: string | null | undefined;
    "matrix_file"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslreorient2std": fslreorient2std_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslreorient2std": fslreorient2std_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslreorient2std(...)`.
 *
 * @interface
 */
interface Fslreorient2stdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Reoriented output image (NIfTI format)
     */
    output_image: OutputPathType | null;
    /**
     * File to save the transformation matrix
     */
    matrix_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_image Input image to be reoriented (NIfTI format, e.g. img.nii.gz)
 * @param output_image Output image with the reoriented result (NIfTI format, e.g. reoriented_img.nii.gz). If not provided, transformation matrix is output to standard output.
 * @param matrix_file File to save the transformation matrix
 *
 * @returns Parameter dictionary
 */
function fslreorient2std_params(
    input_image: InputPathType,
    output_image: string | null = null,
    matrix_file: string | null = null,
): Fslreorient2stdParameters {
    const params = {
        "@type": "fsl.fslreorient2std" as const,
        "input_image": input_image,
    };
    if (output_image !== null) {
        params["output_image"] = output_image;
    }
    if (matrix_file !== null) {
        params["matrix_file"] = matrix_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslreorient2std_cargs(
    params: Fslreorient2stdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslreorient2std");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    if ((params["output_image"] ?? null) !== null) {
        cargs.push((params["output_image"] ?? null));
    }
    if ((params["matrix_file"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["matrix_file"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslreorient2std_outputs(
    params: Fslreorient2stdParameters,
    execution: Execution,
): Fslreorient2stdOutputs {
    const ret: Fslreorient2stdOutputs = {
        root: execution.outputFile("."),
        output_image: ((params["output_image"] ?? null) !== null) ? execution.outputFile([((params["output_image"] ?? null).endsWith(".nii.gz") ? (params["output_image"] ?? null).slice(0, -7) : (params["output_image"] ?? null)), ".nii.gz"].join('')) : null,
        matrix_output: ((params["matrix_file"] ?? null) !== null) ? execution.outputFile([(params["matrix_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fslreorient2std
 *
 * A tool for reorienting an image to match the approximate orientation of standard template images (MNI152).
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fslreorient2stdOutputs`).
 */
function fslreorient2std_execute(
    params: Fslreorient2stdParameters,
    runner: Runner | null = null,
): Fslreorient2stdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLREORIENT2STD_METADATA);
    params = execution.params(params)
    const cargs = fslreorient2std_cargs(params, execution)
    const ret = fslreorient2std_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fslreorient2std
 *
 * A tool for reorienting an image to match the approximate orientation of standard template images (MNI152).
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_image Input image to be reoriented (NIfTI format, e.g. img.nii.gz)
 * @param output_image Output image with the reoriented result (NIfTI format, e.g. reoriented_img.nii.gz). If not provided, transformation matrix is output to standard output.
 * @param matrix_file File to save the transformation matrix
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fslreorient2stdOutputs`).
 */
function fslreorient2std(
    input_image: InputPathType,
    output_image: string | null = null,
    matrix_file: string | null = null,
    runner: Runner | null = null,
): Fslreorient2stdOutputs {
    const params = fslreorient2std_params(input_image, output_image, matrix_file)
    return fslreorient2std_execute(params, runner);
}


export {
      FSLREORIENT2STD_METADATA,
      Fslreorient2stdOutputs,
      Fslreorient2stdParameters,
      fslreorient2std,
      fslreorient2std_execute,
      fslreorient2std_params,
};
