// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SEG_METADATA: Metadata = {
    id: "45ea7914f43838d036104b817cbe78bed257a1ac.boutiques",
    name: "3dSeg",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSegParameters {
    "__STYXTYPE__": "3dSeg";
    "anat": InputPathType;
    "mask"?: string | null | undefined;
    "blur_meth"?: string | null | undefined;
    "bias_fwhm"?: number | null | undefined;
    "classes"?: string | null | undefined;
    "Bmrf"?: number | null | undefined;
    "bias_classes"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "overwrite": boolean;
    "debug"?: number | null | undefined;
    "mixfrac"?: string | null | undefined;
    "mixfloor"?: number | null | undefined;
    "gold"?: InputPathType | null | undefined;
    "gold_bias"?: InputPathType | null | undefined;
    "main_N"?: number | null | undefined;
    "cset"?: InputPathType | null | undefined;
    "labeltable"?: InputPathType | null | undefined;
    "vox_debug"?: string | null | undefined;
    "vox_debug_file"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dSeg": v_3d_seg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dSeg": v_3d_seg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_seg(...)`.
 *
 * @interface
 */
interface V3dSegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmented brain volume output
     */
    segmented_volume: OutputPathType | null;
    /**
     * Bias field estimate output
     */
    bias_field: OutputPathType | null;
    /**
     * Classified volume output
     */
    classified_volume: OutputPathType | null;
}


function v_3d_seg_params(
    anat: InputPathType,
    mask: string | null = null,
    blur_meth: string | null = null,
    bias_fwhm: number | null = null,
    classes: string | null = null,
    bmrf: number | null = null,
    bias_classes: string | null = null,
    prefix: string | null = null,
    overwrite: boolean = false,
    debug: number | null = null,
    mixfrac: string | null = null,
    mixfloor: number | null = null,
    gold: InputPathType | null = null,
    gold_bias: InputPathType | null = null,
    main_n: number | null = null,
    cset: InputPathType | null = null,
    labeltable: InputPathType | null = null,
    vox_debug: string | null = null,
    vox_debug_file: string | null = null,
): V3dSegParameters {
    /**
     * Build parameters.
    
     * @param anat Volume to segment
     * @param mask Mask of the volume to be segmented. Can be a dataset or 'AUTO' to use AFNI's automask function.
     * @param blur_meth Blurring method for bias field estimation. Options: BFT, BIM, BNN, LSB. Default: BFT
     * @param bias_fwhm The amount of blurring used when estimating the field bias. Default: 25.0
     * @param classes String of class labels separated by semicolons. Default: 'CSF; GM; WM'
     * @param bmrf Weighting factor controlling spatial homogeneity of classifications. Default: 0.0
     * @param bias_classes Classes that contribute to the estimation of the bias field. Default: 'GM; WM'
     * @param prefix Prefix for all output volume
     * @param overwrite Automatically overwrite existing files with the same prefix.
     * @param debug Set debug level (0, 1, or 2)
     * @param mixfrac Volume-wide mixing fractions for initialization. Options: '0.1 0.45 0.45', 'UNI', 'AVG152_BRAIN_MASK', 'IGNORE'. Default: UNI
     * @param mixfloor Set the minimum value for any class's mixing fraction. Default: 0.0001
     * @param gold Goldstandard segmentation volume for comparison.
     * @param gold_bias Goldstandard bias volume for comparison.
     * @param main_n Number of iterations to perform. Default: 5
     * @param cset Initial classification. Uses 3dkmean's engine if not provided.
     * @param labeltable Label table containing integer keys and corresponding labels.
     * @param vox_debug 1D index of voxel to debug or 3D voxel indices.
     * @param vox_debug_file File in which debug information is output, use '-' for stdout, '+' for stderr.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dSeg" as const,
        "anat": anat,
        "overwrite": overwrite,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (blur_meth !== null) {
        params["blur_meth"] = blur_meth;
    }
    if (bias_fwhm !== null) {
        params["bias_fwhm"] = bias_fwhm;
    }
    if (classes !== null) {
        params["classes"] = classes;
    }
    if (bmrf !== null) {
        params["Bmrf"] = bmrf;
    }
    if (bias_classes !== null) {
        params["bias_classes"] = bias_classes;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (debug !== null) {
        params["debug"] = debug;
    }
    if (mixfrac !== null) {
        params["mixfrac"] = mixfrac;
    }
    if (mixfloor !== null) {
        params["mixfloor"] = mixfloor;
    }
    if (gold !== null) {
        params["gold"] = gold;
    }
    if (gold_bias !== null) {
        params["gold_bias"] = gold_bias;
    }
    if (main_n !== null) {
        params["main_N"] = main_n;
    }
    if (cset !== null) {
        params["cset"] = cset;
    }
    if (labeltable !== null) {
        params["labeltable"] = labeltable;
    }
    if (vox_debug !== null) {
        params["vox_debug"] = vox_debug;
    }
    if (vox_debug_file !== null) {
        params["vox_debug_file"] = vox_debug_file;
    }
    return params;
}


function v_3d_seg_cargs(
    params: V3dSegParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dSeg");
    cargs.push(
        "-anat",
        execution.inputFile((params["anat"] ?? null))
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask"] ?? null)
        );
    }
    if ((params["blur_meth"] ?? null) !== null) {
        cargs.push(
            "-blur_meth",
            (params["blur_meth"] ?? null)
        );
    }
    if ((params["bias_fwhm"] ?? null) !== null) {
        cargs.push(
            "-bias_fwhm",
            String((params["bias_fwhm"] ?? null))
        );
    }
    if ((params["classes"] ?? null) !== null) {
        cargs.push(
            "-classes",
            (params["classes"] ?? null)
        );
    }
    if ((params["Bmrf"] ?? null) !== null) {
        cargs.push(
            "-Bmrf",
            String((params["Bmrf"] ?? null))
        );
    }
    if ((params["bias_classes"] ?? null) !== null) {
        cargs.push(
            "-bias_classes",
            (params["bias_classes"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    if ((params["debug"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug"] ?? null))
        );
    }
    if ((params["mixfrac"] ?? null) !== null) {
        cargs.push(
            "-mixfrac",
            (params["mixfrac"] ?? null)
        );
    }
    if ((params["mixfloor"] ?? null) !== null) {
        cargs.push(
            "-mixfloor",
            String((params["mixfloor"] ?? null))
        );
    }
    if ((params["gold"] ?? null) !== null) {
        cargs.push(
            "-gold",
            execution.inputFile((params["gold"] ?? null))
        );
    }
    if ((params["gold_bias"] ?? null) !== null) {
        cargs.push(
            "-gold_bias",
            execution.inputFile((params["gold_bias"] ?? null))
        );
    }
    if ((params["main_N"] ?? null) !== null) {
        cargs.push(
            "-main_N",
            String((params["main_N"] ?? null))
        );
    }
    if ((params["cset"] ?? null) !== null) {
        cargs.push(
            "-cset",
            execution.inputFile((params["cset"] ?? null))
        );
    }
    if ((params["labeltable"] ?? null) !== null) {
        cargs.push(
            "-labeltable",
            execution.inputFile((params["labeltable"] ?? null))
        );
    }
    if ((params["vox_debug"] ?? null) !== null) {
        cargs.push(
            "-vox_debug",
            (params["vox_debug"] ?? null)
        );
    }
    if ((params["vox_debug_file"] ?? null) !== null) {
        cargs.push(
            "-vox_debug_file",
            (params["vox_debug_file"] ?? null)
        );
    }
    return cargs;
}


function v_3d_seg_outputs(
    params: V3dSegParameters,
    execution: Execution,
): V3dSegOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dSegOutputs = {
        root: execution.outputFile("."),
        segmented_volume: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_Segsy+orig.HEAD"].join('')) : null,
        bias_field: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_BiasField+orig.HEAD"].join('')) : null,
        classified_volume: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_Classes+orig.HEAD"].join('')) : null,
    };
    return ret;
}


function v_3d_seg_execute(
    params: V3dSegParameters,
    execution: Execution,
): V3dSegOutputs {
    /**
     * Segments brain volumes into tissue classes with optional global and voxelwise priors.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dSegOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_seg_cargs(params, execution)
    const ret = v_3d_seg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_seg(
    anat: InputPathType,
    mask: string | null = null,
    blur_meth: string | null = null,
    bias_fwhm: number | null = null,
    classes: string | null = null,
    bmrf: number | null = null,
    bias_classes: string | null = null,
    prefix: string | null = null,
    overwrite: boolean = false,
    debug: number | null = null,
    mixfrac: string | null = null,
    mixfloor: number | null = null,
    gold: InputPathType | null = null,
    gold_bias: InputPathType | null = null,
    main_n: number | null = null,
    cset: InputPathType | null = null,
    labeltable: InputPathType | null = null,
    vox_debug: string | null = null,
    vox_debug_file: string | null = null,
    runner: Runner | null = null,
): V3dSegOutputs {
    /**
     * Segments brain volumes into tissue classes with optional global and voxelwise priors.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param anat Volume to segment
     * @param mask Mask of the volume to be segmented. Can be a dataset or 'AUTO' to use AFNI's automask function.
     * @param blur_meth Blurring method for bias field estimation. Options: BFT, BIM, BNN, LSB. Default: BFT
     * @param bias_fwhm The amount of blurring used when estimating the field bias. Default: 25.0
     * @param classes String of class labels separated by semicolons. Default: 'CSF; GM; WM'
     * @param bmrf Weighting factor controlling spatial homogeneity of classifications. Default: 0.0
     * @param bias_classes Classes that contribute to the estimation of the bias field. Default: 'GM; WM'
     * @param prefix Prefix for all output volume
     * @param overwrite Automatically overwrite existing files with the same prefix.
     * @param debug Set debug level (0, 1, or 2)
     * @param mixfrac Volume-wide mixing fractions for initialization. Options: '0.1 0.45 0.45', 'UNI', 'AVG152_BRAIN_MASK', 'IGNORE'. Default: UNI
     * @param mixfloor Set the minimum value for any class's mixing fraction. Default: 0.0001
     * @param gold Goldstandard segmentation volume for comparison.
     * @param gold_bias Goldstandard bias volume for comparison.
     * @param main_n Number of iterations to perform. Default: 5
     * @param cset Initial classification. Uses 3dkmean's engine if not provided.
     * @param labeltable Label table containing integer keys and corresponding labels.
     * @param vox_debug 1D index of voxel to debug or 3D voxel indices.
     * @param vox_debug_file File in which debug information is output, use '-' for stdout, '+' for stderr.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dSegOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SEG_METADATA);
    const params = v_3d_seg_params(anat, mask, blur_meth, bias_fwhm, classes, bmrf, bias_classes, prefix, overwrite, debug, mixfrac, mixfloor, gold, gold_bias, main_n, cset, labeltable, vox_debug, vox_debug_file)
    return v_3d_seg_execute(params, execution);
}


export {
      V3dSegOutputs,
      V3dSegParameters,
      V_3D_SEG_METADATA,
      v_3d_seg,
      v_3d_seg_params,
};
