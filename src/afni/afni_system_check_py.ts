// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AFNI_SYSTEM_CHECK_PY_METADATA: Metadata = {
    id: "7248e64b61704a674c053c7617aa062fc59a999c.boutiques",
    name: "afni_system_check.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AfniSystemCheckPyParameters {
    "__STYXTYPE__": "afni_system_check.py";
    "check_all": boolean;
    "find_prog"?: string | null | undefined;
    "exact"?: string | null | undefined;
    "disp_num_cpu": boolean;
    "disp_ver_matplotlib": boolean;
    "dot_file_list": boolean;
    "dot_file_show": boolean;
    "dot_file_pack"?: string | null | undefined;
    "casematch"?: string | null | undefined;
    "data_root"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "afni_system_check.py": afni_system_check_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `afni_system_check_py(...)`.
 *
 * @interface
 */
interface AfniSystemCheckPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function afni_system_check_py_params(
    check_all: boolean = false,
    find_prog: string | null = null,
    exact: string | null = null,
    disp_num_cpu: boolean = false,
    disp_ver_matplotlib: boolean = false,
    dot_file_list: boolean = false,
    dot_file_show: boolean = false,
    dot_file_pack: string | null = null,
    casematch: string | null = null,
    data_root: string | null = null,
): AfniSystemCheckPyParameters {
    /**
     * Build parameters.
    
     * @param check_all Perform all system checks.
     * @param find_prog Search PATH for PROG.
     * @param exact Search for PROG without wildcards in -find_prog.
     * @param disp_num_cpu Display number of CPUs available.
     * @param disp_ver_matplotlib Display matplotlib version (else 'None').
     * @param dot_file_list List all found dot files (startup files).
     * @param dot_file_show Display contents of all found dot files.
     * @param dot_file_pack Create a NAME.tgz package containing dot files.
     * @param casematch Match case in -find_prog.
     * @param data_root Search for class data under DDIR.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "afni_system_check.py" as const,
        "check_all": check_all,
        "disp_num_cpu": disp_num_cpu,
        "disp_ver_matplotlib": disp_ver_matplotlib,
        "dot_file_list": dot_file_list,
        "dot_file_show": dot_file_show,
    };
    if (find_prog !== null) {
        params["find_prog"] = find_prog;
    }
    if (exact !== null) {
        params["exact"] = exact;
    }
    if (dot_file_pack !== null) {
        params["dot_file_pack"] = dot_file_pack;
    }
    if (casematch !== null) {
        params["casematch"] = casematch;
    }
    if (data_root !== null) {
        params["data_root"] = data_root;
    }
    return params;
}


function afni_system_check_py_cargs(
    params: AfniSystemCheckPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("afni_system_check.py");
    if ((params["check_all"] ?? null)) {
        cargs.push("-check_all");
    }
    if ((params["find_prog"] ?? null) !== null) {
        cargs.push(
            "-find_prog",
            (params["find_prog"] ?? null)
        );
    }
    if ((params["exact"] ?? null) !== null) {
        cargs.push(
            "-exact",
            (params["exact"] ?? null)
        );
    }
    if ((params["disp_num_cpu"] ?? null)) {
        cargs.push("-disp_num_cpu");
    }
    if ((params["disp_ver_matplotlib"] ?? null)) {
        cargs.push("-disp_ver_matplotlib");
    }
    if ((params["dot_file_list"] ?? null)) {
        cargs.push("-dot_file_list");
    }
    if ((params["dot_file_show"] ?? null)) {
        cargs.push("-dot_file_show");
    }
    if ((params["dot_file_pack"] ?? null) !== null) {
        cargs.push(
            "-dot_file_pack",
            (params["dot_file_pack"] ?? null)
        );
    }
    if ((params["casematch"] ?? null) !== null) {
        cargs.push(
            "-casematch",
            (params["casematch"] ?? null)
        );
    }
    if ((params["data_root"] ?? null) !== null) {
        cargs.push(
            "-data_root",
            (params["data_root"] ?? null)
        );
    }
    return cargs;
}


function afni_system_check_py_outputs(
    params: AfniSystemCheckPyParameters,
    execution: Execution,
): AfniSystemCheckPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AfniSystemCheckPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function afni_system_check_py_execute(
    params: AfniSystemCheckPyParameters,
    execution: Execution,
): AfniSystemCheckPyOutputs {
    /**
     * Perform various system checks for figuring out AFNI installation issues.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AfniSystemCheckPyOutputs`).
     */
    params = execution.params(params)
    const cargs = afni_system_check_py_cargs(params, execution)
    const ret = afni_system_check_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function afni_system_check_py(
    check_all: boolean = false,
    find_prog: string | null = null,
    exact: string | null = null,
    disp_num_cpu: boolean = false,
    disp_ver_matplotlib: boolean = false,
    dot_file_list: boolean = false,
    dot_file_show: boolean = false,
    dot_file_pack: string | null = null,
    casematch: string | null = null,
    data_root: string | null = null,
    runner: Runner | null = null,
): AfniSystemCheckPyOutputs {
    /**
     * Perform various system checks for figuring out AFNI installation issues.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param check_all Perform all system checks.
     * @param find_prog Search PATH for PROG.
     * @param exact Search for PROG without wildcards in -find_prog.
     * @param disp_num_cpu Display number of CPUs available.
     * @param disp_ver_matplotlib Display matplotlib version (else 'None').
     * @param dot_file_list List all found dot files (startup files).
     * @param dot_file_show Display contents of all found dot files.
     * @param dot_file_pack Create a NAME.tgz package containing dot files.
     * @param casematch Match case in -find_prog.
     * @param data_root Search for class data under DDIR.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AfniSystemCheckPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AFNI_SYSTEM_CHECK_PY_METADATA);
    const params = afni_system_check_py_params(check_all, find_prog, exact, disp_num_cpu, disp_ver_matplotlib, dot_file_list, dot_file_show, dot_file_pack, casematch, data_root)
    return afni_system_check_py_execute(params, execution);
}


export {
      AFNI_SYSTEM_CHECK_PY_METADATA,
      AfniSystemCheckPyOutputs,
      AfniSystemCheckPyParameters,
      afni_system_check_py,
      afni_system_check_py_params,
};
