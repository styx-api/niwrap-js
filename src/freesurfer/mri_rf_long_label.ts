// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_RF_LONG_LABEL_METADATA: Metadata = {
    id: "4678c16d359a7f31d408e0ec4cb26ba6e4c090b1.boutiques",
    name: "mri_rf_long_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRfLongLabelParameters {
    "@type"?: "freesurfer/mri_rf_long_label";
    "help_flag"?: string | null | undefined;
}
type MriRfLongLabelParametersTagged = Required<Pick<MriRfLongLabelParameters, '@type'>> & MriRfLongLabelParameters;


/**
 * Output object returned when calling `MriRfLongLabelParameters(...)`.
 *
 * @interface
 */
interface MriRfLongLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param help_flag Displays a message that the tool has been removed.
 *
 * @returns Parameter dictionary
 */
function mri_rf_long_label_params(
    help_flag: string | null = null,
): MriRfLongLabelParametersTagged {
    const params = {
        "@type": "freesurfer/mri_rf_long_label" as const,
    };
    if (help_flag !== null) {
        params["help_flag"] = help_flag;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_rf_long_label_cargs(
    params: MriRfLongLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_rf_long_label");
    if ((params["help_flag"] ?? null) !== null) {
        cargs.push((params["help_flag"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_rf_long_label_outputs(
    params: MriRfLongLabelParameters,
    execution: Execution,
): MriRfLongLabelOutputs {
    const ret: MriRfLongLabelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_rf_long_label
 *
 * The mri_rf_long_label tool has been removed from this version of FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRfLongLabelOutputs`).
 */
function mri_rf_long_label_execute(
    params: MriRfLongLabelParameters,
    runner: Runner | null = null,
): MriRfLongLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_RF_LONG_LABEL_METADATA);
    params = execution.params(params)
    const cargs = mri_rf_long_label_cargs(params, execution)
    const ret = mri_rf_long_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_rf_long_label
 *
 * The mri_rf_long_label tool has been removed from this version of FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param help_flag Displays a message that the tool has been removed.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRfLongLabelOutputs`).
 */
function mri_rf_long_label(
    help_flag: string | null = null,
    runner: Runner | null = null,
): MriRfLongLabelOutputs {
    const params = mri_rf_long_label_params(help_flag)
    return mri_rf_long_label_execute(params, runner);
}


export {
      MRI_RF_LONG_LABEL_METADATA,
      MriRfLongLabelOutputs,
      mri_rf_long_label,
      mri_rf_long_label_execute,
      mri_rf_long_label_params,
};
