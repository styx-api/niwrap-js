// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SET_SPACING_METADATA: Metadata = {
    id: "943a10a041bed9edc5b49fa9bf6fd81849eff416.boutiques",
    name: "SetSpacing",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface SetSpacingParameters {
    "@type"?: "ants/SetSpacing";
    "dimension": number;
    "input_file": InputPathType;
    "output_file": string;
    "spacing": Array<number>;
}
type SetSpacingParametersTagged = Required<Pick<SetSpacingParameters, '@type'>> & SetSpacingParameters;


/**
 * Output object returned when calling `SetSpacingParameters(...)`.
 *
 * @interface
 */
interface SetSpacingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output image with the specified spacing.
     */
    output_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dimension The dimensionality of the image (e.g., 2 or 3).
 * @param input_file The input image file in HDR format.
 * @param output_file The output image file in NII format.
 * @param spacing Spacing values for each dimension. Requires SpacingX, SpacingY, and optionally SpacingZ.
 *
 * @returns Parameter dictionary
 */
function set_spacing_params(
    dimension: number,
    input_file: InputPathType,
    output_file: string,
    spacing: Array<number>,
): SetSpacingParametersTagged {
    const params = {
        "@type": "ants/SetSpacing" as const,
        "dimension": dimension,
        "input_file": input_file,
        "output_file": output_file,
        "spacing": spacing,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function set_spacing_cargs(
    params: SetSpacingParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SetSpacing");
    cargs.push(String((params["dimension"] ?? null)));
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    cargs.push(...(params["spacing"] ?? null).map(String));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function set_spacing_outputs(
    params: SetSpacingParameters,
    execution: Execution,
): SetSpacingOutputs {
    const ret: SetSpacingOutputs = {
        root: execution.outputFile("."),
        output_image: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * SetSpacing
 *
 * A tool to set the spacing of an image in each dimension.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SetSpacingOutputs`).
 */
function set_spacing_execute(
    params: SetSpacingParameters,
    runner: Runner | null = null,
): SetSpacingOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SET_SPACING_METADATA);
    params = execution.params(params)
    const cargs = set_spacing_cargs(params, execution)
    const ret = set_spacing_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SetSpacing
 *
 * A tool to set the spacing of an image in each dimension.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param dimension The dimensionality of the image (e.g., 2 or 3).
 * @param input_file The input image file in HDR format.
 * @param output_file The output image file in NII format.
 * @param spacing Spacing values for each dimension. Requires SpacingX, SpacingY, and optionally SpacingZ.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SetSpacingOutputs`).
 */
function set_spacing(
    dimension: number,
    input_file: InputPathType,
    output_file: string,
    spacing: Array<number>,
    runner: Runner | null = null,
): SetSpacingOutputs {
    const params = set_spacing_params(dimension, input_file, output_file, spacing)
    return set_spacing_execute(params, runner);
}


export {
      SET_SPACING_METADATA,
      SetSpacingOutputs,
      set_spacing,
      set_spacing_execute,
      set_spacing_params,
};
