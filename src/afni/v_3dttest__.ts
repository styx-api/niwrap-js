// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DTTEST___METADATA: Metadata = {
    id: "9816ba0be883f397c48e16a5a699629ad3d438ae.boutiques",
    name: "3dttest++",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dttestParameters {
    "__STYXTYPE__": "3dttest++";
    "setA": Array<string>;
    "setB"?: Array<string> | null | undefined;
    "setA_long"?: Array<string> | null | undefined;
    "setB_long"?: Array<string> | null | undefined;
    "covariates"?: InputPathType | null | undefined;
    "labelA"?: string | null | undefined;
    "labelB"?: string | null | undefined;
    "setweightA"?: InputPathType | null | undefined;
    "setweightB"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "resid"?: string | null | undefined;
    "paired": boolean;
    "unpooled": boolean;
    "mask"?: InputPathType | null | undefined;
    "exblur"?: number | null | undefined;
    "randomsign": boolean;
    "permute": boolean;
    "ETAC": boolean;
    "ETAC_blur"?: Array<number> | null | undefined;
    "ETAC_opt"?: Array<string> | null | undefined;
    "seed"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dttest++": v_3dttest___cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dttest++": v_3dttest___outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dttest__(...)`.
 *
 * @interface
 */
interface V3dttestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output dataset
     */
    out_file: OutputPathType | null;
    /**
     * Output residuals dataset
     */
    residuals: OutputPathType | null;
}


function v_3dttest___params(
    set_a: Array<string>,
    set_b: Array<string> | null = null,
    set_a_long: Array<string> | null = null,
    set_b_long: Array<string> | null = null,
    covariates: InputPathType | null = null,
    label_a: string | null = null,
    label_b: string | null = null,
    setweight_a: InputPathType | null = null,
    setweight_b: InputPathType | null = null,
    prefix: string | null = null,
    resid: string | null = null,
    paired: boolean = false,
    unpooled: boolean = false,
    mask: InputPathType | null = null,
    exblur: number | null = null,
    randomsign: boolean = false,
    permute: boolean = false,
    etac: boolean = false,
    etac_blur: Array<number> | null = null,
    etac_opt: Array<string> | null = null,
    seed: number | null = null,
): V3dttestParameters {
    /**
     * Build parameters.
    
     * @param set_a Set A in short form, e.g., 'a+tlrc[3]' b+tlrc[3] ...'
     * @param set_b Set B in short form, e.g., 'x+tlrc[3]' y+tlrc[3] ...'
     * @param set_a_long Specify an overall name for the set of datasets (Long form). Example: -setA Green sub001 a+tlrc[3] sub002 b+tlrc[3] ...
     * @param set_b_long Specify an overall name for the set of datasets (Long form). Example: -setB Blue sub001 x+tlrc[3] sub002 y+tlrc[3] ...
     * @param covariates File containing covariates.
     * @param label_a Label for the set (for Set A). Limited to 12 characters.
     * @param label_b Label for the set (for Set B). Limited to 12 characters.
     * @param setweight_a File with voxel-wise weights for -setA datasets.
     * @param setweight_b File with voxel-wise weights for -setB datasets.
     * @param prefix Output the prefix name of the dataset result. For surface-based datasets, use -prefix p.niml.dset or -prefix p.gii.dset
     * @param resid Residuals will be output into a dataset with the given prefix.
     * @param paired Specify to use a paired-sample t-test to compare setA and setB. Both sets must have the same cardinality.
     * @param unpooled Specify separate variance estimates for setA and setB (not pooled together).
     * @param mask Set mask for dataset analysis.
     * @param exblur Add extra Gaussian blurring kernel FWHM (mm). Example: -exblur 6
     * @param randomsign Randomize signs of datasets. Used with output from -resid to generate null hypothesis statistics.
     * @param permute With -randomsign, adds inter-set permutation to randomization when both sets are used.
     * @param etac Apply the Equitable Thresholding And Clustering (ETAC) method for thresholding results.
     * @param etac_blur List of multiple levels of spatial blurring for ETAC. Example: -ETAC_blur 4 6
     * @param etac_opt Specify options for ETAC. Example: -ETAC_opt NN=2:sid=2:hpow=0,2:pthr=0.01,0.005,0.002,0.01:name=Fred
     * @param seed Random number seed for -randomsign and -permute/ETAC.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dttest++" as const,
        "setA": set_a,
        "paired": paired,
        "unpooled": unpooled,
        "randomsign": randomsign,
        "permute": permute,
        "ETAC": etac,
    };
    if (set_b !== null) {
        params["setB"] = set_b;
    }
    if (set_a_long !== null) {
        params["setA_long"] = set_a_long;
    }
    if (set_b_long !== null) {
        params["setB_long"] = set_b_long;
    }
    if (covariates !== null) {
        params["covariates"] = covariates;
    }
    if (label_a !== null) {
        params["labelA"] = label_a;
    }
    if (label_b !== null) {
        params["labelB"] = label_b;
    }
    if (setweight_a !== null) {
        params["setweightA"] = setweight_a;
    }
    if (setweight_b !== null) {
        params["setweightB"] = setweight_b;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (resid !== null) {
        params["resid"] = resid;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (exblur !== null) {
        params["exblur"] = exblur;
    }
    if (etac_blur !== null) {
        params["ETAC_blur"] = etac_blur;
    }
    if (etac_opt !== null) {
        params["ETAC_opt"] = etac_opt;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    return params;
}


function v_3dttest___cargs(
    params: V3dttestParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dttest++");
    cargs.push(
        "-setA",
        ...(params["setA"] ?? null)
    );
    if ((params["setB"] ?? null) !== null) {
        cargs.push(
            "-setB",
            ...(params["setB"] ?? null)
        );
    }
    if ((params["setA_long"] ?? null) !== null) {
        cargs.push(
            "-setA",
            ...(params["setA_long"] ?? null)
        );
    }
    if ((params["setB_long"] ?? null) !== null) {
        cargs.push(
            "-setB",
            ...(params["setB_long"] ?? null)
        );
    }
    if ((params["covariates"] ?? null) !== null) {
        cargs.push(
            "-covariates",
            execution.inputFile((params["covariates"] ?? null))
        );
    }
    if ((params["labelA"] ?? null) !== null) {
        cargs.push(
            "-labelA",
            (params["labelA"] ?? null)
        );
    }
    if ((params["labelB"] ?? null) !== null) {
        cargs.push(
            "-labelB",
            (params["labelB"] ?? null)
        );
    }
    if ((params["setweightA"] ?? null) !== null) {
        cargs.push(
            "-setweightA",
            execution.inputFile((params["setweightA"] ?? null))
        );
    }
    if ((params["setweightB"] ?? null) !== null) {
        cargs.push(
            "-setweightB",
            execution.inputFile((params["setweightB"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["resid"] ?? null) !== null) {
        cargs.push(
            "-resid",
            (params["resid"] ?? null)
        );
    }
    if ((params["paired"] ?? null)) {
        cargs.push("-paired");
    }
    if ((params["unpooled"] ?? null)) {
        cargs.push("-unpooled");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["exblur"] ?? null) !== null) {
        cargs.push(
            "-exblur",
            String((params["exblur"] ?? null))
        );
    }
    if ((params["randomsign"] ?? null)) {
        cargs.push("-randomsign");
    }
    if ((params["permute"] ?? null)) {
        cargs.push("-permute");
    }
    if ((params["ETAC"] ?? null)) {
        cargs.push("-ETAC");
    }
    if ((params["ETAC_blur"] ?? null) !== null) {
        cargs.push(
            "-ETAC_blur",
            ...(params["ETAC_blur"] ?? null).map(String)
        );
    }
    if ((params["ETAC_opt"] ?? null) !== null) {
        cargs.push(
            "-ETAC_opt",
            ...(params["ETAC_opt"] ?? null)
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["seed"] ?? null))
        );
    }
    return cargs;
}


function v_3dttest___outputs(
    params: V3dttestParameters,
    execution: Execution,
): V3dttestOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dttestOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
        residuals: ((params["resid"] ?? null) !== null) ? execution.outputFile([(params["resid"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function v_3dttest___execute(
    params: V3dttestParameters,
    execution: Execution,
): V3dttestOutputs {
    /**
     * Gosset (Student) t-test of sets of 3D datasets in AFNI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dttestOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dttest___cargs(params, execution)
    const ret = v_3dttest___outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3dttest__(
    set_a: Array<string>,
    set_b: Array<string> | null = null,
    set_a_long: Array<string> | null = null,
    set_b_long: Array<string> | null = null,
    covariates: InputPathType | null = null,
    label_a: string | null = null,
    label_b: string | null = null,
    setweight_a: InputPathType | null = null,
    setweight_b: InputPathType | null = null,
    prefix: string | null = null,
    resid: string | null = null,
    paired: boolean = false,
    unpooled: boolean = false,
    mask: InputPathType | null = null,
    exblur: number | null = null,
    randomsign: boolean = false,
    permute: boolean = false,
    etac: boolean = false,
    etac_blur: Array<number> | null = null,
    etac_opt: Array<string> | null = null,
    seed: number | null = null,
    runner: Runner | null = null,
): V3dttestOutputs {
    /**
     * Gosset (Student) t-test of sets of 3D datasets in AFNI.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param set_a Set A in short form, e.g., 'a+tlrc[3]' b+tlrc[3] ...'
     * @param set_b Set B in short form, e.g., 'x+tlrc[3]' y+tlrc[3] ...'
     * @param set_a_long Specify an overall name for the set of datasets (Long form). Example: -setA Green sub001 a+tlrc[3] sub002 b+tlrc[3] ...
     * @param set_b_long Specify an overall name for the set of datasets (Long form). Example: -setB Blue sub001 x+tlrc[3] sub002 y+tlrc[3] ...
     * @param covariates File containing covariates.
     * @param label_a Label for the set (for Set A). Limited to 12 characters.
     * @param label_b Label for the set (for Set B). Limited to 12 characters.
     * @param setweight_a File with voxel-wise weights for -setA datasets.
     * @param setweight_b File with voxel-wise weights for -setB datasets.
     * @param prefix Output the prefix name of the dataset result. For surface-based datasets, use -prefix p.niml.dset or -prefix p.gii.dset
     * @param resid Residuals will be output into a dataset with the given prefix.
     * @param paired Specify to use a paired-sample t-test to compare setA and setB. Both sets must have the same cardinality.
     * @param unpooled Specify separate variance estimates for setA and setB (not pooled together).
     * @param mask Set mask for dataset analysis.
     * @param exblur Add extra Gaussian blurring kernel FWHM (mm). Example: -exblur 6
     * @param randomsign Randomize signs of datasets. Used with output from -resid to generate null hypothesis statistics.
     * @param permute With -randomsign, adds inter-set permutation to randomization when both sets are used.
     * @param etac Apply the Equitable Thresholding And Clustering (ETAC) method for thresholding results.
     * @param etac_blur List of multiple levels of spatial blurring for ETAC. Example: -ETAC_blur 4 6
     * @param etac_opt Specify options for ETAC. Example: -ETAC_opt NN=2:sid=2:hpow=0,2:pthr=0.01,0.005,0.002,0.01:name=Fred
     * @param seed Random number seed for -randomsign and -permute/ETAC.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dttestOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DTTEST___METADATA);
    const params = v_3dttest___params(set_a, set_b, set_a_long, set_b_long, covariates, label_a, label_b, setweight_a, setweight_b, prefix, resid, paired, unpooled, mask, exblur, randomsign, permute, etac, etac_blur, etac_opt, seed)
    return v_3dttest___execute(params, execution);
}


export {
      V3dttestOutputs,
      V3dttestParameters,
      V_3DTTEST___METADATA,
      v_3dttest__,
      v_3dttest___params,
};
