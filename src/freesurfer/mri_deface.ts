// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_DEFACE_METADATA: Metadata = {
    id: "3c5f529687f2b3d58e2f151ffcd47a04e323d8ea.boutiques",
    name: "mri_deface",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriDefaceParameters {
    "__STYXTYPE__": "mri_deface";
    "input_volume": InputPathType;
    "brain_template": InputPathType;
    "face_template": InputPathType;
    "output_volume": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_deface": mri_deface_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_deface": mri_deface_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_deface(...)`.
 *
 * @interface
 */
interface MriDefaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting defaced MRI volume.
     */
    defaced_output_file: OutputPathType;
}


function mri_deface_params(
    input_volume: InputPathType,
    brain_template: InputPathType,
    face_template: InputPathType,
    output_volume: string,
): MriDefaceParameters {
    /**
     * Build parameters.
    
     * @param input_volume The input volume to be defaced (e.g. anatomical MRI image).
     * @param brain_template Template volume of the brain to be used for defacing.
     * @param face_template Template volume of the face to be used for defacing.
     * @param output_volume The output volume path for the defaced image.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_deface" as const,
        "input_volume": input_volume,
        "brain_template": brain_template,
        "face_template": face_template,
        "output_volume": output_volume,
    };
    return params;
}


function mri_deface_cargs(
    params: MriDefaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_deface");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["brain_template"] ?? null)));
    cargs.push(execution.inputFile((params["face_template"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


function mri_deface_outputs(
    params: MriDefaceParameters,
    execution: Execution,
): MriDefaceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriDefaceOutputs = {
        root: execution.outputFile("."),
        defaced_output_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


function mri_deface_execute(
    params: MriDefaceParameters,
    execution: Execution,
): MriDefaceOutputs {
    /**
     * MRI Deface utility for removing facial features from MRI images.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriDefaceOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_deface_cargs(params, execution)
    const ret = mri_deface_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_deface(
    input_volume: InputPathType,
    brain_template: InputPathType,
    face_template: InputPathType,
    output_volume: string,
    runner: Runner | null = null,
): MriDefaceOutputs {
    /**
     * MRI Deface utility for removing facial features from MRI images.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_volume The input volume to be defaced (e.g. anatomical MRI image).
     * @param brain_template Template volume of the brain to be used for defacing.
     * @param face_template Template volume of the face to be used for defacing.
     * @param output_volume The output volume path for the defaced image.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriDefaceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_DEFACE_METADATA);
    const params = mri_deface_params(input_volume, brain_template, face_template, output_volume)
    return mri_deface_execute(params, execution);
}


export {
      MRI_DEFACE_METADATA,
      MriDefaceOutputs,
      MriDefaceParameters,
      mri_deface,
      mri_deface_params,
};
