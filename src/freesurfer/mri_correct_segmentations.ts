// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CORRECT_SEGMENTATIONS_METADATA: Metadata = {
    id: "bc3ea4572fe4ebef8155dbeace0ea841cbc2a21c.boutiques",
    name: "mri_correct_segmentations",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCorrectSegmentationsParameters {
    "@type": "freesurfer.mri_correct_segmentations";
    "input_file_1": InputPathType;
    "input_file_2": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_correct_segmentations": mri_correct_segmentations_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_correct_segmentations(...)`.
 *
 * @interface
 */
interface MriCorrectSegmentationsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file_1 First input file for correction (e.g. segmentation file).
 * @param input_file_2 Second input file for correction (e.g. reference file).
 *
 * @returns Parameter dictionary
 */
function mri_correct_segmentations_params(
    input_file_1: InputPathType,
    input_file_2: InputPathType,
): MriCorrectSegmentationsParameters {
    const params = {
        "@type": "freesurfer.mri_correct_segmentations" as const,
        "input_file_1": input_file_1,
        "input_file_2": input_file_2,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_correct_segmentations_cargs(
    params: MriCorrectSegmentationsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_correct_segmentations");
    cargs.push(execution.inputFile((params["input_file_1"] ?? null)));
    cargs.push(execution.inputFile((params["input_file_2"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_correct_segmentations_outputs(
    params: MriCorrectSegmentationsParameters,
    execution: Execution,
): MriCorrectSegmentationsOutputs {
    const ret: MriCorrectSegmentationsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Tool for correcting automated infant segmentations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriCorrectSegmentationsOutputs`).
 */
function mri_correct_segmentations_execute(
    params: MriCorrectSegmentationsParameters,
    execution: Execution,
): MriCorrectSegmentationsOutputs {
    params = execution.params(params)
    const cargs = mri_correct_segmentations_cargs(params, execution)
    const ret = mri_correct_segmentations_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for correcting automated infant segmentations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file_1 First input file for correction (e.g. segmentation file).
 * @param input_file_2 Second input file for correction (e.g. reference file).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCorrectSegmentationsOutputs`).
 */
function mri_correct_segmentations(
    input_file_1: InputPathType,
    input_file_2: InputPathType,
    runner: Runner | null = null,
): MriCorrectSegmentationsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CORRECT_SEGMENTATIONS_METADATA);
    const params = mri_correct_segmentations_params(input_file_1, input_file_2)
    return mri_correct_segmentations_execute(params, execution);
}


export {
      MRI_CORRECT_SEGMENTATIONS_METADATA,
      MriCorrectSegmentationsOutputs,
      MriCorrectSegmentationsParameters,
      mri_correct_segmentations,
      mri_correct_segmentations_cargs,
      mri_correct_segmentations_execute,
      mri_correct_segmentations_outputs,
      mri_correct_segmentations_params,
};
