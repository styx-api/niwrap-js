// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLSTATS_METADATA: Metadata = {
    id: "cf1c3027e4b6ab30c239389fbe74fbca934f563c.boutiques",
    name: "fslstats",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslstatsParameters {
    "__STYXTYPE__": "fslstats";
    "input_file": InputPathType;
    "index_mask"?: InputPathType | null | undefined;
    "lower_threshold"?: number | null | undefined;
    "upper_threshold"?: number | null | undefined;
    "robust_intensity_flag": boolean;
    "minmax_intensity_flag": boolean;
    "voxels_volume_flag": boolean;
    "nonzero_voxels_volume_flag": boolean;
    "mean_flag": boolean;
    "nonzero_mean_flag": boolean;
    "std_dev_flag": boolean;
    "nonzero_std_dev_flag": boolean;
    "smallest_roi_flag": boolean;
    "max_coords_flag": boolean;
    "min_coords_flag": boolean;
    "cog_mm_flag": boolean;
    "cog_voxel_flag": boolean;
    "percentile"?: number | null | undefined;
    "nonzero_percentile"?: number | null | undefined;
    "absolute_values_flag": boolean;
    "nan_as_zero_flag": boolean;
    "mask_image"?: InputPathType | null | undefined;
    "difference_image"?: InputPathType | null | undefined;
    "hist_bins"?: number | null | undefined;
    "hist_bins_min_max"?: string | null | undefined;
    "timeseries_flag": boolean;
    "mean_entropy_flag": boolean;
    "nonzero_mean_entropy_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslstats": fslstats_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslstats": fslstats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslstats(...)`.
 *
 * @interface
 */
interface FslstatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Statistics output file
     */
    output_stats: OutputPathType;
}


function fslstats_params(
    input_file: InputPathType,
    index_mask: InputPathType | null = null,
    lower_threshold: number | null = null,
    upper_threshold: number | null = null,
    robust_intensity_flag: boolean = false,
    minmax_intensity_flag: boolean = false,
    voxels_volume_flag: boolean = false,
    nonzero_voxels_volume_flag: boolean = false,
    mean_flag: boolean = false,
    nonzero_mean_flag: boolean = false,
    std_dev_flag: boolean = false,
    nonzero_std_dev_flag: boolean = false,
    smallest_roi_flag: boolean = false,
    max_coords_flag: boolean = false,
    min_coords_flag: boolean = false,
    cog_mm_flag: boolean = false,
    cog_voxel_flag: boolean = false,
    percentile: number | null = null,
    nonzero_percentile: number | null = null,
    absolute_values_flag: boolean = false,
    nan_as_zero_flag: boolean = false,
    mask_image: InputPathType | null = null,
    difference_image: InputPathType | null = null,
    hist_bins: number | null = null,
    hist_bins_min_max: string | null = null,
    timeseries_flag: boolean = false,
    mean_entropy_flag: boolean = false,
    nonzero_mean_entropy_flag: boolean = false,
): FslstatsParameters {
    /**
     * Build parameters.
    
     * @param input_file Input image file (e.g., image.nii.gz)
     * @param index_mask Generate separate n submasks from indexMask, for indexvalues 1..n where n is the maximum index value in indexMask, and generate statistics for each submask
     * @param lower_threshold Set lower threshold
     * @param upper_threshold Set upper threshold
     * @param robust_intensity_flag Output robust min and max intensity
     * @param minmax_intensity_flag Output min and max intensity
     * @param voxels_volume_flag Output voxels and volume
     * @param nonzero_voxels_volume_flag Output voxels and volume (for nonzero voxels)
     * @param mean_flag Output mean
     * @param nonzero_mean_flag Output mean (for nonzero voxels)
     * @param std_dev_flag Output standard deviation
     * @param nonzero_std_dev_flag Output standard deviation (for nonzero voxels)
     * @param smallest_roi_flag Output smallest ROI containing nonzero voxels
     * @param max_coords_flag Output coordinates of maximum voxel
     * @param min_coords_flag Output coordinates of minimum voxel
     * @param cog_mm_flag Output center-of-gravity (cog) in mm coordinates
     * @param cog_voxel_flag Output center-of-gravity (cog) in voxel coordinates
     * @param percentile Output nth percentile
     * @param nonzero_percentile Output nth percentile (for nonzero voxels)
     * @param absolute_values_flag Use absolute values of all image intensities
     * @param nan_as_zero_flag Treat NaN or Inf as zero for subsequent stats
     * @param mask_image Use the specified image for masking - overrides lower and upper thresholds
     * @param difference_image Take the difference between the base image and the image specified here
     * @param hist_bins Output a histogram for the thresholded/masked voxels only with specified number of bins
     * @param hist_bins_min_max Output a histogram for the thresholded/masked voxels only with specified number of bins and histogram limits of min and max
     * @param timeseries_flag Separate output line for each 3D volume of a 4D timeseries
     * @param mean_entropy_flag Output mean entropy; mean(-i*ln(i))
     * @param nonzero_mean_entropy_flag Output mean entropy (of nonzero voxels)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslstats" as const,
        "input_file": input_file,
        "robust_intensity_flag": robust_intensity_flag,
        "minmax_intensity_flag": minmax_intensity_flag,
        "voxels_volume_flag": voxels_volume_flag,
        "nonzero_voxels_volume_flag": nonzero_voxels_volume_flag,
        "mean_flag": mean_flag,
        "nonzero_mean_flag": nonzero_mean_flag,
        "std_dev_flag": std_dev_flag,
        "nonzero_std_dev_flag": nonzero_std_dev_flag,
        "smallest_roi_flag": smallest_roi_flag,
        "max_coords_flag": max_coords_flag,
        "min_coords_flag": min_coords_flag,
        "cog_mm_flag": cog_mm_flag,
        "cog_voxel_flag": cog_voxel_flag,
        "absolute_values_flag": absolute_values_flag,
        "nan_as_zero_flag": nan_as_zero_flag,
        "timeseries_flag": timeseries_flag,
        "mean_entropy_flag": mean_entropy_flag,
        "nonzero_mean_entropy_flag": nonzero_mean_entropy_flag,
    };
    if (index_mask !== null) {
        params["index_mask"] = index_mask;
    }
    if (lower_threshold !== null) {
        params["lower_threshold"] = lower_threshold;
    }
    if (upper_threshold !== null) {
        params["upper_threshold"] = upper_threshold;
    }
    if (percentile !== null) {
        params["percentile"] = percentile;
    }
    if (nonzero_percentile !== null) {
        params["nonzero_percentile"] = nonzero_percentile;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    if (difference_image !== null) {
        params["difference_image"] = difference_image;
    }
    if (hist_bins !== null) {
        params["hist_bins"] = hist_bins;
    }
    if (hist_bins_min_max !== null) {
        params["hist_bins_min_max"] = hist_bins_min_max;
    }
    return params;
}


function fslstats_cargs(
    params: FslstatsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslstats");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["index_mask"] ?? null) !== null) {
        cargs.push(
            "-k",
            execution.inputFile((params["index_mask"] ?? null))
        );
    }
    if ((params["lower_threshold"] ?? null) !== null) {
        cargs.push(
            "-l",
            String((params["lower_threshold"] ?? null))
        );
    }
    if ((params["upper_threshold"] ?? null) !== null) {
        cargs.push(
            "-u",
            String((params["upper_threshold"] ?? null))
        );
    }
    if ((params["robust_intensity_flag"] ?? null)) {
        cargs.push("-r");
    }
    if ((params["minmax_intensity_flag"] ?? null)) {
        cargs.push("-R");
    }
    if ((params["voxels_volume_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["nonzero_voxels_volume_flag"] ?? null)) {
        cargs.push("-V");
    }
    if ((params["mean_flag"] ?? null)) {
        cargs.push("-m");
    }
    if ((params["nonzero_mean_flag"] ?? null)) {
        cargs.push("-M");
    }
    if ((params["std_dev_flag"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["nonzero_std_dev_flag"] ?? null)) {
        cargs.push("-S");
    }
    if ((params["smallest_roi_flag"] ?? null)) {
        cargs.push("-w");
    }
    if ((params["max_coords_flag"] ?? null)) {
        cargs.push("-x");
    }
    if ((params["min_coords_flag"] ?? null)) {
        cargs.push("-X");
    }
    if ((params["cog_mm_flag"] ?? null)) {
        cargs.push("-c");
    }
    if ((params["cog_voxel_flag"] ?? null)) {
        cargs.push("-C");
    }
    if ((params["percentile"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["percentile"] ?? null))
        );
    }
    if ((params["nonzero_percentile"] ?? null) !== null) {
        cargs.push(
            "-P",
            String((params["nonzero_percentile"] ?? null))
        );
    }
    if ((params["absolute_values_flag"] ?? null)) {
        cargs.push("-a");
    }
    if ((params["nan_as_zero_flag"] ?? null)) {
        cargs.push("-n");
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(
            "-k",
            execution.inputFile((params["mask_image"] ?? null))
        );
    }
    if ((params["difference_image"] ?? null) !== null) {
        cargs.push(
            "-d",
            execution.inputFile((params["difference_image"] ?? null))
        );
    }
    if ((params["hist_bins"] ?? null) !== null) {
        cargs.push(
            "-h",
            String((params["hist_bins"] ?? null))
        );
    }
    if ((params["hist_bins_min_max"] ?? null) !== null) {
        cargs.push(
            "-H",
            (params["hist_bins_min_max"] ?? null)
        );
    }
    if ((params["timeseries_flag"] ?? null)) {
        cargs.push("-t");
    }
    if ((params["mean_entropy_flag"] ?? null)) {
        cargs.push("-e");
    }
    if ((params["nonzero_mean_entropy_flag"] ?? null)) {
        cargs.push("-E");
    }
    return cargs;
}


function fslstats_outputs(
    params: FslstatsParameters,
    execution: Execution,
): FslstatsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslstatsOutputs = {
        root: execution.outputFile("."),
        output_stats: execution.outputFile([path.basename((params["input_file"] ?? null)), "_stats.txt"].join('')),
    };
    return ret;
}


function fslstats_execute(
    params: FslstatsParameters,
    execution: Execution,
): FslstatsOutputs {
    /**
     * FSL tool for calculating statistics on image data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslstatsOutputs`).
     */
    params = execution.params(params)
    const cargs = fslstats_cargs(params, execution)
    const ret = fslstats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslstats(
    input_file: InputPathType,
    index_mask: InputPathType | null = null,
    lower_threshold: number | null = null,
    upper_threshold: number | null = null,
    robust_intensity_flag: boolean = false,
    minmax_intensity_flag: boolean = false,
    voxels_volume_flag: boolean = false,
    nonzero_voxels_volume_flag: boolean = false,
    mean_flag: boolean = false,
    nonzero_mean_flag: boolean = false,
    std_dev_flag: boolean = false,
    nonzero_std_dev_flag: boolean = false,
    smallest_roi_flag: boolean = false,
    max_coords_flag: boolean = false,
    min_coords_flag: boolean = false,
    cog_mm_flag: boolean = false,
    cog_voxel_flag: boolean = false,
    percentile: number | null = null,
    nonzero_percentile: number | null = null,
    absolute_values_flag: boolean = false,
    nan_as_zero_flag: boolean = false,
    mask_image: InputPathType | null = null,
    difference_image: InputPathType | null = null,
    hist_bins: number | null = null,
    hist_bins_min_max: string | null = null,
    timeseries_flag: boolean = false,
    mean_entropy_flag: boolean = false,
    nonzero_mean_entropy_flag: boolean = false,
    runner: Runner | null = null,
): FslstatsOutputs {
    /**
     * FSL tool for calculating statistics on image data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file Input image file (e.g., image.nii.gz)
     * @param index_mask Generate separate n submasks from indexMask, for indexvalues 1..n where n is the maximum index value in indexMask, and generate statistics for each submask
     * @param lower_threshold Set lower threshold
     * @param upper_threshold Set upper threshold
     * @param robust_intensity_flag Output robust min and max intensity
     * @param minmax_intensity_flag Output min and max intensity
     * @param voxels_volume_flag Output voxels and volume
     * @param nonzero_voxels_volume_flag Output voxels and volume (for nonzero voxels)
     * @param mean_flag Output mean
     * @param nonzero_mean_flag Output mean (for nonzero voxels)
     * @param std_dev_flag Output standard deviation
     * @param nonzero_std_dev_flag Output standard deviation (for nonzero voxels)
     * @param smallest_roi_flag Output smallest ROI containing nonzero voxels
     * @param max_coords_flag Output coordinates of maximum voxel
     * @param min_coords_flag Output coordinates of minimum voxel
     * @param cog_mm_flag Output center-of-gravity (cog) in mm coordinates
     * @param cog_voxel_flag Output center-of-gravity (cog) in voxel coordinates
     * @param percentile Output nth percentile
     * @param nonzero_percentile Output nth percentile (for nonzero voxels)
     * @param absolute_values_flag Use absolute values of all image intensities
     * @param nan_as_zero_flag Treat NaN or Inf as zero for subsequent stats
     * @param mask_image Use the specified image for masking - overrides lower and upper thresholds
     * @param difference_image Take the difference between the base image and the image specified here
     * @param hist_bins Output a histogram for the thresholded/masked voxels only with specified number of bins
     * @param hist_bins_min_max Output a histogram for the thresholded/masked voxels only with specified number of bins and histogram limits of min and max
     * @param timeseries_flag Separate output line for each 3D volume of a 4D timeseries
     * @param mean_entropy_flag Output mean entropy; mean(-i*ln(i))
     * @param nonzero_mean_entropy_flag Output mean entropy (of nonzero voxels)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslstatsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLSTATS_METADATA);
    const params = fslstats_params(input_file, index_mask, lower_threshold, upper_threshold, robust_intensity_flag, minmax_intensity_flag, voxels_volume_flag, nonzero_voxels_volume_flag, mean_flag, nonzero_mean_flag, std_dev_flag, nonzero_std_dev_flag, smallest_roi_flag, max_coords_flag, min_coords_flag, cog_mm_flag, cog_voxel_flag, percentile, nonzero_percentile, absolute_values_flag, nan_as_zero_flag, mask_image, difference_image, hist_bins, hist_bins_min_max, timeseries_flag, mean_entropy_flag, nonzero_mean_entropy_flag)
    return fslstats_execute(params, execution);
}


export {
      FSLSTATS_METADATA,
      FslstatsOutputs,
      FslstatsParameters,
      fslstats,
      fslstats_params,
};
