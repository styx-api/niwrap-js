// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CONCATENATE_GCAM_METADATA: Metadata = {
    id: "4d270f68fa44e05655a7fabaf0aa72b3dba99bba.boutiques",
    name: "mri_concatenate_gcam",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriConcatenateGcamParameters {
    "@type"?: "freesurfer/mri_concatenate_gcam";
    "inputs": Array<InputPathType>;
    "output": string;
    "source_image"?: InputPathType | null | undefined;
    "target_image"?: InputPathType | null | undefined;
    "reduce": boolean;
    "invert": boolean;
    "downsample": boolean;
}
type MriConcatenateGcamParametersTagged = Required<Pick<MriConcatenateGcamParameters, '@type'>> & MriConcatenateGcamParameters;


/**
 * Output object returned when calling `MriConcatenateGcamParameters(...)`.
 *
 * @interface
 */
interface MriConcatenateGcamOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Composite LTA or M3Z transform, depending on input.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param inputs Combination of input LTAs and M3Zs.
 * @param output Concatenated output transform, saved as an LTA or M3Z depending on the input transforms.
 * @param source_image Change source image geometry of output M3Z, useful for GCAM inversion if the path of the original source volume changed.
 * @param target_image Change destination image geometry of output M3Z.
 * @param reduce Reduce output LTA to single LT.
 * @param invert Invert the output transform.
 * @param downsample Downsample output M3Z to spacing of 2; by default, the output spacing is that of the rightmost input M3Z.
 *
 * @returns Parameter dictionary
 */
function mri_concatenate_gcam_params(
    inputs: Array<InputPathType>,
    output: string,
    source_image: InputPathType | null = null,
    target_image: InputPathType | null = null,
    reduce: boolean = false,
    invert: boolean = false,
    downsample: boolean = false,
): MriConcatenateGcamParametersTagged {
    const params = {
        "@type": "freesurfer/mri_concatenate_gcam" as const,
        "inputs": inputs,
        "output": output,
        "reduce": reduce,
        "invert": invert,
        "downsample": downsample,
    };
    if (source_image !== null) {
        params["source_image"] = source_image;
    }
    if (target_image !== null) {
        params["target_image"] = target_image;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_concatenate_gcam_cargs(
    params: MriConcatenateGcamParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_concatenate_gcam");
    cargs.push(...(params["inputs"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["output"] ?? null));
    if ((params["source_image"] ?? null) !== null) {
        cargs.push(
            "-s",
            execution.inputFile((params["source_image"] ?? null))
        );
    }
    if ((params["target_image"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["target_image"] ?? null))
        );
    }
    if ((params["reduce"] ?? false)) {
        cargs.push("-r");
    }
    if ((params["invert"] ?? false)) {
        cargs.push("-i");
    }
    if ((params["downsample"] ?? false)) {
        cargs.push("-d");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_concatenate_gcam_outputs(
    params: MriConcatenateGcamParameters,
    execution: Execution,
): MriConcatenateGcamOutputs {
    const ret: MriConcatenateGcamOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_concatenate_gcam
 *
 * Concatenate a combination of input LTAs (linear transform array) and GCAMs (Gaussian classifier atlas, M3Z).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriConcatenateGcamOutputs`).
 */
function mri_concatenate_gcam_execute(
    params: MriConcatenateGcamParameters,
    runner: Runner | null = null,
): MriConcatenateGcamOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CONCATENATE_GCAM_METADATA);
    params = execution.params(params)
    const cargs = mri_concatenate_gcam_cargs(params, execution)
    const ret = mri_concatenate_gcam_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_concatenate_gcam
 *
 * Concatenate a combination of input LTAs (linear transform array) and GCAMs (Gaussian classifier atlas, M3Z).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param inputs Combination of input LTAs and M3Zs.
 * @param output Concatenated output transform, saved as an LTA or M3Z depending on the input transforms.
 * @param source_image Change source image geometry of output M3Z, useful for GCAM inversion if the path of the original source volume changed.
 * @param target_image Change destination image geometry of output M3Z.
 * @param reduce Reduce output LTA to single LT.
 * @param invert Invert the output transform.
 * @param downsample Downsample output M3Z to spacing of 2; by default, the output spacing is that of the rightmost input M3Z.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriConcatenateGcamOutputs`).
 */
function mri_concatenate_gcam(
    inputs: Array<InputPathType>,
    output: string,
    source_image: InputPathType | null = null,
    target_image: InputPathType | null = null,
    reduce: boolean = false,
    invert: boolean = false,
    downsample: boolean = false,
    runner: Runner | null = null,
): MriConcatenateGcamOutputs {
    const params = mri_concatenate_gcam_params(inputs, output, source_image, target_image, reduce, invert, downsample)
    return mri_concatenate_gcam_execute(params, runner);
}


export {
      MRI_CONCATENATE_GCAM_METADATA,
      MriConcatenateGcamOutputs,
      mri_concatenate_gcam,
      mri_concatenate_gcam_execute,
      mri_concatenate_gcam_params,
};
