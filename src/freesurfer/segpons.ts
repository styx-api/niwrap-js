// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEGPONS_METADATA: Metadata = {
    id: "0748589a85ef4978fe8a7a00b012391ca7336bae.boutiques",
    name: "segpons",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SegponsParameters {
    "@type"?: "freesurfer/segpons";
    "subject": string;
    "aseg": boolean;
    "apas": boolean;
    "seg"?: InputPathType | null | undefined;
    "no_refine": boolean;
    "pons152_mask"?: InputPathType | null | undefined;
}
type SegponsParametersTagged = Required<Pick<SegponsParameters, '@type'>> & SegponsParameters;


/**
 * Output object returned when calling `SegponsParameters(...)`.
 *
 * @interface
 */
interface SegponsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output pons segmentation file.
     */
    pons_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier.
 * @param aseg Use and refine aseg (default, output will be aseg+pons.mgz).
 * @param apas Use aparc+aseg.mgz (output will be apas+pons.mgz).
 * @param seg Specify your own segmentation file.
 * @param no_refine Do not refine when using aseg.
 * @param pons152_mask Mask of pons in MNI152 space.
 *
 * @returns Parameter dictionary
 */
function segpons_params(
    subject: string,
    aseg: boolean = false,
    apas: boolean = false,
    seg: InputPathType | null = null,
    no_refine: boolean = false,
    pons152_mask: InputPathType | null = null,
): SegponsParametersTagged {
    const params = {
        "@type": "freesurfer/segpons" as const,
        "subject": subject,
        "aseg": aseg,
        "apas": apas,
        "no_refine": no_refine,
    };
    if (seg !== null) {
        params["seg"] = seg;
    }
    if (pons152_mask !== null) {
        params["pons152_mask"] = pons152_mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function segpons_cargs(
    params: SegponsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("segpons");
    cargs.push(
        "-s",
        (params["subject"] ?? null)
    );
    if ((params["aseg"] ?? false)) {
        cargs.push("--aseg");
    }
    if ((params["apas"] ?? false)) {
        cargs.push("--apas");
    }
    if ((params["seg"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["seg"] ?? null))
        );
    }
    if ((params["no_refine"] ?? false)) {
        cargs.push("--no-refine");
    }
    if ((params["pons152_mask"] ?? null) !== null) {
        cargs.push(
            "--pons152",
            execution.inputFile((params["pons152_mask"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function segpons_outputs(
    params: SegponsParameters,
    execution: Execution,
): SegponsOutputs {
    const ret: SegponsOutputs = {
        root: execution.outputFile("."),
        pons_output: execution.outputFile([(params["subject"] ?? null), "+pons.mgz"].join('')),
    };
    return ret;
}


/**
 * segpons
 *
 * Approximate segmentation of pons using MNI152 space registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegponsOutputs`).
 */
function segpons_execute(
    params: SegponsParameters,
    runner: Runner | null = null,
): SegponsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEGPONS_METADATA);
    params = execution.params(params)
    const cargs = segpons_cargs(params, execution)
    const ret = segpons_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * segpons
 *
 * Approximate segmentation of pons using MNI152 space registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier.
 * @param aseg Use and refine aseg (default, output will be aseg+pons.mgz).
 * @param apas Use aparc+aseg.mgz (output will be apas+pons.mgz).
 * @param seg Specify your own segmentation file.
 * @param no_refine Do not refine when using aseg.
 * @param pons152_mask Mask of pons in MNI152 space.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegponsOutputs`).
 */
function segpons(
    subject: string,
    aseg: boolean = false,
    apas: boolean = false,
    seg: InputPathType | null = null,
    no_refine: boolean = false,
    pons152_mask: InputPathType | null = null,
    runner: Runner | null = null,
): SegponsOutputs {
    const params = segpons_params(subject, aseg, apas, seg, no_refine, pons152_mask)
    return segpons_execute(params, runner);
}


export {
      SEGPONS_METADATA,
      SegponsOutputs,
      segpons,
      segpons_execute,
      segpons_params,
};
