// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BBMASK_METADATA: Metadata = {
    id: "3655e677c7fb826f63ccb1bcc455303aa52c7b56.boutiques",
    name: "bbmask",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BbmaskParameters {
    "@type": "freesurfer.bbmask";
    "mask": Array<InputPathType>;
    "src_volumes"?: Array<InputPathType> | null | undefined;
    "npad"?: number | null | undefined;
    "registration"?: Array<InputPathType> | null | undefined;
    "regheader"?: InputPathType | null | undefined;
    "sub2src"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.bbmask": bbmask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.bbmask": bbmask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `bbmask(...)`.
 *
 * @interface
 */
interface BbmaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output mask volume
     */
    mask_output_file: OutputPathType;
    /**
     * Output reduced volume(s)
     */
    src_output_file: OutputPathType;
    /**
     * Output registration file
     */
    registration_output_file: OutputPathType;
    /**
     * Output registration file from regheader
     */
    regheader_output_file: OutputPathType;
    /**
     * Output file for sub2src registration
     */
    sub2src_output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param mask Input and output for the mask volume.
 * @param src_volumes Input and output volumes to be reduced to the bounding box.
 * @param npad Number of voxels to expand the bounding box.
 * @param registration Input and output registration files.
 * @param regheader Output registration file from header.
 * @param sub2src Output file for sub-source registration.
 *
 * @returns Parameter dictionary
 */
function bbmask_params(
    mask: Array<InputPathType>,
    src_volumes: Array<InputPathType> | null = null,
    npad: number | null = null,
    registration: Array<InputPathType> | null = null,
    regheader: InputPathType | null = null,
    sub2src: InputPathType | null = null,
): BbmaskParameters {
    const params = {
        "@type": "freesurfer.bbmask" as const,
        "mask": mask,
    };
    if (src_volumes !== null) {
        params["src_volumes"] = src_volumes;
    }
    if (npad !== null) {
        params["npad"] = npad;
    }
    if (registration !== null) {
        params["registration"] = registration;
    }
    if (regheader !== null) {
        params["regheader"] = regheader;
    }
    if (sub2src !== null) {
        params["sub2src"] = sub2src;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function bbmask_cargs(
    params: BbmaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("bbmask");
    cargs.push(
        "--mask",
        ...(params["mask"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["src_volumes"] ?? null) !== null) {
        cargs.push(
            "--src",
            ...(params["src_volumes"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["npad"] ?? null) !== null) {
        cargs.push(
            "--npad",
            String((params["npad"] ?? null))
        );
    }
    if ((params["registration"] ?? null) !== null) {
        cargs.push(
            "--reg",
            ...(params["registration"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["regheader"] ?? null) !== null) {
        cargs.push(
            "--regheader",
            execution.inputFile((params["regheader"] ?? null))
        );
    }
    if ((params["sub2src"] ?? null) !== null) {
        cargs.push(
            "--sub2src",
            execution.inputFile((params["sub2src"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function bbmask_outputs(
    params: BbmaskParameters,
    execution: Execution,
): BbmaskOutputs {
    const ret: BbmaskOutputs = {
        root: execution.outputFile("."),
        mask_output_file: execution.outputFile(["[MASK_OUTPUT]"].join('')),
        src_output_file: execution.outputFile(["[SRC_OUTPUT]"].join('')),
        registration_output_file: execution.outputFile(["[REG_OUTPUT]"].join('')),
        regheader_output_file: execution.outputFile(["[REG_HEADER_OUTPUT]"].join('')),
        sub2src_output_file: execution.outputFile(["[SUB2SRC_OUTPUT]"].join('')),
    };
    return ret;
}


/**
 * Tool to create a volume with a smaller field of view by creating a bounding box that encompasses a mask.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `BbmaskOutputs`).
 */
function bbmask_execute(
    params: BbmaskParameters,
    execution: Execution,
): BbmaskOutputs {
    params = execution.params(params)
    const cargs = bbmask_cargs(params, execution)
    const ret = bbmask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool to create a volume with a smaller field of view by creating a bounding box that encompasses a mask.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param mask Input and output for the mask volume.
 * @param src_volumes Input and output volumes to be reduced to the bounding box.
 * @param npad Number of voxels to expand the bounding box.
 * @param registration Input and output registration files.
 * @param regheader Output registration file from header.
 * @param sub2src Output file for sub-source registration.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BbmaskOutputs`).
 */
function bbmask(
    mask: Array<InputPathType>,
    src_volumes: Array<InputPathType> | null = null,
    npad: number | null = null,
    registration: Array<InputPathType> | null = null,
    regheader: InputPathType | null = null,
    sub2src: InputPathType | null = null,
    runner: Runner | null = null,
): BbmaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BBMASK_METADATA);
    const params = bbmask_params(mask, src_volumes, npad, registration, regheader, sub2src)
    return bbmask_execute(params, execution);
}


export {
      BBMASK_METADATA,
      BbmaskOutputs,
      BbmaskParameters,
      bbmask,
      bbmask_cargs,
      bbmask_execute,
      bbmask_outputs,
      bbmask_params,
};
