// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__NO_EXT_METADATA: Metadata = {
    id: "aa54ce64e9dd0f5ee3b7a0897d18c2e03cd5cd84.boutiques",
    name: "@NoExt",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VNoExtParameters {
    "@type": "afni.@NoExt";
    "inputfile": string;
    "extensions"?: Array<string> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@NoExt": v__no_ext_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@NoExt": v__no_ext_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__no_ext(...)`.
 *
 * @interface
 */
interface VNoExtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File name with specified extensions removed
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param inputfile Input file name with extension
 * @param extensions Extensions to be removed
 *
 * @returns Parameter dictionary
 */
function v__no_ext_params(
    inputfile: string,
    extensions: Array<string> | null = null,
): VNoExtParameters {
    const params = {
        "@type": "afni.@NoExt" as const,
        "inputfile": inputfile,
    };
    if (extensions !== null) {
        params["extensions"] = extensions;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__no_ext_cargs(
    params: VNoExtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@NoExt");
    cargs.push((params["inputfile"] ?? null));
    if ((params["extensions"] ?? null) !== null) {
        cargs.push(...(params["extensions"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__no_ext_outputs(
    params: VNoExtParameters,
    execution: Execution,
): VNoExtOutputs {
    const ret: VNoExtOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile(["output"].join('')),
    };
    return ret;
}


/**
 * Tool for removing specified extensions from filenames.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VNoExtOutputs`).
 */
function v__no_ext_execute(
    params: VNoExtParameters,
    execution: Execution,
): VNoExtOutputs {
    params = execution.params(params)
    const cargs = v__no_ext_cargs(params, execution)
    const ret = v__no_ext_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for removing specified extensions from filenames.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param inputfile Input file name with extension
 * @param extensions Extensions to be removed
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VNoExtOutputs`).
 */
function v__no_ext(
    inputfile: string,
    extensions: Array<string> | null = null,
    runner: Runner | null = null,
): VNoExtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__NO_EXT_METADATA);
    const params = v__no_ext_params(inputfile, extensions)
    return v__no_ext_execute(params, execution);
}


export {
      VNoExtOutputs,
      VNoExtParameters,
      V__NO_EXT_METADATA,
      v__no_ext,
      v__no_ext_cargs,
      v__no_ext_execute,
      v__no_ext_outputs,
      v__no_ext_params,
};
