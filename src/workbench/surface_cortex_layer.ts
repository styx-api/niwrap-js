// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_CORTEX_LAYER_METADATA: Metadata = {
    id: "1fb2598f6c40246e1cd4406b005c1caba798780a.boutiques",
    name: "surface-cortex-layer",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceCortexLayerParameters {
    "__STYXTYPE__": "surface-cortex-layer";
    "white_surface": InputPathType;
    "pial_surface": InputPathType;
    "location": number;
    "out_surface": string;
    "opt_placement_out_placement_metric"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-cortex-layer": surface_cortex_layer_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-cortex-layer": surface_cortex_layer_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_cortex_layer(...)`.
 *
 * @interface
 */
interface SurfaceCortexLayerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output surface
     */
    out_surface: OutputPathType;
    /**
     * output the placement as a volume fraction from pial to white: output metric
     */
    opt_placement_out_placement_metric: OutputPathType | null;
}


function surface_cortex_layer_params(
    white_surface: InputPathType,
    pial_surface: InputPathType,
    location: number,
    out_surface: string,
    opt_placement_out_placement_metric: string | null = null,
): SurfaceCortexLayerParameters {
    /**
     * Build parameters.
    
     * @param white_surface the white matter surface
     * @param pial_surface the pial surface
     * @param location what volume fraction to place the layer at
     * @param out_surface the output surface
     * @param opt_placement_out_placement_metric output the placement as a volume fraction from pial to white: output metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-cortex-layer" as const,
        "white_surface": white_surface,
        "pial_surface": pial_surface,
        "location": location,
        "out_surface": out_surface,
    };
    if (opt_placement_out_placement_metric !== null) {
        params["opt_placement_out_placement_metric"] = opt_placement_out_placement_metric;
    }
    return params;
}


function surface_cortex_layer_cargs(
    params: SurfaceCortexLayerParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-cortex-layer");
    cargs.push(execution.inputFile((params["white_surface"] ?? null)));
    cargs.push(execution.inputFile((params["pial_surface"] ?? null)));
    cargs.push(String((params["location"] ?? null)));
    cargs.push((params["out_surface"] ?? null));
    if ((params["opt_placement_out_placement_metric"] ?? null) !== null) {
        cargs.push(
            "-placement-out",
            (params["opt_placement_out_placement_metric"] ?? null)
        );
    }
    return cargs;
}


function surface_cortex_layer_outputs(
    params: SurfaceCortexLayerParameters,
    execution: Execution,
): SurfaceCortexLayerOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceCortexLayerOutputs = {
        root: execution.outputFile("."),
        out_surface: execution.outputFile([(params["out_surface"] ?? null)].join('')),
        opt_placement_out_placement_metric: ((params["opt_placement_out_placement_metric"] ?? null) !== null) ? execution.outputFile([(params["opt_placement_out_placement_metric"] ?? null)].join('')) : null,
    };
    return ret;
}


function surface_cortex_layer_execute(
    params: SurfaceCortexLayerParameters,
    execution: Execution,
): SurfaceCortexLayerOutputs {
    /**
     * Create surface approximating a cortical layer.
     * 
     * The input surfaces must have vertex correspondence.  The output surface is generated by placing vertices between the two surfaces such that the enclosed volume within any small patch of the new and white surfaces is the given fraction of the volume of the same patch between the pial and white surfaces (i.e., specifying 0 would give the white surface, 1 would give the pial surface).  .
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceCortexLayerOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_cortex_layer_cargs(params, execution)
    const ret = surface_cortex_layer_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_cortex_layer(
    white_surface: InputPathType,
    pial_surface: InputPathType,
    location: number,
    out_surface: string,
    opt_placement_out_placement_metric: string | null = null,
    runner: Runner | null = null,
): SurfaceCortexLayerOutputs {
    /**
     * Create surface approximating a cortical layer.
     * 
     * The input surfaces must have vertex correspondence.  The output surface is generated by placing vertices between the two surfaces such that the enclosed volume within any small patch of the new and white surfaces is the given fraction of the volume of the same patch between the pial and white surfaces (i.e., specifying 0 would give the white surface, 1 would give the pial surface).  .
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param white_surface the white matter surface
     * @param pial_surface the pial surface
     * @param location what volume fraction to place the layer at
     * @param out_surface the output surface
     * @param opt_placement_out_placement_metric output the placement as a volume fraction from pial to white: output metric
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceCortexLayerOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_CORTEX_LAYER_METADATA);
    const params = surface_cortex_layer_params(white_surface, pial_surface, location, out_surface, opt_placement_out_placement_metric)
    return surface_cortex_layer_execute(params, execution);
}


export {
      SURFACE_CORTEX_LAYER_METADATA,
      SurfaceCortexLayerOutputs,
      SurfaceCortexLayerParameters,
      surface_cortex_layer,
      surface_cortex_layer_params,
};
