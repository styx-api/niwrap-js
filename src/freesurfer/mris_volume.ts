// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_VOLUME_METADATA: Metadata = {
    id: "90a9e134e9f1f52b94a8a65439a8368906985f96.boutiques",
    name: "mris_volume",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisVolumeParameters {
    "__STYXTYPE__": "mris_volume";
    "surface_file": InputPathType;
    "verbose_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_volume": mris_volume_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_volume(...)`.
 *
 * @interface
 */
interface MrisVolumeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_volume_params(
    surface_file: InputPathType,
    verbose_flag: boolean = false,
): MrisVolumeParameters {
    /**
     * Build parameters.
    
     * @param surface_file The closed surface file whose volume is to be computed.
     * @param verbose_flag Output more messages for verbose output.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_volume" as const,
        "surface_file": surface_file,
        "verbose_flag": verbose_flag,
    };
    return params;
}


function mris_volume_cargs(
    params: MrisVolumeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_volume");
    cargs.push(execution.inputFile((params["surface_file"] ?? null)));
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


function mris_volume_outputs(
    params: MrisVolumeParameters,
    execution: Execution,
): MrisVolumeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisVolumeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_volume_execute(
    params: MrisVolumeParameters,
    execution: Execution,
): MrisVolumeOutputs {
    /**
     * A tool for computing the volume of a closed surface using a divergence formula.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisVolumeOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_volume_cargs(params, execution)
    const ret = mris_volume_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_volume(
    surface_file: InputPathType,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): MrisVolumeOutputs {
    /**
     * A tool for computing the volume of a closed surface using a divergence formula.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surface_file The closed surface file whose volume is to be computed.
     * @param verbose_flag Output more messages for verbose output.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisVolumeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_VOLUME_METADATA);
    const params = mris_volume_params(surface_file, verbose_flag)
    return mris_volume_execute(params, execution);
}


export {
      MRIS_VOLUME_METADATA,
      MrisVolumeOutputs,
      MrisVolumeParameters,
      mris_volume,
      mris_volume_params,
};
