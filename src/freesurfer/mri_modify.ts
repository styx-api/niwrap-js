// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MODIFY_METADATA: Metadata = {
    id: "b010dddaf9be7eb6de0753946c3feda8c9496081.boutiques",
    name: "mri_modify",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriModifyParameters {
    "@type": "freesurfer.mri_modify";
    "x_ras": Array<number>;
    "y_ras": Array<number>;
    "z_ras": Array<number>;
    "cras": Array<number>;
    "x_size": number;
    "y_size": number;
    "z_size": number;
    "tr": number;
    "te": number;
    "ti": number;
    "fa": number;
    "xform": string;
    "input_volume": InputPathType;
    "output_volume": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_modify": mri_modify_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_modify(...)`.
 *
 * @interface
 */
interface MriModifyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param x_ras X direction cosines (xr, xa, xs)
 * @param y_ras Y direction cosines (yr, ya, ys)
 * @param z_ras Z direction cosines (zr, za, zs)
 * @param cras Center RAS coordinates (cr, ca, cs)
 * @param x_size Size of voxel in X dimension
 * @param y_size Size of voxel in Y dimension
 * @param z_size Size of voxel in Z dimension
 * @param tr Repetition time (TR)
 * @param te Echo time (TE)
 * @param ti Inversion time (TI)
 * @param fa Flip angle (degrees)
 * @param xform New transformation file name
 * @param input_volume Input volume
 * @param output_volume Output volume
 *
 * @returns Parameter dictionary
 */
function mri_modify_params(
    x_ras: Array<number>,
    y_ras: Array<number>,
    z_ras: Array<number>,
    cras: Array<number>,
    x_size: number,
    y_size: number,
    z_size: number,
    tr: number,
    te: number,
    ti: number,
    fa: number,
    xform: string,
    input_volume: InputPathType,
    output_volume: string,
): MriModifyParameters {
    const params = {
        "@type": "freesurfer.mri_modify" as const,
        "x_ras": x_ras,
        "y_ras": y_ras,
        "z_ras": z_ras,
        "cras": cras,
        "x_size": x_size,
        "y_size": y_size,
        "z_size": z_size,
        "tr": tr,
        "te": te,
        "ti": ti,
        "fa": fa,
        "xform": xform,
        "input_volume": input_volume,
        "output_volume": output_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_modify_cargs(
    params: MriModifyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_modify");
    cargs.push(
        "-xras",
        ...(params["x_ras"] ?? null).map(String)
    );
    cargs.push(
        "-yras",
        ...(params["y_ras"] ?? null).map(String)
    );
    cargs.push(
        "-zras",
        ...(params["z_ras"] ?? null).map(String)
    );
    cargs.push(
        "-cras",
        ...(params["cras"] ?? null).map(String)
    );
    cargs.push(
        "-xsize",
        String((params["x_size"] ?? null))
    );
    cargs.push(
        "-ysize",
        String((params["y_size"] ?? null))
    );
    cargs.push(
        "-zsize",
        String((params["z_size"] ?? null))
    );
    cargs.push(
        "-tr",
        String((params["tr"] ?? null))
    );
    cargs.push(
        "-te",
        String((params["te"] ?? null))
    );
    cargs.push(
        "-ti",
        String((params["ti"] ?? null))
    );
    cargs.push(
        "-fa",
        String((params["fa"] ?? null))
    );
    cargs.push(
        "-xform",
        (params["xform"] ?? null)
    );
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_modify_outputs(
    params: MriModifyParameters,
    execution: Execution,
): MriModifyOutputs {
    const ret: MriModifyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_modify
 *
 * Tool for modifying MRI image headers.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriModifyOutputs`).
 */
function mri_modify_execute(
    params: MriModifyParameters,
    runner: Runner | null = null,
): MriModifyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MODIFY_METADATA);
    params = execution.params(params)
    const cargs = mri_modify_cargs(params, execution)
    const ret = mri_modify_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_modify
 *
 * Tool for modifying MRI image headers.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param x_ras X direction cosines (xr, xa, xs)
 * @param y_ras Y direction cosines (yr, ya, ys)
 * @param z_ras Z direction cosines (zr, za, zs)
 * @param cras Center RAS coordinates (cr, ca, cs)
 * @param x_size Size of voxel in X dimension
 * @param y_size Size of voxel in Y dimension
 * @param z_size Size of voxel in Z dimension
 * @param tr Repetition time (TR)
 * @param te Echo time (TE)
 * @param ti Inversion time (TI)
 * @param fa Flip angle (degrees)
 * @param xform New transformation file name
 * @param input_volume Input volume
 * @param output_volume Output volume
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriModifyOutputs`).
 */
function mri_modify(
    x_ras: Array<number>,
    y_ras: Array<number>,
    z_ras: Array<number>,
    cras: Array<number>,
    x_size: number,
    y_size: number,
    z_size: number,
    tr: number,
    te: number,
    ti: number,
    fa: number,
    xform: string,
    input_volume: InputPathType,
    output_volume: string,
    runner: Runner | null = null,
): MriModifyOutputs {
    const params = mri_modify_params(x_ras, y_ras, z_ras, cras, x_size, y_size, z_size, tr, te, ti, fa, xform, input_volume, output_volume)
    return mri_modify_execute(params, runner);
}


export {
      MRI_MODIFY_METADATA,
      MriModifyOutputs,
      MriModifyParameters,
      mri_modify,
      mri_modify_execute,
      mri_modify_params,
};
