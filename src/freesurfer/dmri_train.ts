// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_TRAIN_METADATA: Metadata = {
    id: "62544142f9acdbe8969a134c0089af273bafcc2c.boutiques",
    name: "dmri_train",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriTrainParameters {
    "@type": "freesurfer.dmri_train";
    "slist": InputPathType;
    "trk_files": Array<InputPathType>;
    "rois"?: Array<InputPathType> | null | undefined;
    "seg": InputPathType;
    "cmask": InputPathType;
    "lmask": Array<number>;
    "bmask_training": Array<InputPathType>;
    "outtrk": Array<InputPathType>;
    "bmask_test": Array<InputPathType>;
    "fa"?: Array<InputPathType> | null | undefined;
    "reg"?: InputPathType | null | undefined;
    "regnl"?: InputPathType | null | undefined;
    "refnl"?: InputPathType | null | undefined;
    "basereg"?: Array<InputPathType> | null | undefined;
    "baseref"?: Array<InputPathType> | null | undefined;
    "ncpts": Array<number>;
    "max_streamlines": number;
    "xstr": boolean;
    "aprior": boolean;
    "sprior": boolean;
    "trunc": boolean;
    "out_files": Array<string>;
    "outdir"?: string | null | undefined;
    "cptdir"?: string | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_train": dmri_train_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_train(...)`.
 *
 * @interface
 */
interface DmriTrainOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param slist Text file with list of training subject directories
 * @param trk_files Name(s) of input .trk file(s), one per path
 * @param seg Name of input aparc+aseg volume
 * @param cmask Name of input cortex mask volume
 * @param lmask Add a label ID from aparc+aseg to cortex mask, one per path
 * @param bmask_training Input brain mask volume(s)
 * @param outtrk Name(s) of output, pre-sorted .trk file(s), one per path
 * @param bmask_test Input brain mask volume(s) for test subject
 * @param ncpts Number of control points for initial spline
 * @param max_streamlines Maximum number of training streamlines to keep per path
 * @param out_files Base name(s) of output(s) for test subject, one per path
 * @param rois Optional, names of input tract labeling ROIs, two per path
 * @param fa Input FA volume(s) for test subject
 * @param reg Affine registration from atlas to base space
 * @param regnl Nonlinear registration from atlas to base space
 * @param refnl Nonlinear registration source reference volume
 * @param basereg Affine registration(s) from base to FA volume(s)
 * @param baseref Base space reference volume
 * @param xstr Exclude previously chosen center streamline(s)
 * @param aprior Compute priors on underlying anatomy
 * @param sprior Compute priors on shape
 * @param trunc Use all training streamlines, truncated or not
 * @param outdir Output directory
 * @param cptdir Output directory for control points in test subject's space
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 *
 * @returns Parameter dictionary
 */
function dmri_train_params(
    slist: InputPathType,
    trk_files: Array<InputPathType>,
    seg: InputPathType,
    cmask: InputPathType,
    lmask: Array<number>,
    bmask_training: Array<InputPathType>,
    outtrk: Array<InputPathType>,
    bmask_test: Array<InputPathType>,
    ncpts: Array<number>,
    max_streamlines: number,
    out_files: Array<string>,
    rois: Array<InputPathType> | null = null,
    fa: Array<InputPathType> | null = null,
    reg: InputPathType | null = null,
    regnl: InputPathType | null = null,
    refnl: InputPathType | null = null,
    basereg: Array<InputPathType> | null = null,
    baseref: Array<InputPathType> | null = null,
    xstr: boolean = false,
    aprior: boolean = false,
    sprior: boolean = false,
    trunc: boolean = false,
    outdir: string | null = null,
    cptdir: string | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
): DmriTrainParameters {
    const params = {
        "@type": "freesurfer.dmri_train" as const,
        "slist": slist,
        "trk_files": trk_files,
        "seg": seg,
        "cmask": cmask,
        "lmask": lmask,
        "bmask_training": bmask_training,
        "outtrk": outtrk,
        "bmask_test": bmask_test,
        "ncpts": ncpts,
        "max_streamlines": max_streamlines,
        "xstr": xstr,
        "aprior": aprior,
        "sprior": sprior,
        "trunc": trunc,
        "out_files": out_files,
        "debug": debug,
        "checkopts": checkopts,
        "help": help,
        "version": version,
    };
    if (rois !== null) {
        params["rois"] = rois;
    }
    if (fa !== null) {
        params["fa"] = fa;
    }
    if (reg !== null) {
        params["reg"] = reg;
    }
    if (regnl !== null) {
        params["regnl"] = regnl;
    }
    if (refnl !== null) {
        params["refnl"] = refnl;
    }
    if (basereg !== null) {
        params["basereg"] = basereg;
    }
    if (baseref !== null) {
        params["baseref"] = baseref;
    }
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (cptdir !== null) {
        params["cptdir"] = cptdir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_train_cargs(
    params: DmriTrainParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_train");
    cargs.push(
        "--slist",
        execution.inputFile((params["slist"] ?? null))
    );
    cargs.push(
        "--trk",
        ...(params["trk_files"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["rois"] ?? null) !== null) {
        cargs.push(
            "--rois",
            ...(params["rois"] ?? null).map(f => execution.inputFile(f))
        );
    }
    cargs.push(
        "--seg",
        execution.inputFile((params["seg"] ?? null))
    );
    cargs.push(
        "--cmask",
        execution.inputFile((params["cmask"] ?? null))
    );
    cargs.push(
        "--lmask",
        ...(params["lmask"] ?? null).map(String)
    );
    cargs.push(
        "--bmask",
        ...(params["bmask_training"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "--outtrk",
        ...(params["outtrk"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "--bmask",
        ...(params["bmask_test"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["fa"] ?? null) !== null) {
        cargs.push(
            "--fa",
            ...(params["fa"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["reg"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["reg"] ?? null))
        );
    }
    if ((params["regnl"] ?? null) !== null) {
        cargs.push(
            "--regnl",
            execution.inputFile((params["regnl"] ?? null))
        );
    }
    if ((params["refnl"] ?? null) !== null) {
        cargs.push(
            "--refnl",
            execution.inputFile((params["refnl"] ?? null))
        );
    }
    if ((params["basereg"] ?? null) !== null) {
        cargs.push(
            "--basereg",
            ...(params["basereg"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["baseref"] ?? null) !== null) {
        cargs.push(
            "--baseref",
            ...(params["baseref"] ?? null).map(f => execution.inputFile(f))
        );
    }
    cargs.push(
        "--ncpts",
        ...(params["ncpts"] ?? null).map(String)
    );
    cargs.push(
        "--max",
        String((params["max_streamlines"] ?? null))
    );
    if ((params["xstr"] ?? null)) {
        cargs.push("--xstr");
    }
    if ((params["aprior"] ?? null)) {
        cargs.push("--aprior");
    }
    if ((params["sprior"] ?? null)) {
        cargs.push("--sprior");
    }
    if ((params["trunc"] ?? null)) {
        cargs.push("--trunc");
    }
    cargs.push(
        "--out",
        ...(params["out_files"] ?? null)
    );
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "--outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["cptdir"] ?? null) !== null) {
        cargs.push(
            "--cptdir",
            (params["cptdir"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_train_outputs(
    params: DmriTrainParameters,
    execution: Execution,
): DmriTrainOutputs {
    const ret: DmriTrainOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * dmri_train
 *
 * DMRI training tool for processing diffusion MRI data in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriTrainOutputs`).
 */
function dmri_train_execute(
    params: DmriTrainParameters,
    runner: Runner | null = null,
): DmriTrainOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_TRAIN_METADATA);
    params = execution.params(params)
    const cargs = dmri_train_cargs(params, execution)
    const ret = dmri_train_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_train
 *
 * DMRI training tool for processing diffusion MRI data in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param slist Text file with list of training subject directories
 * @param trk_files Name(s) of input .trk file(s), one per path
 * @param seg Name of input aparc+aseg volume
 * @param cmask Name of input cortex mask volume
 * @param lmask Add a label ID from aparc+aseg to cortex mask, one per path
 * @param bmask_training Input brain mask volume(s)
 * @param outtrk Name(s) of output, pre-sorted .trk file(s), one per path
 * @param bmask_test Input brain mask volume(s) for test subject
 * @param ncpts Number of control points for initial spline
 * @param max_streamlines Maximum number of training streamlines to keep per path
 * @param out_files Base name(s) of output(s) for test subject, one per path
 * @param rois Optional, names of input tract labeling ROIs, two per path
 * @param fa Input FA volume(s) for test subject
 * @param reg Affine registration from atlas to base space
 * @param regnl Nonlinear registration from atlas to base space
 * @param refnl Nonlinear registration source reference volume
 * @param basereg Affine registration(s) from base to FA volume(s)
 * @param baseref Base space reference volume
 * @param xstr Exclude previously chosen center streamline(s)
 * @param aprior Compute priors on underlying anatomy
 * @param sprior Compute priors on shape
 * @param trunc Use all training streamlines, truncated or not
 * @param outdir Output directory
 * @param cptdir Output directory for control points in test subject's space
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriTrainOutputs`).
 */
function dmri_train(
    slist: InputPathType,
    trk_files: Array<InputPathType>,
    seg: InputPathType,
    cmask: InputPathType,
    lmask: Array<number>,
    bmask_training: Array<InputPathType>,
    outtrk: Array<InputPathType>,
    bmask_test: Array<InputPathType>,
    ncpts: Array<number>,
    max_streamlines: number,
    out_files: Array<string>,
    rois: Array<InputPathType> | null = null,
    fa: Array<InputPathType> | null = null,
    reg: InputPathType | null = null,
    regnl: InputPathType | null = null,
    refnl: InputPathType | null = null,
    basereg: Array<InputPathType> | null = null,
    baseref: Array<InputPathType> | null = null,
    xstr: boolean = false,
    aprior: boolean = false,
    sprior: boolean = false,
    trunc: boolean = false,
    outdir: string | null = null,
    cptdir: string | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DmriTrainOutputs {
    const params = dmri_train_params(slist, trk_files, seg, cmask, lmask, bmask_training, outtrk, bmask_test, ncpts, max_streamlines, out_files, rois, fa, reg, regnl, refnl, basereg, baseref, xstr, aprior, sprior, trunc, outdir, cptdir, debug, checkopts, help, version)
    return dmri_train_execute(params, runner);
}


export {
      DMRI_TRAIN_METADATA,
      DmriTrainOutputs,
      DmriTrainParameters,
      dmri_train,
      dmri_train_execute,
      dmri_train_params,
};
