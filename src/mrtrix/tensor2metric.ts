// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TENSOR2METRIC_METADATA: Metadata = {
    id: "27f4e9c1379c830bcec96cfb3c8b321a7c99c245.boutiques",
    name: "tensor2metric",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Tensor2metricConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type Tensor2metricConfigParametersTagged = Required<Pick<Tensor2metricConfigParameters, '@type'>> & Tensor2metricConfigParameters;


interface Tensor2metricParameters {
    "@type"?: "mrtrix/tensor2metric";
    "adc"?: string | null | undefined;
    "fa"?: string | null | undefined;
    "ad"?: string | null | undefined;
    "rd"?: string | null | undefined;
    "cl"?: string | null | undefined;
    "cp"?: string | null | undefined;
    "cs"?: string | null | undefined;
    "value"?: string | null | undefined;
    "vector"?: string | null | undefined;
    "num"?: Array<number> | null | undefined;
    "modulate"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Tensor2metricConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "tensor": InputPathType;
}
type Tensor2metricParametersTagged = Required<Pick<Tensor2metricParameters, '@type'>> & Tensor2metricParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function tensor2metric_config_params(
    key: string,
    value: string,
): Tensor2metricConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tensor2metric_config_cargs(
    params: Tensor2metricConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `Tensor2metricParameters(...)`.
 *
 * @interface
 */
interface Tensor2metricOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * compute the mean apparent diffusion coefficient (ADC) of the diffusion tensor. (sometimes also referred to as the mean diffusivity (MD)) 
     */
    adc: OutputPathType | null;
    /**
     * compute the fractional anisotropy (FA) of the diffusion tensor. 
     */
    fa: OutputPathType | null;
    /**
     * compute the axial diffusivity (AD) of the diffusion tensor. (equivalent to the principal eigenvalue) 
     */
    ad: OutputPathType | null;
    /**
     * compute the radial diffusivity (RD) of the diffusion tensor. (equivalent to the mean of the two non-principal eigenvalues) 
     */
    rd: OutputPathType | null;
    /**
     * compute the linearity metric of the diffusion tensor. (one of the three Westin shape metrics) 
     */
    cl: OutputPathType | null;
    /**
     * compute the planarity metric of the diffusion tensor. (one of the three Westin shape metrics) 
     */
    cp: OutputPathType | null;
    /**
     * compute the sphericity metric of the diffusion tensor. (one of the three Westin shape metrics) 
     */
    cs: OutputPathType | null;
    /**
     * compute the selected eigenvalue(s) of the diffusion tensor. 
     */
    value: OutputPathType | null;
    /**
     * compute the selected eigenvector(s) of the diffusion tensor. 
     */
    vector: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param tensor the input tensor image.
 * @param adc compute the mean apparent diffusion coefficient (ADC) of the diffusion tensor. (sometimes also referred to as the mean diffusivity (MD))
 * @param fa compute the fractional anisotropy (FA) of the diffusion tensor.
 * @param ad compute the axial diffusivity (AD) of the diffusion tensor. (equivalent to the principal eigenvalue)
 * @param rd compute the radial diffusivity (RD) of the diffusion tensor. (equivalent to the mean of the two non-principal eigenvalues)
 * @param cl compute the linearity metric of the diffusion tensor. (one of the three Westin shape metrics)
 * @param cp compute the planarity metric of the diffusion tensor. (one of the three Westin shape metrics)
 * @param cs compute the sphericity metric of the diffusion tensor. (one of the three Westin shape metrics)
 * @param value compute the selected eigenvalue(s) of the diffusion tensor.
 * @param vector compute the selected eigenvector(s) of the diffusion tensor.
 * @param num specify the desired eigenvalue/eigenvector(s). Note that several eigenvalues can be specified as a number sequence. For example, '1,3' specifies the principal (1) and minor (3) eigenvalues/eigenvectors (default = 1).
 * @param modulate specify how to modulate the magnitude of the eigenvectors. Valid choices are: none, FA, eigval (default = FA).
 * @param mask only perform computation within the specified binary brain mask image.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function tensor2metric_params(
    tensor: InputPathType,
    adc: string | null = null,
    fa: string | null = null,
    ad: string | null = null,
    rd: string | null = null,
    cl: string | null = null,
    cp: string | null = null,
    cs: string | null = null,
    value: string | null = null,
    vector: string | null = null,
    num: Array<number> | null = null,
    modulate: string | null = null,
    mask: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tensor2metricConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Tensor2metricParametersTagged {
    const params = {
        "@type": "mrtrix/tensor2metric" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "tensor": tensor,
    };
    if (adc !== null) {
        params["adc"] = adc;
    }
    if (fa !== null) {
        params["fa"] = fa;
    }
    if (ad !== null) {
        params["ad"] = ad;
    }
    if (rd !== null) {
        params["rd"] = rd;
    }
    if (cl !== null) {
        params["cl"] = cl;
    }
    if (cp !== null) {
        params["cp"] = cp;
    }
    if (cs !== null) {
        params["cs"] = cs;
    }
    if (value !== null) {
        params["value"] = value;
    }
    if (vector !== null) {
        params["vector"] = vector;
    }
    if (num !== null) {
        params["num"] = num;
    }
    if (modulate !== null) {
        params["modulate"] = modulate;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tensor2metric_cargs(
    params: Tensor2metricParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tensor2metric");
    if ((params["adc"] ?? null) !== null) {
        cargs.push(
            "-adc",
            (params["adc"] ?? null)
        );
    }
    if ((params["fa"] ?? null) !== null) {
        cargs.push(
            "-fa",
            (params["fa"] ?? null)
        );
    }
    if ((params["ad"] ?? null) !== null) {
        cargs.push(
            "-ad",
            (params["ad"] ?? null)
        );
    }
    if ((params["rd"] ?? null) !== null) {
        cargs.push(
            "-rd",
            (params["rd"] ?? null)
        );
    }
    if ((params["cl"] ?? null) !== null) {
        cargs.push(
            "-cl",
            (params["cl"] ?? null)
        );
    }
    if ((params["cp"] ?? null) !== null) {
        cargs.push(
            "-cp",
            (params["cp"] ?? null)
        );
    }
    if ((params["cs"] ?? null) !== null) {
        cargs.push(
            "-cs",
            (params["cs"] ?? null)
        );
    }
    if ((params["value"] ?? null) !== null) {
        cargs.push(
            "-value",
            (params["value"] ?? null)
        );
    }
    if ((params["vector"] ?? null) !== null) {
        cargs.push(
            "-vector",
            (params["vector"] ?? null)
        );
    }
    if ((params["num"] ?? null) !== null) {
        cargs.push(
            "-num",
            ...(params["num"] ?? null).map(String)
        );
    }
    if ((params["modulate"] ?? null) !== null) {
        cargs.push(
            "-modulate",
            (params["modulate"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => tensor2metric_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["tensor"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tensor2metric_outputs(
    params: Tensor2metricParameters,
    execution: Execution,
): Tensor2metricOutputs {
    const ret: Tensor2metricOutputs = {
        root: execution.outputFile("."),
        adc: ((params["adc"] ?? null) !== null) ? execution.outputFile([(params["adc"] ?? null)].join('')) : null,
        fa: ((params["fa"] ?? null) !== null) ? execution.outputFile([(params["fa"] ?? null)].join('')) : null,
        ad: ((params["ad"] ?? null) !== null) ? execution.outputFile([(params["ad"] ?? null)].join('')) : null,
        rd: ((params["rd"] ?? null) !== null) ? execution.outputFile([(params["rd"] ?? null)].join('')) : null,
        cl: ((params["cl"] ?? null) !== null) ? execution.outputFile([(params["cl"] ?? null)].join('')) : null,
        cp: ((params["cp"] ?? null) !== null) ? execution.outputFile([(params["cp"] ?? null)].join('')) : null,
        cs: ((params["cs"] ?? null) !== null) ? execution.outputFile([(params["cs"] ?? null)].join('')) : null,
        value: ((params["value"] ?? null) !== null) ? execution.outputFile([(params["value"] ?? null)].join('')) : null,
        vector: ((params["vector"] ?? null) !== null) ? execution.outputFile([(params["vector"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * tensor2metric
 *
 * Generate maps of tensor-derived parameters.
 *
 *
 *
 * References:
 *
 * Basser, P. J.; Mattiello, J. & Lebihan, D. MR diffusion tensor spectroscopy and imaging. Biophysical Journal, 1994, 66, 259-267
 *
 * Westin, C. F.; Peled, S.; Gudbjartsson, H.; Kikinis, R. & Jolesz, F. A. Geometrical diffusion measures for MRI from tensor basis analysis. Proc Intl Soc Mag Reson Med, 1997, 5, 1742.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tensor2metricOutputs`).
 */
function tensor2metric_execute(
    params: Tensor2metricParameters,
    runner: Runner | null = null,
): Tensor2metricOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TENSOR2METRIC_METADATA);
    params = execution.params(params)
    const cargs = tensor2metric_cargs(params, execution)
    const ret = tensor2metric_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tensor2metric
 *
 * Generate maps of tensor-derived parameters.
 *
 *
 *
 * References:
 *
 * Basser, P. J.; Mattiello, J. & Lebihan, D. MR diffusion tensor spectroscopy and imaging. Biophysical Journal, 1994, 66, 259-267
 *
 * Westin, C. F.; Peled, S.; Gudbjartsson, H.; Kikinis, R. & Jolesz, F. A. Geometrical diffusion measures for MRI from tensor basis analysis. Proc Intl Soc Mag Reson Med, 1997, 5, 1742.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param tensor the input tensor image.
 * @param adc compute the mean apparent diffusion coefficient (ADC) of the diffusion tensor. (sometimes also referred to as the mean diffusivity (MD))
 * @param fa compute the fractional anisotropy (FA) of the diffusion tensor.
 * @param ad compute the axial diffusivity (AD) of the diffusion tensor. (equivalent to the principal eigenvalue)
 * @param rd compute the radial diffusivity (RD) of the diffusion tensor. (equivalent to the mean of the two non-principal eigenvalues)
 * @param cl compute the linearity metric of the diffusion tensor. (one of the three Westin shape metrics)
 * @param cp compute the planarity metric of the diffusion tensor. (one of the three Westin shape metrics)
 * @param cs compute the sphericity metric of the diffusion tensor. (one of the three Westin shape metrics)
 * @param value compute the selected eigenvalue(s) of the diffusion tensor.
 * @param vector compute the selected eigenvector(s) of the diffusion tensor.
 * @param num specify the desired eigenvalue/eigenvector(s). Note that several eigenvalues can be specified as a number sequence. For example, '1,3' specifies the principal (1) and minor (3) eigenvalues/eigenvectors (default = 1).
 * @param modulate specify how to modulate the magnitude of the eigenvectors. Valid choices are: none, FA, eigval (default = FA).
 * @param mask only perform computation within the specified binary brain mask image.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Tensor2metricOutputs`).
 */
function tensor2metric(
    tensor: InputPathType,
    adc: string | null = null,
    fa: string | null = null,
    ad: string | null = null,
    rd: string | null = null,
    cl: string | null = null,
    cp: string | null = null,
    cs: string | null = null,
    value: string | null = null,
    vector: string | null = null,
    num: Array<number> | null = null,
    modulate: string | null = null,
    mask: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Tensor2metricConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Tensor2metricOutputs {
    const params = tensor2metric_params(tensor, adc, fa, ad, rd, cl, cp, cs, value, vector, num, modulate, mask, info, quiet, debug, force, nthreads, config, help, version)
    return tensor2metric_execute(params, runner);
}


export {
      TENSOR2METRIC_METADATA,
      Tensor2metricOutputs,
      tensor2metric,
      tensor2metric_config_params,
      tensor2metric_execute,
      tensor2metric_params,
};
