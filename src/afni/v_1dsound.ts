// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DSOUND_METADATA: Metadata = {
    id: "a2187dd6e3b2350eeb3cfc198b09c50fce524010.boutiques",
    name: "1dsound",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dsoundParameters {
    "__STYXTYPE__": "1dsound";
    "tsfile": InputPathType;
    "prefix"?: string | null | undefined;
    "encoding_16PCM": boolean;
    "encoding_8PCM": boolean;
    "encoding_8ulaw": boolean;
    "tper_option"?: number | null | undefined;
    "fm_option": boolean;
    "notes_option": boolean;
    "notewave_option"?: string | null | undefined;
    "despike_option": boolean;
    "play_option": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dsound": v_1dsound_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dsound": v_1dsound_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dsound(...)`.
 *
 * @interface
 */
interface V1dsoundOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output audio file.
     */
    output_file: OutputPathType | null;
}


function v_1dsound_params(
    tsfile: InputPathType,
    prefix: string | null = null,
    encoding_16_pcm: boolean = false,
    encoding_8_pcm: boolean = false,
    encoding_8ulaw: boolean = false,
    tper_option: number | null = null,
    fm_option: boolean = false,
    notes_option: boolean = false,
    notewave_option: string | null = null,
    despike_option: boolean = false,
    play_option: boolean = false,
): V1dsoundParameters {
    /**
     * Build parameters.
    
     * @param tsfile The input 1D time series file containing the data to transform into sound.
     * @param prefix Prefix for the output filename, which will have '.au' extension.
     * @param encoding_16_pcm Output in 16-bit linear PCM encoding (uncompressed).
     * @param encoding_8_pcm Output in 8-bit linear PCM encoding.
     * @param encoding_8ulaw Output in 8-bit mu-law encoding.
     * @param tper_option Time in seconds per time point in 'tsfile'. Allowed range is 0.01 to 1.0 (inclusive). [default is 0.2s]
     * @param fm_option Output sound is frequency modulated between 110 and 1760 Hz from min to max in the input 1D file.
     * @param notes_option Output sound is a sequence of notes, low to high pitch based on min to max in the input 1D file. Uses pentatonic scale.
     * @param notewave_option Shape of the notes used. Select from [sine, sqsine, square, triangle].
     * @param despike_option Apply a simple despiking algorithm to avoid artifacts from large/small values in the input.
     * @param play_option Plays the sound file after it is written.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dsound" as const,
        "tsfile": tsfile,
        "encoding_16PCM": encoding_16_pcm,
        "encoding_8PCM": encoding_8_pcm,
        "encoding_8ulaw": encoding_8ulaw,
        "fm_option": fm_option,
        "notes_option": notes_option,
        "despike_option": despike_option,
        "play_option": play_option,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (tper_option !== null) {
        params["tper_option"] = tper_option;
    }
    if (notewave_option !== null) {
        params["notewave_option"] = notewave_option;
    }
    return params;
}


function v_1dsound_cargs(
    params: V1dsoundParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dsound");
    cargs.push(execution.inputFile((params["tsfile"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["encoding_16PCM"] ?? null)) {
        cargs.push("-16PCM");
    }
    if ((params["encoding_8PCM"] ?? null)) {
        cargs.push("-8PCM");
    }
    if ((params["encoding_8ulaw"] ?? null)) {
        cargs.push("-8ulaw");
    }
    if ((params["tper_option"] ?? null) !== null) {
        cargs.push(
            "-tper",
            String((params["tper_option"] ?? null))
        );
    }
    if ((params["fm_option"] ?? null)) {
        cargs.push("-FM");
    }
    if ((params["notes_option"] ?? null)) {
        cargs.push("-notes");
    }
    if ((params["notewave_option"] ?? null) !== null) {
        cargs.push(
            "-notewave",
            (params["notewave_option"] ?? null)
        );
    }
    if ((params["despike_option"] ?? null)) {
        cargs.push("-despike");
    }
    if ((params["play_option"] ?? null)) {
        cargs.push("-play");
    }
    return cargs;
}


function v_1dsound_outputs(
    params: V1dsoundParameters,
    execution: Execution,
): V1dsoundOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dsoundOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".au"].join('')) : null,
    };
    return ret;
}


function v_1dsound_execute(
    params: V1dsoundParameters,
    execution: Execution,
): V1dsoundOutputs {
    /**
     * Program to create a sound file from a 1D file (column of numbers).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dsoundOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1dsound_cargs(params, execution)
    const ret = v_1dsound_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1dsound(
    tsfile: InputPathType,
    prefix: string | null = null,
    encoding_16_pcm: boolean = false,
    encoding_8_pcm: boolean = false,
    encoding_8ulaw: boolean = false,
    tper_option: number | null = null,
    fm_option: boolean = false,
    notes_option: boolean = false,
    notewave_option: string | null = null,
    despike_option: boolean = false,
    play_option: boolean = false,
    runner: Runner | null = null,
): V1dsoundOutputs {
    /**
     * Program to create a sound file from a 1D file (column of numbers).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param tsfile The input 1D time series file containing the data to transform into sound.
     * @param prefix Prefix for the output filename, which will have '.au' extension.
     * @param encoding_16_pcm Output in 16-bit linear PCM encoding (uncompressed).
     * @param encoding_8_pcm Output in 8-bit linear PCM encoding.
     * @param encoding_8ulaw Output in 8-bit mu-law encoding.
     * @param tper_option Time in seconds per time point in 'tsfile'. Allowed range is 0.01 to 1.0 (inclusive). [default is 0.2s]
     * @param fm_option Output sound is frequency modulated between 110 and 1760 Hz from min to max in the input 1D file.
     * @param notes_option Output sound is a sequence of notes, low to high pitch based on min to max in the input 1D file. Uses pentatonic scale.
     * @param notewave_option Shape of the notes used. Select from [sine, sqsine, square, triangle].
     * @param despike_option Apply a simple despiking algorithm to avoid artifacts from large/small values in the input.
     * @param play_option Plays the sound file after it is written.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dsoundOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DSOUND_METADATA);
    const params = v_1dsound_params(tsfile, prefix, encoding_16_pcm, encoding_8_pcm, encoding_8ulaw, tper_option, fm_option, notes_option, notewave_option, despike_option, play_option)
    return v_1dsound_execute(params, execution);
}


export {
      V1dsoundOutputs,
      V1dsoundParameters,
      V_1DSOUND_METADATA,
      v_1dsound,
      v_1dsound_params,
};
