// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LABEL2VOL_METADATA: Metadata = {
    id: "cd26e42611cf3dfd2ed0aa17d46d76686633fdae.boutiques",
    name: "mri_label2vol",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLabel2volParameters {
    "__STYXTYPE__": "mri_label2vol";
    "labels"?: Array<string> | null | undefined;
    "annotation"?: InputPathType | null | undefined;
    "segmentation"?: InputPathType | null | undefined;
    "template": InputPathType;
    "registration"?: InputPathType | null | undefined;
    "identity_flag": boolean;
    "fill_threshold"?: number | null | undefined;
    "label_vox_vol"?: number | null | undefined;
    "projection"?: string | null | undefined;
    "subject"?: string | null | undefined;
    "hemisphere"?: string | null | undefined;
    "output_volume": string;
    "hits_volume"?: string | null | undefined;
    "label_stat_volume"?: string | null | undefined;
    "stat_threshold"?: number | null | undefined;
    "offset"?: number | null | undefined;
    "defects"?: string | null | undefined;
    "native_vox2ras_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_label2vol": mri_label2vol_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_label2vol": mri_label2vol_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_label2vol(...)`.
 *
 * @interface
 */
interface MriLabel2volOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output volume where each voxel has the label it's assigned to.
     */
    output_vol: OutputPathType;
    /**
     * The hit volume file showing number of hits per voxel.
     */
    hits_vol: OutputPathType | null;
    /**
     * The label stat volume file.
     */
    label_stat_vol: OutputPathType | null;
}


function mri_label2vol_params(
    template: InputPathType,
    output_volume: string,
    labels: Array<string> | null = null,
    annotation: InputPathType | null = null,
    segmentation: InputPathType | null = null,
    registration: InputPathType | null = null,
    identity_flag: boolean = false,
    fill_threshold: number | null = null,
    label_vox_vol: number | null = null,
    projection: string | null = null,
    subject: string | null = null,
    hemisphere: string | null = null,
    hits_volume: string | null = null,
    label_stat_volume: string | null = null,
    stat_threshold: number | null = null,
    offset: number | null = null,
    defects: string | null = null,
    native_vox2ras_flag: boolean = false,
): MriLabel2volParameters {
    /**
     * Build parameters.
    
     * @param template Template volume; the output will have the same size and geometry.
     * @param output_volume Output volume in which each voxel will have the number of the label to which it is assigned.
     * @param labels Enter the name of the label file. For multiple labels, use multiple --label flags.
     * @param annotation Surface annotation file. Use this to input annotations directly.
     * @param segmentation Path to input segmentation.
     * @param registration tkregister-style registration matrix mapping LabelXYZ to VolXYZ.
     * @param identity_flag Use the identity matrix as the registration.
     * @param fill_threshold Threshold for voxel fill; a value between 0 and 1.
     * @param label_vox_vol Volume of each label point; default is 1mmÂ³.
     * @param projection Project the label along the surface normal. Type can be abs or frac.
     * @param subject FREESURFER subject identifier; needed with --proj.
     * @param hemisphere Hemisphere to use for --proj or --annot. Legal values are lh and rh.
     * @param hits_volume Hit volume, a multi-frame volume with one frame per label showing the number of hits per voxel.
     * @param label_stat_volume Map the label stats field into the volume.
     * @param stat_threshold Only use label point where stat > thresh.
     * @param offset Add offset to the segmentation numbers.
     * @param defects Creates a segmentation volume of the surface defects.
     * @param native_vox2ras_flag Use native voxel-to-RAS transform instead of tkregister-style.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_label2vol" as const,
        "template": template,
        "identity_flag": identity_flag,
        "output_volume": output_volume,
        "native_vox2ras_flag": native_vox2ras_flag,
    };
    if (labels !== null) {
        params["labels"] = labels;
    }
    if (annotation !== null) {
        params["annotation"] = annotation;
    }
    if (segmentation !== null) {
        params["segmentation"] = segmentation;
    }
    if (registration !== null) {
        params["registration"] = registration;
    }
    if (fill_threshold !== null) {
        params["fill_threshold"] = fill_threshold;
    }
    if (label_vox_vol !== null) {
        params["label_vox_vol"] = label_vox_vol;
    }
    if (projection !== null) {
        params["projection"] = projection;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (hemisphere !== null) {
        params["hemisphere"] = hemisphere;
    }
    if (hits_volume !== null) {
        params["hits_volume"] = hits_volume;
    }
    if (label_stat_volume !== null) {
        params["label_stat_volume"] = label_stat_volume;
    }
    if (stat_threshold !== null) {
        params["stat_threshold"] = stat_threshold;
    }
    if (offset !== null) {
        params["offset"] = offset;
    }
    if (defects !== null) {
        params["defects"] = defects;
    }
    return params;
}


function mri_label2vol_cargs(
    params: MriLabel2volParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_label2vol");
    if ((params["labels"] ?? null) !== null) {
        cargs.push(
            "--label",
            ...(params["labels"] ?? null)
        );
    }
    if ((params["annotation"] ?? null) !== null) {
        cargs.push(
            "--annot",
            execution.inputFile((params["annotation"] ?? null))
        );
    }
    if ((params["segmentation"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["segmentation"] ?? null))
        );
    }
    cargs.push(
        "--temp",
        execution.inputFile((params["template"] ?? null))
    );
    if ((params["registration"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["registration"] ?? null))
        );
    }
    if ((params["identity_flag"] ?? null)) {
        cargs.push("--identity");
    }
    if ((params["fill_threshold"] ?? null) !== null) {
        cargs.push(
            "--fillthresh",
            String((params["fill_threshold"] ?? null))
        );
    }
    if ((params["label_vox_vol"] ?? null) !== null) {
        cargs.push(
            "--labvoxvol",
            String((params["label_vox_vol"] ?? null))
        );
    }
    if ((params["projection"] ?? null) !== null) {
        cargs.push(
            "--proj",
            (params["projection"] ?? null)
        );
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--subject",
            (params["subject"] ?? null)
        );
    }
    if ((params["hemisphere"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemisphere"] ?? null)
        );
    }
    cargs.push(
        "--o",
        (params["output_volume"] ?? null)
    );
    if ((params["hits_volume"] ?? null) !== null) {
        cargs.push(
            "--hits",
            (params["hits_volume"] ?? null)
        );
    }
    if ((params["label_stat_volume"] ?? null) !== null) {
        cargs.push(
            "--label-stat",
            (params["label_stat_volume"] ?? null)
        );
    }
    if ((params["stat_threshold"] ?? null) !== null) {
        cargs.push(
            "--stat-thresh",
            String((params["stat_threshold"] ?? null))
        );
    }
    if ((params["offset"] ?? null) !== null) {
        cargs.push(
            "--offset",
            String((params["offset"] ?? null))
        );
    }
    if ((params["defects"] ?? null) !== null) {
        cargs.push(
            "--defects",
            (params["defects"] ?? null)
        );
    }
    if ((params["native_vox2ras_flag"] ?? null)) {
        cargs.push("--native-vox2ras");
    }
    return cargs;
}


function mri_label2vol_outputs(
    params: MriLabel2volParameters,
    execution: Execution,
): MriLabel2volOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriLabel2volOutputs = {
        root: execution.outputFile("."),
        output_vol: execution.outputFile([(params["output_volume"] ?? null)].join('')),
        hits_vol: ((params["hits_volume"] ?? null) !== null) ? execution.outputFile([(params["hits_volume"] ?? null)].join('')) : null,
        label_stat_vol: ((params["label_stat_volume"] ?? null) !== null) ? execution.outputFile([(params["label_stat_volume"] ?? null)].join('')) : null,
    };
    return ret;
}


function mri_label2vol_execute(
    params: MriLabel2volParameters,
    execution: Execution,
): MriLabel2volOutputs {
    /**
     * Converts a label or a set of labels into a volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriLabel2volOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_label2vol_cargs(params, execution)
    const ret = mri_label2vol_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_label2vol(
    template: InputPathType,
    output_volume: string,
    labels: Array<string> | null = null,
    annotation: InputPathType | null = null,
    segmentation: InputPathType | null = null,
    registration: InputPathType | null = null,
    identity_flag: boolean = false,
    fill_threshold: number | null = null,
    label_vox_vol: number | null = null,
    projection: string | null = null,
    subject: string | null = null,
    hemisphere: string | null = null,
    hits_volume: string | null = null,
    label_stat_volume: string | null = null,
    stat_threshold: number | null = null,
    offset: number | null = null,
    defects: string | null = null,
    native_vox2ras_flag: boolean = false,
    runner: Runner | null = null,
): MriLabel2volOutputs {
    /**
     * Converts a label or a set of labels into a volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param template Template volume; the output will have the same size and geometry.
     * @param output_volume Output volume in which each voxel will have the number of the label to which it is assigned.
     * @param labels Enter the name of the label file. For multiple labels, use multiple --label flags.
     * @param annotation Surface annotation file. Use this to input annotations directly.
     * @param segmentation Path to input segmentation.
     * @param registration tkregister-style registration matrix mapping LabelXYZ to VolXYZ.
     * @param identity_flag Use the identity matrix as the registration.
     * @param fill_threshold Threshold for voxel fill; a value between 0 and 1.
     * @param label_vox_vol Volume of each label point; default is 1mmÂ³.
     * @param projection Project the label along the surface normal. Type can be abs or frac.
     * @param subject FREESURFER subject identifier; needed with --proj.
     * @param hemisphere Hemisphere to use for --proj or --annot. Legal values are lh and rh.
     * @param hits_volume Hit volume, a multi-frame volume with one frame per label showing the number of hits per voxel.
     * @param label_stat_volume Map the label stats field into the volume.
     * @param stat_threshold Only use label point where stat > thresh.
     * @param offset Add offset to the segmentation numbers.
     * @param defects Creates a segmentation volume of the surface defects.
     * @param native_vox2ras_flag Use native voxel-to-RAS transform instead of tkregister-style.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriLabel2volOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LABEL2VOL_METADATA);
    const params = mri_label2vol_params(template, output_volume, labels, annotation, segmentation, registration, identity_flag, fill_threshold, label_vox_vol, projection, subject, hemisphere, hits_volume, label_stat_volume, stat_threshold, offset, defects, native_vox2ras_flag)
    return mri_label2vol_execute(params, execution);
}


export {
      MRI_LABEL2VOL_METADATA,
      MriLabel2volOutputs,
      MriLabel2volParameters,
      mri_label2vol,
      mri_label2vol_params,
};
