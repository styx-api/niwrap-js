// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_MERGE_METADATA: Metadata = {
    id: "a4ffb5e806ff58cf992a8408091b306432b7db9b.boutiques",
    name: "cifti-merge",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiMergeUpToParameters {
    "@type"?: "up_to";
    "last_index": string;
    "opt_reverse": boolean;
}
type CiftiMergeUpToParametersTagged = Required<Pick<CiftiMergeUpToParameters, '@type'>> & CiftiMergeUpToParameters;


interface CiftiMergeIndexParameters {
    "@type"?: "index";
    "index": string;
    "up_to"?: CiftiMergeUpToParameters | null | undefined;
}
type CiftiMergeIndexParametersTagged = Required<Pick<CiftiMergeIndexParameters, '@type'>> & CiftiMergeIndexParameters;


interface CiftiMergeCiftiParameters {
    "@type"?: "cifti";
    "cifti_in": InputPathType;
    "index"?: Array<CiftiMergeIndexParameters> | null | undefined;
}
type CiftiMergeCiftiParametersTagged = Required<Pick<CiftiMergeCiftiParameters, '@type'>> & CiftiMergeCiftiParameters;


interface CiftiMergeParameters {
    "@type"?: "workbench/cifti-merge";
    "cifti_out": string;
    "opt_direction_direction"?: string | null | undefined;
    "opt_mem_limit_limit_gb"?: number | null | undefined;
    "cifti"?: Array<CiftiMergeCiftiParameters> | null | undefined;
}
type CiftiMergeParametersTagged = Required<Pick<CiftiMergeParameters, '@type'>> & CiftiMergeParameters;


/**
 * Build parameters.
 *
 * @param last_index the number or name of the last index to include
 * @param opt_reverse use the range in reverse order
 *
 * @returns Parameter dictionary
 */
function cifti_merge_up_to_params(
    last_index: string,
    opt_reverse: boolean = false,
): CiftiMergeUpToParametersTagged {
    const params = {
        "@type": "up_to" as const,
        "last_index": last_index,
        "opt_reverse": opt_reverse,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_merge_up_to_cargs(
    params: CiftiMergeUpToParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-up-to");
    cargs.push((params["last_index"] ?? null));
    if ((params["opt_reverse"] ?? false)) {
        cargs.push("-reverse");
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param index the index number (starting from 1), or name
 * @param up_to use an inclusive range of indices
 *
 * @returns Parameter dictionary
 */
function cifti_merge_index_params(
    index: string,
    up_to: CiftiMergeUpToParameters | null = null,
): CiftiMergeIndexParametersTagged {
    const params = {
        "@type": "index" as const,
        "index": index,
    };
    if (up_to !== null) {
        params["up_to"] = up_to;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_merge_index_cargs(
    params: CiftiMergeIndexParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-index");
    cargs.push((params["index"] ?? null));
    if ((params["up_to"] ?? null) !== null) {
        cargs.push(...cifti_merge_up_to_cargs((params["up_to"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param cifti_in a cifti file to use data from
 * @param index select a single index to use
 *
 * @returns Parameter dictionary
 */
function cifti_merge_cifti_params(
    cifti_in: InputPathType,
    index: Array<CiftiMergeIndexParameters> | null = null,
): CiftiMergeCiftiParametersTagged {
    const params = {
        "@type": "cifti" as const,
        "cifti_in": cifti_in,
    };
    if (index !== null) {
        params["index"] = index;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_merge_cifti_cargs(
    params: CiftiMergeCiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cifti");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    if ((params["index"] ?? null) !== null) {
        cargs.push(...(params["index"] ?? null).map(s => cifti_merge_index_cargs(s, execution)).flat());
    }
    return cargs;
}


/**
 * Output object returned when calling `CiftiMergeParameters(...)`.
 *
 * @interface
 */
interface CiftiMergeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti file
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_out output cifti file
 * @param opt_direction_direction merge in a direction other than along rows: the dimension to split/concatenate along, default ROW
 * @param opt_mem_limit_limit_gb restrict memory used for file reading efficiency: memory limit in gigabytes
 * @param cifti specify an input cifti file
 *
 * @returns Parameter dictionary
 */
function cifti_merge_params(
    cifti_out: string,
    opt_direction_direction: string | null = null,
    opt_mem_limit_limit_gb: number | null = null,
    cifti: Array<CiftiMergeCiftiParameters> | null = null,
): CiftiMergeParametersTagged {
    const params = {
        "@type": "workbench/cifti-merge" as const,
        "cifti_out": cifti_out,
    };
    if (opt_direction_direction !== null) {
        params["opt_direction_direction"] = opt_direction_direction;
    }
    if (opt_mem_limit_limit_gb !== null) {
        params["opt_mem_limit_limit_gb"] = opt_mem_limit_limit_gb;
    }
    if (cifti !== null) {
        params["cifti"] = cifti;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_merge_cargs(
    params: CiftiMergeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-merge");
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_direction_direction"] ?? null) !== null) {
        cargs.push(
            "-direction",
            (params["opt_direction_direction"] ?? null)
        );
    }
    if ((params["opt_mem_limit_limit_gb"] ?? null) !== null) {
        cargs.push(
            "-mem-limit",
            String((params["opt_mem_limit_limit_gb"] ?? null))
        );
    }
    if ((params["cifti"] ?? null) !== null) {
        cargs.push(...(params["cifti"] ?? null).map(s => cifti_merge_cifti_cargs(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_merge_outputs(
    params: CiftiMergeParameters,
    execution: Execution,
): CiftiMergeOutputs {
    const ret: CiftiMergeOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-merge
 *
 * Merge or split on series, scalar, or label dimensions.
 *
 * Given input CIFTI files for which mappings along the selected direction are the same type, all either series, scalars, or labels, and the other dimensions are index-compatible, this command concatenates the data in the specified indices/ranges along the selected direction (by default, on typical 2D cifti, concatenate horizontally, so rows become longer).  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
 *
 * Example: wb_command -cifti-merge out.dtseries.nii -cifti first.dtseries.nii -index 1 -cifti second.dtseries.nii
 *
 * This example would take the first column from first.dtseries.nii, followed by all columns from second.dtseries.nii, and write these columns to out.dtseries.nii.  .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiMergeOutputs`).
 */
function cifti_merge_execute(
    params: CiftiMergeParameters,
    runner: Runner | null = null,
): CiftiMergeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_MERGE_METADATA);
    params = execution.params(params)
    const cargs = cifti_merge_cargs(params, execution)
    const ret = cifti_merge_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-merge
 *
 * Merge or split on series, scalar, or label dimensions.
 *
 * Given input CIFTI files for which mappings along the selected direction are the same type, all either series, scalars, or labels, and the other dimensions are index-compatible, this command concatenates the data in the specified indices/ranges along the selected direction (by default, on typical 2D cifti, concatenate horizontally, so rows become longer).  The direction can be either an integer starting from 1, or the strings 'ROW' or 'COLUMN'.
 *
 * Example: wb_command -cifti-merge out.dtseries.nii -cifti first.dtseries.nii -index 1 -cifti second.dtseries.nii
 *
 * This example would take the first column from first.dtseries.nii, followed by all columns from second.dtseries.nii, and write these columns to out.dtseries.nii.  .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_out output cifti file
 * @param opt_direction_direction merge in a direction other than along rows: the dimension to split/concatenate along, default ROW
 * @param opt_mem_limit_limit_gb restrict memory used for file reading efficiency: memory limit in gigabytes
 * @param cifti specify an input cifti file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiMergeOutputs`).
 */
function cifti_merge(
    cifti_out: string,
    opt_direction_direction: string | null = null,
    opt_mem_limit_limit_gb: number | null = null,
    cifti: Array<CiftiMergeCiftiParameters> | null = null,
    runner: Runner | null = null,
): CiftiMergeOutputs {
    const params = cifti_merge_params(cifti_out, opt_direction_direction, opt_mem_limit_limit_gb, cifti)
    return cifti_merge_execute(params, runner);
}


export {
      CIFTI_MERGE_METADATA,
      CiftiMergeOutputs,
      cifti_merge,
      cifti_merge_cifti_params,
      cifti_merge_execute,
      cifti_merge_index_params,
      cifti_merge_params,
      cifti_merge_up_to_params,
};
