// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_LABEL_MODE_METADATA: Metadata = {
    id: "6edab91d606ca7c4a36e17024963e26907e58292.boutiques",
    name: "mris_label_mode",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisLabelModeParameters {
    "@type"?: "freesurfer/mris_label_mode";
    "input_curv_file": InputPathType;
    "hemi": string;
    "surface": string;
    "subject": Array<string>;
    "output_curv_file": string;
    "summary_statistics": boolean;
    "statistics_cond"?: string | null | undefined;
    "output_directory"?: string | null | undefined;
}
type MrisLabelModeParametersTagged = Required<Pick<MrisLabelModeParameters, '@type'>> & MrisLabelModeParameters;


/**
 * Output object returned when calling `MrisLabelModeParameters(...)`.
 *
 * @interface
 */
interface MrisLabelModeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_curv_file Input curvature file
 * @param hemi Hemisphere
 * @param surface Surface name
 * @param subject Subject name(s)
 * @param output_curv_file Output curvature file
 * @param summary_statistics Generate summary statistics
 * @param statistics_cond Condition number for summary statistics
 * @param output_directory Override the last subject as the output surface
 *
 * @returns Parameter dictionary
 */
function mris_label_mode_params(
    input_curv_file: InputPathType,
    hemi: string,
    surface: string,
    subject: Array<string>,
    output_curv_file: string,
    summary_statistics: boolean = false,
    statistics_cond: string | null = null,
    output_directory: string | null = null,
): MrisLabelModeParametersTagged {
    const params = {
        "@type": "freesurfer/mris_label_mode" as const,
        "input_curv_file": input_curv_file,
        "hemi": hemi,
        "surface": surface,
        "subject": subject,
        "output_curv_file": output_curv_file,
        "summary_statistics": summary_statistics,
    };
    if (statistics_cond !== null) {
        params["statistics_cond"] = statistics_cond;
    }
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_label_mode_cargs(
    params: MrisLabelModeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_label_mode");
    cargs.push(execution.inputFile((params["input_curv_file"] ?? null)));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["surface"] ?? null));
    cargs.push(...(params["subject"] ?? null));
    cargs.push((params["output_curv_file"] ?? null));
    if ((params["summary_statistics"] ?? false)) {
        cargs.push("-s");
    }
    if ((params["statistics_cond"] ?? null) !== null) {
        cargs.push((params["statistics_cond"] ?? null));
    }
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_directory"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_label_mode_outputs(
    params: MrisLabelModeParameters,
    execution: Execution,
): MrisLabelModeOutputs {
    const ret: MrisLabelModeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mris_label_mode
 *
 * This program will add a template into an average surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisLabelModeOutputs`).
 */
function mris_label_mode_execute(
    params: MrisLabelModeParameters,
    runner: Runner | null = null,
): MrisLabelModeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_LABEL_MODE_METADATA);
    params = execution.params(params)
    const cargs = mris_label_mode_cargs(params, execution)
    const ret = mris_label_mode_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_label_mode
 *
 * This program will add a template into an average surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_curv_file Input curvature file
 * @param hemi Hemisphere
 * @param surface Surface name
 * @param subject Subject name(s)
 * @param output_curv_file Output curvature file
 * @param summary_statistics Generate summary statistics
 * @param statistics_cond Condition number for summary statistics
 * @param output_directory Override the last subject as the output surface
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisLabelModeOutputs`).
 */
function mris_label_mode(
    input_curv_file: InputPathType,
    hemi: string,
    surface: string,
    subject: Array<string>,
    output_curv_file: string,
    summary_statistics: boolean = false,
    statistics_cond: string | null = null,
    output_directory: string | null = null,
    runner: Runner | null = null,
): MrisLabelModeOutputs {
    const params = mris_label_mode_params(input_curv_file, hemi, surface, subject, output_curv_file, summary_statistics, statistics_cond, output_directory)
    return mris_label_mode_execute(params, runner);
}


export {
      MRIS_LABEL_MODE_METADATA,
      MrisLabelModeOutputs,
      mris_label_mode,
      mris_label_mode_execute,
      mris_label_mode_params,
};
