// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REMOVE_TALAIRACH_METADATA: Metadata = {
    id: "980bfba14f04b23a9f4dac31030b29a4173a4cc5.boutiques",
    name: "remove_talairach",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RemoveTalairachParameters {
    "@type"?: "freesurfer/remove_talairach";
    "input_file": InputPathType;
    "output_file": string;
}
type RemoveTalairachParametersTagged = Required<Pick<RemoveTalairachParameters, '@type'>> & RemoveTalairachParameters;


/**
 * Output object returned when calling `RemoveTalairachParameters(...)`.
 *
 * @interface
 */
interface RemoveTalairachOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume with Talairach transformation removed
     */
    output_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input volume with Talairach transformation (e.g., volume.nii)
 * @param output_file Output volume after removing Talairach transformation (e.g., volume_notal.nii)
 *
 * @returns Parameter dictionary
 */
function remove_talairach_params(
    input_file: InputPathType,
    output_file: string,
): RemoveTalairachParametersTagged {
    const params = {
        "@type": "freesurfer/remove_talairach" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function remove_talairach_cargs(
    params: RemoveTalairachParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("remove_talairach");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function remove_talairach_outputs(
    params: RemoveTalairachParameters,
    execution: Execution,
): RemoveTalairachOutputs {
    const ret: RemoveTalairachOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * remove_talairach
 *
 * A tool for removing the Talairach transformation from a volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RemoveTalairachOutputs`).
 */
function remove_talairach_execute(
    params: RemoveTalairachParameters,
    runner: Runner | null = null,
): RemoveTalairachOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REMOVE_TALAIRACH_METADATA);
    params = execution.params(params)
    const cargs = remove_talairach_cargs(params, execution)
    const ret = remove_talairach_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * remove_talairach
 *
 * A tool for removing the Talairach transformation from a volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input volume with Talairach transformation (e.g., volume.nii)
 * @param output_file Output volume after removing Talairach transformation (e.g., volume_notal.nii)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RemoveTalairachOutputs`).
 */
function remove_talairach(
    input_file: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): RemoveTalairachOutputs {
    const params = remove_talairach_params(input_file, output_file)
    return remove_talairach_execute(params, runner);
}


export {
      REMOVE_TALAIRACH_METADATA,
      RemoveTalairachOutputs,
      remove_talairach,
      remove_talairach_execute,
      remove_talairach_params,
};
