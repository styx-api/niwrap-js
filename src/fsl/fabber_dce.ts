// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FABBER_DCE_METADATA: Metadata = {
    id: "8503b8f2dd7017cdd9be4bac37b326badcc8e524.boutiques",
    name: "fabber_dce",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FabberDceParameters {
    "__STYXTYPE__": "fabber_dce";
    "output_directory": string;
    "inference_method": string;
    "forward_model": string;
    "input_data": InputPathType;
    "help_flag": boolean;
    "list_methods": boolean;
    "list_models": boolean;
    "list_params": boolean;
    "describe_params": boolean;
    "list_outputs": boolean;
    "evaluate_model"?: string | null | undefined;
    "evaluate_params"?: Array<number> | null | undefined;
    "evaluate_nt"?: number | null | undefined;
    "simple_output": boolean;
    "overwrite": boolean;
    "link_to_latest": boolean;
    "load_models"?: InputPathType | null | undefined;
    "multiple_data"?: Array<InputPathType> | null | undefined;
    "data_order"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "masked_time_points"?: Array<number> | null | undefined;
    "supplemental_data"?: InputPathType | null | undefined;
    "dump_param_names": boolean;
    "save_model_fit": boolean;
    "save_residuals": boolean;
    "save_model_extras": boolean;
    "save_mvn": boolean;
    "save_mean": boolean;
    "save_std": boolean;
    "save_variances": boolean;
    "save_zstat": boolean;
    "save_noise_mean": boolean;
    "save_noise_std": boolean;
    "save_free_energy": boolean;
    "option_file"?: InputPathType | null | undefined;
    "debug": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fabber_dce": fabber_dce_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fabber_dce": fabber_dce_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fabber_dce(...)`.
 *
 * @interface
 */
interface FabberDceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Files generated by Fabber DCE
     */
    output_files: OutputPathType;
}


function fabber_dce_params(
    output_directory: string,
    inference_method: string,
    forward_model: string,
    input_data: InputPathType,
    help_flag: boolean = false,
    list_methods: boolean = false,
    list_models: boolean = false,
    list_params: boolean = false,
    describe_params: boolean = false,
    list_outputs: boolean = false,
    evaluate_model: string | null = null,
    evaluate_params: Array<number> | null = null,
    evaluate_nt: number | null = null,
    simple_output: boolean = false,
    overwrite: boolean = false,
    link_to_latest: boolean = false,
    load_models: InputPathType | null = null,
    multiple_data: Array<InputPathType> | null = null,
    data_order: string | null = "interleave",
    mask: InputPathType | null = null,
    masked_time_points: Array<number> | null = null,
    supplemental_data: InputPathType | null = null,
    dump_param_names: boolean = false,
    save_model_fit: boolean = false,
    save_residuals: boolean = false,
    save_model_extras: boolean = false,
    save_mvn: boolean = false,
    save_mean: boolean = false,
    save_std: boolean = false,
    save_variances: boolean = false,
    save_zstat: boolean = false,
    save_noise_mean: boolean = false,
    save_noise_std: boolean = false,
    save_free_energy: boolean = false,
    option_file: InputPathType | null = null,
    debug: boolean = false,
): FabberDceParameters {
    /**
     * Build parameters.
    
     * @param output_directory Directory for output files (including logfile)
     * @param inference_method Inference method to use
     * @param forward_model Forward model to use
     * @param input_data Single input data file
     * @param help_flag Print this usage message
     * @param list_methods List all known inference methods
     * @param list_models List all known forward models
     * @param list_params List model parameters (requires model configuration options to be given)
     * @param describe_params Describe model parameters (name, description, units) - requires model configuration options to be given
     * @param list_outputs List additional model outputs (requires model configuration options to be given)
     * @param evaluate_model Evaluate model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
     * @param evaluate_params List of parameter values for evaluation
     * @param evaluate_nt Number of time points for evaluation - must be consistent with model options where appropriate
     * @param simple_output Instead of usual output, simply output series of lines each giving progress as percentage
     * @param overwrite If set will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
     * @param link_to_latest Try to create a link to the most recent output directory with the prefix _latest
     * @param load_models Load models dynamically from the specified filename, which should be a DLL/shared library
     * @param multiple_data Specify multiple data files for n=1, 2, 3...
     * @param data_order If multiple data files are specified, how they will be handled: concatenate = one after the other, interleave = first record from each file, then second, etc.
     * @param mask Mask file. Inference will only be performed where mask value > 0
     * @param masked_time_points List of masked time points, indexed from 1. These will be ignored in the parameter updates
     * @param supplemental_data 'Supplemental' timeseries data, required for some models
     * @param dump_param_names Write the file paramnames.txt containing the names of the model parameters
     * @param save_model_fit Output the model prediction as a 4D volume
     * @param save_residuals Output the residuals (difference between the data and the model prediction)
     * @param save_model_extras Output any additional model-specific timeseries data
     * @param save_mvn Output the final MVN distributions.
     * @param save_mean Output the parameter means.
     * @param save_std Output the parameter standard deviations.
     * @param save_variances Output the parameter variances.
     * @param save_zstat Output the parameter Z-stats.
     * @param save_noise_mean Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source.
     * @param save_noise_std Output the noise standard deviations.
     * @param save_free_energy Output the free energy, if calculated.
     * @param option_file File containing additional options, one per line, in the same form as specified on the command line
     * @param debug Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fabber_dce" as const,
        "output_directory": output_directory,
        "inference_method": inference_method,
        "forward_model": forward_model,
        "input_data": input_data,
        "help_flag": help_flag,
        "list_methods": list_methods,
        "list_models": list_models,
        "list_params": list_params,
        "describe_params": describe_params,
        "list_outputs": list_outputs,
        "simple_output": simple_output,
        "overwrite": overwrite,
        "link_to_latest": link_to_latest,
        "dump_param_names": dump_param_names,
        "save_model_fit": save_model_fit,
        "save_residuals": save_residuals,
        "save_model_extras": save_model_extras,
        "save_mvn": save_mvn,
        "save_mean": save_mean,
        "save_std": save_std,
        "save_variances": save_variances,
        "save_zstat": save_zstat,
        "save_noise_mean": save_noise_mean,
        "save_noise_std": save_noise_std,
        "save_free_energy": save_free_energy,
        "debug": debug,
    };
    if (evaluate_model !== null) {
        params["evaluate_model"] = evaluate_model;
    }
    if (evaluate_params !== null) {
        params["evaluate_params"] = evaluate_params;
    }
    if (evaluate_nt !== null) {
        params["evaluate_nt"] = evaluate_nt;
    }
    if (load_models !== null) {
        params["load_models"] = load_models;
    }
    if (multiple_data !== null) {
        params["multiple_data"] = multiple_data;
    }
    if (data_order !== null) {
        params["data_order"] = data_order;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (masked_time_points !== null) {
        params["masked_time_points"] = masked_time_points;
    }
    if (supplemental_data !== null) {
        params["supplemental_data"] = supplemental_data;
    }
    if (option_file !== null) {
        params["option_file"] = option_file;
    }
    return params;
}


function fabber_dce_cargs(
    params: FabberDceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fabber_dce");
    cargs.push(
        "--output",
        (params["output_directory"] ?? null)
    );
    cargs.push(
        "--method",
        (params["inference_method"] ?? null)
    );
    cargs.push(
        "--model",
        (params["forward_model"] ?? null)
    );
    cargs.push(
        "--data",
        execution.inputFile((params["input_data"] ?? null))
    );
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["list_methods"] ?? null)) {
        cargs.push("--listmethods");
    }
    if ((params["list_models"] ?? null)) {
        cargs.push("--listmodels");
    }
    if ((params["list_params"] ?? null)) {
        cargs.push("--listparams");
    }
    if ((params["describe_params"] ?? null)) {
        cargs.push("--descparams");
    }
    if ((params["list_outputs"] ?? null)) {
        cargs.push("--listoutputs");
    }
    if ((params["evaluate_model"] ?? null) !== null) {
        cargs.push(
            "--evaluate",
            (params["evaluate_model"] ?? null)
        );
    }
    if ((params["evaluate_params"] ?? null) !== null) {
        cargs.push(
            "--evaluate-params",
            ...(params["evaluate_params"] ?? null).map(String)
        );
    }
    if ((params["evaluate_nt"] ?? null) !== null) {
        cargs.push(
            "--evaluate-nt",
            String((params["evaluate_nt"] ?? null))
        );
    }
    if ((params["simple_output"] ?? null)) {
        cargs.push("--simple-output");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("--overwrite");
    }
    if ((params["link_to_latest"] ?? null)) {
        cargs.push("--link-to-latest");
    }
    if ((params["load_models"] ?? null) !== null) {
        cargs.push(
            "--loadmodels",
            execution.inputFile((params["load_models"] ?? null))
        );
    }
    if ((params["multiple_data"] ?? null) !== null) {
        cargs.push(
            "--data<n>",
            ...(params["multiple_data"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["data_order"] ?? null) !== null) {
        cargs.push(
            "--data-order",
            (params["data_order"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["masked_time_points"] ?? null) !== null) {
        cargs.push(
            "--mt<n>",
            ...(params["masked_time_points"] ?? null).map(String)
        );
    }
    if ((params["supplemental_data"] ?? null) !== null) {
        cargs.push(
            "--suppdata",
            execution.inputFile((params["supplemental_data"] ?? null))
        );
    }
    if ((params["dump_param_names"] ?? null)) {
        cargs.push("--dump-param-names");
    }
    if ((params["save_model_fit"] ?? null)) {
        cargs.push("--save-model-fit");
    }
    if ((params["save_residuals"] ?? null)) {
        cargs.push("--save-residuals");
    }
    if ((params["save_model_extras"] ?? null)) {
        cargs.push("--save-model-extras");
    }
    if ((params["save_mvn"] ?? null)) {
        cargs.push("--save-mvn");
    }
    if ((params["save_mean"] ?? null)) {
        cargs.push("--save-mean");
    }
    if ((params["save_std"] ?? null)) {
        cargs.push("--save-std");
    }
    if ((params["save_variances"] ?? null)) {
        cargs.push("--save-var");
    }
    if ((params["save_zstat"] ?? null)) {
        cargs.push("--save-zstat");
    }
    if ((params["save_noise_mean"] ?? null)) {
        cargs.push("--save-noise-mean");
    }
    if ((params["save_noise_std"] ?? null)) {
        cargs.push("--save-noise-std");
    }
    if ((params["save_free_energy"] ?? null)) {
        cargs.push("--save-free-energy");
    }
    if ((params["option_file"] ?? null) !== null) {
        cargs.push(
            "--optfile",
            execution.inputFile((params["option_file"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    return cargs;
}


function fabber_dce_outputs(
    params: FabberDceParameters,
    execution: Execution,
): FabberDceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FabberDceOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile([(params["output_directory"] ?? null), "/*"].join('')),
    };
    return ret;
}


function fabber_dce_execute(
    params: FabberDceParameters,
    execution: Execution,
): FabberDceOutputs {
    /**
     * Fabber DCE analysis tool for model-based analysis of dynamic contrast-enhanced imaging data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FabberDceOutputs`).
     */
    params = execution.params(params)
    const cargs = fabber_dce_cargs(params, execution)
    const ret = fabber_dce_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fabber_dce(
    output_directory: string,
    inference_method: string,
    forward_model: string,
    input_data: InputPathType,
    help_flag: boolean = false,
    list_methods: boolean = false,
    list_models: boolean = false,
    list_params: boolean = false,
    describe_params: boolean = false,
    list_outputs: boolean = false,
    evaluate_model: string | null = null,
    evaluate_params: Array<number> | null = null,
    evaluate_nt: number | null = null,
    simple_output: boolean = false,
    overwrite: boolean = false,
    link_to_latest: boolean = false,
    load_models: InputPathType | null = null,
    multiple_data: Array<InputPathType> | null = null,
    data_order: string | null = "interleave",
    mask: InputPathType | null = null,
    masked_time_points: Array<number> | null = null,
    supplemental_data: InputPathType | null = null,
    dump_param_names: boolean = false,
    save_model_fit: boolean = false,
    save_residuals: boolean = false,
    save_model_extras: boolean = false,
    save_mvn: boolean = false,
    save_mean: boolean = false,
    save_std: boolean = false,
    save_variances: boolean = false,
    save_zstat: boolean = false,
    save_noise_mean: boolean = false,
    save_noise_std: boolean = false,
    save_free_energy: boolean = false,
    option_file: InputPathType | null = null,
    debug: boolean = false,
    runner: Runner | null = null,
): FabberDceOutputs {
    /**
     * Fabber DCE analysis tool for model-based analysis of dynamic contrast-enhanced imaging data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param output_directory Directory for output files (including logfile)
     * @param inference_method Inference method to use
     * @param forward_model Forward model to use
     * @param input_data Single input data file
     * @param help_flag Print this usage message
     * @param list_methods List all known inference methods
     * @param list_models List all known forward models
     * @param list_params List model parameters (requires model configuration options to be given)
     * @param describe_params Describe model parameters (name, description, units) - requires model configuration options to be given
     * @param list_outputs List additional model outputs (requires model configuration options to be given)
     * @param evaluate_model Evaluate model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
     * @param evaluate_params List of parameter values for evaluation
     * @param evaluate_nt Number of time points for evaluation - must be consistent with model options where appropriate
     * @param simple_output Instead of usual output, simply output series of lines each giving progress as percentage
     * @param overwrite If set will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
     * @param link_to_latest Try to create a link to the most recent output directory with the prefix _latest
     * @param load_models Load models dynamically from the specified filename, which should be a DLL/shared library
     * @param multiple_data Specify multiple data files for n=1, 2, 3...
     * @param data_order If multiple data files are specified, how they will be handled: concatenate = one after the other, interleave = first record from each file, then second, etc.
     * @param mask Mask file. Inference will only be performed where mask value > 0
     * @param masked_time_points List of masked time points, indexed from 1. These will be ignored in the parameter updates
     * @param supplemental_data 'Supplemental' timeseries data, required for some models
     * @param dump_param_names Write the file paramnames.txt containing the names of the model parameters
     * @param save_model_fit Output the model prediction as a 4D volume
     * @param save_residuals Output the residuals (difference between the data and the model prediction)
     * @param save_model_extras Output any additional model-specific timeseries data
     * @param save_mvn Output the final MVN distributions.
     * @param save_mean Output the parameter means.
     * @param save_std Output the parameter standard deviations.
     * @param save_variances Output the parameter variances.
     * @param save_zstat Output the parameter Z-stats.
     * @param save_noise_mean Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source.
     * @param save_noise_std Output the noise standard deviations.
     * @param save_free_energy Output the free energy, if calculated.
     * @param option_file File containing additional options, one per line, in the same form as specified on the command line
     * @param debug Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FabberDceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FABBER_DCE_METADATA);
    const params = fabber_dce_params(output_directory, inference_method, forward_model, input_data, help_flag, list_methods, list_models, list_params, describe_params, list_outputs, evaluate_model, evaluate_params, evaluate_nt, simple_output, overwrite, link_to_latest, load_models, multiple_data, data_order, mask, masked_time_points, supplemental_data, dump_param_names, save_model_fit, save_residuals, save_model_extras, save_mvn, save_mean, save_std, save_variances, save_zstat, save_noise_mean, save_noise_std, save_free_energy, option_file, debug)
    return fabber_dce_execute(params, execution);
}


export {
      FABBER_DCE_METADATA,
      FabberDceOutputs,
      FabberDceParameters,
      fabber_dce,
      fabber_dce_params,
};
