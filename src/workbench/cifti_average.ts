// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_AVERAGE_METADATA: Metadata = {
    id: "e8987396c5ff3a27080f32d2b0e28b39d20a3cb7.boutiques",
    name: "cifti-average",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiAverageExcludeOutliersParameters {
    "__STYXTYPE__": "exclude_outliers";
    "sigma_below": number;
    "sigma_above": number;
}


interface CiftiAverageCiftiParameters {
    "__STYXTYPE__": "cifti";
    "cifti_in": InputPathType;
    "opt_weight_weight"?: number | null | undefined;
}


interface CiftiAverageParameters {
    "__STYXTYPE__": "cifti-average";
    "cifti_out": string;
    "exclude_outliers"?: CiftiAverageExcludeOutliersParameters | null | undefined;
    "opt_mem_limit_limit_gb"?: number | null | undefined;
    "cifti"?: Array<CiftiAverageCiftiParameters> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cifti-average": cifti_average_cargs,
        "exclude_outliers": cifti_average_exclude_outliers_cargs,
        "cifti": cifti_average_cifti_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "cifti-average": cifti_average_outputs,
    };
    return outputsFuncs[t];
}


function cifti_average_exclude_outliers_params(
    sigma_below: number,
    sigma_above: number,
): CiftiAverageExcludeOutliersParameters {
    /**
     * Build parameters.
    
     * @param sigma_below number of standard deviations below the mean to include
     * @param sigma_above number of standard deviations above the mean to include
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "exclude_outliers" as const,
        "sigma_below": sigma_below,
        "sigma_above": sigma_above,
    };
    return params;
}


function cifti_average_exclude_outliers_cargs(
    params: CiftiAverageExcludeOutliersParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-exclude-outliers");
    cargs.push(String((params["sigma_below"] ?? null)));
    cargs.push(String((params["sigma_above"] ?? null)));
    return cargs;
}


function cifti_average_cifti_params(
    cifti_in: InputPathType,
    opt_weight_weight: number | null = null,
): CiftiAverageCiftiParameters {
    /**
     * Build parameters.
    
     * @param cifti_in the input cifti file
     * @param opt_weight_weight give a weight for this file: the weight to use
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti" as const,
        "cifti_in": cifti_in,
    };
    if (opt_weight_weight !== null) {
        params["opt_weight_weight"] = opt_weight_weight;
    }
    return params;
}


function cifti_average_cifti_cargs(
    params: CiftiAverageCiftiParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-cifti");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    if ((params["opt_weight_weight"] ?? null) !== null) {
        cargs.push(
            "-weight",
            String((params["opt_weight_weight"] ?? null))
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `cifti_average(...)`.
 *
 * @interface
 */
interface CiftiAverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti file
     */
    cifti_out: OutputPathType;
}


function cifti_average_params(
    cifti_out: string,
    exclude_outliers: CiftiAverageExcludeOutliersParameters | null = null,
    opt_mem_limit_limit_gb: number | null = null,
    cifti: Array<CiftiAverageCiftiParameters> | null = null,
): CiftiAverageParameters {
    /**
     * Build parameters.
    
     * @param cifti_out output cifti file
     * @param exclude_outliers exclude outliers by standard deviation of each element across files
     * @param opt_mem_limit_limit_gb restrict memory used for file reading efficiency: memory limit in gigabytes
     * @param cifti specify an input file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti-average" as const,
        "cifti_out": cifti_out,
    };
    if (exclude_outliers !== null) {
        params["exclude_outliers"] = exclude_outliers;
    }
    if (opt_mem_limit_limit_gb !== null) {
        params["opt_mem_limit_limit_gb"] = opt_mem_limit_limit_gb;
    }
    if (cifti !== null) {
        params["cifti"] = cifti;
    }
    return params;
}


function cifti_average_cargs(
    params: CiftiAverageParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-average");
    cargs.push((params["cifti_out"] ?? null));
    if ((params["exclude_outliers"] ?? null) !== null) {
        cargs.push(...dynCargs((params["exclude_outliers"] ?? null).__STYXTYPE__)((params["exclude_outliers"] ?? null), execution));
    }
    if ((params["opt_mem_limit_limit_gb"] ?? null) !== null) {
        cargs.push(
            "-mem-limit",
            String((params["opt_mem_limit_limit_gb"] ?? null))
        );
    }
    if ((params["cifti"] ?? null) !== null) {
        cargs.push(...(params["cifti"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    return cargs;
}


function cifti_average_outputs(
    params: CiftiAverageParameters,
    execution: Execution,
): CiftiAverageOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CiftiAverageOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


function cifti_average_execute(
    params: CiftiAverageParameters,
    execution: Execution,
): CiftiAverageOutputs {
    /**
     * Average cifti files.
     * 
     * Averages cifti files together.  Files without -weight specified are given a weight of 1.  If -exclude-outliers is specified, at each element, the data across all files is taken as a set, its unweighted mean and sample standard deviation are found, and values outside the specified number of standard deviations are excluded from the (potentially weighted) average at that element.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CiftiAverageOutputs`).
     */
    params = execution.params(params)
    const cargs = cifti_average_cargs(params, execution)
    const ret = cifti_average_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cifti_average(
    cifti_out: string,
    exclude_outliers: CiftiAverageExcludeOutliersParameters | null = null,
    opt_mem_limit_limit_gb: number | null = null,
    cifti: Array<CiftiAverageCiftiParameters> | null = null,
    runner: Runner | null = null,
): CiftiAverageOutputs {
    /**
     * Average cifti files.
     * 
     * Averages cifti files together.  Files without -weight specified are given a weight of 1.  If -exclude-outliers is specified, at each element, the data across all files is taken as a set, its unweighted mean and sample standard deviation are found, and values outside the specified number of standard deviations are excluded from the (potentially weighted) average at that element.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param cifti_out output cifti file
     * @param exclude_outliers exclude outliers by standard deviation of each element across files
     * @param opt_mem_limit_limit_gb restrict memory used for file reading efficiency: memory limit in gigabytes
     * @param cifti specify an input file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CiftiAverageOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_AVERAGE_METADATA);
    const params = cifti_average_params(cifti_out, exclude_outliers, opt_mem_limit_limit_gb, cifti)
    return cifti_average_execute(params, execution);
}


export {
      CIFTI_AVERAGE_METADATA,
      CiftiAverageCiftiParameters,
      CiftiAverageExcludeOutliersParameters,
      CiftiAverageOutputs,
      CiftiAverageParameters,
      cifti_average,
      cifti_average_cifti_params,
      cifti_average_exclude_outliers_params,
      cifti_average_params,
};
