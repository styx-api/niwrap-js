// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICETIMER_METADATA: Metadata = {
    id: "4c58bd416c438fc3d8b3664e317bd8eaaa5287b6.boutiques",
    name: "slicetimer",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SlicetimerParameters {
    "@type": "fsl.slicetimer";
    "infile": InputPathType;
    "outfile"?: InputPathType | null | undefined;
    "verbose_flag": boolean;
    "down_flag": boolean;
    "tr_value"?: number | null | undefined;
    "direction"?: string | null | undefined;
    "odd_flag": boolean;
    "tcustom_file"?: InputPathType | null | undefined;
    "tglobal_value"?: number | null | undefined;
    "ocustom_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.slicetimer": slicetimer_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.slicetimer": slicetimer_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `slicetimer(...)`.
 *
 * @interface
 */
interface SlicetimerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output timeseries
     */
    output_timeseries: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infile Filename of input timeseries
 * @param outfile Filename of output timeseries
 * @param verbose_flag Switch on diagnostic messages
 * @param down_flag Reverse slice indexing (default is: slices were acquired bottom-up)
 * @param tr_value Specify TR of data - default is 3s
 * @param direction Direction of slice acquisition (x=1,y=2,z=3) - default is z
 * @param odd_flag Use interleaved acquisition
 * @param tcustom_file Filename of single-column slice timings, in fractions of TR, +ve values shift slices forward in time
 * @param tglobal_value Global shift in fraction of TR, (default is 0)
 * @param ocustom_file Filename of single-column custom interleave order file (first slice is referred to as 1 not 0)
 *
 * @returns Parameter dictionary
 */
function slicetimer_params(
    infile: InputPathType,
    outfile: InputPathType | null = null,
    verbose_flag: boolean = false,
    down_flag: boolean = false,
    tr_value: number | null = null,
    direction: string | null = null,
    odd_flag: boolean = false,
    tcustom_file: InputPathType | null = null,
    tglobal_value: number | null = null,
    ocustom_file: InputPathType | null = null,
): SlicetimerParameters {
    const params = {
        "@type": "fsl.slicetimer" as const,
        "infile": infile,
        "verbose_flag": verbose_flag,
        "down_flag": down_flag,
        "odd_flag": odd_flag,
    };
    if (outfile !== null) {
        params["outfile"] = outfile;
    }
    if (tr_value !== null) {
        params["tr_value"] = tr_value;
    }
    if (direction !== null) {
        params["direction"] = direction;
    }
    if (tcustom_file !== null) {
        params["tcustom_file"] = tcustom_file;
    }
    if (tglobal_value !== null) {
        params["tglobal_value"] = tglobal_value;
    }
    if (ocustom_file !== null) {
        params["ocustom_file"] = ocustom_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function slicetimer_cargs(
    params: SlicetimerParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("slicetimer");
    cargs.push(
        "-i",
        execution.inputFile((params["infile"] ?? null))
    );
    if ((params["outfile"] ?? null) !== null) {
        cargs.push(
            "-o",
            execution.inputFile((params["outfile"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["down_flag"] ?? null)) {
        cargs.push("--down");
    }
    if ((params["tr_value"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["tr_value"] ?? null))
        );
    }
    if ((params["direction"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["direction"] ?? null)
        );
    }
    if ((params["odd_flag"] ?? null)) {
        cargs.push("--odd");
    }
    if ((params["tcustom_file"] ?? null) !== null) {
        cargs.push(
            "--tcustom",
            execution.inputFile((params["tcustom_file"] ?? null))
        );
    }
    if ((params["tglobal_value"] ?? null) !== null) {
        cargs.push(
            "--tglobal",
            String((params["tglobal_value"] ?? null))
        );
    }
    if ((params["ocustom_file"] ?? null) !== null) {
        cargs.push(
            "--ocustom",
            execution.inputFile((params["ocustom_file"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function slicetimer_outputs(
    params: SlicetimerParameters,
    execution: Execution,
): SlicetimerOutputs {
    const ret: SlicetimerOutputs = {
        root: execution.outputFile("."),
        output_timeseries: ((params["outfile"] ?? null) !== null) ? execution.outputFile([path.basename((params["outfile"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * FMRIB's Interpolation for Slice Timing.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `SlicetimerOutputs`).
 */
function slicetimer_execute(
    params: SlicetimerParameters,
    execution: Execution,
): SlicetimerOutputs {
    params = execution.params(params)
    const cargs = slicetimer_cargs(params, execution)
    const ret = slicetimer_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * FMRIB's Interpolation for Slice Timing.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param infile Filename of input timeseries
 * @param outfile Filename of output timeseries
 * @param verbose_flag Switch on diagnostic messages
 * @param down_flag Reverse slice indexing (default is: slices were acquired bottom-up)
 * @param tr_value Specify TR of data - default is 3s
 * @param direction Direction of slice acquisition (x=1,y=2,z=3) - default is z
 * @param odd_flag Use interleaved acquisition
 * @param tcustom_file Filename of single-column slice timings, in fractions of TR, +ve values shift slices forward in time
 * @param tglobal_value Global shift in fraction of TR, (default is 0)
 * @param ocustom_file Filename of single-column custom interleave order file (first slice is referred to as 1 not 0)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlicetimerOutputs`).
 */
function slicetimer(
    infile: InputPathType,
    outfile: InputPathType | null = null,
    verbose_flag: boolean = false,
    down_flag: boolean = false,
    tr_value: number | null = null,
    direction: string | null = null,
    odd_flag: boolean = false,
    tcustom_file: InputPathType | null = null,
    tglobal_value: number | null = null,
    ocustom_file: InputPathType | null = null,
    runner: Runner | null = null,
): SlicetimerOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICETIMER_METADATA);
    const params = slicetimer_params(infile, outfile, verbose_flag, down_flag, tr_value, direction, odd_flag, tcustom_file, tglobal_value, ocustom_file)
    return slicetimer_execute(params, execution);
}


export {
      SLICETIMER_METADATA,
      SlicetimerOutputs,
      SlicetimerParameters,
      slicetimer,
      slicetimer_cargs,
      slicetimer_execute,
      slicetimer_outputs,
      slicetimer_params,
};
