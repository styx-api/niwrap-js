// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTSUSE_DEFORMATION_FIELD_TO_GET_AFFINE_TRANSFORM_METADATA: Metadata = {
    id: "33730edc7d31f068b95a970d8aa4ca5ece2c7a6f.boutiques",
    name: "ANTSUseDeformationFieldToGetAffineTransform",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsuseDeformationFieldToGetAffineTransformParameters {
    "@type"?: "ants/ANTSUseDeformationFieldToGetAffineTransform";
    "deformation_field": InputPathType;
    "load_ratio": number;
    "transform_type": "rigid" | "affine";
    "output_affine": string;
    "mask"?: InputPathType | null | undefined;
}
type AntsuseDeformationFieldToGetAffineTransformParametersTagged = Required<Pick<AntsuseDeformationFieldToGetAffineTransformParameters, '@type'>> & AntsuseDeformationFieldToGetAffineTransformParameters;


/**
 * Output object returned when calling `AntsuseDeformationFieldToGetAffineTransformParameters(...)`.
 *
 * @interface
 */
interface AntsuseDeformationFieldToGetAffineTransformOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output is the affine transformation matrix file.
     */
    out_affine_txt: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param deformation_field The input deformation field in NIfTI format (e.g., zzzWarp.nii.gz).
 * @param load_ratio Ratio of points to be loaded from deformation field to save memory (ex: 0.01).
 * @param transform_type Type of transform to be extracted. Can be 'rigid' or 'affine'.
 * @param output_affine The output file where the affine transform will be saved (e.g., OutAffine.txt).
 * @param mask Optional mask file defining the region from which points will be selected.
 *
 * @returns Parameter dictionary
 */
function antsuse_deformation_field_to_get_affine_transform_params(
    deformation_field: InputPathType,
    load_ratio: number,
    transform_type: "rigid" | "affine",
    output_affine: string,
    mask: InputPathType | null = null,
): AntsuseDeformationFieldToGetAffineTransformParametersTagged {
    const params = {
        "@type": "ants/ANTSUseDeformationFieldToGetAffineTransform" as const,
        "deformation_field": deformation_field,
        "load_ratio": load_ratio,
        "transform_type": transform_type,
        "output_affine": output_affine,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function antsuse_deformation_field_to_get_affine_transform_cargs(
    params: AntsuseDeformationFieldToGetAffineTransformParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ANTSUseDeformationFieldToGetAffineTransform");
    cargs.push(execution.inputFile((params["deformation_field"] ?? null)));
    cargs.push(String((params["load_ratio"] ?? null)));
    cargs.push((params["transform_type"] ?? null));
    cargs.push((params["output_affine"] ?? null));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function antsuse_deformation_field_to_get_affine_transform_outputs(
    params: AntsuseDeformationFieldToGetAffineTransformParameters,
    execution: Execution,
): AntsuseDeformationFieldToGetAffineTransformOutputs {
    const ret: AntsuseDeformationFieldToGetAffineTransformOutputs = {
        root: execution.outputFile("."),
        out_affine_txt: execution.outputFile([(params["output_affine"] ?? null)].join('')),
    };
    return ret;
}


/**
 * ANTSUseDeformationFieldToGetAffineTransform
 *
 * Extracts an affine transform from a deformation field. The input deformation field is expected to be in the same physical space as the images you want to transform.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsuseDeformationFieldToGetAffineTransformOutputs`).
 */
function antsuse_deformation_field_to_get_affine_transform_execute(
    params: AntsuseDeformationFieldToGetAffineTransformParameters,
    runner: Runner | null = null,
): AntsuseDeformationFieldToGetAffineTransformOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTSUSE_DEFORMATION_FIELD_TO_GET_AFFINE_TRANSFORM_METADATA);
    params = execution.params(params)
    const cargs = antsuse_deformation_field_to_get_affine_transform_cargs(params, execution)
    const ret = antsuse_deformation_field_to_get_affine_transform_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ANTSUseDeformationFieldToGetAffineTransform
 *
 * Extracts an affine transform from a deformation field. The input deformation field is expected to be in the same physical space as the images you want to transform.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param deformation_field The input deformation field in NIfTI format (e.g., zzzWarp.nii.gz).
 * @param load_ratio Ratio of points to be loaded from deformation field to save memory (ex: 0.01).
 * @param transform_type Type of transform to be extracted. Can be 'rigid' or 'affine'.
 * @param output_affine The output file where the affine transform will be saved (e.g., OutAffine.txt).
 * @param mask Optional mask file defining the region from which points will be selected.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsuseDeformationFieldToGetAffineTransformOutputs`).
 */
function antsuse_deformation_field_to_get_affine_transform(
    deformation_field: InputPathType,
    load_ratio: number,
    transform_type: "rigid" | "affine",
    output_affine: string,
    mask: InputPathType | null = null,
    runner: Runner | null = null,
): AntsuseDeformationFieldToGetAffineTransformOutputs {
    const params = antsuse_deformation_field_to_get_affine_transform_params(deformation_field, load_ratio, transform_type, output_affine, mask)
    return antsuse_deformation_field_to_get_affine_transform_execute(params, runner);
}


export {
      ANTSUSE_DEFORMATION_FIELD_TO_GET_AFFINE_TRANSFORM_METADATA,
      AntsuseDeformationFieldToGetAffineTransformOutputs,
      antsuse_deformation_field_to_get_affine_transform,
      antsuse_deformation_field_to_get_affine_transform_execute,
      antsuse_deformation_field_to_get_affine_transform_params,
};
