// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__FLOAT_FIX_METADATA: Metadata = {
    id: "69c8566d3c52dcfb93a135adaaa38398077c4bc6.boutiques",
    name: "@float_fix",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VFloatFixParameters {
    "__STYXTYPE__": "@float_fix";
    "input_files": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@float_fix": v__float_fix_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__float_fix(...)`.
 *
 * @interface
 */
interface VFloatFixOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__float_fix_params(
    input_files: Array<InputPathType>,
): VFloatFixParameters {
    /**
     * Build parameters.
    
     * @param input_files Input files to be checked for illegal IEEE floating point values. Wildcards can be used, but filenames must end with .HEAD.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@float_fix" as const,
        "input_files": input_files,
    };
    return params;
}


function v__float_fix_cargs(
    params: VFloatFixParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@float_fix");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function v__float_fix_outputs(
    params: VFloatFixParameters,
    execution: Execution,
): VFloatFixOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VFloatFixOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__float_fix_execute(
    params: VFloatFixParameters,
    execution: Execution,
): VFloatFixOutputs {
    /**
     * Check whether the input files have any IEEE floating point numbers for illegal values: infinities and not-a-number (NaN) values.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VFloatFixOutputs`).
     */
    params = execution.params(params)
    const cargs = v__float_fix_cargs(params, execution)
    const ret = v__float_fix_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__float_fix(
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): VFloatFixOutputs {
    /**
     * Check whether the input files have any IEEE floating point numbers for illegal values: infinities and not-a-number (NaN) values.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_files Input files to be checked for illegal IEEE floating point values. Wildcards can be used, but filenames must end with .HEAD.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VFloatFixOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__FLOAT_FIX_METADATA);
    const params = v__float_fix_params(input_files)
    return v__float_fix_execute(params, execution);
}


export {
      VFloatFixOutputs,
      VFloatFixParameters,
      V__FLOAT_FIX_METADATA,
      v__float_fix,
      v__float_fix_params,
};
