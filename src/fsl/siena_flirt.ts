// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIENA_FLIRT_METADATA: Metadata = {
    id: "db298474bb1f5d8f499cc29890fcbf70e559ed82.boutiques",
    name: "siena_flirt",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SienaFlirtParameters {
    "@type"?: "fsl/siena_flirt";
    "input1_fileroot": string;
    "input2_fileroot": string;
}
type SienaFlirtParametersTagged = Required<Pick<SienaFlirtParameters, '@type'>> & SienaFlirtParameters;


/**
 * Output object returned when calling `SienaFlirtParameters(...)`.
 *
 * @interface
 */
interface SienaFlirtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transformation matrix file
     */
    output_transform_matrix: OutputPathType;
    /**
     * Output registered image
     */
    output_registered_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input1_fileroot First input file root (e.g. first time-point image root, without file extension)
 * @param input2_fileroot Second input file root (e.g. second time-point image root, without file extension)
 *
 * @returns Parameter dictionary
 */
function siena_flirt_params(
    input1_fileroot: string,
    input2_fileroot: string,
): SienaFlirtParametersTagged {
    const params = {
        "@type": "fsl/siena_flirt" as const,
        "input1_fileroot": input1_fileroot,
        "input2_fileroot": input2_fileroot,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function siena_flirt_cargs(
    params: SienaFlirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("siena_flirt");
    cargs.push((params["input1_fileroot"] ?? null));
    cargs.push((params["input2_fileroot"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function siena_flirt_outputs(
    params: SienaFlirtParameters,
    execution: Execution,
): SienaFlirtOutputs {
    const ret: SienaFlirtOutputs = {
        root: execution.outputFile("."),
        output_transform_matrix: execution.outputFile([(params["input1_fileroot"] ?? null), "_to_", (params["input2_fileroot"] ?? null), "_flirt.mat"].join('')),
        output_registered_image: execution.outputFile([(params["input1_fileroot"] ?? null), "_to_", (params["input2_fileroot"] ?? null), "_flirt.nii.gz"].join('')),
    };
    return ret;
}


/**
 * siena_flirt
 *
 * Wrapper for FLIRT image registration within the SIENA framework.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaFlirtOutputs`).
 */
function siena_flirt_execute(
    params: SienaFlirtParameters,
    runner: Runner | null = null,
): SienaFlirtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIENA_FLIRT_METADATA);
    params = execution.params(params)
    const cargs = siena_flirt_cargs(params, execution)
    const ret = siena_flirt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * siena_flirt
 *
 * Wrapper for FLIRT image registration within the SIENA framework.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input1_fileroot First input file root (e.g. first time-point image root, without file extension)
 * @param input2_fileroot Second input file root (e.g. second time-point image root, without file extension)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaFlirtOutputs`).
 */
function siena_flirt(
    input1_fileroot: string,
    input2_fileroot: string,
    runner: Runner | null = null,
): SienaFlirtOutputs {
    const params = siena_flirt_params(input1_fileroot, input2_fileroot)
    return siena_flirt_execute(params, runner);
}


export {
      SIENA_FLIRT_METADATA,
      SienaFlirtOutputs,
      siena_flirt,
      siena_flirt_execute,
      siena_flirt_params,
};
