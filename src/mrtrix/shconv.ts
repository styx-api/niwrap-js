// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SHCONV_METADATA: Metadata = {
    id: "fd5362bc6d2af00ffe1866d4f370ae826df3dd4d.boutiques",
    name: "shconv",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface ShconvVariousStringParameters {
    "__STYXTYPE__": "VariousString";
    "obj": string;
}


interface ShconvVariousFileParameters {
    "__STYXTYPE__": "VariousFile";
    "obj": InputPathType;
}


interface ShconvConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface ShconvParameters {
    "__STYXTYPE__": "shconv";
    "datatype"?: string | null | undefined;
    "strides"?: ShconvVariousStringParameters | ShconvVariousFileParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<ShconvConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "odf_response": Array<string>;
    "SH_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "shconv": shconv_cargs,
        "VariousString": shconv_various_string_cargs,
        "VariousFile": shconv_various_file_cargs,
        "config": shconv_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "shconv": shconv_outputs,
    };
    return outputsFuncs[t];
}


function shconv_various_string_params(
    obj: string,
): ShconvVariousStringParameters {
    /**
     * Build parameters.
    
     * @param obj String object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


function shconv_various_string_cargs(
    params: ShconvVariousStringParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


function shconv_various_file_params(
    obj: InputPathType,
): ShconvVariousFileParameters {
    /**
     * Build parameters.
    
     * @param obj File object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


function shconv_various_file_cargs(
    params: ShconvVariousFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


function shconv_config_params(
    key: string,
    value: string,
): ShconvConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function shconv_config_cargs(
    params: ShconvConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `shconv(...)`.
 *
 * @interface
 */
interface ShconvOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output spherical harmonics coefficients image.
     */
    sh_out: OutputPathType;
}


function shconv_params(
    odf_response: Array<string>,
    sh_out: string,
    datatype: string | null = null,
    strides: ShconvVariousStringParameters | ShconvVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<ShconvConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): ShconvParameters {
    /**
     * Build parameters.
    
     * @param odf_response pairs of input ODF image and corresponding responses
     * @param sh_out the output spherical harmonics coefficients image.
     * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
     * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "shconv" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "odf_response": odf_response,
        "SH_out": sh_out,
    };
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    if (strides !== null) {
        params["strides"] = strides;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function shconv_cargs(
    params: ShconvParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("shconv");
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datatype",
            (params["datatype"] ?? null)
        );
    }
    if ((params["strides"] ?? null) !== null) {
        cargs.push(
            "-strides",
            ...dynCargs((params["strides"] ?? null).__STYXTYPE__)((params["strides"] ?? null), execution)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...(params["odf_response"] ?? null));
    cargs.push((params["SH_out"] ?? null));
    return cargs;
}


function shconv_outputs(
    params: ShconvParameters,
    execution: Execution,
): ShconvOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ShconvOutputs = {
        root: execution.outputFile("."),
        sh_out: execution.outputFile([(params["SH_out"] ?? null)].join('')),
    };
    return ret;
}


function shconv_execute(
    params: ShconvParameters,
    execution: Execution,
): ShconvOutputs {
    /**
     * Perform spherical convolution.
     * 
     * Provided with matching pairs of response function and ODF images (containing SH coefficients), perform spherical convolution to provide the corresponding SH coefficients of the signal.
     * 
     * If multiple pairs of inputs are provided, their contributions will be summed into a single output.
     * 
     * If the responses are multi-shell (with one line of coefficients per shell), the output will be a 5-dimensional image, with the SH coefficients of the signal in each shell stored at different indices along the 5th dimension.
     * 
     * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
     * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
     * 
     * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
     * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ShconvOutputs`).
     */
    params = execution.params(params)
    const cargs = shconv_cargs(params, execution)
    const ret = shconv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function shconv(
    odf_response: Array<string>,
    sh_out: string,
    datatype: string | null = null,
    strides: ShconvVariousStringParameters | ShconvVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<ShconvConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): ShconvOutputs {
    /**
     * Perform spherical convolution.
     * 
     * Provided with matching pairs of response function and ODF images (containing SH coefficients), perform spherical convolution to provide the corresponding SH coefficients of the signal.
     * 
     * If multiple pairs of inputs are provided, their contributions will be summed into a single output.
     * 
     * If the responses are multi-shell (with one line of coefficients per shell), the output will be a 5-dimensional image, with the SH coefficients of the signal in each shell stored at different indices along the 5th dimension.
     * 
     * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
     * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
     * 
     * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
     * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param odf_response pairs of input ODF image and corresponding responses
     * @param sh_out the output spherical harmonics coefficients image.
     * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
     * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ShconvOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SHCONV_METADATA);
    const params = shconv_params(odf_response, sh_out, datatype, strides, info, quiet, debug, force, nthreads, config, help, version)
    return shconv_execute(params, execution);
}


export {
      SHCONV_METADATA,
      ShconvConfigParameters,
      ShconvOutputs,
      ShconvParameters,
      ShconvVariousFileParameters,
      ShconvVariousStringParameters,
      shconv,
      shconv_config_params,
      shconv_params,
      shconv_various_file_params,
      shconv_various_string_params,
};
