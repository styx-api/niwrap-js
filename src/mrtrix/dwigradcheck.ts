// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DWIGRADCHECK_METADATA: Metadata = {
    id: "b63fbe847bb47d08242042634d2e24c551124586.boutiques",
    name: "dwigradcheck",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface DwigradcheckFslgradParameters {
    "@type": "mrtrix.dwigradcheck.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface DwigradcheckExportGradFslParameters {
    "@type": "mrtrix.dwigradcheck.export_grad_fsl";
    "bvecs_path": string;
    "bvals_path": string;
}


interface DwigradcheckParameters {
    "@type": "mrtrix.dwigradcheck";
    "input_image": InputPathType;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: DwigradcheckFslgradParameters | null | undefined;
    "mask_image"?: InputPathType | null | undefined;
    "number"?: number | null | undefined;
    "export_grad_mrtrix"?: string | null | undefined;
    "export_grad_fsl"?: DwigradcheckExportGradFslParameters | null | undefined;
    "nocleanup": boolean;
    "scratch_dir"?: InputPathType | null | undefined;
    "continue_scratch_dir"?: Array<InputPathType> | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<string> | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.dwigradcheck": dwigradcheck_cargs,
        "mrtrix.dwigradcheck.fslgrad": dwigradcheck_fslgrad_cargs,
        "mrtrix.dwigradcheck.export_grad_fsl": dwigradcheck_export_grad_fsl_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.dwigradcheck": dwigradcheck_outputs,
        "mrtrix.dwigradcheck.export_grad_fsl": dwigradcheck_export_grad_fsl_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function dwigradcheck_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): DwigradcheckFslgradParameters {
    const params = {
        "@type": "mrtrix.dwigradcheck.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwigradcheck_fslgrad_cargs(
    params: DwigradcheckFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `DwigradcheckExportGradFslParameters | null(...)`.
 *
 * @interface
 */
interface DwigradcheckExportGradFslOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
     */
    bvecs_path: OutputPathType;
    /**
     * export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
     */
    bvals_path: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param bvecs_path export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 * @param bvals_path export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 *
 * @returns Parameter dictionary
 */
function dwigradcheck_export_grad_fsl_params(
    bvecs_path: string,
    bvals_path: string,
): DwigradcheckExportGradFslParameters {
    const params = {
        "@type": "mrtrix.dwigradcheck.export_grad_fsl" as const,
        "bvecs_path": bvecs_path,
        "bvals_path": bvals_path,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwigradcheck_export_grad_fsl_cargs(
    params: DwigradcheckExportGradFslParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-export_grad_fsl");
    cargs.push((params["bvecs_path"] ?? null));
    cargs.push((params["bvals_path"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwigradcheck_export_grad_fsl_outputs(
    params: DwigradcheckExportGradFslParameters,
    execution: Execution,
): DwigradcheckExportGradFslOutputs {
    const ret: DwigradcheckExportGradFslOutputs = {
        root: execution.outputFile("."),
        bvecs_path: execution.outputFile([(params["bvecs_path"] ?? null)].join('')),
        bvals_path: execution.outputFile([(params["bvals_path"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `dwigradcheck(...)`.
 *
 * @interface
 */
interface DwigradcheckOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * export the diffusion-weighted gradient table to file in MRtrix format 
     */
    export_grad_mrtrix: OutputPathType | null;
    /**
     * export the diffusion-weighted gradient table to file in FSL format 
     */
    export_grad_fsl: OutputPathType | null;
    /**
     * Outputs from `dwigradcheck_export_grad_fsl_outputs`.
     */
    export_grad_fsl_: DwigradcheckExportGradFslOutputs | null;
}


/**
 * Build parameters.
 *
 * @param input_image The input DWI series to be checked
 * @param grad Provide the diffusion gradient table in MRtrix format
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param mask_image Provide a brain mask image
 * @param number_ Set the number of tracks to generate for each test
 * @param export_grad_mrtrix export the diffusion-weighted gradient table to file in MRtrix format
 * @param export_grad_fsl export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 * @param nocleanup Do not delete intermediate files during script execution, and do not delete scratch directory at script completion
 * @param scratch_dir Manually specify the path in which to generate the scratch directory
 * @param continue_scratch_dir Continue the script from a previous execution; must provide the scratch directory path
 * @param info Display information messages
 * @param quiet Do not display information messages or progress status
 * @param debug Display debugging messages
 * @param force Force overwrite of output files
 * @param nthreads Use this number of threads in multi-threaded applications (set to 0 to disable multi-threading)
 * @param config Temporarily set the value of an MRtrix config file entry
 * @param help Display help information and exit
 * @param version Display version information and exit
 *
 * @returns Parameter dictionary
 */
function dwigradcheck_params(
    input_image: InputPathType,
    grad: InputPathType | null = null,
    fslgrad: DwigradcheckFslgradParameters | null = null,
    mask_image: InputPathType | null = null,
    number_: number | null = null,
    export_grad_mrtrix: string | null = null,
    export_grad_fsl: DwigradcheckExportGradFslParameters | null = null,
    nocleanup: boolean = false,
    scratch_dir: InputPathType | null = null,
    continue_scratch_dir: Array<InputPathType> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<string> | null = null,
    help: boolean = false,
    version: boolean = false,
): DwigradcheckParameters {
    const params = {
        "@type": "mrtrix.dwigradcheck" as const,
        "input_image": input_image,
        "nocleanup": nocleanup,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
    };
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    if (number_ !== null) {
        params["number"] = number_;
    }
    if (export_grad_mrtrix !== null) {
        params["export_grad_mrtrix"] = export_grad_mrtrix;
    }
    if (export_grad_fsl !== null) {
        params["export_grad_fsl"] = export_grad_fsl;
    }
    if (scratch_dir !== null) {
        params["scratch_dir"] = scratch_dir;
    }
    if (continue_scratch_dir !== null) {
        params["continue_scratch_dir"] = continue_scratch_dir;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwigradcheck_cargs(
    params: DwigradcheckParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dwigradcheck");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_image"] ?? null))
        );
    }
    if ((params["number"] ?? null) !== null) {
        cargs.push(
            "-number",
            String((params["number"] ?? null))
        );
    }
    if ((params["export_grad_mrtrix"] ?? null) !== null) {
        cargs.push(
            "-export_grad_mrtrix",
            (params["export_grad_mrtrix"] ?? null)
        );
    }
    if ((params["export_grad_fsl"] ?? null) !== null) {
        cargs.push(...dynCargs((params["export_grad_fsl"] ?? null)["@type"])((params["export_grad_fsl"] ?? null), execution));
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("-nocleanup");
    }
    if ((params["scratch_dir"] ?? null) !== null) {
        cargs.push(
            "-scratch",
            execution.inputFile((params["scratch_dir"] ?? null))
        );
    }
    if ((params["continue_scratch_dir"] ?? null) !== null) {
        cargs.push(
            "-continue",
            ...(params["continue_scratch_dir"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(
            "-config",
            ...(params["config"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwigradcheck_outputs(
    params: DwigradcheckParameters,
    execution: Execution,
): DwigradcheckOutputs {
    const ret: DwigradcheckOutputs = {
        root: execution.outputFile("."),
        export_grad_mrtrix: ((params["export_grad_mrtrix"] ?? null) !== null) ? execution.outputFile([(params["export_grad_mrtrix"] ?? null)].join('')) : null,
        export_grad_fsl: ((params["export_grad_mrtrix"] ?? null) !== null) ? execution.outputFile([(params["export_grad_mrtrix"] ?? null)].join('')) : null,
        export_grad_fsl_: (dynOutputs((params["export_grad_fsl"] ?? null)["@type"])?.((params["export_grad_fsl"] ?? null), execution) ?? null),
    };
    return ret;
}


/**
 * Check the orientation of the diffusion gradient table.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DwigradcheckOutputs`).
 */
function dwigradcheck_execute(
    params: DwigradcheckParameters,
    runner: Runner | null = null,
): DwigradcheckOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DWIGRADCHECK_METADATA);
    params = execution.params(params)
    const cargs = dwigradcheck_cargs(params, execution)
    const ret = dwigradcheck_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Check the orientation of the diffusion gradient table.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input_image The input DWI series to be checked
 * @param grad Provide the diffusion gradient table in MRtrix format
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param mask_image Provide a brain mask image
 * @param number_ Set the number of tracks to generate for each test
 * @param export_grad_mrtrix export the diffusion-weighted gradient table to file in MRtrix format
 * @param export_grad_fsl export the diffusion-weighted gradient table to files in FSL (bvecs / bvals) format
 * @param nocleanup Do not delete intermediate files during script execution, and do not delete scratch directory at script completion
 * @param scratch_dir Manually specify the path in which to generate the scratch directory
 * @param continue_scratch_dir Continue the script from a previous execution; must provide the scratch directory path
 * @param info Display information messages
 * @param quiet Do not display information messages or progress status
 * @param debug Display debugging messages
 * @param force Force overwrite of output files
 * @param nthreads Use this number of threads in multi-threaded applications (set to 0 to disable multi-threading)
 * @param config Temporarily set the value of an MRtrix config file entry
 * @param help Display help information and exit
 * @param version Display version information and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DwigradcheckOutputs`).
 */
function dwigradcheck(
    input_image: InputPathType,
    grad: InputPathType | null = null,
    fslgrad: DwigradcheckFslgradParameters | null = null,
    mask_image: InputPathType | null = null,
    number_: number | null = null,
    export_grad_mrtrix: string | null = null,
    export_grad_fsl: DwigradcheckExportGradFslParameters | null = null,
    nocleanup: boolean = false,
    scratch_dir: InputPathType | null = null,
    continue_scratch_dir: Array<InputPathType> | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<string> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DwigradcheckOutputs {
    const params = dwigradcheck_params(input_image, grad, fslgrad, mask_image, number_, export_grad_mrtrix, export_grad_fsl, nocleanup, scratch_dir, continue_scratch_dir, info, quiet, debug, force, nthreads, config, help, version)
    return dwigradcheck_execute(params, runner);
}


export {
      DWIGRADCHECK_METADATA,
      DwigradcheckExportGradFslOutputs,
      DwigradcheckExportGradFslParameters,
      DwigradcheckFslgradParameters,
      DwigradcheckOutputs,
      DwigradcheckParameters,
      dwigradcheck,
      dwigradcheck_execute,
      dwigradcheck_export_grad_fsl_params,
      dwigradcheck_fslgrad_params,
      dwigradcheck_params,
};
