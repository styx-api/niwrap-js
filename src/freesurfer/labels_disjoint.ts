// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABELS_DISJOINT_METADATA: Metadata = {
    id: "86418874c210febfd9899f1bd03f4fd4b41547fb.boutiques",
    name: "labels_disjoint",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LabelsDisjointParameters {
    "@type"?: "freesurfer/labels_disjoint";
    "label1": InputPathType;
    "label2": InputPathType;
    "outputname": string;
}
type LabelsDisjointParametersTagged = Required<Pick<LabelsDisjointParameters, '@type'>> & LabelsDisjointParameters;


/**
 * Output object returned when calling `LabelsDisjointParameters(...)`.
 *
 * @interface
 */
interface LabelsDisjointOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting output label file after subtraction.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label1 First label file (e.g., rh.Occ.label).
 * @param label2 Second label file to subtract from the first (e.g., rh.V1.label).
 * @param outputname Output label file name where the result will be saved (e.g., rh.Occ_V1.label).
 *
 * @returns Parameter dictionary
 */
function labels_disjoint_params(
    label1: InputPathType,
    label2: InputPathType,
    outputname: string,
): LabelsDisjointParametersTagged {
    const params = {
        "@type": "freesurfer/labels_disjoint" as const,
        "label1": label1,
        "label2": label2,
        "outputname": outputname,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function labels_disjoint_cargs(
    params: LabelsDisjointParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("labels_disjoint");
    cargs.push(execution.inputFile((params["label1"] ?? null)));
    cargs.push(execution.inputFile((params["label2"] ?? null)));
    cargs.push((params["outputname"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function labels_disjoint_outputs(
    params: LabelsDisjointParameters,
    execution: Execution,
): LabelsDisjointOutputs {
    const ret: LabelsDisjointOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["outputname"] ?? null)].join('')),
    };
    return ret;
}


/**
 * labels_disjoint
 *
 * Subtracts one label file from another, effectively creating a label that represents label1 minus label2.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelsDisjointOutputs`).
 */
function labels_disjoint_execute(
    params: LabelsDisjointParameters,
    runner: Runner | null = null,
): LabelsDisjointOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABELS_DISJOINT_METADATA);
    params = execution.params(params)
    const cargs = labels_disjoint_cargs(params, execution)
    const ret = labels_disjoint_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * labels_disjoint
 *
 * Subtracts one label file from another, effectively creating a label that represents label1 minus label2.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param label1 First label file (e.g., rh.Occ.label).
 * @param label2 Second label file to subtract from the first (e.g., rh.V1.label).
 * @param outputname Output label file name where the result will be saved (e.g., rh.Occ_V1.label).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelsDisjointOutputs`).
 */
function labels_disjoint(
    label1: InputPathType,
    label2: InputPathType,
    outputname: string,
    runner: Runner | null = null,
): LabelsDisjointOutputs {
    const params = labels_disjoint_params(label1, label2, outputname)
    return labels_disjoint_execute(params, runner);
}


export {
      LABELS_DISJOINT_METADATA,
      LabelsDisjointOutputs,
      labels_disjoint,
      labels_disjoint_execute,
      labels_disjoint_params,
};
