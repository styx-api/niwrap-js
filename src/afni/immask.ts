// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMMASK_METADATA: Metadata = {
    id: "7997bb8c1d255c2ebdb468789198032af458e485.boutiques",
    name: "immask",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImmaskParameters {
    "@type": "afni.immask";
    "threshold"?: number | null | undefined;
    "mask_image"?: InputPathType | null | undefined;
    "positive_only": boolean;
    "input_image": InputPathType;
    "output_image": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.immask": immask_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.immask": immask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `immask(...)`.
 *
 * @interface
 */
interface ImmaskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Masked output image
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input image to be masked
 * @param output_image Output image after masking
 * @param threshold Threshold value; all pixels with absolute value below this will be set to zero in the output image
 * @param mask_image Mask image; only locations that are nonzero in the mask image will be nonzero in the output image
 * @param positive_only Use only positive pixels from input image
 *
 * @returns Parameter dictionary
 */
function immask_params(
    input_image: InputPathType,
    output_image: string,
    threshold: number | null = null,
    mask_image: InputPathType | null = null,
    positive_only: boolean = false,
): ImmaskParameters {
    const params = {
        "@type": "afni.immask" as const,
        "positive_only": positive_only,
        "input_image": input_image,
        "output_image": output_image,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function immask_cargs(
    params: ImmaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("immask");
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-thresh",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_image"] ?? null))
        );
    }
    if ((params["positive_only"] ?? null)) {
        cargs.push("-pos");
    }
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function immask_outputs(
    params: ImmaskParameters,
    execution: Execution,
): ImmaskOutputs {
    const ret: ImmaskOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Masks the input image based on specified criteria and produces the output image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `ImmaskOutputs`).
 */
function immask_execute(
    params: ImmaskParameters,
    execution: Execution,
): ImmaskOutputs {
    params = execution.params(params)
    const cargs = immask_cargs(params, execution)
    const ret = immask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Masks the input image based on specified criteria and produces the output image.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_image Input image to be masked
 * @param output_image Output image after masking
 * @param threshold Threshold value; all pixels with absolute value below this will be set to zero in the output image
 * @param mask_image Mask image; only locations that are nonzero in the mask image will be nonzero in the output image
 * @param positive_only Use only positive pixels from input image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImmaskOutputs`).
 */
function immask(
    input_image: InputPathType,
    output_image: string,
    threshold: number | null = null,
    mask_image: InputPathType | null = null,
    positive_only: boolean = false,
    runner: Runner | null = null,
): ImmaskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMMASK_METADATA);
    const params = immask_params(input_image, output_image, threshold, mask_image, positive_only)
    return immask_execute(params, execution);
}


export {
      IMMASK_METADATA,
      ImmaskOutputs,
      ImmaskParameters,
      immask,
      immask_cargs,
      immask_execute,
      immask_outputs,
      immask_params,
};
