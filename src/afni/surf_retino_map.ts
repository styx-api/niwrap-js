// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_RETINO_MAP_METADATA: Metadata = {
    id: "759f3f4ec4008d75ee870dbe1ee1e5e8b576e660.boutiques",
    name: "SurfRetinoMap",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfRetinoMapParameters {
    "@type": "afni.SurfRetinoMap";
    "surface": string;
    "polar": string;
    "eccentricity": string;
    "prefix"?: string | null | undefined;
    "node_debug"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.SurfRetinoMap": surf_retino_map_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.SurfRetinoMap": surf_retino_map_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_retino_map(...)`.
 *
 * @interface
 */
interface SurfRetinoMapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output Visual Field Ratio (VFR) dataset.
     */
    vfr_output: OutputPathType | null;
    /**
     * Maximum threshold at each node in the input datasets.
     */
    threshold_max_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param surface Surface on which distances are computed. See 'Specifying input surfaces' section for syntax.
 * @param polar Retinotopic dataset: polar angle dataset.
 * @param eccentricity Retinotopic dataset: eccentricity angle dataset.
 * @param prefix Prefix for output datasets.
 * @param node_debug Index of node number for which debugging information is output.
 *
 * @returns Parameter dictionary
 */
function surf_retino_map_params(
    surface: string,
    polar: string,
    eccentricity: string,
    prefix: string | null = null,
    node_debug: number | null = null,
): SurfRetinoMapParameters {
    const params = {
        "@type": "afni.SurfRetinoMap" as const,
        "surface": surface,
        "polar": polar,
        "eccentricity": eccentricity,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (node_debug !== null) {
        params["node_debug"] = node_debug;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_retino_map_cargs(
    params: SurfRetinoMapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfRetinoMap");
    cargs.push((params["surface"] ?? null));
    cargs.push((params["polar"] ?? null));
    cargs.push((params["eccentricity"] ?? null));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "--prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["node_debug"] ?? null) !== null) {
        cargs.push(
            "--node_dbg",
            String((params["node_debug"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_retino_map_outputs(
    params: SurfRetinoMapParameters,
    execution: Execution,
): SurfRetinoMapOutputs {
    const ret: SurfRetinoMapOutputs = {
        root: execution.outputFile("."),
        vfr_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_VFR.nii.gz"].join('')) : null,
        threshold_max_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_threshold_max.nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * SurfRetinoMap
 *
 * Tool for retinotopic mapping on cortical surfaces.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfRetinoMapOutputs`).
 */
function surf_retino_map_execute(
    params: SurfRetinoMapParameters,
    runner: Runner | null = null,
): SurfRetinoMapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_RETINO_MAP_METADATA);
    params = execution.params(params)
    const cargs = surf_retino_map_cargs(params, execution)
    const ret = surf_retino_map_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SurfRetinoMap
 *
 * Tool for retinotopic mapping on cortical surfaces.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param surface Surface on which distances are computed. See 'Specifying input surfaces' section for syntax.
 * @param polar Retinotopic dataset: polar angle dataset.
 * @param eccentricity Retinotopic dataset: eccentricity angle dataset.
 * @param prefix Prefix for output datasets.
 * @param node_debug Index of node number for which debugging information is output.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfRetinoMapOutputs`).
 */
function surf_retino_map(
    surface: string,
    polar: string,
    eccentricity: string,
    prefix: string | null = null,
    node_debug: number | null = null,
    runner: Runner | null = null,
): SurfRetinoMapOutputs {
    const params = surf_retino_map_params(surface, polar, eccentricity, prefix, node_debug)
    return surf_retino_map_execute(params, runner);
}


export {
      SURF_RETINO_MAP_METADATA,
      SurfRetinoMapOutputs,
      SurfRetinoMapParameters,
      surf_retino_map,
      surf_retino_map_execute,
      surf_retino_map_params,
};
