// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_WATERSHED_METADATA: Metadata = {
    id: "9bb7e9db1af91a3ea8abfd151b5e5e53143c30fe.boutiques",
    name: "mri_watershed",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriWatershedParameters {
    "@type": "freesurfer.mri_watershed";
    "input_volume": InputPathType;
    "output_volume": string;
    "weight"?: number | null | undefined;
    "no_wta_flag": boolean;
    "proba_merging"?: number | null | undefined;
    "preflooding_height"?: number | null | undefined;
    "no_seedpt_flag": boolean;
    "no_ta_flag": boolean;
    "copy_flag": boolean;
    "atlas_flag": boolean;
    "surf_name"?: string | null | undefined;
    "usesurf_ras_flag": boolean;
    "no_t1_analysis_flag": boolean;
    "shrink_surface_flag": boolean;
    "expand_surface_flag": boolean;
    "use_watershed_flag": boolean;
    "t1_volume"?: InputPathType | null | undefined;
    "wat_temp_flag": boolean;
    "first_temp_flag": boolean;
    "surf_debug_flag": boolean;
    "brain_surf_name"?: string | null | undefined;
    "shrink_brain_surf"?: string | null | undefined;
    "seed_point"?: Array<number> | null | undefined;
    "center_brain"?: Array<number> | null | undefined;
    "brain_radius"?: number | null | undefined;
    "watershed_threshold"?: number | null | undefined;
    "no_watershed_analysis_flag": boolean;
    "label_flag": boolean;
    "manual_params"?: Array<number> | null | undefined;
    "xthresh"?: number | null | undefined;
    "mask_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_watershed": mri_watershed_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_watershed": mri_watershed_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_watershed(...)`.
 *
 * @interface
 */
interface MriWatershedOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Skull stripped brain volume
     */
    output_brain_vol: OutputPathType;
    /**
     * Saved brain surface when specified
     */
    output_brain_surf: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume (e.g., T1 volume)
 * @param output_volume Output volume (e.g., skull stripped brain volume)
 * @param weight Preweight the input image using atlas information
 * @param no_wta_flag Don't use the preweighting for the template deformation
 * @param proba_merging Use the basins merging using atlas information
 * @param preflooding_height Pre-size the preflooding height (in percent)
 * @param no_seedpt_flag Don't use seedpoints using atlas information
 * @param no_ta_flag Don't use template deformation using atlas information
 * @param copy_flag Just copy input to output, ignore other options
 * @param atlas_flag Use the atlas information to correct the segmentation
 * @param surf_name Save the BEM surfaces; use consistent coordinates with tkmedit
 * @param usesurf_ras_flag Use the surface RAS coordinates for surfaces
 * @param no_t1_analysis_flag Don't do T1 analysis, useful when running out of memory
 * @param shrink_surface_flag Shrink the surface
 * @param expand_surface_flag Expand the surface
 * @param use_watershed_flag Use only the watershed algorithm
 * @param t1_volume Specify T1 input volume
 * @param wat_temp_flag Use watershed algorithm and first template smoothing
 * @param first_temp_flag Use only the first template smoothing + local matching
 * @param surf_debug_flag Visualize the surfaces onto the output volume
 * @param brain_surf_name Save the brain surface
 * @param shrink_brain_surf Save the brain surface shrank inward by a specified mm
 * @param seed_point Add a seed point as a 3D coordinate
 * @param center_brain Specify the center of the brain (voxel coordinates)
 * @param brain_radius Specify the radius of the brain (voxel units)
 * @param watershed_threshold Change the threshold in the watershed process
 * @param no_watershed_analysis_flag Don't use the watershed analysis process
 * @param label_flag Labelize the output volume into scalp, skull, csf, gray, and white matter
 * @param manual_params Change parameters csf_max, transition intensity, and GM_intensity
 * @param xthresh Remove voxels whose intensity exceeds the specified threshold
 * @param mask_flag Mask a volume with the brain mask
 *
 * @returns Parameter dictionary
 */
function mri_watershed_params(
    input_volume: InputPathType,
    output_volume: string,
    weight: number | null = null,
    no_wta_flag: boolean = false,
    proba_merging: number | null = null,
    preflooding_height: number | null = null,
    no_seedpt_flag: boolean = false,
    no_ta_flag: boolean = false,
    copy_flag: boolean = false,
    atlas_flag: boolean = false,
    surf_name: string | null = null,
    usesurf_ras_flag: boolean = false,
    no_t1_analysis_flag: boolean = false,
    shrink_surface_flag: boolean = false,
    expand_surface_flag: boolean = false,
    use_watershed_flag: boolean = false,
    t1_volume: InputPathType | null = null,
    wat_temp_flag: boolean = false,
    first_temp_flag: boolean = false,
    surf_debug_flag: boolean = false,
    brain_surf_name: string | null = null,
    shrink_brain_surf: string | null = null,
    seed_point: Array<number> | null = null,
    center_brain: Array<number> | null = null,
    brain_radius: number | null = null,
    watershed_threshold: number | null = null,
    no_watershed_analysis_flag: boolean = false,
    label_flag: boolean = false,
    manual_params: Array<number> | null = null,
    xthresh: number | null = null,
    mask_flag: boolean = false,
): MriWatershedParameters {
    const params = {
        "@type": "freesurfer.mri_watershed" as const,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "no_wta_flag": no_wta_flag,
        "no_seedpt_flag": no_seedpt_flag,
        "no_ta_flag": no_ta_flag,
        "copy_flag": copy_flag,
        "atlas_flag": atlas_flag,
        "usesurf_ras_flag": usesurf_ras_flag,
        "no_t1_analysis_flag": no_t1_analysis_flag,
        "shrink_surface_flag": shrink_surface_flag,
        "expand_surface_flag": expand_surface_flag,
        "use_watershed_flag": use_watershed_flag,
        "wat_temp_flag": wat_temp_flag,
        "first_temp_flag": first_temp_flag,
        "surf_debug_flag": surf_debug_flag,
        "no_watershed_analysis_flag": no_watershed_analysis_flag,
        "label_flag": label_flag,
        "mask_flag": mask_flag,
    };
    if (weight !== null) {
        params["weight"] = weight;
    }
    if (proba_merging !== null) {
        params["proba_merging"] = proba_merging;
    }
    if (preflooding_height !== null) {
        params["preflooding_height"] = preflooding_height;
    }
    if (surf_name !== null) {
        params["surf_name"] = surf_name;
    }
    if (t1_volume !== null) {
        params["t1_volume"] = t1_volume;
    }
    if (brain_surf_name !== null) {
        params["brain_surf_name"] = brain_surf_name;
    }
    if (shrink_brain_surf !== null) {
        params["shrink_brain_surf"] = shrink_brain_surf;
    }
    if (seed_point !== null) {
        params["seed_point"] = seed_point;
    }
    if (center_brain !== null) {
        params["center_brain"] = center_brain;
    }
    if (brain_radius !== null) {
        params["brain_radius"] = brain_radius;
    }
    if (watershed_threshold !== null) {
        params["watershed_threshold"] = watershed_threshold;
    }
    if (manual_params !== null) {
        params["manual_params"] = manual_params;
    }
    if (xthresh !== null) {
        params["xthresh"] = xthresh;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_watershed_cargs(
    params: MriWatershedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_watershed");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["weight"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["weight"] ?? null))
        );
    }
    if ((params["no_wta_flag"] ?? null)) {
        cargs.push("-no_wta");
    }
    if ((params["proba_merging"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["proba_merging"] ?? null))
        );
    }
    if ((params["preflooding_height"] ?? null) !== null) {
        cargs.push(
            "-h",
            String((params["preflooding_height"] ?? null))
        );
    }
    if ((params["no_seedpt_flag"] ?? null)) {
        cargs.push("-no_seedpt");
    }
    if ((params["no_ta_flag"] ?? null)) {
        cargs.push("-no-ta");
    }
    if ((params["copy_flag"] ?? null)) {
        cargs.push("-copy");
    }
    if ((params["atlas_flag"] ?? null)) {
        cargs.push("-atlas");
    }
    if ((params["surf_name"] ?? null) !== null) {
        cargs.push(
            "-surf",
            (params["surf_name"] ?? null)
        );
    }
    if ((params["usesurf_ras_flag"] ?? null)) {
        cargs.push("-useSRAS");
    }
    if ((params["no_t1_analysis_flag"] ?? null)) {
        cargs.push("-noT1");
    }
    if ((params["shrink_surface_flag"] ?? null)) {
        cargs.push("-less");
    }
    if ((params["expand_surface_flag"] ?? null)) {
        cargs.push("-more");
    }
    if ((params["use_watershed_flag"] ?? null)) {
        cargs.push("-wat");
    }
    if ((params["t1_volume"] ?? null) !== null) {
        cargs.push(
            "-T1",
            execution.inputFile((params["t1_volume"] ?? null))
        );
    }
    if ((params["wat_temp_flag"] ?? null)) {
        cargs.push("-wat+temp");
    }
    if ((params["first_temp_flag"] ?? null)) {
        cargs.push("-first_temp");
    }
    if ((params["surf_debug_flag"] ?? null)) {
        cargs.push("-surf_debug");
    }
    if ((params["brain_surf_name"] ?? null) !== null) {
        cargs.push(
            "-brainsurf",
            (params["brain_surf_name"] ?? null)
        );
    }
    if ((params["shrink_brain_surf"] ?? null) !== null) {
        cargs.push(
            "-shk_br_surf",
            (params["shrink_brain_surf"] ?? null)
        );
    }
    if ((params["seed_point"] ?? null) !== null) {
        cargs.push(
            "-s",
            ...(params["seed_point"] ?? null).map(String)
        );
    }
    if ((params["center_brain"] ?? null) !== null) {
        cargs.push(
            "-c",
            ...(params["center_brain"] ?? null).map(String)
        );
    }
    if ((params["brain_radius"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["brain_radius"] ?? null))
        );
    }
    if ((params["watershed_threshold"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["watershed_threshold"] ?? null))
        );
    }
    if ((params["no_watershed_analysis_flag"] ?? null)) {
        cargs.push("-n");
    }
    if ((params["label_flag"] ?? null)) {
        cargs.push("-LABEL");
    }
    if ((params["manual_params"] ?? null) !== null) {
        cargs.push(
            "-man",
            ...(params["manual_params"] ?? null).map(String)
        );
    }
    if ((params["xthresh"] ?? null) !== null) {
        cargs.push(
            "-xthresh",
            String((params["xthresh"] ?? null))
        );
    }
    if ((params["mask_flag"] ?? null)) {
        cargs.push("-mask");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_watershed_outputs(
    params: MriWatershedParameters,
    execution: Execution,
): MriWatershedOutputs {
    const ret: MriWatershedOutputs = {
        root: execution.outputFile("."),
        output_brain_vol: execution.outputFile([(params["output_volume"] ?? null)].join('')),
        output_brain_surf: ((params["brain_surf_name"] ?? null) !== null) ? execution.outputFile([(params["brain_surf_name"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * mri_watershed
 *
 * A tool for stripping skull and other non-brain tissues to produce brain volume from T1 volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriWatershedOutputs`).
 */
function mri_watershed_execute(
    params: MriWatershedParameters,
    runner: Runner | null = null,
): MriWatershedOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_WATERSHED_METADATA);
    params = execution.params(params)
    const cargs = mri_watershed_cargs(params, execution)
    const ret = mri_watershed_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_watershed
 *
 * A tool for stripping skull and other non-brain tissues to produce brain volume from T1 volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume (e.g., T1 volume)
 * @param output_volume Output volume (e.g., skull stripped brain volume)
 * @param weight Preweight the input image using atlas information
 * @param no_wta_flag Don't use the preweighting for the template deformation
 * @param proba_merging Use the basins merging using atlas information
 * @param preflooding_height Pre-size the preflooding height (in percent)
 * @param no_seedpt_flag Don't use seedpoints using atlas information
 * @param no_ta_flag Don't use template deformation using atlas information
 * @param copy_flag Just copy input to output, ignore other options
 * @param atlas_flag Use the atlas information to correct the segmentation
 * @param surf_name Save the BEM surfaces; use consistent coordinates with tkmedit
 * @param usesurf_ras_flag Use the surface RAS coordinates for surfaces
 * @param no_t1_analysis_flag Don't do T1 analysis, useful when running out of memory
 * @param shrink_surface_flag Shrink the surface
 * @param expand_surface_flag Expand the surface
 * @param use_watershed_flag Use only the watershed algorithm
 * @param t1_volume Specify T1 input volume
 * @param wat_temp_flag Use watershed algorithm and first template smoothing
 * @param first_temp_flag Use only the first template smoothing + local matching
 * @param surf_debug_flag Visualize the surfaces onto the output volume
 * @param brain_surf_name Save the brain surface
 * @param shrink_brain_surf Save the brain surface shrank inward by a specified mm
 * @param seed_point Add a seed point as a 3D coordinate
 * @param center_brain Specify the center of the brain (voxel coordinates)
 * @param brain_radius Specify the radius of the brain (voxel units)
 * @param watershed_threshold Change the threshold in the watershed process
 * @param no_watershed_analysis_flag Don't use the watershed analysis process
 * @param label_flag Labelize the output volume into scalp, skull, csf, gray, and white matter
 * @param manual_params Change parameters csf_max, transition intensity, and GM_intensity
 * @param xthresh Remove voxels whose intensity exceeds the specified threshold
 * @param mask_flag Mask a volume with the brain mask
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriWatershedOutputs`).
 */
function mri_watershed(
    input_volume: InputPathType,
    output_volume: string,
    weight: number | null = null,
    no_wta_flag: boolean = false,
    proba_merging: number | null = null,
    preflooding_height: number | null = null,
    no_seedpt_flag: boolean = false,
    no_ta_flag: boolean = false,
    copy_flag: boolean = false,
    atlas_flag: boolean = false,
    surf_name: string | null = null,
    usesurf_ras_flag: boolean = false,
    no_t1_analysis_flag: boolean = false,
    shrink_surface_flag: boolean = false,
    expand_surface_flag: boolean = false,
    use_watershed_flag: boolean = false,
    t1_volume: InputPathType | null = null,
    wat_temp_flag: boolean = false,
    first_temp_flag: boolean = false,
    surf_debug_flag: boolean = false,
    brain_surf_name: string | null = null,
    shrink_brain_surf: string | null = null,
    seed_point: Array<number> | null = null,
    center_brain: Array<number> | null = null,
    brain_radius: number | null = null,
    watershed_threshold: number | null = null,
    no_watershed_analysis_flag: boolean = false,
    label_flag: boolean = false,
    manual_params: Array<number> | null = null,
    xthresh: number | null = null,
    mask_flag: boolean = false,
    runner: Runner | null = null,
): MriWatershedOutputs {
    const params = mri_watershed_params(input_volume, output_volume, weight, no_wta_flag, proba_merging, preflooding_height, no_seedpt_flag, no_ta_flag, copy_flag, atlas_flag, surf_name, usesurf_ras_flag, no_t1_analysis_flag, shrink_surface_flag, expand_surface_flag, use_watershed_flag, t1_volume, wat_temp_flag, first_temp_flag, surf_debug_flag, brain_surf_name, shrink_brain_surf, seed_point, center_brain, brain_radius, watershed_threshold, no_watershed_analysis_flag, label_flag, manual_params, xthresh, mask_flag)
    return mri_watershed_execute(params, runner);
}


export {
      MRI_WATERSHED_METADATA,
      MriWatershedOutputs,
      MriWatershedParameters,
      mri_watershed,
      mri_watershed_execute,
      mri_watershed_params,
};
