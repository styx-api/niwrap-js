// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const COUNT_METADATA: Metadata = {
    id: "988ff55fdaad56036baf2929faf8abe20f54fb03.boutiques",
    name: "count",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface CountParameters {
    "@type": "afni.count";
    "bot": string;
    "top": string;
    "step"?: string | null | undefined;
    "seed"?: number | null | undefined;
    "sseed"?: string | null | undefined;
    "column": boolean;
    "digits"?: number | null | undefined;
    "form"?: string | null | undefined;
    "root"?: string | null | undefined;
    "sep"?: string | null | undefined;
    "suffix"?: string | null | undefined;
    "scale"?: number | null | undefined;
    "comma": boolean;
    "skipnmodm"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.count": count_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `count(...)`.
 *
 * @interface
 */
interface CountOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param bot Starting number or character
 * @param top Ending number or character
 * @param step Stride step or mode (integer step size, R#, S# or S)
 * @param seed Seed number for random number generator
 * @param sseed Seed string for random number generator
 * @param column Write output, one number per line
 * @param digits Number of digits to print
 * @param form Custom format string for printing the numbers
 * @param root String to print before the number
 * @param sep Separator character between the numbers
 * @param suffix String to print after the number
 * @param scale Scale factor to multiply each number
 * @param comma Put commas between the outputs
 * @param skipnmodm Skip numbers with modulus
 *
 * @returns Parameter dictionary
 */
function count_params(
    bot: string,
    top: string,
    step: string | null = null,
    seed: number | null = null,
    sseed: string | null = null,
    column: boolean = false,
    digits: number | null = null,
    form: string | null = null,
    root: string | null = null,
    sep: string | null = null,
    suffix: string | null = null,
    scale: number | null = null,
    comma: boolean = false,
    skipnmodm: string | null = null,
): CountParameters {
    const params = {
        "@type": "afni.count" as const,
        "bot": bot,
        "top": top,
        "column": column,
        "comma": comma,
    };
    if (step !== null) {
        params["step"] = step;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (sseed !== null) {
        params["sseed"] = sseed;
    }
    if (digits !== null) {
        params["digits"] = digits;
    }
    if (form !== null) {
        params["form"] = form;
    }
    if (root !== null) {
        params["root"] = root;
    }
    if (sep !== null) {
        params["sep"] = sep;
    }
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (skipnmodm !== null) {
        params["skipnmodm"] = skipnmodm;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function count_cargs(
    params: CountParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("count");
    cargs.push((params["bot"] ?? null));
    cargs.push((params["top"] ?? null));
    if ((params["step"] ?? null) !== null) {
        cargs.push((params["step"] ?? null));
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["sseed"] ?? null) !== null) {
        cargs.push(
            "-sseed",
            (params["sseed"] ?? null)
        );
    }
    if ((params["column"] ?? null)) {
        cargs.push("-column");
    }
    if ((params["digits"] ?? null) !== null) {
        cargs.push(
            "-digits",
            String((params["digits"] ?? null))
        );
    }
    if ((params["form"] ?? null) !== null) {
        cargs.push(
            "-form",
            (params["form"] ?? null)
        );
    }
    if ((params["root"] ?? null) !== null) {
        cargs.push(
            "-root",
            (params["root"] ?? null)
        );
    }
    if ((params["sep"] ?? null) !== null) {
        cargs.push(
            "-sep",
            (params["sep"] ?? null)
        );
    }
    if ((params["suffix"] ?? null) !== null) {
        cargs.push(
            "-suffix",
            (params["suffix"] ?? null)
        );
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-scale",
            String((params["scale"] ?? null))
        );
    }
    if ((params["comma"] ?? null)) {
        cargs.push("-comma");
    }
    if ((params["skipnmodm"] ?? null) !== null) {
        cargs.push(
            "-skipnmodm",
            (params["skipnmodm"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function count_outputs(
    params: CountParameters,
    execution: Execution,
): CountOutputs {
    const ret: CountOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Numbered copies generator with custom format support and random sequence options.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CountOutputs`).
 */
function count_execute(
    params: CountParameters,
    runner: Runner | null = null,
): CountOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(COUNT_METADATA);
    params = execution.params(params)
    const cargs = count_cargs(params, execution)
    const ret = count_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Numbered copies generator with custom format support and random sequence options.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param bot Starting number or character
 * @param top Ending number or character
 * @param step Stride step or mode (integer step size, R#, S# or S)
 * @param seed Seed number for random number generator
 * @param sseed Seed string for random number generator
 * @param column Write output, one number per line
 * @param digits Number of digits to print
 * @param form Custom format string for printing the numbers
 * @param root String to print before the number
 * @param sep Separator character between the numbers
 * @param suffix String to print after the number
 * @param scale Scale factor to multiply each number
 * @param comma Put commas between the outputs
 * @param skipnmodm Skip numbers with modulus
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CountOutputs`).
 */
function count(
    bot: string,
    top: string,
    step: string | null = null,
    seed: number | null = null,
    sseed: string | null = null,
    column: boolean = false,
    digits: number | null = null,
    form: string | null = null,
    root: string | null = null,
    sep: string | null = null,
    suffix: string | null = null,
    scale: number | null = null,
    comma: boolean = false,
    skipnmodm: string | null = null,
    runner: Runner | null = null,
): CountOutputs {
    const params = count_params(bot, top, step, seed, sseed, column, digits, form, root, sep, suffix, scale, comma, skipnmodm)
    return count_execute(params, runner);
}


export {
      COUNT_METADATA,
      CountOutputs,
      CountParameters,
      count,
      count_execute,
      count_params,
};
