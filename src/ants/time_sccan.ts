// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TIME_SCCAN_METADATA: Metadata = {
    id: "75ab8260eac7574e05f9bdb079e92eb801de348f.boutiques",
    name: "TimeSCCAN",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface TimeSccanTimeseriesimageToMatrixParameters {
    "__STYXTYPE__": "timeseriesimage_to_matrix";
    "timeseries_image": InputPathType;
    "mask_image": InputPathType;
}


interface TimeSccanNetworkSccaParameters {
    "__STYXTYPE__": "network_scca";
    "time_matrix": InputPathType;
    "label_matrix": InputPathType;
}


interface TimeSccanNetworkRegionAveragingParameters {
    "__STYXTYPE__": "network_region_averaging";
    "time_matrix": InputPathType;
    "label_matrix": InputPathType;
}


interface TimeSccanParameters {
    "__STYXTYPE__": "TimeSCCAN";
    "output": string;
    "number_consecutive_labels"?: number | null | undefined;
    "minimum_region_size"?: number | null | undefined;
    "iterations"?: number | null | undefined;
    "sparsity"?: number | null | undefined;
    "n_eigenvectors"?: number | null | undefined;
    "robustify"?: number | null | undefined;
    "l1"?: number | null | undefined;
    "cluster_thresh"?: number | null | undefined;
    "ridge_cca"?: number | null | undefined;
    "partial_scca_option"?: "PQ" | "PminusRQ" | "PQminusR" | "PminusRQminusR" | null | undefined;
    "timeseriesimage_to_matrix"?: TimeSccanTimeseriesimageToMatrixParameters | null | undefined;
    "labelsimage_to_matrix"?: InputPathType | null | undefined;
    "network"?: TimeSccanNetworkSccaParameters | TimeSccanNetworkRegionAveragingParameters | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "TimeSCCAN": time_sccan_cargs,
        "timeseriesimage_to_matrix": time_sccan_timeseriesimage_to_matrix_cargs,
        "network_scca": time_sccan_network_scca_cargs,
        "network_region_averaging": time_sccan_network_region_averaging_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "TimeSCCAN": time_sccan_outputs,
    };
    return outputsFuncs[t];
}


function time_sccan_timeseriesimage_to_matrix_params(
    timeseries_image: InputPathType,
    mask_image: InputPathType,
): TimeSccanTimeseriesimageToMatrixParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "timeseriesimage_to_matrix" as const,
        "timeseries_image": timeseries_image,
        "mask_image": mask_image,
    };
    return params;
}


function time_sccan_timeseriesimage_to_matrix_cargs(
    params: TimeSccanTimeseriesimageToMatrixParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push([execution.inputFile((params["timeseries_image"] ?? null)), execution.inputFile((params["mask_image"] ?? null))].join(''));
    return cargs;
}


function time_sccan_network_scca_params(
    time_matrix: InputPathType,
    label_matrix: InputPathType,
): TimeSccanNetworkSccaParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "network_scca" as const,
        "time_matrix": time_matrix,
        "label_matrix": label_matrix,
    };
    return params;
}


function time_sccan_network_scca_cargs(
    params: TimeSccanNetworkSccaParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["scca[", execution.inputFile((params["time_matrix"] ?? null)), ",", execution.inputFile((params["label_matrix"] ?? null)), "]"].join(''));
    return cargs;
}


function time_sccan_network_region_averaging_params(
    time_matrix: InputPathType,
    label_matrix: InputPathType,
): TimeSccanNetworkRegionAveragingParameters {
    /**
     * Build parameters.
    
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "network_region_averaging" as const,
        "time_matrix": time_matrix,
        "label_matrix": label_matrix,
    };
    return params;
}


function time_sccan_network_region_averaging_cargs(
    params: TimeSccanNetworkRegionAveragingParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(["region-averaging[", execution.inputFile((params["time_matrix"] ?? null)), ",", execution.inputFile((params["label_matrix"] ?? null)), "]"].join(''));
    return cargs;
}


/**
 * Output object returned when calling `time_sccan(...)`.
 *
 * @interface
 */
interface TimeSccanOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output is the 2D correlation matrix.
     */
    correlation_matrix: OutputPathType;
}


function time_sccan_params(
    output: string,
    number_consecutive_labels: number | null = 0,
    minimum_region_size: number | null = 1,
    iterations: number | null = 20,
    sparsity: number | null = 0.1,
    n_eigenvectors: number | null = 2,
    robustify: number | null = 0,
    l1: number | null = 0,
    cluster_thresh: number | null = 1,
    ridge_cca: number | null = 0,
    partial_scca_option: "PQ" | "PminusRQ" | "PQminusR" | "PminusRQminusR" | null = null,
    timeseriesimage_to_matrix: TimeSccanTimeseriesimageToMatrixParameters | null = null,
    labelsimage_to_matrix: InputPathType | null = null,
    network: TimeSccanNetworkSccaParameters | TimeSccanNetworkRegionAveragingParameters | null = null,
): TimeSccanParameters {
    /**
     * Build parameters.
    
     * @param output Output is a 2D correlation matrix.
     * @param number_consecutive_labels Number of consecutive labels in data.
     * @param minimum_region_size Minimum size of a region: regions below this size are given a 0.0 connectivity value.
     * @param iterations Number of iterations.
     * @param sparsity Sparsity - a float from (0,1] indicating what fraction of the data to use.
     * @param n_eigenvectors Number of permutations to use in scca.
     * @param robustify Rank-based scca.
     * @param l1 Use l1 ( > 0 ) or l0 ( < 0 ) penalty, also sets gradient step size e.g. -l 0.5 ( L1 ) , -l -0.5 (L0) will set 0.5 grad descent step for either penalty.
     * @param cluster_thresh Cluster threshold on view P.
     * @param ridge_cca Number of permutations to use in scca.
     * @param partial_scca_option Choices for partial SCCA: PQ, PminusRQ, PQminusR, PminusRQminusR.
     * @param timeseriesimage_to_matrix Takes a timeseries (4D) image and converts it to a 2D matrix csv format as output. If the mask has multiple labels (more than one), then the average time series in each label will be computed and put in the csv.
     * @param labelsimage_to_matrix Takes a labeled (3D) image and converts it to a 2D matrix csv format as output.
     * @param network Build the network connectivity matrix.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "TimeSCCAN" as const,
        "output": output,
    };
    if (number_consecutive_labels !== null) {
        params["number_consecutive_labels"] = number_consecutive_labels;
    }
    if (minimum_region_size !== null) {
        params["minimum_region_size"] = minimum_region_size;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (sparsity !== null) {
        params["sparsity"] = sparsity;
    }
    if (n_eigenvectors !== null) {
        params["n_eigenvectors"] = n_eigenvectors;
    }
    if (robustify !== null) {
        params["robustify"] = robustify;
    }
    if (l1 !== null) {
        params["l1"] = l1;
    }
    if (cluster_thresh !== null) {
        params["cluster_thresh"] = cluster_thresh;
    }
    if (ridge_cca !== null) {
        params["ridge_cca"] = ridge_cca;
    }
    if (partial_scca_option !== null) {
        params["partial_scca_option"] = partial_scca_option;
    }
    if (timeseriesimage_to_matrix !== null) {
        params["timeseriesimage_to_matrix"] = timeseriesimage_to_matrix;
    }
    if (labelsimage_to_matrix !== null) {
        params["labelsimage_to_matrix"] = labelsimage_to_matrix;
    }
    if (network !== null) {
        params["network"] = network;
    }
    return params;
}


function time_sccan_cargs(
    params: TimeSccanParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("TimeSCCAN");
    cargs.push(
        "--output",
        (params["output"] ?? null)
    );
    if ((params["number_consecutive_labels"] ?? null) !== null) {
        cargs.push(
            "-l",
            String((params["number_consecutive_labels"] ?? null))
        );
    }
    if ((params["minimum_region_size"] ?? null) !== null) {
        cargs.push(
            "-R",
            String((params["minimum_region_size"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-i",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["sparsity"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["sparsity"] ?? null))
        );
    }
    if ((params["n_eigenvectors"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["n_eigenvectors"] ?? null))
        );
    }
    if ((params["robustify"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["robustify"] ?? null))
        );
    }
    if ((params["l1"] ?? null) !== null) {
        cargs.push(
            "-l",
            String((params["l1"] ?? null))
        );
    }
    if ((params["cluster_thresh"] ?? null) !== null) {
        cargs.push(
            "--ClusterThresh",
            String((params["cluster_thresh"] ?? null))
        );
    }
    if ((params["ridge_cca"] ?? null) !== null) {
        cargs.push(
            "-e",
            String((params["ridge_cca"] ?? null))
        );
    }
    if ((params["partial_scca_option"] ?? null) !== null) {
        cargs.push(
            "--partial-scca-option",
            (params["partial_scca_option"] ?? null)
        );
    }
    if ((params["timeseriesimage_to_matrix"] ?? null) !== null) {
        cargs.push(
            "--timeseriesimage-to-matrix",
            ...dynCargs((params["timeseriesimage_to_matrix"] ?? null).__STYXTYPE__)((params["timeseriesimage_to_matrix"] ?? null), execution)
        );
    }
    if ((params["labelsimage_to_matrix"] ?? null) !== null) {
        cargs.push(
            "--labelsimage-to-matrix",
            execution.inputFile((params["labelsimage_to_matrix"] ?? null))
        );
    }
    if ((params["network"] ?? null) !== null) {
        cargs.push(
            "--network",
            ...dynCargs((params["network"] ?? null).__STYXTYPE__)((params["network"] ?? null), execution)
        );
    }
    return cargs;
}


function time_sccan_outputs(
    params: TimeSccanParameters,
    execution: Execution,
): TimeSccanOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TimeSccanOutputs = {
        root: execution.outputFile("."),
        correlation_matrix: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function time_sccan_execute(
    params: TimeSccanParameters,
    execution: Execution,
): TimeSccanOutputs {
    /**
     * A tool for sparse statistical analysis on connectivity within a subject.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TimeSccanOutputs`).
     */
    params = execution.params(params)
    const cargs = time_sccan_cargs(params, execution)
    const ret = time_sccan_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function time_sccan(
    output: string,
    number_consecutive_labels: number | null = 0,
    minimum_region_size: number | null = 1,
    iterations: number | null = 20,
    sparsity: number | null = 0.1,
    n_eigenvectors: number | null = 2,
    robustify: number | null = 0,
    l1: number | null = 0,
    cluster_thresh: number | null = 1,
    ridge_cca: number | null = 0,
    partial_scca_option: "PQ" | "PminusRQ" | "PQminusR" | "PminusRQminusR" | null = null,
    timeseriesimage_to_matrix: TimeSccanTimeseriesimageToMatrixParameters | null = null,
    labelsimage_to_matrix: InputPathType | null = null,
    network: TimeSccanNetworkSccaParameters | TimeSccanNetworkRegionAveragingParameters | null = null,
    runner: Runner | null = null,
): TimeSccanOutputs {
    /**
     * A tool for sparse statistical analysis on connectivity within a subject.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param output Output is a 2D correlation matrix.
     * @param number_consecutive_labels Number of consecutive labels in data.
     * @param minimum_region_size Minimum size of a region: regions below this size are given a 0.0 connectivity value.
     * @param iterations Number of iterations.
     * @param sparsity Sparsity - a float from (0,1] indicating what fraction of the data to use.
     * @param n_eigenvectors Number of permutations to use in scca.
     * @param robustify Rank-based scca.
     * @param l1 Use l1 ( > 0 ) or l0 ( < 0 ) penalty, also sets gradient step size e.g. -l 0.5 ( L1 ) , -l -0.5 (L0) will set 0.5 grad descent step for either penalty.
     * @param cluster_thresh Cluster threshold on view P.
     * @param ridge_cca Number of permutations to use in scca.
     * @param partial_scca_option Choices for partial SCCA: PQ, PminusRQ, PQminusR, PminusRQminusR.
     * @param timeseriesimage_to_matrix Takes a timeseries (4D) image and converts it to a 2D matrix csv format as output. If the mask has multiple labels (more than one), then the average time series in each label will be computed and put in the csv.
     * @param labelsimage_to_matrix Takes a labeled (3D) image and converts it to a 2D matrix csv format as output.
     * @param network Build the network connectivity matrix.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TimeSccanOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TIME_SCCAN_METADATA);
    const params = time_sccan_params(output, number_consecutive_labels, minimum_region_size, iterations, sparsity, n_eigenvectors, robustify, l1, cluster_thresh, ridge_cca, partial_scca_option, timeseriesimage_to_matrix, labelsimage_to_matrix, network)
    return time_sccan_execute(params, execution);
}


export {
      TIME_SCCAN_METADATA,
      TimeSccanNetworkRegionAveragingParameters,
      TimeSccanNetworkSccaParameters,
      TimeSccanOutputs,
      TimeSccanParameters,
      TimeSccanTimeseriesimageToMatrixParameters,
      time_sccan,
      time_sccan_network_region_averaging_params,
      time_sccan_network_scca_params,
      time_sccan_params,
      time_sccan_timeseriesimage_to_matrix_params,
};
