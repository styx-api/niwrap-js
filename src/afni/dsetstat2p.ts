// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DSETSTAT2P_METADATA: Metadata = {
    id: "fb3a7f92243aa4cb63be144e3742b4a9615c1b61.boutiques",
    name: "dsetstat2p",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface Dsetstat2pParameters {
    "@type": "afni.dsetstat2p";
    "dataset": string;
    "statval": number;
    "bisided": boolean;
    "two_sided": boolean;
    "one_sided": boolean;
    "quiet": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.dsetstat2p": dsetstat2p_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.dsetstat2p": dsetstat2p_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dsetstat2p(...)`.
 *
 * @interface
 */
interface Dsetstat2pOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output p-value or stat value
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dataset Specify a dataset DDD and, if it has multiple sub-bricks, the [i]th subbrick with the statistic of interest MUST be selected explicitly; note the use of quotation marks around the brick selector (because of the square-brackets). Note that 'i' can be either a number of a string label selector.
 * @param statval Input stat-value S, which MUST be in the interval [0, infinity).
 * @param bisided Choose one-sided or bi-sided/two-sided testing
 * @param two_sided Choose one-sided or bi-sided/two-sided testing
 * @param one_sided Choose one-sided or bi-sided/two-sided testing
 * @param quiet An optional flag so that output ONLY the final statistic value output to standard output; this can be then be viewed, redirected to a text file or saved as a shell variable. (Default: display supplementary text.)
 *
 * @returns Parameter dictionary
 */
function dsetstat2p_params(
    dataset: string,
    statval: number,
    bisided: boolean = false,
    two_sided: boolean = false,
    one_sided: boolean = false,
    quiet: boolean = false,
): Dsetstat2pParameters {
    const params = {
        "@type": "afni.dsetstat2p" as const,
        "dataset": dataset,
        "statval": statval,
        "bisided": bisided,
        "two_sided": two_sided,
        "one_sided": one_sided,
        "quiet": quiet,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dsetstat2p_cargs(
    params: Dsetstat2pParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dsetstat2p");
    cargs.push((params["dataset"] ?? null));
    cargs.push(String((params["statval"] ?? null)));
    if ((params["bisided"] ?? null)) {
        cargs.push("-bisided");
    }
    if ((params["two_sided"] ?? null)) {
        cargs.push("-2sided");
    }
    if ((params["one_sided"] ?? null)) {
        cargs.push("-1sided");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dsetstat2p_outputs(
    params: Dsetstat2pParameters,
    execution: Execution,
): Dsetstat2pOutputs {
    const ret: Dsetstat2pOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["output.txt"].join('')),
    };
    return ret;
}


/**
 * Converts a statistic to a p-value with reference to a particular dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dsetstat2pOutputs`).
 */
function dsetstat2p_execute(
    params: Dsetstat2pParameters,
    runner: Runner | null = null,
): Dsetstat2pOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DSETSTAT2P_METADATA);
    params = execution.params(params)
    const cargs = dsetstat2p_cargs(params, execution)
    const ret = dsetstat2p_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Converts a statistic to a p-value with reference to a particular dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Specify a dataset DDD and, if it has multiple sub-bricks, the [i]th subbrick with the statistic of interest MUST be selected explicitly; note the use of quotation marks around the brick selector (because of the square-brackets). Note that 'i' can be either a number of a string label selector.
 * @param statval Input stat-value S, which MUST be in the interval [0, infinity).
 * @param bisided Choose one-sided or bi-sided/two-sided testing
 * @param two_sided Choose one-sided or bi-sided/two-sided testing
 * @param one_sided Choose one-sided or bi-sided/two-sided testing
 * @param quiet An optional flag so that output ONLY the final statistic value output to standard output; this can be then be viewed, redirected to a text file or saved as a shell variable. (Default: display supplementary text.)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dsetstat2pOutputs`).
 */
function dsetstat2p(
    dataset: string,
    statval: number,
    bisided: boolean = false,
    two_sided: boolean = false,
    one_sided: boolean = false,
    quiet: boolean = false,
    runner: Runner | null = null,
): Dsetstat2pOutputs {
    const params = dsetstat2p_params(dataset, statval, bisided, two_sided, one_sided, quiet)
    return dsetstat2p_execute(params, runner);
}


export {
      DSETSTAT2P_METADATA,
      Dsetstat2pOutputs,
      Dsetstat2pParameters,
      dsetstat2p,
      dsetstat2p_execute,
      dsetstat2p_params,
};
