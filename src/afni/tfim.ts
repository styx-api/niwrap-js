// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TFIM_METADATA: Metadata = {
    id: "38e322eb579d3ffa906fe84891ae928a1b57f743.boutiques",
    name: "tfim",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface TfimParameters {
    "@type": "afni.tfim";
    "prefix"?: string | null | undefined;
    "pthresh"?: number | null | undefined;
    "eqcorr"?: number | null | undefined;
    "paired": boolean;
    "set1_images": Array<InputPathType>;
    "set2_images": Array<InputPathType>;
    "base1_value"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.tfim": tfim_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.tfim": tfim_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tfim(...)`.
 *
 * @interface
 */
interface TfimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Difference image output. Default prefix is 'tfim'.
     */
    diff_output: OutputPathType | null;
    /**
     * T-statistic of difference. Default prefix is 'tfim'.
     */
    tspm_output: OutputPathType | null;
    /**
     * Equivalent correlation statistic output. Written if -eqcorr is used.
     */
    corr_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param set1_images First set of image files.
 * @param set2_images Second set of image files.
 * @param prefix Prefix for output filenames. Default is 'tfim'.
 * @param pthresh Significance level (per voxel) to threshold the output with. Voxels with t-statistic less significant than this will have their diff output zeroed. Default is no threshold.
 * @param eqcorr Write out the equivalent correlation statistic. The number 'dval' is the value to use for 'dof'. Default is not to write this file.
 * @param paired Compare -set1 and -set2 using a paired sample t-test. Illegal with the -base1 option.
 * @param base1_value Base value for the first set of images. Used for Usage 2.
 *
 * @returns Parameter dictionary
 */
function tfim_params(
    set1_images: Array<InputPathType>,
    set2_images: Array<InputPathType>,
    prefix: string | null = null,
    pthresh: number | null = null,
    eqcorr: number | null = null,
    paired: boolean = false,
    base1_value: number | null = null,
): TfimParameters {
    const params = {
        "@type": "afni.tfim" as const,
        "paired": paired,
        "set1_images": set1_images,
        "set2_images": set2_images,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (pthresh !== null) {
        params["pthresh"] = pthresh;
    }
    if (eqcorr !== null) {
        params["eqcorr"] = eqcorr;
    }
    if (base1_value !== null) {
        params["base1_value"] = base1_value;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tfim_cargs(
    params: TfimParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tfim");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["pthresh"] ?? null) !== null) {
        cargs.push(
            "-pthresh",
            String((params["pthresh"] ?? null))
        );
    }
    if ((params["eqcorr"] ?? null) !== null) {
        cargs.push(
            "-eqcorr",
            String((params["eqcorr"] ?? null))
        );
    }
    if ((params["paired"] ?? null)) {
        cargs.push("-paired");
    }
    cargs.push(
        "-set1",
        ...(params["set1_images"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-set2",
        ...(params["set2_images"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["base1_value"] ?? null) !== null) {
        cargs.push(
            "-base1",
            String((params["base1_value"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tfim_outputs(
    params: TfimParameters,
    execution: Execution,
): TfimOutputs {
    const ret: TfimOutputs = {
        root: execution.outputFile("."),
        diff_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".diff"].join('')) : null,
        tspm_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".tspm"].join('')) : null,
        corr_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".corr"].join('')) : null,
    };
    return ret;
}


/**
 * MCW TFIM: t-tests on sets of functional images.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `TfimOutputs`).
 */
function tfim_execute(
    params: TfimParameters,
    execution: Execution,
): TfimOutputs {
    params = execution.params(params)
    const cargs = tfim_cargs(params, execution)
    const ret = tfim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * MCW TFIM: t-tests on sets of functional images.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param set1_images First set of image files.
 * @param set2_images Second set of image files.
 * @param prefix Prefix for output filenames. Default is 'tfim'.
 * @param pthresh Significance level (per voxel) to threshold the output with. Voxels with t-statistic less significant than this will have their diff output zeroed. Default is no threshold.
 * @param eqcorr Write out the equivalent correlation statistic. The number 'dval' is the value to use for 'dof'. Default is not to write this file.
 * @param paired Compare -set1 and -set2 using a paired sample t-test. Illegal with the -base1 option.
 * @param base1_value Base value for the first set of images. Used for Usage 2.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TfimOutputs`).
 */
function tfim(
    set1_images: Array<InputPathType>,
    set2_images: Array<InputPathType>,
    prefix: string | null = null,
    pthresh: number | null = null,
    eqcorr: number | null = null,
    paired: boolean = false,
    base1_value: number | null = null,
    runner: Runner | null = null,
): TfimOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TFIM_METADATA);
    const params = tfim_params(set1_images, set2_images, prefix, pthresh, eqcorr, paired, base1_value)
    return tfim_execute(params, execution);
}


export {
      TFIM_METADATA,
      TfimOutputs,
      TfimParameters,
      tfim,
      tfim_cargs,
      tfim_execute,
      tfim_outputs,
      tfim_params,
};
