// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMUPSAM_METADATA: Metadata = {
    id: "c9b1972bc2d4e437f46d0e160e05368c4300769c.boutiques",
    name: "imupsam",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImupsamParameters {
    "@type": "afni.imupsam";
    "ascii_flag": boolean;
    "factor": number;
    "input_image": InputPathType;
    "output_image": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.imupsam": imupsam_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.imupsam": imupsam_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imupsam(...)`.
 *
 * @interface
 */
interface ImupsamOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Upsampled image output file
     */
    output_image_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param factor Upsampling factor; must be an integer in the range 2 to 30
 * @param input_image Path of the input 2D image file
 * @param output_image Path of the output upsampled image file. Use '-' to write to stdout.
 * @param ascii_flag Write the result in ASCII format: all numbers for the file are output, with no header info
 *
 * @returns Parameter dictionary
 */
function imupsam_params(
    factor: number,
    input_image: InputPathType,
    output_image: string,
    ascii_flag: boolean = false,
): ImupsamParameters {
    const params = {
        "@type": "afni.imupsam" as const,
        "ascii_flag": ascii_flag,
        "factor": factor,
        "input_image": input_image,
        "output_image": output_image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imupsam_cargs(
    params: ImupsamParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imupsam");
    if ((params["ascii_flag"] ?? null)) {
        cargs.push("-A");
    }
    cargs.push(String((params["factor"] ?? null)));
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imupsam_outputs(
    params: ImupsamParameters,
    execution: Execution,
): ImupsamOutputs {
    const ret: ImupsamOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * imupsam
 *
 * Upsamples a 2D image by a specified factor.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImupsamOutputs`).
 */
function imupsam_execute(
    params: ImupsamParameters,
    runner: Runner | null = null,
): ImupsamOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMUPSAM_METADATA);
    params = execution.params(params)
    const cargs = imupsam_cargs(params, execution)
    const ret = imupsam_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * imupsam
 *
 * Upsamples a 2D image by a specified factor.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param factor Upsampling factor; must be an integer in the range 2 to 30
 * @param input_image Path of the input 2D image file
 * @param output_image Path of the output upsampled image file. Use '-' to write to stdout.
 * @param ascii_flag Write the result in ASCII format: all numbers for the file are output, with no header info
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImupsamOutputs`).
 */
function imupsam(
    factor: number,
    input_image: InputPathType,
    output_image: string,
    ascii_flag: boolean = false,
    runner: Runner | null = null,
): ImupsamOutputs {
    const params = imupsam_params(factor, input_image, output_image, ascii_flag)
    return imupsam_execute(params, runner);
}


export {
      IMUPSAM_METADATA,
      ImupsamOutputs,
      ImupsamParameters,
      imupsam,
      imupsam_execute,
      imupsam_params,
};
