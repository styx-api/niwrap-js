// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NMOVIE_QT_METADATA: Metadata = {
    id: "3c4302c8f4835c6715ec211ff9b02ab82b8e6b5b.boutiques",
    name: "nmovie_qt",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface NmovieQtParameters {
    "@type": "freesurfer.nmovie_qt";
    "images": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.nmovie_qt": nmovie_qt_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `nmovie_qt(...)`.
 *
 * @interface
 */
interface NmovieQtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param images Input image files to be displayed. Multiple files can be provided.
 *
 * @returns Parameter dictionary
 */
function nmovie_qt_params(
    images: Array<InputPathType>,
): NmovieQtParameters {
    const params = {
        "@type": "freesurfer.nmovie_qt" as const,
        "images": images,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function nmovie_qt_cargs(
    params: NmovieQtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("nmovie_qt");
    cargs.push(...(params["images"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function nmovie_qt_outputs(
    params: NmovieQtParameters,
    execution: Execution,
): NmovieQtOutputs {
    const ret: NmovieQtOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * nmovie_qt
 *
 * An image viewer using Qt for displaying images in sequence.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NmovieQtOutputs`).
 */
function nmovie_qt_execute(
    params: NmovieQtParameters,
    runner: Runner | null = null,
): NmovieQtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NMOVIE_QT_METADATA);
    params = execution.params(params)
    const cargs = nmovie_qt_cargs(params, execution)
    const ret = nmovie_qt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * nmovie_qt
 *
 * An image viewer using Qt for displaying images in sequence.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param images Input image files to be displayed. Multiple files can be provided.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NmovieQtOutputs`).
 */
function nmovie_qt(
    images: Array<InputPathType>,
    runner: Runner | null = null,
): NmovieQtOutputs {
    const params = nmovie_qt_params(images)
    return nmovie_qt_execute(params, runner);
}


export {
      NMOVIE_QT_METADATA,
      NmovieQtOutputs,
      NmovieQtParameters,
      nmovie_qt,
      nmovie_qt_execute,
      nmovie_qt_params,
};
