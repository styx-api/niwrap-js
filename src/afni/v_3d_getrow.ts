// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_GETROW_METADATA: Metadata = {
    id: "fe2cbb2a6fe1ed79c57056bfe6ae512bbf863d90.boutiques",
    name: "3dGetrow",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dGetrowParameters {
    "@type": "afni.3dGetrow";
    "xrow"?: Array<number> | null | undefined;
    "yrow"?: Array<number> | null | undefined;
    "zrow"?: Array<number> | null | undefined;
    "input_file"?: InputPathType | null | undefined;
    "output_file"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dGetrow": v_3d_getrow_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dGetrow": v_3d_getrow_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_getrow(...)`.
 *
 * @interface
 */
interface V3dGetrowOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output .1D ASCII file
     */
    out_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param xrow Extract row along the x-direction at fixed y-index of j and fixed z-index of k
 * @param yrow Extract row along the y-direction at fixed x-index of i and fixed z-index of k
 * @param zrow Extract row along the z-direction at fixed x-index of i and fixed y-index of j
 * @param input_file Read input from dataset 'ddd' (instead of putting dataset name at end of command line)
 * @param output_file Filename for output .1D ASCII file will be 'ff' (if 'ff' is '-', then output is to stdout, the default)
 *
 * @returns Parameter dictionary
 */
function v_3d_getrow_params(
    xrow: Array<number> | null = null,
    yrow: Array<number> | null = null,
    zrow: Array<number> | null = null,
    input_file: InputPathType | null = null,
    output_file: string | null = null,
): V3dGetrowParameters {
    const params = {
        "@type": "afni.3dGetrow" as const,
    };
    if (xrow !== null) {
        params["xrow"] = xrow;
    }
    if (yrow !== null) {
        params["yrow"] = yrow;
    }
    if (zrow !== null) {
        params["zrow"] = zrow;
    }
    if (input_file !== null) {
        params["input_file"] = input_file;
    }
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_getrow_cargs(
    params: V3dGetrowParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dGetrow");
    if ((params["xrow"] ?? null) !== null) {
        cargs.push(
            "-xrow",
            ...(params["xrow"] ?? null).map(String)
        );
    }
    if ((params["yrow"] ?? null) !== null) {
        cargs.push(
            "-yrow",
            ...(params["yrow"] ?? null).map(String)
        );
    }
    if ((params["zrow"] ?? null) !== null) {
        cargs.push(
            "-zrow",
            ...(params["zrow"] ?? null).map(String)
        );
    }
    if ((params["input_file"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["input_file"] ?? null))
        );
    }
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "-output",
            (params["output_file"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_getrow_outputs(
    params: V3dGetrowParameters,
    execution: Execution,
): V3dGetrowOutputs {
    const ret: V3dGetrowOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null), ".1D"].join('')) : null,
    };
    return ret;
}


/**
 * 3dGetrow
 *
 * Program to extract 1 row from a dataset and write it as a .1D file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dGetrowOutputs`).
 */
function v_3d_getrow_execute(
    params: V3dGetrowParameters,
    runner: Runner | null = null,
): V3dGetrowOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_GETROW_METADATA);
    params = execution.params(params)
    const cargs = v_3d_getrow_cargs(params, execution)
    const ret = v_3d_getrow_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dGetrow
 *
 * Program to extract 1 row from a dataset and write it as a .1D file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param xrow Extract row along the x-direction at fixed y-index of j and fixed z-index of k
 * @param yrow Extract row along the y-direction at fixed x-index of i and fixed z-index of k
 * @param zrow Extract row along the z-direction at fixed x-index of i and fixed y-index of j
 * @param input_file Read input from dataset 'ddd' (instead of putting dataset name at end of command line)
 * @param output_file Filename for output .1D ASCII file will be 'ff' (if 'ff' is '-', then output is to stdout, the default)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dGetrowOutputs`).
 */
function v_3d_getrow(
    xrow: Array<number> | null = null,
    yrow: Array<number> | null = null,
    zrow: Array<number> | null = null,
    input_file: InputPathType | null = null,
    output_file: string | null = null,
    runner: Runner | null = null,
): V3dGetrowOutputs {
    const params = v_3d_getrow_params(xrow, yrow, zrow, input_file, output_file)
    return v_3d_getrow_execute(params, runner);
}


export {
      V3dGetrowOutputs,
      V3dGetrowParameters,
      V_3D_GETROW_METADATA,
      v_3d_getrow,
      v_3d_getrow_execute,
      v_3d_getrow_params,
};
