// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIXEL2SH_METADATA: Metadata = {
    id: "456492282209c486d341a6ea246caa0ca9702172.boutiques",
    name: "fixel2sh",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Fixel2shConfigParameters {
    "@type": "mrtrix.fixel2sh.config";
    "key": string;
    "value": string;
}


interface Fixel2shParameters {
    "@type": "mrtrix.fixel2sh";
    "lmax"?: number | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Fixel2shConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "fixel_in": InputPathType;
    "sh_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.fixel2sh": fixel2sh_cargs,
        "mrtrix.fixel2sh.config": fixel2sh_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.fixel2sh": fixel2sh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function fixel2sh_config_params(
    key: string,
    value: string,
): Fixel2shConfigParameters {
    const params = {
        "@type": "mrtrix.fixel2sh.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2sh_config_cargs(
    params: Fixel2shConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `fixel2sh(...)`.
 *
 * @interface
 */
interface Fixel2shOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output sh image.
     */
    sh_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fixel_in the input fixel data file.
 * @param sh_out the output sh image.
 * @param lmax set the maximum harmonic order for the output series (Default: 8)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function fixel2sh_params(
    fixel_in: InputPathType,
    sh_out: string,
    lmax: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fixel2shConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Fixel2shParameters {
    const params = {
        "@type": "mrtrix.fixel2sh" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "fixel_in": fixel_in,
        "sh_out": sh_out,
    };
    if (lmax !== null) {
        params["lmax"] = lmax;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fixel2sh_cargs(
    params: Fixel2shParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fixel2sh");
    if ((params["lmax"] ?? null) !== null) {
        cargs.push(
            "-lmax",
            String((params["lmax"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["fixel_in"] ?? null)));
    cargs.push((params["sh_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fixel2sh_outputs(
    params: Fixel2shParameters,
    execution: Execution,
): Fixel2shOutputs {
    const ret: Fixel2shOutputs = {
        root: execution.outputFile("."),
        sh_out: execution.outputFile([(params["sh_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Convert a fixel-based sparse-data image into an spherical harmonic image.
 *
 * This command generates spherical harmonic data from fixels that can be visualised using the ODF tool in MRview. The output ODF lobes are scaled according to the values in the input fixel image.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fixel2shOutputs`).
 */
function fixel2sh_execute(
    params: Fixel2shParameters,
    runner: Runner | null = null,
): Fixel2shOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIXEL2SH_METADATA);
    params = execution.params(params)
    const cargs = fixel2sh_cargs(params, execution)
    const ret = fixel2sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert a fixel-based sparse-data image into an spherical harmonic image.
 *
 * This command generates spherical harmonic data from fixels that can be visualised using the ODF tool in MRview. The output ODF lobes are scaled according to the values in the input fixel image.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param fixel_in the input fixel data file.
 * @param sh_out the output sh image.
 * @param lmax set the maximum harmonic order for the output series (Default: 8)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fixel2shOutputs`).
 */
function fixel2sh(
    fixel_in: InputPathType,
    sh_out: string,
    lmax: number | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fixel2shConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Fixel2shOutputs {
    const params = fixel2sh_params(fixel_in, sh_out, lmax, info, quiet, debug, force, nthreads, config, help, version)
    return fixel2sh_execute(params, runner);
}


export {
      FIXEL2SH_METADATA,
      Fixel2shConfigParameters,
      Fixel2shOutputs,
      Fixel2shParameters,
      fixel2sh,
      fixel2sh_config_params,
      fixel2sh_execute,
      fixel2sh_params,
};
