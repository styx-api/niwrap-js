// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONCAT_BVARS_METADATA: Metadata = {
    id: "6f64cfc692ee24e6924520999cf2ed114061671e.boutiques",
    name: "concat_bvars",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ConcatBvarsParameters {
    "@type": "fsl.concat_bvars";
    "output_bvars": string;
    "input_bvars": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.concat_bvars": concat_bvars_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.concat_bvars": concat_bvars_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `concat_bvars(...)`.
 *
 * @interface
 */
interface ConcatBvarsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Concatenated output .bvars file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_bvars Output .bvars file
 * @param input_bvars List of input .bvars files
 *
 * @returns Parameter dictionary
 */
function concat_bvars_params(
    output_bvars: string,
    input_bvars: Array<InputPathType>,
): ConcatBvarsParameters {
    const params = {
        "@type": "fsl.concat_bvars" as const,
        "output_bvars": output_bvars,
        "input_bvars": input_bvars,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function concat_bvars_cargs(
    params: ConcatBvarsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("concat_bvars");
    cargs.push((params["output_bvars"] ?? null));
    cargs.push(...(params["input_bvars"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function concat_bvars_outputs(
    params: ConcatBvarsParameters,
    execution: Execution,
): ConcatBvarsOutputs {
    const ret: ConcatBvarsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_bvars"] ?? null)].join('')),
    };
    return ret;
}


/**
 * concat_bvars
 *
 * Concatenate multiple .bvars files into a single .bvars file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConcatBvarsOutputs`).
 */
function concat_bvars_execute(
    params: ConcatBvarsParameters,
    runner: Runner | null = null,
): ConcatBvarsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONCAT_BVARS_METADATA);
    params = execution.params(params)
    const cargs = concat_bvars_cargs(params, execution)
    const ret = concat_bvars_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * concat_bvars
 *
 * Concatenate multiple .bvars files into a single .bvars file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param output_bvars Output .bvars file
 * @param input_bvars List of input .bvars files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConcatBvarsOutputs`).
 */
function concat_bvars(
    output_bvars: string,
    input_bvars: Array<InputPathType>,
    runner: Runner | null = null,
): ConcatBvarsOutputs {
    const params = concat_bvars_params(output_bvars, input_bvars)
    return concat_bvars_execute(params, runner);
}


export {
      CONCAT_BVARS_METADATA,
      ConcatBvarsOutputs,
      ConcatBvarsParameters,
      concat_bvars,
      concat_bvars_execute,
      concat_bvars_params,
};
