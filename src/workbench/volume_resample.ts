// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_RESAMPLE_METADATA: Metadata = {
    id: "7182598b31901aea230333f6711cb7e4f51b6bd1.boutiques",
    name: "volume-resample",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeResampleFlirtParameters {
    "@type"?: "flirt";
    "source_volume": string;
    "target_volume": string;
}
type VolumeResampleFlirtParametersTagged = Required<Pick<VolumeResampleFlirtParameters, '@type'>> & VolumeResampleFlirtParameters;


interface VolumeResampleAffineParameters {
    "@type"?: "affine";
    "affine": string;
    "flirt"?: VolumeResampleFlirtParameters | null | undefined;
}
type VolumeResampleAffineParametersTagged = Required<Pick<VolumeResampleAffineParameters, '@type'>> & VolumeResampleAffineParameters;


interface VolumeResampleFlirt1Parameters {
    "@type"?: "flirt_1";
    "source_volume": string;
    "target_volume": string;
}
type VolumeResampleFlirt1ParametersTagged = Required<Pick<VolumeResampleFlirt1Parameters, '@type'>> & VolumeResampleFlirt1Parameters;


interface VolumeResampleAffineSeriesParameters {
    "@type"?: "affine_series";
    "affine_series": string;
    "flirt"?: VolumeResampleFlirt1Parameters | null | undefined;
}
type VolumeResampleAffineSeriesParametersTagged = Required<Pick<VolumeResampleAffineSeriesParameters, '@type'>> & VolumeResampleAffineSeriesParameters;


interface VolumeResampleWarpParameters {
    "@type"?: "warp";
    "warpfield": string;
    "opt_fnirt_source_volume"?: string | null | undefined;
}
type VolumeResampleWarpParametersTagged = Required<Pick<VolumeResampleWarpParameters, '@type'>> & VolumeResampleWarpParameters;


interface VolumeResampleParameters {
    "@type"?: "workbench/volume-resample";
    "volume_in": InputPathType;
    "volume_space": string;
    "method": string;
    "volume_out": string;
    "affine"?: Array<VolumeResampleAffineParameters> | null | undefined;
    "affine_series"?: Array<VolumeResampleAffineSeriesParameters> | null | undefined;
    "warp"?: Array<VolumeResampleWarpParameters> | null | undefined;
}
type VolumeResampleParametersTagged = Required<Pick<VolumeResampleParameters, '@type'>> & VolumeResampleParameters;


/**
 * Build parameters.
 *
 * @param source_volume the source volume used when generating the affine
 * @param target_volume the target volume used when generating the affine
 *
 * @returns Parameter dictionary
 */
function volume_resample_flirt_params(
    source_volume: string,
    target_volume: string,
): VolumeResampleFlirtParametersTagged {
    const params = {
        "@type": "flirt" as const,
        "source_volume": source_volume,
        "target_volume": target_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_resample_flirt_cargs(
    params: VolumeResampleFlirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-flirt");
    cargs.push((params["source_volume"] ?? null));
    cargs.push((params["target_volume"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param affine the affine file to use
 * @param flirt MUST be used if affine is a flirt affine
 *
 * @returns Parameter dictionary
 */
function volume_resample_affine_params(
    affine: string,
    flirt: VolumeResampleFlirtParameters | null = null,
): VolumeResampleAffineParametersTagged {
    const params = {
        "@type": "affine" as const,
        "affine": affine,
    };
    if (flirt !== null) {
        params["flirt"] = flirt;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_resample_affine_cargs(
    params: VolumeResampleAffineParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-affine");
    cargs.push((params["affine"] ?? null));
    if ((params["flirt"] ?? null) !== null) {
        cargs.push(...volume_resample_flirt_cargs((params["flirt"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param source_volume the source volume used when generating the affine
 * @param target_volume the target volume used when generating the affine
 *
 * @returns Parameter dictionary
 */
function volume_resample_flirt_1_params(
    source_volume: string,
    target_volume: string,
): VolumeResampleFlirt1ParametersTagged {
    const params = {
        "@type": "flirt_1" as const,
        "source_volume": source_volume,
        "target_volume": target_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_resample_flirt_1_cargs(
    params: VolumeResampleFlirt1Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-flirt");
    cargs.push((params["source_volume"] ?? null));
    cargs.push((params["target_volume"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param affine_series text file containing 12 or 16 numbers per line, each being a row-major flattened affine
 * @param flirt MUST be used if the affines are flirt affines
 *
 * @returns Parameter dictionary
 */
function volume_resample_affine_series_params(
    affine_series: string,
    flirt: VolumeResampleFlirt1Parameters | null = null,
): VolumeResampleAffineSeriesParametersTagged {
    const params = {
        "@type": "affine_series" as const,
        "affine_series": affine_series,
    };
    if (flirt !== null) {
        params["flirt"] = flirt;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_resample_affine_series_cargs(
    params: VolumeResampleAffineSeriesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-affine-series");
    cargs.push((params["affine_series"] ?? null));
    if ((params["flirt"] ?? null) !== null) {
        cargs.push(...volume_resample_flirt_1_cargs((params["flirt"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param warpfield the warpfield file
 * @param opt_fnirt_source_volume MUST be used if using a fnirt warpfield: the source volume used when generating the warpfield
 *
 * @returns Parameter dictionary
 */
function volume_resample_warp_params(
    warpfield: string,
    opt_fnirt_source_volume: string | null = null,
): VolumeResampleWarpParametersTagged {
    const params = {
        "@type": "warp" as const,
        "warpfield": warpfield,
    };
    if (opt_fnirt_source_volume !== null) {
        params["opt_fnirt_source_volume"] = opt_fnirt_source_volume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_resample_warp_cargs(
    params: VolumeResampleWarpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-warp");
    cargs.push((params["warpfield"] ?? null));
    if ((params["opt_fnirt_source_volume"] ?? null) !== null) {
        cargs.push(
            "-fnirt",
            (params["opt_fnirt_source_volume"] ?? null)
        );
    }
    return cargs;
}


/**
 * Output object returned when calling `VolumeResampleParameters(...)`.
 *
 * @interface
 */
interface VolumeResampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_in volume to resample
 * @param volume_space a volume file in the volume space you want for the output
 * @param method the resampling method
 * @param volume_out the output volume
 * @param affine add an affine transform
 * @param affine_series add an independent affine per-frame
 * @param warp add a nonlinear warpfield transform
 *
 * @returns Parameter dictionary
 */
function volume_resample_params(
    volume_in: InputPathType,
    volume_space: string,
    method: string,
    volume_out: string,
    affine: Array<VolumeResampleAffineParameters> | null = null,
    affine_series: Array<VolumeResampleAffineSeriesParameters> | null = null,
    warp: Array<VolumeResampleWarpParameters> | null = null,
): VolumeResampleParametersTagged {
    const params = {
        "@type": "workbench/volume-resample" as const,
        "volume_in": volume_in,
        "volume_space": volume_space,
        "method": method,
        "volume_out": volume_out,
    };
    if (affine !== null) {
        params["affine"] = affine;
    }
    if (affine_series !== null) {
        params["affine_series"] = affine_series;
    }
    if (warp !== null) {
        params["warp"] = warp;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_resample_cargs(
    params: VolumeResampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-resample");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push((params["volume_space"] ?? null));
    cargs.push((params["method"] ?? null));
    cargs.push((params["volume_out"] ?? null));
    if ((params["affine"] ?? null) !== null) {
        cargs.push(...(params["affine"] ?? null).map(s => volume_resample_affine_cargs(s, execution)).flat());
    }
    if ((params["affine_series"] ?? null) !== null) {
        cargs.push(...(params["affine_series"] ?? null).map(s => volume_resample_affine_series_cargs(s, execution)).flat());
    }
    if ((params["warp"] ?? null) !== null) {
        cargs.push(...(params["warp"] ?? null).map(s => volume_resample_warp_cargs(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_resample_outputs(
    params: VolumeResampleParameters,
    execution: Execution,
): VolumeResampleOutputs {
    const ret: VolumeResampleOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * volume-resample
 *
 * Transform and resample a volume file.
 *
 * Resample a volume file with an arbitrary list of transformations.  You may specify -affine, -warp, and -affine-series multiple times each, and they will be used in the order specified.  For instance, for rigid motion correction followed by nonlinear atlas registration, specify -affine-series first, then -warp.  The recommended methods are CUBIC (cubic spline) for most data, and ENCLOSING_VOXEL for label data.  The parameter <method> must be one of:
 *
 * CUBIC
 * ENCLOSING_VOXEL
 * TRILINEAR.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeResampleOutputs`).
 */
function volume_resample_execute(
    params: VolumeResampleParameters,
    runner: Runner | null = null,
): VolumeResampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_RESAMPLE_METADATA);
    params = execution.params(params)
    const cargs = volume_resample_cargs(params, execution)
    const ret = volume_resample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * volume-resample
 *
 * Transform and resample a volume file.
 *
 * Resample a volume file with an arbitrary list of transformations.  You may specify -affine, -warp, and -affine-series multiple times each, and they will be used in the order specified.  For instance, for rigid motion correction followed by nonlinear atlas registration, specify -affine-series first, then -warp.  The recommended methods are CUBIC (cubic spline) for most data, and ENCLOSING_VOXEL for label data.  The parameter <method> must be one of:
 *
 * CUBIC
 * ENCLOSING_VOXEL
 * TRILINEAR.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_in volume to resample
 * @param volume_space a volume file in the volume space you want for the output
 * @param method the resampling method
 * @param volume_out the output volume
 * @param affine add an affine transform
 * @param affine_series add an independent affine per-frame
 * @param warp add a nonlinear warpfield transform
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeResampleOutputs`).
 */
function volume_resample(
    volume_in: InputPathType,
    volume_space: string,
    method: string,
    volume_out: string,
    affine: Array<VolumeResampleAffineParameters> | null = null,
    affine_series: Array<VolumeResampleAffineSeriesParameters> | null = null,
    warp: Array<VolumeResampleWarpParameters> | null = null,
    runner: Runner | null = null,
): VolumeResampleOutputs {
    const params = volume_resample_params(volume_in, volume_space, method, volume_out, affine, affine_series, warp)
    return volume_resample_execute(params, runner);
}


export {
      VOLUME_RESAMPLE_METADATA,
      VolumeResampleOutputs,
      volume_resample,
      volume_resample_affine_params,
      volume_resample_affine_series_params,
      volume_resample_execute,
      volume_resample_flirt_1_params,
      volume_resample_flirt_params,
      volume_resample_params,
      volume_resample_warp_params,
};
