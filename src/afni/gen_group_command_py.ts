// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GEN_GROUP_COMMAND_PY_METADATA: Metadata = {
    id: "a50fced0bad2328ced816377a295b47a238138e1.boutiques",
    name: "gen_group_command.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface GenGroupCommandPyParameters {
    "@type"?: "afni/gen_group_command.py";
    "command_name": string;
    "datasets": Array<string>;
    "prefix"?: string | null | undefined;
    "set_labels"?: Array<string> | null | undefined;
    "subj_prefix"?: string | null | undefined;
    "subj_suffix"?: string | null | undefined;
    "subs_betas"?: Array<string> | null | undefined;
    "subs_tstats"?: Array<string> | null | undefined;
    "type"?: string | null | undefined;
    "verb"?: string | null | undefined;
    "write_script"?: string | null | undefined;
    "other_options"?: Array<string> | null | undefined;
}
type GenGroupCommandPyParametersTagged = Required<Pick<GenGroupCommandPyParameters, '@type'>> & GenGroupCommandPyParameters;


/**
 * Output object returned when calling `GenGroupCommandPyParameters(...)`.
 *
 * @interface
 */
interface GenGroupCommandPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The generated command script file
     */
    output_script: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param command_name Resulting command, such as 3dttest++
 * @param datasets List of datasets, can be used multiple times for different groups
 * @param prefix Prefix for the output file names
 * @param set_labels Labels corresponding to datasets entries
 * @param subj_prefix Prefix for subject names
 * @param subj_suffix Suffix for subject names
 * @param subs_betas Sub-bricks for beta weights
 * @param subs_tstats Sub-bricks for t-stats (3dMEMA)
 * @param type_ Specify the type of test to perform
 * @param verb Set the verbosity level
 * @param write_script Write command script to specified file name
 * @param other_options List of options to pass along to result
 *
 * @returns Parameter dictionary
 */
function gen_group_command_py_params(
    command_name: string,
    datasets: Array<string>,
    prefix: string | null = null,
    set_labels: Array<string> | null = null,
    subj_prefix: string | null = null,
    subj_suffix: string | null = null,
    subs_betas: Array<string> | null = null,
    subs_tstats: Array<string> | null = null,
    type_: string | null = null,
    verb: string | null = null,
    write_script: string | null = null,
    other_options: Array<string> | null = null,
): GenGroupCommandPyParametersTagged {
    const params = {
        "@type": "afni/gen_group_command.py" as const,
        "command_name": command_name,
        "datasets": datasets,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (set_labels !== null) {
        params["set_labels"] = set_labels;
    }
    if (subj_prefix !== null) {
        params["subj_prefix"] = subj_prefix;
    }
    if (subj_suffix !== null) {
        params["subj_suffix"] = subj_suffix;
    }
    if (subs_betas !== null) {
        params["subs_betas"] = subs_betas;
    }
    if (subs_tstats !== null) {
        params["subs_tstats"] = subs_tstats;
    }
    if (type_ !== null) {
        params["type"] = type_;
    }
    if (verb !== null) {
        params["verb"] = verb;
    }
    if (write_script !== null) {
        params["write_script"] = write_script;
    }
    if (other_options !== null) {
        params["other_options"] = other_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gen_group_command_py_cargs(
    params: GenGroupCommandPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gen_group_command.py");
    cargs.push(
        "-command",
        (params["command_name"] ?? null)
    );
    cargs.push(
        "-dsets",
        ...(params["datasets"] ?? null)
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["set_labels"] ?? null) !== null) {
        cargs.push(
            "-set_labels",
            ...(params["set_labels"] ?? null)
        );
    }
    if ((params["subj_prefix"] ?? null) !== null) {
        cargs.push(
            "-subj_prefix",
            (params["subj_prefix"] ?? null)
        );
    }
    if ((params["subj_suffix"] ?? null) !== null) {
        cargs.push(
            "-subj_suffix",
            (params["subj_suffix"] ?? null)
        );
    }
    if ((params["subs_betas"] ?? null) !== null) {
        cargs.push(
            "-subs_betas",
            ...(params["subs_betas"] ?? null)
        );
    }
    if ((params["subs_tstats"] ?? null) !== null) {
        cargs.push(
            "-subs_tstats",
            ...(params["subs_tstats"] ?? null)
        );
    }
    if ((params["type"] ?? null) !== null) {
        cargs.push(
            "-type",
            (params["type"] ?? null)
        );
    }
    if ((params["verb"] ?? null) !== null) {
        cargs.push(
            "-verb",
            (params["verb"] ?? null)
        );
    }
    if ((params["write_script"] ?? null) !== null) {
        cargs.push(
            "-write_script",
            (params["write_script"] ?? null)
        );
    }
    if ((params["other_options"] ?? null) !== null) {
        cargs.push(
            "-options",
            ...(params["other_options"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gen_group_command_py_outputs(
    params: GenGroupCommandPyParameters,
    execution: Execution,
): GenGroupCommandPyOutputs {
    const ret: GenGroupCommandPyOutputs = {
        root: execution.outputFile("."),
        output_script: ((params["write_script"] ?? null) !== null) ? execution.outputFile([(params["write_script"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * gen_group_command.py
 *
 * Generate group analysis command scripts by parsing wildcard-based lists of input datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GenGroupCommandPyOutputs`).
 */
function gen_group_command_py_execute(
    params: GenGroupCommandPyParameters,
    runner: Runner | null = null,
): GenGroupCommandPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GEN_GROUP_COMMAND_PY_METADATA);
    params = execution.params(params)
    const cargs = gen_group_command_py_cargs(params, execution)
    const ret = gen_group_command_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * gen_group_command.py
 *
 * Generate group analysis command scripts by parsing wildcard-based lists of input datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param command_name Resulting command, such as 3dttest++
 * @param datasets List of datasets, can be used multiple times for different groups
 * @param prefix Prefix for the output file names
 * @param set_labels Labels corresponding to datasets entries
 * @param subj_prefix Prefix for subject names
 * @param subj_suffix Suffix for subject names
 * @param subs_betas Sub-bricks for beta weights
 * @param subs_tstats Sub-bricks for t-stats (3dMEMA)
 * @param type_ Specify the type of test to perform
 * @param verb Set the verbosity level
 * @param write_script Write command script to specified file name
 * @param other_options List of options to pass along to result
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GenGroupCommandPyOutputs`).
 */
function gen_group_command_py(
    command_name: string,
    datasets: Array<string>,
    prefix: string | null = null,
    set_labels: Array<string> | null = null,
    subj_prefix: string | null = null,
    subj_suffix: string | null = null,
    subs_betas: Array<string> | null = null,
    subs_tstats: Array<string> | null = null,
    type_: string | null = null,
    verb: string | null = null,
    write_script: string | null = null,
    other_options: Array<string> | null = null,
    runner: Runner | null = null,
): GenGroupCommandPyOutputs {
    const params = gen_group_command_py_params(command_name, datasets, prefix, set_labels, subj_prefix, subj_suffix, subs_betas, subs_tstats, type_, verb, write_script, other_options)
    return gen_group_command_py_execute(params, runner);
}


export {
      GEN_GROUP_COMMAND_PY_METADATA,
      GenGroupCommandPyOutputs,
      gen_group_command_py,
      gen_group_command_py_execute,
      gen_group_command_py_params,
};
