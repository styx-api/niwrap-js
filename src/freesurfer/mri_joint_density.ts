// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_JOINT_DENSITY_METADATA: Metadata = {
    id: "47ff381f1abbc5fa3dfbe8ae02cbf80ec452f68c.boutiques",
    name: "mri_joint_density",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriJointDensityParameters {
    "__STYXTYPE__": "mri_joint_density";
    "vol1": InputPathType;
    "vol2": InputPathType;
    "output_density_file": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_joint_density": mri_joint_density_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_joint_density": mri_joint_density_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_joint_density(...)`.
 *
 * @interface
 */
interface MriJointDensityOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the computed joint density
     */
    output_file: OutputPathType;
}


function mri_joint_density_params(
    vol1: InputPathType,
    vol2: InputPathType,
    output_density_file: string,
): MriJointDensityParameters {
    /**
     * Build parameters.
    
     * @param vol1 First input volume
     * @param vol2 Second input volume
     * @param output_density_file Output joint density file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_joint_density" as const,
        "vol1": vol1,
        "vol2": vol2,
        "output_density_file": output_density_file,
    };
    return params;
}


function mri_joint_density_cargs(
    params: MriJointDensityParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_joint_density");
    cargs.push(execution.inputFile((params["vol1"] ?? null)));
    cargs.push(execution.inputFile((params["vol2"] ?? null)));
    cargs.push((params["output_density_file"] ?? null));
    return cargs;
}


function mri_joint_density_outputs(
    params: MriJointDensityParameters,
    execution: Execution,
): MriJointDensityOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriJointDensityOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_density_file"] ?? null)].join('')),
    };
    return ret;
}


function mri_joint_density_execute(
    params: MriJointDensityParameters,
    execution: Execution,
): MriJointDensityOutputs {
    /**
     * Tool for computing joint density from two volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriJointDensityOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_joint_density_cargs(params, execution)
    const ret = mri_joint_density_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_joint_density(
    vol1: InputPathType,
    vol2: InputPathType,
    output_density_file: string,
    runner: Runner | null = null,
): MriJointDensityOutputs {
    /**
     * Tool for computing joint density from two volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param vol1 First input volume
     * @param vol2 Second input volume
     * @param output_density_file Output joint density file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriJointDensityOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_JOINT_DENSITY_METADATA);
    const params = mri_joint_density_params(vol1, vol2, output_density_file)
    return mri_joint_density_execute(params, execution);
}


export {
      MRI_JOINT_DENSITY_METADATA,
      MriJointDensityOutputs,
      MriJointDensityParameters,
      mri_joint_density,
      mri_joint_density_params,
};
