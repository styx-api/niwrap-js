// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPM_T_TO_B_METADATA: Metadata = {
    id: "aeb4cbf77424f7a4691e003e7bad0ef280a42842.boutiques",
    name: "spm_t_to_b",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SpmTToBParameters {
    "__STYXTYPE__": "spm_t_to_b";
    "spm_stem_format": string;
    "bshort_stem": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "spm_t_to_b": spm_t_to_b_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `spm_t_to_b(...)`.
 *
 * @interface
 */
interface SpmTToBOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function spm_t_to_b_params(
    spm_stem_format: string,
    bshort_stem: string,
): SpmTToBParameters {
    /**
     * Build parameters.
    
     * @param spm_stem_format Input SPM stem format.
     * @param bshort_stem Output bshort stem.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "spm_t_to_b" as const,
        "spm_stem_format": spm_stem_format,
        "bshort_stem": bshort_stem,
    };
    return params;
}


function spm_t_to_b_cargs(
    params: SpmTToBParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("spm_t_to_b");
    cargs.push((params["spm_stem_format"] ?? null));
    cargs.push((params["bshort_stem"] ?? null));
    return cargs;
}


function spm_t_to_b_outputs(
    params: SpmTToBParameters,
    execution: Execution,
): SpmTToBOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SpmTToBOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function spm_t_to_b_execute(
    params: SpmTToBParameters,
    execution: Execution,
): SpmTToBOutputs {
    /**
     * Converts SPM format to Bshort format.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SpmTToBOutputs`).
     */
    params = execution.params(params)
    const cargs = spm_t_to_b_cargs(params, execution)
    const ret = spm_t_to_b_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function spm_t_to_b(
    spm_stem_format: string,
    bshort_stem: string,
    runner: Runner | null = null,
): SpmTToBOutputs {
    /**
     * Converts SPM format to Bshort format.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param spm_stem_format Input SPM stem format.
     * @param bshort_stem Output bshort stem.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SpmTToBOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPM_T_TO_B_METADATA);
    const params = spm_t_to_b_params(spm_stem_format, bshort_stem)
    return spm_t_to_b_execute(params, execution);
}


export {
      SPM_T_TO_B_METADATA,
      SpmTToBOutputs,
      SpmTToBParameters,
      spm_t_to_b,
      spm_t_to_b_params,
};
