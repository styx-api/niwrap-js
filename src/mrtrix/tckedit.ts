// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TCKEDIT_METADATA: Metadata = {
    id: "8969d0b343f6f6903fb3ca1d150899aafd2fdca5.boutiques",
    name: "tckedit",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface TckeditVariousStringParameters {
    "@type"?: "VariousString";
    "obj": string;
}
type TckeditVariousStringParametersTagged = Required<Pick<TckeditVariousStringParameters, '@type'>> & TckeditVariousStringParameters;


interface TckeditVariousFileParameters {
    "@type"?: "VariousFile";
    "obj": InputPathType;
}
type TckeditVariousFileParametersTagged = Required<Pick<TckeditVariousFileParameters, '@type'>> & TckeditVariousFileParameters;


interface TckeditIncludeParameters {
    "@type"?: "include";
    "spec": TckeditVariousStringParametersTagged | TckeditVariousFileParametersTagged;
}
type TckeditIncludeParametersTagged = Required<Pick<TckeditIncludeParameters, '@type'>> & TckeditIncludeParameters;


interface TckeditIncludeOrderedParameters {
    "@type"?: "include_ordered";
    "image": string;
}
type TckeditIncludeOrderedParametersTagged = Required<Pick<TckeditIncludeOrderedParameters, '@type'>> & TckeditIncludeOrderedParameters;


interface TckeditVariousString1Parameters {
    "@type"?: "VariousString_1";
    "obj": string;
}
type TckeditVariousString1ParametersTagged = Required<Pick<TckeditVariousString1Parameters, '@type'>> & TckeditVariousString1Parameters;


interface TckeditVariousFile1Parameters {
    "@type"?: "VariousFile_1";
    "obj": InputPathType;
}
type TckeditVariousFile1ParametersTagged = Required<Pick<TckeditVariousFile1Parameters, '@type'>> & TckeditVariousFile1Parameters;


interface TckeditExcludeParameters {
    "@type"?: "exclude";
    "spec": TckeditVariousString1ParametersTagged | TckeditVariousFile1ParametersTagged;
}
type TckeditExcludeParametersTagged = Required<Pick<TckeditExcludeParameters, '@type'>> & TckeditExcludeParameters;


interface TckeditVariousString2Parameters {
    "@type"?: "VariousString_2";
    "obj": string;
}
type TckeditVariousString2ParametersTagged = Required<Pick<TckeditVariousString2Parameters, '@type'>> & TckeditVariousString2Parameters;


interface TckeditVariousFile2Parameters {
    "@type"?: "VariousFile_2";
    "obj": InputPathType;
}
type TckeditVariousFile2ParametersTagged = Required<Pick<TckeditVariousFile2Parameters, '@type'>> & TckeditVariousFile2Parameters;


interface TckeditMaskParameters {
    "@type"?: "mask";
    "spec": TckeditVariousString2ParametersTagged | TckeditVariousFile2ParametersTagged;
}
type TckeditMaskParametersTagged = Required<Pick<TckeditMaskParameters, '@type'>> & TckeditMaskParameters;


interface TckeditConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type TckeditConfigParametersTagged = Required<Pick<TckeditConfigParameters, '@type'>> & TckeditConfigParameters;


interface TckeditParameters {
    "@type"?: "mrtrix/tckedit";
    "include"?: Array<TckeditIncludeParameters> | null | undefined;
    "include_ordered"?: Array<TckeditIncludeOrderedParameters> | null | undefined;
    "exclude"?: Array<TckeditExcludeParameters> | null | undefined;
    "mask"?: Array<TckeditMaskParameters> | null | undefined;
    "maxlength"?: number | null | undefined;
    "minlength"?: number | null | undefined;
    "number"?: number | null | undefined;
    "skip"?: number | null | undefined;
    "maxweight"?: number | null | undefined;
    "minweight"?: number | null | undefined;
    "inverse": boolean;
    "ends_only": boolean;
    "tck_weights_in"?: InputPathType | null | undefined;
    "tck_weights_out"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<TckeditConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "tracks_in": Array<InputPathType>;
    "tracks_out": string;
}
type TckeditParametersTagged = Required<Pick<TckeditParameters, '@type'>> & TckeditParameters;


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function tckedit_spec_cargs_dyn_fn(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "VariousString": tckedit_various_string_cargs,
        "VariousFile": tckedit_various_file_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function tckedit_spec_outputs_dyn_fn(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function tckedit_spec_cargs_dyn_fn_(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "VariousString_1": tckedit_various_string_1_cargs,
        "VariousFile_1": tckedit_various_file_1_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function tckedit_spec_outputs_dyn_fn_(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function tckedit_spec_cargs_dyn_fn_2(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "VariousString_2": tckedit_various_string_2_cargs,
        "VariousFile_2": tckedit_various_file_2_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function tckedit_spec_outputs_dyn_fn_2(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function tckedit_various_string_params(
    obj: string,
): TckeditVariousStringParametersTagged {
    const params = {
        "@type": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_various_string_cargs(
    params: TckeditVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function tckedit_various_file_params(
    obj: InputPathType,
): TckeditVariousFileParametersTagged {
    const params = {
        "@type": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_various_file_cargs(
    params: TckeditVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param spec specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion regions to be accepted.
 *
 * @returns Parameter dictionary
 */
function tckedit_include_params(
    spec: TckeditVariousStringParametersTagged | TckeditVariousFileParametersTagged,
): TckeditIncludeParametersTagged {
    const params = {
        "@type": "include" as const,
        "spec": spec,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_include_cargs(
    params: TckeditIncludeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-include");
    cargs.push(...tckedit_spec_cargs_dyn_fn((params["spec"] ?? null)["@type"])((params["spec"] ?? null), execution));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param image specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion_ordered regions in the order they are specified in order to be accepted.
 *
 * @returns Parameter dictionary
 */
function tckedit_include_ordered_params(
    image: string,
): TckeditIncludeOrderedParametersTagged {
    const params = {
        "@type": "include_ordered" as const,
        "image": image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_include_ordered_cargs(
    params: TckeditIncludeOrderedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-include_ordered");
    cargs.push((params["image"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function tckedit_various_string_1_params(
    obj: string,
): TckeditVariousString1ParametersTagged {
    const params = {
        "@type": "VariousString_1" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_various_string_1_cargs(
    params: TckeditVariousString1Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function tckedit_various_file_1_params(
    obj: InputPathType,
): TckeditVariousFile1ParametersTagged {
    const params = {
        "@type": "VariousFile_1" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_various_file_1_cargs(
    params: TckeditVariousFile1Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param spec specify an exclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines that enter ANY exclude region will be discarded.
 *
 * @returns Parameter dictionary
 */
function tckedit_exclude_params(
    spec: TckeditVariousString1ParametersTagged | TckeditVariousFile1ParametersTagged,
): TckeditExcludeParametersTagged {
    const params = {
        "@type": "exclude" as const,
        "spec": spec,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_exclude_cargs(
    params: TckeditExcludeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-exclude");
    cargs.push(...tckedit_spec_cargs_dyn_fn_((params["spec"] ?? null)["@type"])((params["spec"] ?? null), execution));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function tckedit_various_string_2_params(
    obj: string,
): TckeditVariousString2ParametersTagged {
    const params = {
        "@type": "VariousString_2" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_various_string_2_cargs(
    params: TckeditVariousString2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function tckedit_various_file_2_params(
    obj: InputPathType,
): TckeditVariousFile2ParametersTagged {
    const params = {
        "@type": "VariousFile_2" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_various_file_2_cargs(
    params: TckeditVariousFile2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param spec specify a masking region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). If defined, streamlines exiting the mask will be truncated.
 *
 * @returns Parameter dictionary
 */
function tckedit_mask_params(
    spec: TckeditVariousString2ParametersTagged | TckeditVariousFile2ParametersTagged,
): TckeditMaskParametersTagged {
    const params = {
        "@type": "mask" as const,
        "spec": spec,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_mask_cargs(
    params: TckeditMaskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-mask");
    cargs.push(...tckedit_spec_cargs_dyn_fn_2((params["spec"] ?? null)["@type"])((params["spec"] ?? null), execution));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function tckedit_config_params(
    key: string,
    value: string,
): TckeditConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_config_cargs(
    params: TckeditConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `TckeditParameters(...)`.
 *
 * @interface
 */
interface TckeditOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output track file
     */
    tracks_out: OutputPathType;
    /**
     * specify the path for an output text scalar file containing streamline weights 
     */
    tck_weights_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param tracks_in the input track file(s)
 * @param tracks_out the output track file
 * @param include specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion regions to be accepted.
 * @param include_ordered specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion_ordered regions in the order they are specified in order to be accepted.
 * @param exclude specify an exclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines that enter ANY exclude region will be discarded.
 * @param mask specify a masking region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). If defined, streamlines exiting the mask will be truncated.
 * @param maxlength set the maximum length of any streamline in mm
 * @param minlength set the minimum length of any streamline in mm
 * @param number_ set the desired number of selected streamlines to be propagated to the output file
 * @param skip omit this number of selected streamlines before commencing writing to the output file
 * @param maxweight set the maximum weight of any streamline
 * @param minweight set the minimum weight of any streamline
 * @param inverse output the inverse selection of streamlines based on the criteria provided; i.e. only those streamlines that fail at least one selection criterion, and/or vertices that are outside masks if provided, will be written to file
 * @param ends_only only test the ends of each streamline against the provided include/exclude ROIs
 * @param tck_weights_in specify a text scalar file containing the streamline weights
 * @param tck_weights_out specify the path for an output text scalar file containing streamline weights
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function tckedit_params(
    tracks_in: Array<InputPathType>,
    tracks_out: string,
    include: Array<TckeditIncludeParameters> | null = null,
    include_ordered: Array<TckeditIncludeOrderedParameters> | null = null,
    exclude: Array<TckeditExcludeParameters> | null = null,
    mask: Array<TckeditMaskParameters> | null = null,
    maxlength: number | null = null,
    minlength: number | null = null,
    number_: number | null = null,
    skip: number | null = null,
    maxweight: number | null = null,
    minweight: number | null = null,
    inverse: boolean = false,
    ends_only: boolean = false,
    tck_weights_in: InputPathType | null = null,
    tck_weights_out: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckeditConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): TckeditParametersTagged {
    const params = {
        "@type": "mrtrix/tckedit" as const,
        "inverse": inverse,
        "ends_only": ends_only,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "tracks_in": tracks_in,
        "tracks_out": tracks_out,
    };
    if (include !== null) {
        params["include"] = include;
    }
    if (include_ordered !== null) {
        params["include_ordered"] = include_ordered;
    }
    if (exclude !== null) {
        params["exclude"] = exclude;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (maxlength !== null) {
        params["maxlength"] = maxlength;
    }
    if (minlength !== null) {
        params["minlength"] = minlength;
    }
    if (number_ !== null) {
        params["number"] = number_;
    }
    if (skip !== null) {
        params["skip"] = skip;
    }
    if (maxweight !== null) {
        params["maxweight"] = maxweight;
    }
    if (minweight !== null) {
        params["minweight"] = minweight;
    }
    if (tck_weights_in !== null) {
        params["tck_weights_in"] = tck_weights_in;
    }
    if (tck_weights_out !== null) {
        params["tck_weights_out"] = tck_weights_out;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tckedit_cargs(
    params: TckeditParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tckedit");
    if ((params["include"] ?? null) !== null) {
        cargs.push(...(params["include"] ?? null).map(s => tckedit_include_cargs(s, execution)).flat());
    }
    if ((params["include_ordered"] ?? null) !== null) {
        cargs.push(...(params["include_ordered"] ?? null).map(s => tckedit_include_ordered_cargs(s, execution)).flat());
    }
    if ((params["exclude"] ?? null) !== null) {
        cargs.push(...(params["exclude"] ?? null).map(s => tckedit_exclude_cargs(s, execution)).flat());
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(...(params["mask"] ?? null).map(s => tckedit_mask_cargs(s, execution)).flat());
    }
    if ((params["maxlength"] ?? null) !== null) {
        cargs.push(
            "-maxlength",
            String((params["maxlength"] ?? null))
        );
    }
    if ((params["minlength"] ?? null) !== null) {
        cargs.push(
            "-minlength",
            String((params["minlength"] ?? null))
        );
    }
    if ((params["number"] ?? null) !== null) {
        cargs.push(
            "-number",
            String((params["number"] ?? null))
        );
    }
    if ((params["skip"] ?? null) !== null) {
        cargs.push(
            "-skip",
            String((params["skip"] ?? null))
        );
    }
    if ((params["maxweight"] ?? null) !== null) {
        cargs.push(
            "-maxweight",
            String((params["maxweight"] ?? null))
        );
    }
    if ((params["minweight"] ?? null) !== null) {
        cargs.push(
            "-minweight",
            String((params["minweight"] ?? null))
        );
    }
    if ((params["inverse"] ?? false)) {
        cargs.push("-inverse");
    }
    if ((params["ends_only"] ?? false)) {
        cargs.push("-ends_only");
    }
    if ((params["tck_weights_in"] ?? null) !== null) {
        cargs.push(
            "-tck_weights_in",
            execution.inputFile((params["tck_weights_in"] ?? null))
        );
    }
    if ((params["tck_weights_out"] ?? null) !== null) {
        cargs.push(
            "-tck_weights_out",
            (params["tck_weights_out"] ?? null)
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => tckedit_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(...(params["tracks_in"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["tracks_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tckedit_outputs(
    params: TckeditParameters,
    execution: Execution,
): TckeditOutputs {
    const ret: TckeditOutputs = {
        root: execution.outputFile("."),
        tracks_out: execution.outputFile([(params["tracks_out"] ?? null)].join('')),
        tck_weights_out: ((params["tck_weights_out"] ?? null) !== null) ? execution.outputFile([(params["tck_weights_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * tckedit
 *
 * Perform various editing operations on track files.
 *
 * This command can be used to perform various types of manipulations on track data. A range of such manipulations are demonstrated in the examples provided below.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TckeditOutputs`).
 */
function tckedit_execute(
    params: TckeditParameters,
    runner: Runner | null = null,
): TckeditOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TCKEDIT_METADATA);
    params = execution.params(params)
    const cargs = tckedit_cargs(params, execution)
    const ret = tckedit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tckedit
 *
 * Perform various editing operations on track files.
 *
 * This command can be used to perform various types of manipulations on track data. A range of such manipulations are demonstrated in the examples provided below.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param tracks_in the input track file(s)
 * @param tracks_out the output track file
 * @param include specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion regions to be accepted.
 * @param include_ordered specify an inclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines must traverse ALL inclusion_ordered regions in the order they are specified in order to be accepted.
 * @param exclude specify an exclusion region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). Streamlines that enter ANY exclude region will be discarded.
 * @param mask specify a masking region of interest, as either a binary mask image, or as a sphere using 4 comma-separared values (x,y,z,radius). If defined, streamlines exiting the mask will be truncated.
 * @param maxlength set the maximum length of any streamline in mm
 * @param minlength set the minimum length of any streamline in mm
 * @param number_ set the desired number of selected streamlines to be propagated to the output file
 * @param skip omit this number of selected streamlines before commencing writing to the output file
 * @param maxweight set the maximum weight of any streamline
 * @param minweight set the minimum weight of any streamline
 * @param inverse output the inverse selection of streamlines based on the criteria provided; i.e. only those streamlines that fail at least one selection criterion, and/or vertices that are outside masks if provided, will be written to file
 * @param ends_only only test the ends of each streamline against the provided include/exclude ROIs
 * @param tck_weights_in specify a text scalar file containing the streamline weights
 * @param tck_weights_out specify the path for an output text scalar file containing streamline weights
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TckeditOutputs`).
 */
function tckedit(
    tracks_in: Array<InputPathType>,
    tracks_out: string,
    include: Array<TckeditIncludeParameters> | null = null,
    include_ordered: Array<TckeditIncludeOrderedParameters> | null = null,
    exclude: Array<TckeditExcludeParameters> | null = null,
    mask: Array<TckeditMaskParameters> | null = null,
    maxlength: number | null = null,
    minlength: number | null = null,
    number_: number | null = null,
    skip: number | null = null,
    maxweight: number | null = null,
    minweight: number | null = null,
    inverse: boolean = false,
    ends_only: boolean = false,
    tck_weights_in: InputPathType | null = null,
    tck_weights_out: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TckeditConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): TckeditOutputs {
    const params = tckedit_params(tracks_in, tracks_out, include, include_ordered, exclude, mask, maxlength, minlength, number_, skip, maxweight, minweight, inverse, ends_only, tck_weights_in, tck_weights_out, info, quiet, debug, force, nthreads, config, help, version)
    return tckedit_execute(params, runner);
}


export {
      TCKEDIT_METADATA,
      TckeditOutputs,
      tckedit,
      tckedit_config_params,
      tckedit_exclude_params,
      tckedit_execute,
      tckedit_include_ordered_params,
      tckedit_include_params,
      tckedit_mask_params,
      tckedit_params,
      tckedit_various_file_1_params,
      tckedit_various_file_2_params,
      tckedit_various_file_params,
      tckedit_various_string_1_params,
      tckedit_various_string_2_params,
      tckedit_various_string_params,
};
