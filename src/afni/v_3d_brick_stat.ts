// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_BRICK_STAT_METADATA: Metadata = {
    id: "a69dcfae94945e2d6a2a10deecf9753b5bb81503.boutiques",
    name: "3dBrickStat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dBrickStatParameters {
    "@type": "afni.3dBrickStat";
    "dataset": string;
    "quick": boolean;
    "slow": boolean;
    "min": boolean;
    "max": boolean;
    "mean": boolean;
    "sum": boolean;
    "var": boolean;
    "stdev": boolean;
    "count": boolean;
    "volume": boolean;
    "positive": boolean;
    "negative": boolean;
    "zero": boolean;
    "non_positive": boolean;
    "non_negative": boolean;
    "non_zero": boolean;
    "absolute": boolean;
    "nan": boolean;
    "nonan": boolean;
    "mask"?: string | null | undefined;
    "mrange"?: Array<number> | null | undefined;
    "mvalue"?: number | null | undefined;
    "automask": boolean;
    "percentile"?: Array<number> | null | undefined;
    "perclist"?: Array<number> | null | undefined;
    "median": boolean;
    "perc_quiet": boolean;
    "ver": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dBrickStat": v_3d_brick_stat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dBrickStat": v_3d_brick_stat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_brick_stat(...)`.
 *
 * @interface
 */
interface V3dBrickStatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Console output of computed statistics
     */
    console_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dataset Input dataset
 * @param quick Get the information from the header only (default)
 * @param slow Read the whole dataset to find the min and max values
 * @param min Print the minimum value in dataset
 * @param max Print the maximum value in dataset (default)
 * @param mean Print the mean value in dataset
 * @param sum Print the sum of values in the dataset
 * @param var_ Print the variance in the dataset
 * @param stdev Print the standard deviation in the dataset
 * @param count Print the number of voxels included
 * @param volume Print the volume of voxels included in microliters
 * @param positive Include only positive voxel values
 * @param negative Include only negative voxel values
 * @param zero Include only zero voxel values
 * @param non_positive Include only voxel values 0 or negative
 * @param non_negative Include only voxel values 0 or greater
 * @param non_zero Include only voxel values not equal to 0
 * @param absolute Use absolute value of voxel values for all calculations
 * @param nan Include only voxel values that are NaN or inf. Forces -slow mode.
 * @param nonan Exclude voxel values that are NaN or inf.
 * @param mask Use the specified dataset as mask to include/exclude voxels
 * @param mrange Only accept values between MIN and MAX (inclusive) from the mask
 * @param mvalue Only accept values equal to VAL from the mask
 * @param automask Automatically compute mask for dataset. Cannot be combined with -mask.
 * @param percentile Compute and print percentile values from p0% to p1% at a step of ps%. Only one sub-brick is accepted as input with this option.
 * @param perclist Like -percentile, but output the given percentiles
 * @param median Shortcut for -percentile 50 1 50 (or -perclist 1 50)
 * @param perc_quiet Only print percentile results, not input percentile cutoffs
 * @param ver Print author and version info
 * @param help Print help screen
 *
 * @returns Parameter dictionary
 */
function v_3d_brick_stat_params(
    dataset: string,
    quick: boolean = false,
    slow: boolean = false,
    min: boolean = false,
    max: boolean = false,
    mean: boolean = false,
    sum: boolean = false,
    var_: boolean = false,
    stdev: boolean = false,
    count: boolean = false,
    volume: boolean = false,
    positive: boolean = false,
    negative: boolean = false,
    zero: boolean = false,
    non_positive: boolean = false,
    non_negative: boolean = false,
    non_zero: boolean = false,
    absolute: boolean = false,
    nan: boolean = false,
    nonan: boolean = false,
    mask: string | null = null,
    mrange: Array<number> | null = null,
    mvalue: number | null = null,
    automask: boolean = false,
    percentile: Array<number> | null = null,
    perclist: Array<number> | null = null,
    median: boolean = false,
    perc_quiet: boolean = false,
    ver: boolean = false,
    help: boolean = false,
): V3dBrickStatParameters {
    const params = {
        "@type": "afni.3dBrickStat" as const,
        "dataset": dataset,
        "quick": quick,
        "slow": slow,
        "min": min,
        "max": max,
        "mean": mean,
        "sum": sum,
        "var": var_,
        "stdev": stdev,
        "count": count,
        "volume": volume,
        "positive": positive,
        "negative": negative,
        "zero": zero,
        "non_positive": non_positive,
        "non_negative": non_negative,
        "non_zero": non_zero,
        "absolute": absolute,
        "nan": nan,
        "nonan": nonan,
        "automask": automask,
        "median": median,
        "perc_quiet": perc_quiet,
        "ver": ver,
        "help": help,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (mrange !== null) {
        params["mrange"] = mrange;
    }
    if (mvalue !== null) {
        params["mvalue"] = mvalue;
    }
    if (percentile !== null) {
        params["percentile"] = percentile;
    }
    if (perclist !== null) {
        params["perclist"] = perclist;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_brick_stat_cargs(
    params: V3dBrickStatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dBrickStat");
    cargs.push((params["dataset"] ?? null));
    if ((params["quick"] ?? null)) {
        cargs.push("-quick");
    }
    if ((params["slow"] ?? null)) {
        cargs.push("-slow");
    }
    if ((params["min"] ?? null)) {
        cargs.push("-min");
    }
    if ((params["max"] ?? null)) {
        cargs.push("-max");
    }
    if ((params["mean"] ?? null)) {
        cargs.push("-mean");
    }
    if ((params["sum"] ?? null)) {
        cargs.push("-sum");
    }
    if ((params["var"] ?? null)) {
        cargs.push("-var");
    }
    if ((params["stdev"] ?? null)) {
        cargs.push("-stdev");
    }
    if ((params["count"] ?? null)) {
        cargs.push("-count");
    }
    if ((params["volume"] ?? null)) {
        cargs.push("-volume");
    }
    if ((params["positive"] ?? null)) {
        cargs.push("-positive");
    }
    if ((params["negative"] ?? null)) {
        cargs.push("-negative");
    }
    if ((params["zero"] ?? null)) {
        cargs.push("-zero");
    }
    if ((params["non_positive"] ?? null)) {
        cargs.push("-non-positive");
    }
    if ((params["non_negative"] ?? null)) {
        cargs.push("-non-negative");
    }
    if ((params["non_zero"] ?? null)) {
        cargs.push("-non-zero");
    }
    if ((params["absolute"] ?? null)) {
        cargs.push("-absolute");
    }
    if ((params["nan"] ?? null)) {
        cargs.push("-nan");
    }
    if ((params["nonan"] ?? null)) {
        cargs.push("-nonan");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask"] ?? null)
        );
    }
    if ((params["mrange"] ?? null) !== null) {
        cargs.push(
            "-mrange",
            ...(params["mrange"] ?? null).map(String)
        );
    }
    if ((params["mvalue"] ?? null) !== null) {
        cargs.push(
            "-mvalue",
            String((params["mvalue"] ?? null))
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["percentile"] ?? null) !== null) {
        cargs.push(
            "-percentile",
            ...(params["percentile"] ?? null).map(String)
        );
    }
    if ((params["perclist"] ?? null) !== null) {
        cargs.push(
            "-perclist",
            ...(params["perclist"] ?? null).map(String)
        );
    }
    if ((params["median"] ?? null)) {
        cargs.push("-median");
    }
    if ((params["perc_quiet"] ?? null)) {
        cargs.push("-perc_quiet");
    }
    if ((params["ver"] ?? null)) {
        cargs.push("-ver");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_brick_stat_outputs(
    params: V3dBrickStatParameters,
    execution: Execution,
): V3dBrickStatOutputs {
    const ret: V3dBrickStatOutputs = {
        root: execution.outputFile("."),
        console_output: execution.outputFile(["output.txt"].join('')),
    };
    return ret;
}


/**
 * Compute voxel statistics of an input dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBrickStatOutputs`).
 */
function v_3d_brick_stat_execute(
    params: V3dBrickStatParameters,
    runner: Runner | null = null,
): V3dBrickStatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_BRICK_STAT_METADATA);
    params = execution.params(params)
    const cargs = v_3d_brick_stat_cargs(params, execution)
    const ret = v_3d_brick_stat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute voxel statistics of an input dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input dataset
 * @param quick Get the information from the header only (default)
 * @param slow Read the whole dataset to find the min and max values
 * @param min Print the minimum value in dataset
 * @param max Print the maximum value in dataset (default)
 * @param mean Print the mean value in dataset
 * @param sum Print the sum of values in the dataset
 * @param var_ Print the variance in the dataset
 * @param stdev Print the standard deviation in the dataset
 * @param count Print the number of voxels included
 * @param volume Print the volume of voxels included in microliters
 * @param positive Include only positive voxel values
 * @param negative Include only negative voxel values
 * @param zero Include only zero voxel values
 * @param non_positive Include only voxel values 0 or negative
 * @param non_negative Include only voxel values 0 or greater
 * @param non_zero Include only voxel values not equal to 0
 * @param absolute Use absolute value of voxel values for all calculations
 * @param nan Include only voxel values that are NaN or inf. Forces -slow mode.
 * @param nonan Exclude voxel values that are NaN or inf.
 * @param mask Use the specified dataset as mask to include/exclude voxels
 * @param mrange Only accept values between MIN and MAX (inclusive) from the mask
 * @param mvalue Only accept values equal to VAL from the mask
 * @param automask Automatically compute mask for dataset. Cannot be combined with -mask.
 * @param percentile Compute and print percentile values from p0% to p1% at a step of ps%. Only one sub-brick is accepted as input with this option.
 * @param perclist Like -percentile, but output the given percentiles
 * @param median Shortcut for -percentile 50 1 50 (or -perclist 1 50)
 * @param perc_quiet Only print percentile results, not input percentile cutoffs
 * @param ver Print author and version info
 * @param help Print help screen
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBrickStatOutputs`).
 */
function v_3d_brick_stat(
    dataset: string,
    quick: boolean = false,
    slow: boolean = false,
    min: boolean = false,
    max: boolean = false,
    mean: boolean = false,
    sum: boolean = false,
    var_: boolean = false,
    stdev: boolean = false,
    count: boolean = false,
    volume: boolean = false,
    positive: boolean = false,
    negative: boolean = false,
    zero: boolean = false,
    non_positive: boolean = false,
    non_negative: boolean = false,
    non_zero: boolean = false,
    absolute: boolean = false,
    nan: boolean = false,
    nonan: boolean = false,
    mask: string | null = null,
    mrange: Array<number> | null = null,
    mvalue: number | null = null,
    automask: boolean = false,
    percentile: Array<number> | null = null,
    perclist: Array<number> | null = null,
    median: boolean = false,
    perc_quiet: boolean = false,
    ver: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): V3dBrickStatOutputs {
    const params = v_3d_brick_stat_params(dataset, quick, slow, min, max, mean, sum, var_, stdev, count, volume, positive, negative, zero, non_positive, non_negative, non_zero, absolute, nan, nonan, mask, mrange, mvalue, automask, percentile, perclist, median, perc_quiet, ver, help)
    return v_3d_brick_stat_execute(params, runner);
}


export {
      V3dBrickStatOutputs,
      V3dBrickStatParameters,
      V_3D_BRICK_STAT_METADATA,
      v_3d_brick_stat,
      v_3d_brick_stat_execute,
      v_3d_brick_stat_params,
};
