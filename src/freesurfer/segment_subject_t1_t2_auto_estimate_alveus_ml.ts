// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEGMENT_SUBJECT_T1_T2_AUTO_ESTIMATE_ALVEUS_ML_METADATA: Metadata = {
    id: "b8d0dbdff76a0b38a78846ad65a3d550ba1098a4.boutiques",
    name: "segmentSubjectT1T2_autoEstimateAlveusML",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SegmentSubjectT1T2AutoEstimateAlveusMlParameters {
    "@type": "freesurfer.segmentSubjectT1T2_autoEstimateAlveusML";
    "input_t1": InputPathType;
    "input_t2": InputPathType;
    "output_directory": string;
    "other_options"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.segmentSubjectT1T2_autoEstimateAlveusML": segment_subject_t1_t2_auto_estimate_alveus_ml_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.segmentSubjectT1T2_autoEstimateAlveusML": segment_subject_t1_t2_auto_estimate_alveus_ml_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `segment_subject_t1_t2_auto_estimate_alveus_ml(...)`.
 *
 * @interface
 */
interface SegmentSubjectT1T2AutoEstimateAlveusMlOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resultant image of the alveus segmentation.
     */
    segmentation_result: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_t1 Input T1-weighted MR image.
 * @param input_t2 Input T2-weighted MR image.
 * @param output_directory Directory to save the output files.
 * @param other_options Additional command-line options.
 *
 * @returns Parameter dictionary
 */
function segment_subject_t1_t2_auto_estimate_alveus_ml_params(
    input_t1: InputPathType,
    input_t2: InputPathType,
    output_directory: string,
    other_options: string | null = null,
): SegmentSubjectT1T2AutoEstimateAlveusMlParameters {
    const params = {
        "@type": "freesurfer.segmentSubjectT1T2_autoEstimateAlveusML" as const,
        "input_t1": input_t1,
        "input_t2": input_t2,
        "output_directory": output_directory,
    };
    if (other_options !== null) {
        params["other_options"] = other_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function segment_subject_t1_t2_auto_estimate_alveus_ml_cargs(
    params: SegmentSubjectT1T2AutoEstimateAlveusMlParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("segmentSubjectT1T2_autoEstimateAlveusML");
    cargs.push(execution.inputFile((params["input_t1"] ?? null)));
    cargs.push(execution.inputFile((params["input_t2"] ?? null)));
    cargs.push((params["output_directory"] ?? null));
    if ((params["other_options"] ?? null) !== null) {
        cargs.push((params["other_options"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function segment_subject_t1_t2_auto_estimate_alveus_ml_outputs(
    params: SegmentSubjectT1T2AutoEstimateAlveusMlParameters,
    execution: Execution,
): SegmentSubjectT1T2AutoEstimateAlveusMlOutputs {
    const ret: SegmentSubjectT1T2AutoEstimateAlveusMlOutputs = {
        root: execution.outputFile("."),
        segmentation_result: execution.outputFile([(params["output_directory"] ?? null), "/segmentation.nii.gz"].join('')),
    };
    return ret;
}


/**
 * segmentSubjectT1T2_autoEstimateAlveusML
 *
 * Tool for automatic estimation of the alveus in MR images using T1 and T2 contrast.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubjectT1T2AutoEstimateAlveusMlOutputs`).
 */
function segment_subject_t1_t2_auto_estimate_alveus_ml_execute(
    params: SegmentSubjectT1T2AutoEstimateAlveusMlParameters,
    runner: Runner | null = null,
): SegmentSubjectT1T2AutoEstimateAlveusMlOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEGMENT_SUBJECT_T1_T2_AUTO_ESTIMATE_ALVEUS_ML_METADATA);
    params = execution.params(params)
    const cargs = segment_subject_t1_t2_auto_estimate_alveus_ml_cargs(params, execution)
    const ret = segment_subject_t1_t2_auto_estimate_alveus_ml_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * segmentSubjectT1T2_autoEstimateAlveusML
 *
 * Tool for automatic estimation of the alveus in MR images using T1 and T2 contrast.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_t1 Input T1-weighted MR image.
 * @param input_t2 Input T2-weighted MR image.
 * @param output_directory Directory to save the output files.
 * @param other_options Additional command-line options.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubjectT1T2AutoEstimateAlveusMlOutputs`).
 */
function segment_subject_t1_t2_auto_estimate_alveus_ml(
    input_t1: InputPathType,
    input_t2: InputPathType,
    output_directory: string,
    other_options: string | null = null,
    runner: Runner | null = null,
): SegmentSubjectT1T2AutoEstimateAlveusMlOutputs {
    const params = segment_subject_t1_t2_auto_estimate_alveus_ml_params(input_t1, input_t2, output_directory, other_options)
    return segment_subject_t1_t2_auto_estimate_alveus_ml_execute(params, runner);
}


export {
      SEGMENT_SUBJECT_T1_T2_AUTO_ESTIMATE_ALVEUS_ML_METADATA,
      SegmentSubjectT1T2AutoEstimateAlveusMlOutputs,
      SegmentSubjectT1T2AutoEstimateAlveusMlParameters,
      segment_subject_t1_t2_auto_estimate_alveus_ml,
      segment_subject_t1_t2_auto_estimate_alveus_ml_execute,
      segment_subject_t1_t2_auto_estimate_alveus_ml_params,
};
