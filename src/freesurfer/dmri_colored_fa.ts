// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_COLORED_FA_METADATA: Metadata = {
    id: "718feafd2d16e543f6009bc9e147cd221438c40e.boutiques",
    name: "dmri_coloredFA",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriColoredFaParameters {
    "@type"?: "freesurfer/dmri_coloredFA";
    "input_volume": InputPathType;
    "output_volume": string;
}
type DmriColoredFaParametersTagged = Required<Pick<DmriColoredFaParameters, '@type'>> & DmriColoredFaParameters;


/**
 * Output object returned when calling `DmriColoredFaParameters(...)`.
 *
 * @interface
 */
interface DmriColoredFaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output colored FA image.
     */
    output_colored_fa: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input diffusion MRI volume.
 * @param output_volume Output colored FA image.
 *
 * @returns Parameter dictionary
 */
function dmri_colored_fa_params(
    input_volume: InputPathType,
    output_volume: string = "colored_FA",
): DmriColoredFaParametersTagged {
    const params = {
        "@type": "freesurfer/dmri_coloredFA" as const,
        "input_volume": input_volume,
        "output_volume": output_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_colored_fa_cargs(
    params: DmriColoredFaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_coloredFA");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? "colored_FA"));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_colored_fa_outputs(
    params: DmriColoredFaParameters,
    execution: Execution,
): DmriColoredFaOutputs {
    const ret: DmriColoredFaOutputs = {
        root: execution.outputFile("."),
        output_colored_fa: execution.outputFile([(params["output_volume"] ?? "colored_FA"), ".nii.gz"].join('')),
    };
    return ret;
}


/**
 * dmri_coloredFA
 *
 * Tool for generating colored FA maps from diffusion MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriColoredFaOutputs`).
 */
function dmri_colored_fa_execute(
    params: DmriColoredFaParameters,
    runner: Runner | null = null,
): DmriColoredFaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_COLORED_FA_METADATA);
    params = execution.params(params)
    const cargs = dmri_colored_fa_cargs(params, execution)
    const ret = dmri_colored_fa_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_coloredFA
 *
 * Tool for generating colored FA maps from diffusion MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input diffusion MRI volume.
 * @param output_volume Output colored FA image.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriColoredFaOutputs`).
 */
function dmri_colored_fa(
    input_volume: InputPathType,
    output_volume: string = "colored_FA",
    runner: Runner | null = null,
): DmriColoredFaOutputs {
    const params = dmri_colored_fa_params(input_volume, output_volume)
    return dmri_colored_fa_execute(params, runner);
}


export {
      DMRI_COLORED_FA_METADATA,
      DmriColoredFaOutputs,
      dmri_colored_fa,
      dmri_colored_fa_execute,
      dmri_colored_fa_params,
};
