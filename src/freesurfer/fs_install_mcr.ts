// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FS_INSTALL_MCR_METADATA: Metadata = {
    id: "3368d00255c0d7e5b75947a021056a82a28657ea.boutiques",
    name: "fs_install_mcr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsInstallMcrParameters {
    "__STYXTYPE__": "fs_install_mcr";
    "mcr_version": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fs_install_mcr": fs_install_mcr_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fs_install_mcr(...)`.
 *
 * @interface
 */
interface FsInstallMcrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fs_install_mcr_params(
    mcr_version: string,
): FsInstallMcrParameters {
    /**
     * Build parameters.
    
     * @param mcr_version Specify the MATLAB Compiler Runtime (MCR) version to install
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fs_install_mcr" as const,
        "mcr_version": mcr_version,
    };
    return params;
}


function fs_install_mcr_cargs(
    params: FsInstallMcrParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fs_install_mcr");
    cargs.push((params["mcr_version"] ?? null));
    return cargs;
}


function fs_install_mcr_outputs(
    params: FsInstallMcrParameters,
    execution: Execution,
): FsInstallMcrOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FsInstallMcrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fs_install_mcr_execute(
    params: FsInstallMcrParameters,
    execution: Execution,
): FsInstallMcrOutputs {
    /**
     * MCR installation tool for FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FsInstallMcrOutputs`).
     */
    params = execution.params(params)
    const cargs = fs_install_mcr_cargs(params, execution)
    const ret = fs_install_mcr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fs_install_mcr(
    mcr_version: string,
    runner: Runner | null = null,
): FsInstallMcrOutputs {
    /**
     * MCR installation tool for FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param mcr_version Specify the MATLAB Compiler Runtime (MCR) version to install
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FsInstallMcrOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FS_INSTALL_MCR_METADATA);
    const params = fs_install_mcr_params(mcr_version)
    return fs_install_mcr_execute(params, execution);
}


export {
      FS_INSTALL_MCR_METADATA,
      FsInstallMcrOutputs,
      FsInstallMcrParameters,
      fs_install_mcr,
      fs_install_mcr_params,
};
