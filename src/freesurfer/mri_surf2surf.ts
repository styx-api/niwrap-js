// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SURF2SURF_METADATA: Metadata = {
    id: "ae47ffdf2a6dbb40255406dc442c6d732bbbd16d.boutiques",
    name: "mri_surf2surf",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSurf2surfParameters {
    "__STYXTYPE__": "mri_surf2surf";
    "src_subject": string;
    "sval_path"?: InputPathType | null | undefined;
    "sval_xyz"?: string | null | undefined;
    "projfrac"?: Array<string> | null | undefined;
    "projabs"?: Array<string> | null | undefined;
    "sval_tal_xyz"?: string | null | undefined;
    "sval_area"?: string | null | undefined;
    "sval_annot"?: InputPathType | null | undefined;
    "sval_nxyz"?: string | null | undefined;
    "patch"?: Array<string> | null | undefined;
    "sfmt"?: string | null | undefined;
    "reg"?: Array<string> | null | undefined;
    "reg_inv"?: Array<string> | null | undefined;
    "srcicoorder"?: number | null | undefined;
    "trg_subject": string;
    "trgicoorder"?: number | null | undefined;
    "tval_path"?: string | null | undefined;
    "tval_xyz"?: string | null | undefined;
    "tfmt"?: string | null | undefined;
    "trg_dist"?: string | null | undefined;
    "s"?: string | null | undefined;
    "hemi"?: string | null | undefined;
    "src_hemi"?: string | null | undefined;
    "trg_hemi"?: string | null | undefined;
    "dual_hemi": boolean;
    "jac": boolean;
    "surfreg"?: string | null | undefined;
    "src_surfreg"?: string | null | undefined;
    "trg_surfreg"?: string | null | undefined;
    "mapmethod"?: string | null | undefined;
    "frame"?: number | null | undefined;
    "fwhm_src"?: number | null | undefined;
    "fwhm_trg"?: number | null | undefined;
    "nsmooth_in"?: number | null | undefined;
    "nsmooth_out"?: number | null | undefined;
    "cortex": boolean;
    "no_cortex": boolean;
    "label_src"?: InputPathType | null | undefined;
    "label_trg"?: InputPathType | null | undefined;
    "mul"?: number | null | undefined;
    "div"?: number | null | undefined;
    "reshape": boolean;
    "reshape_factor"?: number | null | undefined;
    "reshape3d": boolean;
    "split": boolean;
    "synth": boolean;
    "ones": boolean;
    "normvar": boolean;
    "seed"?: number | null | undefined;
    "prune": boolean;
    "no_prune": boolean;
    "proj_surf"?: Array<string> | null | undefined;
    "proj_norm"?: Array<string> | null | undefined;
    "reg_diff"?: string | null | undefined;
    "rms"?: InputPathType | null | undefined;
    "rms_mask"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_surf2surf": mri_surf2surf_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_surf2surf": mri_surf2surf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_surf2surf(...)`.
 *
 * @interface
 */
interface MriSurf2surfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File in which to store output values.
     */
    output_values: OutputPathType | null;
    /**
     * File containing distances from source to target vertices.
     */
    trg_distances: OutputPathType | null;
}


function mri_surf2surf_params(
    src_subject: string,
    trg_subject: string,
    sval_path: InputPathType | null = null,
    sval_xyz: string | null = null,
    projfrac: Array<string> | null = null,
    projabs: Array<string> | null = null,
    sval_tal_xyz: string | null = null,
    sval_area: string | null = null,
    sval_annot: InputPathType | null = null,
    sval_nxyz: string | null = null,
    patch: Array<string> | null = null,
    sfmt: string | null = null,
    reg: Array<string> | null = null,
    reg_inv: Array<string> | null = null,
    srcicoorder: number | null = null,
    trgicoorder: number | null = null,
    tval_path: string | null = null,
    tval_xyz: string | null = null,
    tfmt: string | null = null,
    trg_dist: string | null = null,
    s: string | null = null,
    hemi: string | null = null,
    src_hemi: string | null = null,
    trg_hemi: string | null = null,
    dual_hemi: boolean = false,
    jac: boolean = false,
    surfreg: string | null = null,
    src_surfreg: string | null = null,
    trg_surfreg: string | null = null,
    mapmethod: string | null = null,
    frame: number | null = null,
    fwhm_src: number | null = null,
    fwhm_trg: number | null = null,
    nsmooth_in: number | null = null,
    nsmooth_out: number | null = null,
    cortex: boolean = false,
    no_cortex: boolean = false,
    label_src: InputPathType | null = null,
    label_trg: InputPathType | null = null,
    mul: number | null = null,
    div: number | null = null,
    reshape: boolean = false,
    reshape_factor: number | null = null,
    reshape3d: boolean = false,
    split: boolean = false,
    synth: boolean = false,
    ones: boolean = false,
    normvar: boolean = false,
    seed: number | null = null,
    prune: boolean = false,
    no_prune: boolean = false,
    proj_surf: Array<string> | null = null,
    proj_norm: Array<string> | null = null,
    reg_diff: string | null = null,
    rms: InputPathType | null = null,
    rms_mask: InputPathType | null = null,
): MriSurf2surfParameters {
    /**
     * Build parameters.
    
     * @param src_subject Name of source subject as found in $SUBJECTS_DIR or ico for icosahedron.
     * @param trg_subject Name of target subject as found in $SUBJECTS_DIR or ico for icosahedron.
     * @param sval_path Path of the file with input values.
     * @param sval_xyz Use xyz of a surface as input.
     * @param projfrac Use projected xyz of a surface as input.
     * @param projabs Use projected xyz absolute of a surface as input.
     * @param sval_tal_xyz Use tal xyz of a surface as input.
     * @param sval_area Use vertex area of a surface as input.
     * @param sval_annot Map annotation file.
     * @param sval_nxyz Use surface normals of a surface as input.
     * @param patch Specify source patch file, target surface and number of dilations.
     * @param sfmt Source format type string.
     * @param reg Apply registration file to sval-xyz.
     * @param reg_inv Apply inverse registration file to sval-xyz.
     * @param srcicoorder Icosahedron order for the source.
     * @param trgicoorder Icosahedron order for the target.
     * @param tval_path Path of the file in which to store output values.
     * @param tval_xyz Save target value as a surface file with source xyz.
     * @param tfmt Target format type string.
     * @param trg_dist Save distance from source to target vertices.
     * @param s Use the same subject for both source and target.
     * @param hemi Hemisphere for both source and target (lh or rh).
     * @param src_hemi Hemisphere for source (lh or rh).
     * @param trg_hemi Hemisphere for target (lh or rh).
     * @param dual_hemi Assume source ?h.?h.surfreg file name.
     * @param jac Turn on jacobian correction, needed when applying to area or volume.
     * @param surfreg Surface registration for source and target (sphere.reg).
     * @param src_surfreg Source surface registration (sphere.reg).
     * @param trg_surfreg Target surface registration (sphere.reg).
     * @param mapmethod Method used to map from the vertices in one subject to another (nnfr or nnf).
     * @param frame Save only nth frame (when using paint output format).
     * @param fwhm_src Smooth the source to given FWHM.
     * @param fwhm_trg Smooth the target to given FWHM.
     * @param nsmooth_in Number of smoothing iterations for input.
     * @param nsmooth_out Number of smoothing iterations for output.
     * @param cortex Use ?h.cortex.label as a smoothing mask.
     * @param no_cortex Do NOT use ?h.cortex.label as a smoothing mask (default).
     * @param label_src Source smoothing mask.
     * @param label_trg Target smoothing mask.
     * @param mul Multiply the input by the given value.
     * @param div Divide the input by the given value.
     * @param reshape Reshape output to multiple 'slices'.
     * @param reshape_factor Reshape to Nfactor 'slices'.
     * @param reshape3d Reshape fsaverage (ico7) into 42 x 47 x 83.
     * @param split Output each frame separately.
     * @param synth Replace input with white Gaussian noise.
     * @param ones Replace input with 1s.
     * @param normvar Rescale so that stddev=1 (good with --synth).
     * @param seed Seed for synth (default is auto).
     * @param prune Remove any voxel that is zero in any time point (for smoothing).
     * @param no_prune Do not prune (default).
     * @param proj_surf Project vertices by mag*scale at each vertex.
     * @param proj_norm Project vertices by distmm at each vertex.
     * @param reg_diff Subtract reg2 from --reg (primarily for testing).
     * @param rms Save RMS of reg1-reg2 (primarily for testing).
     * @param rms_mask Compute RMS in mask (primarily for testing).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_surf2surf" as const,
        "src_subject": src_subject,
        "trg_subject": trg_subject,
        "dual_hemi": dual_hemi,
        "jac": jac,
        "cortex": cortex,
        "no_cortex": no_cortex,
        "reshape": reshape,
        "reshape3d": reshape3d,
        "split": split,
        "synth": synth,
        "ones": ones,
        "normvar": normvar,
        "prune": prune,
        "no_prune": no_prune,
    };
    if (sval_path !== null) {
        params["sval_path"] = sval_path;
    }
    if (sval_xyz !== null) {
        params["sval_xyz"] = sval_xyz;
    }
    if (projfrac !== null) {
        params["projfrac"] = projfrac;
    }
    if (projabs !== null) {
        params["projabs"] = projabs;
    }
    if (sval_tal_xyz !== null) {
        params["sval_tal_xyz"] = sval_tal_xyz;
    }
    if (sval_area !== null) {
        params["sval_area"] = sval_area;
    }
    if (sval_annot !== null) {
        params["sval_annot"] = sval_annot;
    }
    if (sval_nxyz !== null) {
        params["sval_nxyz"] = sval_nxyz;
    }
    if (patch !== null) {
        params["patch"] = patch;
    }
    if (sfmt !== null) {
        params["sfmt"] = sfmt;
    }
    if (reg !== null) {
        params["reg"] = reg;
    }
    if (reg_inv !== null) {
        params["reg_inv"] = reg_inv;
    }
    if (srcicoorder !== null) {
        params["srcicoorder"] = srcicoorder;
    }
    if (trgicoorder !== null) {
        params["trgicoorder"] = trgicoorder;
    }
    if (tval_path !== null) {
        params["tval_path"] = tval_path;
    }
    if (tval_xyz !== null) {
        params["tval_xyz"] = tval_xyz;
    }
    if (tfmt !== null) {
        params["tfmt"] = tfmt;
    }
    if (trg_dist !== null) {
        params["trg_dist"] = trg_dist;
    }
    if (s !== null) {
        params["s"] = s;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (src_hemi !== null) {
        params["src_hemi"] = src_hemi;
    }
    if (trg_hemi !== null) {
        params["trg_hemi"] = trg_hemi;
    }
    if (surfreg !== null) {
        params["surfreg"] = surfreg;
    }
    if (src_surfreg !== null) {
        params["src_surfreg"] = src_surfreg;
    }
    if (trg_surfreg !== null) {
        params["trg_surfreg"] = trg_surfreg;
    }
    if (mapmethod !== null) {
        params["mapmethod"] = mapmethod;
    }
    if (frame !== null) {
        params["frame"] = frame;
    }
    if (fwhm_src !== null) {
        params["fwhm_src"] = fwhm_src;
    }
    if (fwhm_trg !== null) {
        params["fwhm_trg"] = fwhm_trg;
    }
    if (nsmooth_in !== null) {
        params["nsmooth_in"] = nsmooth_in;
    }
    if (nsmooth_out !== null) {
        params["nsmooth_out"] = nsmooth_out;
    }
    if (label_src !== null) {
        params["label_src"] = label_src;
    }
    if (label_trg !== null) {
        params["label_trg"] = label_trg;
    }
    if (mul !== null) {
        params["mul"] = mul;
    }
    if (div !== null) {
        params["div"] = div;
    }
    if (reshape_factor !== null) {
        params["reshape_factor"] = reshape_factor;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (proj_surf !== null) {
        params["proj_surf"] = proj_surf;
    }
    if (proj_norm !== null) {
        params["proj_norm"] = proj_norm;
    }
    if (reg_diff !== null) {
        params["reg_diff"] = reg_diff;
    }
    if (rms !== null) {
        params["rms"] = rms;
    }
    if (rms_mask !== null) {
        params["rms_mask"] = rms_mask;
    }
    return params;
}


function mri_surf2surf_cargs(
    params: MriSurf2surfParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_surf2surf");
    cargs.push(
        "--srcsubject",
        (params["src_subject"] ?? null)
    );
    if ((params["sval_path"] ?? null) !== null) {
        cargs.push(
            "--sval",
            execution.inputFile((params["sval_path"] ?? null))
        );
    }
    if ((params["sval_xyz"] ?? null) !== null) {
        cargs.push(
            "--sval-xyz",
            (params["sval_xyz"] ?? null)
        );
    }
    if ((params["projfrac"] ?? null) !== null) {
        cargs.push(
            "--projfrac",
            ...(params["projfrac"] ?? null)
        );
    }
    if ((params["projabs"] ?? null) !== null) {
        cargs.push(
            "--projabs",
            ...(params["projabs"] ?? null)
        );
    }
    if ((params["sval_tal_xyz"] ?? null) !== null) {
        cargs.push(
            "--sval-tal-xyz",
            (params["sval_tal_xyz"] ?? null)
        );
    }
    if ((params["sval_area"] ?? null) !== null) {
        cargs.push(
            "--sval-area",
            (params["sval_area"] ?? null)
        );
    }
    if ((params["sval_annot"] ?? null) !== null) {
        cargs.push(
            "--sval-annot",
            execution.inputFile((params["sval_annot"] ?? null))
        );
    }
    if ((params["sval_nxyz"] ?? null) !== null) {
        cargs.push(
            "--sval-nxyz",
            (params["sval_nxyz"] ?? null)
        );
    }
    if ((params["patch"] ?? null) !== null) {
        cargs.push(
            "--patch",
            ...(params["patch"] ?? null)
        );
    }
    if ((params["sfmt"] ?? null) !== null) {
        cargs.push(
            "--sfmt",
            (params["sfmt"] ?? null)
        );
    }
    if ((params["reg"] ?? null) !== null) {
        cargs.push(
            "--reg",
            ...(params["reg"] ?? null)
        );
    }
    if ((params["reg_inv"] ?? null) !== null) {
        cargs.push(
            "--reg-inv",
            ...(params["reg_inv"] ?? null)
        );
    }
    if ((params["srcicoorder"] ?? null) !== null) {
        cargs.push(
            "--srcicoorder",
            String((params["srcicoorder"] ?? null))
        );
    }
    cargs.push(
        "--trgsubject",
        (params["trg_subject"] ?? null)
    );
    if ((params["trgicoorder"] ?? null) !== null) {
        cargs.push(
            "--trgicoorder",
            String((params["trgicoorder"] ?? null))
        );
    }
    if ((params["tval_path"] ?? null) !== null) {
        cargs.push(
            "--tval",
            (params["tval_path"] ?? null)
        );
    }
    if ((params["tval_xyz"] ?? null) !== null) {
        cargs.push(
            "--tval-xyz",
            (params["tval_xyz"] ?? null)
        );
    }
    if ((params["tfmt"] ?? null) !== null) {
        cargs.push(
            "--tfmt",
            (params["tfmt"] ?? null)
        );
    }
    if ((params["trg_dist"] ?? null) !== null) {
        cargs.push(
            "--trgdist",
            (params["trg_dist"] ?? null)
        );
    }
    if ((params["s"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["s"] ?? null)
        );
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["src_hemi"] ?? null) !== null) {
        cargs.push(
            "--srchemi",
            (params["src_hemi"] ?? null)
        );
    }
    if ((params["trg_hemi"] ?? null) !== null) {
        cargs.push(
            "--trghemi",
            (params["trg_hemi"] ?? null)
        );
    }
    if ((params["dual_hemi"] ?? null)) {
        cargs.push("--dual-hemi");
    }
    if ((params["jac"] ?? null)) {
        cargs.push("--jac");
    }
    if ((params["surfreg"] ?? null) !== null) {
        cargs.push(
            "--surfreg",
            (params["surfreg"] ?? null)
        );
    }
    if ((params["src_surfreg"] ?? null) !== null) {
        cargs.push(
            "--srcsurfreg",
            (params["src_surfreg"] ?? null)
        );
    }
    if ((params["trg_surfreg"] ?? null) !== null) {
        cargs.push(
            "--trgsurfreg",
            (params["trg_surfreg"] ?? null)
        );
    }
    if ((params["mapmethod"] ?? null) !== null) {
        cargs.push(
            "--mapmethod",
            (params["mapmethod"] ?? null)
        );
    }
    if ((params["frame"] ?? null) !== null) {
        cargs.push(
            "--frame",
            String((params["frame"] ?? null))
        );
    }
    if ((params["fwhm_src"] ?? null) !== null) {
        cargs.push(
            "--fwhm-src",
            String((params["fwhm_src"] ?? null))
        );
    }
    if ((params["fwhm_trg"] ?? null) !== null) {
        cargs.push(
            "--fwhm-trg",
            String((params["fwhm_trg"] ?? null))
        );
    }
    if ((params["nsmooth_in"] ?? null) !== null) {
        cargs.push(
            "--nsmooth-in",
            String((params["nsmooth_in"] ?? null))
        );
    }
    if ((params["nsmooth_out"] ?? null) !== null) {
        cargs.push(
            "--nsmooth-out",
            String((params["nsmooth_out"] ?? null))
        );
    }
    if ((params["cortex"] ?? null)) {
        cargs.push("--cortex");
    }
    if ((params["no_cortex"] ?? null)) {
        cargs.push("--no-cortex");
    }
    if ((params["label_src"] ?? null) !== null) {
        cargs.push(
            "--label-src",
            execution.inputFile((params["label_src"] ?? null))
        );
    }
    if ((params["label_trg"] ?? null) !== null) {
        cargs.push(
            "--label-trg",
            execution.inputFile((params["label_trg"] ?? null))
        );
    }
    if ((params["mul"] ?? null) !== null) {
        cargs.push(
            "--mul",
            String((params["mul"] ?? null))
        );
    }
    if ((params["div"] ?? null) !== null) {
        cargs.push(
            "--div",
            String((params["div"] ?? null))
        );
    }
    if ((params["reshape"] ?? null)) {
        cargs.push("--reshape");
    }
    if ((params["reshape_factor"] ?? null) !== null) {
        cargs.push(
            "--reshape-factor",
            String((params["reshape_factor"] ?? null))
        );
    }
    if ((params["reshape3d"] ?? null)) {
        cargs.push("--reshape3d");
    }
    if ((params["split"] ?? null)) {
        cargs.push("--split");
    }
    if ((params["synth"] ?? null)) {
        cargs.push("--synth");
    }
    if ((params["ones"] ?? null)) {
        cargs.push("--ones");
    }
    if ((params["normvar"] ?? null)) {
        cargs.push("--normvar");
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["prune"] ?? null)) {
        cargs.push("--prune");
    }
    if ((params["no_prune"] ?? null)) {
        cargs.push("--no-prune");
    }
    if ((params["proj_surf"] ?? null) !== null) {
        cargs.push(
            "--proj-surf",
            ...(params["proj_surf"] ?? null)
        );
    }
    if ((params["proj_norm"] ?? null) !== null) {
        cargs.push(
            "--proj-norm",
            ...(params["proj_norm"] ?? null)
        );
    }
    if ((params["reg_diff"] ?? null) !== null) {
        cargs.push(
            "--reg-diff",
            (params["reg_diff"] ?? null)
        );
    }
    if ((params["rms"] ?? null) !== null) {
        cargs.push(
            "--rms",
            execution.inputFile((params["rms"] ?? null))
        );
    }
    if ((params["rms_mask"] ?? null) !== null) {
        cargs.push(
            "--rms-mask",
            execution.inputFile((params["rms_mask"] ?? null))
        );
    }
    return cargs;
}


function mri_surf2surf_outputs(
    params: MriSurf2surfParameters,
    execution: Execution,
): MriSurf2surfOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriSurf2surfOutputs = {
        root: execution.outputFile("."),
        output_values: ((params["tval_path"] ?? null) !== null) ? execution.outputFile([(params["tval_path"] ?? null)].join('')) : null,
        trg_distances: ((params["trg_dist"] ?? null) !== null) ? execution.outputFile([(params["trg_dist"] ?? null)].join('')) : null,
    };
    return ret;
}


function mri_surf2surf_execute(
    params: MriSurf2surfParameters,
    execution: Execution,
): MriSurf2surfOutputs {
    /**
     * Resample one surface onto another using FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriSurf2surfOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_surf2surf_cargs(params, execution)
    const ret = mri_surf2surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_surf2surf(
    src_subject: string,
    trg_subject: string,
    sval_path: InputPathType | null = null,
    sval_xyz: string | null = null,
    projfrac: Array<string> | null = null,
    projabs: Array<string> | null = null,
    sval_tal_xyz: string | null = null,
    sval_area: string | null = null,
    sval_annot: InputPathType | null = null,
    sval_nxyz: string | null = null,
    patch: Array<string> | null = null,
    sfmt: string | null = null,
    reg: Array<string> | null = null,
    reg_inv: Array<string> | null = null,
    srcicoorder: number | null = null,
    trgicoorder: number | null = null,
    tval_path: string | null = null,
    tval_xyz: string | null = null,
    tfmt: string | null = null,
    trg_dist: string | null = null,
    s: string | null = null,
    hemi: string | null = null,
    src_hemi: string | null = null,
    trg_hemi: string | null = null,
    dual_hemi: boolean = false,
    jac: boolean = false,
    surfreg: string | null = null,
    src_surfreg: string | null = null,
    trg_surfreg: string | null = null,
    mapmethod: string | null = null,
    frame: number | null = null,
    fwhm_src: number | null = null,
    fwhm_trg: number | null = null,
    nsmooth_in: number | null = null,
    nsmooth_out: number | null = null,
    cortex: boolean = false,
    no_cortex: boolean = false,
    label_src: InputPathType | null = null,
    label_trg: InputPathType | null = null,
    mul: number | null = null,
    div: number | null = null,
    reshape: boolean = false,
    reshape_factor: number | null = null,
    reshape3d: boolean = false,
    split: boolean = false,
    synth: boolean = false,
    ones: boolean = false,
    normvar: boolean = false,
    seed: number | null = null,
    prune: boolean = false,
    no_prune: boolean = false,
    proj_surf: Array<string> | null = null,
    proj_norm: Array<string> | null = null,
    reg_diff: string | null = null,
    rms: InputPathType | null = null,
    rms_mask: InputPathType | null = null,
    runner: Runner | null = null,
): MriSurf2surfOutputs {
    /**
     * Resample one surface onto another using FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param src_subject Name of source subject as found in $SUBJECTS_DIR or ico for icosahedron.
     * @param trg_subject Name of target subject as found in $SUBJECTS_DIR or ico for icosahedron.
     * @param sval_path Path of the file with input values.
     * @param sval_xyz Use xyz of a surface as input.
     * @param projfrac Use projected xyz of a surface as input.
     * @param projabs Use projected xyz absolute of a surface as input.
     * @param sval_tal_xyz Use tal xyz of a surface as input.
     * @param sval_area Use vertex area of a surface as input.
     * @param sval_annot Map annotation file.
     * @param sval_nxyz Use surface normals of a surface as input.
     * @param patch Specify source patch file, target surface and number of dilations.
     * @param sfmt Source format type string.
     * @param reg Apply registration file to sval-xyz.
     * @param reg_inv Apply inverse registration file to sval-xyz.
     * @param srcicoorder Icosahedron order for the source.
     * @param trgicoorder Icosahedron order for the target.
     * @param tval_path Path of the file in which to store output values.
     * @param tval_xyz Save target value as a surface file with source xyz.
     * @param tfmt Target format type string.
     * @param trg_dist Save distance from source to target vertices.
     * @param s Use the same subject for both source and target.
     * @param hemi Hemisphere for both source and target (lh or rh).
     * @param src_hemi Hemisphere for source (lh or rh).
     * @param trg_hemi Hemisphere for target (lh or rh).
     * @param dual_hemi Assume source ?h.?h.surfreg file name.
     * @param jac Turn on jacobian correction, needed when applying to area or volume.
     * @param surfreg Surface registration for source and target (sphere.reg).
     * @param src_surfreg Source surface registration (sphere.reg).
     * @param trg_surfreg Target surface registration (sphere.reg).
     * @param mapmethod Method used to map from the vertices in one subject to another (nnfr or nnf).
     * @param frame Save only nth frame (when using paint output format).
     * @param fwhm_src Smooth the source to given FWHM.
     * @param fwhm_trg Smooth the target to given FWHM.
     * @param nsmooth_in Number of smoothing iterations for input.
     * @param nsmooth_out Number of smoothing iterations for output.
     * @param cortex Use ?h.cortex.label as a smoothing mask.
     * @param no_cortex Do NOT use ?h.cortex.label as a smoothing mask (default).
     * @param label_src Source smoothing mask.
     * @param label_trg Target smoothing mask.
     * @param mul Multiply the input by the given value.
     * @param div Divide the input by the given value.
     * @param reshape Reshape output to multiple 'slices'.
     * @param reshape_factor Reshape to Nfactor 'slices'.
     * @param reshape3d Reshape fsaverage (ico7) into 42 x 47 x 83.
     * @param split Output each frame separately.
     * @param synth Replace input with white Gaussian noise.
     * @param ones Replace input with 1s.
     * @param normvar Rescale so that stddev=1 (good with --synth).
     * @param seed Seed for synth (default is auto).
     * @param prune Remove any voxel that is zero in any time point (for smoothing).
     * @param no_prune Do not prune (default).
     * @param proj_surf Project vertices by mag*scale at each vertex.
     * @param proj_norm Project vertices by distmm at each vertex.
     * @param reg_diff Subtract reg2 from --reg (primarily for testing).
     * @param rms Save RMS of reg1-reg2 (primarily for testing).
     * @param rms_mask Compute RMS in mask (primarily for testing).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriSurf2surfOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SURF2SURF_METADATA);
    const params = mri_surf2surf_params(src_subject, trg_subject, sval_path, sval_xyz, projfrac, projabs, sval_tal_xyz, sval_area, sval_annot, sval_nxyz, patch, sfmt, reg, reg_inv, srcicoorder, trgicoorder, tval_path, tval_xyz, tfmt, trg_dist, s, hemi, src_hemi, trg_hemi, dual_hemi, jac, surfreg, src_surfreg, trg_surfreg, mapmethod, frame, fwhm_src, fwhm_trg, nsmooth_in, nsmooth_out, cortex, no_cortex, label_src, label_trg, mul, div, reshape, reshape_factor, reshape3d, split, synth, ones, normvar, seed, prune, no_prune, proj_surf, proj_norm, reg_diff, rms, rms_mask)
    return mri_surf2surf_execute(params, execution);
}


export {
      MRI_SURF2SURF_METADATA,
      MriSurf2surfOutputs,
      MriSurf2surfParameters,
      mri_surf2surf,
      mri_surf2surf_params,
};
