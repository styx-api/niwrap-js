// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PARSE_FS_LT_LOG_PY_METADATA: Metadata = {
    id: "eea3154b221cecc946f3e7770034475288b7026a.boutiques",
    name: "parse_fs_lt_log.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ParseFsLtLogPyParameters {
    "__STYXTYPE__": "parse_fs_lt_log.py";
    "logfile": InputPathType;
    "labels": Array<string>;
    "show_orig": boolean;
    "show_all_orig": boolean;
    "verbosity"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "parse_fs_lt_log.py": parse_fs_lt_log_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `parse_fs_lt_log_py(...)`.
 *
 * @interface
 */
interface ParseFsLtLogPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function parse_fs_lt_log_py_params(
    logfile: InputPathType,
    labels: Array<string>,
    show_orig: boolean = false,
    show_all_orig: boolean = false,
    verbosity: number | null = null,
): ParseFsLtLogPyParameters {
    /**
     * Build parameters.
    
     * @param logfile Specify rank log file.
     * @param labels Specify a list of labels to search for.
     * @param show_orig Show original label indices.
     * @param show_all_orig Show all original label indices.
     * @param verbosity Specify verbosity level.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "parse_fs_lt_log.py" as const,
        "logfile": logfile,
        "labels": labels,
        "show_orig": show_orig,
        "show_all_orig": show_all_orig,
    };
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


function parse_fs_lt_log_py_cargs(
    params: ParseFsLtLogPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("parse_fs_lt_log.py");
    cargs.push(
        "-logfile",
        execution.inputFile((params["logfile"] ?? null))
    );
    cargs.push(
        "-labels",
        ...(params["labels"] ?? null)
    );
    if ((params["show_orig"] ?? null)) {
        cargs.push("-show_orig");
    }
    if ((params["show_all_orig"] ?? null)) {
        cargs.push("-show_all_orig");
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    return cargs;
}


function parse_fs_lt_log_py_outputs(
    params: ParseFsLtLogPyParameters,
    execution: Execution,
): ParseFsLtLogPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ParseFsLtLogPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function parse_fs_lt_log_py_execute(
    params: ParseFsLtLogPyParameters,
    execution: Execution,
): ParseFsLtLogPyOutputs {
    /**
     * Parses FreeSurfer labeltable log file and retrieves labeltable indices.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ParseFsLtLogPyOutputs`).
     */
    params = execution.params(params)
    const cargs = parse_fs_lt_log_py_cargs(params, execution)
    const ret = parse_fs_lt_log_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function parse_fs_lt_log_py(
    logfile: InputPathType,
    labels: Array<string>,
    show_orig: boolean = false,
    show_all_orig: boolean = false,
    verbosity: number | null = null,
    runner: Runner | null = null,
): ParseFsLtLogPyOutputs {
    /**
     * Parses FreeSurfer labeltable log file and retrieves labeltable indices.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param logfile Specify rank log file.
     * @param labels Specify a list of labels to search for.
     * @param show_orig Show original label indices.
     * @param show_all_orig Show all original label indices.
     * @param verbosity Specify verbosity level.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ParseFsLtLogPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PARSE_FS_LT_LOG_PY_METADATA);
    const params = parse_fs_lt_log_py_params(logfile, labels, show_orig, show_all_orig, verbosity)
    return parse_fs_lt_log_py_execute(params, execution);
}


export {
      PARSE_FS_LT_LOG_PY_METADATA,
      ParseFsLtLogPyOutputs,
      ParseFsLtLogPyParameters,
      parse_fs_lt_log_py,
      parse_fs_lt_log_py_params,
};
