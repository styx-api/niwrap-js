// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_VEC_RGB_TO_HSL_METADATA: Metadata = {
    id: "6117ba68b426e9e30b15374be67ca0934595ccef.boutiques",
    name: "3dVecRGB_to_HSL",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dVecRgbToHslParameters {
    "__STYXTYPE__": "3dVecRGB_to_HSL";
    "prefix": string;
    "in_vec": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "in_scal"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dVecRGB_to_HSL": v_3d_vec_rgb_to_hsl_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dVecRGB_to_HSL": v_3d_vec_rgb_to_hsl_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_vec_rgb_to_hsl(...)`.
 *
 * @interface
 */
interface V3dVecRgbToHslOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output HSL dataset
     */
    output_hsl_dataset: OutputPathType;
}


function v_3d_vec_rgb_to_hsl_params(
    prefix: string,
    in_vec: InputPathType,
    mask: InputPathType | null = null,
    in_scal: InputPathType | null = null,
): V3dVecRgbToHslParameters {
    /**
     * Build parameters.
    
     * @param prefix Output file name part.
     * @param in_vec Input RGB vector file of three bricks, presumably each having values in the interval [0,1].
     * @param mask Whole brain mask within which to calculate things. Otherwise, data should be masked already.
     * @param in_scal Scalar file (single brick) which will be appended to the output file, mainly aimed at loading in an FA data set for tract volume coloration.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dVecRGB_to_HSL" as const,
        "prefix": prefix,
        "in_vec": in_vec,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (in_scal !== null) {
        params["in_scal"] = in_scal;
    }
    return params;
}


function v_3d_vec_rgb_to_hsl_cargs(
    params: V3dVecRgbToHslParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dVecRGB_to_HSL");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-in_vec",
        execution.inputFile((params["in_vec"] ?? null))
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["in_scal"] ?? null) !== null) {
        cargs.push(
            "-in_scal",
            execution.inputFile((params["in_scal"] ?? null))
        );
    }
    return cargs;
}


function v_3d_vec_rgb_to_hsl_outputs(
    params: V3dVecRgbToHslParameters,
    execution: Execution,
): V3dVecRgbToHslOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dVecRgbToHslOutputs = {
        root: execution.outputFile("."),
        output_hsl_dataset: execution.outputFile([(params["prefix"] ?? null), "_HSL+*.HEAD"].join('')),
    };
    return ret;
}


function v_3d_vec_rgb_to_hsl_execute(
    params: V3dVecRgbToHslParameters,
    execution: Execution,
): V3dVecRgbToHslOutputs {
    /**
     * Convert a 3-brick RGB (red, green, blue) data set to an HSL (hue, saturation, luminance) one.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dVecRgbToHslOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_vec_rgb_to_hsl_cargs(params, execution)
    const ret = v_3d_vec_rgb_to_hsl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_vec_rgb_to_hsl(
    prefix: string,
    in_vec: InputPathType,
    mask: InputPathType | null = null,
    in_scal: InputPathType | null = null,
    runner: Runner | null = null,
): V3dVecRgbToHslOutputs {
    /**
     * Convert a 3-brick RGB (red, green, blue) data set to an HSL (hue, saturation, luminance) one.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix Output file name part.
     * @param in_vec Input RGB vector file of three bricks, presumably each having values in the interval [0,1].
     * @param mask Whole brain mask within which to calculate things. Otherwise, data should be masked already.
     * @param in_scal Scalar file (single brick) which will be appended to the output file, mainly aimed at loading in an FA data set for tract volume coloration.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dVecRgbToHslOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_VEC_RGB_TO_HSL_METADATA);
    const params = v_3d_vec_rgb_to_hsl_params(prefix, in_vec, mask, in_scal)
    return v_3d_vec_rgb_to_hsl_execute(params, execution);
}


export {
      V3dVecRgbToHslOutputs,
      V3dVecRgbToHslParameters,
      V_3D_VEC_RGB_TO_HSL_METADATA,
      v_3d_vec_rgb_to_hsl,
      v_3d_vec_rgb_to_hsl_params,
};
