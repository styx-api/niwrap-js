// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const INVFEATREG_METADATA: Metadata = {
    id: "99bb1f8fb4e4e88660733aa203a1237143f95934.boutiques",
    name: "invfeatreg",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface InvfeatregParameters {
    "@type": "fsl.invfeatreg";
    "feat_directory": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.invfeatreg": invfeatreg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `invfeatreg(...)`.
 *
 * @interface
 */
interface InvfeatregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param feat_directory FEAT Directory
 *
 * @returns Parameter dictionary
 */
function invfeatreg_params(
    feat_directory: string,
): InvfeatregParameters {
    const params = {
        "@type": "fsl.invfeatreg" as const,
        "feat_directory": feat_directory,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function invfeatreg_cargs(
    params: InvfeatregParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("invfeatreg");
    cargs.push((params["feat_directory"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function invfeatreg_outputs(
    params: InvfeatregParameters,
    execution: Execution,
): InvfeatregOutputs {
    const ret: InvfeatregOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * invfeatreg
 *
 * Inverse warp image using FNIRT.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `InvfeatregOutputs`).
 */
function invfeatreg_execute(
    params: InvfeatregParameters,
    runner: Runner | null = null,
): InvfeatregOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(INVFEATREG_METADATA);
    params = execution.params(params)
    const cargs = invfeatreg_cargs(params, execution)
    const ret = invfeatreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * invfeatreg
 *
 * Inverse warp image using FNIRT.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param feat_directory FEAT Directory
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `InvfeatregOutputs`).
 */
function invfeatreg(
    feat_directory: string,
    runner: Runner | null = null,
): InvfeatregOutputs {
    const params = invfeatreg_params(feat_directory)
    return invfeatreg_execute(params, runner);
}


export {
      INVFEATREG_METADATA,
      InvfeatregOutputs,
      InvfeatregParameters,
      invfeatreg,
      invfeatreg_execute,
      invfeatreg_params,
};
