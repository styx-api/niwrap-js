// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TBSS_X_METADATA: Metadata = {
    id: "92fc476ae5e966d3c5014f57b61d18334a4b32e8.boutiques",
    name: "tbss_x",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface TbssXParameters {
    "__STYXTYPE__": "tbss_x";
    "scalar_dirs": Array<string>;
    "vector_dirs": Array<string>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tbss_x": tbss_x_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tbss_x(...)`.
 *
 * @interface
 */
interface TbssXOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function tbss_x_params(
    scalar_dirs: Array<string>,
    vector_dirs: Array<string>,
): TbssXParameters {
    /**
     * Build parameters.
    
     * @param scalar_dirs List of scalar directories (e.g., F1, F2)
     * @param vector_dirs List of vector directories (e.g., D1, D2)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tbss_x" as const,
        "scalar_dirs": scalar_dirs,
        "vector_dirs": vector_dirs,
    };
    return params;
}


function tbss_x_cargs(
    params: TbssXParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tbss_x");
    cargs.push(...(params["scalar_dirs"] ?? null));
    cargs.push(...(params["vector_dirs"] ?? null));
    return cargs;
}


function tbss_x_outputs(
    params: TbssXParameters,
    execution: Execution,
): TbssXOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TbssXOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function tbss_x_execute(
    params: TbssXParameters,
    execution: Execution,
): TbssXOutputs {
    /**
     * TBSS cross-subject script for processing scalar and vector directories.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TbssXOutputs`).
     */
    params = execution.params(params)
    const cargs = tbss_x_cargs(params, execution)
    const ret = tbss_x_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tbss_x(
    scalar_dirs: Array<string>,
    vector_dirs: Array<string>,
    runner: Runner | null = null,
): TbssXOutputs {
    /**
     * TBSS cross-subject script for processing scalar and vector directories.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param scalar_dirs List of scalar directories (e.g., F1, F2)
     * @param vector_dirs List of vector directories (e.g., D1, D2)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TbssXOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TBSS_X_METADATA);
    const params = tbss_x_params(scalar_dirs, vector_dirs)
    return tbss_x_execute(params, execution);
}


export {
      TBSS_X_METADATA,
      TbssXOutputs,
      TbssXParameters,
      tbss_x,
      tbss_x_params,
};
