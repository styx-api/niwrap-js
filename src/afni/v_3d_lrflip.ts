// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LRFLIP_METADATA: Metadata = {
    id: "b3e8fe43a4546f9996744e159107df5ff817046b.boutiques",
    name: "3dLRflip",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLrflipParameters {
    "__STYXTYPE__": "3dLRflip";
    "flip_z": boolean;
    "output_prefix"?: string | null | undefined;
    "datasets": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dLRflip": v_3d_lrflip_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dLRflip": v_3d_lrflip_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_lrflip(...)`.
 *
 * @interface
 */
interface V3dLrflipOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset after flipping
     */
    flipped_output: OutputPathType | null;
}


function v_3d_lrflip_params(
    datasets: Array<InputPathType>,
    flip_z: boolean = false,
    output_prefix: string | null = null,
): V3dLrflipParameters {
    /**
     * Build parameters.
    
     * @param datasets Datasets to flip
     * @param flip_z Flip about the 3rd direction
     * @param output_prefix Prefix to use for output. If multiple datasets are input, the program will choose a prefix for each output.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dLRflip" as const,
        "flip_z": flip_z,
        "datasets": datasets,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


function v_3d_lrflip_cargs(
    params: V3dLrflipParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dLRflip");
    if ((params["flip_z"] ?? null)) {
        cargs.push("-Z");
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function v_3d_lrflip_outputs(
    params: V3dLrflipParameters,
    execution: Execution,
): V3dLrflipOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dLrflipOutputs = {
        root: execution.outputFile("."),
        flipped_output: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "*"].join('')) : null,
    };
    return ret;
}


function v_3d_lrflip_execute(
    params: V3dLrflipParameters,
    execution: Execution,
): V3dLrflipOutputs {
    /**
     * Flips the rows of a dataset along one of the three axes to correct dataset direction labeling errors.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dLrflipOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_lrflip_cargs(params, execution)
    const ret = v_3d_lrflip_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_lrflip(
    datasets: Array<InputPathType>,
    flip_z: boolean = false,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): V3dLrflipOutputs {
    /**
     * Flips the rows of a dataset along one of the three axes to correct dataset direction labeling errors.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param datasets Datasets to flip
     * @param flip_z Flip about the 3rd direction
     * @param output_prefix Prefix to use for output. If multiple datasets are input, the program will choose a prefix for each output.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dLrflipOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LRFLIP_METADATA);
    const params = v_3d_lrflip_params(datasets, flip_z, output_prefix)
    return v_3d_lrflip_execute(params, execution);
}


export {
      V3dLrflipOutputs,
      V3dLrflipParameters,
      V_3D_LRFLIP_METADATA,
      v_3d_lrflip,
      v_3d_lrflip_params,
};
