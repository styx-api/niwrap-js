// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS2RGB_METADATA: Metadata = {
    id: "4fdbc16148efe88b6fd4eb9b58594698623eae7f.boutiques",
    name: "mris2rgb",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Mris2rgbParameters {
    "@type": "freesurfer.mris2rgb";
    "library_path": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris2rgb": mris2rgb_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris2rgb(...)`.
 *
 * @interface
 */
interface Mris2rgbOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param library_path Path to the directory containing the libGLU.so.1 library required by mris2rgb.
 *
 * @returns Parameter dictionary
 */
function mris2rgb_params(
    library_path: string,
): Mris2rgbParameters {
    const params = {
        "@type": "freesurfer.mris2rgb" as const,
        "library_path": library_path,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris2rgb_cargs(
    params: Mris2rgbParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris2rgb");
    cargs.push(
        "export LD_LIBRARY_PATH=",
        (params["library_path"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris2rgb_outputs(
    params: Mris2rgbParameters,
    execution: Execution,
): Mris2rgbOutputs {
    const ret: Mris2rgbOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool from FreeSurfer for converting MRI surface files to RGB images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Mris2rgbOutputs`).
 */
function mris2rgb_execute(
    params: Mris2rgbParameters,
    runner: Runner | null = null,
): Mris2rgbOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS2RGB_METADATA);
    params = execution.params(params)
    const cargs = mris2rgb_cargs(params, execution)
    const ret = mris2rgb_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool from FreeSurfer for converting MRI surface files to RGB images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param library_path Path to the directory containing the libGLU.so.1 library required by mris2rgb.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Mris2rgbOutputs`).
 */
function mris2rgb(
    library_path: string,
    runner: Runner | null = null,
): Mris2rgbOutputs {
    const params = mris2rgb_params(library_path)
    return mris2rgb_execute(params, runner);
}


export {
      MRIS2RGB_METADATA,
      Mris2rgbOutputs,
      Mris2rgbParameters,
      mris2rgb,
      mris2rgb_execute,
      mris2rgb_params,
};
