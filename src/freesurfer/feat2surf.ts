// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FEAT2SURF_METADATA: Metadata = {
    id: "079e8361241b52495efdfd5864147688324111e9.boutiques",
    name: "feat2surf",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Feat2surfParameters {
    "@type": "freesurfer.feat2surf";
    "feat_dirs": Array<string>;
    "feat_dirfile"?: InputPathType | null | undefined;
    "proj_frac"?: number | null | undefined;
    "hemi"?: string | null | undefined;
    "target"?: string | null | undefined;
    "surf"?: string | null | undefined;
    "cope_only": boolean;
    "debug_flag": boolean;
    "nolog_flag": boolean;
    "out_dir"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.feat2surf": feat2surf_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.feat2surf": feat2surf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `feat2surf(...)`.
 *
 * @interface
 */
interface Feat2surfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output statistics on the left hemisphere for the subject
     */
    lh_output: OutputPathType | null;
    /**
     * Output statistics on the right hemisphere for the subject
     */
    rh_output: OutputPathType | null;
    /**
     * Output statistics on the left hemisphere for the target subject
     */
    lh_target_output: OutputPathType | null;
    /**
     * Output statistics on the right hemisphere for the target subject
     */
    rh_target_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param feat_dirs Directory where Feat results are stored. Can specify multiple directories.
 * @param feat_dirfile File with a list of Feat directories.
 * @param proj_frac Sample functional a fraction of the cortical thickness normal to the surface. Default is 0.
 * @param hemi Run on specified hemisphere (lh or rh) only. Default is both hemispheres.
 * @param target Subject used to define common surface space. Default is fsaverage.
 * @param surf Surface to resample to. Default is white.
 * @param cope_only Only map the copes and varcopes to the common surface space
 * @param debug_flag Turn on debugging
 * @param nolog_flag Do not create a log file
 * @param out_dir Output directory to use instead of default feat/reg_surf-?h/stats.
 *
 * @returns Parameter dictionary
 */
function feat2surf_params(
    feat_dirs: Array<string>,
    feat_dirfile: InputPathType | null = null,
    proj_frac: number | null = null,
    hemi: string | null = null,
    target: string | null = null,
    surf: string | null = null,
    cope_only: boolean = false,
    debug_flag: boolean = false,
    nolog_flag: boolean = false,
    out_dir: string | null = null,
): Feat2surfParameters {
    const params = {
        "@type": "freesurfer.feat2surf" as const,
        "feat_dirs": feat_dirs,
        "cope_only": cope_only,
        "debug_flag": debug_flag,
        "nolog_flag": nolog_flag,
    };
    if (feat_dirfile !== null) {
        params["feat_dirfile"] = feat_dirfile;
    }
    if (proj_frac !== null) {
        params["proj_frac"] = proj_frac;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (target !== null) {
        params["target"] = target;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    if (out_dir !== null) {
        params["out_dir"] = out_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function feat2surf_cargs(
    params: Feat2surfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("feat2surf");
    cargs.push(
        "--feat",
        ...(params["feat_dirs"] ?? null)
    );
    if ((params["feat_dirfile"] ?? null) !== null) {
        cargs.push(
            "--featdirfile",
            execution.inputFile((params["feat_dirfile"] ?? null))
        );
    }
    if ((params["proj_frac"] ?? null) !== null) {
        cargs.push(
            "--projfrac",
            String((params["proj_frac"] ?? null))
        );
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["target"] ?? null) !== null) {
        cargs.push(
            "--target",
            (params["target"] ?? null)
        );
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf"] ?? null)
        );
    }
    if ((params["cope_only"] ?? null)) {
        cargs.push("--cope-only");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["nolog_flag"] ?? null)) {
        cargs.push("--nolog");
    }
    if ((params["out_dir"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["out_dir"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function feat2surf_outputs(
    params: Feat2surfParameters,
    execution: Execution,
): Feat2surfOutputs {
    const ret: Feat2surfOutputs = {
        root: execution.outputFile("."),
        lh_output: ((params["out_dir"] ?? null) !== null) ? execution.outputFile([(params["out_dir"] ?? null), "/reg_surf-lh-Subject/stats"].join('')) : null,
        rh_output: ((params["out_dir"] ?? null) !== null) ? execution.outputFile([(params["out_dir"] ?? null), "/reg_surf-rh-Subject/stats"].join('')) : null,
        lh_target_output: ((params["out_dir"] ?? null) !== null) ? execution.outputFile([(params["out_dir"] ?? null), "/reg_surf-lh-targid/stats"].join('')) : null,
        rh_target_output: ((params["out_dir"] ?? null) !== null) ? execution.outputFile([(params["out_dir"] ?? null), "/reg_surf-rh-targid/stats"].join('')) : null,
    };
    return ret;
}


/**
 * feat2surf
 *
 * Resamples Feat statistics onto the surface of the subject and onto a stereo-taxic surface atlas.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Feat2surfOutputs`).
 */
function feat2surf_execute(
    params: Feat2surfParameters,
    runner: Runner | null = null,
): Feat2surfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FEAT2SURF_METADATA);
    params = execution.params(params)
    const cargs = feat2surf_cargs(params, execution)
    const ret = feat2surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * feat2surf
 *
 * Resamples Feat statistics onto the surface of the subject and onto a stereo-taxic surface atlas.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param feat_dirs Directory where Feat results are stored. Can specify multiple directories.
 * @param feat_dirfile File with a list of Feat directories.
 * @param proj_frac Sample functional a fraction of the cortical thickness normal to the surface. Default is 0.
 * @param hemi Run on specified hemisphere (lh or rh) only. Default is both hemispheres.
 * @param target Subject used to define common surface space. Default is fsaverage.
 * @param surf Surface to resample to. Default is white.
 * @param cope_only Only map the copes and varcopes to the common surface space
 * @param debug_flag Turn on debugging
 * @param nolog_flag Do not create a log file
 * @param out_dir Output directory to use instead of default feat/reg_surf-?h/stats.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Feat2surfOutputs`).
 */
function feat2surf(
    feat_dirs: Array<string>,
    feat_dirfile: InputPathType | null = null,
    proj_frac: number | null = null,
    hemi: string | null = null,
    target: string | null = null,
    surf: string | null = null,
    cope_only: boolean = false,
    debug_flag: boolean = false,
    nolog_flag: boolean = false,
    out_dir: string | null = null,
    runner: Runner | null = null,
): Feat2surfOutputs {
    const params = feat2surf_params(feat_dirs, feat_dirfile, proj_frac, hemi, target, surf, cope_only, debug_flag, nolog_flag, out_dir)
    return feat2surf_execute(params, runner);
}


export {
      FEAT2SURF_METADATA,
      Feat2surfOutputs,
      Feat2surfParameters,
      feat2surf,
      feat2surf_execute,
      feat2surf_params,
};
