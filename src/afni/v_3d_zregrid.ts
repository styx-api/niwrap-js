// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ZREGRID_METADATA: Metadata = {
    id: "db022b59eef3bb41c838694c65e5ebc0749928b2.boutiques",
    name: "3dZregrid",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dZregridParameters {
    "__STYXTYPE__": "3dZregrid";
    "z_thickness"?: number | null | undefined;
    "slice_count"?: number | null | undefined;
    "z_size"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "infile": InputPathType;
    "verbose": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dZregrid": v_3d_zregrid_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dZregrid": v_3d_zregrid_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_zregrid(...)`.
 *
 * @interface
 */
interface V3dZregridOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset with new grid
     */
    outfile_head: OutputPathType | null;
    /**
     * Output dataset with new grid
     */
    outfile_brik: OutputPathType | null;
}


function v_3d_zregrid_params(
    infile: InputPathType,
    z_thickness: number | null = null,
    slice_count: number | null = null,
    z_size: number | null = null,
    prefix: string | null = null,
    verbose: boolean = false,
): V3dZregridParameters {
    /**
     * Build parameters.
    
     * @param infile Input dataset
     * @param z_thickness Set slice thickness to D mm
     * @param slice_count Set slice count to N
     * @param z_size Set thickness of dataset (center-to-center of first and last slices) to Z mm
     * @param prefix Write result to dataset with prefix P
     * @param verbose Write progress reports to stderr
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dZregrid" as const,
        "infile": infile,
        "verbose": verbose,
    };
    if (z_thickness !== null) {
        params["z_thickness"] = z_thickness;
    }
    if (slice_count !== null) {
        params["slice_count"] = slice_count;
    }
    if (z_size !== null) {
        params["z_size"] = z_size;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function v_3d_zregrid_cargs(
    params: V3dZregridParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dZregrid");
    if ((params["z_thickness"] ?? null) !== null) {
        cargs.push(
            "-dz",
            String((params["z_thickness"] ?? null))
        );
    }
    if ((params["slice_count"] ?? null) !== null) {
        cargs.push(
            "-nz",
            String((params["slice_count"] ?? null))
        );
    }
    if ((params["z_size"] ?? null) !== null) {
        cargs.push(
            "-zsize",
            String((params["z_size"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    return cargs;
}


function v_3d_zregrid_outputs(
    params: V3dZregridParameters,
    execution: Execution,
): V3dZregridOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dZregridOutputs = {
        root: execution.outputFile("."),
        outfile_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        outfile_brik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
    };
    return ret;
}


function v_3d_zregrid_execute(
    params: V3dZregridParameters,
    execution: Execution,
): V3dZregridOutputs {
    /**
     * Alters the input dataset's slice thickness and/or number.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dZregridOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_zregrid_cargs(params, execution)
    const ret = v_3d_zregrid_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_zregrid(
    infile: InputPathType,
    z_thickness: number | null = null,
    slice_count: number | null = null,
    z_size: number | null = null,
    prefix: string | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): V3dZregridOutputs {
    /**
     * Alters the input dataset's slice thickness and/or number.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param infile Input dataset
     * @param z_thickness Set slice thickness to D mm
     * @param slice_count Set slice count to N
     * @param z_size Set thickness of dataset (center-to-center of first and last slices) to Z mm
     * @param prefix Write result to dataset with prefix P
     * @param verbose Write progress reports to stderr
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dZregridOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ZREGRID_METADATA);
    const params = v_3d_zregrid_params(infile, z_thickness, slice_count, z_size, prefix, verbose)
    return v_3d_zregrid_execute(params, execution);
}


export {
      V3dZregridOutputs,
      V3dZregridParameters,
      V_3D_ZREGRID_METADATA,
      v_3d_zregrid,
      v_3d_zregrid_params,
};
