// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const STD2IMGCOORD_METADATA: Metadata = {
    id: "05322cde0f0612798367ff4b15825c44466bc700.boutiques",
    name: "std2imgcoord",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Std2imgcoordParameters {
    "__STYXTYPE__": "std2imgcoord";
    "filename_coordinates": InputPathType;
    "standard_image"?: InputPathType | null | undefined;
    "input_image": InputPathType;
    "affine_transform"?: InputPathType | null | undefined;
    "warp_field"?: InputPathType | null | undefined;
    "prewarp_affine_transform"?: InputPathType | null | undefined;
    "output_mm": boolean;
    "output_vox": boolean;
    "verbose": boolean;
    "more_verbose": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "std2imgcoord": std2imgcoord_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `std2imgcoord(...)`.
 *
 * @interface
 */
interface Std2imgcoordOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function std2imgcoord_params(
    filename_coordinates: InputPathType,
    input_image: InputPathType,
    standard_image: InputPathType | null = null,
    affine_transform: InputPathType | null = null,
    warp_field: InputPathType | null = null,
    prewarp_affine_transform: InputPathType | null = null,
    output_mm: boolean = false,
    output_vox: boolean = false,
    verbose: boolean = false,
    more_verbose: boolean = false,
): Std2imgcoordParameters {
    /**
     * Build parameters.
    
     * @param filename_coordinates Path to the filename containing coordinates or '-' to read from standard input
     * @param input_image Filename of input image
     * @param standard_image Filename of standard image
     * @param affine_transform Filename of affine transform (e.g. example_func2standard.mat)
     * @param warp_field Filename of warpfield (e.g. highres2standard_warp.nii.gz)
     * @param prewarp_affine_transform Filename of pre-warp affine transform (e.g. example_func2highres.mat). Defaults to identity matrix.
     * @param output_mm Outputs coordinates in mm (default)
     * @param output_vox Outputs coordinates in voxels
     * @param verbose Verbose output
     * @param more_verbose More verbose output
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "std2imgcoord" as const,
        "filename_coordinates": filename_coordinates,
        "input_image": input_image,
        "output_mm": output_mm,
        "output_vox": output_vox,
        "verbose": verbose,
        "more_verbose": more_verbose,
    };
    if (standard_image !== null) {
        params["standard_image"] = standard_image;
    }
    if (affine_transform !== null) {
        params["affine_transform"] = affine_transform;
    }
    if (warp_field !== null) {
        params["warp_field"] = warp_field;
    }
    if (prewarp_affine_transform !== null) {
        params["prewarp_affine_transform"] = prewarp_affine_transform;
    }
    return params;
}


function std2imgcoord_cargs(
    params: Std2imgcoordParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("std2imgcoord");
    cargs.push(execution.inputFile((params["filename_coordinates"] ?? null)));
    if ((params["standard_image"] ?? null) !== null) {
        cargs.push(
            "-std",
            execution.inputFile((params["standard_image"] ?? null))
        );
    }
    cargs.push(
        "-img",
        execution.inputFile((params["input_image"] ?? null))
    );
    if ((params["affine_transform"] ?? null) !== null) {
        cargs.push(
            "-xfm",
            execution.inputFile((params["affine_transform"] ?? null))
        );
    }
    if ((params["warp_field"] ?? null) !== null) {
        cargs.push(
            "-warp",
            execution.inputFile((params["warp_field"] ?? null))
        );
    }
    if ((params["prewarp_affine_transform"] ?? null) !== null) {
        cargs.push(
            "-premat",
            execution.inputFile((params["prewarp_affine_transform"] ?? null))
        );
    }
    if ((params["output_mm"] ?? null)) {
        cargs.push("-mm");
    }
    if ((params["output_vox"] ?? null)) {
        cargs.push("-vox");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["more_verbose"] ?? null)) {
        cargs.push("-verbose");
    }
    return cargs;
}


function std2imgcoord_outputs(
    params: Std2imgcoordParameters,
    execution: Execution,
): Std2imgcoordOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Std2imgcoordOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function std2imgcoord_execute(
    params: Std2imgcoordParameters,
    execution: Execution,
): Std2imgcoordOutputs {
    /**
     * Convert standard space coordinates to image space coordinates.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Std2imgcoordOutputs`).
     */
    params = execution.params(params)
    const cargs = std2imgcoord_cargs(params, execution)
    const ret = std2imgcoord_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function std2imgcoord(
    filename_coordinates: InputPathType,
    input_image: InputPathType,
    standard_image: InputPathType | null = null,
    affine_transform: InputPathType | null = null,
    warp_field: InputPathType | null = null,
    prewarp_affine_transform: InputPathType | null = null,
    output_mm: boolean = false,
    output_vox: boolean = false,
    verbose: boolean = false,
    more_verbose: boolean = false,
    runner: Runner | null = null,
): Std2imgcoordOutputs {
    /**
     * Convert standard space coordinates to image space coordinates.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param filename_coordinates Path to the filename containing coordinates or '-' to read from standard input
     * @param input_image Filename of input image
     * @param standard_image Filename of standard image
     * @param affine_transform Filename of affine transform (e.g. example_func2standard.mat)
     * @param warp_field Filename of warpfield (e.g. highres2standard_warp.nii.gz)
     * @param prewarp_affine_transform Filename of pre-warp affine transform (e.g. example_func2highres.mat). Defaults to identity matrix.
     * @param output_mm Outputs coordinates in mm (default)
     * @param output_vox Outputs coordinates in voxels
     * @param verbose Verbose output
     * @param more_verbose More verbose output
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Std2imgcoordOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(STD2IMGCOORD_METADATA);
    const params = std2imgcoord_params(filename_coordinates, input_image, standard_image, affine_transform, warp_field, prewarp_affine_transform, output_mm, output_vox, verbose, more_verbose)
    return std2imgcoord_execute(params, execution);
}


export {
      STD2IMGCOORD_METADATA,
      Std2imgcoordOutputs,
      Std2imgcoordParameters,
      std2imgcoord,
      std2imgcoord_params,
};
