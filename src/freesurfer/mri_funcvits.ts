// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FUNCVITS_METADATA: Metadata = {
    id: "a906844e0fb427ee5992ebd3da45e1f05aaf100a.boutiques",
    name: "mri-funcvits",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFuncvitsParameters {
    "__STYXTYPE__": "mri-funcvits";
    "stem": string;
    "outdir": string;
    "reg"?: string | null | undefined;
    "paintsurf"?: string | null | undefined;
    "sphere"?: string | null | undefined;
    "icosize"?: number | null | undefined;
    "hemi"?: Array<string> | null | undefined;
    "svitdir"?: string | null | undefined;
    "icodir"?: string | null | undefined;
    "umask"?: string | null | undefined;
    "mail"?: string | null | undefined;
    "noforce": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri-funcvits": mri_funcvits_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_funcvits(...)`.
 *
 * @interface
 */
interface MriFuncvitsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mri_funcvits_params(
    stem: string,
    outdir: string,
    reg: string | null = null,
    paintsurf: string | null = "white",
    sphere: string | null = "sphere",
    icosize: number | null = 10242,
    hemi: Array<string> | null = ["lh", "rh"],
    svitdir: string | null = null,
    icodir: string | null = "/usr/local/freesurfer/lib/bem",
    umask: string | null = null,
    mail: string | null = null,
    noforce: boolean = false,
): MriFuncvitsParameters {
    /**
     * Build parameters.
    
     * @param stem Template stem
     * @param outdir Output directory
     * @param reg Registration file
     * @param paintsurf Surface upon which to paint
     * @param sphere Spherical surface
     * @param icosize Icosahedron size
     * @param hemi Hemifield(s)
     * @param svitdir SVIT directory
     * @param icodir ICO directory
     * @param umask New umask
     * @param mail User email for notifications
     * @param noforce Do not create if output already exists
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri-funcvits" as const,
        "stem": stem,
        "outdir": outdir,
        "noforce": noforce,
    };
    if (reg !== null) {
        params["reg"] = reg;
    }
    if (paintsurf !== null) {
        params["paintsurf"] = paintsurf;
    }
    if (sphere !== null) {
        params["sphere"] = sphere;
    }
    if (icosize !== null) {
        params["icosize"] = icosize;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (svitdir !== null) {
        params["svitdir"] = svitdir;
    }
    if (icodir !== null) {
        params["icodir"] = icodir;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    if (mail !== null) {
        params["mail"] = mail;
    }
    return params;
}


function mri_funcvits_cargs(
    params: MriFuncvitsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri-funcvits");
    cargs.push(
        "--stem",
        (params["stem"] ?? null)
    );
    cargs.push(
        "--outdir",
        (params["outdir"] ?? null)
    );
    if ((params["reg"] ?? null) !== null) {
        cargs.push(
            "--reg",
            (params["reg"] ?? null)
        );
    }
    if ((params["paintsurf"] ?? null) !== null) {
        cargs.push(
            "--paintsurf",
            (params["paintsurf"] ?? null)
        );
    }
    if ((params["sphere"] ?? null) !== null) {
        cargs.push(
            "--sphere",
            (params["sphere"] ?? null)
        );
    }
    if ((params["icosize"] ?? null) !== null) {
        cargs.push(
            "--icosize",
            String((params["icosize"] ?? null))
        );
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            ...(params["hemi"] ?? null)
        );
    }
    if ((params["svitdir"] ?? null) !== null) {
        cargs.push(
            "--svitdir",
            (params["svitdir"] ?? null)
        );
    }
    if ((params["icodir"] ?? null) !== null) {
        cargs.push(
            "--icodir",
            (params["icodir"] ?? null)
        );
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "--umask",
            (params["umask"] ?? null)
        );
    }
    if ((params["mail"] ?? null) !== null) {
        cargs.push(
            "--mail",
            (params["mail"] ?? null)
        );
    }
    if ((params["noforce"] ?? null)) {
        cargs.push("--noforce");
    }
    return cargs;
}


function mri_funcvits_outputs(
    params: MriFuncvitsParameters,
    execution: Execution,
): MriFuncvitsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriFuncvitsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mri_funcvits_execute(
    params: MriFuncvitsParameters,
    execution: Execution,
): MriFuncvitsOutputs {
    /**
     * Tool for functional volume to surface conversion in neuroimaging analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriFuncvitsOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_funcvits_cargs(params, execution)
    const ret = mri_funcvits_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_funcvits(
    stem: string,
    outdir: string,
    reg: string | null = null,
    paintsurf: string | null = "white",
    sphere: string | null = "sphere",
    icosize: number | null = 10242,
    hemi: Array<string> | null = ["lh", "rh"],
    svitdir: string | null = null,
    icodir: string | null = "/usr/local/freesurfer/lib/bem",
    umask: string | null = null,
    mail: string | null = null,
    noforce: boolean = false,
    runner: Runner | null = null,
): MriFuncvitsOutputs {
    /**
     * Tool for functional volume to surface conversion in neuroimaging analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param stem Template stem
     * @param outdir Output directory
     * @param reg Registration file
     * @param paintsurf Surface upon which to paint
     * @param sphere Spherical surface
     * @param icosize Icosahedron size
     * @param hemi Hemifield(s)
     * @param svitdir SVIT directory
     * @param icodir ICO directory
     * @param umask New umask
     * @param mail User email for notifications
     * @param noforce Do not create if output already exists
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriFuncvitsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FUNCVITS_METADATA);
    const params = mri_funcvits_params(stem, outdir, reg, paintsurf, sphere, icosize, hemi, svitdir, icodir, umask, mail, noforce)
    return mri_funcvits_execute(params, execution);
}


export {
      MRI_FUNCVITS_METADATA,
      MriFuncvitsOutputs,
      MriFuncvitsParameters,
      mri_funcvits,
      mri_funcvits_params,
};
