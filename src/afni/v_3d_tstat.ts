// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TSTAT_METADATA: Metadata = {
    id: "d57f08b6e63dd68a1af0835dbc04abda819f48b9.boutiques",
    name: "3dTstat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTstatParameters {
    "@type": "afni.3dTstat";
    "in_file": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "num_threads"?: number | null | undefined;
    "options"?: string | null | undefined;
    "outputtype"?: "NIFTI" | "AFNI" | "NIFTI_GZ" | null | undefined;
    "sum": boolean;
    "abssum": boolean;
    "sos": boolean;
    "l2norm": boolean;
    "mean": boolean;
    "slope": boolean;
    "stdev": boolean;
    "stdevNOD": boolean;
    "cvar": boolean;
    "cvarNOD": boolean;
    "cvarinv": boolean;
    "cvarinvNOD": boolean;
    "tsnr": boolean;
    "MAD": boolean;
    "DW": boolean;
    "median": boolean;
    "nzmedian": boolean;
    "nzstdev": boolean;
    "bmv": boolean;
    "MSSD": boolean;
    "MSSDsqrt": boolean;
    "MASDx": boolean;
    "min": boolean;
    "max": boolean;
    "absmax": boolean;
    "signed_absmax": boolean;
    "percentile": boolean;
    "argmin": boolean;
    "argmin1": boolean;
    "argmax": boolean;
    "argmax1": boolean;
    "argabsmax": boolean;
    "argabsmax1": boolean;
    "duration": boolean;
    "onset": boolean;
    "offset": boolean;
    "centroid": boolean;
    "centduration": boolean;
    "nzmean": boolean;
    "zcount": boolean;
    "nzcount": boolean;
    "autocorr": boolean;
    "autoreg": boolean;
    "accumulate": boolean;
    "centromean": boolean;
    "skewness": boolean;
    "kurtosis": boolean;
    "firstvalue": boolean;
    "tdiff": boolean;
    "prefix"?: string | null | undefined;
    "datum"?: string | null | undefined;
    "nscale": boolean;
    "basepercent"?: number | null | undefined;
    "mask_mset"?: InputPathType | null | undefined;
    "mrange"?: string | null | undefined;
    "cmask"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dTstat": v_3d_tstat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dTstat": v_3d_tstat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tstat(...)`.
 *
 * @interface
 */
interface V3dTstatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file name.
     */
    out_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_file Input file to 3dtstat.
 * @param mask Mask file.
 * @param num_threads Set number of threads.
 * @param options Selected statistical output.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 * @param sum Compute sum of input voxels.
 * @param abssum Compute absolute sum of input voxels.
 * @param sos Compute sum of squares.
 * @param l2norm Compute L2 norm (sqrt(sum squares)).
 * @param mean Compute mean of input voxels.
 * @param slope Compute the slope of input voxels vs. time.
 * @param stdev Compute standard deviation of input voxels.
 * @param stdev_nod Compute standard deviation of input voxels without detrending.
 * @param cvar Compute coefficient of variation of input voxels.
 * @param cvar_nod Compute coefficient of variation of input voxels without detrending.
 * @param cvarinv Compute inverse coefficient of variation of input voxels.
 * @param cvarinv_nod Compute inverse coefficient of variation of input voxels without detrending.
 * @param tsnr Compute temporal signal to noise ratio.
 * @param mad Compute median absolute deviation of input voxels.
 * @param dw Compute Durbin-Watson Statistic of input voxels.
 * @param median Compute median of input voxels.
 * @param nzmedian Compute median of non-zero input voxels.
 * @param nzstdev Compute standard deviation of non-zero input voxels.
 * @param bmv Compute biweight midvariance of input voxels.
 * @param mssd Compute mean of successive squared differences of input voxels.
 * @param mssdsqrt Compute square root of mean of successive squared differences of input voxels.
 * @param masdx Compute median of absolute values of first time differences of input voxels.
 * @param min Compute minimum of input voxels.
 * @param max Compute maximum of input voxels.
 * @param absmax Compute absolute maximum of input voxels.
 * @param signed_absmax Compute signed absolute maximum of input voxels.
 * @param percentile Compute the P-th percentile point of the data in each voxel time series.
 * @param argmin Compute index of minimum of input voxels.
 * @param argmin1 Compute index + 1 of minimum of input voxels.
 * @param argmax Compute index of maximum of input voxels.
 * @param argmax1 Compute index + 1 of maximum of input voxels.
 * @param argabsmax Compute index of absolute maximum of input voxels.
 * @param argabsmax1 Compute index + 1 of absolute maximum of input voxels.
 * @param duration Compute number of points around max above a threshold.
 * @param onset Compute beginning of duration around max where value exceeds basepercent.
 * @param offset Compute end of duration around max where value exceeds basepercent.
 * @param centroid Compute centroid of data time curves.
 * @param centduration Compute duration using centroid's index as center.
 * @param nzmean Compute mean of non-zero voxels.
 * @param zcount Count number of zero values at each voxel.
 * @param nzcount Count number of non-zero values at each voxel.
 * @param autocorr Compute autocorrelation function and return first n coefficients.
 * @param autoreg Compute autoregression coefficients and return first n coefficients.
 * @param accumulate Accumulate time series values (partial sums).
 * @param centromean Compute mean of middle 50% of voxel values.
 * @param skewness Measure of asymmetry in distribution.
 * @param kurtosis Measure of the 'tailedness' of the probability distribution.
 * @param firstvalue First value in dataset.
 * @param tdiff Take the first difference of each time series before further processing.
 * @param prefix Use string 'p' for the prefix of the output dataset [DEFAULT = 'stat'].
 * @param datum Use data type 'd' for the type of storage of the output, where 'd' is one of 'byte', 'short', or 'float' [DEFAULT=float].
 * @param nscale Do not scale output values when datum is byte or short. Scaling is done by default.
 * @param basepercent Percentage of maximum for duration calculation.
 * @param mask_mset Use the dataset 'mset' as a mask. Only voxels with nonzero values in 'mset' will be printed from 'dataset'.
 * @param mrange Further restrict the voxels from 'mset' so that only those mask values between 'a' and 'b' (inclusive) will be used.
 * @param cmask Execute the options enclosed in single quotes as a 3dcalc-like program, and produce a mask from the resulting 3D brick.
 *
 * @returns Parameter dictionary
 */
function v_3d_tstat_params(
    in_file: InputPathType,
    mask: InputPathType | null = null,
    num_threads: number | null = null,
    options: string | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    sum: boolean = false,
    abssum: boolean = false,
    sos: boolean = false,
    l2norm: boolean = false,
    mean: boolean = false,
    slope: boolean = false,
    stdev: boolean = false,
    stdev_nod: boolean = false,
    cvar: boolean = false,
    cvar_nod: boolean = false,
    cvarinv: boolean = false,
    cvarinv_nod: boolean = false,
    tsnr: boolean = false,
    mad: boolean = false,
    dw: boolean = false,
    median: boolean = false,
    nzmedian: boolean = false,
    nzstdev: boolean = false,
    bmv: boolean = false,
    mssd: boolean = false,
    mssdsqrt: boolean = false,
    masdx: boolean = false,
    min: boolean = false,
    max: boolean = false,
    absmax: boolean = false,
    signed_absmax: boolean = false,
    percentile: boolean = false,
    argmin: boolean = false,
    argmin1: boolean = false,
    argmax: boolean = false,
    argmax1: boolean = false,
    argabsmax: boolean = false,
    argabsmax1: boolean = false,
    duration: boolean = false,
    onset: boolean = false,
    offset: boolean = false,
    centroid: boolean = false,
    centduration: boolean = false,
    nzmean: boolean = false,
    zcount: boolean = false,
    nzcount: boolean = false,
    autocorr: boolean = false,
    autoreg: boolean = false,
    accumulate: boolean = false,
    centromean: boolean = false,
    skewness: boolean = false,
    kurtosis: boolean = false,
    firstvalue: boolean = false,
    tdiff: boolean = false,
    prefix: string | null = null,
    datum: string | null = null,
    nscale: boolean = false,
    basepercent: number | null = null,
    mask_mset: InputPathType | null = null,
    mrange: string | null = null,
    cmask: string | null = null,
): V3dTstatParameters {
    const params = {
        "@type": "afni.3dTstat" as const,
        "in_file": in_file,
        "sum": sum,
        "abssum": abssum,
        "sos": sos,
        "l2norm": l2norm,
        "mean": mean,
        "slope": slope,
        "stdev": stdev,
        "stdevNOD": stdev_nod,
        "cvar": cvar,
        "cvarNOD": cvar_nod,
        "cvarinv": cvarinv,
        "cvarinvNOD": cvarinv_nod,
        "tsnr": tsnr,
        "MAD": mad,
        "DW": dw,
        "median": median,
        "nzmedian": nzmedian,
        "nzstdev": nzstdev,
        "bmv": bmv,
        "MSSD": mssd,
        "MSSDsqrt": mssdsqrt,
        "MASDx": masdx,
        "min": min,
        "max": max,
        "absmax": absmax,
        "signed_absmax": signed_absmax,
        "percentile": percentile,
        "argmin": argmin,
        "argmin1": argmin1,
        "argmax": argmax,
        "argmax1": argmax1,
        "argabsmax": argabsmax,
        "argabsmax1": argabsmax1,
        "duration": duration,
        "onset": onset,
        "offset": offset,
        "centroid": centroid,
        "centduration": centduration,
        "nzmean": nzmean,
        "zcount": zcount,
        "nzcount": nzcount,
        "autocorr": autocorr,
        "autoreg": autoreg,
        "accumulate": accumulate,
        "centromean": centromean,
        "skewness": skewness,
        "kurtosis": kurtosis,
        "firstvalue": firstvalue,
        "tdiff": tdiff,
        "nscale": nscale,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (num_threads !== null) {
        params["num_threads"] = num_threads;
    }
    if (options !== null) {
        params["options"] = options;
    }
    if (outputtype !== null) {
        params["outputtype"] = outputtype;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    if (basepercent !== null) {
        params["basepercent"] = basepercent;
    }
    if (mask_mset !== null) {
        params["mask_mset"] = mask_mset;
    }
    if (mrange !== null) {
        params["mrange"] = mrange;
    }
    if (cmask !== null) {
        params["cmask"] = cmask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_tstat_cargs(
    params: V3dTstatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dTstat");
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["num_threads"] ?? null) !== null) {
        cargs.push(String((params["num_threads"] ?? null)));
    }
    if ((params["options"] ?? null) !== null) {
        cargs.push((params["options"] ?? null));
    }
    if ((params["outputtype"] ?? null) !== null) {
        cargs.push((params["outputtype"] ?? null));
    }
    if ((params["sum"] ?? null)) {
        cargs.push("-sum");
    }
    if ((params["abssum"] ?? null)) {
        cargs.push("-abssum");
    }
    if ((params["sos"] ?? null)) {
        cargs.push("-sos");
    }
    if ((params["l2norm"] ?? null)) {
        cargs.push("-l2norm");
    }
    if ((params["mean"] ?? null)) {
        cargs.push("-mean");
    }
    if ((params["slope"] ?? null)) {
        cargs.push("-slope");
    }
    if ((params["stdev"] ?? null)) {
        cargs.push("-stdev");
    }
    if ((params["stdevNOD"] ?? null)) {
        cargs.push("-stdevNOD");
    }
    if ((params["cvar"] ?? null)) {
        cargs.push("-cvar");
    }
    if ((params["cvarNOD"] ?? null)) {
        cargs.push("-cvarNOD");
    }
    if ((params["cvarinv"] ?? null)) {
        cargs.push("-cvarinv");
    }
    if ((params["cvarinvNOD"] ?? null)) {
        cargs.push("-cvarinvNOD");
    }
    if ((params["tsnr"] ?? null)) {
        cargs.push("-tsnr");
    }
    if ((params["MAD"] ?? null)) {
        cargs.push("-MAD");
    }
    if ((params["DW"] ?? null)) {
        cargs.push("-DW");
    }
    if ((params["median"] ?? null)) {
        cargs.push("-median");
    }
    if ((params["nzmedian"] ?? null)) {
        cargs.push("-nzmedian");
    }
    if ((params["nzstdev"] ?? null)) {
        cargs.push("-nzstdev");
    }
    if ((params["bmv"] ?? null)) {
        cargs.push("-bmv");
    }
    if ((params["MSSD"] ?? null)) {
        cargs.push("-MSSD");
    }
    if ((params["MSSDsqrt"] ?? null)) {
        cargs.push("-MSSDsqrt");
    }
    if ((params["MASDx"] ?? null)) {
        cargs.push("-MASDx");
    }
    if ((params["min"] ?? null)) {
        cargs.push("-min");
    }
    if ((params["max"] ?? null)) {
        cargs.push("-max");
    }
    if ((params["absmax"] ?? null)) {
        cargs.push("-absmax");
    }
    if ((params["signed_absmax"] ?? null)) {
        cargs.push("-signed_absmax");
    }
    if ((params["percentile"] ?? null)) {
        cargs.push("-percentile");
    }
    if ((params["argmin"] ?? null)) {
        cargs.push("-argmin");
    }
    if ((params["argmin1"] ?? null)) {
        cargs.push("-argmin1");
    }
    if ((params["argmax"] ?? null)) {
        cargs.push("-argmax");
    }
    if ((params["argmax1"] ?? null)) {
        cargs.push("-argmax1");
    }
    if ((params["argabsmax"] ?? null)) {
        cargs.push("-argabsmax");
    }
    if ((params["argabsmax1"] ?? null)) {
        cargs.push("-argabsmax1");
    }
    if ((params["duration"] ?? null)) {
        cargs.push("-duration");
    }
    if ((params["onset"] ?? null)) {
        cargs.push("-onset");
    }
    if ((params["offset"] ?? null)) {
        cargs.push("-offset");
    }
    if ((params["centroid"] ?? null)) {
        cargs.push("-centroid");
    }
    if ((params["centduration"] ?? null)) {
        cargs.push("-centduration");
    }
    if ((params["nzmean"] ?? null)) {
        cargs.push("-nzmean");
    }
    if ((params["zcount"] ?? null)) {
        cargs.push("-zcount");
    }
    if ((params["nzcount"] ?? null)) {
        cargs.push("-nzcount");
    }
    if ((params["autocorr"] ?? null)) {
        cargs.push("-autocorr");
    }
    if ((params["autoreg"] ?? null)) {
        cargs.push("-autoreg");
    }
    if ((params["accumulate"] ?? null)) {
        cargs.push("-accumulate");
    }
    if ((params["centromean"] ?? null)) {
        cargs.push("-centromean");
    }
    if ((params["skewness"] ?? null)) {
        cargs.push("-skewness");
    }
    if ((params["kurtosis"] ?? null)) {
        cargs.push("-kurtosis");
    }
    if ((params["firstvalue"] ?? null)) {
        cargs.push("-firstvalue");
    }
    if ((params["tdiff"] ?? null)) {
        cargs.push("-tdiff");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    if ((params["nscale"] ?? null)) {
        cargs.push("-nscale");
    }
    if ((params["basepercent"] ?? null) !== null) {
        cargs.push(
            "-basepercent",
            String((params["basepercent"] ?? null))
        );
    }
    if ((params["mask_mset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_mset"] ?? null))
        );
    }
    if ((params["mrange"] ?? null) !== null) {
        cargs.push(
            "-mrange",
            (params["mrange"] ?? null)
        );
    }
    if ((params["cmask"] ?? null) !== null) {
        cargs.push(
            "-cmask",
            (params["cmask"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_tstat_outputs(
    params: V3dTstatParameters,
    execution: Execution,
): V3dTstatOutputs {
    const ret: V3dTstatOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Compute voxel-wise statistics using AFNI 3dTstat command.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dTstatOutputs`).
 */
function v_3d_tstat_execute(
    params: V3dTstatParameters,
    execution: Execution,
): V3dTstatOutputs {
    params = execution.params(params)
    const cargs = v_3d_tstat_cargs(params, execution)
    const ret = v_3d_tstat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute voxel-wise statistics using AFNI 3dTstat command.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_file Input file to 3dtstat.
 * @param mask Mask file.
 * @param num_threads Set number of threads.
 * @param options Selected statistical output.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 * @param sum Compute sum of input voxels.
 * @param abssum Compute absolute sum of input voxels.
 * @param sos Compute sum of squares.
 * @param l2norm Compute L2 norm (sqrt(sum squares)).
 * @param mean Compute mean of input voxels.
 * @param slope Compute the slope of input voxels vs. time.
 * @param stdev Compute standard deviation of input voxels.
 * @param stdev_nod Compute standard deviation of input voxels without detrending.
 * @param cvar Compute coefficient of variation of input voxels.
 * @param cvar_nod Compute coefficient of variation of input voxels without detrending.
 * @param cvarinv Compute inverse coefficient of variation of input voxels.
 * @param cvarinv_nod Compute inverse coefficient of variation of input voxels without detrending.
 * @param tsnr Compute temporal signal to noise ratio.
 * @param mad Compute median absolute deviation of input voxels.
 * @param dw Compute Durbin-Watson Statistic of input voxels.
 * @param median Compute median of input voxels.
 * @param nzmedian Compute median of non-zero input voxels.
 * @param nzstdev Compute standard deviation of non-zero input voxels.
 * @param bmv Compute biweight midvariance of input voxels.
 * @param mssd Compute mean of successive squared differences of input voxels.
 * @param mssdsqrt Compute square root of mean of successive squared differences of input voxels.
 * @param masdx Compute median of absolute values of first time differences of input voxels.
 * @param min Compute minimum of input voxels.
 * @param max Compute maximum of input voxels.
 * @param absmax Compute absolute maximum of input voxels.
 * @param signed_absmax Compute signed absolute maximum of input voxels.
 * @param percentile Compute the P-th percentile point of the data in each voxel time series.
 * @param argmin Compute index of minimum of input voxels.
 * @param argmin1 Compute index + 1 of minimum of input voxels.
 * @param argmax Compute index of maximum of input voxels.
 * @param argmax1 Compute index + 1 of maximum of input voxels.
 * @param argabsmax Compute index of absolute maximum of input voxels.
 * @param argabsmax1 Compute index + 1 of absolute maximum of input voxels.
 * @param duration Compute number of points around max above a threshold.
 * @param onset Compute beginning of duration around max where value exceeds basepercent.
 * @param offset Compute end of duration around max where value exceeds basepercent.
 * @param centroid Compute centroid of data time curves.
 * @param centduration Compute duration using centroid's index as center.
 * @param nzmean Compute mean of non-zero voxels.
 * @param zcount Count number of zero values at each voxel.
 * @param nzcount Count number of non-zero values at each voxel.
 * @param autocorr Compute autocorrelation function and return first n coefficients.
 * @param autoreg Compute autoregression coefficients and return first n coefficients.
 * @param accumulate Accumulate time series values (partial sums).
 * @param centromean Compute mean of middle 50% of voxel values.
 * @param skewness Measure of asymmetry in distribution.
 * @param kurtosis Measure of the 'tailedness' of the probability distribution.
 * @param firstvalue First value in dataset.
 * @param tdiff Take the first difference of each time series before further processing.
 * @param prefix Use string 'p' for the prefix of the output dataset [DEFAULT = 'stat'].
 * @param datum Use data type 'd' for the type of storage of the output, where 'd' is one of 'byte', 'short', or 'float' [DEFAULT=float].
 * @param nscale Do not scale output values when datum is byte or short. Scaling is done by default.
 * @param basepercent Percentage of maximum for duration calculation.
 * @param mask_mset Use the dataset 'mset' as a mask. Only voxels with nonzero values in 'mset' will be printed from 'dataset'.
 * @param mrange Further restrict the voxels from 'mset' so that only those mask values between 'a' and 'b' (inclusive) will be used.
 * @param cmask Execute the options enclosed in single quotes as a 3dcalc-like program, and produce a mask from the resulting 3D brick.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dTstatOutputs`).
 */
function v_3d_tstat(
    in_file: InputPathType,
    mask: InputPathType | null = null,
    num_threads: number | null = null,
    options: string | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    sum: boolean = false,
    abssum: boolean = false,
    sos: boolean = false,
    l2norm: boolean = false,
    mean: boolean = false,
    slope: boolean = false,
    stdev: boolean = false,
    stdev_nod: boolean = false,
    cvar: boolean = false,
    cvar_nod: boolean = false,
    cvarinv: boolean = false,
    cvarinv_nod: boolean = false,
    tsnr: boolean = false,
    mad: boolean = false,
    dw: boolean = false,
    median: boolean = false,
    nzmedian: boolean = false,
    nzstdev: boolean = false,
    bmv: boolean = false,
    mssd: boolean = false,
    mssdsqrt: boolean = false,
    masdx: boolean = false,
    min: boolean = false,
    max: boolean = false,
    absmax: boolean = false,
    signed_absmax: boolean = false,
    percentile: boolean = false,
    argmin: boolean = false,
    argmin1: boolean = false,
    argmax: boolean = false,
    argmax1: boolean = false,
    argabsmax: boolean = false,
    argabsmax1: boolean = false,
    duration: boolean = false,
    onset: boolean = false,
    offset: boolean = false,
    centroid: boolean = false,
    centduration: boolean = false,
    nzmean: boolean = false,
    zcount: boolean = false,
    nzcount: boolean = false,
    autocorr: boolean = false,
    autoreg: boolean = false,
    accumulate: boolean = false,
    centromean: boolean = false,
    skewness: boolean = false,
    kurtosis: boolean = false,
    firstvalue: boolean = false,
    tdiff: boolean = false,
    prefix: string | null = null,
    datum: string | null = null,
    nscale: boolean = false,
    basepercent: number | null = null,
    mask_mset: InputPathType | null = null,
    mrange: string | null = null,
    cmask: string | null = null,
    runner: Runner | null = null,
): V3dTstatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TSTAT_METADATA);
    const params = v_3d_tstat_params(in_file, mask, num_threads, options, outputtype, sum, abssum, sos, l2norm, mean, slope, stdev, stdev_nod, cvar, cvar_nod, cvarinv, cvarinv_nod, tsnr, mad, dw, median, nzmedian, nzstdev, bmv, mssd, mssdsqrt, masdx, min, max, absmax, signed_absmax, percentile, argmin, argmin1, argmax, argmax1, argabsmax, argabsmax1, duration, onset, offset, centroid, centduration, nzmean, zcount, nzcount, autocorr, autoreg, accumulate, centromean, skewness, kurtosis, firstvalue, tdiff, prefix, datum, nscale, basepercent, mask_mset, mrange, cmask)
    return v_3d_tstat_execute(params, execution);
}


export {
      V3dTstatOutputs,
      V3dTstatParameters,
      V_3D_TSTAT_METADATA,
      v_3d_tstat,
      v_3d_tstat_cargs,
      v_3d_tstat_execute,
      v_3d_tstat_outputs,
      v_3d_tstat_params,
};
