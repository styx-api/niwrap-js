// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_PATHSTATS_METADATA: Metadata = {
    id: "cb81526efe537cf7caf98d78502615f10aa882e1.boutiques",
    name: "dmri_pathstats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriPathstatsParameters {
    "@type": "freesurfer.dmri_pathstats";
    "intrk": InputPathType;
    "rois"?: Array<InputPathType> | null | undefined;
    "intrc": InputPathType;
    "meas"?: Array<InputPathType> | null | undefined;
    "measname"?: Array<string> | null | undefined;
    "dtbase"?: string | null | undefined;
    "path"?: string | null | undefined;
    "subj"?: string | null | undefined;
    "out"?: string | null | undefined;
    "outvox"?: string | null | undefined;
    "median"?: InputPathType | null | undefined;
    "ends"?: string | null | undefined;
    "ref"?: InputPathType | null | undefined;
    "pthr"?: number | null | undefined;
    "fthr"?: number | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_pathstats": dmri_pathstats_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.dmri_pathstats": dmri_pathstats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_pathstats(...)`.
 *
 * @interface
 */
interface DmriPathstatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file for overall path measures
     */
    out_file: OutputPathType | null;
    /**
     * Text file for voxel-by-voxel measures along path
     */
    out_vox_file: OutputPathType | null;
    /**
     * .trk file of median streamline
     */
    median_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param intrk Input .trk file
 * @param intrc Input tracula directory
 * @param rois Input labeling ROIs for .trk file (optional)
 * @param meas Input microstructural measure volume(s) (optional)
 * @param measname Name(s) of microstructural measure(s) (as many as volumes)
 * @param dtbase Base name of input dtifit volumes (optional)
 * @param path Name of pathway (optional, written to output files)
 * @param subj Name of subject (optional, written to output files)
 * @param out Output text file for overall path measures
 * @param outvox Output text file for voxel-by-voxel measures along path (optional)
 * @param median Output .trk file of median streamline (optional)
 * @param ends Base name of output volumes of streamline ends (optional)
 * @param ref Reference volume (needed only if using --ends without --dtbase)
 * @param pthr Lower threshold on path posterior distribution, as a portion of the maximum (range: 0-1, default: 0.2)
 * @param fthr Lower threshold on FA (range: 0-1, default: no threshold)
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 *
 * @returns Parameter dictionary
 */
function dmri_pathstats_params(
    intrk: InputPathType,
    intrc: InputPathType,
    rois: Array<InputPathType> | null = null,
    meas: Array<InputPathType> | null = null,
    measname: Array<string> | null = null,
    dtbase: string | null = null,
    path: string | null = null,
    subj: string | null = null,
    out: string | null = null,
    outvox: string | null = null,
    median: InputPathType | null = null,
    ends: string | null = null,
    ref: InputPathType | null = null,
    pthr: number | null = null,
    fthr: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
): DmriPathstatsParameters {
    const params = {
        "@type": "freesurfer.dmri_pathstats" as const,
        "intrk": intrk,
        "intrc": intrc,
        "debug": debug,
        "checkopts": checkopts,
        "help": help,
        "version": version,
    };
    if (rois !== null) {
        params["rois"] = rois;
    }
    if (meas !== null) {
        params["meas"] = meas;
    }
    if (measname !== null) {
        params["measname"] = measname;
    }
    if (dtbase !== null) {
        params["dtbase"] = dtbase;
    }
    if (path !== null) {
        params["path"] = path;
    }
    if (subj !== null) {
        params["subj"] = subj;
    }
    if (out !== null) {
        params["out"] = out;
    }
    if (outvox !== null) {
        params["outvox"] = outvox;
    }
    if (median !== null) {
        params["median"] = median;
    }
    if (ends !== null) {
        params["ends"] = ends;
    }
    if (ref !== null) {
        params["ref"] = ref;
    }
    if (pthr !== null) {
        params["pthr"] = pthr;
    }
    if (fthr !== null) {
        params["fthr"] = fthr;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_pathstats_cargs(
    params: DmriPathstatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_pathstats");
    cargs.push(
        "--intrk",
        execution.inputFile((params["intrk"] ?? null))
    );
    if ((params["rois"] ?? null) !== null) {
        cargs.push(
            "--rois",
            ...(params["rois"] ?? null).map(f => execution.inputFile(f))
        );
    }
    cargs.push(
        "--intrc",
        execution.inputFile((params["intrc"] ?? null))
    );
    if ((params["meas"] ?? null) !== null) {
        cargs.push(
            "--meas",
            ...(params["meas"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["measname"] ?? null) !== null) {
        cargs.push(
            "--measname",
            ...(params["measname"] ?? null)
        );
    }
    if ((params["dtbase"] ?? null) !== null) {
        cargs.push(
            "--dtbase",
            (params["dtbase"] ?? null)
        );
    }
    if ((params["path"] ?? null) !== null) {
        cargs.push(
            "--path",
            (params["path"] ?? null)
        );
    }
    if ((params["subj"] ?? null) !== null) {
        cargs.push(
            "--subj",
            (params["subj"] ?? null)
        );
    }
    if ((params["out"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["out"] ?? null)
        );
    }
    if ((params["outvox"] ?? null) !== null) {
        cargs.push(
            "--outvox",
            (params["outvox"] ?? null)
        );
    }
    if ((params["median"] ?? null) !== null) {
        cargs.push(
            "--median",
            execution.inputFile((params["median"] ?? null))
        );
    }
    if ((params["ends"] ?? null) !== null) {
        cargs.push(
            "--ends",
            (params["ends"] ?? null)
        );
    }
    if ((params["ref"] ?? null) !== null) {
        cargs.push(
            "--ref",
            execution.inputFile((params["ref"] ?? null))
        );
    }
    if ((params["pthr"] ?? null) !== null) {
        cargs.push(
            "--pthr",
            String((params["pthr"] ?? null))
        );
    }
    if ((params["fthr"] ?? null) !== null) {
        cargs.push(
            "--fthr",
            String((params["fthr"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_pathstats_outputs(
    params: DmriPathstatsParameters,
    execution: Execution,
): DmriPathstatsOutputs {
    const ret: DmriPathstatsOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["out"] ?? null) !== null) ? execution.outputFile([(params["out"] ?? null)].join('')) : null,
        out_vox_file: ((params["outvox"] ?? null) !== null) ? execution.outputFile([(params["outvox"] ?? null)].join('')) : null,
        median_file: ((params["median"] ?? null) !== null) ? execution.outputFile([path.basename((params["median"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * Compute path statistics for diffusion MRI data based on input .trk file and optional various measures.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `DmriPathstatsOutputs`).
 */
function dmri_pathstats_execute(
    params: DmriPathstatsParameters,
    execution: Execution,
): DmriPathstatsOutputs {
    params = execution.params(params)
    const cargs = dmri_pathstats_cargs(params, execution)
    const ret = dmri_pathstats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute path statistics for diffusion MRI data based on input .trk file and optional various measures.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param intrk Input .trk file
 * @param intrc Input tracula directory
 * @param rois Input labeling ROIs for .trk file (optional)
 * @param meas Input microstructural measure volume(s) (optional)
 * @param measname Name(s) of microstructural measure(s) (as many as volumes)
 * @param dtbase Base name of input dtifit volumes (optional)
 * @param path Name of pathway (optional, written to output files)
 * @param subj Name of subject (optional, written to output files)
 * @param out Output text file for overall path measures
 * @param outvox Output text file for voxel-by-voxel measures along path (optional)
 * @param median Output .trk file of median streamline (optional)
 * @param ends Base name of output volumes of streamline ends (optional)
 * @param ref Reference volume (needed only if using --ends without --dtbase)
 * @param pthr Lower threshold on path posterior distribution, as a portion of the maximum (range: 0-1, default: 0.2)
 * @param fthr Lower threshold on FA (range: 0-1, default: no threshold)
 * @param debug Turn on debugging
 * @param checkopts Don't run anything, just check options and exit
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriPathstatsOutputs`).
 */
function dmri_pathstats(
    intrk: InputPathType,
    intrc: InputPathType,
    rois: Array<InputPathType> | null = null,
    meas: Array<InputPathType> | null = null,
    measname: Array<string> | null = null,
    dtbase: string | null = null,
    path: string | null = null,
    subj: string | null = null,
    out: string | null = null,
    outvox: string | null = null,
    median: InputPathType | null = null,
    ends: string | null = null,
    ref: InputPathType | null = null,
    pthr: number | null = null,
    fthr: number | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DmriPathstatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_PATHSTATS_METADATA);
    const params = dmri_pathstats_params(intrk, intrc, rois, meas, measname, dtbase, path, subj, out, outvox, median, ends, ref, pthr, fthr, debug, checkopts, help, version)
    return dmri_pathstats_execute(params, execution);
}


export {
      DMRI_PATHSTATS_METADATA,
      DmriPathstatsOutputs,
      DmriPathstatsParameters,
      dmri_pathstats,
      dmri_pathstats_cargs,
      dmri_pathstats_execute,
      dmri_pathstats_outputs,
      dmri_pathstats_params,
};
