// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RECON_ALL_METADATA: Metadata = {
    id: "284228137a5f841b66f84c350954d25768520e5a.boutiques",
    name: "recon-all",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ReconAllParameters {
    "@type": "freesurfer.recon-all";
    "subjid": string;
    "all_flag": boolean;
    "autorecon_all_flag": boolean;
    "autorecon1_flag": boolean;
    "autorecon2_flag": boolean;
    "autorecon2_cp_flag": boolean;
    "autorecon2_wm_flag": boolean;
    "autorecon2_inflate1_flag": boolean;
    "autorecon2_perhemi_flag": boolean;
    "autorecon3_flag": boolean;
    "hemi"?: string | null | undefined;
    "pons_crs"?: Array<number> | null | undefined;
    "cc_crs"?: Array<number> | null | undefined;
    "lh_crs"?: Array<number> | null | undefined;
    "rh_crs"?: Array<number> | null | undefined;
    "nofill": boolean;
    "watershed"?: string | null | undefined;
    "external_brain_mask"?: InputPathType | null | undefined;
    "wsless": boolean;
    "wsmore": boolean;
    "wsatlas": boolean;
    "no_wsatlas": boolean;
    "no_wsgcaatlas": boolean;
    "wsthresh"?: number | null | undefined;
    "wsseed"?: Array<number> | null | undefined;
    "norm_3d_iters"?: number | null | undefined;
    "norm_max_grad"?: number | null | undefined;
    "norm1_b"?: number | null | undefined;
    "norm2_b"?: number | null | undefined;
    "norm1_n"?: number | null | undefined;
    "norm2_n"?: number | null | undefined;
    "cm": boolean;
    "no_fix_with_ga": boolean;
    "fix_diag_only": boolean;
    "seg_wlo"?: number | null | undefined;
    "seg_ghi"?: number | null | undefined;
    "nothicken": boolean;
    "no_ca_align_after": boolean;
    "no_ca_align": boolean;
    "deface": boolean;
    "expert_file"?: InputPathType | null | undefined;
    "xopts_use": boolean;
    "xopts_clean": boolean;
    "xopts_overwrite": boolean;
    "termscript_file"?: InputPathType | null | undefined;
    "mprage": boolean;
    "washu_mprage": boolean;
    "schwartzya3t_atlas": boolean;
    "threads"?: number | null | undefined;
    "waitfor_file"?: InputPathType | null | undefined;
    "notify_file"?: InputPathType | null | undefined;
    "log_file"?: InputPathType | null | undefined;
    "status_file"?: InputPathType | null | undefined;
    "noappend": boolean;
    "no_isrunning": boolean;
    "hippocampal_subfields_t1": boolean;
    "hippocampal_subfields_t2"?: string | null | undefined;
    "hippocampal_subfields_t1t2"?: string | null | undefined;
    "brainstem_structures": boolean;
    "subjects_dir"?: string | null | undefined;
    "mail_user"?: string | null | undefined;
    "umask"?: string | null | undefined;
    "group_id"?: string | null | undefined;
    "only_versions": boolean;
    "debug": boolean;
    "allow_coredump": boolean;
    "dontrun": boolean;
    "version": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.recon-all": recon_all_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.recon-all": recon_all_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `recon_all(...)`.
 *
 * @interface
 */
interface ReconAllOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Log file of the recon-all process
     */
    logfile: OutputPathType;
    /**
     * Status file of the recon-all process
     */
    statusfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjid Subject ID for the FreeSurfer analysis
 * @param all_flag Performs all stages of cortical reconstruction
 * @param autorecon_all_flag Same as -all
 * @param autorecon1_flag Process stages 1-5
 * @param autorecon2_flag Process stages 6-23
 * @param autorecon2_cp_flag Process stages 12-23
 * @param autorecon2_wm_flag Process stages 15-23
 * @param autorecon2_inflate1_flag Process stages 6-18
 * @param autorecon2_perhemi_flag Tessellation, Smooth1, Inflate1, Qsphere, Fix, Smooth2, Inflate2, Finalsurf, Ribbon
 * @param autorecon3_flag Process stages 24-34
 * @param hemi Specify hemisphere ('lh' or 'rh')
 * @param pons_crs Specify CRS for pons during fill operation
 * @param cc_crs Specify CRS for corpus callosum during fill operation
 * @param lh_crs Specify CRS for left hemisphere during fill operation
 * @param rh_crs Specify CRS for right hemisphere during fill operation
 * @param nofill Do not use automatic subcortical seg to fill
 * @param watershed Control skull stripping/watershed program
 * @param external_brain_mask Custom external brain mask file
 * @param wsless Decrease watershed threshold
 * @param wsmore Increase watershed threshold
 * @param wsatlas Use atlas when skull stripping
 * @param no_wsatlas Do not use atlas when skull stripping
 * @param no_wsgcaatlas Do not use GCA atlas when skull stripping
 * @param wsthresh Explicitly set watershed threshold
 * @param wsseed Identify an index (C, R, S) point in the skull
 * @param norm_3d_iters Number of 3D iterations for mri_normalize
 * @param norm_max_grad Max grad for mri_normalize
 * @param norm1_b First usage of mri_normalize with control point intensity N below target
 * @param norm2_b Second usage of mri_normalize with control point intensity N below target
 * @param norm1_n First usage of mri_normalize, number of iterations
 * @param norm2_n Second usage of mri_normalize, number of iterations
 * @param cm Conform volumes to the min voxel size
 * @param no_fix_with_ga Do not use genetic algorithm when fixing topology
 * @param fix_diag_only Topology fixer runs until ?h.defect_labels files are created
 * @param seg_wlo Set WLO value for mri_segment and mris_make_surfaces
 * @param seg_ghi Set GHI value for mri_segment and mris_make_surfaces
 * @param nothicken Pass '-thicken 0' to mri_segment
 * @param no_ca_align_after Turn off '-align-after' with mri_ca_register
 * @param no_ca_align Turn off '-align' with mri_ca_label
 * @param deface Deface subject, written to orig_defaced.mgz
 * @param expert_file Read-in expert options file
 * @param xopts_use Use pre-existing expert options file
 * @param xopts_clean Delete pre-existing expert options file
 * @param xopts_overwrite Overwrite pre-existing expert options file
 * @param termscript_file Run script before exiting
 * @param mprage Assume scan parameters are MGH MP-RAGE protocol
 * @param washu_mprage Assume scan parameters are Wash.U. MP-RAGE protocol
 * @param schwartzya3t_atlas Use special young adult 3T atlas for tal reg
 * @param threads Set number of threads to use
 * @param waitfor_file Wait for file to appear before beginning
 * @param notify_file Create this file after finishing
 * @param log_file Specify log file
 * @param status_file Specify status file
 * @param noappend Start new log and status files instead of appending
 * @param no_isrunning Do not check whether this subject is currently being processed
 * @param hippocampal_subfields_t1 Segmentation of hippocampal subfields using input T1 scan
 * @param hippocampal_subfields_t2 Segmentation using an additional scan and input T2 scan
 * @param hippocampal_subfields_t1t2 Segmentation using additional scan and input T1
 * @param brainstem_structures Segmentation of brainstem structures
 * @param subjects_dir Specify subjects directory
 * @param mail_user Mail user when done
 * @param umask Set unix file permission mask
 * @param group_id Check that current group is alpha group
 * @param only_versions Print version of each binary and exit
 * @param debug Print out lots of info
 * @param allow_coredump Set coredump limit to unlimited
 * @param dontrun Do everything but execute each command
 * @param version Print version of this script and exit
 * @param help Display help message and exit
 *
 * @returns Parameter dictionary
 */
function recon_all_params(
    subjid: string,
    all_flag: boolean = false,
    autorecon_all_flag: boolean = false,
    autorecon1_flag: boolean = false,
    autorecon2_flag: boolean = false,
    autorecon2_cp_flag: boolean = false,
    autorecon2_wm_flag: boolean = false,
    autorecon2_inflate1_flag: boolean = false,
    autorecon2_perhemi_flag: boolean = false,
    autorecon3_flag: boolean = false,
    hemi: string | null = null,
    pons_crs: Array<number> | null = null,
    cc_crs: Array<number> | null = null,
    lh_crs: Array<number> | null = null,
    rh_crs: Array<number> | null = null,
    nofill: boolean = false,
    watershed: string | null = null,
    external_brain_mask: InputPathType | null = null,
    wsless: boolean = false,
    wsmore: boolean = false,
    wsatlas: boolean = false,
    no_wsatlas: boolean = false,
    no_wsgcaatlas: boolean = false,
    wsthresh: number | null = null,
    wsseed: Array<number> | null = null,
    norm_3d_iters: number | null = null,
    norm_max_grad: number | null = null,
    norm1_b: number | null = null,
    norm2_b: number | null = null,
    norm1_n: number | null = null,
    norm2_n: number | null = null,
    cm: boolean = false,
    no_fix_with_ga: boolean = false,
    fix_diag_only: boolean = false,
    seg_wlo: number | null = null,
    seg_ghi: number | null = null,
    nothicken: boolean = false,
    no_ca_align_after: boolean = false,
    no_ca_align: boolean = false,
    deface: boolean = false,
    expert_file: InputPathType | null = null,
    xopts_use: boolean = false,
    xopts_clean: boolean = false,
    xopts_overwrite: boolean = false,
    termscript_file: InputPathType | null = null,
    mprage: boolean = false,
    washu_mprage: boolean = false,
    schwartzya3t_atlas: boolean = false,
    threads: number | null = null,
    waitfor_file: InputPathType | null = null,
    notify_file: InputPathType | null = null,
    log_file: InputPathType | null = null,
    status_file: InputPathType | null = null,
    noappend: boolean = false,
    no_isrunning: boolean = false,
    hippocampal_subfields_t1: boolean = false,
    hippocampal_subfields_t2: string | null = null,
    hippocampal_subfields_t1t2: string | null = null,
    brainstem_structures: boolean = false,
    subjects_dir: string | null = null,
    mail_user: string | null = null,
    umask: string | null = null,
    group_id: string | null = null,
    only_versions: boolean = false,
    debug: boolean = false,
    allow_coredump: boolean = false,
    dontrun: boolean = false,
    version: boolean = false,
    help: boolean = false,
): ReconAllParameters {
    const params = {
        "@type": "freesurfer.recon-all" as const,
        "subjid": subjid,
        "all_flag": all_flag,
        "autorecon_all_flag": autorecon_all_flag,
        "autorecon1_flag": autorecon1_flag,
        "autorecon2_flag": autorecon2_flag,
        "autorecon2_cp_flag": autorecon2_cp_flag,
        "autorecon2_wm_flag": autorecon2_wm_flag,
        "autorecon2_inflate1_flag": autorecon2_inflate1_flag,
        "autorecon2_perhemi_flag": autorecon2_perhemi_flag,
        "autorecon3_flag": autorecon3_flag,
        "nofill": nofill,
        "wsless": wsless,
        "wsmore": wsmore,
        "wsatlas": wsatlas,
        "no_wsatlas": no_wsatlas,
        "no_wsgcaatlas": no_wsgcaatlas,
        "cm": cm,
        "no_fix_with_ga": no_fix_with_ga,
        "fix_diag_only": fix_diag_only,
        "nothicken": nothicken,
        "no_ca_align_after": no_ca_align_after,
        "no_ca_align": no_ca_align,
        "deface": deface,
        "xopts_use": xopts_use,
        "xopts_clean": xopts_clean,
        "xopts_overwrite": xopts_overwrite,
        "mprage": mprage,
        "washu_mprage": washu_mprage,
        "schwartzya3t_atlas": schwartzya3t_atlas,
        "noappend": noappend,
        "no_isrunning": no_isrunning,
        "hippocampal_subfields_t1": hippocampal_subfields_t1,
        "brainstem_structures": brainstem_structures,
        "only_versions": only_versions,
        "debug": debug,
        "allow_coredump": allow_coredump,
        "dontrun": dontrun,
        "version": version,
        "help": help,
    };
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (pons_crs !== null) {
        params["pons_crs"] = pons_crs;
    }
    if (cc_crs !== null) {
        params["cc_crs"] = cc_crs;
    }
    if (lh_crs !== null) {
        params["lh_crs"] = lh_crs;
    }
    if (rh_crs !== null) {
        params["rh_crs"] = rh_crs;
    }
    if (watershed !== null) {
        params["watershed"] = watershed;
    }
    if (external_brain_mask !== null) {
        params["external_brain_mask"] = external_brain_mask;
    }
    if (wsthresh !== null) {
        params["wsthresh"] = wsthresh;
    }
    if (wsseed !== null) {
        params["wsseed"] = wsseed;
    }
    if (norm_3d_iters !== null) {
        params["norm_3d_iters"] = norm_3d_iters;
    }
    if (norm_max_grad !== null) {
        params["norm_max_grad"] = norm_max_grad;
    }
    if (norm1_b !== null) {
        params["norm1_b"] = norm1_b;
    }
    if (norm2_b !== null) {
        params["norm2_b"] = norm2_b;
    }
    if (norm1_n !== null) {
        params["norm1_n"] = norm1_n;
    }
    if (norm2_n !== null) {
        params["norm2_n"] = norm2_n;
    }
    if (seg_wlo !== null) {
        params["seg_wlo"] = seg_wlo;
    }
    if (seg_ghi !== null) {
        params["seg_ghi"] = seg_ghi;
    }
    if (expert_file !== null) {
        params["expert_file"] = expert_file;
    }
    if (termscript_file !== null) {
        params["termscript_file"] = termscript_file;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (waitfor_file !== null) {
        params["waitfor_file"] = waitfor_file;
    }
    if (notify_file !== null) {
        params["notify_file"] = notify_file;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (status_file !== null) {
        params["status_file"] = status_file;
    }
    if (hippocampal_subfields_t2 !== null) {
        params["hippocampal_subfields_t2"] = hippocampal_subfields_t2;
    }
    if (hippocampal_subfields_t1t2 !== null) {
        params["hippocampal_subfields_t1t2"] = hippocampal_subfields_t1t2;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (mail_user !== null) {
        params["mail_user"] = mail_user;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    if (group_id !== null) {
        params["group_id"] = group_id;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function recon_all_cargs(
    params: ReconAllParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("recon-all");
    cargs.push(
        "-subjid",
        (params["subjid"] ?? null)
    );
    if ((params["all_flag"] ?? null)) {
        cargs.push("-all");
    }
    if ((params["autorecon_all_flag"] ?? null)) {
        cargs.push("-autorecon-all");
    }
    if ((params["autorecon1_flag"] ?? null)) {
        cargs.push("-autorecon1");
    }
    if ((params["autorecon2_flag"] ?? null)) {
        cargs.push("-autorecon2");
    }
    if ((params["autorecon2_cp_flag"] ?? null)) {
        cargs.push("-autorecon2-cp");
    }
    if ((params["autorecon2_wm_flag"] ?? null)) {
        cargs.push("-autorecon2-wm");
    }
    if ((params["autorecon2_inflate1_flag"] ?? null)) {
        cargs.push("-autorecon2-inflate1");
    }
    if ((params["autorecon2_perhemi_flag"] ?? null)) {
        cargs.push("-autorecon2-perhemi");
    }
    if ((params["autorecon3_flag"] ?? null)) {
        cargs.push("-autorecon3");
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "-hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["pons_crs"] ?? null) !== null) {
        cargs.push(
            "-pons-crs",
            ...(params["pons_crs"] ?? null).map(String)
        );
    }
    if ((params["cc_crs"] ?? null) !== null) {
        cargs.push(
            "-cc-crs",
            ...(params["cc_crs"] ?? null).map(String)
        );
    }
    if ((params["lh_crs"] ?? null) !== null) {
        cargs.push(
            "-lh-crs",
            ...(params["lh_crs"] ?? null).map(String)
        );
    }
    if ((params["rh_crs"] ?? null) !== null) {
        cargs.push(
            "-rh-crs",
            ...(params["rh_crs"] ?? null).map(String)
        );
    }
    if ((params["nofill"] ?? null)) {
        cargs.push("-nofill");
    }
    if ((params["watershed"] ?? null) !== null) {
        cargs.push(
            "-watershed",
            (params["watershed"] ?? null)
        );
    }
    if ((params["external_brain_mask"] ?? null) !== null) {
        cargs.push(
            "-xmask",
            execution.inputFile((params["external_brain_mask"] ?? null))
        );
    }
    if ((params["wsless"] ?? null)) {
        cargs.push("-wsless");
    }
    if ((params["wsmore"] ?? null)) {
        cargs.push("-wsmore");
    }
    if ((params["wsatlas"] ?? null)) {
        cargs.push("-wsatlas");
    }
    if ((params["no_wsatlas"] ?? null)) {
        cargs.push("-no-wsatlas");
    }
    if ((params["no_wsgcaatlas"] ?? null)) {
        cargs.push("-no-wsgcaatlas");
    }
    if ((params["wsthresh"] ?? null) !== null) {
        cargs.push(
            "-wsthresh",
            String((params["wsthresh"] ?? null))
        );
    }
    if ((params["wsseed"] ?? null) !== null) {
        cargs.push(
            "-wsseed",
            ...(params["wsseed"] ?? null).map(String)
        );
    }
    if ((params["norm_3d_iters"] ?? null) !== null) {
        cargs.push(
            "-norm3diters",
            String((params["norm_3d_iters"] ?? null))
        );
    }
    if ((params["norm_max_grad"] ?? null) !== null) {
        cargs.push(
            "-normmaxgrad",
            String((params["norm_max_grad"] ?? null))
        );
    }
    if ((params["norm1_b"] ?? null) !== null) {
        cargs.push(
            "-norm1-b",
            String((params["norm1_b"] ?? null))
        );
    }
    if ((params["norm2_b"] ?? null) !== null) {
        cargs.push(
            "-norm2-b",
            String((params["norm2_b"] ?? null))
        );
    }
    if ((params["norm1_n"] ?? null) !== null) {
        cargs.push(
            "-norm1-n",
            String((params["norm1_n"] ?? null))
        );
    }
    if ((params["norm2_n"] ?? null) !== null) {
        cargs.push(
            "-norm2-n",
            String((params["norm2_n"] ?? null))
        );
    }
    if ((params["cm"] ?? null)) {
        cargs.push("-cm");
    }
    if ((params["no_fix_with_ga"] ?? null)) {
        cargs.push("-no-fix-with-ga");
    }
    if ((params["fix_diag_only"] ?? null)) {
        cargs.push("-fix-diag-only");
    }
    if ((params["seg_wlo"] ?? null) !== null) {
        cargs.push(
            "-seg-wlo",
            String((params["seg_wlo"] ?? null))
        );
    }
    if ((params["seg_ghi"] ?? null) !== null) {
        cargs.push(
            "-seg-ghi",
            String((params["seg_ghi"] ?? null))
        );
    }
    if ((params["nothicken"] ?? null)) {
        cargs.push("-nothicken");
    }
    if ((params["no_ca_align_after"] ?? null)) {
        cargs.push("-no-ca-align-after");
    }
    if ((params["no_ca_align"] ?? null)) {
        cargs.push("-no-ca-align");
    }
    if ((params["deface"] ?? null)) {
        cargs.push("-deface");
    }
    if ((params["expert_file"] ?? null) !== null) {
        cargs.push(
            "-expert",
            execution.inputFile((params["expert_file"] ?? null))
        );
    }
    if ((params["xopts_use"] ?? null)) {
        cargs.push("-xopts-use");
    }
    if ((params["xopts_clean"] ?? null)) {
        cargs.push("-xopts-clean");
    }
    if ((params["xopts_overwrite"] ?? null)) {
        cargs.push("-xopts-overwrite");
    }
    if ((params["termscript_file"] ?? null) !== null) {
        cargs.push(
            "-termscript",
            execution.inputFile((params["termscript_file"] ?? null))
        );
    }
    if ((params["mprage"] ?? null)) {
        cargs.push("-mprage");
    }
    if ((params["washu_mprage"] ?? null)) {
        cargs.push("-washu_mprage");
    }
    if ((params["schwartzya3t_atlas"] ?? null)) {
        cargs.push("-schwartzya3t-atlas");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "-threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["waitfor_file"] ?? null) !== null) {
        cargs.push(
            "-waitfor",
            execution.inputFile((params["waitfor_file"] ?? null))
        );
    }
    if ((params["notify_file"] ?? null) !== null) {
        cargs.push(
            "-notify",
            execution.inputFile((params["notify_file"] ?? null))
        );
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-log",
            execution.inputFile((params["log_file"] ?? null))
        );
    }
    if ((params["status_file"] ?? null) !== null) {
        cargs.push(
            "-status",
            execution.inputFile((params["status_file"] ?? null))
        );
    }
    if ((params["noappend"] ?? null)) {
        cargs.push("-noappend");
    }
    if ((params["no_isrunning"] ?? null)) {
        cargs.push("-no-isrunning");
    }
    if ((params["hippocampal_subfields_t1"] ?? null)) {
        cargs.push("-hippocampal-subfields-T1");
    }
    if ((params["hippocampal_subfields_t2"] ?? null) !== null) {
        cargs.push(
            "-hippocampal-subfields-T2",
            (params["hippocampal_subfields_t2"] ?? null)
        );
    }
    if ((params["hippocampal_subfields_t1t2"] ?? null) !== null) {
        cargs.push(
            "-hippocampal-subfields-T1T2",
            (params["hippocampal_subfields_t1t2"] ?? null)
        );
    }
    if ((params["brainstem_structures"] ?? null)) {
        cargs.push("-brainstem-structures");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "-sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["mail_user"] ?? null) !== null) {
        cargs.push(
            "-mail",
            (params["mail_user"] ?? null)
        );
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    if ((params["group_id"] ?? null) !== null) {
        cargs.push(
            "-grp",
            (params["group_id"] ?? null)
        );
    }
    if ((params["only_versions"] ?? null)) {
        cargs.push("-onlyversions");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["allow_coredump"] ?? null)) {
        cargs.push("-allowcoredump");
    }
    if ((params["dontrun"] ?? null)) {
        cargs.push("-dontrun");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function recon_all_outputs(
    params: ReconAllParameters,
    execution: Execution,
): ReconAllOutputs {
    const ret: ReconAllOutputs = {
        root: execution.outputFile("."),
        logfile: execution.outputFile([(params["subjid"] ?? null), "/scripts/recon-all.log"].join('')),
        statusfile: execution.outputFile([(params["subjid"] ?? null), "/scripts/recon-all-status.log"].join('')),
    };
    return ret;
}


/**
 * recon-all
 *
 * Performs all, or any part of, the FreeSurfer cortical reconstruction process.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ReconAllOutputs`).
 */
function recon_all_execute(
    params: ReconAllParameters,
    runner: Runner | null = null,
): ReconAllOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RECON_ALL_METADATA);
    params = execution.params(params)
    const cargs = recon_all_cargs(params, execution)
    const ret = recon_all_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * recon-all
 *
 * Performs all, or any part of, the FreeSurfer cortical reconstruction process.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjid Subject ID for the FreeSurfer analysis
 * @param all_flag Performs all stages of cortical reconstruction
 * @param autorecon_all_flag Same as -all
 * @param autorecon1_flag Process stages 1-5
 * @param autorecon2_flag Process stages 6-23
 * @param autorecon2_cp_flag Process stages 12-23
 * @param autorecon2_wm_flag Process stages 15-23
 * @param autorecon2_inflate1_flag Process stages 6-18
 * @param autorecon2_perhemi_flag Tessellation, Smooth1, Inflate1, Qsphere, Fix, Smooth2, Inflate2, Finalsurf, Ribbon
 * @param autorecon3_flag Process stages 24-34
 * @param hemi Specify hemisphere ('lh' or 'rh')
 * @param pons_crs Specify CRS for pons during fill operation
 * @param cc_crs Specify CRS for corpus callosum during fill operation
 * @param lh_crs Specify CRS for left hemisphere during fill operation
 * @param rh_crs Specify CRS for right hemisphere during fill operation
 * @param nofill Do not use automatic subcortical seg to fill
 * @param watershed Control skull stripping/watershed program
 * @param external_brain_mask Custom external brain mask file
 * @param wsless Decrease watershed threshold
 * @param wsmore Increase watershed threshold
 * @param wsatlas Use atlas when skull stripping
 * @param no_wsatlas Do not use atlas when skull stripping
 * @param no_wsgcaatlas Do not use GCA atlas when skull stripping
 * @param wsthresh Explicitly set watershed threshold
 * @param wsseed Identify an index (C, R, S) point in the skull
 * @param norm_3d_iters Number of 3D iterations for mri_normalize
 * @param norm_max_grad Max grad for mri_normalize
 * @param norm1_b First usage of mri_normalize with control point intensity N below target
 * @param norm2_b Second usage of mri_normalize with control point intensity N below target
 * @param norm1_n First usage of mri_normalize, number of iterations
 * @param norm2_n Second usage of mri_normalize, number of iterations
 * @param cm Conform volumes to the min voxel size
 * @param no_fix_with_ga Do not use genetic algorithm when fixing topology
 * @param fix_diag_only Topology fixer runs until ?h.defect_labels files are created
 * @param seg_wlo Set WLO value for mri_segment and mris_make_surfaces
 * @param seg_ghi Set GHI value for mri_segment and mris_make_surfaces
 * @param nothicken Pass '-thicken 0' to mri_segment
 * @param no_ca_align_after Turn off '-align-after' with mri_ca_register
 * @param no_ca_align Turn off '-align' with mri_ca_label
 * @param deface Deface subject, written to orig_defaced.mgz
 * @param expert_file Read-in expert options file
 * @param xopts_use Use pre-existing expert options file
 * @param xopts_clean Delete pre-existing expert options file
 * @param xopts_overwrite Overwrite pre-existing expert options file
 * @param termscript_file Run script before exiting
 * @param mprage Assume scan parameters are MGH MP-RAGE protocol
 * @param washu_mprage Assume scan parameters are Wash.U. MP-RAGE protocol
 * @param schwartzya3t_atlas Use special young adult 3T atlas for tal reg
 * @param threads Set number of threads to use
 * @param waitfor_file Wait for file to appear before beginning
 * @param notify_file Create this file after finishing
 * @param log_file Specify log file
 * @param status_file Specify status file
 * @param noappend Start new log and status files instead of appending
 * @param no_isrunning Do not check whether this subject is currently being processed
 * @param hippocampal_subfields_t1 Segmentation of hippocampal subfields using input T1 scan
 * @param hippocampal_subfields_t2 Segmentation using an additional scan and input T2 scan
 * @param hippocampal_subfields_t1t2 Segmentation using additional scan and input T1
 * @param brainstem_structures Segmentation of brainstem structures
 * @param subjects_dir Specify subjects directory
 * @param mail_user Mail user when done
 * @param umask Set unix file permission mask
 * @param group_id Check that current group is alpha group
 * @param only_versions Print version of each binary and exit
 * @param debug Print out lots of info
 * @param allow_coredump Set coredump limit to unlimited
 * @param dontrun Do everything but execute each command
 * @param version Print version of this script and exit
 * @param help Display help message and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ReconAllOutputs`).
 */
function recon_all(
    subjid: string,
    all_flag: boolean = false,
    autorecon_all_flag: boolean = false,
    autorecon1_flag: boolean = false,
    autorecon2_flag: boolean = false,
    autorecon2_cp_flag: boolean = false,
    autorecon2_wm_flag: boolean = false,
    autorecon2_inflate1_flag: boolean = false,
    autorecon2_perhemi_flag: boolean = false,
    autorecon3_flag: boolean = false,
    hemi: string | null = null,
    pons_crs: Array<number> | null = null,
    cc_crs: Array<number> | null = null,
    lh_crs: Array<number> | null = null,
    rh_crs: Array<number> | null = null,
    nofill: boolean = false,
    watershed: string | null = null,
    external_brain_mask: InputPathType | null = null,
    wsless: boolean = false,
    wsmore: boolean = false,
    wsatlas: boolean = false,
    no_wsatlas: boolean = false,
    no_wsgcaatlas: boolean = false,
    wsthresh: number | null = null,
    wsseed: Array<number> | null = null,
    norm_3d_iters: number | null = null,
    norm_max_grad: number | null = null,
    norm1_b: number | null = null,
    norm2_b: number | null = null,
    norm1_n: number | null = null,
    norm2_n: number | null = null,
    cm: boolean = false,
    no_fix_with_ga: boolean = false,
    fix_diag_only: boolean = false,
    seg_wlo: number | null = null,
    seg_ghi: number | null = null,
    nothicken: boolean = false,
    no_ca_align_after: boolean = false,
    no_ca_align: boolean = false,
    deface: boolean = false,
    expert_file: InputPathType | null = null,
    xopts_use: boolean = false,
    xopts_clean: boolean = false,
    xopts_overwrite: boolean = false,
    termscript_file: InputPathType | null = null,
    mprage: boolean = false,
    washu_mprage: boolean = false,
    schwartzya3t_atlas: boolean = false,
    threads: number | null = null,
    waitfor_file: InputPathType | null = null,
    notify_file: InputPathType | null = null,
    log_file: InputPathType | null = null,
    status_file: InputPathType | null = null,
    noappend: boolean = false,
    no_isrunning: boolean = false,
    hippocampal_subfields_t1: boolean = false,
    hippocampal_subfields_t2: string | null = null,
    hippocampal_subfields_t1t2: string | null = null,
    brainstem_structures: boolean = false,
    subjects_dir: string | null = null,
    mail_user: string | null = null,
    umask: string | null = null,
    group_id: string | null = null,
    only_versions: boolean = false,
    debug: boolean = false,
    allow_coredump: boolean = false,
    dontrun: boolean = false,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): ReconAllOutputs {
    const params = recon_all_params(subjid, all_flag, autorecon_all_flag, autorecon1_flag, autorecon2_flag, autorecon2_cp_flag, autorecon2_wm_flag, autorecon2_inflate1_flag, autorecon2_perhemi_flag, autorecon3_flag, hemi, pons_crs, cc_crs, lh_crs, rh_crs, nofill, watershed, external_brain_mask, wsless, wsmore, wsatlas, no_wsatlas, no_wsgcaatlas, wsthresh, wsseed, norm_3d_iters, norm_max_grad, norm1_b, norm2_b, norm1_n, norm2_n, cm, no_fix_with_ga, fix_diag_only, seg_wlo, seg_ghi, nothicken, no_ca_align_after, no_ca_align, deface, expert_file, xopts_use, xopts_clean, xopts_overwrite, termscript_file, mprage, washu_mprage, schwartzya3t_atlas, threads, waitfor_file, notify_file, log_file, status_file, noappend, no_isrunning, hippocampal_subfields_t1, hippocampal_subfields_t2, hippocampal_subfields_t1t2, brainstem_structures, subjects_dir, mail_user, umask, group_id, only_versions, debug, allow_coredump, dontrun, version, help)
    return recon_all_execute(params, runner);
}


export {
      RECON_ALL_METADATA,
      ReconAllOutputs,
      ReconAllParameters,
      recon_all,
      recon_all_execute,
      recon_all_params,
};
