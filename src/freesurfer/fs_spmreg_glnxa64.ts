// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FS_SPMREG_GLNXA64_METADATA: Metadata = {
    id: "5a9193dabec6a736cf37d773fb6396ea21a54ffa.boutiques",
    name: "fs_spmreg.glnxa64",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsSpmregGlnxa64Parameters {
    "@type": "freesurfer.fs_spmreg.glnxa64";
    "input_volume": InputPathType;
    "output_matrix": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fs_spmreg.glnxa64": fs_spmreg_glnxa64_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.fs_spmreg.glnxa64": fs_spmreg_glnxa64_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fs_spmreg_glnxa64(...)`.
 *
 * @interface
 */
interface FsSpmregGlnxa64Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registration matrix file
     */
    output_matrix_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input anatomical volume
 * @param output_matrix Output registration matrix
 *
 * @returns Parameter dictionary
 */
function fs_spmreg_glnxa64_params(
    input_volume: InputPathType,
    output_matrix: string = "output.mat",
): FsSpmregGlnxa64Parameters {
    const params = {
        "@type": "freesurfer.fs_spmreg.glnxa64" as const,
        "input_volume": input_volume,
        "output_matrix": output_matrix,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fs_spmreg_glnxa64_cargs(
    params: FsSpmregGlnxa64Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fs_spmreg.glnxa64");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push((params["output_matrix"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fs_spmreg_glnxa64_outputs(
    params: FsSpmregGlnxa64Parameters,
    execution: Execution,
): FsSpmregGlnxa64Outputs {
    const ret: FsSpmregGlnxa64Outputs = {
        root: execution.outputFile("."),
        output_matrix_file: execution.outputFile([(params["output_matrix"] ?? null)].join('')),
    };
    return ret;
}


/**
 * fs_spmreg.glnxa64
 *
 * fs_spmreg is a tool for registration using SPM within FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsSpmregGlnxa64Outputs`).
 */
function fs_spmreg_glnxa64_execute(
    params: FsSpmregGlnxa64Parameters,
    runner: Runner | null = null,
): FsSpmregGlnxa64Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FS_SPMREG_GLNXA64_METADATA);
    params = execution.params(params)
    const cargs = fs_spmreg_glnxa64_cargs(params, execution)
    const ret = fs_spmreg_glnxa64_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fs_spmreg.glnxa64
 *
 * fs_spmreg is a tool for registration using SPM within FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input anatomical volume
 * @param output_matrix Output registration matrix
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsSpmregGlnxa64Outputs`).
 */
function fs_spmreg_glnxa64(
    input_volume: InputPathType,
    output_matrix: string = "output.mat",
    runner: Runner | null = null,
): FsSpmregGlnxa64Outputs {
    const params = fs_spmreg_glnxa64_params(input_volume, output_matrix)
    return fs_spmreg_glnxa64_execute(params, runner);
}


export {
      FS_SPMREG_GLNXA64_METADATA,
      FsSpmregGlnxa64Outputs,
      FsSpmregGlnxa64Parameters,
      fs_spmreg_glnxa64,
      fs_spmreg_glnxa64_execute,
      fs_spmreg_glnxa64_params,
};
