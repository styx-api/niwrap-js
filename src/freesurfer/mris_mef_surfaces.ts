// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MEF_SURFACES_METADATA: Metadata = {
    id: "f5e7133e280262c674ba034bd20d28f4c0e8e683.boutiques",
    name: "mris_mef_surfaces",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMefSurfacesParameters {
    "__STYXTYPE__": "mris_mef_surfaces";
    "subject_name": string;
    "hemisphere": string;
    "omit_self_intersection": boolean;
    "curvature": boolean;
    "average_curvature"?: number | null | undefined;
    "white_only": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_mef_surfaces": mris_mef_surfaces_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_mef_surfaces(...)`.
 *
 * @interface
 */
interface MrisMefSurfacesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_mef_surfaces_params(
    subject_name: string,
    hemisphere: string,
    omit_self_intersection: boolean = false,
    curvature: boolean = false,
    average_curvature: number | null = null,
    white_only: boolean = false,
): MrisMefSurfacesParameters {
    /**
     * Build parameters.
    
     * @param subject_name Name of the subject
     * @param hemisphere Hemisphere (e.g., left or right)
     * @param omit_self_intersection Omit self-intersection and only generate gray/white surface.
     * @param curvature Create curvature and area files from the white matter surface.
     * @param average_curvature Average curvature values specified number of times, default is 10.
     * @param white_only Only generate the white matter surface.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_mef_surfaces" as const,
        "subject_name": subject_name,
        "hemisphere": hemisphere,
        "omit_self_intersection": omit_self_intersection,
        "curvature": curvature,
        "white_only": white_only,
    };
    if (average_curvature !== null) {
        params["average_curvature"] = average_curvature;
    }
    return params;
}


function mris_mef_surfaces_cargs(
    params: MrisMefSurfacesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_mef_surfaces");
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    if ((params["omit_self_intersection"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["curvature"] ?? null)) {
        cargs.push("-c");
    }
    if ((params["average_curvature"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["average_curvature"] ?? null))
        );
    }
    if ((params["white_only"] ?? null)) {
        cargs.push("-whiteonly");
    }
    return cargs;
}


function mris_mef_surfaces_outputs(
    params: MrisMefSurfacesParameters,
    execution: Execution,
): MrisMefSurfacesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisMefSurfacesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_mef_surfaces_execute(
    params: MrisMefSurfacesParameters,
    execution: Execution,
): MrisMefSurfacesOutputs {
    /**
     * Positions the tessellation of the cortical surface at the white matter surface, then the gray matter surface and generates surface files for these surfaces. Also generates 'curvature' file for cortical thickness and a surface file approximating layer IV of the cortical sheet.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisMefSurfacesOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_mef_surfaces_cargs(params, execution)
    const ret = mris_mef_surfaces_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_mef_surfaces(
    subject_name: string,
    hemisphere: string,
    omit_self_intersection: boolean = false,
    curvature: boolean = false,
    average_curvature: number | null = null,
    white_only: boolean = false,
    runner: Runner | null = null,
): MrisMefSurfacesOutputs {
    /**
     * Positions the tessellation of the cortical surface at the white matter surface, then the gray matter surface and generates surface files for these surfaces. Also generates 'curvature' file for cortical thickness and a surface file approximating layer IV of the cortical sheet.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject_name Name of the subject
     * @param hemisphere Hemisphere (e.g., left or right)
     * @param omit_self_intersection Omit self-intersection and only generate gray/white surface.
     * @param curvature Create curvature and area files from the white matter surface.
     * @param average_curvature Average curvature values specified number of times, default is 10.
     * @param white_only Only generate the white matter surface.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisMefSurfacesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MEF_SURFACES_METADATA);
    const params = mris_mef_surfaces_params(subject_name, hemisphere, omit_self_intersection, curvature, average_curvature, white_only)
    return mris_mef_surfaces_execute(params, execution);
}


export {
      MRIS_MEF_SURFACES_METADATA,
      MrisMefSurfacesOutputs,
      MrisMefSurfacesParameters,
      mris_mef_surfaces,
      mris_mef_surfaces_params,
};
