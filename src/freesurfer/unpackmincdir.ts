// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACKMINCDIR_METADATA: Metadata = {
    id: "2dc1b33b00ea414a122d0a6f9b270fd885e8e3eb.boutiques",
    name: "unpackmincdir",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UnpackmincdirParameters {
    "@type": "freesurfer.unpackmincdir";
    "source_directory": string;
    "target_directory": string;
    "scan_sequence_info"?: string | null | undefined;
    "functional_sequence"?: string | null | undefined;
    "functional_subdirectory"?: string | null | undefined;
    "minc_only": boolean;
    "no_copy": boolean;
    "umask"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.unpackmincdir": unpackmincdir_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `unpackmincdir(...)`.
 *
 * @interface
 */
interface UnpackmincdirOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source_directory Source directory containing the MINC files.
 * @param target_directory Target directory to unpack the contents to.
 * @param scan_sequence_info Scan sequence directives file, e.g., freesurfer_alpha/scanseq.info.
 * @param functional_sequence Use seqname for functionals (example: ep2d_fid_ts_20b2604).
 * @param functional_subdirectory Functional subdirectory, e.g., bold.
 * @param minc_only Do not unpack into bshorts.
 * @param no_copy Create directories but do not copy/convert data.
 * @param umask Unix file permission mask (default: 22).
 *
 * @returns Parameter dictionary
 */
function unpackmincdir_params(
    source_directory: string,
    target_directory: string,
    scan_sequence_info: string | null = null,
    functional_sequence: string | null = null,
    functional_subdirectory: string | null = null,
    minc_only: boolean = false,
    no_copy: boolean = false,
    umask: string | null = null,
): UnpackmincdirParameters {
    const params = {
        "@type": "freesurfer.unpackmincdir" as const,
        "source_directory": source_directory,
        "target_directory": target_directory,
        "minc_only": minc_only,
        "no_copy": no_copy,
    };
    if (scan_sequence_info !== null) {
        params["scan_sequence_info"] = scan_sequence_info;
    }
    if (functional_sequence !== null) {
        params["functional_sequence"] = functional_sequence;
    }
    if (functional_subdirectory !== null) {
        params["functional_subdirectory"] = functional_subdirectory;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function unpackmincdir_cargs(
    params: UnpackmincdirParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("unpackmincdir");
    cargs.push(
        "-src",
        (params["source_directory"] ?? null)
    );
    cargs.push(
        "-targ",
        (params["target_directory"] ?? null)
    );
    if ((params["scan_sequence_info"] ?? null) !== null) {
        cargs.push(
            "-scanseqinfo",
            (params["scan_sequence_info"] ?? null)
        );
    }
    if ((params["functional_sequence"] ?? null) !== null) {
        cargs.push(
            "-funcseq",
            (params["functional_sequence"] ?? null)
        );
    }
    if ((params["functional_subdirectory"] ?? null) !== null) {
        cargs.push(
            "-fsd",
            (params["functional_subdirectory"] ?? null)
        );
    }
    if ((params["minc_only"] ?? null)) {
        cargs.push("-minconly");
    }
    if ((params["no_copy"] ?? null)) {
        cargs.push("-nocopy");
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function unpackmincdir_outputs(
    params: UnpackmincdirParameters,
    execution: Execution,
): UnpackmincdirOutputs {
    const ret: UnpackmincdirOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * unpackmincdir
 *
 * Tool for unpacking directories with MINC files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpackmincdirOutputs`).
 */
function unpackmincdir_execute(
    params: UnpackmincdirParameters,
    runner: Runner | null = null,
): UnpackmincdirOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACKMINCDIR_METADATA);
    params = execution.params(params)
    const cargs = unpackmincdir_cargs(params, execution)
    const ret = unpackmincdir_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * unpackmincdir
 *
 * Tool for unpacking directories with MINC files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source_directory Source directory containing the MINC files.
 * @param target_directory Target directory to unpack the contents to.
 * @param scan_sequence_info Scan sequence directives file, e.g., freesurfer_alpha/scanseq.info.
 * @param functional_sequence Use seqname for functionals (example: ep2d_fid_ts_20b2604).
 * @param functional_subdirectory Functional subdirectory, e.g., bold.
 * @param minc_only Do not unpack into bshorts.
 * @param no_copy Create directories but do not copy/convert data.
 * @param umask Unix file permission mask (default: 22).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `UnpackmincdirOutputs`).
 */
function unpackmincdir(
    source_directory: string,
    target_directory: string,
    scan_sequence_info: string | null = null,
    functional_sequence: string | null = null,
    functional_subdirectory: string | null = null,
    minc_only: boolean = false,
    no_copy: boolean = false,
    umask: string | null = null,
    runner: Runner | null = null,
): UnpackmincdirOutputs {
    const params = unpackmincdir_params(source_directory, target_directory, scan_sequence_info, functional_sequence, functional_subdirectory, minc_only, no_copy, umask)
    return unpackmincdir_execute(params, runner);
}


export {
      UNPACKMINCDIR_METADATA,
      UnpackmincdirOutputs,
      UnpackmincdirParameters,
      unpackmincdir,
      unpackmincdir_execute,
      unpackmincdir_params,
};
