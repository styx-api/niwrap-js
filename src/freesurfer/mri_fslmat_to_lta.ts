// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FSLMAT_TO_LTA_METADATA: Metadata = {
    id: "43d6ea5a8918dcf72ca72861a59575adb4671e75.boutiques",
    name: "mri_fslmat_to_lta",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFslmatToLtaParameters {
    "@type": "freesurfer.mri_fslmat_to_lta";
    "src_vol": InputPathType;
    "target_vol": InputPathType;
    "fslmat_file": InputPathType;
    "lta_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_fslmat_to_lta": mri_fslmat_to_lta_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_fslmat_to_lta": mri_fslmat_to_lta_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_fslmat_to_lta(...)`.
 *
 * @interface
 */
interface MriFslmatToLtaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * LTA transformation file created from the given source, target volumes and FSL matrix file
     */
    output_lta_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param src_vol Source volume file
 * @param target_vol Target volume file
 * @param fslmat_file FSL transformation matrix file
 * @param lta_file Output LTA transformation file
 *
 * @returns Parameter dictionary
 */
function mri_fslmat_to_lta_params(
    src_vol: InputPathType,
    target_vol: InputPathType,
    fslmat_file: InputPathType,
    lta_file: string,
): MriFslmatToLtaParameters {
    const params = {
        "@type": "freesurfer.mri_fslmat_to_lta" as const,
        "src_vol": src_vol,
        "target_vol": target_vol,
        "fslmat_file": fslmat_file,
        "lta_file": lta_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_fslmat_to_lta_cargs(
    params: MriFslmatToLtaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_fslmat_to_lta");
    cargs.push(execution.inputFile((params["src_vol"] ?? null)));
    cargs.push(execution.inputFile((params["target_vol"] ?? null)));
    cargs.push(execution.inputFile((params["fslmat_file"] ?? null)));
    cargs.push((params["lta_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_fslmat_to_lta_outputs(
    params: MriFslmatToLtaParameters,
    execution: Execution,
): MriFslmatToLtaOutputs {
    const ret: MriFslmatToLtaOutputs = {
        root: execution.outputFile("."),
        output_lta_file: execution.outputFile([(params["lta_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * This program creates the LTA transformation file using information from the src and target volumes and an FSL matrix file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFslmatToLtaOutputs`).
 */
function mri_fslmat_to_lta_execute(
    params: MriFslmatToLtaParameters,
    runner: Runner | null = null,
): MriFslmatToLtaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FSLMAT_TO_LTA_METADATA);
    params = execution.params(params)
    const cargs = mri_fslmat_to_lta_cargs(params, execution)
    const ret = mri_fslmat_to_lta_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program creates the LTA transformation file using information from the src and target volumes and an FSL matrix file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param src_vol Source volume file
 * @param target_vol Target volume file
 * @param fslmat_file FSL transformation matrix file
 * @param lta_file Output LTA transformation file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFslmatToLtaOutputs`).
 */
function mri_fslmat_to_lta(
    src_vol: InputPathType,
    target_vol: InputPathType,
    fslmat_file: InputPathType,
    lta_file: string,
    runner: Runner | null = null,
): MriFslmatToLtaOutputs {
    const params = mri_fslmat_to_lta_params(src_vol, target_vol, fslmat_file, lta_file)
    return mri_fslmat_to_lta_execute(params, runner);
}


export {
      MRI_FSLMAT_TO_LTA_METADATA,
      MriFslmatToLtaOutputs,
      MriFslmatToLtaParameters,
      mri_fslmat_to_lta,
      mri_fslmat_to_lta_execute,
      mri_fslmat_to_lta_params,
};
