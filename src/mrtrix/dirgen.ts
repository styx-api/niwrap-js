// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DIRGEN_METADATA: Metadata = {
    id: "c60059a08fda0ae43d6c84d28c511d2352efa309.boutiques",
    name: "dirgen",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface DirgenConfigParameters {
    "@type": "mrtrix.dirgen.config";
    "key": string;
    "value": string;
}


interface DirgenParameters {
    "@type": "mrtrix.dirgen";
    "power"?: number | null | undefined;
    "niter"?: number | null | undefined;
    "restarts"?: number | null | undefined;
    "unipolar": boolean;
    "cartesian": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<DirgenConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "ndir": number;
    "dirs": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.dirgen": dirgen_cargs,
        "mrtrix.dirgen.config": dirgen_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.dirgen": dirgen_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function dirgen_config_params(
    key: string,
    value: string,
): DirgenConfigParameters {
    const params = {
        "@type": "mrtrix.dirgen.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dirgen_config_cargs(
    params: DirgenConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `dirgen(...)`.
 *
 * @interface
 */
interface DirgenOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the text file to write the directions to, as [ az el ] pairs.
     */
    dirs: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param ndir the number of directions to generate.
 * @param dirs the text file to write the directions to, as [ az el ] pairs.
 * @param power specify exponent to use for repulsion power law (default: 1). This must be a power of 2 (i.e. 1, 2, 4, 8, 16, ...).
 * @param niter specify the maximum number of iterations to perform (default: 10000).
 * @param restarts specify the number of restarts to perform (default: 10).
 * @param unipolar optimise assuming a unipolar electrostatic repulsion model rather than the bipolar model normally assumed in DWI
 * @param cartesian Output the directions in Cartesian coordinates [x y z] instead of [az el].
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function dirgen_params(
    ndir: number,
    dirs: string,
    power: number | null = null,
    niter: number | null = null,
    restarts: number | null = null,
    unipolar: boolean = false,
    cartesian: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DirgenConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): DirgenParameters {
    const params = {
        "@type": "mrtrix.dirgen" as const,
        "unipolar": unipolar,
        "cartesian": cartesian,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "ndir": ndir,
        "dirs": dirs,
    };
    if (power !== null) {
        params["power"] = power;
    }
    if (niter !== null) {
        params["niter"] = niter;
    }
    if (restarts !== null) {
        params["restarts"] = restarts;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dirgen_cargs(
    params: DirgenParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dirgen");
    if ((params["power"] ?? null) !== null) {
        cargs.push(
            "-power",
            String((params["power"] ?? null))
        );
    }
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["niter"] ?? null))
        );
    }
    if ((params["restarts"] ?? null) !== null) {
        cargs.push(
            "-restarts",
            String((params["restarts"] ?? null))
        );
    }
    if ((params["unipolar"] ?? null)) {
        cargs.push("-unipolar");
    }
    if ((params["cartesian"] ?? null)) {
        cargs.push("-cartesian");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(String((params["ndir"] ?? null)));
    cargs.push((params["dirs"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dirgen_outputs(
    params: DirgenParameters,
    execution: Execution,
): DirgenOutputs {
    const ret: DirgenOutputs = {
        root: execution.outputFile("."),
        dirs: execution.outputFile([(params["dirs"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Generate a set of uniformly distributed directions using a bipolar electrostatic repulsion model.
 *
 * Directions are distributed by analogy to an electrostatic repulsion system, with each direction corresponding to a single electrostatic charge (for -unipolar), or a pair of diametrically opposed charges (for the default bipolar case). The energy of the system is determined based on the Coulomb repulsion, which assumes the form 1/r^power, where r is the distance between any pair of charges, and p is the power assumed for the repulsion law (default: 1). The minimum energy state is obtained by gradient descent.
 *
 * References:
 *
 * Jones, D.; Horsfield, M. & Simmons, A. Optimal strategies for measuring diffusion in anisotropic systems by magnetic resonance imaging. Magnetic Resonance in Medicine, 1999, 42: 515-525
 *
 * Papadakis, N. G.; Murrills, C. D.; Hall, L. D.; Huang, C. L.-H. & Adrian Carpenter, T. Minimal gradient encoding for robust estimation of diffusion anisotropy. Magnetic Resonance Imaging, 2000, 18: 671-679.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DirgenOutputs`).
 */
function dirgen_execute(
    params: DirgenParameters,
    runner: Runner | null = null,
): DirgenOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DIRGEN_METADATA);
    params = execution.params(params)
    const cargs = dirgen_cargs(params, execution)
    const ret = dirgen_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Generate a set of uniformly distributed directions using a bipolar electrostatic repulsion model.
 *
 * Directions are distributed by analogy to an electrostatic repulsion system, with each direction corresponding to a single electrostatic charge (for -unipolar), or a pair of diametrically opposed charges (for the default bipolar case). The energy of the system is determined based on the Coulomb repulsion, which assumes the form 1/r^power, where r is the distance between any pair of charges, and p is the power assumed for the repulsion law (default: 1). The minimum energy state is obtained by gradient descent.
 *
 * References:
 *
 * Jones, D.; Horsfield, M. & Simmons, A. Optimal strategies for measuring diffusion in anisotropic systems by magnetic resonance imaging. Magnetic Resonance in Medicine, 1999, 42: 515-525
 *
 * Papadakis, N. G.; Murrills, C. D.; Hall, L. D.; Huang, C. L.-H. & Adrian Carpenter, T. Minimal gradient encoding for robust estimation of diffusion anisotropy. Magnetic Resonance Imaging, 2000, 18: 671-679.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param ndir the number of directions to generate.
 * @param dirs the text file to write the directions to, as [ az el ] pairs.
 * @param power specify exponent to use for repulsion power law (default: 1). This must be a power of 2 (i.e. 1, 2, 4, 8, 16, ...).
 * @param niter specify the maximum number of iterations to perform (default: 10000).
 * @param restarts specify the number of restarts to perform (default: 10).
 * @param unipolar optimise assuming a unipolar electrostatic repulsion model rather than the bipolar model normally assumed in DWI
 * @param cartesian Output the directions in Cartesian coordinates [x y z] instead of [az el].
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DirgenOutputs`).
 */
function dirgen(
    ndir: number,
    dirs: string,
    power: number | null = null,
    niter: number | null = null,
    restarts: number | null = null,
    unipolar: boolean = false,
    cartesian: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DirgenConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DirgenOutputs {
    const params = dirgen_params(ndir, dirs, power, niter, restarts, unipolar, cartesian, info, quiet, debug, force, nthreads, config, help, version)
    return dirgen_execute(params, runner);
}


export {
      DIRGEN_METADATA,
      DirgenConfigParameters,
      DirgenOutputs,
      DirgenParameters,
      dirgen,
      dirgen_config_params,
      dirgen_execute,
      dirgen_params,
};
