// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEGMENT_MONKEY_METADATA: Metadata = {
    id: "0615d8035d844bed5c1a9ffb83560ac72aa61c4d.boutiques",
    name: "segment_monkey",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SegmentMonkeyParameters {
    "@type"?: "freesurfer/segment_monkey";
    "control_points": Array<string>;
}
type SegmentMonkeyParametersTagged = Required<Pick<SegmentMonkeyParameters, '@type'>> & SegmentMonkeyParameters;


/**
 * Output object returned when calling `SegmentMonkeyParameters(...)`.
 *
 * @interface
 */
interface SegmentMonkeyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param control_points List of control points required for segmentation
 *
 * @returns Parameter dictionary
 */
function segment_monkey_params(
    control_points: Array<string>,
): SegmentMonkeyParametersTagged {
    const params = {
        "@type": "freesurfer/segment_monkey" as const,
        "control_points": control_points,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function segment_monkey_cargs(
    params: SegmentMonkeyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("segment_monkey");
    cargs.push(...(params["control_points"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function segment_monkey_outputs(
    params: SegmentMonkeyParameters,
    execution: Execution,
): SegmentMonkeyOutputs {
    const ret: SegmentMonkeyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * segment_monkey
 *
 * A tool for segmenting images using specified control points.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentMonkeyOutputs`).
 */
function segment_monkey_execute(
    params: SegmentMonkeyParameters,
    runner: Runner | null = null,
): SegmentMonkeyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEGMENT_MONKEY_METADATA);
    params = execution.params(params)
    const cargs = segment_monkey_cargs(params, execution)
    const ret = segment_monkey_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * segment_monkey
 *
 * A tool for segmenting images using specified control points.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param control_points List of control points required for segmentation
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentMonkeyOutputs`).
 */
function segment_monkey(
    control_points: Array<string>,
    runner: Runner | null = null,
): SegmentMonkeyOutputs {
    const params = segment_monkey_params(control_points)
    return segment_monkey_execute(params, runner);
}


export {
      SEGMENT_MONKEY_METADATA,
      SegmentMonkeyOutputs,
      segment_monkey,
      segment_monkey_execute,
      segment_monkey_params,
};
