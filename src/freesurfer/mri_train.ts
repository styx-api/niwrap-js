// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_TRAIN_METADATA: Metadata = {
    id: "b7429817b01262357da9a5d34e39a1deef382fad.boutiques",
    name: "mri_train",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriTrainParameters {
    "@type"?: "freesurfer/mri_train";
    "training_file": InputPathType;
    "output_file": string;
}
type MriTrainParametersTagged = Required<Pick<MriTrainParameters, '@type'>> & MriTrainParameters;


/**
 * Output object returned when calling `MriTrainParameters(...)`.
 *
 * @interface
 */
interface MriTrainOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file generated by mri_train.
     */
    output_file_generated: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param training_file Input training file name
 * @param output_file Output file
 *
 * @returns Parameter dictionary
 */
function mri_train_params(
    training_file: InputPathType,
    output_file: string,
): MriTrainParametersTagged {
    const params = {
        "@type": "freesurfer/mri_train" as const,
        "training_file": training_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_train_cargs(
    params: MriTrainParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_train");
    cargs.push(execution.inputFile((params["training_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_train_outputs(
    params: MriTrainParameters,
    execution: Execution,
): MriTrainOutputs {
    const ret: MriTrainOutputs = {
        root: execution.outputFile("."),
        output_file_generated: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_train
 *
 * Tool for training with MRI data in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriTrainOutputs`).
 */
function mri_train_execute(
    params: MriTrainParameters,
    runner: Runner | null = null,
): MriTrainOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_TRAIN_METADATA);
    params = execution.params(params)
    const cargs = mri_train_cargs(params, execution)
    const ret = mri_train_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_train
 *
 * Tool for training with MRI data in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param training_file Input training file name
 * @param output_file Output file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriTrainOutputs`).
 */
function mri_train(
    training_file: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): MriTrainOutputs {
    const params = mri_train_params(training_file, output_file)
    return mri_train_execute(params, runner);
}


export {
      MRI_TRAIN_METADATA,
      MriTrainOutputs,
      mri_train,
      mri_train_execute,
      mri_train_params,
};
