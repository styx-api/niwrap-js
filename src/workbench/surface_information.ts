// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_INFORMATION_METADATA: Metadata = {
    id: "757610425a8d086526ce21babe9d148126110db0.boutiques",
    name: "surface-information",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceInformationParameters {
    "@type": "workbench.surface-information";
    "surface_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-information": surface_information_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_information(...)`.
 *
 * @interface
 */
interface SurfaceInformationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface_file Surface for which information is displayed
 *
 * @returns Parameter dictionary
 */
function surface_information_params(
    surface_file: InputPathType,
): SurfaceInformationParameters {
    const params = {
        "@type": "workbench.surface-information" as const,
        "surface_file": surface_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_information_cargs(
    params: SurfaceInformationParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-information");
    cargs.push(execution.inputFile((params["surface_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_information_outputs(
    params: SurfaceInformationParameters,
    execution: Execution,
): SurfaceInformationOutputs {
    const ret: SurfaceInformationOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Display information about a surface.
 *
 * Information about surface is displayed including vertices, 
 * triangles, bounding box, and spacing.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceInformationOutputs`).
 */
function surface_information_execute(
    params: SurfaceInformationParameters,
    runner: Runner | null = null,
): SurfaceInformationOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_INFORMATION_METADATA);
    params = execution.params(params)
    const cargs = surface_information_cargs(params, execution)
    const ret = surface_information_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Display information about a surface.
 *
 * Information about surface is displayed including vertices, 
 * triangles, bounding box, and spacing.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface_file Surface for which information is displayed
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceInformationOutputs`).
 */
function surface_information(
    surface_file: InputPathType,
    runner: Runner | null = null,
): SurfaceInformationOutputs {
    const params = surface_information_params(surface_file)
    return surface_information_execute(params, runner);
}


export {
      SURFACE_INFORMATION_METADATA,
      SurfaceInformationOutputs,
      SurfaceInformationParameters,
      surface_information,
      surface_information_execute,
      surface_information_params,
};
