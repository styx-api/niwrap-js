// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NWARP_ADJUST_METADATA: Metadata = {
    id: "2b1c9bcb47b87bb26653dff4b575bf7dc8439ce3.boutiques",
    name: "3dNwarpAdjust",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNwarpAdjustParameters {
    "@type": "afni.3dNwarpAdjust";
    "input_warps": Array<InputPathType>;
    "source_datasets"?: Array<InputPathType> | null | undefined;
    "output_prefix"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dNwarpAdjust": v_3d_nwarp_adjust_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dNwarpAdjust": v_3d_nwarp_adjust_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_nwarp_adjust(...)`.
 *
 * @interface
 */
interface V3dNwarpAdjustOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output mean dataset BRIK file
     */
    output_brik: OutputPathType | null;
    /**
     * Output mean dataset HEAD file
     */
    output_head: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_warps List of input 3D warp datasets (at least 5).
 * @param source_datasets List of input 3D datasets to be warped by the adjusted warp datasets. There must be exactly as many of these datasets as there are input warps.
 * @param output_prefix Prefix for the output mean dataset (only needed if the '-source' option is also given).
 *
 * @returns Parameter dictionary
 */
function v_3d_nwarp_adjust_params(
    input_warps: Array<InputPathType>,
    source_datasets: Array<InputPathType> | null = null,
    output_prefix: string | null = null,
): V3dNwarpAdjustParameters {
    const params = {
        "@type": "afni.3dNwarpAdjust" as const,
        "input_warps": input_warps,
    };
    if (source_datasets !== null) {
        params["source_datasets"] = source_datasets;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_nwarp_adjust_cargs(
    params: V3dNwarpAdjustParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dNwarpAdjust");
    cargs.push(
        "-nwarp",
        ...(params["input_warps"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["source_datasets"] ?? null) !== null) {
        cargs.push(
            "-source",
            ...(params["source_datasets"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_nwarp_adjust_outputs(
    params: V3dNwarpAdjustParameters,
    execution: Execution,
): V3dNwarpAdjustOutputs {
    const ret: V3dNwarpAdjustOutputs = {
        root: execution.outputFile("."),
        output_brik: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "+tlrc.BRIK"].join('')) : null,
        output_head: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), "+tlrc.HEAD"].join('')) : null,
    };
    return ret;
}


/**
 * 3dNwarpAdjust
 *
 * Program to adjust 3D warp datasets by composing them with the inverse of their average, optionally warping input datasets and generating an output mean dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpAdjustOutputs`).
 */
function v_3d_nwarp_adjust_execute(
    params: V3dNwarpAdjustParameters,
    runner: Runner | null = null,
): V3dNwarpAdjustOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NWARP_ADJUST_METADATA);
    params = execution.params(params)
    const cargs = v_3d_nwarp_adjust_cargs(params, execution)
    const ret = v_3d_nwarp_adjust_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dNwarpAdjust
 *
 * Program to adjust 3D warp datasets by composing them with the inverse of their average, optionally warping input datasets and generating an output mean dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_warps List of input 3D warp datasets (at least 5).
 * @param source_datasets List of input 3D datasets to be warped by the adjusted warp datasets. There must be exactly as many of these datasets as there are input warps.
 * @param output_prefix Prefix for the output mean dataset (only needed if the '-source' option is also given).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpAdjustOutputs`).
 */
function v_3d_nwarp_adjust(
    input_warps: Array<InputPathType>,
    source_datasets: Array<InputPathType> | null = null,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): V3dNwarpAdjustOutputs {
    const params = v_3d_nwarp_adjust_params(input_warps, source_datasets, output_prefix)
    return v_3d_nwarp_adjust_execute(params, runner);
}


export {
      V3dNwarpAdjustOutputs,
      V3dNwarpAdjustParameters,
      V_3D_NWARP_ADJUST_METADATA,
      v_3d_nwarp_adjust,
      v_3d_nwarp_adjust_execute,
      v_3d_nwarp_adjust_params,
};
