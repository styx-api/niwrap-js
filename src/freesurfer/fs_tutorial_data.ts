// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FS_TUTORIAL_DATA_METADATA: Metadata = {
    id: "57fbe6fd6f6adb6dc73c2b2a53ea70fb27a95b17.boutiques",
    name: "fs_tutorial_data",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FsTutorialDataParameters {
    "@type"?: "freesurfer/fs_tutorial_data";
    "rsync_options"?: Array<string> | null | undefined;
}
type FsTutorialDataParametersTagged = Required<Pick<FsTutorialDataParameters, '@type'>> & FsTutorialDataParameters;


/**
 * Output object returned when calling `FsTutorialDataParameters(...)`.
 *
 * @interface
 */
interface FsTutorialDataOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Directory where tutorial data will be downloaded and installed.
     */
    tutorial_data_dir: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param rsync_options Additional rsync options for downloading tutorial data.
 *
 * @returns Parameter dictionary
 */
function fs_tutorial_data_params(
    rsync_options: Array<string> | null = null,
): FsTutorialDataParametersTagged {
    const params = {
        "@type": "freesurfer/fs_tutorial_data" as const,
    };
    if (rsync_options !== null) {
        params["rsync_options"] = rsync_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fs_tutorial_data_cargs(
    params: FsTutorialDataParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fs_tutorial_data");
    if ((params["rsync_options"] ?? null) !== null) {
        cargs.push(...(params["rsync_options"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fs_tutorial_data_outputs(
    params: FsTutorialDataParameters,
    execution: Execution,
): FsTutorialDataOutputs {
    const ret: FsTutorialDataOutputs = {
        root: execution.outputFile("."),
        tutorial_data_dir: execution.outputFile(["/usr/local/freesurfer/subjects/tutorial_data"].join('')),
    };
    return ret;
}


/**
 * fs_tutorial_data
 *
 * Tool to download and install FreeSurfer tutorial data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsTutorialDataOutputs`).
 */
function fs_tutorial_data_execute(
    params: FsTutorialDataParameters,
    runner: Runner | null = null,
): FsTutorialDataOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FS_TUTORIAL_DATA_METADATA);
    params = execution.params(params)
    const cargs = fs_tutorial_data_cargs(params, execution)
    const ret = fs_tutorial_data_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fs_tutorial_data
 *
 * Tool to download and install FreeSurfer tutorial data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param rsync_options Additional rsync options for downloading tutorial data.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FsTutorialDataOutputs`).
 */
function fs_tutorial_data(
    rsync_options: Array<string> | null = null,
    runner: Runner | null = null,
): FsTutorialDataOutputs {
    const params = fs_tutorial_data_params(rsync_options)
    return fs_tutorial_data_execute(params, runner);
}


export {
      FS_TUTORIAL_DATA_METADATA,
      FsTutorialDataOutputs,
      fs_tutorial_data,
      fs_tutorial_data_execute,
      fs_tutorial_data_params,
};
