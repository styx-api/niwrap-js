// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__DIFF_FILES_METADATA: Metadata = {
    id: "b2c90d856d96607ae349b21ec8912aa4efbe8df2.boutiques",
    name: "@diff.files",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VDiffFilesParameters {
    "@type": "afni.@diff.files";
    "files": Array<string>;
    "old_dir": string;
    "diff_opts"?: string | null | undefined;
    "diff_prog"?: string | null | undefined;
    "ignore_missing": boolean;
    "longlist": boolean;
    "save": boolean;
    "show": boolean;
    "xxdiff": boolean;
    "X_flag": boolean;
    "verbosity"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@diff.files": v__diff_files_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__diff_files(...)`.
 *
 * @interface
 */
interface VDiffFilesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param files List of files to compare
 * @param old_dir Directory containing the files to compare against
 * @param diff_opts Add options to diff command (e.g., -w)
 * @param diff_prog Display diffs using a specified program (e.g., meld, xxdiff)
 * @param ignore_missing Continue even if files are missing
 * @param longlist Run 'ls -l' on both directories instead of listing files
 * @param save Create PDFs of diffs
 * @param show Show diffs using 'diff'
 * @param xxdiff Show diffs using 'xxdiff'
 * @param x_flag Implies -xxdiff and -ignore_missing
 * @param verbosity Set verbosity level (2 or 3)
 *
 * @returns Parameter dictionary
 */
function v__diff_files_params(
    files: Array<string>,
    old_dir: string,
    diff_opts: string | null = null,
    diff_prog: string | null = null,
    ignore_missing: boolean = false,
    longlist: boolean = false,
    save: boolean = false,
    show: boolean = false,
    xxdiff: boolean = false,
    x_flag: boolean = false,
    verbosity: number | null = null,
): VDiffFilesParameters {
    const params = {
        "@type": "afni.@diff.files" as const,
        "files": files,
        "old_dir": old_dir,
        "ignore_missing": ignore_missing,
        "longlist": longlist,
        "save": save,
        "show": show,
        "xxdiff": xxdiff,
        "X_flag": x_flag,
    };
    if (diff_opts !== null) {
        params["diff_opts"] = diff_opts;
    }
    if (diff_prog !== null) {
        params["diff_prog"] = diff_prog;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__diff_files_cargs(
    params: VDiffFilesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@diff.files");
    cargs.push(...(params["files"] ?? null));
    cargs.push((params["old_dir"] ?? null));
    if ((params["diff_opts"] ?? null) !== null) {
        cargs.push(
            "-diff_opts",
            (params["diff_opts"] ?? null)
        );
    }
    if ((params["diff_prog"] ?? null) !== null) {
        cargs.push(
            "-diff_prog",
            (params["diff_prog"] ?? null)
        );
    }
    if ((params["ignore_missing"] ?? null)) {
        cargs.push("-ignore_missing");
    }
    if ((params["longlist"] ?? null)) {
        cargs.push("-longlist");
    }
    if ((params["save"] ?? null)) {
        cargs.push("-save");
    }
    if ((params["show"] ?? null)) {
        cargs.push("-show");
    }
    if ((params["xxdiff"] ?? null)) {
        cargs.push("-xxdiff");
    }
    if ((params["X_flag"] ?? null)) {
        cargs.push("-X");
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__diff_files_outputs(
    params: VDiffFilesParameters,
    execution: Execution,
): VDiffFilesOutputs {
    const ret: VDiffFilesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * @diff.files
 *
 * Show file differences (between specified files and those in another directory).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VDiffFilesOutputs`).
 */
function v__diff_files_execute(
    params: VDiffFilesParameters,
    runner: Runner | null = null,
): VDiffFilesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__DIFF_FILES_METADATA);
    params = execution.params(params)
    const cargs = v__diff_files_cargs(params, execution)
    const ret = v__diff_files_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @diff.files
 *
 * Show file differences (between specified files and those in another directory).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param files List of files to compare
 * @param old_dir Directory containing the files to compare against
 * @param diff_opts Add options to diff command (e.g., -w)
 * @param diff_prog Display diffs using a specified program (e.g., meld, xxdiff)
 * @param ignore_missing Continue even if files are missing
 * @param longlist Run 'ls -l' on both directories instead of listing files
 * @param save Create PDFs of diffs
 * @param show Show diffs using 'diff'
 * @param xxdiff Show diffs using 'xxdiff'
 * @param x_flag Implies -xxdiff and -ignore_missing
 * @param verbosity Set verbosity level (2 or 3)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VDiffFilesOutputs`).
 */
function v__diff_files(
    files: Array<string>,
    old_dir: string,
    diff_opts: string | null = null,
    diff_prog: string | null = null,
    ignore_missing: boolean = false,
    longlist: boolean = false,
    save: boolean = false,
    show: boolean = false,
    xxdiff: boolean = false,
    x_flag: boolean = false,
    verbosity: number | null = null,
    runner: Runner | null = null,
): VDiffFilesOutputs {
    const params = v__diff_files_params(files, old_dir, diff_opts, diff_prog, ignore_missing, longlist, save, show, xxdiff, x_flag, verbosity)
    return v__diff_files_execute(params, runner);
}


export {
      VDiffFilesOutputs,
      VDiffFilesParameters,
      V__DIFF_FILES_METADATA,
      v__diff_files,
      v__diff_files_execute,
      v__diff_files_params,
};
