// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MORPH_SUBJECT_RH_METADATA: Metadata = {
    id: "3bc20c9a814d4ed47946818ef81d8f65039baeee.boutiques",
    name: "morph_subject-rh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MorphSubjectRhParameters {
    "@type": "freesurfer.morph_subject-rh";
    "subject_id": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.morph_subject-rh": morph_subject_rh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `morph_subject_rh(...)`.
 *
 * @interface
 */
interface MorphSubjectRhOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_id Subject ID to morph the right hemisphere.
 *
 * @returns Parameter dictionary
 */
function morph_subject_rh_params(
    subject_id: string,
): MorphSubjectRhParameters {
    const params = {
        "@type": "freesurfer.morph_subject-rh" as const,
        "subject_id": subject_id,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function morph_subject_rh_cargs(
    params: MorphSubjectRhParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("morph_subject-rh");
    cargs.push(
        "-rh",
        (params["subject_id"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function morph_subject_rh_outputs(
    params: MorphSubjectRhParameters,
    execution: Execution,
): MorphSubjectRhOutputs {
    const ret: MorphSubjectRhOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool for morphing the right hemisphere of subject data in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MorphSubjectRhOutputs`).
 */
function morph_subject_rh_execute(
    params: MorphSubjectRhParameters,
    runner: Runner | null = null,
): MorphSubjectRhOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MORPH_SUBJECT_RH_METADATA);
    params = execution.params(params)
    const cargs = morph_subject_rh_cargs(params, execution)
    const ret = morph_subject_rh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for morphing the right hemisphere of subject data in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_id Subject ID to morph the right hemisphere.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MorphSubjectRhOutputs`).
 */
function morph_subject_rh(
    subject_id: string,
    runner: Runner | null = null,
): MorphSubjectRhOutputs {
    const params = morph_subject_rh_params(subject_id)
    return morph_subject_rh_execute(params, runner);
}


export {
      MORPH_SUBJECT_RH_METADATA,
      MorphSubjectRhOutputs,
      MorphSubjectRhParameters,
      morph_subject_rh,
      morph_subject_rh_execute,
      morph_subject_rh_params,
};
