// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLHD_METADATA: Metadata = {
    id: "7c360bb6887784e9e2b03bccd5fc8c9079ad2ca5.boutiques",
    name: "fslhd",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslhdParameters {
    "@type": "fsl.fslhd";
    "xml_flag": boolean;
    "input_file": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslhd": fslhd_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslhd(...)`.
 *
 * @interface
 */
interface FslhdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input NIFTI file
 * @param xml_flag Print an XML-style NIFTI header
 *
 * @returns Parameter dictionary
 */
function fslhd_params(
    input_file: InputPathType,
    xml_flag: boolean = false,
): FslhdParameters {
    const params = {
        "@type": "fsl.fslhd" as const,
        "xml_flag": xml_flag,
        "input_file": input_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslhd_cargs(
    params: FslhdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslhd");
    if ((params["xml_flag"] ?? null)) {
        cargs.push("-x");
    }
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslhd_outputs(
    params: FslhdParameters,
    execution: Execution,
): FslhdOutputs {
    const ret: FslhdOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Display header information from a NIFTI file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FslhdOutputs`).
 */
function fslhd_execute(
    params: FslhdParameters,
    execution: Execution,
): FslhdOutputs {
    params = execution.params(params)
    const cargs = fslhd_cargs(params, execution)
    const ret = fslhd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Display header information from a NIFTI file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input NIFTI file
 * @param xml_flag Print an XML-style NIFTI header
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslhdOutputs`).
 */
function fslhd(
    input_file: InputPathType,
    xml_flag: boolean = false,
    runner: Runner | null = null,
): FslhdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLHD_METADATA);
    const params = fslhd_params(input_file, xml_flag)
    return fslhd_execute(params, execution);
}


export {
      FSLHD_METADATA,
      FslhdOutputs,
      FslhdParameters,
      fslhd,
      fslhd_cargs,
      fslhd_execute,
      fslhd_outputs,
      fslhd_params,
};
