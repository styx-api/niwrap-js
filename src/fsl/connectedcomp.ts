// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONNECTEDCOMP_METADATA: Metadata = {
    id: "a8f03227989b3a113c5a33bfd20241d307f6493e.boutiques",
    name: "connectedcomp",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ConnectedcompParameters {
    "@type": "fsl.connectedcomp";
    "in_volume": InputPathType;
    "output_volume"?: string | null | undefined;
    "num_connect"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.connectedcomp": connectedcomp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.connectedcomp": connectedcomp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `connectedcomp(...)`.
 *
 * @interface
 */
interface ConnectedcompOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output image volume
     */
    outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_volume Input image volume
 * @param output_volume Output image volume
 * @param num_connect Number of connected components
 *
 * @returns Parameter dictionary
 */
function connectedcomp_params(
    in_volume: InputPathType,
    output_volume: string | null = null,
    num_connect: number | null = null,
): ConnectedcompParameters {
    const params = {
        "@type": "fsl.connectedcomp" as const,
        "in_volume": in_volume,
    };
    if (output_volume !== null) {
        params["output_volume"] = output_volume;
    }
    if (num_connect !== null) {
        params["num_connect"] = num_connect;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function connectedcomp_cargs(
    params: ConnectedcompParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("connectedcomp");
    cargs.push(execution.inputFile((params["in_volume"] ?? null)));
    if ((params["output_volume"] ?? null) !== null) {
        cargs.push((params["output_volume"] ?? null));
    }
    if ((params["num_connect"] ?? null) !== null) {
        cargs.push(String((params["num_connect"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function connectedcomp_outputs(
    params: ConnectedcompParameters,
    execution: Execution,
): ConnectedcompOutputs {
    const ret: ConnectedcompOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["output_volume"] ?? null) !== null) ? execution.outputFile([(params["output_volume"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Connected component analysis tool.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConnectedcompOutputs`).
 */
function connectedcomp_execute(
    params: ConnectedcompParameters,
    runner: Runner | null = null,
): ConnectedcompOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONNECTEDCOMP_METADATA);
    params = execution.params(params)
    const cargs = connectedcomp_cargs(params, execution)
    const ret = connectedcomp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Connected component analysis tool.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param in_volume Input image volume
 * @param output_volume Output image volume
 * @param num_connect Number of connected components
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConnectedcompOutputs`).
 */
function connectedcomp(
    in_volume: InputPathType,
    output_volume: string | null = null,
    num_connect: number | null = null,
    runner: Runner | null = null,
): ConnectedcompOutputs {
    const params = connectedcomp_params(in_volume, output_volume, num_connect)
    return connectedcomp_execute(params, runner);
}


export {
      CONNECTEDCOMP_METADATA,
      ConnectedcompOutputs,
      ConnectedcompParameters,
      connectedcomp,
      connectedcomp_execute,
      connectedcomp_params,
};
