// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const INFLATE_SUBJECT3_METADATA: Metadata = {
    id: "2a3467cdf0c5364fc88afa8035d3e46ffcdacfe8.boutiques",
    name: "inflate_subject3",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface InflateSubject3Parameters {
    "@type"?: "freesurfer/inflate_subject3";
    "subjects_dir": string;
    "script_name": string;
}
type InflateSubject3ParametersTagged = Required<Pick<InflateSubject3Parameters, '@type'>> & InflateSubject3Parameters;


/**
 * Output object returned when calling `InflateSubject3Parameters(...)`.
 *
 * @interface
 */
interface InflateSubject3Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjects_dir The directory where FreeSurfer subjects are stored.
 * @param script_name The name of the script to be executed.
 *
 * @returns Parameter dictionary
 */
function inflate_subject3_params(
    subjects_dir: string,
    script_name: string,
): InflateSubject3ParametersTagged {
    const params = {
        "@type": "freesurfer/inflate_subject3" as const,
        "subjects_dir": subjects_dir,
        "script_name": script_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function inflate_subject3_cargs(
    params: InflateSubject3Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("inflate_subject3");
    cargs.push((params["subjects_dir"] ?? null));
    cargs.push((params["script_name"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function inflate_subject3_outputs(
    params: InflateSubject3Parameters,
    execution: Execution,
): InflateSubject3Outputs {
    const ret: InflateSubject3Outputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * inflate_subject3
 *
 * A tool related to subject inflation in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `InflateSubject3Outputs`).
 */
function inflate_subject3_execute(
    params: InflateSubject3Parameters,
    runner: Runner | null = null,
): InflateSubject3Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(INFLATE_SUBJECT3_METADATA);
    params = execution.params(params)
    const cargs = inflate_subject3_cargs(params, execution)
    const ret = inflate_subject3_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * inflate_subject3
 *
 * A tool related to subject inflation in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects_dir The directory where FreeSurfer subjects are stored.
 * @param script_name The name of the script to be executed.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `InflateSubject3Outputs`).
 */
function inflate_subject3(
    subjects_dir: string,
    script_name: string,
    runner: Runner | null = null,
): InflateSubject3Outputs {
    const params = inflate_subject3_params(subjects_dir, script_name)
    return inflate_subject3_execute(params, runner);
}


export {
      INFLATE_SUBJECT3_METADATA,
      InflateSubject3Outputs,
      inflate_subject3,
      inflate_subject3_execute,
      inflate_subject3_params,
};
