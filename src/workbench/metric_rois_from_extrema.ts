// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_ROIS_FROM_EXTREMA_METADATA: Metadata = {
    id: "8077c16d8f1d062ca939cbb2744aaee3511e4ec7.boutiques",
    name: "metric-rois-from-extrema",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricRoisFromExtremaParameters {
    "__STYXTYPE__": "metric-rois-from-extrema";
    "surface": InputPathType;
    "metric": InputPathType;
    "limit": number;
    "metric_out": string;
    "opt_gaussian_sigma"?: number | null | undefined;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_overlap_logic_method"?: string | null | undefined;
    "opt_column_column"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "metric-rois-from-extrema": metric_rois_from_extrema_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "metric-rois-from-extrema": metric_rois_from_extrema_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metric_rois_from_extrema(...)`.
 *
 * @interface
 */
interface MetricRoisFromExtremaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric file
     */
    metric_out: OutputPathType;
}


function metric_rois_from_extrema_params(
    surface: InputPathType,
    metric: InputPathType,
    limit: number,
    metric_out: string,
    opt_gaussian_sigma: number | null = null,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_column_column: string | null = null,
): MetricRoisFromExtremaParameters {
    /**
     * Build parameters.
    
     * @param surface the surface to use for geodesic distance
     * @param metric the input metric file
     * @param limit geodesic distance limit from vertex, in mm
     * @param metric_out the output metric file
     * @param opt_gaussian_sigma generate a gaussian kernel instead of a flat ROI: the sigma for the gaussian kernel, in mm
     * @param opt_roi_roi_metric select a region of interest to use: the area to use, as a metric
     * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
     * @param opt_column_column select a single input column to use: the column number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric-rois-from-extrema" as const,
        "surface": surface,
        "metric": metric,
        "limit": limit,
        "metric_out": metric_out,
    };
    if (opt_gaussian_sigma !== null) {
        params["opt_gaussian_sigma"] = opt_gaussian_sigma;
    }
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    if (opt_overlap_logic_method !== null) {
        params["opt_overlap_logic_method"] = opt_overlap_logic_method;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    return params;
}


function metric_rois_from_extrema_cargs(
    params: MetricRoisFromExtremaParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-rois-from-extrema");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    cargs.push(String((params["limit"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_gaussian_sigma"] ?? null) !== null) {
        cargs.push(
            "-gaussian",
            String((params["opt_gaussian_sigma"] ?? null))
        );
    }
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_overlap_logic_method"] ?? null) !== null) {
        cargs.push(
            "-overlap-logic",
            (params["opt_overlap_logic_method"] ?? null)
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    return cargs;
}


function metric_rois_from_extrema_outputs(
    params: MetricRoisFromExtremaParameters,
    execution: Execution,
): MetricRoisFromExtremaOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MetricRoisFromExtremaOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


function metric_rois_from_extrema_execute(
    params: MetricRoisFromExtremaParameters,
    execution: Execution,
): MetricRoisFromExtremaOutputs {
    /**
     * Create metric roi maps from extrema maps.
     * 
     * For each nonzero value in each map, make a map with an ROI around that location.  If the -gaussian option is specified, then normalized gaussian kernels are output instead of ROIs.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MetricRoisFromExtremaOutputs`).
     */
    params = execution.params(params)
    const cargs = metric_rois_from_extrema_cargs(params, execution)
    const ret = metric_rois_from_extrema_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function metric_rois_from_extrema(
    surface: InputPathType,
    metric: InputPathType,
    limit: number,
    metric_out: string,
    opt_gaussian_sigma: number | null = null,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_overlap_logic_method: string | null = null,
    opt_column_column: string | null = null,
    runner: Runner | null = null,
): MetricRoisFromExtremaOutputs {
    /**
     * Create metric roi maps from extrema maps.
     * 
     * For each nonzero value in each map, make a map with an ROI around that location.  If the -gaussian option is specified, then normalized gaussian kernels are output instead of ROIs.  The <method> argument to -overlap-logic must be one of ALLOW, CLOSEST, or EXCLUDE.  ALLOW is the default, and means that ROIs are treated independently and may overlap.  CLOSEST means that ROIs may not overlap, and that no ROI contains vertices that are closer to a different seed vertex.  EXCLUDE means that ROIs may not overlap, and that any vertex within range of more than one ROI does not belong to any ROI.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface the surface to use for geodesic distance
     * @param metric the input metric file
     * @param limit geodesic distance limit from vertex, in mm
     * @param metric_out the output metric file
     * @param opt_gaussian_sigma generate a gaussian kernel instead of a flat ROI: the sigma for the gaussian kernel, in mm
     * @param opt_roi_roi_metric select a region of interest to use: the area to use, as a metric
     * @param opt_overlap_logic_method how to handle overlapping ROIs, default ALLOW: the method of resolving overlaps
     * @param opt_column_column select a single input column to use: the column number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MetricRoisFromExtremaOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_ROIS_FROM_EXTREMA_METADATA);
    const params = metric_rois_from_extrema_params(surface, metric, limit, metric_out, opt_gaussian_sigma, opt_roi_roi_metric, opt_overlap_logic_method, opt_column_column)
    return metric_rois_from_extrema_execute(params, execution);
}


export {
      METRIC_ROIS_FROM_EXTREMA_METADATA,
      MetricRoisFromExtremaOutputs,
      MetricRoisFromExtremaParameters,
      metric_rois_from_extrema,
      metric_rois_from_extrema_params,
};
