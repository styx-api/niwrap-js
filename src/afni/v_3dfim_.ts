// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DFIM__METADATA: Metadata = {
    id: "fc1b029ae0a8def8888aac6bc72283bb5b04bcf9.boutiques",
    name: "3dfim+",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dfimParameters {
    "@type": "afni.3dfim+";
    "infile": InputPathType;
    "input1dfile"?: InputPathType | null | undefined;
    "maskfile"?: InputPathType | null | undefined;
    "first_image"?: number | null | undefined;
    "last_image"?: number | null | undefined;
    "baseline_polynomial"?: number | null | undefined;
    "threshold"?: number | null | undefined;
    "cdisp_value"?: number | null | undefined;
    "ort_file"?: InputPathType | null | undefined;
    "ideal_file": InputPathType;
    "output_params"?: Array<string> | null | undefined;
    "output_bucket"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dfim+": v_3dfim__cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dfim+": v_3dfim__outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dfim_(...)`.
 *
 * @interface
 */
interface V3dfimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output bucket dataset containing fit parameters, in TLRC space.
     */
    outfile_tlrc_head: OutputPathType | null;
    /**
     * Output bucket dataset containing fit parameters, in TLRC space.
     */
    outfile_tlrc_brk: OutputPathType | null;
    /**
     * Output bucket dataset containing fit parameters, in original space.
     */
    outfile_orig_head: OutputPathType | null;
    /**
     * Output bucket dataset containing fit parameters, in original space.
     */
    outfile_orig_brk: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infile Filename of input 3d+time dataset
 * @param ideal_file Input ideal time series file name. Can be used multiple times.
 * @param input1dfile Filename of single (fMRI) .1D time series
 * @param maskfile Filename of 3d mask dataset
 * @param first_image Number of first dataset image to use in the cross-correlation procedure (default = 0)
 * @param last_image Number of last dataset image to use in the cross-correlation procedure (default = last)
 * @param baseline_polynomial Degree of polynomial corresponding to the baseline model (default: 1). Use -1 for no baseline model.
 * @param threshold FIM internal mask threshold value (0 <= p <= 1) to get rid of low intensity voxels (default: 0.0999)
 * @param cdisp_value Write (to screen) results for voxels whose correlation stat. > cval (0 <= cval <= 1; default: disabled)
 * @param ort_file Input ort time series file name. Can be used multiple times.
 * @param output_params Output the specified parameter. Can be used multiple times. Possible values are: 'Fit Coef', 'Best Index', '% Change', 'Baseline', 'Correlation', '% From Ave', 'Average', '% From Top', 'Topline', 'Sigma Resid', 'All', 'Spearman CC', 'Quadrant CC'.
 * @param output_bucket Create one AFNI 'bucket' dataset containing the parameters of interest, as specified by the '-out' commands. The output 'bucket' dataset is written to a file with the prefix name bprefix.
 *
 * @returns Parameter dictionary
 */
function v_3dfim__params(
    infile: InputPathType,
    ideal_file: InputPathType,
    input1dfile: InputPathType | null = null,
    maskfile: InputPathType | null = null,
    first_image: number | null = null,
    last_image: number | null = null,
    baseline_polynomial: number | null = null,
    threshold: number | null = null,
    cdisp_value: number | null = null,
    ort_file: InputPathType | null = null,
    output_params: Array<string> | null = null,
    output_bucket: string | null = null,
): V3dfimParameters {
    const params = {
        "@type": "afni.3dfim+" as const,
        "infile": infile,
        "ideal_file": ideal_file,
    };
    if (input1dfile !== null) {
        params["input1dfile"] = input1dfile;
    }
    if (maskfile !== null) {
        params["maskfile"] = maskfile;
    }
    if (first_image !== null) {
        params["first_image"] = first_image;
    }
    if (last_image !== null) {
        params["last_image"] = last_image;
    }
    if (baseline_polynomial !== null) {
        params["baseline_polynomial"] = baseline_polynomial;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (cdisp_value !== null) {
        params["cdisp_value"] = cdisp_value;
    }
    if (ort_file !== null) {
        params["ort_file"] = ort_file;
    }
    if (output_params !== null) {
        params["output_params"] = output_params;
    }
    if (output_bucket !== null) {
        params["output_bucket"] = output_bucket;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dfim__cargs(
    params: V3dfimParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dfim+");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    if ((params["input1dfile"] ?? null) !== null) {
        cargs.push(
            "-input1D",
            execution.inputFile((params["input1dfile"] ?? null))
        );
    }
    if ((params["maskfile"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["maskfile"] ?? null))
        );
    }
    if ((params["first_image"] ?? null) !== null) {
        cargs.push(
            "-nfirst",
            String((params["first_image"] ?? null))
        );
    }
    if ((params["last_image"] ?? null) !== null) {
        cargs.push(
            "-nlast",
            String((params["last_image"] ?? null))
        );
    }
    if ((params["baseline_polynomial"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["baseline_polynomial"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-fim_thr",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["cdisp_value"] ?? null) !== null) {
        cargs.push(
            "-cdisp",
            String((params["cdisp_value"] ?? null))
        );
    }
    if ((params["ort_file"] ?? null) !== null) {
        cargs.push(
            "-ort_file",
            execution.inputFile((params["ort_file"] ?? null))
        );
    }
    cargs.push(
        "-ideal_file",
        execution.inputFile((params["ideal_file"] ?? null))
    );
    if ((params["output_params"] ?? null) !== null) {
        cargs.push(
            "-out",
            ...(params["output_params"] ?? null)
        );
    }
    if ((params["output_bucket"] ?? null) !== null) {
        cargs.push(
            "-bucket",
            (params["output_bucket"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dfim__outputs(
    params: V3dfimParameters,
    execution: Execution,
): V3dfimOutputs {
    const ret: V3dfimOutputs = {
        root: execution.outputFile("."),
        outfile_tlrc_head: ((params["output_bucket"] ?? null) !== null) ? execution.outputFile([(params["output_bucket"] ?? null), "+tlrc.HEAD"].join('')) : null,
        outfile_tlrc_brk: ((params["output_bucket"] ?? null) !== null) ? execution.outputFile([(params["output_bucket"] ?? null), "+tlrc.BRIK"].join('')) : null,
        outfile_orig_head: ((params["output_bucket"] ?? null) !== null) ? execution.outputFile([(params["output_bucket"] ?? null), "+orig.HEAD"].join('')) : null,
        outfile_orig_brk: ((params["output_bucket"] ?? null) !== null) ? execution.outputFile([(params["output_bucket"] ?? null), "+orig.BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * Program to calculate the cross-correlation of an ideal reference waveform with the measured FMRI time series for each voxel.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dfimOutputs`).
 */
function v_3dfim__execute(
    params: V3dfimParameters,
    execution: Execution,
): V3dfimOutputs {
    params = execution.params(params)
    const cargs = v_3dfim__cargs(params, execution)
    const ret = v_3dfim__outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Program to calculate the cross-correlation of an ideal reference waveform with the measured FMRI time series for each voxel.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Filename of input 3d+time dataset
 * @param ideal_file Input ideal time series file name. Can be used multiple times.
 * @param input1dfile Filename of single (fMRI) .1D time series
 * @param maskfile Filename of 3d mask dataset
 * @param first_image Number of first dataset image to use in the cross-correlation procedure (default = 0)
 * @param last_image Number of last dataset image to use in the cross-correlation procedure (default = last)
 * @param baseline_polynomial Degree of polynomial corresponding to the baseline model (default: 1). Use -1 for no baseline model.
 * @param threshold FIM internal mask threshold value (0 <= p <= 1) to get rid of low intensity voxels (default: 0.0999)
 * @param cdisp_value Write (to screen) results for voxels whose correlation stat. > cval (0 <= cval <= 1; default: disabled)
 * @param ort_file Input ort time series file name. Can be used multiple times.
 * @param output_params Output the specified parameter. Can be used multiple times. Possible values are: 'Fit Coef', 'Best Index', '% Change', 'Baseline', 'Correlation', '% From Ave', 'Average', '% From Top', 'Topline', 'Sigma Resid', 'All', 'Spearman CC', 'Quadrant CC'.
 * @param output_bucket Create one AFNI 'bucket' dataset containing the parameters of interest, as specified by the '-out' commands. The output 'bucket' dataset is written to a file with the prefix name bprefix.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dfimOutputs`).
 */
function v_3dfim_(
    infile: InputPathType,
    ideal_file: InputPathType,
    input1dfile: InputPathType | null = null,
    maskfile: InputPathType | null = null,
    first_image: number | null = null,
    last_image: number | null = null,
    baseline_polynomial: number | null = null,
    threshold: number | null = null,
    cdisp_value: number | null = null,
    ort_file: InputPathType | null = null,
    output_params: Array<string> | null = null,
    output_bucket: string | null = null,
    runner: Runner | null = null,
): V3dfimOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DFIM__METADATA);
    const params = v_3dfim__params(infile, ideal_file, input1dfile, maskfile, first_image, last_image, baseline_polynomial, threshold, cdisp_value, ort_file, output_params, output_bucket)
    return v_3dfim__execute(params, execution);
}


export {
      V3dfimOutputs,
      V3dfimParameters,
      V_3DFIM__METADATA,
      v_3dfim_,
      v_3dfim__cargs,
      v_3dfim__execute,
      v_3dfim__outputs,
      v_3dfim__params,
};
