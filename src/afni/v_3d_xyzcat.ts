// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_XYZCAT_METADATA: Metadata = {
    id: "6187e73a39e2b8fe582b14ee9e2a4f3ca6740b27.boutiques",
    name: "3dXYZcat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dXyzcatParameters {
    "__STYXTYPE__": "3dXYZcat";
    "direction"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "verbose": boolean;
    "datasets": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dXYZcat": v_3d_xyzcat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dXYZcat": v_3d_xyzcat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_xyzcat(...)`.
 *
 * @interface
 */
interface V3dXyzcatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output concatenated dataset.
     */
    output_brainfile: OutputPathType | null;
    /**
     * Output concatenated dataset header.
     */
    output_headerfile: OutputPathType | null;
}


function v_3d_xyzcat_params(
    datasets: Array<InputPathType>,
    direction: string | null = null,
    prefix: string | null = null,
    verbose: boolean = false,
): V3dXyzcatParameters {
    /**
     * Build parameters.
    
     * @param datasets Input datasets to concatenate.
     * @param direction Catenate along direction 'Q' (X, Y, Z, or their synonyms I, J, K).
     * @param prefix Use 'pname' for the output dataset prefix name.
     * @param verbose Print out some verbositiness as the program proceeds.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dXYZcat" as const,
        "verbose": verbose,
        "datasets": datasets,
    };
    if (direction !== null) {
        params["direction"] = direction;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


function v_3d_xyzcat_cargs(
    params: V3dXyzcatParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dXYZcat");
    if ((params["direction"] ?? null) !== null) {
        cargs.push(
            "-dir",
            (params["direction"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function v_3d_xyzcat_outputs(
    params: V3dXyzcatParameters,
    execution: Execution,
): V3dXyzcatOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dXyzcatOutputs = {
        root: execution.outputFile("."),
        output_brainfile: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
        output_headerfile: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
    };
    return ret;
}


function v_3d_xyzcat_execute(
    params: V3dXyzcatParameters,
    execution: Execution,
): V3dXyzcatOutputs {
    /**
     * Catenates datasets spatially.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dXyzcatOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_xyzcat_cargs(params, execution)
    const ret = v_3d_xyzcat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_xyzcat(
    datasets: Array<InputPathType>,
    direction: string | null = null,
    prefix: string | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): V3dXyzcatOutputs {
    /**
     * Catenates datasets spatially.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param datasets Input datasets to concatenate.
     * @param direction Catenate along direction 'Q' (X, Y, Z, or their synonyms I, J, K).
     * @param prefix Use 'pname' for the output dataset prefix name.
     * @param verbose Print out some verbositiness as the program proceeds.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dXyzcatOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_XYZCAT_METADATA);
    const params = v_3d_xyzcat_params(datasets, direction, prefix, verbose)
    return v_3d_xyzcat_execute(params, execution);
}


export {
      V3dXyzcatOutputs,
      V3dXyzcatParameters,
      V_3D_XYZCAT_METADATA,
      v_3d_xyzcat,
      v_3d_xyzcat_params,
};
