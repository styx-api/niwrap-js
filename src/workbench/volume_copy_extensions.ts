// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_COPY_EXTENSIONS_METADATA: Metadata = {
    id: "1105ee211cb759964c59c0d9326f8fd29db4b9a2.boutiques",
    name: "volume-copy-extensions",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeCopyExtensionsParameters {
    "@type": "workbench.volume-copy-extensions";
    "data_volume": InputPathType;
    "extension_volume": InputPathType;
    "volume_out": string;
    "opt_drop_unknown": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-copy-extensions": volume_copy_extensions_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-copy-extensions": volume_copy_extensions_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_copy_extensions(...)`.
 *
 * @interface
 */
interface VolumeCopyExtensionsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param data_volume the volume file containing the voxel data to use
 * @param extension_volume the volume file containing the extensions to use
 * @param volume_out the output volume
 * @param opt_drop_unknown don't copy extensions that workbench doesn't understand
 *
 * @returns Parameter dictionary
 */
function volume_copy_extensions_params(
    data_volume: InputPathType,
    extension_volume: InputPathType,
    volume_out: string,
    opt_drop_unknown: boolean = false,
): VolumeCopyExtensionsParameters {
    const params = {
        "@type": "workbench.volume-copy-extensions" as const,
        "data_volume": data_volume,
        "extension_volume": extension_volume,
        "volume_out": volume_out,
        "opt_drop_unknown": opt_drop_unknown,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_copy_extensions_cargs(
    params: VolumeCopyExtensionsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-copy-extensions");
    cargs.push(execution.inputFile((params["data_volume"] ?? null)));
    cargs.push(execution.inputFile((params["extension_volume"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_drop_unknown"] ?? null)) {
        cargs.push("-drop-unknown");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_copy_extensions_outputs(
    params: VolumeCopyExtensionsParameters,
    execution: Execution,
): VolumeCopyExtensionsOutputs {
    const ret: VolumeCopyExtensionsOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * volume-copy-extensions
 *
 * Copy extended data to another volume file.
 *
 * This command copies the information in a volume file that isn't a critical part of the standard header or data matrix, e.g. map names, palette settings, label tables.  If -drop-unknown is not specified, it also copies similar kinds of information set by other software.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeCopyExtensionsOutputs`).
 */
function volume_copy_extensions_execute(
    params: VolumeCopyExtensionsParameters,
    runner: Runner | null = null,
): VolumeCopyExtensionsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_COPY_EXTENSIONS_METADATA);
    params = execution.params(params)
    const cargs = volume_copy_extensions_cargs(params, execution)
    const ret = volume_copy_extensions_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * volume-copy-extensions
 *
 * Copy extended data to another volume file.
 *
 * This command copies the information in a volume file that isn't a critical part of the standard header or data matrix, e.g. map names, palette settings, label tables.  If -drop-unknown is not specified, it also copies similar kinds of information set by other software.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param data_volume the volume file containing the voxel data to use
 * @param extension_volume the volume file containing the extensions to use
 * @param volume_out the output volume
 * @param opt_drop_unknown don't copy extensions that workbench doesn't understand
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeCopyExtensionsOutputs`).
 */
function volume_copy_extensions(
    data_volume: InputPathType,
    extension_volume: InputPathType,
    volume_out: string,
    opt_drop_unknown: boolean = false,
    runner: Runner | null = null,
): VolumeCopyExtensionsOutputs {
    const params = volume_copy_extensions_params(data_volume, extension_volume, volume_out, opt_drop_unknown)
    return volume_copy_extensions_execute(params, runner);
}


export {
      VOLUME_COPY_EXTENSIONS_METADATA,
      VolumeCopyExtensionsOutputs,
      VolumeCopyExtensionsParameters,
      volume_copy_extensions,
      volume_copy_extensions_execute,
      volume_copy_extensions_params,
};
