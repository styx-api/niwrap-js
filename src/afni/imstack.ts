// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMSTACK_METADATA: Metadata = {
    id: "d9dca2a7110a68c32c73fef2f7ffc0520892ff07.boutiques",
    name: "imstack",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ImstackParameters {
    "@type": "afni.imstack";
    "image_files": Array<InputPathType>;
    "data_type"?: "short" | "float" | null | undefined;
    "output_prefix"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.imstack": imstack_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.imstack": imstack_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `imstack(...)`.
 *
 * @interface
 */
interface ImstackOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output data file
     */
    output_data_file: OutputPathType | null;
    /**
     * Output header file
     */
    output_header_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param image_files Input image filenames
 * @param data_type Converts the output data file to be 'type', which is either 'short' or 'float'. The default type is the type of the first image.
 * @param output_prefix Names the output files to be 'name'.b'type' and 'name'.hdr. The default name is 'obi-wan-kenobi'.
 *
 * @returns Parameter dictionary
 */
function imstack_params(
    image_files: Array<InputPathType>,
    data_type: "short" | "float" | null = null,
    output_prefix: string | null = null,
): ImstackParameters {
    const params = {
        "@type": "afni.imstack" as const,
        "image_files": image_files,
    };
    if (data_type !== null) {
        params["data_type"] = data_type;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function imstack_cargs(
    params: ImstackParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("imstack");
    cargs.push(...(params["image_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["data_type"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["data_type"] ?? null)
        );
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function imstack_outputs(
    params: ImstackParameters,
    execution: Execution,
): ImstackOutputs {
    const ret: ImstackOutputs = {
        root: execution.outputFile("."),
        output_data_file: ((params["output_prefix"] ?? null) !== null && (params["data_type"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".b", (params["data_type"] ?? null)].join('')) : null,
        output_header_file: ((params["output_prefix"] ?? null) !== null) ? execution.outputFile([(params["output_prefix"] ?? null), ".hdr"].join('')) : null,
    };
    return ret;
}


/**
 * imstack
 *
 * Stacks up a set of 2D images into one big file (a la MGH).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImstackOutputs`).
 */
function imstack_execute(
    params: ImstackParameters,
    runner: Runner | null = null,
): ImstackOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMSTACK_METADATA);
    params = execution.params(params)
    const cargs = imstack_cargs(params, execution)
    const ret = imstack_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * imstack
 *
 * Stacks up a set of 2D images into one big file (a la MGH).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param image_files Input image filenames
 * @param data_type Converts the output data file to be 'type', which is either 'short' or 'float'. The default type is the type of the first image.
 * @param output_prefix Names the output files to be 'name'.b'type' and 'name'.hdr. The default name is 'obi-wan-kenobi'.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImstackOutputs`).
 */
function imstack(
    image_files: Array<InputPathType>,
    data_type: "short" | "float" | null = null,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): ImstackOutputs {
    const params = imstack_params(image_files, data_type, output_prefix)
    return imstack_execute(params, runner);
}


export {
      IMSTACK_METADATA,
      ImstackOutputs,
      ImstackParameters,
      imstack,
      imstack_execute,
      imstack_params,
};
