// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSL_FIX_TEXT_METADATA: Metadata = {
    id: "d41ef41fe6bd06ec30e9ab1993064eb3b05dd814.boutiques",
    name: "fslFixText",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslFixTextParameters {
    "@type": "fsl.fslFixText";
    "input_text_file": InputPathType;
    "output_text_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslFixText": fsl_fix_text_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslFixText": fsl_fix_text_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsl_fix_text(...)`.
 *
 * @interface
 */
interface FslFixTextOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file with standard UNIX line endings
     */
    output_text_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_text_file Input text file
 * @param output_text_file Output text file
 *
 * @returns Parameter dictionary
 */
function fsl_fix_text_params(
    input_text_file: InputPathType,
    output_text_file: string,
): FslFixTextParameters {
    const params = {
        "@type": "fsl.fslFixText" as const,
        "input_text_file": input_text_file,
        "output_text_file": output_text_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fsl_fix_text_cargs(
    params: FslFixTextParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslFixText");
    cargs.push(execution.inputFile((params["input_text_file"] ?? null)));
    cargs.push((params["output_text_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fsl_fix_text_outputs(
    params: FslFixTextParameters,
    execution: Execution,
): FslFixTextOutputs {
    const ret: FslFixTextOutputs = {
        root: execution.outputFile("."),
        output_text_file: execution.outputFile([(params["output_text_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Ensures standard UNIX line endings in the output text file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FslFixTextOutputs`).
 */
function fsl_fix_text_execute(
    params: FslFixTextParameters,
    execution: Execution,
): FslFixTextOutputs {
    params = execution.params(params)
    const cargs = fsl_fix_text_cargs(params, execution)
    const ret = fsl_fix_text_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Ensures standard UNIX line endings in the output text file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_text_file Input text file
 * @param output_text_file Output text file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslFixTextOutputs`).
 */
function fsl_fix_text(
    input_text_file: InputPathType,
    output_text_file: string,
    runner: Runner | null = null,
): FslFixTextOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSL_FIX_TEXT_METADATA);
    const params = fsl_fix_text_params(input_text_file, output_text_file)
    return fsl_fix_text_execute(params, execution);
}


export {
      FSL_FIX_TEXT_METADATA,
      FslFixTextOutputs,
      FslFixTextParameters,
      fsl_fix_text,
      fsl_fix_text_cargs,
      fsl_fix_text_execute,
      fsl_fix_text_outputs,
      fsl_fix_text_params,
};
