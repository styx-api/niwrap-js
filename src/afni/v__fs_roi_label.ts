// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__FS_ROI_LABEL_METADATA: Metadata = {
    id: "8a41a17a9222a2bf21cd7e6c811372972bf44b20.boutiques",
    name: "@FS_roi_label",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VFsRoiLabelParameters {
    "@type"?: "afni/@FS_roi_label";
    "label_int"?: number | null | undefined;
    "lab_flag"?: number | null | undefined;
    "rank_int"?: number | null | undefined;
    "rankmap_file"?: InputPathType | null | undefined;
    "name"?: string | null | undefined;
    "labeltable_file"?: InputPathType | null | undefined;
    "surf_annot_cmap"?: InputPathType | null | undefined;
    "slab_int"?: number | null | undefined;
    "sname_name"?: string | null | undefined;
}
type VFsRoiLabelParametersTagged = Required<Pick<VFsRoiLabelParameters, '@type'>> & VFsRoiLabelParameters;


/**
 * Output object returned when calling `VFsRoiLabelParameters(...)`.
 *
 * @interface
 */
interface VFsRoiLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param label_int Integer labeled area in FreeSurfer's parcellation.
 * @param lab_flag Return the name of an integer labeled area in FreeSurfer's parcellation.
 * @param rank_int Return the name of ranked integer labeled area from the output of 3dRank or 3dmerge -1rank.
 * @param rankmap_file Path to the rank map file.
 * @param name Return entries matching NAME (case insensitive, partial match) from FreeSurfer's FreeSurferColorLUT.txt.
 * @param labeltable_file Path to the label table file.
 * @param surf_annot_cmap CMAP file output by FSread_annot's -roi_1D option.
 * @param slab_int Return the name of an integer labeled area in FreeSurfer's surface-based annotation.
 * @param sname_name Return the entries matching NAME (case insensitive, partial match) from the CMAP file.
 *
 * @returns Parameter dictionary
 */
function v__fs_roi_label_params(
    label_int: number | null = null,
    lab_flag: number | null = null,
    rank_int: number | null = null,
    rankmap_file: InputPathType | null = null,
    name: string | null = null,
    labeltable_file: InputPathType | null = null,
    surf_annot_cmap: InputPathType | null = null,
    slab_int: number | null = null,
    sname_name: string | null = null,
): VFsRoiLabelParametersTagged {
    const params = {
        "@type": "afni/@FS_roi_label" as const,
    };
    if (label_int !== null) {
        params["label_int"] = label_int;
    }
    if (lab_flag !== null) {
        params["lab_flag"] = lab_flag;
    }
    if (rank_int !== null) {
        params["rank_int"] = rank_int;
    }
    if (rankmap_file !== null) {
        params["rankmap_file"] = rankmap_file;
    }
    if (name !== null) {
        params["name"] = name;
    }
    if (labeltable_file !== null) {
        params["labeltable_file"] = labeltable_file;
    }
    if (surf_annot_cmap !== null) {
        params["surf_annot_cmap"] = surf_annot_cmap;
    }
    if (slab_int !== null) {
        params["slab_int"] = slab_int;
    }
    if (sname_name !== null) {
        params["sname_name"] = sname_name;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__fs_roi_label_cargs(
    params: VFsRoiLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@FS_roi_label");
    if ((params["label_int"] ?? null) !== null) {
        cargs.push(String((params["label_int"] ?? null)));
    }
    if ((params["lab_flag"] ?? null) !== null) {
        cargs.push(
            "-lab",
            String((params["lab_flag"] ?? null))
        );
    }
    if ((params["rank_int"] ?? null) !== null) {
        cargs.push(
            "-rank",
            String((params["rank_int"] ?? null))
        );
    }
    if ((params["rankmap_file"] ?? null) !== null) {
        cargs.push(
            "-rankmap",
            execution.inputFile((params["rankmap_file"] ?? null))
        );
    }
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["name"] ?? null)
        );
    }
    if ((params["labeltable_file"] ?? null) !== null) {
        cargs.push(
            "-labeltable",
            execution.inputFile((params["labeltable_file"] ?? null))
        );
    }
    if ((params["surf_annot_cmap"] ?? null) !== null) {
        cargs.push(
            "-surf_annot_cmap",
            execution.inputFile((params["surf_annot_cmap"] ?? null))
        );
    }
    if ((params["slab_int"] ?? null) !== null) {
        cargs.push(
            "-slab",
            String((params["slab_int"] ?? null))
        );
    }
    if ((params["sname_name"] ?? null) !== null) {
        cargs.push(
            "-sname",
            (params["sname_name"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__fs_roi_label_outputs(
    params: VFsRoiLabelParameters,
    execution: Execution,
): VFsRoiLabelOutputs {
    const ret: VFsRoiLabelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * @FS_roi_label
 *
 * Tool to get labels associated with FreeSurfer's parcellation and annotation files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VFsRoiLabelOutputs`).
 */
function v__fs_roi_label_execute(
    params: VFsRoiLabelParameters,
    runner: Runner | null = null,
): VFsRoiLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__FS_ROI_LABEL_METADATA);
    params = execution.params(params)
    const cargs = v__fs_roi_label_cargs(params, execution)
    const ret = v__fs_roi_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @FS_roi_label
 *
 * Tool to get labels associated with FreeSurfer's parcellation and annotation files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param label_int Integer labeled area in FreeSurfer's parcellation.
 * @param lab_flag Return the name of an integer labeled area in FreeSurfer's parcellation.
 * @param rank_int Return the name of ranked integer labeled area from the output of 3dRank or 3dmerge -1rank.
 * @param rankmap_file Path to the rank map file.
 * @param name Return entries matching NAME (case insensitive, partial match) from FreeSurfer's FreeSurferColorLUT.txt.
 * @param labeltable_file Path to the label table file.
 * @param surf_annot_cmap CMAP file output by FSread_annot's -roi_1D option.
 * @param slab_int Return the name of an integer labeled area in FreeSurfer's surface-based annotation.
 * @param sname_name Return the entries matching NAME (case insensitive, partial match) from the CMAP file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VFsRoiLabelOutputs`).
 */
function v__fs_roi_label(
    label_int: number | null = null,
    lab_flag: number | null = null,
    rank_int: number | null = null,
    rankmap_file: InputPathType | null = null,
    name: string | null = null,
    labeltable_file: InputPathType | null = null,
    surf_annot_cmap: InputPathType | null = null,
    slab_int: number | null = null,
    sname_name: string | null = null,
    runner: Runner | null = null,
): VFsRoiLabelOutputs {
    const params = v__fs_roi_label_params(label_int, lab_flag, rank_int, rankmap_file, name, labeltable_file, surf_annot_cmap, slab_int, sname_name)
    return v__fs_roi_label_execute(params, runner);
}


export {
      VFsRoiLabelOutputs,
      V__FS_ROI_LABEL_METADATA,
      v__fs_roi_label,
      v__fs_roi_label_execute,
      v__fs_roi_label_params,
};
