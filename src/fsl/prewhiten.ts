// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PREWHITEN_METADATA: Metadata = {
    id: "ceacbe09c29c6f92a468bcb14de97ad85f522501.boutiques",
    name: "prewhiten",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PrewhitenParameters {
    "@type": "fsl.prewhiten";
    "feat_directory": string;
    "output_directory"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.prewhiten": prewhiten_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.prewhiten": prewhiten_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `prewhiten(...)`.
 *
 * @interface
 */
interface PrewhitenOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Specified output directory containing generated output files.
     */
    output_directory: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param feat_directory Input FEAT directory
 * @param output_directory Change output directory from default of input FEAT directory
 *
 * @returns Parameter dictionary
 */
function prewhiten_params(
    feat_directory: string,
    output_directory: string | null = null,
): PrewhitenParameters {
    const params = {
        "@type": "fsl.prewhiten" as const,
        "feat_directory": feat_directory,
    };
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function prewhiten_cargs(
    params: PrewhitenParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("prewhiten");
    cargs.push((params["feat_directory"] ?? null));
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_directory"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function prewhiten_outputs(
    params: PrewhitenParameters,
    execution: Execution,
): PrewhitenOutputs {
    const ret: PrewhitenOutputs = {
        root: execution.outputFile("."),
        output_directory: ((params["output_directory"] ?? null) !== null) ? execution.outputFile([(params["output_directory"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * prewhiten
 *
 * Prewhitening tool for FEAT directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PrewhitenOutputs`).
 */
function prewhiten_execute(
    params: PrewhitenParameters,
    runner: Runner | null = null,
): PrewhitenOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PREWHITEN_METADATA);
    params = execution.params(params)
    const cargs = prewhiten_cargs(params, execution)
    const ret = prewhiten_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * prewhiten
 *
 * Prewhitening tool for FEAT directories.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param feat_directory Input FEAT directory
 * @param output_directory Change output directory from default of input FEAT directory
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PrewhitenOutputs`).
 */
function prewhiten(
    feat_directory: string,
    output_directory: string | null = null,
    runner: Runner | null = null,
): PrewhitenOutputs {
    const params = prewhiten_params(feat_directory, output_directory)
    return prewhiten_execute(params, runner);
}


export {
      PREWHITEN_METADATA,
      PrewhitenOutputs,
      PrewhitenParameters,
      prewhiten,
      prewhiten_execute,
      prewhiten_params,
};
