// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WMSASEG_METADATA: Metadata = {
    id: "dc03aa6f6f16bc8b5912ca6532979e9cc7ed9e4d.boutiques",
    name: "wmsaseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface WmsasegParameters {
    "@type"?: "freesurfer/wmsaseg";
    "subject": string;
    "source_orig"?: string | null | undefined;
    "source_long": boolean;
    "output_subdir"?: string | null | undefined;
    "gca_file"?: InputPathType | null | undefined;
    "no_reg": boolean;
    "no_canorm": boolean;
    "init_spm": boolean;
    "reg_only": boolean;
    "halo1": boolean;
    "halo2": boolean;
}
type WmsasegParametersTagged = Required<Pick<WmsasegParameters, '@type'>> & WmsasegParameters;


/**
 * Output object returned when calling `WmsasegParameters(...)`.
 *
 * @interface
 */
interface WmsasegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * CA normalized T1 output
     */
    t1_canorm: OutputPathType | null;
    /**
     * Linear transform to average space
     */
    wmsa_lta: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier
 * @param source_orig Use T2 and PD images from original subject
 * @param source_long Use T2 and PD images from longitudinal subject
 * @param output_subdir Output subdirectory name (default is wmsa)
 * @param gca_file GCA file path
 * @param no_reg Do not register mode to anatomical image
 * @param no_canorm Do not run mri_ca_normalize
 * @param init_spm Initialize SPM (default is FSL)
 * @param reg_only Only perform registration
 * @param halo1 Halo 1 option
 * @param halo2 Halo 2 option
 *
 * @returns Parameter dictionary
 */
function wmsaseg_params(
    subject: string,
    source_orig: string | null = null,
    source_long: boolean = false,
    output_subdir: string | null = null,
    gca_file: InputPathType | null = null,
    no_reg: boolean = false,
    no_canorm: boolean = false,
    init_spm: boolean = false,
    reg_only: boolean = false,
    halo1: boolean = false,
    halo2: boolean = false,
): WmsasegParametersTagged {
    const params = {
        "@type": "freesurfer/wmsaseg" as const,
        "subject": subject,
        "source_long": source_long,
        "no_reg": no_reg,
        "no_canorm": no_canorm,
        "init_spm": init_spm,
        "reg_only": reg_only,
        "halo1": halo1,
        "halo2": halo2,
    };
    if (source_orig !== null) {
        params["source_orig"] = source_orig;
    }
    if (output_subdir !== null) {
        params["output_subdir"] = output_subdir;
    }
    if (gca_file !== null) {
        params["gca_file"] = gca_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function wmsaseg_cargs(
    params: WmsasegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wmsaseg");
    cargs.push(
        "-s",
        (params["subject"] ?? null)
    );
    if ((params["source_orig"] ?? null) !== null) {
        cargs.push(
            "--s+orig",
            (params["source_orig"] ?? null)
        );
    }
    if ((params["source_long"] ?? false)) {
        cargs.push("--s+long");
    }
    if ((params["output_subdir"] ?? null) !== null) {
        cargs.push(
            "--sub",
            (params["output_subdir"] ?? null)
        );
    }
    if ((params["gca_file"] ?? null) !== null) {
        cargs.push(
            "--gca",
            execution.inputFile((params["gca_file"] ?? null))
        );
    }
    if ((params["no_reg"] ?? false)) {
        cargs.push("--no-reg");
    }
    if ((params["no_canorm"] ?? false)) {
        cargs.push("--no-canorm");
    }
    if ((params["init_spm"] ?? false)) {
        cargs.push("--init-spm");
    }
    if ((params["reg_only"] ?? false)) {
        cargs.push("--reg-only");
    }
    if ((params["halo1"] ?? false)) {
        cargs.push("--halo1");
    }
    if ((params["halo2"] ?? false)) {
        cargs.push("--halo2");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function wmsaseg_outputs(
    params: WmsasegParameters,
    execution: Execution,
): WmsasegOutputs {
    const ret: WmsasegOutputs = {
        root: execution.outputFile("."),
        t1_canorm: ((params["output_subdir"] ?? null) !== null) ? execution.outputFile([(params["output_subdir"] ?? null), "/T1.canorm.mgz"].join('')) : null,
        wmsa_lta: ((params["output_subdir"] ?? null) !== null) ? execution.outputFile([(params["output_subdir"] ?? null), "/wmsa.lta"].join('')) : null,
    };
    return ret;
}


/**
 * wmsaseg
 *
 * White Matter Hyperintensity Segmentation Tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `WmsasegOutputs`).
 */
function wmsaseg_execute(
    params: WmsasegParameters,
    runner: Runner | null = null,
): WmsasegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WMSASEG_METADATA);
    params = execution.params(params)
    const cargs = wmsaseg_cargs(params, execution)
    const ret = wmsaseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * wmsaseg
 *
 * White Matter Hyperintensity Segmentation Tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier
 * @param source_orig Use T2 and PD images from original subject
 * @param source_long Use T2 and PD images from longitudinal subject
 * @param output_subdir Output subdirectory name (default is wmsa)
 * @param gca_file GCA file path
 * @param no_reg Do not register mode to anatomical image
 * @param no_canorm Do not run mri_ca_normalize
 * @param init_spm Initialize SPM (default is FSL)
 * @param reg_only Only perform registration
 * @param halo1 Halo 1 option
 * @param halo2 Halo 2 option
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `WmsasegOutputs`).
 */
function wmsaseg(
    subject: string,
    source_orig: string | null = null,
    source_long: boolean = false,
    output_subdir: string | null = null,
    gca_file: InputPathType | null = null,
    no_reg: boolean = false,
    no_canorm: boolean = false,
    init_spm: boolean = false,
    reg_only: boolean = false,
    halo1: boolean = false,
    halo2: boolean = false,
    runner: Runner | null = null,
): WmsasegOutputs {
    const params = wmsaseg_params(subject, source_orig, source_long, output_subdir, gca_file, no_reg, no_canorm, init_spm, reg_only, halo1, halo2)
    return wmsaseg_execute(params, runner);
}


export {
      WMSASEG_METADATA,
      WmsasegOutputs,
      wmsaseg,
      wmsaseg_execute,
      wmsaseg_params,
};
