// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FABBER_METADATA: Metadata = {
    id: "5d2a0e6b29e70fe10b66108a8eac5087e85c371d.boutiques",
    name: "fabber",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FabberParameters {
    "__STYXTYPE__": "fabber";
    "output": string;
    "method": string;
    "model": string;
    "data_file": InputPathType;
    "data_files"?: InputPathType | null | undefined;
    "data_order"?: string | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "mt_n"?: number | null | undefined;
    "supp_data"?: InputPathType | null | undefined;
    "evaluate_output"?: string | null | undefined;
    "evaluate_params"?: string | null | undefined;
    "evaluate_nt"?: number | null | undefined;
    "simple_output": boolean;
    "overwrite": boolean;
    "link_to_latest": boolean;
    "load_models"?: InputPathType | null | undefined;
    "debug": boolean;
    "optfile"?: InputPathType | null | undefined;
    "save_model_fit": boolean;
    "save_residuals": boolean;
    "save_model_extras": boolean;
    "save_mvn": boolean;
    "save_mean": boolean;
    "save_std": boolean;
    "save_var": boolean;
    "save_zstat": boolean;
    "save_noise_mean": boolean;
    "save_noise_std": boolean;
    "save_free_energy": boolean;
    "help": boolean;
    "list_methods": boolean;
    "list_models": boolean;
    "list_params": boolean;
    "desc_params": boolean;
    "list_outputs": boolean;
    "optfile_1"?: InputPathType | null | undefined;
    "old_optfile"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fabber": fabber_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fabber": fabber_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fabber(...)`.
 *
 * @interface
 */
interface FabberOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the names of the model parameters
     */
    paramnames_file: OutputPathType;
    /**
     * The model fit output file
     */
    model_fit_file: OutputPathType;
    /**
     * The residuals output file
     */
    residuals_file: OutputPathType;
    /**
     * The model extras output file
     */
    model_extras_file: OutputPathType;
    /**
     * The MVN distributions output file
     */
    mvn_file: OutputPathType;
    /**
     * The parameter means output file
     */
    mean_file: OutputPathType;
    /**
     * The parameter standard deviations output file
     */
    std_file: OutputPathType;
    /**
     * The parameter variances output file
     */
    var_file: OutputPathType;
    /**
     * The parameter Zstats output file
     */
    zstat_file: OutputPathType;
    /**
     * The noise means output file
     */
    noise_mean_file: OutputPathType;
    /**
     * The noise standard deviations output file
     */
    noise_std_file: OutputPathType;
    /**
     * The free energy output file
     */
    free_energy_file: OutputPathType;
}


function fabber_params(
    output: string,
    method: string,
    model: string,
    data_file: InputPathType,
    data_files: InputPathType | null = null,
    data_order: string | null = "interleave",
    mask_file: InputPathType | null = null,
    mt_n: number | null = null,
    supp_data: InputPathType | null = null,
    evaluate_output: string | null = null,
    evaluate_params: string | null = null,
    evaluate_nt: number | null = null,
    simple_output: boolean = false,
    overwrite: boolean = false,
    link_to_latest: boolean = false,
    load_models: InputPathType | null = null,
    debug: boolean = false,
    optfile: InputPathType | null = null,
    save_model_fit: boolean = false,
    save_residuals: boolean = false,
    save_model_extras: boolean = false,
    save_mvn: boolean = false,
    save_mean: boolean = false,
    save_std: boolean = false,
    save_var: boolean = false,
    save_zstat: boolean = false,
    save_noise_mean: boolean = false,
    save_noise_std: boolean = false,
    save_free_energy: boolean = false,
    help: boolean = false,
    list_methods: boolean = false,
    list_models: boolean = false,
    list_params: boolean = false,
    desc_params: boolean = false,
    list_outputs: boolean = false,
    optfile_1: InputPathType | null = null,
    old_optfile: InputPathType | null = null,
): FabberParameters {
    /**
     * Build parameters.
    
     * @param output Directory for output files (including logfile)
     * @param method Use this inference method
     * @param model Use this forward model
     * @param data_file Specify a single input data file
     * @param data_files Specify multiple data files for n=1, 2, 3...
     * @param data_order If multiple data files are specified, how they will be handled
     * @param mask_file Mask file. Inference will only be performed where mask value > 0
     * @param mt_n List of masked time points, indexed from 1. These will be ignored in the parameter updates
     * @param supp_data 'Supplemental' timeseries data, required for some models
     * @param evaluate_output Evaluate model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
     * @param evaluate_params List of parameter values for evaluation
     * @param evaluate_nt Number of time points for evaluation
     * @param simple_output Instead of usual standard output, simply output series of lines each giving progress as percentage
     * @param overwrite If set will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
     * @param link_to_latest Try to create a link to the most recent output directory with the prefix _latest
     * @param load_models Load models dynamically from the specified filename, which should be a DLL/shared library
     * @param debug Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
     * @param optfile Read options in option=value form from the specified file
     * @param save_model_fit Output the model prediction as a 4d volume
     * @param save_residuals Output the residuals (difference between the data and the model prediction)
     * @param save_model_extras Output any additional model-specific timeseries data
     * @param save_mvn Output the final MVN distributions
     * @param save_mean Output the parameter means
     * @param save_std Output the parameter standard deviations
     * @param save_var Output the parameter variances
     * @param save_zstat Output the parameter Z-stats
     * @param save_noise_mean Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source
     * @param save_noise_std Output the noise standard deviations
     * @param save_free_energy Output the free energy, if calculated
     * @param help Print this usage method. If given with --method or --model, display relevant method/model usage information
     * @param list_methods List all known inference methods
     * @param list_models List all known forward models
     * @param list_params List model parameters (requires model configuration options to be given)
     * @param desc_params Describe model parameters (name, description, units) - requires model configuration options to be given. Note that not all models provide parameter descriptions
     * @param list_outputs List additional model outputs (requires model configuration options to be given)
     * @param optfile_1 Read options in option=value form from the specified file
     * @param old_optfile Read options in command line form from the specified file (DEPRECATED)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fabber" as const,
        "output": output,
        "method": method,
        "model": model,
        "data_file": data_file,
        "simple_output": simple_output,
        "overwrite": overwrite,
        "link_to_latest": link_to_latest,
        "debug": debug,
        "save_model_fit": save_model_fit,
        "save_residuals": save_residuals,
        "save_model_extras": save_model_extras,
        "save_mvn": save_mvn,
        "save_mean": save_mean,
        "save_std": save_std,
        "save_var": save_var,
        "save_zstat": save_zstat,
        "save_noise_mean": save_noise_mean,
        "save_noise_std": save_noise_std,
        "save_free_energy": save_free_energy,
        "help": help,
        "list_methods": list_methods,
        "list_models": list_models,
        "list_params": list_params,
        "desc_params": desc_params,
        "list_outputs": list_outputs,
    };
    if (data_files !== null) {
        params["data_files"] = data_files;
    }
    if (data_order !== null) {
        params["data_order"] = data_order;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (mt_n !== null) {
        params["mt_n"] = mt_n;
    }
    if (supp_data !== null) {
        params["supp_data"] = supp_data;
    }
    if (evaluate_output !== null) {
        params["evaluate_output"] = evaluate_output;
    }
    if (evaluate_params !== null) {
        params["evaluate_params"] = evaluate_params;
    }
    if (evaluate_nt !== null) {
        params["evaluate_nt"] = evaluate_nt;
    }
    if (load_models !== null) {
        params["load_models"] = load_models;
    }
    if (optfile !== null) {
        params["optfile"] = optfile;
    }
    if (optfile_1 !== null) {
        params["optfile_1"] = optfile_1;
    }
    if (old_optfile !== null) {
        params["old_optfile"] = old_optfile;
    }
    return params;
}


function fabber_cargs(
    params: FabberParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fabber");
    cargs.push(
        "--output",
        (params["output"] ?? null)
    );
    cargs.push(
        "--method",
        (params["method"] ?? null)
    );
    cargs.push(
        "--model",
        (params["model"] ?? null)
    );
    cargs.push(
        "--data",
        execution.inputFile((params["data_file"] ?? null))
    );
    if ((params["data_files"] ?? null) !== null) {
        cargs.push(
            "--data<n>",
            execution.inputFile((params["data_files"] ?? null))
        );
    }
    if ((params["data_order"] ?? null) !== null) {
        cargs.push(
            "--data-order",
            (params["data_order"] ?? null)
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["mt_n"] ?? null) !== null) {
        cargs.push(
            "--mt<n>",
            String((params["mt_n"] ?? null))
        );
    }
    if ((params["supp_data"] ?? null) !== null) {
        cargs.push(
            "--suppdata",
            execution.inputFile((params["supp_data"] ?? null))
        );
    }
    if ((params["evaluate_output"] ?? null) !== null) {
        cargs.push(
            "--evaluate",
            (params["evaluate_output"] ?? null)
        );
    }
    if ((params["evaluate_params"] ?? null) !== null) {
        cargs.push(
            "--evaluate-params",
            (params["evaluate_params"] ?? null)
        );
    }
    if ((params["evaluate_nt"] ?? null) !== null) {
        cargs.push(
            "--evaluate-nt",
            String((params["evaluate_nt"] ?? null))
        );
    }
    if ((params["simple_output"] ?? null)) {
        cargs.push("--simple-output");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("--overwrite");
    }
    if ((params["link_to_latest"] ?? null)) {
        cargs.push("--link-to-latest");
    }
    if ((params["load_models"] ?? null) !== null) {
        cargs.push(
            "--loadmodels",
            execution.inputFile((params["load_models"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["optfile"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["optfile"] ?? null))
        );
    }
    if ((params["save_model_fit"] ?? null)) {
        cargs.push("--save-model-fit");
    }
    if ((params["save_residuals"] ?? null)) {
        cargs.push("--save-residuals");
    }
    if ((params["save_model_extras"] ?? null)) {
        cargs.push("--save-model-extras");
    }
    if ((params["save_mvn"] ?? null)) {
        cargs.push("--save-mvn");
    }
    if ((params["save_mean"] ?? null)) {
        cargs.push("--save-mean");
    }
    if ((params["save_std"] ?? null)) {
        cargs.push("--save-std");
    }
    if ((params["save_var"] ?? null)) {
        cargs.push("--save-var");
    }
    if ((params["save_zstat"] ?? null)) {
        cargs.push("--save-zstat");
    }
    if ((params["save_noise_mean"] ?? null)) {
        cargs.push("--save-noise-mean");
    }
    if ((params["save_noise_std"] ?? null)) {
        cargs.push("--save-noise-std");
    }
    if ((params["save_free_energy"] ?? null)) {
        cargs.push("--save-free-energy");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["list_methods"] ?? null)) {
        cargs.push("--listmethods");
    }
    if ((params["list_models"] ?? null)) {
        cargs.push("--listmodels");
    }
    if ((params["list_params"] ?? null)) {
        cargs.push("--listparams");
    }
    if ((params["desc_params"] ?? null)) {
        cargs.push("--descparams");
    }
    if ((params["list_outputs"] ?? null)) {
        cargs.push("--listoutputs");
    }
    if ((params["optfile_1"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["optfile_1"] ?? null))
        );
    }
    if ((params["old_optfile"] ?? null) !== null) {
        cargs.push(
            "-@",
            execution.inputFile((params["old_optfile"] ?? null))
        );
    }
    return cargs;
}


function fabber_outputs(
    params: FabberParameters,
    execution: Execution,
): FabberOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FabberOutputs = {
        root: execution.outputFile("."),
        paramnames_file: execution.outputFile([(params["output"] ?? null), "/paramnames.txt"].join('')),
        model_fit_file: execution.outputFile([(params["output"] ?? null), "/model_fit.nii.gz"].join('')),
        residuals_file: execution.outputFile([(params["output"] ?? null), "/residuals.nii.gz"].join('')),
        model_extras_file: execution.outputFile([(params["output"] ?? null), "/model_extras.nii.gz"].join('')),
        mvn_file: execution.outputFile([(params["output"] ?? null), "/mvn.nii.gz"].join('')),
        mean_file: execution.outputFile([(params["output"] ?? null), "/mean.nii.gz"].join('')),
        std_file: execution.outputFile([(params["output"] ?? null), "/std.nii.gz"].join('')),
        var_file: execution.outputFile([(params["output"] ?? null), "/var.nii.gz"].join('')),
        zstat_file: execution.outputFile([(params["output"] ?? null), "/zstat.nii.gz"].join('')),
        noise_mean_file: execution.outputFile([(params["output"] ?? null), "/noise_mean.nii.gz"].join('')),
        noise_std_file: execution.outputFile([(params["output"] ?? null), "/noise_std.nii.gz"].join('')),
        free_energy_file: execution.outputFile([(params["output"] ?? null), "/free_energy.nii.gz"].join('')),
    };
    return ret;
}


function fabber_execute(
    params: FabberParameters,
    execution: Execution,
): FabberOutputs {
    /**
     * Fabber is a tool for model-based Bayesian analysis of time-series data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FabberOutputs`).
     */
    params = execution.params(params)
    const cargs = fabber_cargs(params, execution)
    const ret = fabber_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fabber(
    output: string,
    method: string,
    model: string,
    data_file: InputPathType,
    data_files: InputPathType | null = null,
    data_order: string | null = "interleave",
    mask_file: InputPathType | null = null,
    mt_n: number | null = null,
    supp_data: InputPathType | null = null,
    evaluate_output: string | null = null,
    evaluate_params: string | null = null,
    evaluate_nt: number | null = null,
    simple_output: boolean = false,
    overwrite: boolean = false,
    link_to_latest: boolean = false,
    load_models: InputPathType | null = null,
    debug: boolean = false,
    optfile: InputPathType | null = null,
    save_model_fit: boolean = false,
    save_residuals: boolean = false,
    save_model_extras: boolean = false,
    save_mvn: boolean = false,
    save_mean: boolean = false,
    save_std: boolean = false,
    save_var: boolean = false,
    save_zstat: boolean = false,
    save_noise_mean: boolean = false,
    save_noise_std: boolean = false,
    save_free_energy: boolean = false,
    help: boolean = false,
    list_methods: boolean = false,
    list_models: boolean = false,
    list_params: boolean = false,
    desc_params: boolean = false,
    list_outputs: boolean = false,
    optfile_1: InputPathType | null = null,
    old_optfile: InputPathType | null = null,
    runner: Runner | null = null,
): FabberOutputs {
    /**
     * Fabber is a tool for model-based Bayesian analysis of time-series data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param output Directory for output files (including logfile)
     * @param method Use this inference method
     * @param model Use this forward model
     * @param data_file Specify a single input data file
     * @param data_files Specify multiple data files for n=1, 2, 3...
     * @param data_order If multiple data files are specified, how they will be handled
     * @param mask_file Mask file. Inference will only be performed where mask value > 0
     * @param mt_n List of masked time points, indexed from 1. These will be ignored in the parameter updates
     * @param supp_data 'Supplemental' timeseries data, required for some models
     * @param evaluate_output Evaluate model. Set to name of output required or blank for default output. Requires model configuration options, --evaluate-params and --evaluate-nt
     * @param evaluate_params List of parameter values for evaluation
     * @param evaluate_nt Number of time points for evaluation
     * @param simple_output Instead of usual standard output, simply output series of lines each giving progress as percentage
     * @param overwrite If set will overwrite existing output. If not set, new output directories will be created by appending '+' to the directory name
     * @param link_to_latest Try to create a link to the most recent output directory with the prefix _latest
     * @param load_models Load models dynamically from the specified filename, which should be a DLL/shared library
     * @param debug Output large amounts of debug information. ONLY USE WITH VERY SMALL NUMBERS OF VOXELS
     * @param optfile Read options in option=value form from the specified file
     * @param save_model_fit Output the model prediction as a 4d volume
     * @param save_residuals Output the residuals (difference between the data and the model prediction)
     * @param save_model_extras Output any additional model-specific timeseries data
     * @param save_mvn Output the final MVN distributions
     * @param save_mean Output the parameter means
     * @param save_std Output the parameter standard deviations
     * @param save_var Output the parameter variances
     * @param save_zstat Output the parameter Z-stats
     * @param save_noise_mean Output the noise means. The noise distribution inferred is the precision of a Gaussian noise source
     * @param save_noise_std Output the noise standard deviations
     * @param save_free_energy Output the free energy, if calculated
     * @param help Print this usage method. If given with --method or --model, display relevant method/model usage information
     * @param list_methods List all known inference methods
     * @param list_models List all known forward models
     * @param list_params List model parameters (requires model configuration options to be given)
     * @param desc_params Describe model parameters (name, description, units) - requires model configuration options to be given. Note that not all models provide parameter descriptions
     * @param list_outputs List additional model outputs (requires model configuration options to be given)
     * @param optfile_1 Read options in option=value form from the specified file
     * @param old_optfile Read options in command line form from the specified file (DEPRECATED)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FabberOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FABBER_METADATA);
    const params = fabber_params(output, method, model, data_file, data_files, data_order, mask_file, mt_n, supp_data, evaluate_output, evaluate_params, evaluate_nt, simple_output, overwrite, link_to_latest, load_models, debug, optfile, save_model_fit, save_residuals, save_model_extras, save_mvn, save_mean, save_std, save_var, save_zstat, save_noise_mean, save_noise_std, save_free_energy, help, list_methods, list_models, list_params, desc_params, list_outputs, optfile_1, old_optfile)
    return fabber_execute(params, execution);
}


export {
      FABBER_METADATA,
      FabberOutputs,
      FabberParameters,
      fabber,
      fabber_params,
};
