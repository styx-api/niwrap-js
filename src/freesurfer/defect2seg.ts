// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DEFECT2SEG_METADATA: Metadata = {
    id: "ee34539fd2b9014ec765deedfc67dab265d637bf.boutiques",
    name: "defect2seg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Defect2segParameters {
    "@type": "freesurfer.defect2seg";
    "output_seg": string;
    "template": InputPathType;
    "left_hemisphere"?: Array<string> | null | undefined;
    "right_hemisphere"?: Array<string> | null | undefined;
    "subject"?: string | null | undefined;
    "lh_only": boolean;
    "rh_only": boolean;
    "cortex": boolean;
    "no_cortex": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.defect2seg": defect2seg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.defect2seg": defect2seg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `defect2seg(...)`.
 *
 * @interface
 */
interface Defect2segOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting defect segmentation volume
     */
    output_segmentation: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_seg Output segmentation volume
 * @param template Template for segmentation
 * @param left_hemisphere Left hemisphere inputs: surface, defect labels, pointset, and offset
 * @param right_hemisphere Right hemisphere inputs: surface, defect labels, pointset, and offset
 * @param subject Subject identifier, sets default values for other parameters
 * @param lh_only Consider only left hemisphere defects
 * @param rh_only Consider only right hemisphere defects
 * @param cortex Constrain defects to within cortex
 * @param no_cortex Allow defects outside of cortex
 *
 * @returns Parameter dictionary
 */
function defect2seg_params(
    output_seg: string,
    template: InputPathType,
    left_hemisphere: Array<string> | null = null,
    right_hemisphere: Array<string> | null = null,
    subject: string | null = null,
    lh_only: boolean = false,
    rh_only: boolean = false,
    cortex: boolean = false,
    no_cortex: boolean = false,
): Defect2segParameters {
    const params = {
        "@type": "freesurfer.defect2seg" as const,
        "output_seg": output_seg,
        "template": template,
        "lh_only": lh_only,
        "rh_only": rh_only,
        "cortex": cortex,
        "no_cortex": no_cortex,
    };
    if (left_hemisphere !== null) {
        params["left_hemisphere"] = left_hemisphere;
    }
    if (right_hemisphere !== null) {
        params["right_hemisphere"] = right_hemisphere;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function defect2seg_cargs(
    params: Defect2segParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("defect2seg");
    cargs.push(
        "--o",
        (params["output_seg"] ?? null)
    );
    cargs.push(
        "--t",
        execution.inputFile((params["template"] ?? null))
    );
    if ((params["left_hemisphere"] ?? null) !== null) {
        cargs.push(
            "--lh",
            ...(params["left_hemisphere"] ?? null)
        );
    }
    if ((params["right_hemisphere"] ?? null) !== null) {
        cargs.push(
            "--rh",
            ...(params["right_hemisphere"] ?? null)
        );
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["lh_only"] ?? null)) {
        cargs.push("--lh-only");
    }
    if ((params["rh_only"] ?? null)) {
        cargs.push("--rh-only");
    }
    if ((params["cortex"] ?? null)) {
        cargs.push("--cortex");
    }
    if ((params["no_cortex"] ?? null)) {
        cargs.push("--no-cortex");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function defect2seg_outputs(
    params: Defect2segParameters,
    execution: Execution,
): Defect2segOutputs {
    const ret: Defect2segOutputs = {
        root: execution.outputFile("."),
        output_segmentation: execution.outputFile([(params["output_seg"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Converts surface defect labels into a segmentation volume and pointsets.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Defect2segOutputs`).
 */
function defect2seg_execute(
    params: Defect2segParameters,
    runner: Runner | null = null,
): Defect2segOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DEFECT2SEG_METADATA);
    params = execution.params(params)
    const cargs = defect2seg_cargs(params, execution)
    const ret = defect2seg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Converts surface defect labels into a segmentation volume and pointsets.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param output_seg Output segmentation volume
 * @param template Template for segmentation
 * @param left_hemisphere Left hemisphere inputs: surface, defect labels, pointset, and offset
 * @param right_hemisphere Right hemisphere inputs: surface, defect labels, pointset, and offset
 * @param subject Subject identifier, sets default values for other parameters
 * @param lh_only Consider only left hemisphere defects
 * @param rh_only Consider only right hemisphere defects
 * @param cortex Constrain defects to within cortex
 * @param no_cortex Allow defects outside of cortex
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Defect2segOutputs`).
 */
function defect2seg(
    output_seg: string,
    template: InputPathType,
    left_hemisphere: Array<string> | null = null,
    right_hemisphere: Array<string> | null = null,
    subject: string | null = null,
    lh_only: boolean = false,
    rh_only: boolean = false,
    cortex: boolean = false,
    no_cortex: boolean = false,
    runner: Runner | null = null,
): Defect2segOutputs {
    const params = defect2seg_params(output_seg, template, left_hemisphere, right_hemisphere, subject, lh_only, rh_only, cortex, no_cortex)
    return defect2seg_execute(params, runner);
}


export {
      DEFECT2SEG_METADATA,
      Defect2segOutputs,
      Defect2segParameters,
      defect2seg,
      defect2seg_execute,
      defect2seg_params,
};
