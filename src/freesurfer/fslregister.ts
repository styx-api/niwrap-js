// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLREGISTER_METADATA: Metadata = {
    id: "9ec9754c04caff23125f7deb97b579d2e3e28e25.boutiques",
    name: "fslregister",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FslregisterParameters {
    "@type": "freesurfer.fslregister";
    "subjid": string;
    "mov_vol": string;
    "reg_file": string;
    "fsl_matrix"?: string | null | undefined;
    "init_fsl_matrix"?: string | null | undefined;
    "no_init_xfm": boolean;
    "niters"?: number | null | undefined;
    "dof"?: number | null | undefined;
    "bins"?: number | null | undefined;
    "cost"?: string | null | undefined;
    "max_angle"?: number | null | undefined;
    "no_new_schedule": boolean;
    "no_allow_swap": boolean;
    "no_trans": boolean;
    "bet_mov": boolean;
    "bet_fvalue"?: number | null | undefined;
    "bet_func": boolean;
    "bet_ref": boolean;
    "frame"?: number | null | undefined;
    "mid_frame": boolean;
    "freesurfer_volume"?: string | null | undefined;
    "template_output"?: string | null | undefined;
    "output_volume"?: string | null | undefined;
    "verbose"?: number | null | undefined;
    "tmp_dir"?: string | null | undefined;
    "no_cleanup": boolean;
    "no_log": boolean;
    "version": boolean;
    "help": boolean;
    "lta_format"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fslregister": fslregister_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.fslregister": fslregister_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslregister(...)`.
 *
 * @interface
 */
interface FslregisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registration file.
     */
    output_reg_file: OutputPathType;
    /**
     * Resliced output volume.
     */
    output_resliced_volume: OutputPathType | null;
    /**
     * FSL format output registration matrix.
     */
    output_fsl_matrix: OutputPathType | null;
    /**
     * Registration output in LTA format.
     */
    lta_output: OutputPathType | null;
    /**
     * Output template.
     */
    output_template: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subjid Id of the subject as found in SUBJECTS_DIR.
 * @param mov_vol Volume identifier of the movable volume.
 * @param reg_file Output registration file.
 * @param fsl_matrix Output registration matrix in FSL format.
 * @param init_fsl_matrix Supply initial FSL matrix file.
 * @param no_init_xfm Do not initialize based on header geometry.
 * @param niters Number of iterations for FLIRT.
 * @param dof Degrees of freedom in the FLIRT registration.
 * @param bins Number of bins for FLIRT.
 * @param cost Cost function for FLIRT.
 * @param max_angle Maximum search angle for FLIRT.
 * @param no_new_schedule Disable new schedule in FLIRT.
 * @param no_allow_swap Do not allow swap dimension of positive determinant input volumes.
 * @param no_trans Do not perform translation-only registration prior to full.
 * @param bet_mov Perform brain extraction on movable volume.
 * @param bet_fvalue f value for BET.
 * @param bet_func Run betfunc instead of bet.
 * @param bet_ref Perform brain extraction on reference volume.
 * @param frame Frame number for registration.
 * @param mid_frame Use the middle frame of the volume.
 * @param freesurfer_volume Use FreeSurfer volid as reference volume.
 * @param template_output Save template.
 * @param output_volume Have FLIRT reslice movable volume to target.
 * @param verbose FLIRT verbosity level.
 * @param tmp_dir Temporary directory to use.
 * @param no_cleanup Do not delete temporary files.
 * @param no_log Do not produce a log file.
 * @param version Print version and exit.
 * @param help Print help and exit.
 * @param lta_format Output registration in LTA format.
 *
 * @returns Parameter dictionary
 */
function fslregister_params(
    subjid: string,
    mov_vol: string,
    reg_file: string,
    fsl_matrix: string | null = null,
    init_fsl_matrix: string | null = null,
    no_init_xfm: boolean = false,
    niters: number | null = null,
    dof: number | null = null,
    bins: number | null = null,
    cost: string | null = null,
    max_angle: number | null = null,
    no_new_schedule: boolean = false,
    no_allow_swap: boolean = false,
    no_trans: boolean = false,
    bet_mov: boolean = false,
    bet_fvalue: number | null = null,
    bet_func: boolean = false,
    bet_ref: boolean = false,
    frame: number | null = null,
    mid_frame: boolean = false,
    freesurfer_volume: string | null = null,
    template_output: string | null = null,
    output_volume: string | null = null,
    verbose: number | null = null,
    tmp_dir: string | null = null,
    no_cleanup: boolean = false,
    no_log: boolean = false,
    version: boolean = false,
    help: boolean = false,
    lta_format: string | null = null,
): FslregisterParameters {
    const params = {
        "@type": "freesurfer.fslregister" as const,
        "subjid": subjid,
        "mov_vol": mov_vol,
        "reg_file": reg_file,
        "no_init_xfm": no_init_xfm,
        "no_new_schedule": no_new_schedule,
        "no_allow_swap": no_allow_swap,
        "no_trans": no_trans,
        "bet_mov": bet_mov,
        "bet_func": bet_func,
        "bet_ref": bet_ref,
        "mid_frame": mid_frame,
        "no_cleanup": no_cleanup,
        "no_log": no_log,
        "version": version,
        "help": help,
    };
    if (fsl_matrix !== null) {
        params["fsl_matrix"] = fsl_matrix;
    }
    if (init_fsl_matrix !== null) {
        params["init_fsl_matrix"] = init_fsl_matrix;
    }
    if (niters !== null) {
        params["niters"] = niters;
    }
    if (dof !== null) {
        params["dof"] = dof;
    }
    if (bins !== null) {
        params["bins"] = bins;
    }
    if (cost !== null) {
        params["cost"] = cost;
    }
    if (max_angle !== null) {
        params["max_angle"] = max_angle;
    }
    if (bet_fvalue !== null) {
        params["bet_fvalue"] = bet_fvalue;
    }
    if (frame !== null) {
        params["frame"] = frame;
    }
    if (freesurfer_volume !== null) {
        params["freesurfer_volume"] = freesurfer_volume;
    }
    if (template_output !== null) {
        params["template_output"] = template_output;
    }
    if (output_volume !== null) {
        params["output_volume"] = output_volume;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    if (tmp_dir !== null) {
        params["tmp_dir"] = tmp_dir;
    }
    if (lta_format !== null) {
        params["lta_format"] = lta_format;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslregister_cargs(
    params: FslregisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslregister");
    cargs.push(
        "--s",
        (params["subjid"] ?? null)
    );
    cargs.push(
        "--mov",
        (params["mov_vol"] ?? null)
    );
    cargs.push(
        "--reg",
        (params["reg_file"] ?? null)
    );
    if ((params["fsl_matrix"] ?? null) !== null) {
        cargs.push(
            "--fslmat",
            (params["fsl_matrix"] ?? null)
        );
    }
    if ((params["init_fsl_matrix"] ?? null) !== null) {
        cargs.push(
            "--initfslmat",
            (params["init_fsl_matrix"] ?? null)
        );
    }
    if ((params["no_init_xfm"] ?? null)) {
        cargs.push("--noinitxfm");
    }
    if ((params["niters"] ?? null) !== null) {
        cargs.push(
            "--niters",
            String((params["niters"] ?? null))
        );
    }
    if ((params["dof"] ?? null) !== null) {
        cargs.push(
            "--dof",
            String((params["dof"] ?? null))
        );
    }
    if ((params["bins"] ?? null) !== null) {
        cargs.push(
            "--bins",
            String((params["bins"] ?? null))
        );
    }
    if ((params["cost"] ?? null) !== null) {
        cargs.push(
            "--cost",
            (params["cost"] ?? null)
        );
    }
    if ((params["max_angle"] ?? null) !== null) {
        cargs.push(
            "--maxangle",
            String((params["max_angle"] ?? null))
        );
    }
    if ((params["no_new_schedule"] ?? null)) {
        cargs.push("--no-new-schedule");
    }
    if ((params["no_allow_swap"] ?? null)) {
        cargs.push("--no-allow-swap");
    }
    if ((params["no_trans"] ?? null)) {
        cargs.push("--no-trans");
    }
    if ((params["bet_mov"] ?? null)) {
        cargs.push("--betmov");
    }
    if ((params["bet_fvalue"] ?? null) !== null) {
        cargs.push(
            "--betfvalue",
            String((params["bet_fvalue"] ?? null))
        );
    }
    if ((params["bet_func"] ?? null)) {
        cargs.push("--betfunc");
    }
    if ((params["bet_ref"] ?? null)) {
        cargs.push("--betref");
    }
    if ((params["frame"] ?? null) !== null) {
        cargs.push(
            "--frame",
            String((params["frame"] ?? null))
        );
    }
    if ((params["mid_frame"] ?? null)) {
        cargs.push("--mid-frame");
    }
    if ((params["freesurfer_volume"] ?? null) !== null) {
        cargs.push(
            "--fsvol",
            (params["freesurfer_volume"] ?? null)
        );
    }
    if ((params["template_output"] ?? null) !== null) {
        cargs.push(
            "--template-out",
            (params["template_output"] ?? null)
        );
    }
    if ((params["output_volume"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["output_volume"] ?? null)
        );
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "--verbose",
            String((params["verbose"] ?? null))
        );
    }
    if ((params["tmp_dir"] ?? null) !== null) {
        cargs.push(
            "--tmp",
            (params["tmp_dir"] ?? null)
        );
    }
    if ((params["no_cleanup"] ?? null)) {
        cargs.push("--nocleanup");
    }
    if ((params["no_log"] ?? null)) {
        cargs.push("--nolog");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["lta_format"] ?? null) !== null) {
        cargs.push(
            "--lta",
            (params["lta_format"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslregister_outputs(
    params: FslregisterParameters,
    execution: Execution,
): FslregisterOutputs {
    const ret: FslregisterOutputs = {
        root: execution.outputFile("."),
        output_reg_file: execution.outputFile([(params["reg_file"] ?? null)].join('')),
        output_resliced_volume: ((params["output_volume"] ?? null) !== null) ? execution.outputFile([(params["output_volume"] ?? null)].join('')) : null,
        output_fsl_matrix: ((params["fsl_matrix"] ?? null) !== null) ? execution.outputFile([(params["fsl_matrix"] ?? null)].join('')) : null,
        lta_output: ((params["lta_format"] ?? null) !== null) ? execution.outputFile([(params["lta_format"] ?? null)].join('')) : null,
        output_template: ((params["template_output"] ?? null) !== null) ? execution.outputFile([(params["template_output"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Registers a volume to its FreeSurfer anatomical using FSL's FLIRT and creates a FreeSurfer register.dat file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslregisterOutputs`).
 */
function fslregister_execute(
    params: FslregisterParameters,
    runner: Runner | null = null,
): FslregisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLREGISTER_METADATA);
    params = execution.params(params)
    const cargs = fslregister_cargs(params, execution)
    const ret = fslregister_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Registers a volume to its FreeSurfer anatomical using FSL's FLIRT and creates a FreeSurfer register.dat file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjid Id of the subject as found in SUBJECTS_DIR.
 * @param mov_vol Volume identifier of the movable volume.
 * @param reg_file Output registration file.
 * @param fsl_matrix Output registration matrix in FSL format.
 * @param init_fsl_matrix Supply initial FSL matrix file.
 * @param no_init_xfm Do not initialize based on header geometry.
 * @param niters Number of iterations for FLIRT.
 * @param dof Degrees of freedom in the FLIRT registration.
 * @param bins Number of bins for FLIRT.
 * @param cost Cost function for FLIRT.
 * @param max_angle Maximum search angle for FLIRT.
 * @param no_new_schedule Disable new schedule in FLIRT.
 * @param no_allow_swap Do not allow swap dimension of positive determinant input volumes.
 * @param no_trans Do not perform translation-only registration prior to full.
 * @param bet_mov Perform brain extraction on movable volume.
 * @param bet_fvalue f value for BET.
 * @param bet_func Run betfunc instead of bet.
 * @param bet_ref Perform brain extraction on reference volume.
 * @param frame Frame number for registration.
 * @param mid_frame Use the middle frame of the volume.
 * @param freesurfer_volume Use FreeSurfer volid as reference volume.
 * @param template_output Save template.
 * @param output_volume Have FLIRT reslice movable volume to target.
 * @param verbose FLIRT verbosity level.
 * @param tmp_dir Temporary directory to use.
 * @param no_cleanup Do not delete temporary files.
 * @param no_log Do not produce a log file.
 * @param version Print version and exit.
 * @param help Print help and exit.
 * @param lta_format Output registration in LTA format.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslregisterOutputs`).
 */
function fslregister(
    subjid: string,
    mov_vol: string,
    reg_file: string,
    fsl_matrix: string | null = null,
    init_fsl_matrix: string | null = null,
    no_init_xfm: boolean = false,
    niters: number | null = null,
    dof: number | null = null,
    bins: number | null = null,
    cost: string | null = null,
    max_angle: number | null = null,
    no_new_schedule: boolean = false,
    no_allow_swap: boolean = false,
    no_trans: boolean = false,
    bet_mov: boolean = false,
    bet_fvalue: number | null = null,
    bet_func: boolean = false,
    bet_ref: boolean = false,
    frame: number | null = null,
    mid_frame: boolean = false,
    freesurfer_volume: string | null = null,
    template_output: string | null = null,
    output_volume: string | null = null,
    verbose: number | null = null,
    tmp_dir: string | null = null,
    no_cleanup: boolean = false,
    no_log: boolean = false,
    version: boolean = false,
    help: boolean = false,
    lta_format: string | null = null,
    runner: Runner | null = null,
): FslregisterOutputs {
    const params = fslregister_params(subjid, mov_vol, reg_file, fsl_matrix, init_fsl_matrix, no_init_xfm, niters, dof, bins, cost, max_angle, no_new_schedule, no_allow_swap, no_trans, bet_mov, bet_fvalue, bet_func, bet_ref, frame, mid_frame, freesurfer_volume, template_output, output_volume, verbose, tmp_dir, no_cleanup, no_log, version, help, lta_format)
    return fslregister_execute(params, runner);
}


export {
      FSLREGISTER_METADATA,
      FslregisterOutputs,
      FslregisterParameters,
      fslregister,
      fslregister_execute,
      fslregister_params,
};
