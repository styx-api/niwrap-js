// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_PATH2LABEL_METADATA: Metadata = {
    id: "f6aabaa35d15694a3404575387789931acf2e412.boutiques",
    name: "mri_path2label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriPath2labelParameters {
    "@type": "freesurfer.mri_path2label";
    "input_file": string;
    "output_file": string;
    "single": boolean;
    "path_to_label": boolean;
    "label_to_path": boolean;
    "connect"?: Array<string> | null | undefined;
    "fill"?: Array<string> | null | undefined;
    "confillx"?: Array<string> | null | undefined;
    "confill"?: Array<string> | null | undefined;
    "source_file"?: string | null | undefined;
    "dest_file"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_path2label": mri_path2label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_path2label(...)`.
 *
 * @interface
 */
interface MriPath2labelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input file, either a path or label file.
 * @param output_file Output file, either a path or label file.
 * @param single Only convert a single path, and do not use sentinel values.
 * @param path_to_label Treat input as a path and output a label.
 * @param label_to_path Treat input as a label and output a path.
 * @param connect Connect path; input and output must be paths; requires subject and hemi.
 * @param fill Fill already closed, connected path; input must be a path, output must be a label; requires subject, hemi, and seedvtx.
 * @param confillx Connect and fill path; input must be a path, output must be a label; requires surface_fname and seedvtx.
 * @param confill Connect and fill path; input must be a path, output must be a label; requires subject, hemi, and seedvtx.
 * @param source_file The path file, if path2label.
 * @param dest_file The label file, if path2label.
 *
 * @returns Parameter dictionary
 */
function mri_path2label_params(
    input_file: string,
    output_file: string,
    single: boolean = false,
    path_to_label: boolean = false,
    label_to_path: boolean = false,
    connect: Array<string> | null = null,
    fill: Array<string> | null = null,
    confillx: Array<string> | null = null,
    confill: Array<string> | null = null,
    source_file: string | null = null,
    dest_file: string | null = null,
): MriPath2labelParameters {
    const params = {
        "@type": "freesurfer.mri_path2label" as const,
        "input_file": input_file,
        "output_file": output_file,
        "single": single,
        "path_to_label": path_to_label,
        "label_to_path": label_to_path,
    };
    if (connect !== null) {
        params["connect"] = connect;
    }
    if (fill !== null) {
        params["fill"] = fill;
    }
    if (confillx !== null) {
        params["confillx"] = confillx;
    }
    if (confill !== null) {
        params["confill"] = confill;
    }
    if (source_file !== null) {
        params["source_file"] = source_file;
    }
    if (dest_file !== null) {
        params["dest_file"] = dest_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_path2label_cargs(
    params: MriPath2labelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_path2label");
    cargs.push((params["input_file"] ?? null));
    cargs.push((params["output_file"] ?? null));
    if ((params["single"] ?? null)) {
        cargs.push("--single");
    }
    if ((params["path_to_label"] ?? null)) {
        cargs.push("--path2label");
    }
    if ((params["label_to_path"] ?? null)) {
        cargs.push("--label2path");
    }
    if ((params["connect"] ?? null) !== null) {
        cargs.push(
            "--connect",
            ...(params["connect"] ?? null)
        );
    }
    if ((params["fill"] ?? null) !== null) {
        cargs.push(
            "--fill",
            ...(params["fill"] ?? null)
        );
    }
    if ((params["confillx"] ?? null) !== null) {
        cargs.push(
            "--confillx",
            ...(params["confillx"] ?? null)
        );
    }
    if ((params["confill"] ?? null) !== null) {
        cargs.push(
            "--confill",
            ...(params["confill"] ?? null)
        );
    }
    if ((params["source_file"] ?? null) !== null) {
        cargs.push(
            "--i",
            (params["source_file"] ?? null)
        );
    }
    if ((params["dest_file"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["dest_file"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_path2label_outputs(
    params: MriPath2labelParameters,
    execution: Execution,
): MriPath2labelOutputs {
    const ret: MriPath2labelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_path2label
 *
 * Converts a path file to a label or a label file to a path file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPath2labelOutputs`).
 */
function mri_path2label_execute(
    params: MriPath2labelParameters,
    runner: Runner | null = null,
): MriPath2labelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_PATH2LABEL_METADATA);
    params = execution.params(params)
    const cargs = mri_path2label_cargs(params, execution)
    const ret = mri_path2label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_path2label
 *
 * Converts a path file to a label or a label file to a path file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input file, either a path or label file.
 * @param output_file Output file, either a path or label file.
 * @param single Only convert a single path, and do not use sentinel values.
 * @param path_to_label Treat input as a path and output a label.
 * @param label_to_path Treat input as a label and output a path.
 * @param connect Connect path; input and output must be paths; requires subject and hemi.
 * @param fill Fill already closed, connected path; input must be a path, output must be a label; requires subject, hemi, and seedvtx.
 * @param confillx Connect and fill path; input must be a path, output must be a label; requires surface_fname and seedvtx.
 * @param confill Connect and fill path; input must be a path, output must be a label; requires subject, hemi, and seedvtx.
 * @param source_file The path file, if path2label.
 * @param dest_file The label file, if path2label.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPath2labelOutputs`).
 */
function mri_path2label(
    input_file: string,
    output_file: string,
    single: boolean = false,
    path_to_label: boolean = false,
    label_to_path: boolean = false,
    connect: Array<string> | null = null,
    fill: Array<string> | null = null,
    confillx: Array<string> | null = null,
    confill: Array<string> | null = null,
    source_file: string | null = null,
    dest_file: string | null = null,
    runner: Runner | null = null,
): MriPath2labelOutputs {
    const params = mri_path2label_params(input_file, output_file, single, path_to_label, label_to_path, connect, fill, confillx, confill, source_file, dest_file)
    return mri_path2label_execute(params, runner);
}


export {
      MRI_PATH2LABEL_METADATA,
      MriPath2labelOutputs,
      MriPath2labelParameters,
      mri_path2label,
      mri_path2label_execute,
      mri_path2label_params,
};
