// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APPLYXFM4_D_METADATA: Metadata = {
    id: "7c7a426f45ad4adab9a2ca0d47e1a4c6082435c0.boutiques",
    name: "applyxfm4D",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Applyxfm4DParameters {
    "@type": "fsl.applyxfm4D";
    "input_volume": InputPathType;
    "ref_volume": InputPathType;
    "output_volume": string;
    "transformation_matrix": string;
    "interpolation_method"?: string | null | undefined;
    "single_matrix_flag": boolean;
    "four_digit_flag": boolean;
    "user_prefix"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.applyxfm4D": applyxfm4_d_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.applyxfm4D": applyxfm4_d_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `applyxfm4_d(...)`.
 *
 * @interface
 */
interface Applyxfm4DOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Transformed 4D volume output
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input 4D volume (e.g. img.nii.gz)
 * @param ref_volume Reference volume (e.g. ref.nii.gz)
 * @param output_volume Output volume after applying transformation (e.g. output.nii.gz)
 * @param transformation_matrix Transformation matrix file or directory
 * @param interpolation_method Interpolation method; options are nearestneighbour (or nn), trilinear, spline, sinc; default is sinc
 * @param single_matrix_flag Flag to specify a single transformation matrix
 * @param four_digit_flag Flag to use four digits in naming files
 * @param user_prefix User-defined prefix for output files
 *
 * @returns Parameter dictionary
 */
function applyxfm4_d_params(
    input_volume: InputPathType,
    ref_volume: InputPathType,
    output_volume: string,
    transformation_matrix: string,
    interpolation_method: string | null = null,
    single_matrix_flag: boolean = false,
    four_digit_flag: boolean = false,
    user_prefix: string | null = null,
): Applyxfm4DParameters {
    const params = {
        "@type": "fsl.applyxfm4D" as const,
        "input_volume": input_volume,
        "ref_volume": ref_volume,
        "output_volume": output_volume,
        "transformation_matrix": transformation_matrix,
        "single_matrix_flag": single_matrix_flag,
        "four_digit_flag": four_digit_flag,
    };
    if (interpolation_method !== null) {
        params["interpolation_method"] = interpolation_method;
    }
    if (user_prefix !== null) {
        params["user_prefix"] = user_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function applyxfm4_d_cargs(
    params: Applyxfm4DParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("applyxfm4D");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(execution.inputFile((params["ref_volume"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    cargs.push((params["transformation_matrix"] ?? null));
    if ((params["interpolation_method"] ?? null) !== null) {
        cargs.push(
            "--interp, -interp",
            (params["interpolation_method"] ?? null)
        );
    }
    if ((params["single_matrix_flag"] ?? null)) {
        cargs.push("--singlematrix, -singlematrix");
    }
    if ((params["four_digit_flag"] ?? null)) {
        cargs.push("--fourdigit, -fourdigit");
    }
    if ((params["user_prefix"] ?? null) !== null) {
        cargs.push(
            "--userprefix, -userprefix",
            (params["user_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function applyxfm4_d_outputs(
    params: Applyxfm4DParameters,
    execution: Execution,
): Applyxfm4DOutputs {
    const ret: Applyxfm4DOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


/**
 * applyxfm4D
 *
 * Applies 4D transformation matrices to 4D volumes.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Applyxfm4DOutputs`).
 */
function applyxfm4_d_execute(
    params: Applyxfm4DParameters,
    runner: Runner | null = null,
): Applyxfm4DOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APPLYXFM4_D_METADATA);
    params = execution.params(params)
    const cargs = applyxfm4_d_cargs(params, execution)
    const ret = applyxfm4_d_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * applyxfm4D
 *
 * Applies 4D transformation matrices to 4D volumes.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_volume Input 4D volume (e.g. img.nii.gz)
 * @param ref_volume Reference volume (e.g. ref.nii.gz)
 * @param output_volume Output volume after applying transformation (e.g. output.nii.gz)
 * @param transformation_matrix Transformation matrix file or directory
 * @param interpolation_method Interpolation method; options are nearestneighbour (or nn), trilinear, spline, sinc; default is sinc
 * @param single_matrix_flag Flag to specify a single transformation matrix
 * @param four_digit_flag Flag to use four digits in naming files
 * @param user_prefix User-defined prefix for output files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Applyxfm4DOutputs`).
 */
function applyxfm4_d(
    input_volume: InputPathType,
    ref_volume: InputPathType,
    output_volume: string,
    transformation_matrix: string,
    interpolation_method: string | null = null,
    single_matrix_flag: boolean = false,
    four_digit_flag: boolean = false,
    user_prefix: string | null = null,
    runner: Runner | null = null,
): Applyxfm4DOutputs {
    const params = applyxfm4_d_params(input_volume, ref_volume, output_volume, transformation_matrix, interpolation_method, single_matrix_flag, four_digit_flag, user_prefix)
    return applyxfm4_d_execute(params, runner);
}


export {
      APPLYXFM4_D_METADATA,
      Applyxfm4DOutputs,
      Applyxfm4DParameters,
      applyxfm4_d,
      applyxfm4_d_execute,
      applyxfm4_d_params,
};
