// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MBA_METADATA: Metadata = {
    id: "f8f6f30c2f9a76d32aa2209cf855c9214666a8bc.boutiques",
    name: "MBA",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MbaParameters {
    "@type": "afni.MBA";
    "prefix": string;
    "chains"?: number | null | undefined;
    "iterations"?: number | null | undefined;
    "model"?: string | null | undefined;
    "eoi"?: string | null | undefined;
    "data_table": InputPathType;
    "cvars"?: string | null | undefined;
    "qvars"?: string | null | undefined;
    "qcvar"?: string | null | undefined;
    "stdz"?: string | null | undefined;
    "wcp"?: number | null | undefined;
    "disty"?: string | null | undefined;
    "se"?: string | null | undefined;
    "dbgArgs": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.MBA": mba_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.MBA": mba_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mba(...)`.
 *
 * @interface
 */
interface MbaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output text file storing inference information
     */
    output_txt: OutputPathType;
    /**
     * R data file for post hoc processing and plotting
     */
    output_rdata: OutputPathType;
    /**
     * Matrix plot visualization of analysis
     */
    matrix_plot: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Prefix for output file names
 * @param data_table Specify the data structure in a table of long format
 * @param chains Specify the number of Markov chains
 * @param iterations Specify the number of iterations per Markov chain
 * @param model Specify the effects associated with explanatory variables
 * @param eoi Identify effects of interest in the output
 * @param cvars Identify categorical (qualitative) variables
 * @param qvars Identify quantitative variables (or covariates)
 * @param qcvar Identify comparisons of interest between quantitative variables
 * @param stdz Identify quantitative variables (or covariates) to be standardized
 * @param wcp Invoke within-chain parallelization to speed up runtime
 * @param disty Specify the distribution for the response variable
 * @param se Specify the column name that designates the standard error for the response variable
 * @param dbg_args Enable R to save the parameters in a file called .MBA.dbg.AFNI.args for debugging purposes
 * @param help Show help message
 *
 * @returns Parameter dictionary
 */
function mba_params(
    prefix: string,
    data_table: InputPathType,
    chains: number | null = null,
    iterations: number | null = null,
    model: string | null = null,
    eoi: string | null = null,
    cvars: string | null = null,
    qvars: string | null = null,
    qcvar: string | null = null,
    stdz: string | null = null,
    wcp: number | null = null,
    disty: string | null = null,
    se: string | null = null,
    dbg_args: boolean = false,
    help: boolean = false,
): MbaParameters {
    const params = {
        "@type": "afni.MBA" as const,
        "prefix": prefix,
        "data_table": data_table,
        "dbgArgs": dbg_args,
        "help": help,
    };
    if (chains !== null) {
        params["chains"] = chains;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (model !== null) {
        params["model"] = model;
    }
    if (eoi !== null) {
        params["eoi"] = eoi;
    }
    if (cvars !== null) {
        params["cvars"] = cvars;
    }
    if (qvars !== null) {
        params["qvars"] = qvars;
    }
    if (qcvar !== null) {
        params["qcvar"] = qcvar;
    }
    if (stdz !== null) {
        params["stdz"] = stdz;
    }
    if (wcp !== null) {
        params["wcp"] = wcp;
    }
    if (disty !== null) {
        params["disty"] = disty;
    }
    if (se !== null) {
        params["se"] = se;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mba_cargs(
    params: MbaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("MBA");
    cargs.push((params["prefix"] ?? null));
    if ((params["chains"] ?? null) !== null) {
        cargs.push(
            "-chains",
            String((params["chains"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-iterations",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "-model",
            (params["model"] ?? null)
        );
    }
    if ((params["eoi"] ?? null) !== null) {
        cargs.push(
            "-EOI",
            (params["eoi"] ?? null)
        );
    }
    cargs.push(
        "-dataTable",
        execution.inputFile((params["data_table"] ?? null))
    );
    if ((params["cvars"] ?? null) !== null) {
        cargs.push(
            "-cVars",
            (params["cvars"] ?? null)
        );
    }
    if ((params["qvars"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["qvars"] ?? null)
        );
    }
    if ((params["qcvar"] ?? null) !== null) {
        cargs.push(
            "-qContr",
            (params["qcvar"] ?? null)
        );
    }
    if ((params["stdz"] ?? null) !== null) {
        cargs.push(
            "-stdz",
            (params["stdz"] ?? null)
        );
    }
    if ((params["wcp"] ?? null) !== null) {
        cargs.push(
            "-WCP",
            String((params["wcp"] ?? null))
        );
    }
    if ((params["disty"] ?? null) !== null) {
        cargs.push(
            "-distY",
            (params["disty"] ?? null)
        );
    }
    if ((params["se"] ?? null) !== null) {
        cargs.push(
            "-se",
            (params["se"] ?? null)
        );
    }
    if ((params["dbgArgs"] ?? null)) {
        cargs.push("-dbgArgs");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mba_outputs(
    params: MbaParameters,
    execution: Execution,
): MbaOutputs {
    const ret: MbaOutputs = {
        root: execution.outputFile("."),
        output_txt: execution.outputFile([(params["prefix"] ?? null), ".txt"].join('')),
        output_rdata: execution.outputFile([(params["prefix"] ?? null), ".RData"].join('')),
        matrix_plot: execution.outputFile([(params["prefix"] ?? null), "_matrixplot.png"].join('')),
    };
    return ret;
}


/**
 * Matrix-Based Analysis Program through Bayesian Multilevel Modeling.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MbaOutputs`).
 */
function mba_execute(
    params: MbaParameters,
    runner: Runner | null = null,
): MbaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MBA_METADATA);
    params = execution.params(params)
    const cargs = mba_cargs(params, execution)
    const ret = mba_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Matrix-Based Analysis Program through Bayesian Multilevel Modeling.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Prefix for output file names
 * @param data_table Specify the data structure in a table of long format
 * @param chains Specify the number of Markov chains
 * @param iterations Specify the number of iterations per Markov chain
 * @param model Specify the effects associated with explanatory variables
 * @param eoi Identify effects of interest in the output
 * @param cvars Identify categorical (qualitative) variables
 * @param qvars Identify quantitative variables (or covariates)
 * @param qcvar Identify comparisons of interest between quantitative variables
 * @param stdz Identify quantitative variables (or covariates) to be standardized
 * @param wcp Invoke within-chain parallelization to speed up runtime
 * @param disty Specify the distribution for the response variable
 * @param se Specify the column name that designates the standard error for the response variable
 * @param dbg_args Enable R to save the parameters in a file called .MBA.dbg.AFNI.args for debugging purposes
 * @param help Show help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MbaOutputs`).
 */
function mba(
    prefix: string,
    data_table: InputPathType,
    chains: number | null = null,
    iterations: number | null = null,
    model: string | null = null,
    eoi: string | null = null,
    cvars: string | null = null,
    qvars: string | null = null,
    qcvar: string | null = null,
    stdz: string | null = null,
    wcp: number | null = null,
    disty: string | null = null,
    se: string | null = null,
    dbg_args: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): MbaOutputs {
    const params = mba_params(prefix, data_table, chains, iterations, model, eoi, cvars, qvars, qcvar, stdz, wcp, disty, se, dbg_args, help)
    return mba_execute(params, runner);
}


export {
      MBA_METADATA,
      MbaOutputs,
      MbaParameters,
      mba,
      mba_execute,
      mba_params,
};
