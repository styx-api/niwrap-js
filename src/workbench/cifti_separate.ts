// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_SEPARATE_METADATA: Metadata = {
    id: "1d308177c07e5b1ae6f2b81d40dccff5e71e5dbf.boutiques",
    name: "cifti-separate",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiSeparateVolumeAllParameters {
    "@type": "workbench.cifti-separate.volume_all";
    "volume_out": string;
    "opt_roi_roi_out"?: string | null | undefined;
    "opt_label_label_out"?: string | null | undefined;
    "opt_crop": boolean;
}


interface CiftiSeparateLabelParameters {
    "@type": "workbench.cifti-separate.label";
    "structure": string;
    "label_out": string;
    "opt_roi_roi_out"?: string | null | undefined;
}


interface CiftiSeparateMetricParameters {
    "@type": "workbench.cifti-separate.metric";
    "structure": string;
    "metric_out": string;
    "opt_roi_roi_out"?: string | null | undefined;
}


interface CiftiSeparateVolumeParameters {
    "@type": "workbench.cifti-separate.volume";
    "structure": string;
    "volume_out": string;
    "opt_roi_roi_out"?: string | null | undefined;
    "opt_crop": boolean;
}


interface CiftiSeparateParameters {
    "@type": "workbench.cifti-separate";
    "cifti_in": InputPathType;
    "direction": string;
    "volume_all"?: CiftiSeparateVolumeAllParameters | null | undefined;
    "label"?: Array<CiftiSeparateLabelParameters> | null | undefined;
    "metric"?: Array<CiftiSeparateMetricParameters> | null | undefined;
    "volume"?: Array<CiftiSeparateVolumeParameters> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-separate": cifti_separate_cargs,
        "workbench.cifti-separate.volume_all": cifti_separate_volume_all_cargs,
        "workbench.cifti-separate.label": cifti_separate_label_cargs,
        "workbench.cifti-separate.metric": cifti_separate_metric_cargs,
        "workbench.cifti-separate.volume": cifti_separate_volume_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-separate": cifti_separate_outputs,
        "workbench.cifti-separate.volume_all": cifti_separate_volume_all_outputs,
        "workbench.cifti-separate.label": cifti_separate_label_outputs,
        "workbench.cifti-separate.metric": cifti_separate_metric_outputs,
        "workbench.cifti-separate.volume": cifti_separate_volume_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `CiftiSeparateVolumeAllParameters | null(...)`.
 *
 * @interface
 */
interface CiftiSeparateVolumeAllOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
    /**
     * also output the roi of which voxels have data: the roi output volume
     */
    opt_roi_roi_out: OutputPathType | null;
    /**
     * output a volume label file indicating the location of structures: the label output volume
     */
    opt_label_label_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param volume_out the output volume
 * @param opt_roi_roi_out also output the roi of which voxels have data: the roi output volume
 * @param opt_label_label_out output a volume label file indicating the location of structures: the label output volume
 * @param opt_crop crop volume to the size of the data rather than using the original volume size
 *
 * @returns Parameter dictionary
 */
function cifti_separate_volume_all_params(
    volume_out: string,
    opt_roi_roi_out: string | null = null,
    opt_label_label_out: string | null = null,
    opt_crop: boolean = false,
): CiftiSeparateVolumeAllParameters {
    const params = {
        "@type": "workbench.cifti-separate.volume_all" as const,
        "volume_out": volume_out,
        "opt_crop": opt_crop,
    };
    if (opt_roi_roi_out !== null) {
        params["opt_roi_roi_out"] = opt_roi_roi_out;
    }
    if (opt_label_label_out !== null) {
        params["opt_label_label_out"] = opt_label_label_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_separate_volume_all_cargs(
    params: CiftiSeparateVolumeAllParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume-all");
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_roi_roi_out"] ?? null) !== null) {
        cargs.push(
            "-roi",
            (params["opt_roi_roi_out"] ?? null)
        );
    }
    if ((params["opt_label_label_out"] ?? null) !== null) {
        cargs.push(
            "-label",
            (params["opt_label_label_out"] ?? null)
        );
    }
    if ((params["opt_crop"] ?? null)) {
        cargs.push("-crop");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_separate_volume_all_outputs(
    params: CiftiSeparateVolumeAllParameters,
    execution: Execution,
): CiftiSeparateVolumeAllOutputs {
    const ret: CiftiSeparateVolumeAllOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
        opt_roi_roi_out: ((params["opt_roi_roi_out"] ?? null) !== null) ? execution.outputFile([(params["opt_roi_roi_out"] ?? null)].join('')) : null,
        opt_label_label_out: ((params["opt_label_label_out"] ?? null) !== null) ? execution.outputFile([(params["opt_label_label_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Output object returned when calling `Array<CiftiSeparateLabelParameters> | null(...)`.
 *
 * @interface
 */
interface CiftiSeparateLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output label file
     */
    label_out: OutputPathType;
    /**
     * also output the roi of which vertices have data: the roi output metric
     */
    opt_roi_roi_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param structure the structure to output
 * @param label_out the output label file
 * @param opt_roi_roi_out also output the roi of which vertices have data: the roi output metric
 *
 * @returns Parameter dictionary
 */
function cifti_separate_label_params(
    structure: string,
    label_out: string,
    opt_roi_roi_out: string | null = null,
): CiftiSeparateLabelParameters {
    const params = {
        "@type": "workbench.cifti-separate.label" as const,
        "structure": structure,
        "label_out": label_out,
    };
    if (opt_roi_roi_out !== null) {
        params["opt_roi_roi_out"] = opt_roi_roi_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_separate_label_cargs(
    params: CiftiSeparateLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-label");
    cargs.push((params["structure"] ?? null));
    cargs.push((params["label_out"] ?? null));
    if ((params["opt_roi_roi_out"] ?? null) !== null) {
        cargs.push(
            "-roi",
            (params["opt_roi_roi_out"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_separate_label_outputs(
    params: CiftiSeparateLabelParameters,
    execution: Execution,
): CiftiSeparateLabelOutputs {
    const ret: CiftiSeparateLabelOutputs = {
        root: execution.outputFile("."),
        label_out: execution.outputFile([(params["label_out"] ?? null)].join('')),
        opt_roi_roi_out: ((params["opt_roi_roi_out"] ?? null) !== null) ? execution.outputFile([(params["opt_roi_roi_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Output object returned when calling `Array<CiftiSeparateMetricParameters> | null(...)`.
 *
 * @interface
 */
interface CiftiSeparateMetricOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
    /**
     * also output the roi of which vertices have data: the roi output metric
     */
    opt_roi_roi_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param structure the structure to output
 * @param metric_out the output metric
 * @param opt_roi_roi_out also output the roi of which vertices have data: the roi output metric
 *
 * @returns Parameter dictionary
 */
function cifti_separate_metric_params(
    structure: string,
    metric_out: string,
    opt_roi_roi_out: string | null = null,
): CiftiSeparateMetricParameters {
    const params = {
        "@type": "workbench.cifti-separate.metric" as const,
        "structure": structure,
        "metric_out": metric_out,
    };
    if (opt_roi_roi_out !== null) {
        params["opt_roi_roi_out"] = opt_roi_roi_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_separate_metric_cargs(
    params: CiftiSeparateMetricParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-metric");
    cargs.push((params["structure"] ?? null));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_roi_roi_out"] ?? null) !== null) {
        cargs.push(
            "-roi",
            (params["opt_roi_roi_out"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_separate_metric_outputs(
    params: CiftiSeparateMetricParameters,
    execution: Execution,
): CiftiSeparateMetricOutputs {
    const ret: CiftiSeparateMetricOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
        opt_roi_roi_out: ((params["opt_roi_roi_out"] ?? null) !== null) ? execution.outputFile([(params["opt_roi_roi_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Output object returned when calling `Array<CiftiSeparateVolumeParameters> | null(...)`.
 *
 * @interface
 */
interface CiftiSeparateVolumeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
    /**
     * also output the roi of which voxels have data: the roi output volume
     */
    opt_roi_roi_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param structure the structure to output
 * @param volume_out the output volume
 * @param opt_roi_roi_out also output the roi of which voxels have data: the roi output volume
 * @param opt_crop crop volume to the size of the component rather than using the original volume size
 *
 * @returns Parameter dictionary
 */
function cifti_separate_volume_params(
    structure: string,
    volume_out: string,
    opt_roi_roi_out: string | null = null,
    opt_crop: boolean = false,
): CiftiSeparateVolumeParameters {
    const params = {
        "@type": "workbench.cifti-separate.volume" as const,
        "structure": structure,
        "volume_out": volume_out,
        "opt_crop": opt_crop,
    };
    if (opt_roi_roi_out !== null) {
        params["opt_roi_roi_out"] = opt_roi_roi_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_separate_volume_cargs(
    params: CiftiSeparateVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-volume");
    cargs.push((params["structure"] ?? null));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_roi_roi_out"] ?? null) !== null) {
        cargs.push(
            "-roi",
            (params["opt_roi_roi_out"] ?? null)
        );
    }
    if ((params["opt_crop"] ?? null)) {
        cargs.push("-crop");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_separate_volume_outputs(
    params: CiftiSeparateVolumeParameters,
    execution: Execution,
): CiftiSeparateVolumeOutputs {
    const ret: CiftiSeparateVolumeOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
        opt_roi_roi_out: ((params["opt_roi_roi_out"] ?? null) !== null) ? execution.outputFile([(params["opt_roi_roi_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Output object returned when calling `cifti_separate(...)`.
 *
 * @interface
 */
interface CiftiSeparateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `cifti_separate_volume_all_outputs`.
     */
    volume_all: CiftiSeparateVolumeAllOutputs | null;
    /**
     * Outputs from `cifti_separate_label_outputs`.This is a list of outputs with the same length and order as the inputs.
     */
    label: Array<CiftiSeparateLabelOutputs> | null;
    /**
     * Outputs from `cifti_separate_metric_outputs`.This is a list of outputs with the same length and order as the inputs.
     */
    metric: Array<CiftiSeparateMetricOutputs> | null;
    /**
     * Outputs from `cifti_separate_volume_outputs`.This is a list of outputs with the same length and order as the inputs.
     */
    volume: Array<CiftiSeparateVolumeOutputs> | null;
}


/**
 * Build parameters.
 *
 * @param cifti_in the cifti to separate a component of
 * @param direction which direction to separate into components, ROW or COLUMN
 * @param volume_all separate all volume structures into a volume file
 * @param label separate a surface model into a surface label file
 * @param metric separate a surface model into a metric file
 * @param volume separate a volume structure into a volume file
 *
 * @returns Parameter dictionary
 */
function cifti_separate_params(
    cifti_in: InputPathType,
    direction: string,
    volume_all: CiftiSeparateVolumeAllParameters | null = null,
    label: Array<CiftiSeparateLabelParameters> | null = null,
    metric: Array<CiftiSeparateMetricParameters> | null = null,
    volume: Array<CiftiSeparateVolumeParameters> | null = null,
): CiftiSeparateParameters {
    const params = {
        "@type": "workbench.cifti-separate" as const,
        "cifti_in": cifti_in,
        "direction": direction,
    };
    if (volume_all !== null) {
        params["volume_all"] = volume_all;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (metric !== null) {
        params["metric"] = metric;
    }
    if (volume !== null) {
        params["volume"] = volume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_separate_cargs(
    params: CiftiSeparateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-separate");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["direction"] ?? null));
    if ((params["volume_all"] ?? null) !== null) {
        cargs.push(...dynCargs((params["volume_all"] ?? null)["@type"])((params["volume_all"] ?? null), execution));
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(...(params["label"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["metric"] ?? null) !== null) {
        cargs.push(...(params["metric"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["volume"] ?? null) !== null) {
        cargs.push(...(params["volume"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_separate_outputs(
    params: CiftiSeparateParameters,
    execution: Execution,
): CiftiSeparateOutputs {
    const ret: CiftiSeparateOutputs = {
        root: execution.outputFile("."),
        volume_all: (params["volume_all"] ?? null) ? (dynOutputs((params["volume_all"] ?? null)["@type"])?.((params["volume_all"] ?? null), execution) ?? null) : null,
        label: (params["label"] ?? null) ? (params["label"] ?? null).map(i => dynOutputs(i["@type"])?.(i, execution) ?? null) : null,
        metric: (params["metric"] ?? null) ? (params["metric"] ?? null).map(i => dynOutputs(i["@type"])?.(i, execution) ?? null) : null,
        volume: (params["volume"] ?? null) ? (params["volume"] ?? null).map(i => dynOutputs(i["@type"])?.(i, execution) ?? null) : null,
    };
    return ret;
}


/**
 * cifti-separate
 *
 * Write a cifti structure as metric, label or volume.
 *
 * For dtseries, dscalar, and dlabel, use COLUMN for <direction>, and if you have a symmetric dconn, COLUMN is more efficient.
 *
 * You must specify at least one of -metric, -volume-all, -volume, or -label for this command to do anything.  Output volumes will spatially line up with their original positions, whether or not they are cropped.  Volume files produced by separating a dlabel file, or from the -label suboption of -volume-all, will be label volumes, see -volume-help.
 *
 * For each <structure> argument, use one of the following strings:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiSeparateOutputs`).
 */
function cifti_separate_execute(
    params: CiftiSeparateParameters,
    runner: Runner | null = null,
): CiftiSeparateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_SEPARATE_METADATA);
    params = execution.params(params)
    const cargs = cifti_separate_cargs(params, execution)
    const ret = cifti_separate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-separate
 *
 * Write a cifti structure as metric, label or volume.
 *
 * For dtseries, dscalar, and dlabel, use COLUMN for <direction>, and if you have a symmetric dconn, COLUMN is more efficient.
 *
 * You must specify at least one of -metric, -volume-all, -volume, or -label for this command to do anything.  Output volumes will spatially line up with their original positions, whether or not they are cropped.  Volume files produced by separating a dlabel file, or from the -label suboption of -volume-all, will be label volumes, see -volume-help.
 *
 * For each <structure> argument, use one of the following strings:
 *
 * CORTEX_LEFT
 * CORTEX_RIGHT
 * CEREBELLUM
 * ACCUMBENS_LEFT
 * ACCUMBENS_RIGHT
 * ALL_GREY_MATTER
 * ALL_WHITE_MATTER
 * AMYGDALA_LEFT
 * AMYGDALA_RIGHT
 * BRAIN_STEM
 * CAUDATE_LEFT
 * CAUDATE_RIGHT
 * CEREBELLAR_WHITE_MATTER_LEFT
 * CEREBELLAR_WHITE_MATTER_RIGHT
 * CEREBELLUM_LEFT
 * CEREBELLUM_RIGHT
 * CEREBRAL_WHITE_MATTER_LEFT
 * CEREBRAL_WHITE_MATTER_RIGHT
 * CORTEX
 * DIENCEPHALON_VENTRAL_LEFT
 * DIENCEPHALON_VENTRAL_RIGHT
 * HIPPOCAMPUS_LEFT
 * HIPPOCAMPUS_RIGHT
 * INVALID
 * OTHER
 * OTHER_GREY_MATTER
 * OTHER_WHITE_MATTER
 * PALLIDUM_LEFT
 * PALLIDUM_RIGHT
 * PUTAMEN_LEFT
 * PUTAMEN_RIGHT
 * THALAMUS_LEFT
 * THALAMUS_RIGHT.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the cifti to separate a component of
 * @param direction which direction to separate into components, ROW or COLUMN
 * @param volume_all separate all volume structures into a volume file
 * @param label separate a surface model into a surface label file
 * @param metric separate a surface model into a metric file
 * @param volume separate a volume structure into a volume file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiSeparateOutputs`).
 */
function cifti_separate(
    cifti_in: InputPathType,
    direction: string,
    volume_all: CiftiSeparateVolumeAllParameters | null = null,
    label: Array<CiftiSeparateLabelParameters> | null = null,
    metric: Array<CiftiSeparateMetricParameters> | null = null,
    volume: Array<CiftiSeparateVolumeParameters> | null = null,
    runner: Runner | null = null,
): CiftiSeparateOutputs {
    const params = cifti_separate_params(cifti_in, direction, volume_all, label, metric, volume)
    return cifti_separate_execute(params, runner);
}


export {
      CIFTI_SEPARATE_METADATA,
      CiftiSeparateLabelOutputs,
      CiftiSeparateLabelParameters,
      CiftiSeparateMetricOutputs,
      CiftiSeparateMetricParameters,
      CiftiSeparateOutputs,
      CiftiSeparateParameters,
      CiftiSeparateVolumeAllOutputs,
      CiftiSeparateVolumeAllParameters,
      CiftiSeparateVolumeOutputs,
      CiftiSeparateVolumeParameters,
      cifti_separate,
      cifti_separate_execute,
      cifti_separate_label_params,
      cifti_separate_metric_params,
      cifti_separate_params,
      cifti_separate_volume_all_params,
      cifti_separate_volume_params,
};
