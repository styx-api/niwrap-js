// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_PRETESS_METADATA: Metadata = {
    id: "c68ce0cb43441ea076cb58f756a347937fe174be.boutiques",
    name: "mri_pretess",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriPretessParameters {
    "@type": "freesurfer.mri_pretess";
    "filledvol": InputPathType;
    "labelstring": string;
    "normvol": InputPathType;
    "newfilledvol": string;
    "debug_voxel"?: Array<number> | null | undefined;
    "nocorners": boolean;
    "write": boolean;
    "keep": boolean;
    "test": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_pretess": mri_pretess_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_pretess": mri_pretess_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_pretess(...)`.
 *
 * @interface
 */
interface MriPretessOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output new filled volume
     */
    out_newfilledvol: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filledvol Input filled volume, usually wm.mgz
 * @param labelstring Label string, usually wm
 * @param normvol Normalization volume, usually norm.mgz
 * @param newfilledvol New filled volume output, usually wm.mgz
 * @param debug_voxel Specify the voxel to debug with coordinates C R S
 * @param nocorners No removal of corner configurations in addition to edge ones
 * @param write Turn on diagnostic writing
 * @param keep Keep WM edits
 * @param test Adds a voxel to test removal by mri_pretess, retained with -keep. Output not saved.
 *
 * @returns Parameter dictionary
 */
function mri_pretess_params(
    filledvol: InputPathType,
    labelstring: string,
    normvol: InputPathType,
    newfilledvol: string,
    debug_voxel: Array<number> | null = null,
    nocorners: boolean = false,
    write: boolean = false,
    keep: boolean = false,
    test: boolean = false,
): MriPretessParameters {
    const params = {
        "@type": "freesurfer.mri_pretess" as const,
        "filledvol": filledvol,
        "labelstring": labelstring,
        "normvol": normvol,
        "newfilledvol": newfilledvol,
        "nocorners": nocorners,
        "write": write,
        "keep": keep,
        "test": test,
    };
    if (debug_voxel !== null) {
        params["debug_voxel"] = debug_voxel;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_pretess_cargs(
    params: MriPretessParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_pretess");
    cargs.push(execution.inputFile((params["filledvol"] ?? null)));
    cargs.push((params["labelstring"] ?? null));
    cargs.push(execution.inputFile((params["normvol"] ?? null)));
    cargs.push((params["newfilledvol"] ?? null));
    if ((params["debug_voxel"] ?? null) !== null) {
        cargs.push(
            "-debug_voxel",
            ...(params["debug_voxel"] ?? null).map(String)
        );
    }
    if ((params["nocorners"] ?? null)) {
        cargs.push("-nocorners");
    }
    if ((params["write"] ?? null)) {
        cargs.push("-w");
    }
    if ((params["keep"] ?? null)) {
        cargs.push("-keep");
    }
    if ((params["test"] ?? null)) {
        cargs.push("-test");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_pretess_outputs(
    params: MriPretessParameters,
    execution: Execution,
): MriPretessOutputs {
    const ret: MriPretessOutputs = {
        root: execution.outputFile("."),
        out_newfilledvol: execution.outputFile([(params["newfilledvol"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_pretess
 *
 * Tool to modify WM segmentation so that all neighbors of WM voxels have a common face.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPretessOutputs`).
 */
function mri_pretess_execute(
    params: MriPretessParameters,
    runner: Runner | null = null,
): MriPretessOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_PRETESS_METADATA);
    params = execution.params(params)
    const cargs = mri_pretess_cargs(params, execution)
    const ret = mri_pretess_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_pretess
 *
 * Tool to modify WM segmentation so that all neighbors of WM voxels have a common face.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param filledvol Input filled volume, usually wm.mgz
 * @param labelstring Label string, usually wm
 * @param normvol Normalization volume, usually norm.mgz
 * @param newfilledvol New filled volume output, usually wm.mgz
 * @param debug_voxel Specify the voxel to debug with coordinates C R S
 * @param nocorners No removal of corner configurations in addition to edge ones
 * @param write Turn on diagnostic writing
 * @param keep Keep WM edits
 * @param test Adds a voxel to test removal by mri_pretess, retained with -keep. Output not saved.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriPretessOutputs`).
 */
function mri_pretess(
    filledvol: InputPathType,
    labelstring: string,
    normvol: InputPathType,
    newfilledvol: string,
    debug_voxel: Array<number> | null = null,
    nocorners: boolean = false,
    write: boolean = false,
    keep: boolean = false,
    test: boolean = false,
    runner: Runner | null = null,
): MriPretessOutputs {
    const params = mri_pretess_params(filledvol, labelstring, normvol, newfilledvol, debug_voxel, nocorners, write, keep, test)
    return mri_pretess_execute(params, runner);
}


export {
      MRI_PRETESS_METADATA,
      MriPretessOutputs,
      MriPretessParameters,
      mri_pretess,
      mri_pretess_execute,
      mri_pretess_params,
};
