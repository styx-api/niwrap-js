// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_AC_SH_METADATA: Metadata = {
    id: "287622351d46590c1391cebf35d45dbab7c6ab7e.boutiques",
    name: "dmri_ac.sh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriAcShParameters {
    "@type"?: "freesurfer/dmri_ac.sh";
    "additional_args"?: string | null | undefined;
}
type DmriAcShParametersTagged = Required<Pick<DmriAcShParameters, '@type'>> & DmriAcShParameters;


/**
 * Output object returned when calling `DmriAcShParameters(...)`.
 *
 * @interface
 */
interface DmriAcShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param additional_args Additional arguments for dmri_ac.sh script.
 *
 * @returns Parameter dictionary
 */
function dmri_ac_sh_params(
    additional_args: string | null = null,
): DmriAcShParametersTagged {
    const params = {
        "@type": "freesurfer/dmri_ac.sh" as const,
    };
    if (additional_args !== null) {
        params["additional_args"] = additional_args;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_ac_sh_cargs(
    params: DmriAcShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_ac.sh");
    if ((params["additional_args"] ?? null) !== null) {
        cargs.push((params["additional_args"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_ac_sh_outputs(
    params: DmriAcShParameters,
    execution: Execution,
): DmriAcShOutputs {
    const ret: DmriAcShOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * dmri_ac.sh
 *
 * A script related to diffusion MRI processing in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriAcShOutputs`).
 */
function dmri_ac_sh_execute(
    params: DmriAcShParameters,
    runner: Runner | null = null,
): DmriAcShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_AC_SH_METADATA);
    params = execution.params(params)
    const cargs = dmri_ac_sh_cargs(params, execution)
    const ret = dmri_ac_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_ac.sh
 *
 * A script related to diffusion MRI processing in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param additional_args Additional arguments for dmri_ac.sh script.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriAcShOutputs`).
 */
function dmri_ac_sh(
    additional_args: string | null = null,
    runner: Runner | null = null,
): DmriAcShOutputs {
    const params = dmri_ac_sh_params(additional_args)
    return dmri_ac_sh_execute(params, runner);
}


export {
      DMRI_AC_SH_METADATA,
      DmriAcShOutputs,
      dmri_ac_sh,
      dmri_ac_sh_execute,
      dmri_ac_sh_params,
};
