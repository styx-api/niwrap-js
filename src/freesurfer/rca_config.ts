// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RCA_CONFIG_METADATA: Metadata = {
    id: "46eae30104e8ee7e67f818e2a5df2c8456668ef9.boutiques",
    name: "rca-config",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RcaConfigParameters {
    "@type": "freesurfer.rca-config";
    "source_config": InputPathType;
    "updated_config": InputPathType;
    "unknown_args_file": InputPathType;
    "args"?: Array<string> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.rca-config": rca_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rca_config(...)`.
 *
 * @interface
 */
interface RcaConfigOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source_config Path to the source configuration file
 * @param updated_config Path to the updated configuration file
 * @param unknown_args_file Path to the file where unknown arguments are recorded
 * @param args Additional arguments to be processed
 *
 * @returns Parameter dictionary
 */
function rca_config_params(
    source_config: InputPathType,
    updated_config: InputPathType,
    unknown_args_file: InputPathType,
    args: Array<string> | null = null,
): RcaConfigParameters {
    const params = {
        "@type": "freesurfer.rca-config" as const,
        "source_config": source_config,
        "updated_config": updated_config,
        "unknown_args_file": unknown_args_file,
    };
    if (args !== null) {
        params["args"] = args;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rca_config_cargs(
    params: RcaConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rca-config");
    cargs.push(
        "-config",
        execution.inputFile((params["source_config"] ?? null))
    );
    cargs.push(execution.inputFile((params["updated_config"] ?? null)));
    cargs.push(execution.inputFile((params["unknown_args_file"] ?? null)));
    if ((params["args"] ?? null) !== null) {
        cargs.push(...(params["args"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rca_config_outputs(
    params: RcaConfigParameters,
    execution: Execution,
): RcaConfigOutputs {
    const ret: RcaConfigOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * rca-config
 *
 * A command-line tool that processes configuration files and arguments.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RcaConfigOutputs`).
 */
function rca_config_execute(
    params: RcaConfigParameters,
    runner: Runner | null = null,
): RcaConfigOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RCA_CONFIG_METADATA);
    params = execution.params(params)
    const cargs = rca_config_cargs(params, execution)
    const ret = rca_config_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * rca-config
 *
 * A command-line tool that processes configuration files and arguments.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source_config Path to the source configuration file
 * @param updated_config Path to the updated configuration file
 * @param unknown_args_file Path to the file where unknown arguments are recorded
 * @param args Additional arguments to be processed
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RcaConfigOutputs`).
 */
function rca_config(
    source_config: InputPathType,
    updated_config: InputPathType,
    unknown_args_file: InputPathType,
    args: Array<string> | null = null,
    runner: Runner | null = null,
): RcaConfigOutputs {
    const params = rca_config_params(source_config, updated_config, unknown_args_file, args)
    return rca_config_execute(params, runner);
}


export {
      RCA_CONFIG_METADATA,
      RcaConfigOutputs,
      RcaConfigParameters,
      rca_config,
      rca_config_execute,
      rca_config_params,
};
