// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__CHECK_FOR_AFNI_DSET_METADATA: Metadata = {
    id: "ff6f4cebbc73c5968164aafe5e717c47545f280a.boutiques",
    name: "@CheckForAfniDset",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VCheckForAfniDsetParameters {
    "@type"?: "afni/@CheckForAfniDset";
    "dataset_name": string;
}
type VCheckForAfniDsetParametersTagged = Required<Pick<VCheckForAfniDsetParameters, '@type'>> & VCheckForAfniDsetParameters;


/**
 * Output object returned when calling `VCheckForAfniDsetParameters(...)`.
 *
 * @interface
 */
interface VCheckForAfniDsetOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file containing the status code of the dataset
     */
    output_status: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dataset_name Path to the AFNI dataset (e.g., /Data/stuff/Hello+orig.HEAD)
 *
 * @returns Parameter dictionary
 */
function v__check_for_afni_dset_params(
    dataset_name: string,
): VCheckForAfniDsetParametersTagged {
    const params = {
        "@type": "afni/@CheckForAfniDset" as const,
        "dataset_name": dataset_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__check_for_afni_dset_cargs(
    params: VCheckForAfniDsetParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@CheckForAfniDset");
    cargs.push((params["dataset_name"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__check_for_afni_dset_outputs(
    params: VCheckForAfniDsetParameters,
    execution: Execution,
): VCheckForAfniDsetOutputs {
    const ret: VCheckForAfniDsetOutputs = {
        root: execution.outputFile("."),
        output_status: execution.outputFile([(params["dataset_name"] ?? null), "_status.txt"].join('')),
    };
    return ret;
}


/**
 * @CheckForAfniDset
 *
 * Check for the existence of AFNI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VCheckForAfniDsetOutputs`).
 */
function v__check_for_afni_dset_execute(
    params: VCheckForAfniDsetParameters,
    runner: Runner | null = null,
): VCheckForAfniDsetOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__CHECK_FOR_AFNI_DSET_METADATA);
    params = execution.params(params)
    const cargs = v__check_for_afni_dset_cargs(params, execution)
    const ret = v__check_for_afni_dset_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @CheckForAfniDset
 *
 * Check for the existence of AFNI datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset_name Path to the AFNI dataset (e.g., /Data/stuff/Hello+orig.HEAD)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VCheckForAfniDsetOutputs`).
 */
function v__check_for_afni_dset(
    dataset_name: string,
    runner: Runner | null = null,
): VCheckForAfniDsetOutputs {
    const params = v__check_for_afni_dset_params(dataset_name)
    return v__check_for_afni_dset_execute(params, runner);
}


export {
      VCheckForAfniDsetOutputs,
      V__CHECK_FOR_AFNI_DSET_METADATA,
      v__check_for_afni_dset,
      v__check_for_afni_dset_execute,
      v__check_for_afni_dset_params,
};
