// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SPHERE_SUBJECT_METADATA: Metadata = {
    id: "1b01c8e4cff0b051c46d47179ad938955066fe57.boutiques",
    name: "sphere_subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SphereSubjectParameters {
    "__STYXTYPE__": "sphere_subject";
    "input_dir": string;
    "output_file": string;
    "license_file"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sphere_subject": sphere_subject_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "sphere_subject": sphere_subject_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sphere_subject(...)`.
 *
 * @interface
 */
interface SphereSubjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of the sphere_subject execution.
     */
    output_result: OutputPathType;
}


function sphere_subject_params(
    input_dir: string,
    output_file: string,
    license_file: string | null = "/usr/local/freesurfer/.license",
): SphereSubjectParameters {
    /**
     * Build parameters.
    
     * @param input_dir Input subject directory
     * @param output_file Output file for results
     * @param license_file Path to FreeSurfer license file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sphere_subject" as const,
        "input_dir": input_dir,
        "output_file": output_file,
    };
    if (license_file !== null) {
        params["license_file"] = license_file;
    }
    return params;
}


function sphere_subject_cargs(
    params: SphereSubjectParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sphere_subject");
    cargs.push((params["input_dir"] ?? null));
    cargs.push((params["output_file"] ?? null));
    if ((params["license_file"] ?? null) !== null) {
        cargs.push((params["license_file"] ?? null));
    }
    return cargs;
}


function sphere_subject_outputs(
    params: SphereSubjectParameters,
    execution: Execution,
): SphereSubjectOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SphereSubjectOutputs = {
        root: execution.outputFile("."),
        output_result: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function sphere_subject_execute(
    params: SphereSubjectParameters,
    execution: Execution,
): SphereSubjectOutputs {
    /**
     * A FreeSurfer tool for processing subject data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SphereSubjectOutputs`).
     */
    params = execution.params(params)
    const cargs = sphere_subject_cargs(params, execution)
    const ret = sphere_subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sphere_subject(
    input_dir: string,
    output_file: string,
    license_file: string | null = "/usr/local/freesurfer/.license",
    runner: Runner | null = null,
): SphereSubjectOutputs {
    /**
     * A FreeSurfer tool for processing subject data.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_dir Input subject directory
     * @param output_file Output file for results
     * @param license_file Path to FreeSurfer license file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SphereSubjectOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SPHERE_SUBJECT_METADATA);
    const params = sphere_subject_params(input_dir, output_file, license_file)
    return sphere_subject_execute(params, execution);
}


export {
      SPHERE_SUBJECT_METADATA,
      SphereSubjectOutputs,
      SphereSubjectParameters,
      sphere_subject,
      sphere_subject_params,
};
