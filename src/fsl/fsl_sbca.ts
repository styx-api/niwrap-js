// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSL_SBCA_METADATA: Metadata = {
    id: "cc06b4f5a54265c1bb689c623d3ac661e891d615.boutiques",
    name: "fsl_sbca",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslSbcaParameters {
    "@type": "fsl.fsl_sbca";
    "infile": InputPathType;
    "seed": InputPathType;
    "target": InputPathType;
    "out": string;
    "reg_flag": boolean;
    "conf_files"?: Array<InputPathType> | null | undefined;
    "seed_data"?: InputPathType | null | undefined;
    "binarise_flag": boolean;
    "mean_flag": boolean;
    "abs_cc_flag": boolean;
    "order"?: number | null | undefined;
    "out_seeds_flag": boolean;
    "out_seedmask_flag": boolean;
    "out_ttcs_flag": boolean;
    "out_conf_flag": boolean;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fsl_sbca": fsl_sbca_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fsl_sbca": fsl_sbca_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsl_sbca(...)`.
 *
 * @interface
 */
interface FslSbcaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output seed mask image
     */
    output_seed_mask_image: OutputPathType;
    /**
     * Output seed mask image
     */
    output_seed_mask_image_base: OutputPathType;
    /**
     * Output confound time courses
     */
    output_confound_time_courses: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input file name (4D image file)
 * @param seed Seed voxel coordinate or file name of seed mask (3D/4D file)
 * @param target File name of target mask(s) (3D or 4D file)
 * @param out Output file base name
 * @param reg_flag Perform time series regression rather than classification to targets
 * @param conf_files File name (or comma-separated list of file names) for confound ASCII text files
 * @param seed_data File name of 4D data file for the seed
 * @param binarise_flag Binarise spatial maps prior to calculation of time courses
 * @param mean_flag Use mean instead of Eigenvariates for calculation of time courses
 * @param abs_cc_flag Use maximum absolute value instead of maximum value of the cross-correlations
 * @param order Number of Eigenvariates (default 1)
 * @param out_seeds_flag Output seed mask image as <basename>_seeds
 * @param out_seedmask_flag Output seed mask image as <basename>_seedmask
 * @param out_ttcs_flag Output target time courses as <basename>_ttc<X>.txt
 * @param out_conf_flag Output confound time courses as <basename>_confounds.txt
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display help text
 *
 * @returns Parameter dictionary
 */
function fsl_sbca_params(
    infile: InputPathType,
    seed: InputPathType,
    target: InputPathType,
    out: string,
    reg_flag: boolean = false,
    conf_files: Array<InputPathType> | null = null,
    seed_data: InputPathType | null = null,
    binarise_flag: boolean = false,
    mean_flag: boolean = false,
    abs_cc_flag: boolean = false,
    order: number | null = null,
    out_seeds_flag: boolean = false,
    out_seedmask_flag: boolean = false,
    out_ttcs_flag: boolean = false,
    out_conf_flag: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): FslSbcaParameters {
    const params = {
        "@type": "fsl.fsl_sbca" as const,
        "infile": infile,
        "seed": seed,
        "target": target,
        "out": out,
        "reg_flag": reg_flag,
        "binarise_flag": binarise_flag,
        "mean_flag": mean_flag,
        "abs_cc_flag": abs_cc_flag,
        "out_seeds_flag": out_seeds_flag,
        "out_seedmask_flag": out_seedmask_flag,
        "out_ttcs_flag": out_ttcs_flag,
        "out_conf_flag": out_conf_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (conf_files !== null) {
        params["conf_files"] = conf_files;
    }
    if (seed_data !== null) {
        params["seed_data"] = seed_data;
    }
    if (order !== null) {
        params["order"] = order;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fsl_sbca_cargs(
    params: FslSbcaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsl_sbca");
    cargs.push(
        "--in",
        execution.inputFile((params["infile"] ?? null))
    );
    cargs.push(
        "--seed",
        execution.inputFile((params["seed"] ?? null))
    );
    cargs.push(
        "--target",
        execution.inputFile((params["target"] ?? null))
    );
    cargs.push(
        "--out",
        (params["out"] ?? null)
    );
    if ((params["reg_flag"] ?? null)) {
        cargs.push("--reg");
    }
    if ((params["conf_files"] ?? null) !== null) {
        cargs.push(
            "--conf",
            ...(params["conf_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["seed_data"] ?? null) !== null) {
        cargs.push(
            "--seeddata",
            execution.inputFile((params["seed_data"] ?? null))
        );
    }
    if ((params["binarise_flag"] ?? null)) {
        cargs.push("--bin");
    }
    if ((params["mean_flag"] ?? null)) {
        cargs.push("--mean");
    }
    if ((params["abs_cc_flag"] ?? null)) {
        cargs.push("--abscc");
    }
    if ((params["order"] ?? null) !== null) {
        cargs.push(
            "--order",
            String((params["order"] ?? null))
        );
    }
    if ((params["out_seeds_flag"] ?? null)) {
        cargs.push("--out_seeds");
    }
    if ((params["out_seedmask_flag"] ?? null)) {
        cargs.push("--out_seedmask");
    }
    if ((params["out_ttcs_flag"] ?? null)) {
        cargs.push("--out_ttcs");
    }
    if ((params["out_conf_flag"] ?? null)) {
        cargs.push("--out_conf");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fsl_sbca_outputs(
    params: FslSbcaParameters,
    execution: Execution,
): FslSbcaOutputs {
    const ret: FslSbcaOutputs = {
        root: execution.outputFile("."),
        output_seed_mask_image: execution.outputFile([(params["out"] ?? null), "_seeds"].join('')),
        output_seed_mask_image_base: execution.outputFile([(params["out"] ?? null), "_seedmask"].join('')),
        output_confound_time_courses: execution.outputFile([(params["out"] ?? null), "_confounds.txt"].join('')),
    };
    return ret;
}


/**
 * fsl_sbca
 *
 * Performs seed-based correlation analysis on FMRI data using either a single seed coordinate or a seed mask.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslSbcaOutputs`).
 */
function fsl_sbca_execute(
    params: FslSbcaParameters,
    runner: Runner | null = null,
): FslSbcaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSL_SBCA_METADATA);
    params = execution.params(params)
    const cargs = fsl_sbca_cargs(params, execution)
    const ret = fsl_sbca_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fsl_sbca
 *
 * Performs seed-based correlation analysis on FMRI data using either a single seed coordinate or a seed mask.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param infile Input file name (4D image file)
 * @param seed Seed voxel coordinate or file name of seed mask (3D/4D file)
 * @param target File name of target mask(s) (3D or 4D file)
 * @param out Output file base name
 * @param reg_flag Perform time series regression rather than classification to targets
 * @param conf_files File name (or comma-separated list of file names) for confound ASCII text files
 * @param seed_data File name of 4D data file for the seed
 * @param binarise_flag Binarise spatial maps prior to calculation of time courses
 * @param mean_flag Use mean instead of Eigenvariates for calculation of time courses
 * @param abs_cc_flag Use maximum absolute value instead of maximum value of the cross-correlations
 * @param order Number of Eigenvariates (default 1)
 * @param out_seeds_flag Output seed mask image as <basename>_seeds
 * @param out_seedmask_flag Output seed mask image as <basename>_seedmask
 * @param out_ttcs_flag Output target time courses as <basename>_ttc<X>.txt
 * @param out_conf_flag Output confound time courses as <basename>_confounds.txt
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display help text
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslSbcaOutputs`).
 */
function fsl_sbca(
    infile: InputPathType,
    seed: InputPathType,
    target: InputPathType,
    out: string,
    reg_flag: boolean = false,
    conf_files: Array<InputPathType> | null = null,
    seed_data: InputPathType | null = null,
    binarise_flag: boolean = false,
    mean_flag: boolean = false,
    abs_cc_flag: boolean = false,
    order: number | null = null,
    out_seeds_flag: boolean = false,
    out_seedmask_flag: boolean = false,
    out_ttcs_flag: boolean = false,
    out_conf_flag: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): FslSbcaOutputs {
    const params = fsl_sbca_params(infile, seed, target, out, reg_flag, conf_files, seed_data, binarise_flag, mean_flag, abs_cc_flag, order, out_seeds_flag, out_seedmask_flag, out_ttcs_flag, out_conf_flag, verbose_flag, help_flag)
    return fsl_sbca_execute(params, runner);
}


export {
      FSL_SBCA_METADATA,
      FslSbcaOutputs,
      FslSbcaParameters,
      fsl_sbca,
      fsl_sbca_execute,
      fsl_sbca_params,
};
