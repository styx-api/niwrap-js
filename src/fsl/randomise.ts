// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RANDOMISE_METADATA: Metadata = {
    id: "b0dd992e52b8d3260f3f90555c2f7b4313e2749e.boutiques",
    name: "randomise",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface RandomiseParameters {
    "@type": "fsl.randomise";
    "in_file": InputPathType;
    "base_name"?: string | null | undefined;
    "design_mat"?: InputPathType | null | undefined;
    "tcon"?: InputPathType | null | undefined;
    "c_thresh"?: number | null | undefined;
    "cm_thresh"?: number | null | undefined;
    "demean": boolean;
    "f_c_thresh"?: number | null | undefined;
    "f_cm_thresh"?: number | null | undefined;
    "f_only": boolean;
    "fcon"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "num_perm"?: number | null | undefined;
    "one_sample_group_mean": boolean;
    "output_type"?: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null | undefined;
    "p_vec_n_dist_files": boolean;
    "raw_stats_imgs": boolean;
    "seed"?: number | null | undefined;
    "show_info_parallel_mode": boolean;
    "show_total_perms": boolean;
    "tfce": boolean;
    "tfce2D": boolean;
    "tfce_C"?: number | null | undefined;
    "tfce_E"?: number | null | undefined;
    "tfce_H"?: number | null | undefined;
    "var_smooth"?: number | null | undefined;
    "vox_p_values": boolean;
    "x_block_labels"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.randomise": randomise_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.randomise": randomise_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `randomise(...)`.
 *
 * @interface
 */
interface RandomiseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * F contrast fwe (family-wise error) corrected p values files.
     */
    f_corrected_p_files: OutputPathType;
    /**
     * F contrast uncorrected p values files.
     */
    f_p_files: OutputPathType;
    /**
     * F contrast raw statistic.
     */
    fstat_files: OutputPathType;
    /**
     * T contrast fwe (family-wise error) corrected p values files.
     */
    t_corrected_p_files: OutputPathType;
    /**
     * F contrast uncorrected p values files.
     */
    t_p_files: OutputPathType;
    /**
     * T contrast raw statistic.
     */
    tstat_files: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_file 4d input file.
 * @param base_name The rootname that all generated files will have.
 * @param design_mat Design matrix file.
 * @param tcon T contrasts file.
 * @param c_thresh Carry out cluster-based thresholding.
 * @param cm_thresh Carry out cluster-mass-based thresholding.
 * @param demean Demean data temporally before model fitting.
 * @param f_c_thresh Carry out f cluster thresholding.
 * @param f_cm_thresh Carry out f cluster-mass thresholding.
 * @param f_only Calculate f-statistics only.
 * @param fcon F contrasts file.
 * @param mask Mask image.
 * @param num_perm Number of permutations (default 5000, set to 0 for exhaustive).
 * @param one_sample_group_mean Perform 1-sample group-mean test instead of generic permutation test.
 * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
 * @param p_vec_n_dist_files Output permutation vector and null distribution text files.
 * @param raw_stats_imgs Output raw ( unpermuted ) statistic images.
 * @param seed Specific integer seed for random number generator.
 * @param show_info_parallel_mode Print out information required for parallel mode and exit.
 * @param show_total_perms Print out how many unique permutations would be generated and exit.
 * @param tfce Carry out threshold-free cluster enhancement.
 * @param tfce2_d Carry out threshold-free cluster enhancement with 2d optimisation.
 * @param tfce_c Tfce connectivity (6 or 26; default=6).
 * @param tfce_e Tfce extent parameter (default=0.5).
 * @param tfce_h Tfce height parameter (default=2).
 * @param var_smooth Use variance smoothing (std is in mm).
 * @param vox_p_values Output voxelwise (corrected and uncorrected) p-value images.
 * @param x_block_labels Exchangeability block labels file.
 *
 * @returns Parameter dictionary
 */
function randomise_params(
    in_file: InputPathType,
    base_name: string | null = "randomise",
    design_mat: InputPathType | null = null,
    tcon: InputPathType | null = null,
    c_thresh: number | null = null,
    cm_thresh: number | null = null,
    demean: boolean = false,
    f_c_thresh: number | null = null,
    f_cm_thresh: number | null = null,
    f_only: boolean = false,
    fcon: InputPathType | null = null,
    mask: InputPathType | null = null,
    num_perm: number | null = null,
    one_sample_group_mean: boolean = false,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    p_vec_n_dist_files: boolean = false,
    raw_stats_imgs: boolean = false,
    seed: number | null = null,
    show_info_parallel_mode: boolean = false,
    show_total_perms: boolean = false,
    tfce: boolean = false,
    tfce2_d: boolean = false,
    tfce_c: number | null = null,
    tfce_e: number | null = null,
    tfce_h: number | null = null,
    var_smooth: number | null = null,
    vox_p_values: boolean = false,
    x_block_labels: InputPathType | null = null,
): RandomiseParameters {
    const params = {
        "@type": "fsl.randomise" as const,
        "in_file": in_file,
        "demean": demean,
        "f_only": f_only,
        "one_sample_group_mean": one_sample_group_mean,
        "p_vec_n_dist_files": p_vec_n_dist_files,
        "raw_stats_imgs": raw_stats_imgs,
        "show_info_parallel_mode": show_info_parallel_mode,
        "show_total_perms": show_total_perms,
        "tfce": tfce,
        "tfce2D": tfce2_d,
        "vox_p_values": vox_p_values,
    };
    if (base_name !== null) {
        params["base_name"] = base_name;
    }
    if (design_mat !== null) {
        params["design_mat"] = design_mat;
    }
    if (tcon !== null) {
        params["tcon"] = tcon;
    }
    if (c_thresh !== null) {
        params["c_thresh"] = c_thresh;
    }
    if (cm_thresh !== null) {
        params["cm_thresh"] = cm_thresh;
    }
    if (f_c_thresh !== null) {
        params["f_c_thresh"] = f_c_thresh;
    }
    if (f_cm_thresh !== null) {
        params["f_cm_thresh"] = f_cm_thresh;
    }
    if (fcon !== null) {
        params["fcon"] = fcon;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (num_perm !== null) {
        params["num_perm"] = num_perm;
    }
    if (output_type !== null) {
        params["output_type"] = output_type;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (tfce_c !== null) {
        params["tfce_C"] = tfce_c;
    }
    if (tfce_e !== null) {
        params["tfce_E"] = tfce_e;
    }
    if (tfce_h !== null) {
        params["tfce_H"] = tfce_h;
    }
    if (var_smooth !== null) {
        params["var_smooth"] = var_smooth;
    }
    if (x_block_labels !== null) {
        params["x_block_labels"] = x_block_labels;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function randomise_cargs(
    params: RandomiseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("randomise");
    cargs.push(
        "-i",
        execution.inputFile((params["in_file"] ?? null))
    );
    if ((params["base_name"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["base_name"] ?? null)
        );
    }
    if ((params["design_mat"] ?? null) !== null) {
        cargs.push(
            "-d",
            execution.inputFile((params["design_mat"] ?? null))
        );
    }
    if ((params["tcon"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["tcon"] ?? null))
        );
    }
    if ((params["c_thresh"] ?? null) !== null) {
        cargs.push(
            "-c",
            String((params["c_thresh"] ?? null))
        );
    }
    if ((params["cm_thresh"] ?? null) !== null) {
        cargs.push(
            "-C",
            String((params["cm_thresh"] ?? null))
        );
    }
    if ((params["demean"] ?? null)) {
        cargs.push("-D");
    }
    if ((params["f_c_thresh"] ?? null) !== null) {
        cargs.push(
            "-F",
            String((params["f_c_thresh"] ?? null))
        );
    }
    if ((params["f_cm_thresh"] ?? null) !== null) {
        cargs.push(
            "-S",
            String((params["f_cm_thresh"] ?? null))
        );
    }
    if ((params["f_only"] ?? null)) {
        cargs.push("--fonly");
    }
    if ((params["fcon"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["fcon"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["num_perm"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["num_perm"] ?? null))
        );
    }
    if ((params["one_sample_group_mean"] ?? null)) {
        cargs.push("-1");
    }
    if ((params["output_type"] ?? null) !== null) {
        cargs.push((params["output_type"] ?? null));
    }
    if ((params["p_vec_n_dist_files"] ?? null)) {
        cargs.push("-P");
    }
    if ((params["raw_stats_imgs"] ?? null)) {
        cargs.push("-R");
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(["--seed=", String((params["seed"] ?? null))].join(''));
    }
    if ((params["show_info_parallel_mode"] ?? null)) {
        cargs.push("-Q");
    }
    if ((params["show_total_perms"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["tfce"] ?? null)) {
        cargs.push("-T");
    }
    if ((params["tfce2D"] ?? null)) {
        cargs.push("--T2");
    }
    if ((params["tfce_C"] ?? null) !== null) {
        cargs.push(["--tfce_C=", String((params["tfce_C"] ?? null))].join(''));
    }
    if ((params["tfce_E"] ?? null) !== null) {
        cargs.push(["--tfce_E=", String((params["tfce_E"] ?? null))].join(''));
    }
    if ((params["tfce_H"] ?? null) !== null) {
        cargs.push(["--tfce_H=", String((params["tfce_H"] ?? null))].join(''));
    }
    if ((params["var_smooth"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["var_smooth"] ?? null))
        );
    }
    if ((params["vox_p_values"] ?? null)) {
        cargs.push("-x");
    }
    if ((params["x_block_labels"] ?? null) !== null) {
        cargs.push(
            "-e",
            execution.inputFile((params["x_block_labels"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function randomise_outputs(
    params: RandomiseParameters,
    execution: Execution,
): RandomiseOutputs {
    const ret: RandomiseOutputs = {
        root: execution.outputFile("."),
        f_corrected_p_files: execution.outputFile(["f_corrected_p_files"].join('')),
        f_p_files: execution.outputFile(["f_p_files"].join('')),
        fstat_files: execution.outputFile(["fstat_files"].join('')),
        t_corrected_p_files: execution.outputFile(["t_corrected_p_files"].join('')),
        t_p_files: execution.outputFile(["t_p_files"].join('')),
        tstat_files: execution.outputFile(["tstat_files"].join('')),
    };
    return ret;
}


/**
 * FSL Randomise: feeds the 4D projected FA data into GLM modelling and thresholding in order to find voxels which correlate with your model.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `RandomiseOutputs`).
 */
function randomise_execute(
    params: RandomiseParameters,
    execution: Execution,
): RandomiseOutputs {
    params = execution.params(params)
    const cargs = randomise_cargs(params, execution)
    const ret = randomise_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * FSL Randomise: feeds the 4D projected FA data into GLM modelling and thresholding in order to find voxels which correlate with your model.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param in_file 4d input file.
 * @param base_name The rootname that all generated files will have.
 * @param design_mat Design matrix file.
 * @param tcon T contrasts file.
 * @param c_thresh Carry out cluster-based thresholding.
 * @param cm_thresh Carry out cluster-mass-based thresholding.
 * @param demean Demean data temporally before model fitting.
 * @param f_c_thresh Carry out f cluster thresholding.
 * @param f_cm_thresh Carry out f cluster-mass thresholding.
 * @param f_only Calculate f-statistics only.
 * @param fcon F contrasts file.
 * @param mask Mask image.
 * @param num_perm Number of permutations (default 5000, set to 0 for exhaustive).
 * @param one_sample_group_mean Perform 1-sample group-mean test instead of generic permutation test.
 * @param output_type 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'. Fsl output type.
 * @param p_vec_n_dist_files Output permutation vector and null distribution text files.
 * @param raw_stats_imgs Output raw ( unpermuted ) statistic images.
 * @param seed Specific integer seed for random number generator.
 * @param show_info_parallel_mode Print out information required for parallel mode and exit.
 * @param show_total_perms Print out how many unique permutations would be generated and exit.
 * @param tfce Carry out threshold-free cluster enhancement.
 * @param tfce2_d Carry out threshold-free cluster enhancement with 2d optimisation.
 * @param tfce_c Tfce connectivity (6 or 26; default=6).
 * @param tfce_e Tfce extent parameter (default=0.5).
 * @param tfce_h Tfce height parameter (default=2).
 * @param var_smooth Use variance smoothing (std is in mm).
 * @param vox_p_values Output voxelwise (corrected and uncorrected) p-value images.
 * @param x_block_labels Exchangeability block labels file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RandomiseOutputs`).
 */
function randomise(
    in_file: InputPathType,
    base_name: string | null = "randomise",
    design_mat: InputPathType | null = null,
    tcon: InputPathType | null = null,
    c_thresh: number | null = null,
    cm_thresh: number | null = null,
    demean: boolean = false,
    f_c_thresh: number | null = null,
    f_cm_thresh: number | null = null,
    f_only: boolean = false,
    fcon: InputPathType | null = null,
    mask: InputPathType | null = null,
    num_perm: number | null = null,
    one_sample_group_mean: boolean = false,
    output_type: "NIFTI" | "NIFTI_PAIR" | "NIFTI_GZ" | "NIFTI_PAIR_GZ" | null = null,
    p_vec_n_dist_files: boolean = false,
    raw_stats_imgs: boolean = false,
    seed: number | null = null,
    show_info_parallel_mode: boolean = false,
    show_total_perms: boolean = false,
    tfce: boolean = false,
    tfce2_d: boolean = false,
    tfce_c: number | null = null,
    tfce_e: number | null = null,
    tfce_h: number | null = null,
    var_smooth: number | null = null,
    vox_p_values: boolean = false,
    x_block_labels: InputPathType | null = null,
    runner: Runner | null = null,
): RandomiseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RANDOMISE_METADATA);
    const params = randomise_params(in_file, base_name, design_mat, tcon, c_thresh, cm_thresh, demean, f_c_thresh, f_cm_thresh, f_only, fcon, mask, num_perm, one_sample_group_mean, output_type, p_vec_n_dist_files, raw_stats_imgs, seed, show_info_parallel_mode, show_total_perms, tfce, tfce2_d, tfce_c, tfce_e, tfce_h, var_smooth, vox_p_values, x_block_labels)
    return randomise_execute(params, execution);
}


export {
      RANDOMISE_METADATA,
      RandomiseOutputs,
      RandomiseParameters,
      randomise,
      randomise_cargs,
      randomise_execute,
      randomise_outputs,
      randomise_params,
};
