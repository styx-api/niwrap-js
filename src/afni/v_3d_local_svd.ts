// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LOCAL_SVD_METADATA: Metadata = {
    id: "f1614ff47ed09d8614f9811ea2b7772cb319daa0.boutiques",
    name: "3dLocalSVD",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLocalSvdParameters {
    "@type": "afni.3dLocalSVD";
    "auto_mask": boolean;
    "input_file": InputPathType;
    "mask_file"?: InputPathType | null | undefined;
    "output_file": string;
    "nbhd"?: string | null | undefined;
    "polort"?: string | null | undefined;
    "vnorm": boolean;
    "vproj"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dLocalSVD": v_3d_local_svd_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_local_svd(...)`.
 *
 * @interface
 */
interface V3dLocalSvdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input time series dataset file
 * @param output_file Prefix for the output SVD vector result dataset file
 * @param auto_mask Create a mask from time series dataset
 * @param mask_file Restrict operations to this mask dataset
 * @param nbhd Neighborhood for SVD calculation, e.g., 'SPHERE(5)'
 * @param polort Detrending option, ['+' means to add trend back]
 * @param vnorm Normalize data vectors [strongly recommended]
 * @param vproj Project central data time series onto local SVD subspace of dimension 'ndim'
 *
 * @returns Parameter dictionary
 */
function v_3d_local_svd_params(
    input_file: InputPathType,
    output_file: string,
    auto_mask: boolean = false,
    mask_file: InputPathType | null = null,
    nbhd: string | null = null,
    polort: string | null = null,
    vnorm: boolean = false,
    vproj: number | null = null,
): V3dLocalSvdParameters {
    const params = {
        "@type": "afni.3dLocalSVD" as const,
        "auto_mask": auto_mask,
        "input_file": input_file,
        "output_file": output_file,
        "vnorm": vnorm,
    };
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (nbhd !== null) {
        params["nbhd"] = nbhd;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (vproj !== null) {
        params["vproj"] = vproj;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_local_svd_cargs(
    params: V3dLocalSvdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dLocalSVD");
    if ((params["auto_mask"] ?? null)) {
        cargs.push("-automask");
    }
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["output_file"] ?? null)
    );
    if ((params["nbhd"] ?? null) !== null) {
        cargs.push(
            "-nbhd",
            (params["nbhd"] ?? null)
        );
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            (params["polort"] ?? null)
        );
    }
    if ((params["vnorm"] ?? null)) {
        cargs.push("-vnorm");
    }
    if ((params["vproj"] ?? null) !== null) {
        cargs.push(
            "-vproj",
            String((params["vproj"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_local_svd_outputs(
    params: V3dLocalSvdParameters,
    execution: Execution,
): V3dLocalSvdOutputs {
    const ret: V3dLocalSvdOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * 3dLocalSVD
 *
 * Computes the SVD of time series from a neighborhood of each voxel.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLocalSvdOutputs`).
 */
function v_3d_local_svd_execute(
    params: V3dLocalSvdParameters,
    runner: Runner | null = null,
): V3dLocalSvdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LOCAL_SVD_METADATA);
    params = execution.params(params)
    const cargs = v_3d_local_svd_cargs(params, execution)
    const ret = v_3d_local_svd_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dLocalSVD
 *
 * Computes the SVD of time series from a neighborhood of each voxel.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Input time series dataset file
 * @param output_file Prefix for the output SVD vector result dataset file
 * @param auto_mask Create a mask from time series dataset
 * @param mask_file Restrict operations to this mask dataset
 * @param nbhd Neighborhood for SVD calculation, e.g., 'SPHERE(5)'
 * @param polort Detrending option, ['+' means to add trend back]
 * @param vnorm Normalize data vectors [strongly recommended]
 * @param vproj Project central data time series onto local SVD subspace of dimension 'ndim'
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dLocalSvdOutputs`).
 */
function v_3d_local_svd(
    input_file: InputPathType,
    output_file: string,
    auto_mask: boolean = false,
    mask_file: InputPathType | null = null,
    nbhd: string | null = null,
    polort: string | null = null,
    vnorm: boolean = false,
    vproj: number | null = null,
    runner: Runner | null = null,
): V3dLocalSvdOutputs {
    const params = v_3d_local_svd_params(input_file, output_file, auto_mask, mask_file, nbhd, polort, vnorm, vproj)
    return v_3d_local_svd_execute(params, runner);
}


export {
      V3dLocalSvdOutputs,
      V3dLocalSvdParameters,
      V_3D_LOCAL_SVD_METADATA,
      v_3d_local_svd,
      v_3d_local_svd_execute,
      v_3d_local_svd_params,
};
