// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MEDIANFILTER_METADATA: Metadata = {
    id: "edbb2578b67de8a28b88309d6ea82681507894f5.boutiques",
    name: "medianfilter",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MedianfilterParameters {
    "__STYXTYPE__": "medianfilter";
    "infile": InputPathType;
    "outfile": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "medianfilter": medianfilter_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "medianfilter": medianfilter_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `medianfilter(...)`.
 *
 * @interface
 */
interface MedianfilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the median filtered image
     */
    filtered_file: OutputPathType;
}


function medianfilter_params(
    infile: InputPathType,
    outfile: InputPathType,
): MedianfilterParameters {
    /**
     * Build parameters.
    
     * @param infile Input image file to be filtered (e.g., img.nii.gz)
     * @param outfile Output file to store the filtered image (e.g., img_filtered.nii.gz)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "medianfilter" as const,
        "infile": infile,
        "outfile": outfile,
    };
    return params;
}


function medianfilter_cargs(
    params: MedianfilterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("medianfilter");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push(execution.inputFile((params["outfile"] ?? null)));
    return cargs;
}


function medianfilter_outputs(
    params: MedianfilterParameters,
    execution: Execution,
): MedianfilterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MedianfilterOutputs = {
        root: execution.outputFile("."),
        filtered_file: execution.outputFile([path.basename((params["outfile"] ?? null))].join('')),
    };
    return ret;
}


function medianfilter_execute(
    params: MedianfilterParameters,
    execution: Execution,
): MedianfilterOutputs {
    /**
     * A tool to perform 26 neighbourhood median filtering on an input image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MedianfilterOutputs`).
     */
    params = execution.params(params)
    const cargs = medianfilter_cargs(params, execution)
    const ret = medianfilter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function medianfilter(
    infile: InputPathType,
    outfile: InputPathType,
    runner: Runner | null = null,
): MedianfilterOutputs {
    /**
     * A tool to perform 26 neighbourhood median filtering on an input image.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param infile Input image file to be filtered (e.g., img.nii.gz)
     * @param outfile Output file to store the filtered image (e.g., img_filtered.nii.gz)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MedianfilterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MEDIANFILTER_METADATA);
    const params = medianfilter_params(infile, outfile)
    return medianfilter_execute(params, execution);
}


export {
      MEDIANFILTER_METADATA,
      MedianfilterOutputs,
      MedianfilterParameters,
      medianfilter,
      medianfilter_params,
};
