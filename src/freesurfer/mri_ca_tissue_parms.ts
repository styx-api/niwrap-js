// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CA_TISSUE_PARMS_METADATA: Metadata = {
    id: "5fc6714b91717703de24f36811d305d4716ad9b2.boutiques",
    name: "mri_ca_tissue_parms",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCaTissueParmsParameters {
    "__STYXTYPE__": "mri_ca_tissue_parms";
    "subjects": Array<string>;
    "output_file": string;
    "spacing_flag": boolean;
    "gradient_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_ca_tissue_parms": mri_ca_tissue_parms_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_ca_tissue_parms": mri_ca_tissue_parms_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_ca_tissue_parms(...)`.
 *
 * @interface
 */
interface MriCaTissueParmsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the computed tissue parameters.
     */
    output_file: OutputPathType;
}


function mri_ca_tissue_parms_params(
    subjects: Array<string>,
    output_file: string,
    spacing_flag: boolean = false,
    gradient_flag: boolean = false,
): MriCaTissueParmsParameters {
    /**
     * Build parameters.
    
     * @param subjects List of subjects for processing.
     * @param output_file Output file for storing results.
     * @param spacing_flag Specify spacing of classifiers in canonical space.
     * @param gradient_flag Use intensity gradient as input to classifier.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_ca_tissue_parms" as const,
        "subjects": subjects,
        "output_file": output_file,
        "spacing_flag": spacing_flag,
        "gradient_flag": gradient_flag,
    };
    return params;
}


function mri_ca_tissue_parms_cargs(
    params: MriCaTissueParmsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_ca_tissue_parms");
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_file"] ?? null));
    if ((params["spacing_flag"] ?? null)) {
        cargs.push("-spacing");
    }
    if ((params["gradient_flag"] ?? null)) {
        cargs.push("-gradient");
    }
    return cargs;
}


function mri_ca_tissue_parms_outputs(
    params: MriCaTissueParmsParameters,
    execution: Execution,
): MriCaTissueParmsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriCaTissueParmsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function mri_ca_tissue_parms_execute(
    params: MriCaTissueParmsParameters,
    execution: Execution,
): MriCaTissueParmsOutputs {
    /**
     * Tool for computing tissue parameters in canonical space.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriCaTissueParmsOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_ca_tissue_parms_cargs(params, execution)
    const ret = mri_ca_tissue_parms_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_ca_tissue_parms(
    subjects: Array<string>,
    output_file: string,
    spacing_flag: boolean = false,
    gradient_flag: boolean = false,
    runner: Runner | null = null,
): MriCaTissueParmsOutputs {
    /**
     * Tool for computing tissue parameters in canonical space.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subjects List of subjects for processing.
     * @param output_file Output file for storing results.
     * @param spacing_flag Specify spacing of classifiers in canonical space.
     * @param gradient_flag Use intensity gradient as input to classifier.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriCaTissueParmsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CA_TISSUE_PARMS_METADATA);
    const params = mri_ca_tissue_parms_params(subjects, output_file, spacing_flag, gradient_flag)
    return mri_ca_tissue_parms_execute(params, execution);
}


export {
      MRI_CA_TISSUE_PARMS_METADATA,
      MriCaTissueParmsOutputs,
      MriCaTissueParmsParameters,
      mri_ca_tissue_parms,
      mri_ca_tissue_parms_params,
};
