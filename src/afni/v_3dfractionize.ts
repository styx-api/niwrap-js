// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DFRACTIONIZE_METADATA: Metadata = {
    id: "700df8ed70958c3087524da2a286d3508d1bd05d.boutiques",
    name: "3dfractionize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dfractionizeParameters {
    "__STYXTYPE__": "3dfractionize";
    "template": InputPathType;
    "input": InputPathType;
    "prefix"?: string | null | undefined;
    "clip"?: number | null | undefined;
    "warp"?: InputPathType | null | undefined;
    "preserve": boolean;
    "vote": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dfractionize": v_3dfractionize_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dfractionize": v_3dfractionize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dfractionize(...)`.
 *
 * @interface
 */
interface V3dfractionizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset with the specified prefix.
     */
    output: OutputPathType | null;
}


function v_3dfractionize_params(
    template: InputPathType,
    input: InputPathType,
    prefix: string | null = null,
    clip: number | null = null,
    warp: InputPathType | null = null,
    preserve: boolean = false,
    vote: boolean = false,
): V3dfractionizeParameters {
    /**
     * Build parameters.
    
     * @param template Use dataset as a template for the output. The output dataset will be on the same grid as this dataset.
     * @param input Use dataset for the input. Only the sub-brick #0 of the input is used.
     * @param prefix Prefix for the output dataset.
     * @param clip Clip off voxels that are less than the specified occupancy fraction.
     * @param warp Dataset that provides a transformation (warp) from +orig coordinates to the coordinates of the input dataset.
     * @param preserve Preserve the nonzero values of input voxels in the output dataset rather than creating a fractional mask.
     * @param vote Vote for which input value to preserve when using the preserve flag.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dfractionize" as const,
        "template": template,
        "input": input,
        "preserve": preserve,
        "vote": vote,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (clip !== null) {
        params["clip"] = clip;
    }
    if (warp !== null) {
        params["warp"] = warp;
    }
    return params;
}


function v_3dfractionize_cargs(
    params: V3dfractionizeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dfractionize");
    cargs.push(
        "-template",
        execution.inputFile((params["template"] ?? null))
    );
    cargs.push(
        "-input",
        execution.inputFile((params["input"] ?? null))
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["clip"] ?? null) !== null) {
        cargs.push(
            "-clip",
            String((params["clip"] ?? null))
        );
    }
    if ((params["warp"] ?? null) !== null) {
        cargs.push(
            "-warp",
            execution.inputFile((params["warp"] ?? null))
        );
    }
    if ((params["preserve"] ?? null)) {
        cargs.push("-preserve");
    }
    if ((params["vote"] ?? null)) {
        cargs.push("-vote");
    }
    return cargs;
}


function v_3dfractionize_outputs(
    params: V3dfractionizeParameters,
    execution: Execution,
): V3dfractionizeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dfractionizeOutputs = {
        root: execution.outputFile("."),
        output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
    };
    return ret;
}


function v_3dfractionize_execute(
    params: V3dfractionizeParameters,
    execution: Execution,
): V3dfractionizeOutputs {
    /**
     * For each voxel in the output dataset, computes the fraction of it that is occupied by nonzero voxels from the input.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dfractionizeOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3dfractionize_cargs(params, execution)
    const ret = v_3dfractionize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3dfractionize(
    template: InputPathType,
    input: InputPathType,
    prefix: string | null = null,
    clip: number | null = null,
    warp: InputPathType | null = null,
    preserve: boolean = false,
    vote: boolean = false,
    runner: Runner | null = null,
): V3dfractionizeOutputs {
    /**
     * For each voxel in the output dataset, computes the fraction of it that is occupied by nonzero voxels from the input.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param template Use dataset as a template for the output. The output dataset will be on the same grid as this dataset.
     * @param input Use dataset for the input. Only the sub-brick #0 of the input is used.
     * @param prefix Prefix for the output dataset.
     * @param clip Clip off voxels that are less than the specified occupancy fraction.
     * @param warp Dataset that provides a transformation (warp) from +orig coordinates to the coordinates of the input dataset.
     * @param preserve Preserve the nonzero values of input voxels in the output dataset rather than creating a fractional mask.
     * @param vote Vote for which input value to preserve when using the preserve flag.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dfractionizeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DFRACTIONIZE_METADATA);
    const params = v_3dfractionize_params(template, input, prefix, clip, warp, preserve, vote)
    return v_3dfractionize_execute(params, execution);
}


export {
      V3dfractionizeOutputs,
      V3dfractionizeParameters,
      V_3DFRACTIONIZE_METADATA,
      v_3dfractionize,
      v_3dfractionize_params,
};
