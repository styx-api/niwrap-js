// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LONG_STATS_SLOPES_METADATA: Metadata = {
    id: "c2f3a04515aabb1b936d652c2eb0e27439e032e8.boutiques",
    name: "long_stats_slopes",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LongStatsSlopesParameters {
    "__STYXTYPE__": "long_stats_slopes";
    "qdec_table": InputPathType;
    "stats_file": InputPathType;
    "measure": string;
    "subjects_dir": string;
    "do_avg": boolean;
    "do_rate": boolean;
    "do_pc1fit": boolean;
    "do_pc1": boolean;
    "do_spc": boolean;
    "do_stack": boolean;
    "resid"?: number | null | undefined;
    "time_var"?: string | null | undefined;
    "generic_time": boolean;
    "cross_sectional": boolean;
    "out_avg"?: string | null | undefined;
    "out_rate"?: string | null | undefined;
    "out_pc1fit"?: string | null | undefined;
    "out_pc1"?: string | null | undefined;
    "out_spc"?: string | null | undefined;
    "out_resid"?: string | null | undefined;
    "out_stack"?: string | null | undefined;
    "stack_avg"?: string | null | undefined;
    "stack_rate"?: string | null | undefined;
    "stack_pc1fit"?: string | null | undefined;
    "stack_pc1"?: string | null | undefined;
    "stack_spc"?: string | null | undefined;
    "stack_resid"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "long_stats_slopes": long_stats_slopes_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `long_stats_slopes(...)`.
 *
 * @interface
 */
interface LongStatsSlopesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function long_stats_slopes_params(
    qdec_table: InputPathType,
    stats_file: InputPathType,
    measure: string,
    subjects_dir: string,
    do_avg: boolean = false,
    do_rate: boolean = false,
    do_pc1fit: boolean = false,
    do_pc1: boolean = false,
    do_spc: boolean = false,
    do_stack: boolean = false,
    resid: number | null = null,
    time_var: string | null = null,
    generic_time: boolean = false,
    cross_sectional: boolean = false,
    out_avg: string | null = null,
    out_rate: string | null = null,
    out_pc1fit: string | null = null,
    out_pc1: string | null = null,
    out_spc: string | null = null,
    out_resid: string | null = null,
    out_stack: string | null = null,
    stack_avg: string | null = null,
    stack_rate: string | null = null,
    stack_pc1fit: string | null = null,
    stack_pc1: string | null = null,
    stack_spc: string | null = null,
    stack_resid: string | null = null,
): LongStatsSlopesParameters {
    /**
     * Build parameters.
    
     * @param qdec_table QDEC table file specifying the subjects and time points.
     * @param stats_file The stats file, e.g. aseg.stats or lh.aparc.stats.
     * @param measure The stats measure (e.g. volume, thickness, mean, std).
     * @param subjects_dir Full path to FreeSurfer subjects directory.
     * @param do_avg Compute and output the temporal average.
     * @param do_rate Compute and output the rate.
     * @param do_pc1fit Compute and output the percent change with respect to tp1 from linear fit.
     * @param do_pc1 Compute and output the percent change with respect to tp1.
     * @param do_spc Compute and output the symmetric percent change with respect to temporal average.
     * @param do_stack Compute and output tables showing the time series (row per time point).
     * @param resid Residual timepoint to export (pass 1 for tp1, etc., pass 0 for average).
     * @param time_var Variable name for time column variable (e.g., age) in QDEC table.
     * @param generic_time Time points are ordered in QDEC file; assume time=1,2,3...
     * @param cross_sectional Use cross-sectional results (for testing only).
     * @param out_avg Filename to store temporal average in <template>/stats/<OUT_AVG>.
     * @param out_rate Filename to store rate in <template>/stats/<OUT_RATE>.
     * @param out_pc1fit Filename to store percent change to tp1fit in <template>/stats/<OUT_PC1FIT>.
     * @param out_pc1 Filename to store percent change to tp1 in <template>/stats/<OUT_PC1>.
     * @param out_spc Filename to store symmetric percent change in <template>/stats/<OUT_SPC>.
     * @param out_resid Filename to store residual in <template>/stats/<OUT_RESID>.
     * @param out_stack Filename to store stacked measure file in <template>/stats/<OUT_STACK>.
     * @param stack_avg Full filename to stack temporal average tables.
     * @param stack_rate Full filename to stack rate tables.
     * @param stack_pc1fit Full filename to stack percent change to tp1fit tables.
     * @param stack_pc1 Full filename to stack percent change to tp1 tables.
     * @param stack_spc Full filename to stack symmetric percent change tables.
     * @param stack_resid Full filename to stack residual tables.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "long_stats_slopes" as const,
        "qdec_table": qdec_table,
        "stats_file": stats_file,
        "measure": measure,
        "subjects_dir": subjects_dir,
        "do_avg": do_avg,
        "do_rate": do_rate,
        "do_pc1fit": do_pc1fit,
        "do_pc1": do_pc1,
        "do_spc": do_spc,
        "do_stack": do_stack,
        "generic_time": generic_time,
        "cross_sectional": cross_sectional,
    };
    if (resid !== null) {
        params["resid"] = resid;
    }
    if (time_var !== null) {
        params["time_var"] = time_var;
    }
    if (out_avg !== null) {
        params["out_avg"] = out_avg;
    }
    if (out_rate !== null) {
        params["out_rate"] = out_rate;
    }
    if (out_pc1fit !== null) {
        params["out_pc1fit"] = out_pc1fit;
    }
    if (out_pc1 !== null) {
        params["out_pc1"] = out_pc1;
    }
    if (out_spc !== null) {
        params["out_spc"] = out_spc;
    }
    if (out_resid !== null) {
        params["out_resid"] = out_resid;
    }
    if (out_stack !== null) {
        params["out_stack"] = out_stack;
    }
    if (stack_avg !== null) {
        params["stack_avg"] = stack_avg;
    }
    if (stack_rate !== null) {
        params["stack_rate"] = stack_rate;
    }
    if (stack_pc1fit !== null) {
        params["stack_pc1fit"] = stack_pc1fit;
    }
    if (stack_pc1 !== null) {
        params["stack_pc1"] = stack_pc1;
    }
    if (stack_spc !== null) {
        params["stack_spc"] = stack_spc;
    }
    if (stack_resid !== null) {
        params["stack_resid"] = stack_resid;
    }
    return params;
}


function long_stats_slopes_cargs(
    params: LongStatsSlopesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("long_stats_slopes");
    cargs.push(
        "--qdec",
        execution.inputFile((params["qdec_table"] ?? null))
    );
    cargs.push(
        "--stats",
        execution.inputFile((params["stats_file"] ?? null))
    );
    cargs.push(
        "--meas",
        (params["measure"] ?? null)
    );
    cargs.push(
        "--sd",
        (params["subjects_dir"] ?? null)
    );
    if ((params["do_avg"] ?? null)) {
        cargs.push("--do-avg");
    }
    if ((params["do_rate"] ?? null)) {
        cargs.push("--do-rate");
    }
    if ((params["do_pc1fit"] ?? null)) {
        cargs.push("--do-pc1fit");
    }
    if ((params["do_pc1"] ?? null)) {
        cargs.push("--do-pc1");
    }
    if ((params["do_spc"] ?? null)) {
        cargs.push("--do-spc");
    }
    if ((params["do_stack"] ?? null)) {
        cargs.push("--do-stack");
    }
    if ((params["resid"] ?? null) !== null) {
        cargs.push(
            "--resid",
            String((params["resid"] ?? null))
        );
    }
    if ((params["time_var"] ?? null) !== null) {
        cargs.push(
            "--time",
            (params["time_var"] ?? null)
        );
    }
    if ((params["generic_time"] ?? null)) {
        cargs.push("--generic-time");
    }
    if ((params["cross_sectional"] ?? null)) {
        cargs.push("--cross");
    }
    if ((params["out_avg"] ?? null) !== null) {
        cargs.push(
            "--out-avg",
            (params["out_avg"] ?? null)
        );
    }
    if ((params["out_rate"] ?? null) !== null) {
        cargs.push(
            "--out-rate",
            (params["out_rate"] ?? null)
        );
    }
    if ((params["out_pc1fit"] ?? null) !== null) {
        cargs.push(
            "--out-pc1fit",
            (params["out_pc1fit"] ?? null)
        );
    }
    if ((params["out_pc1"] ?? null) !== null) {
        cargs.push(
            "--out-pc1",
            (params["out_pc1"] ?? null)
        );
    }
    if ((params["out_spc"] ?? null) !== null) {
        cargs.push(
            "--out-spc",
            (params["out_spc"] ?? null)
        );
    }
    if ((params["out_resid"] ?? null) !== null) {
        cargs.push(
            "--out-resid",
            (params["out_resid"] ?? null)
        );
    }
    if ((params["out_stack"] ?? null) !== null) {
        cargs.push(
            "--out-stack",
            (params["out_stack"] ?? null)
        );
    }
    if ((params["stack_avg"] ?? null) !== null) {
        cargs.push(
            "--stack-avg",
            (params["stack_avg"] ?? null)
        );
    }
    if ((params["stack_rate"] ?? null) !== null) {
        cargs.push(
            "--stack-rate",
            (params["stack_rate"] ?? null)
        );
    }
    if ((params["stack_pc1fit"] ?? null) !== null) {
        cargs.push(
            "--stack-pc1fit",
            (params["stack_pc1fit"] ?? null)
        );
    }
    if ((params["stack_pc1"] ?? null) !== null) {
        cargs.push(
            "--stack-pc1",
            (params["stack_pc1"] ?? null)
        );
    }
    if ((params["stack_spc"] ?? null) !== null) {
        cargs.push(
            "--stack-spc",
            (params["stack_spc"] ?? null)
        );
    }
    if ((params["stack_resid"] ?? null) !== null) {
        cargs.push(
            "--stack-resid",
            (params["stack_resid"] ?? null)
        );
    }
    return cargs;
}


function long_stats_slopes_outputs(
    params: LongStatsSlopesParameters,
    execution: Execution,
): LongStatsSlopesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: LongStatsSlopesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function long_stats_slopes_execute(
    params: LongStatsSlopesParameters,
    execution: Execution,
): LongStatsSlopesOutputs {
    /**
     * Computes slopes of statistics in a longitudinal study for each subject from processed results, outputting to designated directories for further analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `LongStatsSlopesOutputs`).
     */
    params = execution.params(params)
    const cargs = long_stats_slopes_cargs(params, execution)
    const ret = long_stats_slopes_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function long_stats_slopes(
    qdec_table: InputPathType,
    stats_file: InputPathType,
    measure: string,
    subjects_dir: string,
    do_avg: boolean = false,
    do_rate: boolean = false,
    do_pc1fit: boolean = false,
    do_pc1: boolean = false,
    do_spc: boolean = false,
    do_stack: boolean = false,
    resid: number | null = null,
    time_var: string | null = null,
    generic_time: boolean = false,
    cross_sectional: boolean = false,
    out_avg: string | null = null,
    out_rate: string | null = null,
    out_pc1fit: string | null = null,
    out_pc1: string | null = null,
    out_spc: string | null = null,
    out_resid: string | null = null,
    out_stack: string | null = null,
    stack_avg: string | null = null,
    stack_rate: string | null = null,
    stack_pc1fit: string | null = null,
    stack_pc1: string | null = null,
    stack_spc: string | null = null,
    stack_resid: string | null = null,
    runner: Runner | null = null,
): LongStatsSlopesOutputs {
    /**
     * Computes slopes of statistics in a longitudinal study for each subject from processed results, outputting to designated directories for further analysis.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param qdec_table QDEC table file specifying the subjects and time points.
     * @param stats_file The stats file, e.g. aseg.stats or lh.aparc.stats.
     * @param measure The stats measure (e.g. volume, thickness, mean, std).
     * @param subjects_dir Full path to FreeSurfer subjects directory.
     * @param do_avg Compute and output the temporal average.
     * @param do_rate Compute and output the rate.
     * @param do_pc1fit Compute and output the percent change with respect to tp1 from linear fit.
     * @param do_pc1 Compute and output the percent change with respect to tp1.
     * @param do_spc Compute and output the symmetric percent change with respect to temporal average.
     * @param do_stack Compute and output tables showing the time series (row per time point).
     * @param resid Residual timepoint to export (pass 1 for tp1, etc., pass 0 for average).
     * @param time_var Variable name for time column variable (e.g., age) in QDEC table.
     * @param generic_time Time points are ordered in QDEC file; assume time=1,2,3...
     * @param cross_sectional Use cross-sectional results (for testing only).
     * @param out_avg Filename to store temporal average in <template>/stats/<OUT_AVG>.
     * @param out_rate Filename to store rate in <template>/stats/<OUT_RATE>.
     * @param out_pc1fit Filename to store percent change to tp1fit in <template>/stats/<OUT_PC1FIT>.
     * @param out_pc1 Filename to store percent change to tp1 in <template>/stats/<OUT_PC1>.
     * @param out_spc Filename to store symmetric percent change in <template>/stats/<OUT_SPC>.
     * @param out_resid Filename to store residual in <template>/stats/<OUT_RESID>.
     * @param out_stack Filename to store stacked measure file in <template>/stats/<OUT_STACK>.
     * @param stack_avg Full filename to stack temporal average tables.
     * @param stack_rate Full filename to stack rate tables.
     * @param stack_pc1fit Full filename to stack percent change to tp1fit tables.
     * @param stack_pc1 Full filename to stack percent change to tp1 tables.
     * @param stack_spc Full filename to stack symmetric percent change tables.
     * @param stack_resid Full filename to stack residual tables.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `LongStatsSlopesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LONG_STATS_SLOPES_METADATA);
    const params = long_stats_slopes_params(qdec_table, stats_file, measure, subjects_dir, do_avg, do_rate, do_pc1fit, do_pc1, do_spc, do_stack, resid, time_var, generic_time, cross_sectional, out_avg, out_rate, out_pc1fit, out_pc1, out_spc, out_resid, out_stack, stack_avg, stack_rate, stack_pc1fit, stack_pc1, stack_spc, stack_resid)
    return long_stats_slopes_execute(params, execution);
}


export {
      LONG_STATS_SLOPES_METADATA,
      LongStatsSlopesOutputs,
      LongStatsSlopesParameters,
      long_stats_slopes,
      long_stats_slopes_params,
};
