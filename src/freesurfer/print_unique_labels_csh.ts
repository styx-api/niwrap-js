// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PRINT_UNIQUE_LABELS_CSH_METADATA: Metadata = {
    id: "5dca4f4c348d9237bae9336374cad3ee2174c9c8.boutiques",
    name: "print_unique_labels.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface PrintUniqueLabelsCshParameters {
    "@type": "freesurfer.print_unique_labels.csh";
    "label_volume": InputPathType;
    "output_file"?: string | null | undefined;
    "list_only": boolean;
    "version": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.print_unique_labels.csh": print_unique_labels_csh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.print_unique_labels.csh": print_unique_labels_csh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `print_unique_labels_csh(...)`.
 *
 * @interface
 */
interface PrintUniqueLabelsCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with the list of unique labels
     */
    results_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param label_volume Label volume to be analyzed
 * @param output_file Text file where the results are written
 * @param list_only Only list the labels
 * @param version Print version and exit
 * @param help Print help and exit
 *
 * @returns Parameter dictionary
 */
function print_unique_labels_csh_params(
    label_volume: InputPathType,
    output_file: string | null = null,
    list_only: boolean = false,
    version: boolean = false,
    help: boolean = false,
): PrintUniqueLabelsCshParameters {
    const params = {
        "@type": "freesurfer.print_unique_labels.csh" as const,
        "label_volume": label_volume,
        "list_only": list_only,
        "version": version,
        "help": help,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function print_unique_labels_csh_cargs(
    params: PrintUniqueLabelsCshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("print_unique_labels.csh");
    cargs.push(
        "--vol",
        execution.inputFile((params["label_volume"] ?? null))
    );
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["output_file"] ?? null)
        );
    }
    if ((params["list_only"] ?? null)) {
        cargs.push("--list");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function print_unique_labels_csh_outputs(
    params: PrintUniqueLabelsCshParameters,
    execution: Execution,
): PrintUniqueLabelsCshOutputs {
    const ret: PrintUniqueLabelsCshOutputs = {
        root: execution.outputFile("."),
        results_file: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Prints the list of unique labels (with structure name) in the input volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PrintUniqueLabelsCshOutputs`).
 */
function print_unique_labels_csh_execute(
    params: PrintUniqueLabelsCshParameters,
    runner: Runner | null = null,
): PrintUniqueLabelsCshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PRINT_UNIQUE_LABELS_CSH_METADATA);
    params = execution.params(params)
    const cargs = print_unique_labels_csh_cargs(params, execution)
    const ret = print_unique_labels_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Prints the list of unique labels (with structure name) in the input volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param label_volume Label volume to be analyzed
 * @param output_file Text file where the results are written
 * @param list_only Only list the labels
 * @param version Print version and exit
 * @param help Print help and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PrintUniqueLabelsCshOutputs`).
 */
function print_unique_labels_csh(
    label_volume: InputPathType,
    output_file: string | null = null,
    list_only: boolean = false,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): PrintUniqueLabelsCshOutputs {
    const params = print_unique_labels_csh_params(label_volume, output_file, list_only, version, help)
    return print_unique_labels_csh_execute(params, runner);
}


export {
      PRINT_UNIQUE_LABELS_CSH_METADATA,
      PrintUniqueLabelsCshOutputs,
      PrintUniqueLabelsCshParameters,
      print_unique_labels_csh,
      print_unique_labels_csh_execute,
      print_unique_labels_csh_params,
};
