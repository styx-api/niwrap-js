// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_COR2LABEL_METADATA: Metadata = {
    id: "1d2d54df5aac2096dd47a33b09dc9c5904fb89f4.boutiques",
    name: "mri_cor2label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCor2labelParameters {
    "__STYXTYPE__": "mri_cor2label";
    "input_file": InputPathType;
    "label_id": number;
    "label_file": string;
    "threshold"?: number | null | undefined;
    "volume_file"?: string | null | undefined;
    "surface_overlay"?: Array<string> | null | undefined;
    "surface_path"?: string | null | undefined;
    "optimize"?: Array<string> | null | undefined;
    "remove_holes_islands": boolean;
    "dilate"?: number | null | undefined;
    "erode"?: number | null | undefined;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_cor2label": mri_cor2label_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_cor2label": mri_cor2label_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_cor2label(...)`.
 *
 * @interface
 */
interface MriCor2labelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated label file.
     */
    output_label_file: OutputPathType;
    /**
     * Written volume label if specified.
     */
    output_volume_file: OutputPathType | null;
}


function mri_cor2label_params(
    input_file: InputPathType,
    label_id: number,
    label_file: string,
    threshold: number | null = null,
    volume_file: string | null = null,
    surface_overlay: Array<string> | null = null,
    surface_path: string | null = null,
    optimize: Array<string> | null = null,
    remove_holes_islands: boolean = false,
    dilate: number | null = null,
    erode: number | null = null,
    help: boolean = false,
): MriCor2labelParameters {
    /**
     * Build parameters.
    
     * @param input_file Input volume or surface overlay file.
     * @param label_id Value to match in the input data.
     * @param label_file Name of the output label file.
     * @param threshold Threshold the input to make label, e.g., input values must be greater than the threshold.
     * @param volume_file Write the label volume to a file.
     * @param surface_overlay Interpret input as a surface overlay, specifying subject, hemisphere, and surface.
     * @param surface_path Specify surface path rather than subject/hemisphere.
     * @param optimize Treat input as a probability map and optimize thresholding.
     * @param remove_holes_islands Remove holes in label and islands (only valid with --surf).
     * @param dilate Dilate label with specified number of dilations (only valid with --surf).
     * @param erode Erode label with specified number of erosions (only valid with --surf).
     * @param help Display help information.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_cor2label" as const,
        "input_file": input_file,
        "label_id": label_id,
        "label_file": label_file,
        "remove_holes_islands": remove_holes_islands,
        "help": help,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (volume_file !== null) {
        params["volume_file"] = volume_file;
    }
    if (surface_overlay !== null) {
        params["surface_overlay"] = surface_overlay;
    }
    if (surface_path !== null) {
        params["surface_path"] = surface_path;
    }
    if (optimize !== null) {
        params["optimize"] = optimize;
    }
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (erode !== null) {
        params["erode"] = erode;
    }
    return params;
}


function mri_cor2label_cargs(
    params: MriCor2labelParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_cor2label");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-id",
        String((params["label_id"] ?? null))
    );
    cargs.push(
        "-l",
        (params["label_file"] ?? null)
    );
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["volume_file"] ?? null) !== null) {
        cargs.push(
            "--v",
            (params["volume_file"] ?? null)
        );
    }
    if ((params["surface_overlay"] ?? null) !== null) {
        cargs.push(
            "--surf",
            ...(params["surface_overlay"] ?? null)
        );
    }
    if ((params["surface_path"] ?? null) !== null) {
        cargs.push(
            "--surf-path",
            (params["surface_path"] ?? null)
        );
    }
    if ((params["optimize"] ?? null) !== null) {
        cargs.push(
            "--opt",
            ...(params["optimize"] ?? null)
        );
    }
    if ((params["remove_holes_islands"] ?? null)) {
        cargs.push("--remove-holes-islands");
    }
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "--dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "--erode",
            String((params["erode"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


function mri_cor2label_outputs(
    params: MriCor2labelParameters,
    execution: Execution,
): MriCor2labelOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriCor2labelOutputs = {
        root: execution.outputFile("."),
        output_label_file: execution.outputFile([(params["label_file"] ?? null)].join('')),
        output_volume_file: ((params["volume_file"] ?? null) !== null) ? execution.outputFile([(params["volume_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function mri_cor2label_execute(
    params: MriCor2labelParameters,
    execution: Execution,
): MriCor2labelOutputs {
    /**
     * Converts values in a volume or surface overlay to a label. Designed to convert parcellation volumes stored in mri format.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriCor2labelOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_cor2label_cargs(params, execution)
    const ret = mri_cor2label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_cor2label(
    input_file: InputPathType,
    label_id: number,
    label_file: string,
    threshold: number | null = null,
    volume_file: string | null = null,
    surface_overlay: Array<string> | null = null,
    surface_path: string | null = null,
    optimize: Array<string> | null = null,
    remove_holes_islands: boolean = false,
    dilate: number | null = null,
    erode: number | null = null,
    help: boolean = false,
    runner: Runner | null = null,
): MriCor2labelOutputs {
    /**
     * Converts values in a volume or surface overlay to a label. Designed to convert parcellation volumes stored in mri format.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Input volume or surface overlay file.
     * @param label_id Value to match in the input data.
     * @param label_file Name of the output label file.
     * @param threshold Threshold the input to make label, e.g., input values must be greater than the threshold.
     * @param volume_file Write the label volume to a file.
     * @param surface_overlay Interpret input as a surface overlay, specifying subject, hemisphere, and surface.
     * @param surface_path Specify surface path rather than subject/hemisphere.
     * @param optimize Treat input as a probability map and optimize thresholding.
     * @param remove_holes_islands Remove holes in label and islands (only valid with --surf).
     * @param dilate Dilate label with specified number of dilations (only valid with --surf).
     * @param erode Erode label with specified number of erosions (only valid with --surf).
     * @param help Display help information.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriCor2labelOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_COR2LABEL_METADATA);
    const params = mri_cor2label_params(input_file, label_id, label_file, threshold, volume_file, surface_overlay, surface_path, optimize, remove_holes_islands, dilate, erode, help)
    return mri_cor2label_execute(params, execution);
}


export {
      MRI_COR2LABEL_METADATA,
      MriCor2labelOutputs,
      MriCor2labelParameters,
      mri_cor2label,
      mri_cor2label_params,
};
