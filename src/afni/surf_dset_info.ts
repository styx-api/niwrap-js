// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_DSET_INFO_METADATA: Metadata = {
    id: "795549271109234a41c61152482dd9eef978ce67.boutiques",
    name: "SurfDsetInfo",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfDsetInfoParameters {
    "@type"?: "afni/SurfDsetInfo";
    "input_dsets": Array<InputPathType>;
    "debug_level"?: number | null | undefined;
    "novolreg": boolean;
    "noxform": boolean;
    "setenv"?: string | null | undefined;
    "trace": boolean;
    "extreme_trace": boolean;
    "nomall": boolean;
    "yesmall": boolean;
    "mini_help": boolean;
    "help": boolean;
    "extreme_help": boolean;
    "help_view": boolean;
    "help_web": boolean;
    "help_find"?: string | null | undefined;
    "help_raw": boolean;
    "help_spx": boolean;
    "help_aspx": boolean;
    "all_opts": boolean;
}
type SurfDsetInfoParametersTagged = Required<Pick<SurfDsetInfoParameters, '@type'>> & SurfDsetInfoParameters;


/**
 * Output object returned when calling `SurfDsetInfoParameters(...)`.
 *
 * @interface
 */
interface SurfDsetInfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dsets Input dataset
 * @param debug_level Debug level. If DBG = 2, show full dataset information in NIML form.
 * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations
 * @param noxform Same as -novolreg
 * @param setenv Set environment variable
 * @param trace Turns on In/Out debug and Memory tracing
 * @param extreme_trace Turns on extreme tracing
 * @param nomall Turn off memory tracing
 * @param yesmall Turn on memory tracing (default)
 * @param mini_help Mini help
 * @param help Show entire help output
 * @param extreme_help Show extreme help
 * @param help_view Open help in text editor
 * @param help_web Open help in web browser
 * @param help_find Look for lines in help output that match the specified word
 * @param help_raw Show unedited help string
 * @param help_spx Show help string in sphinx format, but do not autoformat
 * @param help_aspx Show help string in sphinx with autoformatting
 * @param all_opts Attempt to identify all options for the program from the help output
 *
 * @returns Parameter dictionary
 */
function surf_dset_info_params(
    input_dsets: Array<InputPathType>,
    debug_level: number | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    nomall: boolean = false,
    yesmall: boolean = false,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    help_view: boolean = false,
    help_web: boolean = false,
    help_find: string | null = null,
    help_raw: boolean = false,
    help_spx: boolean = false,
    help_aspx: boolean = false,
    all_opts: boolean = false,
): SurfDsetInfoParametersTagged {
    const params = {
        "@type": "afni/SurfDsetInfo" as const,
        "input_dsets": input_dsets,
        "novolreg": novolreg,
        "noxform": noxform,
        "trace": trace,
        "extreme_trace": extreme_trace,
        "nomall": nomall,
        "yesmall": yesmall,
        "mini_help": mini_help,
        "help": help,
        "extreme_help": extreme_help,
        "help_view": help_view,
        "help_web": help_web,
        "help_raw": help_raw,
        "help_spx": help_spx,
        "help_aspx": help_aspx,
        "all_opts": all_opts,
    };
    if (debug_level !== null) {
        params["debug_level"] = debug_level;
    }
    if (setenv !== null) {
        params["setenv"] = setenv;
    }
    if (help_find !== null) {
        params["help_find"] = help_find;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_dset_info_cargs(
    params: SurfDsetInfoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfDsetInfo");
    cargs.push(
        "-input",
        ...(params["input_dsets"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["debug_level"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug_level"] ?? null))
        );
    }
    if ((params["novolreg"] ?? false)) {
        cargs.push("-novolreg");
    }
    if ((params["noxform"] ?? false)) {
        cargs.push("-noxform");
    }
    if ((params["setenv"] ?? null) !== null) {
        cargs.push(
            "-setenv",
            (params["setenv"] ?? null)
        );
    }
    if ((params["trace"] ?? false)) {
        cargs.push("-trace");
    }
    if ((params["extreme_trace"] ?? false)) {
        cargs.push("-TRACE");
    }
    if ((params["nomall"] ?? false)) {
        cargs.push("-nomall");
    }
    if ((params["yesmall"] ?? false)) {
        cargs.push("-yesmall");
    }
    if ((params["mini_help"] ?? false)) {
        cargs.push("-h");
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["extreme_help"] ?? false)) {
        cargs.push("-HELP");
    }
    if ((params["help_view"] ?? false)) {
        cargs.push("-h_view");
    }
    if ((params["help_web"] ?? false)) {
        cargs.push("-h_web");
    }
    if ((params["help_find"] ?? null) !== null) {
        cargs.push(
            "-h_find",
            (params["help_find"] ?? null)
        );
    }
    if ((params["help_raw"] ?? false)) {
        cargs.push("-h_raw");
    }
    if ((params["help_spx"] ?? false)) {
        cargs.push("-h_spx");
    }
    if ((params["help_aspx"] ?? false)) {
        cargs.push("-h_aspx");
    }
    if ((params["all_opts"] ?? false)) {
        cargs.push("-all_opts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_dset_info_outputs(
    params: SurfDsetInfoParameters,
    execution: Execution,
): SurfDsetInfoOutputs {
    const ret: SurfDsetInfoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * SurfDsetInfo
 *
 * Provides information about surface datasets (DSET).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfDsetInfoOutputs`).
 */
function surf_dset_info_execute(
    params: SurfDsetInfoParameters,
    runner: Runner | null = null,
): SurfDsetInfoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_DSET_INFO_METADATA);
    params = execution.params(params)
    const cargs = surf_dset_info_cargs(params, execution)
    const ret = surf_dset_info_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SurfDsetInfo
 *
 * Provides information about surface datasets (DSET).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dsets Input dataset
 * @param debug_level Debug level. If DBG = 2, show full dataset information in NIML form.
 * @param novolreg Ignore any Rotate, Volreg, Tagalign, or WarpDrive transformations
 * @param noxform Same as -novolreg
 * @param setenv Set environment variable
 * @param trace Turns on In/Out debug and Memory tracing
 * @param extreme_trace Turns on extreme tracing
 * @param nomall Turn off memory tracing
 * @param yesmall Turn on memory tracing (default)
 * @param mini_help Mini help
 * @param help Show entire help output
 * @param extreme_help Show extreme help
 * @param help_view Open help in text editor
 * @param help_web Open help in web browser
 * @param help_find Look for lines in help output that match the specified word
 * @param help_raw Show unedited help string
 * @param help_spx Show help string in sphinx format, but do not autoformat
 * @param help_aspx Show help string in sphinx with autoformatting
 * @param all_opts Attempt to identify all options for the program from the help output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfDsetInfoOutputs`).
 */
function surf_dset_info(
    input_dsets: Array<InputPathType>,
    debug_level: number | null = null,
    novolreg: boolean = false,
    noxform: boolean = false,
    setenv: string | null = null,
    trace: boolean = false,
    extreme_trace: boolean = false,
    nomall: boolean = false,
    yesmall: boolean = false,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    help_view: boolean = false,
    help_web: boolean = false,
    help_find: string | null = null,
    help_raw: boolean = false,
    help_spx: boolean = false,
    help_aspx: boolean = false,
    all_opts: boolean = false,
    runner: Runner | null = null,
): SurfDsetInfoOutputs {
    const params = surf_dset_info_params(input_dsets, debug_level, novolreg, noxform, setenv, trace, extreme_trace, nomall, yesmall, mini_help, help, extreme_help, help_view, help_web, help_find, help_raw, help_spx, help_aspx, all_opts)
    return surf_dset_info_execute(params, runner);
}


export {
      SURF_DSET_INFO_METADATA,
      SurfDsetInfoOutputs,
      surf_dset_info,
      surf_dset_info_execute,
      surf_dset_info_params,
};
