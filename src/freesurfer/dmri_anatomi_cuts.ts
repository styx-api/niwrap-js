// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_ANATOMI_CUTS_METADATA: Metadata = {
    id: "b662e297e903b2bd669c0571dc3606bff1e0a3b4.boutiques",
    name: "dmri_AnatomiCuts",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriAnatomiCutsParameters {
    "@type"?: "freesurfer/dmri_AnatomiCuts";
    "segmentation_file": InputPathType;
    "fiber_file": InputPathType;
    "clusters": number;
    "points": number;
    "fibers_eigen": number;
    "output_folder": string;
    "direction_flag": "s" | "d" | "a" | "o";
}
type DmriAnatomiCutsParametersTagged = Required<Pick<DmriAnatomiCutsParameters, '@type'>> & DmriAnatomiCutsParameters;


/**
 * Output object returned when calling `DmriAnatomiCutsParameters(...)`.
 *
 * @interface
 */
interface DmriAnatomiCutsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output VTK file of the segmentation
     */
    output_vtk: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param segmentation_file Segmentation file
 * @param fiber_file VTK fiber file
 * @param clusters Number of clusters
 * @param points Number of points
 * @param fibers_eigen Number of fibers for eigen decomposition
 * @param output_folder Output folder
 * @param direction_flag Direction flag: 's' for straight, 'd' for diagonal, 'a' for all, 'o' for none
 *
 * @returns Parameter dictionary
 */
function dmri_anatomi_cuts_params(
    segmentation_file: InputPathType,
    fiber_file: InputPathType,
    clusters: number,
    points: number,
    fibers_eigen: number,
    output_folder: string,
    direction_flag: "s" | "d" | "a" | "o",
): DmriAnatomiCutsParametersTagged {
    const params = {
        "@type": "freesurfer/dmri_AnatomiCuts" as const,
        "segmentation_file": segmentation_file,
        "fiber_file": fiber_file,
        "clusters": clusters,
        "points": points,
        "fibers_eigen": fibers_eigen,
        "output_folder": output_folder,
        "direction_flag": direction_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_anatomi_cuts_cargs(
    params: DmriAnatomiCutsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_AnatomiCuts");
    cargs.push(
        "-s",
        execution.inputFile((params["segmentation_file"] ?? null))
    );
    cargs.push(
        "-f",
        execution.inputFile((params["fiber_file"] ?? null))
    );
    cargs.push(
        "-c",
        String((params["clusters"] ?? null))
    );
    cargs.push(
        "-n",
        String((params["points"] ?? null))
    );
    cargs.push(
        "-e",
        String((params["fibers_eigen"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_folder"] ?? null)
    );
    cargs.push(
        "-d",
        (params["direction_flag"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_anatomi_cuts_outputs(
    params: DmriAnatomiCutsParameters,
    execution: Execution,
): DmriAnatomiCutsOutputs {
    const ret: DmriAnatomiCutsOutputs = {
        root: execution.outputFile("."),
        output_vtk: execution.outputFile([(params["output_folder"] ?? null), "/output.vtk"].join('')),
    };
    return ret;
}


/**
 * dmri_AnatomiCuts
 *
 * AnatomiCuts tool for DTI fibers segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriAnatomiCutsOutputs`).
 */
function dmri_anatomi_cuts_execute(
    params: DmriAnatomiCutsParameters,
    runner: Runner | null = null,
): DmriAnatomiCutsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_ANATOMI_CUTS_METADATA);
    params = execution.params(params)
    const cargs = dmri_anatomi_cuts_cargs(params, execution)
    const ret = dmri_anatomi_cuts_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_AnatomiCuts
 *
 * AnatomiCuts tool for DTI fibers segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param segmentation_file Segmentation file
 * @param fiber_file VTK fiber file
 * @param clusters Number of clusters
 * @param points Number of points
 * @param fibers_eigen Number of fibers for eigen decomposition
 * @param output_folder Output folder
 * @param direction_flag Direction flag: 's' for straight, 'd' for diagonal, 'a' for all, 'o' for none
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriAnatomiCutsOutputs`).
 */
function dmri_anatomi_cuts(
    segmentation_file: InputPathType,
    fiber_file: InputPathType,
    clusters: number,
    points: number,
    fibers_eigen: number,
    output_folder: string,
    direction_flag: "s" | "d" | "a" | "o",
    runner: Runner | null = null,
): DmriAnatomiCutsOutputs {
    const params = dmri_anatomi_cuts_params(segmentation_file, fiber_file, clusters, points, fibers_eigen, output_folder, direction_flag)
    return dmri_anatomi_cuts_execute(params, runner);
}


export {
      DMRI_ANATOMI_CUTS_METADATA,
      DmriAnatomiCutsOutputs,
      dmri_anatomi_cuts,
      dmri_anatomi_cuts_execute,
      dmri_anatomi_cuts_params,
};
