// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TOY_PROG_METADATA: Metadata = {
    id: "5b79d4ff9e6891e041e9a3b68d176f2055097819.boutiques",
    name: "3dToyProg",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dToyProgParameters {
    "@type": "afni.3dToyProg";
    "input_dataset": InputPathType;
    "output_prefix"?: string | null | undefined;
    "mask_dataset"?: InputPathType | null | undefined;
    "output_datum"?: "float" | "short" | null | undefined;
    "mini_help": boolean;
    "help": boolean;
    "extreme_help": boolean;
    "help_view": boolean;
    "help_web": boolean;
    "help_find"?: string | null | undefined;
    "help_raw": boolean;
    "help_spx": boolean;
    "help_aspx": boolean;
    "help_all_opts": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dToyProg": v_3d_toy_prog_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_toy_prog(...)`.
 *
 * @interface
 */
interface V3dToyProgOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_dataset Reference dataset
 * @param output_prefix Prefix of the output datasets
 * @param mask_dataset Restrict analysis to non-zero voxels in the mask dataset
 * @param output_datum Output datum type for one of the datasets. Choose from 'float' or 'short'. Default is 'float'.
 * @param mini_help Mini help, at time, same as -help in many cases.
 * @param help The entire help output.
 * @param extreme_help Extreme help, same as -help in majority of cases.
 * @param help_view Open help in text editor. AFNI will try to find a GUI editor on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
 * @param help_web Open help in web browser. AFNI will try to find a browser on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
 * @param help_find Look for lines in this program's -help output that match (approximately) WORD.
 * @param help_raw Help string unedited.
 * @param help_spx Help string in sphinx loveliness, but do not try to autoformat.
 * @param help_aspx Help string in sphinx with autoformatting of options, etc.
 * @param help_all_opts Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.
 *
 * @returns Parameter dictionary
 */
function v_3d_toy_prog_params(
    input_dataset: InputPathType,
    output_prefix: string | null = null,
    mask_dataset: InputPathType | null = null,
    output_datum: "float" | "short" | null = null,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    help_view: boolean = false,
    help_web: boolean = false,
    help_find: string | null = null,
    help_raw: boolean = false,
    help_spx: boolean = false,
    help_aspx: boolean = false,
    help_all_opts: boolean = false,
): V3dToyProgParameters {
    const params = {
        "@type": "afni.3dToyProg" as const,
        "input_dataset": input_dataset,
        "mini_help": mini_help,
        "help": help,
        "extreme_help": extreme_help,
        "help_view": help_view,
        "help_web": help_web,
        "help_raw": help_raw,
        "help_spx": help_spx,
        "help_aspx": help_aspx,
        "help_all_opts": help_all_opts,
    };
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    if (output_datum !== null) {
        params["output_datum"] = output_datum;
    }
    if (help_find !== null) {
        params["help_find"] = help_find;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_toy_prog_cargs(
    params: V3dToyProgParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dToyProg");
    cargs.push(
        "-input",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    if ((params["output_datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["output_datum"] ?? null)
        );
    }
    if ((params["mini_help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["extreme_help"] ?? null)) {
        cargs.push("-HELP");
    }
    if ((params["help_view"] ?? null)) {
        cargs.push("-h_view");
    }
    if ((params["help_web"] ?? null)) {
        cargs.push("-h_web");
    }
    if ((params["help_find"] ?? null) !== null) {
        cargs.push(
            "-h_find",
            (params["help_find"] ?? null)
        );
    }
    if ((params["help_raw"] ?? null)) {
        cargs.push("-h_raw");
    }
    if ((params["help_spx"] ?? null)) {
        cargs.push("-h_spx");
    }
    if ((params["help_aspx"] ?? null)) {
        cargs.push("-h_aspx");
    }
    if ((params["help_all_opts"] ?? null)) {
        cargs.push("-all_opts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_toy_prog_outputs(
    params: V3dToyProgParameters,
    execution: Execution,
): V3dToyProgOutputs {
    const ret: V3dToyProgOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A program to illustrate dataset creation and manipulation in C using AFNI's API.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dToyProgOutputs`).
 */
function v_3d_toy_prog_execute(
    params: V3dToyProgParameters,
    execution: Execution,
): V3dToyProgOutputs {
    params = execution.params(params)
    const cargs = v_3d_toy_prog_cargs(params, execution)
    const ret = v_3d_toy_prog_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A program to illustrate dataset creation and manipulation in C using AFNI's API.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dataset Reference dataset
 * @param output_prefix Prefix of the output datasets
 * @param mask_dataset Restrict analysis to non-zero voxels in the mask dataset
 * @param output_datum Output datum type for one of the datasets. Choose from 'float' or 'short'. Default is 'float'.
 * @param mini_help Mini help, at time, same as -help in many cases.
 * @param help The entire help output.
 * @param extreme_help Extreme help, same as -help in majority of cases.
 * @param help_view Open help in text editor. AFNI will try to find a GUI editor on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
 * @param help_web Open help in web browser. AFNI will try to find a browser on your machine. You can control which it should use by setting environment variable AFNI_GUI_EDITOR.
 * @param help_find Look for lines in this program's -help output that match (approximately) WORD.
 * @param help_raw Help string unedited.
 * @param help_spx Help string in sphinx loveliness, but do not try to autoformat.
 * @param help_aspx Help string in sphinx with autoformatting of options, etc.
 * @param help_all_opts Try to identify all options for the program from the output of its -help option. Some options might be missed and others misidentified. Use this output for hints only.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dToyProgOutputs`).
 */
function v_3d_toy_prog(
    input_dataset: InputPathType,
    output_prefix: string | null = null,
    mask_dataset: InputPathType | null = null,
    output_datum: "float" | "short" | null = null,
    mini_help: boolean = false,
    help: boolean = false,
    extreme_help: boolean = false,
    help_view: boolean = false,
    help_web: boolean = false,
    help_find: string | null = null,
    help_raw: boolean = false,
    help_spx: boolean = false,
    help_aspx: boolean = false,
    help_all_opts: boolean = false,
    runner: Runner | null = null,
): V3dToyProgOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TOY_PROG_METADATA);
    const params = v_3d_toy_prog_params(input_dataset, output_prefix, mask_dataset, output_datum, mini_help, help, extreme_help, help_view, help_web, help_find, help_raw, help_spx, help_aspx, help_all_opts)
    return v_3d_toy_prog_execute(params, execution);
}


export {
      V3dToyProgOutputs,
      V3dToyProgParameters,
      V_3D_TOY_PROG_METADATA,
      v_3d_toy_prog,
      v_3d_toy_prog_cargs,
      v_3d_toy_prog_execute,
      v_3d_toy_prog_outputs,
      v_3d_toy_prog_params,
};
