// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL2PATCH_METADATA: Metadata = {
    id: "209d95f6b0fb2b1a5399b2c8f80440646f5bda81.boutiques",
    name: "label2patch",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Label2patchParameters {
    "@type"?: "freesurfer/label2patch";
    "subject_name": string;
    "hemisphere": string;
    "label_file": InputPathType;
    "output_patch": string;
    "dilate"?: number | null | undefined;
    "erode"?: number | null | undefined;
    "close"?: number | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "surface_name"?: string | null | undefined;
    "write_surface": boolean;
}
type Label2patchParametersTagged = Required<Pick<Label2patchParameters, '@type'>> & Label2patchParameters;


/**
 * Output object returned when calling `Label2patchParameters(...)`.
 *
 * @interface
 */
interface Label2patchOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name Subject name
 * @param hemisphere Hemisphere (e.g. lh or rh)
 * @param label_file Label file name
 * @param output_patch Output patch file
 * @param dilate Dilate the label n times before creating the patch
 * @param erode Erode the label n times before creating the patch
 * @param close Close the label n times before creating the patch
 * @param subjects_dir Use path as the SUBJECTS_DIR instead of environment
 * @param surface_name Use name as the surface (default 'inflated')
 * @param write_surface Write output to a surface file (not a patch). Use .stl in filename to only write the mesh covered by the label, saving it in FS format will save full surface
 *
 * @returns Parameter dictionary
 */
function label2patch_params(
    subject_name: string,
    hemisphere: string,
    label_file: InputPathType,
    output_patch: string,
    dilate: number | null = null,
    erode: number | null = null,
    close: number | null = null,
    subjects_dir: string | null = null,
    surface_name: string | null = null,
    write_surface: boolean = false,
): Label2patchParametersTagged {
    const params = {
        "@type": "freesurfer/label2patch" as const,
        "subject_name": subject_name,
        "hemisphere": hemisphere,
        "label_file": label_file,
        "output_patch": output_patch,
        "write_surface": write_surface,
    };
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (erode !== null) {
        params["erode"] = erode;
    }
    if (close !== null) {
        params["close"] = close;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (surface_name !== null) {
        params["surface_name"] = surface_name;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label2patch_cargs(
    params: Label2patchParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("label2patch");
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    cargs.push(execution.inputFile((params["label_file"] ?? null)));
    cargs.push((params["output_patch"] ?? null));
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "-dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "-erode",
            String((params["erode"] ?? null))
        );
    }
    if ((params["close"] ?? null) !== null) {
        cargs.push(
            "-close",
            String((params["close"] ?? null))
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "-sdir",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["surface_name"] ?? null) !== null) {
        cargs.push(
            "-surf",
            (params["surface_name"] ?? null)
        );
    }
    if ((params["write_surface"] ?? false)) {
        cargs.push("-writesurf");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label2patch_outputs(
    params: Label2patchParameters,
    execution: Execution,
): Label2patchOutputs {
    const ret: Label2patchOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * label2patch
 *
 * Utility to create patches from label files in Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Label2patchOutputs`).
 */
function label2patch_execute(
    params: Label2patchParameters,
    runner: Runner | null = null,
): Label2patchOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL2PATCH_METADATA);
    params = execution.params(params)
    const cargs = label2patch_cargs(params, execution)
    const ret = label2patch_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * label2patch
 *
 * Utility to create patches from label files in Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name Subject name
 * @param hemisphere Hemisphere (e.g. lh or rh)
 * @param label_file Label file name
 * @param output_patch Output patch file
 * @param dilate Dilate the label n times before creating the patch
 * @param erode Erode the label n times before creating the patch
 * @param close Close the label n times before creating the patch
 * @param subjects_dir Use path as the SUBJECTS_DIR instead of environment
 * @param surface_name Use name as the surface (default 'inflated')
 * @param write_surface Write output to a surface file (not a patch). Use .stl in filename to only write the mesh covered by the label, saving it in FS format will save full surface
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Label2patchOutputs`).
 */
function label2patch(
    subject_name: string,
    hemisphere: string,
    label_file: InputPathType,
    output_patch: string,
    dilate: number | null = null,
    erode: number | null = null,
    close: number | null = null,
    subjects_dir: string | null = null,
    surface_name: string | null = null,
    write_surface: boolean = false,
    runner: Runner | null = null,
): Label2patchOutputs {
    const params = label2patch_params(subject_name, hemisphere, label_file, output_patch, dilate, erode, close, subjects_dir, surface_name, write_surface)
    return label2patch_execute(params, runner);
}


export {
      LABEL2PATCH_METADATA,
      Label2patchOutputs,
      label2patch,
      label2patch_execute,
      label2patch_params,
};
