// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VECWARP_METADATA: Metadata = {
    id: "eee2d3334c6ced0ad01d689ccca832cba4f16ad5.boutiques",
    name: "Vecwarp",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VecwarpParameters {
    "@type": "afni.Vecwarp";
    "apar"?: InputPathType | null | undefined;
    "matvec"?: InputPathType | null | undefined;
    "forward": boolean;
    "backward": boolean;
    "input"?: InputPathType | null | undefined;
    "output"?: string | null | undefined;
    "force": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.Vecwarp": vecwarp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.Vecwarp": vecwarp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `vecwarp(...)`.
 *
 * @interface
 */
interface VecwarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file containing the transformed 3-vectors.
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param apar Use the AFNI dataset 'aaa' as the source of the transformation; this dataset must be in +acpc or +tlrc coordinates, and must contain the attributes WARP_TYPE and WARP_DATA which describe the forward transformation from +orig coordinates to the 'aaa' coordinate system.
 * @param matvec Read an affine transformation matrix-vector from file 'mmm', which must be in the specified format.
 * @param forward To apply the forward transformation. If neither -forward nor -backward is given, -forward is the default.
 * @param backward To apply the backward transformation.
 * @param input Read input 3-vectors from the file 'iii' (from stdin if 'iii' is '-' or the -input option is missing).
 * @param output Write the output to file 'ooo' (to stdout if 'ooo' is '-', or if the -output option is missing).
 * @param force If the output file already exists, use -force to overwrite it. If -force is used, it must come before -output on the command line.
 *
 * @returns Parameter dictionary
 */
function vecwarp_params(
    apar: InputPathType | null = null,
    matvec: InputPathType | null = null,
    forward: boolean = false,
    backward: boolean = false,
    input: InputPathType | null = null,
    output: string | null = null,
    force: boolean = false,
): VecwarpParameters {
    const params = {
        "@type": "afni.Vecwarp" as const,
        "forward": forward,
        "backward": backward,
        "force": force,
    };
    if (apar !== null) {
        params["apar"] = apar;
    }
    if (matvec !== null) {
        params["matvec"] = matvec;
    }
    if (input !== null) {
        params["input"] = input;
    }
    if (output !== null) {
        params["output"] = output;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function vecwarp_cargs(
    params: VecwarpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("Vecwarp");
    if ((params["apar"] ?? null) !== null) {
        cargs.push(
            "-apar",
            execution.inputFile((params["apar"] ?? null))
        );
    }
    if ((params["matvec"] ?? null) !== null) {
        cargs.push(
            "-matvec",
            execution.inputFile((params["matvec"] ?? null))
        );
    }
    if ((params["forward"] ?? null)) {
        cargs.push("-forward");
    }
    if ((params["backward"] ?? null)) {
        cargs.push("-backward");
    }
    if ((params["input"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["input"] ?? null))
        );
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "-output",
            (params["output"] ?? null)
        );
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function vecwarp_outputs(
    params: VecwarpParameters,
    execution: Execution,
): VecwarpOutputs {
    const ret: VecwarpOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Vecwarp
 *
 * Transforms (warps) a list of 3-vectors into another list of 3-vectors according to the specified options.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VecwarpOutputs`).
 */
function vecwarp_execute(
    params: VecwarpParameters,
    runner: Runner | null = null,
): VecwarpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VECWARP_METADATA);
    params = execution.params(params)
    const cargs = vecwarp_cargs(params, execution)
    const ret = vecwarp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Vecwarp
 *
 * Transforms (warps) a list of 3-vectors into another list of 3-vectors according to the specified options.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param apar Use the AFNI dataset 'aaa' as the source of the transformation; this dataset must be in +acpc or +tlrc coordinates, and must contain the attributes WARP_TYPE and WARP_DATA which describe the forward transformation from +orig coordinates to the 'aaa' coordinate system.
 * @param matvec Read an affine transformation matrix-vector from file 'mmm', which must be in the specified format.
 * @param forward To apply the forward transformation. If neither -forward nor -backward is given, -forward is the default.
 * @param backward To apply the backward transformation.
 * @param input Read input 3-vectors from the file 'iii' (from stdin if 'iii' is '-' or the -input option is missing).
 * @param output Write the output to file 'ooo' (to stdout if 'ooo' is '-', or if the -output option is missing).
 * @param force If the output file already exists, use -force to overwrite it. If -force is used, it must come before -output on the command line.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VecwarpOutputs`).
 */
function vecwarp(
    apar: InputPathType | null = null,
    matvec: InputPathType | null = null,
    forward: boolean = false,
    backward: boolean = false,
    input: InputPathType | null = null,
    output: string | null = null,
    force: boolean = false,
    runner: Runner | null = null,
): VecwarpOutputs {
    const params = vecwarp_params(apar, matvec, forward, backward, input, output, force)
    return vecwarp_execute(params, runner);
}


export {
      VECWARP_METADATA,
      VecwarpOutputs,
      VecwarpParameters,
      vecwarp,
      vecwarp_execute,
      vecwarp_params,
};
