// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SUMA_CHANGE_SPEC_METADATA: Metadata = {
    id: "f13f0176c0f78fdf29d29c5c7899209d6deff415.boutiques",
    name: "suma_change_spec",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SumaChangeSpecParameters {
    "__STYXTYPE__": "suma_change_spec";
    "input": InputPathType;
    "state": string;
    "domainparent"?: string | null | undefined;
    "output"?: string | null | undefined;
    "remove": boolean;
    "anatomical": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "suma_change_spec": suma_change_spec_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "suma_change_spec": suma_change_spec_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `suma_change_spec(...)`.
 *
 * @interface
 */
interface SumaChangeSpecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * New Spec file
     */
    output_spec: OutputPathType | null;
    /**
     * Backup of the original Spec file
     */
    backup_spec: OutputPathType;
}


function suma_change_spec_params(
    input: InputPathType,
    state: string,
    domainparent: string | null = null,
    output: string | null = null,
    remove: boolean = false,
    anatomical: boolean = false,
): SumaChangeSpecParameters {
    /**
     * Build parameters.
    
     * @param input SUMA Spec file to change
     * @param state State within the Spec file to change
     * @param domainparent New Domain Parent for the state within the Spec file
     * @param output Name to which the new Spec file will be temporarily written
     * @param remove Remove the automatically created backup
     * @param anatomical Add 'Anatomical = Y' to the selected SurfaceState
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "suma_change_spec" as const,
        "input": input,
        "state": state,
        "remove": remove,
        "anatomical": anatomical,
    };
    if (domainparent !== null) {
        params["domainparent"] = domainparent;
    }
    if (output !== null) {
        params["output"] = output;
    }
    return params;
}


function suma_change_spec_cargs(
    params: SumaChangeSpecParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("suma_change_spec");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["state"] ?? null));
    if ((params["domainparent"] ?? null) !== null) {
        cargs.push((params["domainparent"] ?? null));
    }
    if ((params["output"] ?? null) !== null) {
        cargs.push((params["output"] ?? null));
    }
    if ((params["remove"] ?? null)) {
        cargs.push("-remove");
    }
    if ((params["anatomical"] ?? null)) {
        cargs.push("-anatomical");
    }
    return cargs;
}


function suma_change_spec_outputs(
    params: SumaChangeSpecParameters,
    execution: Execution,
): SumaChangeSpecOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SumaChangeSpecOutputs = {
        root: execution.outputFile("."),
        output_spec: ((params["output"] ?? null) !== null) ? execution.outputFile([(params["output"] ?? null)].join('')) : null,
        backup_spec: execution.outputFile([path.basename((params["input"] ?? null)), ".bkp"].join('')),
    };
    return ret;
}


function suma_change_spec_execute(
    params: SumaChangeSpecParameters,
    execution: Execution,
): SumaChangeSpecOutputs {
    /**
     * This program changes SUMA's surface specification (Spec) files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SumaChangeSpecOutputs`).
     */
    params = execution.params(params)
    const cargs = suma_change_spec_cargs(params, execution)
    const ret = suma_change_spec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function suma_change_spec(
    input: InputPathType,
    state: string,
    domainparent: string | null = null,
    output: string | null = null,
    remove: boolean = false,
    anatomical: boolean = false,
    runner: Runner | null = null,
): SumaChangeSpecOutputs {
    /**
     * This program changes SUMA's surface specification (Spec) files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input SUMA Spec file to change
     * @param state State within the Spec file to change
     * @param domainparent New Domain Parent for the state within the Spec file
     * @param output Name to which the new Spec file will be temporarily written
     * @param remove Remove the automatically created backup
     * @param anatomical Add 'Anatomical = Y' to the selected SurfaceState
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SumaChangeSpecOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SUMA_CHANGE_SPEC_METADATA);
    const params = suma_change_spec_params(input, state, domainparent, output, remove, anatomical)
    return suma_change_spec_execute(params, execution);
}


export {
      SUMA_CHANGE_SPEC_METADATA,
      SumaChangeSpecOutputs,
      SumaChangeSpecParameters,
      suma_change_spec,
      suma_change_spec_params,
};
