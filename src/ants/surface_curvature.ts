// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_CURVATURE_METADATA: Metadata = {
    id: "87f1cb724fe10ba50c1127e085f66ffe3a26f96f.boutiques",
    name: "SurfaceCurvature",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface SurfaceCurvatureParameters {
    "@type": "ants.SurfaceCurvature";
    "filename_in": InputPathType;
    "filename_out": string;
    "sigma": number;
    "option": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.SurfaceCurvature": surface_curvature_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.SurfaceCurvature": surface_curvature_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_curvature(...)`.
 *
 * @interface
 */
interface SurfaceCurvatureOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The processed image file.
     */
    output_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filename_in The input image file in .nii format.
 * @param filename_out The output image file in .nii format.
 * @param sigma The sigma value for analysis.
 * @param option The operation mode: 0 for mean curvature, 5 for surface characterization, 6 for Gaussian curvature, and 7 for surface area.
 *
 * @returns Parameter dictionary
 */
function surface_curvature_params(
    filename_in: InputPathType,
    filename_out: string,
    sigma: number,
    option: number,
): SurfaceCurvatureParameters {
    const params = {
        "@type": "ants.SurfaceCurvature" as const,
        "filename_in": filename_in,
        "filename_out": filename_out,
        "sigma": sigma,
        "option": option,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_curvature_cargs(
    params: SurfaceCurvatureParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfaceCurvature");
    cargs.push(execution.inputFile((params["filename_in"] ?? null)));
    cargs.push((params["filename_out"] ?? null));
    cargs.push(String((params["sigma"] ?? null)));
    cargs.push(String((params["option"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_curvature_outputs(
    params: SurfaceCurvatureParameters,
    execution: Execution,
): SurfaceCurvatureOutputs {
    const ret: SurfaceCurvatureOutputs = {
        root: execution.outputFile("."),
        output_image: execution.outputFile([(params["filename_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * SurfaceCurvature
 *
 * The Shape Operator for Differential Analysis of Images. It can operate on binary or gray scale images with various modes to see different effects.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceCurvatureOutputs`).
 */
function surface_curvature_execute(
    params: SurfaceCurvatureParameters,
    runner: Runner | null = null,
): SurfaceCurvatureOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_CURVATURE_METADATA);
    params = execution.params(params)
    const cargs = surface_curvature_cargs(params, execution)
    const ret = surface_curvature_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SurfaceCurvature
 *
 * The Shape Operator for Differential Analysis of Images. It can operate on binary or gray scale images with various modes to see different effects.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param filename_in The input image file in .nii format.
 * @param filename_out The output image file in .nii format.
 * @param sigma The sigma value for analysis.
 * @param option The operation mode: 0 for mean curvature, 5 for surface characterization, 6 for Gaussian curvature, and 7 for surface area.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceCurvatureOutputs`).
 */
function surface_curvature(
    filename_in: InputPathType,
    filename_out: string,
    sigma: number,
    option: number,
    runner: Runner | null = null,
): SurfaceCurvatureOutputs {
    const params = surface_curvature_params(filename_in, filename_out, sigma, option)
    return surface_curvature_execute(params, runner);
}


export {
      SURFACE_CURVATURE_METADATA,
      SurfaceCurvatureOutputs,
      SurfaceCurvatureParameters,
      surface_curvature,
      surface_curvature_execute,
      surface_curvature_params,
};
