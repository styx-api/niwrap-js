// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIXELCONVERT_METADATA: Metadata = {
    id: "170fa7dc3642acbd077502469734d403aac1444a.boutiques",
    name: "fixelconvert",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface FixelconvertConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface FixelconvertVariousStringParameters {
    "__STYXTYPE__": "VariousString";
    "obj": string;
}


interface FixelconvertVariousFileParameters {
    "__STYXTYPE__": "VariousFile";
    "obj": InputPathType;
}


interface FixelconvertVariousString1Parameters {
    "__STYXTYPE__": "VariousString_1";
    "obj": string;
}


interface FixelconvertVariousFile1Parameters {
    "__STYXTYPE__": "VariousFile_1";
    "obj": InputPathType;
}


interface FixelconvertParameters {
    "__STYXTYPE__": "fixelconvert";
    "name"?: string | null | undefined;
    "nii": boolean;
    "out_size": boolean;
    "template"?: InputPathType | null | undefined;
    "value"?: InputPathType | null | undefined;
    "in_size"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<FixelconvertConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "fixel_in": FixelconvertVariousStringParameters | FixelconvertVariousFileParameters;
    "fixel_out": FixelconvertVariousString1Parameters | FixelconvertVariousFile1Parameters;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fixelconvert": fixelconvert_cargs,
        "config": fixelconvert_config_cargs,
        "VariousString": fixelconvert_various_string_cargs,
        "VariousFile": fixelconvert_various_file_cargs,
        "VariousString_1": fixelconvert_various_string_1_cargs,
        "VariousFile_1": fixelconvert_various_file_1_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


function fixelconvert_config_params(
    key: string,
    value: string,
): FixelconvertConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function fixelconvert_config_cargs(
    params: FixelconvertConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


function fixelconvert_various_string_params(
    obj: string,
): FixelconvertVariousStringParameters {
    /**
     * Build parameters.
    
     * @param obj String object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


function fixelconvert_various_string_cargs(
    params: FixelconvertVariousStringParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


function fixelconvert_various_file_params(
    obj: InputPathType,
): FixelconvertVariousFileParameters {
    /**
     * Build parameters.
    
     * @param obj File object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


function fixelconvert_various_file_cargs(
    params: FixelconvertVariousFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


function fixelconvert_various_string_1_params(
    obj: string,
): FixelconvertVariousString1Parameters {
    /**
     * Build parameters.
    
     * @param obj String object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousString_1" as const,
        "obj": obj,
    };
    return params;
}


function fixelconvert_various_string_1_cargs(
    params: FixelconvertVariousString1Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


function fixelconvert_various_file_1_params(
    obj: InputPathType,
): FixelconvertVariousFile1Parameters {
    /**
     * Build parameters.
    
     * @param obj File object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousFile_1" as const,
        "obj": obj,
    };
    return params;
}


function fixelconvert_various_file_1_cargs(
    params: FixelconvertVariousFile1Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `fixelconvert(...)`.
 *
 * @interface
 */
interface FixelconvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fixelconvert_params(
    fixel_in: FixelconvertVariousStringParameters | FixelconvertVariousFileParameters,
    fixel_out: FixelconvertVariousString1Parameters | FixelconvertVariousFile1Parameters,
    name: string | null = null,
    nii: boolean = false,
    out_size: boolean = false,
    template: InputPathType | null = null,
    value: InputPathType | null = null,
    in_size: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): FixelconvertParameters {
    /**
     * Build parameters.
    
     * @param fixel_in the input fixel file / directory.
     * @param fixel_out the output fixel file / directory.
     * @param name assign a different name to the value field output (Default: value). Do not include the file extension.
     * @param nii output the index, directions and data file in NIfTI format instead of .mif
     * @param out_size also output the 'size' field from the old format
     * @param template specify an existing fixel directory (in the new format) to which the new output should conform
     * @param value nominate the data file to import to the 'value' field in the old format
     * @param in_size import data for the 'size' field in the old format
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fixelconvert" as const,
        "nii": nii,
        "out_size": out_size,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "fixel_in": fixel_in,
        "fixel_out": fixel_out,
    };
    if (name !== null) {
        params["name"] = name;
    }
    if (template !== null) {
        params["template"] = template;
    }
    if (value !== null) {
        params["value"] = value;
    }
    if (in_size !== null) {
        params["in_size"] = in_size;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function fixelconvert_cargs(
    params: FixelconvertParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fixelconvert");
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["name"] ?? null)
        );
    }
    if ((params["nii"] ?? null)) {
        cargs.push("-nii");
    }
    if ((params["out_size"] ?? null)) {
        cargs.push("-out_size");
    }
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["value"] ?? null) !== null) {
        cargs.push(
            "-value",
            execution.inputFile((params["value"] ?? null))
        );
    }
    if ((params["in_size"] ?? null) !== null) {
        cargs.push(
            "-in_size",
            execution.inputFile((params["in_size"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...dynCargs((params["fixel_in"] ?? null).__STYXTYPE__)((params["fixel_in"] ?? null), execution));
    cargs.push(...dynCargs((params["fixel_out"] ?? null).__STYXTYPE__)((params["fixel_out"] ?? null), execution));
    return cargs;
}


function fixelconvert_outputs(
    params: FixelconvertParameters,
    execution: Execution,
): FixelconvertOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FixelconvertOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fixelconvert_execute(
    params: FixelconvertParameters,
    execution: Execution,
): FixelconvertOutputs {
    /**
     * Convert between the old format fixel image (.msf / .msh) and the new fixel directory format.
     * 
     * 
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FixelconvertOutputs`).
     */
    params = execution.params(params)
    const cargs = fixelconvert_cargs(params, execution)
    const ret = fixelconvert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fixelconvert(
    fixel_in: FixelconvertVariousStringParameters | FixelconvertVariousFileParameters,
    fixel_out: FixelconvertVariousString1Parameters | FixelconvertVariousFile1Parameters,
    name: string | null = null,
    nii: boolean = false,
    out_size: boolean = false,
    template: InputPathType | null = null,
    value: InputPathType | null = null,
    in_size: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelconvertConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): FixelconvertOutputs {
    /**
     * Convert between the old format fixel image (.msf / .msh) and the new fixel directory format.
     * 
     * 
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param fixel_in the input fixel file / directory.
     * @param fixel_out the output fixel file / directory.
     * @param name assign a different name to the value field output (Default: value). Do not include the file extension.
     * @param nii output the index, directions and data file in NIfTI format instead of .mif
     * @param out_size also output the 'size' field from the old format
     * @param template specify an existing fixel directory (in the new format) to which the new output should conform
     * @param value nominate the data file to import to the 'value' field in the old format
     * @param in_size import data for the 'size' field in the old format
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FixelconvertOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIXELCONVERT_METADATA);
    const params = fixelconvert_params(fixel_in, fixel_out, name, nii, out_size, template, value, in_size, info, quiet, debug, force, nthreads, config, help, version)
    return fixelconvert_execute(params, execution);
}


export {
      FIXELCONVERT_METADATA,
      FixelconvertConfigParameters,
      FixelconvertOutputs,
      FixelconvertParameters,
      FixelconvertVariousFile1Parameters,
      FixelconvertVariousFileParameters,
      FixelconvertVariousString1Parameters,
      FixelconvertVariousStringParameters,
      fixelconvert,
      fixelconvert_config_params,
      fixelconvert_params,
      fixelconvert_various_file_1_params,
      fixelconvert_various_file_params,
      fixelconvert_various_string_1_params,
      fixelconvert_various_string_params,
};
