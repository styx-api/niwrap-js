// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SEGCENTROIDS_METADATA: Metadata = {
    id: "ad1b76368fee88d8cea9119432892c20600ba077.boutiques",
    name: "mri_segcentroids",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSegcentroidsParameters {
    "@type": "freesurfer.mri_segcentroids";
    "input_segmentation": InputPathType;
    "output_file": string;
    "pointset_flag": boolean;
    "registration_file"?: InputPathType | null | undefined;
    "weights_file"?: InputPathType | null | undefined;
    "lut_file"?: InputPathType | null | undefined;
    "default_lut_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_segcentroids": mri_segcentroids_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_segcentroids": mri_segcentroids_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_segcentroids(...)`.
 *
 * @interface
 */
interface MriSegcentroidsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file containing the centroids.
     */
    output_centroids: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_segmentation Input segmentation volume file.
 * @param output_file Output text file for centroids.
 * @param pointset_flag Save centroids as a Freeview pointset (json).
 * @param registration_file Apply a linear registration (lta).
 * @param weights_file Compute weighted centroids with provided voxel weights.
 * @param lut_file Specify label lookup table.
 * @param default_lut_flag Use default FreeSurferColorLUT.txt for lookup table.
 *
 * @returns Parameter dictionary
 */
function mri_segcentroids_params(
    input_segmentation: InputPathType,
    output_file: string,
    pointset_flag: boolean = false,
    registration_file: InputPathType | null = null,
    weights_file: InputPathType | null = null,
    lut_file: InputPathType | null = null,
    default_lut_flag: boolean = false,
): MriSegcentroidsParameters {
    const params = {
        "@type": "freesurfer.mri_segcentroids" as const,
        "input_segmentation": input_segmentation,
        "output_file": output_file,
        "pointset_flag": pointset_flag,
        "default_lut_flag": default_lut_flag,
    };
    if (registration_file !== null) {
        params["registration_file"] = registration_file;
    }
    if (weights_file !== null) {
        params["weights_file"] = weights_file;
    }
    if (lut_file !== null) {
        params["lut_file"] = lut_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_segcentroids_cargs(
    params: MriSegcentroidsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_segcentroids");
    cargs.push(
        "--i",
        execution.inputFile((params["input_segmentation"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output_file"] ?? null)
    );
    if ((params["pointset_flag"] ?? null)) {
        cargs.push("--p");
    }
    if ((params["registration_file"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["registration_file"] ?? null))
        );
    }
    if ((params["weights_file"] ?? null) !== null) {
        cargs.push(
            "--weights",
            execution.inputFile((params["weights_file"] ?? null))
        );
    }
    if ((params["lut_file"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["lut_file"] ?? null))
        );
    }
    if ((params["default_lut_flag"] ?? null)) {
        cargs.push("--ctab-default");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_segcentroids_outputs(
    params: MriSegcentroidsParameters,
    execution: Execution,
): MriSegcentroidsOutputs {
    const ret: MriSegcentroidsOutputs = {
        root: execution.outputFile("."),
        output_centroids: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Computes the center of mass for individual structures in a segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegcentroidsOutputs`).
 */
function mri_segcentroids_execute(
    params: MriSegcentroidsParameters,
    runner: Runner | null = null,
): MriSegcentroidsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SEGCENTROIDS_METADATA);
    params = execution.params(params)
    const cargs = mri_segcentroids_cargs(params, execution)
    const ret = mri_segcentroids_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes the center of mass for individual structures in a segmentation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_segmentation Input segmentation volume file.
 * @param output_file Output text file for centroids.
 * @param pointset_flag Save centroids as a Freeview pointset (json).
 * @param registration_file Apply a linear registration (lta).
 * @param weights_file Compute weighted centroids with provided voxel weights.
 * @param lut_file Specify label lookup table.
 * @param default_lut_flag Use default FreeSurferColorLUT.txt for lookup table.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSegcentroidsOutputs`).
 */
function mri_segcentroids(
    input_segmentation: InputPathType,
    output_file: string,
    pointset_flag: boolean = false,
    registration_file: InputPathType | null = null,
    weights_file: InputPathType | null = null,
    lut_file: InputPathType | null = null,
    default_lut_flag: boolean = false,
    runner: Runner | null = null,
): MriSegcentroidsOutputs {
    const params = mri_segcentroids_params(input_segmentation, output_file, pointset_flag, registration_file, weights_file, lut_file, default_lut_flag)
    return mri_segcentroids_execute(params, runner);
}


export {
      MRI_SEGCENTROIDS_METADATA,
      MriSegcentroidsOutputs,
      MriSegcentroidsParameters,
      mri_segcentroids,
      mri_segcentroids_execute,
      mri_segcentroids_params,
};
