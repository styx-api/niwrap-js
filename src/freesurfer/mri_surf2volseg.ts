// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SURF2VOLSEG_METADATA: Metadata = {
    id: "24046a7f7d961edbc49a95684ed8a04afa377fd5.boutiques",
    name: "mri_surf2volseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSurf2volsegParameters {
    "@type"?: "freesurfer/mri_surf2volseg";
    "input_segmentation"?: InputPathType | null | undefined;
    "output_segmentation"?: string | null | undefined;
    "source_segmentation"?: InputPathType | null | undefined;
    "lh_white_surf"?: InputPathType | null | undefined;
    "lh_pial_surf"?: InputPathType | null | undefined;
    "rh_white_surf"?: InputPathType | null | undefined;
    "rh_pial_surf"?: InputPathType | null | undefined;
    "lh_cortex_mask"?: InputPathType | null | undefined;
    "rh_cortex_mask"?: InputPathType | null | undefined;
    "fix_presurf_ribbon"?: InputPathType | null | undefined;
    "label_cortex": boolean;
    "label_wm": boolean;
    "label_wm_unknown"?: Array<number> | null | undefined;
    "lh_annotation"?: InputPathType | null | undefined;
    "rh_annotation"?: InputPathType | null | undefined;
    "wmparc_dmax"?: number | null | undefined;
    "rip_unknown": boolean;
    "hypo_as_wm": boolean;
    "hashres"?: number | null | undefined;
    "nhops"?: number | null | undefined;
    "help_flag": boolean;
    "version_flag": boolean;
    "crs_test"?: Array<number> | null | undefined;
    "ctab_file"?: InputPathType | null | undefined;
    "threads_number"?: number | null | undefined;
}
type MriSurf2volsegParametersTagged = Required<Pick<MriSurf2volsegParameters, '@type'>> & MriSurf2volsegParameters;


/**
 * Output object returned when calling `MriSurf2volsegParameters(...)`.
 *
 * @interface
 */
interface MriSurf2volsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_segmentation Full path of input segmentation.
 * @param output_segmentation Output segmentation file.
 * @param source_segmentation Source subcortical volume segmentation file (instead of using subcortical segs in input segmentation).
 * @param lh_white_surf White surface for left hemisphere.
 * @param lh_pial_surf Pial surface for left hemisphere.
 * @param rh_white_surf White surface for right hemisphere.
 * @param rh_pial_surf Pial surface for right hemisphere.
 * @param lh_cortex_mask Mask for left hemisphere cortex (usually lh.cortex.label).
 * @param rh_cortex_mask Mask for right hemisphere cortex (usually rh.cortex.label).
 * @param fix_presurf_ribbon Fix the cortical and WM labels in the input segmentation using ribbon file.
 * @param label_cortex Relabel cortex in the input segmentation with surface annotation.
 * @param label_wm Relabel cerebral WM in the input segmentation with surface annotation.
 * @param label_wm_unknown Relabel unknown WM as lhval and rhval (default is 5001 and 5002).
 * @param lh_annotation Left hemisphere annotation for --label-cortex and --label-wm.
 * @param rh_annotation Right hemisphere annotation for --label-cortex and --label-wm.
 * @param wmparc_dmax Max distance (mm) from cortex to be labeled as gyral WM.
 * @param rip_unknown Do not label WM based on 'unknown' cortical label.
 * @param hypo_as_wm Label hypointensities as WM (when fixing with ribbon).
 * @param hashres Surface hash table resolution.
 * @param nhops Number of surface hops when searching for a nearby annotation.
 * @param help_flag Print out information on how to use this program.
 * @param version_flag Print out version and exit.
 * @param crs_test Test labeling of only the voxel given by column, row, slice (debugging).
 * @param ctab_file Embed color table in the output.
 * @param threads_number Run in parallel with the specified number of threads.
 *
 * @returns Parameter dictionary
 */
function mri_surf2volseg_params(
    input_segmentation: InputPathType | null = null,
    output_segmentation: string | null = null,
    source_segmentation: InputPathType | null = null,
    lh_white_surf: InputPathType | null = null,
    lh_pial_surf: InputPathType | null = null,
    rh_white_surf: InputPathType | null = null,
    rh_pial_surf: InputPathType | null = null,
    lh_cortex_mask: InputPathType | null = null,
    rh_cortex_mask: InputPathType | null = null,
    fix_presurf_ribbon: InputPathType | null = null,
    label_cortex: boolean = false,
    label_wm: boolean = false,
    label_wm_unknown: Array<number> | null = null,
    lh_annotation: InputPathType | null = null,
    rh_annotation: InputPathType | null = null,
    wmparc_dmax: number | null = null,
    rip_unknown: boolean = false,
    hypo_as_wm: boolean = false,
    hashres: number | null = null,
    nhops: number | null = null,
    help_flag: boolean = false,
    version_flag: boolean = false,
    crs_test: Array<number> | null = null,
    ctab_file: InputPathType | null = null,
    threads_number: number | null = null,
): MriSurf2volsegParametersTagged {
    const params = {
        "@type": "freesurfer/mri_surf2volseg" as const,
        "label_cortex": label_cortex,
        "label_wm": label_wm,
        "rip_unknown": rip_unknown,
        "hypo_as_wm": hypo_as_wm,
        "help_flag": help_flag,
        "version_flag": version_flag,
    };
    if (input_segmentation !== null) {
        params["input_segmentation"] = input_segmentation;
    }
    if (output_segmentation !== null) {
        params["output_segmentation"] = output_segmentation;
    }
    if (source_segmentation !== null) {
        params["source_segmentation"] = source_segmentation;
    }
    if (lh_white_surf !== null) {
        params["lh_white_surf"] = lh_white_surf;
    }
    if (lh_pial_surf !== null) {
        params["lh_pial_surf"] = lh_pial_surf;
    }
    if (rh_white_surf !== null) {
        params["rh_white_surf"] = rh_white_surf;
    }
    if (rh_pial_surf !== null) {
        params["rh_pial_surf"] = rh_pial_surf;
    }
    if (lh_cortex_mask !== null) {
        params["lh_cortex_mask"] = lh_cortex_mask;
    }
    if (rh_cortex_mask !== null) {
        params["rh_cortex_mask"] = rh_cortex_mask;
    }
    if (fix_presurf_ribbon !== null) {
        params["fix_presurf_ribbon"] = fix_presurf_ribbon;
    }
    if (label_wm_unknown !== null) {
        params["label_wm_unknown"] = label_wm_unknown;
    }
    if (lh_annotation !== null) {
        params["lh_annotation"] = lh_annotation;
    }
    if (rh_annotation !== null) {
        params["rh_annotation"] = rh_annotation;
    }
    if (wmparc_dmax !== null) {
        params["wmparc_dmax"] = wmparc_dmax;
    }
    if (hashres !== null) {
        params["hashres"] = hashres;
    }
    if (nhops !== null) {
        params["nhops"] = nhops;
    }
    if (crs_test !== null) {
        params["crs_test"] = crs_test;
    }
    if (ctab_file !== null) {
        params["ctab_file"] = ctab_file;
    }
    if (threads_number !== null) {
        params["threads_number"] = threads_number;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_surf2volseg_cargs(
    params: MriSurf2volsegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_surf2volseg");
    if ((params["input_segmentation"] ?? null) !== null) {
        cargs.push(
            "--i",
            execution.inputFile((params["input_segmentation"] ?? null))
        );
    }
    if ((params["output_segmentation"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_segmentation"] ?? null)
        );
    }
    if ((params["source_segmentation"] ?? null) !== null) {
        cargs.push(
            "--src",
            execution.inputFile((params["source_segmentation"] ?? null))
        );
    }
    if ((params["lh_white_surf"] ?? null) !== null) {
        cargs.push(
            "--lh-white",
            execution.inputFile((params["lh_white_surf"] ?? null))
        );
    }
    if ((params["lh_pial_surf"] ?? null) !== null) {
        cargs.push(
            "--lh-pial",
            execution.inputFile((params["lh_pial_surf"] ?? null))
        );
    }
    if ((params["rh_white_surf"] ?? null) !== null) {
        cargs.push(
            "--rh-white",
            execution.inputFile((params["rh_white_surf"] ?? null))
        );
    }
    if ((params["rh_pial_surf"] ?? null) !== null) {
        cargs.push(
            "--rh-pial",
            execution.inputFile((params["rh_pial_surf"] ?? null))
        );
    }
    if ((params["lh_cortex_mask"] ?? null) !== null) {
        cargs.push(
            "--lh-cortex-mask",
            execution.inputFile((params["lh_cortex_mask"] ?? null))
        );
    }
    if ((params["rh_cortex_mask"] ?? null) !== null) {
        cargs.push(
            "--rh-cortex-mask",
            execution.inputFile((params["rh_cortex_mask"] ?? null))
        );
    }
    if ((params["fix_presurf_ribbon"] ?? null) !== null) {
        cargs.push(
            "--fix-presurf-with-ribbon",
            execution.inputFile((params["fix_presurf_ribbon"] ?? null))
        );
    }
    if ((params["label_cortex"] ?? false)) {
        cargs.push("--label-cortex");
    }
    if ((params["label_wm"] ?? false)) {
        cargs.push("--label-wm");
    }
    if ((params["label_wm_unknown"] ?? null) !== null) {
        cargs.push(
            "--label-wm-unknown",
            ...(params["label_wm_unknown"] ?? null).map(String)
        );
    }
    if ((params["lh_annotation"] ?? null) !== null) {
        cargs.push(
            "--lh-annot",
            execution.inputFile((params["lh_annotation"] ?? null))
        );
    }
    if ((params["rh_annotation"] ?? null) !== null) {
        cargs.push(
            "--rh-annot",
            execution.inputFile((params["rh_annotation"] ?? null))
        );
    }
    if ((params["wmparc_dmax"] ?? null) !== null) {
        cargs.push(
            "--wmparc-dmax",
            String((params["wmparc_dmax"] ?? null))
        );
    }
    if ((params["rip_unknown"] ?? false)) {
        cargs.push("--rip-unknown");
    }
    if ((params["hypo_as_wm"] ?? false)) {
        cargs.push("--hypo-as-wm");
    }
    if ((params["hashres"] ?? null) !== null) {
        cargs.push(
            "--hashres",
            String((params["hashres"] ?? null))
        );
    }
    if ((params["nhops"] ?? null) !== null) {
        cargs.push(
            "--nhops",
            String((params["nhops"] ?? null))
        );
    }
    if ((params["help_flag"] ?? false)) {
        cargs.push("--help");
    }
    if ((params["version_flag"] ?? false)) {
        cargs.push("--version");
    }
    if ((params["crs_test"] ?? null) !== null) {
        cargs.push(
            "--crs-test",
            ...(params["crs_test"] ?? null).map(String)
        );
    }
    if ((params["ctab_file"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab_file"] ?? null))
        );
    }
    if ((params["threads_number"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads_number"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_surf2volseg_outputs(
    params: MriSurf2volsegParameters,
    execution: Execution,
): MriSurf2volsegOutputs {
    const ret: MriSurf2volsegOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_surf2volseg
 *
 * Tool that cleans up presurf aseg cortex and WM, maps cortical labels from an annotation into a volume, and labels cerebral WM with closest cortical label.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSurf2volsegOutputs`).
 */
function mri_surf2volseg_execute(
    params: MriSurf2volsegParameters,
    runner: Runner | null = null,
): MriSurf2volsegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SURF2VOLSEG_METADATA);
    params = execution.params(params)
    const cargs = mri_surf2volseg_cargs(params, execution)
    const ret = mri_surf2volseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_surf2volseg
 *
 * Tool that cleans up presurf aseg cortex and WM, maps cortical labels from an annotation into a volume, and labels cerebral WM with closest cortical label.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_segmentation Full path of input segmentation.
 * @param output_segmentation Output segmentation file.
 * @param source_segmentation Source subcortical volume segmentation file (instead of using subcortical segs in input segmentation).
 * @param lh_white_surf White surface for left hemisphere.
 * @param lh_pial_surf Pial surface for left hemisphere.
 * @param rh_white_surf White surface for right hemisphere.
 * @param rh_pial_surf Pial surface for right hemisphere.
 * @param lh_cortex_mask Mask for left hemisphere cortex (usually lh.cortex.label).
 * @param rh_cortex_mask Mask for right hemisphere cortex (usually rh.cortex.label).
 * @param fix_presurf_ribbon Fix the cortical and WM labels in the input segmentation using ribbon file.
 * @param label_cortex Relabel cortex in the input segmentation with surface annotation.
 * @param label_wm Relabel cerebral WM in the input segmentation with surface annotation.
 * @param label_wm_unknown Relabel unknown WM as lhval and rhval (default is 5001 and 5002).
 * @param lh_annotation Left hemisphere annotation for --label-cortex and --label-wm.
 * @param rh_annotation Right hemisphere annotation for --label-cortex and --label-wm.
 * @param wmparc_dmax Max distance (mm) from cortex to be labeled as gyral WM.
 * @param rip_unknown Do not label WM based on 'unknown' cortical label.
 * @param hypo_as_wm Label hypointensities as WM (when fixing with ribbon).
 * @param hashres Surface hash table resolution.
 * @param nhops Number of surface hops when searching for a nearby annotation.
 * @param help_flag Print out information on how to use this program.
 * @param version_flag Print out version and exit.
 * @param crs_test Test labeling of only the voxel given by column, row, slice (debugging).
 * @param ctab_file Embed color table in the output.
 * @param threads_number Run in parallel with the specified number of threads.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSurf2volsegOutputs`).
 */
function mri_surf2volseg(
    input_segmentation: InputPathType | null = null,
    output_segmentation: string | null = null,
    source_segmentation: InputPathType | null = null,
    lh_white_surf: InputPathType | null = null,
    lh_pial_surf: InputPathType | null = null,
    rh_white_surf: InputPathType | null = null,
    rh_pial_surf: InputPathType | null = null,
    lh_cortex_mask: InputPathType | null = null,
    rh_cortex_mask: InputPathType | null = null,
    fix_presurf_ribbon: InputPathType | null = null,
    label_cortex: boolean = false,
    label_wm: boolean = false,
    label_wm_unknown: Array<number> | null = null,
    lh_annotation: InputPathType | null = null,
    rh_annotation: InputPathType | null = null,
    wmparc_dmax: number | null = null,
    rip_unknown: boolean = false,
    hypo_as_wm: boolean = false,
    hashres: number | null = null,
    nhops: number | null = null,
    help_flag: boolean = false,
    version_flag: boolean = false,
    crs_test: Array<number> | null = null,
    ctab_file: InputPathType | null = null,
    threads_number: number | null = null,
    runner: Runner | null = null,
): MriSurf2volsegOutputs {
    const params = mri_surf2volseg_params(input_segmentation, output_segmentation, source_segmentation, lh_white_surf, lh_pial_surf, rh_white_surf, rh_pial_surf, lh_cortex_mask, rh_cortex_mask, fix_presurf_ribbon, label_cortex, label_wm, label_wm_unknown, lh_annotation, rh_annotation, wmparc_dmax, rip_unknown, hypo_as_wm, hashres, nhops, help_flag, version_flag, crs_test, ctab_file, threads_number)
    return mri_surf2volseg_execute(params, runner);
}


export {
      MRI_SURF2VOLSEG_METADATA,
      MriSurf2volsegOutputs,
      mri_surf2volseg,
      mri_surf2volseg_execute,
      mri_surf2volseg_params,
};
