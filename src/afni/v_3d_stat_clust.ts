// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_STAT_CLUST_METADATA: Metadata = {
    id: "7fb8fe15f4d0d6befb2add54e75d6a7f19f2cc0b.boutiques",
    name: "3dStatClust",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dStatClustParameters {
    "__STYXTYPE__": "3dStatClust";
    "prefix"?: string | null | undefined;
    "session_dir"?: string | null | undefined;
    "verbose": boolean;
    "dist_euc": boolean;
    "dist_ind": boolean;
    "dist_cor": boolean;
    "thresh": string;
    "nclust": number;
    "datasets": Array<string>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dStatClust": v_3d_stat_clust_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dStatClust": v_3d_stat_clust_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_stat_clust(...)`.
 *
 * @interface
 */
interface V3dStatClustOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset header
     */
    output_head: OutputPathType | null;
    /**
     * Output dataset brick
     */
    output_brick: OutputPathType | null;
}


function v_3d_stat_clust_params(
    thresh: string,
    nclust: number,
    datasets: Array<string>,
    prefix: string | null = null,
    session_dir: string | null = null,
    verbose: boolean = false,
    dist_euc: boolean = false,
    dist_ind: boolean = false,
    dist_cor: boolean = false,
): V3dStatClustParameters {
    /**
     * Build parameters.
    
     * @param thresh Threshold statistic from file tname. Only voxels whose threshold statistic is greater than t in absolute value will be considered. If file tname contains more than 1 sub-brick, the threshold stat. sub-brick must be specified.
     * @param nclust Maximum number of clusters for output (= number of sub-bricks in output dataset).
     * @param datasets Parameter datasets.
     * @param prefix Use 'pname' for the output dataset prefix name.
     * @param session_dir Use 'dir' for the output dataset session directory.
     * @param verbose Print out verbose output as the program proceeds.
     * @param dist_euc Calculate Euclidean distance between parameters
     * @param dist_ind Statistical distance for independent parameters
     * @param dist_cor Statistical distance for correlated parameters
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dStatClust" as const,
        "verbose": verbose,
        "dist_euc": dist_euc,
        "dist_ind": dist_ind,
        "dist_cor": dist_cor,
        "thresh": thresh,
        "nclust": nclust,
        "datasets": datasets,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (session_dir !== null) {
        params["session_dir"] = session_dir;
    }
    return params;
}


function v_3d_stat_clust_cargs(
    params: V3dStatClustParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dStatClust");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["session_dir"] ?? null) !== null) {
        cargs.push(
            "-session",
            (params["session_dir"] ?? null)
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["dist_euc"] ?? null)) {
        cargs.push("-dist_euc");
    }
    if ((params["dist_ind"] ?? null)) {
        cargs.push("-dist_ind");
    }
    if ((params["dist_cor"] ?? null)) {
        cargs.push("-dist_cor");
    }
    cargs.push(
        "-thresh",
        (params["thresh"] ?? null)
    );
    cargs.push(
        "-nclust",
        String((params["nclust"] ?? null))
    );
    cargs.push(...(params["datasets"] ?? null));
    return cargs;
}


function v_3d_stat_clust_outputs(
    params: V3dStatClustParameters,
    execution: Execution,
): V3dStatClustOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dStatClustOutputs = {
        root: execution.outputFile("."),
        output_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        output_brick: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
    };
    return ret;
}


function v_3d_stat_clust_execute(
    params: V3dStatClustParameters,
    execution: Execution,
): V3dStatClustOutputs {
    /**
     * Perform agglomerative hierarchical clustering for user specified parameter sub-bricks, for all voxels whose threshold statistic is above a user specified value.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dStatClustOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_stat_clust_cargs(params, execution)
    const ret = v_3d_stat_clust_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_stat_clust(
    thresh: string,
    nclust: number,
    datasets: Array<string>,
    prefix: string | null = null,
    session_dir: string | null = null,
    verbose: boolean = false,
    dist_euc: boolean = false,
    dist_ind: boolean = false,
    dist_cor: boolean = false,
    runner: Runner | null = null,
): V3dStatClustOutputs {
    /**
     * Perform agglomerative hierarchical clustering for user specified parameter sub-bricks, for all voxels whose threshold statistic is above a user specified value.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param thresh Threshold statistic from file tname. Only voxels whose threshold statistic is greater than t in absolute value will be considered. If file tname contains more than 1 sub-brick, the threshold stat. sub-brick must be specified.
     * @param nclust Maximum number of clusters for output (= number of sub-bricks in output dataset).
     * @param datasets Parameter datasets.
     * @param prefix Use 'pname' for the output dataset prefix name.
     * @param session_dir Use 'dir' for the output dataset session directory.
     * @param verbose Print out verbose output as the program proceeds.
     * @param dist_euc Calculate Euclidean distance between parameters
     * @param dist_ind Statistical distance for independent parameters
     * @param dist_cor Statistical distance for correlated parameters
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dStatClustOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_STAT_CLUST_METADATA);
    const params = v_3d_stat_clust_params(thresh, nclust, datasets, prefix, session_dir, verbose, dist_euc, dist_ind, dist_cor)
    return v_3d_stat_clust_execute(params, execution);
}


export {
      V3dStatClustOutputs,
      V3dStatClustParameters,
      V_3D_STAT_CLUST_METADATA,
      v_3d_stat_clust,
      v_3d_stat_clust_params,
};
