// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SCLIMBIC_SEG_METADATA: Metadata = {
    id: "1ec74b6aef5bd2cf5b900639f4d636aba2915275.boutiques",
    name: "mri_sclimbic_seg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSclimbicSegParameters {
    "__STYXTYPE__": "mri_sclimbic_seg";
    "input_file": string;
    "output_file": string;
    "subjects"?: Array<string> | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "conform": boolean;
    "etiv": boolean;
    "exclude_labels"?: Array<string> | null | undefined;
    "keep_ac": boolean;
    "vox_count_volumes": boolean;
    "model_file"?: InputPathType | null | undefined;
    "ctab_file"?: InputPathType | null | undefined;
    "population_stats"?: InputPathType | null | undefined;
    "debug": boolean;
    "vmp": boolean;
    "threads"?: number | null | undefined;
    "tal_xfm"?: string | null | undefined;
    "write_posteriors": boolean;
    "write_volumes": boolean;
    "write_qa_stats": boolean;
    "preprocess_7T": boolean;
    "percentile"?: number | null | undefined;
    "cuda_device"?: string | null | undefined;
    "output_base"?: string | null | undefined;
    "no_cite": boolean;
    "nchannels"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_sclimbic_seg": mri_sclimbic_seg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_sclimbic_seg": mri_sclimbic_seg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_sclimbic_seg(...)`.
 *
 * @interface
 */
interface MriSclimbicSegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmentation output file.
     */
    segmentation_output: OutputPathType;
}


function mri_sclimbic_seg_params(
    input_file: string,
    output_file: string,
    subjects: Array<string> | null = null,
    subjects_dir: string | null = null,
    conform: boolean = false,
    etiv: boolean = false,
    exclude_labels: Array<string> | null = null,
    keep_ac: boolean = false,
    vox_count_volumes: boolean = false,
    model_file: InputPathType | null = null,
    ctab_file: InputPathType | null = null,
    population_stats: InputPathType | null = null,
    debug: boolean = false,
    vmp: boolean = false,
    threads: number | null = null,
    tal_xfm: string | null = null,
    write_posteriors: boolean = false,
    write_volumes: boolean = false,
    write_qa_stats: boolean = false,
    preprocess_7_t: boolean = false,
    percentile: number | null = null,
    cuda_device: string | null = null,
    output_base: string | null = null,
    no_cite: boolean = false,
    nchannels: number | null = null,
): MriSclimbicSegParameters {
    /**
     * Build parameters.
    
     * @param input_file T1-w image(s) to segment. Can be a path to a single image or a directory of images.
     * @param output_file Segmentation output (required if --i is provided). Must be the same type as the input path (a single file or directory).
     * @param subjects Process a series of freesurfer recon-all subjects (enables subject-mode).
     * @param subjects_dir Set the subjects directory (overrides the SUBJECTS_DIR env variable).
     * @param conform Resample input to 1mm-iso; results will be put back in native resolution.
     * @param etiv Include eTIV in volume stats (enabled by default in subject-mode and --tal).
     * @param exclude_labels List of label IDs to exclude in any output stats files.
     * @param keep_ac Explicitly keep anterior commissure in the volume/qa files.
     * @param vox_count_volumes Use discrete voxel count for label volumes.
     * @param model_file Alternative model weights to load.
     * @param ctab_file Alternative color lookup table to embed in segmentation. Must be minimal, including 0, and sorted.
     * @param population_stats Alternative population volume stats for QA output.
     * @param debug Enable debug logging.
     * @param vmp Enable printing of vmpeak at the end.
     * @param threads Number of threads to use. Default is 1.
     * @param tal_xfm Alternative talairach xfm transform for estimating TIV. Can be file or suffix (for multiple inputs).
     * @param write_posteriors Save the label posteriors.
     * @param write_volumes Save label volume stats (enabled by default in subject-mode).
     * @param write_qa_stats Save QA stats (z and confidence).
     * @param preprocess_7_t Preprocess 7T images (just sets percentile to 99.9).
     * @param percentile Use intensity percentile threshold for normalization.
     * @param cuda_device Cuda device for GPU support.
     * @param output_base String to use in output file name; default is sclimbic.
     * @param no_cite Do not cite sclimbic paper at the end.
     * @param nchannels Number of channels
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_sclimbic_seg" as const,
        "input_file": input_file,
        "output_file": output_file,
        "conform": conform,
        "etiv": etiv,
        "keep_ac": keep_ac,
        "vox_count_volumes": vox_count_volumes,
        "debug": debug,
        "vmp": vmp,
        "write_posteriors": write_posteriors,
        "write_volumes": write_volumes,
        "write_qa_stats": write_qa_stats,
        "preprocess_7T": preprocess_7_t,
        "no_cite": no_cite,
    };
    if (subjects !== null) {
        params["subjects"] = subjects;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (exclude_labels !== null) {
        params["exclude_labels"] = exclude_labels;
    }
    if (model_file !== null) {
        params["model_file"] = model_file;
    }
    if (ctab_file !== null) {
        params["ctab_file"] = ctab_file;
    }
    if (population_stats !== null) {
        params["population_stats"] = population_stats;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (tal_xfm !== null) {
        params["tal_xfm"] = tal_xfm;
    }
    if (percentile !== null) {
        params["percentile"] = percentile;
    }
    if (cuda_device !== null) {
        params["cuda_device"] = cuda_device;
    }
    if (output_base !== null) {
        params["output_base"] = output_base;
    }
    if (nchannels !== null) {
        params["nchannels"] = nchannels;
    }
    return params;
}


function mri_sclimbic_seg_cargs(
    params: MriSclimbicSegParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_sclimbic_seg");
    cargs.push(
        "-i",
        (params["input_file"] ?? null)
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    if ((params["subjects"] ?? null) !== null) {
        cargs.push(
            "-s",
            ...(params["subjects"] ?? null)
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["conform"] ?? null)) {
        cargs.push("--conform");
    }
    if ((params["etiv"] ?? null)) {
        cargs.push("--etiv");
    }
    if ((params["exclude_labels"] ?? null) !== null) {
        cargs.push(
            "--exclude",
            ...(params["exclude_labels"] ?? null)
        );
    }
    if ((params["keep_ac"] ?? null)) {
        cargs.push("--keep_ac");
    }
    if ((params["vox_count_volumes"] ?? null)) {
        cargs.push("--vox-count-volumes");
    }
    if ((params["model_file"] ?? null) !== null) {
        cargs.push(
            "--model",
            execution.inputFile((params["model_file"] ?? null))
        );
    }
    if ((params["ctab_file"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab_file"] ?? null))
        );
    }
    if ((params["population_stats"] ?? null) !== null) {
        cargs.push(
            "--population-stats",
            execution.inputFile((params["population_stats"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["vmp"] ?? null)) {
        cargs.push("--vmp");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["tal_xfm"] ?? null) !== null) {
        cargs.push(
            "--tal",
            (params["tal_xfm"] ?? null)
        );
    }
    if ((params["write_posteriors"] ?? null)) {
        cargs.push("--write_posteriors");
    }
    if ((params["write_volumes"] ?? null)) {
        cargs.push("--write_volumes");
    }
    if ((params["write_qa_stats"] ?? null)) {
        cargs.push("--write_qa_stats");
    }
    if ((params["preprocess_7T"] ?? null)) {
        cargs.push("--7T");
    }
    if ((params["percentile"] ?? null) !== null) {
        cargs.push(
            "--percentile",
            String((params["percentile"] ?? null))
        );
    }
    if ((params["cuda_device"] ?? null) !== null) {
        cargs.push(
            "--cuda-device",
            (params["cuda_device"] ?? null)
        );
    }
    if ((params["output_base"] ?? null) !== null) {
        cargs.push(
            "--output-base",
            (params["output_base"] ?? null)
        );
    }
    if ((params["no_cite"] ?? null)) {
        cargs.push("--no-cite-sclimbic");
    }
    if ((params["nchannels"] ?? null) !== null) {
        cargs.push(
            "--nchannels",
            String((params["nchannels"] ?? null))
        );
    }
    return cargs;
}


function mri_sclimbic_seg_outputs(
    params: MriSclimbicSegParameters,
    execution: Execution,
): MriSclimbicSegOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriSclimbicSegOutputs = {
        root: execution.outputFile("."),
        segmentation_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function mri_sclimbic_seg_execute(
    params: MriSclimbicSegParameters,
    execution: Execution,
): MriSclimbicSegOutputs {
    /**
     * Segment subcortical limbic structures using Freesurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriSclimbicSegOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_sclimbic_seg_cargs(params, execution)
    const ret = mri_sclimbic_seg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_sclimbic_seg(
    input_file: string,
    output_file: string,
    subjects: Array<string> | null = null,
    subjects_dir: string | null = null,
    conform: boolean = false,
    etiv: boolean = false,
    exclude_labels: Array<string> | null = null,
    keep_ac: boolean = false,
    vox_count_volumes: boolean = false,
    model_file: InputPathType | null = null,
    ctab_file: InputPathType | null = null,
    population_stats: InputPathType | null = null,
    debug: boolean = false,
    vmp: boolean = false,
    threads: number | null = null,
    tal_xfm: string | null = null,
    write_posteriors: boolean = false,
    write_volumes: boolean = false,
    write_qa_stats: boolean = false,
    preprocess_7_t: boolean = false,
    percentile: number | null = null,
    cuda_device: string | null = null,
    output_base: string | null = null,
    no_cite: boolean = false,
    nchannels: number | null = null,
    runner: Runner | null = null,
): MriSclimbicSegOutputs {
    /**
     * Segment subcortical limbic structures using Freesurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file T1-w image(s) to segment. Can be a path to a single image or a directory of images.
     * @param output_file Segmentation output (required if --i is provided). Must be the same type as the input path (a single file or directory).
     * @param subjects Process a series of freesurfer recon-all subjects (enables subject-mode).
     * @param subjects_dir Set the subjects directory (overrides the SUBJECTS_DIR env variable).
     * @param conform Resample input to 1mm-iso; results will be put back in native resolution.
     * @param etiv Include eTIV in volume stats (enabled by default in subject-mode and --tal).
     * @param exclude_labels List of label IDs to exclude in any output stats files.
     * @param keep_ac Explicitly keep anterior commissure in the volume/qa files.
     * @param vox_count_volumes Use discrete voxel count for label volumes.
     * @param model_file Alternative model weights to load.
     * @param ctab_file Alternative color lookup table to embed in segmentation. Must be minimal, including 0, and sorted.
     * @param population_stats Alternative population volume stats for QA output.
     * @param debug Enable debug logging.
     * @param vmp Enable printing of vmpeak at the end.
     * @param threads Number of threads to use. Default is 1.
     * @param tal_xfm Alternative talairach xfm transform for estimating TIV. Can be file or suffix (for multiple inputs).
     * @param write_posteriors Save the label posteriors.
     * @param write_volumes Save label volume stats (enabled by default in subject-mode).
     * @param write_qa_stats Save QA stats (z and confidence).
     * @param preprocess_7_t Preprocess 7T images (just sets percentile to 99.9).
     * @param percentile Use intensity percentile threshold for normalization.
     * @param cuda_device Cuda device for GPU support.
     * @param output_base String to use in output file name; default is sclimbic.
     * @param no_cite Do not cite sclimbic paper at the end.
     * @param nchannels Number of channels
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriSclimbicSegOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SCLIMBIC_SEG_METADATA);
    const params = mri_sclimbic_seg_params(input_file, output_file, subjects, subjects_dir, conform, etiv, exclude_labels, keep_ac, vox_count_volumes, model_file, ctab_file, population_stats, debug, vmp, threads, tal_xfm, write_posteriors, write_volumes, write_qa_stats, preprocess_7_t, percentile, cuda_device, output_base, no_cite, nchannels)
    return mri_sclimbic_seg_execute(params, execution);
}


export {
      MRI_SCLIMBIC_SEG_METADATA,
      MriSclimbicSegOutputs,
      MriSclimbicSegParameters,
      mri_sclimbic_seg,
      mri_sclimbic_seg_params,
};
