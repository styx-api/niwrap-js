// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MORPH_TABLES_RH_METADATA: Metadata = {
    id: "f6fbf33ff571242ee51f5f8e5a73a9abf1d87d0b.boutiques",
    name: "morph_tables-rh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MorphTablesRhParameters {
    "@type": "freesurfer.morph_tables-rh";
    "options"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.morph_tables-rh": morph_tables_rh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `morph_tables_rh(...)`.
 *
 * @interface
 */
interface MorphTablesRhOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param options Options used by morph_tables-rh
 *
 * @returns Parameter dictionary
 */
function morph_tables_rh_params(
    options: string | null = null,
): MorphTablesRhParameters {
    const params = {
        "@type": "freesurfer.morph_tables-rh" as const,
    };
    if (options !== null) {
        params["options"] = options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function morph_tables_rh_cargs(
    params: MorphTablesRhParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("morph_tables-rh");
    if ((params["options"] ?? null) !== null) {
        cargs.push(
            "-rh",
            (params["options"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function morph_tables_rh_outputs(
    params: MorphTablesRhParameters,
    execution: Execution,
): MorphTablesRhOutputs {
    const ret: MorphTablesRhOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * morph_tables-rh
 *
 * A tool from Freesurfer associated with morphological tables for the right hemisphere.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MorphTablesRhOutputs`).
 */
function morph_tables_rh_execute(
    params: MorphTablesRhParameters,
    runner: Runner | null = null,
): MorphTablesRhOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MORPH_TABLES_RH_METADATA);
    params = execution.params(params)
    const cargs = morph_tables_rh_cargs(params, execution)
    const ret = morph_tables_rh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * morph_tables-rh
 *
 * A tool from Freesurfer associated with morphological tables for the right hemisphere.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param options Options used by morph_tables-rh
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MorphTablesRhOutputs`).
 */
function morph_tables_rh(
    options: string | null = null,
    runner: Runner | null = null,
): MorphTablesRhOutputs {
    const params = morph_tables_rh_params(options)
    return morph_tables_rh_execute(params, runner);
}


export {
      MORPH_TABLES_RH_METADATA,
      MorphTablesRhOutputs,
      MorphTablesRhParameters,
      morph_tables_rh,
      morph_tables_rh_execute,
      morph_tables_rh_params,
};
