// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const HISTO_SYNTHESIZE_METADATA: Metadata = {
    id: "22328b0a53f00b2d16b4d4c6b5dab0dfb12a1d70.boutiques",
    name: "histo_synthesize",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface HistoSynthesizeParameters {
    "@type"?: "freesurfer/histo_synthesize";
    "mri_volume": InputPathType;
    "histo_volume": InputPathType;
    "synthetic_histo": string;
}
type HistoSynthesizeParametersTagged = Required<Pick<HistoSynthesizeParameters, '@type'>> & HistoSynthesizeParameters;


/**
 * Output object returned when calling `HistoSynthesizeParameters(...)`.
 *
 * @interface
 */
interface HistoSynthesizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file of the synthetic histo volume.
     */
    output_synthetic_histo: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param mri_volume Input MRI volume file.
 * @param histo_volume Input HISTO volume file.
 * @param synthetic_histo Output synthetic histo volume file.
 *
 * @returns Parameter dictionary
 */
function histo_synthesize_params(
    mri_volume: InputPathType,
    histo_volume: InputPathType,
    synthetic_histo: string,
): HistoSynthesizeParametersTagged {
    const params = {
        "@type": "freesurfer/histo_synthesize" as const,
        "mri_volume": mri_volume,
        "histo_volume": histo_volume,
        "synthetic_histo": synthetic_histo,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function histo_synthesize_cargs(
    params: HistoSynthesizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("histo_synthesize");
    cargs.push(execution.inputFile((params["mri_volume"] ?? null)));
    cargs.push(execution.inputFile((params["histo_volume"] ?? null)));
    cargs.push((params["synthetic_histo"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function histo_synthesize_outputs(
    params: HistoSynthesizeParameters,
    execution: Execution,
): HistoSynthesizeOutputs {
    const ret: HistoSynthesizeOutputs = {
        root: execution.outputFile("."),
        output_synthetic_histo: execution.outputFile([(params["synthetic_histo"] ?? null)].join('')),
    };
    return ret;
}


/**
 * histo_synthesize
 *
 * Tool for synthesizing histology-like volumes from MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `HistoSynthesizeOutputs`).
 */
function histo_synthesize_execute(
    params: HistoSynthesizeParameters,
    runner: Runner | null = null,
): HistoSynthesizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(HISTO_SYNTHESIZE_METADATA);
    params = execution.params(params)
    const cargs = histo_synthesize_cargs(params, execution)
    const ret = histo_synthesize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * histo_synthesize
 *
 * Tool for synthesizing histology-like volumes from MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param mri_volume Input MRI volume file.
 * @param histo_volume Input HISTO volume file.
 * @param synthetic_histo Output synthetic histo volume file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `HistoSynthesizeOutputs`).
 */
function histo_synthesize(
    mri_volume: InputPathType,
    histo_volume: InputPathType,
    synthetic_histo: string,
    runner: Runner | null = null,
): HistoSynthesizeOutputs {
    const params = histo_synthesize_params(mri_volume, histo_volume, synthetic_histo)
    return histo_synthesize_execute(params, runner);
}


export {
      HISTO_SYNTHESIZE_METADATA,
      HistoSynthesizeOutputs,
      histo_synthesize,
      histo_synthesize_execute,
      histo_synthesize_params,
};
