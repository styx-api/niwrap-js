// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_CONFORMIST_METADATA: Metadata = {
    id: "5364044bdb15b4b167c48ea32e2e56b54471409d.boutiques",
    name: "3dConformist",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dConformistParameters {
    "@type"?: "afni/3dConformist";
    "input_files": Array<InputPathType>;
}
type V3dConformistParametersTagged = Required<Pick<V3dConformistParameters, '@type'>> & V3dConformistParameters;


/**
 * Output object returned when calling `V3dConformistParameters(...)`.
 *
 * @interface
 */
interface V3dConformistOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Zero padded output dataset files
     */
    output_files: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input datasets to be zero padded to the same size
 *
 * @returns Parameter dictionary
 */
function v_3d_conformist_params(
    input_files: Array<InputPathType>,
): V3dConformistParametersTagged {
    const params = {
        "@type": "afni/3dConformist" as const,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_conformist_cargs(
    params: V3dConformistParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dConformist");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_conformist_outputs(
    params: V3dConformistParameters,
    execution: Execution,
): V3dConformistOutputs {
    const ret: V3dConformistOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile(["."].join('')),
    };
    return ret;
}


/**
 * 3dConformist
 *
 * Program to conform a collection of datasets to the same size by zero padding.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dConformistOutputs`).
 */
function v_3d_conformist_execute(
    params: V3dConformistParameters,
    runner: Runner | null = null,
): V3dConformistOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_CONFORMIST_METADATA);
    params = execution.params(params)
    const cargs = v_3d_conformist_cargs(params, execution)
    const ret = v_3d_conformist_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dConformist
 *
 * Program to conform a collection of datasets to the same size by zero padding.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input datasets to be zero padded to the same size
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dConformistOutputs`).
 */
function v_3d_conformist(
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): V3dConformistOutputs {
    const params = v_3d_conformist_params(input_files)
    return v_3d_conformist_execute(params, runner);
}


export {
      V3dConformistOutputs,
      V_3D_CONFORMIST_METADATA,
      v_3d_conformist,
      v_3d_conformist_execute,
      v_3d_conformist_params,
};
