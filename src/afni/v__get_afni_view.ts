// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__GET_AFNI_VIEW_METADATA: Metadata = {
    id: "697dd7318bcca131bdbfbdb54166fd3accb9e01b.boutiques",
    name: "@GetAfniView",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VGetAfniViewParameters {
    "@type": "afni.@GetAfniView";
    "dataset_name": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@GetAfniView": v__get_afni_view_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@GetAfniView": v__get_afni_view_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__get_afni_view(...)`.
 *
 * @interface
 */
interface VGetAfniViewOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The AFNI view extension retrieved from the dataset name
     */
    afni_view: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dataset_name Name of the dataset (including path) from which to retrieve the AFNI view (+orig, +acpc, etc.)
 *
 * @returns Parameter dictionary
 */
function v__get_afni_view_params(
    dataset_name: string,
): VGetAfniViewParameters {
    const params = {
        "@type": "afni.@GetAfniView" as const,
        "dataset_name": dataset_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__get_afni_view_cargs(
    params: VGetAfniViewParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@GetAfniView");
    cargs.push((params["dataset_name"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__get_afni_view_outputs(
    params: VGetAfniViewParameters,
    execution: Execution,
): VGetAfniViewOutputs {
    const ret: VGetAfniViewOutputs = {
        root: execution.outputFile("."),
        afni_view: execution.outputFile(["view_extension.txt"].join('')),
    };
    return ret;
}


/**
 * A tool to retrieve the AFNI view of a given dataset name.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VGetAfniViewOutputs`).
 */
function v__get_afni_view_execute(
    params: VGetAfniViewParameters,
    execution: Execution,
): VGetAfniViewOutputs {
    params = execution.params(params)
    const cargs = v__get_afni_view_cargs(params, execution)
    const ret = v__get_afni_view_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to retrieve the AFNI view of a given dataset name.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset_name Name of the dataset (including path) from which to retrieve the AFNI view (+orig, +acpc, etc.)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VGetAfniViewOutputs`).
 */
function v__get_afni_view(
    dataset_name: string,
    runner: Runner | null = null,
): VGetAfniViewOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__GET_AFNI_VIEW_METADATA);
    const params = v__get_afni_view_params(dataset_name)
    return v__get_afni_view_execute(params, execution);
}


export {
      VGetAfniViewOutputs,
      VGetAfniViewParameters,
      V__GET_AFNI_VIEW_METADATA,
      v__get_afni_view,
      v__get_afni_view_cargs,
      v__get_afni_view_execute,
      v__get_afni_view_outputs,
      v__get_afni_view_params,
};
