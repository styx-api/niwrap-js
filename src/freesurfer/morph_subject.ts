// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MORPH_SUBJECT_METADATA: Metadata = {
    id: "685f97530d830d12a67cb8468c38864b69d1e65c.boutiques",
    name: "morph_subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MorphSubjectParameters {
    "__STYXTYPE__": "morph_subject";
    "subjid": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "morph_subject": morph_subject_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `morph_subject(...)`.
 *
 * @interface
 */
interface MorphSubjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function morph_subject_params(
    subjid: string,
): MorphSubjectParameters {
    /**
     * Build parameters.
    
     * @param subjid Subject ID for processing
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "morph_subject" as const,
        "subjid": subjid,
    };
    return params;
}


function morph_subject_cargs(
    params: MorphSubjectParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("morph_subject");
    cargs.push((params["subjid"] ?? null));
    return cargs;
}


function morph_subject_outputs(
    params: MorphSubjectParameters,
    execution: Execution,
): MorphSubjectOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MorphSubjectOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function morph_subject_execute(
    params: MorphSubjectParameters,
    execution: Execution,
): MorphSubjectOutputs {
    /**
     * A morphological processing tool for Freesurfer subjects. The specific operations and options are not documented in the available help text.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MorphSubjectOutputs`).
     */
    params = execution.params(params)
    const cargs = morph_subject_cargs(params, execution)
    const ret = morph_subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function morph_subject(
    subjid: string,
    runner: Runner | null = null,
): MorphSubjectOutputs {
    /**
     * A morphological processing tool for Freesurfer subjects. The specific operations and options are not documented in the available help text.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subjid Subject ID for processing
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MorphSubjectOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MORPH_SUBJECT_METADATA);
    const params = morph_subject_params(subjid)
    return morph_subject_execute(params, execution);
}


export {
      MORPH_SUBJECT_METADATA,
      MorphSubjectOutputs,
      MorphSubjectParameters,
      morph_subject,
      morph_subject_params,
};
