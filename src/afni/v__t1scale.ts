// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__T1SCALE_METADATA: Metadata = {
    id: "89645e221a5cc9e1118b45d0730af83cf88ad32b.boutiques",
    name: "@T1scale",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VT1scaleParameters {
    "__STYXTYPE__": "@T1scale";
    "t1_volume": InputPathType;
    "pd_volume"?: InputPathType | null | undefined;
    "output_directory"?: string | null | undefined;
    "align": boolean;
    "mask"?: InputPathType | null | undefined;
    "head_mask": boolean;
    "unmasked_uni": boolean;
    "masked_uni": boolean;
    "echo": boolean;
    "help": boolean;
    "h_web": boolean;
    "h_view": boolean;
    "all_opts": boolean;
    "h_find_word"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@T1scale": v__t1scale_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@T1scale": v__t1scale_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__t1scale(...)`.
 *
 * @interface
 */
interface VT1scaleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Uniformized T1 volume output file
     */
    uniformized_t1_output: OutputPathType;
    /**
     * Masked Uniformized T1 volume output file
     */
    masked_uniformized_t1_output: OutputPathType;
    /**
     * Aligned PD volume output file in alignment with T1+orig
     */
    aligned_pd_output: OutputPathType;
}


function v__t1scale_params(
    t1_volume: InputPathType,
    pd_volume: InputPathType | null = null,
    output_directory: string | null = null,
    align: boolean = false,
    mask: InputPathType | null = null,
    head_mask: boolean = false,
    unmasked_uni: boolean = false,
    masked_uni: boolean = false,
    echo: boolean = false,
    help: boolean = false,
    h_web: boolean = false,
    h_view: boolean = false,
    all_opts: boolean = false,
    h_find_word: string | null = null,
): VT1scaleParameters {
    /**
     * Build parameters.
    
     * @param t1_volume The T1 volume
     * @param pd_volume The PD volume (aligned to T1)
     * @param output_directory Directory where output gets dumped. Default is T1scale/
     * @param align Align PD volume to T1. Without this option, PDvol is assumed in alignment with T1vol.
     * @param mask Create mask for the output. If not specified, the script will generate one with 3dAutomask on fattened PDvol.
     * @param head_mask Create mask using 3dSkullStrip's -head option.
     * @param unmasked_uni Do not apply masking to uniformized volume (default)
     * @param masked_uni Apply masking to uniformized volume
     * @param echo Set echo
     * @param help Display this help message and exit
     * @param h_web Open webpage with help for this program
     * @param h_view Open -help output in a GUI editor
     * @param all_opts List all of the options for this script
     * @param h_find_word Search for lines containing WORD in -help output. Search is approximate.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@T1scale" as const,
        "t1_volume": t1_volume,
        "align": align,
        "head_mask": head_mask,
        "unmasked_uni": unmasked_uni,
        "masked_uni": masked_uni,
        "echo": echo,
        "help": help,
        "h_web": h_web,
        "h_view": h_view,
        "all_opts": all_opts,
    };
    if (pd_volume !== null) {
        params["pd_volume"] = pd_volume;
    }
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (h_find_word !== null) {
        params["h_find_word"] = h_find_word;
    }
    return params;
}


function v__t1scale_cargs(
    params: VT1scaleParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@T1scale");
    cargs.push(
        "-T1",
        execution.inputFile((params["t1_volume"] ?? null))
    );
    if ((params["pd_volume"] ?? null) !== null) {
        cargs.push(
            "-PD",
            execution.inputFile((params["pd_volume"] ?? null))
        );
    }
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "-odir",
            (params["output_directory"] ?? null)
        );
    }
    if ((params["align"] ?? null)) {
        cargs.push("-align");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["head_mask"] ?? null)) {
        cargs.push("-head_mask");
    }
    if ((params["unmasked_uni"] ?? null)) {
        cargs.push("-unmasked_uni");
    }
    if ((params["masked_uni"] ?? null)) {
        cargs.push("-masked_uni");
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["h_web"] ?? null)) {
        cargs.push("-h_web");
    }
    if ((params["h_view"] ?? null)) {
        cargs.push("-hview");
    }
    if ((params["all_opts"] ?? null)) {
        cargs.push("-all_opts");
    }
    if ((params["h_find_word"] ?? null) !== null) {
        cargs.push(
            "-h_find",
            (params["h_find_word"] ?? null)
        );
    }
    return cargs;
}


function v__t1scale_outputs(
    params: VT1scaleParameters,
    execution: Execution,
): VT1scaleOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VT1scaleOutputs = {
        root: execution.outputFile("."),
        uniformized_t1_output: execution.outputFile(["T1.uni+orig"].join('')),
        masked_uniformized_t1_output: execution.outputFile(["T1_uni_masked+orig"].join('')),
        aligned_pd_output: execution.outputFile(["PD+orig"].join('')),
    };
    return ret;
}


function v__t1scale_execute(
    params: VT1scaleParameters,
    execution: Execution,
): VT1scaleOutputs {
    /**
     * Fix bias field shading in T1 by scaling it with PD image. You can also get a decent result even without the PD volume.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VT1scaleOutputs`).
     */
    params = execution.params(params)
    const cargs = v__t1scale_cargs(params, execution)
    const ret = v__t1scale_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__t1scale(
    t1_volume: InputPathType,
    pd_volume: InputPathType | null = null,
    output_directory: string | null = null,
    align: boolean = false,
    mask: InputPathType | null = null,
    head_mask: boolean = false,
    unmasked_uni: boolean = false,
    masked_uni: boolean = false,
    echo: boolean = false,
    help: boolean = false,
    h_web: boolean = false,
    h_view: boolean = false,
    all_opts: boolean = false,
    h_find_word: string | null = null,
    runner: Runner | null = null,
): VT1scaleOutputs {
    /**
     * Fix bias field shading in T1 by scaling it with PD image. You can also get a decent result even without the PD volume.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param t1_volume The T1 volume
     * @param pd_volume The PD volume (aligned to T1)
     * @param output_directory Directory where output gets dumped. Default is T1scale/
     * @param align Align PD volume to T1. Without this option, PDvol is assumed in alignment with T1vol.
     * @param mask Create mask for the output. If not specified, the script will generate one with 3dAutomask on fattened PDvol.
     * @param head_mask Create mask using 3dSkullStrip's -head option.
     * @param unmasked_uni Do not apply masking to uniformized volume (default)
     * @param masked_uni Apply masking to uniformized volume
     * @param echo Set echo
     * @param help Display this help message and exit
     * @param h_web Open webpage with help for this program
     * @param h_view Open -help output in a GUI editor
     * @param all_opts List all of the options for this script
     * @param h_find_word Search for lines containing WORD in -help output. Search is approximate.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VT1scaleOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__T1SCALE_METADATA);
    const params = v__t1scale_params(t1_volume, pd_volume, output_directory, align, mask, head_mask, unmasked_uni, masked_uni, echo, help, h_web, h_view, all_opts, h_find_word)
    return v__t1scale_execute(params, execution);
}


export {
      VT1scaleOutputs,
      VT1scaleParameters,
      V__T1SCALE_METADATA,
      v__t1scale,
      v__t1scale_params,
};
