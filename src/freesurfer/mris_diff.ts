// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_DIFF_METADATA: Metadata = {
    id: "30172af00f20644762a6e2ce032311fb482cfc14.boutiques",
    name: "mris_diff",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisDiffParameters {
    "__STYXTYPE__": "mris_diff";
    "surface1": InputPathType;
    "surface2": InputPathType;
    "subject1": string;
    "subject2": string;
    "subj_dir1"?: string | null | undefined;
    "subj_dir2"?: string | null | undefined;
    "hemisphere": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_diff": mris_diff_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_diff(...)`.
 *
 * @interface
 */
interface MrisDiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_diff_params(
    surface1: InputPathType,
    surface2: InputPathType,
    subject1: string,
    subject2: string,
    hemisphere: string,
    subj_dir1: string | null = null,
    subj_dir2: string | null = null,
): MrisDiffParameters {
    /**
     * Build parameters.
    
     * @param surface1 First surface file
     * @param surface2 Second surface file
     * @param subject1 Subject 1 name
     * @param subject2 Subject 2 name
     * @param hemisphere Hemisphere (rh or lh)
     * @param subj_dir1 Directory for Subject 1 (default is SUBJECTS_DIR)
     * @param subj_dir2 Directory for Subject 2 (default is SUBJECTS_DIR)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_diff" as const,
        "surface1": surface1,
        "surface2": surface2,
        "subject1": subject1,
        "subject2": subject2,
        "hemisphere": hemisphere,
    };
    if (subj_dir1 !== null) {
        params["subj_dir1"] = subj_dir1;
    }
    if (subj_dir2 !== null) {
        params["subj_dir2"] = subj_dir2;
    }
    return params;
}


function mris_diff_cargs(
    params: MrisDiffParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_diff");
    cargs.push(execution.inputFile((params["surface1"] ?? null)));
    cargs.push(execution.inputFile((params["surface2"] ?? null)));
    cargs.push(
        "--s1",
        (params["subject1"] ?? null)
    );
    cargs.push(
        "--s2",
        (params["subject2"] ?? null)
    );
    if ((params["subj_dir1"] ?? null) !== null) {
        cargs.push(
            "--sd1",
            (params["subj_dir1"] ?? null)
        );
    }
    if ((params["subj_dir2"] ?? null) !== null) {
        cargs.push(
            "--sd2",
            (params["subj_dir2"] ?? null)
        );
    }
    cargs.push(
        "--hemi",
        (params["hemisphere"] ?? null)
    );
    return cargs;
}


function mris_diff_outputs(
    params: MrisDiffParameters,
    execution: Execution,
): MrisDiffOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisDiffOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_diff_execute(
    params: MrisDiffParameters,
    execution: Execution,
): MrisDiffOutputs {
    /**
     * A tool for comparing differences between surface files in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisDiffOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_diff_cargs(params, execution)
    const ret = mris_diff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_diff(
    surface1: InputPathType,
    surface2: InputPathType,
    subject1: string,
    subject2: string,
    hemisphere: string,
    subj_dir1: string | null = null,
    subj_dir2: string | null = null,
    runner: Runner | null = null,
): MrisDiffOutputs {
    /**
     * A tool for comparing differences between surface files in FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surface1 First surface file
     * @param surface2 Second surface file
     * @param subject1 Subject 1 name
     * @param subject2 Subject 2 name
     * @param hemisphere Hemisphere (rh or lh)
     * @param subj_dir1 Directory for Subject 1 (default is SUBJECTS_DIR)
     * @param subj_dir2 Directory for Subject 2 (default is SUBJECTS_DIR)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisDiffOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_DIFF_METADATA);
    const params = mris_diff_params(surface1, surface2, subject1, subject2, hemisphere, subj_dir1, subj_dir2)
    return mris_diff_execute(params, execution);
}


export {
      MRIS_DIFF_METADATA,
      MrisDiffOutputs,
      MrisDiffParameters,
      mris_diff,
      mris_diff_params,
};
