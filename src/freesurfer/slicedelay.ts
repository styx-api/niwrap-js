// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICEDELAY_METADATA: Metadata = {
    id: "fefd12c00942108f1db83dac38baac8c6a806f9e.boutiques",
    name: "slicedelay",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SlicedelayParameters {
    "@type": "freesurfer.slicedelay";
    "slicedelayfile": string;
    "nslices": number;
    "order": "up" | "down" | "odd" | "even" | "siemens";
    "ngroups": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.slicedelay": slicedelay_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.slicedelay": slicedelay_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `slicedelay(...)`.
 *
 * @interface
 */
interface SlicedelayOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The generated slice delay file
     */
    slicedelayfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param slicedelayfile Output file for the custom slice delay
 * @param nslices Total number of slices in the volume
 * @param order Order of slices (up, down, odd, even, siemens)
 * @param ngroups Number of slice groups for SMS
 *
 * @returns Parameter dictionary
 */
function slicedelay_params(
    slicedelayfile: string,
    nslices: number,
    order: "up" | "down" | "odd" | "even" | "siemens",
    ngroups: number,
): SlicedelayParameters {
    const params = {
        "@type": "freesurfer.slicedelay" as const,
        "slicedelayfile": slicedelayfile,
        "nslices": nslices,
        "order": order,
        "ngroups": ngroups,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function slicedelay_cargs(
    params: SlicedelayParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("slicedelay");
    cargs.push(
        "--o",
        (params["slicedelayfile"] ?? null)
    );
    cargs.push(
        "--nslices",
        String((params["nslices"] ?? null))
    );
    cargs.push(
        "--order",
        (params["order"] ?? null)
    );
    cargs.push(
        "--ngroups",
        String((params["ngroups"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function slicedelay_outputs(
    params: SlicedelayParameters,
    execution: Execution,
): SlicedelayOutputs {
    const ret: SlicedelayOutputs = {
        root: execution.outputFile("."),
        slicedelayfile: execution.outputFile([(params["slicedelayfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Creates an FSL custom slice delay file for use with slicetimer for slice-time correction of fMRI.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `SlicedelayOutputs`).
 */
function slicedelay_execute(
    params: SlicedelayParameters,
    execution: Execution,
): SlicedelayOutputs {
    params = execution.params(params)
    const cargs = slicedelay_cargs(params, execution)
    const ret = slicedelay_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Creates an FSL custom slice delay file for use with slicetimer for slice-time correction of fMRI.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param slicedelayfile Output file for the custom slice delay
 * @param nslices Total number of slices in the volume
 * @param order Order of slices (up, down, odd, even, siemens)
 * @param ngroups Number of slice groups for SMS
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlicedelayOutputs`).
 */
function slicedelay(
    slicedelayfile: string,
    nslices: number,
    order: "up" | "down" | "odd" | "even" | "siemens",
    ngroups: number,
    runner: Runner | null = null,
): SlicedelayOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICEDELAY_METADATA);
    const params = slicedelay_params(slicedelayfile, nslices, order, ngroups)
    return slicedelay_execute(params, execution);
}


export {
      SLICEDELAY_METADATA,
      SlicedelayOutputs,
      SlicedelayParameters,
      slicedelay,
      slicedelay_cargs,
      slicedelay_execute,
      slicedelay_outputs,
      slicedelay_params,
};
