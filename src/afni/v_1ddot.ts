// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DDOT_METADATA: Metadata = {
    id: "1a194bfd52a12202c97a4c5965254532ca81eeaf.boutiques",
    name: "1ddot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1ddotParameters {
    "@type": "afni.1ddot";
    "one_flag": boolean;
    "dem_flag": boolean;
    "cov_flag": boolean;
    "inn_flag": boolean;
    "rank_flag": boolean;
    "terse_flag": boolean;
    "okzero_flag": boolean;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.1ddot": v_1ddot_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.1ddot": v_1ddot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1ddot(...)`.
 *
 * @interface
 */
interface V1ddotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output text file
     */
    stdout: string[];
    /**
     * Output correlation or covariance matrix printed to stdout.
     */
    stdout_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input 1D files.
 * @param one_flag Make 1st vector be all 1's.
 * @param dem_flag Remove mean from all vectors (conflicts with '-one').
 * @param cov_flag Compute with covariance matrix instead of correlation.
 * @param inn_flag Compute with inner product matrix instead.
 * @param rank_flag Compute Spearman rank correlation instead (also implies '-terse').
 * @param terse_flag Output only the correlation or covariance matrix without any garnish.
 * @param okzero_flag Do not quit if a vector is all zeros. The correlation matrix will have 0 where NaNs ought to go.
 *
 * @returns Parameter dictionary
 */
function v_1ddot_params(
    input_files: Array<InputPathType>,
    one_flag: boolean = false,
    dem_flag: boolean = false,
    cov_flag: boolean = false,
    inn_flag: boolean = false,
    rank_flag: boolean = false,
    terse_flag: boolean = false,
    okzero_flag: boolean = false,
): V1ddotParameters {
    const params = {
        "@type": "afni.1ddot" as const,
        "one_flag": one_flag,
        "dem_flag": dem_flag,
        "cov_flag": cov_flag,
        "inn_flag": inn_flag,
        "rank_flag": rank_flag,
        "terse_flag": terse_flag,
        "okzero_flag": okzero_flag,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1ddot_cargs(
    params: V1ddotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1ddot");
    if ((params["one_flag"] ?? null)) {
        cargs.push("-one");
    }
    if ((params["dem_flag"] ?? null)) {
        cargs.push("-dem");
    }
    if ((params["cov_flag"] ?? null)) {
        cargs.push("-cov");
    }
    if ((params["inn_flag"] ?? null)) {
        cargs.push("-inn");
    }
    if ((params["rank_flag"] ?? null)) {
        cargs.push("-rank");
    }
    if ((params["terse_flag"] ?? null)) {
        cargs.push("-terse");
    }
    if ((params["okzero_flag"] ?? null)) {
        cargs.push("-okzero");
    }
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1ddot_outputs(
    params: V1ddotParameters,
    execution: Execution,
): V1ddotOutputs {
    const ret: V1ddotOutputs = {
        root: execution.outputFile("."),
        stdout: [],
        stdout_output: execution.outputFile(["stdout.txt"].join('')),
    };
    return ret;
}


/**
 * 1ddot
 *
 * Computes the correlation matrix of the input 1D files and their inverse correlation matrix.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1ddotOutputs`).
 */
function v_1ddot_execute(
    params: V1ddotParameters,
    runner: Runner | null = null,
): V1ddotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DDOT_METADATA);
    params = execution.params(params)
    const cargs = v_1ddot_cargs(params, execution)
    const ret = v_1ddot_outputs(params, execution)
    execution.run(cargs, s => ret.stdout.push(s));
    return ret;
}


/**
 * 1ddot
 *
 * Computes the correlation matrix of the input 1D files and their inverse correlation matrix.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input 1D files.
 * @param one_flag Make 1st vector be all 1's.
 * @param dem_flag Remove mean from all vectors (conflicts with '-one').
 * @param cov_flag Compute with covariance matrix instead of correlation.
 * @param inn_flag Compute with inner product matrix instead.
 * @param rank_flag Compute Spearman rank correlation instead (also implies '-terse').
 * @param terse_flag Output only the correlation or covariance matrix without any garnish.
 * @param okzero_flag Do not quit if a vector is all zeros. The correlation matrix will have 0 where NaNs ought to go.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1ddotOutputs`).
 */
function v_1ddot(
    input_files: Array<InputPathType>,
    one_flag: boolean = false,
    dem_flag: boolean = false,
    cov_flag: boolean = false,
    inn_flag: boolean = false,
    rank_flag: boolean = false,
    terse_flag: boolean = false,
    okzero_flag: boolean = false,
    runner: Runner | null = null,
): V1ddotOutputs {
    const params = v_1ddot_params(input_files, one_flag, dem_flag, cov_flag, inn_flag, rank_flag, terse_flag, okzero_flag)
    return v_1ddot_execute(params, runner);
}


export {
      V1ddotOutputs,
      V1ddotParameters,
      V_1DDOT_METADATA,
      v_1ddot,
      v_1ddot_execute,
      v_1ddot_params,
};
