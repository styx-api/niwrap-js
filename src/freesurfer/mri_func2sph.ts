// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_FUNC2SPH_METADATA: Metadata = {
    id: "513183fc43583bba0e42d4b2f95a3e588f6e1b58.boutiques",
    name: "mri-func2sph",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriFunc2sphParameters {
    "@type"?: "freesurfer/mri-func2sph";
    "instem": string;
    "outstem": string;
    "hemisphere": "lh" | "rh";
    "fvitdir": string;
    "hole_filling_iters"?: number | null | undefined;
    "icosahedron_size"?: number | null | undefined;
    "input_type"?: string | null | undefined;
    "umask"?: string | null | undefined;
}
type MriFunc2sphParametersTagged = Required<Pick<MriFunc2sphParameters, '@type'>> & MriFunc2sphParameters;


/**
 * Output object returned when calling `MriFunc2sphParameters(...)`.
 *
 * @interface
 */
interface MriFunc2sphOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param instem Input file stem
 * @param outstem Output file stem
 * @param hemisphere Hemisphere to process, can be 'lh' or 'rh'
 * @param fvitdir Functional vertex information directory
 * @param hole_filling_iters Number of hole-filling iterations
 * @param icosahedron_size Size of the icosahedron
 * @param input_type Type of input data, will be auto-detected if not specified
 * @param umask New umask value
 *
 * @returns Parameter dictionary
 */
function mri_func2sph_params(
    instem: string,
    outstem: string,
    hemisphere: "lh" | "rh",
    fvitdir: string,
    hole_filling_iters: number | null = null,
    icosahedron_size: number | null = null,
    input_type: string | null = null,
    umask: string | null = null,
): MriFunc2sphParametersTagged {
    const params = {
        "@type": "freesurfer/mri-func2sph" as const,
        "instem": instem,
        "outstem": outstem,
        "hemisphere": hemisphere,
        "fvitdir": fvitdir,
    };
    if (hole_filling_iters !== null) {
        params["hole_filling_iters"] = hole_filling_iters;
    }
    if (icosahedron_size !== null) {
        params["icosahedron_size"] = icosahedron_size;
    }
    if (input_type !== null) {
        params["input_type"] = input_type;
    }
    if (umask !== null) {
        params["umask"] = umask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_func2sph_cargs(
    params: MriFunc2sphParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri-func2sph");
    cargs.push(
        "-i",
        (params["instem"] ?? null)
    );
    cargs.push(
        "-o",
        (params["outstem"] ?? null)
    );
    cargs.push(
        "-hemi",
        (params["hemisphere"] ?? null)
    );
    cargs.push(
        "-fvitdir",
        (params["fvitdir"] ?? null)
    );
    if ((params["hole_filling_iters"] ?? null) !== null) {
        cargs.push(
            "-niters",
            String((params["hole_filling_iters"] ?? null))
        );
    }
    if ((params["icosahedron_size"] ?? null) !== null) {
        cargs.push(
            "-icosize",
            String((params["icosahedron_size"] ?? null))
        );
    }
    if ((params["input_type"] ?? null) !== null) {
        cargs.push(
            "-intype",
            (params["input_type"] ?? null)
        );
    }
    if ((params["umask"] ?? null) !== null) {
        cargs.push(
            "-umask",
            (params["umask"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_func2sph_outputs(
    params: MriFunc2sphParameters,
    execution: Execution,
): MriFunc2sphOutputs {
    const ret: MriFunc2sphOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri-func2sph
 *
 * Maps functional data from volume space to spherical surface space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFunc2sphOutputs`).
 */
function mri_func2sph_execute(
    params: MriFunc2sphParameters,
    runner: Runner | null = null,
): MriFunc2sphOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_FUNC2SPH_METADATA);
    params = execution.params(params)
    const cargs = mri_func2sph_cargs(params, execution)
    const ret = mri_func2sph_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri-func2sph
 *
 * Maps functional data from volume space to spherical surface space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param instem Input file stem
 * @param outstem Output file stem
 * @param hemisphere Hemisphere to process, can be 'lh' or 'rh'
 * @param fvitdir Functional vertex information directory
 * @param hole_filling_iters Number of hole-filling iterations
 * @param icosahedron_size Size of the icosahedron
 * @param input_type Type of input data, will be auto-detected if not specified
 * @param umask New umask value
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriFunc2sphOutputs`).
 */
function mri_func2sph(
    instem: string,
    outstem: string,
    hemisphere: "lh" | "rh",
    fvitdir: string,
    hole_filling_iters: number | null = null,
    icosahedron_size: number | null = null,
    input_type: string | null = null,
    umask: string | null = null,
    runner: Runner | null = null,
): MriFunc2sphOutputs {
    const params = mri_func2sph_params(instem, outstem, hemisphere, fvitdir, hole_filling_iters, icosahedron_size, input_type, umask)
    return mri_func2sph_execute(params, runner);
}


export {
      MRI_FUNC2SPH_METADATA,
      MriFunc2sphOutputs,
      mri_func2sph,
      mri_func2sph_execute,
      mri_func2sph_params,
};
