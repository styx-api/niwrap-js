// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RBBR_METADATA: Metadata = {
    id: "83d2a121d87ec0c6e66a4604bc69ecd4e43a3343.boutiques",
    name: "rbbr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RbbrParameters {
    "@type": "freesurfer.rbbr";
    "subject"?: string | null | undefined;
    "moving_image": string;
    "t1_contrast": boolean;
    "t2_contrast": boolean;
    "init_reg": boolean;
    "init_spm": boolean;
    "init_fsl": boolean;
    "init_header": boolean;
    "cost_threshold"?: number | null | undefined;
    "gtm_synthesize"?: string | null | undefined;
    "tt_reduce": boolean;
    "iterations"?: number | null | undefined;
    "output_reg"?: string | null | undefined;
    "output_lta"?: string | null | undefined;
    "left_hemi": boolean;
    "right_hemi": boolean;
    "gm_proj_frac"?: number | null | undefined;
    "gm_proj_abs"?: number | null | undefined;
    "wm_proj_abs"?: number | null | undefined;
    "frame_no"?: number | null | undefined;
    "output_template"?: string | null | undefined;
    "no_merge": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.rbbr": rbbr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.rbbr": rbbr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rbbr(...)`.
 *
 * @interface
 */
interface RbbrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registration file
     */
    output_reg_file: OutputPathType | null;
    /**
     * Output LTA file
     */
    output_lta_file: OutputPathType | null;
    /**
     * Saved template output file
     */
    output_template_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param moving_image Input moving image
 * @param subject FreeSurfer subject (not needed with --init-reg)
 * @param t1_contrast Use T1 tissue contrast
 * @param t2_contrast Use T2 tissue contrast
 * @param init_reg Initialize registration
 * @param init_spm Initialize with SPM
 * @param init_fsl Initialize with FSL
 * @param init_header Initialize using header
 * @param cost_threshold Cost threshold to define outlier
 * @param gtm_synthesize Use GTM to synthesize
 * @param tt_reduce Reduce GTM Seg to tissue types for faster processing
 * @param iterations Number of iterations
 * @param output_reg Output registration file
 * @param output_lta Output LTA file
 * @param left_hemi Only use left hemisphere
 * @param right_hemi Only use right hemisphere
 * @param gm_proj_frac GM projection fraction
 * @param gm_proj_abs GM projection absolute
 * @param wm_proj_abs WM projection absolute
 * @param frame_no Use 0-based frame number as template
 * @param output_template Save template as an output
 * @param no_merge Do not merge GTM Ids
 *
 * @returns Parameter dictionary
 */
function rbbr_params(
    moving_image: string,
    subject: string | null = null,
    t1_contrast: boolean = false,
    t2_contrast: boolean = false,
    init_reg: boolean = false,
    init_spm: boolean = false,
    init_fsl: boolean = false,
    init_header: boolean = false,
    cost_threshold: number | null = null,
    gtm_synthesize: string | null = null,
    tt_reduce: boolean = false,
    iterations: number | null = null,
    output_reg: string | null = null,
    output_lta: string | null = null,
    left_hemi: boolean = false,
    right_hemi: boolean = false,
    gm_proj_frac: number | null = null,
    gm_proj_abs: number | null = null,
    wm_proj_abs: number | null = null,
    frame_no: number | null = null,
    output_template: string | null = null,
    no_merge: boolean = false,
): RbbrParameters {
    const params = {
        "@type": "freesurfer.rbbr" as const,
        "moving_image": moving_image,
        "t1_contrast": t1_contrast,
        "t2_contrast": t2_contrast,
        "init_reg": init_reg,
        "init_spm": init_spm,
        "init_fsl": init_fsl,
        "init_header": init_header,
        "tt_reduce": tt_reduce,
        "left_hemi": left_hemi,
        "right_hemi": right_hemi,
        "no_merge": no_merge,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (cost_threshold !== null) {
        params["cost_threshold"] = cost_threshold;
    }
    if (gtm_synthesize !== null) {
        params["gtm_synthesize"] = gtm_synthesize;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (output_reg !== null) {
        params["output_reg"] = output_reg;
    }
    if (output_lta !== null) {
        params["output_lta"] = output_lta;
    }
    if (gm_proj_frac !== null) {
        params["gm_proj_frac"] = gm_proj_frac;
    }
    if (gm_proj_abs !== null) {
        params["gm_proj_abs"] = gm_proj_abs;
    }
    if (wm_proj_abs !== null) {
        params["wm_proj_abs"] = wm_proj_abs;
    }
    if (frame_no !== null) {
        params["frame_no"] = frame_no;
    }
    if (output_template !== null) {
        params["output_template"] = output_template;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rbbr_cargs(
    params: RbbrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rbbr");
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    cargs.push(
        "--mov",
        (params["moving_image"] ?? null)
    );
    if ((params["t1_contrast"] ?? null)) {
        cargs.push("--t1");
    }
    if ((params["t2_contrast"] ?? null)) {
        cargs.push("--t2");
    }
    if ((params["init_reg"] ?? null)) {
        cargs.push("--init-reg");
    }
    if ((params["init_spm"] ?? null)) {
        cargs.push("--init-spm");
    }
    if ((params["init_fsl"] ?? null)) {
        cargs.push("--init-fsl");
    }
    if ((params["init_header"] ?? null)) {
        cargs.push("--init-header");
    }
    if ((params["cost_threshold"] ?? null) !== null) {
        cargs.push(
            "--cthresh",
            String((params["cost_threshold"] ?? null))
        );
    }
    if ((params["gtm_synthesize"] ?? null) !== null) {
        cargs.push(
            "--gtm",
            (params["gtm_synthesize"] ?? null)
        );
    }
    if ((params["tt_reduce"] ?? null)) {
        cargs.push("--tt-reduce");
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "--iters",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["output_reg"] ?? null) !== null) {
        cargs.push(
            "--reg",
            (params["output_reg"] ?? null)
        );
    }
    if ((params["output_lta"] ?? null) !== null) {
        cargs.push(
            "--lta",
            (params["output_lta"] ?? null)
        );
    }
    if ((params["left_hemi"] ?? null)) {
        cargs.push("--lh-only");
    }
    if ((params["right_hemi"] ?? null)) {
        cargs.push("--rh-only");
    }
    if ((params["gm_proj_frac"] ?? null) !== null) {
        cargs.push(
            "--gm-proj-frac",
            String((params["gm_proj_frac"] ?? null))
        );
    }
    if ((params["gm_proj_abs"] ?? null) !== null) {
        cargs.push(
            "--gm-proj-abs",
            String((params["gm_proj_abs"] ?? null))
        );
    }
    if ((params["wm_proj_abs"] ?? null) !== null) {
        cargs.push(
            "--wm-proj-abs",
            String((params["wm_proj_abs"] ?? null))
        );
    }
    if ((params["frame_no"] ?? null) !== null) {
        cargs.push(
            "--frame",
            String((params["frame_no"] ?? null))
        );
    }
    if ((params["output_template"] ?? null) !== null) {
        cargs.push(
            "--template",
            (params["output_template"] ?? null)
        );
    }
    if ((params["no_merge"] ?? null)) {
        cargs.push("--no-merge");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rbbr_outputs(
    params: RbbrParameters,
    execution: Execution,
): RbbrOutputs {
    const ret: RbbrOutputs = {
        root: execution.outputFile("."),
        output_reg_file: ((params["output_reg"] ?? null) !== null) ? execution.outputFile([(params["output_reg"] ?? null)].join('')) : null,
        output_lta_file: ((params["output_lta"] ?? null) !== null) ? execution.outputFile([(params["output_lta"] ?? null)].join('')) : null,
        output_template_file: ((params["output_template"] ?? null) !== null) ? execution.outputFile([(params["output_template"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Robust version of bbregister.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RbbrOutputs`).
 */
function rbbr_execute(
    params: RbbrParameters,
    runner: Runner | null = null,
): RbbrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RBBR_METADATA);
    params = execution.params(params)
    const cargs = rbbr_cargs(params, execution)
    const ret = rbbr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Robust version of bbregister.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param moving_image Input moving image
 * @param subject FreeSurfer subject (not needed with --init-reg)
 * @param t1_contrast Use T1 tissue contrast
 * @param t2_contrast Use T2 tissue contrast
 * @param init_reg Initialize registration
 * @param init_spm Initialize with SPM
 * @param init_fsl Initialize with FSL
 * @param init_header Initialize using header
 * @param cost_threshold Cost threshold to define outlier
 * @param gtm_synthesize Use GTM to synthesize
 * @param tt_reduce Reduce GTM Seg to tissue types for faster processing
 * @param iterations Number of iterations
 * @param output_reg Output registration file
 * @param output_lta Output LTA file
 * @param left_hemi Only use left hemisphere
 * @param right_hemi Only use right hemisphere
 * @param gm_proj_frac GM projection fraction
 * @param gm_proj_abs GM projection absolute
 * @param wm_proj_abs WM projection absolute
 * @param frame_no Use 0-based frame number as template
 * @param output_template Save template as an output
 * @param no_merge Do not merge GTM Ids
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RbbrOutputs`).
 */
function rbbr(
    moving_image: string,
    subject: string | null = null,
    t1_contrast: boolean = false,
    t2_contrast: boolean = false,
    init_reg: boolean = false,
    init_spm: boolean = false,
    init_fsl: boolean = false,
    init_header: boolean = false,
    cost_threshold: number | null = null,
    gtm_synthesize: string | null = null,
    tt_reduce: boolean = false,
    iterations: number | null = null,
    output_reg: string | null = null,
    output_lta: string | null = null,
    left_hemi: boolean = false,
    right_hemi: boolean = false,
    gm_proj_frac: number | null = null,
    gm_proj_abs: number | null = null,
    wm_proj_abs: number | null = null,
    frame_no: number | null = null,
    output_template: string | null = null,
    no_merge: boolean = false,
    runner: Runner | null = null,
): RbbrOutputs {
    const params = rbbr_params(moving_image, subject, t1_contrast, t2_contrast, init_reg, init_spm, init_fsl, init_header, cost_threshold, gtm_synthesize, tt_reduce, iterations, output_reg, output_lta, left_hemi, right_hemi, gm_proj_frac, gm_proj_abs, wm_proj_abs, frame_no, output_template, no_merge)
    return rbbr_execute(params, runner);
}


export {
      RBBR_METADATA,
      RbbrOutputs,
      RbbrParameters,
      rbbr,
      rbbr_execute,
      rbbr_params,
};
