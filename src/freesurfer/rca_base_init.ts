// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RCA_BASE_INIT_METADATA: Metadata = {
    id: "3c8d3ad6bcb4fc42684b1829ed14e08e22b13cd8.boutiques",
    name: "rca-base-init",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RcaBaseInitParameters {
    "@type": "freesurfer.rca-base-init";
    "log_file"?: string | null | undefined;
    "status_file"?: string | null | undefined;
    "cmd_file"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.rca-base-init": rca_base_init_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rca_base_init(...)`.
 *
 * @interface
 */
interface RcaBaseInitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param log_file Path to the local log file for output.
 * @param status_file Path to the status file to append logs.
 * @param cmd_file Path to the command file to append execution commands.
 *
 * @returns Parameter dictionary
 */
function rca_base_init_params(
    log_file: string | null = null,
    status_file: string | null = null,
    cmd_file: string | null = null,
): RcaBaseInitParameters {
    const params = {
        "@type": "freesurfer.rca-base-init" as const,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (status_file !== null) {
        params["status_file"] = status_file;
    }
    if (cmd_file !== null) {
        params["cmd_file"] = cmd_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rca_base_init_cargs(
    params: RcaBaseInitParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rca-base-init");
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-init",
            (params["log_file"] ?? null)
        );
    }
    if ((params["status_file"] ?? null) !== null) {
        cargs.push((params["status_file"] ?? null));
    }
    if ((params["cmd_file"] ?? null) !== null) {
        cargs.push((params["cmd_file"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rca_base_init_outputs(
    params: RcaBaseInitParameters,
    execution: Execution,
): RcaBaseInitOutputs {
    const ret: RcaBaseInitOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Initialize base subject for recon-all processing.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `RcaBaseInitOutputs`).
 */
function rca_base_init_execute(
    params: RcaBaseInitParameters,
    execution: Execution,
): RcaBaseInitOutputs {
    params = execution.params(params)
    const cargs = rca_base_init_cargs(params, execution)
    const ret = rca_base_init_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Initialize base subject for recon-all processing.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param log_file Path to the local log file for output.
 * @param status_file Path to the status file to append logs.
 * @param cmd_file Path to the command file to append execution commands.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RcaBaseInitOutputs`).
 */
function rca_base_init(
    log_file: string | null = null,
    status_file: string | null = null,
    cmd_file: string | null = null,
    runner: Runner | null = null,
): RcaBaseInitOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RCA_BASE_INIT_METADATA);
    const params = rca_base_init_params(log_file, status_file, cmd_file)
    return rca_base_init_execute(params, execution);
}


export {
      RCA_BASE_INIT_METADATA,
      RcaBaseInitOutputs,
      RcaBaseInitParameters,
      rca_base_init,
      rca_base_init_cargs,
      rca_base_init_execute,
      rca_base_init_outputs,
      rca_base_init_params,
};
