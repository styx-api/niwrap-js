// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_PARCEL_RESAMPLING_METADATA: Metadata = {
    id: "5bbe50c5806e2adef7cc3daf350744e6e52e6e64.boutiques",
    name: "volume-parcel-resampling",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeParcelResamplingParameters {
    "@type": "workbench.volume-parcel-resampling";
    "volume_in": InputPathType;
    "cur_parcels": InputPathType;
    "new_parcels": InputPathType;
    "kernel": number;
    "volume_out": string;
    "opt_fix_zeros": boolean;
    "opt_fwhm": boolean;
    "opt_subvolume_subvol"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-parcel-resampling": volume_parcel_resampling_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-parcel-resampling": volume_parcel_resampling_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_parcel_resampling(...)`.
 *
 * @interface
 */
interface VolumeParcelResamplingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_in the input data volume
 * @param cur_parcels label volume of where the parcels currently are
 * @param new_parcels label volume of where the parcels should be
 * @param kernel gaussian kernel size in mm to smooth by during resampling, as sigma by default
 * @param volume_out output volume
 * @param opt_fix_zeros treat zero values as not being data
 * @param opt_fwhm smoothing kernel size is FWHM, not sigma
 * @param opt_subvolume_subvol select a single subvolume as input: the subvolume number or name
 *
 * @returns Parameter dictionary
 */
function volume_parcel_resampling_params(
    volume_in: InputPathType,
    cur_parcels: InputPathType,
    new_parcels: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fix_zeros: boolean = false,
    opt_fwhm: boolean = false,
    opt_subvolume_subvol: string | null = null,
): VolumeParcelResamplingParameters {
    const params = {
        "@type": "workbench.volume-parcel-resampling" as const,
        "volume_in": volume_in,
        "cur_parcels": cur_parcels,
        "new_parcels": new_parcels,
        "kernel": kernel,
        "volume_out": volume_out,
        "opt_fix_zeros": opt_fix_zeros,
        "opt_fwhm": opt_fwhm,
    };
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_parcel_resampling_cargs(
    params: VolumeParcelResamplingParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-parcel-resampling");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push(execution.inputFile((params["cur_parcels"] ?? null)));
    cargs.push(execution.inputFile((params["new_parcels"] ?? null)));
    cargs.push(String((params["kernel"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_fix_zeros"] ?? null)) {
        cargs.push("-fix-zeros");
    }
    if ((params["opt_fwhm"] ?? null)) {
        cargs.push("-fwhm");
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_parcel_resampling_outputs(
    params: VolumeParcelResamplingParameters,
    execution: Execution,
): VolumeParcelResamplingOutputs {
    const ret: VolumeParcelResamplingOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * volume-parcel-resampling
 *
 * Smooth and resample volume parcels.
 *
 * Smooths and resamples the region inside each label in cur-parcels to the region of the same label name in new-parcels.  Any voxels in the output label region but outside the input label region will be extrapolated from nearby data.  The -fix-zeros option causes the smoothing to not use an input value if it is zero, but still write a smoothed value to the voxel, and after smoothing is complete, it will check for any remaining values of zero, and fill them in with extrapolated values.
 *
 * Note: all volumes must have the same dimensions and spacing.  To use a different output space, see -volume-parcel-resampling-generic.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeParcelResamplingOutputs`).
 */
function volume_parcel_resampling_execute(
    params: VolumeParcelResamplingParameters,
    runner: Runner | null = null,
): VolumeParcelResamplingOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_PARCEL_RESAMPLING_METADATA);
    params = execution.params(params)
    const cargs = volume_parcel_resampling_cargs(params, execution)
    const ret = volume_parcel_resampling_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * volume-parcel-resampling
 *
 * Smooth and resample volume parcels.
 *
 * Smooths and resamples the region inside each label in cur-parcels to the region of the same label name in new-parcels.  Any voxels in the output label region but outside the input label region will be extrapolated from nearby data.  The -fix-zeros option causes the smoothing to not use an input value if it is zero, but still write a smoothed value to the voxel, and after smoothing is complete, it will check for any remaining values of zero, and fill them in with extrapolated values.
 *
 * Note: all volumes must have the same dimensions and spacing.  To use a different output space, see -volume-parcel-resampling-generic.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_in the input data volume
 * @param cur_parcels label volume of where the parcels currently are
 * @param new_parcels label volume of where the parcels should be
 * @param kernel gaussian kernel size in mm to smooth by during resampling, as sigma by default
 * @param volume_out output volume
 * @param opt_fix_zeros treat zero values as not being data
 * @param opt_fwhm smoothing kernel size is FWHM, not sigma
 * @param opt_subvolume_subvol select a single subvolume as input: the subvolume number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeParcelResamplingOutputs`).
 */
function volume_parcel_resampling(
    volume_in: InputPathType,
    cur_parcels: InputPathType,
    new_parcels: InputPathType,
    kernel: number,
    volume_out: string,
    opt_fix_zeros: boolean = false,
    opt_fwhm: boolean = false,
    opt_subvolume_subvol: string | null = null,
    runner: Runner | null = null,
): VolumeParcelResamplingOutputs {
    const params = volume_parcel_resampling_params(volume_in, cur_parcels, new_parcels, kernel, volume_out, opt_fix_zeros, opt_fwhm, opt_subvolume_subvol)
    return volume_parcel_resampling_execute(params, runner);
}


export {
      VOLUME_PARCEL_RESAMPLING_METADATA,
      VolumeParcelResamplingOutputs,
      VolumeParcelResamplingParameters,
      volume_parcel_resampling,
      volume_parcel_resampling_execute,
      volume_parcel_resampling_params,
};
