// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DTTO_NOISY_DWI_METADATA: Metadata = {
    id: "f0e92e7f32664311e32199aa4c239b82a4ba36c2.boutiques",
    name: "3dDTtoNoisyDWI",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDttoNoisyDwiParameters {
    "@type"?: "afni/3dDTtoNoisyDWI";
    "dt_file": InputPathType;
    "grad_file": InputPathType;
    "noise_dwi": number;
    "noise_b0"?: number | null | undefined;
    "prefix": string;
    "mask"?: InputPathType | null | undefined;
    "bval"?: number | null | undefined;
    "s0"?: number | null | undefined;
}
type V3dDttoNoisyDwiParametersTagged = Required<Pick<V3dDttoNoisyDwiParameters, '@type'>> & V3dDttoNoisyDwiParameters;


/**
 * Output object returned when calling `V3dDttoNoisyDwiParameters(...)`.
 *
 * @interface
 */
interface V3dDttoNoisyDwiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Synthetic set of DWI measures with noise. Contains N+1 bricks mimicking B0+DWI data.
     */
    output_dwi: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dt_file Diffusion tensor file with six bricks of DT components ordered in the AFNI manner: Dxx,Dxy,Dyy,Dxz,Dyz,Dzz.
 * @param grad_file Text file of gradients arranged in three columns. There should be no row of all zeros representing the b=0 line.
 * @param noise_dwi Fractional value of noise in DWIs. FF = sigma/S0 = 1/SNR0. For example, FF=0.05 corresponds to SNR0=20.
 * @param prefix Output file name prefix. Will have N+1 bricks when GRADFILE has N rows of gradients.
 * @param noise_b0 Optional fraction of Rician noise in the b=0 reference image. If not provided, FF2=FF.
 * @param mask Optional mask within which to calculate uncertainty. Data should be masked already otherwise.
 * @param bval Optional DW factor to use if DT values are scaled to something physical. Default is BB=1.
 * @param s0 Optional reference b=0 signal strength. Default value is SS=1000.
 *
 * @returns Parameter dictionary
 */
function v_3d_dtto_noisy_dwi_params(
    dt_file: InputPathType,
    grad_file: InputPathType,
    noise_dwi: number,
    prefix: string,
    noise_b0: number | null = null,
    mask: InputPathType | null = null,
    bval: number | null = null,
    s0: number | null = null,
): V3dDttoNoisyDwiParametersTagged {
    const params = {
        "@type": "afni/3dDTtoNoisyDWI" as const,
        "dt_file": dt_file,
        "grad_file": grad_file,
        "noise_dwi": noise_dwi,
        "prefix": prefix,
    };
    if (noise_b0 !== null) {
        params["noise_b0"] = noise_b0;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (bval !== null) {
        params["bval"] = bval;
    }
    if (s0 !== null) {
        params["s0"] = s0;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_dtto_noisy_dwi_cargs(
    params: V3dDttoNoisyDwiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dDTtoNoisyDWI");
    cargs.push(execution.inputFile((params["dt_file"] ?? null)));
    cargs.push(execution.inputFile((params["grad_file"] ?? null)));
    cargs.push(
        "-noise_DWI",
        String((params["noise_dwi"] ?? null))
    );
    if ((params["noise_b0"] ?? null) !== null) {
        cargs.push(
            "-noise_B0",
            String((params["noise_b0"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["bval"] ?? null) !== null) {
        cargs.push(
            "-bval",
            String((params["bval"] ?? null))
        );
    }
    if ((params["s0"] ?? null) !== null) {
        cargs.push(
            "-S0",
            String((params["s0"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_dtto_noisy_dwi_outputs(
    params: V3dDttoNoisyDwiParameters,
    execution: Execution,
): V3dDttoNoisyDwiOutputs {
    const ret: V3dDttoNoisyDwiOutputs = {
        root: execution.outputFile("."),
        output_dwi: execution.outputFile([(params["prefix"] ?? null), "+orig"].join('')),
    };
    return ret;
}


/**
 * 3dDTtoNoisyDWI
 *
 * Generate a synthetic set of DWI measures with a given SNR from an AFNI-style DT file and a set of gradients. This can be useful for simulations and testing.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDttoNoisyDwiOutputs`).
 */
function v_3d_dtto_noisy_dwi_execute(
    params: V3dDttoNoisyDwiParameters,
    runner: Runner | null = null,
): V3dDttoNoisyDwiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DTTO_NOISY_DWI_METADATA);
    params = execution.params(params)
    const cargs = v_3d_dtto_noisy_dwi_cargs(params, execution)
    const ret = v_3d_dtto_noisy_dwi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dDTtoNoisyDWI
 *
 * Generate a synthetic set of DWI measures with a given SNR from an AFNI-style DT file and a set of gradients. This can be useful for simulations and testing.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dt_file Diffusion tensor file with six bricks of DT components ordered in the AFNI manner: Dxx,Dxy,Dyy,Dxz,Dyz,Dzz.
 * @param grad_file Text file of gradients arranged in three columns. There should be no row of all zeros representing the b=0 line.
 * @param noise_dwi Fractional value of noise in DWIs. FF = sigma/S0 = 1/SNR0. For example, FF=0.05 corresponds to SNR0=20.
 * @param prefix Output file name prefix. Will have N+1 bricks when GRADFILE has N rows of gradients.
 * @param noise_b0 Optional fraction of Rician noise in the b=0 reference image. If not provided, FF2=FF.
 * @param mask Optional mask within which to calculate uncertainty. Data should be masked already otherwise.
 * @param bval Optional DW factor to use if DT values are scaled to something physical. Default is BB=1.
 * @param s0 Optional reference b=0 signal strength. Default value is SS=1000.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDttoNoisyDwiOutputs`).
 */
function v_3d_dtto_noisy_dwi(
    dt_file: InputPathType,
    grad_file: InputPathType,
    noise_dwi: number,
    prefix: string,
    noise_b0: number | null = null,
    mask: InputPathType | null = null,
    bval: number | null = null,
    s0: number | null = null,
    runner: Runner | null = null,
): V3dDttoNoisyDwiOutputs {
    const params = v_3d_dtto_noisy_dwi_params(dt_file, grad_file, noise_dwi, prefix, noise_b0, mask, bval, s0)
    return v_3d_dtto_noisy_dwi_execute(params, runner);
}


export {
      V3dDttoNoisyDwiOutputs,
      V_3D_DTTO_NOISY_DWI_METADATA,
      v_3d_dtto_noisy_dwi,
      v_3d_dtto_noisy_dwi_execute,
      v_3d_dtto_noisy_dwi_params,
};
