// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RUN_SAMSEG_METADATA: Metadata = {
    id: "2dc519f954ca7e55d495aafad88c9c72bb041830.boutiques",
    name: "run_samseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RunSamsegParameters {
    "@type": "freesurfer.run_samseg";
    "output_dir": string;
    "input_files": Array<InputPathType>;
    "input_mode"?: Array<string> | null | undefined;
    "threads"?: number | null | undefined;
    "reg_only": boolean;
    "reg_file"?: InputPathType | null | undefined;
    "init_reg_file"?: InputPathType | null | undefined;
    "atlas_dir"?: string | null | undefined;
    "gmm_file"?: InputPathType | null | undefined;
    "ignore_unknown": boolean;
    "options_file"?: InputPathType | null | undefined;
    "pallidum_separate": boolean;
    "mesh_stiffness"?: number | null | undefined;
    "smooth_wm_cortex_priors"?: number | null | undefined;
    "bias_field_smoothing_kernel"?: number | null | undefined;
    "lesion": boolean;
    "threshold"?: number | null | undefined;
    "samples"?: number | null | undefined;
    "burnin"?: number | null | undefined;
    "lesion_pseudo_samples"?: Array<number> | null | undefined;
    "lesion_rho"?: number | null | undefined;
    "lesion_mask_structure"?: string | null | undefined;
    "lesion_mask_pattern"?: Array<number> | null | undefined;
    "random_seed"?: number | null | undefined;
    "dissection_photo"?: string | null | undefined;
    "history": boolean;
    "save_posteriors"?: Array<string> | null | undefined;
    "save_probabilities": boolean;
    "showfigs": boolean;
    "save_mesh": boolean;
    "save_warp": boolean;
    "movie": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.run_samseg": run_samseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `run_samseg(...)`.
 *
 * @interface
 */
interface RunSamsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_dir Target directory for output.
 * @param input_files Input image(s) for segmentation.
 * @param input_mode Output basenames for the input image mode.
 * @param threads Number of threads to use.
 * @param reg_only Only perform initial affine registration.
 * @param reg_file Skip initial affine registration and read transform from file.
 * @param init_reg_file Initial affine registration.
 * @param atlas_dir Point to an alternative atlas directory.
 * @param gmm_file Point to an alternative GMM file.
 * @param ignore_unknown Ignore final priors corresponding to unknown class.
 * @param options_file Override advanced options via a JSON file.
 * @param pallidum_separate Move pallidum outside of global white matter class.
 * @param mesh_stiffness Override mesh stiffness.
 * @param smooth_wm_cortex_priors Sigma value to smooth the WM and cortex atlas priors.
 * @param bias_field_smoothing_kernel Distance in mm of sinc function center to first zero crossing.
 * @param lesion Enable lesion segmentation (requires tensorflow).
 * @param threshold Lesion threshold for final segmentation.
 * @param samples Number of samples for lesion segmentation.
 * @param burnin Number of burn-in samples for lesion segmentation.
 * @param lesion_pseudo_samples Lesion pseudo samples mean and variance.
 * @param lesion_rho Lesion ratio.
 * @param lesion_mask_structure Intensity mask brain structure.
 * @param lesion_mask_pattern Lesion mask pattern for each input volume.
 * @param random_seed Random seed.
 * @param dissection_photo Specify hemispheres: left, right, or both.
 * @param history Save history of segmentation.
 * @param save_posteriors Save posterior volumes.
 * @param save_probabilities Save modal class probabilities.
 * @param showfigs Show figures during run.
 * @param save_mesh Save final mesh in template space.
 * @param save_warp Save image->template warp field.
 * @param movie Show history as controlled time sequence.
 *
 * @returns Parameter dictionary
 */
function run_samseg_params(
    output_dir: string,
    input_files: Array<InputPathType>,
    input_mode: Array<string> | null = null,
    threads: number | null = null,
    reg_only: boolean = false,
    reg_file: InputPathType | null = null,
    init_reg_file: InputPathType | null = null,
    atlas_dir: string | null = null,
    gmm_file: InputPathType | null = null,
    ignore_unknown: boolean = false,
    options_file: InputPathType | null = null,
    pallidum_separate: boolean = false,
    mesh_stiffness: number | null = null,
    smooth_wm_cortex_priors: number | null = null,
    bias_field_smoothing_kernel: number | null = null,
    lesion: boolean = false,
    threshold: number | null = null,
    samples: number | null = null,
    burnin: number | null = null,
    lesion_pseudo_samples: Array<number> | null = null,
    lesion_rho: number | null = null,
    lesion_mask_structure: string | null = null,
    lesion_mask_pattern: Array<number> | null = null,
    random_seed: number | null = null,
    dissection_photo: string | null = null,
    history: boolean = false,
    save_posteriors: Array<string> | null = null,
    save_probabilities: boolean = false,
    showfigs: boolean = false,
    save_mesh: boolean = false,
    save_warp: boolean = false,
    movie: boolean = false,
): RunSamsegParameters {
    const params = {
        "@type": "freesurfer.run_samseg" as const,
        "output_dir": output_dir,
        "input_files": input_files,
        "reg_only": reg_only,
        "ignore_unknown": ignore_unknown,
        "pallidum_separate": pallidum_separate,
        "lesion": lesion,
        "history": history,
        "save_probabilities": save_probabilities,
        "showfigs": showfigs,
        "save_mesh": save_mesh,
        "save_warp": save_warp,
        "movie": movie,
    };
    if (input_mode !== null) {
        params["input_mode"] = input_mode;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (reg_file !== null) {
        params["reg_file"] = reg_file;
    }
    if (init_reg_file !== null) {
        params["init_reg_file"] = init_reg_file;
    }
    if (atlas_dir !== null) {
        params["atlas_dir"] = atlas_dir;
    }
    if (gmm_file !== null) {
        params["gmm_file"] = gmm_file;
    }
    if (options_file !== null) {
        params["options_file"] = options_file;
    }
    if (mesh_stiffness !== null) {
        params["mesh_stiffness"] = mesh_stiffness;
    }
    if (smooth_wm_cortex_priors !== null) {
        params["smooth_wm_cortex_priors"] = smooth_wm_cortex_priors;
    }
    if (bias_field_smoothing_kernel !== null) {
        params["bias_field_smoothing_kernel"] = bias_field_smoothing_kernel;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (samples !== null) {
        params["samples"] = samples;
    }
    if (burnin !== null) {
        params["burnin"] = burnin;
    }
    if (lesion_pseudo_samples !== null) {
        params["lesion_pseudo_samples"] = lesion_pseudo_samples;
    }
    if (lesion_rho !== null) {
        params["lesion_rho"] = lesion_rho;
    }
    if (lesion_mask_structure !== null) {
        params["lesion_mask_structure"] = lesion_mask_structure;
    }
    if (lesion_mask_pattern !== null) {
        params["lesion_mask_pattern"] = lesion_mask_pattern;
    }
    if (random_seed !== null) {
        params["random_seed"] = random_seed;
    }
    if (dissection_photo !== null) {
        params["dissection_photo"] = dissection_photo;
    }
    if (save_posteriors !== null) {
        params["save_posteriors"] = save_posteriors;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function run_samseg_cargs(
    params: RunSamsegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("run_samseg");
    cargs.push(
        "-o",
        (params["output_dir"] ?? null)
    );
    cargs.push(
        "-i",
        ...(params["input_files"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["input_mode"] ?? null) !== null) {
        cargs.push(
            "-m",
            ...(params["input_mode"] ?? null)
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["reg_only"] ?? null)) {
        cargs.push("--reg-only");
    }
    if ((params["reg_file"] ?? null) !== null) {
        cargs.push(
            "-r",
            execution.inputFile((params["reg_file"] ?? null))
        );
    }
    if ((params["init_reg_file"] ?? null) !== null) {
        cargs.push(
            "--init-reg",
            execution.inputFile((params["init_reg_file"] ?? null))
        );
    }
    if ((params["atlas_dir"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["atlas_dir"] ?? null)
        );
    }
    if ((params["gmm_file"] ?? null) !== null) {
        cargs.push(
            "--gmm",
            execution.inputFile((params["gmm_file"] ?? null))
        );
    }
    if ((params["ignore_unknown"] ?? null)) {
        cargs.push("--ignore-unknown");
    }
    if ((params["options_file"] ?? null) !== null) {
        cargs.push(
            "--options",
            execution.inputFile((params["options_file"] ?? null))
        );
    }
    if ((params["pallidum_separate"] ?? null)) {
        cargs.push("--pallidum-separate");
    }
    if ((params["mesh_stiffness"] ?? null) !== null) {
        cargs.push(
            "--mesh-stiffness",
            String((params["mesh_stiffness"] ?? null))
        );
    }
    if ((params["smooth_wm_cortex_priors"] ?? null) !== null) {
        cargs.push(
            "--smooth-wm-cortex-priors",
            String((params["smooth_wm_cortex_priors"] ?? null))
        );
    }
    if ((params["bias_field_smoothing_kernel"] ?? null) !== null) {
        cargs.push(
            "--bias-field-smoothing-kernel",
            String((params["bias_field_smoothing_kernel"] ?? null))
        );
    }
    if ((params["lesion"] ?? null)) {
        cargs.push("--lesion");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["samples"] ?? null) !== null) {
        cargs.push(
            "--samples",
            String((params["samples"] ?? null))
        );
    }
    if ((params["burnin"] ?? null) !== null) {
        cargs.push(
            "--burnin",
            String((params["burnin"] ?? null))
        );
    }
    if ((params["lesion_pseudo_samples"] ?? null) !== null) {
        cargs.push(
            "--lesion-pseudo-samples",
            ...(params["lesion_pseudo_samples"] ?? null).map(String)
        );
    }
    if ((params["lesion_rho"] ?? null) !== null) {
        cargs.push(
            "--lesion-rho",
            String((params["lesion_rho"] ?? null))
        );
    }
    if ((params["lesion_mask_structure"] ?? null) !== null) {
        cargs.push(
            "--lesion-mask-structure",
            (params["lesion_mask_structure"] ?? null)
        );
    }
    if ((params["lesion_mask_pattern"] ?? null) !== null) {
        cargs.push(
            "--lesion-mask-pattern",
            ...(params["lesion_mask_pattern"] ?? null).map(String)
        );
    }
    if ((params["random_seed"] ?? null) !== null) {
        cargs.push(
            "--random-seed",
            String((params["random_seed"] ?? null))
        );
    }
    if ((params["dissection_photo"] ?? null) !== null) {
        cargs.push(
            "--dissection-photo",
            (params["dissection_photo"] ?? null)
        );
    }
    if ((params["history"] ?? null)) {
        cargs.push("--history");
    }
    if ((params["save_posteriors"] ?? null) !== null) {
        cargs.push(
            "--save-posteriors",
            ...(params["save_posteriors"] ?? null)
        );
    }
    if ((params["save_probabilities"] ?? null)) {
        cargs.push("--save-probabilities");
    }
    if ((params["showfigs"] ?? null)) {
        cargs.push("--showfigs");
    }
    if ((params["save_mesh"] ?? null)) {
        cargs.push("--save-mesh");
    }
    if ((params["save_warp"] ?? null)) {
        cargs.push("--save-warp");
    }
    if ((params["movie"] ?? null)) {
        cargs.push("--movie");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function run_samseg_outputs(
    params: RunSamsegParameters,
    execution: Execution,
): RunSamsegOutputs {
    const ret: RunSamsegOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * run_samseg
 *
 * SAMSEG (Sequence Adaptive Multimodal SEGmentation) is a tool for automated segmentation of brain MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RunSamsegOutputs`).
 */
function run_samseg_execute(
    params: RunSamsegParameters,
    runner: Runner | null = null,
): RunSamsegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RUN_SAMSEG_METADATA);
    params = execution.params(params)
    const cargs = run_samseg_cargs(params, execution)
    const ret = run_samseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * run_samseg
 *
 * SAMSEG (Sequence Adaptive Multimodal SEGmentation) is a tool for automated segmentation of brain MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param output_dir Target directory for output.
 * @param input_files Input image(s) for segmentation.
 * @param input_mode Output basenames for the input image mode.
 * @param threads Number of threads to use.
 * @param reg_only Only perform initial affine registration.
 * @param reg_file Skip initial affine registration and read transform from file.
 * @param init_reg_file Initial affine registration.
 * @param atlas_dir Point to an alternative atlas directory.
 * @param gmm_file Point to an alternative GMM file.
 * @param ignore_unknown Ignore final priors corresponding to unknown class.
 * @param options_file Override advanced options via a JSON file.
 * @param pallidum_separate Move pallidum outside of global white matter class.
 * @param mesh_stiffness Override mesh stiffness.
 * @param smooth_wm_cortex_priors Sigma value to smooth the WM and cortex atlas priors.
 * @param bias_field_smoothing_kernel Distance in mm of sinc function center to first zero crossing.
 * @param lesion Enable lesion segmentation (requires tensorflow).
 * @param threshold Lesion threshold for final segmentation.
 * @param samples Number of samples for lesion segmentation.
 * @param burnin Number of burn-in samples for lesion segmentation.
 * @param lesion_pseudo_samples Lesion pseudo samples mean and variance.
 * @param lesion_rho Lesion ratio.
 * @param lesion_mask_structure Intensity mask brain structure.
 * @param lesion_mask_pattern Lesion mask pattern for each input volume.
 * @param random_seed Random seed.
 * @param dissection_photo Specify hemispheres: left, right, or both.
 * @param history Save history of segmentation.
 * @param save_posteriors Save posterior volumes.
 * @param save_probabilities Save modal class probabilities.
 * @param showfigs Show figures during run.
 * @param save_mesh Save final mesh in template space.
 * @param save_warp Save image->template warp field.
 * @param movie Show history as controlled time sequence.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RunSamsegOutputs`).
 */
function run_samseg(
    output_dir: string,
    input_files: Array<InputPathType>,
    input_mode: Array<string> | null = null,
    threads: number | null = null,
    reg_only: boolean = false,
    reg_file: InputPathType | null = null,
    init_reg_file: InputPathType | null = null,
    atlas_dir: string | null = null,
    gmm_file: InputPathType | null = null,
    ignore_unknown: boolean = false,
    options_file: InputPathType | null = null,
    pallidum_separate: boolean = false,
    mesh_stiffness: number | null = null,
    smooth_wm_cortex_priors: number | null = null,
    bias_field_smoothing_kernel: number | null = null,
    lesion: boolean = false,
    threshold: number | null = null,
    samples: number | null = null,
    burnin: number | null = null,
    lesion_pseudo_samples: Array<number> | null = null,
    lesion_rho: number | null = null,
    lesion_mask_structure: string | null = null,
    lesion_mask_pattern: Array<number> | null = null,
    random_seed: number | null = null,
    dissection_photo: string | null = null,
    history: boolean = false,
    save_posteriors: Array<string> | null = null,
    save_probabilities: boolean = false,
    showfigs: boolean = false,
    save_mesh: boolean = false,
    save_warp: boolean = false,
    movie: boolean = false,
    runner: Runner | null = null,
): RunSamsegOutputs {
    const params = run_samseg_params(output_dir, input_files, input_mode, threads, reg_only, reg_file, init_reg_file, atlas_dir, gmm_file, ignore_unknown, options_file, pallidum_separate, mesh_stiffness, smooth_wm_cortex_priors, bias_field_smoothing_kernel, lesion, threshold, samples, burnin, lesion_pseudo_samples, lesion_rho, lesion_mask_structure, lesion_mask_pattern, random_seed, dissection_photo, history, save_posteriors, save_probabilities, showfigs, save_mesh, save_warp, movie)
    return run_samseg_execute(params, runner);
}


export {
      RUN_SAMSEG_METADATA,
      RunSamsegOutputs,
      RunSamsegParameters,
      run_samseg,
      run_samseg_execute,
      run_samseg_params,
};
