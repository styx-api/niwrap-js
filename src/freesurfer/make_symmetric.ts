// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_SYMMETRIC_METADATA: Metadata = {
    id: "f7911ae43f7d52c0040da49b8674456c4206f174.boutiques",
    name: "make_symmetric",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MakeSymmetricParameters {
    "@type"?: "freesurfer/make_symmetric";
    "hemi": string;
    "input_file": InputPathType;
    "output_file": string;
    "transform_map": string;
}
type MakeSymmetricParametersTagged = Required<Pick<MakeSymmetricParameters, '@type'>> & MakeSymmetricParameters;


/**
 * Output object returned when calling `MakeSymmetricParameters(...)`.
 *
 * @interface
 */
interface MakeSymmetricOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file after processing.
     */
    processed_output: OutputPathType;
    /**
     * Transformation map file mapping the input to the upright space.
     */
    map_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param hemi The hemisphere to mirror; accepted values are 'lh' for left hemisphere or 'rh' for right hemisphere.
 * @param input_file Input image in .mgz format.
 * @param output_file Output image in .mgz format resulting from the symmetric processing.
 * @param transform_map Transformation map in .lta format mapping the input to the upright space.
 *
 * @returns Parameter dictionary
 */
function make_symmetric_params(
    hemi: string,
    input_file: InputPathType,
    output_file: string,
    transform_map: string,
): MakeSymmetricParametersTagged {
    const params = {
        "@type": "freesurfer/make_symmetric" as const,
        "hemi": hemi,
        "input_file": input_file,
        "output_file": output_file,
        "transform_map": transform_map,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_symmetric_cargs(
    params: MakeSymmetricParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make_symmetric");
    cargs.push((params["hemi"] ?? null));
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    cargs.push((params["transform_map"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_symmetric_outputs(
    params: MakeSymmetricParameters,
    execution: Execution,
): MakeSymmetricOutputs {
    const ret: MakeSymmetricOutputs = {
        root: execution.outputFile("."),
        processed_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
        map_output: execution.outputFile([(params["transform_map"] ?? null)].join('')),
    };
    return ret;
}


/**
 * make_symmetric
 *
 * Registers an input image to its left/right reversed version using mri_robust_register in a half-way space and mirrors the selected hemisphere.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeSymmetricOutputs`).
 */
function make_symmetric_execute(
    params: MakeSymmetricParameters,
    runner: Runner | null = null,
): MakeSymmetricOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_SYMMETRIC_METADATA);
    params = execution.params(params)
    const cargs = make_symmetric_cargs(params, execution)
    const ret = make_symmetric_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * make_symmetric
 *
 * Registers an input image to its left/right reversed version using mri_robust_register in a half-way space and mirrors the selected hemisphere.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param hemi The hemisphere to mirror; accepted values are 'lh' for left hemisphere or 'rh' for right hemisphere.
 * @param input_file Input image in .mgz format.
 * @param output_file Output image in .mgz format resulting from the symmetric processing.
 * @param transform_map Transformation map in .lta format mapping the input to the upright space.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeSymmetricOutputs`).
 */
function make_symmetric(
    hemi: string,
    input_file: InputPathType,
    output_file: string,
    transform_map: string,
    runner: Runner | null = null,
): MakeSymmetricOutputs {
    const params = make_symmetric_params(hemi, input_file, output_file, transform_map)
    return make_symmetric_execute(params, runner);
}


export {
      MAKE_SYMMETRIC_METADATA,
      MakeSymmetricOutputs,
      make_symmetric,
      make_symmetric_execute,
      make_symmetric_params,
};
