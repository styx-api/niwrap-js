// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DIRSTAT_METADATA: Metadata = {
    id: "369098dbdbd016bf94682e0106a2f2e1711f2a5b.boutiques",
    name: "dirstat",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface DirstatFslgradParameters {
    "@type": "mrtrix.dirstat.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface DirstatConfigParameters {
    "@type": "mrtrix.dirstat.config";
    "key": string;
    "value": string;
}


interface DirstatParameters {
    "@type": "mrtrix.dirstat";
    "output"?: string | null | undefined;
    "shells"?: Array<number> | null | undefined;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: DirstatFslgradParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<DirstatConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "dirs": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.dirstat": dirstat_cargs,
        "mrtrix.dirstat.fslgrad": dirstat_fslgrad_cargs,
        "mrtrix.dirstat.config": dirstat_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function dirstat_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): DirstatFslgradParameters {
    const params = {
        "@type": "mrtrix.dirstat.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dirstat_fslgrad_cargs(
    params: DirstatFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function dirstat_config_params(
    key: string,
    value: string,
): DirstatConfigParameters {
    const params = {
        "@type": "mrtrix.dirstat.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dirstat_config_cargs(
    params: DirstatConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `dirstat(...)`.
 *
 * @interface
 */
interface DirstatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dirs the text file or image containing the directions.
 * @param output output selected metrics as a space-delimited list, suitable for use in scripts. This will produce one line of values per selected shell. Valid metrics are as specified in the description above.
 * @param shells specify one or more b-values to use during processing, as a comma-separated list of the desired approximate b-values (b-values are clustered to allow for small deviations). Note that some commands are incompatible with multiple b-values, and will report an error if more than one b-value is provided. 
WARNING: note that, even though the b=0 volumes are never referred to as shells in the literature, they still have to be explicitly included in the list of b-values as provided to the -shell option! Several algorithms which include the b=0 volumes in their computations may otherwise return an undesired result.
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function dirstat_params(
    dirs: InputPathType,
    output: string | null = null,
    shells: Array<number> | null = null,
    grad: InputPathType | null = null,
    fslgrad: DirstatFslgradParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DirstatConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): DirstatParameters {
    const params = {
        "@type": "mrtrix.dirstat" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "dirs": dirs,
    };
    if (output !== null) {
        params["output"] = output;
    }
    if (shells !== null) {
        params["shells"] = shells;
    }
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dirstat_cargs(
    params: DirstatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dirstat");
    if ((params["output"] ?? null) !== null) {
        cargs.push(
            "-output",
            (params["output"] ?? null)
        );
    }
    if ((params["shells"] ?? null) !== null) {
        cargs.push(
            "-shells",
            (params["shells"] ?? null).map(String).join(",")
        );
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["dirs"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dirstat_outputs(
    params: DirstatParameters,
    execution: Execution,
): DirstatOutputs {
    const ret: DirstatOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * dirstat
 *
 * Report statistics on a direction set.
 *
 * This command will accept as inputs:
 *
 * - directions file in spherical coordinates (ASCII text, [ az el ] space-separated values, one per line);
 *
 * - directions file in Cartesian coordinates (ASCII text, [ x y z ] space-separated values, one per line);
 *
 * - DW gradient files (MRtrix format: ASCII text, [ x y z b ] space-separated values, one per line);
 *
 * - image files, using the DW gradient scheme found in the header (or provided using the appropriate command line options below).
 *
 * By default, this produces all relevant metrics for the direction set provided. If the direction set contains multiple shells, metrics are provided for each shell separately.
 *
 * Metrics are produced assuming a unipolar or bipolar electrostatic repulsion model, producing the potential energy (total, mean, min & max), and the nearest-neighbour angles (mean, min & max). The condition number is also produced for the spherical harmonic fits up to the highest harmonic order supported by the number of volumes. Finally, the norm of the mean direction vector is provided as a measure of the overall symmetry of the direction set (important with respect to eddy-current resilience).
 *
 * Specific metrics can also be queried independently via the "-output" option, using these shorthands: 
 * U/B for unipolar/bipolar model, 
 * E/N for energy and nearest-neighbour respectively, 
 * t/-/+ for total/min/max respectively (mean implied otherwise); 
 * SHn for condition number of SH fit at order n (with n an even integer); 
 * ASYM for asymmetry index (norm of mean direction vector); 
 * N for the number of directions.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DirstatOutputs`).
 */
function dirstat_execute(
    params: DirstatParameters,
    runner: Runner | null = null,
): DirstatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DIRSTAT_METADATA);
    params = execution.params(params)
    const cargs = dirstat_cargs(params, execution)
    const ret = dirstat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dirstat
 *
 * Report statistics on a direction set.
 *
 * This command will accept as inputs:
 *
 * - directions file in spherical coordinates (ASCII text, [ az el ] space-separated values, one per line);
 *
 * - directions file in Cartesian coordinates (ASCII text, [ x y z ] space-separated values, one per line);
 *
 * - DW gradient files (MRtrix format: ASCII text, [ x y z b ] space-separated values, one per line);
 *
 * - image files, using the DW gradient scheme found in the header (or provided using the appropriate command line options below).
 *
 * By default, this produces all relevant metrics for the direction set provided. If the direction set contains multiple shells, metrics are provided for each shell separately.
 *
 * Metrics are produced assuming a unipolar or bipolar electrostatic repulsion model, producing the potential energy (total, mean, min & max), and the nearest-neighbour angles (mean, min & max). The condition number is also produced for the spherical harmonic fits up to the highest harmonic order supported by the number of volumes. Finally, the norm of the mean direction vector is provided as a measure of the overall symmetry of the direction set (important with respect to eddy-current resilience).
 *
 * Specific metrics can also be queried independently via the "-output" option, using these shorthands: 
 * U/B for unipolar/bipolar model, 
 * E/N for energy and nearest-neighbour respectively, 
 * t/-/+ for total/min/max respectively (mean implied otherwise); 
 * SHn for condition number of SH fit at order n (with n an even integer); 
 * ASYM for asymmetry index (norm of mean direction vector); 
 * N for the number of directions.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param dirs the text file or image containing the directions.
 * @param output output selected metrics as a space-delimited list, suitable for use in scripts. This will produce one line of values per selected shell. Valid metrics are as specified in the description above.
 * @param shells specify one or more b-values to use during processing, as a comma-separated list of the desired approximate b-values (b-values are clustered to allow for small deviations). Note that some commands are incompatible with multiple b-values, and will report an error if more than one b-value is provided. 
WARNING: note that, even though the b=0 volumes are never referred to as shells in the literature, they still have to be explicitly included in the list of b-values as provided to the -shell option! Several algorithms which include the b=0 volumes in their computations may otherwise return an undesired result.
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DirstatOutputs`).
 */
function dirstat(
    dirs: InputPathType,
    output: string | null = null,
    shells: Array<number> | null = null,
    grad: InputPathType | null = null,
    fslgrad: DirstatFslgradParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DirstatConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DirstatOutputs {
    const params = dirstat_params(dirs, output, shells, grad, fslgrad, info, quiet, debug, force, nthreads, config, help, version)
    return dirstat_execute(params, runner);
}


export {
      DIRSTAT_METADATA,
      DirstatConfigParameters,
      DirstatFslgradParameters,
      DirstatOutputs,
      DirstatParameters,
      dirstat,
      dirstat_config_params,
      dirstat_execute,
      dirstat_fslgrad_params,
      dirstat_params,
};
