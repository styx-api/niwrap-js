// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_EXTREMA_METADATA: Metadata = {
    id: "344573d42a8895adab1d4ca83bcab182139d58f8.boutiques",
    name: "volume-extrema",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeExtremaPresmoothParameters {
    "__STYXTYPE__": "presmooth";
    "kernel": number;
    "opt_fwhm": boolean;
}


interface VolumeExtremaThresholdParameters {
    "__STYXTYPE__": "threshold";
    "low": number;
    "high": number;
}


interface VolumeExtremaParameters {
    "__STYXTYPE__": "volume-extrema";
    "volume_in": InputPathType;
    "distance": number;
    "volume_out": string;
    "presmooth"?: VolumeExtremaPresmoothParameters | null | undefined;
    "opt_roi_roi_volume"?: InputPathType | null | undefined;
    "threshold"?: VolumeExtremaThresholdParameters | null | undefined;
    "opt_sum_subvols": boolean;
    "opt_consolidate_mode": boolean;
    "opt_only_maxima": boolean;
    "opt_only_minima": boolean;
    "opt_subvolume_subvolume"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-extrema": volume_extrema_cargs,
        "presmooth": volume_extrema_presmooth_cargs,
        "threshold": volume_extrema_threshold_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-extrema": volume_extrema_outputs,
    };
    return outputsFuncs[t];
}


function volume_extrema_presmooth_params(
    kernel: number,
    opt_fwhm: boolean = false,
): VolumeExtremaPresmoothParameters {
    /**
     * Build parameters.
    
     * @param kernel the size of the gaussian smoothing kernel in mm, as sigma by default
     * @param opt_fwhm kernel size is FWHM, not sigma
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "presmooth" as const,
        "kernel": kernel,
        "opt_fwhm": opt_fwhm,
    };
    return params;
}


function volume_extrema_presmooth_cargs(
    params: VolumeExtremaPresmoothParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-presmooth");
    cargs.push(String((params["kernel"] ?? null)));
    if ((params["opt_fwhm"] ?? null)) {
        cargs.push("-fwhm");
    }
    return cargs;
}


function volume_extrema_threshold_params(
    low: number,
    high: number,
): VolumeExtremaThresholdParameters {
    /**
     * Build parameters.
    
     * @param low the largest value to consider for being a minimum
     * @param high the smallest value to consider for being a maximum
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "threshold" as const,
        "low": low,
        "high": high,
    };
    return params;
}


function volume_extrema_threshold_cargs(
    params: VolumeExtremaThresholdParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-threshold");
    cargs.push(String((params["low"] ?? null)));
    cargs.push(String((params["high"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `volume_extrema(...)`.
 *
 * @interface
 */
interface VolumeExtremaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output extrema volume
     */
    volume_out: OutputPathType;
}


function volume_extrema_params(
    volume_in: InputPathType,
    distance: number,
    volume_out: string,
    presmooth: VolumeExtremaPresmoothParameters | null = null,
    opt_roi_roi_volume: InputPathType | null = null,
    threshold: VolumeExtremaThresholdParameters | null = null,
    opt_sum_subvols: boolean = false,
    opt_consolidate_mode: boolean = false,
    opt_only_maxima: boolean = false,
    opt_only_minima: boolean = false,
    opt_subvolume_subvolume: string | null = null,
): VolumeExtremaParameters {
    /**
     * Build parameters.
    
     * @param volume_in volume file to find the extrema of
     * @param distance the minimum distance between identified extrema of the same type
     * @param volume_out the output extrema volume
     * @param presmooth smooth the volume before finding extrema
     * @param opt_roi_roi_volume ignore values outside the selected area: the area to find extrema in
     * @param threshold ignore small extrema
     * @param opt_sum_subvols output the sum of the extrema subvolumes instead of each subvolume separately
     * @param opt_consolidate_mode use consolidation of local minima instead of a large neighborhood
     * @param opt_only_maxima only find the maxima
     * @param opt_only_minima only find the minima
     * @param opt_subvolume_subvolume select a single subvolume to find extrema in: the subvolume number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-extrema" as const,
        "volume_in": volume_in,
        "distance": distance,
        "volume_out": volume_out,
        "opt_sum_subvols": opt_sum_subvols,
        "opt_consolidate_mode": opt_consolidate_mode,
        "opt_only_maxima": opt_only_maxima,
        "opt_only_minima": opt_only_minima,
    };
    if (presmooth !== null) {
        params["presmooth"] = presmooth;
    }
    if (opt_roi_roi_volume !== null) {
        params["opt_roi_roi_volume"] = opt_roi_roi_volume;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (opt_subvolume_subvolume !== null) {
        params["opt_subvolume_subvolume"] = opt_subvolume_subvolume;
    }
    return params;
}


function volume_extrema_cargs(
    params: VolumeExtremaParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-extrema");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push(String((params["distance"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["presmooth"] ?? null) !== null) {
        cargs.push(...dynCargs((params["presmooth"] ?? null).__STYXTYPE__)((params["presmooth"] ?? null), execution));
    }
    if ((params["opt_roi_roi_volume"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_volume"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(...dynCargs((params["threshold"] ?? null).__STYXTYPE__)((params["threshold"] ?? null), execution));
    }
    if ((params["opt_sum_subvols"] ?? null)) {
        cargs.push("-sum-subvols");
    }
    if ((params["opt_consolidate_mode"] ?? null)) {
        cargs.push("-consolidate-mode");
    }
    if ((params["opt_only_maxima"] ?? null)) {
        cargs.push("-only-maxima");
    }
    if ((params["opt_only_minima"] ?? null)) {
        cargs.push("-only-minima");
    }
    if ((params["opt_subvolume_subvolume"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvolume"] ?? null)
        );
    }
    return cargs;
}


function volume_extrema_outputs(
    params: VolumeExtremaParameters,
    execution: Execution,
): VolumeExtremaOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeExtremaOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_extrema_execute(
    params: VolumeExtremaParameters,
    execution: Execution,
): VolumeExtremaOutputs {
    /**
     * Find extrema in a volume file.
     * 
     * Finds extrema in a volume file, such that no two extrema of the same type are within <distance> of each other.  The extrema are labeled as -1 for minima, 1 for maxima, 0 otherwise.  If -only-maxima or -only-minima is specified, then it will ignore extrema not of the specified type.  These options are mutually exclusive.
     * 
     * If -sum-subvols is specified, these extrema subvolumes are summed, and the output has a single subvolume with this result.
     * 
     * By default, a datapoint is an extrema only if it is more extreme than every other datapoint that is within <distance> from it.  If -consolidate-mode is used, it instead starts by finding all datapoints that are more extreme than their immediate neighbors, then while there are any extrema within <distance> of each other, take the two extrema closest to each other and merge them into one by a weighted average based on how many original extrema have been merged into each.
     * 
     * By default, all input subvolumes are used with no smoothing, use -subvolume to specify a single subvolume to use, and -presmooth to smooth the input before finding the extrema.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeExtremaOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_extrema_cargs(params, execution)
    const ret = volume_extrema_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_extrema(
    volume_in: InputPathType,
    distance: number,
    volume_out: string,
    presmooth: VolumeExtremaPresmoothParameters | null = null,
    opt_roi_roi_volume: InputPathType | null = null,
    threshold: VolumeExtremaThresholdParameters | null = null,
    opt_sum_subvols: boolean = false,
    opt_consolidate_mode: boolean = false,
    opt_only_maxima: boolean = false,
    opt_only_minima: boolean = false,
    opt_subvolume_subvolume: string | null = null,
    runner: Runner | null = null,
): VolumeExtremaOutputs {
    /**
     * Find extrema in a volume file.
     * 
     * Finds extrema in a volume file, such that no two extrema of the same type are within <distance> of each other.  The extrema are labeled as -1 for minima, 1 for maxima, 0 otherwise.  If -only-maxima or -only-minima is specified, then it will ignore extrema not of the specified type.  These options are mutually exclusive.
     * 
     * If -sum-subvols is specified, these extrema subvolumes are summed, and the output has a single subvolume with this result.
     * 
     * By default, a datapoint is an extrema only if it is more extreme than every other datapoint that is within <distance> from it.  If -consolidate-mode is used, it instead starts by finding all datapoints that are more extreme than their immediate neighbors, then while there are any extrema within <distance> of each other, take the two extrema closest to each other and merge them into one by a weighted average based on how many original extrema have been merged into each.
     * 
     * By default, all input subvolumes are used with no smoothing, use -subvolume to specify a single subvolume to use, and -presmooth to smooth the input before finding the extrema.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume_in volume file to find the extrema of
     * @param distance the minimum distance between identified extrema of the same type
     * @param volume_out the output extrema volume
     * @param presmooth smooth the volume before finding extrema
     * @param opt_roi_roi_volume ignore values outside the selected area: the area to find extrema in
     * @param threshold ignore small extrema
     * @param opt_sum_subvols output the sum of the extrema subvolumes instead of each subvolume separately
     * @param opt_consolidate_mode use consolidation of local minima instead of a large neighborhood
     * @param opt_only_maxima only find the maxima
     * @param opt_only_minima only find the minima
     * @param opt_subvolume_subvolume select a single subvolume to find extrema in: the subvolume number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeExtremaOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_EXTREMA_METADATA);
    const params = volume_extrema_params(volume_in, distance, volume_out, presmooth, opt_roi_roi_volume, threshold, opt_sum_subvols, opt_consolidate_mode, opt_only_maxima, opt_only_minima, opt_subvolume_subvolume)
    return volume_extrema_execute(params, execution);
}


export {
      VOLUME_EXTREMA_METADATA,
      VolumeExtremaOutputs,
      VolumeExtremaParameters,
      VolumeExtremaPresmoothParameters,
      VolumeExtremaThresholdParameters,
      volume_extrema,
      volume_extrema_params,
      volume_extrema_presmooth_params,
      volume_extrema_threshold_params,
};
