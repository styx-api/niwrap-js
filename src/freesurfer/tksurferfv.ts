// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TKSURFERFV_METADATA: Metadata = {
    id: "cd3fd7dabbb53c8172ce7700f1ac133b0f1b3603.boutiques",
    name: "tksurferfv",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TksurferfvParameters {
    "__STYXTYPE__": "tksurferfv";
    "subject": string;
    "hemi": string;
    "surface": string;
    "tksurfer": boolean;
    "all_surfaces": boolean;
    "vgl": boolean;
    "no_vgl": boolean;
    "no_outline": boolean;
    "neuro_orientation": boolean;
    "rotate_around_cursor": boolean;
    "heat_scale"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "tksurferfv": tksurferfv_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tksurferfv(...)`.
 *
 * @interface
 */
interface TksurferfvOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function tksurferfv_params(
    subject: string,
    hemi: string,
    surface: string,
    tksurfer: boolean = false,
    all_surfaces: boolean = false,
    vgl: boolean = false,
    no_vgl: boolean = false,
    no_outline: boolean = false,
    neuro_orientation: boolean = false,
    rotate_around_cursor: boolean = false,
    heat_scale: string | null = "min_to_max",
): TksurferfvParameters {
    /**
     * Build parameters.
    
     * @param subject Subject identifier.
     * @param hemi Hemisphere (e.g., lh or rh).
     * @param surface Surface type.
     * @param tksurfer Use tksurfer instead of freeview.
     * @param all_surfaces Load white, pial, and inflated surfaces.
     * @param vgl Run freeview with /usr/pubsw/bin/vglrun.
     * @param no_vgl Do not run freeview with /usr/pubsw/bin/vglrun.
     * @param no_outline Do not show annotations as outlines.
     * @param neuro_orientation Use neurological orientation instead of radiological.
     * @param rotate_around_cursor Rotate around cursor in 3D view.
     * @param heat_scale Overlay heat scale (options: linear, linearopaque, piecewise, min_to_max).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "tksurferfv" as const,
        "subject": subject,
        "hemi": hemi,
        "surface": surface,
        "tksurfer": tksurfer,
        "all_surfaces": all_surfaces,
        "vgl": vgl,
        "no_vgl": no_vgl,
        "no_outline": no_outline,
        "neuro_orientation": neuro_orientation,
        "rotate_around_cursor": rotate_around_cursor,
    };
    if (heat_scale !== null) {
        params["heat_scale"] = heat_scale;
    }
    return params;
}


function tksurferfv_cargs(
    params: TksurferfvParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("tksurferfv");
    cargs.push((params["subject"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["surface"] ?? null));
    if ((params["tksurfer"] ?? null)) {
        cargs.push("-tksurfer");
    }
    if ((params["all_surfaces"] ?? null)) {
        cargs.push("-all");
    }
    if ((params["vgl"] ?? null)) {
        cargs.push("-vgl");
    }
    if ((params["no_vgl"] ?? null)) {
        cargs.push("-no-vgl");
    }
    if ((params["no_outline"] ?? null)) {
        cargs.push("-no-outline");
    }
    if ((params["neuro_orientation"] ?? null)) {
        cargs.push("-neuro");
    }
    if ((params["rotate_around_cursor"] ?? null)) {
        cargs.push("-rca");
    }
    if ((params["heat_scale"] ?? null) !== null) {
        cargs.push((params["heat_scale"] ?? null));
    }
    return cargs;
}


function tksurferfv_outputs(
    params: TksurferfvParameters,
    execution: Execution,
): TksurferfvOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TksurferfvOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function tksurferfv_execute(
    params: TksurferfvParameters,
    execution: Execution,
): TksurferfvOutputs {
    /**
     * A script that runs freeview with arguments similar to tksurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TksurferfvOutputs`).
     */
    params = execution.params(params)
    const cargs = tksurferfv_cargs(params, execution)
    const ret = tksurferfv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function tksurferfv(
    subject: string,
    hemi: string,
    surface: string,
    tksurfer: boolean = false,
    all_surfaces: boolean = false,
    vgl: boolean = false,
    no_vgl: boolean = false,
    no_outline: boolean = false,
    neuro_orientation: boolean = false,
    rotate_around_cursor: boolean = false,
    heat_scale: string | null = "min_to_max",
    runner: Runner | null = null,
): TksurferfvOutputs {
    /**
     * A script that runs freeview with arguments similar to tksurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject identifier.
     * @param hemi Hemisphere (e.g., lh or rh).
     * @param surface Surface type.
     * @param tksurfer Use tksurfer instead of freeview.
     * @param all_surfaces Load white, pial, and inflated surfaces.
     * @param vgl Run freeview with /usr/pubsw/bin/vglrun.
     * @param no_vgl Do not run freeview with /usr/pubsw/bin/vglrun.
     * @param no_outline Do not show annotations as outlines.
     * @param neuro_orientation Use neurological orientation instead of radiological.
     * @param rotate_around_cursor Rotate around cursor in 3D view.
     * @param heat_scale Overlay heat scale (options: linear, linearopaque, piecewise, min_to_max).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TksurferfvOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TKSURFERFV_METADATA);
    const params = tksurferfv_params(subject, hemi, surface, tksurfer, all_surfaces, vgl, no_vgl, no_outline, neuro_orientation, rotate_around_cursor, heat_scale)
    return tksurferfv_execute(params, execution);
}


export {
      TKSURFERFV_METADATA,
      TksurferfvOutputs,
      TksurferfvParameters,
      tksurferfv,
      tksurferfv_params,
};
