// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_NEIGHBORING_REGIONS_METADATA: Metadata = {
    id: "fc758b4929da4a9363efaa06670539dfd01aae96.boutiques",
    name: "dmri_neighboringRegions",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriNeighboringRegionsParameters {
    "@type": "freesurfer.dmri_neighboringRegions";
    "input_file": InputPathType;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_neighboringRegions": dmri_neighboring_regions_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.dmri_neighboringRegions": dmri_neighboring_regions_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_neighboring_regions(...)`.
 *
 * @interface
 */
interface DmriNeighboringRegionsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting output file from dmri_neighboringRegions
     */
    result_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input image file (e.g. img.nii.gz)
 * @param output_file Output result file (e.g. result.nii.gz)
 *
 * @returns Parameter dictionary
 */
function dmri_neighboring_regions_params(
    input_file: InputPathType,
    output_file: string,
): DmriNeighboringRegionsParameters {
    const params = {
        "@type": "freesurfer.dmri_neighboringRegions" as const,
        "input_file": input_file,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_neighboring_regions_cargs(
    params: DmriNeighboringRegionsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_neighboringRegions");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_neighboring_regions_outputs(
    params: DmriNeighboringRegionsParameters,
    execution: Execution,
): DmriNeighboringRegionsOutputs {
    const ret: DmriNeighboringRegionsOutputs = {
        root: execution.outputFile("."),
        result_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * dmri_neighboringRegions
 *
 * A tool for diffusion MRI analysis involving neighboring regions.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriNeighboringRegionsOutputs`).
 */
function dmri_neighboring_regions_execute(
    params: DmriNeighboringRegionsParameters,
    runner: Runner | null = null,
): DmriNeighboringRegionsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_NEIGHBORING_REGIONS_METADATA);
    params = execution.params(params)
    const cargs = dmri_neighboring_regions_cargs(params, execution)
    const ret = dmri_neighboring_regions_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_neighboringRegions
 *
 * A tool for diffusion MRI analysis involving neighboring regions.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input image file (e.g. img.nii.gz)
 * @param output_file Output result file (e.g. result.nii.gz)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriNeighboringRegionsOutputs`).
 */
function dmri_neighboring_regions(
    input_file: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): DmriNeighboringRegionsOutputs {
    const params = dmri_neighboring_regions_params(input_file, output_file)
    return dmri_neighboring_regions_execute(params, runner);
}


export {
      DMRI_NEIGHBORING_REGIONS_METADATA,
      DmriNeighboringRegionsOutputs,
      DmriNeighboringRegionsParameters,
      dmri_neighboring_regions,
      dmri_neighboring_regions_execute,
      dmri_neighboring_regions_params,
};
