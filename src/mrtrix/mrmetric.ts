// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRMETRIC_METADATA: Metadata = {
    id: "68993bab707571cc9c043c8d06d2a16330445585.boutiques",
    name: "mrmetric",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrmetricConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface MrmetricParameters {
    "__STYXTYPE__": "mrmetric";
    "space"?: string | null | undefined;
    "interp"?: string | null | undefined;
    "metric"?: string | null | undefined;
    "mask1"?: InputPathType | null | undefined;
    "mask2"?: InputPathType | null | undefined;
    "nonormalisation": boolean;
    "overlap": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrmetricConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "image1": InputPathType;
    "image2": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mrmetric": mrmetric_cargs,
        "config": mrmetric_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


function mrmetric_config_params(
    key: string,
    value: string,
): MrmetricConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function mrmetric_config_cargs(
    params: MrmetricConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `mrmetric(...)`.
 *
 * @interface
 */
interface MrmetricOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mrmetric_params(
    image1: InputPathType,
    image2: InputPathType,
    space: string | null = null,
    interp: string | null = null,
    metric: string | null = null,
    mask1: InputPathType | null = null,
    mask2: InputPathType | null = null,
    nonormalisation: boolean = false,
    overlap: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrmetricConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrmetricParameters {
    /**
     * Build parameters.
    
     * @param image1 the first input image.
     * @param image2 the second input image.
     * @param space voxel (default): per voxel image1: scanner space of image 1 image2: scanner space of image 2 average: scanner space of the average affine transformation of image 1 and 2 
     * @param interp set the interpolation method to use when reslicing (choices: nearest, linear, cubic, sinc. Default: linear).
     * @param metric define the dissimilarity metric used to calculate the cost. Choices: diff (squared differences), cc (non-normalised negative cross correlation aka negative cross covariance). Default: diff). cc is only implemented for -space average and -interp linear and cubic.
     * @param mask1 mask for image 1
     * @param mask2 mask for image 2
     * @param nonormalisation do not normalise the dissimilarity metric to the number of voxels.
     * @param overlap output number of voxels that were used.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mrmetric" as const,
        "nonormalisation": nonormalisation,
        "overlap": overlap,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "image1": image1,
        "image2": image2,
    };
    if (space !== null) {
        params["space"] = space;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (metric !== null) {
        params["metric"] = metric;
    }
    if (mask1 !== null) {
        params["mask1"] = mask1;
    }
    if (mask2 !== null) {
        params["mask2"] = mask2;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function mrmetric_cargs(
    params: MrmetricParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mrmetric");
    if ((params["space"] ?? null) !== null) {
        cargs.push(
            "-space",
            (params["space"] ?? null)
        );
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "-interp",
            (params["interp"] ?? null)
        );
    }
    if ((params["metric"] ?? null) !== null) {
        cargs.push(
            "-metric",
            (params["metric"] ?? null)
        );
    }
    if ((params["mask1"] ?? null) !== null) {
        cargs.push(
            "-mask1",
            execution.inputFile((params["mask1"] ?? null))
        );
    }
    if ((params["mask2"] ?? null) !== null) {
        cargs.push(
            "-mask2",
            execution.inputFile((params["mask2"] ?? null))
        );
    }
    if ((params["nonormalisation"] ?? null)) {
        cargs.push("-nonormalisation");
    }
    if ((params["overlap"] ?? null)) {
        cargs.push("-overlap");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["image1"] ?? null)));
    cargs.push(execution.inputFile((params["image2"] ?? null)));
    return cargs;
}


function mrmetric_outputs(
    params: MrmetricParameters,
    execution: Execution,
): MrmetricOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrmetricOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mrmetric_execute(
    params: MrmetricParameters,
    execution: Execution,
): MrmetricOutputs {
    /**
     * Computes a dissimilarity metric between two images.
     * 
     * Currently only the mean squared difference is fully implemented.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrmetricOutputs`).
     */
    params = execution.params(params)
    const cargs = mrmetric_cargs(params, execution)
    const ret = mrmetric_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mrmetric(
    image1: InputPathType,
    image2: InputPathType,
    space: string | null = null,
    interp: string | null = null,
    metric: string | null = null,
    mask1: InputPathType | null = null,
    mask2: InputPathType | null = null,
    nonormalisation: boolean = false,
    overlap: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrmetricConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrmetricOutputs {
    /**
     * Computes a dissimilarity metric between two images.
     * 
     * Currently only the mean squared difference is fully implemented.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param image1 the first input image.
     * @param image2 the second input image.
     * @param space voxel (default): per voxel image1: scanner space of image 1 image2: scanner space of image 2 average: scanner space of the average affine transformation of image 1 and 2 
     * @param interp set the interpolation method to use when reslicing (choices: nearest, linear, cubic, sinc. Default: linear).
     * @param metric define the dissimilarity metric used to calculate the cost. Choices: diff (squared differences), cc (non-normalised negative cross correlation aka negative cross covariance). Default: diff). cc is only implemented for -space average and -interp linear and cubic.
     * @param mask1 mask for image 1
     * @param mask2 mask for image 2
     * @param nonormalisation do not normalise the dissimilarity metric to the number of voxels.
     * @param overlap output number of voxels that were used.
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrmetricOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRMETRIC_METADATA);
    const params = mrmetric_params(image1, image2, space, interp, metric, mask1, mask2, nonormalisation, overlap, info, quiet, debug, force, nthreads, config, help, version)
    return mrmetric_execute(params, execution);
}


export {
      MRMETRIC_METADATA,
      MrmetricConfigParameters,
      MrmetricOutputs,
      MrmetricParameters,
      mrmetric,
      mrmetric_config_params,
      mrmetric_params,
};
