// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_COMPUTE_SEG_OVERLAP_METADATA: Metadata = {
    id: "28002ed71580b05451b3cd31d91e0b05078efaf6.boutiques",
    name: "mri_compute_seg_overlap",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriComputeSegOverlapParameters {
    "@type": "freesurfer.mri_compute_seg_overlap";
    "segvol1": InputPathType;
    "segvol2": InputPathType;
    "log_file"?: string | null | undefined;
    "mean_log_file"?: string | null | undefined;
    "std_log_file"?: string | null | undefined;
    "overall_log_flag": boolean;
    "exclude_cortex_flag": boolean;
    "exclude_wm_flag": boolean;
    "all_labels_flag": boolean;
    "dice_params"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_compute_seg_overlap": mri_compute_seg_overlap_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_compute_seg_overlap(...)`.
 *
 * @interface
 */
interface MriComputeSegOverlapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param segvol1 First segmentation volume.
 * @param segvol2 Second segmentation volume.
 * @param log_file Log file for individual Dice coefficients for 12 structure pairs, plus mean, std, and 'overall'.
 * @param mean_log_file Log file for mean Dice.
 * @param std_log_file Log file for std Dice.
 * @param overall_log_flag Log file for 'overall' Dice (mean excluding wm, gm, and accumbens).
 * @param exclude_cortex_flag Exclude cerebral cortex labels from all calculation. (0/1 flag, if nonzero)
 * @param exclude_wm_flag Exclude cerebral white matter labels from all calculation. (0/1 flag, if nonzero)
 * @param all_labels_flag Check all labels, not just the predefined main structures.
 * @param dice_params Standalone way to compute Dice coefficients, using seg1, seg2, ctab, ReportEmpty01, ExcludeId, datfile, and tablefile as additional parameters.
 *
 * @returns Parameter dictionary
 */
function mri_compute_seg_overlap_params(
    segvol1: InputPathType,
    segvol2: InputPathType,
    log_file: string | null = null,
    mean_log_file: string | null = null,
    std_log_file: string | null = null,
    overall_log_flag: boolean = false,
    exclude_cortex_flag: boolean = false,
    exclude_wm_flag: boolean = false,
    all_labels_flag: boolean = false,
    dice_params: string | null = null,
): MriComputeSegOverlapParameters {
    const params = {
        "@type": "freesurfer.mri_compute_seg_overlap" as const,
        "segvol1": segvol1,
        "segvol2": segvol2,
        "overall_log_flag": overall_log_flag,
        "exclude_cortex_flag": exclude_cortex_flag,
        "exclude_wm_flag": exclude_wm_flag,
        "all_labels_flag": all_labels_flag,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (mean_log_file !== null) {
        params["mean_log_file"] = mean_log_file;
    }
    if (std_log_file !== null) {
        params["std_log_file"] = std_log_file;
    }
    if (dice_params !== null) {
        params["dice_params"] = dice_params;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_compute_seg_overlap_cargs(
    params: MriComputeSegOverlapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_compute_seg_overlap");
    cargs.push(execution.inputFile((params["segvol1"] ?? null)));
    cargs.push(execution.inputFile((params["segvol2"] ?? null)));
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["mean_log_file"] ?? null) !== null) {
        cargs.push(
            "-mlog",
            (params["mean_log_file"] ?? null)
        );
    }
    if ((params["std_log_file"] ?? null) !== null) {
        cargs.push(
            "-slog",
            (params["std_log_file"] ?? null)
        );
    }
    if ((params["overall_log_flag"] ?? null)) {
        cargs.push("-olog");
    }
    if ((params["exclude_cortex_flag"] ?? null)) {
        cargs.push("-cortex");
    }
    if ((params["exclude_wm_flag"] ?? null)) {
        cargs.push("-wm");
    }
    if ((params["all_labels_flag"] ?? null)) {
        cargs.push("-all_labels");
    }
    if ((params["dice_params"] ?? null) !== null) {
        cargs.push(
            "-dice",
            (params["dice_params"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_compute_seg_overlap_outputs(
    params: MriComputeSegOverlapParameters,
    execution: Execution,
): MriComputeSegOverlapOutputs {
    const ret: MriComputeSegOverlapOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Compute coefficients of overlap between segmentation volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriComputeSegOverlapOutputs`).
 */
function mri_compute_seg_overlap_execute(
    params: MriComputeSegOverlapParameters,
    execution: Execution,
): MriComputeSegOverlapOutputs {
    params = execution.params(params)
    const cargs = mri_compute_seg_overlap_cargs(params, execution)
    const ret = mri_compute_seg_overlap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute coefficients of overlap between segmentation volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param segvol1 First segmentation volume.
 * @param segvol2 Second segmentation volume.
 * @param log_file Log file for individual Dice coefficients for 12 structure pairs, plus mean, std, and 'overall'.
 * @param mean_log_file Log file for mean Dice.
 * @param std_log_file Log file for std Dice.
 * @param overall_log_flag Log file for 'overall' Dice (mean excluding wm, gm, and accumbens).
 * @param exclude_cortex_flag Exclude cerebral cortex labels from all calculation. (0/1 flag, if nonzero)
 * @param exclude_wm_flag Exclude cerebral white matter labels from all calculation. (0/1 flag, if nonzero)
 * @param all_labels_flag Check all labels, not just the predefined main structures.
 * @param dice_params Standalone way to compute Dice coefficients, using seg1, seg2, ctab, ReportEmpty01, ExcludeId, datfile, and tablefile as additional parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriComputeSegOverlapOutputs`).
 */
function mri_compute_seg_overlap(
    segvol1: InputPathType,
    segvol2: InputPathType,
    log_file: string | null = null,
    mean_log_file: string | null = null,
    std_log_file: string | null = null,
    overall_log_flag: boolean = false,
    exclude_cortex_flag: boolean = false,
    exclude_wm_flag: boolean = false,
    all_labels_flag: boolean = false,
    dice_params: string | null = null,
    runner: Runner | null = null,
): MriComputeSegOverlapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_COMPUTE_SEG_OVERLAP_METADATA);
    const params = mri_compute_seg_overlap_params(segvol1, segvol2, log_file, mean_log_file, std_log_file, overall_log_flag, exclude_cortex_flag, exclude_wm_flag, all_labels_flag, dice_params)
    return mri_compute_seg_overlap_execute(params, execution);
}


export {
      MRI_COMPUTE_SEG_OVERLAP_METADATA,
      MriComputeSegOverlapOutputs,
      MriComputeSegOverlapParameters,
      mri_compute_seg_overlap,
      mri_compute_seg_overlap_cargs,
      mri_compute_seg_overlap_execute,
      mri_compute_seg_overlap_outputs,
      mri_compute_seg_overlap_params,
};
