// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_LABEL2ANNOT_METADATA: Metadata = {
    id: "d70e8a79afda30a0877ba03bbf9cf7ee2db78bd3.boutiques",
    name: "mris_label2annot",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisLabel2annotParameters {
    "__STYXTYPE__": "mris_label2annot";
    "subject": string;
    "hemi": string;
    "ctabfile": InputPathType;
    "annotname": string;
    "index_offset"?: number | null | undefined;
    "label_files"?: Array<InputPathType> | null | undefined;
    "annot_path"?: string | null | undefined;
    "labeldir"?: string | null | undefined;
    "ldir_default": boolean;
    "no_unknown": boolean;
    "thresh"?: number | null | undefined;
    "maxstatwinner": boolean;
    "surf"?: string | null | undefined;
    "subjects_dir"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_label2annot": mris_label2annot_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_label2annot": mris_label2annot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_label2annot(...)`.
 *
 * @interface
 */
interface MrisLabel2annotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated annotation file
     */
    annot_file: OutputPathType;
}


function mris_label2annot_params(
    subject: string,
    hemi: string,
    ctabfile: InputPathType,
    annotname: string,
    index_offset: number | null = null,
    label_files: Array<InputPathType> | null = null,
    annot_path: string | null = null,
    labeldir: string | null = null,
    ldir_default: boolean = false,
    no_unknown: boolean = false,
    thresh: number | null = null,
    maxstatwinner: boolean = false,
    surf: string | null = null,
    subjects_dir: string | null = null,
): MrisLabel2annotParameters {
    /**
     * Build parameters.
    
     * @param subject FreeSurfer subject
     * @param hemi Hemisphere (lh or rh)
     * @param ctabfile Colortable file (like FreeSurferColorLUT.txt)
     * @param annotname Output annotation name
     * @param index_offset Add to label number to get CTAB index
     * @param label_files Label file(s)
     * @param annot_path Full name/path of annotation file
     * @param labeldir Directory with label files when not using --l
     * @param ldir_default Use subject/labels as label directory
     * @param no_unknown Do not map unhit labels to index 0
     * @param thresh Threshold label by stats field
     * @param maxstatwinner Keep label with highest 'stat' value
     * @param surf Surface name, default is orig
     * @param subjects_dir Subjects Directory
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_label2annot" as const,
        "subject": subject,
        "hemi": hemi,
        "ctabfile": ctabfile,
        "annotname": annotname,
        "ldir_default": ldir_default,
        "no_unknown": no_unknown,
        "maxstatwinner": maxstatwinner,
    };
    if (index_offset !== null) {
        params["index_offset"] = index_offset;
    }
    if (label_files !== null) {
        params["label_files"] = label_files;
    }
    if (annot_path !== null) {
        params["annot_path"] = annot_path;
    }
    if (labeldir !== null) {
        params["labeldir"] = labeldir;
    }
    if (thresh !== null) {
        params["thresh"] = thresh;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    return params;
}


function mris_label2annot_cargs(
    params: MrisLabel2annotParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_label2annot");
    cargs.push(
        "-s",
        (params["subject"] ?? null)
    );
    cargs.push(
        "-h",
        (params["hemi"] ?? null)
    );
    cargs.push(
        "-ctab",
        execution.inputFile((params["ctabfile"] ?? null))
    );
    cargs.push(
        "-a",
        (params["annotname"] ?? null)
    );
    if ((params["index_offset"] ?? null) !== null) {
        cargs.push(
            "--offset",
            String((params["index_offset"] ?? null))
        );
    }
    if ((params["label_files"] ?? null) !== null) {
        cargs.push(
            "--l",
            ...(params["label_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["annot_path"] ?? null) !== null) {
        cargs.push(
            "--annot-path",
            (params["annot_path"] ?? null)
        );
    }
    if ((params["labeldir"] ?? null) !== null) {
        cargs.push(
            "--ldir",
            (params["labeldir"] ?? null)
        );
    }
    if ((params["ldir_default"] ?? null)) {
        cargs.push("--ldir-default");
    }
    if ((params["no_unknown"] ?? null)) {
        cargs.push("--no-unknown");
    }
    if ((params["thresh"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["thresh"] ?? null))
        );
    }
    if ((params["maxstatwinner"] ?? null)) {
        cargs.push("--maxstatwinner");
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf"] ?? null)
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    return cargs;
}


function mris_label2annot_outputs(
    params: MrisLabel2annotParameters,
    execution: Execution,
): MrisLabel2annotOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisLabel2annotOutputs = {
        root: execution.outputFile("."),
        annot_file: execution.outputFile([(params["hemi"] ?? null), ".", (params["annotname"] ?? null), ".annot"].join('')),
    };
    return ret;
}


function mris_label2annot_execute(
    params: MrisLabel2annotParameters,
    execution: Execution,
): MrisLabel2annotOutputs {
    /**
     * Converts a set of surface labels to an annotation file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisLabel2annotOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_label2annot_cargs(params, execution)
    const ret = mris_label2annot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_label2annot(
    subject: string,
    hemi: string,
    ctabfile: InputPathType,
    annotname: string,
    index_offset: number | null = null,
    label_files: Array<InputPathType> | null = null,
    annot_path: string | null = null,
    labeldir: string | null = null,
    ldir_default: boolean = false,
    no_unknown: boolean = false,
    thresh: number | null = null,
    maxstatwinner: boolean = false,
    surf: string | null = null,
    subjects_dir: string | null = null,
    runner: Runner | null = null,
): MrisLabel2annotOutputs {
    /**
     * Converts a set of surface labels to an annotation file.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject FreeSurfer subject
     * @param hemi Hemisphere (lh or rh)
     * @param ctabfile Colortable file (like FreeSurferColorLUT.txt)
     * @param annotname Output annotation name
     * @param index_offset Add to label number to get CTAB index
     * @param label_files Label file(s)
     * @param annot_path Full name/path of annotation file
     * @param labeldir Directory with label files when not using --l
     * @param ldir_default Use subject/labels as label directory
     * @param no_unknown Do not map unhit labels to index 0
     * @param thresh Threshold label by stats field
     * @param maxstatwinner Keep label with highest 'stat' value
     * @param surf Surface name, default is orig
     * @param subjects_dir Subjects Directory
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisLabel2annotOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_LABEL2ANNOT_METADATA);
    const params = mris_label2annot_params(subject, hemi, ctabfile, annotname, index_offset, label_files, annot_path, labeldir, ldir_default, no_unknown, thresh, maxstatwinner, surf, subjects_dir)
    return mris_label2annot_execute(params, execution);
}


export {
      MRIS_LABEL2ANNOT_METADATA,
      MrisLabel2annotOutputs,
      MrisLabel2annotParameters,
      mris_label2annot,
      mris_label2annot_params,
};
