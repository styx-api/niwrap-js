// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SYSTEMNOISE_METADATA: Metadata = {
    id: "9fe5bc1f78d1d88a6ab74a4fea8df0c29e9b2d19.boutiques",
    name: "systemnoise",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SystemnoiseParameters {
    "@type": "fsl.systemnoise";
    "input_signal": InputPathType;
    "output_signal": string;
    "noise_standard_deviation": number;
    "seed"?: number | null | undefined;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.systemnoise": systemnoise_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.systemnoise": systemnoise_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `systemnoise(...)`.
 *
 * @interface
 */
interface SystemnoiseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output signal with added system noise
     */
    output_signal_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_signal Input signal (possum output matrix)
 * @param output_signal Output signal (possum matrix form)
 * @param noise_standard_deviation Set noise standard deviation (units of intensity)
 * @param seed Input seed value for the sequence
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display help message
 *
 * @returns Parameter dictionary
 */
function systemnoise_params(
    input_signal: InputPathType,
    output_signal: string,
    noise_standard_deviation: number,
    seed: number | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): SystemnoiseParameters {
    const params = {
        "@type": "fsl.systemnoise" as const,
        "input_signal": input_signal,
        "output_signal": output_signal,
        "noise_standard_deviation": noise_standard_deviation,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (seed !== null) {
        params["seed"] = seed;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function systemnoise_cargs(
    params: SystemnoiseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("systemnoise");
    cargs.push(
        "--in",
        execution.inputFile((params["input_signal"] ?? null))
    );
    cargs.push(
        "--out",
        (params["output_signal"] ?? null)
    );
    cargs.push(
        "--sigma",
        String((params["noise_standard_deviation"] ?? null))
    );
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("--verbose");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function systemnoise_outputs(
    params: SystemnoiseParameters,
    execution: Execution,
): SystemnoiseOutputs {
    const ret: SystemnoiseOutputs = {
        root: execution.outputFile("."),
        output_signal_file: execution.outputFile([(params["output_signal"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Tool for adding system noise to a given signal using FSL's utilities.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SystemnoiseOutputs`).
 */
function systemnoise_execute(
    params: SystemnoiseParameters,
    runner: Runner | null = null,
): SystemnoiseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SYSTEMNOISE_METADATA);
    params = execution.params(params)
    const cargs = systemnoise_cargs(params, execution)
    const ret = systemnoise_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for adding system noise to a given signal using FSL's utilities.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_signal Input signal (possum output matrix)
 * @param output_signal Output signal (possum matrix form)
 * @param noise_standard_deviation Set noise standard deviation (units of intensity)
 * @param seed Input seed value for the sequence
 * @param verbose_flag Switch on diagnostic messages
 * @param help_flag Display help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SystemnoiseOutputs`).
 */
function systemnoise(
    input_signal: InputPathType,
    output_signal: string,
    noise_standard_deviation: number,
    seed: number | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): SystemnoiseOutputs {
    const params = systemnoise_params(input_signal, output_signal, noise_standard_deviation, seed, verbose_flag, help_flag)
    return systemnoise_execute(params, runner);
}


export {
      SYSTEMNOISE_METADATA,
      SystemnoiseOutputs,
      SystemnoiseParameters,
      systemnoise,
      systemnoise_execute,
      systemnoise_params,
};
