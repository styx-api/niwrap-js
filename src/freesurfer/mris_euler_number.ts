// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_EULER_NUMBER_METADATA: Metadata = {
    id: "72b1fab042aa7159acf7f9f958b916daac555d65.boutiques",
    name: "mris_euler_number",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisEulerNumberParameters {
    "@type": "freesurfer.mris_euler_number";
    "input_surface": InputPathType;
    "output_file"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_euler_number": mris_euler_number_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_euler_number": mris_euler_number_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_euler_number(...)`.
 *
 * @interface
 */
interface MrisEulerNumberOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File where the number of holes is written
     */
    outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file
 * @param output_file Write number of holes to output file
 *
 * @returns Parameter dictionary
 */
function mris_euler_number_params(
    input_surface: InputPathType,
    output_file: string | null = null,
): MrisEulerNumberParameters {
    const params = {
        "@type": "freesurfer.mris_euler_number" as const,
        "input_surface": input_surface,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_euler_number_cargs(
    params: MrisEulerNumberParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_euler_number");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_file"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_euler_number_outputs(
    params: MrisEulerNumberParameters,
    execution: Execution,
): MrisEulerNumberOutputs {
    const ret: MrisEulerNumberOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * mris_euler_number
 *
 * This program computes EulerNumber for a cortical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisEulerNumberOutputs`).
 */
function mris_euler_number_execute(
    params: MrisEulerNumberParameters,
    runner: Runner | null = null,
): MrisEulerNumberOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_EULER_NUMBER_METADATA);
    params = execution.params(params)
    const cargs = mris_euler_number_cargs(params, execution)
    const ret = mris_euler_number_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_euler_number
 *
 * This program computes EulerNumber for a cortical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file
 * @param output_file Write number of holes to output file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisEulerNumberOutputs`).
 */
function mris_euler_number(
    input_surface: InputPathType,
    output_file: string | null = null,
    runner: Runner | null = null,
): MrisEulerNumberOutputs {
    const params = mris_euler_number_params(input_surface, output_file)
    return mris_euler_number_execute(params, runner);
}


export {
      MRIS_EULER_NUMBER_METADATA,
      MrisEulerNumberOutputs,
      MrisEulerNumberParameters,
      mris_euler_number,
      mris_euler_number_execute,
      mris_euler_number_params,
};
