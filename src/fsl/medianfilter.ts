// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MEDIANFILTER_METADATA: Metadata = {
    id: "a2389674d9029951b0bd3c6321e79ce7b848526d.boutiques",
    name: "medianfilter",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MedianfilterParameters {
    "@type"?: "fsl/medianfilter";
    "infile": InputPathType;
    "outfile": InputPathType;
}
type MedianfilterParametersTagged = Required<Pick<MedianfilterParameters, '@type'>> & MedianfilterParameters;


/**
 * Output object returned when calling `MedianfilterParameters(...)`.
 *
 * @interface
 */
interface MedianfilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the median filtered image
     */
    filtered_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input image file to be filtered (e.g., img.nii.gz)
 * @param outfile Output file to store the filtered image (e.g., img_filtered.nii.gz)
 *
 * @returns Parameter dictionary
 */
function medianfilter_params(
    infile: InputPathType,
    outfile: InputPathType,
): MedianfilterParametersTagged {
    const params = {
        "@type": "fsl/medianfilter" as const,
        "infile": infile,
        "outfile": outfile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function medianfilter_cargs(
    params: MedianfilterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("medianfilter");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push(execution.inputFile((params["outfile"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function medianfilter_outputs(
    params: MedianfilterParameters,
    execution: Execution,
): MedianfilterOutputs {
    const ret: MedianfilterOutputs = {
        root: execution.outputFile("."),
        filtered_file: execution.outputFile([path.basename((params["outfile"] ?? null))].join('')),
    };
    return ret;
}


/**
 * medianfilter
 *
 * A tool to perform 26 neighbourhood median filtering on an input image.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MedianfilterOutputs`).
 */
function medianfilter_execute(
    params: MedianfilterParameters,
    runner: Runner | null = null,
): MedianfilterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MEDIANFILTER_METADATA);
    params = execution.params(params)
    const cargs = medianfilter_cargs(params, execution)
    const ret = medianfilter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * medianfilter
 *
 * A tool to perform 26 neighbourhood median filtering on an input image.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param infile Input image file to be filtered (e.g., img.nii.gz)
 * @param outfile Output file to store the filtered image (e.g., img_filtered.nii.gz)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MedianfilterOutputs`).
 */
function medianfilter(
    infile: InputPathType,
    outfile: InputPathType,
    runner: Runner | null = null,
): MedianfilterOutputs {
    const params = medianfilter_params(infile, outfile)
    return medianfilter_execute(params, runner);
}


export {
      MEDIANFILTER_METADATA,
      MedianfilterOutputs,
      medianfilter,
      medianfilter_execute,
      medianfilter_params,
};
