// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const EDDY_QUAD_METADATA: Metadata = {
    id: "f1bf23f14eb3af912ff3ed8154ab8f03ac1734ff.boutiques",
    name: "eddy_quad",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface EddyQuadParameters {
    "__STYXTYPE__": "eddy_quad";
    "eddyBase": string;
    "eddyIndex": InputPathType;
    "eddyParams": InputPathType;
    "mask": InputPathType;
    "bvals": InputPathType;
    "bvecs"?: InputPathType | null | undefined;
    "output_dir"?: string | null | undefined;
    "field"?: InputPathType | null | undefined;
    "slspec"?: InputPathType | null | undefined;
    "verbose": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "eddy_quad": eddy_quad_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "eddy_quad": eddy_quad_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `eddy_quad(...)`.
 *
 * @interface
 */
interface EddyQuadOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Quality control data outputs
     */
    output_dir_qc: OutputPathType | null;
}


function eddy_quad_params(
    eddy_base: string,
    eddy_index: InputPathType,
    eddy_params: InputPathType,
    mask: InputPathType,
    bvals: InputPathType,
    bvecs: InputPathType | null = null,
    output_dir: string | null = null,
    field: InputPathType | null = null,
    slspec: InputPathType | null = null,
    verbose: boolean = false,
): EddyQuadParameters {
    /**
     * Build parameters.
    
     * @param eddy_base Basename (including path) specified when running EDDY
     * @param eddy_index File containing indices for all volumes into acquisition parameters
     * @param eddy_params File containing acquisition parameters
     * @param mask Binary mask file
     * @param bvals b-values file
     * @param bvecs b-vectors file - only used when <eddyBase>.eddy_residuals file is present
     * @param output_dir Output directory - default = '<eddyBase>.qc'
     * @param field TOPUP estimated field (in Hz)
     * @param slspec Text file specifying slice/group acquisition
     * @param verbose Display debug messages
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "eddy_quad" as const,
        "eddyBase": eddy_base,
        "eddyIndex": eddy_index,
        "eddyParams": eddy_params,
        "mask": mask,
        "bvals": bvals,
        "verbose": verbose,
    };
    if (bvecs !== null) {
        params["bvecs"] = bvecs;
    }
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (field !== null) {
        params["field"] = field;
    }
    if (slspec !== null) {
        params["slspec"] = slspec;
    }
    return params;
}


function eddy_quad_cargs(
    params: EddyQuadParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("eddy_quad");
    cargs.push((params["eddyBase"] ?? null));
    cargs.push(
        "--eddyIdx",
        execution.inputFile((params["eddyIndex"] ?? null))
    );
    cargs.push(
        "--eddyParams",
        execution.inputFile((params["eddyParams"] ?? null))
    );
    cargs.push(
        "--mask",
        execution.inputFile((params["mask"] ?? null))
    );
    cargs.push(
        "--bvals",
        execution.inputFile((params["bvals"] ?? null))
    );
    if ((params["bvecs"] ?? null) !== null) {
        cargs.push(
            "--bvecs",
            execution.inputFile((params["bvecs"] ?? null))
        );
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "--output-dir",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["field"] ?? null) !== null) {
        cargs.push(
            "--field",
            execution.inputFile((params["field"] ?? null))
        );
    }
    if ((params["slspec"] ?? null) !== null) {
        cargs.push(
            "--slspec",
            execution.inputFile((params["slspec"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("--verbose");
    }
    return cargs;
}


function eddy_quad_outputs(
    params: EddyQuadParameters,
    execution: Execution,
): EddyQuadOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: EddyQuadOutputs = {
        root: execution.outputFile("."),
        output_dir_qc: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null)].join('')) : null,
    };
    return ret;
}


function eddy_quad_execute(
    params: EddyQuadParameters,
    execution: Execution,
): EddyQuadOutputs {
    /**
     * QUality Assessment for DMRI.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `EddyQuadOutputs`).
     */
    params = execution.params(params)
    const cargs = eddy_quad_cargs(params, execution)
    const ret = eddy_quad_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function eddy_quad(
    eddy_base: string,
    eddy_index: InputPathType,
    eddy_params: InputPathType,
    mask: InputPathType,
    bvals: InputPathType,
    bvecs: InputPathType | null = null,
    output_dir: string | null = null,
    field: InputPathType | null = null,
    slspec: InputPathType | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): EddyQuadOutputs {
    /**
     * QUality Assessment for DMRI.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param eddy_base Basename (including path) specified when running EDDY
     * @param eddy_index File containing indices for all volumes into acquisition parameters
     * @param eddy_params File containing acquisition parameters
     * @param mask Binary mask file
     * @param bvals b-values file
     * @param bvecs b-vectors file - only used when <eddyBase>.eddy_residuals file is present
     * @param output_dir Output directory - default = '<eddyBase>.qc'
     * @param field TOPUP estimated field (in Hz)
     * @param slspec Text file specifying slice/group acquisition
     * @param verbose Display debug messages
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `EddyQuadOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(EDDY_QUAD_METADATA);
    const params = eddy_quad_params(eddy_base, eddy_index, eddy_params, mask, bvals, bvecs, output_dir, field, slspec, verbose)
    return eddy_quad_execute(params, execution);
}


export {
      EDDY_QUAD_METADATA,
      EddyQuadOutputs,
      EddyQuadParameters,
      eddy_quad,
      eddy_quad_params,
};
