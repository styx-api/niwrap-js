// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_FRIEDMAN_METADATA: Metadata = {
    id: "f420b1764d2a8c3e67aa44bf4d11906383ad53d6.boutiques",
    name: "3dFriedman",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dFriedmanParameters {
    "@type": "afni.3dFriedman";
    "levels": number;
    "datasets": Array<InputPathType>;
    "workmem"?: number | null | undefined;
    "voxel_num"?: number | null | undefined;
    "output_prefix": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dFriedman": v_3d_friedman_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dFriedman": v_3d_friedman_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_friedman(...)`.
 *
 * @interface
 */
interface V3dFriedmanOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Friedman statistics output file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param levels Number of treatments
 * @param datasets Data sets for each treatment
 * @param output_prefix Prefix for the output files
 * @param workmem Number of megabytes of RAM to use for statistical workspace
 * @param voxel_num Screen output for a specific voxel number
 *
 * @returns Parameter dictionary
 */
function v_3d_friedman_params(
    levels: number,
    datasets: Array<InputPathType>,
    output_prefix: string,
    workmem: number | null = null,
    voxel_num: number | null = null,
): V3dFriedmanParameters {
    const params = {
        "@type": "afni.3dFriedman" as const,
        "levels": levels,
        "datasets": datasets,
        "output_prefix": output_prefix,
    };
    if (workmem !== null) {
        params["workmem"] = workmem;
    }
    if (voxel_num !== null) {
        params["voxel_num"] = voxel_num;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_friedman_cargs(
    params: V3dFriedmanParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dFriedman");
    cargs.push(String((params["levels"] ?? null)));
    cargs.push(
        "-dset",
        ...(params["datasets"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["workmem"] ?? null) !== null) {
        cargs.push(
            "-workmem",
            String((params["workmem"] ?? null))
        );
    }
    if ((params["voxel_num"] ?? null) !== null) {
        cargs.push(
            "-voxel",
            String((params["voxel_num"] ?? null))
        );
    }
    cargs.push(
        "-out",
        (params["output_prefix"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_friedman_outputs(
    params: V3dFriedmanParameters,
    execution: Execution,
): V3dFriedmanOutputs {
    const ret: V3dFriedmanOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_prefix"] ?? null), "*"].join('')),
    };
    return ret;
}


/**
 * Performs nonparametric Friedman test for randomized complete block design experiments.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dFriedmanOutputs`).
 */
function v_3d_friedman_execute(
    params: V3dFriedmanParameters,
    execution: Execution,
): V3dFriedmanOutputs {
    params = execution.params(params)
    const cargs = v_3d_friedman_cargs(params, execution)
    const ret = v_3d_friedman_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Performs nonparametric Friedman test for randomized complete block design experiments.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param levels Number of treatments
 * @param datasets Data sets for each treatment
 * @param output_prefix Prefix for the output files
 * @param workmem Number of megabytes of RAM to use for statistical workspace
 * @param voxel_num Screen output for a specific voxel number
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dFriedmanOutputs`).
 */
function v_3d_friedman(
    levels: number,
    datasets: Array<InputPathType>,
    output_prefix: string,
    workmem: number | null = null,
    voxel_num: number | null = null,
    runner: Runner | null = null,
): V3dFriedmanOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_FRIEDMAN_METADATA);
    const params = v_3d_friedman_params(levels, datasets, output_prefix, workmem, voxel_num)
    return v_3d_friedman_execute(params, execution);
}


export {
      V3dFriedmanOutputs,
      V3dFriedmanParameters,
      V_3D_FRIEDMAN_METADATA,
      v_3d_friedman,
      v_3d_friedman_cargs,
      v_3d_friedman_execute,
      v_3d_friedman_outputs,
      v_3d_friedman_params,
};
