// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MERGE_STATS_TABLES_METADATA: Metadata = {
    id: "004967733986569ad699b7fcfc4e0e899cb02c90.boutiques",
    name: "merge_stats_tables",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MergeStatsTablesParameters {
    "__STYXTYPE__": "merge_stats_tables";
    "subject"?: string | null | undefined;
    "input"?: InputPathType | null | undefined;
    "outputfile": string;
    "meas": string;
    "subjectsfile"?: InputPathType | null | undefined;
    "intable"?: InputPathType | null | undefined;
    "subdir"?: string | null | undefined;
    "delimiter"?: string | null | undefined;
    "common_segs": boolean;
    "all_segs": boolean;
    "transpose": boolean;
    "skip": boolean;
    "debug": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "merge_stats_tables": merge_stats_tables_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "merge_stats_tables": merge_stats_tables_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `merge_stats_tables(...)`.
 *
 * @interface
 */
interface MergeStatsTablesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The merged stats table
     */
    merged_stats_table: OutputPathType;
}


function merge_stats_tables_params(
    outputfile: string,
    meas: string,
    subject: string | null = null,
    input: InputPathType | null = null,
    subjectsfile: InputPathType | null = null,
    intable: InputPathType | null = null,
    subdir: string | null = null,
    delimiter: string | null = null,
    common_segs: boolean = false,
    all_segs: boolean = false,
    transpose: boolean = false,
    skip: boolean = false,
    debug: boolean = false,
): MergeStatsTablesParameters {
    /**
     * Build parameters.
    
     * @param outputfile The output table file
     * @param meas Measure to write in output table
     * @param subject Specify a single subject name
     * @param input Specify a single input stat file
     * @param subjectsfile Name of the file which has the list of subjects (one subject per line)
     * @param intable Use `fname` as input (REQUIRED when passing subject ids)
     * @param subdir Use `subdir` instead of default "stats/" when passing subject ids
     * @param delimiter Delimiter between measures in the table. Options are 'tab', 'space', 'comma', and 'semicolon'. Default is 'space'.
     * @param common_segs Output only the common segmentations of all the statsfiles given
     * @param all_segs Output all the segmentations of the statsfiles given
     * @param transpose Transpose the table (default is subjects in rows and segmentations in cols)
     * @param skip If a subject does not have a stats file, skip it instead of exiting.
     * @param debug Increase verbosity for debugging purposes.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "merge_stats_tables" as const,
        "outputfile": outputfile,
        "meas": meas,
        "common_segs": common_segs,
        "all_segs": all_segs,
        "transpose": transpose,
        "skip": skip,
        "debug": debug,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (input !== null) {
        params["input"] = input;
    }
    if (subjectsfile !== null) {
        params["subjectsfile"] = subjectsfile;
    }
    if (intable !== null) {
        params["intable"] = intable;
    }
    if (subdir !== null) {
        params["subdir"] = subdir;
    }
    if (delimiter !== null) {
        params["delimiter"] = delimiter;
    }
    return params;
}


function merge_stats_tables_cargs(
    params: MergeStatsTablesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("merge_stats_tables");
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["subject"] ?? null)
        );
    }
    if ((params["input"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["input"] ?? null))
        );
    }
    cargs.push(
        "-t",
        (params["outputfile"] ?? null)
    );
    cargs.push(
        "-m",
        (params["meas"] ?? null)
    );
    if ((params["subjectsfile"] ?? null) !== null) {
        cargs.push(
            "--subjectsfile",
            execution.inputFile((params["subjectsfile"] ?? null))
        );
    }
    if ((params["intable"] ?? null) !== null) {
        cargs.push(
            "--intable",
            execution.inputFile((params["intable"] ?? null))
        );
    }
    if ((params["subdir"] ?? null) !== null) {
        cargs.push(
            "--subdir",
            (params["subdir"] ?? null)
        );
    }
    if ((params["delimiter"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["delimiter"] ?? null)
        );
    }
    if ((params["common_segs"] ?? null)) {
        cargs.push("--common-segs");
    }
    if ((params["all_segs"] ?? null)) {
        cargs.push("--all-segs");
    }
    cargs.push("[SEGIDS_FROM_FILE]");
    cargs.push("[SEGNO]");
    cargs.push("[NO_SEGNO_FLAG]");
    if ((params["transpose"] ?? null)) {
        cargs.push("--transpose");
    }
    if ((params["skip"] ?? null)) {
        cargs.push("--skip");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


function merge_stats_tables_outputs(
    params: MergeStatsTablesParameters,
    execution: Execution,
): MergeStatsTablesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MergeStatsTablesOutputs = {
        root: execution.outputFile("."),
        merged_stats_table: execution.outputFile([(params["outputfile"] ?? null)].join('')),
    };
    return ret;
}


function merge_stats_tables_execute(
    params: MergeStatsTablesParameters,
    execution: Execution,
): MergeStatsTablesOutputs {
    /**
     * Merges a set of stats table files into a single stats table where each line is a subject and each column is a segmentation or parcellation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MergeStatsTablesOutputs`).
     */
    params = execution.params(params)
    const cargs = merge_stats_tables_cargs(params, execution)
    const ret = merge_stats_tables_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function merge_stats_tables(
    outputfile: string,
    meas: string,
    subject: string | null = null,
    input: InputPathType | null = null,
    subjectsfile: InputPathType | null = null,
    intable: InputPathType | null = null,
    subdir: string | null = null,
    delimiter: string | null = null,
    common_segs: boolean = false,
    all_segs: boolean = false,
    transpose: boolean = false,
    skip: boolean = false,
    debug: boolean = false,
    runner: Runner | null = null,
): MergeStatsTablesOutputs {
    /**
     * Merges a set of stats table files into a single stats table where each line is a subject and each column is a segmentation or parcellation.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param outputfile The output table file
     * @param meas Measure to write in output table
     * @param subject Specify a single subject name
     * @param input Specify a single input stat file
     * @param subjectsfile Name of the file which has the list of subjects (one subject per line)
     * @param intable Use `fname` as input (REQUIRED when passing subject ids)
     * @param subdir Use `subdir` instead of default "stats/" when passing subject ids
     * @param delimiter Delimiter between measures in the table. Options are 'tab', 'space', 'comma', and 'semicolon'. Default is 'space'.
     * @param common_segs Output only the common segmentations of all the statsfiles given
     * @param all_segs Output all the segmentations of the statsfiles given
     * @param transpose Transpose the table (default is subjects in rows and segmentations in cols)
     * @param skip If a subject does not have a stats file, skip it instead of exiting.
     * @param debug Increase verbosity for debugging purposes.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MergeStatsTablesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MERGE_STATS_TABLES_METADATA);
    const params = merge_stats_tables_params(outputfile, meas, subject, input, subjectsfile, intable, subdir, delimiter, common_segs, all_segs, transpose, skip, debug)
    return merge_stats_tables_execute(params, execution);
}


export {
      MERGE_STATS_TABLES_METADATA,
      MergeStatsTablesOutputs,
      MergeStatsTablesParameters,
      merge_stats_tables,
      merge_stats_tables_params,
};
