// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GET_LABEL_THICKNESS_METADATA: Metadata = {
    id: "dee540c5d6addffa9eea35a7fd1572afd491a587.boutiques",
    name: "get_label_thickness",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GetLabelThicknessParameters {
    "__STYXTYPE__": "get_label_thickness";
    "infile": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "get_label_thickness": get_label_thickness_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `get_label_thickness(...)`.
 *
 * @interface
 */
interface GetLabelThicknessOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function get_label_thickness_params(
    infile: InputPathType,
): GetLabelThicknessParameters {
    /**
     * Build parameters.
    
     * @param infile Input file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "get_label_thickness" as const,
        "infile": infile,
    };
    return params;
}


function get_label_thickness_cargs(
    params: GetLabelThicknessParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("get_label_thickness");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push("[OPTIONS]");
    return cargs;
}


function get_label_thickness_outputs(
    params: GetLabelThicknessParameters,
    execution: Execution,
): GetLabelThicknessOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: GetLabelThicknessOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function get_label_thickness_execute(
    params: GetLabelThicknessParameters,
    execution: Execution,
): GetLabelThicknessOutputs {
    /**
     * Tool to calculate label thickness.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `GetLabelThicknessOutputs`).
     */
    params = execution.params(params)
    const cargs = get_label_thickness_cargs(params, execution)
    const ret = get_label_thickness_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function get_label_thickness(
    infile: InputPathType,
    runner: Runner | null = null,
): GetLabelThicknessOutputs {
    /**
     * Tool to calculate label thickness.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param infile Input file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `GetLabelThicknessOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GET_LABEL_THICKNESS_METADATA);
    const params = get_label_thickness_params(infile)
    return get_label_thickness_execute(params, execution);
}


export {
      GET_LABEL_THICKNESS_METADATA,
      GetLabelThicknessOutputs,
      GetLabelThicknessParameters,
      get_label_thickness,
      get_label_thickness_params,
};
