// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_ATROPOS_N4_SH_METADATA: Metadata = {
    id: "3902130432999f1a99133857c02c3377a225b17e.boutiques",
    name: "antsAtroposN4.sh",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsAtroposN4ShSegmentationPriorsParameters {
    "@type"?: "segmentation_priors";
    "segmentation_priors_pattern"?: string | null | undefined;
    "segmentation_priors_folder"?: InputPathType | null | undefined;
}
type AntsAtroposN4ShSegmentationPriorsParametersTagged = Required<Pick<AntsAtroposN4ShSegmentationPriorsParameters, '@type'>> & AntsAtroposN4ShSegmentationPriorsParameters;


interface AntsAtroposN4ShParameters {
    "@type"?: "ants/antsAtroposN4.sh";
    "image_dimension": 2 | 3;
    "input_image": InputPathType;
    "mask_image": InputPathType;
    "number_of_classes": number;
    "output_prefix": string;
    "max_n4_atropos_iterations"?: number | null | undefined;
    "max_atropos_iterations"?: number | null | undefined;
    "segmentation_priors": AntsAtroposN4ShSegmentationPriorsParameters;
    "mrf"?: string | null | undefined;
    "denoise_anatomical_images"?: 0 | 1 | null | undefined;
    "posterior_formulation"?: "Socrates[ 1 ]" | "Aristotle[ 1 ]" | null | undefined;
    "label_propagation"?: string | null | undefined;
    "posterior_label_for_n4_weight_mask"?: string | null | undefined;
    "image_file_suffix"?: string | null | undefined;
    "keep_temporary_files"?: 0 | 1 | null | undefined;
    "use_random_seeding"?: 0 | 1 | null | undefined;
    "atropos_segmentation_prior_weight"?: number | null | undefined;
    "n4_convergence"?: string | null | undefined;
    "n4_shrink_factor"?: number | null | undefined;
    "n4_bspline_params"?: string | null | undefined;
    "atropos_segmentation_icm"?: string | null | undefined;
    "atropos_segmentation_use_euclidean_distance"?: 0 | 1 | null | undefined;
    "test_debug_mode"?: number | null | undefined;
}
type AntsAtroposN4ShParametersTagged = Required<Pick<AntsAtroposN4ShParameters, '@type'>> & AntsAtroposN4ShParameters;


/**
 * Build parameters.
 *
 * @param segmentation_priors_pattern Prior probability images initializing the segmentation. Specified using c-style formatting, e.g. -p labelsPriors%02d.nii.gz. If this is not specified, k-means initialization is used instead.
 * @param segmentation_priors_folder Included so.
 *
 * @returns Parameter dictionary
 */
function ants_atropos_n4_sh_segmentation_priors_params(
    segmentation_priors_pattern: string | null = null,
    segmentation_priors_folder: InputPathType | null = null,
): AntsAtroposN4ShSegmentationPriorsParametersTagged {
    const params = {
        "@type": "segmentation_priors" as const,
    };
    if (segmentation_priors_pattern !== null) {
        params["segmentation_priors_pattern"] = segmentation_priors_pattern;
    }
    if (segmentation_priors_folder !== null) {
        params["segmentation_priors_folder"] = segmentation_priors_folder;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_atropos_n4_sh_segmentation_priors_cargs(
    params: AntsAtroposN4ShSegmentationPriorsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    if ((params["segmentation_priors_pattern"] ?? null) !== null || (params["segmentation_priors_folder"] ?? null) !== null) {
        cargs.push([(((params["segmentation_priors_pattern"] ?? null) !== null) ? (params["segmentation_priors_pattern"] ?? null) : ""), "/", (((params["segmentation_priors_folder"] ?? null) !== null) ? execution.inputFile((params["segmentation_priors_folder"] ?? null)) : "")].join(''));
    }
    return cargs;
}


/**
 * Output object returned when calling `AntsAtroposN4ShParameters(...)`.
 *
 * @interface
 */
interface AntsAtroposN4ShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * N4 corrected image.
     */
    n4_corrected: OutputPathType;
    /**
     * Segmentation image.
     */
    segmentation: OutputPathType;
    /**
     * Segmentation posteriors image.
     */
    segmentation_posteriors: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension 2 or 3, for 2- or 3-dimensional image.
 * @param input_image Anatomical image, typically T1. If more than one anatomical image is specified, subsequent images are also used during the segmentation process.
 * @param mask_image Binary mask defining the region of interest.
 * @param number_of_classes Number of classes defining the segmentation.
 * @param output_prefix The following images are created: {output_prefix}N4Corrected.{output_suffix}, {output_prefix}Segmentation.{output_suffix}, {output_prefix}SegmentationPosteriors.{output_suffix}
 * @param segmentation_priors Prior probability images initializing the segmentation. Specified using c-style formatting, e.g. -p labelsPriors%02d.nii.gz. If this is not specified, k-means initialization is used instead.
 * @param max_n4_atropos_iterations Maximum number of (outer loop) iterations between N4 <-> Atropos (default = 15).
 * @param max_atropos_iterations Maximum number of (inner loop) iterations in Atropos (default = 3).
 * @param mrf Specifies MRF prior (of the form '[ weight,neighborhood ]', e.g. '[ 0.1,1x1x1 ]' which is default).
 * @param denoise_anatomical_images Denoise anatomical images (1) or not (0) (default = 1).
 * @param posterior_formulation Posterior formulation and whether or not to use mixture model proportions. e.g 'Socrates[ 1 ]' (default) or 'Aristotle[ 1 ]'.  Choose the latter if you want to use the distance priors, see also the -l option for label propagation control (default = 'Socrates[ 1 ]').
 * @param label_propagation Incorporate a distance prior into the 'Aristotle' posterior formulation. Should be of the form 'label[ lambda,boundaryProbability ]' where label is a value of 1,2,3,... denoting label ID. The label probability for anything outside the current label

  = boundaryProbability * exp( -lambda * distanceFromBoundary )

Intuitively, smaller lambda values will increase the spatial capture range of the distance prior. To apply to all label values, simply omit specifying the label, i.e. -l '[ lambda,boundaryProbability ]'.
 * @param posterior_label_for_n4_weight_mask Which posterior probability image should be used to define the N4 weight mask. Can also specify multiple posteriors in which case the chosen posteriors are combined.
 * @param image_file_suffix Any of the standard ITK IO formats e.g. nrrd, nii.gz (default), mhd.
 * @param keep_temporary_files Keep temporary files on disk (1) or delete them (0) (default = 0).
 * @param use_random_seeding Use random number generated from system clock in Atropos (default = 1).
 * @param atropos_segmentation_prior_weight Atropos spatial prior probability weight for the segmentation (default = 0.25).
 * @param n4_convergence Convergence parameters for N4, see '-c' option in N4BiasFieldCorrection (default = [50x50x50x50,0.0000001]).
 * @param n4_shrink_factor Shrink factor for N4 (default = 4).
 * @param n4_bspline_params N4 b-spline specification, see '-b' option in N4BiasFieldCorrection (default = [200,0,0,0]).
 * @param atropos_segmentation_icm ICM parameters for segmentation, see '-g' option in Atropos (default = [1,1]).
 * @param atropos_segmentation_use_euclidean_distance Use euclidean distances in distance prior formulation (1) or not (0), see Atropos usage for details (default = 1).
 * @param test_debug_mode If > 0, attempts to continue after errors.
 *
 * @returns Parameter dictionary
 */
function ants_atropos_n4_sh_params(
    image_dimension: 2 | 3,
    input_image: InputPathType,
    mask_image: InputPathType,
    number_of_classes: number,
    output_prefix: string,
    segmentation_priors: AntsAtroposN4ShSegmentationPriorsParameters,
    max_n4_atropos_iterations: number | null = null,
    max_atropos_iterations: number | null = null,
    mrf: string | null = null,
    denoise_anatomical_images: 0 | 1 | null = null,
    posterior_formulation: "Socrates[ 1 ]" | "Aristotle[ 1 ]" | null = null,
    label_propagation: string | null = null,
    posterior_label_for_n4_weight_mask: string | null = null,
    image_file_suffix: string | null = null,
    keep_temporary_files: 0 | 1 | null = null,
    use_random_seeding: 0 | 1 | null = null,
    atropos_segmentation_prior_weight: number | null = null,
    n4_convergence: string | null = null,
    n4_shrink_factor: number | null = null,
    n4_bspline_params: string | null = null,
    atropos_segmentation_icm: string | null = null,
    atropos_segmentation_use_euclidean_distance: 0 | 1 | null = null,
    test_debug_mode: number | null = null,
): AntsAtroposN4ShParametersTagged {
    const params = {
        "@type": "ants/antsAtroposN4.sh" as const,
        "image_dimension": image_dimension,
        "input_image": input_image,
        "mask_image": mask_image,
        "number_of_classes": number_of_classes,
        "output_prefix": output_prefix,
        "segmentation_priors": segmentation_priors,
    };
    if (max_n4_atropos_iterations !== null) {
        params["max_n4_atropos_iterations"] = max_n4_atropos_iterations;
    }
    if (max_atropos_iterations !== null) {
        params["max_atropos_iterations"] = max_atropos_iterations;
    }
    if (mrf !== null) {
        params["mrf"] = mrf;
    }
    if (denoise_anatomical_images !== null) {
        params["denoise_anatomical_images"] = denoise_anatomical_images;
    }
    if (posterior_formulation !== null) {
        params["posterior_formulation"] = posterior_formulation;
    }
    if (label_propagation !== null) {
        params["label_propagation"] = label_propagation;
    }
    if (posterior_label_for_n4_weight_mask !== null) {
        params["posterior_label_for_n4_weight_mask"] = posterior_label_for_n4_weight_mask;
    }
    if (image_file_suffix !== null) {
        params["image_file_suffix"] = image_file_suffix;
    }
    if (keep_temporary_files !== null) {
        params["keep_temporary_files"] = keep_temporary_files;
    }
    if (use_random_seeding !== null) {
        params["use_random_seeding"] = use_random_seeding;
    }
    if (atropos_segmentation_prior_weight !== null) {
        params["atropos_segmentation_prior_weight"] = atropos_segmentation_prior_weight;
    }
    if (n4_convergence !== null) {
        params["n4_convergence"] = n4_convergence;
    }
    if (n4_shrink_factor !== null) {
        params["n4_shrink_factor"] = n4_shrink_factor;
    }
    if (n4_bspline_params !== null) {
        params["n4_bspline_params"] = n4_bspline_params;
    }
    if (atropos_segmentation_icm !== null) {
        params["atropos_segmentation_icm"] = atropos_segmentation_icm;
    }
    if (atropos_segmentation_use_euclidean_distance !== null) {
        params["atropos_segmentation_use_euclidean_distance"] = atropos_segmentation_use_euclidean_distance;
    }
    if (test_debug_mode !== null) {
        params["test_debug_mode"] = test_debug_mode;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_atropos_n4_sh_cargs(
    params: AntsAtroposN4ShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsAtroposN4.sh");
    cargs.push(
        "-d",
        String((params["image_dimension"] ?? null))
    );
    cargs.push(
        "-a",
        execution.inputFile((params["input_image"] ?? null))
    );
    cargs.push(
        "-x",
        execution.inputFile((params["mask_image"] ?? null))
    );
    cargs.push(
        "-c",
        String((params["number_of_classes"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_prefix"] ?? null)
    );
    if ((params["max_n4_atropos_iterations"] ?? null) !== null) {
        cargs.push(
            "-m",
            String((params["max_n4_atropos_iterations"] ?? null))
        );
    }
    if ((params["max_atropos_iterations"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["max_atropos_iterations"] ?? null))
        );
    }
    cargs.push(
        "-p",
        ...ants_atropos_n4_sh_segmentation_priors_cargs((params["segmentation_priors"] ?? null), execution)
    );
    if ((params["mrf"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["mrf"] ?? null)
        );
    }
    if ((params["denoise_anatomical_images"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["denoise_anatomical_images"] ?? null))
        );
    }
    if ((params["posterior_formulation"] ?? null) !== null) {
        cargs.push(
            "-b",
            (params["posterior_formulation"] ?? null)
        );
    }
    if ((params["label_propagation"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["label_propagation"] ?? null)
        );
    }
    if ((params["posterior_label_for_n4_weight_mask"] ?? null) !== null) {
        cargs.push(
            "-y",
            (params["posterior_label_for_n4_weight_mask"] ?? null)
        );
    }
    if ((params["image_file_suffix"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["image_file_suffix"] ?? null)
        );
    }
    if ((params["keep_temporary_files"] ?? null) !== null) {
        cargs.push(
            "-k",
            String((params["keep_temporary_files"] ?? null))
        );
    }
    if ((params["use_random_seeding"] ?? null) !== null) {
        cargs.push(
            "-u",
            String((params["use_random_seeding"] ?? null))
        );
    }
    if ((params["atropos_segmentation_prior_weight"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["atropos_segmentation_prior_weight"] ?? null))
        );
    }
    if ((params["n4_convergence"] ?? null) !== null) {
        cargs.push(
            "-e",
            (params["n4_convergence"] ?? null)
        );
    }
    if ((params["n4_shrink_factor"] ?? null) !== null) {
        cargs.push(
            "-f",
            String((params["n4_shrink_factor"] ?? null))
        );
    }
    if ((params["n4_bspline_params"] ?? null) !== null) {
        cargs.push(
            "-q",
            (params["n4_bspline_params"] ?? null)
        );
    }
    if ((params["atropos_segmentation_icm"] ?? null) !== null) {
        cargs.push(
            "-i",
            (params["atropos_segmentation_icm"] ?? null)
        );
    }
    if ((params["atropos_segmentation_use_euclidean_distance"] ?? null) !== null) {
        cargs.push(
            "-j",
            String((params["atropos_segmentation_use_euclidean_distance"] ?? null))
        );
    }
    if ((params["test_debug_mode"] ?? null) !== null) {
        cargs.push(
            "-z",
            String((params["test_debug_mode"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_atropos_n4_sh_outputs(
    params: AntsAtroposN4ShParameters,
    execution: Execution,
): AntsAtroposN4ShOutputs {
    const ret: AntsAtroposN4ShOutputs = {
        root: execution.outputFile("."),
        n4_corrected: execution.outputFile([(params["output_prefix"] ?? null), "N4Corrected.[OUTPUT_SUFFIX]"].join('')),
        segmentation: execution.outputFile([(params["output_prefix"] ?? null), "Segmentation.[OUTPUT_SUFFIX]"].join('')),
        segmentation_posteriors: execution.outputFile([(params["output_prefix"] ?? null), "SegmentationPosteriors.[OUTPUT_SUFFIX]"].join('')),
    };
    return ret;
}


/**
 * antsAtroposN4.sh
 *
 * antsAtroposN4.sh iterates between N4 <-> Atropos to improve segmentation results.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsAtroposN4ShOutputs`).
 */
function ants_atropos_n4_sh_execute(
    params: AntsAtroposN4ShParameters,
    runner: Runner | null = null,
): AntsAtroposN4ShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_ATROPOS_N4_SH_METADATA);
    params = execution.params(params)
    const cargs = ants_atropos_n4_sh_cargs(params, execution)
    const ret = ants_atropos_n4_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * antsAtroposN4.sh
 *
 * antsAtroposN4.sh iterates between N4 <-> Atropos to improve segmentation results.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension 2 or 3, for 2- or 3-dimensional image.
 * @param input_image Anatomical image, typically T1. If more than one anatomical image is specified, subsequent images are also used during the segmentation process.
 * @param mask_image Binary mask defining the region of interest.
 * @param number_of_classes Number of classes defining the segmentation.
 * @param output_prefix The following images are created: {output_prefix}N4Corrected.{output_suffix}, {output_prefix}Segmentation.{output_suffix}, {output_prefix}SegmentationPosteriors.{output_suffix}
 * @param segmentation_priors Prior probability images initializing the segmentation. Specified using c-style formatting, e.g. -p labelsPriors%02d.nii.gz. If this is not specified, k-means initialization is used instead.
 * @param max_n4_atropos_iterations Maximum number of (outer loop) iterations between N4 <-> Atropos (default = 15).
 * @param max_atropos_iterations Maximum number of (inner loop) iterations in Atropos (default = 3).
 * @param mrf Specifies MRF prior (of the form '[ weight,neighborhood ]', e.g. '[ 0.1,1x1x1 ]' which is default).
 * @param denoise_anatomical_images Denoise anatomical images (1) or not (0) (default = 1).
 * @param posterior_formulation Posterior formulation and whether or not to use mixture model proportions. e.g 'Socrates[ 1 ]' (default) or 'Aristotle[ 1 ]'.  Choose the latter if you want to use the distance priors, see also the -l option for label propagation control (default = 'Socrates[ 1 ]').
 * @param label_propagation Incorporate a distance prior into the 'Aristotle' posterior formulation. Should be of the form 'label[ lambda,boundaryProbability ]' where label is a value of 1,2,3,... denoting label ID. The label probability for anything outside the current label

  = boundaryProbability * exp( -lambda * distanceFromBoundary )

Intuitively, smaller lambda values will increase the spatial capture range of the distance prior. To apply to all label values, simply omit specifying the label, i.e. -l '[ lambda,boundaryProbability ]'.
 * @param posterior_label_for_n4_weight_mask Which posterior probability image should be used to define the N4 weight mask. Can also specify multiple posteriors in which case the chosen posteriors are combined.
 * @param image_file_suffix Any of the standard ITK IO formats e.g. nrrd, nii.gz (default), mhd.
 * @param keep_temporary_files Keep temporary files on disk (1) or delete them (0) (default = 0).
 * @param use_random_seeding Use random number generated from system clock in Atropos (default = 1).
 * @param atropos_segmentation_prior_weight Atropos spatial prior probability weight for the segmentation (default = 0.25).
 * @param n4_convergence Convergence parameters for N4, see '-c' option in N4BiasFieldCorrection (default = [50x50x50x50,0.0000001]).
 * @param n4_shrink_factor Shrink factor for N4 (default = 4).
 * @param n4_bspline_params N4 b-spline specification, see '-b' option in N4BiasFieldCorrection (default = [200,0,0,0]).
 * @param atropos_segmentation_icm ICM parameters for segmentation, see '-g' option in Atropos (default = [1,1]).
 * @param atropos_segmentation_use_euclidean_distance Use euclidean distances in distance prior formulation (1) or not (0), see Atropos usage for details (default = 1).
 * @param test_debug_mode If > 0, attempts to continue after errors.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsAtroposN4ShOutputs`).
 */
function ants_atropos_n4_sh(
    image_dimension: 2 | 3,
    input_image: InputPathType,
    mask_image: InputPathType,
    number_of_classes: number,
    output_prefix: string,
    segmentation_priors: AntsAtroposN4ShSegmentationPriorsParameters,
    max_n4_atropos_iterations: number | null = null,
    max_atropos_iterations: number | null = null,
    mrf: string | null = null,
    denoise_anatomical_images: 0 | 1 | null = null,
    posterior_formulation: "Socrates[ 1 ]" | "Aristotle[ 1 ]" | null = null,
    label_propagation: string | null = null,
    posterior_label_for_n4_weight_mask: string | null = null,
    image_file_suffix: string | null = null,
    keep_temporary_files: 0 | 1 | null = null,
    use_random_seeding: 0 | 1 | null = null,
    atropos_segmentation_prior_weight: number | null = null,
    n4_convergence: string | null = null,
    n4_shrink_factor: number | null = null,
    n4_bspline_params: string | null = null,
    atropos_segmentation_icm: string | null = null,
    atropos_segmentation_use_euclidean_distance: 0 | 1 | null = null,
    test_debug_mode: number | null = null,
    runner: Runner | null = null,
): AntsAtroposN4ShOutputs {
    const params = ants_atropos_n4_sh_params(image_dimension, input_image, mask_image, number_of_classes, output_prefix, segmentation_priors, max_n4_atropos_iterations, max_atropos_iterations, mrf, denoise_anatomical_images, posterior_formulation, label_propagation, posterior_label_for_n4_weight_mask, image_file_suffix, keep_temporary_files, use_random_seeding, atropos_segmentation_prior_weight, n4_convergence, n4_shrink_factor, n4_bspline_params, atropos_segmentation_icm, atropos_segmentation_use_euclidean_distance, test_debug_mode)
    return ants_atropos_n4_sh_execute(params, runner);
}


export {
      ANTS_ATROPOS_N4_SH_METADATA,
      AntsAtroposN4ShOutputs,
      ants_atropos_n4_sh,
      ants_atropos_n4_sh_execute,
      ants_atropos_n4_sh_params,
      ants_atropos_n4_sh_segmentation_priors_params,
};
