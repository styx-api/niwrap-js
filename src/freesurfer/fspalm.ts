// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSPALM_METADATA: Metadata = {
    id: "6423174c0a141ab40ff807e3980bfa4f3ce57b18.boutiques",
    name: "fspalm",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FspalmParameters {
    "@type": "freesurfer.fspalm";
    "glmdir": string;
    "cft": number;
    "cwp": number;
    "onetail": boolean;
    "twotail": boolean;
    "name"?: string | null | undefined;
    "iters"?: number | null | undefined;
    "monly": boolean;
    "pponly": boolean;
    "octave": boolean;
    "centroid": boolean;
    "2spaces": boolean;
    "3spaces": boolean;
    "pargs"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fspalm": fspalm_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fspalm(...)`.
 *
 * @interface
 */
interface FspalmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param glmdir The mri_glmfit directory to prepare
 * @param cft Voxel-wise cluster forming threshold (CFT), -log10(p)
 * @param cwp Clusterwise p-value threshold
 * @param onetail Perform a one-tailed test
 * @param twotail Perform a two-tailed test. NOTE: changes CFT
 * @param name Name of palm subdirectory (default="palm")
 * @param iters Number of iterations
 * @param monly Only create matlab file, do not run
 * @param pponly Only perform post-processing
 * @param octave Run with octave, not matlab
 * @param centroid Add --centroid flag to mri_surfcluster post-processing
 * @param v_2spaces Bonferroni-correct for 2 spaces
 * @param v_3spaces Bonferroni-correct for 3 spaces
 * @param pargs Supply additional args to be passed to the palm function
 *
 * @returns Parameter dictionary
 */
function fspalm_params(
    glmdir: string,
    cft: number,
    cwp: number,
    onetail: boolean = false,
    twotail: boolean = false,
    name: string | null = null,
    iters: number | null = null,
    monly: boolean = false,
    pponly: boolean = false,
    octave: boolean = false,
    centroid: boolean = false,
    v_2spaces: boolean = false,
    v_3spaces: boolean = false,
    pargs: string | null = null,
): FspalmParameters {
    const params = {
        "@type": "freesurfer.fspalm" as const,
        "glmdir": glmdir,
        "cft": cft,
        "cwp": cwp,
        "onetail": onetail,
        "twotail": twotail,
        "monly": monly,
        "pponly": pponly,
        "octave": octave,
        "centroid": centroid,
        "2spaces": v_2spaces,
        "3spaces": v_3spaces,
    };
    if (name !== null) {
        params["name"] = name;
    }
    if (iters !== null) {
        params["iters"] = iters;
    }
    if (pargs !== null) {
        params["pargs"] = pargs;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fspalm_cargs(
    params: FspalmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fspalm");
    cargs.push(
        "--glmdir",
        (params["glmdir"] ?? null)
    );
    cargs.push(
        "--cft",
        String((params["cft"] ?? null))
    );
    cargs.push(
        "--cwp",
        String((params["cwp"] ?? null))
    );
    if ((params["onetail"] ?? null)) {
        cargs.push("--onetail");
    }
    if ((params["twotail"] ?? null)) {
        cargs.push("--twotail");
    }
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "--name",
            (params["name"] ?? null)
        );
    }
    if ((params["iters"] ?? null) !== null) {
        cargs.push(
            "--iters",
            String((params["iters"] ?? null))
        );
    }
    if ((params["monly"] ?? null)) {
        cargs.push("--monly");
    }
    if ((params["pponly"] ?? null)) {
        cargs.push("--pponly");
    }
    if ((params["octave"] ?? null)) {
        cargs.push("--octave");
    }
    if ((params["centroid"] ?? null)) {
        cargs.push("--centroid");
    }
    if ((params["2spaces"] ?? null)) {
        cargs.push("--2spaces");
    }
    if ((params["3spaces"] ?? null)) {
        cargs.push("--3spaces");
    }
    if ((params["pargs"] ?? null) !== null) {
        cargs.push(
            "--pargs",
            (params["pargs"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fspalm_outputs(
    params: FspalmParameters,
    execution: Execution,
): FspalmOutputs {
    const ret: FspalmOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Prepares and analyzes the output of mri_glmfit for Permutation Analysis of Linear Models (PALM) to correct for multiple comparisons.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FspalmOutputs`).
 */
function fspalm_execute(
    params: FspalmParameters,
    execution: Execution,
): FspalmOutputs {
    params = execution.params(params)
    const cargs = fspalm_cargs(params, execution)
    const ret = fspalm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Prepares and analyzes the output of mri_glmfit for Permutation Analysis of Linear Models (PALM) to correct for multiple comparisons.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param glmdir The mri_glmfit directory to prepare
 * @param cft Voxel-wise cluster forming threshold (CFT), -log10(p)
 * @param cwp Clusterwise p-value threshold
 * @param onetail Perform a one-tailed test
 * @param twotail Perform a two-tailed test. NOTE: changes CFT
 * @param name Name of palm subdirectory (default="palm")
 * @param iters Number of iterations
 * @param monly Only create matlab file, do not run
 * @param pponly Only perform post-processing
 * @param octave Run with octave, not matlab
 * @param centroid Add --centroid flag to mri_surfcluster post-processing
 * @param v_2spaces Bonferroni-correct for 2 spaces
 * @param v_3spaces Bonferroni-correct for 3 spaces
 * @param pargs Supply additional args to be passed to the palm function
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FspalmOutputs`).
 */
function fspalm(
    glmdir: string,
    cft: number,
    cwp: number,
    onetail: boolean = false,
    twotail: boolean = false,
    name: string | null = null,
    iters: number | null = null,
    monly: boolean = false,
    pponly: boolean = false,
    octave: boolean = false,
    centroid: boolean = false,
    v_2spaces: boolean = false,
    v_3spaces: boolean = false,
    pargs: string | null = null,
    runner: Runner | null = null,
): FspalmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSPALM_METADATA);
    const params = fspalm_params(glmdir, cft, cwp, onetail, twotail, name, iters, monly, pponly, octave, centroid, v_2spaces, v_3spaces, pargs)
    return fspalm_execute(params, execution);
}


export {
      FSPALM_METADATA,
      FspalmOutputs,
      FspalmParameters,
      fspalm,
      fspalm_cargs,
      fspalm_execute,
      fspalm_outputs,
      fspalm_params,
};
