// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIENA_FLIRT_METADATA: Metadata = {
    id: "5849d878e5b18b6832cde274764cb89a8b0fa71a.boutiques",
    name: "siena_flirt",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SienaFlirtParameters {
    "__STYXTYPE__": "siena_flirt";
    "input1_fileroot": string;
    "input2_fileroot": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "siena_flirt": siena_flirt_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "siena_flirt": siena_flirt_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `siena_flirt(...)`.
 *
 * @interface
 */
interface SienaFlirtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output transformation matrix file
     */
    output_transform_matrix: OutputPathType;
    /**
     * Output registered image
     */
    output_registered_image: OutputPathType;
}


function siena_flirt_params(
    input1_fileroot: string,
    input2_fileroot: string,
): SienaFlirtParameters {
    /**
     * Build parameters.
    
     * @param input1_fileroot First input file root (e.g. first time-point image root, without file extension)
     * @param input2_fileroot Second input file root (e.g. second time-point image root, without file extension)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "siena_flirt" as const,
        "input1_fileroot": input1_fileroot,
        "input2_fileroot": input2_fileroot,
    };
    return params;
}


function siena_flirt_cargs(
    params: SienaFlirtParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("siena_flirt");
    cargs.push((params["input1_fileroot"] ?? null));
    cargs.push((params["input2_fileroot"] ?? null));
    return cargs;
}


function siena_flirt_outputs(
    params: SienaFlirtParameters,
    execution: Execution,
): SienaFlirtOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SienaFlirtOutputs = {
        root: execution.outputFile("."),
        output_transform_matrix: execution.outputFile([(params["input1_fileroot"] ?? null), "_to_", (params["input2_fileroot"] ?? null), "_flirt.mat"].join('')),
        output_registered_image: execution.outputFile([(params["input1_fileroot"] ?? null), "_to_", (params["input2_fileroot"] ?? null), "_flirt.nii.gz"].join('')),
    };
    return ret;
}


function siena_flirt_execute(
    params: SienaFlirtParameters,
    execution: Execution,
): SienaFlirtOutputs {
    /**
     * Wrapper for FLIRT image registration within the SIENA framework.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SienaFlirtOutputs`).
     */
    params = execution.params(params)
    const cargs = siena_flirt_cargs(params, execution)
    const ret = siena_flirt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function siena_flirt(
    input1_fileroot: string,
    input2_fileroot: string,
    runner: Runner | null = null,
): SienaFlirtOutputs {
    /**
     * Wrapper for FLIRT image registration within the SIENA framework.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input1_fileroot First input file root (e.g. first time-point image root, without file extension)
     * @param input2_fileroot Second input file root (e.g. second time-point image root, without file extension)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SienaFlirtOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIENA_FLIRT_METADATA);
    const params = siena_flirt_params(input1_fileroot, input2_fileroot)
    return siena_flirt_execute(params, execution);
}


export {
      SIENA_FLIRT_METADATA,
      SienaFlirtOutputs,
      SienaFlirtParameters,
      siena_flirt,
      siena_flirt_params,
};
