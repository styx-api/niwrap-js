// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_VALIDATE_SKULL_STRIPPED_METADATA: Metadata = {
    id: "66a7a4466fdb7b810c88a24d0012d9b6303845fb.boutiques",
    name: "mri_validate_skull_stripped",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriValidateSkullStrippedParameters {
    "@type"?: "freesurfer/mri_validate_skull_stripped";
    "mri_reference": InputPathType;
    "mri_test": InputPathType;
    "weight": number;
}
type MriValidateSkullStrippedParametersTagged = Required<Pick<MriValidateSkullStrippedParameters, '@type'>> & MriValidateSkullStrippedParameters;


/**
 * Output object returned when calling `MriValidateSkullStrippedParameters(...)`.
 *
 * @interface
 */
interface MriValidateSkullStrippedOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param mri_reference Reference MRI image to compare against.
 * @param mri_test Test MRI image that has undergone skull stripping.
 * @param weight Weight parameter, should be greater than 1.
 *
 * @returns Parameter dictionary
 */
function mri_validate_skull_stripped_params(
    mri_reference: InputPathType,
    mri_test: InputPathType,
    weight: number,
): MriValidateSkullStrippedParametersTagged {
    const params = {
        "@type": "freesurfer/mri_validate_skull_stripped" as const,
        "mri_reference": mri_reference,
        "mri_test": mri_test,
        "weight": weight,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_validate_skull_stripped_cargs(
    params: MriValidateSkullStrippedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_validate_skull_stripped");
    cargs.push(execution.inputFile((params["mri_reference"] ?? null)));
    cargs.push(execution.inputFile((params["mri_test"] ?? null)));
    cargs.push(String((params["weight"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_validate_skull_stripped_outputs(
    params: MriValidateSkullStrippedParameters,
    execution: Execution,
): MriValidateSkullStrippedOutputs {
    const ret: MriValidateSkullStrippedOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_validate_skull_stripped
 *
 * Tool to validate skull stripped MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriValidateSkullStrippedOutputs`).
 */
function mri_validate_skull_stripped_execute(
    params: MriValidateSkullStrippedParameters,
    runner: Runner | null = null,
): MriValidateSkullStrippedOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_VALIDATE_SKULL_STRIPPED_METADATA);
    params = execution.params(params)
    const cargs = mri_validate_skull_stripped_cargs(params, execution)
    const ret = mri_validate_skull_stripped_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_validate_skull_stripped
 *
 * Tool to validate skull stripped MRI images.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param mri_reference Reference MRI image to compare against.
 * @param mri_test Test MRI image that has undergone skull stripping.
 * @param weight Weight parameter, should be greater than 1.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriValidateSkullStrippedOutputs`).
 */
function mri_validate_skull_stripped(
    mri_reference: InputPathType,
    mri_test: InputPathType,
    weight: number,
    runner: Runner | null = null,
): MriValidateSkullStrippedOutputs {
    const params = mri_validate_skull_stripped_params(mri_reference, mri_test, weight)
    return mri_validate_skull_stripped_execute(params, runner);
}


export {
      MRI_VALIDATE_SKULL_STRIPPED_METADATA,
      MriValidateSkullStrippedOutputs,
      mri_validate_skull_stripped,
      mri_validate_skull_stripped_execute,
      mri_validate_skull_stripped_params,
};
