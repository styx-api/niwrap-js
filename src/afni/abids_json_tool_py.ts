// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ABIDS_JSON_TOOL_PY_METADATA: Metadata = {
    id: "9cd5d1cbe0772f0f1c51d0bd811ef0336e43437f.boutiques",
    name: "abids_json_tool.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AbidsJsonToolPyParameters {
    "__STYXTYPE__": "abids_json_tool.py";
    "input_file": InputPathType;
    "prefix": string;
    "del_json"?: string | null | undefined;
    "values_stay_str": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "abids_json_tool.py": abids_json_tool_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `abids_json_tool_py(...)`.
 *
 * @interface
 */
interface AbidsJsonToolPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function abids_json_tool_py_params(
    input_file: InputPathType,
    prefix: string,
    del_json: string | null = null,
    values_stay_str: boolean = false,
): AbidsJsonToolPyParameters {
    /**
     * Build parameters.
    
     * @param input_file One file to convert. Enter NULL with -add_json to create new json file.
     * @param prefix Output file name.
     * @param del_json Remove attribute (KEY) from the -input json file.
     * @param values_stay_str Each numeric or str item gets saved as a str; otherwise, guess at int and float.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "abids_json_tool.py" as const,
        "input_file": input_file,
        "prefix": prefix,
        "values_stay_str": values_stay_str,
    };
    if (del_json !== null) {
        params["del_json"] = del_json;
    }
    return params;
}


function abids_json_tool_py_cargs(
    params: AbidsJsonToolPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("abids_json_tool.py");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["del_json"] ?? null) !== null) {
        cargs.push(
            "-del_json",
            (params["del_json"] ?? null)
        );
    }
    if ((params["values_stay_str"] ?? null)) {
        cargs.push("-values_stay_str");
    }
    return cargs;
}


function abids_json_tool_py_outputs(
    params: AbidsJsonToolPyParameters,
    execution: Execution,
): AbidsJsonToolPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AbidsJsonToolPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function abids_json_tool_py_execute(
    params: AbidsJsonToolPyParameters,
    execution: Execution,
): AbidsJsonToolPyOutputs {
    /**
     * This script helps to manipulate json files in various ways.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AbidsJsonToolPyOutputs`).
     */
    params = execution.params(params)
    const cargs = abids_json_tool_py_cargs(params, execution)
    const ret = abids_json_tool_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function abids_json_tool_py(
    input_file: InputPathType,
    prefix: string,
    del_json: string | null = null,
    values_stay_str: boolean = false,
    runner: Runner | null = null,
): AbidsJsonToolPyOutputs {
    /**
     * This script helps to manipulate json files in various ways.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file One file to convert. Enter NULL with -add_json to create new json file.
     * @param prefix Output file name.
     * @param del_json Remove attribute (KEY) from the -input json file.
     * @param values_stay_str Each numeric or str item gets saved as a str; otherwise, guess at int and float.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AbidsJsonToolPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ABIDS_JSON_TOOL_PY_METADATA);
    const params = abids_json_tool_py_params(input_file, prefix, del_json, values_stay_str)
    return abids_json_tool_py_execute(params, execution);
}


export {
      ABIDS_JSON_TOOL_PY_METADATA,
      AbidsJsonToolPyOutputs,
      AbidsJsonToolPyParameters,
      abids_json_tool_py,
      abids_json_tool_py_params,
};
