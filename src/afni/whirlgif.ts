// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const WHIRLGIF_METADATA: Metadata = {
    id: "90ac51da8b1e5f7cdec9e864a32a24e4ccdb9243.boutiques",
    name: "whirlgif",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface WhirlgifParameters {
    "__STYXTYPE__": "whirlgif";
    "verbose": boolean;
    "loop"?: string | null | undefined;
    "transparency_index"?: number | null | undefined;
    "inter_frame_delay"?: number | null | undefined;
    "outfile"?: string | null | undefined;
    "infile"?: InputPathType | null | undefined;
    "gif_files": Array<InputPathType>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "whirlgif": whirlgif_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "whirlgif": whirlgif_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `whirlgif(...)`.
 *
 * @interface
 */
interface WhirlgifOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output GIF file
     */
    output_gif: OutputPathType | null;
}


function whirlgif_params(
    gif_files: Array<InputPathType>,
    verbose: boolean = false,
    loop: string | null = null,
    transparency_index: number | null = null,
    inter_frame_delay: number | null = null,
    outfile: string | null = null,
    infile: InputPathType | null = null,
): WhirlgifParameters {
    /**
     * Build parameters.
    
     * @param gif_files Input GIF files to be combined into a single GIF file.
     * @param verbose Verbose mode
     * @param loop Add the Netscape 'loop' extension. Optionally specify a loop count.
     * @param transparency_index Set the colormap index 'index' to be transparent.
     * @param inter_frame_delay Inter-frame timing delay.
     * @param outfile Specify the output file to write the results to.
     * @param infile Read a list of filenames from a file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "whirlgif" as const,
        "verbose": verbose,
        "gif_files": gif_files,
    };
    if (loop !== null) {
        params["loop"] = loop;
    }
    if (transparency_index !== null) {
        params["transparency_index"] = transparency_index;
    }
    if (inter_frame_delay !== null) {
        params["inter_frame_delay"] = inter_frame_delay;
    }
    if (outfile !== null) {
        params["outfile"] = outfile;
    }
    if (infile !== null) {
        params["infile"] = infile;
    }
    return params;
}


function whirlgif_cargs(
    params: WhirlgifParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("whirlgif");
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["loop"] ?? null) !== null) {
        cargs.push(
            "-loop",
            (params["loop"] ?? null)
        );
    }
    if ((params["transparency_index"] ?? null) !== null) {
        cargs.push(
            "-trans",
            String((params["transparency_index"] ?? null))
        );
    }
    if ((params["inter_frame_delay"] ?? null) !== null) {
        cargs.push(
            "-time",
            String((params["inter_frame_delay"] ?? null))
        );
    }
    if ((params["outfile"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["outfile"] ?? null)
        );
    }
    if ((params["infile"] ?? null) !== null) {
        cargs.push(
            "-i",
            execution.inputFile((params["infile"] ?? null))
        );
    }
    cargs.push(...(params["gif_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


function whirlgif_outputs(
    params: WhirlgifParameters,
    execution: Execution,
): WhirlgifOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: WhirlgifOutputs = {
        root: execution.outputFile("."),
        output_gif: ((params["outfile"] ?? null) !== null) ? execution.outputFile([(params["outfile"] ?? null)].join('')) : null,
    };
    return ret;
}


function whirlgif_execute(
    params: WhirlgifParameters,
    execution: Execution,
): WhirlgifOutputs {
    /**
     * A quick program that reads a series of GIF files and produces a single GIF file composed of those images.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `WhirlgifOutputs`).
     */
    params = execution.params(params)
    const cargs = whirlgif_cargs(params, execution)
    const ret = whirlgif_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function whirlgif(
    gif_files: Array<InputPathType>,
    verbose: boolean = false,
    loop: string | null = null,
    transparency_index: number | null = null,
    inter_frame_delay: number | null = null,
    outfile: string | null = null,
    infile: InputPathType | null = null,
    runner: Runner | null = null,
): WhirlgifOutputs {
    /**
     * A quick program that reads a series of GIF files and produces a single GIF file composed of those images.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param gif_files Input GIF files to be combined into a single GIF file.
     * @param verbose Verbose mode
     * @param loop Add the Netscape 'loop' extension. Optionally specify a loop count.
     * @param transparency_index Set the colormap index 'index' to be transparent.
     * @param inter_frame_delay Inter-frame timing delay.
     * @param outfile Specify the output file to write the results to.
     * @param infile Read a list of filenames from a file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `WhirlgifOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(WHIRLGIF_METADATA);
    const params = whirlgif_params(gif_files, verbose, loop, transparency_index, inter_frame_delay, outfile, infile)
    return whirlgif_execute(params, execution);
}


export {
      WHIRLGIF_METADATA,
      WhirlgifOutputs,
      WhirlgifParameters,
      whirlgif,
      whirlgif_params,
};
