// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1DCAT_METADATA: Metadata = {
    id: "6497fba75068a5e9c7d3930e26c7a5f42390e7b0.boutiques",
    name: "1dcat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dcatParameters {
    "__STYXTYPE__": "1dcat";
    "input_files": Array<InputPathType>;
    "tsv_output": boolean;
    "csv_output": boolean;
    "nonconst_output": boolean;
    "nonfixed_output": boolean;
    "number_format"?: string | null | undefined;
    "stack_output": boolean;
    "column_row_selection"?: string | null | undefined;
    "ok_empty": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "1dcat": v_1dcat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "1dcat": v_1dcat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1dcat(...)`.
 *
 * @interface
 */
interface V1dcatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Concatenated output in specified format
     */
    concatenated_output: OutputPathType;
}


function v_1dcat_params(
    input_files: Array<InputPathType>,
    tsv_output: boolean = false,
    csv_output: boolean = false,
    nonconst_output: boolean = false,
    nonfixed_output: boolean = false,
    number_format: string | null = null,
    stack_output: boolean = false,
    column_row_selection: string | null = null,
    ok_empty: boolean = false,
): V1dcatParameters {
    /**
     * Build parameters.
    
     * @param input_files Input 1D or TSV/CSV files to concatenate
     * @param tsv_output Output in TSV format with tabs as separators and a header line
     * @param csv_output Output in CSV format with commas as separators and a header line
     * @param nonconst_output Omit columns that are identically constant from the output
     * @param nonfixed_output Keep only columns marked as 'free' in the 3dAllineate header
     * @param number_format Specify the format of the numbers to be output
     * @param stack_output Stack the columns of the resulting matrix in the output
     * @param column_row_selection Apply the same column/row selection string to all filenames on the command line
     * @param ok_empty Exit quietly when encountering an empty file on disk
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "1dcat" as const,
        "input_files": input_files,
        "tsv_output": tsv_output,
        "csv_output": csv_output,
        "nonconst_output": nonconst_output,
        "nonfixed_output": nonfixed_output,
        "stack_output": stack_output,
        "ok_empty": ok_empty,
    };
    if (number_format !== null) {
        params["number_format"] = number_format;
    }
    if (column_row_selection !== null) {
        params["column_row_selection"] = column_row_selection;
    }
    return params;
}


function v_1dcat_cargs(
    params: V1dcatParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("1dcat");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["tsv_output"] ?? null)) {
        cargs.push("-tsvout");
    }
    if ((params["csv_output"] ?? null)) {
        cargs.push("-csvout");
    }
    if ((params["nonconst_output"] ?? null)) {
        cargs.push("-nonconst");
    }
    if ((params["nonfixed_output"] ?? null)) {
        cargs.push("-nonfixed");
    }
    if ((params["number_format"] ?? null) !== null) {
        cargs.push(
            "-form",
            (params["number_format"] ?? null)
        );
    }
    if ((params["stack_output"] ?? null)) {
        cargs.push("-stack");
    }
    if ((params["column_row_selection"] ?? null) !== null) {
        cargs.push(
            "-sel",
            (params["column_row_selection"] ?? null)
        );
    }
    if ((params["ok_empty"] ?? null)) {
        cargs.push("-OKempty");
    }
    return cargs;
}


function v_1dcat_outputs(
    params: V1dcatParameters,
    execution: Execution,
): V1dcatOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V1dcatOutputs = {
        root: execution.outputFile("."),
        concatenated_output: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


function v_1dcat_execute(
    params: V1dcatParameters,
    execution: Execution,
): V1dcatOutputs {
    /**
     * Concatenates columns of multiple 1D or TSV/CSV files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V1dcatOutputs`).
     */
    params = execution.params(params)
    const cargs = v_1dcat_cargs(params, execution)
    const ret = v_1dcat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_1dcat(
    input_files: Array<InputPathType>,
    tsv_output: boolean = false,
    csv_output: boolean = false,
    nonconst_output: boolean = false,
    nonfixed_output: boolean = false,
    number_format: string | null = null,
    stack_output: boolean = false,
    column_row_selection: string | null = null,
    ok_empty: boolean = false,
    runner: Runner | null = null,
): V1dcatOutputs {
    /**
     * Concatenates columns of multiple 1D or TSV/CSV files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_files Input 1D or TSV/CSV files to concatenate
     * @param tsv_output Output in TSV format with tabs as separators and a header line
     * @param csv_output Output in CSV format with commas as separators and a header line
     * @param nonconst_output Omit columns that are identically constant from the output
     * @param nonfixed_output Keep only columns marked as 'free' in the 3dAllineate header
     * @param number_format Specify the format of the numbers to be output
     * @param stack_output Stack the columns of the resulting matrix in the output
     * @param column_row_selection Apply the same column/row selection string to all filenames on the command line
     * @param ok_empty Exit quietly when encountering an empty file on disk
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V1dcatOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1DCAT_METADATA);
    const params = v_1dcat_params(input_files, tsv_output, csv_output, nonconst_output, nonfixed_output, number_format, stack_output, column_row_selection, ok_empty)
    return v_1dcat_execute(params, execution);
}


export {
      V1dcatOutputs,
      V1dcatParameters,
      V_1DCAT_METADATA,
      v_1dcat,
      v_1dcat_params,
};
