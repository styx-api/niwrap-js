// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACK_IMA_TCL_METADATA: Metadata = {
    id: "f7bb633c8e2fc57cba56d642be005b58715d8346.boutiques",
    name: "unpack_ima.tcl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UnpackImaTclParameters {
    "__STYXTYPE__": "unpack_ima.tcl";
    "target_dir": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "unpack_ima.tcl": unpack_ima_tcl_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `unpack_ima_tcl(...)`.
 *
 * @interface
 */
interface UnpackImaTclOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function unpack_ima_tcl_params(
    target_dir: string = "~",
): UnpackImaTclParameters {
    /**
     * Build parameters.
    
     * @param target_dir Target directory to unpack the files.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "unpack_ima.tcl" as const,
        "target_dir": target_dir,
    };
    return params;
}


function unpack_ima_tcl_cargs(
    params: UnpackImaTclParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("unpack_ima.tcl");
    cargs.push((params["target_dir"] ?? null));
    return cargs;
}


function unpack_ima_tcl_outputs(
    params: UnpackImaTclParameters,
    execution: Execution,
): UnpackImaTclOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: UnpackImaTclOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function unpack_ima_tcl_execute(
    params: UnpackImaTclParameters,
    execution: Execution,
): UnpackImaTclOutputs {
    /**
     * A tool to unpack MRI DICOM .ima files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `UnpackImaTclOutputs`).
     */
    params = execution.params(params)
    const cargs = unpack_ima_tcl_cargs(params, execution)
    const ret = unpack_ima_tcl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function unpack_ima_tcl(
    target_dir: string = "~",
    runner: Runner | null = null,
): UnpackImaTclOutputs {
    /**
     * A tool to unpack MRI DICOM .ima files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param target_dir Target directory to unpack the files.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `UnpackImaTclOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACK_IMA_TCL_METADATA);
    const params = unpack_ima_tcl_params(target_dir)
    return unpack_ima_tcl_execute(params, execution);
}


export {
      UNPACK_IMA_TCL_METADATA,
      UnpackImaTclOutputs,
      UnpackImaTclParameters,
      unpack_ima_tcl,
      unpack_ima_tcl_params,
};
