// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MEANVAL_METADATA: Metadata = {
    id: "abff5f1715da97f4e48f1b5b12b06bbfdebcd6e0.boutiques",
    name: "meanval",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MeanvalParameters {
    "__STYXTYPE__": "meanval";
    "input_file": InputPathType;
    "mask_file": InputPathType;
    "output_file": string;
    "avgwf_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "meanval": meanval_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "meanval": meanval_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `meanval(...)`.
 *
 * @interface
 */
interface MeanvalOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing the mean value calculated
     */
    mean_output_file: OutputPathType;
}


function meanval_params(
    input_file: InputPathType,
    mask_file: InputPathType,
    output_file: string,
    avgwf_flag: boolean = false,
): MeanvalParameters {
    /**
     * Build parameters.
    
     * @param input_file Input volume file
     * @param mask_file Mask file
     * @param output_file Output file where mean value will be stored
     * @param avgwf_flag Flag to calculate the average waveform
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "meanval" as const,
        "input_file": input_file,
        "mask_file": mask_file,
        "output_file": output_file,
        "avgwf_flag": avgwf_flag,
    };
    return params;
}


function meanval_cargs(
    params: MeanvalParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("meanval");
    cargs.push(
        "--i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "--m",
        execution.inputFile((params["mask_file"] ?? null))
    );
    cargs.push(
        "--o",
        (params["output_file"] ?? null)
    );
    if ((params["avgwf_flag"] ?? null)) {
        cargs.push("--avgwf");
    }
    return cargs;
}


function meanval_outputs(
    params: MeanvalParameters,
    execution: Execution,
): MeanvalOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MeanvalOutputs = {
        root: execution.outputFile("."),
        mean_output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function meanval_execute(
    params: MeanvalParameters,
    execution: Execution,
): MeanvalOutputs {
    /**
     * Tool to calculate the mean value of an image within a mask.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MeanvalOutputs`).
     */
    params = execution.params(params)
    const cargs = meanval_cargs(params, execution)
    const ret = meanval_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function meanval(
    input_file: InputPathType,
    mask_file: InputPathType,
    output_file: string,
    avgwf_flag: boolean = false,
    runner: Runner | null = null,
): MeanvalOutputs {
    /**
     * Tool to calculate the mean value of an image within a mask.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Input volume file
     * @param mask_file Mask file
     * @param output_file Output file where mean value will be stored
     * @param avgwf_flag Flag to calculate the average waveform
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MeanvalOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MEANVAL_METADATA);
    const params = meanval_params(input_file, mask_file, output_file, avgwf_flag)
    return meanval_execute(params, execution);
}


export {
      MEANVAL_METADATA,
      MeanvalOutputs,
      MeanvalParameters,
      meanval,
      meanval_params,
};
