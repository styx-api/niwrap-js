// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FLOAT_SCAN_METADATA: Metadata = {
    id: "d795b3de53df65306720fe08c5de7896c3c07e43.boutiques",
    name: "float_scan",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FloatScanParameters {
    "__STYXTYPE__": "float_scan";
    "fix_illegal_values": boolean;
    "verbose_mode": boolean;
    "skip_count"?: number | null | undefined;
    "input_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "float_scan": float_scan_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "float_scan": float_scan_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `float_scan(...)`.
 *
 * @interface
 */
interface FloatScanOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with illegal values replaced by 0 when -fix flag is used
     */
    stdout_file: OutputPathType;
}


function float_scan_params(
    input_file: InputPathType,
    fix_illegal_values: boolean = false,
    verbose_mode: boolean = false,
    skip_count: number | null = null,
): FloatScanParameters {
    /**
     * Build parameters.
    
     * @param input_file Input file containing IEEE floating point numbers
     * @param fix_illegal_values Writes a copy of the input file to stdout, replacing illegal values with 0.
     * @param verbose_mode Verbose mode: print out index of each illegal value.
     * @param skip_count Skip the first n floating point locations (i.e., the first 4*n bytes) in the file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "float_scan" as const,
        "fix_illegal_values": fix_illegal_values,
        "verbose_mode": verbose_mode,
        "input_file": input_file,
    };
    if (skip_count !== null) {
        params["skip_count"] = skip_count;
    }
    return params;
}


function float_scan_cargs(
    params: FloatScanParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("float_scan");
    if ((params["fix_illegal_values"] ?? null)) {
        cargs.push("-fix");
    }
    if ((params["verbose_mode"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["skip_count"] ?? null) !== null) {
        cargs.push(
            "-skip",
            String((params["skip_count"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    return cargs;
}


function float_scan_outputs(
    params: FloatScanParameters,
    execution: Execution,
): FloatScanOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FloatScanOutputs = {
        root: execution.outputFile("."),
        stdout_file: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


function float_scan_execute(
    params: FloatScanParameters,
    execution: Execution,
): FloatScanOutputs {
    /**
     * Scans the input file of IEEE floating point numbers for illegal values: infinities and not-a-number (NaN) values.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FloatScanOutputs`).
     */
    params = execution.params(params)
    const cargs = float_scan_cargs(params, execution)
    const ret = float_scan_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function float_scan(
    input_file: InputPathType,
    fix_illegal_values: boolean = false,
    verbose_mode: boolean = false,
    skip_count: number | null = null,
    runner: Runner | null = null,
): FloatScanOutputs {
    /**
     * Scans the input file of IEEE floating point numbers for illegal values: infinities and not-a-number (NaN) values.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Input file containing IEEE floating point numbers
     * @param fix_illegal_values Writes a copy of the input file to stdout, replacing illegal values with 0.
     * @param verbose_mode Verbose mode: print out index of each illegal value.
     * @param skip_count Skip the first n floating point locations (i.e., the first 4*n bytes) in the file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FloatScanOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FLOAT_SCAN_METADATA);
    const params = float_scan_params(input_file, fix_illegal_values, verbose_mode, skip_count)
    return float_scan_execute(params, execution);
}


export {
      FLOAT_SCAN_METADATA,
      FloatScanOutputs,
      FloatScanParameters,
      float_scan,
      float_scan_params,
};
