// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TEST_RECON_ALL_CSH_METADATA: Metadata = {
    id: "8a506cfdb2909e12c556c93e0ac799ee0dea072c.boutiques",
    name: "test_recon-all.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TestReconAllCshParameters {
    "@type"?: "freesurfer/test_recon-all.csh";
    "reference_subj_source_dir"?: string | null | undefined;
    "reference_subjid"?: string | null | undefined;
    "test_subject_dest_dir"?: string | null | undefined;
    "test_subjid"?: string | null | undefined;
    "freesurfer_home"?: string | null | undefined;
    "norecon": boolean;
}
type TestReconAllCshParametersTagged = Required<Pick<TestReconAllCshParameters, '@type'>> & TestReconAllCshParameters;


/**
 * Output object returned when calling `TestReconAllCshParameters(...)`.
 *
 * @interface
 */
interface TestReconAllCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output from the recon-all utility.
     */
    recon_all_output: OutputPathType;
    /**
     * Output from the mri_diff utility.
     */
    mri_diff_output: OutputPathType;
    /**
     * Output from the mri_compute_seg_overlap utility.
     */
    mri_compute_seg_overlap_output: OutputPathType;
    /**
     * Output from the mris_diff utility.
     */
    mris_diff_output: OutputPathType;
    /**
     * Output from the mri_surf2surf utility.
     */
    mri_surf2surf_output: OutputPathType;
    /**
     * Output from the mris_compute_parc_overlap utility.
     */
    mris_compute_parc_overlap_output: OutputPathType;
    /**
     * Output from the diff utility.
     */
    diff_output: OutputPathType;
    /**
     * Output from the asegstatsdiff utility.
     */
    asegstatsdiff_output: OutputPathType;
    /**
     * Output from the aparcstatsdiff utility.
     */
    aparcstatsdiff_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param reference_subj_source_dir Directory of the reference subject source.
 * @param reference_subjid ID of the reference subject.
 * @param test_subject_dest_dir Directory for the test subject destination.
 * @param test_subjid ID of the test subject.
 * @param freesurfer_home Path to the FreeSurfer installation directory.
 * @param norecon Flag to indicate that recon-all should not be run.
 *
 * @returns Parameter dictionary
 */
function test_recon_all_csh_params(
    reference_subj_source_dir: string | null = null,
    reference_subjid: string | null = null,
    test_subject_dest_dir: string | null = null,
    test_subjid: string | null = null,
    freesurfer_home: string | null = null,
    norecon: boolean = false,
): TestReconAllCshParametersTagged {
    const params = {
        "@type": "freesurfer/test_recon-all.csh" as const,
        "norecon": norecon,
    };
    if (reference_subj_source_dir !== null) {
        params["reference_subj_source_dir"] = reference_subj_source_dir;
    }
    if (reference_subjid !== null) {
        params["reference_subjid"] = reference_subjid;
    }
    if (test_subject_dest_dir !== null) {
        params["test_subject_dest_dir"] = test_subject_dest_dir;
    }
    if (test_subjid !== null) {
        params["test_subjid"] = test_subjid;
    }
    if (freesurfer_home !== null) {
        params["freesurfer_home"] = freesurfer_home;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function test_recon_all_csh_cargs(
    params: TestReconAllCshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("test_recon-all.csh");
    if ((params["reference_subj_source_dir"] ?? null) !== null) {
        cargs.push(
            "-rsd",
            (params["reference_subj_source_dir"] ?? null)
        );
    }
    if ((params["reference_subjid"] ?? null) !== null) {
        cargs.push(
            "-rs",
            (params["reference_subjid"] ?? null)
        );
    }
    if ((params["test_subject_dest_dir"] ?? null) !== null) {
        cargs.push(
            "-tsd",
            (params["test_subject_dest_dir"] ?? null)
        );
    }
    if ((params["test_subjid"] ?? null) !== null) {
        cargs.push(
            "-ts",
            (params["test_subjid"] ?? null)
        );
    }
    if ((params["freesurfer_home"] ?? null) !== null) {
        cargs.push(
            "-fshome",
            (params["freesurfer_home"] ?? null)
        );
    }
    if ((params["norecon"] ?? false)) {
        cargs.push("-norecon");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function test_recon_all_csh_outputs(
    params: TestReconAllCshParameters,
    execution: Execution,
): TestReconAllCshOutputs {
    const ret: TestReconAllCshOutputs = {
        root: execution.outputFile("."),
        recon_all_output: execution.outputFile(["recon_all_output.txt"].join('')),
        mri_diff_output: execution.outputFile(["mri_diff_output.txt"].join('')),
        mri_compute_seg_overlap_output: execution.outputFile(["mri_compute_seg_overlap_output.txt"].join('')),
        mris_diff_output: execution.outputFile(["mris_diff_output.txt"].join('')),
        mri_surf2surf_output: execution.outputFile(["mri_surf2surf_output.txt"].join('')),
        mris_compute_parc_overlap_output: execution.outputFile(["mris_compute_parc_overlap_output.txt"].join('')),
        diff_output: execution.outputFile(["diff_output.txt"].join('')),
        asegstatsdiff_output: execution.outputFile(["asegstatsdiff_output.txt"].join('')),
        aparcstatsdiff_output: execution.outputFile(["aparcstatsdiff_output.txt"].join('')),
    };
    return ret;
}


/**
 * test_recon-all.csh
 *
 * Script for testing recon-all and other utilities with FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TestReconAllCshOutputs`).
 */
function test_recon_all_csh_execute(
    params: TestReconAllCshParameters,
    runner: Runner | null = null,
): TestReconAllCshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TEST_RECON_ALL_CSH_METADATA);
    params = execution.params(params)
    const cargs = test_recon_all_csh_cargs(params, execution)
    const ret = test_recon_all_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * test_recon-all.csh
 *
 * Script for testing recon-all and other utilities with FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param reference_subj_source_dir Directory of the reference subject source.
 * @param reference_subjid ID of the reference subject.
 * @param test_subject_dest_dir Directory for the test subject destination.
 * @param test_subjid ID of the test subject.
 * @param freesurfer_home Path to the FreeSurfer installation directory.
 * @param norecon Flag to indicate that recon-all should not be run.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TestReconAllCshOutputs`).
 */
function test_recon_all_csh(
    reference_subj_source_dir: string | null = null,
    reference_subjid: string | null = null,
    test_subject_dest_dir: string | null = null,
    test_subjid: string | null = null,
    freesurfer_home: string | null = null,
    norecon: boolean = false,
    runner: Runner | null = null,
): TestReconAllCshOutputs {
    const params = test_recon_all_csh_params(reference_subj_source_dir, reference_subjid, test_subject_dest_dir, test_subjid, freesurfer_home, norecon)
    return test_recon_all_csh_execute(params, runner);
}


export {
      TEST_RECON_ALL_CSH_METADATA,
      TestReconAllCshOutputs,
      test_recon_all_csh,
      test_recon_all_csh_execute,
      test_recon_all_csh_params,
};
