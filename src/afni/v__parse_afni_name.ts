// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__PARSE_AFNI_NAME_METADATA: Metadata = {
    id: "f4c06e2ac839984a80a47e169a89027f909df950.boutiques",
    name: "@parse_afni_name",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VParseAfniNameParameters {
    "@type": "afni.@parse_afni_name";
    "afni_name": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@parse_afni_name": v__parse_afni_name_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@parse_afni_name": v__parse_afni_name_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__parse_afni_name(...)`.
 *
 * @interface
 */
interface VParseAfniNameOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output path parsed from the AFNI name
     */
    output_path: OutputPathType;
    /**
     * Output prefix parsed from the AFNI name
     */
    output_prefix: OutputPathType;
    /**
     * Output view parsed from the AFNI name
     */
    output_view: OutputPathType;
    /**
     * Output sub-brick selection string parsed from the AFNI name
     */
    output_subbrick: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param afni_name The AFNI name to be parsed
 *
 * @returns Parameter dictionary
 */
function v__parse_afni_name_params(
    afni_name: string,
): VParseAfniNameParameters {
    const params = {
        "@type": "afni.@parse_afni_name" as const,
        "afni_name": afni_name,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__parse_afni_name_cargs(
    params: VParseAfniNameParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@parse_afni_name");
    cargs.push((params["afni_name"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__parse_afni_name_outputs(
    params: VParseAfniNameParameters,
    execution: Execution,
): VParseAfniNameOutputs {
    const ret: VParseAfniNameOutputs = {
        root: execution.outputFile("."),
        output_path: execution.outputFile(["parsed_name_path.txt"].join('')),
        output_prefix: execution.outputFile(["parsed_name_prefix.txt"].join('')),
        output_view: execution.outputFile(["parsed_name_view.txt"].join('')),
        output_subbrick: execution.outputFile(["parsed_name_subbrick.txt"].join('')),
    };
    return ret;
}


/**
 * @parse_afni_name
 *
 * A script to parse an AFNI name, outputting the path, prefix, view, and sub-brick selection string.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VParseAfniNameOutputs`).
 */
function v__parse_afni_name_execute(
    params: VParseAfniNameParameters,
    runner: Runner | null = null,
): VParseAfniNameOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__PARSE_AFNI_NAME_METADATA);
    params = execution.params(params)
    const cargs = v__parse_afni_name_cargs(params, execution)
    const ret = v__parse_afni_name_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @parse_afni_name
 *
 * A script to parse an AFNI name, outputting the path, prefix, view, and sub-brick selection string.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param afni_name The AFNI name to be parsed
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VParseAfniNameOutputs`).
 */
function v__parse_afni_name(
    afni_name: string,
    runner: Runner | null = null,
): VParseAfniNameOutputs {
    const params = v__parse_afni_name_params(afni_name)
    return v__parse_afni_name_execute(params, runner);
}


export {
      VParseAfniNameOutputs,
      VParseAfniNameParameters,
      V__PARSE_AFNI_NAME_METADATA,
      v__parse_afni_name,
      v__parse_afni_name_execute,
      v__parse_afni_name_params,
};
