// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLSIZE_METADATA: Metadata = {
    id: "0e62170c91253f2d2dac79736f7cbce706903786.boutiques",
    name: "fslsize",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslsizeParameters {
    "__STYXTYPE__": "fslsize";
    "input_file": InputPathType;
    "short_format_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslsize": fslsize_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslsize(...)`.
 *
 * @interface
 */
interface FslsizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fslsize_params(
    input_file: InputPathType,
    short_format_flag: boolean = false,
): FslsizeParameters {
    /**
     * Build parameters.
    
     * @param input_file Input image file
     * @param short_format_flag Output using short format (one line)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslsize" as const,
        "input_file": input_file,
        "short_format_flag": short_format_flag,
    };
    return params;
}


function fslsize_cargs(
    params: FslsizeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslsize");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["short_format_flag"] ?? null)) {
        cargs.push("-s");
    }
    return cargs;
}


function fslsize_outputs(
    params: FslsizeParameters,
    execution: Execution,
): FslsizeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslsizeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fslsize_execute(
    params: FslsizeParameters,
    execution: Execution,
): FslsizeOutputs {
    /**
     * Tool to output the size of an image file in FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslsizeOutputs`).
     */
    params = execution.params(params)
    const cargs = fslsize_cargs(params, execution)
    const ret = fslsize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslsize(
    input_file: InputPathType,
    short_format_flag: boolean = false,
    runner: Runner | null = null,
): FslsizeOutputs {
    /**
     * Tool to output the size of an image file in FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file Input image file
     * @param short_format_flag Output using short format (one line)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslsizeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLSIZE_METADATA);
    const params = fslsize_params(input_file, short_format_flag)
    return fslsize_execute(params, execution);
}


export {
      FSLSIZE_METADATA,
      FslsizeOutputs,
      FslsizeParameters,
      fslsize,
      fslsize_params,
};
