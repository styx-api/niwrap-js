// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BET2_METADATA: Metadata = {
    id: "060880fcfdba043292768b18e2d94a940747fdd9.boutiques",
    name: "bet2",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Bet2Parameters {
    "__STYXTYPE__": "bet2";
    "input_fileroot": string;
    "output_fileroot": string;
    "fractional_intensity"?: number | null | undefined;
    "vertical_gradient"?: number | null | undefined;
    "center_of_gravity"?: Array<number> | null | undefined;
    "outline_flag": boolean;
    "mask_flag": boolean;
    "skull_flag": boolean;
    "no_output_flag": boolean;
    "mesh_flag": boolean;
    "head_radius"?: number | null | undefined;
    "smooth_factor"?: number | null | undefined;
    "threshold_flag": boolean;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "bet2": bet2_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "bet2": bet2_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `bet2(...)`.
 *
 * @interface
 */
interface Bet2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Binary brain mask output (if mask flag is set)
     */
    output_mask: OutputPathType;
    /**
     * Approximate skull image output (if skull flag is set)
     */
    output_skull: OutputPathType;
    /**
     * Brain surface mesh output in VTK format (if mesh flag is set)
     */
    output_mesh: OutputPathType;
    /**
     * Brain surface outline overlaid onto original image (if outline flag is set)
     */
    output_overlay: OutputPathType;
}


function bet2_params(
    input_fileroot: string,
    output_fileroot: string,
    fractional_intensity: number | null = null,
    vertical_gradient: number | null = null,
    center_of_gravity: Array<number> | null = null,
    outline_flag: boolean = false,
    mask_flag: boolean = false,
    skull_flag: boolean = false,
    no_output_flag: boolean = false,
    mesh_flag: boolean = false,
    head_radius: number | null = null,
    smooth_factor: number | null = null,
    threshold_flag: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): Bet2Parameters {
    /**
     * Build parameters.
    
     * @param input_fileroot Input file root (e.g. img)
     * @param output_fileroot Output file root (e.g. img_bet)
     * @param fractional_intensity Fractional intensity threshold (0->1); default=0.5; smaller values give larger brain outline estimates
     * @param vertical_gradient Vertical gradient in fractional intensity threshold (-1->1); default=0; positive values give larger brain outline at bottom, smaller at top
     * @param center_of_gravity The xyz coordinates of the center of gravity (voxels, not mm) of initial mesh surface. Must have exactly three numerical entries in the list (3-vector).
     * @param outline_flag Generate brain surface outline overlaid onto original image
     * @param mask_flag Generate binary brain mask
     * @param skull_flag Generate approximate skull image
     * @param no_output_flag Don't generate segmented brain image output
     * @param mesh_flag Generate brain surface as mesh in vtk format
     * @param head_radius Head radius (mm not voxels); initial surface sphere is set to half of this
     * @param smooth_factor Smoothness factor; default=1; values smaller than 1 produce more detailed brain surface, values larger than one produce smoother, less detailed surface
     * @param threshold_flag Apply thresholding to segmented brain image and mask
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display help message and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "bet2" as const,
        "input_fileroot": input_fileroot,
        "output_fileroot": output_fileroot,
        "outline_flag": outline_flag,
        "mask_flag": mask_flag,
        "skull_flag": skull_flag,
        "no_output_flag": no_output_flag,
        "mesh_flag": mesh_flag,
        "threshold_flag": threshold_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (fractional_intensity !== null) {
        params["fractional_intensity"] = fractional_intensity;
    }
    if (vertical_gradient !== null) {
        params["vertical_gradient"] = vertical_gradient;
    }
    if (center_of_gravity !== null) {
        params["center_of_gravity"] = center_of_gravity;
    }
    if (head_radius !== null) {
        params["head_radius"] = head_radius;
    }
    if (smooth_factor !== null) {
        params["smooth_factor"] = smooth_factor;
    }
    return params;
}


function bet2_cargs(
    params: Bet2Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("bet2");
    cargs.push((params["input_fileroot"] ?? null));
    cargs.push((params["output_fileroot"] ?? null));
    if ((params["fractional_intensity"] ?? null) !== null) {
        cargs.push(
            "-f",
            String((params["fractional_intensity"] ?? null))
        );
    }
    if ((params["vertical_gradient"] ?? null) !== null) {
        cargs.push(
            "-g",
            String((params["vertical_gradient"] ?? null))
        );
    }
    if ((params["center_of_gravity"] ?? null) !== null) {
        cargs.push(
            "-c",
            ...(params["center_of_gravity"] ?? null).map(String)
        );
    }
    if ((params["outline_flag"] ?? null)) {
        cargs.push("-o");
    }
    if ((params["mask_flag"] ?? null)) {
        cargs.push("-m");
    }
    if ((params["skull_flag"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["no_output_flag"] ?? null)) {
        cargs.push("-n");
    }
    if ((params["mesh_flag"] ?? null)) {
        cargs.push("-e");
    }
    if ((params["head_radius"] ?? null) !== null) {
        cargs.push(
            "-r",
            String((params["head_radius"] ?? null))
        );
    }
    if ((params["smooth_factor"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["smooth_factor"] ?? null))
        );
    }
    if ((params["threshold_flag"] ?? null)) {
        cargs.push("-t");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


function bet2_outputs(
    params: Bet2Parameters,
    execution: Execution,
): Bet2Outputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Bet2Outputs = {
        root: execution.outputFile("."),
        output_mask: execution.outputFile([(params["output_fileroot"] ?? null), "_mask.nii.gz"].join('')),
        output_skull: execution.outputFile([(params["output_fileroot"] ?? null), "_skull.nii.gz"].join('')),
        output_mesh: execution.outputFile([(params["output_fileroot"] ?? null), "_mesh.vtk"].join('')),
        output_overlay: execution.outputFile([(params["output_fileroot"] ?? null), "_overlay.nii.gz"].join('')),
    };
    return ret;
}


function bet2_execute(
    params: Bet2Parameters,
    execution: Execution,
): Bet2Outputs {
    /**
     * Automated brain extraction tool for FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Bet2Outputs`).
     */
    params = execution.params(params)
    const cargs = bet2_cargs(params, execution)
    const ret = bet2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function bet2(
    input_fileroot: string,
    output_fileroot: string,
    fractional_intensity: number | null = null,
    vertical_gradient: number | null = null,
    center_of_gravity: Array<number> | null = null,
    outline_flag: boolean = false,
    mask_flag: boolean = false,
    skull_flag: boolean = false,
    no_output_flag: boolean = false,
    mesh_flag: boolean = false,
    head_radius: number | null = null,
    smooth_factor: number | null = null,
    threshold_flag: boolean = false,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): Bet2Outputs {
    /**
     * Automated brain extraction tool for FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_fileroot Input file root (e.g. img)
     * @param output_fileroot Output file root (e.g. img_bet)
     * @param fractional_intensity Fractional intensity threshold (0->1); default=0.5; smaller values give larger brain outline estimates
     * @param vertical_gradient Vertical gradient in fractional intensity threshold (-1->1); default=0; positive values give larger brain outline at bottom, smaller at top
     * @param center_of_gravity The xyz coordinates of the center of gravity (voxels, not mm) of initial mesh surface. Must have exactly three numerical entries in the list (3-vector).
     * @param outline_flag Generate brain surface outline overlaid onto original image
     * @param mask_flag Generate binary brain mask
     * @param skull_flag Generate approximate skull image
     * @param no_output_flag Don't generate segmented brain image output
     * @param mesh_flag Generate brain surface as mesh in vtk format
     * @param head_radius Head radius (mm not voxels); initial surface sphere is set to half of this
     * @param smooth_factor Smoothness factor; default=1; values smaller than 1 produce more detailed brain surface, values larger than one produce smoother, less detailed surface
     * @param threshold_flag Apply thresholding to segmented brain image and mask
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display help message and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Bet2Outputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BET2_METADATA);
    const params = bet2_params(input_fileroot, output_fileroot, fractional_intensity, vertical_gradient, center_of_gravity, outline_flag, mask_flag, skull_flag, no_output_flag, mesh_flag, head_radius, smooth_factor, threshold_flag, verbose_flag, help_flag)
    return bet2_execute(params, execution);
}


export {
      BET2_METADATA,
      Bet2Outputs,
      Bet2Parameters,
      bet2,
      bet2_params,
};
