// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_COMPUTE_VOLUME_INTENSITIES_METADATA: Metadata = {
    id: "45ae774d2336d807239cb10e6ca5a797474fe7bd.boutiques",
    name: "mri_compute_volume_intensities",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriComputeVolumeIntensitiesParameters {
    "__STYXTYPE__": "mri_compute_volume_intensities";
    "input_intensity": InputPathType;
    "volume_fraction_stem": string;
    "output_volume": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_compute_volume_intensities": mri_compute_volume_intensities_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_compute_volume_intensities": mri_compute_volume_intensities_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_compute_volume_intensities(...)`.
 *
 * @interface
 */
interface MriComputeVolumeIntensitiesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Computed output volume file
     */
    output_volume_file: OutputPathType;
}


function mri_compute_volume_intensities_params(
    input_intensity: InputPathType,
    volume_fraction_stem: string,
    output_volume: string,
): MriComputeVolumeIntensitiesParameters {
    /**
     * Build parameters.
    
     * @param input_intensity Input intensity volume
     * @param volume_fraction_stem Volume fraction stem
     * @param output_volume Output volume file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_compute_volume_intensities" as const,
        "input_intensity": input_intensity,
        "volume_fraction_stem": volume_fraction_stem,
        "output_volume": output_volume,
    };
    return params;
}


function mri_compute_volume_intensities_cargs(
    params: MriComputeVolumeIntensitiesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_compute_volume_intensities");
    cargs.push(execution.inputFile((params["input_intensity"] ?? null)));
    cargs.push((params["volume_fraction_stem"] ?? null));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


function mri_compute_volume_intensities_outputs(
    params: MriComputeVolumeIntensitiesParameters,
    execution: Execution,
): MriComputeVolumeIntensitiesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriComputeVolumeIntensitiesOutputs = {
        root: execution.outputFile("."),
        output_volume_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


function mri_compute_volume_intensities_execute(
    params: MriComputeVolumeIntensitiesParameters,
    execution: Execution,
): MriComputeVolumeIntensitiesOutputs {
    /**
     * A tool to compute volume intensities for a given input intensity volume and volume fraction stem.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriComputeVolumeIntensitiesOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_compute_volume_intensities_cargs(params, execution)
    const ret = mri_compute_volume_intensities_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_compute_volume_intensities(
    input_intensity: InputPathType,
    volume_fraction_stem: string,
    output_volume: string,
    runner: Runner | null = null,
): MriComputeVolumeIntensitiesOutputs {
    /**
     * A tool to compute volume intensities for a given input intensity volume and volume fraction stem.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_intensity Input intensity volume
     * @param volume_fraction_stem Volume fraction stem
     * @param output_volume Output volume file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriComputeVolumeIntensitiesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_COMPUTE_VOLUME_INTENSITIES_METADATA);
    const params = mri_compute_volume_intensities_params(input_intensity, volume_fraction_stem, output_volume)
    return mri_compute_volume_intensities_execute(params, execution);
}


export {
      MRI_COMPUTE_VOLUME_INTENSITIES_METADATA,
      MriComputeVolumeIntensitiesOutputs,
      MriComputeVolumeIntensitiesParameters,
      mri_compute_volume_intensities,
      mri_compute_volume_intensities_params,
};
