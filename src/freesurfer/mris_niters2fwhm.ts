// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_NITERS2FWHM_METADATA: Metadata = {
    id: "2e0641d671ca38217303524c22a35b4ae4f19dd4.boutiques",
    name: "mris_niters2fwhm",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisNiters2fwhmParameters {
    "__STYXTYPE__": "mris_niters2fwhm";
    "subject": string;
    "hemi": string;
    "surf": string;
    "dof": number;
    "niters": number;
    "debug": boolean;
    "checkopts": boolean;
    "help": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_niters2fwhm": mris_niters2fwhm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_niters2fwhm(...)`.
 *
 * @interface
 */
interface MrisNiters2fwhmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_niters2fwhm_params(
    subject: string,
    hemi: string,
    surf: string,
    dof: number,
    niters: number,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
): MrisNiters2fwhmParameters {
    /**
     * Build parameters.
    
     * @param subject Subject identifier
     * @param hemi Hemisphere (e.g., lh or rh)
     * @param surf Surface type (e.g., white, pial)
     * @param dof Degrees of Freedom
     * @param niters Maximum number of iterations
     * @param debug Turn on debugging
     * @param checkopts Don't run anything, just check options and exit
     * @param help Print out information on how to use this program
     * @param version Print out version and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_niters2fwhm" as const,
        "subject": subject,
        "hemi": hemi,
        "surf": surf,
        "dof": dof,
        "niters": niters,
        "debug": debug,
        "checkopts": checkopts,
        "help": help,
        "version": version,
    };
    return params;
}


function mris_niters2fwhm_cargs(
    params: MrisNiters2fwhmParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_niters2fwhm");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--h",
        (params["hemi"] ?? null)
    );
    cargs.push(
        "--surf",
        (params["surf"] ?? null)
    );
    cargs.push(
        "--dof",
        String((params["dof"] ?? null))
    );
    cargs.push(
        "--niters",
        String((params["niters"] ?? null))
    );
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function mris_niters2fwhm_outputs(
    params: MrisNiters2fwhmParameters,
    execution: Execution,
): MrisNiters2fwhmOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisNiters2fwhmOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_niters2fwhm_execute(
    params: MrisNiters2fwhmParameters,
    execution: Execution,
): MrisNiters2fwhmOutputs {
    /**
     * Convert number of iterations to full width at half maximum (FWHM) for surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisNiters2fwhmOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_niters2fwhm_cargs(params, execution)
    const ret = mris_niters2fwhm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_niters2fwhm(
    subject: string,
    hemi: string,
    surf: string,
    dof: number,
    niters: number,
    debug: boolean = false,
    checkopts: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrisNiters2fwhmOutputs {
    /**
     * Convert number of iterations to full width at half maximum (FWHM) for surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject identifier
     * @param hemi Hemisphere (e.g., lh or rh)
     * @param surf Surface type (e.g., white, pial)
     * @param dof Degrees of Freedom
     * @param niters Maximum number of iterations
     * @param debug Turn on debugging
     * @param checkopts Don't run anything, just check options and exit
     * @param help Print out information on how to use this program
     * @param version Print out version and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisNiters2fwhmOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_NITERS2FWHM_METADATA);
    const params = mris_niters2fwhm_params(subject, hemi, surf, dof, niters, debug, checkopts, help, version)
    return mris_niters2fwhm_execute(params, execution);
}


export {
      MRIS_NITERS2FWHM_METADATA,
      MrisNiters2fwhmOutputs,
      MrisNiters2fwhmParameters,
      mris_niters2fwhm,
      mris_niters2fwhm_params,
};
