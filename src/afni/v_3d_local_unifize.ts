// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LOCAL_UNIFIZE_METADATA: Metadata = {
    id: "15f1fc4af844d2f3848e6e3527f1534179ded986.boutiques",
    name: "3dLocalUnifize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLocalUnifizeParameters {
    "__STYXTYPE__": "3dLocalUnifize";
    "input": InputPathType;
    "output": string;
    "working_dir"?: string | null | undefined;
    "echo": boolean;
    "no_clean": boolean;
    "local_rad"?: number | null | undefined;
    "local_perc"?: number | null | undefined;
    "local_mask"?: string | null | undefined;
    "filter_thr"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dLocalUnifize": v_3d_local_unifize_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dLocalUnifize": v_3d_local_unifize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_local_unifize(...)`.
 *
 * @interface
 */
interface V3dLocalUnifizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset file
     */
    output_file: OutputPathType;
}


function v_3d_local_unifize_params(
    input: InputPathType,
    output: string,
    working_dir: string | null = null,
    echo: boolean = false,
    no_clean: boolean = false,
    local_rad: number | null = null,
    local_perc: number | null = null,
    local_mask: string | null = null,
    filter_thr: number | null = null,
): V3dLocalUnifizeParameters {
    /**
     * Build parameters.
    
     * @param input Input dataset
     * @param output Output dataset name, including path
     * @param working_dir Name of temporary working directory (def: __wdir_LocalUni_, plus a random alphanumeric str)
     * @param echo Run this program very verbosely (default: false)
     * @param no_clean Do not remove the working directory (default: remove it)
     * @param local_rad The spherical neighborhood's radius for the 3dLocalStat step (default: -3)
     * @param local_perc The percentile used in the 3dLocalStat step, generating the scaling volume (default: 50)
     * @param local_mask Provide the masking option for the 3dLocalStat step; to remove any masking, put 'None' as the option value (default: "-automask")
     * @param filter_thr Ceiling on values in the final, scaled dataset; values <=0 turn off this final filtering (default: 1.5)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dLocalUnifize" as const,
        "input": input,
        "output": output,
        "echo": echo,
        "no_clean": no_clean,
    };
    if (working_dir !== null) {
        params["working_dir"] = working_dir;
    }
    if (local_rad !== null) {
        params["local_rad"] = local_rad;
    }
    if (local_perc !== null) {
        params["local_perc"] = local_perc;
    }
    if (local_mask !== null) {
        params["local_mask"] = local_mask;
    }
    if (filter_thr !== null) {
        params["filter_thr"] = filter_thr;
    }
    return params;
}


function v_3d_local_unifize_cargs(
    params: V3dLocalUnifizeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dLocalUnifize");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push(
        "-prefix",
        (params["output"] ?? null)
    );
    if ((params["working_dir"] ?? null) !== null) {
        cargs.push(
            "-wdir_name",
            (params["working_dir"] ?? null)
        );
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    if ((params["local_rad"] ?? null) !== null) {
        cargs.push(
            "-local_rad",
            String((params["local_rad"] ?? null))
        );
    }
    if ((params["local_perc"] ?? null) !== null) {
        cargs.push(
            "-local_perc",
            String((params["local_perc"] ?? null))
        );
    }
    if ((params["local_mask"] ?? null) !== null) {
        cargs.push(
            "-local_mask",
            (params["local_mask"] ?? null)
        );
    }
    if ((params["filter_thr"] ?? null) !== null) {
        cargs.push(
            "-filter_thr",
            String((params["filter_thr"] ?? null))
        );
    }
    return cargs;
}


function v_3d_local_unifize_outputs(
    params: V3dLocalUnifizeParameters,
    execution: Execution,
): V3dLocalUnifizeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dLocalUnifizeOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function v_3d_local_unifize_execute(
    params: V3dLocalUnifizeParameters,
    execution: Execution,
): V3dLocalUnifizeOutputs {
    /**
     * This program generates a 'unifized' output volume by estimating the median in the local neighborhood of each voxel and using that to scale each voxel's brightness.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dLocalUnifizeOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_local_unifize_cargs(params, execution)
    const ret = v_3d_local_unifize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_local_unifize(
    input: InputPathType,
    output: string,
    working_dir: string | null = null,
    echo: boolean = false,
    no_clean: boolean = false,
    local_rad: number | null = null,
    local_perc: number | null = null,
    local_mask: string | null = null,
    filter_thr: number | null = null,
    runner: Runner | null = null,
): V3dLocalUnifizeOutputs {
    /**
     * This program generates a 'unifized' output volume by estimating the median in the local neighborhood of each voxel and using that to scale each voxel's brightness.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input Input dataset
     * @param output Output dataset name, including path
     * @param working_dir Name of temporary working directory (def: __wdir_LocalUni_, plus a random alphanumeric str)
     * @param echo Run this program very verbosely (default: false)
     * @param no_clean Do not remove the working directory (default: remove it)
     * @param local_rad The spherical neighborhood's radius for the 3dLocalStat step (default: -3)
     * @param local_perc The percentile used in the 3dLocalStat step, generating the scaling volume (default: 50)
     * @param local_mask Provide the masking option for the 3dLocalStat step; to remove any masking, put 'None' as the option value (default: "-automask")
     * @param filter_thr Ceiling on values in the final, scaled dataset; values <=0 turn off this final filtering (default: 1.5)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dLocalUnifizeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LOCAL_UNIFIZE_METADATA);
    const params = v_3d_local_unifize_params(input, output, working_dir, echo, no_clean, local_rad, local_perc, local_mask, filter_thr)
    return v_3d_local_unifize_execute(params, execution);
}


export {
      V3dLocalUnifizeOutputs,
      V3dLocalUnifizeParameters,
      V_3D_LOCAL_UNIFIZE_METADATA,
      v_3d_local_unifize,
      v_3d_local_unifize_params,
};
