// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_DWI_TO_DT_METADATA: Metadata = {
    id: "802161f8f0acfd7af6348446316cf5b2c086b7ef.boutiques",
    name: "fat_proc_dwi_to_dt",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcDwiToDtParameters {
    "__STYXTYPE__": "fat_proc_dwi_to_dt";
    "in_dwi": InputPathType;
    "in_gradmat": InputPathType;
    "prefix": string;
    "in_bvals"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "mask_from_struc": boolean;
    "in_struc_res"?: InputPathType | null | undefined;
    "in_ref_orig"?: InputPathType | null | undefined;
    "prefix_dti"?: string | null | undefined;
    "flip_x": boolean;
    "flip_y": boolean;
    "flip_z": boolean;
    "no_flip": boolean;
    "no_scale_out_1000": boolean;
    "no_reweight": boolean;
    "no_cumulative_wts": boolean;
    "qc_fa_thr"?: number | null | undefined;
    "qc_fa_max"?: number | null | undefined;
    "qc_fa_unc_max"?: number | null | undefined;
    "qc_v12_unc_max"?: number | null | undefined;
    "qc_prefix"?: string | null | undefined;
    "no_qc_view": boolean;
    "no_cmd_out": boolean;
    "workdir"?: string | null | undefined;
    "no_clean": boolean;
    "uncert_off": boolean;
    "uncert_iters"?: number | null | undefined;
    "uncert_extra_cmds"?: string | null | undefined;
    "check_abs_min"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fat_proc_dwi_to_dt": fat_proc_dwi_to_dt_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fat_proc_dwi_to_dt": fat_proc_dwi_to_dt_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_proc_dwi_to_dt(...)`.
 *
 * @interface
 */
interface FatProcDwiToDtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output files generated with the specified prefix.
     */
    output_files: OutputPathType;
}


function fat_proc_dwi_to_dt_params(
    in_dwi: InputPathType,
    in_gradmat: InputPathType,
    prefix: string,
    in_bvals: InputPathType | null = null,
    mask: InputPathType | null = null,
    mask_from_struc: boolean = false,
    in_struc_res: InputPathType | null = null,
    in_ref_orig: InputPathType | null = null,
    prefix_dti: string | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    no_flip: boolean = false,
    no_scale_out_1000: boolean = false,
    no_reweight: boolean = false,
    no_cumulative_wts: boolean = false,
    qc_fa_thr: number | null = null,
    qc_fa_max: number | null = null,
    qc_fa_unc_max: number | null = null,
    qc_v12_unc_max: number | null = null,
    qc_prefix: string | null = null,
    no_qc_view: boolean = false,
    no_cmd_out: boolean = false,
    workdir: string | null = null,
    no_clean: boolean = false,
    uncert_off: boolean = false,
    uncert_iters: number | null = null,
    uncert_extra_cmds: string | null = null,
    check_abs_min: number | null = null,
): FatProcDwiToDtParameters {
    /**
     * Build parameters.
    
     * @param in_dwi 4D volume of N DWIs. Required.
     * @param in_gradmat Input text file of N gradient vectors or bmatrices.
     * @param prefix Set prefix for output DWI data.
     * @param in_bvals Optional, if bvalue information is in a separate file from the b-vectors or matrices.
     * @param mask Optional whole brain mask can be input; otherwise, automasking is performed.
     * @param mask_from_struc Flag to make a mask using 3dSkullStrip+3dmask_tool from the structural file.
     * @param in_struc_res Alignment of the output DWI to the REF data set via anatomical reference; a version of the anatomical that has been resampled to match the DWI set.
     * @param in_ref_orig Use another data set to adjust the DWI and subsequent parameter dsets' orientation and origin.
     * @param prefix_dti Set prefix for output DTI data; default is 'dt'. Do not include path information here.
     * @param flip_x Flip the DW gradients in the x-direction.
     * @param flip_y Flip the DW gradients in the y-direction.
     * @param flip_z Flip the DW gradients in the z-direction.
     * @param no_flip Do not flip the DW gradients.
     * @param no_scale_out_1000 Turn off scaling of physical length units by 1000 for tensor fitting.
     * @param no_reweight Turn off reweighting and refitting of tensors during estimation.
     * @param no_cumulative_wts Turn off displaying overall weight factors for each gradient.
     * @param qc_fa_thr Set threshold for overlay FA volume in QC image.
     * @param qc_fa_max Set cbar max for overlay FA volume in QC image.
     * @param qc_fa_unc_max Set cbar max for overlay uncertainty (stdev) of FA in QC image.
     * @param qc_v12_unc_max Set cbar max for overlay uncertainty (stdev) of V1 towards V2 direction for DTs in QC image.
     * @param qc_prefix Set the prefix of the QC image files separately.
     * @param no_qc_view Turn off generating QC image files.
     * @param no_cmd_out Don't save the command line call of this program and the location where it was run.
     * @param workdir Specify a working directory, which can be removed.
     * @param no_clean Do not remove the working directory.
     * @param uncert_off Don't perform uncertainty calculation.
     * @param uncert_iters Set the number of Monte Carlo iterations for the uncertainty calculation (default: 300).
     * @param uncert_extra_cmds Extra commands for the uncertainty calculations.
     * @param check_abs_min Help the program push through finding tiny negative values in columns that should contain numbers >=0. Provide a tolerance value VVV.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fat_proc_dwi_to_dt" as const,
        "in_dwi": in_dwi,
        "in_gradmat": in_gradmat,
        "prefix": prefix,
        "mask_from_struc": mask_from_struc,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
        "no_flip": no_flip,
        "no_scale_out_1000": no_scale_out_1000,
        "no_reweight": no_reweight,
        "no_cumulative_wts": no_cumulative_wts,
        "no_qc_view": no_qc_view,
        "no_cmd_out": no_cmd_out,
        "no_clean": no_clean,
        "uncert_off": uncert_off,
    };
    if (in_bvals !== null) {
        params["in_bvals"] = in_bvals;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (in_struc_res !== null) {
        params["in_struc_res"] = in_struc_res;
    }
    if (in_ref_orig !== null) {
        params["in_ref_orig"] = in_ref_orig;
    }
    if (prefix_dti !== null) {
        params["prefix_dti"] = prefix_dti;
    }
    if (qc_fa_thr !== null) {
        params["qc_fa_thr"] = qc_fa_thr;
    }
    if (qc_fa_max !== null) {
        params["qc_fa_max"] = qc_fa_max;
    }
    if (qc_fa_unc_max !== null) {
        params["qc_fa_unc_max"] = qc_fa_unc_max;
    }
    if (qc_v12_unc_max !== null) {
        params["qc_v12_unc_max"] = qc_v12_unc_max;
    }
    if (qc_prefix !== null) {
        params["qc_prefix"] = qc_prefix;
    }
    if (workdir !== null) {
        params["workdir"] = workdir;
    }
    if (uncert_iters !== null) {
        params["uncert_iters"] = uncert_iters;
    }
    if (uncert_extra_cmds !== null) {
        params["uncert_extra_cmds"] = uncert_extra_cmds;
    }
    if (check_abs_min !== null) {
        params["check_abs_min"] = check_abs_min;
    }
    return params;
}


function fat_proc_dwi_to_dt_cargs(
    params: FatProcDwiToDtParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fat_proc_dwi_to_dt");
    cargs.push(execution.inputFile((params["in_dwi"] ?? null)));
    cargs.push(
        "-in_col_matA | -in_col_matT | -in_col_vec | -in_row_vec",
        execution.inputFile((params["in_gradmat"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["in_bvals"] ?? null) !== null) {
        cargs.push(
            "-in_bvals",
            execution.inputFile((params["in_bvals"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["mask_from_struc"] ?? null)) {
        cargs.push("-mask_from_struc");
    }
    if ((params["in_struc_res"] ?? null) !== null) {
        cargs.push(
            "-in_struc_res",
            execution.inputFile((params["in_struc_res"] ?? null))
        );
    }
    if ((params["in_ref_orig"] ?? null) !== null) {
        cargs.push(
            "-in_ref_orig",
            execution.inputFile((params["in_ref_orig"] ?? null))
        );
    }
    if ((params["prefix_dti"] ?? null) !== null) {
        cargs.push(
            "-prefix_dti",
            (params["prefix_dti"] ?? null)
        );
    }
    if ((params["flip_x"] ?? null)) {
        cargs.push("-flip_x");
    }
    if ((params["flip_y"] ?? null)) {
        cargs.push("-flip_y");
    }
    if ((params["flip_z"] ?? null)) {
        cargs.push("-flip_z");
    }
    if ((params["no_flip"] ?? null)) {
        cargs.push("-no_flip");
    }
    if ((params["no_scale_out_1000"] ?? null)) {
        cargs.push("-no_scale_out_1000");
    }
    if ((params["no_reweight"] ?? null)) {
        cargs.push("-no_reweight");
    }
    if ((params["no_cumulative_wts"] ?? null)) {
        cargs.push("-no_cumulative_wts");
    }
    if ((params["qc_fa_thr"] ?? null) !== null) {
        cargs.push(
            "-qc_fa_thr",
            String((params["qc_fa_thr"] ?? null))
        );
    }
    if ((params["qc_fa_max"] ?? null) !== null) {
        cargs.push(
            "-qc_fa_max",
            String((params["qc_fa_max"] ?? null))
        );
    }
    if ((params["qc_fa_unc_max"] ?? null) !== null) {
        cargs.push(
            "-qc_fa_unc_max",
            String((params["qc_fa_unc_max"] ?? null))
        );
    }
    if ((params["qc_v12_unc_max"] ?? null) !== null) {
        cargs.push(
            "-qc_v12_unc_max",
            String((params["qc_v12_unc_max"] ?? null))
        );
    }
    if ((params["qc_prefix"] ?? null) !== null) {
        cargs.push(
            "-qc_prefix",
            (params["qc_prefix"] ?? null)
        );
    }
    if ((params["no_qc_view"] ?? null)) {
        cargs.push("-no_qc_view");
    }
    if ((params["no_cmd_out"] ?? null)) {
        cargs.push("-no_cmd_out");
    }
    if ((params["workdir"] ?? null) !== null) {
        cargs.push(
            "-workdir",
            (params["workdir"] ?? null)
        );
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    if ((params["uncert_off"] ?? null)) {
        cargs.push("-uncert_off");
    }
    if ((params["uncert_iters"] ?? null) !== null) {
        cargs.push(
            "-uncert_iters",
            String((params["uncert_iters"] ?? null))
        );
    }
    if ((params["uncert_extra_cmds"] ?? null) !== null) {
        cargs.push(
            "-uncert_extra_cmds",
            (params["uncert_extra_cmds"] ?? null)
        );
    }
    if ((params["check_abs_min"] ?? null) !== null) {
        cargs.push(
            "-check_abs_min",
            String((params["check_abs_min"] ?? null))
        );
    }
    return cargs;
}


function fat_proc_dwi_to_dt_outputs(
    params: FatProcDwiToDtParameters,
    execution: Execution,
): FatProcDwiToDtOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FatProcDwiToDtOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile([(params["prefix"] ?? null), "*"].join('')),
    };
    return ret;
}


function fat_proc_dwi_to_dt_execute(
    params: FatProcDwiToDtParameters,
    execution: Execution,
): FatProcDwiToDtOutputs {
    /**
     * This program fits tensors and DT parameters, as well as the uncertainty of DT parameters needed for tractography.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FatProcDwiToDtOutputs`).
     */
    params = execution.params(params)
    const cargs = fat_proc_dwi_to_dt_cargs(params, execution)
    const ret = fat_proc_dwi_to_dt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fat_proc_dwi_to_dt(
    in_dwi: InputPathType,
    in_gradmat: InputPathType,
    prefix: string,
    in_bvals: InputPathType | null = null,
    mask: InputPathType | null = null,
    mask_from_struc: boolean = false,
    in_struc_res: InputPathType | null = null,
    in_ref_orig: InputPathType | null = null,
    prefix_dti: string | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    no_flip: boolean = false,
    no_scale_out_1000: boolean = false,
    no_reweight: boolean = false,
    no_cumulative_wts: boolean = false,
    qc_fa_thr: number | null = null,
    qc_fa_max: number | null = null,
    qc_fa_unc_max: number | null = null,
    qc_v12_unc_max: number | null = null,
    qc_prefix: string | null = null,
    no_qc_view: boolean = false,
    no_cmd_out: boolean = false,
    workdir: string | null = null,
    no_clean: boolean = false,
    uncert_off: boolean = false,
    uncert_iters: number | null = null,
    uncert_extra_cmds: string | null = null,
    check_abs_min: number | null = null,
    runner: Runner | null = null,
): FatProcDwiToDtOutputs {
    /**
     * This program fits tensors and DT parameters, as well as the uncertainty of DT parameters needed for tractography.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param in_dwi 4D volume of N DWIs. Required.
     * @param in_gradmat Input text file of N gradient vectors or bmatrices.
     * @param prefix Set prefix for output DWI data.
     * @param in_bvals Optional, if bvalue information is in a separate file from the b-vectors or matrices.
     * @param mask Optional whole brain mask can be input; otherwise, automasking is performed.
     * @param mask_from_struc Flag to make a mask using 3dSkullStrip+3dmask_tool from the structural file.
     * @param in_struc_res Alignment of the output DWI to the REF data set via anatomical reference; a version of the anatomical that has been resampled to match the DWI set.
     * @param in_ref_orig Use another data set to adjust the DWI and subsequent parameter dsets' orientation and origin.
     * @param prefix_dti Set prefix for output DTI data; default is 'dt'. Do not include path information here.
     * @param flip_x Flip the DW gradients in the x-direction.
     * @param flip_y Flip the DW gradients in the y-direction.
     * @param flip_z Flip the DW gradients in the z-direction.
     * @param no_flip Do not flip the DW gradients.
     * @param no_scale_out_1000 Turn off scaling of physical length units by 1000 for tensor fitting.
     * @param no_reweight Turn off reweighting and refitting of tensors during estimation.
     * @param no_cumulative_wts Turn off displaying overall weight factors for each gradient.
     * @param qc_fa_thr Set threshold for overlay FA volume in QC image.
     * @param qc_fa_max Set cbar max for overlay FA volume in QC image.
     * @param qc_fa_unc_max Set cbar max for overlay uncertainty (stdev) of FA in QC image.
     * @param qc_v12_unc_max Set cbar max for overlay uncertainty (stdev) of V1 towards V2 direction for DTs in QC image.
     * @param qc_prefix Set the prefix of the QC image files separately.
     * @param no_qc_view Turn off generating QC image files.
     * @param no_cmd_out Don't save the command line call of this program and the location where it was run.
     * @param workdir Specify a working directory, which can be removed.
     * @param no_clean Do not remove the working directory.
     * @param uncert_off Don't perform uncertainty calculation.
     * @param uncert_iters Set the number of Monte Carlo iterations for the uncertainty calculation (default: 300).
     * @param uncert_extra_cmds Extra commands for the uncertainty calculations.
     * @param check_abs_min Help the program push through finding tiny negative values in columns that should contain numbers >=0. Provide a tolerance value VVV.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FatProcDwiToDtOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_DWI_TO_DT_METADATA);
    const params = fat_proc_dwi_to_dt_params(in_dwi, in_gradmat, prefix, in_bvals, mask, mask_from_struc, in_struc_res, in_ref_orig, prefix_dti, flip_x, flip_y, flip_z, no_flip, no_scale_out_1000, no_reweight, no_cumulative_wts, qc_fa_thr, qc_fa_max, qc_fa_unc_max, qc_v12_unc_max, qc_prefix, no_qc_view, no_cmd_out, workdir, no_clean, uncert_off, uncert_iters, uncert_extra_cmds, check_abs_min)
    return fat_proc_dwi_to_dt_execute(params, execution);
}


export {
      FAT_PROC_DWI_TO_DT_METADATA,
      FatProcDwiToDtOutputs,
      FatProcDwiToDtParameters,
      fat_proc_dwi_to_dt,
      fat_proc_dwi_to_dt_params,
};
