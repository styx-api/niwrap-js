// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BIASFIELD_METADATA: Metadata = {
    id: "5981ee8ca338526bd3e95eb71c3b7956f4c7d239.boutiques",
    name: "biasfield",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BiasfieldParameters {
    "__STYXTYPE__": "biasfield";
    "subject": string;
    "tmpdir"?: string | null | undefined;
    "no_cleanup": boolean;
    "help": boolean;
    "debug": boolean;
    "version": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "biasfield": biasfield_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "biasfield": biasfield_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `biasfield(...)`.
 *
 * @interface
 */
interface BiasfieldOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated bias field in the subject MRI directory
     */
    biasfield_output: OutputPathType;
    /**
     * The rawavg.mgz in 256^3, 1mm^3 space with the bias field removed
     */
    rawavg_cor_norm: OutputPathType;
}


function biasfield_params(
    subject: string,
    tmpdir: string | null = null,
    no_cleanup: boolean = false,
    help: boolean = false,
    debug: boolean = false,
    version: boolean = false,
): BiasfieldParameters {
    /**
     * Build parameters.
    
     * @param subject Subject identifier
     * @param tmpdir Temporary directory
     * @param no_cleanup Prevent cleanup of temporary files
     * @param help Display help information
     * @param debug Enable debugging mode
     * @param version Display script version info
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "biasfield" as const,
        "subject": subject,
        "no_cleanup": no_cleanup,
        "help": help,
        "debug": debug,
        "version": version,
    };
    if (tmpdir !== null) {
        params["tmpdir"] = tmpdir;
    }
    return params;
}


function biasfield_cargs(
    params: BiasfieldParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("biasfield");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["tmpdir"] ?? null) !== null) {
        cargs.push(
            "--tmp",
            (params["tmpdir"] ?? null)
        );
    }
    if ((params["no_cleanup"] ?? null)) {
        cargs.push("--nocleanup");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


function biasfield_outputs(
    params: BiasfieldParameters,
    execution: Execution,
): BiasfieldOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BiasfieldOutputs = {
        root: execution.outputFile("."),
        biasfield_output: execution.outputFile(["biasfield.mgz"].join('')),
        rawavg_cor_norm: execution.outputFile(["rawavg.cor.norm.mgz"].join('')),
    };
    return ret;
}


function biasfield_execute(
    params: BiasfieldParameters,
    execution: Execution,
): BiasfieldOutputs {
    /**
     * Computes the bias field by dividing the (unconformed) orig.mgz by the norm.mgz.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BiasfieldOutputs`).
     */
    params = execution.params(params)
    const cargs = biasfield_cargs(params, execution)
    const ret = biasfield_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function biasfield(
    subject: string,
    tmpdir: string | null = null,
    no_cleanup: boolean = false,
    help: boolean = false,
    debug: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): BiasfieldOutputs {
    /**
     * Computes the bias field by dividing the (unconformed) orig.mgz by the norm.mgz.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject identifier
     * @param tmpdir Temporary directory
     * @param no_cleanup Prevent cleanup of temporary files
     * @param help Display help information
     * @param debug Enable debugging mode
     * @param version Display script version info
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BiasfieldOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BIASFIELD_METADATA);
    const params = biasfield_params(subject, tmpdir, no_cleanup, help, debug, version)
    return biasfield_execute(params, execution);
}


export {
      BIASFIELD_METADATA,
      BiasfieldOutputs,
      BiasfieldParameters,
      biasfield,
      biasfield_params,
};
