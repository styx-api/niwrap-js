// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADD_NOISE_TO_IMAGE_METADATA: Metadata = {
    id: "5da8ee75f74c156a91ae2c476ce7533d884a9bda.boutiques",
    name: "AddNoiseToImage",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AddNoiseToImageParameters {
    "@type": "ants.AddNoiseToImage";
    "image_dimensionality"?: 2 | 3 | 4 | null | undefined;
    "input_image": InputPathType;
    "noise_model": "AdditiveGaussian" | "SaltAndPepper" | "Shot" | "Speckle";
    "output": string;
    "verbose"?: 0 | 1 | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.AddNoiseToImage": add_noise_to_image_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.AddNoiseToImage": add_noise_to_image_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `add_noise_to_image(...)`.
 *
 * @interface
 */
interface AddNoiseToImageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output is the noise corrupted version of the input image.
     */
    noise_corrupted_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image A scalar image is expected as input for noise correction.
 * @param noise_model Use different noise models each with its own (default) parameters.
 * @param output The output consists of the noise corrupted version of the input image.
 * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param verbose Verbose output.
 *
 * @returns Parameter dictionary
 */
function add_noise_to_image_params(
    input_image: InputPathType,
    noise_model: "AdditiveGaussian" | "SaltAndPepper" | "Shot" | "Speckle",
    output: string,
    image_dimensionality: 2 | 3 | 4 | null = null,
    verbose: 0 | 1 | null = null,
): AddNoiseToImageParameters {
    const params = {
        "@type": "ants.AddNoiseToImage" as const,
        "input_image": input_image,
        "noise_model": noise_model,
        "output": output,
    };
    if (image_dimensionality !== null) {
        params["image_dimensionality"] = image_dimensionality;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function add_noise_to_image_cargs(
    params: AddNoiseToImageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("AddNoiseToImage");
    if ((params["image_dimensionality"] ?? null) !== null) {
        cargs.push(
            "--image-dimensionality",
            String((params["image_dimensionality"] ?? null))
        );
    }
    cargs.push(
        "--input-image",
        execution.inputFile((params["input_image"] ?? null))
    );
    cargs.push(
        "--noise-model",
        (params["noise_model"] ?? null)
    );
    cargs.push(
        "--output",
        (params["output"] ?? null)
    );
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "--verbose",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function add_noise_to_image_outputs(
    params: AddNoiseToImageParameters,
    execution: Execution,
): AddNoiseToImageOutputs {
    const ret: AddNoiseToImageOutputs = {
        root: execution.outputFile("."),
        noise_corrupted_image: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * AddNoiseToImage
 *
 * Add various types of noise to an image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AddNoiseToImageOutputs`).
 */
function add_noise_to_image_execute(
    params: AddNoiseToImageParameters,
    runner: Runner | null = null,
): AddNoiseToImageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADD_NOISE_TO_IMAGE_METADATA);
    params = execution.params(params)
    const cargs = add_noise_to_image_cargs(params, execution)
    const ret = add_noise_to_image_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * AddNoiseToImage
 *
 * Add various types of noise to an image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param input_image A scalar image is expected as input for noise correction.
 * @param noise_model Use different noise models each with its own (default) parameters.
 * @param output The output consists of the noise corrupted version of the input image.
 * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, the program tries to infer the dimensionality from the input image.
 * @param verbose Verbose output.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AddNoiseToImageOutputs`).
 */
function add_noise_to_image(
    input_image: InputPathType,
    noise_model: "AdditiveGaussian" | "SaltAndPepper" | "Shot" | "Speckle",
    output: string,
    image_dimensionality: 2 | 3 | 4 | null = null,
    verbose: 0 | 1 | null = null,
    runner: Runner | null = null,
): AddNoiseToImageOutputs {
    const params = add_noise_to_image_params(input_image, noise_model, output, image_dimensionality, verbose)
    return add_noise_to_image_execute(params, runner);
}


export {
      ADD_NOISE_TO_IMAGE_METADATA,
      AddNoiseToImageOutputs,
      AddNoiseToImageParameters,
      add_noise_to_image,
      add_noise_to_image_execute,
      add_noise_to_image_params,
};
