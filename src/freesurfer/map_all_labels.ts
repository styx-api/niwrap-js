// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAP_ALL_LABELS_METADATA: Metadata = {
    id: "462c951d78ae9c590ed2ea4c6261d60f96f1a539.boutiques",
    name: "map_all_labels",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MapAllLabelsParameters {
    "__STYXTYPE__": "map_all_labels";
    "which": string;
    "fname": string;
    "hemi": string;
    "spherical_surf": string;
    "subjects": Array<string>;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "map_all_labels": map_all_labels_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "map_all_labels": map_all_labels_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `map_all_labels(...)`.
 *
 * @interface
 */
interface MapAllLabelsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output of the mapping process
     */
    output_file: OutputPathType;
}


function map_all_labels_params(
    which: string,
    fname: string,
    hemi: string,
    spherical_surf: string,
    subjects: Array<string>,
    output: string,
): MapAllLabelsParameters {
    /**
     * Build parameters.
    
     * @param which Select what to map (e.g. coords, label, vals, curv, area)
     * @param fname Filename related to the mapping
     * @param hemi Hemisphere to process (e.g. lh, rh)
     * @param spherical_surf Spherical surface to use
     * @param subjects List of subject identifiers
     * @param output Output path
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "map_all_labels" as const,
        "which": which,
        "fname": fname,
        "hemi": hemi,
        "spherical_surf": spherical_surf,
        "subjects": subjects,
        "output": output,
    };
    return params;
}


function map_all_labels_cargs(
    params: MapAllLabelsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("map_all_labels");
    cargs.push((params["which"] ?? null));
    cargs.push((params["fname"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["spherical_surf"] ?? null));
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output"] ?? null));
    return cargs;
}


function map_all_labels_outputs(
    params: MapAllLabelsParameters,
    execution: Execution,
): MapAllLabelsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MapAllLabelsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function map_all_labels_execute(
    params: MapAllLabelsParameters,
    execution: Execution,
): MapAllLabelsOutputs {
    /**
     * Tool for mapping labels onto subject surfaces.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MapAllLabelsOutputs`).
     */
    params = execution.params(params)
    const cargs = map_all_labels_cargs(params, execution)
    const ret = map_all_labels_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function map_all_labels(
    which: string,
    fname: string,
    hemi: string,
    spherical_surf: string,
    subjects: Array<string>,
    output: string,
    runner: Runner | null = null,
): MapAllLabelsOutputs {
    /**
     * Tool for mapping labels onto subject surfaces.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param which Select what to map (e.g. coords, label, vals, curv, area)
     * @param fname Filename related to the mapping
     * @param hemi Hemisphere to process (e.g. lh, rh)
     * @param spherical_surf Spherical surface to use
     * @param subjects List of subject identifiers
     * @param output Output path
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MapAllLabelsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAP_ALL_LABELS_METADATA);
    const params = map_all_labels_params(which, fname, hemi, spherical_surf, subjects, output)
    return map_all_labels_execute(params, execution);
}


export {
      MAP_ALL_LABELS_METADATA,
      MapAllLabelsOutputs,
      MapAllLabelsParameters,
      map_all_labels,
      map_all_labels_params,
};
