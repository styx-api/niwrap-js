// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DTTO_DWI_METADATA: Metadata = {
    id: "1fb2551331e4f3894dddfd8963dc18afa2c8a38e.boutiques",
    name: "3dDTtoDWI",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDttoDwiParameters {
    "@type": "afni.3dDTtoDWI";
    "gradient_file": InputPathType;
    "i0_dataset": InputPathType;
    "dt_dataset": InputPathType;
    "prefix"?: string | null | undefined;
    "automask": boolean;
    "datum_type"?: string | null | undefined;
    "scale_out_1000": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dDTtoDWI": v_3d_dtto_dwi_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dDTtoDWI": v_3d_dtto_dwi_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_dtto_dwi(...)`.
 *
 * @interface
 */
interface V3dDttoDwiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Computed DWI images including sub-brick for each gradient vector.
     */
    output_dwi: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param gradient_file 1D file containing the gradient vectors (ASCII floats) for non-zero gradients.
 * @param i0_dataset Volume without any gradient applied.
 * @param dt_dataset 6-sub-brick dataset containing the diffusion tensor data (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz).
 * @param prefix Prefix for the output dataset name.
 * @param automask Compute gradient images only for high-intensity (brain) voxels.
 * @param datum_type Type of the output dataset (float, short, or byte).
 * @param scale_out_1000 Match with 3dDWItoDT's '-scale_out_1000' functionality.
 * @param help Show help message.
 *
 * @returns Parameter dictionary
 */
function v_3d_dtto_dwi_params(
    gradient_file: InputPathType,
    i0_dataset: InputPathType,
    dt_dataset: InputPathType,
    prefix: string | null = null,
    automask: boolean = false,
    datum_type: string | null = null,
    scale_out_1000: boolean = false,
    help: boolean = false,
): V3dDttoDwiParameters {
    const params = {
        "@type": "afni.3dDTtoDWI" as const,
        "gradient_file": gradient_file,
        "i0_dataset": i0_dataset,
        "dt_dataset": dt_dataset,
        "automask": automask,
        "scale_out_1000": scale_out_1000,
        "help": help,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum_type !== null) {
        params["datum_type"] = datum_type;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_dtto_dwi_cargs(
    params: V3dDttoDwiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dDTtoDWI");
    cargs.push(execution.inputFile((params["gradient_file"] ?? null)));
    cargs.push(execution.inputFile((params["i0_dataset"] ?? null)));
    cargs.push(execution.inputFile((params["dt_dataset"] ?? null)));
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["datum_type"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum_type"] ?? null)
        );
    }
    if ((params["scale_out_1000"] ?? null)) {
        cargs.push("-scale_out_1000");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_dtto_dwi_outputs(
    params: V3dDttoDwiParameters,
    execution: Execution,
): V3dDttoDwiOutputs {
    const ret: V3dDttoDwiOutputs = {
        root: execution.outputFile("."),
        output_dwi: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "*.HEAD"].join('')) : null,
    };
    return ret;
}


/**
 * Tool to compute multiple gradient images from tensors and gradient vector coordinates applied to the I0-dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDttoDwiOutputs`).
 */
function v_3d_dtto_dwi_execute(
    params: V3dDttoDwiParameters,
    runner: Runner | null = null,
): V3dDttoDwiOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DTTO_DWI_METADATA);
    params = execution.params(params)
    const cargs = v_3d_dtto_dwi_cargs(params, execution)
    const ret = v_3d_dtto_dwi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool to compute multiple gradient images from tensors and gradient vector coordinates applied to the I0-dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param gradient_file 1D file containing the gradient vectors (ASCII floats) for non-zero gradients.
 * @param i0_dataset Volume without any gradient applied.
 * @param dt_dataset 6-sub-brick dataset containing the diffusion tensor data (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz).
 * @param prefix Prefix for the output dataset name.
 * @param automask Compute gradient images only for high-intensity (brain) voxels.
 * @param datum_type Type of the output dataset (float, short, or byte).
 * @param scale_out_1000 Match with 3dDWItoDT's '-scale_out_1000' functionality.
 * @param help Show help message.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDttoDwiOutputs`).
 */
function v_3d_dtto_dwi(
    gradient_file: InputPathType,
    i0_dataset: InputPathType,
    dt_dataset: InputPathType,
    prefix: string | null = null,
    automask: boolean = false,
    datum_type: string | null = null,
    scale_out_1000: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): V3dDttoDwiOutputs {
    const params = v_3d_dtto_dwi_params(gradient_file, i0_dataset, dt_dataset, prefix, automask, datum_type, scale_out_1000, help)
    return v_3d_dtto_dwi_execute(params, runner);
}


export {
      V3dDttoDwiOutputs,
      V3dDttoDwiParameters,
      V_3D_DTTO_DWI_METADATA,
      v_3d_dtto_dwi,
      v_3d_dtto_dwi_execute,
      v_3d_dtto_dwi_params,
};
