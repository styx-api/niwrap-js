// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_EXTREMA_METADATA: Metadata = {
    id: "11dee31749e55022b04e2f12be1b5d4cbdea2497.boutiques",
    name: "cifti-extrema",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiExtremaThresholdParameters {
    "@type": "workbench.cifti-extrema.threshold";
    "low": number;
    "high": number;
}


interface CiftiExtremaParameters {
    "@type": "workbench.cifti-extrema";
    "cifti": InputPathType;
    "surface_distance": number;
    "volume_distance": number;
    "direction": string;
    "cifti_out": string;
    "opt_left_surface_surface"?: InputPathType | null | undefined;
    "opt_right_surface_surface"?: InputPathType | null | undefined;
    "opt_cerebellum_surface_surface"?: InputPathType | null | undefined;
    "opt_surface_presmooth_surface_kernel"?: number | null | undefined;
    "opt_volume_presmooth_volume_kernel"?: number | null | undefined;
    "opt_presmooth_fwhm": boolean;
    "threshold"?: CiftiExtremaThresholdParameters | null | undefined;
    "opt_merged_volume": boolean;
    "opt_sum_maps": boolean;
    "opt_consolidate_mode": boolean;
    "opt_only_maxima": boolean;
    "opt_only_minima": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-extrema": cifti_extrema_cargs,
        "workbench.cifti-extrema.threshold": cifti_extrema_threshold_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-extrema": cifti_extrema_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param low the largest value to consider for being a minimum
 * @param high the smallest value to consider for being a maximum
 *
 * @returns Parameter dictionary
 */
function cifti_extrema_threshold_params(
    low: number,
    high: number,
): CiftiExtremaThresholdParameters {
    const params = {
        "@type": "workbench.cifti-extrema.threshold" as const,
        "low": low,
        "high": high,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_extrema_threshold_cargs(
    params: CiftiExtremaThresholdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-threshold");
    cargs.push(String((params["low"] ?? null)));
    cargs.push(String((params["high"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `cifti_extrema(...)`.
 *
 * @interface
 */
interface CiftiExtremaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti the input cifti
 * @param surface_distance the minimum distance between extrema of the same type, for surface components
 * @param volume_distance the minimum distance between extrema of the same type, for volume components
 * @param direction which dimension to find extrema along, ROW or COLUMN
 * @param cifti_out the output cifti
 * @param opt_left_surface_surface specify the left surface to use: the left surface file
 * @param opt_right_surface_surface specify the right surface to use: the right surface file
 * @param opt_cerebellum_surface_surface specify the cerebellum surface to use: the cerebellum surface file
 * @param opt_surface_presmooth_surface_kernel smooth on the surface before finding extrema: the size of the gaussian surface smoothing kernel in mm, as sigma by default
 * @param opt_volume_presmooth_volume_kernel smooth volume components before finding extrema: the size of the gaussian volume smoothing kernel in mm, as sigma by default
 * @param opt_presmooth_fwhm smoothing kernel distances are FWHM, not sigma
 * @param threshold ignore small extrema
 * @param opt_merged_volume treat volume components as if they were a single component
 * @param opt_sum_maps output the sum of the extrema maps instead of each map separately
 * @param opt_consolidate_mode use consolidation of local minima instead of a large neighborhood
 * @param opt_only_maxima only find the maxima
 * @param opt_only_minima only find the minima
 *
 * @returns Parameter dictionary
 */
function cifti_extrema_params(
    cifti: InputPathType,
    surface_distance: number,
    volume_distance: number,
    direction: string,
    cifti_out: string,
    opt_left_surface_surface: InputPathType | null = null,
    opt_right_surface_surface: InputPathType | null = null,
    opt_cerebellum_surface_surface: InputPathType | null = null,
    opt_surface_presmooth_surface_kernel: number | null = null,
    opt_volume_presmooth_volume_kernel: number | null = null,
    opt_presmooth_fwhm: boolean = false,
    threshold: CiftiExtremaThresholdParameters | null = null,
    opt_merged_volume: boolean = false,
    opt_sum_maps: boolean = false,
    opt_consolidate_mode: boolean = false,
    opt_only_maxima: boolean = false,
    opt_only_minima: boolean = false,
): CiftiExtremaParameters {
    const params = {
        "@type": "workbench.cifti-extrema" as const,
        "cifti": cifti,
        "surface_distance": surface_distance,
        "volume_distance": volume_distance,
        "direction": direction,
        "cifti_out": cifti_out,
        "opt_presmooth_fwhm": opt_presmooth_fwhm,
        "opt_merged_volume": opt_merged_volume,
        "opt_sum_maps": opt_sum_maps,
        "opt_consolidate_mode": opt_consolidate_mode,
        "opt_only_maxima": opt_only_maxima,
        "opt_only_minima": opt_only_minima,
    };
    if (opt_left_surface_surface !== null) {
        params["opt_left_surface_surface"] = opt_left_surface_surface;
    }
    if (opt_right_surface_surface !== null) {
        params["opt_right_surface_surface"] = opt_right_surface_surface;
    }
    if (opt_cerebellum_surface_surface !== null) {
        params["opt_cerebellum_surface_surface"] = opt_cerebellum_surface_surface;
    }
    if (opt_surface_presmooth_surface_kernel !== null) {
        params["opt_surface_presmooth_surface_kernel"] = opt_surface_presmooth_surface_kernel;
    }
    if (opt_volume_presmooth_volume_kernel !== null) {
        params["opt_volume_presmooth_volume_kernel"] = opt_volume_presmooth_volume_kernel;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_extrema_cargs(
    params: CiftiExtremaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-extrema");
    cargs.push(execution.inputFile((params["cifti"] ?? null)));
    cargs.push(String((params["surface_distance"] ?? null)));
    cargs.push(String((params["volume_distance"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_left_surface_surface"] ?? null) !== null) {
        cargs.push(
            "-left-surface",
            execution.inputFile((params["opt_left_surface_surface"] ?? null))
        );
    }
    if ((params["opt_right_surface_surface"] ?? null) !== null) {
        cargs.push(
            "-right-surface",
            execution.inputFile((params["opt_right_surface_surface"] ?? null))
        );
    }
    if ((params["opt_cerebellum_surface_surface"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-surface",
            execution.inputFile((params["opt_cerebellum_surface_surface"] ?? null))
        );
    }
    if ((params["opt_surface_presmooth_surface_kernel"] ?? null) !== null) {
        cargs.push(
            "-surface-presmooth",
            String((params["opt_surface_presmooth_surface_kernel"] ?? null))
        );
    }
    if ((params["opt_volume_presmooth_volume_kernel"] ?? null) !== null) {
        cargs.push(
            "-volume-presmooth",
            String((params["opt_volume_presmooth_volume_kernel"] ?? null))
        );
    }
    if ((params["opt_presmooth_fwhm"] ?? null)) {
        cargs.push("-presmooth-fwhm");
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(...dynCargs((params["threshold"] ?? null)["@type"])((params["threshold"] ?? null), execution));
    }
    if ((params["opt_merged_volume"] ?? null)) {
        cargs.push("-merged-volume");
    }
    if ((params["opt_sum_maps"] ?? null)) {
        cargs.push("-sum-maps");
    }
    if ((params["opt_consolidate_mode"] ?? null)) {
        cargs.push("-consolidate-mode");
    }
    if ((params["opt_only_maxima"] ?? null)) {
        cargs.push("-only-maxima");
    }
    if ((params["opt_only_minima"] ?? null)) {
        cargs.push("-only-minima");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_extrema_outputs(
    params: CiftiExtremaParameters,
    execution: Execution,
): CiftiExtremaOutputs {
    const ret: CiftiExtremaOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Find extrema in a cifti file.
 *
 * Finds spatial locations in a cifti file that have more extreme values than all nearby locations in the same component (surface or volume structure).  The input cifti file must have a brain models mapping along the specified direction.  COLUMN is the direction that works on dtseries and dscalar.  For dconn, if it is symmetric use COLUMN, otherwise use ROW.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `CiftiExtremaOutputs`).
 */
function cifti_extrema_execute(
    params: CiftiExtremaParameters,
    execution: Execution,
): CiftiExtremaOutputs {
    params = execution.params(params)
    const cargs = cifti_extrema_cargs(params, execution)
    const ret = cifti_extrema_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Find extrema in a cifti file.
 *
 * Finds spatial locations in a cifti file that have more extreme values than all nearby locations in the same component (surface or volume structure).  The input cifti file must have a brain models mapping along the specified direction.  COLUMN is the direction that works on dtseries and dscalar.  For dconn, if it is symmetric use COLUMN, otherwise use ROW.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti the input cifti
 * @param surface_distance the minimum distance between extrema of the same type, for surface components
 * @param volume_distance the minimum distance between extrema of the same type, for volume components
 * @param direction which dimension to find extrema along, ROW or COLUMN
 * @param cifti_out the output cifti
 * @param opt_left_surface_surface specify the left surface to use: the left surface file
 * @param opt_right_surface_surface specify the right surface to use: the right surface file
 * @param opt_cerebellum_surface_surface specify the cerebellum surface to use: the cerebellum surface file
 * @param opt_surface_presmooth_surface_kernel smooth on the surface before finding extrema: the size of the gaussian surface smoothing kernel in mm, as sigma by default
 * @param opt_volume_presmooth_volume_kernel smooth volume components before finding extrema: the size of the gaussian volume smoothing kernel in mm, as sigma by default
 * @param opt_presmooth_fwhm smoothing kernel distances are FWHM, not sigma
 * @param threshold ignore small extrema
 * @param opt_merged_volume treat volume components as if they were a single component
 * @param opt_sum_maps output the sum of the extrema maps instead of each map separately
 * @param opt_consolidate_mode use consolidation of local minima instead of a large neighborhood
 * @param opt_only_maxima only find the maxima
 * @param opt_only_minima only find the minima
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiExtremaOutputs`).
 */
function cifti_extrema(
    cifti: InputPathType,
    surface_distance: number,
    volume_distance: number,
    direction: string,
    cifti_out: string,
    opt_left_surface_surface: InputPathType | null = null,
    opt_right_surface_surface: InputPathType | null = null,
    opt_cerebellum_surface_surface: InputPathType | null = null,
    opt_surface_presmooth_surface_kernel: number | null = null,
    opt_volume_presmooth_volume_kernel: number | null = null,
    opt_presmooth_fwhm: boolean = false,
    threshold: CiftiExtremaThresholdParameters | null = null,
    opt_merged_volume: boolean = false,
    opt_sum_maps: boolean = false,
    opt_consolidate_mode: boolean = false,
    opt_only_maxima: boolean = false,
    opt_only_minima: boolean = false,
    runner: Runner | null = null,
): CiftiExtremaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_EXTREMA_METADATA);
    const params = cifti_extrema_params(cifti, surface_distance, volume_distance, direction, cifti_out, opt_left_surface_surface, opt_right_surface_surface, opt_cerebellum_surface_surface, opt_surface_presmooth_surface_kernel, opt_volume_presmooth_volume_kernel, opt_presmooth_fwhm, threshold, opt_merged_volume, opt_sum_maps, opt_consolidate_mode, opt_only_maxima, opt_only_minima)
    return cifti_extrema_execute(params, execution);
}


export {
      CIFTI_EXTREMA_METADATA,
      CiftiExtremaOutputs,
      CiftiExtremaParameters,
      CiftiExtremaThresholdParameters,
      cifti_extrema,
      cifti_extrema_cargs,
      cifti_extrema_execute,
      cifti_extrema_outputs,
      cifti_extrema_params,
      cifti_extrema_threshold_cargs,
      cifti_extrema_threshold_params,
};
