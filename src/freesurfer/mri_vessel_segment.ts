// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_VESSEL_SEGMENT_METADATA: Metadata = {
    id: "3f2cffef406b09dc6bd4cbd76379913f53ca676c.boutiques",
    name: "mri_vessel_segment",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriVesselSegmentParameters {
    "@type": "freesurfer.mri_vessel_segment";
    "t1_image": InputPathType;
    "t2_image": InputPathType;
    "aseg_file": InputPathType;
    "output_file": string;
    "shape_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_vessel_segment": mri_vessel_segment_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_vessel_segment": mri_vessel_segment_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_vessel_segment(...)`.
 *
 * @interface
 */
interface MriVesselSegmentOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmented vessel output file
     */
    segmented_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param t1_image T1-weighted input image
 * @param t2_image T2-weighted input image
 * @param aseg_file Anatomical segmentation file
 * @param output_file Output file
 * @param shape_flag Use shape constraints during segmentation
 *
 * @returns Parameter dictionary
 */
function mri_vessel_segment_params(
    t1_image: InputPathType,
    t2_image: InputPathType,
    aseg_file: InputPathType,
    output_file: string,
    shape_flag: boolean = false,
): MriVesselSegmentParameters {
    const params = {
        "@type": "freesurfer.mri_vessel_segment" as const,
        "t1_image": t1_image,
        "t2_image": t2_image,
        "aseg_file": aseg_file,
        "output_file": output_file,
        "shape_flag": shape_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_vessel_segment_cargs(
    params: MriVesselSegmentParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_vessel_segment");
    cargs.push(
        "-t1",
        execution.inputFile((params["t1_image"] ?? null))
    );
    cargs.push(
        "-t2",
        execution.inputFile((params["t2_image"] ?? null))
    );
    cargs.push(
        "-aseg",
        execution.inputFile((params["aseg_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    if ((params["shape_flag"] ?? null)) {
        cargs.push("--shape");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_vessel_segment_outputs(
    params: MriVesselSegmentParameters,
    execution: Execution,
): MriVesselSegmentOutputs {
    const ret: MriVesselSegmentOutputs = {
        root: execution.outputFile("."),
        segmented_output: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_vessel_segment
 *
 * MRI vessel segmentation tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriVesselSegmentOutputs`).
 */
function mri_vessel_segment_execute(
    params: MriVesselSegmentParameters,
    runner: Runner | null = null,
): MriVesselSegmentOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_VESSEL_SEGMENT_METADATA);
    params = execution.params(params)
    const cargs = mri_vessel_segment_cargs(params, execution)
    const ret = mri_vessel_segment_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_vessel_segment
 *
 * MRI vessel segmentation tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param t1_image T1-weighted input image
 * @param t2_image T2-weighted input image
 * @param aseg_file Anatomical segmentation file
 * @param output_file Output file
 * @param shape_flag Use shape constraints during segmentation
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriVesselSegmentOutputs`).
 */
function mri_vessel_segment(
    t1_image: InputPathType,
    t2_image: InputPathType,
    aseg_file: InputPathType,
    output_file: string,
    shape_flag: boolean = false,
    runner: Runner | null = null,
): MriVesselSegmentOutputs {
    const params = mri_vessel_segment_params(t1_image, t2_image, aseg_file, output_file, shape_flag)
    return mri_vessel_segment_execute(params, runner);
}


export {
      MRI_VESSEL_SEGMENT_METADATA,
      MriVesselSegmentOutputs,
      MriVesselSegmentParameters,
      mri_vessel_segment,
      mri_vessel_segment_execute,
      mri_vessel_segment_params,
};
