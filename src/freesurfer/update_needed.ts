// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UPDATE_NEEDED_METADATA: Metadata = {
    id: "81ad1ec598b447ced529bab2b15819d597e08ec9.boutiques",
    name: "UpdateNeeded",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UpdateNeededParameters {
    "__STYXTYPE__": "UpdateNeeded";
    "target_file": InputPathType;
    "source_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "UpdateNeeded": update_needed_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `update_needed(...)`.
 *
 * @interface
 */
interface UpdateNeededOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function update_needed_params(
    target_file: InputPathType,
    source_file: InputPathType,
): UpdateNeededParameters {
    /**
     * Build parameters.
    
     * @param target_file The target file that needs to be updated.
     * @param source_file The primary source file for updating the target file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "UpdateNeeded" as const,
        "target_file": target_file,
        "source_file": source_file,
    };
    return params;
}


function update_needed_cargs(
    params: UpdateNeededParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("UpdateNeeded");
    cargs.push(execution.inputFile((params["target_file"] ?? null)));
    cargs.push(execution.inputFile((params["source_file"] ?? null)));
    cargs.push("[ADDITIONAL_SOURCE_FILES...]");
    return cargs;
}


function update_needed_outputs(
    params: UpdateNeededParameters,
    execution: Execution,
): UpdateNeededOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: UpdateNeededOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function update_needed_execute(
    params: UpdateNeededParameters,
    execution: Execution,
): UpdateNeededOutputs {
    /**
     * A command-line tool to update a target file based on one or more source files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `UpdateNeededOutputs`).
     */
    params = execution.params(params)
    const cargs = update_needed_cargs(params, execution)
    const ret = update_needed_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function update_needed(
    target_file: InputPathType,
    source_file: InputPathType,
    runner: Runner | null = null,
): UpdateNeededOutputs {
    /**
     * A command-line tool to update a target file based on one or more source files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param target_file The target file that needs to be updated.
     * @param source_file The primary source file for updating the target file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `UpdateNeededOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UPDATE_NEEDED_METADATA);
    const params = update_needed_params(target_file, source_file)
    return update_needed_execute(params, execution);
}


export {
      UPDATE_NEEDED_METADATA,
      UpdateNeededOutputs,
      UpdateNeededParameters,
      update_needed,
      update_needed_params,
};
