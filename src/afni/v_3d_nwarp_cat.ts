// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NWARP_CAT_METADATA: Metadata = {
    id: "62adbc513d6c3a93a1b123ab55b3308c6a6d676e.boutiques",
    name: "3dNwarpCat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNwarpCatParameters {
    "@type": "afni.3dNwarpCat";
    "interpolation"?: string | null | undefined;
    "verbosity": boolean;
    "output_prefix": string;
    "space_marker"?: string | null | undefined;
    "warp1": InputPathType;
    "warp2": InputPathType;
    "additional_warps"?: Array<InputPathType> | null | undefined;
    "invert_final_warp": boolean;
    "extra_padding"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dNwarpCat": v_3d_nwarp_cat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dNwarpCat": v_3d_nwarp_cat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_nwarp_cat(...)`.
 *
 * @interface
 */
interface V3dNwarpCatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output matrix file when only matrix warps are provided.
     */
    output_matrix: OutputPathType;
    /**
     * Output dataset when warp files are provided.
     */
    output_dataset: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_prefix Prefix name for the output dataset that holds the warp.
 * @param warp1 Specify the first warp.
 * @param warp2 Specify the second warp.
 * @param interpolation Interpolation mode: linear, quintic, or wsinc5 (default).
 * @param verbosity Print various fun messages during execution.
 * @param space_marker Attach string 'sss' to the output dataset as its atlas space marker.
 * @param additional_warps Additional warp files.
 * @param invert_final_warp Invert the final warp before output.
 * @param extra_padding Pad the nonlinear warps by 'PP' voxels in all directions.
 *
 * @returns Parameter dictionary
 */
function v_3d_nwarp_cat_params(
    output_prefix: string,
    warp1: InputPathType,
    warp2: InputPathType,
    interpolation: string | null = null,
    verbosity: boolean = false,
    space_marker: string | null = null,
    additional_warps: Array<InputPathType> | null = null,
    invert_final_warp: boolean = false,
    extra_padding: number | null = null,
): V3dNwarpCatParameters {
    const params = {
        "@type": "afni.3dNwarpCat" as const,
        "verbosity": verbosity,
        "output_prefix": output_prefix,
        "warp1": warp1,
        "warp2": warp2,
        "invert_final_warp": invert_final_warp,
    };
    if (interpolation !== null) {
        params["interpolation"] = interpolation;
    }
    if (space_marker !== null) {
        params["space_marker"] = space_marker;
    }
    if (additional_warps !== null) {
        params["additional_warps"] = additional_warps;
    }
    if (extra_padding !== null) {
        params["extra_padding"] = extra_padding;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_nwarp_cat_cargs(
    params: V3dNwarpCatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dNwarpCat");
    if ((params["interpolation"] ?? null) !== null) {
        cargs.push(
            "-interp",
            (params["interpolation"] ?? null)
        );
    }
    if ((params["verbosity"] ?? null)) {
        cargs.push("-verb");
    }
    cargs.push(
        "-prefix",
        (params["output_prefix"] ?? null)
    );
    if ((params["space_marker"] ?? null) !== null) {
        cargs.push(
            "-space",
            (params["space_marker"] ?? null)
        );
    }
    cargs.push(
        "-warp1",
        execution.inputFile((params["warp1"] ?? null))
    );
    cargs.push(
        "-warp2",
        execution.inputFile((params["warp2"] ?? null))
    );
    if ((params["additional_warps"] ?? null) !== null) {
        cargs.push(...(params["additional_warps"] ?? null).map(f => execution.inputFile(f)));
    }
    if ((params["invert_final_warp"] ?? null)) {
        cargs.push("-iwarp");
    }
    if ((params["extra_padding"] ?? null) !== null) {
        cargs.push(
            "-expad",
            String((params["extra_padding"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_nwarp_cat_outputs(
    params: V3dNwarpCatParameters,
    execution: Execution,
): V3dNwarpCatOutputs {
    const ret: V3dNwarpCatOutputs = {
        root: execution.outputFile("."),
        output_matrix: execution.outputFile([(params["output_prefix"] ?? null), ".aff12.1D"].join('')),
        output_dataset: execution.outputFile([(params["output_prefix"] ?? null), "+tlrc.HEAD"].join('')),
    };
    return ret;
}


/**
 * 3dNwarpCat
 *
 * Catenates (composes) 3D warps defined on a grid or via a matrix.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpCatOutputs`).
 */
function v_3d_nwarp_cat_execute(
    params: V3dNwarpCatParameters,
    runner: Runner | null = null,
): V3dNwarpCatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NWARP_CAT_METADATA);
    params = execution.params(params)
    const cargs = v_3d_nwarp_cat_cargs(params, execution)
    const ret = v_3d_nwarp_cat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dNwarpCat
 *
 * Catenates (composes) 3D warps defined on a grid or via a matrix.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param output_prefix Prefix name for the output dataset that holds the warp.
 * @param warp1 Specify the first warp.
 * @param warp2 Specify the second warp.
 * @param interpolation Interpolation mode: linear, quintic, or wsinc5 (default).
 * @param verbosity Print various fun messages during execution.
 * @param space_marker Attach string 'sss' to the output dataset as its atlas space marker.
 * @param additional_warps Additional warp files.
 * @param invert_final_warp Invert the final warp before output.
 * @param extra_padding Pad the nonlinear warps by 'PP' voxels in all directions.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dNwarpCatOutputs`).
 */
function v_3d_nwarp_cat(
    output_prefix: string,
    warp1: InputPathType,
    warp2: InputPathType,
    interpolation: string | null = null,
    verbosity: boolean = false,
    space_marker: string | null = null,
    additional_warps: Array<InputPathType> | null = null,
    invert_final_warp: boolean = false,
    extra_padding: number | null = null,
    runner: Runner | null = null,
): V3dNwarpCatOutputs {
    const params = v_3d_nwarp_cat_params(output_prefix, warp1, warp2, interpolation, verbosity, space_marker, additional_warps, invert_final_warp, extra_padding)
    return v_3d_nwarp_cat_execute(params, runner);
}


export {
      V3dNwarpCatOutputs,
      V3dNwarpCatParameters,
      V_3D_NWARP_CAT_METADATA,
      v_3d_nwarp_cat,
      v_3d_nwarp_cat_execute,
      v_3d_nwarp_cat_params,
};
