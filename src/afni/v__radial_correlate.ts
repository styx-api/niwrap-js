// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__RADIAL_CORRELATE_METADATA: Metadata = {
    id: "1cbb44d20d4e3ca23ba7981bb4c49932fce75bf0.boutiques",
    name: "@radial_correlate",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VRadialCorrelateParameters {
    "__STYXTYPE__": "@radial_correlate";
    "input_files": Array<InputPathType>;
    "results_dir"?: string | null | undefined;
    "do_corr"?: string | null | undefined;
    "do_clust"?: string | null | undefined;
    "mask_dset"?: InputPathType | null | undefined;
    "cthresh"?: number | null | undefined;
    "frac_limit"?: number | null | undefined;
    "sphere_rad"?: number | null | undefined;
    "use_3dmerge"?: string | null | undefined;
    "percentile"?: number | null | undefined;
    "min_thr"?: number | null | undefined;
    "nfirst"?: number | null | undefined;
    "ver": boolean;
    "verbose": boolean;
    "help": boolean;
    "hist": boolean;
    "corr_mask"?: string | null | undefined;
    "do_clean"?: string | null | undefined;
    "polort"?: number | null | undefined;
    "merge_frad"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@radial_correlate": v__radial_correlate_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@radial_correlate": v__radial_correlate_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__radial_correlate(...)`.
 *
 * @interface
 */
interface VRadialCorrelateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Directory containing correlation volumes
     */
    corr_volumes: OutputPathType | null;
}


function v__radial_correlate_params(
    input_files: Array<InputPathType>,
    results_dir: string | null = null,
    do_corr: string | null = null,
    do_clust: string | null = null,
    mask_dset: InputPathType | null = null,
    cthresh: number | null = null,
    frac_limit: number | null = null,
    sphere_rad: number | null = null,
    use_3dmerge: string | null = null,
    percentile: number | null = null,
    min_thr: number | null = null,
    nfirst: number | null = null,
    ver: boolean = false,
    verbose: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    corr_mask: string | null = null,
    do_clean: string | null = null,
    polort: number | null = null,
    merge_frad: number | null = null,
): VRadialCorrelateParameters {
    /**
     * Build parameters.
    
     * @param input_files A list of EPI datasets
     * @param results_dir Results directory for correlations
     * @param do_corr Create correlation volumes (yes/no)
     * @param do_clust Cluster correlation volumes (yes/no)
     * @param mask_dset Specify a mask dataset to replace automask
     * @param cthresh Threshold on correlation values
     * @param frac_limit Minimum mask fraction surviving cluster
     * @param sphere_rad Generate correlations within voxel spheres
     * @param use_3dmerge Use 3dmerge rather than 3dLocalstat (yes/no)
     * @param percentile Percentile to use as threshold
     * @param min_thr Minimum percentile threshold to be considered
     * @param nfirst Number of initial TRs to remove
     * @param ver Show version number
     * @param verbose Make verbose: set echo
     * @param help Show help
     * @param hist Show modification history
     * @param corr_mask Mask time series before correlation blurring (yes/no)
     * @param do_clean Clean up at end, leaving only correlations (yes/no)
     * @param polort Detrend time series with given polynomial degree
     * @param merge_frad Specify a radius fraction for 3dmerge blurring
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@radial_correlate" as const,
        "input_files": input_files,
        "ver": ver,
        "verbose": verbose,
        "help": help,
        "hist": hist,
    };
    if (results_dir !== null) {
        params["results_dir"] = results_dir;
    }
    if (do_corr !== null) {
        params["do_corr"] = do_corr;
    }
    if (do_clust !== null) {
        params["do_clust"] = do_clust;
    }
    if (mask_dset !== null) {
        params["mask_dset"] = mask_dset;
    }
    if (cthresh !== null) {
        params["cthresh"] = cthresh;
    }
    if (frac_limit !== null) {
        params["frac_limit"] = frac_limit;
    }
    if (sphere_rad !== null) {
        params["sphere_rad"] = sphere_rad;
    }
    if (use_3dmerge !== null) {
        params["use_3dmerge"] = use_3dmerge;
    }
    if (percentile !== null) {
        params["percentile"] = percentile;
    }
    if (min_thr !== null) {
        params["min_thr"] = min_thr;
    }
    if (nfirst !== null) {
        params["nfirst"] = nfirst;
    }
    if (corr_mask !== null) {
        params["corr_mask"] = corr_mask;
    }
    if (do_clean !== null) {
        params["do_clean"] = do_clean;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (merge_frad !== null) {
        params["merge_frad"] = merge_frad;
    }
    return params;
}


function v__radial_correlate_cargs(
    params: VRadialCorrelateParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@radial_correlate");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["results_dir"] ?? null) !== null) {
        cargs.push(
            "-rdir",
            (params["results_dir"] ?? null)
        );
    }
    if ((params["do_corr"] ?? null) !== null) {
        cargs.push(
            "-do_corr",
            (params["do_corr"] ?? null)
        );
    }
    if ((params["do_clust"] ?? null) !== null) {
        cargs.push(
            "-do_clust",
            (params["do_clust"] ?? null)
        );
    }
    if ((params["mask_dset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dset"] ?? null))
        );
    }
    if ((params["cthresh"] ?? null) !== null) {
        cargs.push(
            "-cthresh",
            String((params["cthresh"] ?? null))
        );
    }
    if ((params["frac_limit"] ?? null) !== null) {
        cargs.push(
            "-frac_limit",
            String((params["frac_limit"] ?? null))
        );
    }
    if ((params["sphere_rad"] ?? null) !== null) {
        cargs.push(
            "-sphere_rad",
            String((params["sphere_rad"] ?? null))
        );
    }
    if ((params["use_3dmerge"] ?? null) !== null) {
        cargs.push(
            "-use_3dmerge",
            (params["use_3dmerge"] ?? null)
        );
    }
    if ((params["percentile"] ?? null) !== null) {
        cargs.push(
            "-percentile",
            String((params["percentile"] ?? null))
        );
    }
    if ((params["min_thr"] ?? null) !== null) {
        cargs.push(
            "-min_thr",
            String((params["min_thr"] ?? null))
        );
    }
    if ((params["nfirst"] ?? null) !== null) {
        cargs.push(
            "-nfirst",
            String((params["nfirst"] ?? null))
        );
    }
    if ((params["ver"] ?? null)) {
        cargs.push("-ver");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["hist"] ?? null)) {
        cargs.push("-hist");
    }
    if ((params["corr_mask"] ?? null) !== null) {
        cargs.push(
            "-corr_mask",
            (params["corr_mask"] ?? null)
        );
    }
    if ((params["do_clean"] ?? null) !== null) {
        cargs.push(
            "-do_clean",
            (params["do_clean"] ?? null)
        );
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["merge_frad"] ?? null) !== null) {
        cargs.push(
            "-merge_frad",
            String((params["merge_frad"] ?? null))
        );
    }
    return cargs;
}


function v__radial_correlate_outputs(
    params: VRadialCorrelateParameters,
    execution: Execution,
): VRadialCorrelateOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VRadialCorrelateOutputs = {
        root: execution.outputFile("."),
        corr_volumes: ((params["results_dir"] ?? null) !== null) ? execution.outputFile([(params["results_dir"] ?? null), "/correlation_volumes"].join('')) : null,
    };
    return ret;
}


function v__radial_correlate_execute(
    params: VRadialCorrelateParameters,
    execution: Execution,
): VRadialCorrelateOutputs {
    /**
     * Check datasets for correlation artifacts.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VRadialCorrelateOutputs`).
     */
    params = execution.params(params)
    const cargs = v__radial_correlate_cargs(params, execution)
    const ret = v__radial_correlate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__radial_correlate(
    input_files: Array<InputPathType>,
    results_dir: string | null = null,
    do_corr: string | null = null,
    do_clust: string | null = null,
    mask_dset: InputPathType | null = null,
    cthresh: number | null = null,
    frac_limit: number | null = null,
    sphere_rad: number | null = null,
    use_3dmerge: string | null = null,
    percentile: number | null = null,
    min_thr: number | null = null,
    nfirst: number | null = null,
    ver: boolean = false,
    verbose: boolean = false,
    help: boolean = false,
    hist: boolean = false,
    corr_mask: string | null = null,
    do_clean: string | null = null,
    polort: number | null = null,
    merge_frad: number | null = null,
    runner: Runner | null = null,
): VRadialCorrelateOutputs {
    /**
     * Check datasets for correlation artifacts.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_files A list of EPI datasets
     * @param results_dir Results directory for correlations
     * @param do_corr Create correlation volumes (yes/no)
     * @param do_clust Cluster correlation volumes (yes/no)
     * @param mask_dset Specify a mask dataset to replace automask
     * @param cthresh Threshold on correlation values
     * @param frac_limit Minimum mask fraction surviving cluster
     * @param sphere_rad Generate correlations within voxel spheres
     * @param use_3dmerge Use 3dmerge rather than 3dLocalstat (yes/no)
     * @param percentile Percentile to use as threshold
     * @param min_thr Minimum percentile threshold to be considered
     * @param nfirst Number of initial TRs to remove
     * @param ver Show version number
     * @param verbose Make verbose: set echo
     * @param help Show help
     * @param hist Show modification history
     * @param corr_mask Mask time series before correlation blurring (yes/no)
     * @param do_clean Clean up at end, leaving only correlations (yes/no)
     * @param polort Detrend time series with given polynomial degree
     * @param merge_frad Specify a radius fraction for 3dmerge blurring
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VRadialCorrelateOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__RADIAL_CORRELATE_METADATA);
    const params = v__radial_correlate_params(input_files, results_dir, do_corr, do_clust, mask_dset, cthresh, frac_limit, sphere_rad, use_3dmerge, percentile, min_thr, nfirst, ver, verbose, help, hist, corr_mask, do_clean, polort, merge_frad)
    return v__radial_correlate_execute(params, execution);
}


export {
      VRadialCorrelateOutputs,
      VRadialCorrelateParameters,
      V__RADIAL_CORRELATE_METADATA,
      v__radial_correlate,
      v__radial_correlate_params,
};
