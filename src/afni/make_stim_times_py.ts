// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_STIM_TIMES_PY_METADATA: Metadata = {
    id: "2919173a83be9228c38f26050d42bd017044239e.boutiques",
    name: "make_stim_times.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MakeStimTimesPyParameters {
    "@type": "afni.make_stim_times.py";
    "files": Array<InputPathType>;
    "prefix": string;
    "tr": number;
    "nruns": number;
    "nt": number;
    "run_trs"?: Array<number> | null | undefined;
    "offset"?: number | null | undefined;
    "labels"?: Array<string> | null | undefined;
    "no_consec_events": boolean;
    "amplitudes": boolean;
    "show_valid_opts": boolean;
    "verbose"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.make_stim_times.py": make_stim_times_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.make_stim_times.py": make_stim_times_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `make_stim_times_py(...)`.
 *
 * @interface
 */
interface MakeStimTimesPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output stim_times file for first stimulus class
     */
    out_stim_times_01: OutputPathType;
    /**
     * Output stim_times file for second stimulus class
     */
    out_stim_times_02: OutputPathType;
    /**
     * Output stim_times file for third stimulus class
     */
    out_stim_times_03: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param files Specify stim files
 * @param prefix Output prefix for files
 * @param tr TR time, in seconds
 * @param nruns Number of runs
 * @param nt Number of TRs per run
 * @param run_trs Specify TRs per run, if they differ
 * @param offset Add OFFSET to all output times
 * @param labels Provide labels for filenames
 * @param no_consec_events Do not allow consecutive events
 * @param amplitudes Marry times with amplitudes
 * @param show_valid_opts Output all options
 * @param verbose Provide verbose output
 *
 * @returns Parameter dictionary
 */
function make_stim_times_py_params(
    files: Array<InputPathType>,
    prefix: string,
    tr: number,
    nruns: number,
    nt: number,
    run_trs: Array<number> | null = null,
    offset: number | null = null,
    labels: Array<string> | null = null,
    no_consec_events: boolean = false,
    amplitudes: boolean = false,
    show_valid_opts: boolean = false,
    verbose: number | null = null,
): MakeStimTimesPyParameters {
    const params = {
        "@type": "afni.make_stim_times.py" as const,
        "files": files,
        "prefix": prefix,
        "tr": tr,
        "nruns": nruns,
        "nt": nt,
        "no_consec_events": no_consec_events,
        "amplitudes": amplitudes,
        "show_valid_opts": show_valid_opts,
    };
    if (run_trs !== null) {
        params["run_trs"] = run_trs;
    }
    if (offset !== null) {
        params["offset"] = offset;
    }
    if (labels !== null) {
        params["labels"] = labels;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_stim_times_py_cargs(
    params: MakeStimTimesPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make_stim_times.py");
    cargs.push(...(params["files"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-tr",
        String((params["tr"] ?? null))
    );
    cargs.push(
        "-nruns",
        String((params["nruns"] ?? null))
    );
    cargs.push(
        "-nt",
        String((params["nt"] ?? null))
    );
    if ((params["run_trs"] ?? null) !== null) {
        cargs.push(...(params["run_trs"] ?? null).map(String));
    }
    if ((params["offset"] ?? null) !== null) {
        cargs.push(
            "-offset",
            String((params["offset"] ?? null))
        );
    }
    if ((params["labels"] ?? null) !== null) {
        cargs.push(
            "-labels",
            ...(params["labels"] ?? null)
        );
    }
    if ((params["no_consec_events"] ?? null)) {
        cargs.push("-no_consec");
    }
    if ((params["amplitudes"] ?? null)) {
        cargs.push("-amplitudes");
    }
    if ((params["show_valid_opts"] ?? null)) {
        cargs.push("-show_valid_opts");
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_stim_times_py_outputs(
    params: MakeStimTimesPyParameters,
    execution: Execution,
): MakeStimTimesPyOutputs {
    const ret: MakeStimTimesPyOutputs = {
        root: execution.outputFile("."),
        out_stim_times_01: execution.outputFile([(params["prefix"] ?? null), ".01.1D"].join('')),
        out_stim_times_02: execution.outputFile([(params["prefix"] ?? null), ".02.1D"].join('')),
        out_stim_times_03: execution.outputFile([(params["prefix"] ?? null), ".03.1D"].join('')),
    };
    return ret;
}


/**
 * make_stim_times.py
 *
 * Convert a set of 0/1 stim files into a set of stim_times files, or convert real-valued files into those for use with -stim_times_AM2.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeStimTimesPyOutputs`).
 */
function make_stim_times_py_execute(
    params: MakeStimTimesPyParameters,
    runner: Runner | null = null,
): MakeStimTimesPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_STIM_TIMES_PY_METADATA);
    params = execution.params(params)
    const cargs = make_stim_times_py_cargs(params, execution)
    const ret = make_stim_times_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * make_stim_times.py
 *
 * Convert a set of 0/1 stim files into a set of stim_times files, or convert real-valued files into those for use with -stim_times_AM2.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param files Specify stim files
 * @param prefix Output prefix for files
 * @param tr TR time, in seconds
 * @param nruns Number of runs
 * @param nt Number of TRs per run
 * @param run_trs Specify TRs per run, if they differ
 * @param offset Add OFFSET to all output times
 * @param labels Provide labels for filenames
 * @param no_consec_events Do not allow consecutive events
 * @param amplitudes Marry times with amplitudes
 * @param show_valid_opts Output all options
 * @param verbose Provide verbose output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeStimTimesPyOutputs`).
 */
function make_stim_times_py(
    files: Array<InputPathType>,
    prefix: string,
    tr: number,
    nruns: number,
    nt: number,
    run_trs: Array<number> | null = null,
    offset: number | null = null,
    labels: Array<string> | null = null,
    no_consec_events: boolean = false,
    amplitudes: boolean = false,
    show_valid_opts: boolean = false,
    verbose: number | null = null,
    runner: Runner | null = null,
): MakeStimTimesPyOutputs {
    const params = make_stim_times_py_params(files, prefix, tr, nruns, nt, run_trs, offset, labels, no_consec_events, amplitudes, show_valid_opts, verbose)
    return make_stim_times_py_execute(params, runner);
}


export {
      MAKE_STIM_TIMES_PY_METADATA,
      MakeStimTimesPyOutputs,
      MakeStimTimesPyParameters,
      make_stim_times_py,
      make_stim_times_py_execute,
      make_stim_times_py_params,
};
