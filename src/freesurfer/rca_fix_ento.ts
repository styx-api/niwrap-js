// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RCA_FIX_ENTO_METADATA: Metadata = {
    id: "cabeb6e1416dbf7346f03da383beb1c3461b4ee2.boutiques",
    name: "rca-fix-ento",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RcaFixEntoParameters {
    "@type"?: "freesurfer/rca-fix-ento";
    "subject": string;
    "threads"?: number | null | undefined;
    "submit": boolean;
    "account"?: string | null | undefined;
    "brain_mask": boolean;
}
type RcaFixEntoParametersTagged = Required<Pick<RcaFixEntoParameters, '@type'>> & RcaFixEntoParameters;


/**
 * Output object returned when calling `RcaFixEntoParameters(...)`.
 *
 * @interface
 */
interface RcaFixEntoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output segmentation of the WM around entorhinal cortex.
     */
    entowm_output: OutputPathType;
    /**
     * Edited brain.finalsurfs with manual edits.
     */
    finalsurfs_output: OutputPathType;
    /**
     * Backup of the original brain.finalsurfs.manedit.mgz before edits.
     */
    backup_finalsufs_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject The subject identifier for processing.
 * @param threads Number of threads to use for processing.
 * @param submit Submit the task to sbatch with 1 thread and 14GB of memory.
 * @param account Specify the account to use when submitting to sbatch; default is 'fhs'.
 * @param brain_mask Apply the ento fix to the brain.finalsurfs; this is turned off due to a conflict with 255.
 *
 * @returns Parameter dictionary
 */
function rca_fix_ento_params(
    subject: string,
    threads: number | null = null,
    submit: boolean = false,
    account: string | null = null,
    brain_mask: boolean = false,
): RcaFixEntoParametersTagged {
    const params = {
        "@type": "freesurfer/rca-fix-ento" as const,
        "subject": subject,
        "submit": submit,
        "brain_mask": brain_mask,
    };
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (account !== null) {
        params["account"] = account;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rca_fix_ento_cargs(
    params: RcaFixEntoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rca-fix-ento");
    cargs.push(
        "-s",
        (params["subject"] ?? null)
    );
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["submit"] ?? false)) {
        cargs.push("--submit");
    }
    if ((params["account"] ?? null) !== null) {
        cargs.push(
            "--account",
            (params["account"] ?? null)
        );
    }
    if ((params["brain_mask"] ?? false)) {
        cargs.push("--brain-mask");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rca_fix_ento_outputs(
    params: RcaFixEntoParameters,
    execution: Execution,
): RcaFixEntoOutputs {
    const ret: RcaFixEntoOutputs = {
        root: execution.outputFile("."),
        entowm_output: execution.outputFile([(params["subject"] ?? null), "/mri/entowm.mgz"].join('')),
        finalsurfs_output: execution.outputFile([(params["subject"] ?? null), "/mri/brain.finalsurfs.manedit.mgz"].join('')),
        backup_finalsufs_output: execution.outputFile([(params["subject"] ?? null), "/mri/backup.brain.finalsurfs.manedit.mgz"].join('')),
    };
    return ret;
}


/**
 * rca-fix-ento
 *
 * A tool to fix the entorhinal white matter in FreeSurfer using a deep learning network.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RcaFixEntoOutputs`).
 */
function rca_fix_ento_execute(
    params: RcaFixEntoParameters,
    runner: Runner | null = null,
): RcaFixEntoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RCA_FIX_ENTO_METADATA);
    params = execution.params(params)
    const cargs = rca_fix_ento_cargs(params, execution)
    const ret = rca_fix_ento_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * rca-fix-ento
 *
 * A tool to fix the entorhinal white matter in FreeSurfer using a deep learning network.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject The subject identifier for processing.
 * @param threads Number of threads to use for processing.
 * @param submit Submit the task to sbatch with 1 thread and 14GB of memory.
 * @param account Specify the account to use when submitting to sbatch; default is 'fhs'.
 * @param brain_mask Apply the ento fix to the brain.finalsurfs; this is turned off due to a conflict with 255.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RcaFixEntoOutputs`).
 */
function rca_fix_ento(
    subject: string,
    threads: number | null = null,
    submit: boolean = false,
    account: string | null = null,
    brain_mask: boolean = false,
    runner: Runner | null = null,
): RcaFixEntoOutputs {
    const params = rca_fix_ento_params(subject, threads, submit, account, brain_mask)
    return rca_fix_ento_execute(params, runner);
}


export {
      RCA_FIX_ENTO_METADATA,
      RcaFixEntoOutputs,
      rca_fix_ento,
      rca_fix_ento_execute,
      rca_fix_ento_params,
};
