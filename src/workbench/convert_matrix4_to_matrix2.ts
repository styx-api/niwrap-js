// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CONVERT_MATRIX4_TO_MATRIX2_METADATA: Metadata = {
    id: "1b4b91cb4a2c6ab97a7949a78b5b1fae20a20738.boutiques",
    name: "convert-matrix4-to-matrix2",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface ConvertMatrix4ToMatrix2IndividualFibersParameters {
    "@type": "workbench.convert-matrix4-to-matrix2.individual_fibers";
    "fiber_1": string;
    "fiber_2": string;
    "fiber_3": string;
}


interface ConvertMatrix4ToMatrix2Parameters {
    "@type": "workbench.convert-matrix4-to-matrix2";
    "matrix4_wbsparse": string;
    "counts_out": string;
    "opt_distances_distance_out"?: string | null | undefined;
    "individual_fibers"?: ConvertMatrix4ToMatrix2IndividualFibersParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.convert-matrix4-to-matrix2": convert_matrix4_to_matrix2_cargs,
        "workbench.convert-matrix4-to-matrix2.individual_fibers": convert_matrix4_to_matrix2_individual_fibers_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.convert-matrix4-to-matrix2": convert_matrix4_to_matrix2_outputs,
        "workbench.convert-matrix4-to-matrix2.individual_fibers": convert_matrix4_to_matrix2_individual_fibers_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ConvertMatrix4ToMatrix2IndividualFibersParameters | null(...)`.
 *
 * @interface
 */
interface ConvertMatrix4ToMatrix2IndividualFibersOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output file for first fiber
     */
    fiber_1: OutputPathType;
    /**
     * output file for second fiber
     */
    fiber_2: OutputPathType;
    /**
     * output file for third fiber
     */
    fiber_3: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fiber_1 output file for first fiber
 * @param fiber_2 output file for second fiber
 * @param fiber_3 output file for third fiber
 *
 * @returns Parameter dictionary
 */
function convert_matrix4_to_matrix2_individual_fibers_params(
    fiber_1: string,
    fiber_2: string,
    fiber_3: string,
): ConvertMatrix4ToMatrix2IndividualFibersParameters {
    const params = {
        "@type": "workbench.convert-matrix4-to-matrix2.individual_fibers" as const,
        "fiber_1": fiber_1,
        "fiber_2": fiber_2,
        "fiber_3": fiber_3,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_matrix4_to_matrix2_individual_fibers_cargs(
    params: ConvertMatrix4ToMatrix2IndividualFibersParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-individual-fibers");
    cargs.push((params["fiber_1"] ?? null));
    cargs.push((params["fiber_2"] ?? null));
    cargs.push((params["fiber_3"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function convert_matrix4_to_matrix2_individual_fibers_outputs(
    params: ConvertMatrix4ToMatrix2IndividualFibersParameters,
    execution: Execution,
): ConvertMatrix4ToMatrix2IndividualFibersOutputs {
    const ret: ConvertMatrix4ToMatrix2IndividualFibersOutputs = {
        root: execution.outputFile("."),
        fiber_1: execution.outputFile([(params["fiber_1"] ?? null)].join('')),
        fiber_2: execution.outputFile([(params["fiber_2"] ?? null)].join('')),
        fiber_3: execution.outputFile([(params["fiber_3"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `convert_matrix4_to_matrix2(...)`.
 *
 * @interface
 */
interface ConvertMatrix4ToMatrix2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the total fiber counts, as a cifti file
     */
    counts_out: OutputPathType;
    /**
     * output average trajectory distance: the distances, as a cifti file
     */
    opt_distances_distance_out: OutputPathType | null;
    /**
     * Outputs from `convert_matrix4_to_matrix2_individual_fibers_outputs`.
     */
    individual_fibers: ConvertMatrix4ToMatrix2IndividualFibersOutputs | null;
}


/**
 * Build parameters.
 *
 * @param matrix4_wbsparse a wbsparse matrix4 file
 * @param counts_out the total fiber counts, as a cifti file
 * @param opt_distances_distance_out output average trajectory distance: the distances, as a cifti file
 * @param individual_fibers output files for each fiber direction
 *
 * @returns Parameter dictionary
 */
function convert_matrix4_to_matrix2_params(
    matrix4_wbsparse: string,
    counts_out: string,
    opt_distances_distance_out: string | null = null,
    individual_fibers: ConvertMatrix4ToMatrix2IndividualFibersParameters | null = null,
): ConvertMatrix4ToMatrix2Parameters {
    const params = {
        "@type": "workbench.convert-matrix4-to-matrix2" as const,
        "matrix4_wbsparse": matrix4_wbsparse,
        "counts_out": counts_out,
    };
    if (opt_distances_distance_out !== null) {
        params["opt_distances_distance_out"] = opt_distances_distance_out;
    }
    if (individual_fibers !== null) {
        params["individual_fibers"] = individual_fibers;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function convert_matrix4_to_matrix2_cargs(
    params: ConvertMatrix4ToMatrix2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-convert-matrix4-to-matrix2");
    cargs.push((params["matrix4_wbsparse"] ?? null));
    cargs.push((params["counts_out"] ?? null));
    if ((params["opt_distances_distance_out"] ?? null) !== null) {
        cargs.push(
            "-distances",
            (params["opt_distances_distance_out"] ?? null)
        );
    }
    if ((params["individual_fibers"] ?? null) !== null) {
        cargs.push(...dynCargs((params["individual_fibers"] ?? null)["@type"])((params["individual_fibers"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function convert_matrix4_to_matrix2_outputs(
    params: ConvertMatrix4ToMatrix2Parameters,
    execution: Execution,
): ConvertMatrix4ToMatrix2Outputs {
    const ret: ConvertMatrix4ToMatrix2Outputs = {
        root: execution.outputFile("."),
        counts_out: execution.outputFile([(params["counts_out"] ?? null)].join('')),
        opt_distances_distance_out: ((params["opt_distances_distance_out"] ?? null) !== null) ? execution.outputFile([(params["opt_distances_distance_out"] ?? null)].join('')) : null,
        individual_fibers: (dynOutputs((params["individual_fibers"] ?? null)["@type"])?.((params["individual_fibers"] ?? null), execution) ?? null),
    };
    return ret;
}


/**
 * convert-matrix4-to-matrix2
 *
 * Generates a matrix2 cifti from matrix4 wbsparse.
 *
 * This command makes a cifti file from the fiber counts in a matrix4 wbsparse file, and optionally a second cifti file from the distances.  Note that while the total count is stored exactly, the per-fiber counts are stored as approximate fractions, so the output of -individual-fibers will contain nonintegers.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertMatrix4ToMatrix2Outputs`).
 */
function convert_matrix4_to_matrix2_execute(
    params: ConvertMatrix4ToMatrix2Parameters,
    runner: Runner | null = null,
): ConvertMatrix4ToMatrix2Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CONVERT_MATRIX4_TO_MATRIX2_METADATA);
    params = execution.params(params)
    const cargs = convert_matrix4_to_matrix2_cargs(params, execution)
    const ret = convert_matrix4_to_matrix2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * convert-matrix4-to-matrix2
 *
 * Generates a matrix2 cifti from matrix4 wbsparse.
 *
 * This command makes a cifti file from the fiber counts in a matrix4 wbsparse file, and optionally a second cifti file from the distances.  Note that while the total count is stored exactly, the per-fiber counts are stored as approximate fractions, so the output of -individual-fibers will contain nonintegers.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param matrix4_wbsparse a wbsparse matrix4 file
 * @param counts_out the total fiber counts, as a cifti file
 * @param opt_distances_distance_out output average trajectory distance: the distances, as a cifti file
 * @param individual_fibers output files for each fiber direction
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ConvertMatrix4ToMatrix2Outputs`).
 */
function convert_matrix4_to_matrix2(
    matrix4_wbsparse: string,
    counts_out: string,
    opt_distances_distance_out: string | null = null,
    individual_fibers: ConvertMatrix4ToMatrix2IndividualFibersParameters | null = null,
    runner: Runner | null = null,
): ConvertMatrix4ToMatrix2Outputs {
    const params = convert_matrix4_to_matrix2_params(matrix4_wbsparse, counts_out, opt_distances_distance_out, individual_fibers)
    return convert_matrix4_to_matrix2_execute(params, runner);
}


export {
      CONVERT_MATRIX4_TO_MATRIX2_METADATA,
      ConvertMatrix4ToMatrix2IndividualFibersOutputs,
      ConvertMatrix4ToMatrix2IndividualFibersParameters,
      ConvertMatrix4ToMatrix2Outputs,
      ConvertMatrix4ToMatrix2Parameters,
      convert_matrix4_to_matrix2,
      convert_matrix4_to_matrix2_execute,
      convert_matrix4_to_matrix2_individual_fibers_params,
      convert_matrix4_to_matrix2_params,
};
