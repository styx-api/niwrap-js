// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_MVM_GRIDCONV_PY_METADATA: Metadata = {
    id: "8f0e721df0a1ca6fa03a42bfa5d524680cdb92c9.boutiques",
    name: "fat_mvm_gridconv.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatMvmGridconvPyParameters {
    "@type": "afni.fat_mvm_gridconv.py";
    "matrix_files"?: string | null | undefined;
    "list_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fat_mvm_gridconv.py": fat_mvm_gridconv_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_mvm_gridconv_py(...)`.
 *
 * @interface
 */
interface FatMvmGridconvPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param matrix_files Provide the set of matrix (*.grid) files as a searchable path. This can be a globbable entry in quotes containing wildcard characters.
 * @param list_file Provide the matrix (*.grid) files by explicit path in a text file. The LIST text file must contain at least one column (path to subject matrix file) with an optional second column (output file names). If no second column is given, the default '_MOD.grid' postfix is applied.
 *
 * @returns Parameter dictionary
 */
function fat_mvm_gridconv_py_params(
    matrix_files: string | null = null,
    list_file: InputPathType | null = null,
): FatMvmGridconvPyParameters {
    const params = {
        "@type": "afni.fat_mvm_gridconv.py" as const,
    };
    if (matrix_files !== null) {
        params["matrix_files"] = matrix_files;
    }
    if (list_file !== null) {
        params["list_file"] = list_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_mvm_gridconv_py_cargs(
    params: FatMvmGridconvPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_mvm_gridconv.py");
    if ((params["matrix_files"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["matrix_files"] ?? null)
        );
    }
    if ((params["list_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["list_file"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_mvm_gridconv_py_outputs(
    params: FatMvmGridconvPyParameters,
    execution: Execution,
): FatMvmGridconvPyOutputs {
    const ret: FatMvmGridconvPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * fat_mvm_gridconv.py
 *
 * Preprocess 'old school' *.grid files for statistical modeling using 3dMVM.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatMvmGridconvPyOutputs`).
 */
function fat_mvm_gridconv_py_execute(
    params: FatMvmGridconvPyParameters,
    runner: Runner | null = null,
): FatMvmGridconvPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_MVM_GRIDCONV_PY_METADATA);
    params = execution.params(params)
    const cargs = fat_mvm_gridconv_py_cargs(params, execution)
    const ret = fat_mvm_gridconv_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fat_mvm_gridconv.py
 *
 * Preprocess 'old school' *.grid files for statistical modeling using 3dMVM.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param matrix_files Provide the set of matrix (*.grid) files as a searchable path. This can be a globbable entry in quotes containing wildcard characters.
 * @param list_file Provide the matrix (*.grid) files by explicit path in a text file. The LIST text file must contain at least one column (path to subject matrix file) with an optional second column (output file names). If no second column is given, the default '_MOD.grid' postfix is applied.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatMvmGridconvPyOutputs`).
 */
function fat_mvm_gridconv_py(
    matrix_files: string | null = null,
    list_file: InputPathType | null = null,
    runner: Runner | null = null,
): FatMvmGridconvPyOutputs {
    const params = fat_mvm_gridconv_py_params(matrix_files, list_file)
    return fat_mvm_gridconv_py_execute(params, runner);
}


export {
      FAT_MVM_GRIDCONV_PY_METADATA,
      FatMvmGridconvPyOutputs,
      FatMvmGridconvPyParameters,
      fat_mvm_gridconv_py,
      fat_mvm_gridconv_py_execute,
      fat_mvm_gridconv_py_params,
};
