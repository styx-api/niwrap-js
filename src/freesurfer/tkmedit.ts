// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TKMEDIT_METADATA: Metadata = {
    id: "215f4c63f4d1d614a5f6ddc04a121949f2f19d48.boutiques",
    name: "tkmedit",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TkmeditParameters {
    "@type": "freesurfer.tkmedit";
    "input_volume": InputPathType;
    "options"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.tkmedit": tkmedit_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tkmedit(...)`.
 *
 * @interface
 */
interface TkmeditOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input volume file (e.g., nu.mgz or brain.mgz)
 * @param options Options for running tkmedit.
 *
 * @returns Parameter dictionary
 */
function tkmedit_params(
    input_volume: InputPathType,
    options: string | null = null,
): TkmeditParameters {
    const params = {
        "@type": "freesurfer.tkmedit" as const,
        "input_volume": input_volume,
    };
    if (options !== null) {
        params["options"] = options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tkmedit_cargs(
    params: TkmeditParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tkmedit");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    if ((params["options"] ?? null) !== null) {
        cargs.push((params["options"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tkmedit_outputs(
    params: TkmeditParameters,
    execution: Execution,
): TkmeditOutputs {
    const ret: TkmeditOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * tkmedit is a multi-functional imaging tool for viewing and editing surface models and volumes in FreeSurfer. It provides a GUI representation of volumetric data and facilitates modifications in the data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TkmeditOutputs`).
 */
function tkmedit_execute(
    params: TkmeditParameters,
    runner: Runner | null = null,
): TkmeditOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TKMEDIT_METADATA);
    params = execution.params(params)
    const cargs = tkmedit_cargs(params, execution)
    const ret = tkmedit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tkmedit is a multi-functional imaging tool for viewing and editing surface models and volumes in FreeSurfer. It provides a GUI representation of volumetric data and facilitates modifications in the data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume Input volume file (e.g., nu.mgz or brain.mgz)
 * @param options Options for running tkmedit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TkmeditOutputs`).
 */
function tkmedit(
    input_volume: InputPathType,
    options: string | null = null,
    runner: Runner | null = null,
): TkmeditOutputs {
    const params = tkmedit_params(input_volume, options)
    return tkmedit_execute(params, runner);
}


export {
      TKMEDIT_METADATA,
      TkmeditOutputs,
      TkmeditParameters,
      tkmedit,
      tkmedit_execute,
      tkmedit_params,
};
