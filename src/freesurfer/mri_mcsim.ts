// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MCSIM_METADATA: Metadata = {
    id: "02637c2ef96d96491e552044c44e51e417c89838.boutiques",
    name: "mri_mcsim",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMcsimParameters {
    "@type": "freesurfer.mri_mcsim";
    "top_output_dir": string;
    "base_name": string;
    "surface": Array<string>;
    "num_repetitions": number;
    "fwhm_values"?: Array<number> | null | undefined;
    "fwhm_max"?: number | null | undefined;
    "avg_vertex_area": boolean;
    "random_seed"?: number | null | undefined;
    "label_file"?: InputPathType | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "no_label": boolean;
    "no_save_mask": boolean;
    "surface_name"?: string | null | undefined;
    "log_file"?: string | null | undefined;
    "done_file"?: string | null | undefined;
    "stop_file"?: string | null | undefined;
    "save_file"?: string | null | undefined;
    "save_iter": boolean;
    "subjects_dir"?: string | null | undefined;
    "debug": boolean;
    "check_opts": boolean;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_mcsim": mri_mcsim_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_mcsim": mri_mcsim_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_mcsim(...)`.
 *
 * @interface
 */
interface MriMcsimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output CSD files based on the base name
     */
    csd_output: OutputPathType;
    /**
     * Done file created upon completion
     */
    done_output: OutputPathType | null;
    /**
     * Iteration save file
     */
    iteration_save: OutputPathType | null;
    /**
     * Log file generated during execution
     */
    log_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param top_output_dir Top output directory
 * @param base_name Base name for CSD files
 * @param surface Subject name and hemisphere for the surface (e.g., subjectname lh)
 * @param num_repetitions Number of repetitions for the simulation
 * @param fwhm_values Full Width at Half Maximum values for smoothing
 * @param fwhm_max Maximum FWHM for simulation (default 30)
 * @param avg_vertex_area Report cluster area based on average vertex area
 * @param random_seed Random seed value (default is based on Time of Day)
 * @param label_file Label file for masking (default is ?h.cortex.label)
 * @param mask_file Mask file instead of label
 * @param no_label Do not use a label to mask
 * @param no_save_mask Do not save mask to output
 * @param surface_name Surface name (default is white)
 * @param log_file Log file for the output
 * @param done_file Done file to create when finished
 * @param stop_file Stop file (default is ourdir/mri_mcsim.stop)
 * @param save_file Save file (default is ourdir/mri_mcsim.save)
 * @param save_iter Save output after each iteration
 * @param subjects_dir Subjects directory
 * @param debug Turn on debugging
 * @param check_opts Check options do not run
 * @param help Display help message
 * @param version Display version and exit
 *
 * @returns Parameter dictionary
 */
function mri_mcsim_params(
    top_output_dir: string,
    base_name: string,
    surface: Array<string>,
    num_repetitions: number,
    fwhm_values: Array<number> | null = null,
    fwhm_max: number | null = null,
    avg_vertex_area: boolean = false,
    random_seed: number | null = null,
    label_file: InputPathType | null = null,
    mask_file: InputPathType | null = null,
    no_label: boolean = false,
    no_save_mask: boolean = false,
    surface_name: string | null = null,
    log_file: string | null = null,
    done_file: string | null = null,
    stop_file: string | null = null,
    save_file: string | null = null,
    save_iter: boolean = false,
    subjects_dir: string | null = null,
    debug: boolean = false,
    check_opts: boolean = false,
    help: boolean = false,
    version: boolean = false,
): MriMcsimParameters {
    const params = {
        "@type": "freesurfer.mri_mcsim" as const,
        "top_output_dir": top_output_dir,
        "base_name": base_name,
        "surface": surface,
        "num_repetitions": num_repetitions,
        "avg_vertex_area": avg_vertex_area,
        "no_label": no_label,
        "no_save_mask": no_save_mask,
        "save_iter": save_iter,
        "debug": debug,
        "check_opts": check_opts,
        "help": help,
        "version": version,
    };
    if (fwhm_values !== null) {
        params["fwhm_values"] = fwhm_values;
    }
    if (fwhm_max !== null) {
        params["fwhm_max"] = fwhm_max;
    }
    if (random_seed !== null) {
        params["random_seed"] = random_seed;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (surface_name !== null) {
        params["surface_name"] = surface_name;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (done_file !== null) {
        params["done_file"] = done_file;
    }
    if (stop_file !== null) {
        params["stop_file"] = stop_file;
    }
    if (save_file !== null) {
        params["save_file"] = save_file;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_mcsim_cargs(
    params: MriMcsimParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_mcsim");
    cargs.push(
        "--o",
        (params["top_output_dir"] ?? null)
    );
    cargs.push(
        "--base",
        (params["base_name"] ?? null)
    );
    cargs.push(
        "--surface",
        ...(params["surface"] ?? null)
    );
    cargs.push(
        "--nreps",
        String((params["num_repetitions"] ?? null))
    );
    if ((params["fwhm_values"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            ...(params["fwhm_values"] ?? null).map(String)
        );
    }
    if ((params["fwhm_max"] ?? null) !== null) {
        cargs.push(
            "--fwhm-max",
            String((params["fwhm_max"] ?? null))
        );
    }
    if ((params["avg_vertex_area"] ?? null)) {
        cargs.push("--avgvtxarea");
    }
    if ((params["random_seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["random_seed"] ?? null))
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "--label",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["no_label"] ?? null)) {
        cargs.push("--no-label");
    }
    if ((params["no_save_mask"] ?? null)) {
        cargs.push("--no-save-mask");
    }
    if ((params["surface_name"] ?? null) !== null) {
        cargs.push(
            "--surfname",
            (params["surface_name"] ?? null)
        );
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["done_file"] ?? null) !== null) {
        cargs.push(
            "--done",
            (params["done_file"] ?? null)
        );
    }
    if ((params["stop_file"] ?? null) !== null) {
        cargs.push(
            "--stop",
            (params["stop_file"] ?? null)
        );
    }
    if ((params["save_file"] ?? null) !== null) {
        cargs.push(
            "--save",
            (params["save_file"] ?? null)
        );
    }
    if ((params["save_iter"] ?? null)) {
        cargs.push("--save-iter");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["check_opts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_mcsim_outputs(
    params: MriMcsimParameters,
    execution: Execution,
): MriMcsimOutputs {
    const ret: MriMcsimOutputs = {
        root: execution.outputFile("."),
        csd_output: execution.outputFile([(params["top_output_dir"] ?? null), "/", (params["base_name"] ?? null), ".csd"].join('')),
        done_output: ((params["done_file"] ?? null) !== null) ? execution.outputFile([(params["top_output_dir"] ?? null), "/done/", (params["done_file"] ?? null)].join('')) : null,
        iteration_save: ((params["save_file"] ?? null) !== null) ? execution.outputFile([(params["top_output_dir"] ?? null), "/", (params["save_file"] ?? null)].join('')) : null,
        log_output: ((params["log_file"] ?? null) !== null) ? execution.outputFile([(params["top_output_dir"] ?? null), "/log/", (params["log_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Monte Carlo simulation tool for surface-based multiple comparisons.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriMcsimOutputs`).
 */
function mri_mcsim_execute(
    params: MriMcsimParameters,
    execution: Execution,
): MriMcsimOutputs {
    params = execution.params(params)
    const cargs = mri_mcsim_cargs(params, execution)
    const ret = mri_mcsim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Monte Carlo simulation tool for surface-based multiple comparisons.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param top_output_dir Top output directory
 * @param base_name Base name for CSD files
 * @param surface Subject name and hemisphere for the surface (e.g., subjectname lh)
 * @param num_repetitions Number of repetitions for the simulation
 * @param fwhm_values Full Width at Half Maximum values for smoothing
 * @param fwhm_max Maximum FWHM for simulation (default 30)
 * @param avg_vertex_area Report cluster area based on average vertex area
 * @param random_seed Random seed value (default is based on Time of Day)
 * @param label_file Label file for masking (default is ?h.cortex.label)
 * @param mask_file Mask file instead of label
 * @param no_label Do not use a label to mask
 * @param no_save_mask Do not save mask to output
 * @param surface_name Surface name (default is white)
 * @param log_file Log file for the output
 * @param done_file Done file to create when finished
 * @param stop_file Stop file (default is ourdir/mri_mcsim.stop)
 * @param save_file Save file (default is ourdir/mri_mcsim.save)
 * @param save_iter Save output after each iteration
 * @param subjects_dir Subjects directory
 * @param debug Turn on debugging
 * @param check_opts Check options do not run
 * @param help Display help message
 * @param version Display version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMcsimOutputs`).
 */
function mri_mcsim(
    top_output_dir: string,
    base_name: string,
    surface: Array<string>,
    num_repetitions: number,
    fwhm_values: Array<number> | null = null,
    fwhm_max: number | null = null,
    avg_vertex_area: boolean = false,
    random_seed: number | null = null,
    label_file: InputPathType | null = null,
    mask_file: InputPathType | null = null,
    no_label: boolean = false,
    no_save_mask: boolean = false,
    surface_name: string | null = null,
    log_file: string | null = null,
    done_file: string | null = null,
    stop_file: string | null = null,
    save_file: string | null = null,
    save_iter: boolean = false,
    subjects_dir: string | null = null,
    debug: boolean = false,
    check_opts: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriMcsimOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MCSIM_METADATA);
    const params = mri_mcsim_params(top_output_dir, base_name, surface, num_repetitions, fwhm_values, fwhm_max, avg_vertex_area, random_seed, label_file, mask_file, no_label, no_save_mask, surface_name, log_file, done_file, stop_file, save_file, save_iter, subjects_dir, debug, check_opts, help, version)
    return mri_mcsim_execute(params, execution);
}


export {
      MRI_MCSIM_METADATA,
      MriMcsimOutputs,
      MriMcsimParameters,
      mri_mcsim,
      mri_mcsim_cargs,
      mri_mcsim_execute,
      mri_mcsim_outputs,
      mri_mcsim_params,
};
