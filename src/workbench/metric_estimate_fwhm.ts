// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_ESTIMATE_FWHM_METADATA: Metadata = {
    id: "170cc8e78771282beeff1fcd6f52511afec7b240.boutiques",
    name: "metric-estimate-fwhm",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricEstimateFwhmWholeFileParameters {
    "@type": "workbench.metric-estimate-fwhm.whole_file";
    "opt_demean": boolean;
}


interface MetricEstimateFwhmParameters {
    "@type": "workbench.metric-estimate-fwhm";
    "surface": InputPathType;
    "metric_in": InputPathType;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_column_column"?: string | null | undefined;
    "whole_file"?: MetricEstimateFwhmWholeFileParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metric-estimate-fwhm": metric_estimate_fwhm_cargs,
        "workbench.metric-estimate-fwhm.whole_file": metric_estimate_fwhm_whole_file_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param opt_demean subtract the mean image before estimating smoothness
 *
 * @returns Parameter dictionary
 */
function metric_estimate_fwhm_whole_file_params(
    opt_demean: boolean = false,
): MetricEstimateFwhmWholeFileParameters {
    const params = {
        "@type": "workbench.metric-estimate-fwhm.whole_file" as const,
        "opt_demean": opt_demean,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_estimate_fwhm_whole_file_cargs(
    params: MetricEstimateFwhmWholeFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-whole-file");
    if ((params["opt_demean"] ?? null)) {
        cargs.push("-demean");
    }
    return cargs;
}


/**
 * Output object returned when calling `metric_estimate_fwhm(...)`.
 *
 * @interface
 */
interface MetricEstimateFwhmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to use for distance and neighbor information
 * @param metric_in the input metric
 * @param opt_roi_roi_metric use only data within an ROI: the metric file to use as an ROI
 * @param opt_column_column select a single column to estimate smoothness of: the column number or name
 * @param whole_file estimate for the whole file at once, not each column separately
 *
 * @returns Parameter dictionary
 */
function metric_estimate_fwhm_params(
    surface: InputPathType,
    metric_in: InputPathType,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    whole_file: MetricEstimateFwhmWholeFileParameters | null = null,
): MetricEstimateFwhmParameters {
    const params = {
        "@type": "workbench.metric-estimate-fwhm" as const,
        "surface": surface,
        "metric_in": metric_in,
    };
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    if (whole_file !== null) {
        params["whole_file"] = whole_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_estimate_fwhm_cargs(
    params: MetricEstimateFwhmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-estimate-fwhm");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["metric_in"] ?? null)));
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    if ((params["whole_file"] ?? null) !== null) {
        cargs.push(...dynCargs((params["whole_file"] ?? null)["@type"])((params["whole_file"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_estimate_fwhm_outputs(
    params: MetricEstimateFwhmParameters,
    execution: Execution,
): MetricEstimateFwhmOutputs {
    const ret: MetricEstimateFwhmOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Estimate fwhm smoothness of a metric file.
 *
 * Estimates the smoothness of the metric columns, printing the estimates to standard output.  These estimates ignore variation in vertex spacing.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricEstimateFwhmOutputs`).
 */
function metric_estimate_fwhm_execute(
    params: MetricEstimateFwhmParameters,
    runner: Runner | null = null,
): MetricEstimateFwhmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_ESTIMATE_FWHM_METADATA);
    params = execution.params(params)
    const cargs = metric_estimate_fwhm_cargs(params, execution)
    const ret = metric_estimate_fwhm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Estimate fwhm smoothness of a metric file.
 *
 * Estimates the smoothness of the metric columns, printing the estimates to standard output.  These estimates ignore variation in vertex spacing.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to use for distance and neighbor information
 * @param metric_in the input metric
 * @param opt_roi_roi_metric use only data within an ROI: the metric file to use as an ROI
 * @param opt_column_column select a single column to estimate smoothness of: the column number or name
 * @param whole_file estimate for the whole file at once, not each column separately
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricEstimateFwhmOutputs`).
 */
function metric_estimate_fwhm(
    surface: InputPathType,
    metric_in: InputPathType,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_column_column: string | null = null,
    whole_file: MetricEstimateFwhmWholeFileParameters | null = null,
    runner: Runner | null = null,
): MetricEstimateFwhmOutputs {
    const params = metric_estimate_fwhm_params(surface, metric_in, opt_roi_roi_metric, opt_column_column, whole_file)
    return metric_estimate_fwhm_execute(params, runner);
}


export {
      METRIC_ESTIMATE_FWHM_METADATA,
      MetricEstimateFwhmOutputs,
      MetricEstimateFwhmParameters,
      MetricEstimateFwhmWholeFileParameters,
      metric_estimate_fwhm,
      metric_estimate_fwhm_execute,
      metric_estimate_fwhm_params,
      metric_estimate_fwhm_whole_file_params,
};
