// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_NLFILTER_METADATA: Metadata = {
    id: "cd1ced10246857559467c066938c4cbc7f28bb86.boutiques",
    name: "mri_nlfilter",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriNlfilterParameters {
    "@type": "freesurfer.mri_nlfilter";
    "input_image": InputPathType;
    "output_image": string;
    "blur_sigma"?: number | null | undefined;
    "gaussian_sigma"?: number | null | undefined;
    "mean_flag": boolean;
    "window_size"?: number | null | undefined;
    "cplov_flag": boolean;
    "minmax_flag": boolean;
    "no_offsets_flag": boolean;
    "no_crop_flag": boolean;
    "version_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_nlfilter": mri_nlfilter_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_nlfilter": mri_nlfilter_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_nlfilter(...)`.
 *
 * @interface
 */
interface MriNlfilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The processed image output file.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image The input image file to be processed.
 * @param output_image The output image file where the processed image will be saved.
 * @param blur_sigma Specify sigma of the blurring kernel. Default is 0.500.
 * @param gaussian_sigma Filter with Gaussian instead of median. Requires sigma value.
 * @param mean_flag Filter with mean instead of median.
 * @param window_size Specify window size used for offset calculation. Default is 3.
 * @param cplov_flag Filter with cplov.
 * @param minmax_flag Filter with minmax.
 * @param no_offsets_flag Don't use offsets, just apply standard filters.
 * @param no_crop_flag Don't crop to >0 region of image.
 * @param version_flag Display version number.
 * @param help_flag Display help message.
 *
 * @returns Parameter dictionary
 */
function mri_nlfilter_params(
    input_image: InputPathType,
    output_image: string,
    blur_sigma: number | null = null,
    gaussian_sigma: number | null = null,
    mean_flag: boolean = false,
    window_size: number | null = null,
    cplov_flag: boolean = false,
    minmax_flag: boolean = false,
    no_offsets_flag: boolean = false,
    no_crop_flag: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
): MriNlfilterParameters {
    const params = {
        "@type": "freesurfer.mri_nlfilter" as const,
        "input_image": input_image,
        "output_image": output_image,
        "mean_flag": mean_flag,
        "cplov_flag": cplov_flag,
        "minmax_flag": minmax_flag,
        "no_offsets_flag": no_offsets_flag,
        "no_crop_flag": no_crop_flag,
        "version_flag": version_flag,
        "help_flag": help_flag,
    };
    if (blur_sigma !== null) {
        params["blur_sigma"] = blur_sigma;
    }
    if (gaussian_sigma !== null) {
        params["gaussian_sigma"] = gaussian_sigma;
    }
    if (window_size !== null) {
        params["window_size"] = window_size;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_nlfilter_cargs(
    params: MriNlfilterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_nlfilter");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    if ((params["blur_sigma"] ?? null) !== null) {
        cargs.push(
            "-blur",
            String((params["blur_sigma"] ?? null))
        );
    }
    if ((params["gaussian_sigma"] ?? null) !== null) {
        cargs.push(
            "-gaussian",
            String((params["gaussian_sigma"] ?? null))
        );
    }
    if ((params["mean_flag"] ?? null)) {
        cargs.push("-mean");
    }
    if ((params["window_size"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["window_size"] ?? null))
        );
    }
    if ((params["cplov_flag"] ?? null)) {
        cargs.push("-cplov");
    }
    if ((params["minmax_flag"] ?? null)) {
        cargs.push("-minmax");
    }
    if ((params["no_offsets_flag"] ?? null)) {
        cargs.push("-n");
    }
    if ((params["no_crop_flag"] ?? null)) {
        cargs.push("-nc");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_nlfilter_outputs(
    params: MriNlfilterParameters,
    execution: Execution,
): MriNlfilterOutputs {
    const ret: MriNlfilterOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * This program processes an image using a nonlocal filter and writes the results to an output file. It supports different filtering methods such as median, Gaussian, and mean.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNlfilterOutputs`).
 */
function mri_nlfilter_execute(
    params: MriNlfilterParameters,
    runner: Runner | null = null,
): MriNlfilterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_NLFILTER_METADATA);
    params = execution.params(params)
    const cargs = mri_nlfilter_cargs(params, execution)
    const ret = mri_nlfilter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program processes an image using a nonlocal filter and writes the results to an output file. It supports different filtering methods such as median, Gaussian, and mean.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image The input image file to be processed.
 * @param output_image The output image file where the processed image will be saved.
 * @param blur_sigma Specify sigma of the blurring kernel. Default is 0.500.
 * @param gaussian_sigma Filter with Gaussian instead of median. Requires sigma value.
 * @param mean_flag Filter with mean instead of median.
 * @param window_size Specify window size used for offset calculation. Default is 3.
 * @param cplov_flag Filter with cplov.
 * @param minmax_flag Filter with minmax.
 * @param no_offsets_flag Don't use offsets, just apply standard filters.
 * @param no_crop_flag Don't crop to >0 region of image.
 * @param version_flag Display version number.
 * @param help_flag Display help message.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNlfilterOutputs`).
 */
function mri_nlfilter(
    input_image: InputPathType,
    output_image: string,
    blur_sigma: number | null = null,
    gaussian_sigma: number | null = null,
    mean_flag: boolean = false,
    window_size: number | null = null,
    cplov_flag: boolean = false,
    minmax_flag: boolean = false,
    no_offsets_flag: boolean = false,
    no_crop_flag: boolean = false,
    version_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): MriNlfilterOutputs {
    const params = mri_nlfilter_params(input_image, output_image, blur_sigma, gaussian_sigma, mean_flag, window_size, cplov_flag, minmax_flag, no_offsets_flag, no_crop_flag, version_flag, help_flag)
    return mri_nlfilter_execute(params, runner);
}


export {
      MRI_NLFILTER_METADATA,
      MriNlfilterOutputs,
      MriNlfilterParameters,
      mri_nlfilter,
      mri_nlfilter_execute,
      mri_nlfilter_params,
};
