// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_Z2P_METADATA: Metadata = {
    id: "4a23fadc4e304b9fb71b710792e4e9d45c7b9ebe.boutiques",
    name: "mri_z2p",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriZ2pParameters {
    "@type"?: "freesurfer/mri_z2p";
    "z_volume": InputPathType;
    "p_volume": string;
    "sig_volume": string;
    "mask_volume"?: InputPathType | null | undefined;
    "two_sided": boolean;
    "one_sided": boolean;
    "signed": boolean;
    "feat"?: string | null | undefined;
    "feat_format"?: string | null | undefined;
    "nii_format": boolean;
    "niigz_format": boolean;
    "mgh_format": boolean;
    "mgz_format": boolean;
    "img_format": boolean;
    "debug": boolean;
    "check_opts": boolean;
}
type MriZ2pParametersTagged = Required<Pick<MriZ2pParameters, '@type'>> & MriZ2pParameters;


/**
 * Output object returned when calling `MriZ2pParameters(...)`.
 *
 * @interface
 */
interface MriZ2pOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output P volume file.
     */
    output_p_volume: OutputPathType;
    /**
     * Output significance volume file.
     */
    output_sig_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param z_volume Z volume file
 * @param p_volume P volume file
 * @param sig_volume Significance volume file
 * @param mask_volume Mask volume file
 * @param two_sided Assume a two-sided, unsigned test (keeps sign of input).
 * @param one_sided Assume a one-sided, signed test.
 * @param signed Two-sided/signed p-value (p = 2*(1-p)).
 * @param feat Convert all z-stats and zf-stats to sigs in the specified directory.
 * @param feat_format Use specified format for output (e.g., nii, nii.gz, mgh).
 * @param nii_format Use NIfTI output format.
 * @param niigz_format Use compressed NIfTI output format.
 * @param mgh_format Use MGH output format.
 * @param mgz_format Use MGZ output format.
 * @param img_format Use Analyze output format.
 * @param debug Turn on debugging.
 * @param check_opts Don't run anything, just check options and exit.
 *
 * @returns Parameter dictionary
 */
function mri_z2p_params(
    z_volume: InputPathType,
    p_volume: string,
    sig_volume: string,
    mask_volume: InputPathType | null = null,
    two_sided: boolean = false,
    one_sided: boolean = false,
    signed: boolean = false,
    feat: string | null = null,
    feat_format: string | null = null,
    nii_format: boolean = false,
    niigz_format: boolean = false,
    mgh_format: boolean = false,
    mgz_format: boolean = false,
    img_format: boolean = false,
    debug: boolean = false,
    check_opts: boolean = false,
): MriZ2pParametersTagged {
    const params = {
        "@type": "freesurfer/mri_z2p" as const,
        "z_volume": z_volume,
        "p_volume": p_volume,
        "sig_volume": sig_volume,
        "two_sided": two_sided,
        "one_sided": one_sided,
        "signed": signed,
        "nii_format": nii_format,
        "niigz_format": niigz_format,
        "mgh_format": mgh_format,
        "mgz_format": mgz_format,
        "img_format": img_format,
        "debug": debug,
        "check_opts": check_opts,
    };
    if (mask_volume !== null) {
        params["mask_volume"] = mask_volume;
    }
    if (feat !== null) {
        params["feat"] = feat;
    }
    if (feat_format !== null) {
        params["feat_format"] = feat_format;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_z2p_cargs(
    params: MriZ2pParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_z2p");
    cargs.push(
        "--z",
        execution.inputFile((params["z_volume"] ?? null))
    );
    cargs.push(
        "--p",
        (params["p_volume"] ?? null)
    );
    cargs.push(
        "--log10p",
        (params["sig_volume"] ?? null)
    );
    if ((params["mask_volume"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_volume"] ?? null))
        );
    }
    if ((params["two_sided"] ?? false)) {
        cargs.push("--two-sided");
    }
    if ((params["one_sided"] ?? false)) {
        cargs.push("--one-sided");
    }
    if ((params["signed"] ?? false)) {
        cargs.push("--signed");
    }
    if ((params["feat"] ?? null) !== null) {
        cargs.push(
            "--feat",
            (params["feat"] ?? null)
        );
    }
    if ((params["feat_format"] ?? null) !== null) {
        cargs.push(
            "--featfmt",
            (params["feat_format"] ?? null)
        );
    }
    if ((params["nii_format"] ?? false)) {
        cargs.push("--nii");
    }
    if ((params["niigz_format"] ?? false)) {
        cargs.push("--nii.gz");
    }
    if ((params["mgh_format"] ?? false)) {
        cargs.push("--mgh");
    }
    if ((params["mgz_format"] ?? false)) {
        cargs.push("--mgz");
    }
    if ((params["img_format"] ?? false)) {
        cargs.push("--img");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("--debug");
    }
    if ((params["check_opts"] ?? false)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_z2p_outputs(
    params: MriZ2pParameters,
    execution: Execution,
): MriZ2pOutputs {
    const ret: MriZ2pOutputs = {
        root: execution.outputFile("."),
        output_p_volume: execution.outputFile([(params["p_volume"] ?? null)].join('')),
        output_sig_volume: execution.outputFile([(params["sig_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_z2p
 *
 * Converts Z-statistic volumes to P-value volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriZ2pOutputs`).
 */
function mri_z2p_execute(
    params: MriZ2pParameters,
    runner: Runner | null = null,
): MriZ2pOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_Z2P_METADATA);
    params = execution.params(params)
    const cargs = mri_z2p_cargs(params, execution)
    const ret = mri_z2p_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_z2p
 *
 * Converts Z-statistic volumes to P-value volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param z_volume Z volume file
 * @param p_volume P volume file
 * @param sig_volume Significance volume file
 * @param mask_volume Mask volume file
 * @param two_sided Assume a two-sided, unsigned test (keeps sign of input).
 * @param one_sided Assume a one-sided, signed test.
 * @param signed Two-sided/signed p-value (p = 2*(1-p)).
 * @param feat Convert all z-stats and zf-stats to sigs in the specified directory.
 * @param feat_format Use specified format for output (e.g., nii, nii.gz, mgh).
 * @param nii_format Use NIfTI output format.
 * @param niigz_format Use compressed NIfTI output format.
 * @param mgh_format Use MGH output format.
 * @param mgz_format Use MGZ output format.
 * @param img_format Use Analyze output format.
 * @param debug Turn on debugging.
 * @param check_opts Don't run anything, just check options and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriZ2pOutputs`).
 */
function mri_z2p(
    z_volume: InputPathType,
    p_volume: string,
    sig_volume: string,
    mask_volume: InputPathType | null = null,
    two_sided: boolean = false,
    one_sided: boolean = false,
    signed: boolean = false,
    feat: string | null = null,
    feat_format: string | null = null,
    nii_format: boolean = false,
    niigz_format: boolean = false,
    mgh_format: boolean = false,
    mgz_format: boolean = false,
    img_format: boolean = false,
    debug: boolean = false,
    check_opts: boolean = false,
    runner: Runner | null = null,
): MriZ2pOutputs {
    const params = mri_z2p_params(z_volume, p_volume, sig_volume, mask_volume, two_sided, one_sided, signed, feat, feat_format, nii_format, niigz_format, mgh_format, mgz_format, img_format, debug, check_opts)
    return mri_z2p_execute(params, runner);
}


export {
      MRI_Z2P_METADATA,
      MriZ2pOutputs,
      mri_z2p,
      mri_z2p_execute,
      mri_z2p_params,
};
