// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FOD2FIXEL_METADATA: Metadata = {
    id: "789d8f209b3fdf4c5f81cd43bcf2cd1ab6e4addc.boutiques",
    name: "fod2fixel",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Fod2fixelConfigParameters {
    "@type": "mrtrix.fod2fixel.config";
    "key": string;
    "value": string;
}


interface Fod2fixelParameters {
    "@type": "mrtrix.fod2fixel";
    "afd"?: string | null | undefined;
    "peak_amp"?: string | null | undefined;
    "disp"?: string | null | undefined;
    "fmls_integral"?: number | null | undefined;
    "fmls_peak_value"?: number | null | undefined;
    "fmls_no_thresholds": boolean;
    "fmls_lobe_merge_ratio"?: number | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "maxnum"?: number | null | undefined;
    "nii": boolean;
    "dirpeak": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Fod2fixelConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "fod": InputPathType;
    "fixel_directory": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.fod2fixel": fod2fixel_cargs,
        "mrtrix.fod2fixel.config": fod2fixel_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.fod2fixel": fod2fixel_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function fod2fixel_config_params(
    key: string,
    value: string,
): Fod2fixelConfigParameters {
    const params = {
        "@type": "mrtrix.fod2fixel.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fod2fixel_config_cargs(
    params: Fod2fixelConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `fod2fixel(...)`.
 *
 * @interface
 */
interface Fod2fixelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output fixel directory
     */
    fixel_directory: OutputPathType;
    /**
     * output the total Apparent Fibre Density per fixel (integral of FOD lobe) 
     */
    afd: OutputPathType | null;
    /**
     * output the amplitude of the FOD at the maximal peak per fixel 
     */
    peak_amp: OutputPathType | null;
    /**
     * output a measure of dispersion per fixel as the ratio between FOD lobe integral and maximal peak amplitude 
     */
    disp: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param fod the input fod image.
 * @param fixel_directory the output fixel directory
 * @param afd output the total Apparent Fibre Density per fixel (integral of FOD lobe)
 * @param peak_amp output the amplitude of the FOD at the maximal peak per fixel
 * @param disp output a measure of dispersion per fixel as the ratio between FOD lobe integral and maximal peak amplitude
 * @param fmls_integral threshold absolute numerical integral of positive FOD lobes. Any lobe for which the integral is smaller than this threshold will be discarded. Default: 0.
 * @param fmls_peak_value threshold peak amplitude of positive FOD lobes. Any lobe for which the maximal peak amplitude is smaller than this threshold will be discarded. Default: 0.1.
 * @param fmls_no_thresholds disable all FOD lobe thresholding; every lobe where the FOD is positive will be retained.
 * @param fmls_lobe_merge_ratio Specify the ratio between a given FOD amplitude sample between two lobes, and the smallest peak amplitude of the adjacent lobes, above which those lobes will be merged. This is the amplitude of the FOD at the 'bridge' point between the two lobes, divided by the peak amplitude of the smaller of the two adjoining lobes. A value of 1.0 will never merge two lobes into one; a value of 0.0 will always merge lobes unless they are bisected by a zero-valued crossing. Default: 1.
 * @param mask only perform computation within the specified binary brain mask image.
 * @param maxnum maximum number of fixels to output for any particular voxel (default: no limit)
 * @param nii output the directions and index file in nii format (instead of the default mif)
 * @param dirpeak define the fixel direction as that of the lobe's maximal peak as opposed to its weighted mean direction (the default)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function fod2fixel_params(
    fod: InputPathType,
    fixel_directory: string,
    afd: string | null = null,
    peak_amp: string | null = null,
    disp: string | null = null,
    fmls_integral: number | null = null,
    fmls_peak_value: number | null = null,
    fmls_no_thresholds: boolean = false,
    fmls_lobe_merge_ratio: number | null = null,
    mask: InputPathType | null = null,
    maxnum: number | null = null,
    nii: boolean = false,
    dirpeak: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fod2fixelConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Fod2fixelParameters {
    const params = {
        "@type": "mrtrix.fod2fixel" as const,
        "fmls_no_thresholds": fmls_no_thresholds,
        "nii": nii,
        "dirpeak": dirpeak,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "fod": fod,
        "fixel_directory": fixel_directory,
    };
    if (afd !== null) {
        params["afd"] = afd;
    }
    if (peak_amp !== null) {
        params["peak_amp"] = peak_amp;
    }
    if (disp !== null) {
        params["disp"] = disp;
    }
    if (fmls_integral !== null) {
        params["fmls_integral"] = fmls_integral;
    }
    if (fmls_peak_value !== null) {
        params["fmls_peak_value"] = fmls_peak_value;
    }
    if (fmls_lobe_merge_ratio !== null) {
        params["fmls_lobe_merge_ratio"] = fmls_lobe_merge_ratio;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (maxnum !== null) {
        params["maxnum"] = maxnum;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fod2fixel_cargs(
    params: Fod2fixelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fod2fixel");
    if ((params["afd"] ?? null) !== null) {
        cargs.push(
            "-afd",
            (params["afd"] ?? null)
        );
    }
    if ((params["peak_amp"] ?? null) !== null) {
        cargs.push(
            "-peak_amp",
            (params["peak_amp"] ?? null)
        );
    }
    if ((params["disp"] ?? null) !== null) {
        cargs.push(
            "-disp",
            (params["disp"] ?? null)
        );
    }
    if ((params["fmls_integral"] ?? null) !== null) {
        cargs.push(
            "-fmls_integral",
            String((params["fmls_integral"] ?? null))
        );
    }
    if ((params["fmls_peak_value"] ?? null) !== null) {
        cargs.push(
            "-fmls_peak_value",
            String((params["fmls_peak_value"] ?? null))
        );
    }
    if ((params["fmls_no_thresholds"] ?? null)) {
        cargs.push("-fmls_no_thresholds");
    }
    if ((params["fmls_lobe_merge_ratio"] ?? null) !== null) {
        cargs.push(
            "-fmls_lobe_merge_ratio",
            String((params["fmls_lobe_merge_ratio"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["maxnum"] ?? null) !== null) {
        cargs.push(
            "-maxnum",
            String((params["maxnum"] ?? null))
        );
    }
    if ((params["nii"] ?? null)) {
        cargs.push("-nii");
    }
    if ((params["dirpeak"] ?? null)) {
        cargs.push("-dirpeak");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["fod"] ?? null)));
    cargs.push((params["fixel_directory"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fod2fixel_outputs(
    params: Fod2fixelParameters,
    execution: Execution,
): Fod2fixelOutputs {
    const ret: Fod2fixelOutputs = {
        root: execution.outputFile("."),
        fixel_directory: execution.outputFile([(params["fixel_directory"] ?? null)].join('')),
        afd: ((params["afd"] ?? null) !== null) ? execution.outputFile([(params["afd"] ?? null)].join('')) : null,
        peak_amp: ((params["peak_amp"] ?? null) !== null) ? execution.outputFile([(params["peak_amp"] ?? null)].join('')) : null,
        disp: ((params["disp"] ?? null) !== null) ? execution.outputFile([(params["disp"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fod2fixel
 *
 * Perform segmentation of continuous Fibre Orientation Distributions (FODs) to produce discrete fixels.
 *
 *
 *
 * References:
 *
 * * Reference for the FOD segmentation method:
 * Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT: Spherical-deconvolution informed filtering of tractograms. NeuroImage, 2013, 67, 298-312 (Appendix 2)
 *
 * * Reference for Apparent Fibre Density (AFD):
 * Raffelt, D.; Tournier, J.-D.; Rose, S.; Ridgway, G.R.; Henderson, R.; Crozier, S.; Salvado, O.; Connelly, A. Apparent Fibre Density: a novel measure for the analysis of diffusion-weighted magnetic resonance images.Neuroimage, 2012, 15;59(4), 3976-94.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fod2fixelOutputs`).
 */
function fod2fixel_execute(
    params: Fod2fixelParameters,
    runner: Runner | null = null,
): Fod2fixelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FOD2FIXEL_METADATA);
    params = execution.params(params)
    const cargs = fod2fixel_cargs(params, execution)
    const ret = fod2fixel_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fod2fixel
 *
 * Perform segmentation of continuous Fibre Orientation Distributions (FODs) to produce discrete fixels.
 *
 *
 *
 * References:
 *
 * * Reference for the FOD segmentation method:
 * Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT: Spherical-deconvolution informed filtering of tractograms. NeuroImage, 2013, 67, 298-312 (Appendix 2)
 *
 * * Reference for Apparent Fibre Density (AFD):
 * Raffelt, D.; Tournier, J.-D.; Rose, S.; Ridgway, G.R.; Henderson, R.; Crozier, S.; Salvado, O.; Connelly, A. Apparent Fibre Density: a novel measure for the analysis of diffusion-weighted magnetic resonance images.Neuroimage, 2012, 15;59(4), 3976-94.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param fod the input fod image.
 * @param fixel_directory the output fixel directory
 * @param afd output the total Apparent Fibre Density per fixel (integral of FOD lobe)
 * @param peak_amp output the amplitude of the FOD at the maximal peak per fixel
 * @param disp output a measure of dispersion per fixel as the ratio between FOD lobe integral and maximal peak amplitude
 * @param fmls_integral threshold absolute numerical integral of positive FOD lobes. Any lobe for which the integral is smaller than this threshold will be discarded. Default: 0.
 * @param fmls_peak_value threshold peak amplitude of positive FOD lobes. Any lobe for which the maximal peak amplitude is smaller than this threshold will be discarded. Default: 0.1.
 * @param fmls_no_thresholds disable all FOD lobe thresholding; every lobe where the FOD is positive will be retained.
 * @param fmls_lobe_merge_ratio Specify the ratio between a given FOD amplitude sample between two lobes, and the smallest peak amplitude of the adjacent lobes, above which those lobes will be merged. This is the amplitude of the FOD at the 'bridge' point between the two lobes, divided by the peak amplitude of the smaller of the two adjoining lobes. A value of 1.0 will never merge two lobes into one; a value of 0.0 will always merge lobes unless they are bisected by a zero-valued crossing. Default: 1.
 * @param mask only perform computation within the specified binary brain mask image.
 * @param maxnum maximum number of fixels to output for any particular voxel (default: no limit)
 * @param nii output the directions and index file in nii format (instead of the default mif)
 * @param dirpeak define the fixel direction as that of the lobe's maximal peak as opposed to its weighted mean direction (the default)
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fod2fixelOutputs`).
 */
function fod2fixel(
    fod: InputPathType,
    fixel_directory: string,
    afd: string | null = null,
    peak_amp: string | null = null,
    disp: string | null = null,
    fmls_integral: number | null = null,
    fmls_peak_value: number | null = null,
    fmls_no_thresholds: boolean = false,
    fmls_lobe_merge_ratio: number | null = null,
    mask: InputPathType | null = null,
    maxnum: number | null = null,
    nii: boolean = false,
    dirpeak: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Fod2fixelConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Fod2fixelOutputs {
    const params = fod2fixel_params(fod, fixel_directory, afd, peak_amp, disp, fmls_integral, fmls_peak_value, fmls_no_thresholds, fmls_lobe_merge_ratio, mask, maxnum, nii, dirpeak, info, quiet, debug, force, nthreads, config, help, version)
    return fod2fixel_execute(params, runner);
}


export {
      FOD2FIXEL_METADATA,
      Fod2fixelConfigParameters,
      Fod2fixelOutputs,
      Fod2fixelParameters,
      fod2fixel,
      fod2fixel_config_params,
      fod2fixel_execute,
      fod2fixel_params,
};
