// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_GCA_AMBIGUOUS_METADATA: Metadata = {
    id: "c1f7a9f8341d18317f7c5d914e50447802fcb29f.boutiques",
    name: "mri_gca_ambiguous",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriGcaAmbiguousParameters {
    "@type": "freesurfer.mri_gca_ambiguous";
    "gca_file": InputPathType;
    "output_volume": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_gca_ambiguous": mri_gca_ambiguous_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_gca_ambiguous": mri_gca_ambiguous_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_gca_ambiguous(...)`.
 *
 * @interface
 */
interface MriGcaAmbiguousOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting MR image file with computed ambiguity measure
     */
    output_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param gca_file The input GCA file
 * @param output_volume The output MR image file
 *
 * @returns Parameter dictionary
 */
function mri_gca_ambiguous_params(
    gca_file: InputPathType,
    output_volume: string,
): MriGcaAmbiguousParameters {
    const params = {
        "@type": "freesurfer.mri_gca_ambiguous" as const,
        "gca_file": gca_file,
        "output_volume": output_volume,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_gca_ambiguous_cargs(
    params: MriGcaAmbiguousParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_gca_ambiguous");
    cargs.push(execution.inputFile((params["gca_file"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_gca_ambiguous_outputs(
    params: MriGcaAmbiguousParameters,
    execution: Execution,
): MriGcaAmbiguousOutputs {
    const ret: MriGcaAmbiguousOutputs = {
        root: execution.outputFile("."),
        output_image: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_gca_ambiguous
 *
 * This program computes an ambiguity measure across a GCA and outputs an MR image of it.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGcaAmbiguousOutputs`).
 */
function mri_gca_ambiguous_execute(
    params: MriGcaAmbiguousParameters,
    runner: Runner | null = null,
): MriGcaAmbiguousOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_GCA_AMBIGUOUS_METADATA);
    params = execution.params(params)
    const cargs = mri_gca_ambiguous_cargs(params, execution)
    const ret = mri_gca_ambiguous_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_gca_ambiguous
 *
 * This program computes an ambiguity measure across a GCA and outputs an MR image of it.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param gca_file The input GCA file
 * @param output_volume The output MR image file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGcaAmbiguousOutputs`).
 */
function mri_gca_ambiguous(
    gca_file: InputPathType,
    output_volume: string,
    runner: Runner | null = null,
): MriGcaAmbiguousOutputs {
    const params = mri_gca_ambiguous_params(gca_file, output_volume)
    return mri_gca_ambiguous_execute(params, runner);
}


export {
      MRI_GCA_AMBIGUOUS_METADATA,
      MriGcaAmbiguousOutputs,
      MriGcaAmbiguousParameters,
      mri_gca_ambiguous,
      mri_gca_ambiguous_execute,
      mri_gca_ambiguous_params,
};
