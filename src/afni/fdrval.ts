// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FDRVAL_METADATA: Metadata = {
    id: "a0de8ec4e0e3a36fbc893d3b8b4292e32543fc80.boutiques",
    name: "fdrval",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FdrvalParameters {
    "@type": "afni.fdrval";
    "dset": InputPathType;
    "sub": number;
    "val_list": Array<number>;
    "pval": boolean;
    "ponly": boolean;
    "qonly": boolean;
    "qinput": boolean;
    "inverse": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fdrval": fdrval_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fdrval": fdrval_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fdrval(...)`.
 *
 * @interface
 */
interface FdrvalOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Computed q-values or p-values for the given thresholds
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dset Input dataset
 * @param sub Sub-brick number
 * @param val_list List of threshold values
 * @param pval Output the p-value (on the same line, after q)
 * @param ponly Don't output q-values, just p-values
 * @param qonly Don't output p-values, just q-values
 * @param qinput The 'val' inputs are taken to be q-values and then the outputs are the corresponding statistical thresholds.
 * @param inverse Inverse of the usual operation. 'Val' inputs must be between 0 and 1 (exclusive). Cannot be used with '-ponly' or '-pval'.
 *
 * @returns Parameter dictionary
 */
function fdrval_params(
    dset: InputPathType,
    sub: number,
    val_list: Array<number>,
    pval: boolean = false,
    ponly: boolean = false,
    qonly: boolean = false,
    qinput: boolean = false,
    inverse: boolean = false,
): FdrvalParameters {
    const params = {
        "@type": "afni.fdrval" as const,
        "dset": dset,
        "sub": sub,
        "val_list": val_list,
        "pval": pval,
        "ponly": ponly,
        "qonly": qonly,
        "qinput": qinput,
        "inverse": inverse,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fdrval_cargs(
    params: FdrvalParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fdrval");
    cargs.push(execution.inputFile((params["dset"] ?? null)));
    cargs.push(String((params["sub"] ?? null)));
    cargs.push(...(params["val_list"] ?? null).map(String));
    if ((params["pval"] ?? null)) {
        cargs.push("-pval");
    }
    if ((params["ponly"] ?? null)) {
        cargs.push("-ponly");
    }
    if ((params["qonly"] ?? null)) {
        cargs.push("-qonly");
    }
    if ((params["qinput"] ?? null)) {
        cargs.push("-qinput");
    }
    if ((params["inverse"] ?? null)) {
        cargs.push("-inverse");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fdrval_outputs(
    params: FdrvalParameters,
    execution: Execution,
): FdrvalOutputs {
    const ret: FdrvalOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile(["stdout.txt"].join('')),
    };
    return ret;
}


/**
 * Computes q-values from FDR curve data stored in dataset headers.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FdrvalOutputs`).
 */
function fdrval_execute(
    params: FdrvalParameters,
    runner: Runner | null = null,
): FdrvalOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FDRVAL_METADATA);
    params = execution.params(params)
    const cargs = fdrval_cargs(params, execution)
    const ret = fdrval_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes q-values from FDR curve data stored in dataset headers.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dset Input dataset
 * @param sub Sub-brick number
 * @param val_list List of threshold values
 * @param pval Output the p-value (on the same line, after q)
 * @param ponly Don't output q-values, just p-values
 * @param qonly Don't output p-values, just q-values
 * @param qinput The 'val' inputs are taken to be q-values and then the outputs are the corresponding statistical thresholds.
 * @param inverse Inverse of the usual operation. 'Val' inputs must be between 0 and 1 (exclusive). Cannot be used with '-ponly' or '-pval'.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FdrvalOutputs`).
 */
function fdrval(
    dset: InputPathType,
    sub: number,
    val_list: Array<number>,
    pval: boolean = false,
    ponly: boolean = false,
    qonly: boolean = false,
    qinput: boolean = false,
    inverse: boolean = false,
    runner: Runner | null = null,
): FdrvalOutputs {
    const params = fdrval_params(dset, sub, val_list, pval, ponly, qonly, qinput, inverse)
    return fdrval_execute(params, runner);
}


export {
      FDRVAL_METADATA,
      FdrvalOutputs,
      FdrvalParameters,
      fdrval,
      fdrval_execute,
      fdrval_params,
};
