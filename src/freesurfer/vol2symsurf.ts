// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOL2SYMSURF_METADATA: Metadata = {
    id: "f7fafa95d03d4b203414d428de80f8e3b613706f.boutiques",
    name: "vol2symsurf",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Vol2symsurfParameters {
    "__STYXTYPE__": "vol2symsurf";
    "registration_file": InputPathType;
    "input_volume": InputPathType;
    "fwhm": number;
    "output_stem"?: string | null | undefined;
    "regheader"?: string | null | undefined;
    "projection_fraction"?: number | null | undefined;
    "no_diff": boolean;
    "laterality_index": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "vol2symsurf": vol2symsurf_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "vol2symsurf": vol2symsurf_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `vol2symsurf(...)`.
 *
 * @interface
 */
interface Vol2symsurfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output for left hemisphere
     */
    output_lh: OutputPathType | null;
    /**
     * Output for right hemisphere
     */
    output_rh: OutputPathType | null;
    /**
     * Output for left-right hemisphere difference
     */
    output_lh_rh_difference: OutputPathType | null;
    /**
     * Output for laterality index
     */
    output_li_difference: OutputPathType | null;
}


function vol2symsurf_params(
    registration_file: InputPathType,
    input_volume: InputPathType,
    fwhm: number,
    output_stem: string | null = "instem.fsaverage_sym.smFWHM.lh.hemi",
    regheader: string | null = null,
    projection_fraction: number | null = 0.5,
    no_diff: boolean = false,
    laterality_index: boolean = false,
): Vol2symsurfParameters {
    /**
     * Build parameters.
    
     * @param registration_file Registration file
     * @param input_volume Input volume in NIfTI format
     * @param fwhm Full width at half maximum for surface smoothing
     * @param output_stem Output stem
     * @param regheader Subject for regheader
     * @param projection_fraction Projection fraction
     * @param no_diff Do not compute left-right hemisphere difference
     * @param laterality_index Compute laterality index instead of simple difference
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "vol2symsurf" as const,
        "registration_file": registration_file,
        "input_volume": input_volume,
        "fwhm": fwhm,
        "no_diff": no_diff,
        "laterality_index": laterality_index,
    };
    if (output_stem !== null) {
        params["output_stem"] = output_stem;
    }
    if (regheader !== null) {
        params["regheader"] = regheader;
    }
    if (projection_fraction !== null) {
        params["projection_fraction"] = projection_fraction;
    }
    return params;
}


function vol2symsurf_cargs(
    params: Vol2symsurfParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("vol2symsurf");
    cargs.push(
        "--reg",
        execution.inputFile((params["registration_file"] ?? null))
    );
    cargs.push(
        "--i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "--fwhm",
        String((params["fwhm"] ?? null))
    );
    if ((params["output_stem"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_stem"] ?? null)
        );
    }
    if ((params["regheader"] ?? null) !== null) {
        cargs.push(
            "--regheader",
            (params["regheader"] ?? null)
        );
    }
    if ((params["projection_fraction"] ?? null) !== null) {
        cargs.push(
            "--projfrac",
            String((params["projection_fraction"] ?? null))
        );
    }
    if ((params["no_diff"] ?? null)) {
        cargs.push("--no-diff");
    }
    if ((params["laterality_index"] ?? null)) {
        cargs.push("--li");
    }
    return cargs;
}


function vol2symsurf_outputs(
    params: Vol2symsurfParameters,
    execution: Execution,
): Vol2symsurfOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Vol2symsurfOutputs = {
        root: execution.outputFile("."),
        output_lh: ((params["output_stem"] ?? null) !== null) ? execution.outputFile([(params["output_stem"] ?? null), ".lh.nii"].join('')) : null,
        output_rh: ((params["output_stem"] ?? null) !== null) ? execution.outputFile([(params["output_stem"] ?? null), ".rh.nii"].join('')) : null,
        output_lh_rh_difference: ((params["output_stem"] ?? null) !== null) ? execution.outputFile([(params["output_stem"] ?? null), ".lh-rh.nii"].join('')) : null,
        output_li_difference: ((params["output_stem"] ?? null) !== null) ? execution.outputFile([(params["output_stem"] ?? null), ".li.lh-rh.nii"].join('')) : null,
    };
    return ret;
}


function vol2symsurf_execute(
    params: Vol2symsurfParameters,
    execution: Execution,
): Vol2symsurfOutputs {
    /**
     * A tool that samples a volume onto the surface of the left-right symmetric subject (fsaverage_sym).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Vol2symsurfOutputs`).
     */
    params = execution.params(params)
    const cargs = vol2symsurf_cargs(params, execution)
    const ret = vol2symsurf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function vol2symsurf(
    registration_file: InputPathType,
    input_volume: InputPathType,
    fwhm: number,
    output_stem: string | null = "instem.fsaverage_sym.smFWHM.lh.hemi",
    regheader: string | null = null,
    projection_fraction: number | null = 0.5,
    no_diff: boolean = false,
    laterality_index: boolean = false,
    runner: Runner | null = null,
): Vol2symsurfOutputs {
    /**
     * A tool that samples a volume onto the surface of the left-right symmetric subject (fsaverage_sym).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param registration_file Registration file
     * @param input_volume Input volume in NIfTI format
     * @param fwhm Full width at half maximum for surface smoothing
     * @param output_stem Output stem
     * @param regheader Subject for regheader
     * @param projection_fraction Projection fraction
     * @param no_diff Do not compute left-right hemisphere difference
     * @param laterality_index Compute laterality index instead of simple difference
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Vol2symsurfOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOL2SYMSURF_METADATA);
    const params = vol2symsurf_params(registration_file, input_volume, fwhm, output_stem, regheader, projection_fraction, no_diff, laterality_index)
    return vol2symsurf_execute(params, execution);
}


export {
      VOL2SYMSURF_METADATA,
      Vol2symsurfOutputs,
      Vol2symsurfParameters,
      vol2symsurf,
      vol2symsurf_params,
};
