// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_FALSE_CORRELATION_METADATA: Metadata = {
    id: "b999ec07c385ff34f8bea679627480ede5acb598.boutiques",
    name: "metric-false-correlation",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricFalseCorrelationParameters {
    "__STYXTYPE__": "metric-false-correlation";
    "surface": InputPathType;
    "metric_in": InputPathType;
    "3d_dist": number;
    "geo_outer": number;
    "geo_inner": number;
    "metric_out": string;
    "opt_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_dump_text_text_out"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "metric-false-correlation": metric_false_correlation_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "metric-false-correlation": metric_false_correlation_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metric_false_correlation(...)`.
 *
 * @interface
 */
interface MetricFalseCorrelationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric_out: OutputPathType;
}


function metric_false_correlation_params(
    surface: InputPathType,
    metric_in: InputPathType,
    v_3d_dist: number,
    geo_outer: number,
    geo_inner: number,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_dump_text_text_out: string | null = null,
): MetricFalseCorrelationParameters {
    /**
     * Build parameters.
    
     * @param surface the surface to compute geodesic and 3D distance with
     * @param metric_in the metric to correlate
     * @param v_3d_dist maximum 3D distance to check around each vertex
     * @param geo_outer maximum geodesic distance to use for neighboring correlation
     * @param geo_inner minimum geodesic distance to use for neighboring correlation
     * @param metric_out the output metric
     * @param opt_roi_roi_metric select a region of interest that has data: the region, as a metric file
     * @param opt_dump_text_text_out dump the raw measures used to a text file: the output text file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "metric-false-correlation" as const,
        "surface": surface,
        "metric_in": metric_in,
        "3d_dist": v_3d_dist,
        "geo_outer": geo_outer,
        "geo_inner": geo_inner,
        "metric_out": metric_out,
    };
    if (opt_roi_roi_metric !== null) {
        params["opt_roi_roi_metric"] = opt_roi_roi_metric;
    }
    if (opt_dump_text_text_out !== null) {
        params["opt_dump_text_text_out"] = opt_dump_text_text_out;
    }
    return params;
}


function metric_false_correlation_cargs(
    params: MetricFalseCorrelationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-false-correlation");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["metric_in"] ?? null)));
    cargs.push(String((params["3d_dist"] ?? null)));
    cargs.push(String((params["geo_outer"] ?? null)));
    cargs.push(String((params["geo_inner"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    if ((params["opt_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_dump_text_text_out"] ?? null) !== null) {
        cargs.push(
            "-dump-text",
            (params["opt_dump_text_text_out"] ?? null)
        );
    }
    return cargs;
}


function metric_false_correlation_outputs(
    params: MetricFalseCorrelationParameters,
    execution: Execution,
): MetricFalseCorrelationOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MetricFalseCorrelationOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


function metric_false_correlation_execute(
    params: MetricFalseCorrelationParameters,
    execution: Execution,
): MetricFalseCorrelationOutputs {
    /**
     * Compare correlation locally and across/through sulci/gyri.
     * 
     * For each vertex, compute the average correlation within a range of geodesic distances that don't cross a sulcus/gyrus, and the correlation to the closest vertex crossing a sulcus/gyrus.  A vertex is considered to cross a sulcus/gyrus if the 3D distance is less than a third of the geodesic distance.  The output file contains the ratio between these correlations, and some additional maps to help explain the ratio.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MetricFalseCorrelationOutputs`).
     */
    params = execution.params(params)
    const cargs = metric_false_correlation_cargs(params, execution)
    const ret = metric_false_correlation_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function metric_false_correlation(
    surface: InputPathType,
    metric_in: InputPathType,
    v_3d_dist: number,
    geo_outer: number,
    geo_inner: number,
    metric_out: string,
    opt_roi_roi_metric: InputPathType | null = null,
    opt_dump_text_text_out: string | null = null,
    runner: Runner | null = null,
): MetricFalseCorrelationOutputs {
    /**
     * Compare correlation locally and across/through sulci/gyri.
     * 
     * For each vertex, compute the average correlation within a range of geodesic distances that don't cross a sulcus/gyrus, and the correlation to the closest vertex crossing a sulcus/gyrus.  A vertex is considered to cross a sulcus/gyrus if the 3D distance is less than a third of the geodesic distance.  The output file contains the ratio between these correlations, and some additional maps to help explain the ratio.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface the surface to compute geodesic and 3D distance with
     * @param metric_in the metric to correlate
     * @param v_3d_dist maximum 3D distance to check around each vertex
     * @param geo_outer maximum geodesic distance to use for neighboring correlation
     * @param geo_inner minimum geodesic distance to use for neighboring correlation
     * @param metric_out the output metric
     * @param opt_roi_roi_metric select a region of interest that has data: the region, as a metric file
     * @param opt_dump_text_text_out dump the raw measures used to a text file: the output text file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MetricFalseCorrelationOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_FALSE_CORRELATION_METADATA);
    const params = metric_false_correlation_params(surface, metric_in, v_3d_dist, geo_outer, geo_inner, metric_out, opt_roi_roi_metric, opt_dump_text_text_out)
    return metric_false_correlation_execute(params, execution);
}


export {
      METRIC_FALSE_CORRELATION_METADATA,
      MetricFalseCorrelationOutputs,
      MetricFalseCorrelationParameters,
      metric_false_correlation,
      metric_false_correlation_params,
};
