// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_MAT2D_PLOT_PY_METADATA: Metadata = {
    id: "1027eba31ebddddd35ae7804ae3794ab71660b37.boutiques",
    name: "fat_mat2d_plot.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatMat2dPlotPyParameters {
    "@type": "afni.fat_mat2d_plot.py";
    "input_file": InputPathType;
    "matrices"?: Array<string> | null | undefined;
    "prefix"?: string | null | undefined;
    "file_type"?: string | null | undefined;
    "dpi"?: number | null | undefined;
    "min_colorbar"?: number | null | undefined;
    "max_colorbar"?: number | null | undefined;
    "fs_xticks"?: number | null | undefined;
    "fs_yticks"?: number | null | undefined;
    "fs_title"?: number | null | undefined;
    "fs_cbar"?: number | null | undefined;
    "cbar_n_intervals"?: number | null | undefined;
    "cbar"?: string | null | undefined;
    "cbar_width_perc"?: number | null | undefined;
    "no_colorbar": boolean;
    "figsize_x"?: number | null | undefined;
    "figsize_y"?: number | null | undefined;
    "hold_image": boolean;
    "tight_layout": boolean;
    "xticks_off": boolean;
    "yticks_off": boolean;
    "version": boolean;
    "date": boolean;
    "help": boolean;
    "help_view": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fat_mat2d_plot.py": fat_mat2d_plot_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fat_mat2d_plot.py": fat_mat2d_plot_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_mat2d_plot_py(...)`.
 *
 * @interface
 */
interface FatMat2dPlotPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Individual image files of matrices; these can contain colorbars, as well.
     */
    output_files: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file Name of *.netcc or *.grid file with matrices to be plotted
 * @param matrices List of matrices to be plotted, identified by their parameter name. If no list is provided, then all matrices in the input file will be plotted.
 * @param prefix Output basename for image(s). Note that this can include path information, but the name of each matrix and the file extension will be appended to it.
 * @param file_type Filetype, given as extension (e.g., png, jpg). Available filetypes depend slightly on your OS and setup.
 * @param dpi Spatial resolution (dots per inch) of output images.
 * @param min_colorbar Minimum value of the colorbar.
 * @param max_colorbar Maximum value of the colorbar.
 * @param fs_xticks Font size of ticks along the x-axis.
 * @param fs_yticks Font size of ticks along the y-axis.
 * @param fs_title Font size of the title.
 * @param fs_cbar Font size of the colorbar.
 * @param cbar_n_intervals Number of intervals on colorbars for enumeration purposes. This controls how many numbers appear along the colorbar (which would be NI +1).
 * @param cbar Name of the colorbar to use. The available colormaps can be found online.
 * @param cbar_width_perc Width of the colorbar as a percentage of the image.
 * @param no_colorbar Disable the colorbar in the image.
 * @param figsize_x Width of the created image in inches.
 * @param figsize_y Height of the created image in inches.
 * @param hold_image In addition to saving an image file, open the image and keep displaying it until a key is pressed in the terminal.
 * @param tight_layout Use matplotlib's tight layout functionality in arranging the plot.
 * @param xticks_off Don't display labels along the x-axis.
 * @param yticks_off Don't display labels along the y-axis.
 * @param version Display the version number of the program.
 * @param date Display the release/editing date of the current version.
 * @param help Display help in the terminal.
 * @param help_view Display help in a separate text editor.
 *
 * @returns Parameter dictionary
 */
function fat_mat2d_plot_py_params(
    input_file: InputPathType,
    matrices: Array<string> | null = null,
    prefix: string | null = null,
    file_type: string | null = null,
    dpi: number | null = null,
    min_colorbar: number | null = null,
    max_colorbar: number | null = null,
    fs_xticks: number | null = null,
    fs_yticks: number | null = null,
    fs_title: number | null = null,
    fs_cbar: number | null = null,
    cbar_n_intervals: number | null = null,
    cbar: string | null = null,
    cbar_width_perc: number | null = null,
    no_colorbar: boolean = false,
    figsize_x: number | null = null,
    figsize_y: number | null = null,
    hold_image: boolean = false,
    tight_layout: boolean = false,
    xticks_off: boolean = false,
    yticks_off: boolean = false,
    version: boolean = false,
    date: boolean = false,
    help: boolean = false,
    help_view: boolean = false,
): FatMat2dPlotPyParameters {
    const params = {
        "@type": "afni.fat_mat2d_plot.py" as const,
        "input_file": input_file,
        "no_colorbar": no_colorbar,
        "hold_image": hold_image,
        "tight_layout": tight_layout,
        "xticks_off": xticks_off,
        "yticks_off": yticks_off,
        "version": version,
        "date": date,
        "help": help,
        "help_view": help_view,
    };
    if (matrices !== null) {
        params["matrices"] = matrices;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (file_type !== null) {
        params["file_type"] = file_type;
    }
    if (dpi !== null) {
        params["dpi"] = dpi;
    }
    if (min_colorbar !== null) {
        params["min_colorbar"] = min_colorbar;
    }
    if (max_colorbar !== null) {
        params["max_colorbar"] = max_colorbar;
    }
    if (fs_xticks !== null) {
        params["fs_xticks"] = fs_xticks;
    }
    if (fs_yticks !== null) {
        params["fs_yticks"] = fs_yticks;
    }
    if (fs_title !== null) {
        params["fs_title"] = fs_title;
    }
    if (fs_cbar !== null) {
        params["fs_cbar"] = fs_cbar;
    }
    if (cbar_n_intervals !== null) {
        params["cbar_n_intervals"] = cbar_n_intervals;
    }
    if (cbar !== null) {
        params["cbar"] = cbar;
    }
    if (cbar_width_perc !== null) {
        params["cbar_width_perc"] = cbar_width_perc;
    }
    if (figsize_x !== null) {
        params["figsize_x"] = figsize_x;
    }
    if (figsize_y !== null) {
        params["figsize_y"] = figsize_y;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_mat2d_plot_py_cargs(
    params: FatMat2dPlotPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_mat2d_plot.py");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["matrices"] ?? null) !== null) {
        cargs.push(...(params["matrices"] ?? null));
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push((params["prefix"] ?? null));
    }
    if ((params["file_type"] ?? null) !== null) {
        cargs.push((params["file_type"] ?? null));
    }
    if ((params["dpi"] ?? null) !== null) {
        cargs.push(String((params["dpi"] ?? null)));
    }
    if ((params["min_colorbar"] ?? null) !== null) {
        cargs.push(String((params["min_colorbar"] ?? null)));
    }
    if ((params["max_colorbar"] ?? null) !== null) {
        cargs.push(String((params["max_colorbar"] ?? null)));
    }
    if ((params["fs_xticks"] ?? null) !== null) {
        cargs.push(String((params["fs_xticks"] ?? null)));
    }
    if ((params["fs_yticks"] ?? null) !== null) {
        cargs.push(String((params["fs_yticks"] ?? null)));
    }
    if ((params["fs_title"] ?? null) !== null) {
        cargs.push(String((params["fs_title"] ?? null)));
    }
    if ((params["fs_cbar"] ?? null) !== null) {
        cargs.push(String((params["fs_cbar"] ?? null)));
    }
    if ((params["cbar_n_intervals"] ?? null) !== null) {
        cargs.push(String((params["cbar_n_intervals"] ?? null)));
    }
    if ((params["cbar"] ?? null) !== null) {
        cargs.push((params["cbar"] ?? null));
    }
    if ((params["cbar_width_perc"] ?? null) !== null) {
        cargs.push(String((params["cbar_width_perc"] ?? null)));
    }
    if ((params["no_colorbar"] ?? null)) {
        cargs.push("-cbar_off");
    }
    if ((params["figsize_x"] ?? null) !== null) {
        cargs.push(String((params["figsize_x"] ?? null)));
    }
    if ((params["figsize_y"] ?? null) !== null) {
        cargs.push(String((params["figsize_y"] ?? null)));
    }
    if ((params["hold_image"] ?? null)) {
        cargs.push("-hold_image");
    }
    if ((params["tight_layout"] ?? null)) {
        cargs.push("-tight_layout");
    }
    if ((params["xticks_off"] ?? null)) {
        cargs.push("-xticks_off");
    }
    if ((params["yticks_off"] ?? null)) {
        cargs.push("-yticks_off");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    if ((params["date"] ?? null)) {
        cargs.push("-date");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["help_view"] ?? null)) {
        cargs.push("-hview");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_mat2d_plot_py_outputs(
    params: FatMat2dPlotPyParameters,
    execution: Execution,
): FatMat2dPlotPyOutputs {
    const ret: FatMat2dPlotPyOutputs = {
        root: execution.outputFile("."),
        output_files: ((params["prefix"] ?? null) !== null && (params["file_type"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_[MATRIX_NAME].", (params["file_type"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fat_mat2d_plot.py
 *
 * Plots simple matrices output from 3dNetCorr (*.netcc) and 3dTrackID (*.grid).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatMat2dPlotPyOutputs`).
 */
function fat_mat2d_plot_py_execute(
    params: FatMat2dPlotPyParameters,
    runner: Runner | null = null,
): FatMat2dPlotPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_MAT2D_PLOT_PY_METADATA);
    params = execution.params(params)
    const cargs = fat_mat2d_plot_py_cargs(params, execution)
    const ret = fat_mat2d_plot_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fat_mat2d_plot.py
 *
 * Plots simple matrices output from 3dNetCorr (*.netcc) and 3dTrackID (*.grid).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Name of *.netcc or *.grid file with matrices to be plotted
 * @param matrices List of matrices to be plotted, identified by their parameter name. If no list is provided, then all matrices in the input file will be plotted.
 * @param prefix Output basename for image(s). Note that this can include path information, but the name of each matrix and the file extension will be appended to it.
 * @param file_type Filetype, given as extension (e.g., png, jpg). Available filetypes depend slightly on your OS and setup.
 * @param dpi Spatial resolution (dots per inch) of output images.
 * @param min_colorbar Minimum value of the colorbar.
 * @param max_colorbar Maximum value of the colorbar.
 * @param fs_xticks Font size of ticks along the x-axis.
 * @param fs_yticks Font size of ticks along the y-axis.
 * @param fs_title Font size of the title.
 * @param fs_cbar Font size of the colorbar.
 * @param cbar_n_intervals Number of intervals on colorbars for enumeration purposes. This controls how many numbers appear along the colorbar (which would be NI +1).
 * @param cbar Name of the colorbar to use. The available colormaps can be found online.
 * @param cbar_width_perc Width of the colorbar as a percentage of the image.
 * @param no_colorbar Disable the colorbar in the image.
 * @param figsize_x Width of the created image in inches.
 * @param figsize_y Height of the created image in inches.
 * @param hold_image In addition to saving an image file, open the image and keep displaying it until a key is pressed in the terminal.
 * @param tight_layout Use matplotlib's tight layout functionality in arranging the plot.
 * @param xticks_off Don't display labels along the x-axis.
 * @param yticks_off Don't display labels along the y-axis.
 * @param version Display the version number of the program.
 * @param date Display the release/editing date of the current version.
 * @param help Display help in the terminal.
 * @param help_view Display help in a separate text editor.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatMat2dPlotPyOutputs`).
 */
function fat_mat2d_plot_py(
    input_file: InputPathType,
    matrices: Array<string> | null = null,
    prefix: string | null = null,
    file_type: string | null = null,
    dpi: number | null = null,
    min_colorbar: number | null = null,
    max_colorbar: number | null = null,
    fs_xticks: number | null = null,
    fs_yticks: number | null = null,
    fs_title: number | null = null,
    fs_cbar: number | null = null,
    cbar_n_intervals: number | null = null,
    cbar: string | null = null,
    cbar_width_perc: number | null = null,
    no_colorbar: boolean = false,
    figsize_x: number | null = null,
    figsize_y: number | null = null,
    hold_image: boolean = false,
    tight_layout: boolean = false,
    xticks_off: boolean = false,
    yticks_off: boolean = false,
    version: boolean = false,
    date: boolean = false,
    help: boolean = false,
    help_view: boolean = false,
    runner: Runner | null = null,
): FatMat2dPlotPyOutputs {
    const params = fat_mat2d_plot_py_params(input_file, matrices, prefix, file_type, dpi, min_colorbar, max_colorbar, fs_xticks, fs_yticks, fs_title, fs_cbar, cbar_n_intervals, cbar, cbar_width_perc, no_colorbar, figsize_x, figsize_y, hold_image, tight_layout, xticks_off, yticks_off, version, date, help, help_view)
    return fat_mat2d_plot_py_execute(params, runner);
}


export {
      FAT_MAT2D_PLOT_PY_METADATA,
      FatMat2dPlotPyOutputs,
      FatMat2dPlotPyParameters,
      fat_mat2d_plot_py,
      fat_mat2d_plot_py_execute,
      fat_mat2d_plot_py_params,
};
