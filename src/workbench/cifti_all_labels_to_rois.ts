// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_ALL_LABELS_TO_ROIS_METADATA: Metadata = {
    id: "d5a9272c3f48a10e4a40c5ea087b20f4663425f8.boutiques",
    name: "cifti-all-labels-to-rois",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiAllLabelsToRoisParameters {
    "__STYXTYPE__": "cifti-all-labels-to-rois";
    "label_in": InputPathType;
    "map": string;
    "cifti_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cifti-all-labels-to-rois": cifti_all_labels_to_rois_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "cifti-all-labels-to-rois": cifti_all_labels_to_rois_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cifti_all_labels_to_rois(...)`.
 *
 * @interface
 */
interface CiftiAllLabelsToRoisOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti file
     */
    cifti_out: OutputPathType;
}


function cifti_all_labels_to_rois_params(
    label_in: InputPathType,
    map: string,
    cifti_out: string,
): CiftiAllLabelsToRoisParameters {
    /**
     * Build parameters.
    
     * @param label_in the input cifti label file
     * @param map the number or name of the label map to use
     * @param cifti_out the output cifti file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti-all-labels-to-rois" as const,
        "label_in": label_in,
        "map": map,
        "cifti_out": cifti_out,
    };
    return params;
}


function cifti_all_labels_to_rois_cargs(
    params: CiftiAllLabelsToRoisParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-all-labels-to-rois");
    cargs.push(execution.inputFile((params["label_in"] ?? null)));
    cargs.push((params["map"] ?? null));
    cargs.push((params["cifti_out"] ?? null));
    return cargs;
}


function cifti_all_labels_to_rois_outputs(
    params: CiftiAllLabelsToRoisParameters,
    execution: Execution,
): CiftiAllLabelsToRoisOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CiftiAllLabelsToRoisOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


function cifti_all_labels_to_rois_execute(
    params: CiftiAllLabelsToRoisParameters,
    execution: Execution,
): CiftiAllLabelsToRoisOutputs {
    /**
     * Make rois from all labels in a cifti label map.
     * 
     * The output cifti file is a dscalar file with a column (map) for each label in the specified input map, other than the ??? label, each of which contains a binary ROI of all brainordinates that are set to the corresponding label.
     * 
     * Most of the time, specifying '1' for the <map> argument will do what is desired.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CiftiAllLabelsToRoisOutputs`).
     */
    params = execution.params(params)
    const cargs = cifti_all_labels_to_rois_cargs(params, execution)
    const ret = cifti_all_labels_to_rois_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cifti_all_labels_to_rois(
    label_in: InputPathType,
    map: string,
    cifti_out: string,
    runner: Runner | null = null,
): CiftiAllLabelsToRoisOutputs {
    /**
     * Make rois from all labels in a cifti label map.
     * 
     * The output cifti file is a dscalar file with a column (map) for each label in the specified input map, other than the ??? label, each of which contains a binary ROI of all brainordinates that are set to the corresponding label.
     * 
     * Most of the time, specifying '1' for the <map> argument will do what is desired.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param label_in the input cifti label file
     * @param map the number or name of the label map to use
     * @param cifti_out the output cifti file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CiftiAllLabelsToRoisOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_ALL_LABELS_TO_ROIS_METADATA);
    const params = cifti_all_labels_to_rois_params(label_in, map, cifti_out)
    return cifti_all_labels_to_rois_execute(params, execution);
}


export {
      CIFTI_ALL_LABELS_TO_ROIS_METADATA,
      CiftiAllLabelsToRoisOutputs,
      CiftiAllLabelsToRoisParameters,
      cifti_all_labels_to_rois,
      cifti_all_labels_to_rois_params,
};
