// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLCHFILETYPE_METADATA: Metadata = {
    id: "916aef0203b0edb3702a23c5484e8e0a82f6b98d.boutiques",
    name: "fslchfiletype",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslchfiletypeParameters {
    "__STYXTYPE__": "fslchfiletype";
    "filetype": string;
    "filename": InputPathType;
    "filename2"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fslchfiletype": fslchfiletype_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fslchfiletype": fslchfiletype_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslchfiletype(...)`.
 *
 * @interface
 */
interface FslchfiletypeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file with the new file type.
     */
    outfile: OutputPathType | null;
}


function fslchfiletype_params(
    filetype: string,
    filename: InputPathType,
    filename2: string | null = null,
): FslchfiletypeParameters {
    /**
     * Build parameters.
    
     * @param filetype The type of the file to convert to. Valid values include: ANALYZE, ANALYZE_GZ, NIFTI, NIFTI_GZ, NIFTI_PAIR, NIFTI_PAIR_GZ, NIFTI2, NIFTI2_GZ, NIFTI2_PAIR, NIFTI2_PAIR_GZ.
     * @param filename The name of the input image file.
     * @param filename2 The name of the output image file (optional).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fslchfiletype" as const,
        "filetype": filetype,
        "filename": filename,
    };
    if (filename2 !== null) {
        params["filename2"] = filename2;
    }
    return params;
}


function fslchfiletype_cargs(
    params: FslchfiletypeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fslchfiletype");
    cargs.push((params["filetype"] ?? null));
    cargs.push(execution.inputFile((params["filename"] ?? null)));
    if ((params["filename2"] ?? null) !== null) {
        cargs.push((params["filename2"] ?? null));
    }
    return cargs;
}


function fslchfiletype_outputs(
    params: FslchfiletypeParameters,
    execution: Execution,
): FslchfiletypeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslchfiletypeOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["filename2"] ?? null) !== null) ? execution.outputFile([(params["filename2"] ?? null)].join('')) : null,
    };
    return ret;
}


function fslchfiletype_execute(
    params: FslchfiletypeParameters,
    execution: Execution,
): FslchfiletypeOutputs {
    /**
     * Tool to change the file type of an image file or copy it to a new file.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslchfiletypeOutputs`).
     */
    params = execution.params(params)
    const cargs = fslchfiletype_cargs(params, execution)
    const ret = fslchfiletype_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fslchfiletype(
    filetype: string,
    filename: InputPathType,
    filename2: string | null = null,
    runner: Runner | null = null,
): FslchfiletypeOutputs {
    /**
     * Tool to change the file type of an image file or copy it to a new file.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param filetype The type of the file to convert to. Valid values include: ANALYZE, ANALYZE_GZ, NIFTI, NIFTI_GZ, NIFTI_PAIR, NIFTI_PAIR_GZ, NIFTI2, NIFTI2_GZ, NIFTI2_PAIR, NIFTI2_PAIR_GZ.
     * @param filename The name of the input image file.
     * @param filename2 The name of the output image file (optional).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslchfiletypeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLCHFILETYPE_METADATA);
    const params = fslchfiletype_params(filetype, filename, filename2)
    return fslchfiletype_execute(params, execution);
}


export {
      FSLCHFILETYPE_METADATA,
      FslchfiletypeOutputs,
      FslchfiletypeParameters,
      fslchfiletype,
      fslchfiletype_params,
};
