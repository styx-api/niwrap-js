// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_REGISTER_METADATA: Metadata = {
    id: "4a6e2f5099081561c11c9c6221a8705f84c04499.boutiques",
    name: "mris_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRegisterParameters {
    "@type": "freesurfer.mris_register";
    "surf_fname": InputPathType;
    "target": InputPathType;
    "out_fname": string;
    "one_flag": boolean;
    "addframe"?: string | null | undefined;
    "annot_name"?: string | null | undefined;
    "curvature_fname"?: InputPathType | null | undefined;
    "canonical_name"?: string | null | undefined;
    "inflated": boolean;
    "inflated_name"?: string | null | undefined;
    "label_file"?: string | null | undefined;
    "orig_name"?: string | null | undefined;
    "overlay_values"?: string | null | undefined;
    "overlay_dir"?: string | null | undefined;
    "starting_reg_fname"?: InputPathType | null | undefined;
    "jacobian_fname"?: string | null | undefined;
    "n_averages"?: number | null | undefined;
    "adaptive": boolean;
    "l_area"?: number | null | undefined;
    "l_corr"?: number | null | undefined;
    "curvature_flag": boolean;
    "l_dist"?: number | null | undefined;
    "dt_value"?: number | null | undefined;
    "dt_decrease"?: number | null | undefined;
    "dt_increase"?: number | null | undefined;
    "l_external"?: number | null | undefined;
    "error_ratio"?: number | null | undefined;
    "initial_flag": boolean;
    "l_laplacian"?: number | null | undefined;
    "line_min": boolean;
    "momentum"?: number | null | undefined;
    "max_degrees"?: number | null | undefined;
    "median": boolean;
    "min_degrees"?: number | null | undefined;
    "multi_scale"?: number | null | undefined;
    "n_iterations"?: number | null | undefined;
    "n_angles"?: number | null | undefined;
    "neighborhood_size"?: number | null | undefined;
    "l_nlarea"?: number | null | undefined;
    "no_curv": boolean;
    "no_normalization": boolean;
    "no_rotation": boolean;
    "no_sulc": boolean;
    "num_surfaces"?: number | null | undefined;
    "overlay_corr"?: number | null | undefined;
    "max_passes"?: number | null | undefined;
    "l_parea"?: number | null | undefined;
    "remove_negative"?: number | null | undefined;
    "reverse": boolean;
    "rotate_values"?: string | null | undefined;
    "registration_file"?: InputPathType | null | undefined;
    "scale"?: number | null | undefined;
    "search_flag": boolean;
    "spring_value"?: number | null | undefined;
    "tolerance"?: number | null | undefined;
    "topology_flag": boolean;
    "vnum"?: string | null | undefined;
    "vsmooth": boolean;
    "write_iterations"?: number | null | undefined;
    "gdiag_no"?: number | null | undefined;
    "vector_flag": boolean;
    "threads"?: number | null | undefined;
    "version_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_register": mris_register_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_register": mris_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_register(...)`.
 *
 * @interface
 */
interface MrisRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface file after registration.
     */
    output_surface_file: OutputPathType;
    /**
     * Jacobian output file if specified.
     */
    jacobian_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param surf_fname Surface to register, often {hemi}.sphere
 * @param target The data to register to. A template file for average surface or a single-subject's surface.
 * @param out_fname Output surface file to capture registration. Example: {hemi}.sphere.reg
 * @param one_flag Treats target argument as a single subject's surface not a template file.
 * @param addframe Add field with location in the atlas.
 * @param annot_name Zeroes medial wall using annotation.
 * @param curvature_fname Curvature file name.
 * @param canonical_name Use surface for canonical properties.
 * @param inflated Use inflated surface for initial alignment.
 * @param inflated_name Uses this name for inflated surface for initial alignment.
 * @param label_file Specify a manual label to align with atlas label.
 * @param orig_name Use this for original properties.
 * @param overlay_values Adds a variable to the atlas from overlay file, smoothing it specified number of times.
 * @param overlay_dir Changes overlay path.
 * @param starting_reg_fname Start registration with coordinates from file.
 * @param jacobian_fname Write out jacobian of mapping to the specified file.
 * @param n_averages Set the number of averages.
 * @param adaptive Use adaptive time step integration.
 * @param l_area Sets l_area parameter.
 * @param l_corr Sets the l_corr parameter.
 * @param curvature_flag Use smoothwm curvature for final alignment.
 * @param l_dist Specify distance term.
 * @param dt_value Sets momentum with specified dt.
 * @param dt_decrease Set decrease for dt.
 * @param dt_increase Set increase for dt.
 * @param l_external Sets l_external parameter.
 * @param error_ratio Sets error ratio.
 * @param initial_flag Use initial registration.
 * @param l_laplacian Sets l_laplacian.
 * @param line_min Integrate using line minimization.
 * @param momentum Chooses integration_type = INTEGRATE_MOMENTUM and sets momentum value.
 * @param max_degrees Set max angle for search.
 * @param median Uses median normalization (instead of mean).
 * @param min_degrees Set min angle for search.
 * @param multi_scale Use multi_scale scales for morphing.
 * @param n_iterations Sets number of iterations.
 * @param n_angles Set number of angles/search per scale.
 * @param neighborhood_size Use neighborhood size specified.
 * @param l_nlarea Sets l_nlarea parameter.
 * @param no_curv Do not use smoothwm curvature for final alignment.
 * @param no_normalization Disables normalization.
 * @param no_rotation Disables initial rigid alignment.
 * @param no_sulc Disables initial sulc alignment.
 * @param num_surfaces Use specified number of surfaces/curvatures for alignment.
 * @param overlay_corr Sets overlay correlation coefficient.
 * @param max_passes Limit unfolding to specified passes.
 * @param l_parea Sets l_parea parameter.
 * @param remove_negative Remove negative triangles with iterative smoothing if non-zero.
 * @param reverse Mirror image reverse brain before morphing.
 * @param rotate_values Rotates brain by specified angles.
 * @param registration_file Extract rotational components from registration file.
 * @param scale Scales distances by the specified value.
 * @param search_flag Integrate with binary search line minimization.
 * @param spring_value Sets the spring parameter.
 * @param tolerance Specifies tolerance.
 * @param topology_flag Preserves the topology of positive area triangles.
 * @param vnum Set neighborhood parameters.
 * @param vsmooth Use space/time varying smoothness weighting.
 * @param write_iterations Set number of write iterations.
 * @param gdiag_no Supplies a vertex number for diagnostics.
 * @param vector_flag Prints help for Multiframe mode, listing field names and numbers.
 * @param threads Set number of OMP threads.
 * @param version_flag Print the version number.
 *
 * @returns Parameter dictionary
 */
function mris_register_params(
    surf_fname: InputPathType,
    target: InputPathType,
    out_fname: string,
    one_flag: boolean = false,
    addframe: string | null = null,
    annot_name: string | null = null,
    curvature_fname: InputPathType | null = null,
    canonical_name: string | null = null,
    inflated: boolean = false,
    inflated_name: string | null = null,
    label_file: string | null = null,
    orig_name: string | null = null,
    overlay_values: string | null = null,
    overlay_dir: string | null = null,
    starting_reg_fname: InputPathType | null = null,
    jacobian_fname: string | null = null,
    n_averages: number | null = null,
    adaptive: boolean = false,
    l_area: number | null = null,
    l_corr: number | null = null,
    curvature_flag: boolean = false,
    l_dist: number | null = null,
    dt_value: number | null = null,
    dt_decrease: number | null = null,
    dt_increase: number | null = null,
    l_external: number | null = null,
    error_ratio: number | null = null,
    initial_flag: boolean = false,
    l_laplacian: number | null = null,
    line_min: boolean = false,
    momentum: number | null = null,
    max_degrees: number | null = null,
    median: boolean = false,
    min_degrees: number | null = null,
    multi_scale: number | null = null,
    n_iterations: number | null = null,
    n_angles: number | null = null,
    neighborhood_size: number | null = null,
    l_nlarea: number | null = null,
    no_curv: boolean = false,
    no_normalization: boolean = false,
    no_rotation: boolean = false,
    no_sulc: boolean = false,
    num_surfaces: number | null = null,
    overlay_corr: number | null = null,
    max_passes: number | null = null,
    l_parea: number | null = null,
    remove_negative: number | null = null,
    reverse: boolean = false,
    rotate_values: string | null = null,
    registration_file: InputPathType | null = null,
    scale: number | null = null,
    search_flag: boolean = false,
    spring_value: number | null = null,
    tolerance: number | null = null,
    topology_flag: boolean = false,
    vnum: string | null = null,
    vsmooth: boolean = false,
    write_iterations: number | null = null,
    gdiag_no: number | null = null,
    vector_flag: boolean = false,
    threads: number | null = null,
    version_flag: boolean = false,
): MrisRegisterParameters {
    const params = {
        "@type": "freesurfer.mris_register" as const,
        "surf_fname": surf_fname,
        "target": target,
        "out_fname": out_fname,
        "one_flag": one_flag,
        "inflated": inflated,
        "adaptive": adaptive,
        "curvature_flag": curvature_flag,
        "initial_flag": initial_flag,
        "line_min": line_min,
        "median": median,
        "no_curv": no_curv,
        "no_normalization": no_normalization,
        "no_rotation": no_rotation,
        "no_sulc": no_sulc,
        "reverse": reverse,
        "search_flag": search_flag,
        "topology_flag": topology_flag,
        "vsmooth": vsmooth,
        "vector_flag": vector_flag,
        "version_flag": version_flag,
    };
    if (addframe !== null) {
        params["addframe"] = addframe;
    }
    if (annot_name !== null) {
        params["annot_name"] = annot_name;
    }
    if (curvature_fname !== null) {
        params["curvature_fname"] = curvature_fname;
    }
    if (canonical_name !== null) {
        params["canonical_name"] = canonical_name;
    }
    if (inflated_name !== null) {
        params["inflated_name"] = inflated_name;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (orig_name !== null) {
        params["orig_name"] = orig_name;
    }
    if (overlay_values !== null) {
        params["overlay_values"] = overlay_values;
    }
    if (overlay_dir !== null) {
        params["overlay_dir"] = overlay_dir;
    }
    if (starting_reg_fname !== null) {
        params["starting_reg_fname"] = starting_reg_fname;
    }
    if (jacobian_fname !== null) {
        params["jacobian_fname"] = jacobian_fname;
    }
    if (n_averages !== null) {
        params["n_averages"] = n_averages;
    }
    if (l_area !== null) {
        params["l_area"] = l_area;
    }
    if (l_corr !== null) {
        params["l_corr"] = l_corr;
    }
    if (l_dist !== null) {
        params["l_dist"] = l_dist;
    }
    if (dt_value !== null) {
        params["dt_value"] = dt_value;
    }
    if (dt_decrease !== null) {
        params["dt_decrease"] = dt_decrease;
    }
    if (dt_increase !== null) {
        params["dt_increase"] = dt_increase;
    }
    if (l_external !== null) {
        params["l_external"] = l_external;
    }
    if (error_ratio !== null) {
        params["error_ratio"] = error_ratio;
    }
    if (l_laplacian !== null) {
        params["l_laplacian"] = l_laplacian;
    }
    if (momentum !== null) {
        params["momentum"] = momentum;
    }
    if (max_degrees !== null) {
        params["max_degrees"] = max_degrees;
    }
    if (min_degrees !== null) {
        params["min_degrees"] = min_degrees;
    }
    if (multi_scale !== null) {
        params["multi_scale"] = multi_scale;
    }
    if (n_iterations !== null) {
        params["n_iterations"] = n_iterations;
    }
    if (n_angles !== null) {
        params["n_angles"] = n_angles;
    }
    if (neighborhood_size !== null) {
        params["neighborhood_size"] = neighborhood_size;
    }
    if (l_nlarea !== null) {
        params["l_nlarea"] = l_nlarea;
    }
    if (num_surfaces !== null) {
        params["num_surfaces"] = num_surfaces;
    }
    if (overlay_corr !== null) {
        params["overlay_corr"] = overlay_corr;
    }
    if (max_passes !== null) {
        params["max_passes"] = max_passes;
    }
    if (l_parea !== null) {
        params["l_parea"] = l_parea;
    }
    if (remove_negative !== null) {
        params["remove_negative"] = remove_negative;
    }
    if (rotate_values !== null) {
        params["rotate_values"] = rotate_values;
    }
    if (registration_file !== null) {
        params["registration_file"] = registration_file;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (spring_value !== null) {
        params["spring_value"] = spring_value;
    }
    if (tolerance !== null) {
        params["tolerance"] = tolerance;
    }
    if (vnum !== null) {
        params["vnum"] = vnum;
    }
    if (write_iterations !== null) {
        params["write_iterations"] = write_iterations;
    }
    if (gdiag_no !== null) {
        params["gdiag_no"] = gdiag_no;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_register_cargs(
    params: MrisRegisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_register");
    cargs.push(execution.inputFile((params["surf_fname"] ?? null)));
    cargs.push(execution.inputFile((params["target"] ?? null)));
    cargs.push((params["out_fname"] ?? null));
    if ((params["one_flag"] ?? null)) {
        cargs.push("-1");
    }
    if ((params["addframe"] ?? null) !== null) {
        cargs.push(
            "-addframe",
            (params["addframe"] ?? null)
        );
    }
    if ((params["annot_name"] ?? null) !== null) {
        cargs.push(
            "-annot",
            (params["annot_name"] ?? null)
        );
    }
    if ((params["curvature_fname"] ?? null) !== null) {
        cargs.push(
            "-C",
            execution.inputFile((params["curvature_fname"] ?? null))
        );
    }
    if ((params["canonical_name"] ?? null) !== null) {
        cargs.push(
            "-canon",
            (params["canonical_name"] ?? null)
        );
    }
    if ((params["inflated"] ?? null)) {
        cargs.push("-inflated");
    }
    if ((params["inflated_name"] ?? null) !== null) {
        cargs.push(
            "-infname",
            (params["inflated_name"] ?? null)
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "-L",
            (params["label_file"] ?? null)
        );
    }
    if ((params["orig_name"] ?? null) !== null) {
        cargs.push(
            "-O",
            (params["orig_name"] ?? null)
        );
    }
    if ((params["overlay_values"] ?? null) !== null) {
        cargs.push(
            "-overlay",
            (params["overlay_values"] ?? null)
        );
    }
    if ((params["overlay_dir"] ?? null) !== null) {
        cargs.push(
            "-overlay-dir",
            (params["overlay_dir"] ?? null)
        );
    }
    if ((params["starting_reg_fname"] ?? null) !== null) {
        cargs.push(
            "-sreg",
            execution.inputFile((params["starting_reg_fname"] ?? null))
        );
    }
    if ((params["jacobian_fname"] ?? null) !== null) {
        cargs.push(
            "-jacobian",
            (params["jacobian_fname"] ?? null)
        );
    }
    if ((params["n_averages"] ?? null) !== null) {
        cargs.push(
            "-A",
            String((params["n_averages"] ?? null))
        );
    }
    if ((params["adaptive"] ?? null)) {
        cargs.push("-adaptive");
    }
    if ((params["l_area"] ?? null) !== null) {
        cargs.push(
            "-area",
            String((params["l_area"] ?? null))
        );
    }
    if ((params["l_corr"] ?? null) !== null) {
        cargs.push(
            "-corr",
            String((params["l_corr"] ?? null))
        );
    }
    if ((params["curvature_flag"] ?? null)) {
        cargs.push("-curv");
    }
    if ((params["l_dist"] ?? null) !== null) {
        cargs.push(
            "-dist",
            String((params["l_dist"] ?? null))
        );
    }
    if ((params["dt_value"] ?? null) !== null) {
        cargs.push(
            "-dt",
            String((params["dt_value"] ?? null))
        );
    }
    if ((params["dt_decrease"] ?? null) !== null) {
        cargs.push(
            "-dt_dec",
            String((params["dt_decrease"] ?? null))
        );
    }
    if ((params["dt_increase"] ?? null) !== null) {
        cargs.push(
            "-dt_inc",
            String((params["dt_increase"] ?? null))
        );
    }
    if ((params["l_external"] ?? null) !== null) {
        cargs.push(
            "-E",
            String((params["l_external"] ?? null))
        );
    }
    if ((params["error_ratio"] ?? null) !== null) {
        cargs.push(
            "-error_ratio",
            String((params["error_ratio"] ?? null))
        );
    }
    if ((params["initial_flag"] ?? null)) {
        cargs.push("-init");
    }
    if ((params["l_laplacian"] ?? null) !== null) {
        cargs.push(
            "-lap",
            String((params["l_laplacian"] ?? null))
        );
    }
    if ((params["line_min"] ?? null)) {
        cargs.push("-lm");
    }
    if ((params["momentum"] ?? null) !== null) {
        cargs.push(
            "-M",
            String((params["momentum"] ?? null))
        );
    }
    if ((params["max_degrees"] ?? null) !== null) {
        cargs.push(
            "-max_degrees",
            String((params["max_degrees"] ?? null))
        );
    }
    if ((params["median"] ?? null)) {
        cargs.push("-median");
    }
    if ((params["min_degrees"] ?? null) !== null) {
        cargs.push(
            "-min_degrees",
            String((params["min_degrees"] ?? null))
        );
    }
    if ((params["multi_scale"] ?? null) !== null) {
        cargs.push(
            "-multi_scale",
            String((params["multi_scale"] ?? null))
        );
    }
    if ((params["n_iterations"] ?? null) !== null) {
        cargs.push(
            "-N",
            String((params["n_iterations"] ?? null))
        );
    }
    if ((params["n_angles"] ?? null) !== null) {
        cargs.push(
            "-nangles",
            String((params["n_angles"] ?? null))
        );
    }
    if ((params["neighborhood_size"] ?? null) !== null) {
        cargs.push(
            "-nbrs",
            String((params["neighborhood_size"] ?? null))
        );
    }
    if ((params["l_nlarea"] ?? null) !== null) {
        cargs.push(
            "-nlarea",
            String((params["l_nlarea"] ?? null))
        );
    }
    if ((params["no_curv"] ?? null)) {
        cargs.push("-nocurv");
    }
    if ((params["no_normalization"] ?? null)) {
        cargs.push("-nonorm");
    }
    if ((params["no_rotation"] ?? null)) {
        cargs.push("-norot");
    }
    if ((params["no_sulc"] ?? null)) {
        cargs.push("-nosulc");
    }
    if ((params["num_surfaces"] ?? null) !== null) {
        cargs.push(
            "-nsurfaces",
            String((params["num_surfaces"] ?? null))
        );
    }
    if ((params["overlay_corr"] ?? null) !== null) {
        cargs.push(
            "-ocorr",
            String((params["overlay_corr"] ?? null))
        );
    }
    if ((params["max_passes"] ?? null) !== null) {
        cargs.push(
            "-P",
            String((params["max_passes"] ?? null))
        );
    }
    if ((params["l_parea"] ?? null) !== null) {
        cargs.push(
            "-parea",
            String((params["l_parea"] ?? null))
        );
    }
    if ((params["remove_negative"] ?? null) !== null) {
        cargs.push(
            "-remove_negative",
            String((params["remove_negative"] ?? null))
        );
    }
    if ((params["reverse"] ?? null)) {
        cargs.push("-reverse");
    }
    if ((params["rotate_values"] ?? null) !== null) {
        cargs.push(
            "-rotate",
            (params["rotate_values"] ?? null)
        );
    }
    if ((params["registration_file"] ?? null) !== null) {
        cargs.push(
            "-reg",
            execution.inputFile((params["registration_file"] ?? null))
        );
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-S",
            String((params["scale"] ?? null))
        );
    }
    if ((params["search_flag"] ?? null)) {
        cargs.push("-search");
    }
    if ((params["spring_value"] ?? null) !== null) {
        cargs.push(
            "-spring",
            String((params["spring_value"] ?? null))
        );
    }
    if ((params["tolerance"] ?? null) !== null) {
        cargs.push(
            "-tol",
            String((params["tolerance"] ?? null))
        );
    }
    if ((params["topology_flag"] ?? null)) {
        cargs.push("-topology");
    }
    if ((params["vnum"] ?? null) !== null) {
        cargs.push(
            "-vnum",
            (params["vnum"] ?? null)
        );
    }
    if ((params["vsmooth"] ?? null)) {
        cargs.push("-vsmooth");
    }
    if ((params["write_iterations"] ?? null) !== null) {
        cargs.push(
            "-W",
            String((params["write_iterations"] ?? null))
        );
    }
    if ((params["gdiag_no"] ?? null) !== null) {
        cargs.push(
            "-V",
            String((params["gdiag_no"] ?? null))
        );
    }
    if ((params["vector_flag"] ?? null)) {
        cargs.push("-vector");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "-threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_register_outputs(
    params: MrisRegisterParameters,
    execution: Execution,
): MrisRegisterOutputs {
    const ret: MrisRegisterOutputs = {
        root: execution.outputFile("."),
        output_surface_file: execution.outputFile([(params["out_fname"] ?? null)].join('')),
        jacobian_output: ((params["jacobian_fname"] ?? null) !== null) ? execution.outputFile([(params["jacobian_fname"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * This program registers a surface to an average surface template.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrisRegisterOutputs`).
 */
function mris_register_execute(
    params: MrisRegisterParameters,
    execution: Execution,
): MrisRegisterOutputs {
    params = execution.params(params)
    const cargs = mris_register_cargs(params, execution)
    const ret = mris_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program registers a surface to an average surface template.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param surf_fname Surface to register, often {hemi}.sphere
 * @param target The data to register to. A template file for average surface or a single-subject's surface.
 * @param out_fname Output surface file to capture registration. Example: {hemi}.sphere.reg
 * @param one_flag Treats target argument as a single subject's surface not a template file.
 * @param addframe Add field with location in the atlas.
 * @param annot_name Zeroes medial wall using annotation.
 * @param curvature_fname Curvature file name.
 * @param canonical_name Use surface for canonical properties.
 * @param inflated Use inflated surface for initial alignment.
 * @param inflated_name Uses this name for inflated surface for initial alignment.
 * @param label_file Specify a manual label to align with atlas label.
 * @param orig_name Use this for original properties.
 * @param overlay_values Adds a variable to the atlas from overlay file, smoothing it specified number of times.
 * @param overlay_dir Changes overlay path.
 * @param starting_reg_fname Start registration with coordinates from file.
 * @param jacobian_fname Write out jacobian of mapping to the specified file.
 * @param n_averages Set the number of averages.
 * @param adaptive Use adaptive time step integration.
 * @param l_area Sets l_area parameter.
 * @param l_corr Sets the l_corr parameter.
 * @param curvature_flag Use smoothwm curvature for final alignment.
 * @param l_dist Specify distance term.
 * @param dt_value Sets momentum with specified dt.
 * @param dt_decrease Set decrease for dt.
 * @param dt_increase Set increase for dt.
 * @param l_external Sets l_external parameter.
 * @param error_ratio Sets error ratio.
 * @param initial_flag Use initial registration.
 * @param l_laplacian Sets l_laplacian.
 * @param line_min Integrate using line minimization.
 * @param momentum Chooses integration_type = INTEGRATE_MOMENTUM and sets momentum value.
 * @param max_degrees Set max angle for search.
 * @param median Uses median normalization (instead of mean).
 * @param min_degrees Set min angle for search.
 * @param multi_scale Use multi_scale scales for morphing.
 * @param n_iterations Sets number of iterations.
 * @param n_angles Set number of angles/search per scale.
 * @param neighborhood_size Use neighborhood size specified.
 * @param l_nlarea Sets l_nlarea parameter.
 * @param no_curv Do not use smoothwm curvature for final alignment.
 * @param no_normalization Disables normalization.
 * @param no_rotation Disables initial rigid alignment.
 * @param no_sulc Disables initial sulc alignment.
 * @param num_surfaces Use specified number of surfaces/curvatures for alignment.
 * @param overlay_corr Sets overlay correlation coefficient.
 * @param max_passes Limit unfolding to specified passes.
 * @param l_parea Sets l_parea parameter.
 * @param remove_negative Remove negative triangles with iterative smoothing if non-zero.
 * @param reverse Mirror image reverse brain before morphing.
 * @param rotate_values Rotates brain by specified angles.
 * @param registration_file Extract rotational components from registration file.
 * @param scale Scales distances by the specified value.
 * @param search_flag Integrate with binary search line minimization.
 * @param spring_value Sets the spring parameter.
 * @param tolerance Specifies tolerance.
 * @param topology_flag Preserves the topology of positive area triangles.
 * @param vnum Set neighborhood parameters.
 * @param vsmooth Use space/time varying smoothness weighting.
 * @param write_iterations Set number of write iterations.
 * @param gdiag_no Supplies a vertex number for diagnostics.
 * @param vector_flag Prints help for Multiframe mode, listing field names and numbers.
 * @param threads Set number of OMP threads.
 * @param version_flag Print the version number.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRegisterOutputs`).
 */
function mris_register(
    surf_fname: InputPathType,
    target: InputPathType,
    out_fname: string,
    one_flag: boolean = false,
    addframe: string | null = null,
    annot_name: string | null = null,
    curvature_fname: InputPathType | null = null,
    canonical_name: string | null = null,
    inflated: boolean = false,
    inflated_name: string | null = null,
    label_file: string | null = null,
    orig_name: string | null = null,
    overlay_values: string | null = null,
    overlay_dir: string | null = null,
    starting_reg_fname: InputPathType | null = null,
    jacobian_fname: string | null = null,
    n_averages: number | null = null,
    adaptive: boolean = false,
    l_area: number | null = null,
    l_corr: number | null = null,
    curvature_flag: boolean = false,
    l_dist: number | null = null,
    dt_value: number | null = null,
    dt_decrease: number | null = null,
    dt_increase: number | null = null,
    l_external: number | null = null,
    error_ratio: number | null = null,
    initial_flag: boolean = false,
    l_laplacian: number | null = null,
    line_min: boolean = false,
    momentum: number | null = null,
    max_degrees: number | null = null,
    median: boolean = false,
    min_degrees: number | null = null,
    multi_scale: number | null = null,
    n_iterations: number | null = null,
    n_angles: number | null = null,
    neighborhood_size: number | null = null,
    l_nlarea: number | null = null,
    no_curv: boolean = false,
    no_normalization: boolean = false,
    no_rotation: boolean = false,
    no_sulc: boolean = false,
    num_surfaces: number | null = null,
    overlay_corr: number | null = null,
    max_passes: number | null = null,
    l_parea: number | null = null,
    remove_negative: number | null = null,
    reverse: boolean = false,
    rotate_values: string | null = null,
    registration_file: InputPathType | null = null,
    scale: number | null = null,
    search_flag: boolean = false,
    spring_value: number | null = null,
    tolerance: number | null = null,
    topology_flag: boolean = false,
    vnum: string | null = null,
    vsmooth: boolean = false,
    write_iterations: number | null = null,
    gdiag_no: number | null = null,
    vector_flag: boolean = false,
    threads: number | null = null,
    version_flag: boolean = false,
    runner: Runner | null = null,
): MrisRegisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_REGISTER_METADATA);
    const params = mris_register_params(surf_fname, target, out_fname, one_flag, addframe, annot_name, curvature_fname, canonical_name, inflated, inflated_name, label_file, orig_name, overlay_values, overlay_dir, starting_reg_fname, jacobian_fname, n_averages, adaptive, l_area, l_corr, curvature_flag, l_dist, dt_value, dt_decrease, dt_increase, l_external, error_ratio, initial_flag, l_laplacian, line_min, momentum, max_degrees, median, min_degrees, multi_scale, n_iterations, n_angles, neighborhood_size, l_nlarea, no_curv, no_normalization, no_rotation, no_sulc, num_surfaces, overlay_corr, max_passes, l_parea, remove_negative, reverse, rotate_values, registration_file, scale, search_flag, spring_value, tolerance, topology_flag, vnum, vsmooth, write_iterations, gdiag_no, vector_flag, threads, version_flag)
    return mris_register_execute(params, execution);
}


export {
      MRIS_REGISTER_METADATA,
      MrisRegisterOutputs,
      MrisRegisterParameters,
      mris_register,
      mris_register_cargs,
      mris_register_execute,
      mris_register_outputs,
      mris_register_params,
};
