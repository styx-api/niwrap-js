// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_LABEL_CALC_METADATA: Metadata = {
    id: "4566c0b5206cd4d9fc63822cdb713e50b1ee033e.boutiques",
    name: "mris_label_calc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisLabelCalcParameters {
    "__STYXTYPE__": "mris_label_calc";
    "command": "union" | "intersect" | "invert" | "erode" | "dilate";
    "input1": InputPathType;
    "input2": InputPathType;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_label_calc": mris_label_calc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_label_calc": mris_label_calc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_label_calc(...)`.
 *
 * @interface
 */
interface MrisLabelCalcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting label file after operation
     */
    output_label: OutputPathType;
}


function mris_label_calc_params(
    command: "union" | "intersect" | "invert" | "erode" | "dilate",
    input1: InputPathType,
    input2: InputPathType,
    output: string,
): MrisLabelCalcParameters {
    /**
     * Build parameters.
    
     * @param command Command to perform on input labels
     * @param input1 First input label file
     * @param input2 Second input label file (used for 'invert', 'erode', 'dilate' operations)
     * @param output Output label file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_label_calc" as const,
        "command": command,
        "input1": input1,
        "input2": input2,
        "output": output,
    };
    return params;
}


function mris_label_calc_cargs(
    params: MrisLabelCalcParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_label_calc");
    cargs.push((params["command"] ?? null));
    cargs.push(execution.inputFile((params["input1"] ?? null)));
    cargs.push(execution.inputFile((params["input2"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


function mris_label_calc_outputs(
    params: MrisLabelCalcParameters,
    execution: Execution,
): MrisLabelCalcOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisLabelCalcOutputs = {
        root: execution.outputFile("."),
        output_label: execution.outputFile([(params["output"] ?? null), ".label"].join('')),
    };
    return ret;
}


function mris_label_calc_execute(
    params: MrisLabelCalcParameters,
    execution: Execution,
): MrisLabelCalcOutputs {
    /**
     * Tool for surface label calculations.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisLabelCalcOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_label_calc_cargs(params, execution)
    const ret = mris_label_calc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_label_calc(
    command: "union" | "intersect" | "invert" | "erode" | "dilate",
    input1: InputPathType,
    input2: InputPathType,
    output: string,
    runner: Runner | null = null,
): MrisLabelCalcOutputs {
    /**
     * Tool for surface label calculations.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param command Command to perform on input labels
     * @param input1 First input label file
     * @param input2 Second input label file (used for 'invert', 'erode', 'dilate' operations)
     * @param output Output label file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisLabelCalcOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_LABEL_CALC_METADATA);
    const params = mris_label_calc_params(command, input1, input2, output)
    return mris_label_calc_execute(params, execution);
}


export {
      MRIS_LABEL_CALC_METADATA,
      MrisLabelCalcOutputs,
      MrisLabelCalcParameters,
      mris_label_calc,
      mris_label_calc_params,
};
