// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_NLFIT_METADATA: Metadata = {
    id: "50e1582cabc0e72153f6a424b8282b812a6f26e5.boutiques",
    name: "1dNLfit",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dNlfitParameters {
    "@type"?: "afni/1dNLfit";
    "expression": string;
    "independent_variable": string;
    "parameters": Array<string>;
    "dependent_data": InputPathType;
    "method"?: number | null | undefined;
}
type V1dNlfitParametersTagged = Required<Pick<V1dNlfitParameters, '@type'>> & V1dNlfitParameters;


/**
 * Output object returned when calling `V1dNlfitParameters(...)`.
 *
 * @interface
 */
interface V1dNlfitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Results (fitted time series models) are written to stdout. Should be saved by '>' redirection.
     */
    fit_results: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param expression The expression for the fit. It must contain one symbol from 'a' to 'z' which is marked as the independent variable by option '-indvar', and at least one more symbol which is a parameter to be estimated.
 * @param independent_variable Indicates which variable in '-expr' is the independent variable. All other symbols are parameters, which are either fixed (constants) or variables to be estimated. Read the values of the independent variable from 1D file.
 * @param parameters Set fixed value or estimating range for a particular symbol. For a fixed value, it takes the form 'a=3.14'. For an estimated parameter, it takes the form 'q=-sqrt(2):sqrt(2)'. All symbols in '-expr' must have a corresponding '-param' option, EXCEPT for the '-indvar' symbol.
 * @param dependent_data Read the values of the dependent variable (to be fitted to '-expr') from 1D file. The file must have the same number of rows as the '-indvar' file.
 * @param method Set the method for fitting: '1' for L1, '2' for L2 (default is L2).
 *
 * @returns Parameter dictionary
 */
function v_1d_nlfit_params(
    expression: string,
    independent_variable: string,
    parameters: Array<string>,
    dependent_data: InputPathType,
    method: number | null = null,
): V1dNlfitParametersTagged {
    const params = {
        "@type": "afni/1dNLfit" as const,
        "expression": expression,
        "independent_variable": independent_variable,
        "parameters": parameters,
        "dependent_data": dependent_data,
    };
    if (method !== null) {
        params["method"] = method;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1d_nlfit_cargs(
    params: V1dNlfitParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1dNLfit");
    cargs.push(
        "-expr",
        (params["expression"] ?? null)
    );
    cargs.push(
        "-indvar",
        (params["independent_variable"] ?? null)
    );
    cargs.push(
        "-param",
        ...(params["parameters"] ?? null)
    );
    cargs.push(
        "-depdata",
        execution.inputFile((params["dependent_data"] ?? null))
    );
    if ((params["method"] ?? null) !== null) {
        cargs.push(
            "-meth",
            String((params["method"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1d_nlfit_outputs(
    params: V1dNlfitParameters,
    execution: Execution,
): V1dNlfitOutputs {
    const ret: V1dNlfitOutputs = {
        root: execution.outputFile("."),
        fit_results: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


/**
 * 1dNLfit
 *
 * Program to fit a model to a vector of data. The model is given by a symbolic expression, with parameters to be estimated.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dNlfitOutputs`).
 */
function v_1d_nlfit_execute(
    params: V1dNlfitParameters,
    runner: Runner | null = null,
): V1dNlfitOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_NLFIT_METADATA);
    params = execution.params(params)
    const cargs = v_1d_nlfit_cargs(params, execution)
    const ret = v_1d_nlfit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 1dNLfit
 *
 * Program to fit a model to a vector of data. The model is given by a symbolic expression, with parameters to be estimated.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param expression The expression for the fit. It must contain one symbol from 'a' to 'z' which is marked as the independent variable by option '-indvar', and at least one more symbol which is a parameter to be estimated.
 * @param independent_variable Indicates which variable in '-expr' is the independent variable. All other symbols are parameters, which are either fixed (constants) or variables to be estimated. Read the values of the independent variable from 1D file.
 * @param parameters Set fixed value or estimating range for a particular symbol. For a fixed value, it takes the form 'a=3.14'. For an estimated parameter, it takes the form 'q=-sqrt(2):sqrt(2)'. All symbols in '-expr' must have a corresponding '-param' option, EXCEPT for the '-indvar' symbol.
 * @param dependent_data Read the values of the dependent variable (to be fitted to '-expr') from 1D file. The file must have the same number of rows as the '-indvar' file.
 * @param method Set the method for fitting: '1' for L1, '2' for L2 (default is L2).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dNlfitOutputs`).
 */
function v_1d_nlfit(
    expression: string,
    independent_variable: string,
    parameters: Array<string>,
    dependent_data: InputPathType,
    method: number | null = null,
    runner: Runner | null = null,
): V1dNlfitOutputs {
    const params = v_1d_nlfit_params(expression, independent_variable, parameters, dependent_data, method)
    return v_1d_nlfit_execute(params, runner);
}


export {
      V1dNlfitOutputs,
      V_1D_NLFIT_METADATA,
      v_1d_nlfit,
      v_1d_nlfit_execute,
      v_1d_nlfit_params,
};
