// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MATCH_SMOOTHING_METADATA: Metadata = {
    id: "b30339df7f06b79582f3ec4f343b57bac26ab4fb.boutiques",
    name: "match_smoothing",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface MatchSmoothingParameters {
    "@type": "fsl.match_smoothing";
    "example_func": InputPathType;
    "func_smoothing_FWHM": number;
    "example_structural": InputPathType;
    "standard_space_resolution": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.match_smoothing": match_smoothing_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `match_smoothing(...)`.
 *
 * @interface
 */
interface MatchSmoothingOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param example_func Path to the example functional image file.
 * @param func_smoothing_fwhm Full-width at half maximum (FWHM) of the smoothing kernel applied to the functional data, in millimeters.
 * @param example_structural Path to the example structural image file.
 * @param standard_space_resolution Resolution of the standard space, in millimeters.
 *
 * @returns Parameter dictionary
 */
function match_smoothing_params(
    example_func: InputPathType,
    func_smoothing_fwhm: number,
    example_structural: InputPathType,
    standard_space_resolution: number,
): MatchSmoothingParameters {
    const params = {
        "@type": "fsl.match_smoothing" as const,
        "example_func": example_func,
        "func_smoothing_FWHM": func_smoothing_fwhm,
        "example_structural": example_structural,
        "standard_space_resolution": standard_space_resolution,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function match_smoothing_cargs(
    params: MatchSmoothingParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("match_smoothing");
    cargs.push(execution.inputFile((params["example_func"] ?? null)));
    cargs.push(String((params["func_smoothing_FWHM"] ?? null)));
    cargs.push(execution.inputFile((params["example_structural"] ?? null)));
    cargs.push(String((params["standard_space_resolution"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function match_smoothing_outputs(
    params: MatchSmoothingParameters,
    execution: Execution,
): MatchSmoothingOutputs {
    const ret: MatchSmoothingOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Computes the smoothing sigma needed to be applied to structural data to match a given functional data smoothing level.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MatchSmoothingOutputs`).
 */
function match_smoothing_execute(
    params: MatchSmoothingParameters,
    execution: Execution,
): MatchSmoothingOutputs {
    params = execution.params(params)
    const cargs = match_smoothing_cargs(params, execution)
    const ret = match_smoothing_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes the smoothing sigma needed to be applied to structural data to match a given functional data smoothing level.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param example_func Path to the example functional image file.
 * @param func_smoothing_fwhm Full-width at half maximum (FWHM) of the smoothing kernel applied to the functional data, in millimeters.
 * @param example_structural Path to the example structural image file.
 * @param standard_space_resolution Resolution of the standard space, in millimeters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MatchSmoothingOutputs`).
 */
function match_smoothing(
    example_func: InputPathType,
    func_smoothing_fwhm: number,
    example_structural: InputPathType,
    standard_space_resolution: number,
    runner: Runner | null = null,
): MatchSmoothingOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MATCH_SMOOTHING_METADATA);
    const params = match_smoothing_params(example_func, func_smoothing_fwhm, example_structural, standard_space_resolution)
    return match_smoothing_execute(params, execution);
}


export {
      MATCH_SMOOTHING_METADATA,
      MatchSmoothingOutputs,
      MatchSmoothingParameters,
      match_smoothing,
      match_smoothing_cargs,
      match_smoothing_execute,
      match_smoothing_outputs,
      match_smoothing_params,
};
