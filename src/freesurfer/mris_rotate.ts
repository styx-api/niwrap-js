// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_ROTATE_METADATA: Metadata = {
    id: "43cfae1ef796fac2dcfd8e23fbce456de3e8b830.boutiques",
    name: "mris_rotate",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRotateParameters {
    "@type"?: "freesurfer/mris_rotate";
    "input_surface": InputPathType;
    "alpha_deg": number;
    "beta_deg": number;
    "gamma_deg": number;
    "output_surface": string;
    "regfile"?: InputPathType | null | undefined;
    "invalidate_geometry": boolean;
}
type MrisRotateParametersTagged = Required<Pick<MrisRotateParameters, '@type'>> & MrisRotateParameters;


/**
 * Output object returned when calling `MrisRotateParameters(...)`.
 *
 * @interface
 */
interface MrisRotateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The rotated output surface.
     */
    rotated_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file to be rotated.
 * @param alpha_deg Rotation angle in degrees around the X-axis.
 * @param beta_deg Rotation angle in degrees around the Y-axis.
 * @param gamma_deg Rotation angle in degrees around the Z-axis.
 * @param output_surface Output surface file after rotation.
 * @param regfile Extract angles from registration file, ignores alpha, beta, gamma.
 * @param invalidate_geometry Invalidate volume geometry in output.
 *
 * @returns Parameter dictionary
 */
function mris_rotate_params(
    input_surface: InputPathType,
    alpha_deg: number,
    beta_deg: number,
    gamma_deg: number,
    output_surface: string,
    regfile: InputPathType | null = null,
    invalidate_geometry: boolean = false,
): MrisRotateParametersTagged {
    const params = {
        "@type": "freesurfer/mris_rotate" as const,
        "input_surface": input_surface,
        "alpha_deg": alpha_deg,
        "beta_deg": beta_deg,
        "gamma_deg": gamma_deg,
        "output_surface": output_surface,
        "invalidate_geometry": invalidate_geometry,
    };
    if (regfile !== null) {
        params["regfile"] = regfile;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_rotate_cargs(
    params: MrisRotateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_rotate");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(String((params["alpha_deg"] ?? null)));
    cargs.push(String((params["beta_deg"] ?? null)));
    cargs.push(String((params["gamma_deg"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    if ((params["regfile"] ?? null) !== null) {
        cargs.push(
            "-r",
            execution.inputFile((params["regfile"] ?? null))
        );
    }
    if ((params["invalidate_geometry"] ?? false)) {
        cargs.push("-n");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_rotate_outputs(
    params: MrisRotateParameters,
    execution: Execution,
): MrisRotateOutputs {
    const ret: MrisRotateOutputs = {
        root: execution.outputFile("."),
        rotated_surface: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_rotate
 *
 * Rotate a surface given three angles.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRotateOutputs`).
 */
function mris_rotate_execute(
    params: MrisRotateParameters,
    runner: Runner | null = null,
): MrisRotateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_ROTATE_METADATA);
    params = execution.params(params)
    const cargs = mris_rotate_cargs(params, execution)
    const ret = mris_rotate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_rotate
 *
 * Rotate a surface given three angles.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file to be rotated.
 * @param alpha_deg Rotation angle in degrees around the X-axis.
 * @param beta_deg Rotation angle in degrees around the Y-axis.
 * @param gamma_deg Rotation angle in degrees around the Z-axis.
 * @param output_surface Output surface file after rotation.
 * @param regfile Extract angles from registration file, ignores alpha, beta, gamma.
 * @param invalidate_geometry Invalidate volume geometry in output.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisRotateOutputs`).
 */
function mris_rotate(
    input_surface: InputPathType,
    alpha_deg: number,
    beta_deg: number,
    gamma_deg: number,
    output_surface: string,
    regfile: InputPathType | null = null,
    invalidate_geometry: boolean = false,
    runner: Runner | null = null,
): MrisRotateOutputs {
    const params = mris_rotate_params(input_surface, alpha_deg, beta_deg, gamma_deg, output_surface, regfile, invalidate_geometry)
    return mris_rotate_execute(params, runner);
}


export {
      MRIS_ROTATE_METADATA,
      MrisRotateOutputs,
      mris_rotate,
      mris_rotate_execute,
      mris_rotate_params,
};
