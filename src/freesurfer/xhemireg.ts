// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XHEMIREG_METADATA: Metadata = {
    id: "261a80c05a860c7fffc88a2e8009768ff040fc71.boutiques",
    name: "xhemireg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface XhemiregParameters {
    "__STYXTYPE__": "xhemireg";
    "subject": string;
    "output_dir"?: string | null | undefined;
    "map_lh": boolean;
    "map_rh": boolean;
    "perform_reg": boolean;
    "tal_compute": boolean;
    "no_tal_compute": boolean;
    "tal_estimate": boolean;
    "no_tal_estimate": boolean;
    "gcaprep"?: string | null | undefined;
    "threads"?: number | null | undefined;
    "version": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "xhemireg": xhemireg_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `xhemireg(...)`.
 *
 * @interface
 */
interface XhemiregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function xhemireg_params(
    subject: string,
    output_dir: string | null = null,
    map_lh: boolean = false,
    map_rh: boolean = false,
    perform_reg: boolean = false,
    tal_compute: boolean = false,
    no_tal_compute: boolean = false,
    tal_estimate: boolean = false,
    no_tal_estimate: boolean = false,
    gcaprep: string | null = null,
    threads: number | null = null,
    version: boolean = false,
    help: boolean = false,
): XhemiregParameters {
    /**
     * Build parameters.
    
     * @param subject Subject ID for the hemisphere registration process
     * @param output_dir Output directory for the hemisphere registration
     * @param map_lh Map from left hemisphere to right hemisphere
     * @param map_rh Map from right hemisphere to left hemisphere
     * @param perform_reg Perform registration to create sphere.reg
     * @param tal_compute Recompute Talairach registration
     * @param no_tal_compute Do not perform Talairach registration
     * @param tal_estimate Compute estimate of Talairach registration from unflipped registration
     * @param no_tal_estimate Do not perform estimation of Talairach registration
     * @param gcaprep Prepare GCA for training symmetrical GCA atlases
     * @param threads Number of threads used, applicable with --gcaprep option
     * @param version Print version and exit
     * @param help Print help and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "xhemireg" as const,
        "subject": subject,
        "map_lh": map_lh,
        "map_rh": map_rh,
        "perform_reg": perform_reg,
        "tal_compute": tal_compute,
        "no_tal_compute": no_tal_compute,
        "tal_estimate": tal_estimate,
        "no_tal_estimate": no_tal_estimate,
        "version": version,
        "help": help,
    };
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (gcaprep !== null) {
        params["gcaprep"] = gcaprep;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


function xhemireg_cargs(
    params: XhemiregParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("xhemireg");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["map_lh"] ?? null)) {
        cargs.push("--lh");
    }
    if ((params["map_rh"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["perform_reg"] ?? null)) {
        cargs.push("--reg");
    }
    if ((params["tal_compute"] ?? null)) {
        cargs.push("--tal-compute");
    }
    if ((params["no_tal_compute"] ?? null)) {
        cargs.push("--no-tal-compute");
    }
    if ((params["tal_estimate"] ?? null)) {
        cargs.push("--tal-estimate");
    }
    if ((params["no_tal_estimate"] ?? null)) {
        cargs.push("--no-tal-estimate");
    }
    if ((params["gcaprep"] ?? null) !== null) {
        cargs.push(
            "--gcaprep",
            (params["gcaprep"] ?? null)
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


function xhemireg_outputs(
    params: XhemiregParameters,
    execution: Execution,
): XhemiregOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: XhemiregOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function xhemireg_execute(
    params: XhemiregParameters,
    execution: Execution,
): XhemiregOutputs {
    /**
     * Tool for hemisphere registration in neuroimaging.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `XhemiregOutputs`).
     */
    params = execution.params(params)
    const cargs = xhemireg_cargs(params, execution)
    const ret = xhemireg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function xhemireg(
    subject: string,
    output_dir: string | null = null,
    map_lh: boolean = false,
    map_rh: boolean = false,
    perform_reg: boolean = false,
    tal_compute: boolean = false,
    no_tal_compute: boolean = false,
    tal_estimate: boolean = false,
    no_tal_estimate: boolean = false,
    gcaprep: string | null = null,
    threads: number | null = null,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): XhemiregOutputs {
    /**
     * Tool for hemisphere registration in neuroimaging.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject ID for the hemisphere registration process
     * @param output_dir Output directory for the hemisphere registration
     * @param map_lh Map from left hemisphere to right hemisphere
     * @param map_rh Map from right hemisphere to left hemisphere
     * @param perform_reg Perform registration to create sphere.reg
     * @param tal_compute Recompute Talairach registration
     * @param no_tal_compute Do not perform Talairach registration
     * @param tal_estimate Compute estimate of Talairach registration from unflipped registration
     * @param no_tal_estimate Do not perform estimation of Talairach registration
     * @param gcaprep Prepare GCA for training symmetrical GCA atlases
     * @param threads Number of threads used, applicable with --gcaprep option
     * @param version Print version and exit
     * @param help Print help and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `XhemiregOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XHEMIREG_METADATA);
    const params = xhemireg_params(subject, output_dir, map_lh, map_rh, perform_reg, tal_compute, no_tal_compute, tal_estimate, no_tal_estimate, gcaprep, threads, version, help)
    return xhemireg_execute(params, execution);
}


export {
      XHEMIREG_METADATA,
      XhemiregOutputs,
      XhemiregParameters,
      xhemireg,
      xhemireg_params,
};
