// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRISP_WRITE_METADATA: Metadata = {
    id: "7b8fc1540fc76774d461ee491e6eccf087b42779.boutiques",
    name: "mrisp_write",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrispWriteParameters {
    "__STYXTYPE__": "mrisp_write";
    "input_surface": InputPathType;
    "overlay_filename": InputPathType;
    "output_name": string;
    "subjects_dir"?: string | null | undefined;
    "coords"?: string | null | undefined;
    "average_curvature"?: number | null | undefined;
    "correlation_matrix"?: InputPathType | null | undefined;
    "scale_factor"?: number | null | undefined;
    "normalize_curvature": boolean;
    "verbose_vertex"?: number | null | undefined;
    "write_diagnostics": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mrisp_write": mrisp_write_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mrisp_write": mrisp_write_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mrisp_write(...)`.
 *
 * @interface
 */
interface MrispWriteOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * A file containing a surface-worth of per-vertex values saved in spherical coordinates.
     */
    output_file: OutputPathType;
}


function mrisp_write_params(
    input_surface: InputPathType,
    overlay_filename: InputPathType,
    output_name: string,
    subjects_dir: string | null = null,
    coords: string | null = null,
    average_curvature: number | null = null,
    correlation_matrix: InputPathType | null = null,
    scale_factor: number | null = null,
    normalize_curvature: boolean = false,
    verbose_vertex: number | null = null,
    write_diagnostics: boolean = false,
): MrispWriteParameters {
    /**
     * Build parameters.
    
     * @param input_surface Full path to input surface.
     * @param overlay_filename Full path to the overlay to map.
     * @param output_name Output file name. Can be full path to a .tif or .mgz file.
     * @param subjects_dir Set SUBJECTS_DIR. Default: uses environment variable.
     * @param coords Treat overlay as a surface and write it into a 3 frame parameterization.
     * @param average_curvature Average curvature patterns navgs times.
     * @param correlation_matrix Use the overlay to compute the correlation matrix within the specified label.
     * @param scale_factor Scale factor to adjust resolution of the spherical map.
     * @param normalize_curvature Normalize curvature by variance.
     * @param verbose_vertex Invoke diagnostics for specified vertex number.
     * @param write_diagnostics Write some diagnostics.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mrisp_write" as const,
        "input_surface": input_surface,
        "overlay_filename": overlay_filename,
        "output_name": output_name,
        "normalize_curvature": normalize_curvature,
        "write_diagnostics": write_diagnostics,
    };
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (coords !== null) {
        params["coords"] = coords;
    }
    if (average_curvature !== null) {
        params["average_curvature"] = average_curvature;
    }
    if (correlation_matrix !== null) {
        params["correlation_matrix"] = correlation_matrix;
    }
    if (scale_factor !== null) {
        params["scale_factor"] = scale_factor;
    }
    if (verbose_vertex !== null) {
        params["verbose_vertex"] = verbose_vertex;
    }
    return params;
}


function mrisp_write_cargs(
    params: MrispWriteParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mrisp_write");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["overlay_filename"] ?? null)));
    cargs.push((params["output_name"] ?? null));
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "-SDIR",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["coords"] ?? null) !== null) {
        cargs.push(
            "-coords",
            (params["coords"] ?? null)
        );
    }
    if ((params["average_curvature"] ?? null) !== null) {
        cargs.push(
            "-A",
            String((params["average_curvature"] ?? null))
        );
    }
    if ((params["correlation_matrix"] ?? null) !== null) {
        cargs.push(
            "-CORR",
            execution.inputFile((params["correlation_matrix"] ?? null))
        );
    }
    if ((params["scale_factor"] ?? null) !== null) {
        cargs.push(
            "-SCALE",
            String((params["scale_factor"] ?? null))
        );
    }
    if ((params["normalize_curvature"] ?? null)) {
        cargs.push("-N");
    }
    if ((params["verbose_vertex"] ?? null) !== null) {
        cargs.push(
            "-V",
            String((params["verbose_vertex"] ?? null))
        );
    }
    if ((params["write_diagnostics"] ?? null)) {
        cargs.push("-W");
    }
    return cargs;
}


function mrisp_write_outputs(
    params: MrispWriteParameters,
    execution: Execution,
): MrispWriteOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrispWriteOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_name"] ?? null)].join('')),
    };
    return ret;
}


function mrisp_write_execute(
    params: MrispWriteParameters,
    execution: Execution,
): MrispWriteOutputs {
    /**
     * This tool converts a surface overlay on a sphere into spherical coordinates.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrispWriteOutputs`).
     */
    params = execution.params(params)
    const cargs = mrisp_write_cargs(params, execution)
    const ret = mrisp_write_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mrisp_write(
    input_surface: InputPathType,
    overlay_filename: InputPathType,
    output_name: string,
    subjects_dir: string | null = null,
    coords: string | null = null,
    average_curvature: number | null = null,
    correlation_matrix: InputPathType | null = null,
    scale_factor: number | null = null,
    normalize_curvature: boolean = false,
    verbose_vertex: number | null = null,
    write_diagnostics: boolean = false,
    runner: Runner | null = null,
): MrispWriteOutputs {
    /**
     * This tool converts a surface overlay on a sphere into spherical coordinates.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_surface Full path to input surface.
     * @param overlay_filename Full path to the overlay to map.
     * @param output_name Output file name. Can be full path to a .tif or .mgz file.
     * @param subjects_dir Set SUBJECTS_DIR. Default: uses environment variable.
     * @param coords Treat overlay as a surface and write it into a 3 frame parameterization.
     * @param average_curvature Average curvature patterns navgs times.
     * @param correlation_matrix Use the overlay to compute the correlation matrix within the specified label.
     * @param scale_factor Scale factor to adjust resolution of the spherical map.
     * @param normalize_curvature Normalize curvature by variance.
     * @param verbose_vertex Invoke diagnostics for specified vertex number.
     * @param write_diagnostics Write some diagnostics.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrispWriteOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRISP_WRITE_METADATA);
    const params = mrisp_write_params(input_surface, overlay_filename, output_name, subjects_dir, coords, average_curvature, correlation_matrix, scale_factor, normalize_curvature, verbose_vertex, write_diagnostics)
    return mrisp_write_execute(params, execution);
}


export {
      MRISP_WRITE_METADATA,
      MrispWriteOutputs,
      MrispWriteParameters,
      mrisp_write,
      mrisp_write_params,
};
