// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_PROJECT_END_POINTS_METADATA: Metadata = {
    id: "93cde90208fae7700f6f02d3a5122b37ae3a77f6.boutiques",
    name: "dmri_projectEndPoints",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriProjectEndPointsParameters {
    "__STYXTYPE__": "dmri_projectEndPoints";
    "streamline_file": InputPathType;
    "left_surface_file": InputPathType;
    "right_surface_file": InputPathType;
    "left_overlay_file": string;
    "right_overlay_file": string;
    "reference_image": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dmri_projectEndPoints": dmri_project_end_points_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "dmri_projectEndPoints": dmri_project_end_points_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_project_end_points(...)`.
 *
 * @interface
 */
interface DmriProjectEndPointsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Overlay file for left hemisphere surface
     */
    out_left_overlay: OutputPathType;
    /**
     * Overlay file for right hemisphere surface
     */
    out_right_overlay: OutputPathType;
}


function dmri_project_end_points_params(
    streamline_file: InputPathType,
    left_surface_file: InputPathType,
    right_surface_file: InputPathType,
    left_overlay_file: string,
    right_overlay_file: string,
    reference_image: InputPathType,
): DmriProjectEndPointsParameters {
    /**
     * Build parameters.
    
     * @param streamline_file Input streamline file (e.g. streamlineFile.trk)
     * @param left_surface_file Left hemisphere surface file (e.g. surfaceFile_lh.orig)
     * @param right_surface_file Right hemisphere surface file (e.g. surfaceFile_rh.orig)
     * @param left_overlay_file Output overlay file for left hemisphere
     * @param right_overlay_file Output overlay file for right hemisphere
     * @param reference_image Reference image for the projections
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dmri_projectEndPoints" as const,
        "streamline_file": streamline_file,
        "left_surface_file": left_surface_file,
        "right_surface_file": right_surface_file,
        "left_overlay_file": left_overlay_file,
        "right_overlay_file": right_overlay_file,
        "reference_image": reference_image,
    };
    return params;
}


function dmri_project_end_points_cargs(
    params: DmriProjectEndPointsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dmri_projectEndPoints");
    cargs.push(
        "-i",
        execution.inputFile((params["streamline_file"] ?? null))
    );
    cargs.push(
        "-sl",
        execution.inputFile((params["left_surface_file"] ?? null))
    );
    cargs.push(
        "-sr",
        execution.inputFile((params["right_surface_file"] ?? null))
    );
    cargs.push(
        "-ol",
        (params["left_overlay_file"] ?? null)
    );
    cargs.push(
        "-or",
        (params["right_overlay_file"] ?? null)
    );
    cargs.push(
        "-ri",
        execution.inputFile((params["reference_image"] ?? null))
    );
    return cargs;
}


function dmri_project_end_points_outputs(
    params: DmriProjectEndPointsParameters,
    execution: Execution,
): DmriProjectEndPointsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DmriProjectEndPointsOutputs = {
        root: execution.outputFile("."),
        out_left_overlay: execution.outputFile([(params["left_overlay_file"] ?? null)].join('')),
        out_right_overlay: execution.outputFile([(params["right_overlay_file"] ?? null)].join('')),
    };
    return ret;
}


function dmri_project_end_points_execute(
    params: DmriProjectEndPointsParameters,
    execution: Execution,
): DmriProjectEndPointsOutputs {
    /**
     * A tool for projecting the endpoints of streamlines onto cortical surfaces, producing overlay files for visualization.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DmriProjectEndPointsOutputs`).
     */
    params = execution.params(params)
    const cargs = dmri_project_end_points_cargs(params, execution)
    const ret = dmri_project_end_points_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dmri_project_end_points(
    streamline_file: InputPathType,
    left_surface_file: InputPathType,
    right_surface_file: InputPathType,
    left_overlay_file: string,
    right_overlay_file: string,
    reference_image: InputPathType,
    runner: Runner | null = null,
): DmriProjectEndPointsOutputs {
    /**
     * A tool for projecting the endpoints of streamlines onto cortical surfaces, producing overlay files for visualization.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param streamline_file Input streamline file (e.g. streamlineFile.trk)
     * @param left_surface_file Left hemisphere surface file (e.g. surfaceFile_lh.orig)
     * @param right_surface_file Right hemisphere surface file (e.g. surfaceFile_rh.orig)
     * @param left_overlay_file Output overlay file for left hemisphere
     * @param right_overlay_file Output overlay file for right hemisphere
     * @param reference_image Reference image for the projections
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DmriProjectEndPointsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_PROJECT_END_POINTS_METADATA);
    const params = dmri_project_end_points_params(streamline_file, left_surface_file, right_surface_file, left_overlay_file, right_overlay_file, reference_image)
    return dmri_project_end_points_execute(params, execution);
}


export {
      DMRI_PROJECT_END_POINTS_METADATA,
      DmriProjectEndPointsOutputs,
      DmriProjectEndPointsParameters,
      dmri_project_end_points,
      dmri_project_end_points_params,
};
