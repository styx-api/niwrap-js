// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GEN_EPI_REVIEW_PY_METADATA: Metadata = {
    id: "d8d2bfa4cbebb23bdbab47bb389c8686d9524ec8.boutiques",
    name: "gen_epi_review.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface GenEpiReviewPyParameters {
    "@type": "afni.gen_epi_review.py";
    "datasets": Array<string>;
    "script_name"?: string | null | undefined;
    "windows"?: Array<string> | null | undefined;
    "verbosity"?: number | null | undefined;
    "image_size"?: Array<number> | null | undefined;
    "image_xoffset"?: number | null | undefined;
    "image_yoffset"?: number | null | undefined;
    "graph_size"?: Array<number> | null | undefined;
    "graph_xoffset"?: number | null | undefined;
    "graph_yoffset"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.gen_epi_review.py": gen_epi_review_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gen_epi_review_py(...)`.
 *
 * @interface
 */
interface GenEpiReviewPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param datasets Specify input datasets for processing
 * @param script_name Specify the name of the generated script
 * @param windows Specify the image windows to open
 * @param verbosity Specify a verbosity level
 * @param image_size Set image dimensions, in pixels
 * @param image_xoffset Set the X-offset for the image, in pixels
 * @param image_yoffset Set the Y-offset for the image, in pixels
 * @param graph_size Set graph dimensions, in pixels
 * @param graph_xoffset Set the X-offset for the graph, in pixels
 * @param graph_yoffset Set the Y-offset for the graph, in pixels
 *
 * @returns Parameter dictionary
 */
function gen_epi_review_py_params(
    datasets: Array<string>,
    script_name: string | null = null,
    windows: Array<string> | null = null,
    verbosity: number | null = null,
    image_size: Array<number> | null = null,
    image_xoffset: number | null = null,
    image_yoffset: number | null = null,
    graph_size: Array<number> | null = null,
    graph_xoffset: number | null = null,
    graph_yoffset: number | null = null,
): GenEpiReviewPyParameters {
    const params = {
        "@type": "afni.gen_epi_review.py" as const,
        "datasets": datasets,
    };
    if (script_name !== null) {
        params["script_name"] = script_name;
    }
    if (windows !== null) {
        params["windows"] = windows;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    if (image_size !== null) {
        params["image_size"] = image_size;
    }
    if (image_xoffset !== null) {
        params["image_xoffset"] = image_xoffset;
    }
    if (image_yoffset !== null) {
        params["image_yoffset"] = image_yoffset;
    }
    if (graph_size !== null) {
        params["graph_size"] = graph_size;
    }
    if (graph_xoffset !== null) {
        params["graph_xoffset"] = graph_xoffset;
    }
    if (graph_yoffset !== null) {
        params["graph_yoffset"] = graph_yoffset;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gen_epi_review_py_cargs(
    params: GenEpiReviewPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gen_epi_review.py");
    cargs.push(
        "-dsets",
        ...(params["datasets"] ?? null)
    );
    if ((params["script_name"] ?? null) !== null) {
        cargs.push(
            "-script",
            (params["script_name"] ?? null)
        );
    }
    if ((params["windows"] ?? null) !== null) {
        cargs.push(
            "-windows",
            ...(params["windows"] ?? null)
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    if ((params["image_size"] ?? null) !== null) {
        cargs.push(
            "-im_size",
            ...(params["image_size"] ?? null).map(String)
        );
    }
    if ((params["image_xoffset"] ?? null) !== null) {
        cargs.push(
            "-im_xoff",
            String((params["image_xoffset"] ?? null))
        );
    }
    if ((params["image_yoffset"] ?? null) !== null) {
        cargs.push(
            "-im_yoff",
            String((params["image_yoffset"] ?? null))
        );
    }
    if ((params["graph_size"] ?? null) !== null) {
        cargs.push(
            "-gr_size",
            ...(params["graph_size"] ?? null).map(String)
        );
    }
    if ((params["graph_xoffset"] ?? null) !== null) {
        cargs.push(
            "-gr_xoff",
            String((params["graph_xoffset"] ?? null))
        );
    }
    if ((params["graph_yoffset"] ?? null) !== null) {
        cargs.push(
            "-gr_yoff",
            String((params["graph_yoffset"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gen_epi_review_py_outputs(
    params: GenEpiReviewPyParameters,
    execution: Execution,
): GenEpiReviewPyOutputs {
    const ret: GenEpiReviewPyOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * gen_epi_review.py
 *
 * Generate an AFNI processing script to review EPI data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GenEpiReviewPyOutputs`).
 */
function gen_epi_review_py_execute(
    params: GenEpiReviewPyParameters,
    runner: Runner | null = null,
): GenEpiReviewPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GEN_EPI_REVIEW_PY_METADATA);
    params = execution.params(params)
    const cargs = gen_epi_review_py_cargs(params, execution)
    const ret = gen_epi_review_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * gen_epi_review.py
 *
 * Generate an AFNI processing script to review EPI data.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param datasets Specify input datasets for processing
 * @param script_name Specify the name of the generated script
 * @param windows Specify the image windows to open
 * @param verbosity Specify a verbosity level
 * @param image_size Set image dimensions, in pixels
 * @param image_xoffset Set the X-offset for the image, in pixels
 * @param image_yoffset Set the Y-offset for the image, in pixels
 * @param graph_size Set graph dimensions, in pixels
 * @param graph_xoffset Set the X-offset for the graph, in pixels
 * @param graph_yoffset Set the Y-offset for the graph, in pixels
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GenEpiReviewPyOutputs`).
 */
function gen_epi_review_py(
    datasets: Array<string>,
    script_name: string | null = null,
    windows: Array<string> | null = null,
    verbosity: number | null = null,
    image_size: Array<number> | null = null,
    image_xoffset: number | null = null,
    image_yoffset: number | null = null,
    graph_size: Array<number> | null = null,
    graph_xoffset: number | null = null,
    graph_yoffset: number | null = null,
    runner: Runner | null = null,
): GenEpiReviewPyOutputs {
    const params = gen_epi_review_py_params(datasets, script_name, windows, verbosity, image_size, image_xoffset, image_yoffset, graph_size, graph_xoffset, graph_yoffset)
    return gen_epi_review_py_execute(params, runner);
}


export {
      GEN_EPI_REVIEW_PY_METADATA,
      GenEpiReviewPyOutputs,
      GenEpiReviewPyParameters,
      gen_epi_review_py,
      gen_epi_review_py_execute,
      gen_epi_review_py_params,
};
