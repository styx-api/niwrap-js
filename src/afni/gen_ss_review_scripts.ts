// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GEN_SS_REVIEW_SCRIPTS_METADATA: Metadata = {
    id: "0b2bced52ccd788df5199b4d3c54d3385072af7d.boutiques",
    name: "gen_ss_review_scripts",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface GenSsReviewScriptsParameters {
    "__STYXTYPE__": "gen_ss_review_scripts";
    "subject_id"?: string | null | undefined;
    "rm_trs"?: number | null | undefined;
    "num_stim"?: number | null | undefined;
    "mb_level"?: number | null | undefined;
    "slice_pattern"?: string | null | undefined;
    "motion_dset"?: InputPathType | null | undefined;
    "outlier_dset"?: InputPathType | null | undefined;
    "enorm_dset"?: InputPathType | null | undefined;
    "mot_limit"?: number | null | undefined;
    "out_limit"?: number | null | undefined;
    "xmat_regress"?: InputPathType | null | undefined;
    "xmat_uncensored"?: InputPathType | null | undefined;
    "stats_dset"?: InputPathType | null | undefined;
    "final_anat"?: InputPathType | null | undefined;
    "final_view"?: string | null | undefined;
    "prefix"?: string | null | undefined;
    "verbosity"?: number | null | undefined;
    "uvars_json"?: InputPathType | null | undefined;
    "init_uvars_json"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "gen_ss_review_scripts": gen_ss_review_scripts_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "gen_ss_review_scripts": gen_ss_review_scripts_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gen_ss_review_scripts(...)`.
 *
 * @interface
 */
interface GenSsReviewScriptsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Basic review script output
     */
    basic_review: OutputPathType;
    /**
     * Driver review script output
     */
    driver_review: OutputPathType;
    /**
     * Driver commands script output
     */
    driver_commands: OutputPathType;
}


function gen_ss_review_scripts_params(
    subject_id: string | null = null,
    rm_trs: number | null = null,
    num_stim: number | null = null,
    mb_level: number | null = null,
    slice_pattern: string | null = null,
    motion_dset: InputPathType | null = null,
    outlier_dset: InputPathType | null = null,
    enorm_dset: InputPathType | null = null,
    mot_limit: number | null = null,
    out_limit: number | null = null,
    xmat_regress: InputPathType | null = null,
    xmat_uncensored: InputPathType | null = null,
    stats_dset: InputPathType | null = null,
    final_anat: InputPathType | null = null,
    final_view: string | null = null,
    prefix: string | null = null,
    verbosity: number | null = null,
    uvars_json: InputPathType | null = null,
    init_uvars_json: InputPathType | null = null,
): GenSsReviewScriptsParameters {
    /**
     * Build parameters.
    
     * @param subject_id Subject ID
     * @param rm_trs Number of TRs removed per run
     * @param num_stim Number of main stimulus classes
     * @param mb_level Multiband slice acquisition level (>= 1)
     * @param slice_pattern Slice timing pattern
     * @param motion_dset Motion parameters dataset
     * @param outlier_dset Outlier fraction time series dataset
     * @param enorm_dset Euclidean norm of motion parameters dataset
     * @param mot_limit Motion limit
     * @param out_limit Outlier fraction limit
     * @param xmat_regress X-matrix file used in regression
     * @param xmat_uncensored Un-censored X-matrix file
     * @param stats_dset Output from 3dDeconvolve
     * @param final_anat Final anatomical dataset
     * @param final_view Final view of data (e.g. 'orig' or 'tlrc')
     * @param prefix Set the prefix for script names
     * @param verbosity Set the verbosity level
     * @param uvars_json Write JSON file of user variables dict
     * @param init_uvars_json Initialize user variables from the given JSON file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "gen_ss_review_scripts" as const,
    };
    if (subject_id !== null) {
        params["subject_id"] = subject_id;
    }
    if (rm_trs !== null) {
        params["rm_trs"] = rm_trs;
    }
    if (num_stim !== null) {
        params["num_stim"] = num_stim;
    }
    if (mb_level !== null) {
        params["mb_level"] = mb_level;
    }
    if (slice_pattern !== null) {
        params["slice_pattern"] = slice_pattern;
    }
    if (motion_dset !== null) {
        params["motion_dset"] = motion_dset;
    }
    if (outlier_dset !== null) {
        params["outlier_dset"] = outlier_dset;
    }
    if (enorm_dset !== null) {
        params["enorm_dset"] = enorm_dset;
    }
    if (mot_limit !== null) {
        params["mot_limit"] = mot_limit;
    }
    if (out_limit !== null) {
        params["out_limit"] = out_limit;
    }
    if (xmat_regress !== null) {
        params["xmat_regress"] = xmat_regress;
    }
    if (xmat_uncensored !== null) {
        params["xmat_uncensored"] = xmat_uncensored;
    }
    if (stats_dset !== null) {
        params["stats_dset"] = stats_dset;
    }
    if (final_anat !== null) {
        params["final_anat"] = final_anat;
    }
    if (final_view !== null) {
        params["final_view"] = final_view;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (verbosity !== null) {
        params["verbosity"] = verbosity;
    }
    if (uvars_json !== null) {
        params["uvars_json"] = uvars_json;
    }
    if (init_uvars_json !== null) {
        params["init_uvars_json"] = init_uvars_json;
    }
    return params;
}


function gen_ss_review_scripts_cargs(
    params: GenSsReviewScriptsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("gen_ss_review_scripts.py");
    if ((params["subject_id"] ?? null) !== null) {
        cargs.push(
            "-subj",
            (params["subject_id"] ?? null)
        );
    }
    if ((params["rm_trs"] ?? null) !== null) {
        cargs.push(
            "-rm_trs",
            String((params["rm_trs"] ?? null))
        );
    }
    if ((params["num_stim"] ?? null) !== null) {
        cargs.push(
            "-num_stim",
            String((params["num_stim"] ?? null))
        );
    }
    if ((params["mb_level"] ?? null) !== null) {
        cargs.push(
            "-mb_level",
            String((params["mb_level"] ?? null))
        );
    }
    if ((params["slice_pattern"] ?? null) !== null) {
        cargs.push(
            "-slice_pattern",
            (params["slice_pattern"] ?? null)
        );
    }
    if ((params["motion_dset"] ?? null) !== null) {
        cargs.push(
            "-motion_dset",
            execution.inputFile((params["motion_dset"] ?? null))
        );
    }
    if ((params["outlier_dset"] ?? null) !== null) {
        cargs.push(
            "-outlier_dset",
            execution.inputFile((params["outlier_dset"] ?? null))
        );
    }
    if ((params["enorm_dset"] ?? null) !== null) {
        cargs.push(
            "-enorm_dset",
            execution.inputFile((params["enorm_dset"] ?? null))
        );
    }
    if ((params["mot_limit"] ?? null) !== null) {
        cargs.push(
            "-mot_limit",
            String((params["mot_limit"] ?? null))
        );
    }
    if ((params["out_limit"] ?? null) !== null) {
        cargs.push(
            "-out_limit",
            String((params["out_limit"] ?? null))
        );
    }
    if ((params["xmat_regress"] ?? null) !== null) {
        cargs.push(
            "-xmat_regress",
            execution.inputFile((params["xmat_regress"] ?? null))
        );
    }
    if ((params["xmat_uncensored"] ?? null) !== null) {
        cargs.push(
            "-xmat_uncensored",
            execution.inputFile((params["xmat_uncensored"] ?? null))
        );
    }
    if ((params["stats_dset"] ?? null) !== null) {
        cargs.push(
            "-stats_dset",
            execution.inputFile((params["stats_dset"] ?? null))
        );
    }
    if ((params["final_anat"] ?? null) !== null) {
        cargs.push(
            "-final_anat",
            execution.inputFile((params["final_anat"] ?? null))
        );
    }
    if ((params["final_view"] ?? null) !== null) {
        cargs.push(
            "-final_view",
            (params["final_view"] ?? null)
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["verbosity"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbosity"] ?? null))
        );
    }
    if ((params["uvars_json"] ?? null) !== null) {
        cargs.push(
            "-write_uvars_json",
            execution.inputFile((params["uvars_json"] ?? null))
        );
    }
    if ((params["init_uvars_json"] ?? null) !== null) {
        cargs.push(
            "-init_uvars_json",
            execution.inputFile((params["init_uvars_json"] ?? null))
        );
    }
    return cargs;
}


function gen_ss_review_scripts_outputs(
    params: GenSsReviewScriptsParameters,
    execution: Execution,
): GenSsReviewScriptsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: GenSsReviewScriptsOutputs = {
        root: execution.outputFile("."),
        basic_review: execution.outputFile(["./@ss_review_basic"].join('')),
        driver_review: execution.outputFile(["./@ss_review_driver"].join('')),
        driver_commands: execution.outputFile(["./@ss_review_driver_commands"].join('')),
    };
    return ret;
}


function gen_ss_review_scripts_execute(
    params: GenSsReviewScriptsParameters,
    execution: Execution,
): GenSsReviewScriptsOutputs {
    /**
     * Generate single subject analysis review scripts.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `GenSsReviewScriptsOutputs`).
     */
    params = execution.params(params)
    const cargs = gen_ss_review_scripts_cargs(params, execution)
    const ret = gen_ss_review_scripts_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function gen_ss_review_scripts(
    subject_id: string | null = null,
    rm_trs: number | null = null,
    num_stim: number | null = null,
    mb_level: number | null = null,
    slice_pattern: string | null = null,
    motion_dset: InputPathType | null = null,
    outlier_dset: InputPathType | null = null,
    enorm_dset: InputPathType | null = null,
    mot_limit: number | null = null,
    out_limit: number | null = null,
    xmat_regress: InputPathType | null = null,
    xmat_uncensored: InputPathType | null = null,
    stats_dset: InputPathType | null = null,
    final_anat: InputPathType | null = null,
    final_view: string | null = null,
    prefix: string | null = null,
    verbosity: number | null = null,
    uvars_json: InputPathType | null = null,
    init_uvars_json: InputPathType | null = null,
    runner: Runner | null = null,
): GenSsReviewScriptsOutputs {
    /**
     * Generate single subject analysis review scripts.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param subject_id Subject ID
     * @param rm_trs Number of TRs removed per run
     * @param num_stim Number of main stimulus classes
     * @param mb_level Multiband slice acquisition level (>= 1)
     * @param slice_pattern Slice timing pattern
     * @param motion_dset Motion parameters dataset
     * @param outlier_dset Outlier fraction time series dataset
     * @param enorm_dset Euclidean norm of motion parameters dataset
     * @param mot_limit Motion limit
     * @param out_limit Outlier fraction limit
     * @param xmat_regress X-matrix file used in regression
     * @param xmat_uncensored Un-censored X-matrix file
     * @param stats_dset Output from 3dDeconvolve
     * @param final_anat Final anatomical dataset
     * @param final_view Final view of data (e.g. 'orig' or 'tlrc')
     * @param prefix Set the prefix for script names
     * @param verbosity Set the verbosity level
     * @param uvars_json Write JSON file of user variables dict
     * @param init_uvars_json Initialize user variables from the given JSON file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `GenSsReviewScriptsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GEN_SS_REVIEW_SCRIPTS_METADATA);
    const params = gen_ss_review_scripts_params(subject_id, rm_trs, num_stim, mb_level, slice_pattern, motion_dset, outlier_dset, enorm_dset, mot_limit, out_limit, xmat_regress, xmat_uncensored, stats_dset, final_anat, final_view, prefix, verbosity, uvars_json, init_uvars_json)
    return gen_ss_review_scripts_execute(params, execution);
}


export {
      GEN_SS_REVIEW_SCRIPTS_METADATA,
      GenSsReviewScriptsOutputs,
      GenSsReviewScriptsParameters,
      gen_ss_review_scripts,
      gen_ss_review_scripts_params,
};
