// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_ROI_AVERAGE_METADATA: Metadata = {
    id: "d3bb8cff36344df781b7dd9dbdd7df47c80190d5.boutiques",
    name: "cifti-roi-average",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiRoiAverageParameters {
    "@type"?: "workbench/cifti-roi-average";
    "cifti_in": InputPathType;
    "text_out": string;
    "opt_cifti_roi_roi_cifti"?: InputPathType | null | undefined;
    "opt_left_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_right_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_cerebellum_roi_roi_metric"?: InputPathType | null | undefined;
    "opt_vol_roi_roi_vol"?: InputPathType | null | undefined;
}
type CiftiRoiAverageParametersTagged = Required<Pick<CiftiRoiAverageParameters, '@type'>> & CiftiRoiAverageParameters;


/**
 * Output object returned when calling `CiftiRoiAverageParameters(...)`.
 *
 * @interface
 */
interface CiftiRoiAverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in the cifti file to average rows from
 * @param text_out output text file of the average values
 * @param opt_cifti_roi_roi_cifti cifti file containing combined rois: the rois as a cifti file
 * @param opt_left_roi_roi_metric vertices to use from left hemisphere: the left roi as a metric file
 * @param opt_right_roi_roi_metric vertices to use from right hemisphere: the right roi as a metric file
 * @param opt_cerebellum_roi_roi_metric vertices to use from cerebellum: the cerebellum roi as a metric file
 * @param opt_vol_roi_roi_vol voxels to use: the roi volume file
 *
 * @returns Parameter dictionary
 */
function cifti_roi_average_params(
    cifti_in: InputPathType,
    text_out: string,
    opt_cifti_roi_roi_cifti: InputPathType | null = null,
    opt_left_roi_roi_metric: InputPathType | null = null,
    opt_right_roi_roi_metric: InputPathType | null = null,
    opt_cerebellum_roi_roi_metric: InputPathType | null = null,
    opt_vol_roi_roi_vol: InputPathType | null = null,
): CiftiRoiAverageParametersTagged {
    const params = {
        "@type": "workbench/cifti-roi-average" as const,
        "cifti_in": cifti_in,
        "text_out": text_out,
    };
    if (opt_cifti_roi_roi_cifti !== null) {
        params["opt_cifti_roi_roi_cifti"] = opt_cifti_roi_roi_cifti;
    }
    if (opt_left_roi_roi_metric !== null) {
        params["opt_left_roi_roi_metric"] = opt_left_roi_roi_metric;
    }
    if (opt_right_roi_roi_metric !== null) {
        params["opt_right_roi_roi_metric"] = opt_right_roi_roi_metric;
    }
    if (opt_cerebellum_roi_roi_metric !== null) {
        params["opt_cerebellum_roi_roi_metric"] = opt_cerebellum_roi_roi_metric;
    }
    if (opt_vol_roi_roi_vol !== null) {
        params["opt_vol_roi_roi_vol"] = opt_vol_roi_roi_vol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_roi_average_cargs(
    params: CiftiRoiAverageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-roi-average");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["text_out"] ?? null));
    if ((params["opt_cifti_roi_roi_cifti"] ?? null) !== null) {
        cargs.push(
            "-cifti-roi",
            execution.inputFile((params["opt_cifti_roi_roi_cifti"] ?? null))
        );
    }
    if ((params["opt_left_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-left-roi",
            execution.inputFile((params["opt_left_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_right_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-right-roi",
            execution.inputFile((params["opt_right_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_cerebellum_roi_roi_metric"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-roi",
            execution.inputFile((params["opt_cerebellum_roi_roi_metric"] ?? null))
        );
    }
    if ((params["opt_vol_roi_roi_vol"] ?? null) !== null) {
        cargs.push(
            "-vol-roi",
            execution.inputFile((params["opt_vol_roi_roi_vol"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_roi_average_outputs(
    params: CiftiRoiAverageParameters,
    execution: Execution,
): CiftiRoiAverageOutputs {
    const ret: CiftiRoiAverageOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * cifti-roi-average
 *
 * Average rows in a single cifti file.
 *
 * Average the rows that are within the specified ROIs, and write the resulting average row to a text file, separated by newlines.  If -cifti-roi is specified, -left-roi, -right-roi, -cerebellum-roi, and -vol-roi must not be specified.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiRoiAverageOutputs`).
 */
function cifti_roi_average_execute(
    params: CiftiRoiAverageParameters,
    runner: Runner | null = null,
): CiftiRoiAverageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_ROI_AVERAGE_METADATA);
    params = execution.params(params)
    const cargs = cifti_roi_average_cargs(params, execution)
    const ret = cifti_roi_average_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-roi-average
 *
 * Average rows in a single cifti file.
 *
 * Average the rows that are within the specified ROIs, and write the resulting average row to a text file, separated by newlines.  If -cifti-roi is specified, -left-roi, -right-roi, -cerebellum-roi, and -vol-roi must not be specified.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the cifti file to average rows from
 * @param text_out output text file of the average values
 * @param opt_cifti_roi_roi_cifti cifti file containing combined rois: the rois as a cifti file
 * @param opt_left_roi_roi_metric vertices to use from left hemisphere: the left roi as a metric file
 * @param opt_right_roi_roi_metric vertices to use from right hemisphere: the right roi as a metric file
 * @param opt_cerebellum_roi_roi_metric vertices to use from cerebellum: the cerebellum roi as a metric file
 * @param opt_vol_roi_roi_vol voxels to use: the roi volume file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiRoiAverageOutputs`).
 */
function cifti_roi_average(
    cifti_in: InputPathType,
    text_out: string,
    opt_cifti_roi_roi_cifti: InputPathType | null = null,
    opt_left_roi_roi_metric: InputPathType | null = null,
    opt_right_roi_roi_metric: InputPathType | null = null,
    opt_cerebellum_roi_roi_metric: InputPathType | null = null,
    opt_vol_roi_roi_vol: InputPathType | null = null,
    runner: Runner | null = null,
): CiftiRoiAverageOutputs {
    const params = cifti_roi_average_params(cifti_in, text_out, opt_cifti_roi_roi_cifti, opt_left_roi_roi_metric, opt_right_roi_roi_metric, opt_cerebellum_roi_roi_metric, opt_vol_roi_roi_vol)
    return cifti_roi_average_execute(params, runner);
}


export {
      CIFTI_ROI_AVERAGE_METADATA,
      CiftiRoiAverageOutputs,
      cifti_roi_average,
      cifti_roi_average_execute,
      cifti_roi_average_params,
};
