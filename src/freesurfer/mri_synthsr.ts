// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SYNTHSR_METADATA: Metadata = {
    id: "7f3f0cfbdf98e5e3ff73c3ba6cd3464d5c2398ab.boutiques",
    name: "mri_synthsr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSynthsrParameters {
    "@type": "freesurfer.mri_synthsr";
    "input": string;
    "output": string;
    "ct": boolean;
    "disable_sharpening": boolean;
    "disable_flipping": boolean;
    "lowfield": boolean;
    "v1": boolean;
    "threads"?: number | null | undefined;
    "cpu": boolean;
    "model"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_synthsr": mri_synthsr_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_synthsr(...)`.
 *
 * @interface
 */
interface MriSynthsrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input Image(s) to super-resolve. Can be a path to an image or to a folder.
 * @param output Output(s), i.e., synthetic 1mm MP-RAGE(s). Must be a folder if input is a folder.
 * @param ct Use this flag for CT scans in Hounsfield scale, it clips intensities to [0,80].
 * @param disable_sharpening Use this flag to disable unsharp masking.
 * @param disable_flipping Use this flag to disable flipping augmentation at test time.
 * @param lowfield Use model for low-field scans (e.g., acquired with Hyperfine's Swoop scanner).
 * @param v1 Use version 1 model from July 2021.
 * @param threads Number of cores to be used. Default is 1.
 * @param cpu Enforce running with CPU rather than GPU.
 * @param model Use a different model file.
 *
 * @returns Parameter dictionary
 */
function mri_synthsr_params(
    input: string,
    output: string,
    ct: boolean = false,
    disable_sharpening: boolean = false,
    disable_flipping: boolean = false,
    lowfield: boolean = false,
    v1: boolean = false,
    threads: number | null = null,
    cpu: boolean = false,
    model: string | null = null,
): MriSynthsrParameters {
    const params = {
        "@type": "freesurfer.mri_synthsr" as const,
        "input": input,
        "output": output,
        "ct": ct,
        "disable_sharpening": disable_sharpening,
        "disable_flipping": disable_flipping,
        "lowfield": lowfield,
        "v1": v1,
        "cpu": cpu,
    };
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (model !== null) {
        params["model"] = model;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_synthsr_cargs(
    params: MriSynthsrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_synthsr");
    cargs.push((params["input"] ?? null));
    cargs.push((params["output"] ?? null));
    if ((params["ct"] ?? null)) {
        cargs.push("--ct");
    }
    if ((params["disable_sharpening"] ?? null)) {
        cargs.push("--disable_sharpening");
    }
    if ((params["disable_flipping"] ?? null)) {
        cargs.push("--disable_flipping");
    }
    if ((params["lowfield"] ?? null)) {
        cargs.push("--lowfield");
    }
    if ((params["v1"] ?? null)) {
        cargs.push("--v1");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["cpu"] ?? null)) {
        cargs.push("--cpu");
    }
    if ((params["model"] ?? null) !== null) {
        cargs.push(
            "--model",
            (params["model"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_synthsr_outputs(
    params: MriSynthsrParameters,
    execution: Execution,
): MriSynthsrOutputs {
    const ret: MriSynthsrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_synthsr
 *
 * Implementation of SynthSR that generates a synthetic 1mm MP-RAGE from a scan of any contrast and resolution.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSynthsrOutputs`).
 */
function mri_synthsr_execute(
    params: MriSynthsrParameters,
    runner: Runner | null = null,
): MriSynthsrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SYNTHSR_METADATA);
    params = execution.params(params)
    const cargs = mri_synthsr_cargs(params, execution)
    const ret = mri_synthsr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_synthsr
 *
 * Implementation of SynthSR that generates a synthetic 1mm MP-RAGE from a scan of any contrast and resolution.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input Image(s) to super-resolve. Can be a path to an image or to a folder.
 * @param output Output(s), i.e., synthetic 1mm MP-RAGE(s). Must be a folder if input is a folder.
 * @param ct Use this flag for CT scans in Hounsfield scale, it clips intensities to [0,80].
 * @param disable_sharpening Use this flag to disable unsharp masking.
 * @param disable_flipping Use this flag to disable flipping augmentation at test time.
 * @param lowfield Use model for low-field scans (e.g., acquired with Hyperfine's Swoop scanner).
 * @param v1 Use version 1 model from July 2021.
 * @param threads Number of cores to be used. Default is 1.
 * @param cpu Enforce running with CPU rather than GPU.
 * @param model Use a different model file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSynthsrOutputs`).
 */
function mri_synthsr(
    input: string,
    output: string,
    ct: boolean = false,
    disable_sharpening: boolean = false,
    disable_flipping: boolean = false,
    lowfield: boolean = false,
    v1: boolean = false,
    threads: number | null = null,
    cpu: boolean = false,
    model: string | null = null,
    runner: Runner | null = null,
): MriSynthsrOutputs {
    const params = mri_synthsr_params(input, output, ct, disable_sharpening, disable_flipping, lowfield, v1, threads, cpu, model)
    return mri_synthsr_execute(params, runner);
}


export {
      MRI_SYNTHSR_METADATA,
      MriSynthsrOutputs,
      MriSynthsrParameters,
      mri_synthsr,
      mri_synthsr_execute,
      mri_synthsr_params,
};
