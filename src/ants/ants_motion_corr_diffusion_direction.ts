// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_MOTION_CORR_DIFFUSION_DIRECTION_METADATA: Metadata = {
    id: "3f81491f1faf2e11f2fe0e69121f28544825a2d4.boutiques",
    name: "antsMotionCorrDiffusionDirection",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsMotionCorrDiffusionDirectionParameters {
    "__STYXTYPE__": "antsMotionCorrDiffusionDirection";
    "scheme": InputPathType;
    "bvec": InputPathType;
    "physical": InputPathType;
    "moco": InputPathType;
    "output": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "antsMotionCorrDiffusionDirection": ants_motion_corr_diffusion_direction_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "antsMotionCorrDiffusionDirection": ants_motion_corr_diffusion_direction_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_motion_corr_diffusion_direction(...)`.
 *
 * @interface
 */
interface AntsMotionCorrDiffusionDirectionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file for corrected diffusion directions.
     */
    corrected_scheme: OutputPathType;
}


function ants_motion_corr_diffusion_direction_params(
    scheme: InputPathType,
    bvec: InputPathType,
    physical: InputPathType,
    moco: InputPathType,
    output: string,
): AntsMotionCorrDiffusionDirectionParameters {
    /**
     * Build parameters.
    
     * @param scheme Camino scheme file specify acquisition parameters.
     * @param bvec bvec image specifying diffusion directions.
     * @param physical 3D image in dwi space.
     * @param moco Motion correction parameters from antsMotionCorr.
     * @param output Specify the output file for corrected directions.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "antsMotionCorrDiffusionDirection" as const,
        "scheme": scheme,
        "bvec": bvec,
        "physical": physical,
        "moco": moco,
        "output": output,
    };
    return params;
}


function ants_motion_corr_diffusion_direction_cargs(
    params: AntsMotionCorrDiffusionDirectionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("antsMotionCorrDiffusionDirection");
    cargs.push(
        "-s",
        execution.inputFile((params["scheme"] ?? null))
    );
    cargs.push(
        "-b",
        execution.inputFile((params["bvec"] ?? null))
    );
    cargs.push(
        "-p",
        execution.inputFile((params["physical"] ?? null))
    );
    cargs.push(
        "-m",
        execution.inputFile((params["moco"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output"] ?? null)
    );
    return cargs;
}


function ants_motion_corr_diffusion_direction_outputs(
    params: AntsMotionCorrDiffusionDirectionParameters,
    execution: Execution,
): AntsMotionCorrDiffusionDirectionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AntsMotionCorrDiffusionDirectionOutputs = {
        root: execution.outputFile("."),
        corrected_scheme: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


function ants_motion_corr_diffusion_direction_execute(
    params: AntsMotionCorrDiffusionDirectionParameters,
    execution: Execution,
): AntsMotionCorrDiffusionDirectionOutputs {
    /**
     * This tool adjusts the diffusion scheme for motion correction.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AntsMotionCorrDiffusionDirectionOutputs`).
     */
    params = execution.params(params)
    const cargs = ants_motion_corr_diffusion_direction_cargs(params, execution)
    const ret = ants_motion_corr_diffusion_direction_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ants_motion_corr_diffusion_direction(
    scheme: InputPathType,
    bvec: InputPathType,
    physical: InputPathType,
    moco: InputPathType,
    output: string,
    runner: Runner | null = null,
): AntsMotionCorrDiffusionDirectionOutputs {
    /**
     * This tool adjusts the diffusion scheme for motion correction.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param scheme Camino scheme file specify acquisition parameters.
     * @param bvec bvec image specifying diffusion directions.
     * @param physical 3D image in dwi space.
     * @param moco Motion correction parameters from antsMotionCorr.
     * @param output Specify the output file for corrected directions.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AntsMotionCorrDiffusionDirectionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_MOTION_CORR_DIFFUSION_DIRECTION_METADATA);
    const params = ants_motion_corr_diffusion_direction_params(scheme, bvec, physical, moco, output)
    return ants_motion_corr_diffusion_direction_execute(params, execution);
}


export {
      ANTS_MOTION_CORR_DIFFUSION_DIRECTION_METADATA,
      AntsMotionCorrDiffusionDirectionOutputs,
      AntsMotionCorrDiffusionDirectionParameters,
      ants_motion_corr_diffusion_direction,
      ants_motion_corr_diffusion_direction_params,
};
