// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_LABEL_PROBABILITY_METADATA: Metadata = {
    id: "0eb4968bb2e8b9aea5b76afc92179fafd1396a41.boutiques",
    name: "volume-label-probability",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeLabelProbabilityParameters {
    "__STYXTYPE__": "volume-label-probability";
    "label_maps": InputPathType;
    "probability_out": string;
    "opt_exclude_unlabeled": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-label-probability": volume_label_probability_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-label-probability": volume_label_probability_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_label_probability(...)`.
 *
 * @interface
 */
interface VolumeLabelProbabilityOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the relative frequencies of each label at each voxel
     */
    probability_out: OutputPathType;
}


function volume_label_probability_params(
    label_maps: InputPathType,
    probability_out: string,
    opt_exclude_unlabeled: boolean = false,
): VolumeLabelProbabilityParameters {
    /**
     * Build parameters.
    
     * @param label_maps volume label file containing individual label maps from many subjects
     * @param probability_out the relative frequencies of each label at each voxel
     * @param opt_exclude_unlabeled don't make a probability map of the unlabeled key
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-label-probability" as const,
        "label_maps": label_maps,
        "probability_out": probability_out,
        "opt_exclude_unlabeled": opt_exclude_unlabeled,
    };
    return params;
}


function volume_label_probability_cargs(
    params: VolumeLabelProbabilityParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-label-probability");
    cargs.push(execution.inputFile((params["label_maps"] ?? null)));
    cargs.push((params["probability_out"] ?? null));
    if ((params["opt_exclude_unlabeled"] ?? null)) {
        cargs.push("-exclude-unlabeled");
    }
    return cargs;
}


function volume_label_probability_outputs(
    params: VolumeLabelProbabilityParameters,
    execution: Execution,
): VolumeLabelProbabilityOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeLabelProbabilityOutputs = {
        root: execution.outputFile("."),
        probability_out: execution.outputFile([(params["probability_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_label_probability_execute(
    params: VolumeLabelProbabilityParameters,
    execution: Execution,
): VolumeLabelProbabilityOutputs {
    /**
     * Find frequency of volume labels.
     * 
     * This command outputs a set of soft ROIs, one for each label in the input, where the value is how many of the input maps had that label at that voxel, divided by the number of input maps.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeLabelProbabilityOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_label_probability_cargs(params, execution)
    const ret = volume_label_probability_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_label_probability(
    label_maps: InputPathType,
    probability_out: string,
    opt_exclude_unlabeled: boolean = false,
    runner: Runner | null = null,
): VolumeLabelProbabilityOutputs {
    /**
     * Find frequency of volume labels.
     * 
     * This command outputs a set of soft ROIs, one for each label in the input, where the value is how many of the input maps had that label at that voxel, divided by the number of input maps.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param label_maps volume label file containing individual label maps from many subjects
     * @param probability_out the relative frequencies of each label at each voxel
     * @param opt_exclude_unlabeled don't make a probability map of the unlabeled key
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeLabelProbabilityOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_LABEL_PROBABILITY_METADATA);
    const params = volume_label_probability_params(label_maps, probability_out, opt_exclude_unlabeled)
    return volume_label_probability_execute(params, execution);
}


export {
      VOLUME_LABEL_PROBABILITY_METADATA,
      VolumeLabelProbabilityOutputs,
      VolumeLabelProbabilityParameters,
      volume_label_probability,
      volume_label_probability_params,
};
