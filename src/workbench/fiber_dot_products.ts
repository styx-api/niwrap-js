// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIBER_DOT_PRODUCTS_METADATA: Metadata = {
    id: "1bea023ebc341c8821892b782bf2c571990af31a.boutiques",
    name: "fiber-dot-products",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface FiberDotProductsParameters {
    "@type": "workbench.fiber-dot-products";
    "white_surf": InputPathType;
    "fiber_file": InputPathType;
    "max_dist": number;
    "direction": string;
    "dot_metric": string;
    "f_metric": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.fiber-dot-products": fiber_dot_products_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.fiber-dot-products": fiber_dot_products_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fiber_dot_products(...)`.
 *
 * @interface
 */
interface FiberDotProductsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the metric of dot products
     */
    dot_metric: OutputPathType;
    /**
     * a metric of the f values of the fiber distributions
     */
    f_metric: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param white_surf the white/gray boundary surface
 * @param fiber_file the fiber orientation file
 * @param max_dist the maximum distance from any surface vertex a fiber population may be, in mm
 * @param direction test against surface for whether a fiber population should be used
 * @param dot_metric the metric of dot products
 * @param f_metric a metric of the f values of the fiber distributions
 *
 * @returns Parameter dictionary
 */
function fiber_dot_products_params(
    white_surf: InputPathType,
    fiber_file: InputPathType,
    max_dist: number,
    direction: string,
    dot_metric: string,
    f_metric: string,
): FiberDotProductsParameters {
    const params = {
        "@type": "workbench.fiber-dot-products" as const,
        "white_surf": white_surf,
        "fiber_file": fiber_file,
        "max_dist": max_dist,
        "direction": direction,
        "dot_metric": dot_metric,
        "f_metric": f_metric,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fiber_dot_products_cargs(
    params: FiberDotProductsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-fiber-dot-products");
    cargs.push(execution.inputFile((params["white_surf"] ?? null)));
    cargs.push(execution.inputFile((params["fiber_file"] ?? null)));
    cargs.push(String((params["max_dist"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push((params["dot_metric"] ?? null));
    cargs.push((params["f_metric"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fiber_dot_products_outputs(
    params: FiberDotProductsParameters,
    execution: Execution,
): FiberDotProductsOutputs {
    const ret: FiberDotProductsOutputs = {
        root: execution.outputFile("."),
        dot_metric: execution.outputFile([(params["dot_metric"] ?? null)].join('')),
        f_metric: execution.outputFile([(params["f_metric"] ?? null)].join('')),
    };
    return ret;
}


/**
 * fiber-dot-products
 *
 * Compute dot products of fiber orientations with surface normals.
 *
 * For each vertex, this command finds the closest fiber population that satisfies the <direction> test, and computes the absolute value of the dot product of the surface normal and the normalized mean direction of each fiber.  The <direction> test must be one of INSIDE, OUTSIDE, or ANY, which causes the command to only use fiber populations that are inside the surface, outside the surface, or to not care which direction it is from the surface.  Each fiber population is output in a separate metric column.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FiberDotProductsOutputs`).
 */
function fiber_dot_products_execute(
    params: FiberDotProductsParameters,
    runner: Runner | null = null,
): FiberDotProductsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIBER_DOT_PRODUCTS_METADATA);
    params = execution.params(params)
    const cargs = fiber_dot_products_cargs(params, execution)
    const ret = fiber_dot_products_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fiber-dot-products
 *
 * Compute dot products of fiber orientations with surface normals.
 *
 * For each vertex, this command finds the closest fiber population that satisfies the <direction> test, and computes the absolute value of the dot product of the surface normal and the normalized mean direction of each fiber.  The <direction> test must be one of INSIDE, OUTSIDE, or ANY, which causes the command to only use fiber populations that are inside the surface, outside the surface, or to not care which direction it is from the surface.  Each fiber population is output in a separate metric column.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param white_surf the white/gray boundary surface
 * @param fiber_file the fiber orientation file
 * @param max_dist the maximum distance from any surface vertex a fiber population may be, in mm
 * @param direction test against surface for whether a fiber population should be used
 * @param dot_metric the metric of dot products
 * @param f_metric a metric of the f values of the fiber distributions
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FiberDotProductsOutputs`).
 */
function fiber_dot_products(
    white_surf: InputPathType,
    fiber_file: InputPathType,
    max_dist: number,
    direction: string,
    dot_metric: string,
    f_metric: string,
    runner: Runner | null = null,
): FiberDotProductsOutputs {
    const params = fiber_dot_products_params(white_surf, fiber_file, max_dist, direction, dot_metric, f_metric)
    return fiber_dot_products_execute(params, runner);
}


export {
      FIBER_DOT_PRODUCTS_METADATA,
      FiberDotProductsOutputs,
      FiberDotProductsParameters,
      fiber_dot_products,
      fiber_dot_products_execute,
      fiber_dot_products_params,
};
