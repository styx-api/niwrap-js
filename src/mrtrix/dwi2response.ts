// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DWI2RESPONSE_METADATA: Metadata = {
    id: "5d77f6a3345b62f3c24a0d777ee55aa027113b39.boutiques",
    name: "dwi2response",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Dwi2responseDhollanderParameters {
    "@type": "mrtrix.dwi2response.dhollander";
    "input": InputPathType;
    "out_sfwm": string;
    "out_gm": string;
    "out_csf": string;
    "erode"?: number | null | undefined;
    "fa"?: number | null | undefined;
    "sfwm"?: number | null | undefined;
    "gm"?: number | null | undefined;
    "csf"?: number | null | undefined;
    "wm_algo"?: "fa" | "tax" | "tournier" | null | undefined;
}


interface Dwi2responseFaParameters {
    "@type": "mrtrix.dwi2response.fa";
    "input": InputPathType;
    "output": string;
    "erode"?: number | null | undefined;
    "number"?: number | null | undefined;
    "threshold"?: number | null | undefined;
}


interface Dwi2responseManualParameters {
    "@type": "mrtrix.dwi2response.manual";
    "input": InputPathType;
    "in_voxels": InputPathType;
    "output": string;
    "dirs"?: InputPathType | null | undefined;
}


interface Dwi2responseMsmt5ttParameters {
    "@type": "mrtrix.dwi2response.msmt_5tt";
    "input": InputPathType;
    "in_5tt": InputPathType;
    "out_wm": string;
    "out_gm": string;
    "out_csf": string;
    "dirs"?: InputPathType | null | undefined;
    "fa"?: number | null | undefined;
    "pvf"?: number | null | undefined;
    "wm_algo"?: "fa" | "tax" | "tournier" | null | undefined;
    "sfwm_fa_threshold"?: number | null | undefined;
}


interface Dwi2responseTaxParameters {
    "@type": "mrtrix.dwi2response.tax";
    "input": InputPathType;
    "output": string;
    "peak_ratio"?: number | null | undefined;
    "max_iters"?: number | null | undefined;
    "convergence"?: number | null | undefined;
}


interface Dwi2responseTournierParameters {
    "@type": "mrtrix.dwi2response.tournier";
    "input": InputPathType;
    "output": string;
    "number"?: number | null | undefined;
    "iter_voxels"?: number | null | undefined;
    "dilate"?: number | null | undefined;
    "max_iters"?: number | null | undefined;
}


interface Dwi2responseFslgradParameters {
    "@type": "mrtrix.dwi2response.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface Dwi2responseConfigParameters {
    "@type": "mrtrix.dwi2response.config";
    "key": string;
    "value": string;
}


interface Dwi2responseParameters {
    "@type": "mrtrix.dwi2response";
    "algorithm": Dwi2responseDhollanderParameters | Dwi2responseFaParameters | Dwi2responseManualParameters | Dwi2responseMsmt5ttParameters | Dwi2responseTaxParameters | Dwi2responseTournierParameters;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: Dwi2responseFslgradParameters | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "voxels"?: string | null | undefined;
    "shells"?: Array<number> | null | undefined;
    "lmax"?: Array<number> | null | undefined;
    "nocleanup": boolean;
    "scratch"?: string | null | undefined;
    "continue"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Dwi2responseConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.dwi2response": dwi2response_cargs,
        "mrtrix.dwi2response.dhollander": dwi2response_dhollander_cargs,
        "mrtrix.dwi2response.fa": dwi2response_fa_cargs,
        "mrtrix.dwi2response.manual": dwi2response_manual_cargs,
        "mrtrix.dwi2response.msmt_5tt": dwi2response_msmt_5tt_cargs,
        "mrtrix.dwi2response.tax": dwi2response_tax_cargs,
        "mrtrix.dwi2response.tournier": dwi2response_tournier_cargs,
        "mrtrix.dwi2response.fslgrad": dwi2response_fslgrad_cargs,
        "mrtrix.dwi2response.config": dwi2response_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.dwi2response": dwi2response_outputs,
        "mrtrix.dwi2response.dhollander": dwi2response_dhollander_outputs,
        "mrtrix.dwi2response.fa": dwi2response_fa_outputs,
        "mrtrix.dwi2response.manual": dwi2response_manual_outputs,
        "mrtrix.dwi2response.msmt_5tt": dwi2response_msmt_5tt_outputs,
        "mrtrix.dwi2response.tax": dwi2response_tax_outputs,
        "mrtrix.dwi2response.tournier": dwi2response_tournier_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `Dwi2responseDhollanderParameters(...)`.
 *
 * @interface
 */
interface Dwi2responseDhollanderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output single-fibre WM response function text file
     */
    out_sfwm: OutputPathType;
    /**
     * Output GM response function text file
     */
    out_gm: OutputPathType;
    /**
     * Output CSF response function text file
     */
    out_csf: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input Input DWI dataset
 * @param out_sfwm Output single-fibre WM response function text file
 * @param out_gm Output GM response function text file
 * @param out_csf Output CSF response function text file
 * @param erode Number of erosion passes to apply to initial (whole brain) mask. Set to 0 to not erode the brain mask. (default: 3)
 * @param fa FA threshold for crude WM versus GM-CSF separation. (default: 0.2)
 * @param sfwm Final number of single-fibre WM voxels to select, as a percentage of refined WM. (default: 0.5 per cent)
 * @param gm Final number of GM voxels to select, as a percentage of refined GM. (default: 2 per cent)
 * @param csf Final number of CSF voxels to select, as a percentage of refined CSF. (default: 10 per cent)
 * @param wm_algo Use external dwi2response algorithm for WM single-fibre voxel selection (options: fa, tax, tournier) (default: built-in Dhollander 2019)
 *
 * @returns Parameter dictionary
 */
function dwi2response_dhollander_params(
    input: InputPathType,
    out_sfwm: string,
    out_gm: string,
    out_csf: string,
    erode: number | null = null,
    fa: number | null = null,
    sfwm: number | null = null,
    gm: number | null = null,
    csf: number | null = null,
    wm_algo: "fa" | "tax" | "tournier" | null = null,
): Dwi2responseDhollanderParameters {
    const params = {
        "@type": "mrtrix.dwi2response.dhollander" as const,
        "input": input,
        "out_sfwm": out_sfwm,
        "out_gm": out_gm,
        "out_csf": out_csf,
    };
    if (erode !== null) {
        params["erode"] = erode;
    }
    if (fa !== null) {
        params["fa"] = fa;
    }
    if (sfwm !== null) {
        params["sfwm"] = sfwm;
    }
    if (gm !== null) {
        params["gm"] = gm;
    }
    if (csf !== null) {
        params["csf"] = csf;
    }
    if (wm_algo !== null) {
        params["wm_algo"] = wm_algo;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_dhollander_cargs(
    params: Dwi2responseDhollanderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dhollander");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["out_sfwm"] ?? null));
    cargs.push((params["out_gm"] ?? null));
    cargs.push((params["out_csf"] ?? null));
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "-erode",
            String((params["erode"] ?? null))
        );
    }
    if ((params["fa"] ?? null) !== null) {
        cargs.push(
            "-fa",
            String((params["fa"] ?? null))
        );
    }
    if ((params["sfwm"] ?? null) !== null) {
        cargs.push(
            "-sfwm",
            String((params["sfwm"] ?? null))
        );
    }
    if ((params["gm"] ?? null) !== null) {
        cargs.push(
            "-gm",
            String((params["gm"] ?? null))
        );
    }
    if ((params["csf"] ?? null) !== null) {
        cargs.push(
            "-csf",
            String((params["csf"] ?? null))
        );
    }
    if ((params["wm_algo"] ?? null) !== null) {
        cargs.push(
            "-wm_algo",
            (params["wm_algo"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2response_dhollander_outputs(
    params: Dwi2responseDhollanderParameters,
    execution: Execution,
): Dwi2responseDhollanderOutputs {
    const ret: Dwi2responseDhollanderOutputs = {
        root: execution.outputFile("."),
        out_sfwm: execution.outputFile([(params["out_sfwm"] ?? null)].join('')),
        out_gm: execution.outputFile([(params["out_gm"] ?? null)].join('')),
        out_csf: execution.outputFile([(params["out_csf"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `Dwi2responseFaParameters(...)`.
 *
 * @interface
 */
interface Dwi2responseFaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output response function text file
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input DWI
 * @param output The output response function text file
 * @param erode Number of brain mask erosion steps to apply prior to threshold (not used if mask is provided manually)
 * @param number_ The number of highest-FA voxels to use
 * @param threshold Apply a hard FA threshold, rather than selecting the top voxels
 *
 * @returns Parameter dictionary
 */
function dwi2response_fa_params(
    input: InputPathType,
    output: string,
    erode: number | null = null,
    number_: number | null = null,
    threshold: number | null = null,
): Dwi2responseFaParameters {
    const params = {
        "@type": "mrtrix.dwi2response.fa" as const,
        "input": input,
        "output": output,
    };
    if (erode !== null) {
        params["erode"] = erode;
    }
    if (number_ !== null) {
        params["number"] = number_;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_fa_cargs(
    params: Dwi2responseFaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fa");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "-erode",
            String((params["erode"] ?? null))
        );
    }
    if ((params["number"] ?? null) !== null) {
        cargs.push(
            "-number",
            String((params["number"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-threshold",
            String((params["threshold"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2response_fa_outputs(
    params: Dwi2responseFaParameters,
    execution: Execution,
): Dwi2responseFaOutputs {
    const ret: Dwi2responseFaOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `Dwi2responseManualParameters(...)`.
 *
 * @interface
 */
interface Dwi2responseManualOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output response function text file
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input DWI
 * @param in_voxels Input voxel selection mask
 * @param output Output response function text file
 * @param dirs Manually provide the fibre direction in each voxel (a tensor fit will be used otherwise)
 *
 * @returns Parameter dictionary
 */
function dwi2response_manual_params(
    input: InputPathType,
    in_voxels: InputPathType,
    output: string,
    dirs: InputPathType | null = null,
): Dwi2responseManualParameters {
    const params = {
        "@type": "mrtrix.dwi2response.manual" as const,
        "input": input,
        "in_voxels": in_voxels,
        "output": output,
    };
    if (dirs !== null) {
        params["dirs"] = dirs;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_manual_cargs(
    params: Dwi2responseManualParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("manual");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push(execution.inputFile((params["in_voxels"] ?? null)));
    cargs.push((params["output"] ?? null));
    if ((params["dirs"] ?? null) !== null) {
        cargs.push(
            "-dirs",
            execution.inputFile((params["dirs"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2response_manual_outputs(
    params: Dwi2responseManualParameters,
    execution: Execution,
): Dwi2responseManualOutputs {
    const ret: Dwi2responseManualOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `Dwi2responseMsmt5ttParameters(...)`.
 *
 * @interface
 */
interface Dwi2responseMsmt5ttOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output WM response text file
     */
    out_wm: OutputPathType;
    /**
     * Output GM response text file
     */
    out_gm: OutputPathType;
    /**
     * Output CSF response text file
     */
    out_csf: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input DWI
 * @param in_5tt Input co-registered 5TT image
 * @param out_wm Output WM response text file
 * @param out_gm Output GM response text file
 * @param out_csf Output CSF response text file
 * @param dirs Manually provide the fibre direction in each voxel (a tensor fit will be used otherwise)
 * @param fa Upper fractional anisotropy threshold for GM and CSF voxel selection (default: 0.2)
 * @param pvf Partial volume fraction threshold for tissue voxel selection (default: 0.95)
 * @param wm_algo algorithm dwi2response algorithm to use for WM single-fibre voxel selection (options: fa, tax, tournier; default: tournier)
 * @param sfwm_fa_threshold Sets -wm_algo to fa and allows to specify a hard FA threshold for single-fibre WM voxels, which is passed to the -threshold option of the fa algorithm (warning: overrides -wm_algo option)
 *
 * @returns Parameter dictionary
 */
function dwi2response_msmt_5tt_params(
    input: InputPathType,
    in_5tt: InputPathType,
    out_wm: string,
    out_gm: string,
    out_csf: string,
    dirs: InputPathType | null = null,
    fa: number | null = null,
    pvf: number | null = null,
    wm_algo: "fa" | "tax" | "tournier" | null = null,
    sfwm_fa_threshold: number | null = null,
): Dwi2responseMsmt5ttParameters {
    const params = {
        "@type": "mrtrix.dwi2response.msmt_5tt" as const,
        "input": input,
        "in_5tt": in_5tt,
        "out_wm": out_wm,
        "out_gm": out_gm,
        "out_csf": out_csf,
    };
    if (dirs !== null) {
        params["dirs"] = dirs;
    }
    if (fa !== null) {
        params["fa"] = fa;
    }
    if (pvf !== null) {
        params["pvf"] = pvf;
    }
    if (wm_algo !== null) {
        params["wm_algo"] = wm_algo;
    }
    if (sfwm_fa_threshold !== null) {
        params["sfwm_fa_threshold"] = sfwm_fa_threshold;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_msmt_5tt_cargs(
    params: Dwi2responseMsmt5ttParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("msmt_5tt");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push(execution.inputFile((params["in_5tt"] ?? null)));
    cargs.push((params["out_wm"] ?? null));
    cargs.push((params["out_gm"] ?? null));
    cargs.push((params["out_csf"] ?? null));
    if ((params["dirs"] ?? null) !== null) {
        cargs.push(
            "-dirs",
            execution.inputFile((params["dirs"] ?? null))
        );
    }
    if ((params["fa"] ?? null) !== null) {
        cargs.push(
            "-fa",
            String((params["fa"] ?? null))
        );
    }
    if ((params["pvf"] ?? null) !== null) {
        cargs.push(
            "-pvf",
            String((params["pvf"] ?? null))
        );
    }
    if ((params["wm_algo"] ?? null) !== null) {
        cargs.push(
            "-wm_algo",
            (params["wm_algo"] ?? null)
        );
    }
    if ((params["sfwm_fa_threshold"] ?? null) !== null) {
        cargs.push(
            "-sfwm_fa_threshold",
            String((params["sfwm_fa_threshold"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2response_msmt_5tt_outputs(
    params: Dwi2responseMsmt5ttParameters,
    execution: Execution,
): Dwi2responseMsmt5ttOutputs {
    const ret: Dwi2responseMsmt5ttOutputs = {
        root: execution.outputFile("."),
        out_wm: execution.outputFile([(params["out_wm"] ?? null)].join('')),
        out_gm: execution.outputFile([(params["out_gm"] ?? null)].join('')),
        out_csf: execution.outputFile([(params["out_csf"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `Dwi2responseTaxParameters(...)`.
 *
 * @interface
 */
interface Dwi2responseTaxOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output response function text file
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input DWI
 * @param output The output response function text file
 * @param peak_ratio Second-to-first-peak amplitude ratio threshold
 * @param max_iters Maximum number of iterations
 * @param convergence Percentile change in any RF coefficient required to continue iterating
 *
 * @returns Parameter dictionary
 */
function dwi2response_tax_params(
    input: InputPathType,
    output: string,
    peak_ratio: number | null = null,
    max_iters: number | null = null,
    convergence: number | null = null,
): Dwi2responseTaxParameters {
    const params = {
        "@type": "mrtrix.dwi2response.tax" as const,
        "input": input,
        "output": output,
    };
    if (peak_ratio !== null) {
        params["peak_ratio"] = peak_ratio;
    }
    if (max_iters !== null) {
        params["max_iters"] = max_iters;
    }
    if (convergence !== null) {
        params["convergence"] = convergence;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_tax_cargs(
    params: Dwi2responseTaxParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tax");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    if ((params["peak_ratio"] ?? null) !== null) {
        cargs.push(
            "-peak_ratio",
            String((params["peak_ratio"] ?? null))
        );
    }
    if ((params["max_iters"] ?? null) !== null) {
        cargs.push(
            "-max_iters",
            String((params["max_iters"] ?? null))
        );
    }
    if ((params["convergence"] ?? null) !== null) {
        cargs.push(
            "-convergence",
            String((params["convergence"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2response_tax_outputs(
    params: Dwi2responseTaxParameters,
    execution: Execution,
): Dwi2responseTaxOutputs {
    const ret: Dwi2responseTaxOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `Dwi2responseTournierParameters(...)`.
 *
 * @interface
 */
interface Dwi2responseTournierOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output response function text file
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input The input DWI
 * @param output The output response function text file
 * @param number_ Number of single-fibre voxels to use when calculating response function
 * @param iter_voxels Number of single-fibre voxels to select when preparing for the next iteration (default = 10 x value given in -number)
 * @param dilate Number of mask dilation steps to apply when deriving voxel mask to test in the next iteration
 * @param max_iters Maximum number of iterations
 *
 * @returns Parameter dictionary
 */
function dwi2response_tournier_params(
    input: InputPathType,
    output: string,
    number_: number | null = null,
    iter_voxels: number | null = null,
    dilate: number | null = null,
    max_iters: number | null = null,
): Dwi2responseTournierParameters {
    const params = {
        "@type": "mrtrix.dwi2response.tournier" as const,
        "input": input,
        "output": output,
    };
    if (number_ !== null) {
        params["number"] = number_;
    }
    if (iter_voxels !== null) {
        params["iter_voxels"] = iter_voxels;
    }
    if (dilate !== null) {
        params["dilate"] = dilate;
    }
    if (max_iters !== null) {
        params["max_iters"] = max_iters;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_tournier_cargs(
    params: Dwi2responseTournierParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tournier");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    if ((params["number"] ?? null) !== null) {
        cargs.push(
            "-number",
            String((params["number"] ?? null))
        );
    }
    if ((params["iter_voxels"] ?? null) !== null) {
        cargs.push(
            "-iter_voxels",
            String((params["iter_voxels"] ?? null))
        );
    }
    if ((params["dilate"] ?? null) !== null) {
        cargs.push(
            "-dilate",
            String((params["dilate"] ?? null))
        );
    }
    if ((params["max_iters"] ?? null) !== null) {
        cargs.push(
            "-max_iters",
            String((params["max_iters"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2response_tournier_outputs(
    params: Dwi2responseTournierParameters,
    execution: Execution,
): Dwi2responseTournierOutputs {
    const ret: Dwi2responseTournierOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function dwi2response_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): Dwi2responseFslgradParameters {
    const params = {
        "@type": "mrtrix.dwi2response.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_fslgrad_cargs(
    params: Dwi2responseFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function dwi2response_config_params(
    key: string,
    value: string,
): Dwi2responseConfigParameters {
    const params = {
        "@type": "mrtrix.dwi2response.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_config_cargs(
    params: Dwi2responseConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `dwi2response(...)`.
 *
 * @interface
 */
interface Dwi2responseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `Dwi2responseDhollanderParameters` or `Dwi2responseFaParameters` or `Dwi2responseManualParameters` or `Dwi2responseMsmt5ttParameters` or `Dwi2responseTaxParameters` or `Dwi2responseTournierParameters`.
     */
    algorithm: Dwi2responseDhollanderOutputs | Dwi2responseFaOutputs | Dwi2responseManualOutputs | Dwi2responseMsmt5ttOutputs | Dwi2responseTaxOutputs | Dwi2responseTournierOutputs;
}


/**
 * Build parameters.
 *
 * @param algorithm Select the algorithm to be used to complete the script operation; additional details and options become available once an algorithm is nominated. Options are: dhollander, fa, manual, msmt_5tt, tax, tournier.
 * @param grad Provide the diffusion gradient table in MRtrix format
 * @param fslgrad Provide the diffusion gradient table in FSL bvecs/bvals format
 * @param mask Only process voxels within the specified binary brain mask image.
 * @param voxels Output an image showing the final voxel selection(s)
 * @param shells b-value(s) to use in response function estimation (comma-separated list in case of multiple b-values, b=0 must be included explicitly)
 * @param lmax maximum harmonic degree(s) for response function estimation (comma-separated list in case of multiple b-values).
 * @param nocleanup do not delete intermediate files during script execution, and do not delete scratch directory at script completion.
 * @param scratch manually specify the path in which to generate the scratch directory.
 * @param continue_ continue the script from a previous execution; must provide the scratch directory path, and the name of the last successfully-generated file.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function dwi2response_params(
    algorithm: Dwi2responseDhollanderParameters | Dwi2responseFaParameters | Dwi2responseManualParameters | Dwi2responseMsmt5ttParameters | Dwi2responseTaxParameters | Dwi2responseTournierParameters,
    grad: InputPathType | null = null,
    fslgrad: Dwi2responseFslgradParameters | null = null,
    mask: InputPathType | null = null,
    voxels: string | null = null,
    shells: Array<number> | null = null,
    lmax: Array<number> | null = null,
    nocleanup: boolean = false,
    scratch: string | null = null,
    continue_: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2responseConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Dwi2responseParameters {
    const params = {
        "@type": "mrtrix.dwi2response" as const,
        "algorithm": algorithm,
        "nocleanup": nocleanup,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
    };
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (voxels !== null) {
        params["voxels"] = voxels;
    }
    if (shells !== null) {
        params["shells"] = shells;
    }
    if (lmax !== null) {
        params["lmax"] = lmax;
    }
    if (scratch !== null) {
        params["scratch"] = scratch;
    }
    if (continue_ !== null) {
        params["continue"] = continue_;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2response_cargs(
    params: Dwi2responseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dwi2response");
    cargs.push(...dynCargs((params["algorithm"] ?? null)["@type"])((params["algorithm"] ?? null), execution));
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["voxels"] ?? null) !== null) {
        cargs.push(
            "-voxels",
            (params["voxels"] ?? null)
        );
    }
    if ((params["shells"] ?? null) !== null) {
        cargs.push(
            "-shells",
            (params["shells"] ?? null).map(String).join(",")
        );
    }
    if ((params["lmax"] ?? null) !== null) {
        cargs.push(
            "-lmax",
            (params["lmax"] ?? null).map(String).join(",")
        );
    }
    if ((params["nocleanup"] ?? null)) {
        cargs.push("-nocleanup");
    }
    if ((params["scratch"] ?? null) !== null) {
        cargs.push(
            "-scratch",
            (params["scratch"] ?? null)
        );
    }
    if ((params["continue"] ?? null) !== null) {
        cargs.push(
            "-continue",
            (params["continue"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2response_outputs(
    params: Dwi2responseParameters,
    execution: Execution,
): Dwi2responseOutputs {
    const ret: Dwi2responseOutputs = {
        root: execution.outputFile("."),
        algorithm: dynOutputs((params["algorithm"] ?? null)["@type"])?.((params["algorithm"] ?? null), execution),
    };
    return ret;
}


/**
 * dwi2response
 *
 * Estimate response function(s) for spherical deconvolution.
 * dwi2response offers different algorithms for performing various types of response function estimation. The name of the algorithm must appear as the first argument on the command-line after â€˜dwi2responseâ€™. The subsequent arguments and options depend on the particular algorithm being invoked.
 * Each algorithm available has its own help page, including necessary references; e.g. to see the help page of the 'fa' algorithm, type 'dwi2response fa'.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dwi2responseOutputs`).
 */
function dwi2response_execute(
    params: Dwi2responseParameters,
    runner: Runner | null = null,
): Dwi2responseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DWI2RESPONSE_METADATA);
    params = execution.params(params)
    const cargs = dwi2response_cargs(params, execution)
    const ret = dwi2response_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dwi2response
 *
 * Estimate response function(s) for spherical deconvolution.
 * dwi2response offers different algorithms for performing various types of response function estimation. The name of the algorithm must appear as the first argument on the command-line after â€˜dwi2responseâ€™. The subsequent arguments and options depend on the particular algorithm being invoked.
 * Each algorithm available has its own help page, including necessary references; e.g. to see the help page of the 'fa' algorithm, type 'dwi2response fa'.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param algorithm Select the algorithm to be used to complete the script operation; additional details and options become available once an algorithm is nominated. Options are: dhollander, fa, manual, msmt_5tt, tax, tournier.
 * @param grad Provide the diffusion gradient table in MRtrix format
 * @param fslgrad Provide the diffusion gradient table in FSL bvecs/bvals format
 * @param mask Only process voxels within the specified binary brain mask image.
 * @param voxels Output an image showing the final voxel selection(s)
 * @param shells b-value(s) to use in response function estimation (comma-separated list in case of multiple b-values, b=0 must be included explicitly)
 * @param lmax maximum harmonic degree(s) for response function estimation (comma-separated list in case of multiple b-values).
 * @param nocleanup do not delete intermediate files during script execution, and do not delete scratch directory at script completion.
 * @param scratch manually specify the path in which to generate the scratch directory.
 * @param continue_ continue the script from a previous execution; must provide the scratch directory path, and the name of the last successfully-generated file.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dwi2responseOutputs`).
 */
function dwi2response(
    algorithm: Dwi2responseDhollanderParameters | Dwi2responseFaParameters | Dwi2responseManualParameters | Dwi2responseMsmt5ttParameters | Dwi2responseTaxParameters | Dwi2responseTournierParameters,
    grad: InputPathType | null = null,
    fslgrad: Dwi2responseFslgradParameters | null = null,
    mask: InputPathType | null = null,
    voxels: string | null = null,
    shells: Array<number> | null = null,
    lmax: Array<number> | null = null,
    nocleanup: boolean = false,
    scratch: string | null = null,
    continue_: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2responseConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Dwi2responseOutputs {
    const params = dwi2response_params(algorithm, grad, fslgrad, mask, voxels, shells, lmax, nocleanup, scratch, continue_, info, quiet, debug, force, nthreads, config, help, version)
    return dwi2response_execute(params, runner);
}


export {
      DWI2RESPONSE_METADATA,
      Dwi2responseConfigParameters,
      Dwi2responseDhollanderOutputs,
      Dwi2responseDhollanderParameters,
      Dwi2responseFaOutputs,
      Dwi2responseFaParameters,
      Dwi2responseFslgradParameters,
      Dwi2responseManualOutputs,
      Dwi2responseManualParameters,
      Dwi2responseMsmt5ttOutputs,
      Dwi2responseMsmt5ttParameters,
      Dwi2responseOutputs,
      Dwi2responseParameters,
      Dwi2responseTaxOutputs,
      Dwi2responseTaxParameters,
      Dwi2responseTournierOutputs,
      Dwi2responseTournierParameters,
      dwi2response,
      dwi2response_config_params,
      dwi2response_dhollander_params,
      dwi2response_execute,
      dwi2response_fa_params,
      dwi2response_fslgrad_params,
      dwi2response_manual_params,
      dwi2response_msmt_5tt_params,
      dwi2response_params,
      dwi2response_tax_params,
      dwi2response_tournier_params,
};
