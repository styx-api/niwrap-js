// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DCMDRLE_FS_METADATA: Metadata = {
    id: "f1d616215cb1ba8369eba24de9e2bdabd7a39054.boutiques",
    name: "dcmdrle.fs",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DcmdrleFsParameters {
    "@type": "freesurfer.dcmdrle.fs";
    "input_file": InputPathType;
    "output_file": string;
    "help": boolean;
    "version": boolean;
    "arguments": boolean;
    "quiet": boolean;
    "verbose": boolean;
    "debug": boolean;
    "log_level"?: string | null | undefined;
    "log_config"?: InputPathType | null | undefined;
    "read_file": boolean;
    "read_file_only": boolean;
    "read_dataset": boolean;
    "uid_default": boolean;
    "uid_always": boolean;
    "byte_order_default": boolean;
    "byte_order_reverse": boolean;
    "write_file": boolean;
    "write_dataset": boolean;
    "write_xfer_little": boolean;
    "write_xfer_big": boolean;
    "write_xfer_implicit": boolean;
    "enable_new_vr": boolean;
    "disable_new_vr": boolean;
    "group_length_recalc": boolean;
    "group_length_create": boolean;
    "group_length_remove": boolean;
    "length_explicit": boolean;
    "length_undefined": boolean;
    "padding_retain": boolean;
    "padding_off": boolean;
    "padding_create"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dcmdrle.fs": dcmdrle_fs_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.dcmdrle.fs": dcmdrle_fs_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dcmdrle_fs(...)`.
 *
 * @interface
 */
interface DcmdrleFsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output DICOM file.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file DICOM input filename to be converted.
 * @param output_file DICOM output filename.
 * @param help Print help text and exit.
 * @param version Print version information and exit.
 * @param arguments_ Print expanded command line arguments.
 * @param quiet Quiet mode, print no warnings and errors.
 * @param verbose Verbose mode, print processing details.
 * @param debug Debug mode, print debug information.
 * @param log_level Set logger level.
 * @param log_config Use config file for the logger.
 * @param read_file Read file format or data set (default).
 * @param read_file_only Read file format only.
 * @param read_dataset Read data set without file meta information.
 * @param uid_default Keep same SOP Instance UID (default).
 * @param uid_always Always assign new UID.
 * @param byte_order_default Most significant byte first (default).
 * @param byte_order_reverse Least significant byte first.
 * @param write_file Write file format (default).
 * @param write_dataset Write data set without file meta information.
 * @param write_xfer_little Write with explicit VR little endian (default).
 * @param write_xfer_big Write with explicit VR big endian TS.
 * @param write_xfer_implicit Write with implicit VR little endian TS.
 * @param enable_new_vr Enable support for new VRs (UN/UT) (default).
 * @param disable_new_vr Disable support for new VRs, convert to OB.
 * @param group_length_recalc Recalculate group lengths if present (default).
 * @param group_length_create Always write with group length elements.
 * @param group_length_remove Always write without group length elements.
 * @param length_explicit Write with explicit lengths (default).
 * @param length_undefined Write with undefined lengths.
 * @param padding_retain Do not change padding.
 * @param padding_off No padding (implicit if --write-dataset).
 * @param padding_create Align file on multiple of file-pad bytes and items on multiple of item-pad bytes.
 *
 * @returns Parameter dictionary
 */
function dcmdrle_fs_params(
    input_file: InputPathType,
    output_file: string,
    help: boolean = false,
    version: boolean = false,
    arguments_: boolean = false,
    quiet: boolean = false,
    verbose: boolean = false,
    debug: boolean = false,
    log_level: string | null = null,
    log_config: InputPathType | null = null,
    read_file: boolean = false,
    read_file_only: boolean = false,
    read_dataset: boolean = false,
    uid_default: boolean = false,
    uid_always: boolean = false,
    byte_order_default: boolean = false,
    byte_order_reverse: boolean = false,
    write_file: boolean = false,
    write_dataset: boolean = false,
    write_xfer_little: boolean = false,
    write_xfer_big: boolean = false,
    write_xfer_implicit: boolean = false,
    enable_new_vr: boolean = false,
    disable_new_vr: boolean = false,
    group_length_recalc: boolean = false,
    group_length_create: boolean = false,
    group_length_remove: boolean = false,
    length_explicit: boolean = false,
    length_undefined: boolean = false,
    padding_retain: boolean = false,
    padding_off: boolean = false,
    padding_create: string | null = null,
): DcmdrleFsParameters {
    const params = {
        "@type": "freesurfer.dcmdrle.fs" as const,
        "input_file": input_file,
        "output_file": output_file,
        "help": help,
        "version": version,
        "arguments": arguments_,
        "quiet": quiet,
        "verbose": verbose,
        "debug": debug,
        "read_file": read_file,
        "read_file_only": read_file_only,
        "read_dataset": read_dataset,
        "uid_default": uid_default,
        "uid_always": uid_always,
        "byte_order_default": byte_order_default,
        "byte_order_reverse": byte_order_reverse,
        "write_file": write_file,
        "write_dataset": write_dataset,
        "write_xfer_little": write_xfer_little,
        "write_xfer_big": write_xfer_big,
        "write_xfer_implicit": write_xfer_implicit,
        "enable_new_vr": enable_new_vr,
        "disable_new_vr": disable_new_vr,
        "group_length_recalc": group_length_recalc,
        "group_length_create": group_length_create,
        "group_length_remove": group_length_remove,
        "length_explicit": length_explicit,
        "length_undefined": length_undefined,
        "padding_retain": padding_retain,
        "padding_off": padding_off,
    };
    if (log_level !== null) {
        params["log_level"] = log_level;
    }
    if (log_config !== null) {
        params["log_config"] = log_config;
    }
    if (padding_create !== null) {
        params["padding_create"] = padding_create;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dcmdrle_fs_cargs(
    params: DcmdrleFsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dcmdrle.fs");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["arguments"] ?? null)) {
        cargs.push("--arguments");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-d");
    }
    if ((params["log_level"] ?? null) !== null) {
        cargs.push(
            "-ll",
            (params["log_level"] ?? null)
        );
    }
    if ((params["log_config"] ?? null) !== null) {
        cargs.push(
            "-lc",
            execution.inputFile((params["log_config"] ?? null))
        );
    }
    if ((params["read_file"] ?? null)) {
        cargs.push("+f");
    }
    if ((params["read_file_only"] ?? null)) {
        cargs.push("+fo");
    }
    if ((params["read_dataset"] ?? null)) {
        cargs.push("-f");
    }
    if ((params["uid_default"] ?? null)) {
        cargs.push("+ud");
    }
    if ((params["uid_always"] ?? null)) {
        cargs.push("+ua");
    }
    if ((params["byte_order_default"] ?? null)) {
        cargs.push("+bd");
    }
    if ((params["byte_order_reverse"] ?? null)) {
        cargs.push("+br");
    }
    if ((params["write_file"] ?? null)) {
        cargs.push("+F");
    }
    if ((params["write_dataset"] ?? null)) {
        cargs.push("-F");
    }
    if ((params["write_xfer_little"] ?? null)) {
        cargs.push("+te");
    }
    if ((params["write_xfer_big"] ?? null)) {
        cargs.push("+tb");
    }
    if ((params["write_xfer_implicit"] ?? null)) {
        cargs.push("+ti");
    }
    if ((params["enable_new_vr"] ?? null)) {
        cargs.push("+u");
    }
    if ((params["disable_new_vr"] ?? null)) {
        cargs.push("-u");
    }
    if ((params["group_length_recalc"] ?? null)) {
        cargs.push("+g=");
    }
    if ((params["group_length_create"] ?? null)) {
        cargs.push("+g");
    }
    if ((params["group_length_remove"] ?? null)) {
        cargs.push("-g");
    }
    if ((params["length_explicit"] ?? null)) {
        cargs.push("+e");
    }
    if ((params["length_undefined"] ?? null)) {
        cargs.push("-e");
    }
    if ((params["padding_retain"] ?? null)) {
        cargs.push("-p=");
    }
    if ((params["padding_off"] ?? null)) {
        cargs.push("-p");
    }
    if ((params["padding_create"] ?? null) !== null) {
        cargs.push(
            "+p",
            (params["padding_create"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dcmdrle_fs_outputs(
    params: DcmdrleFsParameters,
    execution: Execution,
): DcmdrleFsOutputs {
    const ret: DcmdrleFsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * dcmdrle.fs
 *
 * Decodes RLE-compressed DICOM files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DcmdrleFsOutputs`).
 */
function dcmdrle_fs_execute(
    params: DcmdrleFsParameters,
    runner: Runner | null = null,
): DcmdrleFsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DCMDRLE_FS_METADATA);
    params = execution.params(params)
    const cargs = dcmdrle_fs_cargs(params, execution)
    const ret = dcmdrle_fs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dcmdrle.fs
 *
 * Decodes RLE-compressed DICOM files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file DICOM input filename to be converted.
 * @param output_file DICOM output filename.
 * @param help Print help text and exit.
 * @param version Print version information and exit.
 * @param arguments_ Print expanded command line arguments.
 * @param quiet Quiet mode, print no warnings and errors.
 * @param verbose Verbose mode, print processing details.
 * @param debug Debug mode, print debug information.
 * @param log_level Set logger level.
 * @param log_config Use config file for the logger.
 * @param read_file Read file format or data set (default).
 * @param read_file_only Read file format only.
 * @param read_dataset Read data set without file meta information.
 * @param uid_default Keep same SOP Instance UID (default).
 * @param uid_always Always assign new UID.
 * @param byte_order_default Most significant byte first (default).
 * @param byte_order_reverse Least significant byte first.
 * @param write_file Write file format (default).
 * @param write_dataset Write data set without file meta information.
 * @param write_xfer_little Write with explicit VR little endian (default).
 * @param write_xfer_big Write with explicit VR big endian TS.
 * @param write_xfer_implicit Write with implicit VR little endian TS.
 * @param enable_new_vr Enable support for new VRs (UN/UT) (default).
 * @param disable_new_vr Disable support for new VRs, convert to OB.
 * @param group_length_recalc Recalculate group lengths if present (default).
 * @param group_length_create Always write with group length elements.
 * @param group_length_remove Always write without group length elements.
 * @param length_explicit Write with explicit lengths (default).
 * @param length_undefined Write with undefined lengths.
 * @param padding_retain Do not change padding.
 * @param padding_off No padding (implicit if --write-dataset).
 * @param padding_create Align file on multiple of file-pad bytes and items on multiple of item-pad bytes.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DcmdrleFsOutputs`).
 */
function dcmdrle_fs(
    input_file: InputPathType,
    output_file: string,
    help: boolean = false,
    version: boolean = false,
    arguments_: boolean = false,
    quiet: boolean = false,
    verbose: boolean = false,
    debug: boolean = false,
    log_level: string | null = null,
    log_config: InputPathType | null = null,
    read_file: boolean = false,
    read_file_only: boolean = false,
    read_dataset: boolean = false,
    uid_default: boolean = false,
    uid_always: boolean = false,
    byte_order_default: boolean = false,
    byte_order_reverse: boolean = false,
    write_file: boolean = false,
    write_dataset: boolean = false,
    write_xfer_little: boolean = false,
    write_xfer_big: boolean = false,
    write_xfer_implicit: boolean = false,
    enable_new_vr: boolean = false,
    disable_new_vr: boolean = false,
    group_length_recalc: boolean = false,
    group_length_create: boolean = false,
    group_length_remove: boolean = false,
    length_explicit: boolean = false,
    length_undefined: boolean = false,
    padding_retain: boolean = false,
    padding_off: boolean = false,
    padding_create: string | null = null,
    runner: Runner | null = null,
): DcmdrleFsOutputs {
    const params = dcmdrle_fs_params(input_file, output_file, help, version, arguments_, quiet, verbose, debug, log_level, log_config, read_file, read_file_only, read_dataset, uid_default, uid_always, byte_order_default, byte_order_reverse, write_file, write_dataset, write_xfer_little, write_xfer_big, write_xfer_implicit, enable_new_vr, disable_new_vr, group_length_recalc, group_length_create, group_length_remove, length_explicit, length_undefined, padding_retain, padding_off, padding_create)
    return dcmdrle_fs_execute(params, runner);
}


export {
      DCMDRLE_FS_METADATA,
      DcmdrleFsOutputs,
      DcmdrleFsParameters,
      dcmdrle_fs,
      dcmdrle_fs_execute,
      dcmdrle_fs_params,
};
