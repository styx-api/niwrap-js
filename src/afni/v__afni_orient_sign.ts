// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__AFNI_ORIENT_SIGN_METADATA: Metadata = {
    id: "17bacac61b3bbe671dbec1441539bb30e688fabb.boutiques",
    name: "@AfniOrientSign",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAfniOrientSignParameters {
    "@type"?: "afni/@AfniOrientSign";
    "infile": InputPathType;
}
type VAfniOrientSignParametersTagged = Required<Pick<VAfniOrientSignParameters, '@type'>> & VAfniOrientSignParameters;


/**
 * Output object returned when calling `VAfniOrientSignParameters(...)`.
 *
 * @interface
 */
interface VAfniOrientSignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the orientation signs of the dataset
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input image file to determine orientation
 *
 * @returns Parameter dictionary
 */
function v__afni_orient_sign_params(
    infile: InputPathType,
): VAfniOrientSignParametersTagged {
    const params = {
        "@type": "afni/@AfniOrientSign" as const,
        "infile": infile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__afni_orient_sign_cargs(
    params: VAfniOrientSignParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@AfniOrientSign");
    cargs.push(
        "-orient",
        execution.inputFile((params["infile"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__afni_orient_sign_outputs(
    params: VAfniOrientSignParameters,
    execution: Execution,
): VAfniOrientSignOutputs {
    const ret: VAfniOrientSignOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([path.basename((params["infile"] ?? null)), "_orient.txt"].join('')),
    };
    return ret;
}


/**
 * @AfniOrientSign
 *
 * A tool within the AFNI suite to determine the orientation signs of datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAfniOrientSignOutputs`).
 */
function v__afni_orient_sign_execute(
    params: VAfniOrientSignParameters,
    runner: Runner | null = null,
): VAfniOrientSignOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__AFNI_ORIENT_SIGN_METADATA);
    params = execution.params(params)
    const cargs = v__afni_orient_sign_cargs(params, execution)
    const ret = v__afni_orient_sign_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @AfniOrientSign
 *
 * A tool within the AFNI suite to determine the orientation signs of datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input image file to determine orientation
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAfniOrientSignOutputs`).
 */
function v__afni_orient_sign(
    infile: InputPathType,
    runner: Runner | null = null,
): VAfniOrientSignOutputs {
    const params = v__afni_orient_sign_params(infile)
    return v__afni_orient_sign_execute(params, runner);
}


export {
      VAfniOrientSignOutputs,
      V__AFNI_ORIENT_SIGN_METADATA,
      v__afni_orient_sign,
      v__afni_orient_sign_execute,
      v__afni_orient_sign_params,
};
