// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ADJUNCT_APQC_TSNR_GENERAL_METADATA: Metadata = {
    id: "d0e88b706d5959e353f1480626f5f268697b57dd.boutiques",
    name: "adjunct_apqc_tsnr_general",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AdjunctApqcTsnrGeneralParameters {
    "@type": "afni.adjunct_apqc_tsnr_general";
    "montgap"?: string | null | undefined;
    "montcolor"?: string | null | undefined;
    "montx"?: string | null | undefined;
    "monty"?: string | null | undefined;
    "opacity"?: string | null | undefined;
    "blowup"?: string | null | undefined;
    "save_ftype"?: string | null | undefined;
    "set_dicom_xyz"?: Array<string> | null | undefined;
    "set_ijk"?: Array<string> | null | undefined;
    "set_subbricks"?: Array<string> | null | undefined;
    "olay_alpha"?: string | null | undefined;
    "olay_boxed"?: string | null | undefined;
    "thr_olay"?: string | null | undefined;
    "ulay_range_nz"?: Array<string> | null | undefined;
    "ulay_range"?: Array<string> | null | undefined;
    "delta_slices"?: Array<string> | null | undefined;
    "olay_disc_hot_range"?: Array<string> | null | undefined;
    "olay_cont_max"?: string | null | undefined;
    "cbar_cont"?: string | null | undefined;
    "no_cor": boolean;
    "no_sag": boolean;
    "no_axi": boolean;
    "echo": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.adjunct_apqc_tsnr_general": adjunct_apqc_tsnr_general_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `adjunct_apqc_tsnr_general(...)`.
 *
 * @interface
 */
interface AdjunctApqcTsnrGeneralOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param montgap Specify montage gap.
 * @param montcolor Specify montage color.
 * @param montx Specify montage x coordinate.
 * @param monty Specify montage y coordinate.
 * @param opacity Specify overlay opacity.
 * @param blowup Specify blowup factor.
 * @param save_ftype Specify save file type.
 * @param set_dicom_xyz Set DICOM x, y, z coordinates.
 * @param set_ijk Set IJK coordinates.
 * @param set_subbricks Set sub-bricks.
 * @param olay_alpha Specify overlay alpha.
 * @param olay_boxed Specify boxed overlay.
 * @param thr_olay Specify threshold for overlay.
 * @param ulay_range_nz Specify non-zero range for underlay.
 * @param ulay_range Specify range for underlay.
 * @param delta_slices Specify delta slices.
 * @param olay_disc_hot_range Specify discrete hot range for overlay.
 * @param olay_cont_max Specify continuous max for overlay.
 * @param cbar_cont Specify continuous color bar.
 * @param no_cor No coronal view.
 * @param no_sag No sagittal view.
 * @param no_axi No axial view.
 * @param echo Echo the command line arguments.
 *
 * @returns Parameter dictionary
 */
function adjunct_apqc_tsnr_general_params(
    montgap: string | null = null,
    montcolor: string | null = null,
    montx: string | null = null,
    monty: string | null = null,
    opacity: string | null = null,
    blowup: string | null = null,
    save_ftype: string | null = null,
    set_dicom_xyz: Array<string> | null = null,
    set_ijk: Array<string> | null = null,
    set_subbricks: Array<string> | null = null,
    olay_alpha: string | null = null,
    olay_boxed: string | null = null,
    thr_olay: string | null = null,
    ulay_range_nz: Array<string> | null = null,
    ulay_range: Array<string> | null = null,
    delta_slices: Array<string> | null = null,
    olay_disc_hot_range: Array<string> | null = null,
    olay_cont_max: string | null = null,
    cbar_cont: string | null = null,
    no_cor: boolean = false,
    no_sag: boolean = false,
    no_axi: boolean = false,
    echo: boolean = false,
): AdjunctApqcTsnrGeneralParameters {
    const params = {
        "@type": "afni.adjunct_apqc_tsnr_general" as const,
        "no_cor": no_cor,
        "no_sag": no_sag,
        "no_axi": no_axi,
        "echo": echo,
    };
    if (montgap !== null) {
        params["montgap"] = montgap;
    }
    if (montcolor !== null) {
        params["montcolor"] = montcolor;
    }
    if (montx !== null) {
        params["montx"] = montx;
    }
    if (monty !== null) {
        params["monty"] = monty;
    }
    if (opacity !== null) {
        params["opacity"] = opacity;
    }
    if (blowup !== null) {
        params["blowup"] = blowup;
    }
    if (save_ftype !== null) {
        params["save_ftype"] = save_ftype;
    }
    if (set_dicom_xyz !== null) {
        params["set_dicom_xyz"] = set_dicom_xyz;
    }
    if (set_ijk !== null) {
        params["set_ijk"] = set_ijk;
    }
    if (set_subbricks !== null) {
        params["set_subbricks"] = set_subbricks;
    }
    if (olay_alpha !== null) {
        params["olay_alpha"] = olay_alpha;
    }
    if (olay_boxed !== null) {
        params["olay_boxed"] = olay_boxed;
    }
    if (thr_olay !== null) {
        params["thr_olay"] = thr_olay;
    }
    if (ulay_range_nz !== null) {
        params["ulay_range_nz"] = ulay_range_nz;
    }
    if (ulay_range !== null) {
        params["ulay_range"] = ulay_range;
    }
    if (delta_slices !== null) {
        params["delta_slices"] = delta_slices;
    }
    if (olay_disc_hot_range !== null) {
        params["olay_disc_hot_range"] = olay_disc_hot_range;
    }
    if (olay_cont_max !== null) {
        params["olay_cont_max"] = olay_cont_max;
    }
    if (cbar_cont !== null) {
        params["cbar_cont"] = cbar_cont;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function adjunct_apqc_tsnr_general_cargs(
    params: AdjunctApqcTsnrGeneralParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("adjunct_apqc_tsnr_general");
    if ((params["montgap"] ?? null) !== null) {
        cargs.push(
            "-montgap",
            (params["montgap"] ?? null)
        );
    }
    if ((params["montcolor"] ?? null) !== null) {
        cargs.push(
            "-montcolor",
            (params["montcolor"] ?? null)
        );
    }
    if ((params["montx"] ?? null) !== null) {
        cargs.push(
            "-montx",
            (params["montx"] ?? null)
        );
    }
    if ((params["monty"] ?? null) !== null) {
        cargs.push(
            "-monty",
            (params["monty"] ?? null)
        );
    }
    if ((params["opacity"] ?? null) !== null) {
        cargs.push(
            "-opacity",
            (params["opacity"] ?? null)
        );
    }
    if ((params["blowup"] ?? null) !== null) {
        cargs.push(
            "-blowup",
            (params["blowup"] ?? null)
        );
    }
    if ((params["save_ftype"] ?? null) !== null) {
        cargs.push(
            "-save_ftype",
            (params["save_ftype"] ?? null)
        );
    }
    if ((params["set_dicom_xyz"] ?? null) !== null) {
        cargs.push(
            "-set_dicom_xyz",
            ...(params["set_dicom_xyz"] ?? null)
        );
    }
    if ((params["set_ijk"] ?? null) !== null) {
        cargs.push(
            "-set_ijk",
            ...(params["set_ijk"] ?? null)
        );
    }
    if ((params["set_subbricks"] ?? null) !== null) {
        cargs.push(
            "-set_subbricks",
            ...(params["set_subbricks"] ?? null)
        );
    }
    if ((params["olay_alpha"] ?? null) !== null) {
        cargs.push(
            "-olay_alpha",
            (params["olay_alpha"] ?? null)
        );
    }
    if ((params["olay_boxed"] ?? null) !== null) {
        cargs.push(
            "-olay_boxed",
            (params["olay_boxed"] ?? null)
        );
    }
    if ((params["thr_olay"] ?? null) !== null) {
        cargs.push(
            "-thr_olay",
            (params["thr_olay"] ?? null)
        );
    }
    if ((params["ulay_range_nz"] ?? null) !== null) {
        cargs.push(
            "-ulay_range_nz",
            ...(params["ulay_range_nz"] ?? null)
        );
    }
    if ((params["ulay_range"] ?? null) !== null) {
        cargs.push(
            "-ulay_range",
            ...(params["ulay_range"] ?? null)
        );
    }
    if ((params["delta_slices"] ?? null) !== null) {
        cargs.push(
            "-delta_slices",
            ...(params["delta_slices"] ?? null)
        );
    }
    if ((params["olay_disc_hot_range"] ?? null) !== null) {
        cargs.push(
            "-olay_disc_hot_range",
            ...(params["olay_disc_hot_range"] ?? null)
        );
    }
    if ((params["olay_cont_max"] ?? null) !== null) {
        cargs.push(
            "-olay_cont_max",
            (params["olay_cont_max"] ?? null)
        );
    }
    if ((params["cbar_cont"] ?? null) !== null) {
        cargs.push(
            "-cbar_cont",
            (params["cbar_cont"] ?? null)
        );
    }
    if ((params["no_cor"] ?? null)) {
        cargs.push("-no_cor");
    }
    if ((params["no_sag"] ?? null)) {
        cargs.push("-no_sag");
    }
    if ((params["no_axi"] ?? null)) {
        cargs.push("-no_axi");
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function adjunct_apqc_tsnr_general_outputs(
    params: AdjunctApqcTsnrGeneralParameters,
    execution: Execution,
): AdjunctApqcTsnrGeneralOutputs {
    const ret: AdjunctApqcTsnrGeneralOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * adjunct_apqc_tsnr_general
 *
 * An adjunct program for making TSNR plots for APQC.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctApqcTsnrGeneralOutputs`).
 */
function adjunct_apqc_tsnr_general_execute(
    params: AdjunctApqcTsnrGeneralParameters,
    runner: Runner | null = null,
): AdjunctApqcTsnrGeneralOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ADJUNCT_APQC_TSNR_GENERAL_METADATA);
    params = execution.params(params)
    const cargs = adjunct_apqc_tsnr_general_cargs(params, execution)
    const ret = adjunct_apqc_tsnr_general_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * adjunct_apqc_tsnr_general
 *
 * An adjunct program for making TSNR plots for APQC.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param montgap Specify montage gap.
 * @param montcolor Specify montage color.
 * @param montx Specify montage x coordinate.
 * @param monty Specify montage y coordinate.
 * @param opacity Specify overlay opacity.
 * @param blowup Specify blowup factor.
 * @param save_ftype Specify save file type.
 * @param set_dicom_xyz Set DICOM x, y, z coordinates.
 * @param set_ijk Set IJK coordinates.
 * @param set_subbricks Set sub-bricks.
 * @param olay_alpha Specify overlay alpha.
 * @param olay_boxed Specify boxed overlay.
 * @param thr_olay Specify threshold for overlay.
 * @param ulay_range_nz Specify non-zero range for underlay.
 * @param ulay_range Specify range for underlay.
 * @param delta_slices Specify delta slices.
 * @param olay_disc_hot_range Specify discrete hot range for overlay.
 * @param olay_cont_max Specify continuous max for overlay.
 * @param cbar_cont Specify continuous color bar.
 * @param no_cor No coronal view.
 * @param no_sag No sagittal view.
 * @param no_axi No axial view.
 * @param echo Echo the command line arguments.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AdjunctApqcTsnrGeneralOutputs`).
 */
function adjunct_apqc_tsnr_general(
    montgap: string | null = null,
    montcolor: string | null = null,
    montx: string | null = null,
    monty: string | null = null,
    opacity: string | null = null,
    blowup: string | null = null,
    save_ftype: string | null = null,
    set_dicom_xyz: Array<string> | null = null,
    set_ijk: Array<string> | null = null,
    set_subbricks: Array<string> | null = null,
    olay_alpha: string | null = null,
    olay_boxed: string | null = null,
    thr_olay: string | null = null,
    ulay_range_nz: Array<string> | null = null,
    ulay_range: Array<string> | null = null,
    delta_slices: Array<string> | null = null,
    olay_disc_hot_range: Array<string> | null = null,
    olay_cont_max: string | null = null,
    cbar_cont: string | null = null,
    no_cor: boolean = false,
    no_sag: boolean = false,
    no_axi: boolean = false,
    echo: boolean = false,
    runner: Runner | null = null,
): AdjunctApqcTsnrGeneralOutputs {
    const params = adjunct_apqc_tsnr_general_params(montgap, montcolor, montx, monty, opacity, blowup, save_ftype, set_dicom_xyz, set_ijk, set_subbricks, olay_alpha, olay_boxed, thr_olay, ulay_range_nz, ulay_range, delta_slices, olay_disc_hot_range, olay_cont_max, cbar_cont, no_cor, no_sag, no_axi, echo)
    return adjunct_apqc_tsnr_general_execute(params, runner);
}


export {
      ADJUNCT_APQC_TSNR_GENERAL_METADATA,
      AdjunctApqcTsnrGeneralOutputs,
      AdjunctApqcTsnrGeneralParameters,
      adjunct_apqc_tsnr_general,
      adjunct_apqc_tsnr_general_execute,
      adjunct_apqc_tsnr_general_params,
};
