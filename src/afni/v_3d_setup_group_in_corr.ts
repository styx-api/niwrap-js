// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SETUP_GROUP_IN_CORR_METADATA: Metadata = {
    id: "1683850374da35dcf958ddc69409cefbc1f13897.boutiques",
    name: "3dSetupGroupInCorr",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSetupGroupInCorrParameters {
    "@type"?: "afni/3dSetupGroupInCorr";
    "datasets": Array<InputPathType>;
    "mask_dataset"?: InputPathType | null | undefined;
    "prefix": string;
    "short_flag": boolean;
    "byte_flag": boolean;
    "labels_file"?: InputPathType | null | undefined;
    "delete_flag": boolean;
    "prep_method"?: string | null | undefined;
    "lr_pairs"?: Array<string> | null | undefined;
}
type V3dSetupGroupInCorrParametersTagged = Required<Pick<V3dSetupGroupInCorrParameters, '@type'>> & V3dSetupGroupInCorrParameters;


/**
 * Output object returned when calling `V3dSetupGroupInCorrParameters(...)`.
 *
 * @interface
 */
interface V3dSetupGroupInCorrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file containing the header information describing the data file.
     */
    niml_file: OutputPathType;
    /**
     * Data file containing all the time series from all the datasets.
     */
    data_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param datasets AFNI 3D+time datasets to be processed.
 * @param prefix Prefix for output dataset names.
 * @param mask_dataset Mask dataset for voxel selection.
 * @param short_flag Store data as 16-bit shorts.
 * @param byte_flag Store data as 8-bit bytes.
 * @param labels_file File containing a list of labels for each dataset.
 * @param delete_flag Delete input datasets from disk after processing.
 * @param prep_method Preprocess each data time series with the specified method.
 * @param lr_pairs Set the domains for left and right hemisphere surfaces and indicate that the datasets are arranged in (Left, Right) pairs.
 *
 * @returns Parameter dictionary
 */
function v_3d_setup_group_in_corr_params(
    datasets: Array<InputPathType>,
    prefix: string,
    mask_dataset: InputPathType | null = null,
    short_flag: boolean = false,
    byte_flag: boolean = false,
    labels_file: InputPathType | null = null,
    delete_flag: boolean = false,
    prep_method: string | null = null,
    lr_pairs: Array<string> | null = null,
): V3dSetupGroupInCorrParametersTagged {
    const params = {
        "@type": "afni/3dSetupGroupInCorr" as const,
        "datasets": datasets,
        "prefix": prefix,
        "short_flag": short_flag,
        "byte_flag": byte_flag,
        "delete_flag": delete_flag,
    };
    if (mask_dataset !== null) {
        params["mask_dataset"] = mask_dataset;
    }
    if (labels_file !== null) {
        params["labels_file"] = labels_file;
    }
    if (prep_method !== null) {
        params["prep_method"] = prep_method;
    }
    if (lr_pairs !== null) {
        params["lr_pairs"] = lr_pairs;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_setup_group_in_corr_cargs(
    params: V3dSetupGroupInCorrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dSetupGroupInCorr");
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    if ((params["mask_dataset"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask_dataset"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["short_flag"] ?? false)) {
        cargs.push("-short");
    }
    if ((params["byte_flag"] ?? false)) {
        cargs.push("-byte");
    }
    if ((params["labels_file"] ?? null) !== null) {
        cargs.push(
            "-labels",
            execution.inputFile((params["labels_file"] ?? null))
        );
    }
    if ((params["delete_flag"] ?? false)) {
        cargs.push("-DELETE");
    }
    if ((params["prep_method"] ?? null) !== null) {
        cargs.push(
            "-prep",
            (params["prep_method"] ?? null)
        );
    }
    if ((params["lr_pairs"] ?? null) !== null) {
        cargs.push(
            "-LRpairs",
            ...(params["lr_pairs"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_setup_group_in_corr_outputs(
    params: V3dSetupGroupInCorrParameters,
    execution: Execution,
): V3dSetupGroupInCorrOutputs {
    const ret: V3dSetupGroupInCorrOutputs = {
        root: execution.outputFile("."),
        niml_file: execution.outputFile([(params["prefix"] ?? null), ".grpincorr.niml"].join('')),
        data_file: execution.outputFile([(params["prefix"] ?? null), ".grpincorr.data"].join('')),
    };
    return ret;
}


/**
 * 3dSetupGroupInCorr
 *
 * Pre-process a collection of AFNI 3D+time datasets for use with Group InstaCorr.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSetupGroupInCorrOutputs`).
 */
function v_3d_setup_group_in_corr_execute(
    params: V3dSetupGroupInCorrParameters,
    runner: Runner | null = null,
): V3dSetupGroupInCorrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SETUP_GROUP_IN_CORR_METADATA);
    params = execution.params(params)
    const cargs = v_3d_setup_group_in_corr_cargs(params, execution)
    const ret = v_3d_setup_group_in_corr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dSetupGroupInCorr
 *
 * Pre-process a collection of AFNI 3D+time datasets for use with Group InstaCorr.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param datasets AFNI 3D+time datasets to be processed.
 * @param prefix Prefix for output dataset names.
 * @param mask_dataset Mask dataset for voxel selection.
 * @param short_flag Store data as 16-bit shorts.
 * @param byte_flag Store data as 8-bit bytes.
 * @param labels_file File containing a list of labels for each dataset.
 * @param delete_flag Delete input datasets from disk after processing.
 * @param prep_method Preprocess each data time series with the specified method.
 * @param lr_pairs Set the domains for left and right hemisphere surfaces and indicate that the datasets are arranged in (Left, Right) pairs.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSetupGroupInCorrOutputs`).
 */
function v_3d_setup_group_in_corr(
    datasets: Array<InputPathType>,
    prefix: string,
    mask_dataset: InputPathType | null = null,
    short_flag: boolean = false,
    byte_flag: boolean = false,
    labels_file: InputPathType | null = null,
    delete_flag: boolean = false,
    prep_method: string | null = null,
    lr_pairs: Array<string> | null = null,
    runner: Runner | null = null,
): V3dSetupGroupInCorrOutputs {
    const params = v_3d_setup_group_in_corr_params(datasets, prefix, mask_dataset, short_flag, byte_flag, labels_file, delete_flag, prep_method, lr_pairs)
    return v_3d_setup_group_in_corr_execute(params, runner);
}


export {
      V3dSetupGroupInCorrOutputs,
      V_3D_SETUP_GROUP_IN_CORR_METADATA,
      v_3d_setup_group_in_corr,
      v_3d_setup_group_in_corr_execute,
      v_3d_setup_group_in_corr_params,
};
