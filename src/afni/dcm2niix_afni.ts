// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DCM2NIIX_AFNI_METADATA: Metadata = {
    id: "7cf66629029a0771961d7c7125e4684dcd412a4d.boutiques",
    name: "dcm2niix_afni",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface Dcm2niixAfniParameters {
    "@type": "afni.dcm2niix_afni";
    "input_folder": string;
    "compression_level"?: number | null | undefined;
    "adjacent_dicoms"?: string | null | undefined;
    "bids_sidecar"?: string | null | undefined;
    "anonymize_bids"?: string | null | undefined;
    "comment"?: string | null | undefined;
    "directory_search_depth"?: number | null | undefined;
    "export_format"?: string | null | undefined;
    "filename_template"?: string | null | undefined;
    "generate_defaults"?: string | null | undefined;
    "ignore_images"?: string | null | undefined;
    "lossless_scale"?: string | null | undefined;
    "merge_slices"?: string | null | undefined;
    "series_crc_number"?: Array<string> | null | undefined;
    "output_directory"?: string | null | undefined;
    "phillips_scaling"?: string | null | undefined;
    "rename_dicoms"?: string | null | undefined;
    "single_file_mode"?: string | null | undefined;
    "up_to_date": boolean;
    "verbose"?: string | null | undefined;
    "write_behavior"?: number | null | undefined;
    "crop_3d"?: string | null | undefined;
    "gz_compress"?: string | null | undefined;
    "big_endian"?: string | null | undefined;
    "progress"?: string | null | undefined;
    "ignore_trigger_times": boolean;
    "terse": boolean;
    "version": boolean;
    "xml": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.dcm2niix_afni": dcm2niix_afni_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.dcm2niix_afni": dcm2niix_afni_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dcm2niix_afni(...)`.
 *
 * @interface
 */
interface Dcm2niixAfniOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The main output NIfTI files
     */
    nifti_files: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_folder Folder containing DICOM files
 * @param compression_level GZ compression level (1=fastest..9=smallest, default 6)
 * @param adjacent_dicoms Adjacent DICOMs (images from same series always in same folder) for faster conversion (n/y, default n)
 * @param bids_sidecar BIDS sidecar (y/n/o [o=only: no NIfTI], default y)
 * @param anonymize_bids Anonymize BIDS (y/n, default y)
 * @param comment Comment stored in NIfTI aux_file (provide up to 24 characters e.g. '-c first_visit')
 * @param directory_search_depth Directory search depth. Convert DICOMs in sub-folders of in_folder? (0..9, default 5)
 * @param export_format Export as NRRD (y) or MGH (o) instead of NIfTI (y/n/o, default n)
 * @param filename_template Filename template for output (default '%f_%p_%t_%s')
 * @param generate_defaults Generate defaults file (y/n/o/i [o=only: reset and write defaults; i=ignore: reset defaults], default n)
 * @param ignore_images Ignore derived, localizer and 2D images (y/n, default n)
 * @param lossless_scale Losslessly scale 16-bit integers to use dynamic range (y/n/o, default o)
 * @param merge_slices Merge 2D slices from same series regardless of echo, exposure, etc. (n/y or 0/1/2, default 2)
 * @param series_crc_number Only convert this series CRC number - can be used up to 16 times (default convert all)
 * @param output_directory Output directory (omit to save to input folder)
 * @param phillips_scaling Philips precise float (not display) scaling (y/n, default y)
 * @param rename_dicoms Rename instead of convert DICOMs (y/n, default n)
 * @param single_file_mode Single file mode, do not convert other images in folder (y/n, default n)
 * @param up_to_date Up-to-date check
 * @param verbose Verbose (n/y or 0/1/2, default 0)
 * @param write_behavior Write behavior for name conflicts (0=skip duplicates, 1=overwrite, 2=add suffix)
 * @param crop_3d Crop 3D acquisitions (y/n/i, default n, use 'i'gnore to neither crop nor rotate 3D acquisitions)
 * @param gz_compress GZ compress images (y/o/i/n/3, default n) [y=pigz, o=optimal pigz, i=internal:miniz, n=no, 3=no,3D]
 * @param big_endian Byte order (y/n/o, default o) [y=big-endian, n=little-endian, o=optimal/native]
 * @param progress Slicer format progress information (y/n, default n)
 * @param ignore_trigger_times Disregard values in 0018, 1060 and 0020, 9153
 * @param terse Omit filename post-fixes (can cause overwrites)
 * @param version Report version
 * @param xml Slicer format features
 *
 * @returns Parameter dictionary
 */
function dcm2niix_afni_params(
    input_folder: string,
    compression_level: number | null = null,
    adjacent_dicoms: string | null = null,
    bids_sidecar: string | null = null,
    anonymize_bids: string | null = null,
    comment: string | null = null,
    directory_search_depth: number | null = null,
    export_format: string | null = null,
    filename_template: string | null = null,
    generate_defaults: string | null = null,
    ignore_images: string | null = null,
    lossless_scale: string | null = null,
    merge_slices: string | null = null,
    series_crc_number: Array<string> | null = null,
    output_directory: string | null = null,
    phillips_scaling: string | null = null,
    rename_dicoms: string | null = null,
    single_file_mode: string | null = null,
    up_to_date: boolean = false,
    verbose: string | null = null,
    write_behavior: number | null = null,
    crop_3d: string | null = null,
    gz_compress: string | null = null,
    big_endian: string | null = null,
    progress: string | null = null,
    ignore_trigger_times: boolean = false,
    terse: boolean = false,
    version: boolean = false,
    xml: boolean = false,
): Dcm2niixAfniParameters {
    const params = {
        "@type": "afni.dcm2niix_afni" as const,
        "input_folder": input_folder,
        "up_to_date": up_to_date,
        "ignore_trigger_times": ignore_trigger_times,
        "terse": terse,
        "version": version,
        "xml": xml,
    };
    if (compression_level !== null) {
        params["compression_level"] = compression_level;
    }
    if (adjacent_dicoms !== null) {
        params["adjacent_dicoms"] = adjacent_dicoms;
    }
    if (bids_sidecar !== null) {
        params["bids_sidecar"] = bids_sidecar;
    }
    if (anonymize_bids !== null) {
        params["anonymize_bids"] = anonymize_bids;
    }
    if (comment !== null) {
        params["comment"] = comment;
    }
    if (directory_search_depth !== null) {
        params["directory_search_depth"] = directory_search_depth;
    }
    if (export_format !== null) {
        params["export_format"] = export_format;
    }
    if (filename_template !== null) {
        params["filename_template"] = filename_template;
    }
    if (generate_defaults !== null) {
        params["generate_defaults"] = generate_defaults;
    }
    if (ignore_images !== null) {
        params["ignore_images"] = ignore_images;
    }
    if (lossless_scale !== null) {
        params["lossless_scale"] = lossless_scale;
    }
    if (merge_slices !== null) {
        params["merge_slices"] = merge_slices;
    }
    if (series_crc_number !== null) {
        params["series_crc_number"] = series_crc_number;
    }
    if (output_directory !== null) {
        params["output_directory"] = output_directory;
    }
    if (phillips_scaling !== null) {
        params["phillips_scaling"] = phillips_scaling;
    }
    if (rename_dicoms !== null) {
        params["rename_dicoms"] = rename_dicoms;
    }
    if (single_file_mode !== null) {
        params["single_file_mode"] = single_file_mode;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    if (write_behavior !== null) {
        params["write_behavior"] = write_behavior;
    }
    if (crop_3d !== null) {
        params["crop_3d"] = crop_3d;
    }
    if (gz_compress !== null) {
        params["gz_compress"] = gz_compress;
    }
    if (big_endian !== null) {
        params["big_endian"] = big_endian;
    }
    if (progress !== null) {
        params["progress"] = progress;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dcm2niix_afni_cargs(
    params: Dcm2niixAfniParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dcm2niix_afni");
    cargs.push((params["input_folder"] ?? null));
    if ((params["compression_level"] ?? null) !== null) {
        cargs.push(
            "-1..-9",
            String((params["compression_level"] ?? null))
        );
    }
    if ((params["adjacent_dicoms"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["adjacent_dicoms"] ?? null)
        );
    }
    if ((params["bids_sidecar"] ?? null) !== null) {
        cargs.push(
            "-b",
            (params["bids_sidecar"] ?? null)
        );
    }
    if ((params["anonymize_bids"] ?? null) !== null) {
        cargs.push(
            "-ba",
            (params["anonymize_bids"] ?? null)
        );
    }
    if ((params["comment"] ?? null) !== null) {
        cargs.push(
            "-c",
            (params["comment"] ?? null)
        );
    }
    if ((params["directory_search_depth"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["directory_search_depth"] ?? null))
        );
    }
    if ((params["export_format"] ?? null) !== null) {
        cargs.push(
            "-e",
            (params["export_format"] ?? null)
        );
    }
    if ((params["filename_template"] ?? null) !== null) {
        cargs.push(
            "-f",
            (params["filename_template"] ?? null)
        );
    }
    if ((params["generate_defaults"] ?? null) !== null) {
        cargs.push(
            "-g",
            (params["generate_defaults"] ?? null)
        );
    }
    if ((params["ignore_images"] ?? null) !== null) {
        cargs.push(
            "-i",
            (params["ignore_images"] ?? null)
        );
    }
    if ((params["lossless_scale"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["lossless_scale"] ?? null)
        );
    }
    if ((params["merge_slices"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["merge_slices"] ?? null)
        );
    }
    if ((params["series_crc_number"] ?? null) !== null) {
        cargs.push(
            "-n",
            ...(params["series_crc_number"] ?? null)
        );
    }
    if ((params["output_directory"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_directory"] ?? null)
        );
    }
    if ((params["phillips_scaling"] ?? null) !== null) {
        cargs.push(
            "-p",
            (params["phillips_scaling"] ?? null)
        );
    }
    if ((params["rename_dicoms"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["rename_dicoms"] ?? null)
        );
    }
    if ((params["single_file_mode"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["single_file_mode"] ?? null)
        );
    }
    if ((params["up_to_date"] ?? null)) {
        cargs.push("-u");
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-v",
            (params["verbose"] ?? null)
        );
    }
    if ((params["write_behavior"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["write_behavior"] ?? null))
        );
    }
    if ((params["crop_3d"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["crop_3d"] ?? null)
        );
    }
    if ((params["gz_compress"] ?? null) !== null) {
        cargs.push(
            "-z",
            (params["gz_compress"] ?? null)
        );
    }
    if ((params["big_endian"] ?? null) !== null) {
        cargs.push(
            "--big-endian",
            (params["big_endian"] ?? null)
        );
    }
    if ((params["progress"] ?? null) !== null) {
        cargs.push(
            "--progress",
            (params["progress"] ?? null)
        );
    }
    if ((params["ignore_trigger_times"] ?? null)) {
        cargs.push("--ignore_trigger_times");
    }
    if ((params["terse"] ?? null)) {
        cargs.push("--terse");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["xml"] ?? null)) {
        cargs.push("--xml");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dcm2niix_afni_outputs(
    params: Dcm2niixAfniParameters,
    execution: Execution,
): Dcm2niixAfniOutputs {
    const ret: Dcm2niixAfniOutputs = {
        root: execution.outputFile("."),
        nifti_files: execution.outputFile(["<OUTPUT_DIRECTORY>/*.nii"].join('')),
    };
    return ret;
}


/**
 * DICOM to NIfTI converter optimized for AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dcm2niixAfniOutputs`).
 */
function dcm2niix_afni_execute(
    params: Dcm2niixAfniParameters,
    runner: Runner | null = null,
): Dcm2niixAfniOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DCM2NIIX_AFNI_METADATA);
    params = execution.params(params)
    const cargs = dcm2niix_afni_cargs(params, execution)
    const ret = dcm2niix_afni_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * DICOM to NIfTI converter optimized for AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_folder Folder containing DICOM files
 * @param compression_level GZ compression level (1=fastest..9=smallest, default 6)
 * @param adjacent_dicoms Adjacent DICOMs (images from same series always in same folder) for faster conversion (n/y, default n)
 * @param bids_sidecar BIDS sidecar (y/n/o [o=only: no NIfTI], default y)
 * @param anonymize_bids Anonymize BIDS (y/n, default y)
 * @param comment Comment stored in NIfTI aux_file (provide up to 24 characters e.g. '-c first_visit')
 * @param directory_search_depth Directory search depth. Convert DICOMs in sub-folders of in_folder? (0..9, default 5)
 * @param export_format Export as NRRD (y) or MGH (o) instead of NIfTI (y/n/o, default n)
 * @param filename_template Filename template for output (default '%f_%p_%t_%s')
 * @param generate_defaults Generate defaults file (y/n/o/i [o=only: reset and write defaults; i=ignore: reset defaults], default n)
 * @param ignore_images Ignore derived, localizer and 2D images (y/n, default n)
 * @param lossless_scale Losslessly scale 16-bit integers to use dynamic range (y/n/o, default o)
 * @param merge_slices Merge 2D slices from same series regardless of echo, exposure, etc. (n/y or 0/1/2, default 2)
 * @param series_crc_number Only convert this series CRC number - can be used up to 16 times (default convert all)
 * @param output_directory Output directory (omit to save to input folder)
 * @param phillips_scaling Philips precise float (not display) scaling (y/n, default y)
 * @param rename_dicoms Rename instead of convert DICOMs (y/n, default n)
 * @param single_file_mode Single file mode, do not convert other images in folder (y/n, default n)
 * @param up_to_date Up-to-date check
 * @param verbose Verbose (n/y or 0/1/2, default 0)
 * @param write_behavior Write behavior for name conflicts (0=skip duplicates, 1=overwrite, 2=add suffix)
 * @param crop_3d Crop 3D acquisitions (y/n/i, default n, use 'i'gnore to neither crop nor rotate 3D acquisitions)
 * @param gz_compress GZ compress images (y/o/i/n/3, default n) [y=pigz, o=optimal pigz, i=internal:miniz, n=no, 3=no,3D]
 * @param big_endian Byte order (y/n/o, default o) [y=big-endian, n=little-endian, o=optimal/native]
 * @param progress Slicer format progress information (y/n, default n)
 * @param ignore_trigger_times Disregard values in 0018, 1060 and 0020, 9153
 * @param terse Omit filename post-fixes (can cause overwrites)
 * @param version Report version
 * @param xml Slicer format features
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dcm2niixAfniOutputs`).
 */
function dcm2niix_afni(
    input_folder: string,
    compression_level: number | null = null,
    adjacent_dicoms: string | null = null,
    bids_sidecar: string | null = null,
    anonymize_bids: string | null = null,
    comment: string | null = null,
    directory_search_depth: number | null = null,
    export_format: string | null = null,
    filename_template: string | null = null,
    generate_defaults: string | null = null,
    ignore_images: string | null = null,
    lossless_scale: string | null = null,
    merge_slices: string | null = null,
    series_crc_number: Array<string> | null = null,
    output_directory: string | null = null,
    phillips_scaling: string | null = null,
    rename_dicoms: string | null = null,
    single_file_mode: string | null = null,
    up_to_date: boolean = false,
    verbose: string | null = null,
    write_behavior: number | null = null,
    crop_3d: string | null = null,
    gz_compress: string | null = null,
    big_endian: string | null = null,
    progress: string | null = null,
    ignore_trigger_times: boolean = false,
    terse: boolean = false,
    version: boolean = false,
    xml: boolean = false,
    runner: Runner | null = null,
): Dcm2niixAfniOutputs {
    const params = dcm2niix_afni_params(input_folder, compression_level, adjacent_dicoms, bids_sidecar, anonymize_bids, comment, directory_search_depth, export_format, filename_template, generate_defaults, ignore_images, lossless_scale, merge_slices, series_crc_number, output_directory, phillips_scaling, rename_dicoms, single_file_mode, up_to_date, verbose, write_behavior, crop_3d, gz_compress, big_endian, progress, ignore_trigger_times, terse, version, xml)
    return dcm2niix_afni_execute(params, runner);
}


export {
      DCM2NIIX_AFNI_METADATA,
      Dcm2niixAfniOutputs,
      Dcm2niixAfniParameters,
      dcm2niix_afni,
      dcm2niix_afni_execute,
      dcm2niix_afni_params,
};
