// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRDEGIBBS_METADATA: Metadata = {
    id: "832d935b5fa8fdff97b78ecd355cb0d26be8033a.boutiques",
    name: "mrdegibbs",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface MrdegibbsConfigParameters {
    "@type"?: "config";
    "key": string;
    "value": string;
}
type MrdegibbsConfigParametersTagged = Required<Pick<MrdegibbsConfigParameters, '@type'>> & MrdegibbsConfigParameters;


interface MrdegibbsParameters {
    "@type"?: "mrtrix/mrdegibbs";
    "axes"?: Array<number> | null | undefined;
    "nshifts"?: number | null | undefined;
    "minW"?: number | null | undefined;
    "maxW"?: number | null | undefined;
    "datatype"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<MrdegibbsConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "in": InputPathType;
    "out": string;
}
type MrdegibbsParametersTagged = Required<Pick<MrdegibbsParameters, '@type'>> & MrdegibbsParameters;


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function mrdegibbs_config_params(
    key: string,
    value: string,
): MrdegibbsConfigParametersTagged {
    const params = {
        "@type": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrdegibbs_config_cargs(
    params: MrdegibbsConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `MrdegibbsParameters(...)`.
 *
 * @interface
 */
interface MrdegibbsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image.
     */
    out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_ the input image.
 * @param out the output image.
 * @param axes select the slice axes (default: 0,1 - i.e. x-y).
 * @param nshifts discretization of subpixel spacing (default: 20).
 * @param min_w left border of window used for TV computation (default: 1).
 * @param max_w right border of window used for TV computation (default: 3).
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function mrdegibbs_params(
    in_: InputPathType,
    out: string,
    axes: Array<number> | null = null,
    nshifts: number | null = null,
    min_w: number | null = null,
    max_w: number | null = null,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrdegibbsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): MrdegibbsParametersTagged {
    const params = {
        "@type": "mrtrix/mrdegibbs" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "in": in_,
        "out": out,
    };
    if (axes !== null) {
        params["axes"] = axes;
    }
    if (nshifts !== null) {
        params["nshifts"] = nshifts;
    }
    if (min_w !== null) {
        params["minW"] = min_w;
    }
    if (max_w !== null) {
        params["maxW"] = max_w;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mrdegibbs_cargs(
    params: MrdegibbsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mrdegibbs");
    if ((params["axes"] ?? null) !== null) {
        cargs.push(
            "-axes",
            ...(params["axes"] ?? null).map(String)
        );
    }
    if ((params["nshifts"] ?? null) !== null) {
        cargs.push(
            "-nshifts",
            String((params["nshifts"] ?? null))
        );
    }
    if ((params["minW"] ?? null) !== null) {
        cargs.push(
            "-minW",
            String((params["minW"] ?? null))
        );
    }
    if ((params["maxW"] ?? null) !== null) {
        cargs.push(
            "-maxW",
            String((params["maxW"] ?? null))
        );
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datatype",
            (params["datatype"] ?? null)
        );
    }
    if ((params["info"] ?? false)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? false)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? false)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? false)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => mrdegibbs_config_cargs(s, execution)).flat());
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? false)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["in"] ?? null)));
    cargs.push((params["out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mrdegibbs_outputs(
    params: MrdegibbsParameters,
    execution: Execution,
): MrdegibbsOutputs {
    const ret: MrdegibbsOutputs = {
        root: execution.outputFile("."),
        out: execution.outputFile([(params["out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mrdegibbs
 *
 * Remove Gibbs Ringing Artifacts.
 *
 * This application attempts to remove Gibbs ringing artefacts from MRI images using the method of local subvoxel-shifts proposed by Kellner et al. (see reference below for details).
 *
 * This command is designed to run on data directly after it has been reconstructed by the scanner, before any interpolation of any kind has taken place. You should not run this command after any form of motion correction (e.g. not after dwifslpreproc). Similarly, if you intend running dwidenoise, you should run denoising before this command to not alter the noise structure, which would impact on dwidenoise's performance.
 *
 * Note that this method is designed to work on images acquired with full k-space coverage. Running this method on partial Fourier ('half-scan') data may lead to suboptimal and/or biased results, as noted in the original reference below. There is currently no means of dealing with this; users should exercise caution when using this method on partial Fourier data, and inspect its output for any obvious artefacts. 
 *
 * References:
 *
 * Kellner, E; Dhital, B; Kiselev, V.G & Reisert, M. Gibbs-ringing artifact removal based on local subvoxel-shifts. Magnetic Resonance in Medicine, 2016, 76, 1574â€“1581.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrdegibbsOutputs`).
 */
function mrdegibbs_execute(
    params: MrdegibbsParameters,
    runner: Runner | null = null,
): MrdegibbsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRDEGIBBS_METADATA);
    params = execution.params(params)
    const cargs = mrdegibbs_cargs(params, execution)
    const ret = mrdegibbs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mrdegibbs
 *
 * Remove Gibbs Ringing Artifacts.
 *
 * This application attempts to remove Gibbs ringing artefacts from MRI images using the method of local subvoxel-shifts proposed by Kellner et al. (see reference below for details).
 *
 * This command is designed to run on data directly after it has been reconstructed by the scanner, before any interpolation of any kind has taken place. You should not run this command after any form of motion correction (e.g. not after dwifslpreproc). Similarly, if you intend running dwidenoise, you should run denoising before this command to not alter the noise structure, which would impact on dwidenoise's performance.
 *
 * Note that this method is designed to work on images acquired with full k-space coverage. Running this method on partial Fourier ('half-scan') data may lead to suboptimal and/or biased results, as noted in the original reference below. There is currently no means of dealing with this; users should exercise caution when using this method on partial Fourier data, and inspect its output for any obvious artefacts. 
 *
 * References:
 *
 * Kellner, E; Dhital, B; Kiselev, V.G & Reisert, M. Gibbs-ringing artifact removal based on local subvoxel-shifts. Magnetic Resonance in Medicine, 2016, 76, 1574â€“1581.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param in_ the input image.
 * @param out the output image.
 * @param axes select the slice axes (default: 0,1 - i.e. x-y).
 * @param nshifts discretization of subpixel spacing (default: 20).
 * @param min_w left border of window used for TV computation (default: 1).
 * @param max_w right border of window used for TV computation (default: 3).
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrdegibbsOutputs`).
 */
function mrdegibbs(
    in_: InputPathType,
    out: string,
    axes: Array<number> | null = null,
    nshifts: number | null = null,
    min_w: number | null = null,
    max_w: number | null = null,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<MrdegibbsConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrdegibbsOutputs {
    const params = mrdegibbs_params(in_, out, axes, nshifts, min_w, max_w, datatype, info, quiet, debug, force, nthreads, config, help, version)
    return mrdegibbs_execute(params, runner);
}


export {
      MRDEGIBBS_METADATA,
      MrdegibbsOutputs,
      mrdegibbs,
      mrdegibbs_config_params,
      mrdegibbs_execute,
      mrdegibbs_params,
};
