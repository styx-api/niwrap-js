// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_GLMFIT_SIM_METADATA: Metadata = {
    id: "81cf6a49469f9fd67bac37d962ac078f78dffe90.boutiques",
    name: "mri_glmfit-sim",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriGlmfitSimParameters {
    "__STYXTYPE__": "mri_glmfit-sim";
    "glmdir": string;
    "cwp"?: number | null | undefined;
    "mczsim"?: string | null | undefined;
    "mczsim_dir"?: string | null | undefined;
    "mczsim_label"?: string | null | undefined;
    "perm"?: string | null | undefined;
    "perm_resid": boolean;
    "perm_signflip": boolean;
    "grf"?: string | null | undefined;
    "spaces_2": boolean;
    "spaces_3": boolean;
    "overwrite": boolean;
    "bg"?: number | null | undefined;
    "sleep"?: number | null | undefined;
    "a2009s": boolean;
    "annot"?: string | null | undefined;
    "log"?: string | null | undefined;
    "base"?: string | null | undefined;
    "no_sim"?: string | null | undefined;
    "seed"?: number | null | undefined;
    "fwhm_override"?: number | null | undefined;
    "fwhm_add"?: number | null | undefined;
    "uniform"?: Array<number> | null | undefined;
    "no_out_annot": boolean;
    "no_cluster_mean": boolean;
    "y_file"?: InputPathType | null | undefined;
    "centroid": boolean;
    "spatial_sum": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_glmfit-sim": mri_glmfit_sim_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_glmfit-sim": mri_glmfit_sim_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_glmfit_sim(...)`.
 *
 * @interface
 */
interface MriGlmfitSimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Sig volume corrected for voxel-wise multiple comparisons.
     */
    sig_voxel_mgh: OutputPathType | null;
    /**
     * Sig volume corrected for cluster-wise multiple comparisons.
     */
    sig_cluster_mgh: OutputPathType | null;
    /**
     * Cluster summary table.
     */
    sig_cluster_summary: OutputPathType | null;
    /**
     * Summary of the input (y) over each cluster.
     */
    y_ocn_dat: OutputPathType | null;
    /**
     * Output cluster number volume.
     */
    sig_ocn_mgh: OutputPathType | null;
    /**
     * Cluster annotation for surfaces.
     */
    sig_ocn_annot: OutputPathType | null;
    /**
     * Original sig volume masked to show only clusters.
     */
    sig_masked_mgh: OutputPathType | null;
}


function mri_glmfit_sim_params(
    glmdir: string,
    cwp: number | null = null,
    mczsim: string | null = null,
    mczsim_dir: string | null = null,
    mczsim_label: string | null = null,
    perm: string | null = null,
    perm_resid: boolean = false,
    perm_signflip: boolean = false,
    grf: string | null = null,
    spaces_2: boolean = false,
    spaces_3: boolean = false,
    overwrite: boolean = false,
    bg: number | null = null,
    sleep: number | null = null,
    a2009s: boolean = false,
    annot: string | null = null,
    log: string | null = null,
    base: string | null = null,
    no_sim: string | null = null,
    seed: number | null = null,
    fwhm_override: number | null = null,
    fwhm_add: number | null = null,
    uniform: Array<number> | null = null,
    no_out_annot: boolean = false,
    no_cluster_mean: boolean = false,
    y_file: InputPathType | null = null,
    centroid: boolean = false,
    spatial_sum: boolean = false,
    help: boolean = false,
): MriGlmfitSimParameters {
    /**
     * Build parameters.
    
     * @param glmdir Path to GLM directory.
     * @param cwp Cluster-wise p-value threshold, default is 0.05.
     * @param mczsim Use pre-computed z-based Monte Carlo simulations. Requires vwthreshold and sign.
     * @param mczsim_dir Directory for custom Monte Carlo simulations, default is FREESURFER_HOME/average/mult-comp-cor.
     * @param mczsim_label Label for custom Monte Carlo simulations, default is cortex.
     * @param perm Use permutation simulation with nsim iterations, cluster forming threshold (CFT), and sign.
     * @param perm_resid Use permutation on the residual instead of raw data for non-orthogonal designs.
     * @param perm_signflip Use sign flipping instead of shuffling for permutation.
     * @param grf Use Gaussian Random Fields (GRF) method, with vwthreshold and sign.
     * @param spaces_2 Apply additional Bonferroni correction across 2 spaces.
     * @param spaces_3 Apply additional Bonferroni correction across 3 spaces.
     * @param overwrite Delete previous CSDs.
     * @param bg Divide simulation into njobs and put in background.
     * @param sleep Number of seconds to sleep between background polls.
     * @param a2009s Use aparc.a2009s instead of aparc for region of vertex max.
     * @param annot Use specific annotation for region of vertex max.
     * @param log Specify logfile, default is csdbase.mri_glmfit-sim.log.
     * @param base Override csdbase name.
     * @param no_sim Do not simulate, only run cluster.
     * @param seed Set simulation random number generator seed.
     * @param fwhm_override Override fwhm in glmdir.
     * @param fwhm_add Add fwhmAdd to the estimated fwhm.
     * @param uniform Use uniform PDF instead of gaussian, specify min and max.
     * @param no_out_annot Do not output a cluster annotation.
     * @param no_cluster_mean Do not compute means of each subject in each cluster.
     * @param y_file Specify the GLM input y file.
     * @param centroid Report the coordinates/annotation of the centroid instead of max.
     * @param spatial_sum Compute the sum over voxels in the cluster rather than the average.
     * @param help Show the help message and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_glmfit-sim" as const,
        "glmdir": glmdir,
        "perm_resid": perm_resid,
        "perm_signflip": perm_signflip,
        "spaces_2": spaces_2,
        "spaces_3": spaces_3,
        "overwrite": overwrite,
        "a2009s": a2009s,
        "no_out_annot": no_out_annot,
        "no_cluster_mean": no_cluster_mean,
        "centroid": centroid,
        "spatial_sum": spatial_sum,
        "help": help,
    };
    if (cwp !== null) {
        params["cwp"] = cwp;
    }
    if (mczsim !== null) {
        params["mczsim"] = mczsim;
    }
    if (mczsim_dir !== null) {
        params["mczsim_dir"] = mczsim_dir;
    }
    if (mczsim_label !== null) {
        params["mczsim_label"] = mczsim_label;
    }
    if (perm !== null) {
        params["perm"] = perm;
    }
    if (grf !== null) {
        params["grf"] = grf;
    }
    if (bg !== null) {
        params["bg"] = bg;
    }
    if (sleep !== null) {
        params["sleep"] = sleep;
    }
    if (annot !== null) {
        params["annot"] = annot;
    }
    if (log !== null) {
        params["log"] = log;
    }
    if (base !== null) {
        params["base"] = base;
    }
    if (no_sim !== null) {
        params["no_sim"] = no_sim;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (fwhm_override !== null) {
        params["fwhm_override"] = fwhm_override;
    }
    if (fwhm_add !== null) {
        params["fwhm_add"] = fwhm_add;
    }
    if (uniform !== null) {
        params["uniform"] = uniform;
    }
    if (y_file !== null) {
        params["y_file"] = y_file;
    }
    return params;
}


function mri_glmfit_sim_cargs(
    params: MriGlmfitSimParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_glmfit-sim");
    cargs.push(
        "--glmdir",
        (params["glmdir"] ?? null)
    );
    if ((params["cwp"] ?? null) !== null) {
        cargs.push(
            "--cwp",
            String((params["cwp"] ?? null))
        );
    }
    if ((params["mczsim"] ?? null) !== null) {
        cargs.push(
            "--mczsim",
            (params["mczsim"] ?? null)
        );
    }
    if ((params["mczsim_dir"] ?? null) !== null) {
        cargs.push(
            "--mczsim-dir",
            (params["mczsim_dir"] ?? null)
        );
    }
    if ((params["mczsim_label"] ?? null) !== null) {
        cargs.push(
            "--mczsim-label",
            (params["mczsim_label"] ?? null)
        );
    }
    if ((params["perm"] ?? null) !== null) {
        cargs.push(
            "--perm",
            (params["perm"] ?? null)
        );
    }
    if ((params["perm_resid"] ?? null)) {
        cargs.push("--perm-resid");
    }
    if ((params["perm_signflip"] ?? null)) {
        cargs.push("--perm-signflip");
    }
    if ((params["grf"] ?? null) !== null) {
        cargs.push(
            "--grf",
            (params["grf"] ?? null)
        );
    }
    if ((params["spaces_2"] ?? null)) {
        cargs.push("--2spaces");
    }
    if ((params["spaces_3"] ?? null)) {
        cargs.push("--3spaces");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("--overwrite");
    }
    if ((params["bg"] ?? null) !== null) {
        cargs.push(
            "--bg",
            String((params["bg"] ?? null))
        );
    }
    if ((params["sleep"] ?? null) !== null) {
        cargs.push(
            "--sleep",
            String((params["sleep"] ?? null))
        );
    }
    if ((params["a2009s"] ?? null)) {
        cargs.push("--a2009s");
    }
    if ((params["annot"] ?? null) !== null) {
        cargs.push(
            "--annot",
            (params["annot"] ?? null)
        );
    }
    if ((params["log"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log"] ?? null)
        );
    }
    if ((params["base"] ?? null) !== null) {
        cargs.push(
            "--base",
            (params["base"] ?? null)
        );
    }
    if ((params["no_sim"] ?? null) !== null) {
        cargs.push(
            "--no-sim",
            (params["no_sim"] ?? null)
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["fwhm_override"] ?? null) !== null) {
        cargs.push(
            "--fwhm-override",
            String((params["fwhm_override"] ?? null))
        );
    }
    if ((params["fwhm_add"] ?? null) !== null) {
        cargs.push(
            "--fwhm-add",
            String((params["fwhm_add"] ?? null))
        );
    }
    if ((params["uniform"] ?? null) !== null) {
        cargs.push(
            "--uniform",
            ...(params["uniform"] ?? null).map(String)
        );
    }
    if ((params["no_out_annot"] ?? null)) {
        cargs.push("--no-out-annot");
    }
    if ((params["no_cluster_mean"] ?? null)) {
        cargs.push("--no-cluster-mean");
    }
    if ((params["y_file"] ?? null) !== null) {
        cargs.push(
            "--y",
            execution.inputFile((params["y_file"] ?? null))
        );
    }
    if ((params["centroid"] ?? null)) {
        cargs.push("--centroid");
    }
    if ((params["spatial_sum"] ?? null)) {
        cargs.push("--spatial-sum");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


function mri_glmfit_sim_outputs(
    params: MriGlmfitSimParameters,
    execution: Execution,
): MriGlmfitSimOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriGlmfitSimOutputs = {
        root: execution.outputFile("."),
        sig_voxel_mgh: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".sig.voxel.mgh"].join('')) : null,
        sig_cluster_mgh: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".sig.cluster.mgh"].join('')) : null,
        sig_cluster_summary: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".sig.cluster.summary"].join('')) : null,
        y_ocn_dat: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".y.ocn.dat"].join('')) : null,
        sig_ocn_mgh: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".sig.ocn.mgh"].join('')) : null,
        sig_ocn_annot: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".sig.ocn.annot"].join('')) : null,
        sig_masked_mgh: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".sig.masked.mgh"].join('')) : null,
    };
    return ret;
}


function mri_glmfit_sim_execute(
    params: MriGlmfitSimParameters,
    execution: Execution,
): MriGlmfitSimOutputs {
    /**
     * A tool to run corrections for multiple comparisons on volumes or surfaces, using various methods including Monte Carlo simulation, permutation, and Gaussian Random Fields.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriGlmfitSimOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_glmfit_sim_cargs(params, execution)
    const ret = mri_glmfit_sim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_glmfit_sim(
    glmdir: string,
    cwp: number | null = null,
    mczsim: string | null = null,
    mczsim_dir: string | null = null,
    mczsim_label: string | null = null,
    perm: string | null = null,
    perm_resid: boolean = false,
    perm_signflip: boolean = false,
    grf: string | null = null,
    spaces_2: boolean = false,
    spaces_3: boolean = false,
    overwrite: boolean = false,
    bg: number | null = null,
    sleep: number | null = null,
    a2009s: boolean = false,
    annot: string | null = null,
    log: string | null = null,
    base: string | null = null,
    no_sim: string | null = null,
    seed: number | null = null,
    fwhm_override: number | null = null,
    fwhm_add: number | null = null,
    uniform: Array<number> | null = null,
    no_out_annot: boolean = false,
    no_cluster_mean: boolean = false,
    y_file: InputPathType | null = null,
    centroid: boolean = false,
    spatial_sum: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): MriGlmfitSimOutputs {
    /**
     * A tool to run corrections for multiple comparisons on volumes or surfaces, using various methods including Monte Carlo simulation, permutation, and Gaussian Random Fields.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param glmdir Path to GLM directory.
     * @param cwp Cluster-wise p-value threshold, default is 0.05.
     * @param mczsim Use pre-computed z-based Monte Carlo simulations. Requires vwthreshold and sign.
     * @param mczsim_dir Directory for custom Monte Carlo simulations, default is FREESURFER_HOME/average/mult-comp-cor.
     * @param mczsim_label Label for custom Monte Carlo simulations, default is cortex.
     * @param perm Use permutation simulation with nsim iterations, cluster forming threshold (CFT), and sign.
     * @param perm_resid Use permutation on the residual instead of raw data for non-orthogonal designs.
     * @param perm_signflip Use sign flipping instead of shuffling for permutation.
     * @param grf Use Gaussian Random Fields (GRF) method, with vwthreshold and sign.
     * @param spaces_2 Apply additional Bonferroni correction across 2 spaces.
     * @param spaces_3 Apply additional Bonferroni correction across 3 spaces.
     * @param overwrite Delete previous CSDs.
     * @param bg Divide simulation into njobs and put in background.
     * @param sleep Number of seconds to sleep between background polls.
     * @param a2009s Use aparc.a2009s instead of aparc for region of vertex max.
     * @param annot Use specific annotation for region of vertex max.
     * @param log Specify logfile, default is csdbase.mri_glmfit-sim.log.
     * @param base Override csdbase name.
     * @param no_sim Do not simulate, only run cluster.
     * @param seed Set simulation random number generator seed.
     * @param fwhm_override Override fwhm in glmdir.
     * @param fwhm_add Add fwhmAdd to the estimated fwhm.
     * @param uniform Use uniform PDF instead of gaussian, specify min and max.
     * @param no_out_annot Do not output a cluster annotation.
     * @param no_cluster_mean Do not compute means of each subject in each cluster.
     * @param y_file Specify the GLM input y file.
     * @param centroid Report the coordinates/annotation of the centroid instead of max.
     * @param spatial_sum Compute the sum over voxels in the cluster rather than the average.
     * @param help Show the help message and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriGlmfitSimOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_GLMFIT_SIM_METADATA);
    const params = mri_glmfit_sim_params(glmdir, cwp, mczsim, mczsim_dir, mczsim_label, perm, perm_resid, perm_signflip, grf, spaces_2, spaces_3, overwrite, bg, sleep, a2009s, annot, log, base, no_sim, seed, fwhm_override, fwhm_add, uniform, no_out_annot, no_cluster_mean, y_file, centroid, spatial_sum, help)
    return mri_glmfit_sim_execute(params, execution);
}


export {
      MRI_GLMFIT_SIM_METADATA,
      MriGlmfitSimOutputs,
      MriGlmfitSimParameters,
      mri_glmfit_sim,
      mri_glmfit_sim_params,
};
