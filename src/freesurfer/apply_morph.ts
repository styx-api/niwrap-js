// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APPLY_MORPH_METADATA: Metadata = {
    id: "a7cb7e420a1c51fbb13f7cd6c2a1a9581804bf02.boutiques",
    name: "applyMorph",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ApplyMorphParameters {
    "@type": "freesurfer.applyMorph";
    "inputs": Array<InputPathType>;
    "template": InputPathType;
    "transform": InputPathType;
    "zlib_buffer"?: number | null | undefined;
    "dbg_coords"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.applyMorph": apply_morph_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `apply_morph(...)`.
 *
 * @interface
 */
interface ApplyMorphOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param inputs Input files.
 * @param template Template volume.
 * @param transform Transform file.
 * @param zlib_buffer Zlib buffer pre-allocation multiplier.
 * @param dbg_coords Debugging coordinates.
 *
 * @returns Parameter dictionary
 */
function apply_morph_params(
    inputs: Array<InputPathType>,
    template: InputPathType,
    transform: InputPathType,
    zlib_buffer: number | null = null,
    dbg_coords: Array<number> | null = null,
): ApplyMorphParameters {
    const params = {
        "@type": "freesurfer.applyMorph" as const,
        "inputs": inputs,
        "template": template,
        "transform": transform,
    };
    if (zlib_buffer !== null) {
        params["zlib_buffer"] = zlib_buffer;
    }
    if (dbg_coords !== null) {
        params["dbg_coords"] = dbg_coords;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function apply_morph_cargs(
    params: ApplyMorphParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("applyMorph");
    cargs.push(...(params["inputs"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(
        "--template",
        execution.inputFile((params["template"] ?? null))
    );
    cargs.push(
        "--transform",
        execution.inputFile((params["transform"] ?? null))
    );
    if ((params["zlib_buffer"] ?? null) !== null) {
        cargs.push(
            "--zlib_buffer",
            String((params["zlib_buffer"] ?? null))
        );
    }
    if ((params["dbg_coords"] ?? null) !== null) {
        cargs.push(
            "--dbg_coords",
            ...(params["dbg_coords"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function apply_morph_outputs(
    params: ApplyMorphParameters,
    execution: Execution,
): ApplyMorphOutputs {
    const ret: ApplyMorphOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool for applying a morph to a volume using a template and a transform.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ApplyMorphOutputs`).
 */
function apply_morph_execute(
    params: ApplyMorphParameters,
    runner: Runner | null = null,
): ApplyMorphOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APPLY_MORPH_METADATA);
    params = execution.params(params)
    const cargs = apply_morph_cargs(params, execution)
    const ret = apply_morph_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for applying a morph to a volume using a template and a transform.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param inputs Input files.
 * @param template Template volume.
 * @param transform Transform file.
 * @param zlib_buffer Zlib buffer pre-allocation multiplier.
 * @param dbg_coords Debugging coordinates.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ApplyMorphOutputs`).
 */
function apply_morph(
    inputs: Array<InputPathType>,
    template: InputPathType,
    transform: InputPathType,
    zlib_buffer: number | null = null,
    dbg_coords: Array<number> | null = null,
    runner: Runner | null = null,
): ApplyMorphOutputs {
    const params = apply_morph_params(inputs, template, transform, zlib_buffer, dbg_coords)
    return apply_morph_execute(params, runner);
}


export {
      APPLY_MORPH_METADATA,
      ApplyMorphOutputs,
      ApplyMorphParameters,
      apply_morph,
      apply_morph_execute,
      apply_morph_params,
};
