// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_OR_METADATA: Metadata = {
    id: "950324820d0db5f38e35e56b2de3aab6e8c67c1e.boutiques",
    name: "mri_or",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriOrParameters {
    "@type": "freesurfer.mri_or";
    "original_labels": boolean;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_or": mri_or_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_or(...)`.
 *
 * @interface
 */
interface MriOrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input image files on which to perform the logical OR operation
 * @param original_labels Keeps the original label values in the input files when creating the output
 *
 * @returns Parameter dictionary
 */
function mri_or_params(
    input_files: Array<InputPathType>,
    original_labels: boolean = false,
): MriOrParameters {
    const params = {
        "@type": "freesurfer.mri_or" as const,
        "original_labels": original_labels,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_or_cargs(
    params: MriOrParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_or");
    if ((params["original_labels"] ?? null)) {
        cargs.push("-o");
    }
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_or_outputs(
    params: MriOrParameters,
    execution: Execution,
): MriOrOutputs {
    const ret: MriOrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Performs a logical voxel-wise OR on a series of volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriOrOutputs`).
 */
function mri_or_execute(
    params: MriOrParameters,
    runner: Runner | null = null,
): MriOrOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_OR_METADATA);
    params = execution.params(params)
    const cargs = mri_or_cargs(params, execution)
    const ret = mri_or_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Performs a logical voxel-wise OR on a series of volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_files Input image files on which to perform the logical OR operation
 * @param original_labels Keeps the original label values in the input files when creating the output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriOrOutputs`).
 */
function mri_or(
    input_files: Array<InputPathType>,
    original_labels: boolean = false,
    runner: Runner | null = null,
): MriOrOutputs {
    const params = mri_or_params(input_files, original_labels)
    return mri_or_execute(params, runner);
}


export {
      MRI_OR_METADATA,
      MriOrOutputs,
      MriOrParameters,
      mri_or,
      mri_or_execute,
      mri_or_params,
};
