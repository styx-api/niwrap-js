// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const REGISTER_SUBJECT_FLASH_METADATA: Metadata = {
    id: "1ed90dd43edd8a69b7a2b058cf60374353f7809f.boutiques",
    name: "register_subject_flash",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface RegisterSubjectFlashParameters {
    "@type": "freesurfer.register_subject_flash";
    "input_volumes": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.register_subject_flash": register_subject_flash_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.register_subject_flash": register_subject_flash_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `register_subject_flash(...)`.
 *
 * @interface
 */
interface RegisterSubjectFlashOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Log file output with registration results.
     */
    log_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volumes Input volumes to register.
 *
 * @returns Parameter dictionary
 */
function register_subject_flash_params(
    input_volumes: Array<InputPathType>,
): RegisterSubjectFlashParameters {
    const params = {
        "@type": "freesurfer.register_subject_flash" as const,
        "input_volumes": input_volumes,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function register_subject_flash_cargs(
    params: RegisterSubjectFlashParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("register_subject_flash");
    cargs.push(...(params["input_volumes"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function register_subject_flash_outputs(
    params: RegisterSubjectFlashParameters,
    execution: Execution,
): RegisterSubjectFlashOutputs {
    const ret: RegisterSubjectFlashOutputs = {
        root: execution.outputFile("."),
        log_file: execution.outputFile(["talairach.log"].join('')),
    };
    return ret;
}


/**
 * register_subject_flash
 *
 * Register subject using the FLASH forward model to predict intensity values.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterSubjectFlashOutputs`).
 */
function register_subject_flash_execute(
    params: RegisterSubjectFlashParameters,
    runner: Runner | null = null,
): RegisterSubjectFlashOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(REGISTER_SUBJECT_FLASH_METADATA);
    params = execution.params(params)
    const cargs = register_subject_flash_cargs(params, execution)
    const ret = register_subject_flash_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * register_subject_flash
 *
 * Register subject using the FLASH forward model to predict intensity values.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volumes Input volumes to register.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RegisterSubjectFlashOutputs`).
 */
function register_subject_flash(
    input_volumes: Array<InputPathType>,
    runner: Runner | null = null,
): RegisterSubjectFlashOutputs {
    const params = register_subject_flash_params(input_volumes)
    return register_subject_flash_execute(params, runner);
}


export {
      REGISTER_SUBJECT_FLASH_METADATA,
      RegisterSubjectFlashOutputs,
      RegisterSubjectFlashParameters,
      register_subject_flash,
      register_subject_flash_execute,
      register_subject_flash_params,
};
