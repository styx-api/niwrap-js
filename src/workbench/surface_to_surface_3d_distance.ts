// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_TO_SURFACE_3D_DISTANCE_METADATA: Metadata = {
    id: "03965e859ff3619a159d64d5430c877f1a605f4c.boutiques",
    name: "surface-to-surface-3d-distance",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceToSurface3dDistanceParameters {
    "@type": "workbench.surface-to-surface-3d-distance";
    "surface_comp": InputPathType;
    "surface_ref": InputPathType;
    "dists_out": string;
    "opt_vectors_vectors_out"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-to-surface-3d-distance": surface_to_surface_3d_distance_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-to-surface-3d-distance": surface_to_surface_3d_distance_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_to_surface_3d_distance(...)`.
 *
 * @interface
 */
interface SurfaceToSurface3dDistanceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output distances
     */
    dists_out: OutputPathType;
    /**
     * output the displacement vectors: the output vectors
     */
    opt_vectors_vectors_out: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param surface_comp the surface to compare to the reference
 * @param surface_ref the surface to use as the reference
 * @param dists_out the output distances
 * @param opt_vectors_vectors_out output the displacement vectors: the output vectors
 *
 * @returns Parameter dictionary
 */
function surface_to_surface_3d_distance_params(
    surface_comp: InputPathType,
    surface_ref: InputPathType,
    dists_out: string,
    opt_vectors_vectors_out: string | null = null,
): SurfaceToSurface3dDistanceParameters {
    const params = {
        "@type": "workbench.surface-to-surface-3d-distance" as const,
        "surface_comp": surface_comp,
        "surface_ref": surface_ref,
        "dists_out": dists_out,
    };
    if (opt_vectors_vectors_out !== null) {
        params["opt_vectors_vectors_out"] = opt_vectors_vectors_out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_to_surface_3d_distance_cargs(
    params: SurfaceToSurface3dDistanceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-to-surface-3d-distance");
    cargs.push(execution.inputFile((params["surface_comp"] ?? null)));
    cargs.push(execution.inputFile((params["surface_ref"] ?? null)));
    cargs.push((params["dists_out"] ?? null));
    if ((params["opt_vectors_vectors_out"] ?? null) !== null) {
        cargs.push(
            "-vectors",
            (params["opt_vectors_vectors_out"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_to_surface_3d_distance_outputs(
    params: SurfaceToSurface3dDistanceParameters,
    execution: Execution,
): SurfaceToSurface3dDistanceOutputs {
    const ret: SurfaceToSurface3dDistanceOutputs = {
        root: execution.outputFile("."),
        dists_out: execution.outputFile([(params["dists_out"] ?? null)].join('')),
        opt_vectors_vectors_out: ((params["opt_vectors_vectors_out"] ?? null) !== null) ? execution.outputFile([(params["opt_vectors_vectors_out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Compute distance between corresponding vertices.
 *
 * Computes the vector difference between the vertices of each surface with the same index, as (comp - ref), and output the magnitudes, and optionally the displacement vectors.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `SurfaceToSurface3dDistanceOutputs`).
 */
function surface_to_surface_3d_distance_execute(
    params: SurfaceToSurface3dDistanceParameters,
    execution: Execution,
): SurfaceToSurface3dDistanceOutputs {
    params = execution.params(params)
    const cargs = surface_to_surface_3d_distance_cargs(params, execution)
    const ret = surface_to_surface_3d_distance_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute distance between corresponding vertices.
 *
 * Computes the vector difference between the vertices of each surface with the same index, as (comp - ref), and output the magnitudes, and optionally the displacement vectors.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface_comp the surface to compare to the reference
 * @param surface_ref the surface to use as the reference
 * @param dists_out the output distances
 * @param opt_vectors_vectors_out output the displacement vectors: the output vectors
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceToSurface3dDistanceOutputs`).
 */
function surface_to_surface_3d_distance(
    surface_comp: InputPathType,
    surface_ref: InputPathType,
    dists_out: string,
    opt_vectors_vectors_out: string | null = null,
    runner: Runner | null = null,
): SurfaceToSurface3dDistanceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_TO_SURFACE_3D_DISTANCE_METADATA);
    const params = surface_to_surface_3d_distance_params(surface_comp, surface_ref, dists_out, opt_vectors_vectors_out)
    return surface_to_surface_3d_distance_execute(params, execution);
}


export {
      SURFACE_TO_SURFACE_3D_DISTANCE_METADATA,
      SurfaceToSurface3dDistanceOutputs,
      SurfaceToSurface3dDistanceParameters,
      surface_to_surface_3d_distance,
      surface_to_surface_3d_distance_cargs,
      surface_to_surface_3d_distance_execute,
      surface_to_surface_3d_distance_outputs,
      surface_to_surface_3d_distance_params,
};
