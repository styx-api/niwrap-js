// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_STATS_AC_METADATA: Metadata = {
    id: "ee6dcc4f728ec52f72a46961a06406996c79cf2d.boutiques",
    name: "dmri_stats_ac",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriStatsAcParameters {
    "@type": "freesurfer.dmri_stats_ac";
    "anatomicuts_folder": string;
    "num_clusters": number;
    "correspondence_file": string;
    "measures": Array<string>;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.dmri_stats_ac": dmri_stats_ac_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.dmri_stats_ac": dmri_stats_ac_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_stats_ac(...)`.
 *
 * @interface
 */
interface DmriStatsAcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output of the dMRI statistical analysis
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param anatomicuts_folder Input folder containing anatomicuts data
 * @param num_clusters Number of clusters for analysis
 * @param correspondence_file File specifying correspondence details
 * @param measures Number of measures followed by each measure name and file
 * @param output_file Output file
 *
 * @returns Parameter dictionary
 */
function dmri_stats_ac_params(
    anatomicuts_folder: string,
    num_clusters: number,
    correspondence_file: string,
    measures: Array<string>,
    output_file: string,
): DmriStatsAcParameters {
    const params = {
        "@type": "freesurfer.dmri_stats_ac" as const,
        "anatomicuts_folder": anatomicuts_folder,
        "num_clusters": num_clusters,
        "correspondence_file": correspondence_file,
        "measures": measures,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_stats_ac_cargs(
    params: DmriStatsAcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_stats_ac");
    cargs.push(
        "-i",
        (params["anatomicuts_folder"] ?? null)
    );
    cargs.push(
        "-n",
        String((params["num_clusters"] ?? null))
    );
    cargs.push(
        "-c",
        (params["correspondence_file"] ?? null)
    );
    cargs.push(
        "-m",
        ...(params["measures"] ?? null)
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_stats_ac_outputs(
    params: DmriStatsAcParameters,
    execution: Execution,
): DmriStatsAcOutputs {
    const ret: DmriStatsAcOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * dmri_stats_ac
 *
 * The tool 'dmri_stats_ac' performs statistical analysis on dMRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriStatsAcOutputs`).
 */
function dmri_stats_ac_execute(
    params: DmriStatsAcParameters,
    runner: Runner | null = null,
): DmriStatsAcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_STATS_AC_METADATA);
    params = execution.params(params)
    const cargs = dmri_stats_ac_cargs(params, execution)
    const ret = dmri_stats_ac_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_stats_ac
 *
 * The tool 'dmri_stats_ac' performs statistical analysis on dMRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param anatomicuts_folder Input folder containing anatomicuts data
 * @param num_clusters Number of clusters for analysis
 * @param correspondence_file File specifying correspondence details
 * @param measures Number of measures followed by each measure name and file
 * @param output_file Output file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriStatsAcOutputs`).
 */
function dmri_stats_ac(
    anatomicuts_folder: string,
    num_clusters: number,
    correspondence_file: string,
    measures: Array<string>,
    output_file: string,
    runner: Runner | null = null,
): DmriStatsAcOutputs {
    const params = dmri_stats_ac_params(anatomicuts_folder, num_clusters, correspondence_file, measures, output_file)
    return dmri_stats_ac_execute(params, runner);
}


export {
      DMRI_STATS_AC_METADATA,
      DmriStatsAcOutputs,
      DmriStatsAcParameters,
      dmri_stats_ac,
      dmri_stats_ac_execute,
      dmri_stats_ac_params,
};
