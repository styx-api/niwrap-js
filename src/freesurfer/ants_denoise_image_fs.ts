// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_DENOISE_IMAGE_FS_METADATA: Metadata = {
    id: "f9289acabc02e5068ccac6d203b039dabfab1bc0.boutiques",
    name: "AntsDenoiseImageFs",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface AntsDenoiseImageFsParameters {
    "@type"?: "freesurfer/AntsDenoiseImageFs";
    "input_image": InputPathType;
    "output_image": string;
    "rician_flag": boolean;
}
type AntsDenoiseImageFsParametersTagged = Required<Pick<AntsDenoiseImageFsParameters, '@type'>> & AntsDenoiseImageFsParameters;


/**
 * Output object returned when calling `AntsDenoiseImageFsParameters(...)`.
 *
 * @interface
 */
interface AntsDenoiseImageFsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting denoised volume file
     */
    denoised_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input volume file
 * @param output_image Denoised volume file
 * @param rician_flag Enable Rician noise model (otherwise Gaussian is used)
 *
 * @returns Parameter dictionary
 */
function ants_denoise_image_fs_params(
    input_image: InputPathType,
    output_image: string = "output.nii",
    rician_flag: boolean = false,
): AntsDenoiseImageFsParametersTagged {
    const params = {
        "@type": "freesurfer/AntsDenoiseImageFs" as const,
        "input_image": input_image,
        "output_image": output_image,
        "rician_flag": rician_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_denoise_image_fs_cargs(
    params: AntsDenoiseImageFsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("AntsDenoiseImageFs");
    cargs.push(
        "-i",
        execution.inputFile((params["input_image"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_image"] ?? "output.nii")
    );
    if ((params["rician_flag"] ?? false)) {
        cargs.push("--rician");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_denoise_image_fs_outputs(
    params: AntsDenoiseImageFsParameters,
    execution: Execution,
): AntsDenoiseImageFsOutputs {
    const ret: AntsDenoiseImageFsOutputs = {
        root: execution.outputFile("."),
        denoised_output: execution.outputFile([(params["output_image"] ?? "output.nii")].join('')),
    };
    return ret;
}


/**
 * AntsDenoiseImageFs
 *
 * Denoises an image with a spatially adaptive filter. This program wraps the AntsDenoiseImage utility available in the ANTs package.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsDenoiseImageFsOutputs`).
 */
function ants_denoise_image_fs_execute(
    params: AntsDenoiseImageFsParameters,
    runner: Runner | null = null,
): AntsDenoiseImageFsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_DENOISE_IMAGE_FS_METADATA);
    params = execution.params(params)
    const cargs = ants_denoise_image_fs_cargs(params, execution)
    const ret = ants_denoise_image_fs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * AntsDenoiseImageFs
 *
 * Denoises an image with a spatially adaptive filter. This program wraps the AntsDenoiseImage utility available in the ANTs package.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image Input volume file
 * @param output_image Denoised volume file
 * @param rician_flag Enable Rician noise model (otherwise Gaussian is used)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsDenoiseImageFsOutputs`).
 */
function ants_denoise_image_fs(
    input_image: InputPathType,
    output_image: string = "output.nii",
    rician_flag: boolean = false,
    runner: Runner | null = null,
): AntsDenoiseImageFsOutputs {
    const params = ants_denoise_image_fs_params(input_image, output_image, rician_flag)
    return ants_denoise_image_fs_execute(params, runner);
}


export {
      ANTS_DENOISE_IMAGE_FS_METADATA,
      AntsDenoiseImageFsOutputs,
      ants_denoise_image_fs,
      ants_denoise_image_fs_execute,
      ants_denoise_image_fs_params,
};
