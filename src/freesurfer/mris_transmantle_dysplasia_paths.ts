// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_TRANSMANTLE_DYSPLASIA_PATHS_METADATA: Metadata = {
    id: "6c1501436959b09276745921386660fe7b7fc0fb.boutiques",
    name: "mris_transmantle_dysplasia_paths",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisTransmantleDysplasiaPathsParameters {
    "@type"?: "freesurfer/mris_transmantle_dysplasia_paths";
    "surface": InputPathType;
    "aseg_volume": InputPathType;
    "intensity_volume": InputPathType;
    "xform": InputPathType;
    "output_volume": string;
    "filter"?: Array<number> | null | undefined;
    "noise_sensitivity": boolean;
}
type MrisTransmantleDysplasiaPathsParametersTagged = Required<Pick<MrisTransmantleDysplasiaPathsParameters, '@type'>> & MrisTransmantleDysplasiaPathsParameters;


/**
 * Output object returned when calling `MrisTransmantleDysplasiaPathsParameters(...)`.
 *
 * @interface
 */
interface MrisTransmantleDysplasiaPathsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface Surface file
 * @param aseg_volume ASEG volume file
 * @param intensity_volume Intensity volume file
 * @param xform Transformation file
 * @param output_volume Output volume file
 * @param filter Apply specified filter with low and high values (not implemented yet)
 * @param noise_sensitivity Noise-sensitivity normalize inverse (default=1)
 *
 * @returns Parameter dictionary
 */
function mris_transmantle_dysplasia_paths_params(
    surface: InputPathType,
    aseg_volume: InputPathType,
    intensity_volume: InputPathType,
    xform: InputPathType,
    output_volume: string,
    filter: Array<number> | null = null,
    noise_sensitivity: boolean = false,
): MrisTransmantleDysplasiaPathsParametersTagged {
    const params = {
        "@type": "freesurfer/mris_transmantle_dysplasia_paths" as const,
        "surface": surface,
        "aseg_volume": aseg_volume,
        "intensity_volume": intensity_volume,
        "xform": xform,
        "output_volume": output_volume,
        "noise_sensitivity": noise_sensitivity,
    };
    if (filter !== null) {
        params["filter"] = filter;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_transmantle_dysplasia_paths_cargs(
    params: MrisTransmantleDysplasiaPathsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_transmantle_dysplasia_paths");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["aseg_volume"] ?? null)));
    cargs.push(execution.inputFile((params["intensity_volume"] ?? null)));
    cargs.push(execution.inputFile((params["xform"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["filter"] ?? null) !== null) {
        cargs.push(
            "-f",
            ...(params["filter"] ?? null).map(String)
        );
    }
    if ((params["noise_sensitivity"] ?? false)) {
        cargs.push("-n");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_transmantle_dysplasia_paths_outputs(
    params: MrisTransmantleDysplasiaPathsParameters,
    execution: Execution,
): MrisTransmantleDysplasiaPathsOutputs {
    const ret: MrisTransmantleDysplasiaPathsOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_transmantle_dysplasia_paths
 *
 * Tool for transmantle dysplasia path computation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisTransmantleDysplasiaPathsOutputs`).
 */
function mris_transmantle_dysplasia_paths_execute(
    params: MrisTransmantleDysplasiaPathsParameters,
    runner: Runner | null = null,
): MrisTransmantleDysplasiaPathsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_TRANSMANTLE_DYSPLASIA_PATHS_METADATA);
    params = execution.params(params)
    const cargs = mris_transmantle_dysplasia_paths_cargs(params, execution)
    const ret = mris_transmantle_dysplasia_paths_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_transmantle_dysplasia_paths
 *
 * Tool for transmantle dysplasia path computation.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param surface Surface file
 * @param aseg_volume ASEG volume file
 * @param intensity_volume Intensity volume file
 * @param xform Transformation file
 * @param output_volume Output volume file
 * @param filter Apply specified filter with low and high values (not implemented yet)
 * @param noise_sensitivity Noise-sensitivity normalize inverse (default=1)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisTransmantleDysplasiaPathsOutputs`).
 */
function mris_transmantle_dysplasia_paths(
    surface: InputPathType,
    aseg_volume: InputPathType,
    intensity_volume: InputPathType,
    xform: InputPathType,
    output_volume: string,
    filter: Array<number> | null = null,
    noise_sensitivity: boolean = false,
    runner: Runner | null = null,
): MrisTransmantleDysplasiaPathsOutputs {
    const params = mris_transmantle_dysplasia_paths_params(surface, aseg_volume, intensity_volume, xform, output_volume, filter, noise_sensitivity)
    return mris_transmantle_dysplasia_paths_execute(params, runner);
}


export {
      MRIS_TRANSMANTLE_DYSPLASIA_PATHS_METADATA,
      MrisTransmantleDysplasiaPathsOutputs,
      mris_transmantle_dysplasia_paths,
      mris_transmantle_dysplasia_paths_execute,
      mris_transmantle_dysplasia_paths_params,
};
