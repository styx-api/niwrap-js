// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_COREG_METADATA: Metadata = {
    id: "fc8c8869625299946d93ca9dfd2b24c69f213967.boutiques",
    name: "mri_coreg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCoregParameters {
    "@type": "freesurfer.mri_coreg";
    "movvol": InputPathType;
    "refvol": InputPathType;
    "reg": string;
    "subject"?: string | null | undefined;
    "dof"?: number | null | undefined;
    "zscale": boolean;
    "xztrans_yrot": boolean;
    "xytrans_zrot": boolean;
    "xytrans_zrot_xyscale_xyshear": boolean;
    "ref_maskvol"?: InputPathType | null | undefined;
    "no_ref_mask": boolean;
    "mov_maskvol"?: InputPathType | null | undefined;
    "threads"?: number | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "regdat"?: string | null | undefined;
    "no_coord_dither": boolean;
    "no_intensity_dither": boolean;
    "spatial_scales"?: Array<string> | null | undefined;
    "trans"?: Array<number> | null | undefined;
    "rot"?: Array<number> | null | undefined;
    "scale"?: Array<number> | null | undefined;
    "shear"?: Array<number> | null | undefined;
    "init_reg"?: InputPathType | null | undefined;
    "out_param_file"?: string | null | undefined;
    "out_cost_file"?: string | null | undefined;
    "no_cras0": boolean;
    "centroid": boolean;
    "ras2ras": boolean;
    "nitersmax"?: number | null | undefined;
    "ftol"?: number | null | undefined;
    "linmintol"?: number | null | undefined;
    "seed"?: number | null | undefined;
    "sat"?: number | null | undefined;
    "conf_ref": boolean;
    "no_bf": boolean;
    "bf_lim"?: number | null | undefined;
    "bf_nsamp"?: number | null | undefined;
    "no_smooth": boolean;
    "ref_fwhm"?: number | null | undefined;
    "mov_oob": boolean;
    "init_reg_save"?: InputPathType | null | undefined;
    "init_reg_save_only"?: InputPathType | null | undefined;
    "mat2par"?: InputPathType | null | undefined;
    "mat2rot"?: InputPathType | null | undefined;
    "par2mat"?: string | null | undefined;
    "lrrev"?: InputPathType | null | undefined;
    "landmarks"?: Array<string> | null | undefined;
    "rms"?: Array<string> | null | undefined;
    "movout"?: InputPathType | null | undefined;
    "mov_idither"?: InputPathType | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_coreg": mri_coreg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_coreg": mri_coreg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_coreg(...)`.
 *
 * @interface
 */
interface MriCoregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output registration (LTA format)
     */
    out_registration: OutputPathType;
    /**
     * File with output parameters
     */
    out_params: OutputPathType | null;
    /**
     * Final cost value file
     */
    out_cost: OutputPathType | null;
    /**
     * Saved initial registration
     */
    saved_init_reg: OutputPathType | null;
    /**
     * Saved initial registration (exit after save)
     */
    saved_init_reg_only: OutputPathType | null;
    /**
     * Preprocessed moving volume
     */
    movout_volume: OutputPathType | null;
    /**
     * Moving intensity dither volume
     */
    mov_idither_volume: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param movvol Source volume (mov)
 * @param refvol Target volume (ref or targ)
 * @param reg Output registration file
 * @param subject Subject ID, forces --ref-mask aparc+aseg.mgz
 * @param dof Degrees of freedom. Default is 6.
 * @param zscale Enable 7 dof registration with scaling in Z.
 * @param xztrans_yrot For 2D images: uses shifts in x and z and rotation about y (no scale).
 * @param xytrans_zrot For 2D images: uses shifts in x and y and rotation about z (no scale).
 * @param xytrans_zrot_xyscale_xyshear For 2D images: uses shifts in x and y, rotation about z, scale in xy, and xy shear.
 * @param ref_maskvol Mask reference volume with specified mask volume.
 * @param no_ref_mask Do not mask reference volume.
 * @param mov_maskvol Mask moving volume with specified mask volume.
 * @param threads Number of threads to use.
 * @param subjects_dir Freesurfer SUBJECTS_DIR.
 * @param regdat Specify registration data file.
 * @param no_coord_dither Turn off coordinate dithering.
 * @param no_intensity_dither Turn off intensity dithering.
 * @param spatial_scales Set spatial scales.
 * @param trans Initial translation in mm.
 * @param rot Initial rotation in degrees.
 * @param scale Initial scale.
 * @param shear Initial shear.
 * @param init_reg Initialize with given registration file.
 * @param out_param_file Save parameters in specified file.
 * @param out_cost_file Save final cost value in specified file.
 * @param no_cras0 Do not set translation parameters to align centers of mov and ref.
 * @param centroid Initialize by aligning centroids of mov and ref.
 * @param ras2ras Save output LTA as RAS2RAS.
 * @param nitersmax Set maximum number of iterations.
 * @param ftol Set function tolerance.
 * @param linmintol Set line minimum tolerance.
 * @param seed Set random seed for dithering.
 * @param sat Set saturation threshold.
 * @param conf_ref Conform the reference without rescaling.
 * @param no_bf Do not perform brute force search.
 * @param bf_lim Set constraint limits for brute force search.
 * @param bf_nsamp Set number of samples for brute force search.
 * @param no_smooth Do not apply smoothing to either ref or mov.
 * @param ref_fwhm Apply smoothing to ref with specified FWHM.
 * @param mov_oob Count mov voxels that are out-of-bounds as 0.
 * @param init_reg_save Save initial registration.
 * @param init_reg_save_only Save initial registration and exit.
 * @param mat2par Extract parameters out of registration.
 * @param mat2rot Convert registration to a pure rotation.
 * @param par2mat Convert parameters to a registration.
 * @param lrrev Approximate registration if you were to left-right reverse the pixels of the input image.
 * @param landmarks Convert landmarks to a registration.
 * @param rms Compute RMS difference between two registrations.
 * @param movout Save the mov after all preprocessing steps.
 * @param mov_idither Save the mov intensity dither volume.
 * @param debug Enable debugging mode.
 * @param checkopts Check options and exit without running.
 * @param version Print out version and exit.
 *
 * @returns Parameter dictionary
 */
function mri_coreg_params(
    movvol: InputPathType,
    refvol: InputPathType,
    reg: string,
    subject: string | null = null,
    dof: number | null = null,
    zscale: boolean = false,
    xztrans_yrot: boolean = false,
    xytrans_zrot: boolean = false,
    xytrans_zrot_xyscale_xyshear: boolean = false,
    ref_maskvol: InputPathType | null = null,
    no_ref_mask: boolean = false,
    mov_maskvol: InputPathType | null = null,
    threads: number | null = null,
    subjects_dir: string | null = null,
    regdat: string | null = null,
    no_coord_dither: boolean = false,
    no_intensity_dither: boolean = false,
    spatial_scales: Array<string> | null = null,
    trans: Array<number> | null = null,
    rot: Array<number> | null = null,
    scale: Array<number> | null = null,
    shear: Array<number> | null = null,
    init_reg: InputPathType | null = null,
    out_param_file: string | null = null,
    out_cost_file: string | null = null,
    no_cras0: boolean = false,
    centroid: boolean = false,
    ras2ras: boolean = false,
    nitersmax: number | null = null,
    ftol: number | null = null,
    linmintol: number | null = null,
    seed: number | null = null,
    sat: number | null = null,
    conf_ref: boolean = false,
    no_bf: boolean = false,
    bf_lim: number | null = null,
    bf_nsamp: number | null = null,
    no_smooth: boolean = false,
    ref_fwhm: number | null = null,
    mov_oob: boolean = false,
    init_reg_save: InputPathType | null = null,
    init_reg_save_only: InputPathType | null = null,
    mat2par: InputPathType | null = null,
    mat2rot: InputPathType | null = null,
    par2mat: string | null = null,
    lrrev: InputPathType | null = null,
    landmarks: Array<string> | null = null,
    rms: Array<string> | null = null,
    movout: InputPathType | null = null,
    mov_idither: InputPathType | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
): MriCoregParameters {
    const params = {
        "@type": "freesurfer.mri_coreg" as const,
        "movvol": movvol,
        "refvol": refvol,
        "reg": reg,
        "zscale": zscale,
        "xztrans_yrot": xztrans_yrot,
        "xytrans_zrot": xytrans_zrot,
        "xytrans_zrot_xyscale_xyshear": xytrans_zrot_xyscale_xyshear,
        "no_ref_mask": no_ref_mask,
        "no_coord_dither": no_coord_dither,
        "no_intensity_dither": no_intensity_dither,
        "no_cras0": no_cras0,
        "centroid": centroid,
        "ras2ras": ras2ras,
        "conf_ref": conf_ref,
        "no_bf": no_bf,
        "no_smooth": no_smooth,
        "mov_oob": mov_oob,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    };
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (dof !== null) {
        params["dof"] = dof;
    }
    if (ref_maskvol !== null) {
        params["ref_maskvol"] = ref_maskvol;
    }
    if (mov_maskvol !== null) {
        params["mov_maskvol"] = mov_maskvol;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (regdat !== null) {
        params["regdat"] = regdat;
    }
    if (spatial_scales !== null) {
        params["spatial_scales"] = spatial_scales;
    }
    if (trans !== null) {
        params["trans"] = trans;
    }
    if (rot !== null) {
        params["rot"] = rot;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (shear !== null) {
        params["shear"] = shear;
    }
    if (init_reg !== null) {
        params["init_reg"] = init_reg;
    }
    if (out_param_file !== null) {
        params["out_param_file"] = out_param_file;
    }
    if (out_cost_file !== null) {
        params["out_cost_file"] = out_cost_file;
    }
    if (nitersmax !== null) {
        params["nitersmax"] = nitersmax;
    }
    if (ftol !== null) {
        params["ftol"] = ftol;
    }
    if (linmintol !== null) {
        params["linmintol"] = linmintol;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (sat !== null) {
        params["sat"] = sat;
    }
    if (bf_lim !== null) {
        params["bf_lim"] = bf_lim;
    }
    if (bf_nsamp !== null) {
        params["bf_nsamp"] = bf_nsamp;
    }
    if (ref_fwhm !== null) {
        params["ref_fwhm"] = ref_fwhm;
    }
    if (init_reg_save !== null) {
        params["init_reg_save"] = init_reg_save;
    }
    if (init_reg_save_only !== null) {
        params["init_reg_save_only"] = init_reg_save_only;
    }
    if (mat2par !== null) {
        params["mat2par"] = mat2par;
    }
    if (mat2rot !== null) {
        params["mat2rot"] = mat2rot;
    }
    if (par2mat !== null) {
        params["par2mat"] = par2mat;
    }
    if (lrrev !== null) {
        params["lrrev"] = lrrev;
    }
    if (landmarks !== null) {
        params["landmarks"] = landmarks;
    }
    if (rms !== null) {
        params["rms"] = rms;
    }
    if (movout !== null) {
        params["movout"] = movout;
    }
    if (mov_idither !== null) {
        params["mov_idither"] = mov_idither;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_coreg_cargs(
    params: MriCoregParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_coreg");
    cargs.push(
        "-mov",
        execution.inputFile((params["movvol"] ?? null))
    );
    cargs.push(
        "-ref",
        execution.inputFile((params["refvol"] ?? null))
    );
    cargs.push(
        "-reg",
        (params["reg"] ?? null)
    );
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["dof"] ?? null) !== null) {
        cargs.push(
            "--dof",
            String((params["dof"] ?? null))
        );
    }
    if ((params["zscale"] ?? null)) {
        cargs.push("--zscale");
    }
    if ((params["xztrans_yrot"] ?? null)) {
        cargs.push("--xztrans+yrot");
    }
    if ((params["xytrans_zrot"] ?? null)) {
        cargs.push("--xytrans+zrot");
    }
    if ((params["xytrans_zrot_xyscale_xyshear"] ?? null)) {
        cargs.push("--xytrans+zrot+xyscale+xyshear");
    }
    if ((params["ref_maskvol"] ?? null) !== null) {
        cargs.push(
            "--ref-mask",
            execution.inputFile((params["ref_maskvol"] ?? null))
        );
    }
    if ((params["no_ref_mask"] ?? null)) {
        cargs.push("--no-ref-mask");
    }
    if ((params["mov_maskvol"] ?? null) !== null) {
        cargs.push(
            "--mov-mask",
            execution.inputFile((params["mov_maskvol"] ?? null))
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["regdat"] ?? null) !== null) {
        cargs.push(
            "--regdat",
            (params["regdat"] ?? null)
        );
    }
    if ((params["no_coord_dither"] ?? null)) {
        cargs.push("--no-coord-dither");
    }
    if ((params["no_intensity_dither"] ?? null)) {
        cargs.push("--no-intensity-dither");
    }
    if ((params["spatial_scales"] ?? null) !== null) {
        cargs.push(
            "--sep",
            ...(params["spatial_scales"] ?? null)
        );
    }
    if ((params["trans"] ?? null) !== null) {
        cargs.push(
            "--trans",
            ...(params["trans"] ?? null).map(String)
        );
    }
    if ((params["rot"] ?? null) !== null) {
        cargs.push(
            "--rot",
            ...(params["rot"] ?? null).map(String)
        );
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "--scale",
            ...(params["scale"] ?? null).map(String)
        );
    }
    if ((params["shear"] ?? null) !== null) {
        cargs.push(
            "--shear",
            ...(params["shear"] ?? null).map(String)
        );
    }
    if ((params["init_reg"] ?? null) !== null) {
        cargs.push(
            "--init-reg",
            execution.inputFile((params["init_reg"] ?? null))
        );
    }
    if ((params["out_param_file"] ?? null) !== null) {
        cargs.push(
            "--params",
            (params["out_param_file"] ?? null)
        );
    }
    if ((params["out_cost_file"] ?? null) !== null) {
        cargs.push(
            "--final-cost",
            (params["out_cost_file"] ?? null)
        );
    }
    if ((params["no_cras0"] ?? null)) {
        cargs.push("--no-cras0");
    }
    if ((params["centroid"] ?? null)) {
        cargs.push("--centroid");
    }
    if ((params["ras2ras"] ?? null)) {
        cargs.push("--ras2ras");
    }
    if ((params["nitersmax"] ?? null) !== null) {
        cargs.push(
            "--nitersmax",
            String((params["nitersmax"] ?? null))
        );
    }
    if ((params["ftol"] ?? null) !== null) {
        cargs.push(
            "--ftol",
            String((params["ftol"] ?? null))
        );
    }
    if ((params["linmintol"] ?? null) !== null) {
        cargs.push(
            "--linmintol",
            String((params["linmintol"] ?? null))
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["sat"] ?? null) !== null) {
        cargs.push(
            "--sat",
            String((params["sat"] ?? null))
        );
    }
    if ((params["conf_ref"] ?? null)) {
        cargs.push("--conf-ref");
    }
    if ((params["no_bf"] ?? null)) {
        cargs.push("--no-bf");
    }
    if ((params["bf_lim"] ?? null) !== null) {
        cargs.push(
            "--bf-lim",
            String((params["bf_lim"] ?? null))
        );
    }
    if ((params["bf_nsamp"] ?? null) !== null) {
        cargs.push(
            "--bf-nsamp",
            String((params["bf_nsamp"] ?? null))
        );
    }
    if ((params["no_smooth"] ?? null)) {
        cargs.push("--no-smooth");
    }
    if ((params["ref_fwhm"] ?? null) !== null) {
        cargs.push(
            "--ref-fwhm",
            String((params["ref_fwhm"] ?? null))
        );
    }
    if ((params["mov_oob"] ?? null)) {
        cargs.push("--mov-oob");
    }
    if ((params["init_reg_save"] ?? null) !== null) {
        cargs.push(
            "--init-reg-save",
            execution.inputFile((params["init_reg_save"] ?? null))
        );
    }
    if ((params["init_reg_save_only"] ?? null) !== null) {
        cargs.push(
            "--init-reg-save-only",
            execution.inputFile((params["init_reg_save_only"] ?? null))
        );
    }
    if ((params["mat2par"] ?? null) !== null) {
        cargs.push(
            "--mat2par",
            execution.inputFile((params["mat2par"] ?? null))
        );
    }
    if ((params["mat2rot"] ?? null) !== null) {
        cargs.push(
            "--mat2rot",
            execution.inputFile((params["mat2rot"] ?? null))
        );
    }
    if ((params["par2mat"] ?? null) !== null) {
        cargs.push(
            "--par2mat",
            (params["par2mat"] ?? null)
        );
    }
    if ((params["lrrev"] ?? null) !== null) {
        cargs.push(
            "--lrrev",
            execution.inputFile((params["lrrev"] ?? null))
        );
    }
    if ((params["landmarks"] ?? null) !== null) {
        cargs.push(
            "--landmarks",
            ...(params["landmarks"] ?? null)
        );
    }
    if ((params["rms"] ?? null) !== null) {
        cargs.push(
            "--rms",
            ...(params["rms"] ?? null)
        );
    }
    if ((params["movout"] ?? null) !== null) {
        cargs.push(
            "--movout",
            execution.inputFile((params["movout"] ?? null))
        );
    }
    if ((params["mov_idither"] ?? null) !== null) {
        cargs.push(
            "--mov-idither",
            execution.inputFile((params["mov_idither"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_coreg_outputs(
    params: MriCoregParameters,
    execution: Execution,
): MriCoregOutputs {
    const ret: MriCoregOutputs = {
        root: execution.outputFile("."),
        out_registration: execution.outputFile([(params["reg"] ?? null)].join('')),
        out_params: ((params["out_param_file"] ?? null) !== null) ? execution.outputFile([(params["out_param_file"] ?? null)].join('')) : null,
        out_cost: ((params["out_cost_file"] ?? null) !== null) ? execution.outputFile([(params["out_cost_file"] ?? null)].join('')) : null,
        saved_init_reg: ((params["init_reg_save"] ?? null) !== null) ? execution.outputFile([path.basename((params["init_reg_save"] ?? null))].join('')) : null,
        saved_init_reg_only: ((params["init_reg_save_only"] ?? null) !== null) ? execution.outputFile([path.basename((params["init_reg_save_only"] ?? null))].join('')) : null,
        movout_volume: ((params["movout"] ?? null) !== null) ? execution.outputFile([path.basename((params["movout"] ?? null))].join('')) : null,
        mov_idither_volume: ((params["mov_idither"] ?? null) !== null) ? execution.outputFile([path.basename((params["mov_idither"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * mri_coreg performs a linear registration between two volumes using the method compatible with spm_coreg.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriCoregOutputs`).
 */
function mri_coreg_execute(
    params: MriCoregParameters,
    execution: Execution,
): MriCoregOutputs {
    params = execution.params(params)
    const cargs = mri_coreg_cargs(params, execution)
    const ret = mri_coreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_coreg performs a linear registration between two volumes using the method compatible with spm_coreg.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param movvol Source volume (mov)
 * @param refvol Target volume (ref or targ)
 * @param reg Output registration file
 * @param subject Subject ID, forces --ref-mask aparc+aseg.mgz
 * @param dof Degrees of freedom. Default is 6.
 * @param zscale Enable 7 dof registration with scaling in Z.
 * @param xztrans_yrot For 2D images: uses shifts in x and z and rotation about y (no scale).
 * @param xytrans_zrot For 2D images: uses shifts in x and y and rotation about z (no scale).
 * @param xytrans_zrot_xyscale_xyshear For 2D images: uses shifts in x and y, rotation about z, scale in xy, and xy shear.
 * @param ref_maskvol Mask reference volume with specified mask volume.
 * @param no_ref_mask Do not mask reference volume.
 * @param mov_maskvol Mask moving volume with specified mask volume.
 * @param threads Number of threads to use.
 * @param subjects_dir Freesurfer SUBJECTS_DIR.
 * @param regdat Specify registration data file.
 * @param no_coord_dither Turn off coordinate dithering.
 * @param no_intensity_dither Turn off intensity dithering.
 * @param spatial_scales Set spatial scales.
 * @param trans Initial translation in mm.
 * @param rot Initial rotation in degrees.
 * @param scale Initial scale.
 * @param shear Initial shear.
 * @param init_reg Initialize with given registration file.
 * @param out_param_file Save parameters in specified file.
 * @param out_cost_file Save final cost value in specified file.
 * @param no_cras0 Do not set translation parameters to align centers of mov and ref.
 * @param centroid Initialize by aligning centroids of mov and ref.
 * @param ras2ras Save output LTA as RAS2RAS.
 * @param nitersmax Set maximum number of iterations.
 * @param ftol Set function tolerance.
 * @param linmintol Set line minimum tolerance.
 * @param seed Set random seed for dithering.
 * @param sat Set saturation threshold.
 * @param conf_ref Conform the reference without rescaling.
 * @param no_bf Do not perform brute force search.
 * @param bf_lim Set constraint limits for brute force search.
 * @param bf_nsamp Set number of samples for brute force search.
 * @param no_smooth Do not apply smoothing to either ref or mov.
 * @param ref_fwhm Apply smoothing to ref with specified FWHM.
 * @param mov_oob Count mov voxels that are out-of-bounds as 0.
 * @param init_reg_save Save initial registration.
 * @param init_reg_save_only Save initial registration and exit.
 * @param mat2par Extract parameters out of registration.
 * @param mat2rot Convert registration to a pure rotation.
 * @param par2mat Convert parameters to a registration.
 * @param lrrev Approximate registration if you were to left-right reverse the pixels of the input image.
 * @param landmarks Convert landmarks to a registration.
 * @param rms Compute RMS difference between two registrations.
 * @param movout Save the mov after all preprocessing steps.
 * @param mov_idither Save the mov intensity dither volume.
 * @param debug Enable debugging mode.
 * @param checkopts Check options and exit without running.
 * @param version Print out version and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCoregOutputs`).
 */
function mri_coreg(
    movvol: InputPathType,
    refvol: InputPathType,
    reg: string,
    subject: string | null = null,
    dof: number | null = null,
    zscale: boolean = false,
    xztrans_yrot: boolean = false,
    xytrans_zrot: boolean = false,
    xytrans_zrot_xyscale_xyshear: boolean = false,
    ref_maskvol: InputPathType | null = null,
    no_ref_mask: boolean = false,
    mov_maskvol: InputPathType | null = null,
    threads: number | null = null,
    subjects_dir: string | null = null,
    regdat: string | null = null,
    no_coord_dither: boolean = false,
    no_intensity_dither: boolean = false,
    spatial_scales: Array<string> | null = null,
    trans: Array<number> | null = null,
    rot: Array<number> | null = null,
    scale: Array<number> | null = null,
    shear: Array<number> | null = null,
    init_reg: InputPathType | null = null,
    out_param_file: string | null = null,
    out_cost_file: string | null = null,
    no_cras0: boolean = false,
    centroid: boolean = false,
    ras2ras: boolean = false,
    nitersmax: number | null = null,
    ftol: number | null = null,
    linmintol: number | null = null,
    seed: number | null = null,
    sat: number | null = null,
    conf_ref: boolean = false,
    no_bf: boolean = false,
    bf_lim: number | null = null,
    bf_nsamp: number | null = null,
    no_smooth: boolean = false,
    ref_fwhm: number | null = null,
    mov_oob: boolean = false,
    init_reg_save: InputPathType | null = null,
    init_reg_save_only: InputPathType | null = null,
    mat2par: InputPathType | null = null,
    mat2rot: InputPathType | null = null,
    par2mat: string | null = null,
    lrrev: InputPathType | null = null,
    landmarks: Array<string> | null = null,
    rms: Array<string> | null = null,
    movout: InputPathType | null = null,
    mov_idither: InputPathType | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriCoregOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_COREG_METADATA);
    const params = mri_coreg_params(movvol, refvol, reg, subject, dof, zscale, xztrans_yrot, xytrans_zrot, xytrans_zrot_xyscale_xyshear, ref_maskvol, no_ref_mask, mov_maskvol, threads, subjects_dir, regdat, no_coord_dither, no_intensity_dither, spatial_scales, trans, rot, scale, shear, init_reg, out_param_file, out_cost_file, no_cras0, centroid, ras2ras, nitersmax, ftol, linmintol, seed, sat, conf_ref, no_bf, bf_lim, bf_nsamp, no_smooth, ref_fwhm, mov_oob, init_reg_save, init_reg_save_only, mat2par, mat2rot, par2mat, lrrev, landmarks, rms, movout, mov_idither, debug, checkopts, version)
    return mri_coreg_execute(params, execution);
}


export {
      MRI_COREG_METADATA,
      MriCoregOutputs,
      MriCoregParameters,
      mri_coreg,
      mri_coreg_cargs,
      mri_coreg_execute,
      mri_coreg_outputs,
      mri_coreg_params,
};
