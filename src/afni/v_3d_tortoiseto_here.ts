// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TORTOISETO_HERE_METADATA: Metadata = {
    id: "daf64b9d38f580b031c7bf8ec8344f0a10916677.boutiques",
    name: "3dTORTOISEtoHere",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTortoisetoHereParameters {
    "__STYXTYPE__": "3dTORTOISEtoHere";
    "dt_tort": InputPathType;
    "prefix": string;
    "scale_factor"?: number | null | undefined;
    "flip_x": boolean;
    "flip_y": boolean;
    "flip_z": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dTORTOISEtoHere": v_3d_tortoiseto_here_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dTORTOISEtoHere": v_3d_tortoiseto_here_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tortoiseto_here(...)`.
 *
 * @interface
 */
interface V3dTortoisetoHereOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output AFNI-style DT file with the following ordering of the 6 bricks: Dxx, Dxy, Dyy, Dxz, Dyz, Dzz.
     */
    output_dt_file: OutputPathType;
}


function v_3d_tortoiseto_here_params(
    dt_tort: InputPathType,
    prefix: string,
    scale_factor: number | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
): V3dTortoisetoHereParameters {
    /**
     * Build parameters.
    
     * @param dt_tort Diffusion tensor file with six bricks of DT components ordered in the TORTOISE manner (Dxx, Dyy, Dzz, Dxy, Dxz, Dyz).
     * @param prefix Output file name prefix. Will have N+1 bricks when GRADFILE has N rows of gradients.
     * @param scale_factor Optional switch to rescale the DT elements, dividing by a number X>0.
     * @param flip_x Change sign of the first element of (inner) eigenvectors.
     * @param flip_y Change sign of the second element of (inner) eigenvectors.
     * @param flip_z Change sign of the third element of (inner) eigenvectors.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dTORTOISEtoHere" as const,
        "dt_tort": dt_tort,
        "prefix": prefix,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
    };
    if (scale_factor !== null) {
        params["scale_factor"] = scale_factor;
    }
    return params;
}


function v_3d_tortoiseto_here_cargs(
    params: V3dTortoisetoHereParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dTORTOISEtoHere");
    cargs.push(
        "-dt_tort",
        execution.inputFile((params["dt_tort"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["scale_factor"] ?? null) !== null) {
        cargs.push(
            "-scale_fac",
            String((params["scale_factor"] ?? null))
        );
    }
    if ((params["flip_x"] ?? null)) {
        cargs.push("-flip_x");
    }
    if ((params["flip_y"] ?? null)) {
        cargs.push("-flip_y");
    }
    if ((params["flip_z"] ?? null)) {
        cargs.push("-flip_z");
    }
    return cargs;
}


function v_3d_tortoiseto_here_outputs(
    params: V3dTortoisetoHereParameters,
    execution: Execution,
): V3dTortoisetoHereOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dTortoisetoHereOutputs = {
        root: execution.outputFile("."),
        output_dt_file: execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


function v_3d_tortoiseto_here_execute(
    params: V3dTortoisetoHereParameters,
    execution: Execution,
): V3dTortoisetoHereOutputs {
    /**
     * Convert standard TORTOISE DTs (diagonal-first format) to standard AFNI (lower triangular, row-wise) format.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dTortoisetoHereOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_tortoiseto_here_cargs(params, execution)
    const ret = v_3d_tortoiseto_here_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_tortoiseto_here(
    dt_tort: InputPathType,
    prefix: string,
    scale_factor: number | null = null,
    flip_x: boolean = false,
    flip_y: boolean = false,
    flip_z: boolean = false,
    runner: Runner | null = null,
): V3dTortoisetoHereOutputs {
    /**
     * Convert standard TORTOISE DTs (diagonal-first format) to standard AFNI (lower triangular, row-wise) format.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dt_tort Diffusion tensor file with six bricks of DT components ordered in the TORTOISE manner (Dxx, Dyy, Dzz, Dxy, Dxz, Dyz).
     * @param prefix Output file name prefix. Will have N+1 bricks when GRADFILE has N rows of gradients.
     * @param scale_factor Optional switch to rescale the DT elements, dividing by a number X>0.
     * @param flip_x Change sign of the first element of (inner) eigenvectors.
     * @param flip_y Change sign of the second element of (inner) eigenvectors.
     * @param flip_z Change sign of the third element of (inner) eigenvectors.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dTortoisetoHereOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TORTOISETO_HERE_METADATA);
    const params = v_3d_tortoiseto_here_params(dt_tort, prefix, scale_factor, flip_x, flip_y, flip_z)
    return v_3d_tortoiseto_here_execute(params, execution);
}


export {
      V3dTortoisetoHereOutputs,
      V3dTortoisetoHereParameters,
      V_3D_TORTOISETO_HERE_METADATA,
      v_3d_tortoiseto_here,
      v_3d_tortoiseto_here_params,
};
