// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANATOMI_CUTS_UTILS_METADATA: Metadata = {
    id: "5b8fc2fbd044825ca8524543fcf4b4b3d56cb1f7.boutiques",
    name: "anatomiCutsUtils",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface AnatomiCutsUtilsParameters {
    "@type": "freesurfer.anatomiCutsUtils";
    "modules"?: Array<string> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.anatomiCutsUtils": anatomi_cuts_utils_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `anatomi_cuts_utils(...)`.
 *
 * @interface
 */
interface AnatomiCutsUtilsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param modules Specify the modules to import for processing. Ensure necessary modules like 'graph_tools' are installed.
 *
 * @returns Parameter dictionary
 */
function anatomi_cuts_utils_params(
    modules: Array<string> | null = null,
): AnatomiCutsUtilsParameters {
    const params = {
        "@type": "freesurfer.anatomiCutsUtils" as const,
    };
    if (modules !== null) {
        params["modules"] = modules;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function anatomi_cuts_utils_cargs(
    params: AnatomiCutsUtilsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("anatomiCutsUtils");
    if ((params["modules"] ?? null) !== null) {
        cargs.push(...(params["modules"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function anatomi_cuts_utils_outputs(
    params: AnatomiCutsUtilsParameters,
    execution: Execution,
): AnatomiCutsUtilsOutputs {
    const ret: AnatomiCutsUtilsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool for anatomical segmentation using graph-based methods.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AnatomiCutsUtilsOutputs`).
 */
function anatomi_cuts_utils_execute(
    params: AnatomiCutsUtilsParameters,
    runner: Runner | null = null,
): AnatomiCutsUtilsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANATOMI_CUTS_UTILS_METADATA);
    params = execution.params(params)
    const cargs = anatomi_cuts_utils_cargs(params, execution)
    const ret = anatomi_cuts_utils_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for anatomical segmentation using graph-based methods.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param modules Specify the modules to import for processing. Ensure necessary modules like 'graph_tools' are installed.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AnatomiCutsUtilsOutputs`).
 */
function anatomi_cuts_utils(
    modules: Array<string> | null = null,
    runner: Runner | null = null,
): AnatomiCutsUtilsOutputs {
    const params = anatomi_cuts_utils_params(modules)
    return anatomi_cuts_utils_execute(params, runner);
}


export {
      ANATOMI_CUTS_UTILS_METADATA,
      AnatomiCutsUtilsOutputs,
      AnatomiCutsUtilsParameters,
      anatomi_cuts_utils,
      anatomi_cuts_utils_execute,
      anatomi_cuts_utils_params,
};
