// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIXELCROP_METADATA: Metadata = {
    id: "df585f30c2a7738dc8886c2e7c7172b7e6cdc09c.boutiques",
    name: "fixelcrop",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface FixelcropConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface FixelcropParameters {
    "__STYXTYPE__": "fixelcrop";
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<FixelcropConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input_fixel_directory": InputPathType;
    "input_fixel_mask": InputPathType;
    "output_fixel_directory": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fixelcrop": fixelcrop_cargs,
        "config": fixelcrop_config_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fixelcrop": fixelcrop_outputs,
    };
    return outputsFuncs[t];
}


function fixelcrop_config_params(
    key: string,
    value: string,
): FixelcropConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function fixelcrop_config_cargs(
    params: FixelcropConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `fixelcrop(...)`.
 *
 * @interface
 */
interface FixelcropOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output directory to store the cropped directions and data files
     */
    output_fixel_directory: OutputPathType;
}


function fixelcrop_params(
    input_fixel_directory: InputPathType,
    input_fixel_mask: InputPathType,
    output_fixel_directory: string,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelcropConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): FixelcropParameters {
    /**
     * Build parameters.
    
     * @param input_fixel_directory input fixel directory, all data files and directions file will be cropped and saved in the output fixel directory
     * @param input_fixel_mask the input fixel data file defining which fixels to crop. Fixels with zero values will be removed
     * @param output_fixel_directory the output directory to store the cropped directions and data files
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fixelcrop" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input_fixel_directory": input_fixel_directory,
        "input_fixel_mask": input_fixel_mask,
        "output_fixel_directory": output_fixel_directory,
    };
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function fixelcrop_cargs(
    params: FixelcropParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fixelcrop");
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input_fixel_directory"] ?? null)));
    cargs.push(execution.inputFile((params["input_fixel_mask"] ?? null)));
    cargs.push((params["output_fixel_directory"] ?? null));
    return cargs;
}


function fixelcrop_outputs(
    params: FixelcropParameters,
    execution: Execution,
): FixelcropOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FixelcropOutputs = {
        root: execution.outputFile("."),
        output_fixel_directory: execution.outputFile([(params["output_fixel_directory"] ?? null)].join('')),
    };
    return ret;
}


function fixelcrop_execute(
    params: FixelcropParameters,
    execution: Execution,
): FixelcropOutputs {
    /**
     * Crop/remove fixels from sparse fixel image using a binary fixel mask.
     * 
     * The mask must be input as a fixel data file the same dimensions as the fixel data file(s) to be cropped.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FixelcropOutputs`).
     */
    params = execution.params(params)
    const cargs = fixelcrop_cargs(params, execution)
    const ret = fixelcrop_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fixelcrop(
    input_fixel_directory: InputPathType,
    input_fixel_mask: InputPathType,
    output_fixel_directory: string,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelcropConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): FixelcropOutputs {
    /**
     * Crop/remove fixels from sparse fixel image using a binary fixel mask.
     * 
     * The mask must be input as a fixel data file the same dimensions as the fixel data file(s) to be cropped.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param input_fixel_directory input fixel directory, all data files and directions file will be cropped and saved in the output fixel directory
     * @param input_fixel_mask the input fixel data file defining which fixels to crop. Fixels with zero values will be removed
     * @param output_fixel_directory the output directory to store the cropped directions and data files
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FixelcropOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIXELCROP_METADATA);
    const params = fixelcrop_params(input_fixel_directory, input_fixel_mask, output_fixel_directory, info, quiet, debug, force, nthreads, config, help, version)
    return fixelcrop_execute(params, execution);
}


export {
      FIXELCROP_METADATA,
      FixelcropConfigParameters,
      FixelcropOutputs,
      FixelcropParameters,
      fixelcrop,
      fixelcrop_config_params,
      fixelcrop_params,
};
