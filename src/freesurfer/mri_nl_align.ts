// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_NL_ALIGN_METADATA: Metadata = {
    id: "d2089af8fda6dbbdddaf93e7fb4474ff839ab66a.boutiques",
    name: "mri_nl_align",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriNlAlignParameters {
    "@type"?: "freesurfer/mri_nl_align";
    "source": InputPathType;
    "target": InputPathType;
    "warp": string;
    "debug_voxel"?: Array<number> | null | undefined;
    "debug_node"?: Array<number> | null | undefined;
    "no_neg"?: number | null | undefined;
    "renormalize"?: number | null | undefined;
    "aseg_flag": boolean;
    "diag_volume"?: string | null | undefined;
    "optimal_flag": boolean;
    "momentum_flag": boolean;
    "fixed_flag": boolean;
    "distance"?: number | null | undefined;
    "dtrans"?: number | null | undefined;
    "match_peak_flag": boolean;
    "erode"?: number | null | undefined;
    "match_mean"?: number | null | undefined;
    "intensity"?: number | null | undefined;
    "ll"?: number | null | undefined;
    "noregrid_flag": boolean;
    "regrid_flag": boolean;
    "view"?: Array<number> | null | undefined;
    "levels"?: number | null | undefined;
    "area_smoothness"?: number | null | undefined;
    "asmooth"?: number | null | undefined;
    "area"?: number | null | undefined;
    "tolerance"?: number | null | undefined;
    "sigma"?: number | null | undefined;
    "min_sigma"?: number | null | undefined;
    "ribbon"?: InputPathType | null | undefined;
    "rthresh"?: number | null | undefined;
    "scale"?: number | null | undefined;
    "dt"?: number | null | undefined;
    "passes"?: number | null | undefined;
    "skip"?: number | null | undefined;
    "apply"?: number | null | undefined;
    "distance_log"?: number | null | undefined;
    "momentum"?: number | null | undefined;
    "iterations"?: number | null | undefined;
    "smoothness"?: number | null | undefined;
    "transform"?: InputPathType | null | undefined;
    "inverse_transform"?: InputPathType | null | undefined;
    "binary"?: number | null | undefined;
    "jacobian"?: number | null | undefined;
    "disable_zero_locations"?: number | null | undefined;
    "smooth_averages"?: number | null | undefined;
    "exp_k"?: number | null | undefined;
    "diagnostics"?: number | null | undefined;
}
type MriNlAlignParametersTagged = Required<Pick<MriNlAlignParameters, '@type'>> & MriNlAlignParameters;


/**
 * Output object returned when calling `MriNlAlignParameters(...)`.
 *
 * @interface
 */
interface MriNlAlignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting warp output file after alignment
     */
    warp_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source Input source image file
 * @param target Input target image file
 * @param warp Output warp file
 * @param debug_voxel Debug voxel coordinates (Gx, Gy, Gz)
 * @param debug_node Debug node coordinates (Gx, Gy, Gz)
 * @param no_neg Control allowing temporary folds during numerical minimization
 * @param renormalize Control for renormalizing intensities
 * @param aseg_flag Treat inputs as segmentations
 * @param diag_volume Write d2 diagnostics for input volume
 * @param optimal_flag Use line search optimization
 * @param momentum_flag Use fixed time-step integration
 * @param fixed_flag Use fixed time-step integration
 * @param distance Expand border by specified mm every outer cycle
 * @param dtrans Set distance transform coefficient
 * @param match_peak_flag Match peak of intensity ratio histogram
 * @param erode Erode source and target image specified times before morphing
 * @param match_mean Control for matching peak of intensity ratio histogram
 * @param intensity Set l_log_likelihood to specified value
 * @param ll Set l_log_likelihood to specified value
 * @param noregrid_flag Disable regridding
 * @param regrid_flag Enable regridding
 * @param view View voxel coordinates (Gx, Gy, Gz)
 * @param levels Set levels to specified value
 * @param area_smoothness Set l_area_smoothness to specified value
 * @param asmooth Set l_area_smoothness to specified value
 * @param area Set l_area to specified value
 * @param tolerance Set tolerance to specified value
 * @param sigma Set sigma to specified value
 * @param min_sigma Set minimum sigma value
 * @param ribbon Read ribbon from specified file and insert into aseg
 * @param rthresh Set compression ratio threshold to specified value
 * @param scale Scale input values by specified factor
 * @param dt Set dt to specified value
 * @param passes Integrate in specified number of passes
 * @param skip Skip specified number of voxels in source data
 * @param apply Control for applying transform after registration
 * @param distance_log Set l_distance to specified value
 * @param momentum Set momentum to specified value
 * @param iterations Set number of iterations to specified value
 * @param smoothness Set l_smoothness to specified value
 * @param transform Read the forward transform from specified file
 * @param inverse_transform Read the inverse transform from specified file
 * @param binary Set l_binary to specified value
 * @param jacobian Set l_jacobian to specified value
 * @param disable_zero_locations Control for disabling zero image locations
 * @param smooth_averages Smooth gradient with specified number of averages
 * @param exp_k Set exp_k to specified value
 * @param diagnostics Write diagnostics at each specified iteration
 *
 * @returns Parameter dictionary
 */
function mri_nl_align_params(
    source: InputPathType,
    target: InputPathType,
    warp: string,
    debug_voxel: Array<number> | null = null,
    debug_node: Array<number> | null = null,
    no_neg: number | null = null,
    renormalize: number | null = null,
    aseg_flag: boolean = false,
    diag_volume: string | null = null,
    optimal_flag: boolean = false,
    momentum_flag: boolean = false,
    fixed_flag: boolean = false,
    distance: number | null = null,
    dtrans: number | null = null,
    match_peak_flag: boolean = false,
    erode: number | null = null,
    match_mean: number | null = null,
    intensity: number | null = null,
    ll: number | null = null,
    noregrid_flag: boolean = false,
    regrid_flag: boolean = false,
    view: Array<number> | null = null,
    levels: number | null = null,
    area_smoothness: number | null = null,
    asmooth: number | null = null,
    area: number | null = null,
    tolerance: number | null = null,
    sigma: number | null = null,
    min_sigma: number | null = null,
    ribbon: InputPathType | null = null,
    rthresh: number | null = null,
    scale: number | null = null,
    dt: number | null = null,
    passes: number | null = null,
    skip: number | null = null,
    apply: number | null = null,
    distance_log: number | null = null,
    momentum: number | null = null,
    iterations: number | null = null,
    smoothness: number | null = null,
    transform: InputPathType | null = null,
    inverse_transform: InputPathType | null = null,
    binary: number | null = null,
    jacobian: number | null = null,
    disable_zero_locations: number | null = null,
    smooth_averages: number | null = null,
    exp_k: number | null = null,
    diagnostics: number | null = null,
): MriNlAlignParametersTagged {
    const params = {
        "@type": "freesurfer/mri_nl_align" as const,
        "source": source,
        "target": target,
        "warp": warp,
        "aseg_flag": aseg_flag,
        "optimal_flag": optimal_flag,
        "momentum_flag": momentum_flag,
        "fixed_flag": fixed_flag,
        "match_peak_flag": match_peak_flag,
        "noregrid_flag": noregrid_flag,
        "regrid_flag": regrid_flag,
    };
    if (debug_voxel !== null) {
        params["debug_voxel"] = debug_voxel;
    }
    if (debug_node !== null) {
        params["debug_node"] = debug_node;
    }
    if (no_neg !== null) {
        params["no_neg"] = no_neg;
    }
    if (renormalize !== null) {
        params["renormalize"] = renormalize;
    }
    if (diag_volume !== null) {
        params["diag_volume"] = diag_volume;
    }
    if (distance !== null) {
        params["distance"] = distance;
    }
    if (dtrans !== null) {
        params["dtrans"] = dtrans;
    }
    if (erode !== null) {
        params["erode"] = erode;
    }
    if (match_mean !== null) {
        params["match_mean"] = match_mean;
    }
    if (intensity !== null) {
        params["intensity"] = intensity;
    }
    if (ll !== null) {
        params["ll"] = ll;
    }
    if (view !== null) {
        params["view"] = view;
    }
    if (levels !== null) {
        params["levels"] = levels;
    }
    if (area_smoothness !== null) {
        params["area_smoothness"] = area_smoothness;
    }
    if (asmooth !== null) {
        params["asmooth"] = asmooth;
    }
    if (area !== null) {
        params["area"] = area;
    }
    if (tolerance !== null) {
        params["tolerance"] = tolerance;
    }
    if (sigma !== null) {
        params["sigma"] = sigma;
    }
    if (min_sigma !== null) {
        params["min_sigma"] = min_sigma;
    }
    if (ribbon !== null) {
        params["ribbon"] = ribbon;
    }
    if (rthresh !== null) {
        params["rthresh"] = rthresh;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (dt !== null) {
        params["dt"] = dt;
    }
    if (passes !== null) {
        params["passes"] = passes;
    }
    if (skip !== null) {
        params["skip"] = skip;
    }
    if (apply !== null) {
        params["apply"] = apply;
    }
    if (distance_log !== null) {
        params["distance_log"] = distance_log;
    }
    if (momentum !== null) {
        params["momentum"] = momentum;
    }
    if (iterations !== null) {
        params["iterations"] = iterations;
    }
    if (smoothness !== null) {
        params["smoothness"] = smoothness;
    }
    if (transform !== null) {
        params["transform"] = transform;
    }
    if (inverse_transform !== null) {
        params["inverse_transform"] = inverse_transform;
    }
    if (binary !== null) {
        params["binary"] = binary;
    }
    if (jacobian !== null) {
        params["jacobian"] = jacobian;
    }
    if (disable_zero_locations !== null) {
        params["disable_zero_locations"] = disable_zero_locations;
    }
    if (smooth_averages !== null) {
        params["smooth_averages"] = smooth_averages;
    }
    if (exp_k !== null) {
        params["exp_k"] = exp_k;
    }
    if (diagnostics !== null) {
        params["diagnostics"] = diagnostics;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_nl_align_cargs(
    params: MriNlAlignParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_nl_align");
    cargs.push(execution.inputFile((params["source"] ?? null)));
    cargs.push(execution.inputFile((params["target"] ?? null)));
    cargs.push((params["warp"] ?? null));
    if ((params["debug_voxel"] ?? null) !== null) {
        cargs.push(
            "-debug_voxel",
            ...(params["debug_voxel"] ?? null).map(String)
        );
    }
    if ((params["debug_node"] ?? null) !== null) {
        cargs.push(
            "-debug_node",
            ...(params["debug_node"] ?? null).map(String)
        );
    }
    if ((params["no_neg"] ?? null) !== null) {
        cargs.push(
            "-noneg",
            String((params["no_neg"] ?? null))
        );
    }
    if ((params["renormalize"] ?? null) !== null) {
        cargs.push(
            "-renormalize",
            String((params["renormalize"] ?? null))
        );
    }
    if ((params["aseg_flag"] ?? false)) {
        cargs.push("-aseg");
    }
    if ((params["diag_volume"] ?? null) !== null) {
        cargs.push(
            "-diag2",
            (params["diag_volume"] ?? null)
        );
    }
    if ((params["optimal_flag"] ?? false)) {
        cargs.push("-OPTIMAL");
    }
    if ((params["momentum_flag"] ?? false)) {
        cargs.push("-MOMENTUM");
    }
    if ((params["fixed_flag"] ?? false)) {
        cargs.push("-FIXED");
    }
    if ((params["distance"] ?? null) !== null) {
        cargs.push(
            "-distance",
            String((params["distance"] ?? null))
        );
    }
    if ((params["dtrans"] ?? null) !== null) {
        cargs.push(
            "-dtrans",
            String((params["dtrans"] ?? null))
        );
    }
    if ((params["match_peak_flag"] ?? false)) {
        cargs.push("-match_peak");
    }
    if ((params["erode"] ?? null) !== null) {
        cargs.push(
            "-erode",
            String((params["erode"] ?? null))
        );
    }
    if ((params["match_mean"] ?? null) !== null) {
        cargs.push(
            "-match_mean",
            String((params["match_mean"] ?? null))
        );
    }
    if ((params["intensity"] ?? null) !== null) {
        cargs.push(
            "-intensity",
            String((params["intensity"] ?? null))
        );
    }
    if ((params["ll"] ?? null) !== null) {
        cargs.push(
            "-ll",
            String((params["ll"] ?? null))
        );
    }
    if ((params["noregrid_flag"] ?? false)) {
        cargs.push("-noregrid");
    }
    if ((params["regrid_flag"] ?? false)) {
        cargs.push("-regrid");
    }
    if ((params["view"] ?? null) !== null) {
        cargs.push(
            "-view",
            ...(params["view"] ?? null).map(String)
        );
    }
    if ((params["levels"] ?? null) !== null) {
        cargs.push(
            "-levels",
            String((params["levels"] ?? null))
        );
    }
    if ((params["area_smoothness"] ?? null) !== null) {
        cargs.push(
            "-areasmoothness",
            String((params["area_smoothness"] ?? null))
        );
    }
    if ((params["asmooth"] ?? null) !== null) {
        cargs.push(
            "-asmooth",
            String((params["asmooth"] ?? null))
        );
    }
    if ((params["area"] ?? null) !== null) {
        cargs.push(
            "-area",
            String((params["area"] ?? null))
        );
    }
    if ((params["tolerance"] ?? null) !== null) {
        cargs.push(
            "-tol",
            String((params["tolerance"] ?? null))
        );
    }
    if ((params["sigma"] ?? null) !== null) {
        cargs.push(
            "-sigma",
            String((params["sigma"] ?? null))
        );
    }
    if ((params["min_sigma"] ?? null) !== null) {
        cargs.push(
            "-min_sigma",
            String((params["min_sigma"] ?? null))
        );
    }
    if ((params["ribbon"] ?? null) !== null) {
        cargs.push(
            "-ribbon",
            execution.inputFile((params["ribbon"] ?? null))
        );
    }
    if ((params["rthresh"] ?? null) !== null) {
        cargs.push(
            "-rthresh",
            String((params["rthresh"] ?? null))
        );
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-scale",
            String((params["scale"] ?? null))
        );
    }
    if ((params["dt"] ?? null) !== null) {
        cargs.push(
            "-dt",
            String((params["dt"] ?? null))
        );
    }
    if ((params["passes"] ?? null) !== null) {
        cargs.push(
            "-passes",
            String((params["passes"] ?? null))
        );
    }
    if ((params["skip"] ?? null) !== null) {
        cargs.push(
            "-skip",
            String((params["skip"] ?? null))
        );
    }
    if ((params["apply"] ?? null) !== null) {
        cargs.push(
            "-apply",
            String((params["apply"] ?? null))
        );
    }
    if ((params["distance_log"] ?? null) !== null) {
        cargs.push(
            "-D",
            String((params["distance_log"] ?? null))
        );
    }
    if ((params["momentum"] ?? null) !== null) {
        cargs.push(
            "-M",
            String((params["momentum"] ?? null))
        );
    }
    if ((params["iterations"] ?? null) !== null) {
        cargs.push(
            "-N",
            String((params["iterations"] ?? null))
        );
    }
    if ((params["smoothness"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["smoothness"] ?? null))
        );
    }
    if ((params["transform"] ?? null) !== null) {
        cargs.push(
            "-T",
            execution.inputFile((params["transform"] ?? null))
        );
    }
    if ((params["inverse_transform"] ?? null) !== null) {
        cargs.push(
            "-I",
            execution.inputFile((params["inverse_transform"] ?? null))
        );
    }
    if ((params["binary"] ?? null) !== null) {
        cargs.push(
            "-B",
            String((params["binary"] ?? null))
        );
    }
    if ((params["jacobian"] ?? null) !== null) {
        cargs.push(
            "-J",
            String((params["jacobian"] ?? null))
        );
    }
    if ((params["disable_zero_locations"] ?? null) !== null) {
        cargs.push(
            "-Z",
            String((params["disable_zero_locations"] ?? null))
        );
    }
    if ((params["smooth_averages"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["smooth_averages"] ?? null))
        );
    }
    if ((params["exp_k"] ?? null) !== null) {
        cargs.push(
            "-K",
            String((params["exp_k"] ?? null))
        );
    }
    if ((params["diagnostics"] ?? null) !== null) {
        cargs.push(
            "-W",
            String((params["diagnostics"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_nl_align_outputs(
    params: MriNlAlignParameters,
    execution: Execution,
): MriNlAlignOutputs {
    const ret: MriNlAlignOutputs = {
        root: execution.outputFile("."),
        warp_output: execution.outputFile([(params["warp"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_nl_align
 *
 * mri_nl_align aligns two images using nonlinear registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNlAlignOutputs`).
 */
function mri_nl_align_execute(
    params: MriNlAlignParameters,
    runner: Runner | null = null,
): MriNlAlignOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_NL_ALIGN_METADATA);
    params = execution.params(params)
    const cargs = mri_nl_align_cargs(params, execution)
    const ret = mri_nl_align_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_nl_align
 *
 * mri_nl_align aligns two images using nonlinear registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source Input source image file
 * @param target Input target image file
 * @param warp Output warp file
 * @param debug_voxel Debug voxel coordinates (Gx, Gy, Gz)
 * @param debug_node Debug node coordinates (Gx, Gy, Gz)
 * @param no_neg Control allowing temporary folds during numerical minimization
 * @param renormalize Control for renormalizing intensities
 * @param aseg_flag Treat inputs as segmentations
 * @param diag_volume Write d2 diagnostics for input volume
 * @param optimal_flag Use line search optimization
 * @param momentum_flag Use fixed time-step integration
 * @param fixed_flag Use fixed time-step integration
 * @param distance Expand border by specified mm every outer cycle
 * @param dtrans Set distance transform coefficient
 * @param match_peak_flag Match peak of intensity ratio histogram
 * @param erode Erode source and target image specified times before morphing
 * @param match_mean Control for matching peak of intensity ratio histogram
 * @param intensity Set l_log_likelihood to specified value
 * @param ll Set l_log_likelihood to specified value
 * @param noregrid_flag Disable regridding
 * @param regrid_flag Enable regridding
 * @param view View voxel coordinates (Gx, Gy, Gz)
 * @param levels Set levels to specified value
 * @param area_smoothness Set l_area_smoothness to specified value
 * @param asmooth Set l_area_smoothness to specified value
 * @param area Set l_area to specified value
 * @param tolerance Set tolerance to specified value
 * @param sigma Set sigma to specified value
 * @param min_sigma Set minimum sigma value
 * @param ribbon Read ribbon from specified file and insert into aseg
 * @param rthresh Set compression ratio threshold to specified value
 * @param scale Scale input values by specified factor
 * @param dt Set dt to specified value
 * @param passes Integrate in specified number of passes
 * @param skip Skip specified number of voxels in source data
 * @param apply Control for applying transform after registration
 * @param distance_log Set l_distance to specified value
 * @param momentum Set momentum to specified value
 * @param iterations Set number of iterations to specified value
 * @param smoothness Set l_smoothness to specified value
 * @param transform Read the forward transform from specified file
 * @param inverse_transform Read the inverse transform from specified file
 * @param binary Set l_binary to specified value
 * @param jacobian Set l_jacobian to specified value
 * @param disable_zero_locations Control for disabling zero image locations
 * @param smooth_averages Smooth gradient with specified number of averages
 * @param exp_k Set exp_k to specified value
 * @param diagnostics Write diagnostics at each specified iteration
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriNlAlignOutputs`).
 */
function mri_nl_align(
    source: InputPathType,
    target: InputPathType,
    warp: string,
    debug_voxel: Array<number> | null = null,
    debug_node: Array<number> | null = null,
    no_neg: number | null = null,
    renormalize: number | null = null,
    aseg_flag: boolean = false,
    diag_volume: string | null = null,
    optimal_flag: boolean = false,
    momentum_flag: boolean = false,
    fixed_flag: boolean = false,
    distance: number | null = null,
    dtrans: number | null = null,
    match_peak_flag: boolean = false,
    erode: number | null = null,
    match_mean: number | null = null,
    intensity: number | null = null,
    ll: number | null = null,
    noregrid_flag: boolean = false,
    regrid_flag: boolean = false,
    view: Array<number> | null = null,
    levels: number | null = null,
    area_smoothness: number | null = null,
    asmooth: number | null = null,
    area: number | null = null,
    tolerance: number | null = null,
    sigma: number | null = null,
    min_sigma: number | null = null,
    ribbon: InputPathType | null = null,
    rthresh: number | null = null,
    scale: number | null = null,
    dt: number | null = null,
    passes: number | null = null,
    skip: number | null = null,
    apply: number | null = null,
    distance_log: number | null = null,
    momentum: number | null = null,
    iterations: number | null = null,
    smoothness: number | null = null,
    transform: InputPathType | null = null,
    inverse_transform: InputPathType | null = null,
    binary: number | null = null,
    jacobian: number | null = null,
    disable_zero_locations: number | null = null,
    smooth_averages: number | null = null,
    exp_k: number | null = null,
    diagnostics: number | null = null,
    runner: Runner | null = null,
): MriNlAlignOutputs {
    const params = mri_nl_align_params(source, target, warp, debug_voxel, debug_node, no_neg, renormalize, aseg_flag, diag_volume, optimal_flag, momentum_flag, fixed_flag, distance, dtrans, match_peak_flag, erode, match_mean, intensity, ll, noregrid_flag, regrid_flag, view, levels, area_smoothness, asmooth, area, tolerance, sigma, min_sigma, ribbon, rthresh, scale, dt, passes, skip, apply, distance_log, momentum, iterations, smoothness, transform, inverse_transform, binary, jacobian, disable_zero_locations, smooth_averages, exp_k, diagnostics)
    return mri_nl_align_execute(params, runner);
}


export {
      MRI_NL_ALIGN_METADATA,
      MriNlAlignOutputs,
      mri_nl_align,
      mri_nl_align_execute,
      mri_nl_align_params,
};
