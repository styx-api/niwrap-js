// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_ADD_NEW_TP_METADATA: Metadata = {
    id: "c092850ac196635799818218f41e6c048de46b98.boutiques",
    name: "mri_add_new_tp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriAddNewTpParameters {
    "__STYXTYPE__": "mri_add_new_tp";
    "base_id": string;
    "newtp_id": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_add_new_tp": mri_add_new_tp_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_add_new_tp(...)`.
 *
 * @interface
 */
interface MriAddNewTpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mri_add_new_tp_params(
    base_id: string,
    newtp_id: string,
): MriAddNewTpParameters {
    /**
     * Build parameters.
    
     * @param base_id The ID of the base template.
     * @param newtp_id The ID of the new time point to be added.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_add_new_tp" as const,
        "base_id": base_id,
        "newtp_id": newtp_id,
    };
    return params;
}


function mri_add_new_tp_cargs(
    params: MriAddNewTpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_add_new_tp");
    cargs.push((params["base_id"] ?? null));
    cargs.push((params["newtp_id"] ?? null));
    return cargs;
}


function mri_add_new_tp_outputs(
    params: MriAddNewTpParameters,
    execution: Execution,
): MriAddNewTpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriAddNewTpOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mri_add_new_tp_execute(
    params: MriAddNewTpParameters,
    execution: Execution,
): MriAddNewTpOutputs {
    /**
     * Adds a new time point to the base/template without re-creating the base. Only the new time point needs to be run longitudinally.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriAddNewTpOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_add_new_tp_cargs(params, execution)
    const ret = mri_add_new_tp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_add_new_tp(
    base_id: string,
    newtp_id: string,
    runner: Runner | null = null,
): MriAddNewTpOutputs {
    /**
     * Adds a new time point to the base/template without re-creating the base. Only the new time point needs to be run longitudinally.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param base_id The ID of the base template.
     * @param newtp_id The ID of the new time point to be added.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriAddNewTpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_ADD_NEW_TP_METADATA);
    const params = mri_add_new_tp_params(base_id, newtp_id)
    return mri_add_new_tp_execute(params, execution);
}


export {
      MRI_ADD_NEW_TP_METADATA,
      MriAddNewTpOutputs,
      MriAddNewTpParameters,
      mri_add_new_tp,
      mri_add_new_tp_params,
};
