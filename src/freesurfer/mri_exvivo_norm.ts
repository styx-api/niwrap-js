// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_EXVIVO_NORM_METADATA: Metadata = {
    id: "a88bc50afe4bde5d431a45ef570ba7c5a89a8c36.boutiques",
    name: "mri_exvivo_norm",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriExvivoNormParameters {
    "__STYXTYPE__": "mri_exvivo_norm";
    "input_volume": InputPathType;
    "output_volume": string;
    "hemi": string;
    "prediction_volume"?: string | null | undefined;
    "normalized_volume"?: string | null | undefined;
    "freeview": boolean;
    "normalize_output_mean": boolean;
    "write_normalization_rounds": boolean;
    "upper_threshold"?: number | null | undefined;
    "bias_field_sigma"?: number | null | undefined;
    "normalization_rounds"?: number | null | undefined;
    "multichannel": boolean;
    "model_file"?: InputPathType | null | undefined;
    "weights_file"?: InputPathType | null | undefined;
    "gpu_number"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_exvivo_norm": mri_exvivo_norm_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_exvivo_norm": mri_exvivo_norm_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_exvivo_norm(...)`.
 *
 * @interface
 */
interface MriExvivoNormOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output MRI volume
     */
    output_volume: OutputPathType;
}


function mri_exvivo_norm_params(
    input_volume: InputPathType,
    output_volume: string,
    hemi: string,
    prediction_volume: string | null = null,
    normalized_volume: string | null = null,
    freeview: boolean = false,
    normalize_output_mean: boolean = false,
    write_normalization_rounds: boolean = false,
    upper_threshold: number | null = null,
    bias_field_sigma: number | null = null,
    normalization_rounds: number | null = null,
    multichannel: boolean = false,
    model_file: InputPathType | null = null,
    weights_file: InputPathType | null = null,
    gpu_number: number | null = null,
): MriExvivoNormParameters {
    /**
     * Build parameters.
    
     * @param input_volume Input MRI volume
     * @param output_volume Output MRI volume
     * @param hemi Hemi to process
     * @param prediction_volume Write prediction volume
     * @param normalized_volume Write normalized volume
     * @param freeview Bring up freeview to show results
     * @param normalize_output_mean Normalize output mean to match input mean
     * @param write_normalization_rounds Write normalization results after each round
     * @param upper_threshold Specify threshold to erase above
     * @param bias_field_sigma Sigma to smooth bias field
     * @param normalization_rounds Number of rounds of iterative normalization to apply
     * @param multichannel Specify that data has multiple channels
     * @param model_file Use alternative model file
     * @param weights_file Alternative weights filename
     * @param gpu_number GPU number - if not supplied, CPU is used
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_exvivo_norm" as const,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "hemi": hemi,
        "freeview": freeview,
        "normalize_output_mean": normalize_output_mean,
        "write_normalization_rounds": write_normalization_rounds,
        "multichannel": multichannel,
    };
    if (prediction_volume !== null) {
        params["prediction_volume"] = prediction_volume;
    }
    if (normalized_volume !== null) {
        params["normalized_volume"] = normalized_volume;
    }
    if (upper_threshold !== null) {
        params["upper_threshold"] = upper_threshold;
    }
    if (bias_field_sigma !== null) {
        params["bias_field_sigma"] = bias_field_sigma;
    }
    if (normalization_rounds !== null) {
        params["normalization_rounds"] = normalization_rounds;
    }
    if (model_file !== null) {
        params["model_file"] = model_file;
    }
    if (weights_file !== null) {
        params["weights_file"] = weights_file;
    }
    if (gpu_number !== null) {
        params["gpu_number"] = gpu_number;
    }
    return params;
}


function mri_exvivo_norm_cargs(
    params: MriExvivoNormParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_exvivo_norm");
    cargs.push(
        "-i",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_volume"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemi"] ?? null)
    );
    if ((params["prediction_volume"] ?? null) !== null) {
        cargs.push(
            "--pred",
            (params["prediction_volume"] ?? null)
        );
    }
    if ((params["normalized_volume"] ?? null) !== null) {
        cargs.push(
            "--norm",
            (params["normalized_volume"] ?? null)
        );
    }
    if ((params["freeview"] ?? null)) {
        cargs.push("--fv");
    }
    if ((params["normalize_output_mean"] ?? null)) {
        cargs.push("--norm_mean");
    }
    if ((params["write_normalization_rounds"] ?? null)) {
        cargs.push("--write_rounds");
    }
    if ((params["upper_threshold"] ?? null) !== null) {
        cargs.push(
            "--uthresh",
            String((params["upper_threshold"] ?? null))
        );
    }
    if ((params["bias_field_sigma"] ?? null) !== null) {
        cargs.push(
            "--sigma",
            String((params["bias_field_sigma"] ?? null))
        );
    }
    if ((params["normalization_rounds"] ?? null) !== null) {
        cargs.push(
            "--nrounds",
            String((params["normalization_rounds"] ?? null))
        );
    }
    if ((params["multichannel"] ?? null)) {
        cargs.push("--multichannel");
    }
    if ((params["model_file"] ?? null) !== null) {
        cargs.push(
            "--model",
            execution.inputFile((params["model_file"] ?? null))
        );
    }
    if ((params["weights_file"] ?? null) !== null) {
        cargs.push(
            "--wts",
            execution.inputFile((params["weights_file"] ?? null))
        );
    }
    if ((params["gpu_number"] ?? null) !== null) {
        cargs.push(
            "--gpu",
            String((params["gpu_number"] ?? null))
        );
    }
    return cargs;
}


function mri_exvivo_norm_outputs(
    params: MriExvivoNormParameters,
    execution: Execution,
): MriExvivoNormOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriExvivoNormOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


function mri_exvivo_norm_execute(
    params: MriExvivoNormParameters,
    execution: Execution,
): MriExvivoNormOutputs {
    /**
     * MRI Ex Vivo Normalization Tool.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriExvivoNormOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_exvivo_norm_cargs(params, execution)
    const ret = mri_exvivo_norm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_exvivo_norm(
    input_volume: InputPathType,
    output_volume: string,
    hemi: string,
    prediction_volume: string | null = null,
    normalized_volume: string | null = null,
    freeview: boolean = false,
    normalize_output_mean: boolean = false,
    write_normalization_rounds: boolean = false,
    upper_threshold: number | null = null,
    bias_field_sigma: number | null = null,
    normalization_rounds: number | null = null,
    multichannel: boolean = false,
    model_file: InputPathType | null = null,
    weights_file: InputPathType | null = null,
    gpu_number: number | null = null,
    runner: Runner | null = null,
): MriExvivoNormOutputs {
    /**
     * MRI Ex Vivo Normalization Tool.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_volume Input MRI volume
     * @param output_volume Output MRI volume
     * @param hemi Hemi to process
     * @param prediction_volume Write prediction volume
     * @param normalized_volume Write normalized volume
     * @param freeview Bring up freeview to show results
     * @param normalize_output_mean Normalize output mean to match input mean
     * @param write_normalization_rounds Write normalization results after each round
     * @param upper_threshold Specify threshold to erase above
     * @param bias_field_sigma Sigma to smooth bias field
     * @param normalization_rounds Number of rounds of iterative normalization to apply
     * @param multichannel Specify that data has multiple channels
     * @param model_file Use alternative model file
     * @param weights_file Alternative weights filename
     * @param gpu_number GPU number - if not supplied, CPU is used
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriExvivoNormOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_EXVIVO_NORM_METADATA);
    const params = mri_exvivo_norm_params(input_volume, output_volume, hemi, prediction_volume, normalized_volume, freeview, normalize_output_mean, write_normalization_rounds, upper_threshold, bias_field_sigma, normalization_rounds, multichannel, model_file, weights_file, gpu_number)
    return mri_exvivo_norm_execute(params, execution);
}


export {
      MRI_EXVIVO_NORM_METADATA,
      MriExvivoNormOutputs,
      MriExvivoNormParameters,
      mri_exvivo_norm,
      mri_exvivo_norm_params,
};
