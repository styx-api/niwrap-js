// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_LOCALSTAT_METADATA: Metadata = {
    id: "8a12a6d69e93058f704ee707c378a9b21f748a8e.boutiques",
    name: "SurfLocalstat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfLocalstatParameters {
    "@type": "afni.SurfLocalstat";
    "hood"?: number | null | undefined;
    "nbhd_rad"?: number | null | undefined;
    "prefix": string;
    "stat": "mean" | "mode" | "num" | "FWHM" | "ALL";
    "input_dataset": InputPathType;
    "surface": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.SurfLocalstat": surf_localstat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.SurfLocalstat": surf_localstat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_localstat(...)`.
 *
 * @interface
 */
interface SurfLocalstatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Computed local statistics dataset
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Prefix of output data set.
 * @param stat Compute the specified statistic on the values extracted from the region around each voxel. Options: mean, mode, num, FWHM, ALL.
 * @param input_dataset Input dataset.
 * @param surface Input GIFTI surface file.
 * @param hood Neighborhood of nodes within the specified radius R.
 * @param nbhd_rad Distance from node n as measured by the shortest distance along the mesh.
 *
 * @returns Parameter dictionary
 */
function surf_localstat_params(
    prefix: string,
    stat: "mean" | "mode" | "num" | "FWHM" | "ALL",
    input_dataset: InputPathType,
    surface: InputPathType,
    hood: number | null = null,
    nbhd_rad: number | null = null,
): SurfLocalstatParameters {
    const params = {
        "@type": "afni.SurfLocalstat" as const,
        "prefix": prefix,
        "stat": stat,
        "input_dataset": input_dataset,
        "surface": surface,
    };
    if (hood !== null) {
        params["hood"] = hood;
    }
    if (nbhd_rad !== null) {
        params["nbhd_rad"] = nbhd_rad;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf_localstat_cargs(
    params: SurfLocalstatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("SurfLocalstat");
    if ((params["hood"] ?? null) !== null) {
        cargs.push(
            "-hood",
            String((params["hood"] ?? null))
        );
    }
    if ((params["nbhd_rad"] ?? null) !== null) {
        cargs.push(
            "-nbhd_rad",
            String((params["nbhd_rad"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-stat",
        (params["stat"] ?? null)
    );
    cargs.push(
        "-input",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    cargs.push(
        "-i_gii",
        execution.inputFile((params["surface"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf_localstat_outputs(
    params: SurfLocalstatParameters,
    execution: Execution,
): SurfLocalstatOutputs {
    const ret: SurfLocalstatOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null), ".niml.dset"].join('')),
    };
    return ret;
}


/**
 * SurfLocalstat
 *
 * Compute local statistics on a surface mesh.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfLocalstatOutputs`).
 */
function surf_localstat_execute(
    params: SurfLocalstatParameters,
    runner: Runner | null = null,
): SurfLocalstatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_LOCALSTAT_METADATA);
    params = execution.params(params)
    const cargs = surf_localstat_cargs(params, execution)
    const ret = surf_localstat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * SurfLocalstat
 *
 * Compute local statistics on a surface mesh.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Prefix of output data set.
 * @param stat Compute the specified statistic on the values extracted from the region around each voxel. Options: mean, mode, num, FWHM, ALL.
 * @param input_dataset Input dataset.
 * @param surface Input GIFTI surface file.
 * @param hood Neighborhood of nodes within the specified radius R.
 * @param nbhd_rad Distance from node n as measured by the shortest distance along the mesh.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfLocalstatOutputs`).
 */
function surf_localstat(
    prefix: string,
    stat: "mean" | "mode" | "num" | "FWHM" | "ALL",
    input_dataset: InputPathType,
    surface: InputPathType,
    hood: number | null = null,
    nbhd_rad: number | null = null,
    runner: Runner | null = null,
): SurfLocalstatOutputs {
    const params = surf_localstat_params(prefix, stat, input_dataset, surface, hood, nbhd_rad)
    return surf_localstat_execute(params, runner);
}


export {
      SURF_LOCALSTAT_METADATA,
      SurfLocalstatOutputs,
      SurfLocalstatParameters,
      surf_localstat,
      surf_localstat_execute,
      surf_localstat_params,
};
