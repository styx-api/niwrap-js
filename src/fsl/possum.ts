// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POSSUM_METADATA: Metadata = {
    id: "24b08ea6c03b4298ab43a4f36dc382ae9b1cf2dc.boutiques",
    name: "possum",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PossumParameters {
    "@type": "fsl.possum";
    "input_volume": InputPathType;
    "mr_parameters": InputPathType;
    "motion_matrix": InputPathType;
    "pulse_sequence": string;
    "rf_slice_profile": InputPathType;
    "output_signal": string;
    "event_matrix": InputPathType;
    "verbose": boolean;
    "help": boolean;
    "kcoord": boolean;
    "b0_inhomogeneities"?: string | null | undefined;
    "extra_b0_inhomogeneities"?: InputPathType | null | undefined;
    "b0_inhomogeneities_timecourse"?: InputPathType | null | undefined;
    "rf_inhomogeneity_receive"?: InputPathType | null | undefined;
    "rf_inhomogeneity_transmit"?: InputPathType | null | undefined;
    "activation_volume"?: InputPathType | null | undefined;
    "activation_timecourse"?: InputPathType | null | undefined;
    "activation_4d_volume"?: InputPathType | null | undefined;
    "activation_4d_timecourse"?: InputPathType | null | undefined;
    "level"?: string | null | undefined;
    "num_procs"?: number | null | undefined;
    "proc_id"?: number | null | undefined;
    "no_speedup": boolean;
    "rf_average": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.possum": possum_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.possum": possum_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `possum(...)`.
 *
 * @interface
 */
interface PossumOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output matrix file generated by possum
     */
    output_matrix: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume Input 4D volume filename
 * @param mr_parameters Input matrix filename containing MR parameters
 * @param motion_matrix Input motion matrix filename (time(s) Tx(m) Ty(m) Tz(m) Rx(rad) Ry(rad) Rz(rad))
 * @param pulse_sequence Input matrix basename for pulse sequence files (.posx, .posy, etc.)
 * @param rf_slice_profile Input matrix filename containing RF slice profile
 * @param output_signal Output matrix filename for the signal
 * @param event_matrix Main event matrix file [(t(s), rf_ang(rad), rf_freq_band(Hz), rf_cent_freq(Hz), ...)]
 * @param verbose Switch on diagnostic messages
 * @param help Display help message
 * @param kcoord Save the k-space coordinates
 * @param b0_inhomogeneities B0 inhomogeneities due to susceptibility differences (basename)
 * @param extra_b0_inhomogeneities B0 inhomogeneities due to an extra field
 * @param b0_inhomogeneities_timecourse B0 inhomogeneities timecourse file
 * @param rf_inhomogeneity_receive RF inhomogeneity - receive
 * @param rf_inhomogeneity_transmit RF inhomogeneity - transmit
 * @param activation_volume Activation volume file
 * @param activation_timecourse Activation time course file
 * @param activation_4d_volume Activation 4D volume file
 * @param activation_4d_timecourse Activation 4D time course file
 * @param level Level of processing: 1.no motion//basic B0, 2.motion//basic B0, 3.motion//full B0, 4.no motion//time changing B0
 * @param num_procs Number of processors available for parallelisation
 * @param proc_id ID of the processor
 * @param no_speedup If ON, will not do the speedup but perform signal calculation for all slices for each voxel
 * @param rf_average If ON, it will use RF angle averaging
 *
 * @returns Parameter dictionary
 */
function possum_params(
    input_volume: InputPathType,
    mr_parameters: InputPathType,
    motion_matrix: InputPathType,
    pulse_sequence: string,
    rf_slice_profile: InputPathType,
    output_signal: string,
    event_matrix: InputPathType,
    verbose: boolean = false,
    help: boolean = false,
    kcoord: boolean = false,
    b0_inhomogeneities: string | null = null,
    extra_b0_inhomogeneities: InputPathType | null = null,
    b0_inhomogeneities_timecourse: InputPathType | null = null,
    rf_inhomogeneity_receive: InputPathType | null = null,
    rf_inhomogeneity_transmit: InputPathType | null = null,
    activation_volume: InputPathType | null = null,
    activation_timecourse: InputPathType | null = null,
    activation_4d_volume: InputPathType | null = null,
    activation_4d_timecourse: InputPathType | null = null,
    level: string | null = null,
    num_procs: number | null = null,
    proc_id: number | null = null,
    no_speedup: boolean = false,
    rf_average: boolean = false,
): PossumParameters {
    const params = {
        "@type": "fsl.possum" as const,
        "input_volume": input_volume,
        "mr_parameters": mr_parameters,
        "motion_matrix": motion_matrix,
        "pulse_sequence": pulse_sequence,
        "rf_slice_profile": rf_slice_profile,
        "output_signal": output_signal,
        "event_matrix": event_matrix,
        "verbose": verbose,
        "help": help,
        "kcoord": kcoord,
        "no_speedup": no_speedup,
        "rf_average": rf_average,
    };
    if (b0_inhomogeneities !== null) {
        params["b0_inhomogeneities"] = b0_inhomogeneities;
    }
    if (extra_b0_inhomogeneities !== null) {
        params["extra_b0_inhomogeneities"] = extra_b0_inhomogeneities;
    }
    if (b0_inhomogeneities_timecourse !== null) {
        params["b0_inhomogeneities_timecourse"] = b0_inhomogeneities_timecourse;
    }
    if (rf_inhomogeneity_receive !== null) {
        params["rf_inhomogeneity_receive"] = rf_inhomogeneity_receive;
    }
    if (rf_inhomogeneity_transmit !== null) {
        params["rf_inhomogeneity_transmit"] = rf_inhomogeneity_transmit;
    }
    if (activation_volume !== null) {
        params["activation_volume"] = activation_volume;
    }
    if (activation_timecourse !== null) {
        params["activation_timecourse"] = activation_timecourse;
    }
    if (activation_4d_volume !== null) {
        params["activation_4d_volume"] = activation_4d_volume;
    }
    if (activation_4d_timecourse !== null) {
        params["activation_4d_timecourse"] = activation_4d_timecourse;
    }
    if (level !== null) {
        params["level"] = level;
    }
    if (num_procs !== null) {
        params["num_procs"] = num_procs;
    }
    if (proc_id !== null) {
        params["proc_id"] = proc_id;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function possum_cargs(
    params: PossumParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("possum");
    cargs.push(
        "--inp",
        execution.inputFile((params["input_volume"] ?? null))
    );
    cargs.push(
        "--mrpar",
        execution.inputFile((params["mr_parameters"] ?? null))
    );
    cargs.push(
        "--motion",
        execution.inputFile((params["motion_matrix"] ?? null))
    );
    cargs.push(
        "--pulse",
        (params["pulse_sequence"] ?? null)
    );
    cargs.push(
        "--slcprof",
        execution.inputFile((params["rf_slice_profile"] ?? null))
    );
    cargs.push(
        "--out",
        (params["output_signal"] ?? null)
    );
    cargs.push(
        "--mainmatx",
        execution.inputFile((params["event_matrix"] ?? null))
    );
    if ((params["verbose"] ?? null)) {
        cargs.push("--verbose");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["kcoord"] ?? null)) {
        cargs.push("--kcoord");
    }
    if ((params["b0_inhomogeneities"] ?? null) !== null) {
        cargs.push(
            "--b0p",
            (params["b0_inhomogeneities"] ?? null)
        );
    }
    if ((params["extra_b0_inhomogeneities"] ?? null) !== null) {
        cargs.push(
            "--b0extra",
            execution.inputFile((params["extra_b0_inhomogeneities"] ?? null))
        );
    }
    if ((params["b0_inhomogeneities_timecourse"] ?? null) !== null) {
        cargs.push(
            "--b0time",
            execution.inputFile((params["b0_inhomogeneities_timecourse"] ?? null))
        );
    }
    if ((params["rf_inhomogeneity_receive"] ?? null) !== null) {
        cargs.push(
            "--rfr",
            execution.inputFile((params["rf_inhomogeneity_receive"] ?? null))
        );
    }
    if ((params["rf_inhomogeneity_transmit"] ?? null) !== null) {
        cargs.push(
            "--rft",
            execution.inputFile((params["rf_inhomogeneity_transmit"] ?? null))
        );
    }
    if ((params["activation_volume"] ?? null) !== null) {
        cargs.push(
            "--activ",
            execution.inputFile((params["activation_volume"] ?? null))
        );
    }
    if ((params["activation_timecourse"] ?? null) !== null) {
        cargs.push(
            "--activt",
            execution.inputFile((params["activation_timecourse"] ?? null))
        );
    }
    if ((params["activation_4d_volume"] ?? null) !== null) {
        cargs.push(
            "--activ4D",
            execution.inputFile((params["activation_4d_volume"] ?? null))
        );
    }
    if ((params["activation_4d_timecourse"] ?? null) !== null) {
        cargs.push(
            "--activt4D",
            execution.inputFile((params["activation_4d_timecourse"] ?? null))
        );
    }
    if ((params["level"] ?? null) !== null) {
        cargs.push(
            "--lev",
            (params["level"] ?? null)
        );
    }
    if ((params["num_procs"] ?? null) !== null) {
        cargs.push(
            "--nproc",
            String((params["num_procs"] ?? null))
        );
    }
    if ((params["proc_id"] ?? null) !== null) {
        cargs.push(
            "--procid",
            String((params["proc_id"] ?? null))
        );
    }
    if ((params["no_speedup"] ?? null)) {
        cargs.push("--nospeedup");
    }
    if ((params["rf_average"] ?? null)) {
        cargs.push("--rfavg");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function possum_outputs(
    params: PossumParameters,
    execution: Execution,
): PossumOutputs {
    const ret: PossumOutputs = {
        root: execution.outputFile("."),
        output_matrix: execution.outputFile(["[OUTPUT_MATRIX].mat"].join('')),
    };
    return ret;
}


/**
 * Positron emission tomography (PET) simulation tool as part of FSL suite.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `PossumOutputs`).
 */
function possum_execute(
    params: PossumParameters,
    execution: Execution,
): PossumOutputs {
    params = execution.params(params)
    const cargs = possum_cargs(params, execution)
    const ret = possum_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Positron emission tomography (PET) simulation tool as part of FSL suite.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_volume Input 4D volume filename
 * @param mr_parameters Input matrix filename containing MR parameters
 * @param motion_matrix Input motion matrix filename (time(s) Tx(m) Ty(m) Tz(m) Rx(rad) Ry(rad) Rz(rad))
 * @param pulse_sequence Input matrix basename for pulse sequence files (.posx, .posy, etc.)
 * @param rf_slice_profile Input matrix filename containing RF slice profile
 * @param output_signal Output matrix filename for the signal
 * @param event_matrix Main event matrix file [(t(s), rf_ang(rad), rf_freq_band(Hz), rf_cent_freq(Hz), ...)]
 * @param verbose Switch on diagnostic messages
 * @param help Display help message
 * @param kcoord Save the k-space coordinates
 * @param b0_inhomogeneities B0 inhomogeneities due to susceptibility differences (basename)
 * @param extra_b0_inhomogeneities B0 inhomogeneities due to an extra field
 * @param b0_inhomogeneities_timecourse B0 inhomogeneities timecourse file
 * @param rf_inhomogeneity_receive RF inhomogeneity - receive
 * @param rf_inhomogeneity_transmit RF inhomogeneity - transmit
 * @param activation_volume Activation volume file
 * @param activation_timecourse Activation time course file
 * @param activation_4d_volume Activation 4D volume file
 * @param activation_4d_timecourse Activation 4D time course file
 * @param level Level of processing: 1.no motion//basic B0, 2.motion//basic B0, 3.motion//full B0, 4.no motion//time changing B0
 * @param num_procs Number of processors available for parallelisation
 * @param proc_id ID of the processor
 * @param no_speedup If ON, will not do the speedup but perform signal calculation for all slices for each voxel
 * @param rf_average If ON, it will use RF angle averaging
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PossumOutputs`).
 */
function possum(
    input_volume: InputPathType,
    mr_parameters: InputPathType,
    motion_matrix: InputPathType,
    pulse_sequence: string,
    rf_slice_profile: InputPathType,
    output_signal: string,
    event_matrix: InputPathType,
    verbose: boolean = false,
    help: boolean = false,
    kcoord: boolean = false,
    b0_inhomogeneities: string | null = null,
    extra_b0_inhomogeneities: InputPathType | null = null,
    b0_inhomogeneities_timecourse: InputPathType | null = null,
    rf_inhomogeneity_receive: InputPathType | null = null,
    rf_inhomogeneity_transmit: InputPathType | null = null,
    activation_volume: InputPathType | null = null,
    activation_timecourse: InputPathType | null = null,
    activation_4d_volume: InputPathType | null = null,
    activation_4d_timecourse: InputPathType | null = null,
    level: string | null = null,
    num_procs: number | null = null,
    proc_id: number | null = null,
    no_speedup: boolean = false,
    rf_average: boolean = false,
    runner: Runner | null = null,
): PossumOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POSSUM_METADATA);
    const params = possum_params(input_volume, mr_parameters, motion_matrix, pulse_sequence, rf_slice_profile, output_signal, event_matrix, verbose, help, kcoord, b0_inhomogeneities, extra_b0_inhomogeneities, b0_inhomogeneities_timecourse, rf_inhomogeneity_receive, rf_inhomogeneity_transmit, activation_volume, activation_timecourse, activation_4d_volume, activation_4d_timecourse, level, num_procs, proc_id, no_speedup, rf_average)
    return possum_execute(params, execution);
}


export {
      POSSUM_METADATA,
      PossumOutputs,
      PossumParameters,
      possum,
      possum_cargs,
      possum_execute,
      possum_outputs,
      possum_params,
};
