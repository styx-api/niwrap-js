// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_BLUR_TO_FWHM_METADATA: Metadata = {
    id: "12e7d81671107d9ada75a687d37b1447e3899716.boutiques",
    name: "3dBlurToFWHM",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dBlurToFwhmParameters {
    "@type"?: "afni/3dBlurToFWHM";
    "automask": boolean;
    "blurmaster"?: InputPathType | null | undefined;
    "fwhm"?: number | null | undefined;
    "fwhmxy"?: number | null | undefined;
    "in_file": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "outputtype"?: "NIFTI" | "AFNI" | "NIFTI_GZ" | null | undefined;
    "prefix"?: string | null | undefined;
}
type V3dBlurToFwhmParametersTagged = Required<Pick<V3dBlurToFwhmParameters, '@type'>> & V3dBlurToFwhmParameters;


/**
 * Output object returned when calling `V3dBlurToFwhmParameters(...)`.
 *
 * @interface
 */
interface V3dBlurToFwhmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file name.
     */
    out_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_file The dataset that will be smoothed.
 * @param automask Create an automask from the input dataset.
 * @param blurmaster The dataset whose smoothness controls the process.
 * @param fwhm Blur until the 3d fwhm reaches this value (in mm).
 * @param fwhmxy Blur until the 2d (x,y)-plane fwhm reaches this value (in mm).
 * @param mask Mask dataset, if desired. voxels not in mask will be set to zero in output.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 * @param prefix Prefix for output dataset.
 *
 * @returns Parameter dictionary
 */
function v_3d_blur_to_fwhm_params(
    in_file: InputPathType,
    automask: boolean = false,
    blurmaster: InputPathType | null = null,
    fwhm: number | null = null,
    fwhmxy: number | null = null,
    mask: InputPathType | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    prefix: string | null = null,
): V3dBlurToFwhmParametersTagged {
    const params = {
        "@type": "afni/3dBlurToFWHM" as const,
        "automask": automask,
        "in_file": in_file,
    };
    if (blurmaster !== null) {
        params["blurmaster"] = blurmaster;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (fwhmxy !== null) {
        params["fwhmxy"] = fwhmxy;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (outputtype !== null) {
        params["outputtype"] = outputtype;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_blur_to_fwhm_cargs(
    params: V3dBlurToFwhmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dBlurToFWHM");
    if ((params["automask"] ?? false)) {
        cargs.push("-automask");
    }
    if ((params["blurmaster"] ?? null) !== null) {
        cargs.push(
            "-blurmaster",
            execution.inputFile((params["blurmaster"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "-FWHM",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["fwhmxy"] ?? null) !== null) {
        cargs.push(
            "-FWHMxy",
            String((params["fwhmxy"] ?? null))
        );
    }
    cargs.push(
        "-input",
        execution.inputFile((params["in_file"] ?? null))
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["outputtype"] ?? null) !== null) {
        cargs.push((params["outputtype"] ?? null));
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_blur_to_fwhm_outputs(
    params: V3dBlurToFwhmParameters,
    execution: Execution,
): V3dBlurToFwhmOutputs {
    const ret: V3dBlurToFwhmOutputs = {
        root: execution.outputFile("."),
        out_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dBlurToFWHM
 *
 * Blurs a 'master' dataset until it reaches a specified FWHM smoothness (approximately).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBlurToFwhmOutputs`).
 */
function v_3d_blur_to_fwhm_execute(
    params: V3dBlurToFwhmParameters,
    runner: Runner | null = null,
): V3dBlurToFwhmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_BLUR_TO_FWHM_METADATA);
    params = execution.params(params)
    const cargs = v_3d_blur_to_fwhm_cargs(params, execution)
    const ret = v_3d_blur_to_fwhm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dBlurToFWHM
 *
 * Blurs a 'master' dataset until it reaches a specified FWHM smoothness (approximately).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_file The dataset that will be smoothed.
 * @param automask Create an automask from the input dataset.
 * @param blurmaster The dataset whose smoothness controls the process.
 * @param fwhm Blur until the 3d fwhm reaches this value (in mm).
 * @param fwhmxy Blur until the 2d (x,y)-plane fwhm reaches this value (in mm).
 * @param mask Mask dataset, if desired. voxels not in mask will be set to zero in output.
 * @param outputtype 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
 * @param prefix Prefix for output dataset.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBlurToFwhmOutputs`).
 */
function v_3d_blur_to_fwhm(
    in_file: InputPathType,
    automask: boolean = false,
    blurmaster: InputPathType | null = null,
    fwhm: number | null = null,
    fwhmxy: number | null = null,
    mask: InputPathType | null = null,
    outputtype: "NIFTI" | "AFNI" | "NIFTI_GZ" | null = null,
    prefix: string | null = null,
    runner: Runner | null = null,
): V3dBlurToFwhmOutputs {
    const params = v_3d_blur_to_fwhm_params(in_file, automask, blurmaster, fwhm, fwhmxy, mask, outputtype, prefix)
    return v_3d_blur_to_fwhm_execute(params, runner);
}


export {
      V3dBlurToFwhmOutputs,
      V_3D_BLUR_TO_FWHM_METADATA,
      v_3d_blur_to_fwhm,
      v_3d_blur_to_fwhm_execute,
      v_3d_blur_to_fwhm_params,
};
