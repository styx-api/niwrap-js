// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__AFNI_ENV_METADATA: Metadata = {
    id: "52cb0ae7352ad7f5ead3b8244b3ec7d72851eecc.boutiques",
    name: "@AfniEnv",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAfniEnvParameters {
    "@type": "afni.@AfniEnv";
    "set_flag"?: Array<string> | null | undefined;
    "unset_flag"?: string | null | undefined;
    "get_flag"?: string | null | undefined;
    "help_flag": boolean;
    "help_web_flag": boolean;
    "help_web_flag_alias": boolean;
    "help_view_flag": boolean;
    "help_view_flag_alias": boolean;
    "all_opts_flag": boolean;
    "help_find_flag"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@AfniEnv": v__afni_env_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__afni_env(...)`.
 *
 * @interface
 */
interface VAfniEnvOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param set_flag Set environment variable NAME to value VALUE
 * @param unset_flag Unset environment variable NAME
 * @param get_flag Get the value of environment variable NAME
 * @param help_flag Display the help message for @AfniEnv script
 * @param help_web_flag Open webpage with help for this program
 * @param help_web_flag_alias Same as -h_web
 * @param help_view_flag Open -help output in a GUI editor
 * @param help_view_flag_alias Same as -h_view
 * @param all_opts_flag List all of the options for this script
 * @param help_find_flag Search for lines containing WORD in -help output. Search is approximate.
 *
 * @returns Parameter dictionary
 */
function v__afni_env_params(
    set_flag: Array<string> | null = null,
    unset_flag: string | null = null,
    get_flag: string | null = null,
    help_flag: boolean = false,
    help_web_flag: boolean = false,
    help_web_flag_alias: boolean = false,
    help_view_flag: boolean = false,
    help_view_flag_alias: boolean = false,
    all_opts_flag: boolean = false,
    help_find_flag: string | null = null,
): VAfniEnvParameters {
    const params = {
        "@type": "afni.@AfniEnv" as const,
        "help_flag": help_flag,
        "help_web_flag": help_web_flag,
        "help_web_flag_alias": help_web_flag_alias,
        "help_view_flag": help_view_flag,
        "help_view_flag_alias": help_view_flag_alias,
        "all_opts_flag": all_opts_flag,
    };
    if (set_flag !== null) {
        params["set_flag"] = set_flag;
    }
    if (unset_flag !== null) {
        params["unset_flag"] = unset_flag;
    }
    if (get_flag !== null) {
        params["get_flag"] = get_flag;
    }
    if (help_find_flag !== null) {
        params["help_find_flag"] = help_find_flag;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__afni_env_cargs(
    params: VAfniEnvParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@AfniEnv");
    if ((params["set_flag"] ?? null) !== null) {
        cargs.push(
            "-set",
            ...(params["set_flag"] ?? null)
        );
    }
    if ((params["unset_flag"] ?? null) !== null) {
        cargs.push(
            "-unset",
            (params["unset_flag"] ?? null)
        );
    }
    if ((params["get_flag"] ?? null) !== null) {
        cargs.push(
            "-get",
            (params["get_flag"] ?? null)
        );
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["help_web_flag"] ?? null)) {
        cargs.push("-h_web");
    }
    if ((params["help_web_flag_alias"] ?? null)) {
        cargs.push("-hweb");
    }
    if ((params["help_view_flag"] ?? null)) {
        cargs.push("-h_view");
    }
    if ((params["help_view_flag_alias"] ?? null)) {
        cargs.push("-hview");
    }
    if ((params["all_opts_flag"] ?? null)) {
        cargs.push("-all_opts");
    }
    if ((params["help_find_flag"] ?? null) !== null) {
        cargs.push(
            "-h_find",
            (params["help_find_flag"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__afni_env_outputs(
    params: VAfniEnvParameters,
    execution: Execution,
): VAfniEnvOutputs {
    const ret: VAfniEnvOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Script to set or unset an AFNI environment variable in your .afnirc file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAfniEnvOutputs`).
 */
function v__afni_env_execute(
    params: VAfniEnvParameters,
    runner: Runner | null = null,
): VAfniEnvOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__AFNI_ENV_METADATA);
    params = execution.params(params)
    const cargs = v__afni_env_cargs(params, execution)
    const ret = v__afni_env_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Script to set or unset an AFNI environment variable in your .afnirc file.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param set_flag Set environment variable NAME to value VALUE
 * @param unset_flag Unset environment variable NAME
 * @param get_flag Get the value of environment variable NAME
 * @param help_flag Display the help message for @AfniEnv script
 * @param help_web_flag Open webpage with help for this program
 * @param help_web_flag_alias Same as -h_web
 * @param help_view_flag Open -help output in a GUI editor
 * @param help_view_flag_alias Same as -h_view
 * @param all_opts_flag List all of the options for this script
 * @param help_find_flag Search for lines containing WORD in -help output. Search is approximate.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAfniEnvOutputs`).
 */
function v__afni_env(
    set_flag: Array<string> | null = null,
    unset_flag: string | null = null,
    get_flag: string | null = null,
    help_flag: boolean = false,
    help_web_flag: boolean = false,
    help_web_flag_alias: boolean = false,
    help_view_flag: boolean = false,
    help_view_flag_alias: boolean = false,
    all_opts_flag: boolean = false,
    help_find_flag: string | null = null,
    runner: Runner | null = null,
): VAfniEnvOutputs {
    const params = v__afni_env_params(set_flag, unset_flag, get_flag, help_flag, help_web_flag, help_web_flag_alias, help_view_flag, help_view_flag_alias, all_opts_flag, help_find_flag)
    return v__afni_env_execute(params, runner);
}


export {
      VAfniEnvOutputs,
      VAfniEnvParameters,
      V__AFNI_ENV_METADATA,
      v__afni_env,
      v__afni_env_execute,
      v__afni_env_params,
};
