// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLCOMPLEX_METADATA: Metadata = {
    id: "d07e28d8cd9c82c6351b610ee8c3ae8a7a3f2dd6.boutiques",
    name: "fslcomplex",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslcomplexParameters {
    "@type": "fsl.fslcomplex";
    "input_file": InputPathType;
    "output_file": string;
    "output_type": "-realabs" | "-realphase" | "-realpolar" | "-realcartesian" | "-complex" | "-complexpolar" | "-complexsplit" | "-complexmerge" | "-copyonly";
    "start_vol"?: number | null | undefined;
    "end_vol"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslcomplex": fslcomplex_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.fslcomplex": fslcomplex_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslcomplex(...)`.
 *
 * @interface
 */
interface FslcomplexOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting output file from the specified operation.
     */
    result_output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input volume (e.g. complexvol.nii.gz)
 * @param output_file Output volume (e.g. absvol.nii.gz)
 * @param output_type Output type (determines the operation to perform)
 * @param start_vol Start volume (optional)
 * @param end_vol End volume (optional)
 *
 * @returns Parameter dictionary
 */
function fslcomplex_params(
    input_file: InputPathType,
    output_file: string,
    output_type: "-realabs" | "-realphase" | "-realpolar" | "-realcartesian" | "-complex" | "-complexpolar" | "-complexsplit" | "-complexmerge" | "-copyonly",
    start_vol: number | null = null,
    end_vol: number | null = null,
): FslcomplexParameters {
    const params = {
        "@type": "fsl.fslcomplex" as const,
        "input_file": input_file,
        "output_file": output_file,
        "output_type": output_type,
    };
    if (start_vol !== null) {
        params["start_vol"] = start_vol;
    }
    if (end_vol !== null) {
        params["end_vol"] = end_vol;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslcomplex_cargs(
    params: FslcomplexParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslcomplex");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    cargs.push((params["output_type"] ?? null));
    if ((params["start_vol"] ?? null) !== null) {
        cargs.push(String((params["start_vol"] ?? null)));
    }
    if ((params["end_vol"] ?? null) !== null) {
        cargs.push(String((params["end_vol"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslcomplex_outputs(
    params: FslcomplexParameters,
    execution: Execution,
): FslcomplexOutputs {
    const ret: FslcomplexOutputs = {
        root: execution.outputFile("."),
        result_output_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Tool for manipulating complex-valued MR data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslcomplexOutputs`).
 */
function fslcomplex_execute(
    params: FslcomplexParameters,
    runner: Runner | null = null,
): FslcomplexOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLCOMPLEX_METADATA);
    params = execution.params(params)
    const cargs = fslcomplex_cargs(params, execution)
    const ret = fslcomplex_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for manipulating complex-valued MR data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input volume (e.g. complexvol.nii.gz)
 * @param output_file Output volume (e.g. absvol.nii.gz)
 * @param output_type Output type (determines the operation to perform)
 * @param start_vol Start volume (optional)
 * @param end_vol End volume (optional)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslcomplexOutputs`).
 */
function fslcomplex(
    input_file: InputPathType,
    output_file: string,
    output_type: "-realabs" | "-realphase" | "-realpolar" | "-realcartesian" | "-complex" | "-complexpolar" | "-complexsplit" | "-complexmerge" | "-copyonly",
    start_vol: number | null = null,
    end_vol: number | null = null,
    runner: Runner | null = null,
): FslcomplexOutputs {
    const params = fslcomplex_params(input_file, output_file, output_type, start_vol, end_vol)
    return fslcomplex_execute(params, runner);
}


export {
      FSLCOMPLEX_METADATA,
      FslcomplexOutputs,
      FslcomplexParameters,
      fslcomplex,
      fslcomplex_execute,
      fslcomplex_params,
};
