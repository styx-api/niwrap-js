// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DWI2TENSOR_METADATA: Metadata = {
    id: "3f5709a6a0e097723b966fa5d55724a203f0e0eb.boutiques",
    name: "dwi2tensor",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Dwi2tensorFslgradParameters {
    "@type": "mrtrix.dwi2tensor.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface Dwi2tensorConfigParameters {
    "@type": "mrtrix.dwi2tensor.config";
    "key": string;
    "value": string;
}


interface Dwi2tensorParameters {
    "@type": "mrtrix.dwi2tensor";
    "ols": boolean;
    "mask"?: InputPathType | null | undefined;
    "b0"?: string | null | undefined;
    "dkt"?: string | null | undefined;
    "iter"?: number | null | undefined;
    "predicted_signal"?: string | null | undefined;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: Dwi2tensorFslgradParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Dwi2tensorConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "dwi": InputPathType;
    "dt": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.dwi2tensor": dwi2tensor_cargs,
        "mrtrix.dwi2tensor.fslgrad": dwi2tensor_fslgrad_cargs,
        "mrtrix.dwi2tensor.config": dwi2tensor_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.dwi2tensor": dwi2tensor_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function dwi2tensor_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): Dwi2tensorFslgradParameters {
    const params = {
        "@type": "mrtrix.dwi2tensor.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2tensor_fslgrad_cargs(
    params: Dwi2tensorFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function dwi2tensor_config_params(
    key: string,
    value: string,
): Dwi2tensorConfigParameters {
    const params = {
        "@type": "mrtrix.dwi2tensor.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2tensor_config_cargs(
    params: Dwi2tensorConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `dwi2tensor(...)`.
 *
 * @interface
 */
interface Dwi2tensorOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output dt image.
     */
    dt: OutputPathType;
    /**
     * the output b0 image. 
     */
    b0: OutputPathType | null;
    /**
     * the output dkt image. 
     */
    dkt: OutputPathType | null;
    /**
     * the predicted dwi image. 
     */
    predicted_signal: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dwi the input dwi image.
 * @param dt the output dt image.
 * @param ols perform initial fit using an ordinary least-squares (OLS) fit (see Description).
 * @param mask only perform computation within the specified binary brain mask image.
 * @param b0 the output b0 image.
 * @param dkt the output dkt image.
 * @param iter number of iterative reweightings for IWLS algorithm (default: 2) (see Description).
 * @param predicted_signal the predicted dwi image.
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function dwi2tensor_params(
    dwi: InputPathType,
    dt: string,
    ols: boolean = false,
    mask: InputPathType | null = null,
    b0: string | null = null,
    dkt: string | null = null,
    iter: number | null = null,
    predicted_signal: string | null = null,
    grad: InputPathType | null = null,
    fslgrad: Dwi2tensorFslgradParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2tensorConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Dwi2tensorParameters {
    const params = {
        "@type": "mrtrix.dwi2tensor" as const,
        "ols": ols,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "dwi": dwi,
        "dt": dt,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (b0 !== null) {
        params["b0"] = b0;
    }
    if (dkt !== null) {
        params["dkt"] = dkt;
    }
    if (iter !== null) {
        params["iter"] = iter;
    }
    if (predicted_signal !== null) {
        params["predicted_signal"] = predicted_signal;
    }
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2tensor_cargs(
    params: Dwi2tensorParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dwi2tensor");
    if ((params["ols"] ?? null)) {
        cargs.push("-ols");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["b0"] ?? null) !== null) {
        cargs.push(
            "-b0",
            (params["b0"] ?? null)
        );
    }
    if ((params["dkt"] ?? null) !== null) {
        cargs.push(
            "-dkt",
            (params["dkt"] ?? null)
        );
    }
    if ((params["iter"] ?? null) !== null) {
        cargs.push(
            "-iter",
            String((params["iter"] ?? null))
        );
    }
    if ((params["predicted_signal"] ?? null) !== null) {
        cargs.push(
            "-predicted_signal",
            (params["predicted_signal"] ?? null)
        );
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["dwi"] ?? null)));
    cargs.push((params["dt"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2tensor_outputs(
    params: Dwi2tensorParameters,
    execution: Execution,
): Dwi2tensorOutputs {
    const ret: Dwi2tensorOutputs = {
        root: execution.outputFile("."),
        dt: execution.outputFile([(params["dt"] ?? null)].join('')),
        b0: ((params["b0"] ?? null) !== null) ? execution.outputFile([(params["b0"] ?? null)].join('')) : null,
        dkt: ((params["dkt"] ?? null) !== null) ? execution.outputFile([(params["dkt"] ?? null)].join('')) : null,
        predicted_signal: ((params["predicted_signal"] ?? null) !== null) ? execution.outputFile([(params["predicted_signal"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * Diffusion (kurtosis) tensor estimation.
 *
 * By default, the diffusion tensor (and optionally its kurtosis) is fitted to the log-signal in two steps: firstly, using weighted least-squares (WLS) with weights based on the empirical signal intensities; secondly, by further iterated weighted least-squares (IWLS) with weights determined by the signal predictions from the previous iteration (by default, 2 iterations will be performed). This behaviour can be altered in two ways:
 *
 * * The -ols option will cause the first fitting step to be performed using ordinary least-squares (OLS); that is, all measurements contribute equally to the fit, instead of the default behaviour of weighting based on the empirical signal intensities.
 *
 * * The -iter option controls the number of iterations of the IWLS prodedure. If this is set to zero, then the output model parameters will be those resulting from the first fitting step only: either WLS by default, or OLS if the -ols option is used in conjunction with -iter 0.
 *
 * The tensor coefficients are stored in the output image as follows:
 * volumes 0-5: D11, D22, D33, D12, D13, D23
 *
 * If diffusion kurtosis is estimated using the -dkt option, these are stored as follows:
 * volumes 0-2: W1111, W2222, W3333
 * volumes 3-8: W1112, W1113, W1222, W1333, W2223, W2333
 * volumes 9-11: W1122, W1133, W2233
 * volumes 12-14: W1123, W1223, W1233
 *
 * References:
 *
 * References based on fitting algorithm used:
 *
 * * OLS, WLS:
 * Basser, P.J.; Mattiello, J.; LeBihan, D. Estimation of the effective self-diffusion tensor from the NMR spin echo. J Magn Reson B., 1994, 103, 247â€“254.
 *
 * * IWLS:
 * Veraart, J.; Sijbers, J.; Sunaert, S.; Leemans, A. & Jeurissen, B. Weighted linear least squares estimation of diffusion MRI parameters: strengths, limitations, and pitfalls. NeuroImage, 2013, 81, 335-346.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dwi2tensorOutputs`).
 */
function dwi2tensor_execute(
    params: Dwi2tensorParameters,
    runner: Runner | null = null,
): Dwi2tensorOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DWI2TENSOR_METADATA);
    params = execution.params(params)
    const cargs = dwi2tensor_cargs(params, execution)
    const ret = dwi2tensor_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Diffusion (kurtosis) tensor estimation.
 *
 * By default, the diffusion tensor (and optionally its kurtosis) is fitted to the log-signal in two steps: firstly, using weighted least-squares (WLS) with weights based on the empirical signal intensities; secondly, by further iterated weighted least-squares (IWLS) with weights determined by the signal predictions from the previous iteration (by default, 2 iterations will be performed). This behaviour can be altered in two ways:
 *
 * * The -ols option will cause the first fitting step to be performed using ordinary least-squares (OLS); that is, all measurements contribute equally to the fit, instead of the default behaviour of weighting based on the empirical signal intensities.
 *
 * * The -iter option controls the number of iterations of the IWLS prodedure. If this is set to zero, then the output model parameters will be those resulting from the first fitting step only: either WLS by default, or OLS if the -ols option is used in conjunction with -iter 0.
 *
 * The tensor coefficients are stored in the output image as follows:
 * volumes 0-5: D11, D22, D33, D12, D13, D23
 *
 * If diffusion kurtosis is estimated using the -dkt option, these are stored as follows:
 * volumes 0-2: W1111, W2222, W3333
 * volumes 3-8: W1112, W1113, W1222, W1333, W2223, W2333
 * volumes 9-11: W1122, W1133, W2233
 * volumes 12-14: W1123, W1223, W1233
 *
 * References:
 *
 * References based on fitting algorithm used:
 *
 * * OLS, WLS:
 * Basser, P.J.; Mattiello, J.; LeBihan, D. Estimation of the effective self-diffusion tensor from the NMR spin echo. J Magn Reson B., 1994, 103, 247â€“254.
 *
 * * IWLS:
 * Veraart, J.; Sijbers, J.; Sunaert, S.; Leemans, A. & Jeurissen, B. Weighted linear least squares estimation of diffusion MRI parameters: strengths, limitations, and pitfalls. NeuroImage, 2013, 81, 335-346.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param dwi the input dwi image.
 * @param dt the output dt image.
 * @param ols perform initial fit using an ordinary least-squares (OLS) fit (see Description).
 * @param mask only perform computation within the specified binary brain mask image.
 * @param b0 the output b0 image.
 * @param dkt the output dkt image.
 * @param iter number of iterative reweightings for IWLS algorithm (default: 2) (see Description).
 * @param predicted_signal the predicted dwi image.
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dwi2tensorOutputs`).
 */
function dwi2tensor(
    dwi: InputPathType,
    dt: string,
    ols: boolean = false,
    mask: InputPathType | null = null,
    b0: string | null = null,
    dkt: string | null = null,
    iter: number | null = null,
    predicted_signal: string | null = null,
    grad: InputPathType | null = null,
    fslgrad: Dwi2tensorFslgradParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2tensorConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Dwi2tensorOutputs {
    const params = dwi2tensor_params(dwi, dt, ols, mask, b0, dkt, iter, predicted_signal, grad, fslgrad, info, quiet, debug, force, nthreads, config, help, version)
    return dwi2tensor_execute(params, runner);
}


export {
      DWI2TENSOR_METADATA,
      Dwi2tensorConfigParameters,
      Dwi2tensorFslgradParameters,
      Dwi2tensorOutputs,
      Dwi2tensorParameters,
      dwi2tensor,
      dwi2tensor_config_params,
      dwi2tensor_execute,
      dwi2tensor_fslgrad_params,
      dwi2tensor_params,
};
