// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_HISTO_EQ_METADATA: Metadata = {
    id: "bbd0ddfbd3ee93f7021c527d97d0ec7bfefc586f.boutiques",
    name: "mri_histo_eq",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriHistoEqParameters {
    "@type"?: "freesurfer/mri_histo_eq";
    "input_volume_1": InputPathType;
    "input_volume_2": InputPathType;
}
type MriHistoEqParametersTagged = Required<Pick<MriHistoEqParameters, '@type'>> & MriHistoEqParameters;


/**
 * Output object returned when calling `MriHistoEqParameters(...)`.
 *
 * @interface
 */
interface MriHistoEqOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume_1 Input volume 1
 * @param input_volume_2 Input volume 2
 *
 * @returns Parameter dictionary
 */
function mri_histo_eq_params(
    input_volume_1: InputPathType,
    input_volume_2: InputPathType,
): MriHistoEqParametersTagged {
    const params = {
        "@type": "freesurfer/mri_histo_eq" as const,
        "input_volume_1": input_volume_1,
        "input_volume_2": input_volume_2,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_histo_eq_cargs(
    params: MriHistoEqParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_histo_eq");
    cargs.push(execution.inputFile((params["input_volume_1"] ?? null)));
    cargs.push(execution.inputFile((params["input_volume_2"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_histo_eq_outputs(
    params: MriHistoEqParameters,
    execution: Execution,
): MriHistoEqOutputs {
    const ret: MriHistoEqOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_histo_eq
 *
 * MRI histogram equalization tool from Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriHistoEqOutputs`).
 */
function mri_histo_eq_execute(
    params: MriHistoEqParameters,
    runner: Runner | null = null,
): MriHistoEqOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_HISTO_EQ_METADATA);
    params = execution.params(params)
    const cargs = mri_histo_eq_cargs(params, execution)
    const ret = mri_histo_eq_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_histo_eq
 *
 * MRI histogram equalization tool from Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume_1 Input volume 1
 * @param input_volume_2 Input volume 2
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriHistoEqOutputs`).
 */
function mri_histo_eq(
    input_volume_1: InputPathType,
    input_volume_2: InputPathType,
    runner: Runner | null = null,
): MriHistoEqOutputs {
    const params = mri_histo_eq_params(input_volume_1, input_volume_2)
    return mri_histo_eq_execute(params, runner);
}


export {
      MRI_HISTO_EQ_METADATA,
      MriHistoEqOutputs,
      mri_histo_eq,
      mri_histo_eq_execute,
      mri_histo_eq_params,
};
