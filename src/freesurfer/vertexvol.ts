// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VERTEXVOL_METADATA: Metadata = {
    id: "43f2f0ece18dc9707df38e81102c8d727e4682e9.boutiques",
    name: "vertexvol",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface VertexvolParameters {
    "__STYXTYPE__": "vertexvol";
    "subject": string;
    "right_hemisphere": boolean;
    "output_file"?: string | null | undefined;
    "no_th3": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "vertexvol": vertexvol_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "vertexvol": vertexvol_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `vertexvol(...)`.
 *
 * @interface
 */
interface VertexvolOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing vertex-wise volume
     */
    output_volume_file: OutputPathType | null;
}


function vertexvol_params(
    subject: string,
    right_hemisphere: boolean = false,
    output_file: string | null = "?h.volume",
    no_th3: boolean = false,
): VertexvolParameters {
    /**
     * Build parameters.
    
     * @param subject Subject identifier
     * @param right_hemisphere Select right hemisphere
     * @param output_file Output file name, default is ?h.volume
     * @param no_th3 Don't use TH3 method for computation
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "vertexvol" as const,
        "subject": subject,
        "right_hemisphere": right_hemisphere,
        "no_th3": no_th3,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


function vertexvol_cargs(
    params: VertexvolParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("vertexvol");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    if ((params["right_hemisphere"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_file"] ?? null)
        );
    }
    if ((params["no_th3"] ?? null)) {
        cargs.push("--no-th3");
    }
    return cargs;
}


function vertexvol_outputs(
    params: VertexvolParameters,
    execution: Execution,
): VertexvolOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VertexvolOutputs = {
        root: execution.outputFile("."),
        output_volume_file: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function vertexvol_execute(
    params: VertexvolParameters,
    execution: Execution,
): VertexvolOutputs {
    /**
     * Computes vertex-wise volume (and mid.area).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VertexvolOutputs`).
     */
    params = execution.params(params)
    const cargs = vertexvol_cargs(params, execution)
    const ret = vertexvol_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function vertexvol(
    subject: string,
    right_hemisphere: boolean = false,
    output_file: string | null = "?h.volume",
    no_th3: boolean = false,
    runner: Runner | null = null,
): VertexvolOutputs {
    /**
     * Computes vertex-wise volume (and mid.area).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject identifier
     * @param right_hemisphere Select right hemisphere
     * @param output_file Output file name, default is ?h.volume
     * @param no_th3 Don't use TH3 method for computation
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VertexvolOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VERTEXVOL_METADATA);
    const params = vertexvol_params(subject, right_hemisphere, output_file, no_th3)
    return vertexvol_execute(params, execution);
}


export {
      VERTEXVOL_METADATA,
      VertexvolOutputs,
      VertexvolParameters,
      vertexvol,
      vertexvol_params,
};
