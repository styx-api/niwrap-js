// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_WARP_METADATA: Metadata = {
    id: "d4ff63326a23c044a153e9290787b0570c1455d8.boutiques",
    name: "mris_warp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisWarpParameters {
    "@type": "freesurfer.mris_warp";
    "deformvol"?: string | null | undefined;
    "m3z"?: string | null | undefined;
    "regfile"?: string | null | undefined;
    "surf"?: string | null | undefined;
    "out"?: string | null | undefined;
    "abs": boolean;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_warp": mris_warp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_warp": mris_warp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_warp(...)`.
 *
 * @interface
 */
interface MrisWarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface file
     */
    output_surface: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param deformvol Volume containing deformation
 * @param m3z M3Z file containing deformation
 * @param regfile register.dat file between surface and volume
 * @param surf Surface file to warp
 * @param out Name for output surface (if does not contain '/', outputs to same directory as input surface)
 * @param abs Absolute coordinate displacement convention (default)
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 *
 * @returns Parameter dictionary
 */
function mris_warp_params(
    deformvol: string | null = null,
    m3z: string | null = null,
    regfile: string | null = null,
    surf: string | null = null,
    out: string | null = null,
    abs: boolean = false,
    help: boolean = false,
    version: boolean = false,
): MrisWarpParameters {
    const params = {
        "@type": "freesurfer.mris_warp" as const,
        "abs": abs,
        "help": help,
        "version": version,
    };
    if (deformvol !== null) {
        params["deformvol"] = deformvol;
    }
    if (m3z !== null) {
        params["m3z"] = m3z;
    }
    if (regfile !== null) {
        params["regfile"] = regfile;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    if (out !== null) {
        params["out"] = out;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_warp_cargs(
    params: MrisWarpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_warp");
    if ((params["deformvol"] ?? null) !== null) {
        cargs.push(
            "--deformvol",
            (params["deformvol"] ?? null)
        );
    }
    if ((params["m3z"] ?? null) !== null) {
        cargs.push(
            "--m3z",
            (params["m3z"] ?? null)
        );
    }
    if ((params["regfile"] ?? null) !== null) {
        cargs.push(
            "--reg",
            (params["regfile"] ?? null)
        );
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf"] ?? null)
        );
    }
    if ((params["out"] ?? null) !== null) {
        cargs.push(
            "--out",
            (params["out"] ?? null)
        );
    }
    if ((params["abs"] ?? null)) {
        cargs.push("--abs");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_warp_outputs(
    params: MrisWarpParameters,
    execution: Execution,
): MrisWarpOutputs {
    const ret: MrisWarpOutputs = {
        root: execution.outputFile("."),
        output_surface: ((params["out"] ?? null) !== null) ? execution.outputFile([(params["out"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * This program will warp a surface using a specified deformation field.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisWarpOutputs`).
 */
function mris_warp_execute(
    params: MrisWarpParameters,
    runner: Runner | null = null,
): MrisWarpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_WARP_METADATA);
    params = execution.params(params)
    const cargs = mris_warp_cargs(params, execution)
    const ret = mris_warp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program will warp a surface using a specified deformation field.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param deformvol Volume containing deformation
 * @param m3z M3Z file containing deformation
 * @param regfile register.dat file between surface and volume
 * @param surf Surface file to warp
 * @param out Name for output surface (if does not contain '/', outputs to same directory as input surface)
 * @param abs Absolute coordinate displacement convention (default)
 * @param help Print out information on how to use this program
 * @param version Print out version and exit
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisWarpOutputs`).
 */
function mris_warp(
    deformvol: string | null = null,
    m3z: string | null = null,
    regfile: string | null = null,
    surf: string | null = null,
    out: string | null = null,
    abs: boolean = false,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrisWarpOutputs {
    const params = mris_warp_params(deformvol, m3z, regfile, surf, out, abs, help, version)
    return mris_warp_execute(params, runner);
}


export {
      MRIS_WARP_METADATA,
      MrisWarpOutputs,
      MrisWarpParameters,
      mris_warp,
      mris_warp_execute,
      mris_warp_params,
};
