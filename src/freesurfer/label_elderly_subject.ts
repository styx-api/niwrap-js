// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_ELDERLY_SUBJECT_METADATA: Metadata = {
    id: "49fd247159ed8fb4cfcd93e1479cc302731742ef.boutiques",
    name: "label_elderly_subject",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LabelElderlySubjectParameters {
    "@type": "freesurfer.label_elderly_subject";
    "norm_volume": InputPathType;
    "transform_lta": InputPathType;
    "classifier_array"?: InputPathType | null | undefined;
    "aseg_volume": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.label_elderly_subject": label_elderly_subject_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.label_elderly_subject": label_elderly_subject_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `label_elderly_subject(...)`.
 *
 * @interface
 */
interface LabelElderlySubjectOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Labeled output volume
     */
    labeled_volume: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param norm_volume Normalized input volume (e.g. norm.mgz)
 * @param transform_lta Transformation file (e.g. talairach.lta)
 * @param aseg_volume Asegmentation volume file (e.g. aseg.mgz)
 * @param classifier_array Classifier array file (e.g. mixed.gca)
 *
 * @returns Parameter dictionary
 */
function label_elderly_subject_params(
    norm_volume: InputPathType,
    transform_lta: InputPathType,
    aseg_volume: InputPathType,
    classifier_array: InputPathType | null = null,
): LabelElderlySubjectParameters {
    const params = {
        "@type": "freesurfer.label_elderly_subject" as const,
        "norm_volume": norm_volume,
        "transform_lta": transform_lta,
        "aseg_volume": aseg_volume,
    };
    if (classifier_array !== null) {
        params["classifier_array"] = classifier_array;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label_elderly_subject_cargs(
    params: LabelElderlySubjectParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("label_elderly_subject");
    cargs.push(execution.inputFile((params["norm_volume"] ?? null)));
    cargs.push(execution.inputFile((params["transform_lta"] ?? null)));
    if ((params["classifier_array"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["classifier_array"] ?? null)));
    }
    cargs.push(execution.inputFile((params["aseg_volume"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label_elderly_subject_outputs(
    params: LabelElderlySubjectParameters,
    execution: Execution,
): LabelElderlySubjectOutputs {
    const ret: LabelElderlySubjectOutputs = {
        root: execution.outputFile("."),
        labeled_volume: execution.outputFile([path.basename((params["aseg_volume"] ?? null)), "_labeled.mgz"].join('')),
    };
    return ret;
}


/**
 * label_elderly_subject
 *
 * Tool for labeling brain structures in MRI images of elderly subjects using Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelElderlySubjectOutputs`).
 */
function label_elderly_subject_execute(
    params: LabelElderlySubjectParameters,
    runner: Runner | null = null,
): LabelElderlySubjectOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_ELDERLY_SUBJECT_METADATA);
    params = execution.params(params)
    const cargs = label_elderly_subject_cargs(params, execution)
    const ret = label_elderly_subject_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * label_elderly_subject
 *
 * Tool for labeling brain structures in MRI images of elderly subjects using Freesurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param norm_volume Normalized input volume (e.g. norm.mgz)
 * @param transform_lta Transformation file (e.g. talairach.lta)
 * @param aseg_volume Asegmentation volume file (e.g. aseg.mgz)
 * @param classifier_array Classifier array file (e.g. mixed.gca)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelElderlySubjectOutputs`).
 */
function label_elderly_subject(
    norm_volume: InputPathType,
    transform_lta: InputPathType,
    aseg_volume: InputPathType,
    classifier_array: InputPathType | null = null,
    runner: Runner | null = null,
): LabelElderlySubjectOutputs {
    const params = label_elderly_subject_params(norm_volume, transform_lta, aseg_volume, classifier_array)
    return label_elderly_subject_execute(params, runner);
}


export {
      LABEL_ELDERLY_SUBJECT_METADATA,
      LabelElderlySubjectOutputs,
      LabelElderlySubjectParameters,
      label_elderly_subject,
      label_elderly_subject_execute,
      label_elderly_subject_params,
};
