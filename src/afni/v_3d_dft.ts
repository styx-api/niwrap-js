// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DFT_METADATA: Metadata = {
    id: "6d9e48bc41131cc9d366a1482d65d7f807be33ce.boutiques",
    name: "3dDFT",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDftParameters {
    "@type": "afni.3dDFT";
    "infile": InputPathType;
    "prefix": string;
    "abs_output": boolean;
    "nfft"?: number | null | undefined;
    "detrend": boolean;
    "taper"?: number | null | undefined;
    "inverse": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dDFT": v_3d_dft_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dDFT": v_3d_dft_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_dft(...)`.
 *
 * @interface
 */
interface V3dDftOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset file
     */
    outfile: OutputPathType;
    /**
     * Output dataset header file
     */
    outheader: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input dataset (complex- or float-valued)
 * @param prefix Prefix for the output file
 * @param abs_output Output float dataset = abs(DFT)
 * @param nfft DFT length (must be >= number of time points)
 * @param detrend Least-squares remove linear drift before DFT
 * @param taper Fraction (0 <= f <= 1) of data to taper at ends (Hamming taper)
 * @param inverse Perform the inverse DFT
 *
 * @returns Parameter dictionary
 */
function v_3d_dft_params(
    infile: InputPathType,
    prefix: string,
    abs_output: boolean = false,
    nfft: number | null = null,
    detrend: boolean = false,
    taper: number | null = null,
    inverse: boolean = false,
): V3dDftParameters {
    const params = {
        "@type": "afni.3dDFT" as const,
        "infile": infile,
        "prefix": prefix,
        "abs_output": abs_output,
        "detrend": detrend,
        "inverse": inverse,
    };
    if (nfft !== null) {
        params["nfft"] = nfft;
    }
    if (taper !== null) {
        params["taper"] = taper;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_dft_cargs(
    params: V3dDftParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dDFT");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["abs_output"] ?? null)) {
        cargs.push("-abs");
    }
    if ((params["nfft"] ?? null) !== null) {
        cargs.push(
            "-nfft",
            String((params["nfft"] ?? null))
        );
    }
    if ((params["detrend"] ?? null)) {
        cargs.push("-detrend");
    }
    if ((params["taper"] ?? null) !== null) {
        cargs.push(
            "-taper",
            String((params["taper"] ?? null))
        );
    }
    if ((params["inverse"] ?? null)) {
        cargs.push("-inverse");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_dft_outputs(
    params: V3dDftParameters,
    execution: Execution,
): V3dDftOutputs {
    const ret: V3dDftOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')),
        outheader: execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')),
    };
    return ret;
}


/**
 * Performs Discrete Fourier Transform (DFT) along the time axis of a complex- or float-valued dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDftOutputs`).
 */
function v_3d_dft_execute(
    params: V3dDftParameters,
    runner: Runner | null = null,
): V3dDftOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DFT_METADATA);
    params = execution.params(params)
    const cargs = v_3d_dft_cargs(params, execution)
    const ret = v_3d_dft_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Performs Discrete Fourier Transform (DFT) along the time axis of a complex- or float-valued dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input dataset (complex- or float-valued)
 * @param prefix Prefix for the output file
 * @param abs_output Output float dataset = abs(DFT)
 * @param nfft DFT length (must be >= number of time points)
 * @param detrend Least-squares remove linear drift before DFT
 * @param taper Fraction (0 <= f <= 1) of data to taper at ends (Hamming taper)
 * @param inverse Perform the inverse DFT
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDftOutputs`).
 */
function v_3d_dft(
    infile: InputPathType,
    prefix: string,
    abs_output: boolean = false,
    nfft: number | null = null,
    detrend: boolean = false,
    taper: number | null = null,
    inverse: boolean = false,
    runner: Runner | null = null,
): V3dDftOutputs {
    const params = v_3d_dft_params(infile, prefix, abs_output, nfft, detrend, taper, inverse)
    return v_3d_dft_execute(params, runner);
}


export {
      V3dDftOutputs,
      V3dDftParameters,
      V_3D_DFT_METADATA,
      v_3d_dft,
      v_3d_dft_execute,
      v_3d_dft_params,
};
