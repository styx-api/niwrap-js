// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLSWAPDIM_EXE_METADATA: Metadata = {
    id: "7c02ce7473b180b9601946e15594695e282d893a.boutiques",
    name: "fslswapdim_exe",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslswapdimExeParameters {
    "@type"?: "fsl/fslswapdim_exe";
    "input_file": InputPathType;
    "axis_a": string;
    "axis_b": string;
    "axis_c": string;
    "output_file"?: string | null | undefined;
    "checkLR_flag": boolean;
}
type FslswapdimExeParametersTagged = Required<Pick<FslswapdimExeParameters, '@type'>> & FslswapdimExeParameters;


/**
 * Output object returned when calling `FslswapdimExeParameters(...)`.
 *
 * @interface
 */
interface FslswapdimExeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file with swapped dimensions
     */
    outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_file Input image file (e.g., input.nii.gz)
 * @param axis_a New x-axis in terms of old axes (-x, x, y, -y, z, -z)
 * @param axis_b New y-axis in terms of old axes (-x, x, y, -y, z, -z)
 * @param axis_c New z-axis in terms of old axes (-x, x, y, -y, z, -z)
 * @param output_file Output image file (optional, cannot be used with --checkLR flag)
 * @param check_lr_flag Option to check if the specified arguments lead to a Left-Right swap or not, cannot be used with an output name
 *
 * @returns Parameter dictionary
 */
function fslswapdim_exe_params(
    input_file: InputPathType,
    axis_a: string,
    axis_b: string,
    axis_c: string,
    output_file: string | null = null,
    check_lr_flag: boolean = false,
): FslswapdimExeParametersTagged {
    const params = {
        "@type": "fsl/fslswapdim_exe" as const,
        "input_file": input_file,
        "axis_a": axis_a,
        "axis_b": axis_b,
        "axis_c": axis_c,
        "checkLR_flag": check_lr_flag,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslswapdim_exe_cargs(
    params: FslswapdimExeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslswapdim_exe");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push((params["axis_a"] ?? null));
    cargs.push((params["axis_b"] ?? null));
    cargs.push((params["axis_c"] ?? null));
    if ((params["output_file"] ?? null) !== null) {
        cargs.push((params["output_file"] ?? null));
    }
    if ((params["checkLR_flag"] ?? false)) {
        cargs.push("--checkLR");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslswapdim_exe_outputs(
    params: FslswapdimExeParameters,
    execution: Execution,
): FslswapdimExeOutputs {
    const ret: FslswapdimExeOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["output_file"] ?? null) !== null) ? execution.outputFile([(params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * fslswapdim_exe
 *
 * Tool to swap the x, y, z axes dimensions of an image.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslswapdimExeOutputs`).
 */
function fslswapdim_exe_execute(
    params: FslswapdimExeParameters,
    runner: Runner | null = null,
): FslswapdimExeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLSWAPDIM_EXE_METADATA);
    params = execution.params(params)
    const cargs = fslswapdim_exe_cargs(params, execution)
    const ret = fslswapdim_exe_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fslswapdim_exe
 *
 * Tool to swap the x, y, z axes dimensions of an image.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input image file (e.g., input.nii.gz)
 * @param axis_a New x-axis in terms of old axes (-x, x, y, -y, z, -z)
 * @param axis_b New y-axis in terms of old axes (-x, x, y, -y, z, -z)
 * @param axis_c New z-axis in terms of old axes (-x, x, y, -y, z, -z)
 * @param output_file Output image file (optional, cannot be used with --checkLR flag)
 * @param check_lr_flag Option to check if the specified arguments lead to a Left-Right swap or not, cannot be used with an output name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslswapdimExeOutputs`).
 */
function fslswapdim_exe(
    input_file: InputPathType,
    axis_a: string,
    axis_b: string,
    axis_c: string,
    output_file: string | null = null,
    check_lr_flag: boolean = false,
    runner: Runner | null = null,
): FslswapdimExeOutputs {
    const params = fslswapdim_exe_params(input_file, axis_a, axis_b, axis_c, output_file, check_lr_flag)
    return fslswapdim_exe_execute(params, runner);
}


export {
      FSLSWAPDIM_EXE_METADATA,
      FslswapdimExeOutputs,
      fslswapdim_exe,
      fslswapdim_exe_execute,
      fslswapdim_exe_params,
};
