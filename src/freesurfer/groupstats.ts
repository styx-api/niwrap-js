// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GROUPSTATS_METADATA: Metadata = {
    id: "b3ed2b7c0070683b40d589d0c64dbdd96b53715f.boutiques",
    name: "groupstats",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GroupstatsParameters {
    "__STYXTYPE__": "groupstats";
    "outdir": string;
    "subjectfile"?: InputPathType | null | undefined;
    "fwhm"?: Array<number> | null | undefined;
    "subject_dir"?: string | null | undefined;
    "mapname"?: string | null | undefined;
    "srcsurfreg"?: string | null | undefined;
    "keep53": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "groupstats": groupstats_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "groupstats": groupstats_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `groupstats(...)`.
 *
 * @interface
 */
interface GroupstatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output files generated by groupstats.
     */
    output_files: OutputPathType;
}


function groupstats_params(
    outdir: string,
    subjectfile: InputPathType | null = null,
    fwhm: Array<number> | null = null,
    subject_dir: string | null = null,
    mapname: string | null = null,
    srcsurfreg: string | null = null,
    keep53: boolean = false,
): GroupstatsParameters {
    /**
     * Build parameters.
    
     * @param outdir Output folder
     * @param subjectfile Subject list file
     * @param fwhm Specify smoothing level(s)
     * @param subject_dir Subject directory
     * @param mapname Use the given map name
     * @param srcsurfreg Source surface registration (default is sphere.reg)
     * @param keep53 Keep 5.3 aseg names (e.g., Thalamus-Proper)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "groupstats" as const,
        "outdir": outdir,
        "keep53": keep53,
    };
    if (subjectfile !== null) {
        params["subjectfile"] = subjectfile;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (subject_dir !== null) {
        params["subject_dir"] = subject_dir;
    }
    if (mapname !== null) {
        params["mapname"] = mapname;
    }
    if (srcsurfreg !== null) {
        params["srcsurfreg"] = srcsurfreg;
    }
    return params;
}


function groupstats_cargs(
    params: GroupstatsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("groupstats");
    cargs.push(
        "--o",
        (params["outdir"] ?? null)
    );
    if ((params["subjectfile"] ?? null) !== null) {
        cargs.push(
            "--f",
            execution.inputFile((params["subjectfile"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            ...(params["fwhm"] ?? null).map(String)
        );
    }
    if ((params["subject_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subject_dir"] ?? null)
        );
    }
    if ((params["mapname"] ?? null) !== null) {
        cargs.push(
            "--m",
            (params["mapname"] ?? null)
        );
    }
    if ((params["srcsurfreg"] ?? null) !== null) {
        cargs.push(
            "--srcsurfreg",
            (params["srcsurfreg"] ?? null)
        );
    }
    if ((params["keep53"] ?? null)) {
        cargs.push("--keep53");
    }
    return cargs;
}


function groupstats_outputs(
    params: GroupstatsParameters,
    execution: Execution,
): GroupstatsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: GroupstatsOutputs = {
        root: execution.outputFile("."),
        output_files: execution.outputFile([(params["outdir"] ?? null), "/<output_file>.ext"].join('')),
    };
    return ret;
}


function groupstats_execute(
    params: GroupstatsParameters,
    execution: Execution,
): GroupstatsOutputs {
    /**
     * A script for comprehensive group analysis on both maps and ROI results within FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `GroupstatsOutputs`).
     */
    params = execution.params(params)
    const cargs = groupstats_cargs(params, execution)
    const ret = groupstats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function groupstats(
    outdir: string,
    subjectfile: InputPathType | null = null,
    fwhm: Array<number> | null = null,
    subject_dir: string | null = null,
    mapname: string | null = null,
    srcsurfreg: string | null = null,
    keep53: boolean = false,
    runner: Runner | null = null,
): GroupstatsOutputs {
    /**
     * A script for comprehensive group analysis on both maps and ROI results within FreeSurfer.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param outdir Output folder
     * @param subjectfile Subject list file
     * @param fwhm Specify smoothing level(s)
     * @param subject_dir Subject directory
     * @param mapname Use the given map name
     * @param srcsurfreg Source surface registration (default is sphere.reg)
     * @param keep53 Keep 5.3 aseg names (e.g., Thalamus-Proper)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `GroupstatsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GROUPSTATS_METADATA);
    const params = groupstats_params(outdir, subjectfile, fwhm, subject_dir, mapname, srcsurfreg, keep53)
    return groupstats_execute(params, execution);
}


export {
      GROUPSTATS_METADATA,
      GroupstatsOutputs,
      GroupstatsParameters,
      groupstats,
      groupstats_params,
};
