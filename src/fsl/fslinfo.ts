// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLINFO_METADATA: Metadata = {
    id: "58cca8fed848f7c3b19f49f10179561bb2d86040.boutiques",
    name: "fslinfo",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslinfoParameters {
    "@type": "fsl.fslinfo";
    "filename": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslinfo": fslinfo_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslinfo(...)`.
 *
 * @interface
 */
interface FslinfoOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filename Input NIFTI-1 image file (e.g. img.nii.gz)
 *
 * @returns Parameter dictionary
 */
function fslinfo_params(
    filename: InputPathType,
): FslinfoParameters {
    const params = {
        "@type": "fsl.fslinfo" as const,
        "filename": filename,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslinfo_cargs(
    params: FslinfoParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslinfo");
    cargs.push(execution.inputFile((params["filename"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslinfo_outputs(
    params: FslinfoParameters,
    execution: Execution,
): FslinfoOutputs {
    const ret: FslinfoOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Display information about NIFTI-1 image file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslinfoOutputs`).
 */
function fslinfo_execute(
    params: FslinfoParameters,
    runner: Runner | null = null,
): FslinfoOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLINFO_METADATA);
    params = execution.params(params)
    const cargs = fslinfo_cargs(params, execution)
    const ret = fslinfo_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Display information about NIFTI-1 image file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param filename Input NIFTI-1 image file (e.g. img.nii.gz)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslinfoOutputs`).
 */
function fslinfo(
    filename: InputPathType,
    runner: Runner | null = null,
): FslinfoOutputs {
    const params = fslinfo_params(filename)
    return fslinfo_execute(params, runner);
}


export {
      FSLINFO_METADATA,
      FslinfoOutputs,
      FslinfoParameters,
      fslinfo,
      fslinfo_execute,
      fslinfo_params,
};
