// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MC_METADATA: Metadata = {
    id: "49179ab79374b3c5b08a2b72c8d599c9afb7eb18.boutiques",
    name: "mri_mc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMcParameters {
    "@type"?: "freesurfer/mri_mc";
    "input_volume": InputPathType;
    "label_value": number;
    "output_surface": string;
    "connectivity"?: number | null | undefined;
}
type MriMcParametersTagged = Required<Pick<MriMcParameters, '@type'>> & MriMcParameters;


/**
 * Output object returned when calling `MriMcParameters(...)`.
 *
 * @interface
 */
interface MriMcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The extracted surface output file.
     */
    extracted_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volume The input volume from which to extract the surface.
 * @param label_value The label value of the structure to extract.
 * @param output_surface The file where the extracted surface mesh will be saved.
 * @param connectivity The connectivity used for Marching Cubes. Options are: 1=6+, 2=18, 3=6, 4=26.
 *
 * @returns Parameter dictionary
 */
function mri_mc_params(
    input_volume: InputPathType,
    label_value: number,
    output_surface: string,
    connectivity: number | null = null,
): MriMcParametersTagged {
    const params = {
        "@type": "freesurfer/mri_mc" as const,
        "input_volume": input_volume,
        "label_value": label_value,
        "output_surface": output_surface,
    };
    if (connectivity !== null) {
        params["connectivity"] = connectivity;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_mc_cargs(
    params: MriMcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_mc");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(String((params["label_value"] ?? null)));
    if ((params["connectivity"] ?? null) !== null) {
        cargs.push([(params["output_surface"] ?? null), String((params["connectivity"] ?? null))].join(''));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_mc_outputs(
    params: MriMcParameters,
    execution: Execution,
): MriMcOutputs {
    const ret: MriMcOutputs = {
        root: execution.outputFile("."),
        extracted_surface: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_mc
 *
 * Extract a surface from a label volume using Marching Cubes algorithm.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMcOutputs`).
 */
function mri_mc_execute(
    params: MriMcParameters,
    runner: Runner | null = null,
): MriMcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MC_METADATA);
    params = execution.params(params)
    const cargs = mri_mc_cargs(params, execution)
    const ret = mri_mc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_mc
 *
 * Extract a surface from a label volume using Marching Cubes algorithm.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volume The input volume from which to extract the surface.
 * @param label_value The label value of the structure to extract.
 * @param output_surface The file where the extracted surface mesh will be saved.
 * @param connectivity The connectivity used for Marching Cubes. Options are: 1=6+, 2=18, 3=6, 4=26.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMcOutputs`).
 */
function mri_mc(
    input_volume: InputPathType,
    label_value: number,
    output_surface: string,
    connectivity: number | null = null,
    runner: Runner | null = null,
): MriMcOutputs {
    const params = mri_mc_params(input_volume, label_value, output_surface, connectivity)
    return mri_mc_execute(params, runner);
}


export {
      MRI_MC_METADATA,
      MriMcOutputs,
      mri_mc,
      mri_mc_execute,
      mri_mc_params,
};
