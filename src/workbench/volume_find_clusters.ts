// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_FIND_CLUSTERS_METADATA: Metadata = {
    id: "3d464f6633e735fc66ea1c33780eea75db2262f3.boutiques",
    name: "volume-find-clusters",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeFindClustersParameters {
    "@type": "workbench.volume-find-clusters";
    "volume_in": InputPathType;
    "value_threshold": number;
    "minimum_volume": number;
    "volume_out": string;
    "opt_less_than": boolean;
    "opt_roi_roi_volume"?: InputPathType | null | undefined;
    "opt_subvolume_subvol"?: string | null | undefined;
    "opt_size_ratio_ratio"?: number | null | undefined;
    "opt_distance_distance"?: number | null | undefined;
    "opt_start_startval"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.volume-find-clusters": volume_find_clusters_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.volume-find-clusters": volume_find_clusters_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_find_clusters(...)`.
 *
 * @interface
 */
interface VolumeFindClustersOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param volume_in the input volume
 * @param value_threshold threshold for data values
 * @param minimum_volume threshold for cluster volume, in mm^3
 * @param volume_out the output volume
 * @param opt_less_than find values less than <value-threshold>, rather than greater
 * @param opt_roi_roi_volume select a region of interest: the roi, as a volume file
 * @param opt_subvolume_subvol select a single subvolume: the subvolume number or name
 * @param opt_size_ratio_ratio ignore clusters smaller than a given fraction of the largest cluster in map: fraction of the largest cluster's volume
 * @param opt_distance_distance ignore clusters further than a given distance from the largest cluster: how far from the largest cluster a cluster can be, edge to edge, in mm
 * @param opt_start_startval start labeling clusters from a value other than 1: the value to give the first cluster found
 *
 * @returns Parameter dictionary
 */
function volume_find_clusters_params(
    volume_in: InputPathType,
    value_threshold: number,
    minimum_volume: number,
    volume_out: string,
    opt_less_than: boolean = false,
    opt_roi_roi_volume: InputPathType | null = null,
    opt_subvolume_subvol: string | null = null,
    opt_size_ratio_ratio: number | null = null,
    opt_distance_distance: number | null = null,
    opt_start_startval: number | null = null,
): VolumeFindClustersParameters {
    const params = {
        "@type": "workbench.volume-find-clusters" as const,
        "volume_in": volume_in,
        "value_threshold": value_threshold,
        "minimum_volume": minimum_volume,
        "volume_out": volume_out,
        "opt_less_than": opt_less_than,
    };
    if (opt_roi_roi_volume !== null) {
        params["opt_roi_roi_volume"] = opt_roi_roi_volume;
    }
    if (opt_subvolume_subvol !== null) {
        params["opt_subvolume_subvol"] = opt_subvolume_subvol;
    }
    if (opt_size_ratio_ratio !== null) {
        params["opt_size_ratio_ratio"] = opt_size_ratio_ratio;
    }
    if (opt_distance_distance !== null) {
        params["opt_distance_distance"] = opt_distance_distance;
    }
    if (opt_start_startval !== null) {
        params["opt_start_startval"] = opt_start_startval;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function volume_find_clusters_cargs(
    params: VolumeFindClustersParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-find-clusters");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push(String((params["value_threshold"] ?? null)));
    cargs.push(String((params["minimum_volume"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_less_than"] ?? null)) {
        cargs.push("-less-than");
    }
    if ((params["opt_roi_roi_volume"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_volume"] ?? null))
        );
    }
    if ((params["opt_subvolume_subvol"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvol"] ?? null)
        );
    }
    if ((params["opt_size_ratio_ratio"] ?? null) !== null) {
        cargs.push(
            "-size-ratio",
            String((params["opt_size_ratio_ratio"] ?? null))
        );
    }
    if ((params["opt_distance_distance"] ?? null) !== null) {
        cargs.push(
            "-distance",
            String((params["opt_distance_distance"] ?? null))
        );
    }
    if ((params["opt_start_startval"] ?? null) !== null) {
        cargs.push(
            "-start",
            String((params["opt_start_startval"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function volume_find_clusters_outputs(
    params: VolumeFindClustersParameters,
    execution: Execution,
): VolumeFindClustersOutputs {
    const ret: VolumeFindClustersOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Filter clusters by volume.
 *
 * Outputs a volume with nonzero integers for all voxels within a large enough cluster, and zeros elsewhere.  The integers denote cluster membership (by default, first cluster found will use value 1, second cluster 2, etc).  Cluster values are not reused across frames of the output, but instead keep counting up.  By default, values greater than <value-threshold> are considered to be in a cluster, use -less-than to test for values less than the threshold.  To apply this as a mask to the data, or to do more complicated thresholding, see -volume-math.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VolumeFindClustersOutputs`).
 */
function volume_find_clusters_execute(
    params: VolumeFindClustersParameters,
    execution: Execution,
): VolumeFindClustersOutputs {
    params = execution.params(params)
    const cargs = volume_find_clusters_cargs(params, execution)
    const ret = volume_find_clusters_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Filter clusters by volume.
 *
 * Outputs a volume with nonzero integers for all voxels within a large enough cluster, and zeros elsewhere.  The integers denote cluster membership (by default, first cluster found will use value 1, second cluster 2, etc).  Cluster values are not reused across frames of the output, but instead keep counting up.  By default, values greater than <value-threshold> are considered to be in a cluster, use -less-than to test for values less than the threshold.  To apply this as a mask to the data, or to do more complicated thresholding, see -volume-math.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param volume_in the input volume
 * @param value_threshold threshold for data values
 * @param minimum_volume threshold for cluster volume, in mm^3
 * @param volume_out the output volume
 * @param opt_less_than find values less than <value-threshold>, rather than greater
 * @param opt_roi_roi_volume select a region of interest: the roi, as a volume file
 * @param opt_subvolume_subvol select a single subvolume: the subvolume number or name
 * @param opt_size_ratio_ratio ignore clusters smaller than a given fraction of the largest cluster in map: fraction of the largest cluster's volume
 * @param opt_distance_distance ignore clusters further than a given distance from the largest cluster: how far from the largest cluster a cluster can be, edge to edge, in mm
 * @param opt_start_startval start labeling clusters from a value other than 1: the value to give the first cluster found
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VolumeFindClustersOutputs`).
 */
function volume_find_clusters(
    volume_in: InputPathType,
    value_threshold: number,
    minimum_volume: number,
    volume_out: string,
    opt_less_than: boolean = false,
    opt_roi_roi_volume: InputPathType | null = null,
    opt_subvolume_subvol: string | null = null,
    opt_size_ratio_ratio: number | null = null,
    opt_distance_distance: number | null = null,
    opt_start_startval: number | null = null,
    runner: Runner | null = null,
): VolumeFindClustersOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_FIND_CLUSTERS_METADATA);
    const params = volume_find_clusters_params(volume_in, value_threshold, minimum_volume, volume_out, opt_less_than, opt_roi_roi_volume, opt_subvolume_subvol, opt_size_ratio_ratio, opt_distance_distance, opt_start_startval)
    return volume_find_clusters_execute(params, execution);
}


export {
      VOLUME_FIND_CLUSTERS_METADATA,
      VolumeFindClustersOutputs,
      VolumeFindClustersParameters,
      volume_find_clusters,
      volume_find_clusters_cargs,
      volume_find_clusters_execute,
      volume_find_clusters_outputs,
      volume_find_clusters_params,
};
