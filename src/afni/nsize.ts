// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const NSIZE_METADATA: Metadata = {
    id: "3ce24bfc99036870491608926e2af290bef3ada3.boutiques",
    name: "nsize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface NsizeParameters {
    "@type"?: "afni/nsize";
    "image_in": InputPathType;
    "image_out": string;
}
type NsizeParametersTagged = Required<Pick<NsizeParameters, '@type'>> & NsizeParameters;


/**
 * Output object returned when calling `NsizeParameters(...)`.
 *
 * @interface
 */
interface NsizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Zero padded output image file
     */
    image_out_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_in Input image file
 * @param image_out Output padded image file
 *
 * @returns Parameter dictionary
 */
function nsize_params(
    image_in: InputPathType,
    image_out: string,
): NsizeParametersTagged {
    const params = {
        "@type": "afni/nsize" as const,
        "image_in": image_in,
        "image_out": image_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function nsize_cargs(
    params: NsizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("nsize");
    cargs.push(execution.inputFile((params["image_in"] ?? null)));
    cargs.push((params["image_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function nsize_outputs(
    params: NsizeParameters,
    execution: Execution,
): NsizeOutputs {
    const ret: NsizeOutputs = {
        root: execution.outputFile("."),
        image_out_file: execution.outputFile([(params["image_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * nsize
 *
 * Zero pads an input image to the nearest larger NxN dimensions.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NsizeOutputs`).
 */
function nsize_execute(
    params: NsizeParameters,
    runner: Runner | null = null,
): NsizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(NSIZE_METADATA);
    params = execution.params(params)
    const cargs = nsize_cargs(params, execution)
    const ret = nsize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * nsize
 *
 * Zero pads an input image to the nearest larger NxN dimensions.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param image_in Input image file
 * @param image_out Output padded image file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `NsizeOutputs`).
 */
function nsize(
    image_in: InputPathType,
    image_out: string,
    runner: Runner | null = null,
): NsizeOutputs {
    const params = nsize_params(image_in, image_out)
    return nsize_execute(params, runner);
}


export {
      NSIZE_METADATA,
      NsizeOutputs,
      nsize,
      nsize_execute,
      nsize_params,
};
