// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_TFILTER_METADATA: Metadata = {
    id: "806ba81a851aeaa8b72fdcc2ee762dd9eadeb854.boutiques",
    name: "3dTfilter",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dTfilterParameters {
    "__STYXTYPE__": "3dTfilter";
    "inputdataset": InputPathType;
    "outputdataset": string;
    "filters": Array<string>;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dTfilter": v_3d_tfilter_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dTfilter": v_3d_tfilter_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_tfilter(...)`.
 *
 * @interface
 */
interface V3dTfilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Filtered output dataset
     */
    output_dataset: OutputPathType;
}


function v_3d_tfilter_params(
    inputdataset: InputPathType,
    outputdataset: string,
    filters: Array<string>,
): V3dTfilterParameters {
    /**
     * Build parameters.
    
     * @param inputdataset Input dataset
     * @param outputdataset Output dataset
     * @param filters Filter function(s) to apply
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dTfilter" as const,
        "inputdataset": inputdataset,
        "outputdataset": outputdataset,
        "filters": filters,
    };
    return params;
}


function v_3d_tfilter_cargs(
    params: V3dTfilterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dTfilter");
    cargs.push(
        "-input",
        execution.inputFile((params["inputdataset"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["outputdataset"] ?? null)
    );
    cargs.push(
        "-filter",
        ...(params["filters"] ?? null)
    );
    return cargs;
}


function v_3d_tfilter_outputs(
    params: V3dTfilterParameters,
    execution: Execution,
): V3dTfilterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dTfilterOutputs = {
        root: execution.outputFile("."),
        output_dataset: execution.outputFile([(params["outputdataset"] ?? null)].join('')),
    };
    return ret;
}


function v_3d_tfilter_execute(
    params: V3dTfilterParameters,
    execution: Execution,
): V3dTfilterOutputs {
    /**
     * 3dTfilter filters the time series in each voxel according to the user-specified filter functions.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dTfilterOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_tfilter_cargs(params, execution)
    const ret = v_3d_tfilter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_tfilter(
    inputdataset: InputPathType,
    outputdataset: string,
    filters: Array<string>,
    runner: Runner | null = null,
): V3dTfilterOutputs {
    /**
     * 3dTfilter filters the time series in each voxel according to the user-specified filter functions.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param inputdataset Input dataset
     * @param outputdataset Output dataset
     * @param filters Filter function(s) to apply
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dTfilterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_TFILTER_METADATA);
    const params = v_3d_tfilter_params(inputdataset, outputdataset, filters)
    return v_3d_tfilter_execute(params, execution);
}


export {
      V3dTfilterOutputs,
      V3dTfilterParameters,
      V_3D_TFILTER_METADATA,
      v_3d_tfilter,
      v_3d_tfilter_params,
};
