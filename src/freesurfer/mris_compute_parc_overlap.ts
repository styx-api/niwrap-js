// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_COMPUTE_PARC_OVERLAP_METADATA: Metadata = {
    id: "9b688cf4965e4242fe321ef384e08a9d1310e055.boutiques",
    name: "mris_compute_parc_overlap",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisComputeParcOverlapParameters {
    "__STYXTYPE__": "mris_compute_parc_overlap";
    "subject": string;
    "hemi": string;
    "annot1"?: InputPathType | null | undefined;
    "annot2"?: InputPathType | null | undefined;
    "label1"?: InputPathType | null | undefined;
    "label2"?: InputPathType | null | undefined;
    "subj_dir"?: string | null | undefined;
    "log_file"?: string | null | undefined;
    "label_list"?: InputPathType | null | undefined;
    "nocheck_label1_xyz": boolean;
    "nocheck_label2_xyz": boolean;
    "nocheck_label_xyz": boolean;
    "use_label1_xyz": boolean;
    "use_label2_xyz": boolean;
    "use_label_xyz": boolean;
    "debug_overlap": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_compute_parc_overlap": mris_compute_parc_overlap_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_compute_parc_overlap(...)`.
 *
 * @interface
 */
interface MrisComputeParcOverlapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_compute_parc_overlap_params(
    subject: string,
    hemi: string,
    annot1: InputPathType | null = null,
    annot2: InputPathType | null = null,
    label1: InputPathType | null = null,
    label2: InputPathType | null = null,
    subj_dir: string | null = null,
    log_file: string | null = null,
    label_list: InputPathType | null = null,
    nocheck_label1_xyz: boolean = false,
    nocheck_label2_xyz: boolean = false,
    nocheck_label_xyz: boolean = false,
    use_label1_xyz: boolean = false,
    use_label2_xyz: boolean = false,
    use_label_xyz: boolean = false,
    debug_overlap: boolean = false,
): MrisComputeParcOverlapParameters {
    /**
     * Build parameters.
    
     * @param subject Subject to check
     * @param hemi Hemisphere: rh or lh
     * @param annot1 First .annot file
     * @param annot2 Second .annot file
     * @param label1 First .label file
     * @param label2 Second .label file
     * @param subj_dir Set SUBJECTS_DIR
     * @param log_file Output the overall DICE and minimum distance to filename
     * @param label_list File containing labels to check, one per line
     * @param nocheck_label1_xyz When loading label1 file, don't check x,y,z coords to surface
     * @param nocheck_label2_xyz When loading label2 file, don't check x,y,z coords to surface
     * @param nocheck_label_xyz Do not check label1 and label2
     * @param use_label1_xyz Replace surface x,y,z coords with those in label1 file
     * @param use_label2_xyz Replace surface x,y,z coords with those in label2 file
     * @param use_label_xyz Use label1 and label2 coords
     * @param debug_overlap Generate ?h.overlap.annot
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_compute_parc_overlap" as const,
        "subject": subject,
        "hemi": hemi,
        "nocheck_label1_xyz": nocheck_label1_xyz,
        "nocheck_label2_xyz": nocheck_label2_xyz,
        "nocheck_label_xyz": nocheck_label_xyz,
        "use_label1_xyz": use_label1_xyz,
        "use_label2_xyz": use_label2_xyz,
        "use_label_xyz": use_label_xyz,
        "debug_overlap": debug_overlap,
    };
    if (annot1 !== null) {
        params["annot1"] = annot1;
    }
    if (annot2 !== null) {
        params["annot2"] = annot2;
    }
    if (label1 !== null) {
        params["label1"] = label1;
    }
    if (label2 !== null) {
        params["label2"] = label2;
    }
    if (subj_dir !== null) {
        params["subj_dir"] = subj_dir;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (label_list !== null) {
        params["label_list"] = label_list;
    }
    return params;
}


function mris_compute_parc_overlap_cargs(
    params: MrisComputeParcOverlapParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_compute_parc_overlap");
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemi"] ?? null)
    );
    if ((params["annot1"] ?? null) !== null) {
        cargs.push(
            "--annot1",
            execution.inputFile((params["annot1"] ?? null))
        );
    }
    if ((params["annot2"] ?? null) !== null) {
        cargs.push(
            "--annot2",
            execution.inputFile((params["annot2"] ?? null))
        );
    }
    if ((params["label1"] ?? null) !== null) {
        cargs.push(
            "--label1",
            execution.inputFile((params["label1"] ?? null))
        );
    }
    if ((params["label2"] ?? null) !== null) {
        cargs.push(
            "--label2",
            execution.inputFile((params["label2"] ?? null))
        );
    }
    if ((params["subj_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subj_dir"] ?? null)
        );
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["label_list"] ?? null) !== null) {
        cargs.push(
            "--label-list",
            execution.inputFile((params["label_list"] ?? null))
        );
    }
    if ((params["nocheck_label1_xyz"] ?? null)) {
        cargs.push("--nocheck-label1-xyz");
    }
    if ((params["nocheck_label2_xyz"] ?? null)) {
        cargs.push("--nocheck-label2-xyz");
    }
    if ((params["nocheck_label_xyz"] ?? null)) {
        cargs.push("--nocheck-label-xyz");
    }
    if ((params["use_label1_xyz"] ?? null)) {
        cargs.push("--use-label1-xyz");
    }
    if ((params["use_label2_xyz"] ?? null)) {
        cargs.push("--use-label2-xyz");
    }
    if ((params["use_label_xyz"] ?? null)) {
        cargs.push("--use-label-xyz");
    }
    if ((params["debug_overlap"] ?? null)) {
        cargs.push("--debug-overlap");
    }
    return cargs;
}


function mris_compute_parc_overlap_outputs(
    params: MrisComputeParcOverlapParameters,
    execution: Execution,
): MrisComputeParcOverlapOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisComputeParcOverlapOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_compute_parc_overlap_execute(
    params: MrisComputeParcOverlapParameters,
    execution: Execution,
): MrisComputeParcOverlapOutputs {
    /**
     * Compares two parcellated (annotated or labeled) surfaces and computes an overall Dice coefficient and mean minimum distances (mm).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisComputeParcOverlapOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_compute_parc_overlap_cargs(params, execution)
    const ret = mris_compute_parc_overlap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_compute_parc_overlap(
    subject: string,
    hemi: string,
    annot1: InputPathType | null = null,
    annot2: InputPathType | null = null,
    label1: InputPathType | null = null,
    label2: InputPathType | null = null,
    subj_dir: string | null = null,
    log_file: string | null = null,
    label_list: InputPathType | null = null,
    nocheck_label1_xyz: boolean = false,
    nocheck_label2_xyz: boolean = false,
    nocheck_label_xyz: boolean = false,
    use_label1_xyz: boolean = false,
    use_label2_xyz: boolean = false,
    use_label_xyz: boolean = false,
    debug_overlap: boolean = false,
    runner: Runner | null = null,
): MrisComputeParcOverlapOutputs {
    /**
     * Compares two parcellated (annotated or labeled) surfaces and computes an overall Dice coefficient and mean minimum distances (mm).
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject Subject to check
     * @param hemi Hemisphere: rh or lh
     * @param annot1 First .annot file
     * @param annot2 Second .annot file
     * @param label1 First .label file
     * @param label2 Second .label file
     * @param subj_dir Set SUBJECTS_DIR
     * @param log_file Output the overall DICE and minimum distance to filename
     * @param label_list File containing labels to check, one per line
     * @param nocheck_label1_xyz When loading label1 file, don't check x,y,z coords to surface
     * @param nocheck_label2_xyz When loading label2 file, don't check x,y,z coords to surface
     * @param nocheck_label_xyz Do not check label1 and label2
     * @param use_label1_xyz Replace surface x,y,z coords with those in label1 file
     * @param use_label2_xyz Replace surface x,y,z coords with those in label2 file
     * @param use_label_xyz Use label1 and label2 coords
     * @param debug_overlap Generate ?h.overlap.annot
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisComputeParcOverlapOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_COMPUTE_PARC_OVERLAP_METADATA);
    const params = mris_compute_parc_overlap_params(subject, hemi, annot1, annot2, label1, label2, subj_dir, log_file, label_list, nocheck_label1_xyz, nocheck_label2_xyz, nocheck_label_xyz, use_label1_xyz, use_label2_xyz, use_label_xyz, debug_overlap)
    return mris_compute_parc_overlap_execute(params, execution);
}


export {
      MRIS_COMPUTE_PARC_OVERLAP_METADATA,
      MrisComputeParcOverlapOutputs,
      MrisComputeParcOverlapParameters,
      mris_compute_parc_overlap,
      mris_compute_parc_overlap_params,
};
