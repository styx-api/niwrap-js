// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANNOT2STD_METADATA: Metadata = {
    id: "94260c16cb751cafe61816e78c1cd15d1558bf0f.boutiques",
    name: "annot2std",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Annot2stdParameters {
    "@type": "freesurfer.annot2std";
    "output_annot_path": string;
    "subjects": Array<string>;
    "fsgd_file"?: InputPathType | null | undefined;
    "subject_list_file"?: InputPathType | null | undefined;
    "target"?: string | null | undefined;
    "left_hemisphere": boolean;
    "right_hemisphere": boolean;
    "xhemi": boolean;
    "surfreg"?: string | null | undefined;
    "srcsurfreg"?: string | null | undefined;
    "trgsurfreg"?: string | null | undefined;
    "annotname"?: string | null | undefined;
    "aparc": boolean;
    "a2009s": boolean;
    "segmentation"?: string | null | undefined;
    "stack"?: string | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.annot2std": annot2std_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.annot2std": annot2std_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `annot2std(...)`.
 *
 * @interface
 */
interface Annot2stdOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Main output annotation file
     */
    out_annot_file: OutputPathType;
    /**
     * Output annotation probability map file
     */
    out_prob_map_file: OutputPathType;
    /**
     * Output surface segmentation file
     */
    output_surface_segmentation: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param output_annot_path Full output annotation path (also creates outannotpath.p.mgh)
 * @param subjects Input subject(s), specify each subject with --s subj
 * @param fsgd_file FSGD file for group descriptor
 * @param subject_list_file Subject list file
 * @param target Target subject (e.g., fsaverage)
 * @param left_hemisphere Use left hemisphere
 * @param right_hemisphere Use right hemisphere
 * @param xhemi For interhemispheric analysis
 * @param surfreg Surface registration type (default is sphere.reg)
 * @param srcsurfreg Source surface registration type (default is sphere.reg)
 * @param trgsurfreg Target surface registration type (default is sphere.reg)
 * @param annotname Input annotation name (?h.annotname.annot)
 * @param aparc Annotation name set to aparc
 * @param a2009s Annotation name set to aparc.a2009s
 * @param segmentation Save output as a surface segmentation (2 frames, second = p)
 * @param stack Stack of individual annotations as segmentation
 * @param help Display help
 * @param version Display version
 *
 * @returns Parameter dictionary
 */
function annot2std_params(
    output_annot_path: string,
    subjects: Array<string>,
    fsgd_file: InputPathType | null = null,
    subject_list_file: InputPathType | null = null,
    target: string | null = null,
    left_hemisphere: boolean = false,
    right_hemisphere: boolean = false,
    xhemi: boolean = false,
    surfreg: string | null = null,
    srcsurfreg: string | null = null,
    trgsurfreg: string | null = null,
    annotname: string | null = null,
    aparc: boolean = false,
    a2009s: boolean = false,
    segmentation: string | null = null,
    stack: string | null = null,
    help: boolean = false,
    version: boolean = false,
): Annot2stdParameters {
    const params = {
        "@type": "freesurfer.annot2std" as const,
        "output_annot_path": output_annot_path,
        "subjects": subjects,
        "left_hemisphere": left_hemisphere,
        "right_hemisphere": right_hemisphere,
        "xhemi": xhemi,
        "aparc": aparc,
        "a2009s": a2009s,
        "help": help,
        "version": version,
    };
    if (fsgd_file !== null) {
        params["fsgd_file"] = fsgd_file;
    }
    if (subject_list_file !== null) {
        params["subject_list_file"] = subject_list_file;
    }
    if (target !== null) {
        params["target"] = target;
    }
    if (surfreg !== null) {
        params["surfreg"] = surfreg;
    }
    if (srcsurfreg !== null) {
        params["srcsurfreg"] = srcsurfreg;
    }
    if (trgsurfreg !== null) {
        params["trgsurfreg"] = trgsurfreg;
    }
    if (annotname !== null) {
        params["annotname"] = annotname;
    }
    if (segmentation !== null) {
        params["segmentation"] = segmentation;
    }
    if (stack !== null) {
        params["stack"] = stack;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function annot2std_cargs(
    params: Annot2stdParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("annot2std");
    cargs.push(
        "--o",
        (params["output_annot_path"] ?? null)
    );
    cargs.push(
        "--s",
        ...(params["subjects"] ?? null)
    );
    if ((params["fsgd_file"] ?? null) !== null) {
        cargs.push(
            "--fsgd",
            execution.inputFile((params["fsgd_file"] ?? null))
        );
    }
    if ((params["subject_list_file"] ?? null) !== null) {
        cargs.push(
            "--f",
            execution.inputFile((params["subject_list_file"] ?? null))
        );
    }
    if ((params["target"] ?? null) !== null) {
        cargs.push(
            "--t",
            (params["target"] ?? null)
        );
    }
    if ((params["left_hemisphere"] ?? null)) {
        cargs.push("--lh");
    }
    if ((params["right_hemisphere"] ?? null)) {
        cargs.push("--rh");
    }
    if ((params["xhemi"] ?? null)) {
        cargs.push("--xhemi");
    }
    if ((params["surfreg"] ?? null) !== null) {
        cargs.push(
            "--surfreg",
            (params["surfreg"] ?? null)
        );
    }
    if ((params["srcsurfreg"] ?? null) !== null) {
        cargs.push(
            "--srcsurfreg",
            (params["srcsurfreg"] ?? null)
        );
    }
    if ((params["trgsurfreg"] ?? null) !== null) {
        cargs.push(
            "--trgsurfreg",
            (params["trgsurfreg"] ?? null)
        );
    }
    if ((params["annotname"] ?? null) !== null) {
        cargs.push(
            "--a",
            (params["annotname"] ?? null)
        );
    }
    if ((params["aparc"] ?? null)) {
        cargs.push("--aparc");
    }
    if ((params["a2009s"] ?? null)) {
        cargs.push("--a2009s");
    }
    if ((params["segmentation"] ?? null) !== null) {
        cargs.push(
            "--seg",
            (params["segmentation"] ?? null)
        );
    }
    if ((params["stack"] ?? null) !== null) {
        cargs.push(
            "--stack",
            (params["stack"] ?? null)
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function annot2std_outputs(
    params: Annot2stdParameters,
    execution: Execution,
): Annot2stdOutputs {
    const ret: Annot2stdOutputs = {
        root: execution.outputFile("."),
        out_annot_file: execution.outputFile([(params["output_annot_path"] ?? null)].join('')),
        out_prob_map_file: execution.outputFile([(params["output_annot_path"] ?? null), ".p.mgh"].join('')),
        output_surface_segmentation: ((params["segmentation"] ?? null) !== null) ? execution.outputFile([(params["segmentation"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * annot2std
 *
 * Creates an average annotation in a standard space based on transforming the annotations of the individual subjects to the standard space through the surface registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Annot2stdOutputs`).
 */
function annot2std_execute(
    params: Annot2stdParameters,
    runner: Runner | null = null,
): Annot2stdOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANNOT2STD_METADATA);
    params = execution.params(params)
    const cargs = annot2std_cargs(params, execution)
    const ret = annot2std_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * annot2std
 *
 * Creates an average annotation in a standard space based on transforming the annotations of the individual subjects to the standard space through the surface registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param output_annot_path Full output annotation path (also creates outannotpath.p.mgh)
 * @param subjects Input subject(s), specify each subject with --s subj
 * @param fsgd_file FSGD file for group descriptor
 * @param subject_list_file Subject list file
 * @param target Target subject (e.g., fsaverage)
 * @param left_hemisphere Use left hemisphere
 * @param right_hemisphere Use right hemisphere
 * @param xhemi For interhemispheric analysis
 * @param surfreg Surface registration type (default is sphere.reg)
 * @param srcsurfreg Source surface registration type (default is sphere.reg)
 * @param trgsurfreg Target surface registration type (default is sphere.reg)
 * @param annotname Input annotation name (?h.annotname.annot)
 * @param aparc Annotation name set to aparc
 * @param a2009s Annotation name set to aparc.a2009s
 * @param segmentation Save output as a surface segmentation (2 frames, second = p)
 * @param stack Stack of individual annotations as segmentation
 * @param help Display help
 * @param version Display version
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Annot2stdOutputs`).
 */
function annot2std(
    output_annot_path: string,
    subjects: Array<string>,
    fsgd_file: InputPathType | null = null,
    subject_list_file: InputPathType | null = null,
    target: string | null = null,
    left_hemisphere: boolean = false,
    right_hemisphere: boolean = false,
    xhemi: boolean = false,
    surfreg: string | null = null,
    srcsurfreg: string | null = null,
    trgsurfreg: string | null = null,
    annotname: string | null = null,
    aparc: boolean = false,
    a2009s: boolean = false,
    segmentation: string | null = null,
    stack: string | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Annot2stdOutputs {
    const params = annot2std_params(output_annot_path, subjects, fsgd_file, subject_list_file, target, left_hemisphere, right_hemisphere, xhemi, surfreg, srcsurfreg, trgsurfreg, annotname, aparc, a2009s, segmentation, stack, help, version)
    return annot2std_execute(params, runner);
}


export {
      ANNOT2STD_METADATA,
      Annot2stdOutputs,
      Annot2stdParameters,
      annot2std,
      annot2std_execute,
      annot2std_params,
};
