// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ERRTS_CORMAT_METADATA: Metadata = {
    id: "27ff9611a565195edc13b6e85a9a5b1aa081dede.boutiques",
    name: "3dErrtsCormat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dErrtsCormatParameters {
    "__STYXTYPE__": "3dErrtsCormat";
    "dset": InputPathType;
    "concat"?: string | null | undefined;
    "input"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "maxlag"?: number | null | undefined;
    "polort"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dErrtsCormat": v_3d_errts_cormat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dErrtsCormat": v_3d_errts_cormat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_errts_cormat(...)`.
 *
 * @interface
 */
interface V3dErrtsCormatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * 1D file of the Toeplitz entries.
     */
    output: OutputPathType;
}


function v_3d_errts_cormat_params(
    dset: InputPathType,
    concat: string | null = null,
    input: InputPathType | null = null,
    mask: InputPathType | null = null,
    maxlag: number | null = null,
    polort: number | null = null,
): V3dErrtsCormatParameters {
    /**
     * Build parameters.
    
     * @param dset Dataset to read, usually the '-errts' output from 3dDeconvolve.
     * @param concat As used in 3dDeconvolve.
     * @param input Alternate way of specifying the dataset to read.
     * @param mask Mask dataset to apply.
     * @param maxlag Set maximum lag.
     * @param polort Set polort level. Default is 0.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dErrtsCormat" as const,
        "dset": dset,
    };
    if (concat !== null) {
        params["concat"] = concat;
    }
    if (input !== null) {
        params["input"] = input;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (maxlag !== null) {
        params["maxlag"] = maxlag;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    return params;
}


function v_3d_errts_cormat_cargs(
    params: V3dErrtsCormatParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dErrtsCormat");
    cargs.push(execution.inputFile((params["dset"] ?? null)));
    if ((params["concat"] ?? null) !== null) {
        cargs.push(
            "-concat",
            (params["concat"] ?? null)
        );
    }
    if ((params["input"] ?? null) !== null) {
        cargs.push(
            "-input",
            execution.inputFile((params["input"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["maxlag"] ?? null) !== null) {
        cargs.push(
            "-maxlag",
            String((params["maxlag"] ?? null))
        );
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    return cargs;
}


function v_3d_errts_cormat_outputs(
    params: V3dErrtsCormatParameters,
    execution: Execution,
): V3dErrtsCormatOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dErrtsCormatOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile(["stdout"].join('')),
    };
    return ret;
}


function v_3d_errts_cormat_execute(
    params: V3dErrtsCormatParameters,
    execution: Execution,
): V3dErrtsCormatOutputs {
    /**
     * Computes the correlation matrix corresponding to the residual (or error) time series in 'dset'.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dErrtsCormatOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_errts_cormat_cargs(params, execution)
    const ret = v_3d_errts_cormat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_errts_cormat(
    dset: InputPathType,
    concat: string | null = null,
    input: InputPathType | null = null,
    mask: InputPathType | null = null,
    maxlag: number | null = null,
    polort: number | null = null,
    runner: Runner | null = null,
): V3dErrtsCormatOutputs {
    /**
     * Computes the correlation matrix corresponding to the residual (or error) time series in 'dset'.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dset Dataset to read, usually the '-errts' output from 3dDeconvolve.
     * @param concat As used in 3dDeconvolve.
     * @param input Alternate way of specifying the dataset to read.
     * @param mask Mask dataset to apply.
     * @param maxlag Set maximum lag.
     * @param polort Set polort level. Default is 0.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dErrtsCormatOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ERRTS_CORMAT_METADATA);
    const params = v_3d_errts_cormat_params(dset, concat, input, mask, maxlag, polort)
    return v_3d_errts_cormat_execute(params, execution);
}


export {
      V3dErrtsCormatOutputs,
      V3dErrtsCormatParameters,
      V_3D_ERRTS_CORMAT_METADATA,
      v_3d_errts_cormat,
      v_3d_errts_cormat_params,
};
