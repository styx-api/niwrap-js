// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DWIDENOISE_METADATA: Metadata = {
    id: "66375761a5c4ae75db2849ddf80e513a6eeb4c88.boutiques",
    name: "dwidenoise",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface DwidenoiseConfigParameters {
    "@type": "mrtrix.dwidenoise.config";
    "key": string;
    "value": string;
}


interface DwidenoiseParameters {
    "@type": "mrtrix.dwidenoise";
    "mask"?: InputPathType | null | undefined;
    "extent"?: Array<number> | null | undefined;
    "noise"?: string | null | undefined;
    "datatype"?: string | null | undefined;
    "estimator"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<DwidenoiseConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "dwi": InputPathType;
    "out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.dwidenoise": dwidenoise_cargs,
        "mrtrix.dwidenoise.config": dwidenoise_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.dwidenoise": dwidenoise_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function dwidenoise_config_params(
    key: string,
    value: string,
): DwidenoiseConfigParameters {
    const params = {
        "@type": "mrtrix.dwidenoise.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwidenoise_config_cargs(
    params: DwidenoiseConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `dwidenoise(...)`.
 *
 * @interface
 */
interface DwidenoiseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output denoised DWI image.
     */
    out: OutputPathType;
    /**
     * The output noise map, i.e., the estimated noise level 'sigma' in the data. Note that on complex input data, this will be the total noise level across real and imaginary channels, so a scale factor sqrt(2) applies. 
     */
    noise: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dwi the input diffusion-weighted image.
 * @param out the output denoised DWI image.
 * @param mask Only process voxels within the specified binary brain mask image.
 * @param extent Set the patch size of the denoising filter. By default, the command will select the smallest isotropic patch size that exceeds the number of DW images in the input data, e.g., 5x5x5 for data with <= 125 DWI volumes, 7x7x7 for data with <= 343 DWI volumes, etc.
 * @param noise The output noise map, i.e., the estimated noise level 'sigma' in the data. Note that on complex input data, this will be the total noise level across real and imaginary channels, so a scale factor sqrt(2) applies.
 * @param datatype Datatype for the eigenvalue decomposition (single or double precision). For complex input data, this will select complex float32 or complex float64 datatypes.
 * @param estimator Select the noise level estimator (default = Exp2), either: 
* Exp1: the original estimator used in Veraart et al. (2016), or 
* Exp2: the improved estimator introduced in Cordero-Grande et al. (2019).
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function dwidenoise_params(
    dwi: InputPathType,
    out: string,
    mask: InputPathType | null = null,
    extent: Array<number> | null = null,
    noise: string | null = null,
    datatype: string | null = null,
    estimator: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DwidenoiseConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): DwidenoiseParameters {
    const params = {
        "@type": "mrtrix.dwidenoise" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "dwi": dwi,
        "out": out,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (extent !== null) {
        params["extent"] = extent;
    }
    if (noise !== null) {
        params["noise"] = noise;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    if (estimator !== null) {
        params["estimator"] = estimator;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwidenoise_cargs(
    params: DwidenoiseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dwidenoise");
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["extent"] ?? null) !== null) {
        cargs.push(
            "-extent",
            ...(params["extent"] ?? null).map(String)
        );
    }
    if ((params["noise"] ?? null) !== null) {
        cargs.push(
            "-noise",
            (params["noise"] ?? null)
        );
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datatype",
            (params["datatype"] ?? null)
        );
    }
    if ((params["estimator"] ?? null) !== null) {
        cargs.push(
            "-estimator",
            (params["estimator"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["dwi"] ?? null)));
    cargs.push((params["out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwidenoise_outputs(
    params: DwidenoiseParameters,
    execution: Execution,
): DwidenoiseOutputs {
    const ret: DwidenoiseOutputs = {
        root: execution.outputFile("."),
        out: execution.outputFile([(params["out"] ?? null)].join('')),
        noise: ((params["noise"] ?? null) !== null) ? execution.outputFile([(params["noise"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * dMRI noise level estimation and denoising using Marchenko-Pastur PCA.
 *
 * DWI data denoising and noise map estimation by exploiting data redundancy in the PCA domain using the prior knowledge that the eigenspectrum of random covariance matrices is described by the universal Marchenko-Pastur (MP) distribution. Fitting the MP distribution to the spectrum of patch-wise signal matrices hence provides an estimator of the noise level 'sigma', as was first shown in Veraart et al. (2016) and later improved in Cordero-Grande et al. (2019). This noise level estimate then determines the optimal cut-off for PCA denoising.
 *
 * Important note: image denoising must be performed as the first step of the image processing pipeline. The routine will fail if interpolation or smoothing has been applied to the data prior to denoising.
 *
 * Note that this function does not correct for non-Gaussian noise biases present in magnitude-reconstructed MRI images. If available, including the MRI phase data can reduce such non-Gaussian biases, and the command now supports complex input data.
 *
 * References:
 *
 * Veraart, J.; Novikov, D.S.; Christiaens, D.; Ades-aron, B.; Sijbers, J. & Fieremans, E. Denoising of diffusion MRI using random matrix theory. NeuroImage, 2016, 142, 394-406, doi: 10.1016/j.neuroimage.2016.08.016
 *
 * Veraart, J.; Fieremans, E. & Novikov, D.S. Diffusion MRI noise mapping using random matrix theory. Magn. Res. Med., 2016, 76(5), 1582-1593, doi: 10.1002/mrm.26059
 *
 * Cordero-Grande, L.; Christiaens, D.; Hutter, J.; Price, A.N.; Hajnal, J.V. Complex diffusion-weighted image estimation via matrix recovery under general noise models. NeuroImage, 2019, 200, 391-404, doi: 10.1016/j.neuroimage.2019.06.039.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DwidenoiseOutputs`).
 */
function dwidenoise_execute(
    params: DwidenoiseParameters,
    runner: Runner | null = null,
): DwidenoiseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DWIDENOISE_METADATA);
    params = execution.params(params)
    const cargs = dwidenoise_cargs(params, execution)
    const ret = dwidenoise_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dMRI noise level estimation and denoising using Marchenko-Pastur PCA.
 *
 * DWI data denoising and noise map estimation by exploiting data redundancy in the PCA domain using the prior knowledge that the eigenspectrum of random covariance matrices is described by the universal Marchenko-Pastur (MP) distribution. Fitting the MP distribution to the spectrum of patch-wise signal matrices hence provides an estimator of the noise level 'sigma', as was first shown in Veraart et al. (2016) and later improved in Cordero-Grande et al. (2019). This noise level estimate then determines the optimal cut-off for PCA denoising.
 *
 * Important note: image denoising must be performed as the first step of the image processing pipeline. The routine will fail if interpolation or smoothing has been applied to the data prior to denoising.
 *
 * Note that this function does not correct for non-Gaussian noise biases present in magnitude-reconstructed MRI images. If available, including the MRI phase data can reduce such non-Gaussian biases, and the command now supports complex input data.
 *
 * References:
 *
 * Veraart, J.; Novikov, D.S.; Christiaens, D.; Ades-aron, B.; Sijbers, J. & Fieremans, E. Denoising of diffusion MRI using random matrix theory. NeuroImage, 2016, 142, 394-406, doi: 10.1016/j.neuroimage.2016.08.016
 *
 * Veraart, J.; Fieremans, E. & Novikov, D.S. Diffusion MRI noise mapping using random matrix theory. Magn. Res. Med., 2016, 76(5), 1582-1593, doi: 10.1002/mrm.26059
 *
 * Cordero-Grande, L.; Christiaens, D.; Hutter, J.; Price, A.N.; Hajnal, J.V. Complex diffusion-weighted image estimation via matrix recovery under general noise models. NeuroImage, 2019, 200, 391-404, doi: 10.1016/j.neuroimage.2019.06.039.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param dwi the input diffusion-weighted image.
 * @param out the output denoised DWI image.
 * @param mask Only process voxels within the specified binary brain mask image.
 * @param extent Set the patch size of the denoising filter. By default, the command will select the smallest isotropic patch size that exceeds the number of DW images in the input data, e.g., 5x5x5 for data with <= 125 DWI volumes, 7x7x7 for data with <= 343 DWI volumes, etc.
 * @param noise The output noise map, i.e., the estimated noise level 'sigma' in the data. Note that on complex input data, this will be the total noise level across real and imaginary channels, so a scale factor sqrt(2) applies.
 * @param datatype Datatype for the eigenvalue decomposition (single or double precision). For complex input data, this will select complex float32 or complex float64 datatypes.
 * @param estimator Select the noise level estimator (default = Exp2), either: 
* Exp1: the original estimator used in Veraart et al. (2016), or 
* Exp2: the improved estimator introduced in Cordero-Grande et al. (2019).
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DwidenoiseOutputs`).
 */
function dwidenoise(
    dwi: InputPathType,
    out: string,
    mask: InputPathType | null = null,
    extent: Array<number> | null = null,
    noise: string | null = null,
    datatype: string | null = null,
    estimator: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<DwidenoiseConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DwidenoiseOutputs {
    const params = dwidenoise_params(dwi, out, mask, extent, noise, datatype, estimator, info, quiet, debug, force, nthreads, config, help, version)
    return dwidenoise_execute(params, runner);
}


export {
      DWIDENOISE_METADATA,
      DwidenoiseConfigParameters,
      DwidenoiseOutputs,
      DwidenoiseParameters,
      dwidenoise,
      dwidenoise_config_params,
      dwidenoise_execute,
      dwidenoise_params,
};
