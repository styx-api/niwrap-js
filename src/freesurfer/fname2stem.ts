// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FNAME2STEM_METADATA: Metadata = {
    id: "618f3f567ece6c5824fca1deb74adb629723f532.boutiques",
    name: "fname2stem",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Fname2stemParameters {
    "@type"?: "freesurfer/fname2stem";
    "filename": string;
}
type Fname2stemParametersTagged = Required<Pick<Fname2stemParameters, '@type'>> & Fname2stemParameters;


/**
 * Output object returned when calling `Fname2stemParameters(...)`.
 *
 * @interface
 */
interface Fname2stemOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filename The name of the file to convert to a stem. The file does not need to exist.
 *
 * @returns Parameter dictionary
 */
function fname2stem_params(
    filename: string,
): Fname2stemParametersTagged {
    const params = {
        "@type": "freesurfer/fname2stem" as const,
        "filename": filename,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fname2stem_cargs(
    params: Fname2stemParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fname2stem");
    cargs.push((params["filename"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fname2stem_outputs(
    params: Fname2stemParameters,
    execution: Execution,
): Fname2stemOutputs {
    const ret: Fname2stemOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * fname2stem
 *
 * Converts the name of a file to a stem. Example: f.mgh, f.nii, f.nii.gz would return f.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fname2stemOutputs`).
 */
function fname2stem_execute(
    params: Fname2stemParameters,
    runner: Runner | null = null,
): Fname2stemOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FNAME2STEM_METADATA);
    params = execution.params(params)
    const cargs = fname2stem_cargs(params, execution)
    const ret = fname2stem_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fname2stem
 *
 * Converts the name of a file to a stem. Example: f.mgh, f.nii, f.nii.gz would return f.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param filename The name of the file to convert to a stem. The file does not need to exist.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fname2stemOutputs`).
 */
function fname2stem(
    filename: string,
    runner: Runner | null = null,
): Fname2stemOutputs {
    const params = fname2stem_params(filename)
    return fname2stem_execute(params, runner);
}


export {
      FNAME2STEM_METADATA,
      Fname2stemOutputs,
      fname2stem,
      fname2stem_execute,
      fname2stem_params,
};
