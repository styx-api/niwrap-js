// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CC_METADATA: Metadata = {
    id: "d318bda8342a63ef83b48c3583a7df0c903372c4.boutiques",
    name: "mri_cc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCcParameters {
    "@type": "freesurfer.mri_cc";
    "subject_name": string;
    "output_file"?: string | null | undefined;
    "aseg_file"?: InputPathType | null | undefined;
    "norm_file"?: InputPathType | null | undefined;
    "sdir"?: string | null | undefined;
    "rotation_lta"?: InputPathType | null | undefined;
    "force_flag": boolean;
    "include_fornix": boolean;
    "compartments"?: number | null | undefined;
    "thickness"?: number | null | undefined;
    "skip_voxels"?: number | null | undefined;
    "max_rotation"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_cc": mri_cc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_cc": mri_cc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_cc(...)`.
 *
 * @interface
 */
interface MriCcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume including CC segmentation results.
     */
    output_volume: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param subject_name Subject name used in processing
 * @param output_file Write aseg including CC to SDIR/mri/<fname>
 * @param aseg_file Read aseg from SDIR/mri/<fname>
 * @param norm_file Read norm from SDIR/mri/<fname>
 * @param sdir Set SUBJECTS_DIR to <dname>
 * @param rotation_lta Write rotation lta to global <fname>
 * @param force_flag Process regardless of existing CC in input
 * @param include_fornix Include fornix in segmentation
 * @param compartments Subdivide into <int> compartments
 * @param thickness Setting CC thickness to <int> mm
 * @param skip_voxels Skipping <int> voxels in rotational align
 * @param max_rotation Set max of rotations to be searched (default=7deg)
 *
 * @returns Parameter dictionary
 */
function mri_cc_params(
    subject_name: string,
    output_file: string | null = null,
    aseg_file: InputPathType | null = null,
    norm_file: InputPathType | null = null,
    sdir: string | null = null,
    rotation_lta: InputPathType | null = null,
    force_flag: boolean = false,
    include_fornix: boolean = false,
    compartments: number | null = null,
    thickness: number | null = null,
    skip_voxels: number | null = null,
    max_rotation: number | null = null,
): MriCcParameters {
    const params = {
        "@type": "freesurfer.mri_cc" as const,
        "subject_name": subject_name,
        "force_flag": force_flag,
        "include_fornix": include_fornix,
    };
    if (output_file !== null) {
        params["output_file"] = output_file;
    }
    if (aseg_file !== null) {
        params["aseg_file"] = aseg_file;
    }
    if (norm_file !== null) {
        params["norm_file"] = norm_file;
    }
    if (sdir !== null) {
        params["sdir"] = sdir;
    }
    if (rotation_lta !== null) {
        params["rotation_lta"] = rotation_lta;
    }
    if (compartments !== null) {
        params["compartments"] = compartments;
    }
    if (thickness !== null) {
        params["thickness"] = thickness;
    }
    if (skip_voxels !== null) {
        params["skip_voxels"] = skip_voxels;
    }
    if (max_rotation !== null) {
        params["max_rotation"] = max_rotation;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_cc_cargs(
    params: MriCcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_cc");
    cargs.push((params["subject_name"] ?? null));
    if ((params["output_file"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_file"] ?? null)
        );
    }
    if ((params["aseg_file"] ?? null) !== null) {
        cargs.push(
            "-aseg",
            execution.inputFile((params["aseg_file"] ?? null))
        );
    }
    if ((params["norm_file"] ?? null) !== null) {
        cargs.push(
            "-norm",
            execution.inputFile((params["norm_file"] ?? null))
        );
    }
    if ((params["sdir"] ?? null) !== null) {
        cargs.push(
            "-sdir",
            (params["sdir"] ?? null)
        );
    }
    if ((params["rotation_lta"] ?? null) !== null) {
        cargs.push(
            "-lta",
            execution.inputFile((params["rotation_lta"] ?? null))
        );
    }
    if ((params["force_flag"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["include_fornix"] ?? null)) {
        cargs.push("-f");
    }
    if ((params["compartments"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["compartments"] ?? null))
        );
    }
    if ((params["thickness"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["thickness"] ?? null))
        );
    }
    if ((params["skip_voxels"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["skip_voxels"] ?? null))
        );
    }
    if ((params["max_rotation"] ?? null) !== null) {
        cargs.push(
            "-m",
            String((params["max_rotation"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_cc_outputs(
    params: MriCcParameters,
    execution: Execution,
): MriCcOutputs {
    const ret: MriCcOutputs = {
        root: execution.outputFile("."),
        output_volume: ((params["output_file"] ?? null) !== null) ? execution.outputFile(["SDIR/mri/", (params["output_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * mri_cc
 *
 * Segments the corpus callosum into five separate labels in the subcortical segmentation volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCcOutputs`).
 */
function mri_cc_execute(
    params: MriCcParameters,
    runner: Runner | null = null,
): MriCcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CC_METADATA);
    params = execution.params(params)
    const cargs = mri_cc_cargs(params, execution)
    const ret = mri_cc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_cc
 *
 * Segments the corpus callosum into five separate labels in the subcortical segmentation volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name Subject name used in processing
 * @param output_file Write aseg including CC to SDIR/mri/<fname>
 * @param aseg_file Read aseg from SDIR/mri/<fname>
 * @param norm_file Read norm from SDIR/mri/<fname>
 * @param sdir Set SUBJECTS_DIR to <dname>
 * @param rotation_lta Write rotation lta to global <fname>
 * @param force_flag Process regardless of existing CC in input
 * @param include_fornix Include fornix in segmentation
 * @param compartments Subdivide into <int> compartments
 * @param thickness Setting CC thickness to <int> mm
 * @param skip_voxels Skipping <int> voxels in rotational align
 * @param max_rotation Set max of rotations to be searched (default=7deg)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriCcOutputs`).
 */
function mri_cc(
    subject_name: string,
    output_file: string | null = null,
    aseg_file: InputPathType | null = null,
    norm_file: InputPathType | null = null,
    sdir: string | null = null,
    rotation_lta: InputPathType | null = null,
    force_flag: boolean = false,
    include_fornix: boolean = false,
    compartments: number | null = null,
    thickness: number | null = null,
    skip_voxels: number | null = null,
    max_rotation: number | null = null,
    runner: Runner | null = null,
): MriCcOutputs {
    const params = mri_cc_params(subject_name, output_file, aseg_file, norm_file, sdir, rotation_lta, force_flag, include_fornix, compartments, thickness, skip_voxels, max_rotation)
    return mri_cc_execute(params, runner);
}


export {
      MRI_CC_METADATA,
      MriCcOutputs,
      MriCcParameters,
      mri_cc,
      mri_cc_execute,
      mri_cc_params,
};
