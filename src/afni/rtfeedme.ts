// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RTFEEDME_METADATA: Metadata = {
    id: "10a9c1f1dd1351e0a684111b51d759ea5478ae34.boutiques",
    name: "rtfeedme",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface RtfeedmeParameters {
    "@type": "afni.rtfeedme";
    "datasets": Array<InputPathType>;
    "host"?: string | null | undefined;
    "interval_ms"?: number | null | undefined;
    "send_3d": boolean;
    "buffer_mb"?: number | null | undefined;
    "verbose": boolean;
    "swap_bytes": boolean;
    "nz_fake"?: number | null | undefined;
    "drive_cmd"?: Array<string> | null | undefined;
    "note"?: Array<string> | null | undefined;
    "yrange"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.rtfeedme": rtfeedme_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rtfeedme(...)`.
 *
 * @interface
 */
interface RtfeedmeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param datasets List of datasets to send to AFNI, specified as paths to dataset files. Multiple datasets can be specified.
 * @param host Send data via TCP/IP to AFNI running on the specified computer system 'sname'. Default is the current system using shared memory. Use 'localhost' to send on the current system using TCP/IP.
 * @param interval_ms Inter-transmit interval in milliseconds. Default is to send data as fast as possible.
 * @param send_3d Send data in 3D bricks. Default is 2D slices.
 * @param buffer_mb Set the interprocess communications buffer size in megabytes when using shared memory. Has no effect if using TCP/IP. Default is 1 MB; if set to 0, a 50 KB buffer is used.
 * @param verbose Be talkative about actions.
 * @param swap_bytes Swap byte pairs before sending data.
 * @param nz_fake Send 'nz' as the value of nzz for debugging purposes.
 * @param drive_cmd Send 'cmd' as a DRIVE_AFNI command. If 'cmd' contains spaces, it must be quoted. Multiple -drive options can be used.
 * @param note Send 'sss' as a NOTE to the realtime plugin. Multiple -note options can be used.
 * @param yrange Send value 'v' as the y-range for realtime motion estimation graphing.
 *
 * @returns Parameter dictionary
 */
function rtfeedme_params(
    datasets: Array<InputPathType>,
    host: string | null = null,
    interval_ms: number | null = null,
    send_3d: boolean = false,
    buffer_mb: number | null = null,
    verbose: boolean = false,
    swap_bytes: boolean = false,
    nz_fake: number | null = null,
    drive_cmd: Array<string> | null = null,
    note: Array<string> | null = null,
    yrange: number | null = null,
): RtfeedmeParameters {
    const params = {
        "@type": "afni.rtfeedme" as const,
        "datasets": datasets,
        "send_3d": send_3d,
        "verbose": verbose,
        "swap_bytes": swap_bytes,
    };
    if (host !== null) {
        params["host"] = host;
    }
    if (interval_ms !== null) {
        params["interval_ms"] = interval_ms;
    }
    if (buffer_mb !== null) {
        params["buffer_mb"] = buffer_mb;
    }
    if (nz_fake !== null) {
        params["nz_fake"] = nz_fake;
    }
    if (drive_cmd !== null) {
        params["drive_cmd"] = drive_cmd;
    }
    if (note !== null) {
        params["note"] = note;
    }
    if (yrange !== null) {
        params["yrange"] = yrange;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rtfeedme_cargs(
    params: RtfeedmeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rtfeedme");
    cargs.push(...(params["datasets"] ?? null).map(f => execution.inputFile(f)));
    if ((params["host"] ?? null) !== null) {
        cargs.push(
            "-host",
            (params["host"] ?? null)
        );
    }
    if ((params["interval_ms"] ?? null) !== null) {
        cargs.push(
            "-dt",
            String((params["interval_ms"] ?? null))
        );
    }
    if ((params["send_3d"] ?? null)) {
        cargs.push("-3D");
    }
    if ((params["buffer_mb"] ?? null) !== null) {
        cargs.push(
            "-buf",
            String((params["buffer_mb"] ?? null))
        );
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verbose");
    }
    if ((params["swap_bytes"] ?? null)) {
        cargs.push("-swap2");
    }
    if ((params["nz_fake"] ?? null) !== null) {
        cargs.push(
            "-nzfake",
            String((params["nz_fake"] ?? null))
        );
    }
    if ((params["drive_cmd"] ?? null) !== null) {
        cargs.push(
            "-drive",
            ...(params["drive_cmd"] ?? null)
        );
    }
    if ((params["note"] ?? null) !== null) {
        cargs.push(
            "-note",
            ...(params["note"] ?? null)
        );
    }
    if ((params["yrange"] ?? null) !== null) {
        cargs.push(
            "-gyr",
            String((params["yrange"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rtfeedme_outputs(
    params: RtfeedmeParameters,
    execution: Execution,
): RtfeedmeOutputs {
    const ret: RtfeedmeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * rtfeedme
 *
 * Test the real-time plugin by sending all the bricks in 'dataset' to AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RtfeedmeOutputs`).
 */
function rtfeedme_execute(
    params: RtfeedmeParameters,
    runner: Runner | null = null,
): RtfeedmeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RTFEEDME_METADATA);
    params = execution.params(params)
    const cargs = rtfeedme_cargs(params, execution)
    const ret = rtfeedme_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * rtfeedme
 *
 * Test the real-time plugin by sending all the bricks in 'dataset' to AFNI.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param datasets List of datasets to send to AFNI, specified as paths to dataset files. Multiple datasets can be specified.
 * @param host Send data via TCP/IP to AFNI running on the specified computer system 'sname'. Default is the current system using shared memory. Use 'localhost' to send on the current system using TCP/IP.
 * @param interval_ms Inter-transmit interval in milliseconds. Default is to send data as fast as possible.
 * @param send_3d Send data in 3D bricks. Default is 2D slices.
 * @param buffer_mb Set the interprocess communications buffer size in megabytes when using shared memory. Has no effect if using TCP/IP. Default is 1 MB; if set to 0, a 50 KB buffer is used.
 * @param verbose Be talkative about actions.
 * @param swap_bytes Swap byte pairs before sending data.
 * @param nz_fake Send 'nz' as the value of nzz for debugging purposes.
 * @param drive_cmd Send 'cmd' as a DRIVE_AFNI command. If 'cmd' contains spaces, it must be quoted. Multiple -drive options can be used.
 * @param note Send 'sss' as a NOTE to the realtime plugin. Multiple -note options can be used.
 * @param yrange Send value 'v' as the y-range for realtime motion estimation graphing.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RtfeedmeOutputs`).
 */
function rtfeedme(
    datasets: Array<InputPathType>,
    host: string | null = null,
    interval_ms: number | null = null,
    send_3d: boolean = false,
    buffer_mb: number | null = null,
    verbose: boolean = false,
    swap_bytes: boolean = false,
    nz_fake: number | null = null,
    drive_cmd: Array<string> | null = null,
    note: Array<string> | null = null,
    yrange: number | null = null,
    runner: Runner | null = null,
): RtfeedmeOutputs {
    const params = rtfeedme_params(datasets, host, interval_ms, send_3d, buffer_mb, verbose, swap_bytes, nz_fake, drive_cmd, note, yrange)
    return rtfeedme_execute(params, runner);
}


export {
      RTFEEDME_METADATA,
      RtfeedmeOutputs,
      RtfeedmeParameters,
      rtfeedme,
      rtfeedme_execute,
      rtfeedme_params,
};
