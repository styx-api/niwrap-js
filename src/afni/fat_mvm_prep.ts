// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_MVM_PREP_METADATA: Metadata = {
    id: "90f6bc657de16af423e425320b0789c1d1f1d2eb.boutiques",
    name: "fat_mvm_prep",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatMvmPrepParameters {
    "__STYXTYPE__": "fat_mvm_prep";
    "prefix": string;
    "csv_file": InputPathType;
    "matrix_files"?: string | null | undefined;
    "list_match"?: InputPathType | null | undefined;
    "unionize_rois": boolean;
    "na_warn_off": boolean;
    "extern_labels_no": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fat_mvm_prep": fat_mvm_prep_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fat_mvm_prep": fat_mvm_prep_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_mvm_prep(...)`.
 *
 * @interface
 */
interface FatMvmPrepOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output tabular text file for 3dMVM.
     */
    mvmtbl: OutputPathType;
    /**
     * Log file detailing subject matching and ROI list.
     */
    mvmprep_log: OutputPathType;
}


function fat_mvm_prep_params(
    prefix: string,
    csv_file: InputPathType,
    matrix_files: string | null = null,
    list_match: InputPathType | null = null,
    unionize_rois: boolean = false,
    na_warn_off: boolean = false,
    extern_labels_no: boolean = false,
): FatMvmPrepParameters {
    /**
     * Build parameters.
    
     * @param prefix Prefix for output files.
     * @param csv_file Comma-separated variable (CSV) file for input.
     * @param matrix_files Set of matrix (*.grid or *.netcc) files by searchable path.
     * @param list_match Text file containing two columns: path to subject matrix file and CSV IDs.
     * @param unionize_rois Make the ROI list as the union of elements across the group.
     * @param na_warn_off Turn off the automatic warnings as the data table is created.
     * @param extern_labels_no Turn off the writing/usage of user-defined labels in the *.grid/*.netcc files.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fat_mvm_prep" as const,
        "prefix": prefix,
        "csv_file": csv_file,
        "unionize_rois": unionize_rois,
        "na_warn_off": na_warn_off,
        "extern_labels_no": extern_labels_no,
    };
    if (matrix_files !== null) {
        params["matrix_files"] = matrix_files;
    }
    if (list_match !== null) {
        params["list_match"] = list_match;
    }
    return params;
}


function fat_mvm_prep_cargs(
    params: FatMvmPrepParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fat_mvm_prep.py");
    cargs.push(
        "-p",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-c",
        execution.inputFile((params["csv_file"] ?? null))
    );
    if ((params["matrix_files"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["matrix_files"] ?? null)
        );
    }
    if ((params["list_match"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["list_match"] ?? null))
        );
    }
    if ((params["unionize_rois"] ?? null)) {
        cargs.push("-u");
    }
    if ((params["na_warn_off"] ?? null)) {
        cargs.push("-N");
    }
    if ((params["extern_labels_no"] ?? null)) {
        cargs.push("-E");
    }
    return cargs;
}


function fat_mvm_prep_outputs(
    params: FatMvmPrepParameters,
    execution: Execution,
): FatMvmPrepOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FatMvmPrepOutputs = {
        root: execution.outputFile("."),
        mvmtbl: execution.outputFile([(params["prefix"] ?? null), "_MVMtbl.txt"].join('')),
        mvmprep_log: execution.outputFile([(params["prefix"] ?? null), "_MVMprep.log"].join('')),
    };
    return ret;
}


function fat_mvm_prep_execute(
    params: FatMvmPrepParameters,
    execution: Execution,
): FatMvmPrepOutputs {
    /**
     * Combine FATCAT output with CSV data for statistical modeling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FatMvmPrepOutputs`).
     */
    params = execution.params(params)
    const cargs = fat_mvm_prep_cargs(params, execution)
    const ret = fat_mvm_prep_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fat_mvm_prep(
    prefix: string,
    csv_file: InputPathType,
    matrix_files: string | null = null,
    list_match: InputPathType | null = null,
    unionize_rois: boolean = false,
    na_warn_off: boolean = false,
    extern_labels_no: boolean = false,
    runner: Runner | null = null,
): FatMvmPrepOutputs {
    /**
     * Combine FATCAT output with CSV data for statistical modeling.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix Prefix for output files.
     * @param csv_file Comma-separated variable (CSV) file for input.
     * @param matrix_files Set of matrix (*.grid or *.netcc) files by searchable path.
     * @param list_match Text file containing two columns: path to subject matrix file and CSV IDs.
     * @param unionize_rois Make the ROI list as the union of elements across the group.
     * @param na_warn_off Turn off the automatic warnings as the data table is created.
     * @param extern_labels_no Turn off the writing/usage of user-defined labels in the *.grid/*.netcc files.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FatMvmPrepOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_MVM_PREP_METADATA);
    const params = fat_mvm_prep_params(prefix, csv_file, matrix_files, list_match, unionize_rois, na_warn_off, extern_labels_no)
    return fat_mvm_prep_execute(params, execution);
}


export {
      FAT_MVM_PREP_METADATA,
      FatMvmPrepOutputs,
      FatMvmPrepParameters,
      fat_mvm_prep,
      fat_mvm_prep_params,
};
