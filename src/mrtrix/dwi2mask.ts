// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DWI2MASK_METADATA: Metadata = {
    id: "9d585c1eb8931fbf6a7b9b4efcfcbe79a0ec151f.boutiques",
    name: "dwi2mask",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Dwi2maskFslgradParameters {
    "@type": "mrtrix.dwi2mask.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface Dwi2maskConfigParameters {
    "@type": "mrtrix.dwi2mask.config";
    "key": string;
    "value": string;
}


interface Dwi2maskParameters {
    "@type": "mrtrix.dwi2mask";
    "clean_scale"?: number | null | undefined;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: Dwi2maskFslgradParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Dwi2maskConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.dwi2mask": dwi2mask_cargs,
        "mrtrix.dwi2mask.fslgrad": dwi2mask_fslgrad_cargs,
        "mrtrix.dwi2mask.config": dwi2mask_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.dwi2mask": dwi2mask_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function dwi2mask_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): Dwi2maskFslgradParameters {
    const params = {
        "@type": "mrtrix.dwi2mask.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2mask_fslgrad_cargs(
    params: Dwi2maskFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function dwi2mask_config_params(
    key: string,
    value: string,
): Dwi2maskConfigParameters {
    const params = {
        "@type": "mrtrix.dwi2mask.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2mask_config_cargs(
    params: Dwi2maskConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `dwi2mask(...)`.
 *
 * @interface
 */
interface Dwi2maskOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output whole-brain mask image
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input DWI image containing volumes that are both diffusion weighted and b=0
 * @param output the output whole-brain mask image
 * @param clean_scale the maximum scale used to cut bridges. A certain maximum scale cuts bridges up to a width (in voxels) of 2x the provided scale. Setting this to 0 disables the mask cleaning step. (Default: 2)
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function dwi2mask_params(
    input: InputPathType,
    output: string,
    clean_scale: number | null = null,
    grad: InputPathType | null = null,
    fslgrad: Dwi2maskFslgradParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2maskConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Dwi2maskParameters {
    const params = {
        "@type": "mrtrix.dwi2mask" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "output": output,
    };
    if (clean_scale !== null) {
        params["clean_scale"] = clean_scale;
    }
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dwi2mask_cargs(
    params: Dwi2maskParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dwi2mask");
    if ((params["clean_scale"] ?? null) !== null) {
        cargs.push(
            "-clean_scale",
            String((params["clean_scale"] ?? null))
        );
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dwi2mask_outputs(
    params: Dwi2maskParameters,
    execution: Execution,
): Dwi2maskOutputs {
    const ret: Dwi2maskOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Generates a whole brain mask from a DWI image.
 *
 * All diffusion weighted and b=0 volumes are used to obtain a mask that includes both brain tissue and CSF.
 *
 * In a second step peninsula-like extensions, where the peninsula itself is wider than the bridge connecting it to the mask, are removed. This may help removing artefacts and non-brain parts, e.g. eyes, from the mask.
 *
 * References:
 *
 * Dhollander T, Raffelt D, Connelly A. Unsupervised 3-tissue response function estimation from single-shell or multi-shell diffusion MR data without a co-registered T1 image. ISMRM Workshop on Breaking the Barriers of Diffusion MRI, 2016, 5.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dwi2maskOutputs`).
 */
function dwi2mask_execute(
    params: Dwi2maskParameters,
    runner: Runner | null = null,
): Dwi2maskOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DWI2MASK_METADATA);
    params = execution.params(params)
    const cargs = dwi2mask_cargs(params, execution)
    const ret = dwi2mask_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Generates a whole brain mask from a DWI image.
 *
 * All diffusion weighted and b=0 volumes are used to obtain a mask that includes both brain tissue and CSF.
 *
 * In a second step peninsula-like extensions, where the peninsula itself is wider than the bridge connecting it to the mask, are removed. This may help removing artefacts and non-brain parts, e.g. eyes, from the mask.
 *
 * References:
 *
 * Dhollander T, Raffelt D, Connelly A. Unsupervised 3-tissue response function estimation from single-shell or multi-shell diffusion MR data without a co-registered T1 image. ISMRM Workshop on Breaking the Barriers of Diffusion MRI, 2016, 5.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input DWI image containing volumes that are both diffusion weighted and b=0
 * @param output the output whole-brain mask image
 * @param clean_scale the maximum scale used to cut bridges. A certain maximum scale cuts bridges up to a width (in voxels) of 2x the provided scale. Setting this to 0 disables the mask cleaning step. (Default: 2)
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Dwi2maskOutputs`).
 */
function dwi2mask(
    input: InputPathType,
    output: string,
    clean_scale: number | null = null,
    grad: InputPathType | null = null,
    fslgrad: Dwi2maskFslgradParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Dwi2maskConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Dwi2maskOutputs {
    const params = dwi2mask_params(input, output, clean_scale, grad, fslgrad, info, quiet, debug, force, nthreads, config, help, version)
    return dwi2mask_execute(params, runner);
}


export {
      DWI2MASK_METADATA,
      Dwi2maskConfigParameters,
      Dwi2maskFslgradParameters,
      Dwi2maskOutputs,
      Dwi2maskParameters,
      dwi2mask,
      dwi2mask_config_params,
      dwi2mask_execute,
      dwi2mask_fslgrad_params,
      dwi2mask_params,
};
