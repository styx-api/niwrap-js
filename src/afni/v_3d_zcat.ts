// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ZCAT_METADATA: Metadata = {
    id: "f09932d1f0c48de36aaac052798af4aa5ecaae6f.boutiques",
    name: "3dZcat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dZcatParameters {
    "@type": "afni.3dZcat";
    "prefix"?: string | null | undefined;
    "datum"?: "byte" | "short" | "float" | null | undefined;
    "fscale": boolean;
    "nscale": boolean;
    "verb": boolean;
    "frugal": boolean;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dZcat": v_3d_zcat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dZcat": v_3d_zcat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_zcat(...)`.
 *
 * @interface
 */
interface V3dZcatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * AFNI HEAD file of the output dataset
     */
    out_head: OutputPathType | null;
    /**
     * AFNI BRIK file of the output dataset
     */
    out_brik: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_files Input datasets
 * @param prefix Use 'pname' for the output dataset prefix name. [default='zcat']
 * @param datum Coerce the output data to be stored as the given type, which may be byte, short, or float.
 * @param fscale Force scaling of the output to the maximum integer range. This only has effect if the output datum is byte or short (either forced or defaulted). This option is sometimes necessary to eliminate unpleasant truncation artifacts.
 * @param nscale Don't do any scaling on output to byte or short datasets. This may be especially useful when operating on mask datasets whose output values are only 0's and 1's.
 * @param verb Print out some verbosity as the program proceeds.
 * @param frugal Be 'frugal' in the use of memory, at the cost of I/O time. Only needed if the program runs out of memory. Note frugality cannot be combined with NIFTI output
 *
 * @returns Parameter dictionary
 */
function v_3d_zcat_params(
    input_files: Array<InputPathType>,
    prefix: string | null = null,
    datum: "byte" | "short" | "float" | null = null,
    fscale: boolean = false,
    nscale: boolean = false,
    verb: boolean = false,
    frugal: boolean = false,
): V3dZcatParameters {
    const params = {
        "@type": "afni.3dZcat" as const,
        "fscale": fscale,
        "nscale": nscale,
        "verb": verb,
        "frugal": frugal,
        "input_files": input_files,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_zcat_cargs(
    params: V3dZcatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dZcat");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    if ((params["fscale"] ?? null)) {
        cargs.push("-fscale");
    }
    if ((params["nscale"] ?? null)) {
        cargs.push("-nscale");
    }
    if ((params["verb"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["frugal"] ?? null)) {
        cargs.push("-frugal");
    }
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_zcat_outputs(
    params: V3dZcatParameters,
    execution: Execution,
): V3dZcatOutputs {
    const ret: V3dZcatOutputs = {
        root: execution.outputFile("."),
        out_head: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.HEAD"].join('')) : null,
        out_brik: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "+orig.BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * Concatenates datasets in the slice (z) direction.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dZcatOutputs`).
 */
function v_3d_zcat_execute(
    params: V3dZcatParameters,
    runner: Runner | null = null,
): V3dZcatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ZCAT_METADATA);
    params = execution.params(params)
    const cargs = v_3d_zcat_cargs(params, execution)
    const ret = v_3d_zcat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Concatenates datasets in the slice (z) direction.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input datasets
 * @param prefix Use 'pname' for the output dataset prefix name. [default='zcat']
 * @param datum Coerce the output data to be stored as the given type, which may be byte, short, or float.
 * @param fscale Force scaling of the output to the maximum integer range. This only has effect if the output datum is byte or short (either forced or defaulted). This option is sometimes necessary to eliminate unpleasant truncation artifacts.
 * @param nscale Don't do any scaling on output to byte or short datasets. This may be especially useful when operating on mask datasets whose output values are only 0's and 1's.
 * @param verb Print out some verbosity as the program proceeds.
 * @param frugal Be 'frugal' in the use of memory, at the cost of I/O time. Only needed if the program runs out of memory. Note frugality cannot be combined with NIFTI output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dZcatOutputs`).
 */
function v_3d_zcat(
    input_files: Array<InputPathType>,
    prefix: string | null = null,
    datum: "byte" | "short" | "float" | null = null,
    fscale: boolean = false,
    nscale: boolean = false,
    verb: boolean = false,
    frugal: boolean = false,
    runner: Runner | null = null,
): V3dZcatOutputs {
    const params = v_3d_zcat_params(input_files, prefix, datum, fscale, nscale, verb, frugal)
    return v_3d_zcat_execute(params, runner);
}


export {
      V3dZcatOutputs,
      V3dZcatParameters,
      V_3D_ZCAT_METADATA,
      v_3d_zcat,
      v_3d_zcat_execute,
      v_3d_zcat_params,
};
