// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DDELAY_METADATA: Metadata = {
    id: "2d26920b8cdbf0a89ad3b54faeeb0771184e4e3d.boutiques",
    name: "3ddelay",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3ddelayParameters {
    "__STYXTYPE__": "3ddelay";
    "input_file": InputPathType;
    "reference_file": InputPathType;
    "sampling_freq": number;
    "stim_period": number;
    "prefix"?: string | null | undefined;
    "polort"?: number | null | undefined;
    "nodtrnd": boolean;
    "units_seconds": boolean;
    "units_degrees": boolean;
    "units_radians": boolean;
    "phzwrp": boolean;
    "nophzwrp": boolean;
    "phzreverse": boolean;
    "phzscale"?: number | null | undefined;
    "bias": boolean;
    "nobias": boolean;
    "dsamp": boolean;
    "nodsamp": boolean;
    "mask"?: InputPathType | null | undefined;
    "nfirst"?: number | null | undefined;
    "nlast"?: number | null | undefined;
    "co"?: number | null | undefined;
    "asc"?: string | null | undefined;
    "ascts"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3ddelay": v_3ddelay_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3ddelay": v_3ddelay_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3ddelay(...)`.
 *
 * @interface
 */
interface V3ddelayOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Primary output results Brick for Delay
     */
    output_brick: OutputPathType | null;
    /**
     * Output ASCII file for results
     */
    output_asc: OutputPathType | null;
    /**
     * Log file containing parameter settings and warnings
     */
    output_asc_log: OutputPathType | null;
    /**
     * Output ASCII file with time series
     */
    output_asc_ts: OutputPathType | null;
}


function v_3ddelay_params(
    input_file: InputPathType,
    reference_file: InputPathType,
    sampling_freq: number,
    stim_period: number,
    prefix: string | null = null,
    polort: number | null = null,
    nodtrnd: boolean = false,
    units_seconds: boolean = false,
    units_degrees: boolean = false,
    units_radians: boolean = false,
    phzwrp: boolean = false,
    nophzwrp: boolean = false,
    phzreverse: boolean = false,
    phzscale: number | null = null,
    bias: boolean = false,
    nobias: boolean = false,
    dsamp: boolean = false,
    nodsamp: boolean = false,
    mask: InputPathType | null = null,
    nfirst: number | null = null,
    nlast: number | null = null,
    co: number | null = null,
    asc: string | null = null,
    ascts: string | null = null,
): V3ddelayParameters {
    /**
     * Build parameters.
    
     * @param input_file Filename of the input 3D+time dataset
     * @param reference_file Input ideal time series file name
     * @param sampling_freq Sampling frequency in Hz. of data time series (1/TR)
     * @param stim_period Stimulus period in seconds. Set to 0 if stimulus is not periodic
     * @param prefix The prefix for the results Brick
     * @param polort Detrend input time series with polynomial of specified order. Default is -1 for auto selection
     * @param nodtrnd Remove only the mean (equivalent to polort 0)
     * @param units_seconds Units for delay estimates in seconds
     * @param units_degrees Units for delay estimates in degrees. Requires Tstim > 0
     * @param units_radians Units for delay estimates in radians. Requires Tstim > 0
     * @param phzwrp Wrap delay (or phase) values
     * @param nophzwrp Do not wrap phase (default)
     * @param phzreverse Reverse phase such that phase -> (T-phase)
     * @param phzscale Scale phase: phase -> phase*SC (default no scaling)
     * @param bias Do not correct for the bias in the estimates
     * @param nobias Correct for the bias in the estimates (default)
     * @param dsamp Correct for slice timing differences (default)
     * @param nodsamp Do not correct for slice timing differences
     * @param mask Filename of mask dataset. Only voxels with non-zero values in the mask will be considered
     * @param nfirst Number of first dataset image to use in the delay estimate
     * @param nlast Number of last dataset image to use in the delay estimate
     * @param co Cross Correlation Coefficient threshold value to limit ascii output
     * @param asc Write the results to an ascii file for voxels with cross correlation coefficients larger than CCT
     * @param ascts Write the results and time series to an ascii file for voxels with cross correlation coefficients larger than CCT
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3ddelay" as const,
        "input_file": input_file,
        "reference_file": reference_file,
        "sampling_freq": sampling_freq,
        "stim_period": stim_period,
        "nodtrnd": nodtrnd,
        "units_seconds": units_seconds,
        "units_degrees": units_degrees,
        "units_radians": units_radians,
        "phzwrp": phzwrp,
        "nophzwrp": nophzwrp,
        "phzreverse": phzreverse,
        "bias": bias,
        "nobias": nobias,
        "dsamp": dsamp,
        "nodsamp": nodsamp,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (phzscale !== null) {
        params["phzscale"] = phzscale;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (nfirst !== null) {
        params["nfirst"] = nfirst;
    }
    if (nlast !== null) {
        params["nlast"] = nlast;
    }
    if (co !== null) {
        params["co"] = co;
    }
    if (asc !== null) {
        params["asc"] = asc;
    }
    if (ascts !== null) {
        params["ascts"] = ascts;
    }
    return params;
}


function v_3ddelay_cargs(
    params: V3ddelayParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3ddelay");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push(execution.inputFile((params["reference_file"] ?? null)));
    cargs.push(
        "-fs",
        String((params["sampling_freq"] ?? null))
    );
    cargs.push(
        "-T",
        String((params["stim_period"] ?? null))
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["nodtrnd"] ?? null)) {
        cargs.push("-nodtrnd");
    }
    if ((params["units_seconds"] ?? null)) {
        cargs.push("-uS");
    }
    if ((params["units_degrees"] ?? null)) {
        cargs.push("-uD");
    }
    if ((params["units_radians"] ?? null)) {
        cargs.push("-uR");
    }
    if ((params["phzwrp"] ?? null)) {
        cargs.push("-phzwrp");
    }
    if ((params["nophzwrp"] ?? null)) {
        cargs.push("-nophzwrp");
    }
    if ((params["phzreverse"] ?? null)) {
        cargs.push("-phzreverse");
    }
    if ((params["phzscale"] ?? null) !== null) {
        cargs.push(
            "-phzscale",
            String((params["phzscale"] ?? null))
        );
    }
    if ((params["bias"] ?? null)) {
        cargs.push("-bias");
    }
    if ((params["nobias"] ?? null)) {
        cargs.push("-nobias");
    }
    if ((params["dsamp"] ?? null)) {
        cargs.push("-dsamp");
    }
    if ((params["nodsamp"] ?? null)) {
        cargs.push("-nodsamp");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["nfirst"] ?? null) !== null) {
        cargs.push(
            "-nfirst",
            String((params["nfirst"] ?? null))
        );
    }
    if ((params["nlast"] ?? null) !== null) {
        cargs.push(
            "-nlast",
            String((params["nlast"] ?? null))
        );
    }
    if ((params["co"] ?? null) !== null) {
        cargs.push(
            "-co",
            String((params["co"] ?? null))
        );
    }
    if ((params["asc"] ?? null) !== null) {
        cargs.push(
            "-asc",
            (params["asc"] ?? null)
        );
    }
    if ((params["ascts"] ?? null) !== null) {
        cargs.push(
            "-ascts",
            (params["ascts"] ?? null)
        );
    }
    return cargs;
}


function v_3ddelay_outputs(
    params: V3ddelayParameters,
    execution: Execution,
): V3ddelayOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3ddelayOutputs = {
        root: execution.outputFile("."),
        output_brick: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".DEL+orig.BRIK"].join('')) : null,
        output_asc: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".ASC"].join('')) : null,
        output_asc_log: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".ASC.log"].join('')) : null,
        output_asc_ts: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".ASC.ts"].join('')) : null,
    };
    return ret;
}


function v_3ddelay_execute(
    params: V3ddelayParameters,
    execution: Execution,
): V3ddelayOutputs {
    /**
     * Estimates the time delay between each voxel time series in a 3D+time dataset and a reference time series.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3ddelayOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3ddelay_cargs(params, execution)
    const ret = v_3ddelay_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3ddelay(
    input_file: InputPathType,
    reference_file: InputPathType,
    sampling_freq: number,
    stim_period: number,
    prefix: string | null = null,
    polort: number | null = null,
    nodtrnd: boolean = false,
    units_seconds: boolean = false,
    units_degrees: boolean = false,
    units_radians: boolean = false,
    phzwrp: boolean = false,
    nophzwrp: boolean = false,
    phzreverse: boolean = false,
    phzscale: number | null = null,
    bias: boolean = false,
    nobias: boolean = false,
    dsamp: boolean = false,
    nodsamp: boolean = false,
    mask: InputPathType | null = null,
    nfirst: number | null = null,
    nlast: number | null = null,
    co: number | null = null,
    asc: string | null = null,
    ascts: string | null = null,
    runner: Runner | null = null,
): V3ddelayOutputs {
    /**
     * Estimates the time delay between each voxel time series in a 3D+time dataset and a reference time series.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Filename of the input 3D+time dataset
     * @param reference_file Input ideal time series file name
     * @param sampling_freq Sampling frequency in Hz. of data time series (1/TR)
     * @param stim_period Stimulus period in seconds. Set to 0 if stimulus is not periodic
     * @param prefix The prefix for the results Brick
     * @param polort Detrend input time series with polynomial of specified order. Default is -1 for auto selection
     * @param nodtrnd Remove only the mean (equivalent to polort 0)
     * @param units_seconds Units for delay estimates in seconds
     * @param units_degrees Units for delay estimates in degrees. Requires Tstim > 0
     * @param units_radians Units for delay estimates in radians. Requires Tstim > 0
     * @param phzwrp Wrap delay (or phase) values
     * @param nophzwrp Do not wrap phase (default)
     * @param phzreverse Reverse phase such that phase -> (T-phase)
     * @param phzscale Scale phase: phase -> phase*SC (default no scaling)
     * @param bias Do not correct for the bias in the estimates
     * @param nobias Correct for the bias in the estimates (default)
     * @param dsamp Correct for slice timing differences (default)
     * @param nodsamp Do not correct for slice timing differences
     * @param mask Filename of mask dataset. Only voxels with non-zero values in the mask will be considered
     * @param nfirst Number of first dataset image to use in the delay estimate
     * @param nlast Number of last dataset image to use in the delay estimate
     * @param co Cross Correlation Coefficient threshold value to limit ascii output
     * @param asc Write the results to an ascii file for voxels with cross correlation coefficients larger than CCT
     * @param ascts Write the results and time series to an ascii file for voxels with cross correlation coefficients larger than CCT
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3ddelayOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DDELAY_METADATA);
    const params = v_3ddelay_params(input_file, reference_file, sampling_freq, stim_period, prefix, polort, nodtrnd, units_seconds, units_degrees, units_radians, phzwrp, nophzwrp, phzreverse, phzscale, bias, nobias, dsamp, nodsamp, mask, nfirst, nlast, co, asc, ascts)
    return v_3ddelay_execute(params, execution);
}


export {
      V3ddelayOutputs,
      V3ddelayParameters,
      V_3DDELAY_METADATA,
      v_3ddelay,
      v_3ddelay_params,
};
