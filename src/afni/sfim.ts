// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SFIM_METADATA: Metadata = {
    id: "ad5768baaae7cebeadaf50152b4413144e7e8b36.boutiques",
    name: "sfim",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SfimParameters {
    "@type"?: "afni/sfim";
    "input_images": Array<InputPathType>;
    "sfint_file"?: string | null | undefined;
    "baseline_state"?: string | null | undefined;
    "local_base_option": boolean;
    "output_prefix"?: string | null | undefined;
}
type SfimParametersTagged = Required<Pick<SfimParameters, '@type'>> & SfimParameters;


/**
 * Output object returned when calling `SfimParameters(...)`.
 *
 * @interface
 */
interface SfimOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_images Input image files in formats accepted by AFNI
 * @param sfint_file Filename which contains the interval definitions. Default is 'sfint'. Example: '3*# 5*rest 4*A 5*rest 4*B 5*rest 4*A 5*rest'
 * @param baseline_state Task state name to use as the baseline. Default is 'rest'.
 * @param local_base_option Flag to indicate if each non-base task state interval should have the mean of the two nearest base intervals subtracted instead of the grand mean of all the base task intervals.
 * @param output_prefix Prefix for output image filenames for all states. The i'th interval with task state name 'fred' will be written to file 'pname.fred.i'. Default is 'sfim'.
 *
 * @returns Parameter dictionary
 */
function sfim_params(
    input_images: Array<InputPathType>,
    sfint_file: string | null = null,
    baseline_state: string | null = null,
    local_base_option: boolean = false,
    output_prefix: string | null = null,
): SfimParametersTagged {
    const params = {
        "@type": "afni/sfim" as const,
        "input_images": input_images,
        "local_base_option": local_base_option,
    };
    if (sfint_file !== null) {
        params["sfint_file"] = sfint_file;
    }
    if (baseline_state !== null) {
        params["baseline_state"] = baseline_state;
    }
    if (output_prefix !== null) {
        params["output_prefix"] = output_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sfim_cargs(
    params: SfimParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("sfim");
    cargs.push(...(params["input_images"] ?? null).map(f => execution.inputFile(f)));
    if ((params["sfint_file"] ?? null) !== null) {
        cargs.push(
            "-sfint",
            (params["sfint_file"] ?? null)
        );
    }
    if ((params["baseline_state"] ?? null) !== null) {
        cargs.push(
            "-base",
            (params["baseline_state"] ?? null)
        );
    }
    if ((params["local_base_option"] ?? false)) {
        cargs.push("-localbase");
    }
    if ((params["output_prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["output_prefix"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function sfim_outputs(
    params: SfimParameters,
    execution: Execution,
): SfimOutputs {
    const ret: SfimOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * sfim
 *
 * Stepwise Functional IMages.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SfimOutputs`).
 */
function sfim_execute(
    params: SfimParameters,
    runner: Runner | null = null,
): SfimOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SFIM_METADATA);
    params = execution.params(params)
    const cargs = sfim_cargs(params, execution)
    const ret = sfim_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * sfim
 *
 * Stepwise Functional IMages.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_images Input image files in formats accepted by AFNI
 * @param sfint_file Filename which contains the interval definitions. Default is 'sfint'. Example: '3*# 5*rest 4*A 5*rest 4*B 5*rest 4*A 5*rest'
 * @param baseline_state Task state name to use as the baseline. Default is 'rest'.
 * @param local_base_option Flag to indicate if each non-base task state interval should have the mean of the two nearest base intervals subtracted instead of the grand mean of all the base task intervals.
 * @param output_prefix Prefix for output image filenames for all states. The i'th interval with task state name 'fred' will be written to file 'pname.fred.i'. Default is 'sfim'.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SfimOutputs`).
 */
function sfim(
    input_images: Array<InputPathType>,
    sfint_file: string | null = null,
    baseline_state: string | null = null,
    local_base_option: boolean = false,
    output_prefix: string | null = null,
    runner: Runner | null = null,
): SfimOutputs {
    const params = sfim_params(input_images, sfint_file, baseline_state, local_base_option, output_prefix)
    return sfim_execute(params, runner);
}


export {
      SFIM_METADATA,
      SfimOutputs,
      sfim,
      sfim_execute,
      sfim_params,
};
