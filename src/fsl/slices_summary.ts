// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICES_SUMMARY_METADATA: Metadata = {
    id: "7e12274a48ff3a22f816a66d47a48b98cc85883c.boutiques",
    name: "slices_summary",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SlicesSummaryParameters {
    "@type": "fsl.slices_summary";
    "4d_input_file": InputPathType;
    "threshold": number;
    "background_image": InputPathType;
    "pictures_sum": string;
    "single_slice_flag": boolean;
    "darker_background_flag": boolean;
    "dumb_rule_flag": boolean;
    "pictures_sum_second": string;
    "output_png": string;
    "timepoints": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.slices_summary": slices_summary_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.slices_summary": slices_summary_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `slices_summary(...)`.
 *
 * @interface
 */
interface SlicesSummaryOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Directory containing summary images
     */
    summary_images_directory: OutputPathType;
    /**
     * Combined summary PNG image
     */
    combined_summary_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param v_4d_input_file 4D input image (e.g., melodic_IC)
 * @param threshold Threshold value for the slices
 * @param background_image Background image file (e.g., standard/MNI152_T1_2mm)
 * @param pictures_sum Output directory for summary images
 * @param pictures_sum_second Path to summary images directory
 * @param output_png Output PNG file
 * @param timepoints Space-separated list of timepoints to use; first timepoint is 0
 * @param single_slice_flag Generate single-slice summary images instead of 3-slice
 * @param darker_background_flag Make background darker and colour brighter, for greater colour visibility
 * @param dumb_rule_flag Use dumber rule for choosing optimal slice
 *
 * @returns Parameter dictionary
 */
function slices_summary_params(
    v_4d_input_file: InputPathType,
    threshold: number,
    background_image: InputPathType,
    pictures_sum: string,
    pictures_sum_second: string,
    output_png: string,
    timepoints: string,
    single_slice_flag: boolean = false,
    darker_background_flag: boolean = false,
    dumb_rule_flag: boolean = false,
): SlicesSummaryParameters {
    const params = {
        "@type": "fsl.slices_summary" as const,
        "4d_input_file": v_4d_input_file,
        "threshold": threshold,
        "background_image": background_image,
        "pictures_sum": pictures_sum,
        "single_slice_flag": single_slice_flag,
        "darker_background_flag": darker_background_flag,
        "dumb_rule_flag": dumb_rule_flag,
        "pictures_sum_second": pictures_sum_second,
        "output_png": output_png,
        "timepoints": timepoints,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function slices_summary_cargs(
    params: SlicesSummaryParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("slices_summary");
    cargs.push(execution.inputFile((params["4d_input_file"] ?? null)));
    cargs.push(String((params["threshold"] ?? null)));
    cargs.push(execution.inputFile((params["background_image"] ?? null)));
    cargs.push((params["pictures_sum"] ?? null));
    if ((params["single_slice_flag"] ?? null)) {
        cargs.push("-1");
    }
    if ((params["darker_background_flag"] ?? null)) {
        cargs.push("-d");
    }
    if ((params["dumb_rule_flag"] ?? null)) {
        cargs.push("-c");
    }
    cargs.push((params["pictures_sum_second"] ?? null));
    cargs.push((params["output_png"] ?? null));
    cargs.push((params["timepoints"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function slices_summary_outputs(
    params: SlicesSummaryParameters,
    execution: Execution,
): SlicesSummaryOutputs {
    const ret: SlicesSummaryOutputs = {
        root: execution.outputFile("."),
        summary_images_directory: execution.outputFile([(params["pictures_sum_second"] ?? null)].join('')),
        combined_summary_image: execution.outputFile([(params["output_png"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Generate summary PNG images for 4D neuroimaging data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `SlicesSummaryOutputs`).
 */
function slices_summary_execute(
    params: SlicesSummaryParameters,
    execution: Execution,
): SlicesSummaryOutputs {
    params = execution.params(params)
    const cargs = slices_summary_cargs(params, execution)
    const ret = slices_summary_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Generate summary PNG images for 4D neuroimaging data.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param v_4d_input_file 4D input image (e.g., melodic_IC)
 * @param threshold Threshold value for the slices
 * @param background_image Background image file (e.g., standard/MNI152_T1_2mm)
 * @param pictures_sum Output directory for summary images
 * @param pictures_sum_second Path to summary images directory
 * @param output_png Output PNG file
 * @param timepoints Space-separated list of timepoints to use; first timepoint is 0
 * @param single_slice_flag Generate single-slice summary images instead of 3-slice
 * @param darker_background_flag Make background darker and colour brighter, for greater colour visibility
 * @param dumb_rule_flag Use dumber rule for choosing optimal slice
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlicesSummaryOutputs`).
 */
function slices_summary(
    v_4d_input_file: InputPathType,
    threshold: number,
    background_image: InputPathType,
    pictures_sum: string,
    pictures_sum_second: string,
    output_png: string,
    timepoints: string,
    single_slice_flag: boolean = false,
    darker_background_flag: boolean = false,
    dumb_rule_flag: boolean = false,
    runner: Runner | null = null,
): SlicesSummaryOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICES_SUMMARY_METADATA);
    const params = slices_summary_params(v_4d_input_file, threshold, background_image, pictures_sum, pictures_sum_second, output_png, timepoints, single_slice_flag, darker_background_flag, dumb_rule_flag)
    return slices_summary_execute(params, execution);
}


export {
      SLICES_SUMMARY_METADATA,
      SlicesSummaryOutputs,
      SlicesSummaryParameters,
      slices_summary,
      slices_summary_cargs,
      slices_summary_execute,
      slices_summary_outputs,
      slices_summary_params,
};
