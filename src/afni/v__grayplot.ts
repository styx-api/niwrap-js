// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__GRAYPLOT_METADATA: Metadata = {
    id: "958c86831f7afb5a52d51364d6b986bef43d3733.boutiques",
    name: "@grayplot",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VGrayplotParameters {
    "@type": "afni.@grayplot";
    "dirname": string;
    "pvorder": boolean;
    "peelorder": boolean;
    "ijkorder": boolean;
    "allorder": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@grayplot": v__grayplot_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@grayplot": v__grayplot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__grayplot(...)`.
 *
 * @interface
 */
interface VGrayplotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output grayplot image
     */
    grayplot_img: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dirname Directory containing afni_proc.py results.
 * @param pvorder Within each partition, voxels are ordered by a simple similarity measure.
 * @param peelorder Within each partition, voxels are ordered by how many 'peel' operations are needed to reach a given voxel.
 * @param ijkorder Within each partition, voxels are ordered by the 3D index in which they appear in the dataset.
 * @param allorder Create grayplots for all ordering methods.
 *
 * @returns Parameter dictionary
 */
function v__grayplot_params(
    dirname: string,
    pvorder: boolean = false,
    peelorder: boolean = false,
    ijkorder: boolean = false,
    allorder: boolean = false,
): VGrayplotParameters {
    const params = {
        "@type": "afni.@grayplot" as const,
        "dirname": dirname,
        "pvorder": pvorder,
        "peelorder": peelorder,
        "ijkorder": ijkorder,
        "allorder": allorder,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__grayplot_cargs(
    params: VGrayplotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@grayplot");
    cargs.push((params["dirname"] ?? null));
    if ((params["pvorder"] ?? null)) {
        cargs.push("-pvorder");
    }
    if ((params["peelorder"] ?? null)) {
        cargs.push("-peelorder");
    }
    if ((params["ijkorder"] ?? null)) {
        cargs.push("-ijkorder");
    }
    if ((params["allorder"] ?? null)) {
        cargs.push("-ALLorder");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__grayplot_outputs(
    params: VGrayplotParameters,
    execution: Execution,
): VGrayplotOutputs {
    const ret: VGrayplotOutputs = {
        root: execution.outputFile("."),
        grayplot_img: execution.outputFile(["Grayplot.errts.*.png"].join('')),
    };
    return ret;
}


/**
 * @grayplot
 *
 * Script to read files from an afni_proc.py results directory and produce a grayplot from the errts dataset(s), combined with a motion magnitude indicator graph.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VGrayplotOutputs`).
 */
function v__grayplot_execute(
    params: VGrayplotParameters,
    runner: Runner | null = null,
): VGrayplotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__GRAYPLOT_METADATA);
    params = execution.params(params)
    const cargs = v__grayplot_cargs(params, execution)
    const ret = v__grayplot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @grayplot
 *
 * Script to read files from an afni_proc.py results directory and produce a grayplot from the errts dataset(s), combined with a motion magnitude indicator graph.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dirname Directory containing afni_proc.py results.
 * @param pvorder Within each partition, voxels are ordered by a simple similarity measure.
 * @param peelorder Within each partition, voxels are ordered by how many 'peel' operations are needed to reach a given voxel.
 * @param ijkorder Within each partition, voxels are ordered by the 3D index in which they appear in the dataset.
 * @param allorder Create grayplots for all ordering methods.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VGrayplotOutputs`).
 */
function v__grayplot(
    dirname: string,
    pvorder: boolean = false,
    peelorder: boolean = false,
    ijkorder: boolean = false,
    allorder: boolean = false,
    runner: Runner | null = null,
): VGrayplotOutputs {
    const params = v__grayplot_params(dirname, pvorder, peelorder, ijkorder, allorder)
    return v__grayplot_execute(params, runner);
}


export {
      VGrayplotOutputs,
      VGrayplotParameters,
      V__GRAYPLOT_METADATA,
      v__grayplot,
      v__grayplot_execute,
      v__grayplot_params,
};
