// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACKIMADIR_METADATA: Metadata = {
    id: "6a27f64ee58627da90e1a875d70fa5b839c021e5.boutiques",
    name: "unpackimadir",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface UnpackimadirParameters {
    "__STYXTYPE__": "unpackimadir";
    "source_directory": string;
    "target_directory": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "unpackimadir": unpackimadir_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `unpackimadir(...)`.
 *
 * @interface
 */
interface UnpackimadirOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function unpackimadir_params(
    source_directory: string,
    target_directory: string,
): UnpackimadirParameters {
    /**
     * Build parameters.
    
     * @param source_directory Source directory containing the images to be unpacked
     * @param target_directory Target directory where the unpacked images will be stored
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "unpackimadir" as const,
        "source_directory": source_directory,
        "target_directory": target_directory,
    };
    return params;
}


function unpackimadir_cargs(
    params: UnpackimadirParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("unpackimadir");
    cargs.push(
        "-src",
        (params["source_directory"] ?? null)
    );
    cargs.push(
        "-targ",
        (params["target_directory"] ?? null)
    );
    return cargs;
}


function unpackimadir_outputs(
    params: UnpackimadirParameters,
    execution: Execution,
): UnpackimadirOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: UnpackimadirOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function unpackimadir_execute(
    params: UnpackimadirParameters,
    execution: Execution,
): UnpackimadirOutputs {
    /**
     * Unpack image directories.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `UnpackimadirOutputs`).
     */
    params = execution.params(params)
    const cargs = unpackimadir_cargs(params, execution)
    const ret = unpackimadir_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function unpackimadir(
    source_directory: string,
    target_directory: string,
    runner: Runner | null = null,
): UnpackimadirOutputs {
    /**
     * Unpack image directories.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param source_directory Source directory containing the images to be unpacked
     * @param target_directory Target directory where the unpacked images will be stored
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `UnpackimadirOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACKIMADIR_METADATA);
    const params = unpackimadir_params(source_directory, target_directory)
    return unpackimadir_execute(params, execution);
}


export {
      UNPACKIMADIR_METADATA,
      UnpackimadirOutputs,
      UnpackimadirParameters,
      unpackimadir,
      unpackimadir_params,
};
