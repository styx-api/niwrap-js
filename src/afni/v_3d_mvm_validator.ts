// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_MVM_VALIDATOR_METADATA: Metadata = {
    id: "922fe2d0a794693ed3858b8e880aa7f811995c48.boutiques",
    name: "3dMVM_validator",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dMvmValidatorParameters {
    "__STYXTYPE__": "3dMVM_validator";
    "datatable": InputPathType;
    "shinyfolder"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dMVM_validator": v_3d_mvm_validator_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dMVM_validator": v_3d_mvm_validator_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_mvm_validator(...)`.
 *
 * @interface
 */
interface V3dMvmValidatorOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Temporary folder created during the shiny app session.
     */
    temp_folder: OutputPathType;
}


function v_3d_mvm_validator_params(
    datatable: InputPathType,
    shinyfolder: string | null = null,
): V3dMvmValidatorParameters {
    /**
     * Build parameters.
    
     * @param datatable A file containing a data table formatted like the 3dMVM "-dataTable".
     * @param shinyfolder Use a custom shiny folder (for testing purposes).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dMVM_validator" as const,
        "datatable": datatable,
    };
    if (shinyfolder !== null) {
        params["shinyfolder"] = shinyfolder;
    }
    return params;
}


function v_3d_mvm_validator_cargs(
    params: V3dMvmValidatorParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dMVM_validator");
    cargs.push(execution.inputFile((params["datatable"] ?? null)));
    if ((params["shinyfolder"] ?? null) !== null) {
        cargs.push(
            "-ShinyFolder",
            (params["shinyfolder"] ?? null)
        );
    }
    return cargs;
}


function v_3d_mvm_validator_outputs(
    params: V3dMvmValidatorParameters,
    execution: Execution,
): V3dMvmValidatorOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dMvmValidatorOutputs = {
        root: execution.outputFile("."),
        temp_folder: execution.outputFile(["__*_3dMVM_validator_temp_delete"].join('')),
    };
    return ret;
}


function v_3d_mvm_validator_execute(
    params: V3dMvmValidatorParameters,
    execution: Execution,
): V3dMvmValidatorOutputs {
    /**
     * Launch the 3dMVM model validation shiny app in a web browser.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dMvmValidatorOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_mvm_validator_cargs(params, execution)
    const ret = v_3d_mvm_validator_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_mvm_validator(
    datatable: InputPathType,
    shinyfolder: string | null = null,
    runner: Runner | null = null,
): V3dMvmValidatorOutputs {
    /**
     * Launch the 3dMVM model validation shiny app in a web browser.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param datatable A file containing a data table formatted like the 3dMVM "-dataTable".
     * @param shinyfolder Use a custom shiny folder (for testing purposes).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dMvmValidatorOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_MVM_VALIDATOR_METADATA);
    const params = v_3d_mvm_validator_params(datatable, shinyfolder)
    return v_3d_mvm_validator_execute(params, execution);
}


export {
      V3dMvmValidatorOutputs,
      V3dMvmValidatorParameters,
      V_3D_MVM_VALIDATOR_METADATA,
      v_3d_mvm_validator,
      v_3d_mvm_validator_params,
};
