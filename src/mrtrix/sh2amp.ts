// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SH2AMP_METADATA: Metadata = {
    id: "845bbdcb825f577d4f4e931e8e0dd0e1f1f2de94.boutiques",
    name: "sh2amp",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Sh2ampFslgradParameters {
    "@type": "mrtrix.sh2amp.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface Sh2ampVariousStringParameters {
    "@type": "mrtrix.sh2amp.VariousString";
    "obj": string;
}


interface Sh2ampVariousFileParameters {
    "@type": "mrtrix.sh2amp.VariousFile";
    "obj": InputPathType;
}


interface Sh2ampConfigParameters {
    "@type": "mrtrix.sh2amp.config";
    "key": string;
    "value": string;
}


interface Sh2ampParameters {
    "@type": "mrtrix.sh2amp";
    "nonnegative": boolean;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: Sh2ampFslgradParameters | null | undefined;
    "strides"?: Sh2ampVariousStringParameters | Sh2ampVariousFileParameters | null | undefined;
    "datatype"?: string | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Sh2ampConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": InputPathType;
    "directions": InputPathType;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.sh2amp": sh2amp_cargs,
        "mrtrix.sh2amp.fslgrad": sh2amp_fslgrad_cargs,
        "mrtrix.sh2amp.VariousString": sh2amp_various_string_cargs,
        "mrtrix.sh2amp.VariousFile": sh2amp_various_file_cargs,
        "mrtrix.sh2amp.config": sh2amp_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.sh2amp": sh2amp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function sh2amp_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): Sh2ampFslgradParameters {
    const params = {
        "@type": "mrtrix.sh2amp.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2amp_fslgrad_cargs(
    params: Sh2ampFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function sh2amp_various_string_params(
    obj: string,
): Sh2ampVariousStringParameters {
    const params = {
        "@type": "mrtrix.sh2amp.VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2amp_various_string_cargs(
    params: Sh2ampVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function sh2amp_various_file_params(
    obj: InputPathType,
): Sh2ampVariousFileParameters {
    const params = {
        "@type": "mrtrix.sh2amp.VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2amp_various_file_cargs(
    params: Sh2ampVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function sh2amp_config_params(
    key: string,
    value: string,
): Sh2ampConfigParameters {
    const params = {
        "@type": "mrtrix.sh2amp.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2amp_config_cargs(
    params: Sh2ampConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `sh2amp(...)`.
 *
 * @interface
 */
interface Sh2ampOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image consisting of the amplitude of the SH functions along the specified directions.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input image consisting of spherical harmonic (SH) coefficients.
 * @param directions the list of directions along which the SH functions will be sampled, generated using the dirgen command
 * @param output the output image consisting of the amplitude of the SH functions along the specified directions.
 * @param nonnegative cap all negative amplitudes to zero
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function sh2amp_params(
    input: InputPathType,
    directions: InputPathType,
    output: string,
    nonnegative: boolean = false,
    grad: InputPathType | null = null,
    fslgrad: Sh2ampFslgradParameters | null = null,
    strides: Sh2ampVariousStringParameters | Sh2ampVariousFileParameters | null = null,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Sh2ampConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Sh2ampParameters {
    const params = {
        "@type": "mrtrix.sh2amp" as const,
        "nonnegative": nonnegative,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "directions": directions,
        "output": output,
    };
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (strides !== null) {
        params["strides"] = strides;
    }
    if (datatype !== null) {
        params["datatype"] = datatype;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2amp_cargs(
    params: Sh2ampParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("sh2amp");
    if ((params["nonnegative"] ?? null)) {
        cargs.push("-nonnegative");
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["strides"] ?? null) !== null) {
        cargs.push(
            "-strides",
            ...dynCargs((params["strides"] ?? null)["@type"])((params["strides"] ?? null), execution)
        );
    }
    if ((params["datatype"] ?? null) !== null) {
        cargs.push(
            "-datatype",
            (params["datatype"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["input"] ?? null)));
    cargs.push(execution.inputFile((params["directions"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function sh2amp_outputs(
    params: Sh2ampParameters,
    execution: Execution,
): Sh2ampOutputs {
    const ret: Sh2ampOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * sh2amp
 *
 * Evaluate the amplitude of an image of spherical harmonic functions along specified directions.
 *
 * The input image should consist of a 4D or 5D image, with SH coefficients along the 4th dimension according to the convention below. If 4D (or size 1 along the 5th dimension), the program expects to be provided with a single shell of directions. If 5D, each set of coefficients along the 5th dimension is understood to correspond to a different shell.
 *
 * The directions can be provided as:
 * - a 2-column ASCII text file contained azimuth / elevation pairs (as produced by dirgen)
 * - a 3-column ASCII text file containing x, y, z Cartesian direction vectors (as produced by dirgen -cart)
 * - a 4-column ASCII text file containing the x, y, z, b components of a full DW encoding scheme (in MRtrix format, see main documentation for details).
 * - an image file whose header contains a valid DW encoding scheme
 *
 * If a full DW encoding is provided, the number of shells needs to match those found in the input image of coefficients (i.e. its size along the 5th dimension). If needed, the -shell option can be used to pick out the specific shell(s) of interest.
 *
 * If the input image contains multiple shells (its size along the 5th dimension is greater than one), the program will expect the direction set to contain multiple shells, which can only be provided as a full DW encodings (the last two options in the list above).
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Sh2ampOutputs`).
 */
function sh2amp_execute(
    params: Sh2ampParameters,
    runner: Runner | null = null,
): Sh2ampOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SH2AMP_METADATA);
    params = execution.params(params)
    const cargs = sh2amp_cargs(params, execution)
    const ret = sh2amp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * sh2amp
 *
 * Evaluate the amplitude of an image of spherical harmonic functions along specified directions.
 *
 * The input image should consist of a 4D or 5D image, with SH coefficients along the 4th dimension according to the convention below. If 4D (or size 1 along the 5th dimension), the program expects to be provided with a single shell of directions. If 5D, each set of coefficients along the 5th dimension is understood to correspond to a different shell.
 *
 * The directions can be provided as:
 * - a 2-column ASCII text file contained azimuth / elevation pairs (as produced by dirgen)
 * - a 3-column ASCII text file containing x, y, z Cartesian direction vectors (as produced by dirgen -cart)
 * - a 4-column ASCII text file containing the x, y, z, b components of a full DW encoding scheme (in MRtrix format, see main documentation for details).
 * - an image file whose header contains a valid DW encoding scheme
 *
 * If a full DW encoding is provided, the number of shells needs to match those found in the input image of coefficients (i.e. its size along the 5th dimension). If needed, the -shell option can be used to pick out the specific shell(s) of interest.
 *
 * If the input image contains multiple shells (its size along the 5th dimension is greater than one), the program will expect the direction set to contain multiple shells, which can only be provided as a full DW encodings (the last two options in the list above).
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input image consisting of spherical harmonic (SH) coefficients.
 * @param directions the list of directions along which the SH functions will be sampled, generated using the dirgen command
 * @param output the output image consisting of the amplitude of the SH functions along the specified directions.
 * @param nonnegative cap all negative amplitudes to zero
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param datatype specify output image data type. Valid choices are: float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Sh2ampOutputs`).
 */
function sh2amp(
    input: InputPathType,
    directions: InputPathType,
    output: string,
    nonnegative: boolean = false,
    grad: InputPathType | null = null,
    fslgrad: Sh2ampFslgradParameters | null = null,
    strides: Sh2ampVariousStringParameters | Sh2ampVariousFileParameters | null = null,
    datatype: string | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Sh2ampConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Sh2ampOutputs {
    const params = sh2amp_params(input, directions, output, nonnegative, grad, fslgrad, strides, datatype, info, quiet, debug, force, nthreads, config, help, version)
    return sh2amp_execute(params, runner);
}


export {
      SH2AMP_METADATA,
      Sh2ampConfigParameters,
      Sh2ampFslgradParameters,
      Sh2ampOutputs,
      Sh2ampParameters,
      Sh2ampVariousFileParameters,
      Sh2ampVariousStringParameters,
      sh2amp,
      sh2amp_config_params,
      sh2amp_execute,
      sh2amp_fslgrad_params,
      sh2amp_params,
      sh2amp_various_file_params,
      sh2amp_various_string_params,
};
