// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POINTFLIRT_METADATA: Metadata = {
    id: "40b451262d854dc03cc8c098c10bc804ad96102c.boutiques",
    name: "pointflirt",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PointflirtParameters {
    "@type": "fsl.pointflirt";
    "invol_coords": InputPathType;
    "refvol_coords": InputPathType;
    "out_matrix"?: string | null | undefined;
    "use_vox": boolean;
    "vol_input"?: InputPathType | null | undefined;
    "vol_ref"?: InputPathType | null | undefined;
    "verbose_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.pointflirt": pointflirt_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.pointflirt": pointflirt_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `pointflirt(...)`.
 *
 * @interface
 */
interface PointflirtOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Affine matrix output file
     */
    output_matrix_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param invol_coords Filename of input volume coordinates
 * @param refvol_coords Filename of reference volume coordinates
 * @param out_matrix Filename of affine matrix output
 * @param use_vox Use voxel coordinates, not mm, for input
 * @param vol_input Filename of input volume (needed for --vox option)
 * @param vol_ref Filename of reference volume (needed for --vox option)
 * @param verbose_flag Switch on diagnostic messages
 *
 * @returns Parameter dictionary
 */
function pointflirt_params(
    invol_coords: InputPathType,
    refvol_coords: InputPathType,
    out_matrix: string | null = null,
    use_vox: boolean = false,
    vol_input: InputPathType | null = null,
    vol_ref: InputPathType | null = null,
    verbose_flag: boolean = false,
): PointflirtParameters {
    const params = {
        "@type": "fsl.pointflirt" as const,
        "invol_coords": invol_coords,
        "refvol_coords": refvol_coords,
        "use_vox": use_vox,
        "verbose_flag": verbose_flag,
    };
    if (out_matrix !== null) {
        params["out_matrix"] = out_matrix;
    }
    if (vol_input !== null) {
        params["vol_input"] = vol_input;
    }
    if (vol_ref !== null) {
        params["vol_ref"] = vol_ref;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function pointflirt_cargs(
    params: PointflirtParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("pointflirt");
    cargs.push(
        "-i",
        execution.inputFile((params["invol_coords"] ?? null))
    );
    cargs.push(
        "-r",
        execution.inputFile((params["refvol_coords"] ?? null))
    );
    if ((params["out_matrix"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["out_matrix"] ?? null)
        );
    }
    if ((params["use_vox"] ?? null)) {
        cargs.push("--vox");
    }
    if ((params["vol_input"] ?? null) !== null) {
        cargs.push(
            "--invol",
            execution.inputFile((params["vol_input"] ?? null))
        );
    }
    if ((params["vol_ref"] ?? null) !== null) {
        cargs.push(
            "--refvol",
            execution.inputFile((params["vol_ref"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function pointflirt_outputs(
    params: PointflirtParameters,
    execution: Execution,
): PointflirtOutputs {
    const ret: PointflirtOutputs = {
        root: execution.outputFile("."),
        output_matrix_file: ((params["out_matrix"] ?? null) !== null) ? execution.outputFile([(params["out_matrix"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * A tool to align point coordinates between volumes and compute affine transformation matrices.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `PointflirtOutputs`).
 */
function pointflirt_execute(
    params: PointflirtParameters,
    execution: Execution,
): PointflirtOutputs {
    params = execution.params(params)
    const cargs = pointflirt_cargs(params, execution)
    const ret = pointflirt_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to align point coordinates between volumes and compute affine transformation matrices.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param invol_coords Filename of input volume coordinates
 * @param refvol_coords Filename of reference volume coordinates
 * @param out_matrix Filename of affine matrix output
 * @param use_vox Use voxel coordinates, not mm, for input
 * @param vol_input Filename of input volume (needed for --vox option)
 * @param vol_ref Filename of reference volume (needed for --vox option)
 * @param verbose_flag Switch on diagnostic messages
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PointflirtOutputs`).
 */
function pointflirt(
    invol_coords: InputPathType,
    refvol_coords: InputPathType,
    out_matrix: string | null = null,
    use_vox: boolean = false,
    vol_input: InputPathType | null = null,
    vol_ref: InputPathType | null = null,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): PointflirtOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POINTFLIRT_METADATA);
    const params = pointflirt_params(invol_coords, refvol_coords, out_matrix, use_vox, vol_input, vol_ref, verbose_flag)
    return pointflirt_execute(params, execution);
}


export {
      POINTFLIRT_METADATA,
      PointflirtOutputs,
      PointflirtParameters,
      pointflirt,
      pointflirt_cargs,
      pointflirt_execute,
      pointflirt_outputs,
      pointflirt_params,
};
