// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SEGMENT_SUBJECT_NOTAL_METADATA: Metadata = {
    id: "2cc454d43b3f94b2bc424f0960f6cbaa1eee9ce0.boutiques",
    name: "segment_subject_notal",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SegmentSubjectNotalParameters {
    "@type"?: "freesurfer/segment_subject_notal";
    "subject_path": string;
}
type SegmentSubjectNotalParametersTagged = Required<Pick<SegmentSubjectNotalParameters, '@type'>> & SegmentSubjectNotalParameters;


/**
 * Output object returned when calling `SegmentSubjectNotalParameters(...)`.
 *
 * @interface
 */
interface SegmentSubjectNotalOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_path Path to the subject's directory
 *
 * @returns Parameter dictionary
 */
function segment_subject_notal_params(
    subject_path: string,
): SegmentSubjectNotalParametersTagged {
    const params = {
        "@type": "freesurfer/segment_subject_notal" as const,
        "subject_path": subject_path,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function segment_subject_notal_cargs(
    params: SegmentSubjectNotalParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("segment_subject_notal");
    cargs.push((params["subject_path"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function segment_subject_notal_outputs(
    params: SegmentSubjectNotalParameters,
    execution: Execution,
): SegmentSubjectNotalOutputs {
    const ret: SegmentSubjectNotalOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * segment_subject_notal
 *
 * A script to segment subjects (notal).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubjectNotalOutputs`).
 */
function segment_subject_notal_execute(
    params: SegmentSubjectNotalParameters,
    runner: Runner | null = null,
): SegmentSubjectNotalOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SEGMENT_SUBJECT_NOTAL_METADATA);
    params = execution.params(params)
    const cargs = segment_subject_notal_cargs(params, execution)
    const ret = segment_subject_notal_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * segment_subject_notal
 *
 * A script to segment subjects (notal).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_path Path to the subject's directory
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SegmentSubjectNotalOutputs`).
 */
function segment_subject_notal(
    subject_path: string,
    runner: Runner | null = null,
): SegmentSubjectNotalOutputs {
    const params = segment_subject_notal_params(subject_path)
    return segment_subject_notal_execute(params, runner);
}


export {
      SEGMENT_SUBJECT_NOTAL_METADATA,
      SegmentSubjectNotalOutputs,
      segment_subject_notal,
      segment_subject_notal_execute,
      segment_subject_notal_params,
};
