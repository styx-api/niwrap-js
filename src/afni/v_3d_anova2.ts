// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ANOVA2_METADATA: Metadata = {
    id: "22cbc6c1740e3a6d021a61dd0f677c67a5b9e5e4.boutiques",
    name: "3dANOVA2",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAnova2Parameters {
    "@type": "afni.3dANOVA2";
    "type": number;
    "alevels": number;
    "blevels": number;
    "dataset"?: Array<string> | null | undefined;
    "voxel"?: number | null | undefined;
    "diskspace": boolean;
    "mask"?: InputPathType | null | undefined;
    "ftr"?: string | null | undefined;
    "fa"?: string | null | undefined;
    "fb"?: string | null | undefined;
    "fab"?: string | null | undefined;
    "amean"?: string | null | undefined;
    "bmean"?: string | null | undefined;
    "xmean"?: string | null | undefined;
    "adiff"?: string | null | undefined;
    "bdiff"?: string | null | undefined;
    "xdiff"?: string | null | undefined;
    "acontr"?: string | null | undefined;
    "bcontr"?: string | null | undefined;
    "xcontr"?: string | null | undefined;
    "bucket"?: string | null | undefined;
    "old_method": boolean;
    "ok": boolean;
    "assume_sph": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dANOVA2": v_3d_anova2_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dANOVA2": v_3d_anova2_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_anova2(...)`.
 *
 * @interface
 */
interface V3dAnova2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * F-statistic for treatment effect output file
     */
    output_ftr: OutputPathType | null;
    /**
     * F-statistic for factor A effect output file
     */
    output_fa: OutputPathType | null;
    /**
     * F-statistic for factor B effect output file
     */
    output_fb: OutputPathType | null;
    /**
     * F-statistic for interaction output file
     */
    output_fab: OutputPathType | null;
    /**
     * Estimate mean of factor A level output file
     */
    output_amean: OutputPathType | null;
    /**
     * Estimate mean of factor B level output file
     */
    output_bmean: OutputPathType | null;
    /**
     * Estimate mean of cell at level i of factor A and level j of factor B output file
     */
    output_xmean: OutputPathType | null;
    /**
     * Difference between levels i and j of factor A output file
     */
    output_adiff: OutputPathType | null;
    /**
     * Difference between levels i and j of factor B output file
     */
    output_bdiff: OutputPathType | null;
    /**
     * Difference between cell mean at A=i, B=j and cell mean at A=k, B=l output file
     */
    output_xdiff: OutputPathType | null;
    /**
     * Contrast in factor A levels output file
     */
    output_acontr: OutputPathType | null;
    /**
     * Contrast in factor B levels output file
     */
    output_bcontr: OutputPathType | null;
    /**
     * Contrast in cell means output file
     */
    output_xcontr: OutputPathType | null;
    /**
     * Create one AFNI 'bucket' dataset file
     */
    output_bucket: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param type_ Type of ANOVA model to be used: 1=fixed, 2=random, 3=mixed
 * @param alevels Number of levels of factor A
 * @param blevels Number of levels of factor B
 * @param dataset Data set for levels of factor A and factor B
 * @param voxel Screen output for voxel number
 * @param diskspace Print out disk space required for program execution
 * @param mask Use sub-brick #0 of dataset 'mset' to define which voxels to process
 * @param ftr F-statistic for treatment effect
 * @param fa F-statistic for factor A effect
 * @param fb F-statistic for factor B effect
 * @param fab F-statistic for interaction
 * @param amean Estimate mean of factor A level
 * @param bmean Estimate mean of factor B level
 * @param xmean Estimate mean of cell at level i of factor A and level j of factor B
 * @param adiff Difference between levels i and j of factor A
 * @param bdiff Difference between levels i and j of factor B
 * @param xdiff Difference between cell mean at A=i, B=j and cell mean at A=k, B=l
 * @param acontr Contrast in factor A levels
 * @param bcontr Contrast in factor B levels
 * @param xcontr Contrast in cell means
 * @param bucket Create one AFNI 'bucket' dataset whose sub-bricks are obtained by concatenating the above output files
 * @param old_method Request to perform ANOVA using the previous functionality (requires -OK, also)
 * @param ok Confirm understanding that contrasts that do not sum to zero have inflated t-stats, and contrasts that do sum to zero assume sphericity (to be used with -old_method)
 * @param assume_sph Assume sphericity (zero-sum contrasts, only). This allows use of the old_method for computing contrasts which sum to zero
 *
 * @returns Parameter dictionary
 */
function v_3d_anova2_params(
    type_: number,
    alevels: number,
    blevels: number,
    dataset: Array<string> | null = null,
    voxel: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    ftr: string | null = null,
    fa: string | null = null,
    fb: string | null = null,
    fab: string | null = null,
    amean: string | null = null,
    bmean: string | null = null,
    xmean: string | null = null,
    adiff: string | null = null,
    bdiff: string | null = null,
    xdiff: string | null = null,
    acontr: string | null = null,
    bcontr: string | null = null,
    xcontr: string | null = null,
    bucket: string | null = null,
    old_method: boolean = false,
    ok: boolean = false,
    assume_sph: boolean = false,
): V3dAnova2Parameters {
    const params = {
        "@type": "afni.3dANOVA2" as const,
        "type": type_,
        "alevels": alevels,
        "blevels": blevels,
        "diskspace": diskspace,
        "old_method": old_method,
        "ok": ok,
        "assume_sph": assume_sph,
    };
    if (dataset !== null) {
        params["dataset"] = dataset;
    }
    if (voxel !== null) {
        params["voxel"] = voxel;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (ftr !== null) {
        params["ftr"] = ftr;
    }
    if (fa !== null) {
        params["fa"] = fa;
    }
    if (fb !== null) {
        params["fb"] = fb;
    }
    if (fab !== null) {
        params["fab"] = fab;
    }
    if (amean !== null) {
        params["amean"] = amean;
    }
    if (bmean !== null) {
        params["bmean"] = bmean;
    }
    if (xmean !== null) {
        params["xmean"] = xmean;
    }
    if (adiff !== null) {
        params["adiff"] = adiff;
    }
    if (bdiff !== null) {
        params["bdiff"] = bdiff;
    }
    if (xdiff !== null) {
        params["xdiff"] = xdiff;
    }
    if (acontr !== null) {
        params["acontr"] = acontr;
    }
    if (bcontr !== null) {
        params["bcontr"] = bcontr;
    }
    if (xcontr !== null) {
        params["xcontr"] = xcontr;
    }
    if (bucket !== null) {
        params["bucket"] = bucket;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_anova2_cargs(
    params: V3dAnova2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dANOVA2");
    cargs.push(
        "-type",
        String((params["type"] ?? null))
    );
    cargs.push(
        "-alevels",
        String((params["alevels"] ?? null))
    );
    cargs.push(
        "-blevels",
        String((params["blevels"] ?? null))
    );
    if ((params["dataset"] ?? null) !== null) {
        cargs.push(
            "-dset",
            ...(params["dataset"] ?? null)
        );
    }
    if ((params["voxel"] ?? null) !== null) {
        cargs.push(
            "-voxel",
            String((params["voxel"] ?? null))
        );
    }
    if ((params["diskspace"] ?? null)) {
        cargs.push("-diskspace");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["ftr"] ?? null) !== null) {
        cargs.push(
            "-ftr",
            (params["ftr"] ?? null)
        );
    }
    if ((params["fa"] ?? null) !== null) {
        cargs.push(
            "-fa",
            (params["fa"] ?? null)
        );
    }
    if ((params["fb"] ?? null) !== null) {
        cargs.push(
            "-fb",
            (params["fb"] ?? null)
        );
    }
    if ((params["fab"] ?? null) !== null) {
        cargs.push(
            "-fab",
            (params["fab"] ?? null)
        );
    }
    if ((params["amean"] ?? null) !== null) {
        cargs.push(
            "-amean",
            (params["amean"] ?? null)
        );
    }
    if ((params["bmean"] ?? null) !== null) {
        cargs.push(
            "-bmean",
            (params["bmean"] ?? null)
        );
    }
    if ((params["xmean"] ?? null) !== null) {
        cargs.push(
            "-xmean",
            (params["xmean"] ?? null)
        );
    }
    if ((params["adiff"] ?? null) !== null) {
        cargs.push(
            "-adiff",
            (params["adiff"] ?? null)
        );
    }
    if ((params["bdiff"] ?? null) !== null) {
        cargs.push(
            "-bdiff",
            (params["bdiff"] ?? null)
        );
    }
    if ((params["xdiff"] ?? null) !== null) {
        cargs.push(
            "-xdiff",
            (params["xdiff"] ?? null)
        );
    }
    if ((params["acontr"] ?? null) !== null) {
        cargs.push(
            "-acontr",
            (params["acontr"] ?? null)
        );
    }
    if ((params["bcontr"] ?? null) !== null) {
        cargs.push(
            "-bcontr",
            (params["bcontr"] ?? null)
        );
    }
    if ((params["xcontr"] ?? null) !== null) {
        cargs.push(
            "-xcontr",
            (params["xcontr"] ?? null)
        );
    }
    if ((params["bucket"] ?? null) !== null) {
        cargs.push(
            "-bucket",
            (params["bucket"] ?? null)
        );
    }
    if ((params["old_method"] ?? null)) {
        cargs.push("-old_method");
    }
    if ((params["ok"] ?? null)) {
        cargs.push("-OK");
    }
    if ((params["assume_sph"] ?? null)) {
        cargs.push("-assume_sph");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_anova2_outputs(
    params: V3dAnova2Parameters,
    execution: Execution,
): V3dAnova2Outputs {
    const ret: V3dAnova2Outputs = {
        root: execution.outputFile("."),
        output_ftr: ((params["ftr"] ?? null) !== null) ? execution.outputFile([(params["ftr"] ?? null), ".+tlrc"].join('')) : null,
        output_fa: ((params["fa"] ?? null) !== null) ? execution.outputFile([(params["fa"] ?? null), ".+tlrc"].join('')) : null,
        output_fb: ((params["fb"] ?? null) !== null) ? execution.outputFile([(params["fb"] ?? null), ".+tlrc"].join('')) : null,
        output_fab: ((params["fab"] ?? null) !== null) ? execution.outputFile([(params["fab"] ?? null), ".+tlrc"].join('')) : null,
        output_amean: ((params["amean"] ?? null) !== null) ? execution.outputFile([(params["amean"] ?? null), ".+tlrc"].join('')) : null,
        output_bmean: ((params["bmean"] ?? null) !== null) ? execution.outputFile([(params["bmean"] ?? null), ".+tlrc"].join('')) : null,
        output_xmean: ((params["xmean"] ?? null) !== null) ? execution.outputFile([(params["xmean"] ?? null), ".+tlrc"].join('')) : null,
        output_adiff: ((params["adiff"] ?? null) !== null) ? execution.outputFile([(params["adiff"] ?? null), ".+tlrc"].join('')) : null,
        output_bdiff: ((params["bdiff"] ?? null) !== null) ? execution.outputFile([(params["bdiff"] ?? null), ".+tlrc"].join('')) : null,
        output_xdiff: ((params["xdiff"] ?? null) !== null) ? execution.outputFile([(params["xdiff"] ?? null), ".+tlrc"].join('')) : null,
        output_acontr: ((params["acontr"] ?? null) !== null) ? execution.outputFile([(params["acontr"] ?? null), ".+tlrc"].join('')) : null,
        output_bcontr: ((params["bcontr"] ?? null) !== null) ? execution.outputFile([(params["bcontr"] ?? null), ".+tlrc"].join('')) : null,
        output_xcontr: ((params["xcontr"] ?? null) !== null) ? execution.outputFile([(params["xcontr"] ?? null), ".+tlrc"].join('')) : null,
        output_bucket: ((params["bucket"] ?? null) !== null) ? execution.outputFile([(params["bucket"] ?? null), ".+tlrc"].join('')) : null,
    };
    return ret;
}


/**
 * 3dANOVA2
 *
 * This program performs a two-factor Analysis of Variance (ANOVA) on 3D datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAnova2Outputs`).
 */
function v_3d_anova2_execute(
    params: V3dAnova2Parameters,
    runner: Runner | null = null,
): V3dAnova2Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ANOVA2_METADATA);
    params = execution.params(params)
    const cargs = v_3d_anova2_cargs(params, execution)
    const ret = v_3d_anova2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dANOVA2
 *
 * This program performs a two-factor Analysis of Variance (ANOVA) on 3D datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param type_ Type of ANOVA model to be used: 1=fixed, 2=random, 3=mixed
 * @param alevels Number of levels of factor A
 * @param blevels Number of levels of factor B
 * @param dataset Data set for levels of factor A and factor B
 * @param voxel Screen output for voxel number
 * @param diskspace Print out disk space required for program execution
 * @param mask Use sub-brick #0 of dataset 'mset' to define which voxels to process
 * @param ftr F-statistic for treatment effect
 * @param fa F-statistic for factor A effect
 * @param fb F-statistic for factor B effect
 * @param fab F-statistic for interaction
 * @param amean Estimate mean of factor A level
 * @param bmean Estimate mean of factor B level
 * @param xmean Estimate mean of cell at level i of factor A and level j of factor B
 * @param adiff Difference between levels i and j of factor A
 * @param bdiff Difference between levels i and j of factor B
 * @param xdiff Difference between cell mean at A=i, B=j and cell mean at A=k, B=l
 * @param acontr Contrast in factor A levels
 * @param bcontr Contrast in factor B levels
 * @param xcontr Contrast in cell means
 * @param bucket Create one AFNI 'bucket' dataset whose sub-bricks are obtained by concatenating the above output files
 * @param old_method Request to perform ANOVA using the previous functionality (requires -OK, also)
 * @param ok Confirm understanding that contrasts that do not sum to zero have inflated t-stats, and contrasts that do sum to zero assume sphericity (to be used with -old_method)
 * @param assume_sph Assume sphericity (zero-sum contrasts, only). This allows use of the old_method for computing contrasts which sum to zero
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAnova2Outputs`).
 */
function v_3d_anova2(
    type_: number,
    alevels: number,
    blevels: number,
    dataset: Array<string> | null = null,
    voxel: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    ftr: string | null = null,
    fa: string | null = null,
    fb: string | null = null,
    fab: string | null = null,
    amean: string | null = null,
    bmean: string | null = null,
    xmean: string | null = null,
    adiff: string | null = null,
    bdiff: string | null = null,
    xdiff: string | null = null,
    acontr: string | null = null,
    bcontr: string | null = null,
    xcontr: string | null = null,
    bucket: string | null = null,
    old_method: boolean = false,
    ok: boolean = false,
    assume_sph: boolean = false,
    runner: Runner | null = null,
): V3dAnova2Outputs {
    const params = v_3d_anova2_params(type_, alevels, blevels, dataset, voxel, diskspace, mask, ftr, fa, fb, fab, amean, bmean, xmean, adiff, bdiff, xdiff, acontr, bcontr, xcontr, bucket, old_method, ok, assume_sph)
    return v_3d_anova2_execute(params, runner);
}


export {
      V3dAnova2Outputs,
      V3dAnova2Parameters,
      V_3D_ANOVA2_METADATA,
      v_3d_anova2,
      v_3d_anova2_execute,
      v_3d_anova2_params,
};
