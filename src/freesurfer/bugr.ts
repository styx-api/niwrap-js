// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BUGR_METADATA: Metadata = {
    id: "c59ecc18f09513a64d6c410b4046dd59f641fd90.boutiques",
    name: "bugr",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BugrParameters {
    "__STYXTYPE__": "bugr";
    "subject_name": string;
    "command_line": string;
    "error_message": string;
    "log_file"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "bugr": bugr_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `bugr(...)`.
 *
 * @interface
 */
interface BugrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function bugr_params(
    subject_name: string,
    command_line: string,
    error_message: string,
    log_file: InputPathType | null = null,
): BugrParameters {
    /**
     * Build parameters.
    
     * @param subject_name Subject name to include in the bug report
     * @param command_line The entire command-line executed
     * @param error_message The error message generated
     * @param log_file Log file path of the subject's recon-all process
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "bugr" as const,
        "subject_name": subject_name,
        "command_line": command_line,
        "error_message": error_message,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    return params;
}


function bugr_cargs(
    params: BugrParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("bugr");
    cargs.push(
        "-subject",
        (params["subject_name"] ?? null)
    );
    cargs.push(
        "-command",
        (params["command_line"] ?? null)
    );
    cargs.push(
        "-error",
        (params["error_message"] ?? null)
    );
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-log",
            execution.inputFile((params["log_file"] ?? null))
        );
    }
    return cargs;
}


function bugr_outputs(
    params: BugrParameters,
    execution: Execution,
): BugrOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BugrOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function bugr_execute(
    params: BugrParameters,
    execution: Execution,
): BugrOutputs {
    /**
     * Utility for generating and reporting FreeSurfer bugs.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BugrOutputs`).
     */
    params = execution.params(params)
    const cargs = bugr_cargs(params, execution)
    const ret = bugr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function bugr(
    subject_name: string,
    command_line: string,
    error_message: string,
    log_file: InputPathType | null = null,
    runner: Runner | null = null,
): BugrOutputs {
    /**
     * Utility for generating and reporting FreeSurfer bugs.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subject_name Subject name to include in the bug report
     * @param command_line The entire command-line executed
     * @param error_message The error message generated
     * @param log_file Log file path of the subject's recon-all process
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BugrOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BUGR_METADATA);
    const params = bugr_params(subject_name, command_line, error_message, log_file)
    return bugr_execute(params, execution);
}


export {
      BUGR_METADATA,
      BugrOutputs,
      BugrParameters,
      bugr,
      bugr_params,
};
