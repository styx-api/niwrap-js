// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSLNVOLS_METADATA: Metadata = {
    id: "1ea897bf08728979bbf3d74ded90b4afa8433920.boutiques",
    name: "fslnvols",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslnvolsParameters {
    "@type": "fsl.fslnvols";
    "infile": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.fslnvols": fslnvols_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fslnvols(...)`.
 *
 * @interface
 */
interface FslnvolsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input NIfTI file (e.g., fmri.nii.gz)
 *
 * @returns Parameter dictionary
 */
function fslnvols_params(
    infile: InputPathType,
): FslnvolsParameters {
    const params = {
        "@type": "fsl.fslnvols" as const,
        "infile": infile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fslnvols_cargs(
    params: FslnvolsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fslnvols");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fslnvols_outputs(
    params: FslnvolsParameters,
    execution: Execution,
): FslnvolsOutputs {
    const ret: FslnvolsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Retrieve the number of volumes in a 4D NIfTI file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FslnvolsOutputs`).
 */
function fslnvols_execute(
    params: FslnvolsParameters,
    execution: Execution,
): FslnvolsOutputs {
    params = execution.params(params)
    const cargs = fslnvols_cargs(params, execution)
    const ret = fslnvols_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Retrieve the number of volumes in a 4D NIfTI file.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param infile Input NIfTI file (e.g., fmri.nii.gz)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslnvolsOutputs`).
 */
function fslnvols(
    infile: InputPathType,
    runner: Runner | null = null,
): FslnvolsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSLNVOLS_METADATA);
    const params = fslnvols_params(infile)
    return fslnvols_execute(params, execution);
}


export {
      FSLNVOLS_METADATA,
      FslnvolsOutputs,
      FslnvolsParameters,
      fslnvols,
      fslnvols_cargs,
      fslnvols_execute,
      fslnvols_outputs,
      fslnvols_params,
};
