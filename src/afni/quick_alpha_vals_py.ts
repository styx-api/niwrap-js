// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const QUICK_ALPHA_VALS_PY_METADATA: Metadata = {
    id: "240a9d3e24a1a2d167b06636e882d90d255a2a3c.boutiques",
    name: "quick.alpha.vals.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface QuickAlphaValsPyParameters {
    "@type"?: "afni/quick.alpha.vals.py";
    "niter"?: number | null | undefined;
    "max_file": InputPathType;
}
type QuickAlphaValsPyParametersTagged = Required<Pick<QuickAlphaValsPyParameters, '@type'>> & QuickAlphaValsPyParameters;


/**
 * Output object returned when calling `QuickAlphaValsPyParameters(...)`.
 *
 * @interface
 */
interface QuickAlphaValsPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated alpha table file
     */
    alpha_table: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param max_file File containing maximum z values
 * @param niter Number of iterations that should be in the z file
 *
 * @returns Parameter dictionary
 */
function quick_alpha_vals_py_params(
    max_file: InputPathType,
    niter: number | null = null,
): QuickAlphaValsPyParametersTagged {
    const params = {
        "@type": "afni/quick.alpha.vals.py" as const,
        "max_file": max_file,
    };
    if (niter !== null) {
        params["niter"] = niter;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function quick_alpha_vals_py_cargs(
    params: QuickAlphaValsPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("quick.alpha.vals.py");
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["niter"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["max_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function quick_alpha_vals_py_outputs(
    params: QuickAlphaValsPyParameters,
    execution: Execution,
): QuickAlphaValsPyOutputs {
    const ret: QuickAlphaValsPyOutputs = {
        root: execution.outputFile("."),
        alpha_table: execution.outputFile(["alpha_table.txt"].join('')),
    };
    return ret;
}


/**
 * quick.alpha.vals.py
 *
 * Generate an alpha table from slow_surf_clustsim.py results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `QuickAlphaValsPyOutputs`).
 */
function quick_alpha_vals_py_execute(
    params: QuickAlphaValsPyParameters,
    runner: Runner | null = null,
): QuickAlphaValsPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(QUICK_ALPHA_VALS_PY_METADATA);
    params = execution.params(params)
    const cargs = quick_alpha_vals_py_cargs(params, execution)
    const ret = quick_alpha_vals_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * quick.alpha.vals.py
 *
 * Generate an alpha table from slow_surf_clustsim.py results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param max_file File containing maximum z values
 * @param niter Number of iterations that should be in the z file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `QuickAlphaValsPyOutputs`).
 */
function quick_alpha_vals_py(
    max_file: InputPathType,
    niter: number | null = null,
    runner: Runner | null = null,
): QuickAlphaValsPyOutputs {
    const params = quick_alpha_vals_py_params(max_file, niter)
    return quick_alpha_vals_py_execute(params, runner);
}


export {
      QUICK_ALPHA_VALS_PY_METADATA,
      QuickAlphaValsPyOutputs,
      quick_alpha_vals_py,
      quick_alpha_vals_py_execute,
      quick_alpha_vals_py_params,
};
