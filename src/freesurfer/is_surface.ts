// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IS_SURFACE_METADATA: Metadata = {
    id: "035e166500ca11119ee6ff6e44628cacf5feb50e.boutiques",
    name: "is-surface",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface IsSurfaceParameters {
    "@type"?: "freesurfer/is-surface";
    "infile": InputPathType;
}
type IsSurfaceParametersTagged = Required<Pick<IsSurfaceParameters, '@type'>> & IsSurfaceParameters;


/**
 * Output object returned when calling `IsSurfaceParameters(...)`.
 *
 * @interface
 */
interface IsSurfaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input file to check if it's a surface
 *
 * @returns Parameter dictionary
 */
function is_surface_params(
    infile: InputPathType,
): IsSurfaceParametersTagged {
    const params = {
        "@type": "freesurfer/is-surface" as const,
        "infile": infile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function is_surface_cargs(
    params: IsSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("is-surface");
    cargs.push(
        "-surface",
        execution.inputFile((params["infile"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function is_surface_outputs(
    params: IsSurfaceParameters,
    execution: Execution,
): IsSurfaceOutputs {
    const ret: IsSurfaceOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * is-surface
 *
 * Determines whether a file is a volume-encoded surface file by examining its dimensions.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `IsSurfaceOutputs`).
 */
function is_surface_execute(
    params: IsSurfaceParameters,
    runner: Runner | null = null,
): IsSurfaceOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IS_SURFACE_METADATA);
    params = execution.params(params)
    const cargs = is_surface_cargs(params, execution)
    const ret = is_surface_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * is-surface
 *
 * Determines whether a file is a volume-encoded surface file by examining its dimensions.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param infile Input file to check if it's a surface
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `IsSurfaceOutputs`).
 */
function is_surface(
    infile: InputPathType,
    runner: Runner | null = null,
): IsSurfaceOutputs {
    const params = is_surface_params(infile)
    return is_surface_execute(params, runner);
}


export {
      IS_SURFACE_METADATA,
      IsSurfaceOutputs,
      is_surface,
      is_surface_execute,
      is_surface_params,
};
