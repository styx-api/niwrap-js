// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const XMAT_TOOL_PY_METADATA: Metadata = {
    id: "c4f4d93cb6f2d3928a755ef50fd462733504124e.boutiques",
    name: "xmat_tool.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface XmatToolPyParameters {
    "@type"?: "afni/xmat_tool.py";
    "no_gui": boolean;
    "load_xmat"?: InputPathType | null | undefined;
    "load_1d"?: InputPathType | null | undefined;
    "choose_cols"?: string | null | undefined;
    "choose_nonzero_cols": boolean;
    "chrono": boolean;
    "cormat_cutoff"?: number | null | undefined;
    "cosmat_cutoff"?: number | null | undefined;
    "cosmat_motion": boolean;
    "verb"?: number | null | undefined;
    "show_col_types": boolean;
    "show_conds": boolean;
    "show_cormat": boolean;
    "show_cormat_warnings": boolean;
    "show_cosmat": boolean;
    "show_cosmat_warnings": boolean;
    "show_fit_betas": boolean;
    "show_fit_ts": boolean;
    "show_xmat": boolean;
    "show_1d": boolean;
    "gui_plot_xmat_as_one": boolean;
}
type XmatToolPyParametersTagged = Required<Pick<XmatToolPyParameters, '@type'>> & XmatToolPyParameters;


/**
 * Output object returned when calling `XmatToolPyParameters(...)`.
 *
 * @interface
 */
interface XmatToolPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output fit time series
     */
    output_fitts: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param no_gui Do not start the GUI
 * @param load_xmat Load the AFNI X-matrix
 * @param load_1d Load the 1D time series
 * @param choose_cols Select columns to fit against
 * @param choose_nonzero_cols Select only non-zero columns
 * @param chrono Apply options chronologically
 * @param cormat_cutoff Set min cutoff for correlation matrix warnings
 * @param cosmat_cutoff Set min cutoff for cosine matrix warnings
 * @param cosmat_motion Include motion in cosine matrix warnings
 * @param verb Set the verbose level. Valid levels are currently 0..5.
 * @param show_col_types Display columns by regressor types
 * @param show_conds Display a list of condition numbers
 * @param show_cormat Display the correlation matrix
 * @param show_cormat_warnings Show correlation matrix warnings
 * @param show_cosmat Display the cosine matrix
 * @param show_cosmat_warnings Show cosine matrix warnings
 * @param show_fit_betas Show fit betas
 * @param show_fit_ts Show fit time series
 * @param show_xmat Display general X-matrix information
 * @param show_1d Display general 1D information
 * @param gui_plot_xmat_as_one Plot Xmat columns on single axis
 *
 * @returns Parameter dictionary
 */
function xmat_tool_py_params(
    no_gui: boolean = false,
    load_xmat: InputPathType | null = null,
    load_1d: InputPathType | null = null,
    choose_cols: string | null = null,
    choose_nonzero_cols: boolean = false,
    chrono: boolean = false,
    cormat_cutoff: number | null = null,
    cosmat_cutoff: number | null = null,
    cosmat_motion: boolean = false,
    verb: number | null = null,
    show_col_types: boolean = false,
    show_conds: boolean = false,
    show_cormat: boolean = false,
    show_cormat_warnings: boolean = false,
    show_cosmat: boolean = false,
    show_cosmat_warnings: boolean = false,
    show_fit_betas: boolean = false,
    show_fit_ts: boolean = false,
    show_xmat: boolean = false,
    show_1d: boolean = false,
    gui_plot_xmat_as_one: boolean = false,
): XmatToolPyParametersTagged {
    const params = {
        "@type": "afni/xmat_tool.py" as const,
        "no_gui": no_gui,
        "choose_nonzero_cols": choose_nonzero_cols,
        "chrono": chrono,
        "cosmat_motion": cosmat_motion,
        "show_col_types": show_col_types,
        "show_conds": show_conds,
        "show_cormat": show_cormat,
        "show_cormat_warnings": show_cormat_warnings,
        "show_cosmat": show_cosmat,
        "show_cosmat_warnings": show_cosmat_warnings,
        "show_fit_betas": show_fit_betas,
        "show_fit_ts": show_fit_ts,
        "show_xmat": show_xmat,
        "show_1d": show_1d,
        "gui_plot_xmat_as_one": gui_plot_xmat_as_one,
    };
    if (load_xmat !== null) {
        params["load_xmat"] = load_xmat;
    }
    if (load_1d !== null) {
        params["load_1d"] = load_1d;
    }
    if (choose_cols !== null) {
        params["choose_cols"] = choose_cols;
    }
    if (cormat_cutoff !== null) {
        params["cormat_cutoff"] = cormat_cutoff;
    }
    if (cosmat_cutoff !== null) {
        params["cosmat_cutoff"] = cosmat_cutoff;
    }
    if (verb !== null) {
        params["verb"] = verb;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function xmat_tool_py_cargs(
    params: XmatToolPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("xmat_tool.py");
    if ((params["no_gui"] ?? false)) {
        cargs.push("-no_gui");
    }
    if ((params["load_xmat"] ?? null) !== null) {
        cargs.push(
            "-load_xmat",
            execution.inputFile((params["load_xmat"] ?? null))
        );
    }
    if ((params["load_1d"] ?? null) !== null) {
        cargs.push(
            "-load_1D",
            execution.inputFile((params["load_1d"] ?? null))
        );
    }
    if ((params["choose_cols"] ?? null) !== null) {
        cargs.push(
            "-choose_cols",
            (params["choose_cols"] ?? null)
        );
    }
    if ((params["choose_nonzero_cols"] ?? false)) {
        cargs.push("-choose_nonzero_cols");
    }
    if ((params["chrono"] ?? false)) {
        cargs.push("-chrono");
    }
    if ((params["cormat_cutoff"] ?? null) !== null) {
        cargs.push(
            "-cormat_cutoff",
            String((params["cormat_cutoff"] ?? null))
        );
    }
    if ((params["cosmat_cutoff"] ?? null) !== null) {
        cargs.push(
            "-cosmat_cutoff",
            String((params["cosmat_cutoff"] ?? null))
        );
    }
    if ((params["cosmat_motion"] ?? false)) {
        cargs.push("-cosmat_motion");
    }
    if ((params["verb"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb"] ?? null))
        );
    }
    if ((params["show_col_types"] ?? false)) {
        cargs.push("-show_col_types");
    }
    if ((params["show_conds"] ?? false)) {
        cargs.push("-show_conds");
    }
    if ((params["show_cormat"] ?? false)) {
        cargs.push("-show_cormat");
    }
    if ((params["show_cormat_warnings"] ?? false)) {
        cargs.push("-show_cormat_warnings");
    }
    if ((params["show_cosmat"] ?? false)) {
        cargs.push("-show_cosmat");
    }
    if ((params["show_cosmat_warnings"] ?? false)) {
        cargs.push("-show_cosmat_warnings");
    }
    if ((params["show_fit_betas"] ?? false)) {
        cargs.push("-show_fit_betas");
    }
    if ((params["show_fit_ts"] ?? false)) {
        cargs.push("-show_fit_ts");
    }
    if ((params["show_xmat"] ?? false)) {
        cargs.push("-show_xmat");
    }
    if ((params["show_1d"] ?? false)) {
        cargs.push("-show_1D");
    }
    if ((params["gui_plot_xmat_as_one"] ?? false)) {
        cargs.push("-gui_plot_xmat_as_one");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function xmat_tool_py_outputs(
    params: XmatToolPyParameters,
    execution: Execution,
): XmatToolPyOutputs {
    const ret: XmatToolPyOutputs = {
        root: execution.outputFile("."),
        output_fitts: execution.outputFile(["fitts.1D"].join('')),
    };
    return ret;
}


/**
 * xmat_tool.py
 *
 * A tool for evaluating an AFNI X-matrix.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XmatToolPyOutputs`).
 */
function xmat_tool_py_execute(
    params: XmatToolPyParameters,
    runner: Runner | null = null,
): XmatToolPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(XMAT_TOOL_PY_METADATA);
    params = execution.params(params)
    const cargs = xmat_tool_py_cargs(params, execution)
    const ret = xmat_tool_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * xmat_tool.py
 *
 * A tool for evaluating an AFNI X-matrix.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param no_gui Do not start the GUI
 * @param load_xmat Load the AFNI X-matrix
 * @param load_1d Load the 1D time series
 * @param choose_cols Select columns to fit against
 * @param choose_nonzero_cols Select only non-zero columns
 * @param chrono Apply options chronologically
 * @param cormat_cutoff Set min cutoff for correlation matrix warnings
 * @param cosmat_cutoff Set min cutoff for cosine matrix warnings
 * @param cosmat_motion Include motion in cosine matrix warnings
 * @param verb Set the verbose level. Valid levels are currently 0..5.
 * @param show_col_types Display columns by regressor types
 * @param show_conds Display a list of condition numbers
 * @param show_cormat Display the correlation matrix
 * @param show_cormat_warnings Show correlation matrix warnings
 * @param show_cosmat Display the cosine matrix
 * @param show_cosmat_warnings Show cosine matrix warnings
 * @param show_fit_betas Show fit betas
 * @param show_fit_ts Show fit time series
 * @param show_xmat Display general X-matrix information
 * @param show_1d Display general 1D information
 * @param gui_plot_xmat_as_one Plot Xmat columns on single axis
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `XmatToolPyOutputs`).
 */
function xmat_tool_py(
    no_gui: boolean = false,
    load_xmat: InputPathType | null = null,
    load_1d: InputPathType | null = null,
    choose_cols: string | null = null,
    choose_nonzero_cols: boolean = false,
    chrono: boolean = false,
    cormat_cutoff: number | null = null,
    cosmat_cutoff: number | null = null,
    cosmat_motion: boolean = false,
    verb: number | null = null,
    show_col_types: boolean = false,
    show_conds: boolean = false,
    show_cormat: boolean = false,
    show_cormat_warnings: boolean = false,
    show_cosmat: boolean = false,
    show_cosmat_warnings: boolean = false,
    show_fit_betas: boolean = false,
    show_fit_ts: boolean = false,
    show_xmat: boolean = false,
    show_1d: boolean = false,
    gui_plot_xmat_as_one: boolean = false,
    runner: Runner | null = null,
): XmatToolPyOutputs {
    const params = xmat_tool_py_params(no_gui, load_xmat, load_1d, choose_cols, choose_nonzero_cols, chrono, cormat_cutoff, cosmat_cutoff, cosmat_motion, verb, show_col_types, show_conds, show_cormat, show_cormat_warnings, show_cosmat, show_cosmat_warnings, show_fit_betas, show_fit_ts, show_xmat, show_1d, gui_plot_xmat_as_one)
    return xmat_tool_py_execute(params, runner);
}


export {
      XMAT_TOOL_PY_METADATA,
      XmatToolPyOutputs,
      xmat_tool_py,
      xmat_tool_py_execute,
      xmat_tool_py_params,
};
