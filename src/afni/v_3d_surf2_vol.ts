// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_SURF2_VOL_METADATA: Metadata = {
    id: "fa9697733e4cdedac6e9ad32c1f0b6636170c645.boutiques",
    name: "3dSurf2Vol",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dSurf2VolParameters {
    "@type": "afni.3dSurf2Vol";
    "spec": InputPathType;
    "surface_volume": InputPathType;
    "surf_a": string;
    "surf_b"?: string | null | undefined;
    "grid_parent": InputPathType;
    "map_func": string;
    "prefix": string;
    "surf_xyz_1d"?: InputPathType | null | undefined;
    "sdata_1d"?: InputPathType | null | undefined;
    "sdata"?: InputPathType | null | undefined;
    "f_steps"?: number | null | undefined;
    "f_index"?: string | null | undefined;
    "f_p1_fr"?: number | null | undefined;
    "f_pn_fr"?: number | null | undefined;
    "f_p1_mm"?: number | null | undefined;
    "f_pn_mm"?: number | null | undefined;
    "stop_gap": boolean;
    "cmask"?: string | null | undefined;
    "data_expr"?: string | null | undefined;
    "datum"?: string | null | undefined;
    "debug"?: number | null | undefined;
    "dnode"?: number | null | undefined;
    "dvoxel"?: number | null | undefined;
    "noscale": boolean;
    "sxyz_orient_as_gpar": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dSurf2Vol": v_3d_surf2_vol_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dSurf2Vol": v_3d_surf2_vol_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_surf2_vol(...)`.
 *
 * @interface
 */
interface V3dSurf2VolOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param spec SUMA spec file
 * @param surface_volume AFNI surface volume dataset
 * @param surf_a Specify surface A from spec file
 * @param grid_parent AFNI grid parent dataset
 * @param map_func Surface to dataset function
 * @param prefix Prefix for the output dataset
 * @param surf_b Specify surface B from spec file
 * @param surf_xyz_1d 1D coordinate file
 * @param sdata_1d 1D sub-surface data file
 * @param sdata NIML or GIFTI formatted dataset
 * @param f_steps Partition segments into this many steps
 * @param f_index Index by points or voxels
 * @param f_p1_fr Offset p1 by a fraction of the length
 * @param f_pn_fr Offset pn by a fraction of the length
 * @param f_p1_mm Offset p1 by a distance in mm
 * @param f_pn_mm Offset pn by a distance in mm
 * @param stop_gap Stop when a zero gap has been hit
 * @param cmask Command for dataset mask
 * @param data_expr Apply expression to surface input
 * @param datum Set data type in output dataset
 * @param debug Verbose output level
 * @param dnode Extra output for specified node
 * @param dvoxel Extra output for specified voxel
 * @param noscale No scale factor in output dataset
 * @param sxyz_orient_as_gpar Assume grid parent orientation for surface xyz
 *
 * @returns Parameter dictionary
 */
function v_3d_surf2_vol_params(
    spec: InputPathType,
    surface_volume: InputPathType,
    surf_a: string,
    grid_parent: InputPathType,
    map_func: string,
    prefix: string,
    surf_b: string | null = null,
    surf_xyz_1d: InputPathType | null = null,
    sdata_1d: InputPathType | null = null,
    sdata: InputPathType | null = null,
    f_steps: number | null = null,
    f_index: string | null = null,
    f_p1_fr: number | null = null,
    f_pn_fr: number | null = null,
    f_p1_mm: number | null = null,
    f_pn_mm: number | null = null,
    stop_gap: boolean = false,
    cmask: string | null = null,
    data_expr: string | null = null,
    datum: string | null = null,
    debug: number | null = null,
    dnode: number | null = null,
    dvoxel: number | null = null,
    noscale: boolean = false,
    sxyz_orient_as_gpar: boolean = false,
): V3dSurf2VolParameters {
    const params = {
        "@type": "afni.3dSurf2Vol" as const,
        "spec": spec,
        "surface_volume": surface_volume,
        "surf_a": surf_a,
        "grid_parent": grid_parent,
        "map_func": map_func,
        "prefix": prefix,
        "stop_gap": stop_gap,
        "noscale": noscale,
        "sxyz_orient_as_gpar": sxyz_orient_as_gpar,
    };
    if (surf_b !== null) {
        params["surf_b"] = surf_b;
    }
    if (surf_xyz_1d !== null) {
        params["surf_xyz_1d"] = surf_xyz_1d;
    }
    if (sdata_1d !== null) {
        params["sdata_1d"] = sdata_1d;
    }
    if (sdata !== null) {
        params["sdata"] = sdata;
    }
    if (f_steps !== null) {
        params["f_steps"] = f_steps;
    }
    if (f_index !== null) {
        params["f_index"] = f_index;
    }
    if (f_p1_fr !== null) {
        params["f_p1_fr"] = f_p1_fr;
    }
    if (f_pn_fr !== null) {
        params["f_pn_fr"] = f_pn_fr;
    }
    if (f_p1_mm !== null) {
        params["f_p1_mm"] = f_p1_mm;
    }
    if (f_pn_mm !== null) {
        params["f_pn_mm"] = f_pn_mm;
    }
    if (cmask !== null) {
        params["cmask"] = cmask;
    }
    if (data_expr !== null) {
        params["data_expr"] = data_expr;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    if (debug !== null) {
        params["debug"] = debug;
    }
    if (dnode !== null) {
        params["dnode"] = dnode;
    }
    if (dvoxel !== null) {
        params["dvoxel"] = dvoxel;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_surf2_vol_cargs(
    params: V3dSurf2VolParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dSurf2Vol");
    cargs.push(
        "-spec",
        execution.inputFile((params["spec"] ?? null))
    );
    cargs.push(
        "-sv",
        execution.inputFile((params["surface_volume"] ?? null))
    );
    cargs.push(
        "-surf_A",
        (params["surf_a"] ?? null)
    );
    if ((params["surf_b"] ?? null) !== null) {
        cargs.push(
            "-surf_B",
            (params["surf_b"] ?? null)
        );
    }
    cargs.push(
        "-grid_parent",
        execution.inputFile((params["grid_parent"] ?? null))
    );
    cargs.push(
        "-map_func",
        (params["map_func"] ?? null)
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["surf_xyz_1d"] ?? null) !== null) {
        cargs.push(
            "-surf_xyz_1D",
            execution.inputFile((params["surf_xyz_1d"] ?? null))
        );
    }
    if ((params["sdata_1d"] ?? null) !== null) {
        cargs.push(
            "-sdata_1D",
            execution.inputFile((params["sdata_1d"] ?? null))
        );
    }
    if ((params["sdata"] ?? null) !== null) {
        cargs.push(
            "-sdata",
            execution.inputFile((params["sdata"] ?? null))
        );
    }
    if ((params["f_steps"] ?? null) !== null) {
        cargs.push(
            "-f_steps",
            String((params["f_steps"] ?? null))
        );
    }
    if ((params["f_index"] ?? null) !== null) {
        cargs.push(
            "-f_index",
            (params["f_index"] ?? null)
        );
    }
    if ((params["f_p1_fr"] ?? null) !== null) {
        cargs.push(
            "-f_p1_fr",
            String((params["f_p1_fr"] ?? null))
        );
    }
    if ((params["f_pn_fr"] ?? null) !== null) {
        cargs.push(
            "-f_pn_fr",
            String((params["f_pn_fr"] ?? null))
        );
    }
    if ((params["f_p1_mm"] ?? null) !== null) {
        cargs.push(
            "-f_p1_mm",
            String((params["f_p1_mm"] ?? null))
        );
    }
    if ((params["f_pn_mm"] ?? null) !== null) {
        cargs.push(
            "-f_pn_mm",
            String((params["f_pn_mm"] ?? null))
        );
    }
    if ((params["stop_gap"] ?? null)) {
        cargs.push("-stop_gap");
    }
    if ((params["cmask"] ?? null) !== null) {
        cargs.push(
            "-cmask",
            (params["cmask"] ?? null)
        );
    }
    if ((params["data_expr"] ?? null) !== null) {
        cargs.push(
            "-data_expr",
            (params["data_expr"] ?? null)
        );
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    if ((params["debug"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug"] ?? null))
        );
    }
    if ((params["dnode"] ?? null) !== null) {
        cargs.push(
            "-dnode",
            String((params["dnode"] ?? null))
        );
    }
    if ((params["dvoxel"] ?? null) !== null) {
        cargs.push(
            "-dvoxel",
            String((params["dvoxel"] ?? null))
        );
    }
    if ((params["noscale"] ?? null)) {
        cargs.push("-noscale");
    }
    if ((params["sxyz_orient_as_gpar"] ?? null)) {
        cargs.push("-sxyz_orient_as_gpar");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_surf2_vol_outputs(
    params: V3dSurf2VolParameters,
    execution: Execution,
): V3dSurf2VolOutputs {
    const ret: V3dSurf2VolOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null), "+*[gz]"].join('')),
    };
    return ret;
}


/**
 * Map data from a surface domain to an AFNI volume domain.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dSurf2VolOutputs`).
 */
function v_3d_surf2_vol_execute(
    params: V3dSurf2VolParameters,
    execution: Execution,
): V3dSurf2VolOutputs {
    params = execution.params(params)
    const cargs = v_3d_surf2_vol_cargs(params, execution)
    const ret = v_3d_surf2_vol_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Map data from a surface domain to an AFNI volume domain.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param spec SUMA spec file
 * @param surface_volume AFNI surface volume dataset
 * @param surf_a Specify surface A from spec file
 * @param grid_parent AFNI grid parent dataset
 * @param map_func Surface to dataset function
 * @param prefix Prefix for the output dataset
 * @param surf_b Specify surface B from spec file
 * @param surf_xyz_1d 1D coordinate file
 * @param sdata_1d 1D sub-surface data file
 * @param sdata NIML or GIFTI formatted dataset
 * @param f_steps Partition segments into this many steps
 * @param f_index Index by points or voxels
 * @param f_p1_fr Offset p1 by a fraction of the length
 * @param f_pn_fr Offset pn by a fraction of the length
 * @param f_p1_mm Offset p1 by a distance in mm
 * @param f_pn_mm Offset pn by a distance in mm
 * @param stop_gap Stop when a zero gap has been hit
 * @param cmask Command for dataset mask
 * @param data_expr Apply expression to surface input
 * @param datum Set data type in output dataset
 * @param debug Verbose output level
 * @param dnode Extra output for specified node
 * @param dvoxel Extra output for specified voxel
 * @param noscale No scale factor in output dataset
 * @param sxyz_orient_as_gpar Assume grid parent orientation for surface xyz
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dSurf2VolOutputs`).
 */
function v_3d_surf2_vol(
    spec: InputPathType,
    surface_volume: InputPathType,
    surf_a: string,
    grid_parent: InputPathType,
    map_func: string,
    prefix: string,
    surf_b: string | null = null,
    surf_xyz_1d: InputPathType | null = null,
    sdata_1d: InputPathType | null = null,
    sdata: InputPathType | null = null,
    f_steps: number | null = null,
    f_index: string | null = null,
    f_p1_fr: number | null = null,
    f_pn_fr: number | null = null,
    f_p1_mm: number | null = null,
    f_pn_mm: number | null = null,
    stop_gap: boolean = false,
    cmask: string | null = null,
    data_expr: string | null = null,
    datum: string | null = null,
    debug: number | null = null,
    dnode: number | null = null,
    dvoxel: number | null = null,
    noscale: boolean = false,
    sxyz_orient_as_gpar: boolean = false,
    runner: Runner | null = null,
): V3dSurf2VolOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_SURF2_VOL_METADATA);
    const params = v_3d_surf2_vol_params(spec, surface_volume, surf_a, grid_parent, map_func, prefix, surf_b, surf_xyz_1d, sdata_1d, sdata, f_steps, f_index, f_p1_fr, f_pn_fr, f_p1_mm, f_pn_mm, stop_gap, cmask, data_expr, datum, debug, dnode, dvoxel, noscale, sxyz_orient_as_gpar)
    return v_3d_surf2_vol_execute(params, execution);
}


export {
      V3dSurf2VolOutputs,
      V3dSurf2VolParameters,
      V_3D_SURF2_VOL_METADATA,
      v_3d_surf2_vol,
      v_3d_surf2_vol_cargs,
      v_3d_surf2_vol_execute,
      v_3d_surf2_vol_outputs,
      v_3d_surf2_vol_params,
};
