// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__DJUNCT_SSW_INTERMED_EDGE_IMGS_METADATA: Metadata = {
    id: "e230f79426f6158216707401554de44362bbaefe.boutiques",
    name: "@djunct_ssw_intermed_edge_imgs",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VDjunctSswIntermedEdgeImgsParameters {
    "__STYXTYPE__": "@djunct_ssw_intermed_edge_imgs";
    "prefix": string;
    "ulay": InputPathType;
    "olay": InputPathType;
    "box_focus_slices"?: string | null | undefined;
    "montgap"?: string | null | undefined;
    "cbar"?: string | null | undefined;
    "ulay_range"?: string | null | undefined;
    "montx"?: string | null | undefined;
    "monty"?: string | null | undefined;
    "help_view": boolean;
    "help": boolean;
    "version": boolean;
    "no_clean": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@djunct_ssw_intermed_edge_imgs": v__djunct_ssw_intermed_edge_imgs_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__djunct_ssw_intermed_edge_imgs(...)`.
 *
 * @interface
 */
interface VDjunctSswIntermedEdgeImgsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__djunct_ssw_intermed_edge_imgs_params(
    prefix: string,
    ulay: InputPathType,
    olay: InputPathType,
    box_focus_slices: string | null = null,
    montgap: string | null = null,
    cbar: string | null = null,
    ulay_range: string | null = null,
    montx: string | null = null,
    monty: string | null = null,
    help_view: boolean = false,
    help: boolean = false,
    version: boolean = false,
    no_clean: boolean = false,
): VDjunctSswIntermedEdgeImgsParameters {
    /**
     * Build parameters.
    
     * @param prefix Prefix for generated output files
     * @param ulay Underlay dataset
     * @param olay Overlay dataset
     * @param box_focus_slices Slices of interest for focus box
     * @param montgap Gap between montage slices
     * @param cbar Color bar specification for AFNI
     * @param ulay_range Range for underlay data mapping
     * @param montx Number of slices along x dimension in montage
     * @param monty Number of slices along y dimension in montage
     * @param help_view View help file in viewer
     * @param help Displays help information
     * @param version Displays version information
     * @param no_clean Don't clean up intermediate files
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@djunct_ssw_intermed_edge_imgs" as const,
        "prefix": prefix,
        "ulay": ulay,
        "olay": olay,
        "help_view": help_view,
        "help": help,
        "version": version,
        "no_clean": no_clean,
    };
    if (box_focus_slices !== null) {
        params["box_focus_slices"] = box_focus_slices;
    }
    if (montgap !== null) {
        params["montgap"] = montgap;
    }
    if (cbar !== null) {
        params["cbar"] = cbar;
    }
    if (ulay_range !== null) {
        params["ulay_range"] = ulay_range;
    }
    if (montx !== null) {
        params["montx"] = montx;
    }
    if (monty !== null) {
        params["monty"] = monty;
    }
    return params;
}


function v__djunct_ssw_intermed_edge_imgs_cargs(
    params: VDjunctSswIntermedEdgeImgsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@djunct_ssw_intermed_edge_imgs");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-ulay",
        execution.inputFile((params["ulay"] ?? null))
    );
    cargs.push(
        "-olay",
        execution.inputFile((params["olay"] ?? null))
    );
    if ((params["box_focus_slices"] ?? null) !== null) {
        cargs.push(
            "-box_focus_slices",
            (params["box_focus_slices"] ?? null)
        );
    }
    if ((params["montgap"] ?? null) !== null) {
        cargs.push(
            "-montgap",
            (params["montgap"] ?? null)
        );
    }
    if ((params["cbar"] ?? null) !== null) {
        cargs.push(
            "-cbar",
            (params["cbar"] ?? null)
        );
    }
    if ((params["ulay_range"] ?? null) !== null) {
        cargs.push(
            "-ulay_range",
            (params["ulay_range"] ?? null)
        );
    }
    if ((params["montx"] ?? null) !== null) {
        cargs.push(
            "-montx",
            (params["montx"] ?? null)
        );
    }
    if ((params["monty"] ?? null) !== null) {
        cargs.push(
            "-monty",
            (params["monty"] ?? null)
        );
    }
    if ((params["help_view"] ?? null)) {
        cargs.push("-hview");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    return cargs;
}


function v__djunct_ssw_intermed_edge_imgs_outputs(
    params: VDjunctSswIntermedEdgeImgsParameters,
    execution: Execution,
): VDjunctSswIntermedEdgeImgsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VDjunctSswIntermedEdgeImgsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__djunct_ssw_intermed_edge_imgs_execute(
    params: VDjunctSswIntermedEdgeImgsParameters,
    execution: Execution,
): VDjunctSswIntermedEdgeImgsOutputs {
    /**
     * Helper script to generate intermediate edge images for SSW-related processing.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VDjunctSswIntermedEdgeImgsOutputs`).
     */
    params = execution.params(params)
    const cargs = v__djunct_ssw_intermed_edge_imgs_cargs(params, execution)
    const ret = v__djunct_ssw_intermed_edge_imgs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__djunct_ssw_intermed_edge_imgs(
    prefix: string,
    ulay: InputPathType,
    olay: InputPathType,
    box_focus_slices: string | null = null,
    montgap: string | null = null,
    cbar: string | null = null,
    ulay_range: string | null = null,
    montx: string | null = null,
    monty: string | null = null,
    help_view: boolean = false,
    help: boolean = false,
    version: boolean = false,
    no_clean: boolean = false,
    runner: Runner | null = null,
): VDjunctSswIntermedEdgeImgsOutputs {
    /**
     * Helper script to generate intermediate edge images for SSW-related processing.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix Prefix for generated output files
     * @param ulay Underlay dataset
     * @param olay Overlay dataset
     * @param box_focus_slices Slices of interest for focus box
     * @param montgap Gap between montage slices
     * @param cbar Color bar specification for AFNI
     * @param ulay_range Range for underlay data mapping
     * @param montx Number of slices along x dimension in montage
     * @param monty Number of slices along y dimension in montage
     * @param help_view View help file in viewer
     * @param help Displays help information
     * @param version Displays version information
     * @param no_clean Don't clean up intermediate files
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VDjunctSswIntermedEdgeImgsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__DJUNCT_SSW_INTERMED_EDGE_IMGS_METADATA);
    const params = v__djunct_ssw_intermed_edge_imgs_params(prefix, ulay, olay, box_focus_slices, montgap, cbar, ulay_range, montx, monty, help_view, help, version, no_clean)
    return v__djunct_ssw_intermed_edge_imgs_execute(params, execution);
}


export {
      VDjunctSswIntermedEdgeImgsOutputs,
      VDjunctSswIntermedEdgeImgsParameters,
      V__DJUNCT_SSW_INTERMED_EDGE_IMGS_METADATA,
      v__djunct_ssw_intermed_edge_imgs,
      v__djunct_ssw_intermed_edge_imgs_params,
};
