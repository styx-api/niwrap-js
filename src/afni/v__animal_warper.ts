// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ANIMAL_WARPER_METADATA: Metadata = {
    id: "d18a46908cadbc841d2123e4a66cc4c7fc5756d3.boutiques",
    name: "@animal_warper",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAnimalWarperParameters {
    "@type": "afni.@animal_warper";
    "input_file": InputPathType;
    "base_template": InputPathType;
    "output_dir": string;
    "brainmask"?: InputPathType | null | undefined;
    "atlases"?: Array<InputPathType> | null | undefined;
    "atlas_followers"?: Array<InputPathType> | null | undefined;
    "seg_followers"?: Array<InputPathType> | null | undefined;
    "template_followers"?: Array<InputPathType> | null | undefined;
    "dset_followers"?: Array<InputPathType> | null | undefined;
    "roidset_followers"?: Array<InputPathType> | null | undefined;
    "input_abbrev"?: string | null | undefined;
    "base_abbrev"?: string | null | undefined;
    "atlas_abbrevs"?: Array<string> | null | undefined;
    "template_abbrevs"?: Array<string> | null | undefined;
    "seg_abbrevs"?: Array<string> | null | undefined;
    "dset_abbrevs"?: Array<string> | null | undefined;
    "roidset_abbrevs"?: Array<string> | null | undefined;
    "align_centers_meth"?: string | null | undefined;
    "aff_move_opt"?: string | null | undefined;
    "cost"?: string | null | undefined;
    "maxlev"?: number | null | undefined;
    "no_surfaces": boolean;
    "feature_size"?: number | null | undefined;
    "supersize": boolean;
    "init_scale"?: number | null | undefined;
    "mode_smooth_size"?: number | null | undefined;
    "mode_smooth_replacement_off": boolean;
    "center_out"?: string | null | undefined;
    "align_type"?: string | null | undefined;
    "extra_qw_opts"?: string | null | undefined;
    "keep_temp": boolean;
    "version": boolean;
    "ok_to_exist": boolean;
    "echo": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@animal_warper": v__animal_warper_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@animal_warper": v__animal_warper_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__animal_warper(...)`.
 *
 * @interface
 */
interface VAnimalWarperOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * input dataset nonlinearly warped to template
     */
    warp2std: OutputPathType;
    /**
     * initial QC image montage showing overlap of source and base dataset
     */
    qc_image_initial: OutputPathType;
    /**
     * initial QC image montage after shifting centers of source and base dataset
     */
    qc_image_initial_sh: OutputPathType;
    /**
     * copy(s) of -dset_followers mapped to template space
     */
    dset_followers_out: OutputPathType;
    /**
     * copy(s) of -roidset_followers mapped to template space
     */
    roidset_followers_out: OutputPathType;
    /**
     * guide to data in output directory
     */
    animal_outs_guide: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file input dataset to align to base template
 * @param base_template base dataset (template) to align with
 * @param output_dir output directory where all processing will be performed
 * @param brainmask provide a brainmask in the base template space
 * @param atlases one or more atlas datasets in the base volume space
 * @param atlas_followers one or more atlas datasets in the base volume space
 * @param seg_followers one or more segmentation datasets in the base volume space
 * @param template_followers one or more datasets in the template volume space
 * @param dset_followers one or more datasets in the input volume space
 * @param roidset_followers one or more (int-valued) datasets in the input volume space
 * @param input_abbrev specify abbreviation for input dataset
 * @param base_abbrev specify abbreviation for base dataset
 * @param atlas_abbrevs specify an abbreviation for each atlas follower dataset
 * @param template_abbrevs specify an abbreviation for each template follower dataset
 * @param seg_abbrevs specify an abbreviation for each segmentation follower dataset
 * @param dset_abbrevs specify an abbreviation for each dataset follower dataset
 * @param roidset_abbrevs specify an abbreviation for each ROI dataset follower dataset
 * @param align_centers_meth center alignment method to use
 * @param aff_move_opt alignment movement options for affine alignment step
 * @param cost cost function for affine and nonlinear alignment
 * @param maxlev Max level for nonlinear warping. Final patch size is determined based on this value.
 * @param no_surfaces Do not make surfaces for atlas regions in native space.
 * @param feature_size Set feature size for affine alignment (in mm)
 * @param supersize Allow up to 50% size difference between subject and template
 * @param init_scale Approximate length ratio of input to template for initial scaling
 * @param mode_smooth_size Modal smoothing kernel size in voxels
 * @param mode_smooth_replacement_off Turn off replacement in modal smoothing
 * @param center_out Center native-space output to native original space or template space center-shifted
 * @param align_type Specify level of alignment
 * @param extra_qw_opts Additional options to add to existing options for 3dQwarp
 * @param keep_temp Keep temporary files including awpy directory and other intermediate datasets
 * @param version Display the program version
 * @param ok_to_exist Reuse and do not overwrite existing datasets
 * @param echo Copy all commands being run into the terminal
 *
 * @returns Parameter dictionary
 */
function v__animal_warper_params(
    input_file: InputPathType,
    base_template: InputPathType,
    output_dir: string,
    brainmask: InputPathType | null = null,
    atlases: Array<InputPathType> | null = null,
    atlas_followers: Array<InputPathType> | null = null,
    seg_followers: Array<InputPathType> | null = null,
    template_followers: Array<InputPathType> | null = null,
    dset_followers: Array<InputPathType> | null = null,
    roidset_followers: Array<InputPathType> | null = null,
    input_abbrev: string | null = null,
    base_abbrev: string | null = null,
    atlas_abbrevs: Array<string> | null = null,
    template_abbrevs: Array<string> | null = null,
    seg_abbrevs: Array<string> | null = null,
    dset_abbrevs: Array<string> | null = null,
    roidset_abbrevs: Array<string> | null = null,
    align_centers_meth: string | null = null,
    aff_move_opt: string | null = null,
    cost: string | null = null,
    maxlev: number | null = null,
    no_surfaces: boolean = false,
    feature_size: number | null = null,
    supersize: boolean = false,
    init_scale: number | null = null,
    mode_smooth_size: number | null = null,
    mode_smooth_replacement_off: boolean = false,
    center_out: string | null = null,
    align_type: string | null = null,
    extra_qw_opts: string | null = null,
    keep_temp: boolean = false,
    version: boolean = false,
    ok_to_exist: boolean = false,
    echo: boolean = false,
): VAnimalWarperParameters {
    const params = {
        "@type": "afni.@animal_warper" as const,
        "input_file": input_file,
        "base_template": base_template,
        "output_dir": output_dir,
        "no_surfaces": no_surfaces,
        "supersize": supersize,
        "mode_smooth_replacement_off": mode_smooth_replacement_off,
        "keep_temp": keep_temp,
        "version": version,
        "ok_to_exist": ok_to_exist,
        "echo": echo,
    };
    if (brainmask !== null) {
        params["brainmask"] = brainmask;
    }
    if (atlases !== null) {
        params["atlases"] = atlases;
    }
    if (atlas_followers !== null) {
        params["atlas_followers"] = atlas_followers;
    }
    if (seg_followers !== null) {
        params["seg_followers"] = seg_followers;
    }
    if (template_followers !== null) {
        params["template_followers"] = template_followers;
    }
    if (dset_followers !== null) {
        params["dset_followers"] = dset_followers;
    }
    if (roidset_followers !== null) {
        params["roidset_followers"] = roidset_followers;
    }
    if (input_abbrev !== null) {
        params["input_abbrev"] = input_abbrev;
    }
    if (base_abbrev !== null) {
        params["base_abbrev"] = base_abbrev;
    }
    if (atlas_abbrevs !== null) {
        params["atlas_abbrevs"] = atlas_abbrevs;
    }
    if (template_abbrevs !== null) {
        params["template_abbrevs"] = template_abbrevs;
    }
    if (seg_abbrevs !== null) {
        params["seg_abbrevs"] = seg_abbrevs;
    }
    if (dset_abbrevs !== null) {
        params["dset_abbrevs"] = dset_abbrevs;
    }
    if (roidset_abbrevs !== null) {
        params["roidset_abbrevs"] = roidset_abbrevs;
    }
    if (align_centers_meth !== null) {
        params["align_centers_meth"] = align_centers_meth;
    }
    if (aff_move_opt !== null) {
        params["aff_move_opt"] = aff_move_opt;
    }
    if (cost !== null) {
        params["cost"] = cost;
    }
    if (maxlev !== null) {
        params["maxlev"] = maxlev;
    }
    if (feature_size !== null) {
        params["feature_size"] = feature_size;
    }
    if (init_scale !== null) {
        params["init_scale"] = init_scale;
    }
    if (mode_smooth_size !== null) {
        params["mode_smooth_size"] = mode_smooth_size;
    }
    if (center_out !== null) {
        params["center_out"] = center_out;
    }
    if (align_type !== null) {
        params["align_type"] = align_type;
    }
    if (extra_qw_opts !== null) {
        params["extra_qw_opts"] = extra_qw_opts;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__animal_warper_cargs(
    params: VAnimalWarperParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@animal_warper");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    cargs.push(execution.inputFile((params["base_template"] ?? null)));
    cargs.push((params["output_dir"] ?? null));
    if ((params["brainmask"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["brainmask"] ?? null)));
    }
    if ((params["atlases"] ?? null) !== null) {
        cargs.push(
            "-atlas",
            ...(params["atlases"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["atlas_followers"] ?? null) !== null) {
        cargs.push(
            "-atlas_followers",
            ...(params["atlas_followers"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["seg_followers"] ?? null) !== null) {
        cargs.push(
            "-seg_followers",
            ...(params["seg_followers"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["template_followers"] ?? null) !== null) {
        cargs.push(
            "-template_followers",
            ...(params["template_followers"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["dset_followers"] ?? null) !== null) {
        cargs.push(
            "-dset_followers",
            ...(params["dset_followers"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["roidset_followers"] ?? null) !== null) {
        cargs.push(
            "-roidset_followers",
            ...(params["roidset_followers"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["input_abbrev"] ?? null) !== null) {
        cargs.push(
            "-input_abbrev",
            (params["input_abbrev"] ?? null)
        );
    }
    if ((params["base_abbrev"] ?? null) !== null) {
        cargs.push(
            "-base_abbrev",
            (params["base_abbrev"] ?? null)
        );
    }
    if ((params["atlas_abbrevs"] ?? null) !== null) {
        cargs.push(
            "-atlas_abbrevs",
            ...(params["atlas_abbrevs"] ?? null)
        );
    }
    if ((params["template_abbrevs"] ?? null) !== null) {
        cargs.push(
            "-template_abbrevs",
            ...(params["template_abbrevs"] ?? null)
        );
    }
    if ((params["seg_abbrevs"] ?? null) !== null) {
        cargs.push(
            "-seg_abbrevs",
            ...(params["seg_abbrevs"] ?? null)
        );
    }
    if ((params["dset_abbrevs"] ?? null) !== null) {
        cargs.push(
            "-dset_abbrevs",
            ...(params["dset_abbrevs"] ?? null)
        );
    }
    if ((params["roidset_abbrevs"] ?? null) !== null) {
        cargs.push(
            "-roidset_abbrevs",
            ...(params["roidset_abbrevs"] ?? null)
        );
    }
    if ((params["align_centers_meth"] ?? null) !== null) {
        cargs.push(
            "-align_centers_meth",
            (params["align_centers_meth"] ?? null)
        );
    }
    if ((params["aff_move_opt"] ?? null) !== null) {
        cargs.push(
            "-aff_move_opt",
            (params["aff_move_opt"] ?? null)
        );
    }
    if ((params["cost"] ?? null) !== null) {
        cargs.push(
            "-cost",
            (params["cost"] ?? null)
        );
    }
    if ((params["maxlev"] ?? null) !== null) {
        cargs.push(
            "-maxlev",
            String((params["maxlev"] ?? null))
        );
    }
    if ((params["no_surfaces"] ?? null)) {
        cargs.push("-no_surfaces");
    }
    if ((params["feature_size"] ?? null) !== null) {
        cargs.push(
            "-feature_size",
            String((params["feature_size"] ?? null))
        );
    }
    if ((params["supersize"] ?? null)) {
        cargs.push("-supersize");
    }
    if ((params["init_scale"] ?? null) !== null) {
        cargs.push(
            "-init_scale",
            String((params["init_scale"] ?? null))
        );
    }
    if ((params["mode_smooth_size"] ?? null) !== null) {
        cargs.push(
            "-mode_smooth_size",
            String((params["mode_smooth_size"] ?? null))
        );
    }
    if ((params["mode_smooth_replacement_off"] ?? null)) {
        cargs.push("-mode_smooth_replacement_off");
    }
    if ((params["center_out"] ?? null) !== null) {
        cargs.push(
            "-center_out",
            (params["center_out"] ?? null)
        );
    }
    if ((params["align_type"] ?? null) !== null) {
        cargs.push(
            "-align_type",
            (params["align_type"] ?? null)
        );
    }
    if ((params["extra_qw_opts"] ?? null) !== null) {
        cargs.push(
            "-extra_qw_opts",
            (params["extra_qw_opts"] ?? null)
        );
    }
    if ((params["keep_temp"] ?? null)) {
        cargs.push("-keep_temp");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-ver");
    }
    if ((params["ok_to_exist"] ?? null)) {
        cargs.push("-ok_to_exist");
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__animal_warper_outputs(
    params: VAnimalWarperParameters,
    execution: Execution,
): VAnimalWarperOutputs {
    const ret: VAnimalWarperOutputs = {
        root: execution.outputFile("."),
        warp2std: execution.outputFile(["aw_results/", path.basename((params["input_file"] ?? null)), "_warp2std.nii.gz"].join('')),
        qc_image_initial: execution.outputFile(["aw_results/init_qc_00.input+base*.jpg"].join('')),
        qc_image_initial_sh: execution.outputFile(["aw_results/init_qc_01.input_sh+base*.jpg"].join('')),
        dset_followers_out: execution.outputFile(["aw_results/DSET_FOLL.nii.gz"].join('')),
        roidset_followers_out: execution.outputFile(["aw_results/ROIDSET_FOLL.nii.gz"].join('')),
        animal_outs_guide: execution.outputFile(["aw_results/animal_outs.txt"].join('')),
    };
    return ret;
}


/**
 * Align a subject structural dataset to a template and perform several post-alignment operations.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VAnimalWarperOutputs`).
 */
function v__animal_warper_execute(
    params: VAnimalWarperParameters,
    execution: Execution,
): VAnimalWarperOutputs {
    params = execution.params(params)
    const cargs = v__animal_warper_cargs(params, execution)
    const ret = v__animal_warper_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Align a subject structural dataset to a template and perform several post-alignment operations.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file input dataset to align to base template
 * @param base_template base dataset (template) to align with
 * @param output_dir output directory where all processing will be performed
 * @param brainmask provide a brainmask in the base template space
 * @param atlases one or more atlas datasets in the base volume space
 * @param atlas_followers one or more atlas datasets in the base volume space
 * @param seg_followers one or more segmentation datasets in the base volume space
 * @param template_followers one or more datasets in the template volume space
 * @param dset_followers one or more datasets in the input volume space
 * @param roidset_followers one or more (int-valued) datasets in the input volume space
 * @param input_abbrev specify abbreviation for input dataset
 * @param base_abbrev specify abbreviation for base dataset
 * @param atlas_abbrevs specify an abbreviation for each atlas follower dataset
 * @param template_abbrevs specify an abbreviation for each template follower dataset
 * @param seg_abbrevs specify an abbreviation for each segmentation follower dataset
 * @param dset_abbrevs specify an abbreviation for each dataset follower dataset
 * @param roidset_abbrevs specify an abbreviation for each ROI dataset follower dataset
 * @param align_centers_meth center alignment method to use
 * @param aff_move_opt alignment movement options for affine alignment step
 * @param cost cost function for affine and nonlinear alignment
 * @param maxlev Max level for nonlinear warping. Final patch size is determined based on this value.
 * @param no_surfaces Do not make surfaces for atlas regions in native space.
 * @param feature_size Set feature size for affine alignment (in mm)
 * @param supersize Allow up to 50% size difference between subject and template
 * @param init_scale Approximate length ratio of input to template for initial scaling
 * @param mode_smooth_size Modal smoothing kernel size in voxels
 * @param mode_smooth_replacement_off Turn off replacement in modal smoothing
 * @param center_out Center native-space output to native original space or template space center-shifted
 * @param align_type Specify level of alignment
 * @param extra_qw_opts Additional options to add to existing options for 3dQwarp
 * @param keep_temp Keep temporary files including awpy directory and other intermediate datasets
 * @param version Display the program version
 * @param ok_to_exist Reuse and do not overwrite existing datasets
 * @param echo Copy all commands being run into the terminal
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAnimalWarperOutputs`).
 */
function v__animal_warper(
    input_file: InputPathType,
    base_template: InputPathType,
    output_dir: string,
    brainmask: InputPathType | null = null,
    atlases: Array<InputPathType> | null = null,
    atlas_followers: Array<InputPathType> | null = null,
    seg_followers: Array<InputPathType> | null = null,
    template_followers: Array<InputPathType> | null = null,
    dset_followers: Array<InputPathType> | null = null,
    roidset_followers: Array<InputPathType> | null = null,
    input_abbrev: string | null = null,
    base_abbrev: string | null = null,
    atlas_abbrevs: Array<string> | null = null,
    template_abbrevs: Array<string> | null = null,
    seg_abbrevs: Array<string> | null = null,
    dset_abbrevs: Array<string> | null = null,
    roidset_abbrevs: Array<string> | null = null,
    align_centers_meth: string | null = null,
    aff_move_opt: string | null = null,
    cost: string | null = null,
    maxlev: number | null = null,
    no_surfaces: boolean = false,
    feature_size: number | null = null,
    supersize: boolean = false,
    init_scale: number | null = null,
    mode_smooth_size: number | null = null,
    mode_smooth_replacement_off: boolean = false,
    center_out: string | null = null,
    align_type: string | null = null,
    extra_qw_opts: string | null = null,
    keep_temp: boolean = false,
    version: boolean = false,
    ok_to_exist: boolean = false,
    echo: boolean = false,
    runner: Runner | null = null,
): VAnimalWarperOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ANIMAL_WARPER_METADATA);
    const params = v__animal_warper_params(input_file, base_template, output_dir, brainmask, atlases, atlas_followers, seg_followers, template_followers, dset_followers, roidset_followers, input_abbrev, base_abbrev, atlas_abbrevs, template_abbrevs, seg_abbrevs, dset_abbrevs, roidset_abbrevs, align_centers_meth, aff_move_opt, cost, maxlev, no_surfaces, feature_size, supersize, init_scale, mode_smooth_size, mode_smooth_replacement_off, center_out, align_type, extra_qw_opts, keep_temp, version, ok_to_exist, echo)
    return v__animal_warper_execute(params, execution);
}


export {
      VAnimalWarperOutputs,
      VAnimalWarperParameters,
      V__ANIMAL_WARPER_METADATA,
      v__animal_warper,
      v__animal_warper_cargs,
      v__animal_warper_execute,
      v__animal_warper_outputs,
      v__animal_warper_params,
};
