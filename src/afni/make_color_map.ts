// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_COLOR_MAP_METADATA: Metadata = {
    id: "b166ea43fbf7c4fe260b5ab62d4e4a681005db1c.boutiques",
    name: "MakeColorMap",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MakeColorMapParameters {
    "@type"?: "afni/MakeColorMap";
    "fiducials_ncol"?: InputPathType | null | undefined;
    "fiducials"?: InputPathType | null | undefined;
    "num_colors"?: number | null | undefined;
    "std_mapname"?: string | null | undefined;
    "palette_file"?: InputPathType | null | undefined;
    "cmap_name"?: string | null | undefined;
    "fscolut_labels"?: Array<number> | null | undefined;
    "fscolut_file"?: InputPathType | null | undefined;
    "afni_hex"?: string | null | undefined;
    "afni_hex_complete"?: string | null | undefined;
    "suma_colormap"?: string | null | undefined;
    "user_colut_file"?: InputPathType | null | undefined;
    "sdset"?: InputPathType | null | undefined;
    "sdset_prefix"?: string | null | undefined;
    "flipupdown": boolean;
    "skip_last": boolean;
    "show_fscolut": boolean;
    "help_flag": boolean;
    "help_full_flag": boolean;
    "flip_map_updside_down": boolean;
}
type MakeColorMapParametersTagged = Required<Pick<MakeColorMapParameters, '@type'>> & MakeColorMapParameters;


/**
 * Output object returned when calling `MakeColorMapParameters(...)`.
 *
 * @interface
 */
interface MakeColorMapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Prefix for individual color values in AFNI Hex format.
     */
    afni_hex_output_prefix: OutputPathType | null;
    /**
     * Example palette file output.
     */
    palette_file_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param fiducials_ncol Fiducial colors and their indices in the color map are listed in file Fiducials_Ncol.
 * @param fiducials Fiducial colors are listed in an ascii file Fiducials.
 * @param num_colors Total number of colors in the color map.
 * @param std_mapname Returns one of SUMA's standard colormaps.
 * @param palette_file Specify the palette file for colormap.
 * @param cmap_name Specify the colormap name.
 * @param fscolut_labels Get AFNI/SUMA colormaps of FreeSurfer colors indexed between lbl0 and lbl1.
 * @param fscolut_file Use color LUT file FS_COL_LUT.
 * @param afni_hex Afni Hex format. Use this option if you want a color map formatted to fit in AFNI's .afnirc file
 * @param afni_hex_complete Afni Hex format, ready to go into pbardefs.h.
 * @param suma_colormap Write colormap in SUMA's format.
 * @param user_colut_file Provide a user's own color lookup file.
 * @param sdset Add colormap to surface-based dataset DSET, making it a labeled dataset.
 * @param sdset_prefix Prefix of dset for writing labeled version of DSET.
 * @param flipupdown Flip the map upside down.
 * @param skip_last If used, the last color in the Fiducial list is omitted.
 * @param show_fscolut Show all of the FreeSurfer LUT.
 * @param help_flag Displays the help message.
 * @param help_full_flag Displays the help message.
 * @param flip_map_updside_down Flip the map upside down.
 *
 * @returns Parameter dictionary
 */
function make_color_map_params(
    fiducials_ncol: InputPathType | null = null,
    fiducials: InputPathType | null = null,
    num_colors: number | null = null,
    std_mapname: string | null = null,
    palette_file: InputPathType | null = null,
    cmap_name: string | null = null,
    fscolut_labels: Array<number> | null = null,
    fscolut_file: InputPathType | null = null,
    afni_hex: string | null = null,
    afni_hex_complete: string | null = null,
    suma_colormap: string | null = null,
    user_colut_file: InputPathType | null = null,
    sdset: InputPathType | null = null,
    sdset_prefix: string | null = null,
    flipupdown: boolean = false,
    skip_last: boolean = false,
    show_fscolut: boolean = false,
    help_flag: boolean = false,
    help_full_flag: boolean = false,
    flip_map_updside_down: boolean = false,
): MakeColorMapParametersTagged {
    const params = {
        "@type": "afni/MakeColorMap" as const,
        "flipupdown": flipupdown,
        "skip_last": skip_last,
        "show_fscolut": show_fscolut,
        "help_flag": help_flag,
        "help_full_flag": help_full_flag,
        "flip_map_updside_down": flip_map_updside_down,
    };
    if (fiducials_ncol !== null) {
        params["fiducials_ncol"] = fiducials_ncol;
    }
    if (fiducials !== null) {
        params["fiducials"] = fiducials;
    }
    if (num_colors !== null) {
        params["num_colors"] = num_colors;
    }
    if (std_mapname !== null) {
        params["std_mapname"] = std_mapname;
    }
    if (palette_file !== null) {
        params["palette_file"] = palette_file;
    }
    if (cmap_name !== null) {
        params["cmap_name"] = cmap_name;
    }
    if (fscolut_labels !== null) {
        params["fscolut_labels"] = fscolut_labels;
    }
    if (fscolut_file !== null) {
        params["fscolut_file"] = fscolut_file;
    }
    if (afni_hex !== null) {
        params["afni_hex"] = afni_hex;
    }
    if (afni_hex_complete !== null) {
        params["afni_hex_complete"] = afni_hex_complete;
    }
    if (suma_colormap !== null) {
        params["suma_colormap"] = suma_colormap;
    }
    if (user_colut_file !== null) {
        params["user_colut_file"] = user_colut_file;
    }
    if (sdset !== null) {
        params["sdset"] = sdset;
    }
    if (sdset_prefix !== null) {
        params["sdset_prefix"] = sdset_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_color_map_cargs(
    params: MakeColorMapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("MakeColorMap");
    if ((params["fiducials_ncol"] ?? null) !== null) {
        cargs.push(
            "-fn",
            execution.inputFile((params["fiducials_ncol"] ?? null))
        );
    }
    if ((params["fiducials"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["fiducials"] ?? null))
        );
    }
    if ((params["num_colors"] ?? null) !== null) {
        cargs.push(
            "-nc",
            String((params["num_colors"] ?? null))
        );
    }
    if ((params["std_mapname"] ?? null) !== null) {
        cargs.push(
            "-std",
            (params["std_mapname"] ?? null)
        );
    }
    if ((params["palette_file"] ?? null) !== null) {
        cargs.push(
            "-cmapdb",
            execution.inputFile((params["palette_file"] ?? null))
        );
    }
    if ((params["cmap_name"] ?? null) !== null) {
        cargs.push(
            "-cmap",
            (params["cmap_name"] ?? null)
        );
    }
    if ((params["fscolut_labels"] ?? null) !== null) {
        cargs.push(
            "-fscolut",
            ...(params["fscolut_labels"] ?? null).map(String)
        );
    }
    if ((params["fscolut_file"] ?? null) !== null) {
        cargs.push(
            "-fscolutfile",
            execution.inputFile((params["fscolut_file"] ?? null))
        );
    }
    if ((params["afni_hex"] ?? null) !== null) {
        cargs.push(
            "-ah",
            (params["afni_hex"] ?? null)
        );
    }
    if ((params["afni_hex_complete"] ?? null) !== null) {
        cargs.push(
            "-ahc",
            (params["afni_hex_complete"] ?? null)
        );
    }
    if ((params["suma_colormap"] ?? null) !== null) {
        cargs.push(
            "-suma_cmap",
            (params["suma_colormap"] ?? null)
        );
    }
    if ((params["user_colut_file"] ?? null) !== null) {
        cargs.push(
            "-usercolutfile",
            execution.inputFile((params["user_colut_file"] ?? null))
        );
    }
    if ((params["sdset"] ?? null) !== null) {
        cargs.push(
            "-sdset",
            execution.inputFile((params["sdset"] ?? null))
        );
    }
    if ((params["sdset_prefix"] ?? null) !== null) {
        cargs.push(
            "-sdset_prefix",
            (params["sdset_prefix"] ?? null)
        );
    }
    if ((params["flipupdown"] ?? false)) {
        cargs.push("-flipud");
    }
    if ((params["skip_last"] ?? false)) {
        cargs.push("-sl");
    }
    if ((params["show_fscolut"] ?? false)) {
        cargs.push("-show_fscolut");
    }
    if ((params["help_flag"] ?? false)) {
        cargs.push("-h");
    }
    if ((params["help_full_flag"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["flip_map_updside_down"] ?? false)) {
        cargs.push("-flipud");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_color_map_outputs(
    params: MakeColorMapParameters,
    execution: Execution,
): MakeColorMapOutputs {
    const ret: MakeColorMapOutputs = {
        root: execution.outputFile("."),
        afni_hex_output_prefix: ((params["afni_hex"] ?? null) !== null) ? execution.outputFile([(params["afni_hex"] ?? null), "_01"].join('')) : null,
        palette_file_output: execution.outputFile(["TestPalette.pal"].join('')),
    };
    return ret;
}


/**
 * MakeColorMap
 *
 * Utility for creating and modifying colormaps with various formats and fiducial points.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeColorMapOutputs`).
 */
function make_color_map_execute(
    params: MakeColorMapParameters,
    runner: Runner | null = null,
): MakeColorMapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_COLOR_MAP_METADATA);
    params = execution.params(params)
    const cargs = make_color_map_cargs(params, execution)
    const ret = make_color_map_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * MakeColorMap
 *
 * Utility for creating and modifying colormaps with various formats and fiducial points.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param fiducials_ncol Fiducial colors and their indices in the color map are listed in file Fiducials_Ncol.
 * @param fiducials Fiducial colors are listed in an ascii file Fiducials.
 * @param num_colors Total number of colors in the color map.
 * @param std_mapname Returns one of SUMA's standard colormaps.
 * @param palette_file Specify the palette file for colormap.
 * @param cmap_name Specify the colormap name.
 * @param fscolut_labels Get AFNI/SUMA colormaps of FreeSurfer colors indexed between lbl0 and lbl1.
 * @param fscolut_file Use color LUT file FS_COL_LUT.
 * @param afni_hex Afni Hex format. Use this option if you want a color map formatted to fit in AFNI's .afnirc file
 * @param afni_hex_complete Afni Hex format, ready to go into pbardefs.h.
 * @param suma_colormap Write colormap in SUMA's format.
 * @param user_colut_file Provide a user's own color lookup file.
 * @param sdset Add colormap to surface-based dataset DSET, making it a labeled dataset.
 * @param sdset_prefix Prefix of dset for writing labeled version of DSET.
 * @param flipupdown Flip the map upside down.
 * @param skip_last If used, the last color in the Fiducial list is omitted.
 * @param show_fscolut Show all of the FreeSurfer LUT.
 * @param help_flag Displays the help message.
 * @param help_full_flag Displays the help message.
 * @param flip_map_updside_down Flip the map upside down.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeColorMapOutputs`).
 */
function make_color_map(
    fiducials_ncol: InputPathType | null = null,
    fiducials: InputPathType | null = null,
    num_colors: number | null = null,
    std_mapname: string | null = null,
    palette_file: InputPathType | null = null,
    cmap_name: string | null = null,
    fscolut_labels: Array<number> | null = null,
    fscolut_file: InputPathType | null = null,
    afni_hex: string | null = null,
    afni_hex_complete: string | null = null,
    suma_colormap: string | null = null,
    user_colut_file: InputPathType | null = null,
    sdset: InputPathType | null = null,
    sdset_prefix: string | null = null,
    flipupdown: boolean = false,
    skip_last: boolean = false,
    show_fscolut: boolean = false,
    help_flag: boolean = false,
    help_full_flag: boolean = false,
    flip_map_updside_down: boolean = false,
    runner: Runner | null = null,
): MakeColorMapOutputs {
    const params = make_color_map_params(fiducials_ncol, fiducials, num_colors, std_mapname, palette_file, cmap_name, fscolut_labels, fscolut_file, afni_hex, afni_hex_complete, suma_colormap, user_colut_file, sdset, sdset_prefix, flipupdown, skip_last, show_fscolut, help_flag, help_full_flag, flip_map_updside_down)
    return make_color_map_execute(params, runner);
}


export {
      MAKE_COLOR_MAP_METADATA,
      MakeColorMapOutputs,
      make_color_map,
      make_color_map_execute,
      make_color_map_params,
};
