// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POSSUM_SUM_METADATA: Metadata = {
    id: "58764eefbbae527d5f0a0780d28019db82e2204f.boutiques",
    name: "possum_sum",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PossumSumParameters {
    "__STYXTYPE__": "possum_sum";
    "input_signal": InputPathType;
    "output_signal": string;
    "num_processors"?: number | null | undefined;
    "verbose_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "possum_sum": possum_sum_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "possum_sum": possum_sum_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `possum_sum(...)`.
 *
 * @interface
 */
interface PossumSumOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Sum of all input signals from processors
     */
    output_file: OutputPathType;
}


function possum_sum_params(
    input_signal: InputPathType,
    output_signal: string,
    num_processors: number | null = null,
    verbose_flag: boolean = false,
): PossumSumParameters {
    /**
     * Build parameters.
    
     * @param input_signal Input signal for one processor (possum output matrix)
     * @param output_signal Output signal: sum of all the processors (possum matrix form)
     * @param num_processors Number of processors
     * @param verbose_flag Switch on diagnostic messages
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "possum_sum" as const,
        "input_signal": input_signal,
        "output_signal": output_signal,
        "verbose_flag": verbose_flag,
    };
    if (num_processors !== null) {
        params["num_processors"] = num_processors;
    }
    return params;
}


function possum_sum_cargs(
    params: PossumSumParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("possum_sum");
    cargs.push(
        "-i",
        execution.inputFile((params["input_signal"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_signal"] ?? null)
    );
    if ((params["num_processors"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["num_processors"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


function possum_sum_outputs(
    params: PossumSumParameters,
    execution: Execution,
): PossumSumOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: PossumSumOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_signal"] ?? null)].join('')),
    };
    return ret;
}


function possum_sum_execute(
    params: PossumSumParameters,
    execution: Execution,
): PossumSumOutputs {
    /**
     * Sum of output signals from multiple possum processors.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `PossumSumOutputs`).
     */
    params = execution.params(params)
    const cargs = possum_sum_cargs(params, execution)
    const ret = possum_sum_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function possum_sum(
    input_signal: InputPathType,
    output_signal: string,
    num_processors: number | null = null,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): PossumSumOutputs {
    /**
     * Sum of output signals from multiple possum processors.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_signal Input signal for one processor (possum output matrix)
     * @param output_signal Output signal: sum of all the processors (possum matrix form)
     * @param num_processors Number of processors
     * @param verbose_flag Switch on diagnostic messages
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `PossumSumOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POSSUM_SUM_METADATA);
    const params = possum_sum_params(input_signal, output_signal, num_processors, verbose_flag)
    return possum_sum_execute(params, execution);
}


export {
      POSSUM_SUM_METADATA,
      PossumSumOutputs,
      PossumSumParameters,
      possum_sum,
      possum_sum_params,
};
