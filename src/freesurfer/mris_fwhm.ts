// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_FWHM_METADATA: Metadata = {
    id: "38f19d2c0adc1d4c124b77ae43af464be6971c32.boutiques",
    name: "mris_fwhm",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisFwhmParameters {
    "@type": "freesurfer.mris_fwhm";
    "input_file": InputPathType;
    "subject": string;
    "hemi": string;
    "surf"?: string | null | undefined;
    "label_file"?: InputPathType | null | undefined;
    "cortex_flag": boolean;
    "mask_file"?: InputPathType | null | undefined;
    "x_matrix"?: InputPathType | null | undefined;
    "detrend_order"?: number | null | undefined;
    "smooth_only_flag": boolean;
    "no_detrend_flag": boolean;
    "sqr_flag": boolean;
    "sum_file"?: string | null | undefined;
    "dat_file"?: string | null | undefined;
    "ar1dat_file"?: string | null | undefined;
    "ar1vol"?: string | null | undefined;
    "fwhmmap"?: string | null | undefined;
    "prune_flag": boolean;
    "no_prune_flag": boolean;
    "out_mask"?: string | null | undefined;
    "varnorm_flag": boolean;
    "fwhm"?: number | null | undefined;
    "niters_only"?: string | null | undefined;
    "output_file": string;
    "sd"?: string | null | undefined;
    "synth_flag": boolean;
    "synth_frames"?: number | null | undefined;
    "threads"?: number | null | undefined;
    "debug_flag": boolean;
    "checkopts_flag": boolean;
    "version_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_fwhm": mris_fwhm_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_fwhm(...)`.
 *
 * @interface
 */
interface MrisFwhmOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input data file.
 * @param subject Subject whose surface the input is defined on.
 * @param hemi Hemifield that the input is defined on. Legal values are lh and rh.
 * @param output_file Output file to save the processed data.
 * @param surf Surface name to compute AR1 on. Default is white.
 * @param label_file Label file to be used as a mask.
 * @param cortex_flag Use hemi.cortex.label as a mask.
 * @param mask_file Mask file. Compute AR1 only over voxels in the given mask.
 * @param x_matrix Detrend data with the matrix in x.mat.
 * @param detrend_order Order of polynomial detrending.
 * @param smooth_only_flag Only smooth the data, implies --no-detrend.
 * @param no_detrend_flag Turn off polynomial detrending.
 * @param sqr_flag Compute square of input before smoothing.
 * @param sum_file Prints ascii summary to sumfile.
 * @param dat_file File for FWHM data.
 * @param ar1dat_file File containing ar1mean and ar1std.
 * @param ar1vol Save spatial AR1 as an overlay.
 * @param fwhmmap Save vertex-wise spatial FWHM as an overlay.
 * @param prune_flag Remove any voxel that is zero in any subject (after any inversion).
 * @param no_prune_flag Do not prune (default).
 * @param out_mask File to save the final mask.
 * @param varnorm_flag Normalize the variance across space within any mask.
 * @param fwhm Smooth input by the specified FWHM in mm.
 * @param niters_only File that reports the number of iterations needed to achieve the specified FWHM.
 * @param sd Subjects directory.
 * @param synth_flag Synthesize input with white gaussian noise.
 * @param synth_frames Number of frames for synthesized input.
 * @param threads Number of threads to use.
 * @param debug_flag Turn on debugging.
 * @param checkopts_flag Don't run anything, just check options and exit.
 * @param version_flag Print out version and exit.
 *
 * @returns Parameter dictionary
 */
function mris_fwhm_params(
    input_file: InputPathType,
    subject: string,
    hemi: string,
    output_file: string,
    surf: string | null = null,
    label_file: InputPathType | null = null,
    cortex_flag: boolean = false,
    mask_file: InputPathType | null = null,
    x_matrix: InputPathType | null = null,
    detrend_order: number | null = null,
    smooth_only_flag: boolean = false,
    no_detrend_flag: boolean = false,
    sqr_flag: boolean = false,
    sum_file: string | null = null,
    dat_file: string | null = null,
    ar1dat_file: string | null = null,
    ar1vol: string | null = null,
    fwhmmap: string | null = null,
    prune_flag: boolean = false,
    no_prune_flag: boolean = false,
    out_mask: string | null = null,
    varnorm_flag: boolean = false,
    fwhm: number | null = null,
    niters_only: string | null = null,
    sd: string | null = null,
    synth_flag: boolean = false,
    synth_frames: number | null = null,
    threads: number | null = null,
    debug_flag: boolean = false,
    checkopts_flag: boolean = false,
    version_flag: boolean = false,
): MrisFwhmParameters {
    const params = {
        "@type": "freesurfer.mris_fwhm" as const,
        "input_file": input_file,
        "subject": subject,
        "hemi": hemi,
        "cortex_flag": cortex_flag,
        "smooth_only_flag": smooth_only_flag,
        "no_detrend_flag": no_detrend_flag,
        "sqr_flag": sqr_flag,
        "prune_flag": prune_flag,
        "no_prune_flag": no_prune_flag,
        "varnorm_flag": varnorm_flag,
        "output_file": output_file,
        "synth_flag": synth_flag,
        "debug_flag": debug_flag,
        "checkopts_flag": checkopts_flag,
        "version_flag": version_flag,
    };
    if (surf !== null) {
        params["surf"] = surf;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    if (x_matrix !== null) {
        params["x_matrix"] = x_matrix;
    }
    if (detrend_order !== null) {
        params["detrend_order"] = detrend_order;
    }
    if (sum_file !== null) {
        params["sum_file"] = sum_file;
    }
    if (dat_file !== null) {
        params["dat_file"] = dat_file;
    }
    if (ar1dat_file !== null) {
        params["ar1dat_file"] = ar1dat_file;
    }
    if (ar1vol !== null) {
        params["ar1vol"] = ar1vol;
    }
    if (fwhmmap !== null) {
        params["fwhmmap"] = fwhmmap;
    }
    if (out_mask !== null) {
        params["out_mask"] = out_mask;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (niters_only !== null) {
        params["niters_only"] = niters_only;
    }
    if (sd !== null) {
        params["sd"] = sd;
    }
    if (synth_frames !== null) {
        params["synth_frames"] = synth_frames;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_fwhm_cargs(
    params: MrisFwhmParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_fwhm");
    cargs.push(
        "--i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "--subject",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemi"] ?? null)
    );
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf"] ?? null)
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "--label",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["cortex_flag"] ?? null)) {
        cargs.push("--cortex");
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["x_matrix"] ?? null) !== null) {
        cargs.push(
            "--X",
            execution.inputFile((params["x_matrix"] ?? null))
        );
    }
    if ((params["detrend_order"] ?? null) !== null) {
        cargs.push(
            "--detrend",
            String((params["detrend_order"] ?? null))
        );
    }
    if ((params["smooth_only_flag"] ?? null)) {
        cargs.push("--smooth-only");
    }
    if ((params["no_detrend_flag"] ?? null)) {
        cargs.push("--no-detrend");
    }
    if ((params["sqr_flag"] ?? null)) {
        cargs.push("--sqr");
    }
    if ((params["sum_file"] ?? null) !== null) {
        cargs.push(
            "--sum",
            (params["sum_file"] ?? null)
        );
    }
    if ((params["dat_file"] ?? null) !== null) {
        cargs.push(
            "--dat",
            (params["dat_file"] ?? null)
        );
    }
    if ((params["ar1dat_file"] ?? null) !== null) {
        cargs.push(
            "--ar1dat",
            (params["ar1dat_file"] ?? null)
        );
    }
    if ((params["ar1vol"] ?? null) !== null) {
        cargs.push(
            "--ar1",
            (params["ar1vol"] ?? null)
        );
    }
    if ((params["fwhmmap"] ?? null) !== null) {
        cargs.push(
            "--fwhm-map",
            (params["fwhmmap"] ?? null)
        );
    }
    if ((params["prune_flag"] ?? null)) {
        cargs.push("--prune");
    }
    if ((params["no_prune_flag"] ?? null)) {
        cargs.push("--no-prune");
    }
    if ((params["out_mask"] ?? null) !== null) {
        cargs.push(
            "--out-mask",
            (params["out_mask"] ?? null)
        );
    }
    if ((params["varnorm_flag"] ?? null)) {
        cargs.push("--varnorm");
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["niters_only"] ?? null) !== null) {
        cargs.push(
            "--niters-only",
            (params["niters_only"] ?? null)
        );
    }
    cargs.push(
        "--o",
        (params["output_file"] ?? null)
    );
    if ((params["sd"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["sd"] ?? null)
        );
    }
    if ((params["synth_flag"] ?? null)) {
        cargs.push("--synth");
    }
    if ((params["synth_frames"] ?? null) !== null) {
        cargs.push(
            "--synth-frames",
            String((params["synth_frames"] ?? null))
        );
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts_flag"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_fwhm_outputs(
    params: MrisFwhmParameters,
    execution: Execution,
): MrisFwhmOutputs {
    const ret: MrisFwhmOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Smooths surface data and/or estimates FWHM.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisFwhmOutputs`).
 */
function mris_fwhm_execute(
    params: MrisFwhmParameters,
    runner: Runner | null = null,
): MrisFwhmOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_FWHM_METADATA);
    params = execution.params(params)
    const cargs = mris_fwhm_cargs(params, execution)
    const ret = mris_fwhm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Smooths surface data and/or estimates FWHM.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input data file.
 * @param subject Subject whose surface the input is defined on.
 * @param hemi Hemifield that the input is defined on. Legal values are lh and rh.
 * @param output_file Output file to save the processed data.
 * @param surf Surface name to compute AR1 on. Default is white.
 * @param label_file Label file to be used as a mask.
 * @param cortex_flag Use hemi.cortex.label as a mask.
 * @param mask_file Mask file. Compute AR1 only over voxels in the given mask.
 * @param x_matrix Detrend data with the matrix in x.mat.
 * @param detrend_order Order of polynomial detrending.
 * @param smooth_only_flag Only smooth the data, implies --no-detrend.
 * @param no_detrend_flag Turn off polynomial detrending.
 * @param sqr_flag Compute square of input before smoothing.
 * @param sum_file Prints ascii summary to sumfile.
 * @param dat_file File for FWHM data.
 * @param ar1dat_file File containing ar1mean and ar1std.
 * @param ar1vol Save spatial AR1 as an overlay.
 * @param fwhmmap Save vertex-wise spatial FWHM as an overlay.
 * @param prune_flag Remove any voxel that is zero in any subject (after any inversion).
 * @param no_prune_flag Do not prune (default).
 * @param out_mask File to save the final mask.
 * @param varnorm_flag Normalize the variance across space within any mask.
 * @param fwhm Smooth input by the specified FWHM in mm.
 * @param niters_only File that reports the number of iterations needed to achieve the specified FWHM.
 * @param sd Subjects directory.
 * @param synth_flag Synthesize input with white gaussian noise.
 * @param synth_frames Number of frames for synthesized input.
 * @param threads Number of threads to use.
 * @param debug_flag Turn on debugging.
 * @param checkopts_flag Don't run anything, just check options and exit.
 * @param version_flag Print out version and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisFwhmOutputs`).
 */
function mris_fwhm(
    input_file: InputPathType,
    subject: string,
    hemi: string,
    output_file: string,
    surf: string | null = null,
    label_file: InputPathType | null = null,
    cortex_flag: boolean = false,
    mask_file: InputPathType | null = null,
    x_matrix: InputPathType | null = null,
    detrend_order: number | null = null,
    smooth_only_flag: boolean = false,
    no_detrend_flag: boolean = false,
    sqr_flag: boolean = false,
    sum_file: string | null = null,
    dat_file: string | null = null,
    ar1dat_file: string | null = null,
    ar1vol: string | null = null,
    fwhmmap: string | null = null,
    prune_flag: boolean = false,
    no_prune_flag: boolean = false,
    out_mask: string | null = null,
    varnorm_flag: boolean = false,
    fwhm: number | null = null,
    niters_only: string | null = null,
    sd: string | null = null,
    synth_flag: boolean = false,
    synth_frames: number | null = null,
    threads: number | null = null,
    debug_flag: boolean = false,
    checkopts_flag: boolean = false,
    version_flag: boolean = false,
    runner: Runner | null = null,
): MrisFwhmOutputs {
    const params = mris_fwhm_params(input_file, subject, hemi, output_file, surf, label_file, cortex_flag, mask_file, x_matrix, detrend_order, smooth_only_flag, no_detrend_flag, sqr_flag, sum_file, dat_file, ar1dat_file, ar1vol, fwhmmap, prune_flag, no_prune_flag, out_mask, varnorm_flag, fwhm, niters_only, sd, synth_flag, synth_frames, threads, debug_flag, checkopts_flag, version_flag)
    return mris_fwhm_execute(params, runner);
}


export {
      MRIS_FWHM_METADATA,
      MrisFwhmOutputs,
      MrisFwhmParameters,
      mris_fwhm,
      mris_fwhm_execute,
      mris_fwhm_params,
};
