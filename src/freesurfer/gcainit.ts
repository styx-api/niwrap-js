// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GCAINIT_METADATA: Metadata = {
    id: "00dfdd96c6b86f2b1c5b47fc4b41253a5bcd0e9f.boutiques",
    name: "gcainit",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GcainitParameters {
    "@type": "freesurfer.gcainit";
    "gcadir": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.gcainit": gcainit_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gcainit(...)`.
 *
 * @interface
 */
interface GcainitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param gcadir Output directory of gcaprep
 *
 * @returns Parameter dictionary
 */
function gcainit_params(
    gcadir: string,
): GcainitParameters {
    const params = {
        "@type": "freesurfer.gcainit" as const,
        "gcadir": gcadir,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gcainit_cargs(
    params: GcainitParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gcainit");
    cargs.push(
        "--g",
        (params["gcadir"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gcainit_outputs(
    params: GcainitParameters,
    execution: Execution,
): GcainitOutputs {
    const ret: GcainitOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Initializes the GCA for brain processing tasks.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `GcainitOutputs`).
 */
function gcainit_execute(
    params: GcainitParameters,
    execution: Execution,
): GcainitOutputs {
    params = execution.params(params)
    const cargs = gcainit_cargs(params, execution)
    const ret = gcainit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Initializes the GCA for brain processing tasks.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param gcadir Output directory of gcaprep
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GcainitOutputs`).
 */
function gcainit(
    gcadir: string,
    runner: Runner | null = null,
): GcainitOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GCAINIT_METADATA);
    const params = gcainit_params(gcadir)
    return gcainit_execute(params, execution);
}


export {
      GCAINIT_METADATA,
      GcainitOutputs,
      GcainitParameters,
      gcainit,
      gcainit_cargs,
      gcainit_execute,
      gcainit_outputs,
      gcainit_params,
};
