// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_RANDOM_TIMING_PY_METADATA: Metadata = {
    id: "4493459e01494c409f42a0f194bf073010dca9b2.boutiques",
    name: "make_random_timing.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MakeRandomTimingPyParameters {
    "@type": "afni.make_random_timing.py";
    "num_runs": number;
    "run_time": Array<number>;
    "num_stim": number;
    "num_reps": Array<number>;
    "prefix": string;
    "stim_dur"?: Array<number> | null | undefined;
    "across_runs": boolean;
    "max_consec"?: Array<number> | null | undefined;
    "max_rest"?: number | null | undefined;
    "min_rest"?: number | null | undefined;
    "not_first"?: Array<string> | null | undefined;
    "not_last"?: Array<string> | null | undefined;
    "offset"?: number | null | undefined;
    "ordered_stimuli"?: Array<string> | null | undefined;
    "pre_stim_rest"?: number | null | undefined;
    "post_stim_rest"?: number | null | undefined;
    "save_3dd_cmd"?: string | null | undefined;
    "seed"?: number | null | undefined;
    "stim_labels"?: Array<string> | null | undefined;
    "t_digits"?: number | null | undefined;
    "t_gran"?: number | null | undefined;
    "tr"?: number | null | undefined;
    "tr_locked": boolean;
    "verb"?: number | null | undefined;
    "show_timing_stats": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.make_random_timing.py": make_random_timing_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.make_random_timing.py": make_random_timing_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `make_random_timing_py(...)`.
 *
 * @interface
 */
interface MakeRandomTimingPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Stimulus timing output file
     */
    stim_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param num_runs Set the number of runs.
 * @param run_time Set the total time per run (in seconds).
 * @param num_stim Set the number of stimulus classes.
 * @param num_reps Set the number of repetitions per class (or across runs).
 * @param prefix Set the prefix for output filenames.
 * @param stim_dur Set the duration for a single stimulus (in seconds).
 * @param across_runs Distribute stimuli across all runs at once.
 * @param max_consec Specify maximum consecutive stimuli per class.
 * @param max_rest Specify maximum rest between stimuli.
 * @param min_rest Specify extra rest after each stimulus.
 * @param not_first Specify classes that should not start a run.
 * @param not_last Specify classes that should not end a run.
 * @param offset Specify an offset to add to every stim time.
 * @param ordered_stimuli Specify a partial ordering of stimuli.
 * @param pre_stim_rest Specify minimum rest period to start each run.
 * @param post_stim_rest Specify minimum rest period to end each run.
 * @param save_3dd_cmd Save a 3dDeconvolve -nodata example.
 * @param seed Specify a seed for random number generation.
 * @param stim_labels Specify labels for the stimulus classes.
 * @param t_digits Set the number of decimal places for times.
 * @param t_gran Set the time granularity.
 * @param tr Set the scanner TR.
 * @param tr_locked Make stimuli timing locked to the accompanying TR.
 * @param verb Set the verbose level.
 * @param show_timing_stats Show statistics from the timing.
 *
 * @returns Parameter dictionary
 */
function make_random_timing_py_params(
    num_runs: number,
    run_time: Array<number>,
    num_stim: number,
    num_reps: Array<number>,
    prefix: string,
    stim_dur: Array<number> | null = null,
    across_runs: boolean = false,
    max_consec: Array<number> | null = null,
    max_rest: number | null = null,
    min_rest: number | null = null,
    not_first: Array<string> | null = null,
    not_last: Array<string> | null = null,
    offset: number | null = null,
    ordered_stimuli: Array<string> | null = null,
    pre_stim_rest: number | null = null,
    post_stim_rest: number | null = null,
    save_3dd_cmd: string | null = null,
    seed: number | null = null,
    stim_labels: Array<string> | null = null,
    t_digits: number | null = null,
    t_gran: number | null = null,
    tr: number | null = null,
    tr_locked: boolean = false,
    verb: number | null = null,
    show_timing_stats: boolean = false,
): MakeRandomTimingPyParameters {
    const params = {
        "@type": "afni.make_random_timing.py" as const,
        "num_runs": num_runs,
        "run_time": run_time,
        "num_stim": num_stim,
        "num_reps": num_reps,
        "prefix": prefix,
        "across_runs": across_runs,
        "tr_locked": tr_locked,
        "show_timing_stats": show_timing_stats,
    };
    if (stim_dur !== null) {
        params["stim_dur"] = stim_dur;
    }
    if (max_consec !== null) {
        params["max_consec"] = max_consec;
    }
    if (max_rest !== null) {
        params["max_rest"] = max_rest;
    }
    if (min_rest !== null) {
        params["min_rest"] = min_rest;
    }
    if (not_first !== null) {
        params["not_first"] = not_first;
    }
    if (not_last !== null) {
        params["not_last"] = not_last;
    }
    if (offset !== null) {
        params["offset"] = offset;
    }
    if (ordered_stimuli !== null) {
        params["ordered_stimuli"] = ordered_stimuli;
    }
    if (pre_stim_rest !== null) {
        params["pre_stim_rest"] = pre_stim_rest;
    }
    if (post_stim_rest !== null) {
        params["post_stim_rest"] = post_stim_rest;
    }
    if (save_3dd_cmd !== null) {
        params["save_3dd_cmd"] = save_3dd_cmd;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (stim_labels !== null) {
        params["stim_labels"] = stim_labels;
    }
    if (t_digits !== null) {
        params["t_digits"] = t_digits;
    }
    if (t_gran !== null) {
        params["t_gran"] = t_gran;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (verb !== null) {
        params["verb"] = verb;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_random_timing_py_cargs(
    params: MakeRandomTimingPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make_random_timing.py");
    cargs.push(
        "-num_runs",
        String((params["num_runs"] ?? null))
    );
    cargs.push(
        "-run_time",
        ...(params["run_time"] ?? null).map(String)
    );
    cargs.push(
        "-num_stim",
        String((params["num_stim"] ?? null))
    );
    cargs.push(
        "-num_reps",
        ...(params["num_reps"] ?? null).map(String)
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["stim_dur"] ?? null) !== null) {
        cargs.push(
            "-stim_dur",
            ...(params["stim_dur"] ?? null).map(String)
        );
    }
    if ((params["across_runs"] ?? null)) {
        cargs.push("-across_runs");
    }
    if ((params["max_consec"] ?? null) !== null) {
        cargs.push(
            "-max_consec",
            ...(params["max_consec"] ?? null).map(String)
        );
    }
    if ((params["max_rest"] ?? null) !== null) {
        cargs.push(
            "-max_rest",
            String((params["max_rest"] ?? null))
        );
    }
    if ((params["min_rest"] ?? null) !== null) {
        cargs.push(
            "-min_rest",
            String((params["min_rest"] ?? null))
        );
    }
    if ((params["not_first"] ?? null) !== null) {
        cargs.push(
            "-not_first",
            ...(params["not_first"] ?? null)
        );
    }
    if ((params["not_last"] ?? null) !== null) {
        cargs.push(
            "-not_last",
            ...(params["not_last"] ?? null)
        );
    }
    if ((params["offset"] ?? null) !== null) {
        cargs.push(
            "-offset",
            String((params["offset"] ?? null))
        );
    }
    if ((params["ordered_stimuli"] ?? null) !== null) {
        cargs.push(
            "-ordered_stimuli",
            ...(params["ordered_stimuli"] ?? null)
        );
    }
    if ((params["pre_stim_rest"] ?? null) !== null) {
        cargs.push(
            "-pre_stim_rest",
            String((params["pre_stim_rest"] ?? null))
        );
    }
    if ((params["post_stim_rest"] ?? null) !== null) {
        cargs.push(
            "-post_stim_rest",
            String((params["post_stim_rest"] ?? null))
        );
    }
    if ((params["save_3dd_cmd"] ?? null) !== null) {
        cargs.push(
            "-save_3dd_cmd",
            (params["save_3dd_cmd"] ?? null)
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "-seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["stim_labels"] ?? null) !== null) {
        cargs.push(
            "-stim_labels",
            ...(params["stim_labels"] ?? null)
        );
    }
    if ((params["t_digits"] ?? null) !== null) {
        cargs.push(
            "-t_digits",
            String((params["t_digits"] ?? null))
        );
    }
    if ((params["t_gran"] ?? null) !== null) {
        cargs.push(
            "-t_gran",
            String((params["t_gran"] ?? null))
        );
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-tr",
            String((params["tr"] ?? null))
        );
    }
    if ((params["tr_locked"] ?? null)) {
        cargs.push("-tr_locked");
    }
    if ((params["verb"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb"] ?? null))
        );
    }
    if ((params["show_timing_stats"] ?? null)) {
        cargs.push("-show_timing_stats");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_random_timing_py_outputs(
    params: MakeRandomTimingPyParameters,
    execution: Execution,
): MakeRandomTimingPyOutputs {
    const ret: MakeRandomTimingPyOutputs = {
        root: execution.outputFile("."),
        stim_output: execution.outputFile([(params["prefix"] ?? null), "_*.1D"].join('')),
    };
    return ret;
}


/**
 * make_random_timing.py
 *
 * Create random stimulus timing files for use with AFNI 3dDeconvolve.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeRandomTimingPyOutputs`).
 */
function make_random_timing_py_execute(
    params: MakeRandomTimingPyParameters,
    runner: Runner | null = null,
): MakeRandomTimingPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_RANDOM_TIMING_PY_METADATA);
    params = execution.params(params)
    const cargs = make_random_timing_py_cargs(params, execution)
    const ret = make_random_timing_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * make_random_timing.py
 *
 * Create random stimulus timing files for use with AFNI 3dDeconvolve.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param num_runs Set the number of runs.
 * @param run_time Set the total time per run (in seconds).
 * @param num_stim Set the number of stimulus classes.
 * @param num_reps Set the number of repetitions per class (or across runs).
 * @param prefix Set the prefix for output filenames.
 * @param stim_dur Set the duration for a single stimulus (in seconds).
 * @param across_runs Distribute stimuli across all runs at once.
 * @param max_consec Specify maximum consecutive stimuli per class.
 * @param max_rest Specify maximum rest between stimuli.
 * @param min_rest Specify extra rest after each stimulus.
 * @param not_first Specify classes that should not start a run.
 * @param not_last Specify classes that should not end a run.
 * @param offset Specify an offset to add to every stim time.
 * @param ordered_stimuli Specify a partial ordering of stimuli.
 * @param pre_stim_rest Specify minimum rest period to start each run.
 * @param post_stim_rest Specify minimum rest period to end each run.
 * @param save_3dd_cmd Save a 3dDeconvolve -nodata example.
 * @param seed Specify a seed for random number generation.
 * @param stim_labels Specify labels for the stimulus classes.
 * @param t_digits Set the number of decimal places for times.
 * @param t_gran Set the time granularity.
 * @param tr Set the scanner TR.
 * @param tr_locked Make stimuli timing locked to the accompanying TR.
 * @param verb Set the verbose level.
 * @param show_timing_stats Show statistics from the timing.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeRandomTimingPyOutputs`).
 */
function make_random_timing_py(
    num_runs: number,
    run_time: Array<number>,
    num_stim: number,
    num_reps: Array<number>,
    prefix: string,
    stim_dur: Array<number> | null = null,
    across_runs: boolean = false,
    max_consec: Array<number> | null = null,
    max_rest: number | null = null,
    min_rest: number | null = null,
    not_first: Array<string> | null = null,
    not_last: Array<string> | null = null,
    offset: number | null = null,
    ordered_stimuli: Array<string> | null = null,
    pre_stim_rest: number | null = null,
    post_stim_rest: number | null = null,
    save_3dd_cmd: string | null = null,
    seed: number | null = null,
    stim_labels: Array<string> | null = null,
    t_digits: number | null = null,
    t_gran: number | null = null,
    tr: number | null = null,
    tr_locked: boolean = false,
    verb: number | null = null,
    show_timing_stats: boolean = false,
    runner: Runner | null = null,
): MakeRandomTimingPyOutputs {
    const params = make_random_timing_py_params(num_runs, run_time, num_stim, num_reps, prefix, stim_dur, across_runs, max_consec, max_rest, min_rest, not_first, not_last, offset, ordered_stimuli, pre_stim_rest, post_stim_rest, save_3dd_cmd, seed, stim_labels, t_digits, t_gran, tr, tr_locked, verb, show_timing_stats)
    return make_random_timing_py_execute(params, runner);
}


export {
      MAKE_RANDOM_TIMING_PY_METADATA,
      MakeRandomTimingPyOutputs,
      MakeRandomTimingPyParameters,
      make_random_timing_py,
      make_random_timing_py_execute,
      make_random_timing_py_params,
};
