// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MKSURFATLAS_METADATA: Metadata = {
    id: "e10d98c6c732c2691141d0c7ae1e1069fa4646aa.boutiques",
    name: "mksurfatlas",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MksurfatlasParameters {
    "@type"?: "freesurfer/mksurfatlas";
    "atlas": string;
    "hemi": string;
    "subjects": Array<string>;
    "surfval": string;
    "surfvaldir"?: string | null | undefined;
    "regsurf"?: string | null | undefined;
    "debug": boolean;
    "version": boolean;
    "help": boolean;
}
type MksurfatlasParametersTagged = Required<Pick<MksurfatlasParameters, '@type'>> & MksurfatlasParameters;


/**
 * Output object returned when calling `MksurfatlasParameters(...)`.
 *
 * @interface
 */
interface MksurfatlasOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting atlas file in TIFF format.
     */
    output_atlas: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param atlas Save results to this file (tif file).
 * @param hemi Hemisphere to process.
 * @param subjects Subject(s) to process. Multiple subjects can be specified by repeating the flag.
 * @param surfval Surface values file. Looks for subject/surfvaldir/hemi.surfval.
 * @param surfvaldir Directory for surface values; default is 'label'.
 * @param regsurf Registration surface; default is 'sphere'.
 * @param debug Turn on debugging.
 * @param version Print version and exit.
 * @param help Print help and exit.
 *
 * @returns Parameter dictionary
 */
function mksurfatlas_params(
    atlas: string,
    hemi: string,
    subjects: Array<string>,
    surfval: string,
    surfvaldir: string | null = null,
    regsurf: string | null = null,
    debug: boolean = false,
    version: boolean = false,
    help: boolean = false,
): MksurfatlasParametersTagged {
    const params = {
        "@type": "freesurfer/mksurfatlas" as const,
        "atlas": atlas,
        "hemi": hemi,
        "subjects": subjects,
        "surfval": surfval,
        "debug": debug,
        "version": version,
        "help": help,
    };
    if (surfvaldir !== null) {
        params["surfvaldir"] = surfvaldir;
    }
    if (regsurf !== null) {
        params["regsurf"] = regsurf;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mksurfatlas_cargs(
    params: MksurfatlasParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mksurfatlas");
    cargs.push(
        "--a",
        (params["atlas"] ?? null)
    );
    cargs.push(
        "--h",
        (params["hemi"] ?? null)
    );
    cargs.push(
        "--s",
        ...(params["subjects"] ?? null)
    );
    cargs.push(
        "--v",
        (params["surfval"] ?? null)
    );
    if ((params["surfvaldir"] ?? null) !== null) {
        cargs.push(
            "--d",
            (params["surfvaldir"] ?? null)
        );
    }
    if ((params["regsurf"] ?? null) !== null) {
        cargs.push(
            "--r",
            (params["regsurf"] ?? null)
        );
    }
    if ((params["debug"] ?? false)) {
        cargs.push("--debug");
    }
    if ((params["version"] ?? false)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? false)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mksurfatlas_outputs(
    params: MksurfatlasParameters,
    execution: Execution,
): MksurfatlasOutputs {
    const ret: MksurfatlasOutputs = {
        root: execution.outputFile("."),
        output_atlas: execution.outputFile([(params["atlas"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mksurfatlas
 *
 * Creates an atlas using mris_make_template. The atlas can then be used to create the surface registration for each subject based on this atlas.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MksurfatlasOutputs`).
 */
function mksurfatlas_execute(
    params: MksurfatlasParameters,
    runner: Runner | null = null,
): MksurfatlasOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MKSURFATLAS_METADATA);
    params = execution.params(params)
    const cargs = mksurfatlas_cargs(params, execution)
    const ret = mksurfatlas_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mksurfatlas
 *
 * Creates an atlas using mris_make_template. The atlas can then be used to create the surface registration for each subject based on this atlas.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param atlas Save results to this file (tif file).
 * @param hemi Hemisphere to process.
 * @param subjects Subject(s) to process. Multiple subjects can be specified by repeating the flag.
 * @param surfval Surface values file. Looks for subject/surfvaldir/hemi.surfval.
 * @param surfvaldir Directory for surface values; default is 'label'.
 * @param regsurf Registration surface; default is 'sphere'.
 * @param debug Turn on debugging.
 * @param version Print version and exit.
 * @param help Print help and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MksurfatlasOutputs`).
 */
function mksurfatlas(
    atlas: string,
    hemi: string,
    subjects: Array<string>,
    surfval: string,
    surfvaldir: string | null = null,
    regsurf: string | null = null,
    debug: boolean = false,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): MksurfatlasOutputs {
    const params = mksurfatlas_params(atlas, hemi, subjects, surfval, surfvaldir, regsurf, debug, version, help)
    return mksurfatlas_execute(params, runner);
}


export {
      MKSURFATLAS_METADATA,
      MksurfatlasOutputs,
      mksurfatlas,
      mksurfatlas_execute,
      mksurfatlas_params,
};
