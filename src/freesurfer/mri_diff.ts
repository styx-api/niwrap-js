// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_DIFF_METADATA: Metadata = {
    id: "5fa5d903b07503901e91b56443e403edfb88973b.boutiques",
    name: "mri_diff",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriDiffParameters {
    "@type": "freesurfer.mri_diff";
    "vol1file": InputPathType;
    "vol2file": InputPathType;
    "resolution_check": boolean;
    "acquisition_param_check": boolean;
    "geometry_check": boolean;
    "precision_check": boolean;
    "pixel_check": boolean;
    "orientation_check": boolean;
    "file_type_diff_check": boolean;
    "no_exit_on_diff": boolean;
    "quality_assurance": boolean;
    "pixel_only": boolean;
    "abs_difference": boolean;
    "no_abs_difference": boolean;
    "difference_abs": boolean;
    "percentage_difference": boolean;
    "rss_save": boolean;
    "ssd_print": boolean;
    "rms_print": boolean;
    "count_diff_voxels": boolean;
    "pixel_threshold"?: number | null | undefined;
    "count_thresh_voxels"?: number | null | undefined;
    "log_file"?: string | null | undefined;
    "difference_image"?: InputPathType | null | undefined;
    "suspicious_diff_volume"?: InputPathType | null | undefined;
    "segmentation_diff"?: string | null | undefined;
    "merge_edits"?: string | null | undefined;
    "average_difference"?: string | null | undefined;
    "debug_mode": boolean;
    "verbose_mode": boolean;
    "check_options": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_diff": mri_diff_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_diff": mri_diff_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_diff(...)`.
 *
 * @interface
 */
interface MriDiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Log file containing difference information.
     */
    log_output: OutputPathType | null;
    /**
     * Difference image output file.
     */
    difference_image_output: OutputPathType | null;
    /**
     * Volume with suspicious differences labeled.
     */
    suspicious_difference_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param vol1file First volume to compare (e.g., vol1.mgz)
 * @param vol2file Second volume to compare (e.g., vol2.mgz)
 * @param resolution_check Do not check for resolution differences.
 * @param acquisition_param_check Do not check for acquisition parameter differences.
 * @param geometry_check Do not check for geometry differences.
 * @param precision_check Do not check for precision differences.
 * @param pixel_check Do not check for pixel differences.
 * @param orientation_check Do not check for orientation differences.
 * @param file_type_diff_check Do not check for file type differences.
 * @param no_exit_on_diff Do not exit on difference; run through everything.
 * @param quality_assurance Check resolution, acquisition, precision, and orientation only.
 * @param pixel_only Only check pixel data.
 * @param abs_difference Take absolute value of difference (default).
 * @param no_abs_difference Do not take absolute value of difference.
 * @param difference_abs Take absolute value before computing difference.
 * @param percentage_difference Compute percentage difference: 100*(v1-v2)/((v1+v2)/2).
 * @param rss_save Save square root sum squares with --diff.
 * @param ssd_print Print sum squared differences over all voxels.
 * @param rms_print Print root mean squared difference over all non-zero voxels.
 * @param count_diff_voxels Print number of differing voxels.
 * @param pixel_threshold Pixel differences must be greater than this value to be considered different.
 * @param count_thresh_voxels There must be at least this many voxels that are different.
 * @param log_file Store difference information in this log file.
 * @param difference_image Save difference image to specified volume.
 * @param suspicious_diff_volume Differing voxels replaced with label SUSPICIOUS in the specified volume.
 * @param segmentation_diff Perform diff on voxels with specific label index.
 * @param merge_edits Merge edits from newauto, oldauto, and manedit volumes into merged volume.
 * @param average_difference Save average difference to specified file.
 * @param debug_mode Enable debugging mode.
 * @param verbose_mode Print information on all differences found.
 * @param check_options Check options and exit without running anything.
 *
 * @returns Parameter dictionary
 */
function mri_diff_params(
    vol1file: InputPathType,
    vol2file: InputPathType,
    resolution_check: boolean = false,
    acquisition_param_check: boolean = false,
    geometry_check: boolean = false,
    precision_check: boolean = false,
    pixel_check: boolean = false,
    orientation_check: boolean = false,
    file_type_diff_check: boolean = false,
    no_exit_on_diff: boolean = false,
    quality_assurance: boolean = false,
    pixel_only: boolean = false,
    abs_difference: boolean = false,
    no_abs_difference: boolean = false,
    difference_abs: boolean = false,
    percentage_difference: boolean = false,
    rss_save: boolean = false,
    ssd_print: boolean = false,
    rms_print: boolean = false,
    count_diff_voxels: boolean = false,
    pixel_threshold: number | null = null,
    count_thresh_voxels: number | null = null,
    log_file: string | null = null,
    difference_image: InputPathType | null = null,
    suspicious_diff_volume: InputPathType | null = null,
    segmentation_diff: string | null = null,
    merge_edits: string | null = null,
    average_difference: string | null = null,
    debug_mode: boolean = false,
    verbose_mode: boolean = false,
    check_options: boolean = false,
): MriDiffParameters {
    const params = {
        "@type": "freesurfer.mri_diff" as const,
        "vol1file": vol1file,
        "vol2file": vol2file,
        "resolution_check": resolution_check,
        "acquisition_param_check": acquisition_param_check,
        "geometry_check": geometry_check,
        "precision_check": precision_check,
        "pixel_check": pixel_check,
        "orientation_check": orientation_check,
        "file_type_diff_check": file_type_diff_check,
        "no_exit_on_diff": no_exit_on_diff,
        "quality_assurance": quality_assurance,
        "pixel_only": pixel_only,
        "abs_difference": abs_difference,
        "no_abs_difference": no_abs_difference,
        "difference_abs": difference_abs,
        "percentage_difference": percentage_difference,
        "rss_save": rss_save,
        "ssd_print": ssd_print,
        "rms_print": rms_print,
        "count_diff_voxels": count_diff_voxels,
        "debug_mode": debug_mode,
        "verbose_mode": verbose_mode,
        "check_options": check_options,
    };
    if (pixel_threshold !== null) {
        params["pixel_threshold"] = pixel_threshold;
    }
    if (count_thresh_voxels !== null) {
        params["count_thresh_voxels"] = count_thresh_voxels;
    }
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (difference_image !== null) {
        params["difference_image"] = difference_image;
    }
    if (suspicious_diff_volume !== null) {
        params["suspicious_diff_volume"] = suspicious_diff_volume;
    }
    if (segmentation_diff !== null) {
        params["segmentation_diff"] = segmentation_diff;
    }
    if (merge_edits !== null) {
        params["merge_edits"] = merge_edits;
    }
    if (average_difference !== null) {
        params["average_difference"] = average_difference;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_diff_cargs(
    params: MriDiffParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_diff");
    cargs.push(execution.inputFile((params["vol1file"] ?? null)));
    cargs.push(execution.inputFile((params["vol2file"] ?? null)));
    if ((params["resolution_check"] ?? null)) {
        cargs.push("--notallow-res");
    }
    if ((params["acquisition_param_check"] ?? null)) {
        cargs.push("--notallow-acq");
    }
    if ((params["geometry_check"] ?? null)) {
        cargs.push("--notallow-geo");
    }
    if ((params["precision_check"] ?? null)) {
        cargs.push("--notallow-prec");
    }
    if ((params["pixel_check"] ?? null)) {
        cargs.push("--notallow-pix");
    }
    if ((params["orientation_check"] ?? null)) {
        cargs.push("--notallow-ori");
    }
    if ((params["file_type_diff_check"] ?? null)) {
        cargs.push("--notallow-type");
    }
    if ((params["no_exit_on_diff"] ?? null)) {
        cargs.push("--no-exit-on-diff");
    }
    if ((params["quality_assurance"] ?? null)) {
        cargs.push("--qa");
    }
    if ((params["pixel_only"] ?? null)) {
        cargs.push("--pix-only");
    }
    if ((params["abs_difference"] ?? null)) {
        cargs.push("--absdiff");
    }
    if ((params["no_abs_difference"] ?? null)) {
        cargs.push("--no-absdiff");
    }
    if ((params["difference_abs"] ?? null)) {
        cargs.push("--diffabs");
    }
    if ((params["percentage_difference"] ?? null)) {
        cargs.push("--diffpct");
    }
    if ((params["rss_save"] ?? null)) {
        cargs.push("--rss");
    }
    if ((params["ssd_print"] ?? null)) {
        cargs.push("--ssd");
    }
    if ((params["rms_print"] ?? null)) {
        cargs.push("--rms");
    }
    if ((params["count_diff_voxels"] ?? null)) {
        cargs.push("--count");
    }
    if ((params["pixel_threshold"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["pixel_threshold"] ?? null))
        );
    }
    if ((params["count_thresh_voxels"] ?? null) !== null) {
        cargs.push(
            "--count-thresh",
            String((params["count_thresh_voxels"] ?? null))
        );
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "--log",
            (params["log_file"] ?? null)
        );
    }
    if ((params["difference_image"] ?? null) !== null) {
        cargs.push(
            "--diff",
            execution.inputFile((params["difference_image"] ?? null))
        );
    }
    if ((params["suspicious_diff_volume"] ?? null) !== null) {
        cargs.push(
            "--diff_label_suspicious",
            execution.inputFile((params["suspicious_diff_volume"] ?? null))
        );
    }
    if ((params["segmentation_diff"] ?? null) !== null) {
        cargs.push(
            "--segdiff",
            (params["segmentation_diff"] ?? null)
        );
    }
    if ((params["merge_edits"] ?? null) !== null) {
        cargs.push(
            "--merge-edits",
            (params["merge_edits"] ?? null)
        );
    }
    if ((params["average_difference"] ?? null) !== null) {
        cargs.push(
            "--avg-diff",
            (params["average_difference"] ?? null)
        );
    }
    if ((params["debug_mode"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["verbose_mode"] ?? null)) {
        cargs.push("--verbose");
    }
    if ((params["check_options"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_diff_outputs(
    params: MriDiffParameters,
    execution: Execution,
): MriDiffOutputs {
    const ret: MriDiffOutputs = {
        root: execution.outputFile("."),
        log_output: ((params["log_file"] ?? null) !== null) ? execution.outputFile([(params["log_file"] ?? null)].join('')) : null,
        difference_image_output: ((params["difference_image"] ?? null) !== null) ? execution.outputFile([path.basename((params["difference_image"] ?? null))].join('')) : null,
        suspicious_difference_output: ((params["suspicious_diff_volume"] ?? null) !== null) ? execution.outputFile([path.basename((params["suspicious_diff_volume"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * Determines whether two volumes differ based on dimensions, resolutions, acquisition parameters, geometry, precision, and pixel data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriDiffOutputs`).
 */
function mri_diff_execute(
    params: MriDiffParameters,
    execution: Execution,
): MriDiffOutputs {
    params = execution.params(params)
    const cargs = mri_diff_cargs(params, execution)
    const ret = mri_diff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Determines whether two volumes differ based on dimensions, resolutions, acquisition parameters, geometry, precision, and pixel data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param vol1file First volume to compare (e.g., vol1.mgz)
 * @param vol2file Second volume to compare (e.g., vol2.mgz)
 * @param resolution_check Do not check for resolution differences.
 * @param acquisition_param_check Do not check for acquisition parameter differences.
 * @param geometry_check Do not check for geometry differences.
 * @param precision_check Do not check for precision differences.
 * @param pixel_check Do not check for pixel differences.
 * @param orientation_check Do not check for orientation differences.
 * @param file_type_diff_check Do not check for file type differences.
 * @param no_exit_on_diff Do not exit on difference; run through everything.
 * @param quality_assurance Check resolution, acquisition, precision, and orientation only.
 * @param pixel_only Only check pixel data.
 * @param abs_difference Take absolute value of difference (default).
 * @param no_abs_difference Do not take absolute value of difference.
 * @param difference_abs Take absolute value before computing difference.
 * @param percentage_difference Compute percentage difference: 100*(v1-v2)/((v1+v2)/2).
 * @param rss_save Save square root sum squares with --diff.
 * @param ssd_print Print sum squared differences over all voxels.
 * @param rms_print Print root mean squared difference over all non-zero voxels.
 * @param count_diff_voxels Print number of differing voxels.
 * @param pixel_threshold Pixel differences must be greater than this value to be considered different.
 * @param count_thresh_voxels There must be at least this many voxels that are different.
 * @param log_file Store difference information in this log file.
 * @param difference_image Save difference image to specified volume.
 * @param suspicious_diff_volume Differing voxels replaced with label SUSPICIOUS in the specified volume.
 * @param segmentation_diff Perform diff on voxels with specific label index.
 * @param merge_edits Merge edits from newauto, oldauto, and manedit volumes into merged volume.
 * @param average_difference Save average difference to specified file.
 * @param debug_mode Enable debugging mode.
 * @param verbose_mode Print information on all differences found.
 * @param check_options Check options and exit without running anything.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriDiffOutputs`).
 */
function mri_diff(
    vol1file: InputPathType,
    vol2file: InputPathType,
    resolution_check: boolean = false,
    acquisition_param_check: boolean = false,
    geometry_check: boolean = false,
    precision_check: boolean = false,
    pixel_check: boolean = false,
    orientation_check: boolean = false,
    file_type_diff_check: boolean = false,
    no_exit_on_diff: boolean = false,
    quality_assurance: boolean = false,
    pixel_only: boolean = false,
    abs_difference: boolean = false,
    no_abs_difference: boolean = false,
    difference_abs: boolean = false,
    percentage_difference: boolean = false,
    rss_save: boolean = false,
    ssd_print: boolean = false,
    rms_print: boolean = false,
    count_diff_voxels: boolean = false,
    pixel_threshold: number | null = null,
    count_thresh_voxels: number | null = null,
    log_file: string | null = null,
    difference_image: InputPathType | null = null,
    suspicious_diff_volume: InputPathType | null = null,
    segmentation_diff: string | null = null,
    merge_edits: string | null = null,
    average_difference: string | null = null,
    debug_mode: boolean = false,
    verbose_mode: boolean = false,
    check_options: boolean = false,
    runner: Runner | null = null,
): MriDiffOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_DIFF_METADATA);
    const params = mri_diff_params(vol1file, vol2file, resolution_check, acquisition_param_check, geometry_check, precision_check, pixel_check, orientation_check, file_type_diff_check, no_exit_on_diff, quality_assurance, pixel_only, abs_difference, no_abs_difference, difference_abs, percentage_difference, rss_save, ssd_print, rms_print, count_diff_voxels, pixel_threshold, count_thresh_voxels, log_file, difference_image, suspicious_diff_volume, segmentation_diff, merge_edits, average_difference, debug_mode, verbose_mode, check_options)
    return mri_diff_execute(params, execution);
}


export {
      MRI_DIFF_METADATA,
      MriDiffOutputs,
      MriDiffParameters,
      mri_diff,
      mri_diff_cargs,
      mri_diff_execute,
      mri_diff_outputs,
      mri_diff_params,
};
