// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APARCSTATS2TABLE_METADATA: Metadata = {
    id: "1521fea28c99f52d4d63d7ca1b13780658752d3a.boutiques",
    name: "aparcstats2table",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Aparcstats2tableParameters {
    "@type": "freesurfer.aparcstats2table";
    "subjects"?: Array<string> | null | undefined;
    "subjectsfile"?: InputPathType | null | undefined;
    "qdec"?: InputPathType | null | undefined;
    "qdec_long"?: InputPathType | null | undefined;
    "hemi": string;
    "tablefile": InputPathType;
    "parcellation"?: string | null | undefined;
    "measure"?: string | null | undefined;
    "delimiter"?: string | null | undefined;
    "skip_missing": boolean;
    "parcid_only": boolean;
    "common_parcs": boolean;
    "parcs_file"?: InputPathType | null | undefined;
    "report_rois": boolean;
    "transpose": boolean;
    "debug": boolean;
    "etiv": boolean;
    "scale"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.aparcstats2table": aparcstats2table_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.aparcstats2table": aparcstats2table_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `aparcstats2table(...)`.
 *
 * @interface
 */
interface Aparcstats2tableOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output table file with processed data.
     */
    output_table: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param hemi Hemisphere being analyzed (lh or rh required).
 * @param tablefile Output table file.
 * @param subjects List of subject IDs.
 * @param subjectsfile File containing list of subjects (one per line).
 * @param qdec QDEC table file with subject IDs.
 * @param qdec_long Longitudinal QDEC table with subject templates.
 * @param parcellation Parcellation atlas (default: aparc).
 * @param measure Measure type (e.g., area, volume, thickness).
 * @param delimiter Delimiter between measures in the table (default: tab).
 * @param skip_missing Skip subjects if input is not found.
 * @param parcid_only Write only ROI names without pre/appended hemi/measure.
 * @param common_parcs Output only common parcellations across all subjects.
 * @param parcs_file File specifying which parcellations to output.
 * @param report_rois Print ROI information for each subject.
 * @param transpose Transpose the table (subjects in columns).
 * @param debug Increase verbosity.
 * @param etiv Report volume as percent estimated total intracranial volume.
 * @param scale Scale factor for output values.
 *
 * @returns Parameter dictionary
 */
function aparcstats2table_params(
    hemi: string,
    tablefile: InputPathType,
    subjects: Array<string> | null = null,
    subjectsfile: InputPathType | null = null,
    qdec: InputPathType | null = null,
    qdec_long: InputPathType | null = null,
    parcellation: string | null = "aparc",
    measure: string | null = "area",
    delimiter: string | null = "tab",
    skip_missing: boolean = false,
    parcid_only: boolean = false,
    common_parcs: boolean = false,
    parcs_file: InputPathType | null = null,
    report_rois: boolean = false,
    transpose: boolean = false,
    debug: boolean = false,
    etiv: boolean = false,
    scale: number | null = 1,
): Aparcstats2tableParameters {
    const params = {
        "@type": "freesurfer.aparcstats2table" as const,
        "hemi": hemi,
        "tablefile": tablefile,
        "skip_missing": skip_missing,
        "parcid_only": parcid_only,
        "common_parcs": common_parcs,
        "report_rois": report_rois,
        "transpose": transpose,
        "debug": debug,
        "etiv": etiv,
    };
    if (subjects !== null) {
        params["subjects"] = subjects;
    }
    if (subjectsfile !== null) {
        params["subjectsfile"] = subjectsfile;
    }
    if (qdec !== null) {
        params["qdec"] = qdec;
    }
    if (qdec_long !== null) {
        params["qdec_long"] = qdec_long;
    }
    if (parcellation !== null) {
        params["parcellation"] = parcellation;
    }
    if (measure !== null) {
        params["measure"] = measure;
    }
    if (delimiter !== null) {
        params["delimiter"] = delimiter;
    }
    if (parcs_file !== null) {
        params["parcs_file"] = parcs_file;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function aparcstats2table_cargs(
    params: Aparcstats2tableParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("aparcstats2table");
    if ((params["subjects"] ?? null) !== null) {
        cargs.push(
            "--subjects",
            ...(params["subjects"] ?? null)
        );
    }
    if ((params["subjectsfile"] ?? null) !== null) {
        cargs.push(
            "--subjectsfile",
            execution.inputFile((params["subjectsfile"] ?? null))
        );
    }
    if ((params["qdec"] ?? null) !== null) {
        cargs.push(
            "--qdec",
            execution.inputFile((params["qdec"] ?? null))
        );
    }
    if ((params["qdec_long"] ?? null) !== null) {
        cargs.push(
            "--qdec-long",
            execution.inputFile((params["qdec_long"] ?? null))
        );
    }
    cargs.push(
        "--hemi",
        (params["hemi"] ?? null)
    );
    cargs.push(
        "-t",
        execution.inputFile((params["tablefile"] ?? null))
    );
    if ((params["parcellation"] ?? null) !== null) {
        cargs.push(
            "--parc",
            (params["parcellation"] ?? null)
        );
    }
    if ((params["measure"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["measure"] ?? null)
        );
    }
    if ((params["delimiter"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["delimiter"] ?? null)
        );
    }
    if ((params["skip_missing"] ?? null)) {
        cargs.push("--skip");
    }
    if ((params["parcid_only"] ?? null)) {
        cargs.push("--parcid-only");
    }
    if ((params["common_parcs"] ?? null)) {
        cargs.push("--common-parcs");
    }
    if ((params["parcs_file"] ?? null) !== null) {
        cargs.push(
            "--parcs-from-file",
            execution.inputFile((params["parcs_file"] ?? null))
        );
    }
    if ((params["report_rois"] ?? null)) {
        cargs.push("--report-rois");
    }
    if ((params["transpose"] ?? null)) {
        cargs.push("--transpose");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["etiv"] ?? null)) {
        cargs.push("--etiv");
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "--scale",
            String((params["scale"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function aparcstats2table_outputs(
    params: Aparcstats2tableParameters,
    execution: Execution,
): Aparcstats2tableOutputs {
    const ret: Aparcstats2tableOutputs = {
        root: execution.outputFile("."),
        output_table: execution.outputFile([path.basename((params["tablefile"] ?? null))].join('')),
    };
    return ret;
}


/**
 * Converts a cortical stats file into a table format with subjects as rows and parcellations as columns.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Aparcstats2tableOutputs`).
 */
function aparcstats2table_execute(
    params: Aparcstats2tableParameters,
    execution: Execution,
): Aparcstats2tableOutputs {
    params = execution.params(params)
    const cargs = aparcstats2table_cargs(params, execution)
    const ret = aparcstats2table_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Converts a cortical stats file into a table format with subjects as rows and parcellations as columns.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param hemi Hemisphere being analyzed (lh or rh required).
 * @param tablefile Output table file.
 * @param subjects List of subject IDs.
 * @param subjectsfile File containing list of subjects (one per line).
 * @param qdec QDEC table file with subject IDs.
 * @param qdec_long Longitudinal QDEC table with subject templates.
 * @param parcellation Parcellation atlas (default: aparc).
 * @param measure Measure type (e.g., area, volume, thickness).
 * @param delimiter Delimiter between measures in the table (default: tab).
 * @param skip_missing Skip subjects if input is not found.
 * @param parcid_only Write only ROI names without pre/appended hemi/measure.
 * @param common_parcs Output only common parcellations across all subjects.
 * @param parcs_file File specifying which parcellations to output.
 * @param report_rois Print ROI information for each subject.
 * @param transpose Transpose the table (subjects in columns).
 * @param debug Increase verbosity.
 * @param etiv Report volume as percent estimated total intracranial volume.
 * @param scale Scale factor for output values.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Aparcstats2tableOutputs`).
 */
function aparcstats2table(
    hemi: string,
    tablefile: InputPathType,
    subjects: Array<string> | null = null,
    subjectsfile: InputPathType | null = null,
    qdec: InputPathType | null = null,
    qdec_long: InputPathType | null = null,
    parcellation: string | null = "aparc",
    measure: string | null = "area",
    delimiter: string | null = "tab",
    skip_missing: boolean = false,
    parcid_only: boolean = false,
    common_parcs: boolean = false,
    parcs_file: InputPathType | null = null,
    report_rois: boolean = false,
    transpose: boolean = false,
    debug: boolean = false,
    etiv: boolean = false,
    scale: number | null = 1,
    runner: Runner | null = null,
): Aparcstats2tableOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APARCSTATS2TABLE_METADATA);
    const params = aparcstats2table_params(hemi, tablefile, subjects, subjectsfile, qdec, qdec_long, parcellation, measure, delimiter, skip_missing, parcid_only, common_parcs, parcs_file, report_rois, transpose, debug, etiv, scale)
    return aparcstats2table_execute(params, execution);
}


export {
      APARCSTATS2TABLE_METADATA,
      Aparcstats2tableOutputs,
      Aparcstats2tableParameters,
      aparcstats2table,
      aparcstats2table_cargs,
      aparcstats2table_execute,
      aparcstats2table_outputs,
      aparcstats2table_params,
};
