// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSL_SUB_MGH_METADATA: Metadata = {
    id: "4015aeacaae283d33f0b4ca8406dbe45c4046304.boutiques",
    name: "fsl_sub_mgh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FslSubMghParameters {
    "@type": "freesurfer.fsl_sub_mgh";
    "estimated_time"?: number | null | undefined;
    "queue_name"?: string | null | undefined;
    "architecture"?: string | null | undefined;
    "job_priority"?: number | null | undefined;
    "email_address"?: string | null | undefined;
    "hold_job"?: string | null | undefined;
    "task_file"?: InputPathType | null | undefined;
    "job_name"?: string | null | undefined;
    "log_dir"?: string | null | undefined;
    "mail_options"?: string | null | undefined;
    "flags_in_scripts": boolean;
    "verbose": boolean;
    "shell_path"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.fsl_sub_mgh": fsl_sub_mgh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsl_sub_mgh(...)`.
 *
 * @interface
 */
interface FslSubMghOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param estimated_time Estimated job length in minutes, used to auto-set queue name
 * @param queue_name Queue name. Possible values are 'verylong.q', 'long.q' and 'short.q'. Default is 'long.q'.
 * @param architecture Architecture [e.g., darwin or lx24-amd64]
 * @param job_priority Job priority [0:-1024]. Default is 0.
 * @param email_address Email address to send notifications. Default is root@fmrib.ox.ac.uk.
 * @param hold_job Job ID to place a hold on this task until completion.
 * @param task_file Task file of commands to execute in parallel.
 * @param job_name Specify job name as it will appear on the queue.
 * @param log_dir Output directory for log files.
 * @param mail_options Change the SGE mail options.
 * @param flags_in_scripts Use flags embedded in scripts to set SGE queuing options.
 * @param verbose Verbose mode.
 * @param shell_path Change the PBS shell option.
 *
 * @returns Parameter dictionary
 */
function fsl_sub_mgh_params(
    estimated_time: number | null = null,
    queue_name: string | null = "long.q",
    architecture: string | null = null,
    job_priority: number | null = 0,
    email_address: string | null = "root@fmrib.ox.ac.uk",
    hold_job: string | null = null,
    task_file: InputPathType | null = null,
    job_name: string | null = null,
    log_dir: string | null = null,
    mail_options: string | null = null,
    flags_in_scripts: boolean = false,
    verbose: boolean = false,
    shell_path: string | null = null,
): FslSubMghParameters {
    const params = {
        "@type": "freesurfer.fsl_sub_mgh" as const,
        "flags_in_scripts": flags_in_scripts,
        "verbose": verbose,
    };
    if (estimated_time !== null) {
        params["estimated_time"] = estimated_time;
    }
    if (queue_name !== null) {
        params["queue_name"] = queue_name;
    }
    if (architecture !== null) {
        params["architecture"] = architecture;
    }
    if (job_priority !== null) {
        params["job_priority"] = job_priority;
    }
    if (email_address !== null) {
        params["email_address"] = email_address;
    }
    if (hold_job !== null) {
        params["hold_job"] = hold_job;
    }
    if (task_file !== null) {
        params["task_file"] = task_file;
    }
    if (job_name !== null) {
        params["job_name"] = job_name;
    }
    if (log_dir !== null) {
        params["log_dir"] = log_dir;
    }
    if (mail_options !== null) {
        params["mail_options"] = mail_options;
    }
    if (shell_path !== null) {
        params["shell_path"] = shell_path;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fsl_sub_mgh_cargs(
    params: FslSubMghParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fsl_sub_mgh");
    if ((params["estimated_time"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["estimated_time"] ?? null))
        );
    }
    if ((params["queue_name"] ?? null) !== null) {
        cargs.push(
            "-q",
            (params["queue_name"] ?? null)
        );
    }
    if ((params["architecture"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["architecture"] ?? null)
        );
    }
    if ((params["job_priority"] ?? null) !== null) {
        cargs.push(
            "-p",
            String((params["job_priority"] ?? null))
        );
    }
    if ((params["email_address"] ?? null) !== null) {
        cargs.push(
            "-M",
            (params["email_address"] ?? null)
        );
    }
    if ((params["hold_job"] ?? null) !== null) {
        cargs.push(
            "-j",
            (params["hold_job"] ?? null)
        );
    }
    if ((params["task_file"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["task_file"] ?? null))
        );
    }
    if ((params["job_name"] ?? null) !== null) {
        cargs.push(
            "-N",
            (params["job_name"] ?? null)
        );
    }
    if ((params["log_dir"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["log_dir"] ?? null)
        );
    }
    if ((params["mail_options"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["mail_options"] ?? null)
        );
    }
    if ((params["flags_in_scripts"] ?? null)) {
        cargs.push("-F");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["shell_path"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["shell_path"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fsl_sub_mgh_outputs(
    params: FslSubMghParameters,
    execution: Execution,
): FslSubMghOutputs {
    const ret: FslSubMghOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Wrapper for job control system such as SGE, modified for compatibility with the PBS queueing system.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FslSubMghOutputs`).
 */
function fsl_sub_mgh_execute(
    params: FslSubMghParameters,
    execution: Execution,
): FslSubMghOutputs {
    params = execution.params(params)
    const cargs = fsl_sub_mgh_cargs(params, execution)
    const ret = fsl_sub_mgh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Wrapper for job control system such as SGE, modified for compatibility with the PBS queueing system.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param estimated_time Estimated job length in minutes, used to auto-set queue name
 * @param queue_name Queue name. Possible values are 'verylong.q', 'long.q' and 'short.q'. Default is 'long.q'.
 * @param architecture Architecture [e.g., darwin or lx24-amd64]
 * @param job_priority Job priority [0:-1024]. Default is 0.
 * @param email_address Email address to send notifications. Default is root@fmrib.ox.ac.uk.
 * @param hold_job Job ID to place a hold on this task until completion.
 * @param task_file Task file of commands to execute in parallel.
 * @param job_name Specify job name as it will appear on the queue.
 * @param log_dir Output directory for log files.
 * @param mail_options Change the SGE mail options.
 * @param flags_in_scripts Use flags embedded in scripts to set SGE queuing options.
 * @param verbose Verbose mode.
 * @param shell_path Change the PBS shell option.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FslSubMghOutputs`).
 */
function fsl_sub_mgh(
    estimated_time: number | null = null,
    queue_name: string | null = "long.q",
    architecture: string | null = null,
    job_priority: number | null = 0,
    email_address: string | null = "root@fmrib.ox.ac.uk",
    hold_job: string | null = null,
    task_file: InputPathType | null = null,
    job_name: string | null = null,
    log_dir: string | null = null,
    mail_options: string | null = null,
    flags_in_scripts: boolean = false,
    verbose: boolean = false,
    shell_path: string | null = null,
    runner: Runner | null = null,
): FslSubMghOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSL_SUB_MGH_METADATA);
    const params = fsl_sub_mgh_params(estimated_time, queue_name, architecture, job_priority, email_address, hold_job, task_file, job_name, log_dir, mail_options, flags_in_scripts, verbose, shell_path)
    return fsl_sub_mgh_execute(params, execution);
}


export {
      FSL_SUB_MGH_METADATA,
      FslSubMghOutputs,
      FslSubMghParameters,
      fsl_sub_mgh,
      fsl_sub_mgh_cargs,
      fsl_sub_mgh_execute,
      fsl_sub_mgh_outputs,
      fsl_sub_mgh_params,
};
