// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CORRELATION_GRADIENT_METADATA: Metadata = {
    id: "d806149417489bcd1887925649598dc5eb308a60.boutiques",
    name: "cifti-correlation-gradient",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiCorrelationGradientLeftSurfaceParameters {
    "@type": "workbench.cifti-correlation-gradient.left_surface";
    "surface": InputPathType;
    "opt_left_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiCorrelationGradientRightSurfaceParameters {
    "@type": "workbench.cifti-correlation-gradient.right_surface";
    "surface": InputPathType;
    "opt_right_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiCorrelationGradientCerebellumSurfaceParameters {
    "@type": "workbench.cifti-correlation-gradient.cerebellum_surface";
    "surface": InputPathType;
    "opt_cerebellum_corrected_areas_area_metric"?: InputPathType | null | undefined;
}


interface CiftiCorrelationGradientDoubleCorrelationParameters {
    "@type": "workbench.cifti-correlation-gradient.double_correlation";
    "opt_fisher_z_first": boolean;
    "opt_no_demean_first": boolean;
    "opt_covariance_first": boolean;
}


interface CiftiCorrelationGradientParameters {
    "@type": "workbench.cifti-correlation-gradient";
    "cifti": InputPathType;
    "cifti_out": string;
    "left_surface"?: CiftiCorrelationGradientLeftSurfaceParameters | null | undefined;
    "right_surface"?: CiftiCorrelationGradientRightSurfaceParameters | null | undefined;
    "cerebellum_surface"?: CiftiCorrelationGradientCerebellumSurfaceParameters | null | undefined;
    "opt_surface_presmooth_surface_kernel"?: number | null | undefined;
    "opt_volume_presmooth_volume_kernel"?: number | null | undefined;
    "opt_presmooth_fwhm": boolean;
    "opt_undo_fisher_z": boolean;
    "opt_fisher_z": boolean;
    "opt_surface_exclude_distance"?: number | null | undefined;
    "opt_volume_exclude_distance"?: number | null | undefined;
    "opt_covariance": boolean;
    "opt_mem_limit_limit_gb"?: number | null | undefined;
    "double_correlation"?: CiftiCorrelationGradientDoubleCorrelationParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-correlation-gradient": cifti_correlation_gradient_cargs,
        "workbench.cifti-correlation-gradient.left_surface": cifti_correlation_gradient_left_surface_cargs,
        "workbench.cifti-correlation-gradient.right_surface": cifti_correlation_gradient_right_surface_cargs,
        "workbench.cifti-correlation-gradient.cerebellum_surface": cifti_correlation_gradient_cerebellum_surface_cargs,
        "workbench.cifti-correlation-gradient.double_correlation": cifti_correlation_gradient_double_correlation_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-correlation-gradient": cifti_correlation_gradient_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param surface the left surface file
 * @param opt_left_corrected_areas_area_metric vertex areas to use instead of computing them from the left surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function cifti_correlation_gradient_left_surface_params(
    surface: InputPathType,
    opt_left_corrected_areas_area_metric: InputPathType | null = null,
): CiftiCorrelationGradientLeftSurfaceParameters {
    const params = {
        "@type": "workbench.cifti-correlation-gradient.left_surface" as const,
        "surface": surface,
    };
    if (opt_left_corrected_areas_area_metric !== null) {
        params["opt_left_corrected_areas_area_metric"] = opt_left_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_correlation_gradient_left_surface_cargs(
    params: CiftiCorrelationGradientLeftSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_left_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-left-corrected-areas",
            execution.inputFile((params["opt_left_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param surface the right surface file
 * @param opt_right_corrected_areas_area_metric vertex areas to use instead of computing them from the right surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function cifti_correlation_gradient_right_surface_params(
    surface: InputPathType,
    opt_right_corrected_areas_area_metric: InputPathType | null = null,
): CiftiCorrelationGradientRightSurfaceParameters {
    const params = {
        "@type": "workbench.cifti-correlation-gradient.right_surface" as const,
        "surface": surface,
    };
    if (opt_right_corrected_areas_area_metric !== null) {
        params["opt_right_corrected_areas_area_metric"] = opt_right_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_correlation_gradient_right_surface_cargs(
    params: CiftiCorrelationGradientRightSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_right_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-right-corrected-areas",
            execution.inputFile((params["opt_right_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param surface the cerebellum surface file
 * @param opt_cerebellum_corrected_areas_area_metric vertex areas to use instead of computing them from the cerebellum surface: the corrected vertex areas, as a metric
 *
 * @returns Parameter dictionary
 */
function cifti_correlation_gradient_cerebellum_surface_params(
    surface: InputPathType,
    opt_cerebellum_corrected_areas_area_metric: InputPathType | null = null,
): CiftiCorrelationGradientCerebellumSurfaceParameters {
    const params = {
        "@type": "workbench.cifti-correlation-gradient.cerebellum_surface" as const,
        "surface": surface,
    };
    if (opt_cerebellum_corrected_areas_area_metric !== null) {
        params["opt_cerebellum_corrected_areas_area_metric"] = opt_cerebellum_corrected_areas_area_metric;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_correlation_gradient_cerebellum_surface_cargs(
    params: CiftiCorrelationGradientCerebellumSurfaceParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-surface");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    if ((params["opt_cerebellum_corrected_areas_area_metric"] ?? null) !== null) {
        cargs.push(
            "-cerebellum-corrected-areas",
            execution.inputFile((params["opt_cerebellum_corrected_areas_area_metric"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build parameters.
 *
 * @param opt_fisher_z_first after the FIRST correlation, apply fisher small z transform (ie, artanh)
 * @param opt_no_demean_first instead of correlation for the FIRST operation, do dot product of rows, then normalize by diagonal
 * @param opt_covariance_first instead of correlation for the FIRST operation, compute covariance
 *
 * @returns Parameter dictionary
 */
function cifti_correlation_gradient_double_correlation_params(
    opt_fisher_z_first: boolean = false,
    opt_no_demean_first: boolean = false,
    opt_covariance_first: boolean = false,
): CiftiCorrelationGradientDoubleCorrelationParameters {
    const params = {
        "@type": "workbench.cifti-correlation-gradient.double_correlation" as const,
        "opt_fisher_z_first": opt_fisher_z_first,
        "opt_no_demean_first": opt_no_demean_first,
        "opt_covariance_first": opt_covariance_first,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_correlation_gradient_double_correlation_cargs(
    params: CiftiCorrelationGradientDoubleCorrelationParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-double-correlation");
    if ((params["opt_fisher_z_first"] ?? null)) {
        cargs.push("-fisher-z-first");
    }
    if ((params["opt_no_demean_first"] ?? null)) {
        cargs.push("-no-demean-first");
    }
    if ((params["opt_covariance_first"] ?? null)) {
        cargs.push("-covariance-first");
    }
    return cargs;
}


/**
 * Output object returned when calling `cifti_correlation_gradient(...)`.
 *
 * @interface
 */
interface CiftiCorrelationGradientOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output cifti
     */
    cifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti the input cifti
 * @param cifti_out the output cifti
 * @param left_surface specify the left surface to use
 * @param right_surface specify the right surface to use
 * @param cerebellum_surface specify the cerebellum surface to use
 * @param opt_surface_presmooth_surface_kernel smooth on the surface before computing the gradient: the size of the gaussian surface smoothing kernel in mm, as sigma by default
 * @param opt_volume_presmooth_volume_kernel smooth the volume before computing the gradient: the size of the gaussian volume smoothing kernel in mm, as sigma by default
 * @param opt_presmooth_fwhm smoothing kernel sizes are FWHM, not sigma
 * @param opt_undo_fisher_z apply the inverse fisher small z transform to the input
 * @param opt_fisher_z apply the fisher small z transform to the correlations before taking the gradient
 * @param opt_surface_exclude_distance exclude vertices near each seed vertex from computation: geodesic distance from seed vertex for the exclusion zone, in mm
 * @param opt_volume_exclude_distance exclude voxels near each seed voxel from computation: distance from seed voxel for the exclusion zone, in mm
 * @param opt_covariance compute covariance instead of correlation
 * @param opt_mem_limit_limit_gb restrict memory usage: memory limit in gigabytes
 * @param double_correlation do two correlations before taking the gradient
 *
 * @returns Parameter dictionary
 */
function cifti_correlation_gradient_params(
    cifti: InputPathType,
    cifti_out: string,
    left_surface: CiftiCorrelationGradientLeftSurfaceParameters | null = null,
    right_surface: CiftiCorrelationGradientRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiCorrelationGradientCerebellumSurfaceParameters | null = null,
    opt_surface_presmooth_surface_kernel: number | null = null,
    opt_volume_presmooth_volume_kernel: number | null = null,
    opt_presmooth_fwhm: boolean = false,
    opt_undo_fisher_z: boolean = false,
    opt_fisher_z: boolean = false,
    opt_surface_exclude_distance: number | null = null,
    opt_volume_exclude_distance: number | null = null,
    opt_covariance: boolean = false,
    opt_mem_limit_limit_gb: number | null = null,
    double_correlation: CiftiCorrelationGradientDoubleCorrelationParameters | null = null,
): CiftiCorrelationGradientParameters {
    const params = {
        "@type": "workbench.cifti-correlation-gradient" as const,
        "cifti": cifti,
        "cifti_out": cifti_out,
        "opt_presmooth_fwhm": opt_presmooth_fwhm,
        "opt_undo_fisher_z": opt_undo_fisher_z,
        "opt_fisher_z": opt_fisher_z,
        "opt_covariance": opt_covariance,
    };
    if (left_surface !== null) {
        params["left_surface"] = left_surface;
    }
    if (right_surface !== null) {
        params["right_surface"] = right_surface;
    }
    if (cerebellum_surface !== null) {
        params["cerebellum_surface"] = cerebellum_surface;
    }
    if (opt_surface_presmooth_surface_kernel !== null) {
        params["opt_surface_presmooth_surface_kernel"] = opt_surface_presmooth_surface_kernel;
    }
    if (opt_volume_presmooth_volume_kernel !== null) {
        params["opt_volume_presmooth_volume_kernel"] = opt_volume_presmooth_volume_kernel;
    }
    if (opt_surface_exclude_distance !== null) {
        params["opt_surface_exclude_distance"] = opt_surface_exclude_distance;
    }
    if (opt_volume_exclude_distance !== null) {
        params["opt_volume_exclude_distance"] = opt_volume_exclude_distance;
    }
    if (opt_mem_limit_limit_gb !== null) {
        params["opt_mem_limit_limit_gb"] = opt_mem_limit_limit_gb;
    }
    if (double_correlation !== null) {
        params["double_correlation"] = double_correlation;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_correlation_gradient_cargs(
    params: CiftiCorrelationGradientParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-correlation-gradient");
    cargs.push(execution.inputFile((params["cifti"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["left_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["left_surface"] ?? null)["@type"])((params["left_surface"] ?? null), execution));
    }
    if ((params["right_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["right_surface"] ?? null)["@type"])((params["right_surface"] ?? null), execution));
    }
    if ((params["cerebellum_surface"] ?? null) !== null) {
        cargs.push(...dynCargs((params["cerebellum_surface"] ?? null)["@type"])((params["cerebellum_surface"] ?? null), execution));
    }
    if ((params["opt_surface_presmooth_surface_kernel"] ?? null) !== null) {
        cargs.push(
            "-surface-presmooth",
            String((params["opt_surface_presmooth_surface_kernel"] ?? null))
        );
    }
    if ((params["opt_volume_presmooth_volume_kernel"] ?? null) !== null) {
        cargs.push(
            "-volume-presmooth",
            String((params["opt_volume_presmooth_volume_kernel"] ?? null))
        );
    }
    if ((params["opt_presmooth_fwhm"] ?? null)) {
        cargs.push("-presmooth-fwhm");
    }
    if ((params["opt_undo_fisher_z"] ?? null)) {
        cargs.push("-undo-fisher-z");
    }
    if ((params["opt_fisher_z"] ?? null)) {
        cargs.push("-fisher-z");
    }
    if ((params["opt_surface_exclude_distance"] ?? null) !== null) {
        cargs.push(
            "-surface-exclude",
            String((params["opt_surface_exclude_distance"] ?? null))
        );
    }
    if ((params["opt_volume_exclude_distance"] ?? null) !== null) {
        cargs.push(
            "-volume-exclude",
            String((params["opt_volume_exclude_distance"] ?? null))
        );
    }
    if ((params["opt_covariance"] ?? null)) {
        cargs.push("-covariance");
    }
    if ((params["opt_mem_limit_limit_gb"] ?? null) !== null) {
        cargs.push(
            "-mem-limit",
            String((params["opt_mem_limit_limit_gb"] ?? null))
        );
    }
    if ((params["double_correlation"] ?? null) !== null) {
        cargs.push(...dynCargs((params["double_correlation"] ?? null)["@type"])((params["double_correlation"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_correlation_gradient_outputs(
    params: CiftiCorrelationGradientParameters,
    execution: Execution,
): CiftiCorrelationGradientOutputs {
    const ret: CiftiCorrelationGradientOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * cifti-correlation-gradient
 *
 * Correlate cifti rows and take gradient.
 *
 * For each structure, compute the correlation of the rows in the structure, and take the gradients of the resulting rows, then average them.  Memory limit does not need to be an integer, you may also specify 0 to use as little memory as possible (this may be very slow).
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiCorrelationGradientOutputs`).
 */
function cifti_correlation_gradient_execute(
    params: CiftiCorrelationGradientParameters,
    runner: Runner | null = null,
): CiftiCorrelationGradientOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CORRELATION_GRADIENT_METADATA);
    params = execution.params(params)
    const cargs = cifti_correlation_gradient_cargs(params, execution)
    const ret = cifti_correlation_gradient_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * cifti-correlation-gradient
 *
 * Correlate cifti rows and take gradient.
 *
 * For each structure, compute the correlation of the rows in the structure, and take the gradients of the resulting rows, then average them.  Memory limit does not need to be an integer, you may also specify 0 to use as little memory as possible (this may be very slow).
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti the input cifti
 * @param cifti_out the output cifti
 * @param left_surface specify the left surface to use
 * @param right_surface specify the right surface to use
 * @param cerebellum_surface specify the cerebellum surface to use
 * @param opt_surface_presmooth_surface_kernel smooth on the surface before computing the gradient: the size of the gaussian surface smoothing kernel in mm, as sigma by default
 * @param opt_volume_presmooth_volume_kernel smooth the volume before computing the gradient: the size of the gaussian volume smoothing kernel in mm, as sigma by default
 * @param opt_presmooth_fwhm smoothing kernel sizes are FWHM, not sigma
 * @param opt_undo_fisher_z apply the inverse fisher small z transform to the input
 * @param opt_fisher_z apply the fisher small z transform to the correlations before taking the gradient
 * @param opt_surface_exclude_distance exclude vertices near each seed vertex from computation: geodesic distance from seed vertex for the exclusion zone, in mm
 * @param opt_volume_exclude_distance exclude voxels near each seed voxel from computation: distance from seed voxel for the exclusion zone, in mm
 * @param opt_covariance compute covariance instead of correlation
 * @param opt_mem_limit_limit_gb restrict memory usage: memory limit in gigabytes
 * @param double_correlation do two correlations before taking the gradient
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiCorrelationGradientOutputs`).
 */
function cifti_correlation_gradient(
    cifti: InputPathType,
    cifti_out: string,
    left_surface: CiftiCorrelationGradientLeftSurfaceParameters | null = null,
    right_surface: CiftiCorrelationGradientRightSurfaceParameters | null = null,
    cerebellum_surface: CiftiCorrelationGradientCerebellumSurfaceParameters | null = null,
    opt_surface_presmooth_surface_kernel: number | null = null,
    opt_volume_presmooth_volume_kernel: number | null = null,
    opt_presmooth_fwhm: boolean = false,
    opt_undo_fisher_z: boolean = false,
    opt_fisher_z: boolean = false,
    opt_surface_exclude_distance: number | null = null,
    opt_volume_exclude_distance: number | null = null,
    opt_covariance: boolean = false,
    opt_mem_limit_limit_gb: number | null = null,
    double_correlation: CiftiCorrelationGradientDoubleCorrelationParameters | null = null,
    runner: Runner | null = null,
): CiftiCorrelationGradientOutputs {
    const params = cifti_correlation_gradient_params(cifti, cifti_out, left_surface, right_surface, cerebellum_surface, opt_surface_presmooth_surface_kernel, opt_volume_presmooth_volume_kernel, opt_presmooth_fwhm, opt_undo_fisher_z, opt_fisher_z, opt_surface_exclude_distance, opt_volume_exclude_distance, opt_covariance, opt_mem_limit_limit_gb, double_correlation)
    return cifti_correlation_gradient_execute(params, runner);
}


export {
      CIFTI_CORRELATION_GRADIENT_METADATA,
      CiftiCorrelationGradientCerebellumSurfaceParameters,
      CiftiCorrelationGradientDoubleCorrelationParameters,
      CiftiCorrelationGradientLeftSurfaceParameters,
      CiftiCorrelationGradientOutputs,
      CiftiCorrelationGradientParameters,
      CiftiCorrelationGradientRightSurfaceParameters,
      cifti_correlation_gradient,
      cifti_correlation_gradient_cerebellum_surface_params,
      cifti_correlation_gradient_double_correlation_params,
      cifti_correlation_gradient_execute,
      cifti_correlation_gradient_left_surface_params,
      cifti_correlation_gradient_params,
      cifti_correlation_gradient_right_surface_params,
};
