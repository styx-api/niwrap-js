// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_BRAIN_SYNC_METADATA: Metadata = {
    id: "36cb746b4c748e8e57c312e3792ccd7d013e7b17.boutiques",
    name: "3dBrainSync",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dBrainSyncParameters {
    "@type": "afni.3dBrainSync";
    "inset1": InputPathType;
    "inset2": InputPathType;
    "qprefix"?: string | null | undefined;
    "pprefix"?: string | null | undefined;
    "normalize": boolean;
    "mask"?: InputPathType | null | undefined;
    "verb": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dBrainSync": v_3d_brain_sync_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dBrainSync": v_3d_brain_sync_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_brain_sync(...)`.
 *
 * @interface
 */
interface V3dBrainSyncOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset after orthogonal matrix transformation
     */
    qprefix_output: OutputPathType | null;
    /**
     * Output dataset after permutation transformation
     */
    pprefix_output: OutputPathType | null;
    /**
     * Singular values from the BC' decomposition
     */
    qprefix_sval: OutputPathType | null;
    /**
     * Q matrix
     */
    qprefix_qmat: OutputPathType | null;
    /**
     * Permutation indexes p(i)
     */
    pprefix_perm: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param inset1 Reference dataset
 * @param inset2 Dataset to be matched to the reference dataset
 * @param qprefix Specifies the output dataset to be used for the orthogonal matrix transformation
 * @param pprefix Specifies the output dataset to be used for the permutation transformation
 * @param normalize Normalize the output dataset(s) so that each time series has sum-of-squares = 1
 * @param mask Only operate on nonzero voxels in the mask dataset
 * @param verb Print some progress reports and auxiliary information
 *
 * @returns Parameter dictionary
 */
function v_3d_brain_sync_params(
    inset1: InputPathType,
    inset2: InputPathType,
    qprefix: string | null = null,
    pprefix: string | null = null,
    normalize: boolean = false,
    mask: InputPathType | null = null,
    verb: boolean = false,
): V3dBrainSyncParameters {
    const params = {
        "@type": "afni.3dBrainSync" as const,
        "inset1": inset1,
        "inset2": inset2,
        "normalize": normalize,
        "verb": verb,
    };
    if (qprefix !== null) {
        params["qprefix"] = qprefix;
    }
    if (pprefix !== null) {
        params["pprefix"] = pprefix;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_brain_sync_cargs(
    params: V3dBrainSyncParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dBrainSync");
    cargs.push(
        "-inset1",
        execution.inputFile((params["inset1"] ?? null))
    );
    cargs.push(
        "-inset2",
        execution.inputFile((params["inset2"] ?? null))
    );
    if ((params["qprefix"] ?? null) !== null) {
        cargs.push(
            "-Qprefix",
            (params["qprefix"] ?? null)
        );
    }
    if ((params["pprefix"] ?? null) !== null) {
        cargs.push(
            "-Pprefix",
            (params["pprefix"] ?? null)
        );
    }
    if ((params["normalize"] ?? null)) {
        cargs.push("-normalize");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["verb"] ?? null)) {
        cargs.push("-verb");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_brain_sync_outputs(
    params: V3dBrainSyncParameters,
    execution: Execution,
): V3dBrainSyncOutputs {
    const ret: V3dBrainSyncOutputs = {
        root: execution.outputFile("."),
        qprefix_output: ((params["qprefix"] ?? null) !== null) ? execution.outputFile([(params["qprefix"] ?? null), ".nii"].join('')) : null,
        pprefix_output: ((params["pprefix"] ?? null) !== null) ? execution.outputFile([(params["pprefix"] ?? null), ".nii"].join('')) : null,
        qprefix_sval: ((params["qprefix"] ?? null) !== null) ? execution.outputFile([(params["qprefix"] ?? null), ".sval.1D"].join('')) : null,
        qprefix_qmat: ((params["qprefix"] ?? null) !== null) ? execution.outputFile([(params["qprefix"] ?? null), ".qmat.1D"].join('')) : null,
        pprefix_perm: ((params["pprefix"] ?? null) !== null) ? execution.outputFile([(params["pprefix"] ?? null), ".perm.1D"].join('')) : null,
    };
    return ret;
}


/**
 * 3dBrainSync
 *
 * 'Synchronizes' the -inset2 dataset to match the -inset1 dataset, using orthogonal or permutation transformation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBrainSyncOutputs`).
 */
function v_3d_brain_sync_execute(
    params: V3dBrainSyncParameters,
    runner: Runner | null = null,
): V3dBrainSyncOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_BRAIN_SYNC_METADATA);
    params = execution.params(params)
    const cargs = v_3d_brain_sync_cargs(params, execution)
    const ret = v_3d_brain_sync_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dBrainSync
 *
 * 'Synchronizes' the -inset2 dataset to match the -inset1 dataset, using orthogonal or permutation transformation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param inset1 Reference dataset
 * @param inset2 Dataset to be matched to the reference dataset
 * @param qprefix Specifies the output dataset to be used for the orthogonal matrix transformation
 * @param pprefix Specifies the output dataset to be used for the permutation transformation
 * @param normalize Normalize the output dataset(s) so that each time series has sum-of-squares = 1
 * @param mask Only operate on nonzero voxels in the mask dataset
 * @param verb Print some progress reports and auxiliary information
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dBrainSyncOutputs`).
 */
function v_3d_brain_sync(
    inset1: InputPathType,
    inset2: InputPathType,
    qprefix: string | null = null,
    pprefix: string | null = null,
    normalize: boolean = false,
    mask: InputPathType | null = null,
    verb: boolean = false,
    runner: Runner | null = null,
): V3dBrainSyncOutputs {
    const params = v_3d_brain_sync_params(inset1, inset2, qprefix, pprefix, normalize, mask, verb)
    return v_3d_brain_sync_execute(params, runner);
}


export {
      V3dBrainSyncOutputs,
      V3dBrainSyncParameters,
      V_3D_BRAIN_SYNC_METADATA,
      v_3d_brain_sync,
      v_3d_brain_sync_execute,
      v_3d_brain_sync_params,
};
