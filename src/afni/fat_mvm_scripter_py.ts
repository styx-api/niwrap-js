// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_MVM_SCRIPTER_PY_METADATA: Metadata = {
    id: "9b3bc9fd729815c1d4263ce94ba8f03463293f18.boutiques",
    name: "fat_mvm_scripter.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatMvmScripterPyParameters {
    "@type"?: "afni/fat_mvm_scripter.py";
    "prefix": string;
    "table": InputPathType;
    "log": InputPathType;
    "vars"?: string | null | undefined;
    "file_vars"?: InputPathType | null | undefined;
    "Pars"?: string | null | undefined;
    "file_Pars"?: InputPathType | null | undefined;
    "rois"?: string | null | undefined;
    "file_rois"?: InputPathType | null | undefined;
    "no_posthoc": boolean;
    "NA_warn_off": boolean;
    "subnet_pref"?: string | null | undefined;
    "cat_pair_off": boolean;
}
type FatMvmScripterPyParametersTagged = Required<Pick<FatMvmScripterPyParameters, '@type'>> & FatMvmScripterPyParameters;


/**
 * Output object returned when calling `FatMvmScripterPyParameters(...)`.
 *
 * @interface
 */
interface FatMvmScripterPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Script for running 3dMVM, using the prescribed variables along with each individual parameter.
     */
    generated_script: OutputPathType;
    /**
     * Text file of the test results.
     */
    results_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Output prefix for the script file, which will ultimately create a PREFIX_MVM.txt file of statistical results from 3dMVM.
 * @param table Text file containing columns of subject data, one subject per row, formatted as a *_MVMtbl.txt output by fat_mvm_prep.py.
 * @param log File formatted according to fat_mvm_prep.py containing commented headings and lists of cross-group ROIs and parameters.
 * @param vars List of variables for the 3dMVM model. Names must be separated with whitespace. Categorical variables will be detected automatically by the presence of nonnumeric characters in their columns.
 * @param file_vars Second method for supplying a list of variables for 3dMVM. VAR_FILE is a text file with a single column of variable names.
 * @param pars List of parameters (names of matrices) to run in distinct 3dMVM models. Names must be separated with whitespace.
 * @param file_pars Second method for supplying a list of parameters for 3dMVM runs. PAR_FILE is a text file with a single column of parameter names.
 * @param rois Optional command to select a subset of available network ROIs. Names must be separated with whitespace.
 * @param file_rois Second method for supplying a subset of ROIs for 3dMVM runs. ROI_FILE is a text file with a single column of variable names.
 * @param no_posthoc Switch to turn off the automatic generation of per-ROI post hoc tests.
 * @param na_warn_off Switch to turn off the automatic warnings as the data table is created. 3dMVM will excise subjects with NA values, so there shouldn't be NA values in columns you want to model.
 * @param subnet_pref Name SUBPR for the new table file that is created when a subnetwork list of ROIs is used.
 * @param cat_pair_off Switch to turn off the test for categorical variables undergoing posthoc testing.
 *
 * @returns Parameter dictionary
 */
function fat_mvm_scripter_py_params(
    prefix: string,
    table: InputPathType,
    log: InputPathType,
    vars: string | null = null,
    file_vars: InputPathType | null = null,
    pars: string | null = null,
    file_pars: InputPathType | null = null,
    rois: string | null = null,
    file_rois: InputPathType | null = null,
    no_posthoc: boolean = false,
    na_warn_off: boolean = false,
    subnet_pref: string | null = null,
    cat_pair_off: boolean = false,
): FatMvmScripterPyParametersTagged {
    const params = {
        "@type": "afni/fat_mvm_scripter.py" as const,
        "prefix": prefix,
        "table": table,
        "log": log,
        "no_posthoc": no_posthoc,
        "NA_warn_off": na_warn_off,
        "cat_pair_off": cat_pair_off,
    };
    if (vars !== null) {
        params["vars"] = vars;
    }
    if (file_vars !== null) {
        params["file_vars"] = file_vars;
    }
    if (pars !== null) {
        params["Pars"] = pars;
    }
    if (file_pars !== null) {
        params["file_Pars"] = file_pars;
    }
    if (rois !== null) {
        params["rois"] = rois;
    }
    if (file_rois !== null) {
        params["file_rois"] = file_rois;
    }
    if (subnet_pref !== null) {
        params["subnet_pref"] = subnet_pref;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_mvm_scripter_py_cargs(
    params: FatMvmScripterPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_mvm_scripter.py");
    cargs.push(
        "--prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "--table",
        execution.inputFile((params["table"] ?? null))
    );
    cargs.push(
        "--log",
        execution.inputFile((params["log"] ?? null))
    );
    if ((params["vars"] ?? null) !== null) {
        cargs.push(
            "--vars",
            (params["vars"] ?? null)
        );
    }
    if ((params["file_vars"] ?? null) !== null) {
        cargs.push(
            "--file_vars",
            execution.inputFile((params["file_vars"] ?? null))
        );
    }
    if ((params["Pars"] ?? null) !== null) {
        cargs.push(
            "--Pars",
            (params["Pars"] ?? null)
        );
    }
    if ((params["file_Pars"] ?? null) !== null) {
        cargs.push(
            "--File_Pars",
            execution.inputFile((params["file_Pars"] ?? null))
        );
    }
    if ((params["rois"] ?? null) !== null) {
        cargs.push(
            "--rois",
            (params["rois"] ?? null)
        );
    }
    if ((params["file_rois"] ?? null) !== null) {
        cargs.push(
            "--file_rois",
            execution.inputFile((params["file_rois"] ?? null))
        );
    }
    if ((params["no_posthoc"] ?? false)) {
        cargs.push("--no_posthoc");
    }
    if ((params["NA_warn_off"] ?? false)) {
        cargs.push("--NA_warn_off");
    }
    if ((params["subnet_pref"] ?? null) !== null) {
        cargs.push(
            "--subnet_pref",
            (params["subnet_pref"] ?? null)
        );
    }
    if ((params["cat_pair_off"] ?? false)) {
        cargs.push("--cat_pair_off");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_mvm_scripter_py_outputs(
    params: FatMvmScripterPyParameters,
    execution: Execution,
): FatMvmScripterPyOutputs {
    const ret: FatMvmScripterPyOutputs = {
        root: execution.outputFile("."),
        generated_script: execution.outputFile([(params["prefix"] ?? null), "_scri.tcsh"].join('')),
        results_file: execution.outputFile([(params["prefix"] ?? null), "_MVM.txt"].join('')),
    };
    return ret;
}


/**
 * fat_mvm_scripter.py
 *
 * Automated tool to create command scripts for 3dMVM statistical modeling.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatMvmScripterPyOutputs`).
 */
function fat_mvm_scripter_py_execute(
    params: FatMvmScripterPyParameters,
    runner: Runner | null = null,
): FatMvmScripterPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_MVM_SCRIPTER_PY_METADATA);
    params = execution.params(params)
    const cargs = fat_mvm_scripter_py_cargs(params, execution)
    const ret = fat_mvm_scripter_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fat_mvm_scripter.py
 *
 * Automated tool to create command scripts for 3dMVM statistical modeling.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Output prefix for the script file, which will ultimately create a PREFIX_MVM.txt file of statistical results from 3dMVM.
 * @param table Text file containing columns of subject data, one subject per row, formatted as a *_MVMtbl.txt output by fat_mvm_prep.py.
 * @param log File formatted according to fat_mvm_prep.py containing commented headings and lists of cross-group ROIs and parameters.
 * @param vars List of variables for the 3dMVM model. Names must be separated with whitespace. Categorical variables will be detected automatically by the presence of nonnumeric characters in their columns.
 * @param file_vars Second method for supplying a list of variables for 3dMVM. VAR_FILE is a text file with a single column of variable names.
 * @param pars List of parameters (names of matrices) to run in distinct 3dMVM models. Names must be separated with whitespace.
 * @param file_pars Second method for supplying a list of parameters for 3dMVM runs. PAR_FILE is a text file with a single column of parameter names.
 * @param rois Optional command to select a subset of available network ROIs. Names must be separated with whitespace.
 * @param file_rois Second method for supplying a subset of ROIs for 3dMVM runs. ROI_FILE is a text file with a single column of variable names.
 * @param no_posthoc Switch to turn off the automatic generation of per-ROI post hoc tests.
 * @param na_warn_off Switch to turn off the automatic warnings as the data table is created. 3dMVM will excise subjects with NA values, so there shouldn't be NA values in columns you want to model.
 * @param subnet_pref Name SUBPR for the new table file that is created when a subnetwork list of ROIs is used.
 * @param cat_pair_off Switch to turn off the test for categorical variables undergoing posthoc testing.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatMvmScripterPyOutputs`).
 */
function fat_mvm_scripter_py(
    prefix: string,
    table: InputPathType,
    log: InputPathType,
    vars: string | null = null,
    file_vars: InputPathType | null = null,
    pars: string | null = null,
    file_pars: InputPathType | null = null,
    rois: string | null = null,
    file_rois: InputPathType | null = null,
    no_posthoc: boolean = false,
    na_warn_off: boolean = false,
    subnet_pref: string | null = null,
    cat_pair_off: boolean = false,
    runner: Runner | null = null,
): FatMvmScripterPyOutputs {
    const params = fat_mvm_scripter_py_params(prefix, table, log, vars, file_vars, pars, file_pars, rois, file_rois, no_posthoc, na_warn_off, subnet_pref, cat_pair_off)
    return fat_mvm_scripter_py_execute(params, runner);
}


export {
      FAT_MVM_SCRIPTER_PY_METADATA,
      FatMvmScripterPyOutputs,
      fat_mvm_scripter_py,
      fat_mvm_scripter_py_execute,
      fat_mvm_scripter_py_params,
};
