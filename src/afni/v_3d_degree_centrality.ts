// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_DEGREE_CENTRALITY_METADATA: Metadata = {
    id: "92d1c07bfff26718b69be19ce1645a7154290cb7.boutiques",
    name: "3dDegreeCentrality",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dDegreeCentralityParameters {
    "@type"?: "afni/3dDegreeCentrality";
    "autoclip": boolean;
    "automask": boolean;
    "in_file": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "oned_file"?: string | null | undefined;
    "polort"?: number | null | undefined;
    "sparsity"?: number | null | undefined;
    "thresh"?: number | null | undefined;
}
type V3dDegreeCentralityParametersTagged = Required<Pick<V3dDegreeCentralityParameters, '@type'>> & V3dDegreeCentralityParameters;


/**
 * Output object returned when calling `V3dDegreeCentralityParameters(...)`.
 *
 * @interface
 */
interface V3dDegreeCentralityOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file name.
     */
    out_file: OutputPathType;
    /**
     * The text output of the similarity matrix computed after thresholding with one-dimensional and ijk voxel indices, correlations, image extents, and affine matrix.
     */
    oned_file_outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_file Input file to 3ddegreecentrality.
 * @param autoclip Clip off low-intensity regions in the dataset.
 * @param automask Mask the dataset to target brain-only voxels.
 * @param mask Mask file to mask input data.
 * @param oned_file Output filepath to text dump of correlation matrix.
 * @param polort No description provided.
 * @param sparsity Only take the top percent of connections.
 * @param thresh Threshold to exclude connections where corr <= thresh.
 *
 * @returns Parameter dictionary
 */
function v_3d_degree_centrality_params(
    in_file: InputPathType,
    autoclip: boolean = false,
    automask: boolean = false,
    mask: InputPathType | null = null,
    oned_file: string | null = null,
    polort: number | null = null,
    sparsity: number | null = null,
    thresh: number | null = null,
): V3dDegreeCentralityParametersTagged {
    const params = {
        "@type": "afni/3dDegreeCentrality" as const,
        "autoclip": autoclip,
        "automask": automask,
        "in_file": in_file,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (oned_file !== null) {
        params["oned_file"] = oned_file;
    }
    if (polort !== null) {
        params["polort"] = polort;
    }
    if (sparsity !== null) {
        params["sparsity"] = sparsity;
    }
    if (thresh !== null) {
        params["thresh"] = thresh;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_degree_centrality_cargs(
    params: V3dDegreeCentralityParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dDegreeCentrality");
    if ((params["autoclip"] ?? false)) {
        cargs.push("-autoclip");
    }
    if ((params["automask"] ?? false)) {
        cargs.push("-automask");
    }
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["oned_file"] ?? null) !== null) {
        cargs.push(
            "-out1D",
            (params["oned_file"] ?? null)
        );
    }
    if ((params["polort"] ?? null) !== null) {
        cargs.push(
            "-polort",
            String((params["polort"] ?? null))
        );
    }
    if ((params["sparsity"] ?? null) !== null) {
        cargs.push(
            "-sparsity",
            String((params["sparsity"] ?? null))
        );
    }
    if ((params["thresh"] ?? null) !== null) {
        cargs.push(
            "-thresh",
            String((params["thresh"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_degree_centrality_outputs(
    params: V3dDegreeCentralityParameters,
    execution: Execution,
): V3dDegreeCentralityOutputs {
    const ret: V3dDegreeCentralityOutputs = {
        root: execution.outputFile("."),
        out_file: execution.outputFile([path.basename((params["in_file"] ?? null))].join('')),
        oned_file_outfile: ((params["oned_file"] ?? null) !== null) ? execution.outputFile([(params["oned_file"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dDegreeCentrality
 *
 * Computes voxelwise weighted and binary degree centrality and stores the result in a new 3D bucket dataset as floats to preserve their values. Degree centrality reflects the strength and extent of the correlation of a voxel with every other voxel in the brain. .
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDegreeCentralityOutputs`).
 */
function v_3d_degree_centrality_execute(
    params: V3dDegreeCentralityParameters,
    runner: Runner | null = null,
): V3dDegreeCentralityOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_DEGREE_CENTRALITY_METADATA);
    params = execution.params(params)
    const cargs = v_3d_degree_centrality_cargs(params, execution)
    const ret = v_3d_degree_centrality_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dDegreeCentrality
 *
 * Computes voxelwise weighted and binary degree centrality and stores the result in a new 3D bucket dataset as floats to preserve their values. Degree centrality reflects the strength and extent of the correlation of a voxel with every other voxel in the brain. .
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_file Input file to 3ddegreecentrality.
 * @param autoclip Clip off low-intensity regions in the dataset.
 * @param automask Mask the dataset to target brain-only voxels.
 * @param mask Mask file to mask input data.
 * @param oned_file Output filepath to text dump of correlation matrix.
 * @param polort No description provided.
 * @param sparsity Only take the top percent of connections.
 * @param thresh Threshold to exclude connections where corr <= thresh.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dDegreeCentralityOutputs`).
 */
function v_3d_degree_centrality(
    in_file: InputPathType,
    autoclip: boolean = false,
    automask: boolean = false,
    mask: InputPathType | null = null,
    oned_file: string | null = null,
    polort: number | null = null,
    sparsity: number | null = null,
    thresh: number | null = null,
    runner: Runner | null = null,
): V3dDegreeCentralityOutputs {
    const params = v_3d_degree_centrality_params(in_file, autoclip, automask, mask, oned_file, polort, sparsity, thresh)
    return v_3d_degree_centrality_execute(params, runner);
}


export {
      V3dDegreeCentralityOutputs,
      V_3D_DEGREE_CENTRALITY_METADATA,
      v_3d_degree_centrality,
      v_3d_degree_centrality_execute,
      v_3d_degree_centrality_params,
};
