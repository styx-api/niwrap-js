// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_ANNOTATION2LABEL_METADATA: Metadata = {
    id: "55fc21182a781a7f38a958280013700685656b3a.boutiques",
    name: "mri_annotation2label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriAnnotation2labelParameters {
    "@type": "freesurfer.mri_annotation2label";
    "subject": string;
    "hemi": string;
    "lobes"?: InputPathType | null | undefined;
    "lobes_strict"?: InputPathType | null | undefined;
    "lobes_strict_phcg"?: InputPathType | null | undefined;
    "label"?: number | null | undefined;
    "labelbase"?: string | null | undefined;
    "outdir"?: string | null | undefined;
    "seg"?: InputPathType | null | undefined;
    "segbase"?: number | null | undefined;
    "ctab"?: InputPathType | null | undefined;
    "border"?: InputPathType | null | undefined;
    "border_annot"?: string | null | undefined;
    "annotation"?: string | null | undefined;
    "subjects_dir"?: string | null | undefined;
    "surface"?: string | null | undefined;
    "stat"?: InputPathType | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_annotation2label": mri_annotation2label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_annotation2label(...)`.
 *
 * @interface
 */
interface MriAnnotation2labelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Source subject
 * @param hemi Hemisphere (lh or rh) with surface
 * @param lobes Create an annotation based on cortical lobes, saved to <LobesFile>.
 * @param lobes_strict Use a stricter lobe definition with precentral added to 'frontal' and postcentral with 'parietal', saved to <LobesFile>.
 * @param lobes_strict_phcg Use a stricter lobe definition with an additional lobe 'parahippocampalgyrus', saved to <LobesFile>.
 * @param label Extract only single label.
 * @param labelbase Output will be base-XXX.label.
 * @param outdir Output will be in dir/hemi.name.label.
 * @param seg Output will be a segmentation volume.
 * @param segbase Add base to the annotation number to get segmentation value.
 * @param ctab Color table, like FreeSurferColorLUT.txt.
 * @param border Output will be a binary overlay of the parc borders.
 * @param border_annot Default goes in subject/label.
 * @param annotation As found in SUBJDIR/labels <aparc>.
 * @param subjects_dir Specify SUBJECTS_DIR on the command line.
 * @param surface Name of surface <white>. Only affect xyz in label.
 * @param stat Surface overlay file (curv or volume format).
 * @param help Display help.
 * @param version Display version.
 *
 * @returns Parameter dictionary
 */
function mri_annotation2label_params(
    subject: string,
    hemi: string,
    lobes: InputPathType | null = null,
    lobes_strict: InputPathType | null = null,
    lobes_strict_phcg: InputPathType | null = null,
    label: number | null = null,
    labelbase: string | null = null,
    outdir: string | null = null,
    seg: InputPathType | null = null,
    segbase: number | null = null,
    ctab: InputPathType | null = null,
    border: InputPathType | null = null,
    border_annot: string | null = null,
    annotation: string | null = null,
    subjects_dir: string | null = null,
    surface: string | null = null,
    stat: InputPathType | null = null,
    help: boolean = false,
    version: boolean = false,
): MriAnnotation2labelParameters {
    const params = {
        "@type": "freesurfer.mri_annotation2label" as const,
        "subject": subject,
        "hemi": hemi,
        "help": help,
        "version": version,
    };
    if (lobes !== null) {
        params["lobes"] = lobes;
    }
    if (lobes_strict !== null) {
        params["lobes_strict"] = lobes_strict;
    }
    if (lobes_strict_phcg !== null) {
        params["lobes_strict_phcg"] = lobes_strict_phcg;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (labelbase !== null) {
        params["labelbase"] = labelbase;
    }
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (seg !== null) {
        params["seg"] = seg;
    }
    if (segbase !== null) {
        params["segbase"] = segbase;
    }
    if (ctab !== null) {
        params["ctab"] = ctab;
    }
    if (border !== null) {
        params["border"] = border;
    }
    if (border_annot !== null) {
        params["border_annot"] = border_annot;
    }
    if (annotation !== null) {
        params["annotation"] = annotation;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (surface !== null) {
        params["surface"] = surface;
    }
    if (stat !== null) {
        params["stat"] = stat;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_annotation2label_cargs(
    params: MriAnnotation2labelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_annotation2label");
    cargs.push(
        "--subject",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--hemi",
        (params["hemi"] ?? null)
    );
    if ((params["lobes"] ?? null) !== null) {
        cargs.push(
            "--lobes",
            execution.inputFile((params["lobes"] ?? null))
        );
    }
    if ((params["lobes_strict"] ?? null) !== null) {
        cargs.push(
            "--lobesStrict",
            execution.inputFile((params["lobes_strict"] ?? null))
        );
    }
    if ((params["lobes_strict_phcg"] ?? null) !== null) {
        cargs.push(
            "--lobesStrictPHCG",
            execution.inputFile((params["lobes_strict_phcg"] ?? null))
        );
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "--label",
            String((params["label"] ?? null))
        );
    }
    if ((params["labelbase"] ?? null) !== null) {
        cargs.push(
            "--labelbase",
            (params["labelbase"] ?? null)
        );
    }
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "--outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["seg"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["seg"] ?? null))
        );
    }
    if ((params["segbase"] ?? null) !== null) {
        cargs.push(
            "--segbase",
            String((params["segbase"] ?? null))
        );
    }
    if ((params["ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab"] ?? null))
        );
    }
    if ((params["border"] ?? null) !== null) {
        cargs.push(
            "--border",
            execution.inputFile((params["border"] ?? null))
        );
    }
    if ((params["border_annot"] ?? null) !== null) {
        cargs.push(
            "--border-annot",
            (params["border_annot"] ?? null)
        );
    }
    if ((params["annotation"] ?? null) !== null) {
        cargs.push(
            "--annotation",
            (params["annotation"] ?? null)
        );
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["surface"] ?? null) !== null) {
        cargs.push(
            "--surface",
            (params["surface"] ?? null)
        );
    }
    if ((params["stat"] ?? null) !== null) {
        cargs.push(
            "--stat",
            execution.inputFile((params["stat"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_annotation2label_outputs(
    params: MriAnnotation2labelParameters,
    execution: Execution,
): MriAnnotation2labelOutputs {
    const ret: MriAnnotation2labelOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_annotation2label
 *
 * Convert an annotation into multiple label files or into a segmentation volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAnnotation2labelOutputs`).
 */
function mri_annotation2label_execute(
    params: MriAnnotation2labelParameters,
    runner: Runner | null = null,
): MriAnnotation2labelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_ANNOTATION2LABEL_METADATA);
    params = execution.params(params)
    const cargs = mri_annotation2label_cargs(params, execution)
    const ret = mri_annotation2label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_annotation2label
 *
 * Convert an annotation into multiple label files or into a segmentation volume.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Source subject
 * @param hemi Hemisphere (lh or rh) with surface
 * @param lobes Create an annotation based on cortical lobes, saved to <LobesFile>.
 * @param lobes_strict Use a stricter lobe definition with precentral added to 'frontal' and postcentral with 'parietal', saved to <LobesFile>.
 * @param lobes_strict_phcg Use a stricter lobe definition with an additional lobe 'parahippocampalgyrus', saved to <LobesFile>.
 * @param label Extract only single label.
 * @param labelbase Output will be base-XXX.label.
 * @param outdir Output will be in dir/hemi.name.label.
 * @param seg Output will be a segmentation volume.
 * @param segbase Add base to the annotation number to get segmentation value.
 * @param ctab Color table, like FreeSurferColorLUT.txt.
 * @param border Output will be a binary overlay of the parc borders.
 * @param border_annot Default goes in subject/label.
 * @param annotation As found in SUBJDIR/labels <aparc>.
 * @param subjects_dir Specify SUBJECTS_DIR on the command line.
 * @param surface Name of surface <white>. Only affect xyz in label.
 * @param stat Surface overlay file (curv or volume format).
 * @param help Display help.
 * @param version Display version.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAnnotation2labelOutputs`).
 */
function mri_annotation2label(
    subject: string,
    hemi: string,
    lobes: InputPathType | null = null,
    lobes_strict: InputPathType | null = null,
    lobes_strict_phcg: InputPathType | null = null,
    label: number | null = null,
    labelbase: string | null = null,
    outdir: string | null = null,
    seg: InputPathType | null = null,
    segbase: number | null = null,
    ctab: InputPathType | null = null,
    border: InputPathType | null = null,
    border_annot: string | null = null,
    annotation: string | null = null,
    subjects_dir: string | null = null,
    surface: string | null = null,
    stat: InputPathType | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MriAnnotation2labelOutputs {
    const params = mri_annotation2label_params(subject, hemi, lobes, lobes_strict, lobes_strict_phcg, label, labelbase, outdir, seg, segbase, ctab, border, border_annot, annotation, subjects_dir, surface, stat, help, version)
    return mri_annotation2label_execute(params, runner);
}


export {
      MRI_ANNOTATION2LABEL_METADATA,
      MriAnnotation2labelOutputs,
      MriAnnotation2labelParameters,
      mri_annotation2label,
      mri_annotation2label_execute,
      mri_annotation2label_params,
};
