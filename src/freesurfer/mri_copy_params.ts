// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_COPY_PARAMS_METADATA: Metadata = {
    id: "04ff7772827c0d2910e0be4cad90ac6d7da938f2.boutiques",
    name: "mri_copy_params",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriCopyParamsParameters {
    "__STYXTYPE__": "mri_copy_params";
    "in_vol": InputPathType;
    "template_vol": InputPathType;
    "out_vol": string;
    "size_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_copy_params": mri_copy_params_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_copy_params": mri_copy_params_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_copy_params(...)`.
 *
 * @interface
 */
interface MriCopyParamsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume file with parameters copied.
     */
    output_volume: OutputPathType;
}


function mri_copy_params_params(
    in_vol: InputPathType,
    template_vol: InputPathType,
    out_vol: string,
    size_flag: boolean = false,
): MriCopyParamsParameters {
    /**
     * Build parameters.
    
     * @param in_vol Input volume file whose parameters will be replaced.
     * @param template_vol Template volume file whose parameters will be copied.
     * @param out_vol Output volume file with replaced parameters.
     * @param size_flag Force copying of voxel sizes when resolutions vary.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_copy_params" as const,
        "in_vol": in_vol,
        "template_vol": template_vol,
        "out_vol": out_vol,
        "size_flag": size_flag,
    };
    return params;
}


function mri_copy_params_cargs(
    params: MriCopyParamsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_copy_params");
    cargs.push(execution.inputFile((params["in_vol"] ?? null)));
    cargs.push(execution.inputFile((params["template_vol"] ?? null)));
    cargs.push((params["out_vol"] ?? null));
    if ((params["size_flag"] ?? null)) {
        cargs.push("--size");
    }
    return cargs;
}


function mri_copy_params_outputs(
    params: MriCopyParamsParameters,
    execution: Execution,
): MriCopyParamsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriCopyParamsOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile([(params["out_vol"] ?? null)].join('')),
    };
    return ret;
}


function mri_copy_params_execute(
    params: MriCopyParamsParameters,
    execution: Execution,
): MriCopyParamsOutputs {
    /**
     * A tool to replace the volume parameters of an input volume with those of a template volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriCopyParamsOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_copy_params_cargs(params, execution)
    const ret = mri_copy_params_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_copy_params(
    in_vol: InputPathType,
    template_vol: InputPathType,
    out_vol: string,
    size_flag: boolean = false,
    runner: Runner | null = null,
): MriCopyParamsOutputs {
    /**
     * A tool to replace the volume parameters of an input volume with those of a template volume.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param in_vol Input volume file whose parameters will be replaced.
     * @param template_vol Template volume file whose parameters will be copied.
     * @param out_vol Output volume file with replaced parameters.
     * @param size_flag Force copying of voxel sizes when resolutions vary.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriCopyParamsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_COPY_PARAMS_METADATA);
    const params = mri_copy_params_params(in_vol, template_vol, out_vol, size_flag)
    return mri_copy_params_execute(params, execution);
}


export {
      MRI_COPY_PARAMS_METADATA,
      MriCopyParamsOutputs,
      MriCopyParamsParameters,
      mri_copy_params,
      mri_copy_params_params,
};
