// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MPR2MNI305_METADATA: Metadata = {
    id: "06578c48b79fc7cf0a25d7f90572e339f54dc80e.boutiques",
    name: "mpr2mni305",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Mpr2mni305Parameters {
    "@type"?: "freesurfer/mpr2mni305";
    "mpr_anat": string;
}
type Mpr2mni305ParametersTagged = Required<Pick<Mpr2mni305Parameters, '@type'>> & Mpr2mni305Parameters;


/**
 * Output object returned when calling `Mpr2mni305Parameters(...)`.
 *
 * @interface
 */
interface Mpr2mni305Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param mpr_anat MPRAGE anatomical input file (e.g., 131)
 *
 * @returns Parameter dictionary
 */
function mpr2mni305_params(
    mpr_anat: string,
): Mpr2mni305ParametersTagged {
    const params = {
        "@type": "freesurfer/mpr2mni305" as const,
        "mpr_anat": mpr_anat,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mpr2mni305_cargs(
    params: Mpr2mni305Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mpr2mni305");
    cargs.push((params["mpr_anat"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mpr2mni305_outputs(
    params: Mpr2mni305Parameters,
    execution: Execution,
): Mpr2mni305Outputs {
    const ret: Mpr2mni305Outputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mpr2mni305
 *
 * Tool for transforming MPRAGE dataset to MNI305 coordinate space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Mpr2mni305Outputs`).
 */
function mpr2mni305_execute(
    params: Mpr2mni305Parameters,
    runner: Runner | null = null,
): Mpr2mni305Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MPR2MNI305_METADATA);
    params = execution.params(params)
    const cargs = mpr2mni305_cargs(params, execution)
    const ret = mpr2mni305_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mpr2mni305
 *
 * Tool for transforming MPRAGE dataset to MNI305 coordinate space.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param mpr_anat MPRAGE anatomical input file (e.g., 131)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Mpr2mni305Outputs`).
 */
function mpr2mni305(
    mpr_anat: string,
    runner: Runner | null = null,
): Mpr2mni305Outputs {
    const params = mpr2mni305_params(mpr_anat)
    return mpr2mni305_execute(params, runner);
}


export {
      MPR2MNI305_METADATA,
      Mpr2mni305Outputs,
      mpr2mni305,
      mpr2mni305_execute,
      mpr2mni305_params,
};
