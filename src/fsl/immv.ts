// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const IMMV_METADATA: Metadata = {
    id: "44ec8b1b3324cc2a5621203b5bcc839d1c6cbcd8.boutiques",
    name: "immv",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ImmvParameters {
    "@type": "fsl.immv";
    "source_files": Array<InputPathType>;
    "destination": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.immv": immv_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `immv(...)`.
 *
 * @interface
 */
interface ImmvOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source_files Source files to be moved. Recognized file extensions: .nii.gz, .nii, .img, .hdr, .img.gz, .hdr.gz
 * @param destination Destination file or directory.
 *
 * @returns Parameter dictionary
 */
function immv_params(
    source_files: Array<InputPathType>,
    destination: string,
): ImmvParameters {
    const params = {
        "@type": "fsl.immv" as const,
        "source_files": source_files,
        "destination": destination,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function immv_cargs(
    params: ImmvParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("immv");
    cargs.push(...(params["source_files"] ?? null).map(f => execution.inputFile(f)));
    cargs.push((params["destination"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function immv_outputs(
    params: ImmvParameters,
    execution: Execution,
): ImmvOutputs {
    const ret: ImmvOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Moves images from one file or directory to another.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `ImmvOutputs`).
 */
function immv_execute(
    params: ImmvParameters,
    execution: Execution,
): ImmvOutputs {
    params = execution.params(params)
    const cargs = immv_cargs(params, execution)
    const ret = immv_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Moves images from one file or directory to another.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param source_files Source files to be moved. Recognized file extensions: .nii.gz, .nii, .img, .hdr, .img.gz, .hdr.gz
 * @param destination Destination file or directory.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ImmvOutputs`).
 */
function immv(
    source_files: Array<InputPathType>,
    destination: string,
    runner: Runner | null = null,
): ImmvOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(IMMV_METADATA);
    const params = immv_params(source_files, destination)
    return immv_execute(params, execution);
}


export {
      IMMV_METADATA,
      ImmvOutputs,
      ImmvParameters,
      immv,
      immv_cargs,
      immv_execute,
      immv_outputs,
      immv_params,
};
