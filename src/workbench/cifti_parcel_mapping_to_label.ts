// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_PARCEL_MAPPING_TO_LABEL_METADATA: Metadata = {
    id: "b44cc01ba36b557b2f850042074db9952a76ba43.boutiques",
    name: "cifti-parcel-mapping-to-label",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiParcelMappingToLabelParameters {
    "@type": "workbench.cifti-parcel-mapping-to-label";
    "cifti_in": InputPathType;
    "direction": string;
    "template_cifti": InputPathType;
    "dlabel_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.cifti-parcel-mapping-to-label": cifti_parcel_mapping_to_label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.cifti-parcel-mapping-to-label": cifti_parcel_mapping_to_label_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cifti_parcel_mapping_to_label(...)`.
 *
 * @interface
 */
interface CiftiParcelMappingToLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output dense label file
     */
    dlabel_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param cifti_in the input parcellated file
 * @param direction which dimension to take the parcel map from, ROW or COLUMN
 * @param template_cifti a cifti file with the desired dense mapping along column
 * @param dlabel_out the output dense label file
 *
 * @returns Parameter dictionary
 */
function cifti_parcel_mapping_to_label_params(
    cifti_in: InputPathType,
    direction: string,
    template_cifti: InputPathType,
    dlabel_out: string,
): CiftiParcelMappingToLabelParameters {
    const params = {
        "@type": "workbench.cifti-parcel-mapping-to-label" as const,
        "cifti_in": cifti_in,
        "direction": direction,
        "template_cifti": template_cifti,
        "dlabel_out": dlabel_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function cifti_parcel_mapping_to_label_cargs(
    params: CiftiParcelMappingToLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-parcel-mapping-to-label");
    cargs.push(execution.inputFile((params["cifti_in"] ?? null)));
    cargs.push((params["direction"] ?? null));
    cargs.push(execution.inputFile((params["template_cifti"] ?? null)));
    cargs.push((params["dlabel_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function cifti_parcel_mapping_to_label_outputs(
    params: CiftiParcelMappingToLabelParameters,
    execution: Execution,
): CiftiParcelMappingToLabelOutputs {
    const ret: CiftiParcelMappingToLabelOutputs = {
        root: execution.outputFile("."),
        dlabel_out: execution.outputFile([(params["dlabel_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Create dlabel from parcellated file.
 *
 * This command will output a dlabel file, useful for doing the same parcellation to another dense file.
 *
 * For ptseries, pscalar, plabel, pconn, and pdconn, using COLUMN for <direction> will work.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiParcelMappingToLabelOutputs`).
 */
function cifti_parcel_mapping_to_label_execute(
    params: CiftiParcelMappingToLabelParameters,
    runner: Runner | null = null,
): CiftiParcelMappingToLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_PARCEL_MAPPING_TO_LABEL_METADATA);
    params = execution.params(params)
    const cargs = cifti_parcel_mapping_to_label_cargs(params, execution)
    const ret = cifti_parcel_mapping_to_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Create dlabel from parcellated file.
 *
 * This command will output a dlabel file, useful for doing the same parcellation to another dense file.
 *
 * For ptseries, pscalar, plabel, pconn, and pdconn, using COLUMN for <direction> will work.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param cifti_in the input parcellated file
 * @param direction which dimension to take the parcel map from, ROW or COLUMN
 * @param template_cifti a cifti file with the desired dense mapping along column
 * @param dlabel_out the output dense label file
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CiftiParcelMappingToLabelOutputs`).
 */
function cifti_parcel_mapping_to_label(
    cifti_in: InputPathType,
    direction: string,
    template_cifti: InputPathType,
    dlabel_out: string,
    runner: Runner | null = null,
): CiftiParcelMappingToLabelOutputs {
    const params = cifti_parcel_mapping_to_label_params(cifti_in, direction, template_cifti, dlabel_out)
    return cifti_parcel_mapping_to_label_execute(params, runner);
}


export {
      CIFTI_PARCEL_MAPPING_TO_LABEL_METADATA,
      CiftiParcelMappingToLabelOutputs,
      CiftiParcelMappingToLabelParameters,
      cifti_parcel_mapping_to_label,
      cifti_parcel_mapping_to_label_execute,
      cifti_parcel_mapping_to_label_params,
};
