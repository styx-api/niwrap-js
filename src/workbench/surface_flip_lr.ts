// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_FLIP_LR_METADATA: Metadata = {
    id: "ee8ef63d7e751c54f67f811c70c07449c11152b4.boutiques",
    name: "surface-flip-lr",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceFlipLrParameters {
    "__STYXTYPE__": "surface-flip-lr";
    "surface": InputPathType;
    "surface_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-flip-lr": surface_flip_lr_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-flip-lr": surface_flip_lr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_flip_lr(...)`.
 *
 * @interface
 */
interface SurfaceFlipLrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output flipped surface
     */
    surface_out: OutputPathType;
}


function surface_flip_lr_params(
    surface: InputPathType,
    surface_out: string,
): SurfaceFlipLrParameters {
    /**
     * Build parameters.
    
     * @param surface the surface to flip
     * @param surface_out the output flipped surface
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-flip-lr" as const,
        "surface": surface,
        "surface_out": surface_out,
    };
    return params;
}


function surface_flip_lr_cargs(
    params: SurfaceFlipLrParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-flip-lr");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["surface_out"] ?? null));
    return cargs;
}


function surface_flip_lr_outputs(
    params: SurfaceFlipLrParameters,
    execution: Execution,
): SurfaceFlipLrOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceFlipLrOutputs = {
        root: execution.outputFile("."),
        surface_out: execution.outputFile([(params["surface_out"] ?? null)].join('')),
    };
    return ret;
}


function surface_flip_lr_execute(
    params: SurfaceFlipLrParameters,
    execution: Execution,
): SurfaceFlipLrOutputs {
    /**
     * Mirror a surface through the yz plane.
     * 
     * This command negates the x coordinate of each vertex, and flips the surface normals, so that you have a surface of opposite handedness with the same features and vertex correspondence, with normals consistent with the original surface.  That is, if the input surface has normals facing outward, the output surface will also have normals facing outward.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceFlipLrOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_flip_lr_cargs(params, execution)
    const ret = surface_flip_lr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_flip_lr(
    surface: InputPathType,
    surface_out: string,
    runner: Runner | null = null,
): SurfaceFlipLrOutputs {
    /**
     * Mirror a surface through the yz plane.
     * 
     * This command negates the x coordinate of each vertex, and flips the surface normals, so that you have a surface of opposite handedness with the same features and vertex correspondence, with normals consistent with the original surface.  That is, if the input surface has normals facing outward, the output surface will also have normals facing outward.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface the surface to flip
     * @param surface_out the output flipped surface
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceFlipLrOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_FLIP_LR_METADATA);
    const params = surface_flip_lr_params(surface, surface_out)
    return surface_flip_lr_execute(params, execution);
}


export {
      SURFACE_FLIP_LR_METADATA,
      SurfaceFlipLrOutputs,
      SurfaceFlipLrParameters,
      surface_flip_lr,
      surface_flip_lr_params,
};
