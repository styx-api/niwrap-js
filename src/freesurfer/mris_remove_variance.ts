// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_REMOVE_VARIANCE_METADATA: Metadata = {
    id: "179ff3984d2be9f6ba0b11909b268c8560dc15ee.boutiques",
    name: "mris_remove_variance",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRemoveVarianceParameters {
    "__STYXTYPE__": "mris_remove_variance";
    "input_surface_file": InputPathType;
    "curvature_file": InputPathType;
    "curvature_file_to_remove": InputPathType;
    "output_curvature_file": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_remove_variance": mris_remove_variance_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_remove_variance": mris_remove_variance_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_remove_variance(...)`.
 *
 * @interface
 */
interface MrisRemoveVarianceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting curvature file after removing variance.
     */
    resulting_curvature_file: OutputPathType;
}


function mris_remove_variance_params(
    input_surface_file: InputPathType,
    curvature_file: InputPathType,
    curvature_file_to_remove: InputPathType,
    output_curvature_file: string,
): MrisRemoveVarianceParameters {
    /**
     * Build parameters.
    
     * @param input_surface_file The input surface file.
     * @param curvature_file The curvature file.
     * @param curvature_file_to_remove The curvature file to remove from the input curvature.
     * @param output_curvature_file The output curvature file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_remove_variance" as const,
        "input_surface_file": input_surface_file,
        "curvature_file": curvature_file,
        "curvature_file_to_remove": curvature_file_to_remove,
        "output_curvature_file": output_curvature_file,
    };
    return params;
}


function mris_remove_variance_cargs(
    params: MrisRemoveVarianceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_remove_variance");
    cargs.push(execution.inputFile((params["input_surface_file"] ?? null)));
    cargs.push(execution.inputFile((params["curvature_file"] ?? null)));
    cargs.push(execution.inputFile((params["curvature_file_to_remove"] ?? null)));
    cargs.push((params["output_curvature_file"] ?? null));
    return cargs;
}


function mris_remove_variance_outputs(
    params: MrisRemoveVarianceParameters,
    execution: Execution,
): MrisRemoveVarianceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisRemoveVarianceOutputs = {
        root: execution.outputFile("."),
        resulting_curvature_file: execution.outputFile([(params["output_curvature_file"] ?? null)].join('')),
    };
    return ret;
}


function mris_remove_variance_execute(
    params: MrisRemoveVarianceParameters,
    execution: Execution,
): MrisRemoveVarianceOutputs {
    /**
     * This program removes the linear component of the variance accounted for by one curvature vector from another.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisRemoveVarianceOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_remove_variance_cargs(params, execution)
    const ret = mris_remove_variance_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_remove_variance(
    input_surface_file: InputPathType,
    curvature_file: InputPathType,
    curvature_file_to_remove: InputPathType,
    output_curvature_file: string,
    runner: Runner | null = null,
): MrisRemoveVarianceOutputs {
    /**
     * This program removes the linear component of the variance accounted for by one curvature vector from another.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_surface_file The input surface file.
     * @param curvature_file The curvature file.
     * @param curvature_file_to_remove The curvature file to remove from the input curvature.
     * @param output_curvature_file The output curvature file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisRemoveVarianceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_REMOVE_VARIANCE_METADATA);
    const params = mris_remove_variance_params(input_surface_file, curvature_file, curvature_file_to_remove, output_curvature_file)
    return mris_remove_variance_execute(params, execution);
}


export {
      MRIS_REMOVE_VARIANCE_METADATA,
      MrisRemoveVarianceOutputs,
      MrisRemoveVarianceParameters,
      mris_remove_variance,
      mris_remove_variance_params,
};
