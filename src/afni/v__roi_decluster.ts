// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ROI_DECLUSTER_METADATA: Metadata = {
    id: "cbc503162b576cbf2707a1fe573e7f99a6511b70.boutiques",
    name: "@ROI_decluster",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VRoiDeclusterParameters {
    "@type"?: "afni/@ROI_decluster";
    "input_dset": InputPathType;
    "output_dir"?: string | null | undefined;
    "nvox_thresh"?: number | null | undefined;
    "frac_thresh"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "neighborhood_type"?: number | null | undefined;
}
type VRoiDeclusterParametersTagged = Required<Pick<VRoiDeclusterParameters, '@type'>> & VRoiDeclusterParameters;


/**
 * Output object returned when calling `VRoiDeclusterParameters(...)`.
 *
 * @interface
 */
interface VRoiDeclusterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Final output dataset
     */
    output_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input_dset Required input dataset. This dataset should be set of integer values. The program mostly assumes approximate isotropic voxels.
 * @param output_dir Directory name for output. All output goes to this directory.
 * @param nvox_thresh Number of voxels in a cluster to keep
 * @param frac_thresh Fraction of voxels in a cluster to keep [0.0-1.0]
 * @param prefix Base name of final output dataset, i.e. baseprefix.nii.gz
 * @param neighborhood_type Neighborhood type using in finding mode: 1 - facing neighbors, 2 - edges, 3 - corners
 *
 * @returns Parameter dictionary
 */
function v__roi_decluster_params(
    input_dset: InputPathType,
    output_dir: string | null = null,
    nvox_thresh: number | null = null,
    frac_thresh: number | null = null,
    prefix: string | null = null,
    neighborhood_type: number | null = null,
): VRoiDeclusterParametersTagged {
    const params = {
        "@type": "afni/@ROI_decluster" as const,
        "input_dset": input_dset,
    };
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (nvox_thresh !== null) {
        params["nvox_thresh"] = nvox_thresh;
    }
    if (frac_thresh !== null) {
        params["frac_thresh"] = frac_thresh;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (neighborhood_type !== null) {
        params["neighborhood_type"] = neighborhood_type;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__roi_decluster_cargs(
    params: VRoiDeclusterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@ROI_decluster");
    cargs.push(
        "-input",
        execution.inputFile((params["input_dset"] ?? null))
    );
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-outdir",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["nvox_thresh"] ?? null) !== null) {
        cargs.push(
            "-nvox_thresh",
            String((params["nvox_thresh"] ?? null))
        );
    }
    if ((params["frac_thresh"] ?? null) !== null) {
        cargs.push(
            "-frac_thresh",
            String((params["frac_thresh"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["neighborhood_type"] ?? null) !== null) {
        cargs.push(
            "-NN",
            String((params["neighborhood_type"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__roi_decluster_outputs(
    params: VRoiDeclusterParameters,
    execution: Execution,
): VRoiDeclusterOutputs {
    const ret: VRoiDeclusterOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * @ROI_decluster
 *
 * Script to remove small clusters or standalone voxels from an ROI/atlas dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRoiDeclusterOutputs`).
 */
function v__roi_decluster_execute(
    params: VRoiDeclusterParameters,
    runner: Runner | null = null,
): VRoiDeclusterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ROI_DECLUSTER_METADATA);
    params = execution.params(params)
    const cargs = v__roi_decluster_cargs(params, execution)
    const ret = v__roi_decluster_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @ROI_decluster
 *
 * Script to remove small clusters or standalone voxels from an ROI/atlas dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_dset Required input dataset. This dataset should be set of integer values. The program mostly assumes approximate isotropic voxels.
 * @param output_dir Directory name for output. All output goes to this directory.
 * @param nvox_thresh Number of voxels in a cluster to keep
 * @param frac_thresh Fraction of voxels in a cluster to keep [0.0-1.0]
 * @param prefix Base name of final output dataset, i.e. baseprefix.nii.gz
 * @param neighborhood_type Neighborhood type using in finding mode: 1 - facing neighbors, 2 - edges, 3 - corners
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VRoiDeclusterOutputs`).
 */
function v__roi_decluster(
    input_dset: InputPathType,
    output_dir: string | null = null,
    nvox_thresh: number | null = null,
    frac_thresh: number | null = null,
    prefix: string | null = null,
    neighborhood_type: number | null = null,
    runner: Runner | null = null,
): VRoiDeclusterOutputs {
    const params = v__roi_decluster_params(input_dset, output_dir, nvox_thresh, frac_thresh, prefix, neighborhood_type)
    return v__roi_decluster_execute(params, runner);
}


export {
      VRoiDeclusterOutputs,
      V__ROI_DECLUSTER_METADATA,
      v__roi_decluster,
      v__roi_decluster_execute,
      v__roi_decluster_params,
};
