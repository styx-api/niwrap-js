// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTSJACOBIAN_METADATA: Metadata = {
    id: "4c1495ce17166625b172b3fbe727bd30b17f079f.boutiques",
    name: "ANTSJacobian",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsjacobianParameters {
    "__STYXTYPE__": "ANTSJacobian";
    "imagedim": number;
    "gwarp": InputPathType;
    "outfile": string;
    "uselog": number;
    "maskfn": InputPathType;
    "normbytotalbool": number;
    "projectionvector"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "ANTSJacobian": antsjacobian_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "ANTSJacobian": antsjacobian_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `antsjacobian(...)`.
 *
 * @interface
 */
interface AntsjacobianOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the Jacobian determinant information.
     */
    jacobian_output: OutputPathType;
}


function antsjacobian_params(
    imagedim: number,
    gwarp: InputPathType,
    outfile: string,
    uselog: number,
    maskfn: InputPathType,
    normbytotalbool: number,
    projectionvector: string | null = null,
): AntsjacobianParameters {
    /**
     * Build parameters.
    
     * @param imagedim The dimensionality of the input image.
     * @param gwarp The input warp image.
     * @param outfile The prefix for the output files.
     * @param uselog Whether to use logarithm in computation.
     * @param maskfn Mask file used in the computation.
     * @param normbytotalbool Normalize the Jacobian by the total in the mask. Use this to adjust for head size.
     * @param projectionvector Projects the warp along the specified direction. Do not add this option if no projection is desired.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ANTSJacobian" as const,
        "imagedim": imagedim,
        "gwarp": gwarp,
        "outfile": outfile,
        "uselog": uselog,
        "maskfn": maskfn,
        "normbytotalbool": normbytotalbool,
    };
    if (projectionvector !== null) {
        params["projectionvector"] = projectionvector;
    }
    return params;
}


function antsjacobian_cargs(
    params: AntsjacobianParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("ANTSJacobian");
    cargs.push(String((params["imagedim"] ?? null)));
    cargs.push(execution.inputFile((params["gwarp"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    cargs.push(String((params["uselog"] ?? null)));
    cargs.push(execution.inputFile((params["maskfn"] ?? null)));
    cargs.push(String((params["normbytotalbool"] ?? null)));
    if ((params["projectionvector"] ?? null) !== null) {
        cargs.push((params["projectionvector"] ?? null));
    }
    return cargs;
}


function antsjacobian_outputs(
    params: AntsjacobianParameters,
    execution: Execution,
): AntsjacobianOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AntsjacobianOutputs = {
        root: execution.outputFile("."),
        jacobian_output: execution.outputFile([(params["outfile"] ?? null), "Jacobian.nii.gz"].join('')),
    };
    return ret;
}


function antsjacobian_execute(
    params: AntsjacobianParameters,
    execution: Execution,
): AntsjacobianOutputs {
    /**
     * Calculate the Jacobian determinant of a transformation using ANTs. WARNING: ANTSJacobian may not be working correctly; see CreateJacobianDeterminantImage for an alternative method.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AntsjacobianOutputs`).
     */
    params = execution.params(params)
    const cargs = antsjacobian_cargs(params, execution)
    const ret = antsjacobian_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function antsjacobian(
    imagedim: number,
    gwarp: InputPathType,
    outfile: string,
    uselog: number,
    maskfn: InputPathType,
    normbytotalbool: number,
    projectionvector: string | null = null,
    runner: Runner | null = null,
): AntsjacobianOutputs {
    /**
     * Calculate the Jacobian determinant of a transformation using ANTs. WARNING: ANTSJacobian may not be working correctly; see CreateJacobianDeterminantImage for an alternative method.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param imagedim The dimensionality of the input image.
     * @param gwarp The input warp image.
     * @param outfile The prefix for the output files.
     * @param uselog Whether to use logarithm in computation.
     * @param maskfn Mask file used in the computation.
     * @param normbytotalbool Normalize the Jacobian by the total in the mask. Use this to adjust for head size.
     * @param projectionvector Projects the warp along the specified direction. Do not add this option if no projection is desired.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AntsjacobianOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTSJACOBIAN_METADATA);
    const params = antsjacobian_params(imagedim, gwarp, outfile, uselog, maskfn, normbytotalbool, projectionvector)
    return antsjacobian_execute(params, execution);
}


export {
      ANTSJACOBIAN_METADATA,
      AntsjacobianOutputs,
      AntsjacobianParameters,
      antsjacobian,
      antsjacobian_params,
};
