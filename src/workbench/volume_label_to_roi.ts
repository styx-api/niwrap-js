// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_LABEL_TO_ROI_METADATA: Metadata = {
    id: "8cac1dca5a1e955b87cb24ad3af270642d5857c8.boutiques",
    name: "volume-label-to-roi",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeLabelToRoiParameters {
    "__STYXTYPE__": "volume-label-to-roi";
    "label_in": InputPathType;
    "volume_out": string;
    "opt_name_label_name"?: string | null | undefined;
    "opt_key_label_key"?: number | null | undefined;
    "opt_map_map"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-label-to-roi": volume_label_to_roi_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-label-to-roi": volume_label_to_roi_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_label_to_roi(...)`.
 *
 * @interface
 */
interface VolumeLabelToRoiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume file
     */
    volume_out: OutputPathType;
}


function volume_label_to_roi_params(
    label_in: InputPathType,
    volume_out: string,
    opt_name_label_name: string | null = null,
    opt_key_label_key: number | null = null,
    opt_map_map: string | null = null,
): VolumeLabelToRoiParameters {
    /**
     * Build parameters.
    
     * @param label_in the input volume label file
     * @param volume_out the output volume file
     * @param opt_name_label_name select label by name: the label name that you want an roi of
     * @param opt_key_label_key select label by key: the label key that you want an roi of
     * @param opt_map_map select a single label map to use: the map number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-label-to-roi" as const,
        "label_in": label_in,
        "volume_out": volume_out,
    };
    if (opt_name_label_name !== null) {
        params["opt_name_label_name"] = opt_name_label_name;
    }
    if (opt_key_label_key !== null) {
        params["opt_key_label_key"] = opt_key_label_key;
    }
    if (opt_map_map !== null) {
        params["opt_map_map"] = opt_map_map;
    }
    return params;
}


function volume_label_to_roi_cargs(
    params: VolumeLabelToRoiParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-label-to-roi");
    cargs.push(execution.inputFile((params["label_in"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["opt_name_label_name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["opt_name_label_name"] ?? null)
        );
    }
    if ((params["opt_key_label_key"] ?? null) !== null) {
        cargs.push(
            "-key",
            String((params["opt_key_label_key"] ?? null))
        );
    }
    if ((params["opt_map_map"] ?? null) !== null) {
        cargs.push(
            "-map",
            (params["opt_map_map"] ?? null)
        );
    }
    return cargs;
}


function volume_label_to_roi_outputs(
    params: VolumeLabelToRoiParameters,
    execution: Execution,
): VolumeLabelToRoiOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeLabelToRoiOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_label_to_roi_execute(
    params: VolumeLabelToRoiParameters,
    execution: Execution,
): VolumeLabelToRoiOutputs {
    /**
     * Make a volume label into an roi volume.
     * 
     * For each map in <label-in>, a map is created in <volume-out> where all locations labeled with <label-name> or with a key of <label-key> are given a value of 1, and all other locations are given 0.  Exactly one of -name and -key must be specified.  Specify -map to use only one map from <label-in>.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeLabelToRoiOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_label_to_roi_cargs(params, execution)
    const ret = volume_label_to_roi_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_label_to_roi(
    label_in: InputPathType,
    volume_out: string,
    opt_name_label_name: string | null = null,
    opt_key_label_key: number | null = null,
    opt_map_map: string | null = null,
    runner: Runner | null = null,
): VolumeLabelToRoiOutputs {
    /**
     * Make a volume label into an roi volume.
     * 
     * For each map in <label-in>, a map is created in <volume-out> where all locations labeled with <label-name> or with a key of <label-key> are given a value of 1, and all other locations are given 0.  Exactly one of -name and -key must be specified.  Specify -map to use only one map from <label-in>.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param label_in the input volume label file
     * @param volume_out the output volume file
     * @param opt_name_label_name select label by name: the label name that you want an roi of
     * @param opt_key_label_key select label by key: the label key that you want an roi of
     * @param opt_map_map select a single label map to use: the map number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeLabelToRoiOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_LABEL_TO_ROI_METADATA);
    const params = volume_label_to_roi_params(label_in, volume_out, opt_name_label_name, opt_key_label_key, opt_map_map)
    return volume_label_to_roi_execute(params, execution);
}


export {
      VOLUME_LABEL_TO_ROI_METADATA,
      VolumeLabelToRoiOutputs,
      VolumeLabelToRoiParameters,
      volume_label_to_roi,
      volume_label_to_roi_params,
};
