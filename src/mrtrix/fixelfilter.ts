// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIXELFILTER_METADATA: Metadata = {
    id: "7740c3daac540db34d0b5cf2ca567029c3529f83.boutiques",
    name: "fixelfilter",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface FixelfilterConfigParameters {
    "__STYXTYPE__": "config";
    "key": string;
    "value": string;
}


interface FixelfilterVariousStringParameters {
    "__STYXTYPE__": "VariousString";
    "obj": string;
}


interface FixelfilterVariousFileParameters {
    "__STYXTYPE__": "VariousFile";
    "obj": InputPathType;
}


interface FixelfilterVariousString1Parameters {
    "__STYXTYPE__": "VariousString_1";
    "obj": string;
}


interface FixelfilterVariousFile1Parameters {
    "__STYXTYPE__": "VariousFile_1";
    "obj": InputPathType;
}


interface FixelfilterParameters {
    "__STYXTYPE__": "fixelfilter";
    "matrix": InputPathType;
    "threshold_value"?: number | null | undefined;
    "threshold_connectivity"?: number | null | undefined;
    "fwhm"?: number | null | undefined;
    "minweight"?: number | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<FixelfilterConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": FixelfilterVariousStringParameters | FixelfilterVariousFileParameters;
    "filter": string;
    "output": FixelfilterVariousString1Parameters | FixelfilterVariousFile1Parameters;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fixelfilter": fixelfilter_cargs,
        "config": fixelfilter_config_cargs,
        "VariousString": fixelfilter_various_string_cargs,
        "VariousFile": fixelfilter_various_file_cargs,
        "VariousString_1": fixelfilter_various_string_1_cargs,
        "VariousFile_1": fixelfilter_various_file_1_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


function fixelfilter_config_params(
    key: string,
    value: string,
): FixelfilterConfigParameters {
    /**
     * Build parameters.
    
     * @param key temporarily set the value of an MRtrix config file entry.
     * @param value temporarily set the value of an MRtrix config file entry.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


function fixelfilter_config_cargs(
    params: FixelfilterConfigParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


function fixelfilter_various_string_params(
    obj: string,
): FixelfilterVariousStringParameters {
    /**
     * Build parameters.
    
     * @param obj String object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousString" as const,
        "obj": obj,
    };
    return params;
}


function fixelfilter_various_string_cargs(
    params: FixelfilterVariousStringParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


function fixelfilter_various_file_params(
    obj: InputPathType,
): FixelfilterVariousFileParameters {
    /**
     * Build parameters.
    
     * @param obj File object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousFile" as const,
        "obj": obj,
    };
    return params;
}


function fixelfilter_various_file_cargs(
    params: FixelfilterVariousFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


function fixelfilter_various_string_1_params(
    obj: string,
): FixelfilterVariousString1Parameters {
    /**
     * Build parameters.
    
     * @param obj String object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousString_1" as const,
        "obj": obj,
    };
    return params;
}


function fixelfilter_various_string_1_cargs(
    params: FixelfilterVariousString1Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


function fixelfilter_various_file_1_params(
    obj: InputPathType,
): FixelfilterVariousFile1Parameters {
    /**
     * Build parameters.
    
     * @param obj File object.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "VariousFile_1" as const,
        "obj": obj,
    };
    return params;
}


function fixelfilter_various_file_1_cargs(
    params: FixelfilterVariousFile1Parameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `fixelfilter(...)`.
 *
 * @interface
 */
interface FixelfilterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fixelfilter_params(
    matrix: InputPathType,
    input: FixelfilterVariousStringParameters | FixelfilterVariousFileParameters,
    filter: string,
    output: FixelfilterVariousString1Parameters | FixelfilterVariousFile1Parameters,
    threshold_value: number | null = null,
    threshold_connectivity: number | null = null,
    fwhm: number | null = null,
    minweight: number | null = null,
    mask: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelfilterConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): FixelfilterParameters {
    /**
     * Build parameters.
    
     * @param matrix provide a fixel-fixel connectivity matrix for filtering operations that require it
     * @param input the input: either a fixel data file, or a fixel directory (see Description)
     * @param filter the filtering operation to perform; options are: connect, smooth
     * @param output the output: either a fixel data file, or a fixel directory (see Description)
     * @param threshold_value specify a threshold for the input fixel data file values (default = 0.5)
     * @param threshold_connectivity specify a fixel-fixel connectivity threshold for connected-component analysis (default = 0.10000000000000001)
     * @param fwhm the full-width half-maximum (FWHM) of the spatial component of the smoothing filter (default = 10mm)
     * @param minweight apply a minimum threshold to smoothing weights (default = 0.01)
     * @param mask only perform smoothing within a specified binary fixel mask
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fixelfilter" as const,
        "matrix": matrix,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "filter": filter,
        "output": output,
    };
    if (threshold_value !== null) {
        params["threshold_value"] = threshold_value;
    }
    if (threshold_connectivity !== null) {
        params["threshold_connectivity"] = threshold_connectivity;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (minweight !== null) {
        params["minweight"] = minweight;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


function fixelfilter_cargs(
    params: FixelfilterParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fixelfilter");
    cargs.push(
        "-matrix",
        execution.inputFile((params["matrix"] ?? null))
    );
    if ((params["threshold_value"] ?? null) !== null) {
        cargs.push(
            "-threshold_value",
            String((params["threshold_value"] ?? null))
        );
    }
    if ((params["threshold_connectivity"] ?? null) !== null) {
        cargs.push(
            "-threshold_connectivity",
            String((params["threshold_connectivity"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "-fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["minweight"] ?? null) !== null) {
        cargs.push(
            "-minweight",
            String((params["minweight"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s.__STYXTYPE__)(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...dynCargs((params["input"] ?? null).__STYXTYPE__)((params["input"] ?? null), execution));
    cargs.push((params["filter"] ?? null));
    cargs.push(...dynCargs((params["output"] ?? null).__STYXTYPE__)((params["output"] ?? null), execution));
    return cargs;
}


function fixelfilter_outputs(
    params: FixelfilterParameters,
    execution: Execution,
): FixelfilterOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FixelfilterOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fixelfilter_execute(
    params: FixelfilterParameters,
    execution: Execution,
): FixelfilterOutputs {
    /**
     * Perform filtering operations on fixel-based data.
     * 
     * If the first input to the command is a specific fixel data file, then a filtered version of only that file will be generated by the command. Alternatively, if the input is the location of a fixel directory, then the command will create a duplicate of the fixel directory, and apply the specified filter operation to all fixel data files within the directory.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FixelfilterOutputs`).
     */
    params = execution.params(params)
    const cargs = fixelfilter_cargs(params, execution)
    const ret = fixelfilter_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fixelfilter(
    matrix: InputPathType,
    input: FixelfilterVariousStringParameters | FixelfilterVariousFileParameters,
    filter: string,
    output: FixelfilterVariousString1Parameters | FixelfilterVariousFile1Parameters,
    threshold_value: number | null = null,
    threshold_connectivity: number | null = null,
    fwhm: number | null = null,
    minweight: number | null = null,
    mask: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<FixelfilterConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): FixelfilterOutputs {
    /**
     * Perform filtering operations on fixel-based data.
     * 
     * If the first input to the command is a specific fixel data file, then a filtered version of only that file will be generated by the command. Alternatively, if the input is the location of a fixel directory, then the command will create a duplicate of the fixel directory, and apply the specified filter operation to all fixel data files within the directory.
     * 
     * References:
     * 
     * .
     * 
     * Author: MRTrix3 Developers
     * 
     * URL: https://www.mrtrix.org/
    
     * @param matrix provide a fixel-fixel connectivity matrix for filtering operations that require it
     * @param input the input: either a fixel data file, or a fixel directory (see Description)
     * @param filter the filtering operation to perform; options are: connect, smooth
     * @param output the output: either a fixel data file, or a fixel directory (see Description)
     * @param threshold_value specify a threshold for the input fixel data file values (default = 0.5)
     * @param threshold_connectivity specify a fixel-fixel connectivity threshold for connected-component analysis (default = 0.10000000000000001)
     * @param fwhm the full-width half-maximum (FWHM) of the spatial component of the smoothing filter (default = 10mm)
     * @param minweight apply a minimum threshold to smoothing weights (default = 0.01)
     * @param mask only perform smoothing within a specified binary fixel mask
     * @param info display information messages.
     * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
     * @param debug display debugging messages.
     * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
     * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
     * @param config temporarily set the value of an MRtrix config file entry.
     * @param help display this information page and exit.
     * @param version display version information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FixelfilterOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIXELFILTER_METADATA);
    const params = fixelfilter_params(matrix, input, filter, output, threshold_value, threshold_connectivity, fwhm, minweight, mask, info, quiet, debug, force, nthreads, config, help, version)
    return fixelfilter_execute(params, execution);
}


export {
      FIXELFILTER_METADATA,
      FixelfilterConfigParameters,
      FixelfilterOutputs,
      FixelfilterParameters,
      FixelfilterVariousFile1Parameters,
      FixelfilterVariousFileParameters,
      FixelfilterVariousString1Parameters,
      FixelfilterVariousStringParameters,
      fixelfilter,
      fixelfilter_config_params,
      fixelfilter_params,
      fixelfilter_various_file_1_params,
      fixelfilter_various_file_params,
      fixelfilter_various_string_1_params,
      fixelfilter_various_string_params,
};
