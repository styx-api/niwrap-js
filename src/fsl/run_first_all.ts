// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RUN_FIRST_ALL_METADATA: Metadata = {
    id: "26d32c3f0cb61ee305a0d2beda9bcc6667363921.boutiques",
    name: "run_first_all",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface RunFirstAllParameters {
    "@type": "fsl.run_first_all";
    "method"?: "auto" | "fast" | "none" | null | undefined;
    "brainextract_flag": boolean;
    "structure"?: string | null | undefined;
    "affine_matrix"?: InputPathType | null | undefined;
    "threestage_flag": boolean;
    "debug_flag": boolean;
    "verbose_flag": boolean;
    "input_image": InputPathType;
    "output_image": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.run_first_all": run_first_all_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.run_first_all": run_first_all_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `run_first_all(...)`.
 *
 * @interface
 */
interface RunFirstAllOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image file
     */
    output_image_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input image file
 * @param output_image Output image file
 * @param method Method for brain extraction (auto, fast, none or a numerical threshold value)
 * @param brainextract_flag Input is already brain extracted
 * @param structure Run only on one specified structure (e.g. L_Hipp) or a comma separated list (no spaces)
 * @param affine_matrix Use affine matrix (do not re-run registration)
 * @param threestage_flag Use 3-stage affine registration (only currently for hippocampus)
 * @param debug_flag Do not cleanup image output files (useful for debugging)
 * @param verbose_flag Verbose output
 *
 * @returns Parameter dictionary
 */
function run_first_all_params(
    input_image: InputPathType,
    output_image: string,
    method: "auto" | "fast" | "none" | null = null,
    brainextract_flag: boolean = false,
    structure: string | null = null,
    affine_matrix: InputPathType | null = null,
    threestage_flag: boolean = false,
    debug_flag: boolean = false,
    verbose_flag: boolean = false,
): RunFirstAllParameters {
    const params = {
        "@type": "fsl.run_first_all" as const,
        "brainextract_flag": brainextract_flag,
        "threestage_flag": threestage_flag,
        "debug_flag": debug_flag,
        "verbose_flag": verbose_flag,
        "input_image": input_image,
        "output_image": output_image,
    };
    if (method !== null) {
        params["method"] = method;
    }
    if (structure !== null) {
        params["structure"] = structure;
    }
    if (affine_matrix !== null) {
        params["affine_matrix"] = affine_matrix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function run_first_all_cargs(
    params: RunFirstAllParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("run_first_all");
    if ((params["method"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["method"] ?? null)
        );
    }
    if ((params["brainextract_flag"] ?? null)) {
        cargs.push("-b");
    }
    if ((params["structure"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["structure"] ?? null)
        );
    }
    if ((params["affine_matrix"] ?? null) !== null) {
        cargs.push(
            "-a",
            execution.inputFile((params["affine_matrix"] ?? null))
        );
    }
    if ((params["threestage_flag"] ?? null)) {
        cargs.push("-3");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("-d");
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    cargs.push(
        "-i",
        execution.inputFile((params["input_image"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_image"] ?? null)
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function run_first_all_outputs(
    params: RunFirstAllParameters,
    execution: Execution,
): RunFirstAllOutputs {
    const ret: RunFirstAllOutputs = {
        root: execution.outputFile("."),
        output_image_file: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * run_first_all
 *
 * FIRST - FMRIB's Integrated Registration and Segmentation Tool for subcortical brain structures.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RunFirstAllOutputs`).
 */
function run_first_all_execute(
    params: RunFirstAllParameters,
    runner: Runner | null = null,
): RunFirstAllOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RUN_FIRST_ALL_METADATA);
    params = execution.params(params)
    const cargs = run_first_all_cargs(params, execution)
    const ret = run_first_all_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * run_first_all
 *
 * FIRST - FMRIB's Integrated Registration and Segmentation Tool for subcortical brain structures.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_image Input image file
 * @param output_image Output image file
 * @param method Method for brain extraction (auto, fast, none or a numerical threshold value)
 * @param brainextract_flag Input is already brain extracted
 * @param structure Run only on one specified structure (e.g. L_Hipp) or a comma separated list (no spaces)
 * @param affine_matrix Use affine matrix (do not re-run registration)
 * @param threestage_flag Use 3-stage affine registration (only currently for hippocampus)
 * @param debug_flag Do not cleanup image output files (useful for debugging)
 * @param verbose_flag Verbose output
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RunFirstAllOutputs`).
 */
function run_first_all(
    input_image: InputPathType,
    output_image: string,
    method: "auto" | "fast" | "none" | null = null,
    brainextract_flag: boolean = false,
    structure: string | null = null,
    affine_matrix: InputPathType | null = null,
    threestage_flag: boolean = false,
    debug_flag: boolean = false,
    verbose_flag: boolean = false,
    runner: Runner | null = null,
): RunFirstAllOutputs {
    const params = run_first_all_params(input_image, output_image, method, brainextract_flag, structure, affine_matrix, threestage_flag, debug_flag, verbose_flag)
    return run_first_all_execute(params, runner);
}


export {
      RUN_FIRST_ALL_METADATA,
      RunFirstAllOutputs,
      RunFirstAllParameters,
      run_first_all,
      run_first_all_execute,
      run_first_all_params,
};
