// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ANOVA_METADATA: Metadata = {
    id: "e6105d0203eca902c2a3bd514ee2ed3729772721.boutiques",
    name: "3dANOVA",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAnovaParameters {
    "@type": "afni.3dANOVA";
    "levels": number;
    "datasets": Array<string>;
    "voxel"?: number | null | undefined;
    "diskspace": boolean;
    "mask"?: InputPathType | null | undefined;
    "debug"?: number | null | undefined;
    "ftr"?: string | null | undefined;
    "mean"?: string | null | undefined;
    "diff"?: string | null | undefined;
    "contr"?: string | null | undefined;
    "old_method": boolean;
    "ok": boolean;
    "assume_sph": boolean;
    "bucket"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dANOVA": v_3d_anova_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dANOVA": v_3d_anova_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_anova(...)`.
 *
 * @interface
 */
interface V3dAnovaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output F-statistic dataset file
     */
    ftr_output: OutputPathType | null;
    /**
     * Output F-statistic BRIK file
     */
    ftr_brick_output: OutputPathType | null;
    /**
     * Output mean dataset file
     */
    mean_output: OutputPathType | null;
    /**
     * Output mean BRIK file
     */
    mean_brick_output: OutputPathType | null;
    /**
     * Output difference dataset file
     */
    diff_output: OutputPathType | null;
    /**
     * Output difference BRIK file
     */
    diff_brick_output: OutputPathType | null;
    /**
     * Output contrast dataset file
     */
    contr_output: OutputPathType | null;
    /**
     * Output contrast BRIK file
     */
    contr_brick_output: OutputPathType | null;
    /**
     * Output bucket dataset file
     */
    bucket_output: OutputPathType | null;
    /**
     * Output bucket BRIK file
     */
    bucket_brick_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param levels Number of factor levels
 * @param datasets Datasets for each factor level
 * @param voxel Screen output for the specified voxel number
 * @param diskspace Print out the required disk space for program execution
 * @param mask Use sub-brick #0 of dataset to define which voxels to process
 * @param debug Request extra output verbosity
 * @param ftr F-statistic for treatment effect
 * @param mean Estimate of factor level mean
 * @param diff Difference between factor levels
 * @param contr Contrast in factor levels
 * @param old_method Perform ANOVA using the previous functionality
 * @param ok Confirm understanding of t-stats and sphericity assumptions with old method
 * @param assume_sph Assume sphericity (zero-sum contrasts only)
 * @param bucket Create one AFNI 'bucket' dataset
 *
 * @returns Parameter dictionary
 */
function v_3d_anova_params(
    levels: number,
    datasets: Array<string>,
    voxel: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    debug: number | null = null,
    ftr: string | null = null,
    mean: string | null = null,
    diff: string | null = null,
    contr: string | null = null,
    old_method: boolean = false,
    ok: boolean = false,
    assume_sph: boolean = false,
    bucket: string | null = null,
): V3dAnovaParameters {
    const params = {
        "@type": "afni.3dANOVA" as const,
        "levels": levels,
        "datasets": datasets,
        "diskspace": diskspace,
        "old_method": old_method,
        "ok": ok,
        "assume_sph": assume_sph,
    };
    if (voxel !== null) {
        params["voxel"] = voxel;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (debug !== null) {
        params["debug"] = debug;
    }
    if (ftr !== null) {
        params["ftr"] = ftr;
    }
    if (mean !== null) {
        params["mean"] = mean;
    }
    if (diff !== null) {
        params["diff"] = diff;
    }
    if (contr !== null) {
        params["contr"] = contr;
    }
    if (bucket !== null) {
        params["bucket"] = bucket;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_anova_cargs(
    params: V3dAnovaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dANOVA");
    cargs.push(
        "-levels",
        String((params["levels"] ?? null))
    );
    cargs.push(
        "-dset",
        ...(params["datasets"] ?? null)
    );
    if ((params["voxel"] ?? null) !== null) {
        cargs.push(
            "-voxel",
            String((params["voxel"] ?? null))
        );
    }
    if ((params["diskspace"] ?? null)) {
        cargs.push("-diskspace");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["debug"] ?? null) !== null) {
        cargs.push(
            "-debug",
            String((params["debug"] ?? null))
        );
    }
    if ((params["ftr"] ?? null) !== null) {
        cargs.push(
            "-ftr",
            (params["ftr"] ?? null)
        );
    }
    if ((params["mean"] ?? null) !== null) {
        cargs.push(
            "-mean",
            (params["mean"] ?? null)
        );
    }
    if ((params["diff"] ?? null) !== null) {
        cargs.push(
            "-diff",
            (params["diff"] ?? null)
        );
    }
    if ((params["contr"] ?? null) !== null) {
        cargs.push(
            "-contr",
            (params["contr"] ?? null)
        );
    }
    if ((params["old_method"] ?? null)) {
        cargs.push("-old_method");
    }
    if ((params["ok"] ?? null)) {
        cargs.push("-OK");
    }
    if ((params["assume_sph"] ?? null)) {
        cargs.push("-assume_sph");
    }
    if ((params["bucket"] ?? null) !== null) {
        cargs.push(
            "-bucket",
            (params["bucket"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_anova_outputs(
    params: V3dAnovaParameters,
    execution: Execution,
): V3dAnovaOutputs {
    const ret: V3dAnovaOutputs = {
        root: execution.outputFile("."),
        ftr_output: ((params["ftr"] ?? null) !== null) ? execution.outputFile([(params["ftr"] ?? null), ".HEAD"].join('')) : null,
        ftr_brick_output: ((params["ftr"] ?? null) !== null) ? execution.outputFile([(params["ftr"] ?? null), ".BRIK"].join('')) : null,
        mean_output: ((params["mean"] ?? null) !== null) ? execution.outputFile([(params["mean"] ?? null), "_mean.HEAD"].join('')) : null,
        mean_brick_output: ((params["mean"] ?? null) !== null) ? execution.outputFile([(params["mean"] ?? null), "_mean.BRIK"].join('')) : null,
        diff_output: ((params["diff"] ?? null) !== null) ? execution.outputFile([(params["diff"] ?? null), "_diff.HEAD"].join('')) : null,
        diff_brick_output: ((params["diff"] ?? null) !== null) ? execution.outputFile([(params["diff"] ?? null), "_diff.BRIK"].join('')) : null,
        contr_output: ((params["contr"] ?? null) !== null) ? execution.outputFile([(params["contr"] ?? null), "_contr.HEAD"].join('')) : null,
        contr_brick_output: ((params["contr"] ?? null) !== null) ? execution.outputFile([(params["contr"] ?? null), "_contr.BRIK"].join('')) : null,
        bucket_output: ((params["bucket"] ?? null) !== null) ? execution.outputFile([(params["bucket"] ?? null), ".HEAD"].join('')) : null,
        bucket_brick_output: ((params["bucket"] ?? null) !== null) ? execution.outputFile([(params["bucket"] ?? null), ".BRIK"].join('')) : null,
    };
    return ret;
}


/**
 * Performs single-factor Analysis of Variance (ANOVA) on 3D datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAnovaOutputs`).
 */
function v_3d_anova_execute(
    params: V3dAnovaParameters,
    runner: Runner | null = null,
): V3dAnovaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ANOVA_METADATA);
    params = execution.params(params)
    const cargs = v_3d_anova_cargs(params, execution)
    const ret = v_3d_anova_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Performs single-factor Analysis of Variance (ANOVA) on 3D datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param levels Number of factor levels
 * @param datasets Datasets for each factor level
 * @param voxel Screen output for the specified voxel number
 * @param diskspace Print out the required disk space for program execution
 * @param mask Use sub-brick #0 of dataset to define which voxels to process
 * @param debug Request extra output verbosity
 * @param ftr F-statistic for treatment effect
 * @param mean Estimate of factor level mean
 * @param diff Difference between factor levels
 * @param contr Contrast in factor levels
 * @param old_method Perform ANOVA using the previous functionality
 * @param ok Confirm understanding of t-stats and sphericity assumptions with old method
 * @param assume_sph Assume sphericity (zero-sum contrasts only)
 * @param bucket Create one AFNI 'bucket' dataset
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAnovaOutputs`).
 */
function v_3d_anova(
    levels: number,
    datasets: Array<string>,
    voxel: number | null = null,
    diskspace: boolean = false,
    mask: InputPathType | null = null,
    debug: number | null = null,
    ftr: string | null = null,
    mean: string | null = null,
    diff: string | null = null,
    contr: string | null = null,
    old_method: boolean = false,
    ok: boolean = false,
    assume_sph: boolean = false,
    bucket: string | null = null,
    runner: Runner | null = null,
): V3dAnovaOutputs {
    const params = v_3d_anova_params(levels, datasets, voxel, diskspace, mask, debug, ftr, mean, diff, contr, old_method, ok, assume_sph, bucket)
    return v_3d_anova_execute(params, runner);
}


export {
      V3dAnovaOutputs,
      V3dAnovaParameters,
      V_3D_ANOVA_METADATA,
      v_3d_anova,
      v_3d_anova_execute,
      v_3d_anova_params,
};
