// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_APPLY_AFFINE_METADATA: Metadata = {
    id: "25500b134b89cab81e66e3d0a44f8ea90dc1d25a.boutiques",
    name: "surface-apply-affine",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceApplyAffineFlirtParameters {
    "__STYXTYPE__": "flirt";
    "source_volume": string;
    "target_volume": string;
}


interface SurfaceApplyAffineParameters {
    "__STYXTYPE__": "surface-apply-affine";
    "in_surf": InputPathType;
    "affine": string;
    "out_surf": string;
    "flirt"?: SurfaceApplyAffineFlirtParameters | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-apply-affine": surface_apply_affine_cargs,
        "flirt": surface_apply_affine_flirt_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-apply-affine": surface_apply_affine_outputs,
    };
    return outputsFuncs[t];
}


function surface_apply_affine_flirt_params(
    source_volume: string,
    target_volume: string,
): SurfaceApplyAffineFlirtParameters {
    /**
     * Build parameters.
    
     * @param source_volume the source volume used when generating the affine
     * @param target_volume the target volume used when generating the affine
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "flirt" as const,
        "source_volume": source_volume,
        "target_volume": target_volume,
    };
    return params;
}


function surface_apply_affine_flirt_cargs(
    params: SurfaceApplyAffineFlirtParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-flirt");
    cargs.push((params["source_volume"] ?? null));
    cargs.push((params["target_volume"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `surface_apply_affine(...)`.
 *
 * @interface
 */
interface SurfaceApplyAffineOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output transformed surface
     */
    out_surf: OutputPathType;
}


function surface_apply_affine_params(
    in_surf: InputPathType,
    affine: string,
    out_surf: string,
    flirt: SurfaceApplyAffineFlirtParameters | null = null,
): SurfaceApplyAffineParameters {
    /**
     * Build parameters.
    
     * @param in_surf the surface to transform
     * @param affine the affine file
     * @param out_surf the output transformed surface
     * @param flirt MUST be used if affine is a flirt affine
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-apply-affine" as const,
        "in_surf": in_surf,
        "affine": affine,
        "out_surf": out_surf,
    };
    if (flirt !== null) {
        params["flirt"] = flirt;
    }
    return params;
}


function surface_apply_affine_cargs(
    params: SurfaceApplyAffineParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-apply-affine");
    cargs.push(execution.inputFile((params["in_surf"] ?? null)));
    cargs.push((params["affine"] ?? null));
    cargs.push((params["out_surf"] ?? null));
    if ((params["flirt"] ?? null) !== null) {
        cargs.push(...dynCargs((params["flirt"] ?? null).__STYXTYPE__)((params["flirt"] ?? null), execution));
    }
    return cargs;
}


function surface_apply_affine_outputs(
    params: SurfaceApplyAffineParameters,
    execution: Execution,
): SurfaceApplyAffineOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceApplyAffineOutputs = {
        root: execution.outputFile("."),
        out_surf: execution.outputFile([(params["out_surf"] ?? null)].join('')),
    };
    return ret;
}


function surface_apply_affine_execute(
    params: SurfaceApplyAffineParameters,
    execution: Execution,
): SurfaceApplyAffineOutputs {
    /**
     * Apply affine transform to surface file.
     * 
     * For flirt matrices, you must use the -flirt option, because flirt matrices are not a complete description of the coordinate transform they represent.  If the -flirt option is not present, the affine must be a nifti 'world' affine, which can be obtained with the -convert-affine command, or aff_conv from the 4dfp suite.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceApplyAffineOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_apply_affine_cargs(params, execution)
    const ret = surface_apply_affine_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_apply_affine(
    in_surf: InputPathType,
    affine: string,
    out_surf: string,
    flirt: SurfaceApplyAffineFlirtParameters | null = null,
    runner: Runner | null = null,
): SurfaceApplyAffineOutputs {
    /**
     * Apply affine transform to surface file.
     * 
     * For flirt matrices, you must use the -flirt option, because flirt matrices are not a complete description of the coordinate transform they represent.  If the -flirt option is not present, the affine must be a nifti 'world' affine, which can be obtained with the -convert-affine command, or aff_conv from the 4dfp suite.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param in_surf the surface to transform
     * @param affine the affine file
     * @param out_surf the output transformed surface
     * @param flirt MUST be used if affine is a flirt affine
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceApplyAffineOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_APPLY_AFFINE_METADATA);
    const params = surface_apply_affine_params(in_surf, affine, out_surf, flirt)
    return surface_apply_affine_execute(params, execution);
}


export {
      SURFACE_APPLY_AFFINE_METADATA,
      SurfaceApplyAffineFlirtParameters,
      SurfaceApplyAffineOutputs,
      SurfaceApplyAffineParameters,
      surface_apply_affine,
      surface_apply_affine_flirt_params,
      surface_apply_affine_params,
};
