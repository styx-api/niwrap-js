// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const UNPACKIMADIR2_METADATA: Metadata = {
    id: "a9223f4f9bff668d7fd030c3934c5982e5b81aa3.boutiques",
    name: "unpackimadir2",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Unpackimadir2Parameters {
    "@type": "freesurfer.unpackimadir2";
    "directory": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.unpackimadir2": unpackimadir2_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `unpackimadir2(...)`.
 *
 * @interface
 */
interface Unpackimadir2Outputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param directory Image directory to unpack.
 *
 * @returns Parameter dictionary
 */
function unpackimadir2_params(
    directory: InputPathType,
): Unpackimadir2Parameters {
    const params = {
        "@type": "freesurfer.unpackimadir2" as const,
        "directory": directory,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function unpackimadir2_cargs(
    params: Unpackimadir2Parameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("unpackimadir2");
    cargs.push(execution.inputFile((params["directory"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function unpackimadir2_outputs(
    params: Unpackimadir2Parameters,
    execution: Execution,
): Unpackimadir2Outputs {
    const ret: Unpackimadir2Outputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * unpackimadir2
 *
 * Tool to unpack image directories, from FreeSurfer suite.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Unpackimadir2Outputs`).
 */
function unpackimadir2_execute(
    params: Unpackimadir2Parameters,
    runner: Runner | null = null,
): Unpackimadir2Outputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(UNPACKIMADIR2_METADATA);
    params = execution.params(params)
    const cargs = unpackimadir2_cargs(params, execution)
    const ret = unpackimadir2_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * unpackimadir2
 *
 * Tool to unpack image directories, from FreeSurfer suite.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param directory Image directory to unpack.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Unpackimadir2Outputs`).
 */
function unpackimadir2(
    directory: InputPathType,
    runner: Runner | null = null,
): Unpackimadir2Outputs {
    const params = unpackimadir2_params(directory)
    return unpackimadir2_execute(params, runner);
}


export {
      UNPACKIMADIR2_METADATA,
      Unpackimadir2Outputs,
      Unpackimadir2Parameters,
      unpackimadir2,
      unpackimadir2_execute,
      unpackimadir2_params,
};
