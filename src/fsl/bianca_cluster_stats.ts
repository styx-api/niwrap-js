// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BIANCA_CLUSTER_STATS_METADATA: Metadata = {
    id: "d1cdd715fcf1f5f48e49045e59f229178144ae7b.boutiques",
    name: "bianca_cluster_stats",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface BiancaClusterStatsParameters {
    "@type"?: "fsl/bianca_cluster_stats";
    "bianca_output_map": InputPathType;
    "threshold": number;
    "min_cluster_size": number;
    "mask"?: InputPathType | null | undefined;
}
type BiancaClusterStatsParametersTagged = Required<Pick<BiancaClusterStatsParameters, '@type'>> & BiancaClusterStatsParameters;


/**
 * Output object returned when calling `BiancaClusterStatsParameters(...)`.
 *
 * @interface
 */
interface BiancaClusterStatsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param bianca_output_map BIANCA output map file
 * @param threshold Threshold value to apply
 * @param min_cluster_size Minimum cluster size in voxels
 * @param mask Optional mask file (in the same space as the BIANCA output map)
 *
 * @returns Parameter dictionary
 */
function bianca_cluster_stats_params(
    bianca_output_map: InputPathType,
    threshold: number,
    min_cluster_size: number,
    mask: InputPathType | null = null,
): BiancaClusterStatsParametersTagged {
    const params = {
        "@type": "fsl/bianca_cluster_stats" as const,
        "bianca_output_map": bianca_output_map,
        "threshold": threshold,
        "min_cluster_size": min_cluster_size,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function bianca_cluster_stats_cargs(
    params: BiancaClusterStatsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("bianca_cluster_stats");
    cargs.push(execution.inputFile((params["bianca_output_map"] ?? null)));
    cargs.push(String((params["threshold"] ?? null)));
    cargs.push(String((params["min_cluster_size"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function bianca_cluster_stats_outputs(
    params: BiancaClusterStatsParameters,
    execution: Execution,
): BiancaClusterStatsOutputs {
    const ret: BiancaClusterStatsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * bianca_cluster_stats
 *
 * Calculate number of clusters and WMH volume in a BIANCA output map.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BiancaClusterStatsOutputs`).
 */
function bianca_cluster_stats_execute(
    params: BiancaClusterStatsParameters,
    runner: Runner | null = null,
): BiancaClusterStatsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BIANCA_CLUSTER_STATS_METADATA);
    params = execution.params(params)
    const cargs = bianca_cluster_stats_cargs(params, execution)
    const ret = bianca_cluster_stats_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * bianca_cluster_stats
 *
 * Calculate number of clusters and WMH volume in a BIANCA output map.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param bianca_output_map BIANCA output map file
 * @param threshold Threshold value to apply
 * @param min_cluster_size Minimum cluster size in voxels
 * @param mask Optional mask file (in the same space as the BIANCA output map)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BiancaClusterStatsOutputs`).
 */
function bianca_cluster_stats(
    bianca_output_map: InputPathType,
    threshold: number,
    min_cluster_size: number,
    mask: InputPathType | null = null,
    runner: Runner | null = null,
): BiancaClusterStatsOutputs {
    const params = bianca_cluster_stats_params(bianca_output_map, threshold, min_cluster_size, mask)
    return bianca_cluster_stats_execute(params, runner);
}


export {
      BIANCA_CLUSTER_STATS_METADATA,
      BiancaClusterStatsOutputs,
      bianca_cluster_stats,
      bianca_cluster_stats_execute,
      bianca_cluster_stats_params,
};
