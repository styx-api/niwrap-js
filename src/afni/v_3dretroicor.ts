// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DRETROICOR_METADATA: Metadata = {
    id: "925ba5dcd931de5a0a798d7af5a4598a7437092e.boutiques",
    name: "3dretroicor",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dretroicorParameters {
    "@type": "afni.3dretroicor";
    "ignore"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "card"?: InputPathType | null | undefined;
    "cardphase"?: string | null | undefined;
    "threshold"?: number | null | undefined;
    "resp"?: InputPathType | null | undefined;
    "respphase"?: string | null | undefined;
    "order"?: number | null | undefined;
    "dataset": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dretroicor": v_3dretroicor_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dretroicor": v_3dretroicor_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dretroicor(...)`.
 *
 * @interface
 */
interface V3dretroicorOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected dataset output.
     */
    corrected_dataset: OutputPathType | null;
    /**
     * Cardiac phase output file.
     */
    output_cardiac_phase: OutputPathType | null;
    /**
     * Respiratory phase output file.
     */
    output_resp_phase: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param dataset 3D+time dataset to process.
 * @param ignore The number of initial timepoints to ignore in the input. These points will be passed through uncorrected.
 * @param prefix Prefix for new, corrected dataset.
 * @param card 1D cardiac data file for cardiac correction.
 * @param cardphase Filename for 1D cardiac phase output.
 * @param threshold Threshold for detection of R-wave peaks in input. Make sure it's above the background noise level; try 3/4 or 4/5 times range plus minimum.
 * @param resp 1D respiratory waveform data for correction.
 * @param respphase Filename for 1D respiratory phase output.
 * @param order The order of the correction. Higher-order terms yield little improvement according to Glover et al.
 *
 * @returns Parameter dictionary
 */
function v_3dretroicor_params(
    dataset: InputPathType,
    ignore: number | null = null,
    prefix: string | null = null,
    card: InputPathType | null = null,
    cardphase: string | null = null,
    threshold: number | null = null,
    resp: InputPathType | null = null,
    respphase: string | null = null,
    order: number | null = null,
): V3dretroicorParameters {
    const params = {
        "@type": "afni.3dretroicor" as const,
        "dataset": dataset,
    };
    if (ignore !== null) {
        params["ignore"] = ignore;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (card !== null) {
        params["card"] = card;
    }
    if (cardphase !== null) {
        params["cardphase"] = cardphase;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (resp !== null) {
        params["resp"] = resp;
    }
    if (respphase !== null) {
        params["respphase"] = respphase;
    }
    if (order !== null) {
        params["order"] = order;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dretroicor_cargs(
    params: V3dretroicorParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dretroicor");
    if ((params["ignore"] ?? null) !== null) {
        cargs.push(
            "-ignore",
            String((params["ignore"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["card"] ?? null) !== null) {
        cargs.push(
            "-card",
            execution.inputFile((params["card"] ?? null))
        );
    }
    if ((params["cardphase"] ?? null) !== null) {
        cargs.push(
            "-cardphase",
            (params["cardphase"] ?? null)
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["resp"] ?? null) !== null) {
        cargs.push(
            "-resp",
            execution.inputFile((params["resp"] ?? null))
        );
    }
    if ((params["respphase"] ?? null) !== null) {
        cargs.push(
            "-respphase",
            (params["respphase"] ?? null)
        );
    }
    if ((params["order"] ?? null) !== null) {
        cargs.push(
            "-order",
            String((params["order"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dretroicor_outputs(
    params: V3dretroicorParameters,
    execution: Execution,
): V3dretroicorOutputs {
    const ret: V3dretroicorOutputs = {
        root: execution.outputFile("."),
        corrected_dataset: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
        output_cardiac_phase: ((params["cardphase"] ?? null) !== null) ? execution.outputFile([(params["cardphase"] ?? null)].join('')) : null,
        output_resp_phase: ((params["respphase"] ?? null) !== null) ? execution.outputFile([(params["respphase"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * 3dretroicor
 *
 * Performs Retrospective Image Correction for physiological motion effects using a modified RETROICOR algorithm.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dretroicorOutputs`).
 */
function v_3dretroicor_execute(
    params: V3dretroicorParameters,
    runner: Runner | null = null,
): V3dretroicorOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DRETROICOR_METADATA);
    params = execution.params(params)
    const cargs = v_3dretroicor_cargs(params, execution)
    const ret = v_3dretroicor_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dretroicor
 *
 * Performs Retrospective Image Correction for physiological motion effects using a modified RETROICOR algorithm.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset 3D+time dataset to process.
 * @param ignore The number of initial timepoints to ignore in the input. These points will be passed through uncorrected.
 * @param prefix Prefix for new, corrected dataset.
 * @param card 1D cardiac data file for cardiac correction.
 * @param cardphase Filename for 1D cardiac phase output.
 * @param threshold Threshold for detection of R-wave peaks in input. Make sure it's above the background noise level; try 3/4 or 4/5 times range plus minimum.
 * @param resp 1D respiratory waveform data for correction.
 * @param respphase Filename for 1D respiratory phase output.
 * @param order The order of the correction. Higher-order terms yield little improvement according to Glover et al.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dretroicorOutputs`).
 */
function v_3dretroicor(
    dataset: InputPathType,
    ignore: number | null = null,
    prefix: string | null = null,
    card: InputPathType | null = null,
    cardphase: string | null = null,
    threshold: number | null = null,
    resp: InputPathType | null = null,
    respphase: string | null = null,
    order: number | null = null,
    runner: Runner | null = null,
): V3dretroicorOutputs {
    const params = v_3dretroicor_params(dataset, ignore, prefix, card, cardphase, threshold, resp, respphase, order)
    return v_3dretroicor_execute(params, runner);
}


export {
      V3dretroicorOutputs,
      V3dretroicorParameters,
      V_3DRETROICOR_METADATA,
      v_3dretroicor,
      v_3dretroicor_execute,
      v_3dretroicor_params,
};
