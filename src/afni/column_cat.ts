// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const COLUMN_CAT_METADATA: Metadata = {
    id: "f276139fcea6d48fa99c7886640fd1482c3c318e.boutiques",
    name: "column_cat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ColumnCatParameters {
    "@type"?: "afni/column_cat";
    "line_number"?: number | null | undefined;
    "separator_string"?: string | null | undefined;
    "input_files": Array<InputPathType>;
}
type ColumnCatParametersTagged = Required<Pick<ColumnCatParameters, '@type'>> & ColumnCatParameters;


/**
 * Output object returned when calling `ColumnCatParameters(...)`.
 *
 * @interface
 */
interface ColumnCatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Redirect output of concatenation to a file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input files to be concatenated
 * @param line_number Print only the specified line number (1-based)
 * @param separator_string Use the specified string as a separator between columns
 *
 * @returns Parameter dictionary
 */
function column_cat_params(
    input_files: Array<InputPathType>,
    line_number: number | null = null,
    separator_string: string | null = null,
): ColumnCatParametersTagged {
    const params = {
        "@type": "afni/column_cat" as const,
        "input_files": input_files,
    };
    if (line_number !== null) {
        params["line_number"] = line_number;
    }
    if (separator_string !== null) {
        params["separator_string"] = separator_string;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function column_cat_cargs(
    params: ColumnCatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("column_cat");
    if ((params["line_number"] ?? null) !== null) {
        cargs.push(
            "-line",
            String((params["line_number"] ?? null))
        );
    }
    if ((params["separator_string"] ?? null) !== null) {
        cargs.push(
            "-sep",
            (params["separator_string"] ?? null)
        );
    }
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function column_cat_outputs(
    params: ColumnCatParameters,
    execution: Execution,
): ColumnCatOutputs {
    const ret: ColumnCatOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile(["output_file.txt"].join('')),
    };
    return ret;
}


/**
 * column_cat
 *
 * Catenate files horizontally. Each line of output is the concatenation of each current line from the input files, all on the same line, separated by a space or a user-defined separator.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ColumnCatOutputs`).
 */
function column_cat_execute(
    params: ColumnCatParameters,
    runner: Runner | null = null,
): ColumnCatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(COLUMN_CAT_METADATA);
    params = execution.params(params)
    const cargs = column_cat_cargs(params, execution)
    const ret = column_cat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * column_cat
 *
 * Catenate files horizontally. Each line of output is the concatenation of each current line from the input files, all on the same line, separated by a space or a user-defined separator.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_files Input files to be concatenated
 * @param line_number Print only the specified line number (1-based)
 * @param separator_string Use the specified string as a separator between columns
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ColumnCatOutputs`).
 */
function column_cat(
    input_files: Array<InputPathType>,
    line_number: number | null = null,
    separator_string: string | null = null,
    runner: Runner | null = null,
): ColumnCatOutputs {
    const params = column_cat_params(input_files, line_number, separator_string)
    return column_cat_execute(params, runner);
}


export {
      COLUMN_CAT_METADATA,
      ColumnCatOutputs,
      column_cat,
      column_cat_execute,
      column_cat_params,
};
