// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SWI_PROCESS_METADATA: Metadata = {
    id: "738668554ab314e3ebe213ede5cda62840421435.boutiques",
    name: "swi_process",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SwiProcessParameters {
    "@type": "freesurfer.swi_process";
    "magnitude_image": InputPathType;
    "phase_image": InputPathType;
    "swi_output": string;
    "stddev"?: number | null | undefined;
    "phase_mask_cutoff"?: number | null | undefined;
    "phase_mask_right_cutoff"?: number | null | undefined;
    "sigmoid_a"?: number | null | undefined;
    "sigmoid_b"?: number | null | undefined;
    "phase_multiplications"?: number | null | undefined;
    "mip_level"?: number | null | undefined;
    "phase_mask_method"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.swi_process": swi_process_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.swi_process": swi_process_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `swi_process(...)`.
 *
 * @interface
 */
interface SwiProcessOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * SWI processed output image
     */
    swi_output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param magnitude_image The magnitude image (Output from the PRELUDE program)
 * @param phase_image The phase image (Output from the PRELUDE program)
 * @param swi_output Name of the SWI processed output image
 * @param stddev Specify the standard deviation of the Gaussian Smoothing Filter. Default is 2.0
 * @param phase_mask_cutoff Specify the negative phase mask cutoff frequency (in radians). Default is the minimum value of the phase image.
 * @param phase_mask_right_cutoff Specify the positive phase mask cutoff frequency (in radians). Default is the maximum value of the phase image.
 * @param sigmoid_a Specify 'a' for the sigmoid formula f(phase)=1/(1+exp(-a*(phase-b))). Default is 1.0. Meaningless with phase_method != sigmoid
 * @param sigmoid_b Specify 'b' for the sigmoid formula f(phase)=1/(1+exp(-a*(phase-b))). Default is 0.0. Meaningless with phase_method != sigmoid
 * @param phase_multiplications Specify the number of phase multiplications. Default is 4
 * @param mip_level Specify the number of levels of mIP across the y direction. Default is 4
 * @param phase_mask_method Specify the phase mask method. One of negative, positive, symmetric, asymmetric, sigmoid. Default is negative
 *
 * @returns Parameter dictionary
 */
function swi_process_params(
    magnitude_image: InputPathType,
    phase_image: InputPathType,
    swi_output: string,
    stddev: number | null = null,
    phase_mask_cutoff: number | null = null,
    phase_mask_right_cutoff: number | null = null,
    sigmoid_a: number | null = null,
    sigmoid_b: number | null = null,
    phase_multiplications: number | null = null,
    mip_level: number | null = null,
    phase_mask_method: string | null = null,
): SwiProcessParameters {
    const params = {
        "@type": "freesurfer.swi_process" as const,
        "magnitude_image": magnitude_image,
        "phase_image": phase_image,
        "swi_output": swi_output,
    };
    if (stddev !== null) {
        params["stddev"] = stddev;
    }
    if (phase_mask_cutoff !== null) {
        params["phase_mask_cutoff"] = phase_mask_cutoff;
    }
    if (phase_mask_right_cutoff !== null) {
        params["phase_mask_right_cutoff"] = phase_mask_right_cutoff;
    }
    if (sigmoid_a !== null) {
        params["sigmoid_a"] = sigmoid_a;
    }
    if (sigmoid_b !== null) {
        params["sigmoid_b"] = sigmoid_b;
    }
    if (phase_multiplications !== null) {
        params["phase_multiplications"] = phase_multiplications;
    }
    if (mip_level !== null) {
        params["mip_level"] = mip_level;
    }
    if (phase_mask_method !== null) {
        params["phase_mask_method"] = phase_mask_method;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function swi_process_cargs(
    params: SwiProcessParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("swi_process");
    cargs.push(execution.inputFile((params["magnitude_image"] ?? null)));
    cargs.push(execution.inputFile((params["phase_image"] ?? null)));
    cargs.push((params["swi_output"] ?? null));
    if ((params["stddev"] ?? null) !== null) {
        cargs.push(
            "--stddev",
            String((params["stddev"] ?? null))
        );
    }
    if ((params["phase_mask_cutoff"] ?? null) !== null) {
        cargs.push(
            "--phase_mask_cutoff",
            String((params["phase_mask_cutoff"] ?? null))
        );
    }
    if ((params["phase_mask_right_cutoff"] ?? null) !== null) {
        cargs.push(
            "--phase_mask_right_cutoff",
            String((params["phase_mask_right_cutoff"] ?? null))
        );
    }
    if ((params["sigmoid_a"] ?? null) !== null) {
        cargs.push(
            "--sigmoid_a",
            String((params["sigmoid_a"] ?? null))
        );
    }
    if ((params["sigmoid_b"] ?? null) !== null) {
        cargs.push(
            "--sigmoid_b",
            String((params["sigmoid_b"] ?? null))
        );
    }
    if ((params["phase_multiplications"] ?? null) !== null) {
        cargs.push(
            "--phase_multiplications",
            String((params["phase_multiplications"] ?? null))
        );
    }
    if ((params["mip_level"] ?? null) !== null) {
        cargs.push(
            "--mip_level",
            String((params["mip_level"] ?? null))
        );
    }
    if ((params["phase_mask_method"] ?? null) !== null) {
        cargs.push(
            "--phase_mask_method",
            (params["phase_mask_method"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function swi_process_outputs(
    params: SwiProcessParameters,
    execution: Execution,
): SwiProcessOutputs {
    const ret: SwiProcessOutputs = {
        root: execution.outputFile("."),
        swi_output_file: execution.outputFile([(params["swi_output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * swi_process
 *
 * Process the Susceptibility-weighted images. Ensure the inputs are post-phase unwrapping using PRELUDE.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SwiProcessOutputs`).
 */
function swi_process_execute(
    params: SwiProcessParameters,
    runner: Runner | null = null,
): SwiProcessOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SWI_PROCESS_METADATA);
    params = execution.params(params)
    const cargs = swi_process_cargs(params, execution)
    const ret = swi_process_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * swi_process
 *
 * Process the Susceptibility-weighted images. Ensure the inputs are post-phase unwrapping using PRELUDE.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param magnitude_image The magnitude image (Output from the PRELUDE program)
 * @param phase_image The phase image (Output from the PRELUDE program)
 * @param swi_output Name of the SWI processed output image
 * @param stddev Specify the standard deviation of the Gaussian Smoothing Filter. Default is 2.0
 * @param phase_mask_cutoff Specify the negative phase mask cutoff frequency (in radians). Default is the minimum value of the phase image.
 * @param phase_mask_right_cutoff Specify the positive phase mask cutoff frequency (in radians). Default is the maximum value of the phase image.
 * @param sigmoid_a Specify 'a' for the sigmoid formula f(phase)=1/(1+exp(-a*(phase-b))). Default is 1.0. Meaningless with phase_method != sigmoid
 * @param sigmoid_b Specify 'b' for the sigmoid formula f(phase)=1/(1+exp(-a*(phase-b))). Default is 0.0. Meaningless with phase_method != sigmoid
 * @param phase_multiplications Specify the number of phase multiplications. Default is 4
 * @param mip_level Specify the number of levels of mIP across the y direction. Default is 4
 * @param phase_mask_method Specify the phase mask method. One of negative, positive, symmetric, asymmetric, sigmoid. Default is negative
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SwiProcessOutputs`).
 */
function swi_process(
    magnitude_image: InputPathType,
    phase_image: InputPathType,
    swi_output: string,
    stddev: number | null = null,
    phase_mask_cutoff: number | null = null,
    phase_mask_right_cutoff: number | null = null,
    sigmoid_a: number | null = null,
    sigmoid_b: number | null = null,
    phase_multiplications: number | null = null,
    mip_level: number | null = null,
    phase_mask_method: string | null = null,
    runner: Runner | null = null,
): SwiProcessOutputs {
    const params = swi_process_params(magnitude_image, phase_image, swi_output, stddev, phase_mask_cutoff, phase_mask_right_cutoff, sigmoid_a, sigmoid_b, phase_multiplications, mip_level, phase_mask_method)
    return swi_process_execute(params, runner);
}


export {
      SWI_PROCESS_METADATA,
      SwiProcessOutputs,
      SwiProcessParameters,
      swi_process,
      swi_process_execute,
      swi_process_params,
};
