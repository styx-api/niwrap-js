// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LONG_STATS_TPS_METADATA: Metadata = {
    id: "3f40c800d9afacf20579a53c52fdd58307c8abdb.boutiques",
    name: "long_stats_tps",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface LongStatsTpsParameters {
    "@type"?: "freesurfer/long_stats_tps";
    "qdec_table": InputPathType;
    "stats_file": string;
    "measure": string;
    "subjects_dir": string;
    "time_point": number;
    "output_file": string;
    "qcolumn"?: string | null | undefined;
    "cross_sectional": boolean;
}
type LongStatsTpsParametersTagged = Required<Pick<LongStatsTpsParameters, '@type'>> & LongStatsTpsParameters;


/**
 * Output object returned when calling `LongStatsTpsParameters(...)`.
 *
 * @interface
 */
interface LongStatsTpsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing stacked results for individual time points.
     */
    stacked_results: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param qdec_table qdec.table.dat file with first columns: fsid  fsid-base
 * @param stats_file Stats file without path: e.g. aseg.stats or lh.aparc.stats
 * @param measure Stats measure, e.g. volume, thickness, mean, std
 * @param subjects_dir Full path to FreeSurfer subjects directory
 * @param time_point Time point number
 * @param output_file File name of output
 * @param qcolumn Select a column from the qdec table itself (then --stats, --meas and --sd are not necessary)
 * @param cross_sectional Use cross sectional results (for testing only)
 *
 * @returns Parameter dictionary
 */
function long_stats_tps_params(
    qdec_table: InputPathType,
    stats_file: string,
    measure: string,
    subjects_dir: string,
    time_point: number,
    output_file: string,
    qcolumn: string | null = null,
    cross_sectional: boolean = false,
): LongStatsTpsParametersTagged {
    const params = {
        "@type": "freesurfer/long_stats_tps" as const,
        "qdec_table": qdec_table,
        "stats_file": stats_file,
        "measure": measure,
        "subjects_dir": subjects_dir,
        "time_point": time_point,
        "output_file": output_file,
        "cross_sectional": cross_sectional,
    };
    if (qcolumn !== null) {
        params["qcolumn"] = qcolumn;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function long_stats_tps_cargs(
    params: LongStatsTpsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("long_stats_tps");
    cargs.push(
        "--qdec",
        execution.inputFile((params["qdec_table"] ?? null))
    );
    cargs.push(
        "--stats",
        (params["stats_file"] ?? null)
    );
    cargs.push(
        "--meas",
        (params["measure"] ?? null)
    );
    cargs.push(
        "--sd",
        (params["subjects_dir"] ?? null)
    );
    cargs.push(
        "--tp",
        String((params["time_point"] ?? null))
    );
    cargs.push(
        "--out",
        (params["output_file"] ?? null)
    );
    if ((params["qcolumn"] ?? null) !== null) {
        cargs.push(
            "--qcol",
            (params["qcolumn"] ?? null)
        );
    }
    if ((params["cross_sectional"] ?? false)) {
        cargs.push("--cross");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function long_stats_tps_outputs(
    params: LongStatsTpsParameters,
    execution: Execution,
): LongStatsTpsOutputs {
    const ret: LongStatsTpsOutputs = {
        root: execution.outputFile("."),
        stacked_results: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * long_stats_tps
 *
 * Stack results for individual time points based on longitudinal qdec table.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LongStatsTpsOutputs`).
 */
function long_stats_tps_execute(
    params: LongStatsTpsParameters,
    runner: Runner | null = null,
): LongStatsTpsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LONG_STATS_TPS_METADATA);
    params = execution.params(params)
    const cargs = long_stats_tps_cargs(params, execution)
    const ret = long_stats_tps_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * long_stats_tps
 *
 * Stack results for individual time points based on longitudinal qdec table.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param qdec_table qdec.table.dat file with first columns: fsid  fsid-base
 * @param stats_file Stats file without path: e.g. aseg.stats or lh.aparc.stats
 * @param measure Stats measure, e.g. volume, thickness, mean, std
 * @param subjects_dir Full path to FreeSurfer subjects directory
 * @param time_point Time point number
 * @param output_file File name of output
 * @param qcolumn Select a column from the qdec table itself (then --stats, --meas and --sd are not necessary)
 * @param cross_sectional Use cross sectional results (for testing only)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LongStatsTpsOutputs`).
 */
function long_stats_tps(
    qdec_table: InputPathType,
    stats_file: string,
    measure: string,
    subjects_dir: string,
    time_point: number,
    output_file: string,
    qcolumn: string | null = null,
    cross_sectional: boolean = false,
    runner: Runner | null = null,
): LongStatsTpsOutputs {
    const params = long_stats_tps_params(qdec_table, stats_file, measure, subjects_dir, time_point, output_file, qcolumn, cross_sectional)
    return long_stats_tps_execute(params, runner);
}


export {
      LONG_STATS_TPS_METADATA,
      LongStatsTpsOutputs,
      long_stats_tps,
      long_stats_tps_execute,
      long_stats_tps_params,
};
