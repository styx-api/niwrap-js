// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_DISTANCE_TRANSFORM_METADATA: Metadata = {
    id: "26327fdeedfb1e1343a77de6d926663c874f15f0.boutiques",
    name: "mris_distance_transform",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisDistanceTransformParameters {
    "__STYXTYPE__": "mris_distance_transform";
    "surface": InputPathType;
    "label": InputPathType;
    "mode": "signed" | "unsigned" | "outside";
    "output_file": string;
    "anterior"?: number | null | undefined;
    "posterior"?: number | null | undefined;
    "divide"?: number | null | undefined;
    "olabel": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_distance_transform": mris_distance_transform_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_distance_transform": mris_distance_transform_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_distance_transform(...)`.
 *
 * @interface
 */
interface MrisDistanceTransformOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting file after applying the distance transform.
     */
    result_file: OutputPathType;
}


function mris_distance_transform_params(
    surface: InputPathType,
    label: InputPathType,
    mode: "signed" | "unsigned" | "outside",
    output_file: string,
    anterior: number | null = null,
    posterior: number | null = null,
    divide: number | null = null,
    olabel: boolean = false,
): MrisDistanceTransformParameters {
    /**
     * Build parameters.
    
     * @param surface Surface file for processing.
     * @param label Label file to apply distance transform.
     * @param mode Mode of the distance transform, can be 'signed', 'unsigned', or 'outside'.
     * @param output_file Output file for the distance transform results.
     * @param anterior Only use anteriormost <dist> portion of the label.
     * @param posterior Only use posteriormost <dist> portion of the label.
     * @param divide Divide label into <n> units along primary eigendirection.
     * @param olabel Output label subdivisions.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_distance_transform" as const,
        "surface": surface,
        "label": label,
        "mode": mode,
        "output_file": output_file,
        "olabel": olabel,
    };
    if (anterior !== null) {
        params["anterior"] = anterior;
    }
    if (posterior !== null) {
        params["posterior"] = posterior;
    }
    if (divide !== null) {
        params["divide"] = divide;
    }
    return params;
}


function mris_distance_transform_cargs(
    params: MrisDistanceTransformParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_distance_transform");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["label"] ?? null)));
    cargs.push((params["mode"] ?? null));
    cargs.push((params["output_file"] ?? null));
    if ((params["anterior"] ?? null) !== null) {
        cargs.push(
            "-anterior",
            String((params["anterior"] ?? null))
        );
    }
    if ((params["posterior"] ?? null) !== null) {
        cargs.push(
            "-posterior",
            String((params["posterior"] ?? null))
        );
    }
    if ((params["divide"] ?? null) !== null) {
        cargs.push(
            "-divide",
            String((params["divide"] ?? null))
        );
    }
    if ((params["olabel"] ?? null)) {
        cargs.push("-olabel");
    }
    return cargs;
}


function mris_distance_transform_outputs(
    params: MrisDistanceTransformParameters,
    execution: Execution,
): MrisDistanceTransformOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisDistanceTransformOutputs = {
        root: execution.outputFile("."),
        result_file: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function mris_distance_transform_execute(
    params: MrisDistanceTransformParameters,
    execution: Execution,
): MrisDistanceTransformOutputs {
    /**
     * Computes the distance transform of a label on the surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisDistanceTransformOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_distance_transform_cargs(params, execution)
    const ret = mris_distance_transform_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_distance_transform(
    surface: InputPathType,
    label: InputPathType,
    mode: "signed" | "unsigned" | "outside",
    output_file: string,
    anterior: number | null = null,
    posterior: number | null = null,
    divide: number | null = null,
    olabel: boolean = false,
    runner: Runner | null = null,
): MrisDistanceTransformOutputs {
    /**
     * Computes the distance transform of a label on the surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surface Surface file for processing.
     * @param label Label file to apply distance transform.
     * @param mode Mode of the distance transform, can be 'signed', 'unsigned', or 'outside'.
     * @param output_file Output file for the distance transform results.
     * @param anterior Only use anteriormost <dist> portion of the label.
     * @param posterior Only use posteriormost <dist> portion of the label.
     * @param divide Divide label into <n> units along primary eigendirection.
     * @param olabel Output label subdivisions.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisDistanceTransformOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_DISTANCE_TRANSFORM_METADATA);
    const params = mris_distance_transform_params(surface, label, mode, output_file, anterior, posterior, divide, olabel)
    return mris_distance_transform_execute(params, execution);
}


export {
      MRIS_DISTANCE_TRANSFORM_METADATA,
      MrisDistanceTransformOutputs,
      MrisDistanceTransformParameters,
      mris_distance_transform,
      mris_distance_transform_params,
};
