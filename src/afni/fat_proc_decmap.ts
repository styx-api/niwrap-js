// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_DECMAP_METADATA: Metadata = {
    id: "ac47e7cad79ac062c31e79aa1b2269438c541ff1.boutiques",
    name: "fat_proc_decmap",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcDecmapParameters {
    "@type": "afni.fat_proc_decmap";
    "in_fa": InputPathType;
    "in_v1": InputPathType;
    "prefix": string;
    "mask"?: InputPathType | null | undefined;
    "fa_thr"?: number | null | undefined;
    "fa_sca"?: number | null | undefined;
    "workdir"?: string | null | undefined;
    "no_clean": boolean;
    "qc_prefix"?: string | null | undefined;
    "no_cmd_out": boolean;
    "no_qc_view": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.fat_proc_decmap": fat_proc_decmap_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.fat_proc_decmap": fat_proc_decmap_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_proc_decmap(...)`.
 *
 * @interface
 */
interface FatProcDecmapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Single file of type 'rgb' for RGB coloration display.
     */
    outfile_dec_rgb: OutputPathType;
    /**
     * Single file of type 'rgb' without FA weighting but using FA to threshold where DEC values are calculated.
     */
    outfile_dec_unwt_thr: OutputPathType;
    /**
     * DEC file additionally scaled by a value (such as 0.7).
     */
    outfile_dec_sca: OutputPathType;
    /**
     * Set of cor, axi, and sag images (each a 5x3 montage) of the DEC data.
     */
    qc_dec_images: OutputPathType;
    /**
     * Set of cor, axi, and sag images (each a 5x3 montage) of the DEC unweighted thresholded data.
     */
    qc_dec_unwt_thrx_images: OutputPathType;
    /**
     * Set of cor, axi, and sag images (each a 5x3 montage) of the DEC scaled data.
     */
    qc_dec_sca_images: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param in_fa Input FA (scalar) map.
 * @param in_v1 Input first eigenvector (3-vector) map.
 * @param prefix Set prefix (and path) for output DWI data.
 * @param mask Optional mask for picking out a region. Otherwise, only places with FA>0 are given coloration.
 * @param fa_thr For QC1 type of DEC images, use FFF to threshold where DEC values are calculated (default: 0.2).
 * @param fa_sca For QC2 type of DEC images, use SSS to scale the FA weighting of what would otherwise be a 'classical' DEC map (default: 0.7).
 * @param workdir Specify a working directory, which can be removed (default: '__WORKING_decmap').
 * @param no_clean Do not delete temporary files when finishing.
 * @param qc_prefix Set the prefix of the QC image files (default: 'PREFIX').
 * @param no_cmd_out Do not save the command line call of this program and location where it was run.
 * @param no_qc_view Turn off generating QC image files.
 *
 * @returns Parameter dictionary
 */
function fat_proc_decmap_params(
    in_fa: InputPathType,
    in_v1: InputPathType,
    prefix: string,
    mask: InputPathType | null = null,
    fa_thr: number | null = null,
    fa_sca: number | null = null,
    workdir: string | null = null,
    no_clean: boolean = false,
    qc_prefix: string | null = null,
    no_cmd_out: boolean = false,
    no_qc_view: boolean = false,
): FatProcDecmapParameters {
    const params = {
        "@type": "afni.fat_proc_decmap" as const,
        "in_fa": in_fa,
        "in_v1": in_v1,
        "prefix": prefix,
        "no_clean": no_clean,
        "no_cmd_out": no_cmd_out,
        "no_qc_view": no_qc_view,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (fa_thr !== null) {
        params["fa_thr"] = fa_thr;
    }
    if (fa_sca !== null) {
        params["fa_sca"] = fa_sca;
    }
    if (workdir !== null) {
        params["workdir"] = workdir;
    }
    if (qc_prefix !== null) {
        params["qc_prefix"] = qc_prefix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fat_proc_decmap_cargs(
    params: FatProcDecmapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fat_proc_decmap");
    cargs.push(
        "-in_fa",
        execution.inputFile((params["in_fa"] ?? null))
    );
    cargs.push(
        "-in_v1",
        execution.inputFile((params["in_v1"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["fa_thr"] ?? null) !== null) {
        cargs.push(
            "-fa_thr",
            String((params["fa_thr"] ?? null))
        );
    }
    if ((params["fa_sca"] ?? null) !== null) {
        cargs.push(
            "-fa_sca",
            String((params["fa_sca"] ?? null))
        );
    }
    if ((params["workdir"] ?? null) !== null) {
        cargs.push(
            "-workdir",
            (params["workdir"] ?? null)
        );
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    if ((params["qc_prefix"] ?? null) !== null) {
        cargs.push(
            "-qc_prefix",
            (params["qc_prefix"] ?? null)
        );
    }
    if ((params["no_cmd_out"] ?? null)) {
        cargs.push("-no_cmd_out");
    }
    if ((params["no_qc_view"] ?? null)) {
        cargs.push("-no_qc_view");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fat_proc_decmap_outputs(
    params: FatProcDecmapParameters,
    execution: Execution,
): FatProcDecmapOutputs {
    const ret: FatProcDecmapOutputs = {
        root: execution.outputFile("."),
        outfile_dec_rgb: execution.outputFile([(params["prefix"] ?? null), "_dec.nii.gz"].join('')),
        outfile_dec_unwt_thr: execution.outputFile([(params["prefix"] ?? null), "_dec_unwt_thr.nii.gz"].join('')),
        outfile_dec_sca: execution.outputFile([(params["prefix"] ?? null), "_dec_sca.nii.gz"].join('')),
        qc_dec_images: execution.outputFile([(params["prefix"] ?? null), "_qc_dec.png"].join('')),
        qc_dec_unwt_thrx_images: execution.outputFile([(params["prefix"] ?? null), "_qc_dec_unwt_thrx.png"].join('')),
        qc_dec_sca_images: execution.outputFile([(params["prefix"] ?? null), "_qc_dec_sca.png"].join('')),
    };
    return ret;
}


/**
 * fat_proc_decmap
 *
 * This program makes a directionally encoded color (DEC) map for DTI results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcDecmapOutputs`).
 */
function fat_proc_decmap_execute(
    params: FatProcDecmapParameters,
    runner: Runner | null = null,
): FatProcDecmapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_DECMAP_METADATA);
    params = execution.params(params)
    const cargs = fat_proc_decmap_cargs(params, execution)
    const ret = fat_proc_decmap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fat_proc_decmap
 *
 * This program makes a directionally encoded color (DEC) map for DTI results.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param in_fa Input FA (scalar) map.
 * @param in_v1 Input first eigenvector (3-vector) map.
 * @param prefix Set prefix (and path) for output DWI data.
 * @param mask Optional mask for picking out a region. Otherwise, only places with FA>0 are given coloration.
 * @param fa_thr For QC1 type of DEC images, use FFF to threshold where DEC values are calculated (default: 0.2).
 * @param fa_sca For QC2 type of DEC images, use SSS to scale the FA weighting of what would otherwise be a 'classical' DEC map (default: 0.7).
 * @param workdir Specify a working directory, which can be removed (default: '__WORKING_decmap').
 * @param no_clean Do not delete temporary files when finishing.
 * @param qc_prefix Set the prefix of the QC image files (default: 'PREFIX').
 * @param no_cmd_out Do not save the command line call of this program and location where it was run.
 * @param no_qc_view Turn off generating QC image files.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FatProcDecmapOutputs`).
 */
function fat_proc_decmap(
    in_fa: InputPathType,
    in_v1: InputPathType,
    prefix: string,
    mask: InputPathType | null = null,
    fa_thr: number | null = null,
    fa_sca: number | null = null,
    workdir: string | null = null,
    no_clean: boolean = false,
    qc_prefix: string | null = null,
    no_cmd_out: boolean = false,
    no_qc_view: boolean = false,
    runner: Runner | null = null,
): FatProcDecmapOutputs {
    const params = fat_proc_decmap_params(in_fa, in_v1, prefix, mask, fa_thr, fa_sca, workdir, no_clean, qc_prefix, no_cmd_out, no_qc_view)
    return fat_proc_decmap_execute(params, runner);
}


export {
      FAT_PROC_DECMAP_METADATA,
      FatProcDecmapOutputs,
      FatProcDecmapParameters,
      fat_proc_decmap,
      fat_proc_decmap_execute,
      fat_proc_decmap_params,
};
