// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SFA2FIELDSIGN_METADATA: Metadata = {
    id: "7f94ee11352613b06c9c4748c7eadb754e7722c8.boutiques",
    name: "sfa2fieldsign",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Sfa2fieldsignParameters {
    "__STYXTYPE__": "sfa2fieldsign";
    "sfadir": string;
    "register_dat": string;
    "threshold"?: number | null | undefined;
    "fwhm"?: number | null | undefined;
    "proj_frac"?: number | null | undefined;
    "occip": boolean;
    "patch"?: string | null | undefined;
    "osd"?: string | null | undefined;
    "lh": boolean;
    "rh": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "sfa2fieldsign": sfa2fieldsign_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "sfa2fieldsign": sfa2fieldsign_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `sfa2fieldsign(...)`.
 *
 * @interface
 */
interface Sfa2fieldsignOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Intersection of polar and eccentricity thresholded fieldsigns
     */
    fsig_bin: OutputPathType;
    /**
     * Eccentricity angle (rad) volume masked by fieldsign bin
     */
    eccen_masked: OutputPathType;
    /**
     * Polar angle (rad) volume masked by fieldsign bin
     */
    polar_masked: OutputPathType;
    /**
     * Masked eccentricity angle sampled on the hemisphere surface
     */
    eccen_masked_mgh: OutputPathType;
    /**
     * Masked polar angle sampled on the hemisphere surface
     */
    polar_masked_mgh: OutputPathType;
    /**
     * Masked fieldsign map
     */
    fieldsign_masked_mgh: OutputPathType;
}


function sfa2fieldsign_params(
    sfadir: string,
    register_dat: string,
    threshold: number | null = 2,
    fwhm: number | null = 10,
    proj_frac: number | null = 0.5,
    occip: boolean = false,
    patch: string | null = null,
    osd: string | null = null,
    lh: boolean = false,
    rh: boolean = false,
): Sfa2fieldsignParameters {
    /**
     * Build parameters.
    
     * @param sfadir Output directory of sfa-sess
     * @param register_dat Registration file
     * @param threshold Sigthresh threshold (Default: 2)
     * @param fwhm Full width at half maximum (FWHM) (Default: 10mm)
     * @param proj_frac Projection fraction (Default: 0.5)
     * @param occip Use ?h.occip.patch.flat
     * @param patch Use specific patch (?)h.patch
     * @param osd Directory under SFA to put output (Default: fieldsign)
     * @param lh Process left hemisphere only
     * @param rh Process right hemisphere only
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "sfa2fieldsign" as const,
        "sfadir": sfadir,
        "register_dat": register_dat,
        "occip": occip,
        "lh": lh,
        "rh": rh,
    };
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (proj_frac !== null) {
        params["proj_frac"] = proj_frac;
    }
    if (patch !== null) {
        params["patch"] = patch;
    }
    if (osd !== null) {
        params["osd"] = osd;
    }
    return params;
}


function sfa2fieldsign_cargs(
    params: Sfa2fieldsignParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("sfa2fieldsign");
    cargs.push(
        "--sfa",
        (params["sfadir"] ?? null)
    );
    cargs.push(
        "--reg",
        (params["register_dat"] ?? null)
    );
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "--thresh",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["proj_frac"] ?? null) !== null) {
        cargs.push(
            "--proj-frac",
            String((params["proj_frac"] ?? null))
        );
    }
    if ((params["occip"] ?? null)) {
        cargs.push("--occip");
    }
    if ((params["patch"] ?? null) !== null) {
        cargs.push(
            "--patch",
            (params["patch"] ?? null)
        );
    }
    if ((params["osd"] ?? null) !== null) {
        cargs.push(
            "--osd",
            (params["osd"] ?? null)
        );
    }
    if ((params["lh"] ?? null)) {
        cargs.push("--lh");
    }
    if ((params["rh"] ?? null)) {
        cargs.push("--rh");
    }
    return cargs;
}


function sfa2fieldsign_outputs(
    params: Sfa2fieldsignParameters,
    execution: Execution,
): Sfa2fieldsignOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Sfa2fieldsignOutputs = {
        root: execution.outputFile("."),
        fsig_bin: execution.outputFile([(params["sfadir"] ?? null), "/[OSD or fieldsign]/fsig.bin.nii"].join('')),
        eccen_masked: execution.outputFile([(params["sfadir"] ?? null), "/[OSD or fieldsign]/eccen.masked.nii"].join('')),
        polar_masked: execution.outputFile([(params["sfadir"] ?? null), "/[OSD or fieldsign]/polar.masked.nii"].join('')),
        eccen_masked_mgh: execution.outputFile([(params["sfadir"] ?? null), "/[OSD or fieldsign]/?h.eccen.masked.mgh"].join('')),
        polar_masked_mgh: execution.outputFile([(params["sfadir"] ?? null), "/[OSD or fieldsign]/?h.polar.masked.mgh"].join('')),
        fieldsign_masked_mgh: execution.outputFile([(params["sfadir"] ?? null), "/[OSD or fieldsign]/?h.fieldsign.masked.mgh"].join('')),
    };
    return ret;
}


function sfa2fieldsign_execute(
    params: Sfa2fieldsignParameters,
    execution: Execution,
): Sfa2fieldsignOutputs {
    /**
     * Computes fieldsign map from sfa-sess output. Masks the angle volumes and samples them to the surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Sfa2fieldsignOutputs`).
     */
    params = execution.params(params)
    const cargs = sfa2fieldsign_cargs(params, execution)
    const ret = sfa2fieldsign_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function sfa2fieldsign(
    sfadir: string,
    register_dat: string,
    threshold: number | null = 2,
    fwhm: number | null = 10,
    proj_frac: number | null = 0.5,
    occip: boolean = false,
    patch: string | null = null,
    osd: string | null = null,
    lh: boolean = false,
    rh: boolean = false,
    runner: Runner | null = null,
): Sfa2fieldsignOutputs {
    /**
     * Computes fieldsign map from sfa-sess output. Masks the angle volumes and samples them to the surface.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param sfadir Output directory of sfa-sess
     * @param register_dat Registration file
     * @param threshold Sigthresh threshold (Default: 2)
     * @param fwhm Full width at half maximum (FWHM) (Default: 10mm)
     * @param proj_frac Projection fraction (Default: 0.5)
     * @param occip Use ?h.occip.patch.flat
     * @param patch Use specific patch (?)h.patch
     * @param osd Directory under SFA to put output (Default: fieldsign)
     * @param lh Process left hemisphere only
     * @param rh Process right hemisphere only
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Sfa2fieldsignOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SFA2FIELDSIGN_METADATA);
    const params = sfa2fieldsign_params(sfadir, register_dat, threshold, fwhm, proj_frac, occip, patch, osd, lh, rh)
    return sfa2fieldsign_execute(params, execution);
}


export {
      SFA2FIELDSIGN_METADATA,
      Sfa2fieldsignOutputs,
      Sfa2fieldsignParameters,
      sfa2fieldsign,
      sfa2fieldsign_params,
};
