// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ICC_METADATA: Metadata = {
    id: "6b7ec5c6de013c42d47420ebf12a564c200ff8a3.boutiques",
    name: "3dICC",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dIccParameters {
    "__STYXTYPE__": "3dICC";
    "model": string;
    "prefix": string;
    "mask"?: InputPathType | null | undefined;
    "data_table": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dICC": v_3d_icc_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dICC": v_3d_icc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_icc(...)`.
 *
 * @interface
 */
interface V3dIccOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Name of the output file
     */
    output_file: OutputPathType;
}


function v_3d_icc_params(
    model: string,
    prefix: string,
    data_table: string,
    mask: InputPathType | null = null,
): V3dIccParameters {
    /**
     * Build parameters.
    
     * @param model Model structure for all the variables. The expression FORMULA with more than one variable has to be surrounded within quotes. Variable names should be consistent with the ones used in the header of -dataTable.
     * @param prefix Name of output file. For AFNI format, provide prefix only, with no view+suffix needed. Filename for NIfTI format should have .nii attached, while file name for surface data is expected to end with .niml.dset.
     * @param data_table List the data structure with a header as the first line. The first column is reserved with label 'Subj', and the last is reserved for 'InputFile'.
     * @param mask Path to mask file. Only process voxels inside this mask.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dICC" as const,
        "model": model,
        "prefix": prefix,
        "data_table": data_table,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


function v_3d_icc_cargs(
    params: V3dIccParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dICC");
    cargs.push((params["model"] ?? null));
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    cargs.push(
        "-dataTable",
        (params["data_table"] ?? null)
    );
    cargs.push("[OPTIONS]");
    return cargs;
}


function v_3d_icc_outputs(
    params: V3dIccParameters,
    execution: Execution,
): V3dIccOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dIccOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null)].join('')),
    };
    return ret;
}


function v_3d_icc_execute(
    params: V3dIccParameters,
    execution: Execution,
): V3dIccOutputs {
    /**
     * AFNI Program for IntraClass Correlatin (ICC) Analysis.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dIccOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_icc_cargs(params, execution)
    const ret = v_3d_icc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_icc(
    model: string,
    prefix: string,
    data_table: string,
    mask: InputPathType | null = null,
    runner: Runner | null = null,
): V3dIccOutputs {
    /**
     * AFNI Program for IntraClass Correlatin (ICC) Analysis.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param model Model structure for all the variables. The expression FORMULA with more than one variable has to be surrounded within quotes. Variable names should be consistent with the ones used in the header of -dataTable.
     * @param prefix Name of output file. For AFNI format, provide prefix only, with no view+suffix needed. Filename for NIfTI format should have .nii attached, while file name for surface data is expected to end with .niml.dset.
     * @param data_table List the data structure with a header as the first line. The first column is reserved with label 'Subj', and the last is reserved for 'InputFile'.
     * @param mask Path to mask file. Only process voxels inside this mask.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dIccOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ICC_METADATA);
    const params = v_3d_icc_params(model, prefix, data_table, mask)
    return v_3d_icc_execute(params, execution);
}


export {
      V3dIccOutputs,
      V3dIccParameters,
      V_3D_ICC_METADATA,
      v_3d_icc,
      v_3d_icc_params,
};
