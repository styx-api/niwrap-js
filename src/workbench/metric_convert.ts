// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_CONVERT_METADATA: Metadata = {
    id: "5c246decade01d0e869276d986b6a0431ecb382d.boutiques",
    name: "metric-convert",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricConvertToNiftiParameters {
    "@type": "workbench.metric-convert.to_nifti";
    "metric_in": InputPathType;
    "nifti_out": string;
}


interface MetricConvertFromNiftiParameters {
    "@type": "workbench.metric-convert.from_nifti";
    "nifti_in": InputPathType;
    "surface_in": InputPathType;
    "metric_out": string;
}


interface MetricConvertParameters {
    "@type": "workbench.metric-convert";
    "to_nifti"?: MetricConvertToNiftiParameters | null | undefined;
    "from_nifti"?: MetricConvertFromNiftiParameters | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metric-convert": metric_convert_cargs,
        "workbench.metric-convert.to_nifti": metric_convert_to_nifti_cargs,
        "workbench.metric-convert.from_nifti": metric_convert_from_nifti_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.metric-convert": metric_convert_outputs,
        "workbench.metric-convert.to_nifti": metric_convert_to_nifti_outputs,
        "workbench.metric-convert.from_nifti": metric_convert_from_nifti_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `MetricConvertToNiftiParameters | null(...)`.
 *
 * @interface
 */
interface MetricConvertToNiftiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output nifti file
     */
    nifti_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param metric_in the metric to convert
 * @param nifti_out the output nifti file
 *
 * @returns Parameter dictionary
 */
function metric_convert_to_nifti_params(
    metric_in: InputPathType,
    nifti_out: string,
): MetricConvertToNiftiParameters {
    const params = {
        "@type": "workbench.metric-convert.to_nifti" as const,
        "metric_in": metric_in,
        "nifti_out": nifti_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_convert_to_nifti_cargs(
    params: MetricConvertToNiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-to-nifti");
    cargs.push(execution.inputFile((params["metric_in"] ?? null)));
    cargs.push((params["nifti_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_convert_to_nifti_outputs(
    params: MetricConvertToNiftiParameters,
    execution: Execution,
): MetricConvertToNiftiOutputs {
    const ret: MetricConvertToNiftiOutputs = {
        root: execution.outputFile("."),
        nifti_out: execution.outputFile([(params["nifti_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `MetricConvertFromNiftiParameters | null(...)`.
 *
 * @interface
 */
interface MetricConvertFromNiftiOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric file
     */
    metric_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param nifti_in the nifti file to convert
 * @param surface_in surface file to use number of vertices and structure from
 * @param metric_out the output metric file
 *
 * @returns Parameter dictionary
 */
function metric_convert_from_nifti_params(
    nifti_in: InputPathType,
    surface_in: InputPathType,
    metric_out: string,
): MetricConvertFromNiftiParameters {
    const params = {
        "@type": "workbench.metric-convert.from_nifti" as const,
        "nifti_in": nifti_in,
        "surface_in": surface_in,
        "metric_out": metric_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_convert_from_nifti_cargs(
    params: MetricConvertFromNiftiParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-from-nifti");
    cargs.push(execution.inputFile((params["nifti_in"] ?? null)));
    cargs.push(execution.inputFile((params["surface_in"] ?? null)));
    cargs.push((params["metric_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_convert_from_nifti_outputs(
    params: MetricConvertFromNiftiParameters,
    execution: Execution,
): MetricConvertFromNiftiOutputs {
    const ret: MetricConvertFromNiftiOutputs = {
        root: execution.outputFile("."),
        metric_out: execution.outputFile([(params["metric_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Output object returned when calling `metric_convert(...)`.
 *
 * @interface
 */
interface MetricConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Outputs from `metric_convert_to_nifti_outputs`.
     */
    to_nifti: MetricConvertToNiftiOutputs | null;
    /**
     * Outputs from `metric_convert_from_nifti_outputs`.
     */
    from_nifti: MetricConvertFromNiftiOutputs | null;
}


/**
 * Build parameters.
 *
 * @param to_nifti convert metric to nifti
 * @param from_nifti convert nifti to metric
 *
 * @returns Parameter dictionary
 */
function metric_convert_params(
    to_nifti: MetricConvertToNiftiParameters | null = null,
    from_nifti: MetricConvertFromNiftiParameters | null = null,
): MetricConvertParameters {
    const params = {
        "@type": "workbench.metric-convert" as const,
    };
    if (to_nifti !== null) {
        params["to_nifti"] = to_nifti;
    }
    if (from_nifti !== null) {
        params["from_nifti"] = from_nifti;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_convert_cargs(
    params: MetricConvertParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-convert");
    if ((params["to_nifti"] ?? null) !== null) {
        cargs.push(...dynCargs((params["to_nifti"] ?? null)["@type"])((params["to_nifti"] ?? null), execution));
    }
    if ((params["from_nifti"] ?? null) !== null) {
        cargs.push(...dynCargs((params["from_nifti"] ?? null)["@type"])((params["from_nifti"] ?? null), execution));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_convert_outputs(
    params: MetricConvertParameters,
    execution: Execution,
): MetricConvertOutputs {
    const ret: MetricConvertOutputs = {
        root: execution.outputFile("."),
        to_nifti: (dynOutputs((params["to_nifti"] ?? null)["@type"])?.((params["to_nifti"] ?? null), execution) ?? null),
        from_nifti: (dynOutputs((params["from_nifti"] ?? null)["@type"])?.((params["from_nifti"] ?? null), execution) ?? null),
    };
    return ret;
}


/**
 * metric-convert
 *
 * Convert metric file to fake nifti.
 *
 * The purpose of this command is to convert between metric files and nifti1 so that gifti-unaware programs can operate on the data.  You must specify exactly one of the options.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricConvertOutputs`).
 */
function metric_convert_execute(
    params: MetricConvertParameters,
    runner: Runner | null = null,
): MetricConvertOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_CONVERT_METADATA);
    params = execution.params(params)
    const cargs = metric_convert_cargs(params, execution)
    const ret = metric_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * metric-convert
 *
 * Convert metric file to fake nifti.
 *
 * The purpose of this command is to convert between metric files and nifti1 so that gifti-unaware programs can operate on the data.  You must specify exactly one of the options.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param to_nifti convert metric to nifti
 * @param from_nifti convert nifti to metric
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricConvertOutputs`).
 */
function metric_convert(
    to_nifti: MetricConvertToNiftiParameters | null = null,
    from_nifti: MetricConvertFromNiftiParameters | null = null,
    runner: Runner | null = null,
): MetricConvertOutputs {
    const params = metric_convert_params(to_nifti, from_nifti)
    return metric_convert_execute(params, runner);
}


export {
      METRIC_CONVERT_METADATA,
      MetricConvertFromNiftiOutputs,
      MetricConvertFromNiftiParameters,
      MetricConvertOutputs,
      MetricConvertParameters,
      MetricConvertToNiftiOutputs,
      MetricConvertToNiftiParameters,
      metric_convert,
      metric_convert_execute,
      metric_convert_from_nifti_params,
      metric_convert_params,
      metric_convert_to_nifti_params,
};
