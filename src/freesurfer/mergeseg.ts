// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MERGESEG_METADATA: Metadata = {
    id: "624a69773d36ee5f8c473ad56e85306f6dfa8dd3.boutiques",
    name: "mergeseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MergesegParameters {
    "@type": "freesurfer.mergeseg";
    "src_seg": InputPathType;
    "merge_seg": InputPathType;
    "out_seg": string;
    "segid"?: number | null | undefined;
    "segid_only"?: number | null | undefined;
    "segid_erode"?: number | null | undefined;
    "ctab"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mergeseg": mergeseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mergeseg": mergeseg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mergeseg(...)`.
 *
 * @interface
 */
interface MergesegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output merged segmentation result.
     */
    output_seg: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param src_seg Source segmentation image file
 * @param merge_seg Merge segmentation volume file
 * @param out_seg Output merged segmentation
 * @param segid Segmentation index (optional). If specified, all the voxels in the merge seg will be set to segindex.
 * @param segid_only Only take segindex from merge and use it for merging.
 * @param segid_erode Erode seg-only segindex before merge. Specify the number of erosion iterations.
 * @param ctab Color table to embed in the output segmentation.
 *
 * @returns Parameter dictionary
 */
function mergeseg_params(
    src_seg: InputPathType,
    merge_seg: InputPathType,
    out_seg: string,
    segid: number | null = null,
    segid_only: number | null = null,
    segid_erode: number | null = null,
    ctab: InputPathType | null = null,
): MergesegParameters {
    const params = {
        "@type": "freesurfer.mergeseg" as const,
        "src_seg": src_seg,
        "merge_seg": merge_seg,
        "out_seg": out_seg,
    };
    if (segid !== null) {
        params["segid"] = segid;
    }
    if (segid_only !== null) {
        params["segid_only"] = segid_only;
    }
    if (segid_erode !== null) {
        params["segid_erode"] = segid_erode;
    }
    if (ctab !== null) {
        params["ctab"] = ctab;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mergeseg_cargs(
    params: MergesegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mergeseg");
    cargs.push(execution.inputFile((params["src_seg"] ?? null)));
    cargs.push(execution.inputFile((params["merge_seg"] ?? null)));
    cargs.push(
        "--o",
        (params["out_seg"] ?? null)
    );
    if ((params["segid"] ?? null) !== null) {
        cargs.push(
            "--segid",
            String((params["segid"] ?? null))
        );
    }
    if ((params["segid_only"] ?? null) !== null) {
        cargs.push(
            "--segid-only",
            String((params["segid_only"] ?? null))
        );
    }
    if ((params["segid_erode"] ?? null) !== null) {
        cargs.push(
            "--segid-erode",
            String((params["segid_erode"] ?? null))
        );
    }
    if ((params["ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["ctab"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mergeseg_outputs(
    params: MergesegParameters,
    execution: Execution,
): MergesegOutputs {
    const ret: MergesegOutputs = {
        root: execution.outputFile("."),
        output_seg: execution.outputFile([(params["out_seg"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Merges one segmentation into another, replacing the source voxels with those from the merge segmentation where non-zero.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MergesegOutputs`).
 */
function mergeseg_execute(
    params: MergesegParameters,
    runner: Runner | null = null,
): MergesegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MERGESEG_METADATA);
    params = execution.params(params)
    const cargs = mergeseg_cargs(params, execution)
    const ret = mergeseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Merges one segmentation into another, replacing the source voxels with those from the merge segmentation where non-zero.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param src_seg Source segmentation image file
 * @param merge_seg Merge segmentation volume file
 * @param out_seg Output merged segmentation
 * @param segid Segmentation index (optional). If specified, all the voxels in the merge seg will be set to segindex.
 * @param segid_only Only take segindex from merge and use it for merging.
 * @param segid_erode Erode seg-only segindex before merge. Specify the number of erosion iterations.
 * @param ctab Color table to embed in the output segmentation.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MergesegOutputs`).
 */
function mergeseg(
    src_seg: InputPathType,
    merge_seg: InputPathType,
    out_seg: string,
    segid: number | null = null,
    segid_only: number | null = null,
    segid_erode: number | null = null,
    ctab: InputPathType | null = null,
    runner: Runner | null = null,
): MergesegOutputs {
    const params = mergeseg_params(src_seg, merge_seg, out_seg, segid, segid_only, segid_erode, ctab)
    return mergeseg_execute(params, runner);
}


export {
      MERGESEG_METADATA,
      MergesegOutputs,
      MergesegParameters,
      mergeseg,
      mergeseg_execute,
      mergeseg_params,
};
