// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__DEBLANK_FILE_NAMES_METADATA: Metadata = {
    id: "68ddb73b60e7fe7159ec6fd9653bf2405c5c6592.boutiques",
    name: "@DeblankFileNames",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VDeblankFileNamesParameters {
    "__STYXTYPE__": "@DeblankFileNames";
    "move": boolean;
    "nobrac": boolean;
    "demo_set": boolean;
    "echo": boolean;
    "help": boolean;
    "files"?: Array<InputPathType> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@DeblankFileNames": v__deblank_file_names_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__deblank_file_names(...)`.
 *
 * @interface
 */
interface VDeblankFileNamesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__deblank_file_names_params(
    move: boolean = false,
    nobrac: boolean = false,
    demo_set: boolean = false,
    echo: boolean = false,
    help: boolean = false,
    files: Array<InputPathType> | null = null,
): VDeblankFileNamesParameters {
    /**
     * Build parameters.
    
     * @param move Actually rename the files (opposite of -dry_run).
     * @param nobrac Do not replace () and [] in filenames, just spaces.
     * @param demo_set Create a toy directory with bad names for testing.
     * @param echo Turn on script echo.
     * @param help Display help message.
     * @param files Specify files to fix as opposed to letting it fix all the names in the current directory.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@DeblankFileNames" as const,
        "move": move,
        "nobrac": nobrac,
        "demo_set": demo_set,
        "echo": echo,
        "help": help,
    };
    if (files !== null) {
        params["files"] = files;
    }
    return params;
}


function v__deblank_file_names_cargs(
    params: VDeblankFileNamesParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@DeblankFileNames");
    if ((params["move"] ?? null)) {
        cargs.push("-move");
    }
    if ((params["nobrac"] ?? null)) {
        cargs.push("-nobrac");
    }
    if ((params["demo_set"] ?? null)) {
        cargs.push("-demo_set");
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["files"] ?? null) !== null) {
        cargs.push(...(params["files"] ?? null).map(f => execution.inputFile(f)));
    }
    return cargs;
}


function v__deblank_file_names_outputs(
    params: VDeblankFileNamesParameters,
    execution: Execution,
): VDeblankFileNamesOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VDeblankFileNamesOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__deblank_file_names_execute(
    params: VDeblankFileNamesParameters,
    execution: Execution,
): VDeblankFileNamesOutputs {
    /**
     * A script to remove blanks and other annoying characters ([], ()) from filenames.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VDeblankFileNamesOutputs`).
     */
    params = execution.params(params)
    const cargs = v__deblank_file_names_cargs(params, execution)
    const ret = v__deblank_file_names_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__deblank_file_names(
    move: boolean = false,
    nobrac: boolean = false,
    demo_set: boolean = false,
    echo: boolean = false,
    help: boolean = false,
    files: Array<InputPathType> | null = null,
    runner: Runner | null = null,
): VDeblankFileNamesOutputs {
    /**
     * A script to remove blanks and other annoying characters ([], ()) from filenames.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param move Actually rename the files (opposite of -dry_run).
     * @param nobrac Do not replace () and [] in filenames, just spaces.
     * @param demo_set Create a toy directory with bad names for testing.
     * @param echo Turn on script echo.
     * @param help Display help message.
     * @param files Specify files to fix as opposed to letting it fix all the names in the current directory.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VDeblankFileNamesOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__DEBLANK_FILE_NAMES_METADATA);
    const params = v__deblank_file_names_params(move, nobrac, demo_set, echo, help, files)
    return v__deblank_file_names_execute(params, execution);
}


export {
      VDeblankFileNamesOutputs,
      VDeblankFileNamesParameters,
      V__DEBLANK_FILE_NAMES_METADATA,
      v__deblank_file_names,
      v__deblank_file_names_params,
};
