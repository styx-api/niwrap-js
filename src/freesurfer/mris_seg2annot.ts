// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SEG2ANNOT_METADATA: Metadata = {
    id: "55808890fcb2dab6adced966808ff3a154a41714.boutiques",
    name: "mris_seg2annot",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSeg2annotParameters {
    "@type": "freesurfer.mris_seg2annot";
    "surfseg": InputPathType;
    "colortable"?: InputPathType | null | undefined;
    "auto_ctab"?: string | null | undefined;
    "subject": string;
    "hemi": string;
    "output_annotation": string;
    "surf"?: string | null | undefined;
    "debug": boolean;
    "debug_vertex"?: number | null | undefined;
    "checkopts": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_seg2annot": mris_seg2annot_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_seg2annot": mris_seg2annot_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_seg2annot(...)`.
 *
 * @interface
 */
interface MrisSeg2annotOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output custom annotation file.
     */
    annotation_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surfseg Volume-encoded surface segmentation. Values are indices into the color table.
 * @param subject Subject name.
 * @param hemi Surface hemifield.
 * @param output_annotation Output annotation file. E.g., lh.aparc.annot
 * @param colortable Color table used to map segmentation index to name and color.
 * @param auto_ctab Create a random color table and optionally save it.
 * @param surf Surface name, default is white.
 * @param debug Turn on debugging.
 * @param debug_vertex Turn on debugging for vertex.
 * @param checkopts Don't run anything, just check options and exit.
 * @param version Print out version and exit.
 *
 * @returns Parameter dictionary
 */
function mris_seg2annot_params(
    surfseg: InputPathType,
    subject: string,
    hemi: string,
    output_annotation: string,
    colortable: InputPathType | null = null,
    auto_ctab: string | null = null,
    surf: string | null = null,
    debug: boolean = false,
    debug_vertex: number | null = null,
    checkopts: boolean = false,
    version: boolean = false,
): MrisSeg2annotParameters {
    const params = {
        "@type": "freesurfer.mris_seg2annot" as const,
        "surfseg": surfseg,
        "subject": subject,
        "hemi": hemi,
        "output_annotation": output_annotation,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    };
    if (colortable !== null) {
        params["colortable"] = colortable;
    }
    if (auto_ctab !== null) {
        params["auto_ctab"] = auto_ctab;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    if (debug_vertex !== null) {
        params["debug_vertex"] = debug_vertex;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_seg2annot_cargs(
    params: MrisSeg2annotParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_seg2annot");
    cargs.push(
        "--seg",
        execution.inputFile((params["surfseg"] ?? null))
    );
    if ((params["colortable"] ?? null) !== null) {
        cargs.push(
            "--ctab",
            execution.inputFile((params["colortable"] ?? null))
        );
    }
    if ((params["auto_ctab"] ?? null) !== null) {
        cargs.push(
            "--ctab-auto",
            (params["auto_ctab"] ?? null)
        );
    }
    cargs.push(
        "--s",
        (params["subject"] ?? null)
    );
    cargs.push(
        "--h",
        (params["hemi"] ?? null)
    );
    cargs.push(
        "--o",
        (params["output_annotation"] ?? null)
    );
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surf"] ?? null)
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["debug_vertex"] ?? null) !== null) {
        cargs.push(
            "--debug-vertex",
            String((params["debug_vertex"] ?? null))
        );
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_seg2annot_outputs(
    params: MrisSeg2annotParameters,
    execution: Execution,
): MrisSeg2annotOutputs {
    const ret: MrisSeg2annotOutputs = {
        root: execution.outputFile("."),
        annotation_file: execution.outputFile([(params["output_annotation"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Converts a surface-based segmentation into a custom annotation file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSeg2annotOutputs`).
 */
function mris_seg2annot_execute(
    params: MrisSeg2annotParameters,
    runner: Runner | null = null,
): MrisSeg2annotOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SEG2ANNOT_METADATA);
    params = execution.params(params)
    const cargs = mris_seg2annot_cargs(params, execution)
    const ret = mris_seg2annot_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Converts a surface-based segmentation into a custom annotation file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param surfseg Volume-encoded surface segmentation. Values are indices into the color table.
 * @param subject Subject name.
 * @param hemi Surface hemifield.
 * @param output_annotation Output annotation file. E.g., lh.aparc.annot
 * @param colortable Color table used to map segmentation index to name and color.
 * @param auto_ctab Create a random color table and optionally save it.
 * @param surf Surface name, default is white.
 * @param debug Turn on debugging.
 * @param debug_vertex Turn on debugging for vertex.
 * @param checkopts Don't run anything, just check options and exit.
 * @param version Print out version and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSeg2annotOutputs`).
 */
function mris_seg2annot(
    surfseg: InputPathType,
    subject: string,
    hemi: string,
    output_annotation: string,
    colortable: InputPathType | null = null,
    auto_ctab: string | null = null,
    surf: string | null = null,
    debug: boolean = false,
    debug_vertex: number | null = null,
    checkopts: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrisSeg2annotOutputs {
    const params = mris_seg2annot_params(surfseg, subject, hemi, output_annotation, colortable, auto_ctab, surf, debug, debug_vertex, checkopts, version)
    return mris_seg2annot_execute(params, runner);
}


export {
      MRIS_SEG2ANNOT_METADATA,
      MrisSeg2annotOutputs,
      MrisSeg2annotParameters,
      mris_seg2annot,
      mris_seg2annot_execute,
      mris_seg2annot_params,
};
