// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FNAME2EXT_METADATA: Metadata = {
    id: "39a88dee540ee5afde8c4b7b82afdc6f01ed6a37.boutiques",
    name: "fname2ext",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Fname2extParameters {
    "@type"?: "freesurfer/fname2ext";
    "filename": string;
}
type Fname2extParametersTagged = Required<Pick<Fname2extParameters, '@type'>> & Fname2extParameters;


/**
 * Output object returned when calling `Fname2extParameters(...)`.
 *
 * @interface
 */
interface Fname2extOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Extracted file extension
     */
    file_extension: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param filename The name of the file for which to extract the extension. The file does not need to exist.
 *
 * @returns Parameter dictionary
 */
function fname2ext_params(
    filename: string,
): Fname2extParametersTagged {
    const params = {
        "@type": "freesurfer/fname2ext" as const,
        "filename": filename,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function fname2ext_cargs(
    params: Fname2extParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("fname2ext");
    cargs.push((params["filename"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function fname2ext_outputs(
    params: Fname2extParameters,
    execution: Execution,
): Fname2extOutputs {
    const ret: Fname2extOutputs = {
        root: execution.outputFile("."),
        file_extension: execution.outputFile(["extension.txt"].join('')),
    };
    return ret;
}


/**
 * fname2ext
 *
 * Converts the name of a file to its extension.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fname2extOutputs`).
 */
function fname2ext_execute(
    params: Fname2extParameters,
    runner: Runner | null = null,
): Fname2extOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FNAME2EXT_METADATA);
    params = execution.params(params)
    const cargs = fname2ext_cargs(params, execution)
    const ret = fname2ext_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * fname2ext
 *
 * Converts the name of a file to its extension.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param filename The name of the file for which to extract the extension. The file does not need to exist.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Fname2extOutputs`).
 */
function fname2ext(
    filename: string,
    runner: Runner | null = null,
): Fname2extOutputs {
    const params = fname2ext_params(filename)
    return fname2ext_execute(params, runner);
}


export {
      FNAME2EXT_METADATA,
      Fname2extOutputs,
      fname2ext,
      fname2ext_execute,
      fname2ext_params,
};
