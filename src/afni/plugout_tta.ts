// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PLUGOUT_TTA_METADATA: Metadata = {
    id: "551fdf08760f91c16dd733cdd6396c9b13d3ec36.boutiques",
    name: "plugout_tta",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface PlugoutTtaParameters {
    "@type"?: "afni/plugout_tta";
    "host"?: string | null | undefined;
    "port"?: number | null | undefined;
    "verbose": boolean;
    "port_offset"?: number | null | undefined;
    "port_offset_quiet"?: number | null | undefined;
    "port_offset_bloc"?: number | null | undefined;
    "max_port_bloc": boolean;
    "max_port_bloc_quiet": boolean;
    "num_assigned_ports": boolean;
    "num_assigned_ports_quiet": boolean;
}
type PlugoutTtaParametersTagged = Required<Pick<PlugoutTtaParameters, '@type'>> & PlugoutTtaParameters;


/**
 * Output object returned when calling `PlugoutTtaParameters(...)`.
 *
 * @interface
 */
interface PlugoutTtaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param host Connect to AFNI running on the specified computer using TCP/IP. Use '-host localhost' to connect on current host with TCP/IP.
 * @param port Use TCP/IP port number 'pp'. Default is 8005.
 * @param verbose Verbose mode: prints out progress reports.
 * @param port_offset Provide a port offset to allow multiple instances of programs to communicate on the same machine. All ports are assigned numbers relative to PORT_OFFSET. Range: [1025, 65500].
 * @param port_offset_quiet Like -np, but more quiet in the face of adversity.
 * @param port_offset_bloc Provide a port offset block. Easier to use than -np. Range: [0, MAX_BLOC]. Using this reduces chances of port conflicts.
 * @param max_port_bloc Print the current value of MAX_BLOC and exit.
 * @param max_port_bloc_quiet Print MAX_BLOC value and exit quietly.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI then quit.
 * @param num_assigned_ports_quiet Print the number of assigned ports used by AFNI then quit quietly.
 *
 * @returns Parameter dictionary
 */
function plugout_tta_params(
    host: string | null = null,
    port: number | null = null,
    verbose: boolean = false,
    port_offset: number | null = null,
    port_offset_quiet: number | null = null,
    port_offset_bloc: number | null = null,
    max_port_bloc: boolean = false,
    max_port_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
): PlugoutTtaParametersTagged {
    const params = {
        "@type": "afni/plugout_tta" as const,
        "verbose": verbose,
        "max_port_bloc": max_port_bloc,
        "max_port_bloc_quiet": max_port_bloc_quiet,
        "num_assigned_ports": num_assigned_ports,
        "num_assigned_ports_quiet": num_assigned_ports_quiet,
    };
    if (host !== null) {
        params["host"] = host;
    }
    if (port !== null) {
        params["port"] = port;
    }
    if (port_offset !== null) {
        params["port_offset"] = port_offset;
    }
    if (port_offset_quiet !== null) {
        params["port_offset_quiet"] = port_offset_quiet;
    }
    if (port_offset_bloc !== null) {
        params["port_offset_bloc"] = port_offset_bloc;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function plugout_tta_cargs(
    params: PlugoutTtaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("plugout_tta");
    if ((params["host"] ?? null) !== null) {
        cargs.push(
            "-host",
            (params["host"] ?? null)
        );
    }
    if ((params["port"] ?? null) !== null) {
        cargs.push(
            "-port",
            String((params["port"] ?? null))
        );
    }
    if ((params["verbose"] ?? false)) {
        cargs.push("-v");
    }
    if ((params["port_offset"] ?? null) !== null) {
        cargs.push(
            "-np",
            String((params["port_offset"] ?? null))
        );
    }
    if ((params["port_offset_quiet"] ?? null) !== null) {
        cargs.push(
            "-npq",
            String((params["port_offset_quiet"] ?? null))
        );
    }
    if ((params["port_offset_bloc"] ?? null) !== null) {
        cargs.push(
            "-npb",
            String((params["port_offset_bloc"] ?? null))
        );
    }
    if ((params["max_port_bloc"] ?? false)) {
        cargs.push("-max_port_bloc");
    }
    if ((params["max_port_bloc_quiet"] ?? false)) {
        cargs.push("-max_port_bloc_quiet");
    }
    if ((params["num_assigned_ports"] ?? false)) {
        cargs.push("-num_assigned_ports");
    }
    if ((params["num_assigned_ports_quiet"] ?? false)) {
        cargs.push("-num_assigned_ports_quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function plugout_tta_outputs(
    params: PlugoutTtaParameters,
    execution: Execution,
): PlugoutTtaOutputs {
    const ret: PlugoutTtaOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * plugout_tta
 *
 * Connects to AFNI and receives notification whenever the user changes Talairach coordinates, then drives Netscape to display the closest figures from the Talairach-Tournoux atlas.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutTtaOutputs`).
 */
function plugout_tta_execute(
    params: PlugoutTtaParameters,
    runner: Runner | null = null,
): PlugoutTtaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PLUGOUT_TTA_METADATA);
    params = execution.params(params)
    const cargs = plugout_tta_cargs(params, execution)
    const ret = plugout_tta_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * plugout_tta
 *
 * Connects to AFNI and receives notification whenever the user changes Talairach coordinates, then drives Netscape to display the closest figures from the Talairach-Tournoux atlas.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param host Connect to AFNI running on the specified computer using TCP/IP. Use '-host localhost' to connect on current host with TCP/IP.
 * @param port Use TCP/IP port number 'pp'. Default is 8005.
 * @param verbose Verbose mode: prints out progress reports.
 * @param port_offset Provide a port offset to allow multiple instances of programs to communicate on the same machine. All ports are assigned numbers relative to PORT_OFFSET. Range: [1025, 65500].
 * @param port_offset_quiet Like -np, but more quiet in the face of adversity.
 * @param port_offset_bloc Provide a port offset block. Easier to use than -np. Range: [0, MAX_BLOC]. Using this reduces chances of port conflicts.
 * @param max_port_bloc Print the current value of MAX_BLOC and exit.
 * @param max_port_bloc_quiet Print MAX_BLOC value and exit quietly.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI then quit.
 * @param num_assigned_ports_quiet Print the number of assigned ports used by AFNI then quit quietly.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutTtaOutputs`).
 */
function plugout_tta(
    host: string | null = null,
    port: number | null = null,
    verbose: boolean = false,
    port_offset: number | null = null,
    port_offset_quiet: number | null = null,
    port_offset_bloc: number | null = null,
    max_port_bloc: boolean = false,
    max_port_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
    runner: Runner | null = null,
): PlugoutTtaOutputs {
    const params = plugout_tta_params(host, port, verbose, port_offset, port_offset_quiet, port_offset_bloc, max_port_bloc, max_port_bloc_quiet, num_assigned_ports, num_assigned_ports_quiet)
    return plugout_tta_execute(params, runner);
}


export {
      PLUGOUT_TTA_METADATA,
      PlugoutTtaOutputs,
      plugout_tta,
      plugout_tta_execute,
      plugout_tta_params,
};
