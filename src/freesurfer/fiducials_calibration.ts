// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIDUCIALS_CALIBRATION_METADATA: Metadata = {
    id: "445a4b2fe29e36b5286fe1c80268453941ab7144.boutiques",
    name: "fiducials_calibration",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface FiducialsCalibrationParameters {
    "__STYXTYPE__": "fiducials_calibration";
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fiducials_calibration": fiducials_calibration_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fiducials_calibration(...)`.
 *
 * @interface
 */
interface FiducialsCalibrationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function fiducials_calibration_params(
): FiducialsCalibrationParameters {
    /**
     * Build parameters.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fiducials_calibration" as const,
    };
    return params;
}


function fiducials_calibration_cargs(
    params: FiducialsCalibrationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fiducials_calibration");
    return cargs;
}


function fiducials_calibration_outputs(
    params: FiducialsCalibrationParameters,
    execution: Execution,
): FiducialsCalibrationOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FiducialsCalibrationOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function fiducials_calibration_execute(
    params: FiducialsCalibrationParameters,
    execution: Execution,
): FiducialsCalibrationOutputs {
    /**
     * A tool used for calibrating fiducials.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FiducialsCalibrationOutputs`).
     */
    params = execution.params(params)
    const cargs = fiducials_calibration_cargs(params, execution)
    const ret = fiducials_calibration_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fiducials_calibration(
    runner: Runner | null = null,
): FiducialsCalibrationOutputs {
    /**
     * A tool used for calibrating fiducials.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FiducialsCalibrationOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIDUCIALS_CALIBRATION_METADATA);
    const params = fiducials_calibration_params()
    return fiducials_calibration_execute(params, execution);
}


export {
      FIDUCIALS_CALIBRATION_METADATA,
      FiducialsCalibrationOutputs,
      FiducialsCalibrationParameters,
      fiducials_calibration,
      fiducials_calibration_params,
};
