// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_PATHS_METADATA: Metadata = {
    id: "3a90c8f9376c48f9be6ae61598cfc8451a249e4e.boutiques",
    name: "dmri_paths",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriPathsParameters {
    "@type"?: "freesurfer/dmri_paths";
    "indir"?: string | null | undefined;
    "outdir"?: string | null | undefined;
    "dwi"?: InputPathType | null | undefined;
    "grad"?: InputPathType | null | undefined;
    "bval"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "bpdir"?: string | null | undefined;
    "ntr"?: number | null | undefined;
    "fmin"?: number | null | undefined;
    "basereg"?: InputPathType | null | undefined;
    "basemask"?: InputPathType | null | undefined;
    "roi1"?: InputPathType | null | undefined;
    "roi2"?: InputPathType | null | undefined;
    "roimesh1"?: InputPathType | null | undefined;
    "roimesh2"?: InputPathType | null | undefined;
    "roiref1"?: InputPathType | null | undefined;
    "roiref2"?: InputPathType | null | undefined;
    "prior"?: InputPathType | null | undefined;
    "nprior"?: InputPathType | null | undefined;
    "nset"?: number | null | undefined;
    "lprior"?: InputPathType | null | undefined;
    "lset"?: number | null | undefined;
    "seg"?: InputPathType | null | undefined;
    "tprior"?: InputPathType | null | undefined;
    "cprior"?: InputPathType | null | undefined;
    "reg"?: InputPathType | null | undefined;
    "regnl"?: InputPathType | null | undefined;
    "init"?: InputPathType | null | undefined;
    "nb"?: number | null | undefined;
    "ns"?: number | null | undefined;
    "nk"?: number | null | undefined;
    "nu"?: number | null | undefined;
    "sdp"?: InputPathType | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
    "version": boolean;
}
type DmriPathsParametersTagged = Required<Pick<DmriPathsParameters, '@type'>> & DmriPathsParameters;


/**
 * Output object returned when calling `DmriPathsParameters(...)`.
 *
 * @interface
 */
interface DmriPathsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param indir Input subject directory (optional), specify multiple for longitudinal data.
 * @param outdir Output directory (one per path).
 * @param dwi DWI volume series.
 * @param grad Text file of diffusion gradients.
 * @param bval Text file of diffusion b-values.
 * @param mask Mask volume.
 * @param bpdir BEDPOST directory.
 * @param ntr Max number of tracts per voxel (default 1).
 * @param fmin Tract volume fraction threshold (default 0).
 * @param basereg Base-to-DWI registration, needed for longitudinal data only (.mat, as many as input directories).
 * @param basemask Base template mask volume.
 * @param roi1 End ROI 1 (volume or label, one per path).
 * @param roi2 End ROI 2 (volume or label, one per path).
 * @param roimesh1 Mesh for end ROI 1 (for label ROIs).
 * @param roimesh2 Mesh for end ROI 2 (for label ROIs).
 * @param roiref1 Reference volume for end ROI 1 (for label ROIs).
 * @param roiref2 Reference volume for end ROI 2 (for label ROIs).
 * @param prior Spatial path priors (negative log-likelihoods off and on the path, one pair per path).
 * @param nprior Near-neighbor label priors (negative log-likelihood and list of labels, one pair per path).
 * @param nset Subset of near-neighbor label priors (default all).
 * @param lprior Local-neighbor label priors (negative log-likelihood and list of labels, one pair per path).
 * @param lset Subset of local-neighbor label priors (default all).
 * @param seg Segmentation map of test subject, specify multiple for longitudinal data.
 * @param tprior Path tangent vector priors (negative log-likelihood, one per path).
 * @param cprior Path curvature priors (negative log-likelihood, one per path).
 * @param reg DWI-to-atlas affine registration (.mat).
 * @param regnl DWI-to-atlas nonlinear registration (.m3z).
 * @param init Text file of initial control points (one per path).
 * @param nb Number of burn-in samples (default 5000).
 * @param ns Number of post-burn-in samples (default 5000).
 * @param nk Keep every nk-th sample (default 10).
 * @param nu Update proposal every nu-th sample (default 40).
 * @param sdp Text file with initial proposal standard deviations for control point perturbations.
 * @param debug Turn on debugging.
 * @param checkopts Don't run anything, just check options and exit.
 * @param version Print out version and exit.
 *
 * @returns Parameter dictionary
 */
function dmri_paths_params(
    indir: string | null = null,
    outdir: string | null = null,
    dwi: InputPathType | null = null,
    grad: InputPathType | null = null,
    bval: InputPathType | null = null,
    mask: InputPathType | null = null,
    bpdir: string | null = null,
    ntr: number | null = null,
    fmin: number | null = null,
    basereg: InputPathType | null = null,
    basemask: InputPathType | null = null,
    roi1: InputPathType | null = null,
    roi2: InputPathType | null = null,
    roimesh1: InputPathType | null = null,
    roimesh2: InputPathType | null = null,
    roiref1: InputPathType | null = null,
    roiref2: InputPathType | null = null,
    prior: InputPathType | null = null,
    nprior: InputPathType | null = null,
    nset: number | null = null,
    lprior: InputPathType | null = null,
    lset: number | null = null,
    seg: InputPathType | null = null,
    tprior: InputPathType | null = null,
    cprior: InputPathType | null = null,
    reg: InputPathType | null = null,
    regnl: InputPathType | null = null,
    init: InputPathType | null = null,
    nb: number | null = null,
    ns: number | null = null,
    nk: number | null = null,
    nu: number | null = null,
    sdp: InputPathType | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
): DmriPathsParametersTagged {
    const params = {
        "@type": "freesurfer/dmri_paths" as const,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    };
    if (indir !== null) {
        params["indir"] = indir;
    }
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (dwi !== null) {
        params["dwi"] = dwi;
    }
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (bval !== null) {
        params["bval"] = bval;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (bpdir !== null) {
        params["bpdir"] = bpdir;
    }
    if (ntr !== null) {
        params["ntr"] = ntr;
    }
    if (fmin !== null) {
        params["fmin"] = fmin;
    }
    if (basereg !== null) {
        params["basereg"] = basereg;
    }
    if (basemask !== null) {
        params["basemask"] = basemask;
    }
    if (roi1 !== null) {
        params["roi1"] = roi1;
    }
    if (roi2 !== null) {
        params["roi2"] = roi2;
    }
    if (roimesh1 !== null) {
        params["roimesh1"] = roimesh1;
    }
    if (roimesh2 !== null) {
        params["roimesh2"] = roimesh2;
    }
    if (roiref1 !== null) {
        params["roiref1"] = roiref1;
    }
    if (roiref2 !== null) {
        params["roiref2"] = roiref2;
    }
    if (prior !== null) {
        params["prior"] = prior;
    }
    if (nprior !== null) {
        params["nprior"] = nprior;
    }
    if (nset !== null) {
        params["nset"] = nset;
    }
    if (lprior !== null) {
        params["lprior"] = lprior;
    }
    if (lset !== null) {
        params["lset"] = lset;
    }
    if (seg !== null) {
        params["seg"] = seg;
    }
    if (tprior !== null) {
        params["tprior"] = tprior;
    }
    if (cprior !== null) {
        params["cprior"] = cprior;
    }
    if (reg !== null) {
        params["reg"] = reg;
    }
    if (regnl !== null) {
        params["regnl"] = regnl;
    }
    if (init !== null) {
        params["init"] = init;
    }
    if (nb !== null) {
        params["nb"] = nb;
    }
    if (ns !== null) {
        params["ns"] = ns;
    }
    if (nk !== null) {
        params["nk"] = nk;
    }
    if (nu !== null) {
        params["nu"] = nu;
    }
    if (sdp !== null) {
        params["sdp"] = sdp;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_paths_cargs(
    params: DmriPathsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_paths");
    if ((params["indir"] ?? null) !== null) {
        cargs.push(
            "--indir",
            (params["indir"] ?? null)
        );
    }
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "--outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["dwi"] ?? null) !== null) {
        cargs.push(
            "--dwi",
            execution.inputFile((params["dwi"] ?? null))
        );
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "--grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["bval"] ?? null) !== null) {
        cargs.push(
            "--bval",
            execution.inputFile((params["bval"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["bpdir"] ?? null) !== null) {
        cargs.push(
            "--bpdir",
            (params["bpdir"] ?? null)
        );
    }
    if ((params["ntr"] ?? null) !== null) {
        cargs.push(
            "--ntr",
            String((params["ntr"] ?? null))
        );
    }
    if ((params["fmin"] ?? null) !== null) {
        cargs.push(
            "--fmin",
            String((params["fmin"] ?? null))
        );
    }
    if ((params["basereg"] ?? null) !== null) {
        cargs.push(
            "--basereg",
            execution.inputFile((params["basereg"] ?? null))
        );
    }
    if ((params["basemask"] ?? null) !== null) {
        cargs.push(
            "--basemask",
            execution.inputFile((params["basemask"] ?? null))
        );
    }
    if ((params["roi1"] ?? null) !== null) {
        cargs.push(
            "--roi1",
            execution.inputFile((params["roi1"] ?? null))
        );
    }
    if ((params["roi2"] ?? null) !== null) {
        cargs.push(
            "--roi2",
            execution.inputFile((params["roi2"] ?? null))
        );
    }
    if ((params["roimesh1"] ?? null) !== null) {
        cargs.push(
            "--roimesh1",
            execution.inputFile((params["roimesh1"] ?? null))
        );
    }
    if ((params["roimesh2"] ?? null) !== null) {
        cargs.push(
            "--roimesh2",
            execution.inputFile((params["roimesh2"] ?? null))
        );
    }
    if ((params["roiref1"] ?? null) !== null) {
        cargs.push(
            "--roiref1",
            execution.inputFile((params["roiref1"] ?? null))
        );
    }
    if ((params["roiref2"] ?? null) !== null) {
        cargs.push(
            "--roiref2",
            execution.inputFile((params["roiref2"] ?? null))
        );
    }
    if ((params["prior"] ?? null) !== null) {
        cargs.push(
            "--prior",
            execution.inputFile((params["prior"] ?? null))
        );
    }
    if ((params["nprior"] ?? null) !== null) {
        cargs.push(
            "--nprior",
            execution.inputFile((params["nprior"] ?? null))
        );
    }
    if ((params["nset"] ?? null) !== null) {
        cargs.push(
            "--nset",
            String((params["nset"] ?? null))
        );
    }
    if ((params["lprior"] ?? null) !== null) {
        cargs.push(
            "--lprior",
            execution.inputFile((params["lprior"] ?? null))
        );
    }
    if ((params["lset"] ?? null) !== null) {
        cargs.push(
            "--lset",
            String((params["lset"] ?? null))
        );
    }
    if ((params["seg"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["seg"] ?? null))
        );
    }
    if ((params["tprior"] ?? null) !== null) {
        cargs.push(
            "--tprior",
            execution.inputFile((params["tprior"] ?? null))
        );
    }
    if ((params["cprior"] ?? null) !== null) {
        cargs.push(
            "--cprior",
            execution.inputFile((params["cprior"] ?? null))
        );
    }
    if ((params["reg"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["reg"] ?? null))
        );
    }
    if ((params["regnl"] ?? null) !== null) {
        cargs.push(
            "--regnl",
            execution.inputFile((params["regnl"] ?? null))
        );
    }
    if ((params["init"] ?? null) !== null) {
        cargs.push(
            "--init",
            execution.inputFile((params["init"] ?? null))
        );
    }
    if ((params["nb"] ?? null) !== null) {
        cargs.push(
            "--nb",
            String((params["nb"] ?? null))
        );
    }
    if ((params["ns"] ?? null) !== null) {
        cargs.push(
            "--ns",
            String((params["ns"] ?? null))
        );
    }
    if ((params["nk"] ?? null) !== null) {
        cargs.push(
            "--nk",
            String((params["nk"] ?? null))
        );
    }
    if ((params["nu"] ?? null) !== null) {
        cargs.push(
            "--nu",
            String((params["nu"] ?? null))
        );
    }
    if ((params["sdp"] ?? null) !== null) {
        cargs.push(
            "--sdp",
            execution.inputFile((params["sdp"] ?? null))
        );
    }
    if ((params["debug"] ?? false)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? false)) {
        cargs.push("--checkopts");
    }
    if ((params["version"] ?? false)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_paths_outputs(
    params: DmriPathsParameters,
    execution: Execution,
): DmriPathsOutputs {
    const ret: DmriPathsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * dmri_paths
 *
 * Tool for diffusion MRI path analysis.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriPathsOutputs`).
 */
function dmri_paths_execute(
    params: DmriPathsParameters,
    runner: Runner | null = null,
): DmriPathsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_PATHS_METADATA);
    params = execution.params(params)
    const cargs = dmri_paths_cargs(params, execution)
    const ret = dmri_paths_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_paths
 *
 * Tool for diffusion MRI path analysis.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param indir Input subject directory (optional), specify multiple for longitudinal data.
 * @param outdir Output directory (one per path).
 * @param dwi DWI volume series.
 * @param grad Text file of diffusion gradients.
 * @param bval Text file of diffusion b-values.
 * @param mask Mask volume.
 * @param bpdir BEDPOST directory.
 * @param ntr Max number of tracts per voxel (default 1).
 * @param fmin Tract volume fraction threshold (default 0).
 * @param basereg Base-to-DWI registration, needed for longitudinal data only (.mat, as many as input directories).
 * @param basemask Base template mask volume.
 * @param roi1 End ROI 1 (volume or label, one per path).
 * @param roi2 End ROI 2 (volume or label, one per path).
 * @param roimesh1 Mesh for end ROI 1 (for label ROIs).
 * @param roimesh2 Mesh for end ROI 2 (for label ROIs).
 * @param roiref1 Reference volume for end ROI 1 (for label ROIs).
 * @param roiref2 Reference volume for end ROI 2 (for label ROIs).
 * @param prior Spatial path priors (negative log-likelihoods off and on the path, one pair per path).
 * @param nprior Near-neighbor label priors (negative log-likelihood and list of labels, one pair per path).
 * @param nset Subset of near-neighbor label priors (default all).
 * @param lprior Local-neighbor label priors (negative log-likelihood and list of labels, one pair per path).
 * @param lset Subset of local-neighbor label priors (default all).
 * @param seg Segmentation map of test subject, specify multiple for longitudinal data.
 * @param tprior Path tangent vector priors (negative log-likelihood, one per path).
 * @param cprior Path curvature priors (negative log-likelihood, one per path).
 * @param reg DWI-to-atlas affine registration (.mat).
 * @param regnl DWI-to-atlas nonlinear registration (.m3z).
 * @param init Text file of initial control points (one per path).
 * @param nb Number of burn-in samples (default 5000).
 * @param ns Number of post-burn-in samples (default 5000).
 * @param nk Keep every nk-th sample (default 10).
 * @param nu Update proposal every nu-th sample (default 40).
 * @param sdp Text file with initial proposal standard deviations for control point perturbations.
 * @param debug Turn on debugging.
 * @param checkopts Don't run anything, just check options and exit.
 * @param version Print out version and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriPathsOutputs`).
 */
function dmri_paths(
    indir: string | null = null,
    outdir: string | null = null,
    dwi: InputPathType | null = null,
    grad: InputPathType | null = null,
    bval: InputPathType | null = null,
    mask: InputPathType | null = null,
    bpdir: string | null = null,
    ntr: number | null = null,
    fmin: number | null = null,
    basereg: InputPathType | null = null,
    basemask: InputPathType | null = null,
    roi1: InputPathType | null = null,
    roi2: InputPathType | null = null,
    roimesh1: InputPathType | null = null,
    roimesh2: InputPathType | null = null,
    roiref1: InputPathType | null = null,
    roiref2: InputPathType | null = null,
    prior: InputPathType | null = null,
    nprior: InputPathType | null = null,
    nset: number | null = null,
    lprior: InputPathType | null = null,
    lset: number | null = null,
    seg: InputPathType | null = null,
    tprior: InputPathType | null = null,
    cprior: InputPathType | null = null,
    reg: InputPathType | null = null,
    regnl: InputPathType | null = null,
    init: InputPathType | null = null,
    nb: number | null = null,
    ns: number | null = null,
    nk: number | null = null,
    nu: number | null = null,
    sdp: InputPathType | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): DmriPathsOutputs {
    const params = dmri_paths_params(indir, outdir, dwi, grad, bval, mask, bpdir, ntr, fmin, basereg, basemask, roi1, roi2, roimesh1, roimesh2, roiref1, roiref2, prior, nprior, nset, lprior, lset, seg, tprior, cprior, reg, regnl, init, nb, ns, nk, nu, sdp, debug, checkopts, version)
    return dmri_paths_execute(params, runner);
}


export {
      DMRI_PATHS_METADATA,
      DmriPathsOutputs,
      dmri_paths,
      dmri_paths_execute,
      dmri_paths_params,
};
