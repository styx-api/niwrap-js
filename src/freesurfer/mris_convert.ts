// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_CONVERT_METADATA: Metadata = {
    id: "1d19416b8d60b6d508587fe18bc53b66a00c61d5.boutiques",
    name: "mris_convert",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisConvertParameters {
    "__STYXTYPE__": "mris_convert";
    "input_file": InputPathType;
    "second_input_file"?: InputPathType | null | undefined;
    "output_file": string;
    "patch": boolean;
    "curv_overlay_files"?: Array<string> | null | undefined;
    "functional_data_file"?: InputPathType | null | undefined;
    "orig_positions"?: string | null | undefined;
    "scale"?: number | null | undefined;
    "rescale": boolean;
    "talairach_xfm"?: string | null | undefined;
    "normals": boolean;
    "neighbors": boolean;
    "xyz": boolean;
    "annotation_file"?: InputPathType | null | undefined;
    "parcstats_file"?: InputPathType | null | undefined;
    "gifti_dataarray_num"?: number | null | undefined;
    "label_file"?: InputPathType | null | undefined;
    "label_stats_file"?: string | null | undefined;
    "combine_surfs": boolean;
    "merge_gifti": boolean;
    "split_gifti": boolean;
    "gifti_outdir"?: string | null | undefined;
    "delete_cmds": boolean;
    "center": boolean;
    "vol_geom"?: string | null | undefined;
    "remove_vol_geom": boolean;
    "to_surf"?: string | null | undefined;
    "to_scanner": boolean;
    "to_tkr": boolean;
    "userealras": boolean;
    "usesurfras": boolean;
    "upsample"?: string | null | undefined;
    "volume"?: string | null | undefined;
    "area"?: string | null | undefined;
    "angle"?: string | null | undefined;
    "label_to_mask"?: string | null | undefined;
    "cras_add": boolean;
    "cras_subtract": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_convert": mris_convert_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_convert": mris_convert_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_convert(...)`.
 *
 * @interface
 */
interface MrisConvertOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output converted surface file
     */
    converted_surface: OutputPathType;
}


function mris_convert_params(
    input_file: InputPathType,
    output_file: string,
    second_input_file: InputPathType | null = null,
    patch: boolean = false,
    curv_overlay_files: Array<string> | null = null,
    functional_data_file: InputPathType | null = null,
    orig_positions: string | null = null,
    scale: number | null = null,
    rescale: boolean = false,
    talairach_xfm: string | null = null,
    normals: boolean = false,
    neighbors: boolean = false,
    xyz: boolean = false,
    annotation_file: InputPathType | null = null,
    parcstats_file: InputPathType | null = null,
    gifti_dataarray_num: number | null = null,
    label_file: InputPathType | null = null,
    label_stats_file: string | null = null,
    combine_surfs: boolean = false,
    merge_gifti: boolean = false,
    split_gifti: boolean = false,
    gifti_outdir: string | null = null,
    delete_cmds: boolean = false,
    center: boolean = false,
    vol_geom: string | null = null,
    remove_vol_geom: boolean = false,
    to_surf: string | null = null,
    to_scanner: boolean = false,
    to_tkr: boolean = false,
    userealras: boolean = false,
    usesurfras: boolean = false,
    upsample: string | null = null,
    volume: string | null = null,
    area: string | null = null,
    angle: string | null = null,
    label_to_mask: string | null = null,
    cras_add: boolean = false,
    cras_subtract: boolean = false,
): MrisConvertParameters {
    /**
     * Build parameters.
    
     * @param input_file Input filename
     * @param output_file Output filename
     * @param second_input_file Second input filename to be combined, required for --combinesurfs
     * @param patch Input file is a patch file, not a full surface
     * @param curv_overlay_files Input scalar curv overlay files
     * @param functional_data_file Input functional time-series or other multi-frame data
     * @param orig_positions Read orig positions
     * @param scale Scale vertex xyz by scale
     * @param rescale Rescale vertex xyz so total area is same as group average
     * @param talairach_xfm Apply talairach xfm of subject to vertex xyz
     * @param normals Output ascii file where vertex data is the surface normal vector
     * @param neighbors Write out neighbors of a vertex in each row
     * @param xyz Print only surface xyz to ascii file
     * @param annotation_file Input annotation or gifti label data
     * @param parcstats_file Input text file containing label/val pairs for parcellation
     * @param gifti_dataarray_num Input gifti dataarray number to use
     * @param label_file Input .label file and name for this label
     * @param label_stats_file Output gifti file to which label stats will be written
     * @param combine_surfs Combine surface files, two input surface files required
     * @param merge_gifti Generate combined gifti file with surface and multiple curvature data
     * @param split_gifti Separate surface and data array from combined gifti file
     * @param gifti_outdir Output directory for generated gifti files
     * @param delete_cmds Delete command lines in surface
     * @param center Put center of surface at (0,0,0)
     * @param vol_geom Use MRIVol to set the volume geometry
     * @param remove_vol_geom Set the valid flag in vg to 0
     * @param to_surf Copy coordinates from surfcoords to output (good for patches)
     * @param to_scanner Convert coordinates from native FS (tkr) coords to scanner coords
     * @param to_tkr Convert coordinates from scanner coords to native FS (tkr) coords
     * @param userealras Same as --to-scanner
     * @param usesurfras Same as --to-tkr
     * @param upsample Upsample N times by splitting edges/faces
     * @param volume Compute vertex-wise volume
     * @param area Compute vertex-wise area
     * @param angle Compute cortical orientation angles
     * @param label_to_mask Convert a surface-based label to a binary mask
     * @param cras_add Shift center to scanner coordinate center
     * @param cras_subtract Shift center from scanner coordinate center
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_convert" as const,
        "input_file": input_file,
        "output_file": output_file,
        "patch": patch,
        "rescale": rescale,
        "normals": normals,
        "neighbors": neighbors,
        "xyz": xyz,
        "combine_surfs": combine_surfs,
        "merge_gifti": merge_gifti,
        "split_gifti": split_gifti,
        "delete_cmds": delete_cmds,
        "center": center,
        "remove_vol_geom": remove_vol_geom,
        "to_scanner": to_scanner,
        "to_tkr": to_tkr,
        "userealras": userealras,
        "usesurfras": usesurfras,
        "cras_add": cras_add,
        "cras_subtract": cras_subtract,
    };
    if (second_input_file !== null) {
        params["second_input_file"] = second_input_file;
    }
    if (curv_overlay_files !== null) {
        params["curv_overlay_files"] = curv_overlay_files;
    }
    if (functional_data_file !== null) {
        params["functional_data_file"] = functional_data_file;
    }
    if (orig_positions !== null) {
        params["orig_positions"] = orig_positions;
    }
    if (scale !== null) {
        params["scale"] = scale;
    }
    if (talairach_xfm !== null) {
        params["talairach_xfm"] = talairach_xfm;
    }
    if (annotation_file !== null) {
        params["annotation_file"] = annotation_file;
    }
    if (parcstats_file !== null) {
        params["parcstats_file"] = parcstats_file;
    }
    if (gifti_dataarray_num !== null) {
        params["gifti_dataarray_num"] = gifti_dataarray_num;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    if (label_stats_file !== null) {
        params["label_stats_file"] = label_stats_file;
    }
    if (gifti_outdir !== null) {
        params["gifti_outdir"] = gifti_outdir;
    }
    if (vol_geom !== null) {
        params["vol_geom"] = vol_geom;
    }
    if (to_surf !== null) {
        params["to_surf"] = to_surf;
    }
    if (upsample !== null) {
        params["upsample"] = upsample;
    }
    if (volume !== null) {
        params["volume"] = volume;
    }
    if (area !== null) {
        params["area"] = area;
    }
    if (angle !== null) {
        params["angle"] = angle;
    }
    if (label_to_mask !== null) {
        params["label_to_mask"] = label_to_mask;
    }
    return params;
}


function mris_convert_cargs(
    params: MrisConvertParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_convert");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["second_input_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["second_input_file"] ?? null)));
    }
    cargs.push((params["output_file"] ?? null));
    if ((params["patch"] ?? null)) {
        cargs.push("-p");
    }
    if ((params["curv_overlay_files"] ?? null) !== null) {
        cargs.push(
            "-c",
            ...(params["curv_overlay_files"] ?? null)
        );
    }
    if ((params["functional_data_file"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["functional_data_file"] ?? null))
        );
    }
    if ((params["orig_positions"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["orig_positions"] ?? null)
        );
    }
    if ((params["scale"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["scale"] ?? null))
        );
    }
    if ((params["rescale"] ?? null)) {
        cargs.push("-r");
    }
    if ((params["talairach_xfm"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["talairach_xfm"] ?? null)
        );
    }
    if ((params["normals"] ?? null)) {
        cargs.push("-n");
    }
    if ((params["neighbors"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["xyz"] ?? null)) {
        cargs.push("-a");
    }
    if ((params["annotation_file"] ?? null) !== null) {
        cargs.push(
            "--annot",
            execution.inputFile((params["annotation_file"] ?? null))
        );
    }
    if ((params["parcstats_file"] ?? null) !== null) {
        cargs.push(
            "--parcstats",
            execution.inputFile((params["parcstats_file"] ?? null))
        );
    }
    if ((params["gifti_dataarray_num"] ?? null) !== null) {
        cargs.push(
            "--da_num",
            String((params["gifti_dataarray_num"] ?? null))
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "--label",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["label_stats_file"] ?? null) !== null) {
        cargs.push(
            "--labelstats",
            (params["label_stats_file"] ?? null)
        );
    }
    if ((params["combine_surfs"] ?? null)) {
        cargs.push("--combinesurfs");
    }
    if ((params["merge_gifti"] ?? null)) {
        cargs.push("--mergegifti");
    }
    if ((params["split_gifti"] ?? null)) {
        cargs.push("--splitgifti");
    }
    if ((params["gifti_outdir"] ?? null) !== null) {
        cargs.push(
            "--giftioutdir",
            (params["gifti_outdir"] ?? null)
        );
    }
    if ((params["delete_cmds"] ?? null)) {
        cargs.push("--delete-cmds");
    }
    if ((params["center"] ?? null)) {
        cargs.push("--center");
    }
    if ((params["vol_geom"] ?? null) !== null) {
        cargs.push(
            "--vol-geom",
            (params["vol_geom"] ?? null)
        );
    }
    if ((params["remove_vol_geom"] ?? null)) {
        cargs.push("--remove-vol-geom");
    }
    if ((params["to_surf"] ?? null) !== null) {
        cargs.push(
            "--to-surf",
            (params["to_surf"] ?? null)
        );
    }
    if ((params["to_scanner"] ?? null)) {
        cargs.push("--to-scanner");
    }
    if ((params["to_tkr"] ?? null)) {
        cargs.push("--to-tkr");
    }
    if ((params["userealras"] ?? null)) {
        cargs.push("--userealras");
    }
    if ((params["usesurfras"] ?? null)) {
        cargs.push("--usesurfras");
    }
    if ((params["upsample"] ?? null) !== null) {
        cargs.push(
            "--upsample",
            (params["upsample"] ?? null)
        );
    }
    if ((params["volume"] ?? null) !== null) {
        cargs.push(
            "--volume",
            (params["volume"] ?? null)
        );
    }
    if ((params["area"] ?? null) !== null) {
        cargs.push(
            "--area",
            (params["area"] ?? null)
        );
    }
    if ((params["angle"] ?? null) !== null) {
        cargs.push(
            "--angle",
            (params["angle"] ?? null)
        );
    }
    if ((params["label_to_mask"] ?? null) !== null) {
        cargs.push(
            "--label2mask",
            (params["label_to_mask"] ?? null)
        );
    }
    if ((params["cras_add"] ?? null)) {
        cargs.push("--cras_add");
    }
    if ((params["cras_subtract"] ?? null)) {
        cargs.push("--cras_subtract");
    }
    return cargs;
}


function mris_convert_outputs(
    params: MrisConvertParameters,
    execution: Execution,
): MrisConvertOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisConvertOutputs = {
        root: execution.outputFile("."),
        converted_surface: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


function mris_convert_execute(
    params: MrisConvertParameters,
    execution: Execution,
): MrisConvertOutputs {
    /**
     * This program will convert MRI-surface data formats.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisConvertOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_convert_cargs(params, execution)
    const ret = mris_convert_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_convert(
    input_file: InputPathType,
    output_file: string,
    second_input_file: InputPathType | null = null,
    patch: boolean = false,
    curv_overlay_files: Array<string> | null = null,
    functional_data_file: InputPathType | null = null,
    orig_positions: string | null = null,
    scale: number | null = null,
    rescale: boolean = false,
    talairach_xfm: string | null = null,
    normals: boolean = false,
    neighbors: boolean = false,
    xyz: boolean = false,
    annotation_file: InputPathType | null = null,
    parcstats_file: InputPathType | null = null,
    gifti_dataarray_num: number | null = null,
    label_file: InputPathType | null = null,
    label_stats_file: string | null = null,
    combine_surfs: boolean = false,
    merge_gifti: boolean = false,
    split_gifti: boolean = false,
    gifti_outdir: string | null = null,
    delete_cmds: boolean = false,
    center: boolean = false,
    vol_geom: string | null = null,
    remove_vol_geom: boolean = false,
    to_surf: string | null = null,
    to_scanner: boolean = false,
    to_tkr: boolean = false,
    userealras: boolean = false,
    usesurfras: boolean = false,
    upsample: string | null = null,
    volume: string | null = null,
    area: string | null = null,
    angle: string | null = null,
    label_to_mask: string | null = null,
    cras_add: boolean = false,
    cras_subtract: boolean = false,
    runner: Runner | null = null,
): MrisConvertOutputs {
    /**
     * This program will convert MRI-surface data formats.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_file Input filename
     * @param output_file Output filename
     * @param second_input_file Second input filename to be combined, required for --combinesurfs
     * @param patch Input file is a patch file, not a full surface
     * @param curv_overlay_files Input scalar curv overlay files
     * @param functional_data_file Input functional time-series or other multi-frame data
     * @param orig_positions Read orig positions
     * @param scale Scale vertex xyz by scale
     * @param rescale Rescale vertex xyz so total area is same as group average
     * @param talairach_xfm Apply talairach xfm of subject to vertex xyz
     * @param normals Output ascii file where vertex data is the surface normal vector
     * @param neighbors Write out neighbors of a vertex in each row
     * @param xyz Print only surface xyz to ascii file
     * @param annotation_file Input annotation or gifti label data
     * @param parcstats_file Input text file containing label/val pairs for parcellation
     * @param gifti_dataarray_num Input gifti dataarray number to use
     * @param label_file Input .label file and name for this label
     * @param label_stats_file Output gifti file to which label stats will be written
     * @param combine_surfs Combine surface files, two input surface files required
     * @param merge_gifti Generate combined gifti file with surface and multiple curvature data
     * @param split_gifti Separate surface and data array from combined gifti file
     * @param gifti_outdir Output directory for generated gifti files
     * @param delete_cmds Delete command lines in surface
     * @param center Put center of surface at (0,0,0)
     * @param vol_geom Use MRIVol to set the volume geometry
     * @param remove_vol_geom Set the valid flag in vg to 0
     * @param to_surf Copy coordinates from surfcoords to output (good for patches)
     * @param to_scanner Convert coordinates from native FS (tkr) coords to scanner coords
     * @param to_tkr Convert coordinates from scanner coords to native FS (tkr) coords
     * @param userealras Same as --to-scanner
     * @param usesurfras Same as --to-tkr
     * @param upsample Upsample N times by splitting edges/faces
     * @param volume Compute vertex-wise volume
     * @param area Compute vertex-wise area
     * @param angle Compute cortical orientation angles
     * @param label_to_mask Convert a surface-based label to a binary mask
     * @param cras_add Shift center to scanner coordinate center
     * @param cras_subtract Shift center from scanner coordinate center
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisConvertOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_CONVERT_METADATA);
    const params = mris_convert_params(input_file, output_file, second_input_file, patch, curv_overlay_files, functional_data_file, orig_positions, scale, rescale, talairach_xfm, normals, neighbors, xyz, annotation_file, parcstats_file, gifti_dataarray_num, label_file, label_stats_file, combine_surfs, merge_gifti, split_gifti, gifti_outdir, delete_cmds, center, vol_geom, remove_vol_geom, to_surf, to_scanner, to_tkr, userealras, usesurfras, upsample, volume, area, angle, label_to_mask, cras_add, cras_subtract)
    return mris_convert_execute(params, execution);
}


export {
      MRIS_CONVERT_METADATA,
      MrisConvertOutputs,
      MrisConvertParameters,
      mris_convert,
      mris_convert_params,
};
