// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__GET_AFNI_VERSION_METADATA: Metadata = {
    id: "00b4038dc7dd30e795e94e467e6a777717d8d741.boutiques",
    name: "@get.afni.version",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VGetAfniVersionParameters {
    "__STYXTYPE__": "@get.afni.version";
    "version": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@get.afni.version": v__get_afni_version_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@get.afni.version": v__get_afni_version_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__get_afni_version(...)`.
 *
 * @interface
 */
interface VGetAfniVersionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Directory containing the downloaded AFNI source code for the specified version.
     */
    src_dir: OutputPathType;
}


function v__get_afni_version_params(
    version: string,
): VGetAfniVersionParameters {
    /**
     * Build parameters.
    
     * @param version AFNI version number to get (e.g., 16.0.01)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@get.afni.version" as const,
        "version": version,
    };
    return params;
}


function v__get_afni_version_cargs(
    params: VGetAfniVersionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@get.afni.version");
    cargs.push((params["version"] ?? null));
    return cargs;
}


function v__get_afni_version_outputs(
    params: VGetAfniVersionParameters,
    execution: Execution,
): VGetAfniVersionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VGetAfniVersionOutputs = {
        root: execution.outputFile("."),
        src_dir: execution.outputFile(["AFNI_", (params["version"] ?? null), "/AFNI/src"].join('')),
    };
    return ret;
}


function v__get_afni_version_execute(
    params: VGetAfniVersionParameters,
    execution: Execution,
): VGetAfniVersionOutputs {
    /**
     * Downloads the source code for a specified AFNI version.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VGetAfniVersionOutputs`).
     */
    params = execution.params(params)
    const cargs = v__get_afni_version_cargs(params, execution)
    const ret = v__get_afni_version_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__get_afni_version(
    version: string,
    runner: Runner | null = null,
): VGetAfniVersionOutputs {
    /**
     * Downloads the source code for a specified AFNI version.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param version AFNI version number to get (e.g., 16.0.01)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VGetAfniVersionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__GET_AFNI_VERSION_METADATA);
    const params = v__get_afni_version_params(version)
    return v__get_afni_version_execute(params, execution);
}


export {
      VGetAfniVersionOutputs,
      VGetAfniVersionParameters,
      V__GET_AFNI_VERSION_METADATA,
      v__get_afni_version,
      v__get_afni_version_params,
};
