// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_VERTEX_AREAS_METADATA: Metadata = {
    id: "802d1bdc28544caa099fcfea45e6844873faa914.boutiques",
    name: "surface-vertex-areas",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceVertexAreasParameters {
    "__STYXTYPE__": "surface-vertex-areas";
    "surface": InputPathType;
    "metric": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-vertex-areas": surface_vertex_areas_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-vertex-areas": surface_vertex_areas_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_vertex_areas(...)`.
 *
 * @interface
 */
interface SurfaceVertexAreasOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output metric
     */
    metric: OutputPathType;
}


function surface_vertex_areas_params(
    surface: InputPathType,
    metric: string,
): SurfaceVertexAreasParameters {
    /**
     * Build parameters.
    
     * @param surface the surface to measure
     * @param metric the output metric
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-vertex-areas" as const,
        "surface": surface,
        "metric": metric,
    };
    return params;
}


function surface_vertex_areas_cargs(
    params: SurfaceVertexAreasParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-vertex-areas");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["metric"] ?? null));
    return cargs;
}


function surface_vertex_areas_outputs(
    params: SurfaceVertexAreasParameters,
    execution: Execution,
): SurfaceVertexAreasOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceVertexAreasOutputs = {
        root: execution.outputFile("."),
        metric: execution.outputFile([(params["metric"] ?? null)].join('')),
    };
    return ret;
}


function surface_vertex_areas_execute(
    params: SurfaceVertexAreasParameters,
    execution: Execution,
): SurfaceVertexAreasOutputs {
    /**
     * Measure surface area each vertex is responsible for.
     * 
     * Each vertex gets one third of the area of each triangle it is a part of.  Units are mm^2.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceVertexAreasOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_vertex_areas_cargs(params, execution)
    const ret = surface_vertex_areas_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_vertex_areas(
    surface: InputPathType,
    metric: string,
    runner: Runner | null = null,
): SurfaceVertexAreasOutputs {
    /**
     * Measure surface area each vertex is responsible for.
     * 
     * Each vertex gets one third of the area of each triangle it is a part of.  Units are mm^2.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param surface the surface to measure
     * @param metric the output metric
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceVertexAreasOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_VERTEX_AREAS_METADATA);
    const params = surface_vertex_areas_params(surface, metric)
    return surface_vertex_areas_execute(params, execution);
}


export {
      SURFACE_VERTEX_AREAS_METADATA,
      SurfaceVertexAreasOutputs,
      SurfaceVertexAreasParameters,
      surface_vertex_areas,
      surface_vertex_areas_params,
};
