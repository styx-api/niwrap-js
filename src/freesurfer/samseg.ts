// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SAMSEG_METADATA: Metadata = {
    id: "b9554e6a18ff4e14da26841f1b11f9902fa8b30f.boutiques",
    name: "samseg",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface SamsegParameters {
    "@type": "freesurfer.samseg";
    "input_files": Array<InputPathType>;
    "t1w_files"?: Array<InputPathType> | null | undefined;
    "t2w_files"?: Array<InputPathType> | null | undefined;
    "flair_files"?: Array<InputPathType> | null | undefined;
    "other_modality_files"?: Array<InputPathType> | null | undefined;
    "output_directory": string;
    "options_file"?: InputPathType | null | undefined;
    "dissection_photo_mode"?: string | null | undefined;
    "save_history": boolean;
    "subject"?: string | null | undefined;
    "save_posteriors": boolean;
    "save_probabilities": boolean;
    "no_save_warp": boolean;
    "mrf": boolean;
    "no_mrf": boolean;
    "threads"?: number | null | undefined;
    "atlas_directory"?: string | null | undefined;
    "gmm_file"?: InputPathType | null | undefined;
    "no_block_coordinate_descent": boolean;
    "logdomain_costandgradient_calculator": boolean;
    "no_logdomain_costandgradient_calculator": boolean;
    "recon": boolean;
    "fill": boolean;
    "normalization2": boolean;
    "use_t2w": boolean;
    "use_flair": boolean;
    "hires": boolean;
    "subjects_directory"?: string | null | undefined;
    "pallidum_separate": boolean;
    "stiffness"?: number | null | undefined;
    "lesion": boolean;
    "lesion_mask_pattern"?: Array<number> | null | undefined;
    "bias_field_smoothing_kernel"?: number | null | undefined;
    "registration_file"?: InputPathType | null | undefined;
    "regmat_file"?: InputPathType | null | undefined;
    "init_lta"?: InputPathType | null | undefined;
    "reg_only": boolean;
    "ssdd_directory"?: string | null | undefined;
    "save_mesh": boolean;
    "max_iters"?: number | null | undefined;
    "dice_file"?: InputPathType | null | undefined;
    "ignore_unknown": boolean;
    "smooth_wm_cortex"?: number | null | undefined;
    "profile_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.samseg": samseg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.samseg": samseg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `samseg(...)`.
 *
 * @interface
 */
interface SamsegOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmentation output file.
     */
    segmentation_output: OutputPathType;
    /**
     * Posterior probabilities output file.
     */
    posteriors_output: OutputPathType;
    /**
     * Probabilities output file, including post, prior, and likelihood.
     */
    probabilities_output: OutputPathType;
    /**
     * Mesh output file (if save-mesh is enabled).
     */
    mesh_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input image files, must be in registration with each other.
 * @param output_directory Output directory where results will be saved.
 * @param t1w_files T1-weighted input file, causes input to be conformed unless --hires is used.
 * @param t2w_files T2-weighted input file.
 * @param flair_files FLAIR-weighted input file.
 * @param other_modality_files Specific mode input files, each associated with a custom modality name.
 * @param options_file JSON file for specifying advanced options.
 * @param dissection_photo_mode Mode for processing 3D reconstructed dissection photos, specifying left/right/both.
 * @param save_history Turns on saving of processing history.
 * @param subject Subject identifier, sets output directory to subject/mri/samseg. The first input must be the conformed T1 weighted input.
 * @param save_posteriors Save posterior probabilities.
 * @param save_probabilities Save posterior, prior, and likelihood as 3-frame volume for each tissue type.
 * @param no_save_warp Do not save m3z-style warp.
 * @param mrf Perform Markov Random Field processing.
 * @param no_mrf Do not perform Markov Random Field processing.
 * @param threads Set the number of CPUs to use.
 * @param atlas_directory Path to the SAMSEG atlas directory.
 * @param gmm_file Gaussian Mixture Model file.
 * @param no_block_coordinate_descent Do not use block coordinate descent.
 * @param logdomain_costandgradient_calculator Use log-domain cost and gradient calculator.
 * @param no_logdomain_costandgradient_calculator Do not use log-domain cost and gradient calculator.
 * @param recon Run recon-all.
 * @param fill Use samseg to create filled.mgz instead of recon-all.
 * @param normalization2 Use samseg to create brain.mgz instead of recon-all (with --recon).
 * @param use_t2w Use the T2-weighted input when running recon-all.
 * @param use_flair Use the FLAIR-weighted input when running recon-all.
 * @param hires Use -hires when running recon-all.
 * @param subjects_directory Path to the SUBJECTS_DIR.
 * @param pallidum_separate Move pallidum outside of global white matter class, used for analyzing T2 or FLAIR.
 * @param stiffness Set mesh stiffness.
 * @param lesion Turn on lesion segmentation.
 * @param lesion_mask_pattern Pattern needed when using T2 for lesion mask, e.g., 0 1.
 * @param bias_field_smoothing_kernel Width of bias field smoothness.
 * @param registration_file Registration file (LTA or MAT) as output by samseg.
 * @param regmat_file Same as --reg.
 * @param init_lta Initial registration LTA file.
 * @param reg_only Only perform registration.
 * @param ssdd_directory Path to SAMSEG_Data_DIR where the atlas is located.
 * @param save_mesh Save the mesh, useful for longitudinal analysis.
 * @param max_iters Maximum number of iterations.
 * @param dice_file DICE coefficient file for segmentation.
 * @param ignore_unknown Ignore unknown flags.
 * @param smooth_wm_cortex Smooth white matter and cortex priors using specified sigma value.
 * @param profile_file Run using the cProfile Python profiler, with the specified profile file.
 *
 * @returns Parameter dictionary
 */
function samseg_params(
    input_files: Array<InputPathType>,
    output_directory: string,
    t1w_files: Array<InputPathType> | null = null,
    t2w_files: Array<InputPathType> | null = null,
    flair_files: Array<InputPathType> | null = null,
    other_modality_files: Array<InputPathType> | null = null,
    options_file: InputPathType | null = null,
    dissection_photo_mode: string | null = null,
    save_history: boolean = false,
    subject: string | null = null,
    save_posteriors: boolean = false,
    save_probabilities: boolean = false,
    no_save_warp: boolean = false,
    mrf: boolean = false,
    no_mrf: boolean = false,
    threads: number | null = null,
    atlas_directory: string | null = null,
    gmm_file: InputPathType | null = null,
    no_block_coordinate_descent: boolean = false,
    logdomain_costandgradient_calculator: boolean = false,
    no_logdomain_costandgradient_calculator: boolean = false,
    recon: boolean = false,
    fill: boolean = false,
    normalization2: boolean = false,
    use_t2w: boolean = false,
    use_flair: boolean = false,
    hires: boolean = false,
    subjects_directory: string | null = null,
    pallidum_separate: boolean = false,
    stiffness: number | null = null,
    lesion: boolean = false,
    lesion_mask_pattern: Array<number> | null = null,
    bias_field_smoothing_kernel: number | null = null,
    registration_file: InputPathType | null = null,
    regmat_file: InputPathType | null = null,
    init_lta: InputPathType | null = null,
    reg_only: boolean = false,
    ssdd_directory: string | null = null,
    save_mesh: boolean = false,
    max_iters: number | null = null,
    dice_file: InputPathType | null = null,
    ignore_unknown: boolean = false,
    smooth_wm_cortex: number | null = null,
    profile_file: InputPathType | null = null,
): SamsegParameters {
    const params = {
        "@type": "freesurfer.samseg" as const,
        "input_files": input_files,
        "output_directory": output_directory,
        "save_history": save_history,
        "save_posteriors": save_posteriors,
        "save_probabilities": save_probabilities,
        "no_save_warp": no_save_warp,
        "mrf": mrf,
        "no_mrf": no_mrf,
        "no_block_coordinate_descent": no_block_coordinate_descent,
        "logdomain_costandgradient_calculator": logdomain_costandgradient_calculator,
        "no_logdomain_costandgradient_calculator": no_logdomain_costandgradient_calculator,
        "recon": recon,
        "fill": fill,
        "normalization2": normalization2,
        "use_t2w": use_t2w,
        "use_flair": use_flair,
        "hires": hires,
        "pallidum_separate": pallidum_separate,
        "lesion": lesion,
        "reg_only": reg_only,
        "save_mesh": save_mesh,
        "ignore_unknown": ignore_unknown,
    };
    if (t1w_files !== null) {
        params["t1w_files"] = t1w_files;
    }
    if (t2w_files !== null) {
        params["t2w_files"] = t2w_files;
    }
    if (flair_files !== null) {
        params["flair_files"] = flair_files;
    }
    if (other_modality_files !== null) {
        params["other_modality_files"] = other_modality_files;
    }
    if (options_file !== null) {
        params["options_file"] = options_file;
    }
    if (dissection_photo_mode !== null) {
        params["dissection_photo_mode"] = dissection_photo_mode;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (threads !== null) {
        params["threads"] = threads;
    }
    if (atlas_directory !== null) {
        params["atlas_directory"] = atlas_directory;
    }
    if (gmm_file !== null) {
        params["gmm_file"] = gmm_file;
    }
    if (subjects_directory !== null) {
        params["subjects_directory"] = subjects_directory;
    }
    if (stiffness !== null) {
        params["stiffness"] = stiffness;
    }
    if (lesion_mask_pattern !== null) {
        params["lesion_mask_pattern"] = lesion_mask_pattern;
    }
    if (bias_field_smoothing_kernel !== null) {
        params["bias_field_smoothing_kernel"] = bias_field_smoothing_kernel;
    }
    if (registration_file !== null) {
        params["registration_file"] = registration_file;
    }
    if (regmat_file !== null) {
        params["regmat_file"] = regmat_file;
    }
    if (init_lta !== null) {
        params["init_lta"] = init_lta;
    }
    if (ssdd_directory !== null) {
        params["ssdd_directory"] = ssdd_directory;
    }
    if (max_iters !== null) {
        params["max_iters"] = max_iters;
    }
    if (dice_file !== null) {
        params["dice_file"] = dice_file;
    }
    if (smooth_wm_cortex !== null) {
        params["smooth_wm_cortex"] = smooth_wm_cortex;
    }
    if (profile_file !== null) {
        params["profile_file"] = profile_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function samseg_cargs(
    params: SamsegParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("samseg");
    cargs.push(
        "--i",
        ...(params["input_files"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["t1w_files"] ?? null) !== null) {
        cargs.push(
            "--t1w",
            ...(params["t1w_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["t2w_files"] ?? null) !== null) {
        cargs.push(
            "--t2w",
            ...(params["t2w_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["flair_files"] ?? null) !== null) {
        cargs.push(
            "--flair",
            ...(params["flair_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["other_modality_files"] ?? null) !== null) {
        cargs.push(
            "--mode",
            ...(params["other_modality_files"] ?? null).map(f => execution.inputFile(f))
        );
    }
    cargs.push(
        "--o",
        (params["output_directory"] ?? null)
    );
    if ((params["options_file"] ?? null) !== null) {
        cargs.push(
            "--options",
            execution.inputFile((params["options_file"] ?? null))
        );
    }
    if ((params["dissection_photo_mode"] ?? null) !== null) {
        cargs.push(
            "--dissection-photo",
            (params["dissection_photo_mode"] ?? null)
        );
    }
    if ((params["save_history"] ?? null)) {
        cargs.push("--history");
    }
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--s",
            (params["subject"] ?? null)
        );
    }
    if ((params["save_posteriors"] ?? null)) {
        cargs.push("--save-posteriors");
    }
    if ((params["save_probabilities"] ?? null)) {
        cargs.push("--save-probabilities");
    }
    if ((params["no_save_warp"] ?? null)) {
        cargs.push("--no-save-warp");
    }
    if ((params["mrf"] ?? null)) {
        cargs.push("--mrf");
    }
    if ((params["no_mrf"] ?? null)) {
        cargs.push("--no-mrf");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["atlas_directory"] ?? null) !== null) {
        cargs.push(
            "--atlas",
            (params["atlas_directory"] ?? null)
        );
    }
    if ((params["gmm_file"] ?? null) !== null) {
        cargs.push(
            "--gmm",
            execution.inputFile((params["gmm_file"] ?? null))
        );
    }
    if ((params["no_block_coordinate_descent"] ?? null)) {
        cargs.push("--no-block-coordinate-descent");
    }
    if ((params["logdomain_costandgradient_calculator"] ?? null)) {
        cargs.push("--logdomain-costandgradient-calculator");
    }
    if ((params["no_logdomain_costandgradient_calculator"] ?? null)) {
        cargs.push("--no-logdomain-costandgradient-calculator");
    }
    if ((params["recon"] ?? null)) {
        cargs.push("--recon");
    }
    if ((params["fill"] ?? null)) {
        cargs.push("--fill");
    }
    if ((params["normalization2"] ?? null)) {
        cargs.push("--normalization2");
    }
    if ((params["use_t2w"] ?? null)) {
        cargs.push("--use-t2w");
    }
    if ((params["use_flair"] ?? null)) {
        cargs.push("--use-flair");
    }
    if ((params["hires"] ?? null)) {
        cargs.push("--hires");
    }
    if ((params["subjects_directory"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_directory"] ?? null)
        );
    }
    if ((params["pallidum_separate"] ?? null)) {
        cargs.push("--pallidum-separate");
    }
    if ((params["stiffness"] ?? null) !== null) {
        cargs.push(
            "--stiffness",
            String((params["stiffness"] ?? null))
        );
    }
    if ((params["lesion"] ?? null)) {
        cargs.push("--lesion");
    }
    if ((params["lesion_mask_pattern"] ?? null) !== null) {
        cargs.push(
            "--lesion-mask-pattern",
            ...(params["lesion_mask_pattern"] ?? null).map(String)
        );
    }
    if ((params["bias_field_smoothing_kernel"] ?? null) !== null) {
        cargs.push(
            "--bias-field-smoothing-kernel",
            String((params["bias_field_smoothing_kernel"] ?? null))
        );
    }
    if ((params["registration_file"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["registration_file"] ?? null))
        );
    }
    if ((params["regmat_file"] ?? null) !== null) {
        cargs.push(
            "--regmat",
            execution.inputFile((params["regmat_file"] ?? null))
        );
    }
    if ((params["init_lta"] ?? null) !== null) {
        cargs.push(
            "--initlta",
            execution.inputFile((params["init_lta"] ?? null))
        );
    }
    if ((params["reg_only"] ?? null)) {
        cargs.push("--reg-only");
    }
    if ((params["ssdd_directory"] ?? null) !== null) {
        cargs.push(
            "--ssdd",
            (params["ssdd_directory"] ?? null)
        );
    }
    if ((params["save_mesh"] ?? null)) {
        cargs.push("--save-mesh");
    }
    if ((params["max_iters"] ?? null) !== null) {
        cargs.push(
            "--max-iters",
            String((params["max_iters"] ?? null))
        );
    }
    if ((params["dice_file"] ?? null) !== null) {
        cargs.push(
            "--dice",
            execution.inputFile((params["dice_file"] ?? null))
        );
    }
    if ((params["ignore_unknown"] ?? null)) {
        cargs.push("--ignore-unknown");
    }
    if ((params["smooth_wm_cortex"] ?? null) !== null) {
        cargs.push(
            "--smooth-wm-cortex",
            String((params["smooth_wm_cortex"] ?? null))
        );
    }
    if ((params["profile_file"] ?? null) !== null) {
        cargs.push(
            "--profile",
            execution.inputFile((params["profile_file"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function samseg_outputs(
    params: SamsegParameters,
    execution: Execution,
): SamsegOutputs {
    const ret: SamsegOutputs = {
        root: execution.outputFile("."),
        segmentation_output: execution.outputFile([(params["output_directory"] ?? null), "/seg.mgz"].join('')),
        posteriors_output: execution.outputFile([(params["output_directory"] ?? null), "/posteriors.mgz"].join('')),
        probabilities_output: execution.outputFile([(params["output_directory"] ?? null), "/probabilities.mgz"].join('')),
        mesh_output: execution.outputFile([(params["output_directory"] ?? null), "/mesh.stl"].join('')),
    };
    return ret;
}


/**
 * samseg
 *
 * SAMSEG (Statistical and Algorithmic Methods for Segmentation) is a tool for segmenting neuroimaging data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SamsegOutputs`).
 */
function samseg_execute(
    params: SamsegParameters,
    runner: Runner | null = null,
): SamsegOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SAMSEG_METADATA);
    params = execution.params(params)
    const cargs = samseg_cargs(params, execution)
    const ret = samseg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * samseg
 *
 * SAMSEG (Statistical and Algorithmic Methods for Segmentation) is a tool for segmenting neuroimaging data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_files Input image files, must be in registration with each other.
 * @param output_directory Output directory where results will be saved.
 * @param t1w_files T1-weighted input file, causes input to be conformed unless --hires is used.
 * @param t2w_files T2-weighted input file.
 * @param flair_files FLAIR-weighted input file.
 * @param other_modality_files Specific mode input files, each associated with a custom modality name.
 * @param options_file JSON file for specifying advanced options.
 * @param dissection_photo_mode Mode for processing 3D reconstructed dissection photos, specifying left/right/both.
 * @param save_history Turns on saving of processing history.
 * @param subject Subject identifier, sets output directory to subject/mri/samseg. The first input must be the conformed T1 weighted input.
 * @param save_posteriors Save posterior probabilities.
 * @param save_probabilities Save posterior, prior, and likelihood as 3-frame volume for each tissue type.
 * @param no_save_warp Do not save m3z-style warp.
 * @param mrf Perform Markov Random Field processing.
 * @param no_mrf Do not perform Markov Random Field processing.
 * @param threads Set the number of CPUs to use.
 * @param atlas_directory Path to the SAMSEG atlas directory.
 * @param gmm_file Gaussian Mixture Model file.
 * @param no_block_coordinate_descent Do not use block coordinate descent.
 * @param logdomain_costandgradient_calculator Use log-domain cost and gradient calculator.
 * @param no_logdomain_costandgradient_calculator Do not use log-domain cost and gradient calculator.
 * @param recon Run recon-all.
 * @param fill Use samseg to create filled.mgz instead of recon-all.
 * @param normalization2 Use samseg to create brain.mgz instead of recon-all (with --recon).
 * @param use_t2w Use the T2-weighted input when running recon-all.
 * @param use_flair Use the FLAIR-weighted input when running recon-all.
 * @param hires Use -hires when running recon-all.
 * @param subjects_directory Path to the SUBJECTS_DIR.
 * @param pallidum_separate Move pallidum outside of global white matter class, used for analyzing T2 or FLAIR.
 * @param stiffness Set mesh stiffness.
 * @param lesion Turn on lesion segmentation.
 * @param lesion_mask_pattern Pattern needed when using T2 for lesion mask, e.g., 0 1.
 * @param bias_field_smoothing_kernel Width of bias field smoothness.
 * @param registration_file Registration file (LTA or MAT) as output by samseg.
 * @param regmat_file Same as --reg.
 * @param init_lta Initial registration LTA file.
 * @param reg_only Only perform registration.
 * @param ssdd_directory Path to SAMSEG_Data_DIR where the atlas is located.
 * @param save_mesh Save the mesh, useful for longitudinal analysis.
 * @param max_iters Maximum number of iterations.
 * @param dice_file DICE coefficient file for segmentation.
 * @param ignore_unknown Ignore unknown flags.
 * @param smooth_wm_cortex Smooth white matter and cortex priors using specified sigma value.
 * @param profile_file Run using the cProfile Python profiler, with the specified profile file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SamsegOutputs`).
 */
function samseg(
    input_files: Array<InputPathType>,
    output_directory: string,
    t1w_files: Array<InputPathType> | null = null,
    t2w_files: Array<InputPathType> | null = null,
    flair_files: Array<InputPathType> | null = null,
    other_modality_files: Array<InputPathType> | null = null,
    options_file: InputPathType | null = null,
    dissection_photo_mode: string | null = null,
    save_history: boolean = false,
    subject: string | null = null,
    save_posteriors: boolean = false,
    save_probabilities: boolean = false,
    no_save_warp: boolean = false,
    mrf: boolean = false,
    no_mrf: boolean = false,
    threads: number | null = null,
    atlas_directory: string | null = null,
    gmm_file: InputPathType | null = null,
    no_block_coordinate_descent: boolean = false,
    logdomain_costandgradient_calculator: boolean = false,
    no_logdomain_costandgradient_calculator: boolean = false,
    recon: boolean = false,
    fill: boolean = false,
    normalization2: boolean = false,
    use_t2w: boolean = false,
    use_flair: boolean = false,
    hires: boolean = false,
    subjects_directory: string | null = null,
    pallidum_separate: boolean = false,
    stiffness: number | null = null,
    lesion: boolean = false,
    lesion_mask_pattern: Array<number> | null = null,
    bias_field_smoothing_kernel: number | null = null,
    registration_file: InputPathType | null = null,
    regmat_file: InputPathType | null = null,
    init_lta: InputPathType | null = null,
    reg_only: boolean = false,
    ssdd_directory: string | null = null,
    save_mesh: boolean = false,
    max_iters: number | null = null,
    dice_file: InputPathType | null = null,
    ignore_unknown: boolean = false,
    smooth_wm_cortex: number | null = null,
    profile_file: InputPathType | null = null,
    runner: Runner | null = null,
): SamsegOutputs {
    const params = samseg_params(input_files, output_directory, t1w_files, t2w_files, flair_files, other_modality_files, options_file, dissection_photo_mode, save_history, subject, save_posteriors, save_probabilities, no_save_warp, mrf, no_mrf, threads, atlas_directory, gmm_file, no_block_coordinate_descent, logdomain_costandgradient_calculator, no_logdomain_costandgradient_calculator, recon, fill, normalization2, use_t2w, use_flair, hires, subjects_directory, pallidum_separate, stiffness, lesion, lesion_mask_pattern, bias_field_smoothing_kernel, registration_file, regmat_file, init_lta, reg_only, ssdd_directory, save_mesh, max_iters, dice_file, ignore_unknown, smooth_wm_cortex, profile_file)
    return samseg_execute(params, runner);
}


export {
      SAMSEG_METADATA,
      SamsegOutputs,
      SamsegParameters,
      samseg,
      samseg_execute,
      samseg_params,
};
